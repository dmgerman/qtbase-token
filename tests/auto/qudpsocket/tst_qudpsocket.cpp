begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qfileinfo.h>
end_include
begin_include
include|#
directive|include
file|<qdatastream.h>
end_include
begin_include
include|#
directive|include
file|<qudpsocket.h>
end_include
begin_include
include|#
directive|include
file|<qhostaddress.h>
end_include
begin_include
include|#
directive|include
file|<qhostinfo.h>
end_include
begin_include
include|#
directive|include
file|<qmap.h>
end_include
begin_include
include|#
directive|include
file|<QNetworkProxy>
end_include
begin_include
include|#
directive|include
file|<QNetworkInterface>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|"../network-settings.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
end_ifndef
begin_include
include|#
directive|include
file|<QtNetwork/qnetworkconfigmanager.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qnetworkconfiguration.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qnetworksession.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QHostAddress
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QNetworkInterface
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QSharedPointer<QNetworkSession>
argument_list|)
end_macro
begin_comment
comment|//TESTED_CLASS=
end_comment
begin_comment
comment|//TESTED_FILES=
end_comment
begin_macro
name|QT_FORWARD_DECLARE_CLASS
argument_list|(
argument|QUdpSocket
argument_list|)
end_macro
begin_class
DECL|class|tst_QUdpSocket
class|class
name|tst_QUdpSocket
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QUdpSocket
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QUdpSocket
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|initTestCase_data
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|constructing
parameter_list|()
function_decl|;
name|void
name|unconnectedServerAndClientTest
parameter_list|()
function_decl|;
name|void
name|broadcasting
parameter_list|()
function_decl|;
name|void
name|loop_data
parameter_list|()
function_decl|;
name|void
name|loop
parameter_list|()
function_decl|;
name|void
name|ipv6Loop_data
parameter_list|()
function_decl|;
name|void
name|ipv6Loop
parameter_list|()
function_decl|;
name|void
name|readLine
parameter_list|()
function_decl|;
name|void
name|pendingDatagramSize
parameter_list|()
function_decl|;
name|void
name|writeDatagram
parameter_list|()
function_decl|;
name|void
name|performance
parameter_list|()
function_decl|;
name|void
name|bindMode
parameter_list|()
function_decl|;
name|void
name|writeDatagramToNonExistingPeer_data
parameter_list|()
function_decl|;
name|void
name|writeDatagramToNonExistingPeer
parameter_list|()
function_decl|;
name|void
name|writeToNonExistingPeer_data
parameter_list|()
function_decl|;
name|void
name|writeToNonExistingPeer
parameter_list|()
function_decl|;
name|void
name|outOfProcessConnectedClientServerTest
parameter_list|()
function_decl|;
name|void
name|outOfProcessUnconnectedClientServerTest
parameter_list|()
function_decl|;
name|void
name|zeroLengthDatagram
parameter_list|()
function_decl|;
name|void
name|multicastTtlOption_data
parameter_list|()
function_decl|;
name|void
name|multicastTtlOption
parameter_list|()
function_decl|;
name|void
name|multicastLoopbackOption_data
parameter_list|()
function_decl|;
name|void
name|multicastLoopbackOption
parameter_list|()
function_decl|;
name|void
name|multicastJoinBeforeBind_data
parameter_list|()
function_decl|;
name|void
name|multicastJoinBeforeBind
parameter_list|()
function_decl|;
name|void
name|multicastLeaveAfterClose_data
parameter_list|()
function_decl|;
name|void
name|multicastLeaveAfterClose
parameter_list|()
function_decl|;
name|void
name|setMulticastInterface_data
parameter_list|()
function_decl|;
name|void
name|setMulticastInterface
parameter_list|()
function_decl|;
name|void
name|multicast_data
parameter_list|()
function_decl|;
name|void
name|multicast
parameter_list|()
function_decl|;
name|void
name|echo_data
parameter_list|()
function_decl|;
name|void
name|echo
parameter_list|()
function_decl|;
protected|protected
name|slots
protected|:
name|void
name|empty_readyReadSlot
parameter_list|()
function_decl|;
name|void
name|empty_connectedSlot
parameter_list|()
function_decl|;
private|private:
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
DECL|member|netConfMan
name|QNetworkConfigurationManager
modifier|*
name|netConfMan
decl_stmt|;
DECL|member|networkConfiguration
name|QNetworkConfiguration
name|networkConfiguration
decl_stmt|;
DECL|member|networkSession
name|QSharedPointer
argument_list|<
name|QNetworkSession
argument_list|>
name|networkSession
decl_stmt|;
endif|#
directive|endif
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QUdpSocket
name|tst_QUdpSocket
operator|::
name|tst_QUdpSocket
parameter_list|()
block|{
name|Q_SET_DEFAULT_IAP
block|}
end_constructor
begin_destructor
DECL|function|~tst_QUdpSocket
name|tst_QUdpSocket
operator|::
name|~
name|tst_QUdpSocket
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|initTestCase_data
name|void
name|tst_QUdpSocket
operator|::
name|initTestCase_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"setProxy"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"proxyType"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"WithoutProxy"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"WithSocks5Proxy"
argument_list|)
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|QNetworkProxy
operator|::
name|Socks5Proxy
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
name|netConfMan
operator|=
operator|new
name|QNetworkConfigurationManager
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|networkConfiguration
operator|=
name|netConfMan
operator|->
name|defaultConfiguration
argument_list|()
expr_stmt|;
name|networkSession
operator|=
name|QSharedPointer
argument_list|<
name|QNetworkSession
argument_list|>
argument_list|(
operator|new
name|QNetworkSession
argument_list|(
name|networkConfiguration
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|networkSession
operator|->
name|isOpen
argument_list|()
condition|)
block|{
name|networkSession
operator|->
name|open
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|networkSession
operator|->
name|waitForOpened
argument_list|(
literal|30000
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_QUdpSocket
operator|::
name|init
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
block|{
name|QFETCH_GLOBAL
argument_list|(
name|int
argument_list|,
name|proxyType
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxyType
operator|==
name|QNetworkProxy
operator|::
name|Socks5Proxy
condition|)
block|{
name|QNetworkProxy
operator|::
name|setApplicationProxy
argument_list|(
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|Socks5Proxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|1080
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QUdpSocket
operator|::
name|cleanup
parameter_list|()
block|{
name|QNetworkProxy
operator|::
name|setApplicationProxy
argument_list|(
name|QNetworkProxy
operator|::
name|DefaultProxy
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|constructing
name|void
name|tst_QUdpSocket
operator|::
name|constructing
parameter_list|()
block|{
name|QUdpSocket
name|socket
decl_stmt|;
ifdef|#
directive|ifdef
name|FORCE_SESSION
name|socket
operator|.
name|setProperty
argument_list|(
literal|"_q_networksession"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|networkSession
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|socket
operator|.
name|isSequential
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|.
name|socketType
argument_list|()
operator|==
name|QUdpSocket
operator|::
name|UdpSocket
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|socket
operator|.
name|bytesAvailable
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|canReadLine
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|readLine
argument_list|()
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|socketDescriptor
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|error
argument_list|()
argument_list|,
name|QUdpSocket
operator|::
name|UnknownSocketError
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|errorString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Unknown error"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check the state of the socket api
block|}
end_function
begin_function
DECL|function|unconnectedServerAndClientTest
name|void
name|tst_QUdpSocket
operator|::
name|unconnectedServerAndClientTest
parameter_list|()
block|{
name|QUdpSocket
name|serverSocket
decl_stmt|;
ifdef|#
directive|ifdef
name|FORCE_SESSION
name|serverSocket
operator|.
name|setProperty
argument_list|(
literal|"_q_networksession"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|networkSession
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|qRegisterMetaType
argument_list|<
name|QAbstractSocket
operator|::
name|SocketState
argument_list|>
argument_list|(
literal|"QAbstractSocket::SocketState"
argument_list|)
expr_stmt|;
name|QSignalSpy
name|stateChangedSpy
argument_list|(
operator|&
name|serverSocket
argument_list|,
name|SIGNAL
argument_list|(
name|stateChanged
argument_list|(
name|QAbstractSocket
operator|::
name|SocketState
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|serverSocket
operator|.
name|bind
argument_list|()
argument_list|,
name|serverSocket
operator|.
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stateChangedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|const
name|char
modifier|*
name|message
index|[]
init|=
block|{
literal|"Yo mista"
block|,
literal|"Yo"
block|,
literal|"Wassap"
block|}
decl_stmt|;
name|QHostAddress
name|serverAddress
init|=
name|QHostAddress
operator|::
name|LocalHost
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|serverSocket
operator|.
name|localAddress
argument_list|()
operator|==
name|QHostAddress
operator|::
name|Any
operator|||
name|serverSocket
operator|.
name|localAddress
argument_list|()
operator|==
name|QHostAddress
operator|::
name|AnyIPv6
operator|)
condition|)
name|serverAddress
operator|=
name|serverSocket
operator|.
name|localAddress
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|QUdpSocket
name|clientSocket
decl_stmt|;
ifdef|#
directive|ifdef
name|FORCE_SESSION
name|clientSocket
operator|.
name|setProperty
argument_list|(
literal|"_q_networksession"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|networkSession
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|clientSocket
operator|.
name|writeDatagram
argument_list|(
name|message
index|[
name|i
index|]
argument_list|,
name|strlen
argument_list|(
name|message
index|[
name|i
index|]
argument_list|)
argument_list|,
name|serverAddress
argument_list|,
name|serverSocket
operator|.
name|localPort
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|int
argument_list|(
name|strlen
argument_list|(
name|message
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|char
name|buf
index|[
literal|1024
index|]
decl_stmt|;
name|QHostAddress
name|host
decl_stmt|;
name|quint16
name|port
decl_stmt|;
name|QVERIFY
argument_list|(
name|serverSocket
operator|.
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|serverSocket
operator|.
name|readDatagram
argument_list|(
name|buf
argument_list|,
sizeof|sizeof
argument_list|(
name|buf
argument_list|)
argument_list|,
operator|&
name|host
argument_list|,
operator|&
name|port
argument_list|)
argument_list|)
argument_list|,
name|int
argument_list|(
name|strlen
argument_list|(
name|message
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|buf
index|[
name|strlen
argument_list|(
name|message
index|[
name|i
index|]
argument_list|)
index|]
operator|=
literal|'\0'
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QByteArray
argument_list|(
name|buf
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
name|message
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|broadcasting
name|void
name|tst_QUdpSocket
operator|::
name|broadcasting
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
block|{
name|QFETCH_GLOBAL
argument_list|(
name|int
argument_list|,
name|proxyType
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxyType
operator|==
name|QNetworkProxy
operator|::
name|Socks5Proxy
condition|)
block|{
name|QSKIP
argument_list|(
literal|"With socks5 Broadcast is not supported."
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
block|}
block|}
ifdef|#
directive|ifdef
name|Q_OS_AIX
name|QSKIP
argument_list|(
literal|"Broadcast does not work on darko"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
endif|#
directive|endif
specifier|const
name|char
modifier|*
name|message
index|[]
init|=
block|{
literal|"Yo mista"
block|,
literal|""
block|,
literal|"Yo"
block|,
literal|"Wassap"
block|}
decl_stmt|;
name|QList
argument_list|<
name|QHostAddress
argument_list|>
name|broadcastAddresses
decl_stmt|;
foreach|foreach
control|(
name|QNetworkInterface
name|iface
decl|,
name|QNetworkInterface
operator|::
name|allInterfaces
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|iface
operator|.
name|flags
argument_list|()
operator|&
name|QNetworkInterface
operator|::
name|CanBroadcast
operator|)
operator|&&
name|iface
operator|.
name|flags
argument_list|()
operator|&
name|QNetworkInterface
operator|::
name|IsUp
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iface
operator|.
name|addressEntries
argument_list|()
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
name|broadcastAddresses
operator|.
name|append
argument_list|(
name|iface
operator|.
name|addressEntries
argument_list|()
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|broadcast
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|broadcastAddresses
operator|.
name|isEmpty
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"No interface can broadcast"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|QUdpSocket
name|serverSocket
decl_stmt|;
ifdef|#
directive|ifdef
name|FORCE_SESSION
name|serverSocket
operator|.
name|setProperty
argument_list|(
literal|"_q_networksession"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|networkSession
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY2
argument_list|(
name|serverSocket
operator|.
name|bind
argument_list|(
name|QHostAddress
operator|::
name|Any
argument_list|,
literal|5000
argument_list|)
argument_list|,
name|serverSocket
operator|.
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|serverSocket
operator|.
name|state
argument_list|()
argument_list|,
name|QUdpSocket
operator|::
name|BoundState
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|serverSocket
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|empty_readyReadSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QUdpSocket
name|broadcastSocket
decl_stmt|;
ifdef|#
directive|ifdef
name|FORCE_SESSION
name|broadcastSocket
operator|.
name|setProperty
argument_list|(
literal|"_q_networksession"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|networkSession
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|broadcastSocket
operator|.
name|bind
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|100
condition|;
operator|++
name|j
control|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|4
condition|;
name|k
operator|++
control|)
block|{
name|broadcastSocket
operator|.
name|writeDatagram
argument_list|(
name|message
index|[
name|i
index|]
argument_list|,
name|strlen
argument_list|(
name|message
index|[
name|i
index|]
argument_list|)
argument_list|,
name|QHostAddress
operator|::
name|Broadcast
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QHostAddress
name|addr
decl|,
name|broadcastAddresses
control|)
name|broadcastSocket
operator|.
name|writeDatagram
argument_list|(
name|message
index|[
name|i
index|]
argument_list|,
name|strlen
argument_list|(
name|message
index|[
name|i
index|]
argument_list|)
argument_list|,
name|addr
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
block|}
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|15
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_FREEBSD
argument_list|)
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"Broadcasting to 255.255.255.255 does not work on FreeBSD"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// seems that QFAIL() doesn't respect the QEXPECT_FAIL() :/
endif|#
directive|endif
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|serverSocket
operator|.
name|hasPendingDatagrams
argument_list|()
argument_list|)
expr_stmt|;
do|do
block|{
name|QByteArray
name|arr
decl_stmt|;
name|arr
operator|.
name|resize
argument_list|(
name|serverSocket
operator|.
name|pendingDatagramSize
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QHostAddress
name|host
decl_stmt|;
name|quint16
name|port
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|serverSocket
operator|.
name|readDatagram
argument_list|(
name|arr
operator|.
name|data
argument_list|()
argument_list|,
name|arr
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
operator|&
name|host
argument_list|,
operator|&
name|port
argument_list|)
argument_list|,
operator|(
name|int
operator|)
name|strlen
argument_list|(
name|message
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|arr
operator|.
name|resize
argument_list|(
name|strlen
argument_list|(
name|message
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|arr
argument_list|,
name|QByteArray
argument_list|(
name|message
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|serverSocket
operator|.
name|hasPendingDatagrams
argument_list|()
condition|)
do|;
block|}
block|}
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|loop_data
name|void
name|tst_QUdpSocket
operator|::
name|loop_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"peterMessage"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"paulMessage"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"success"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"Almond!\" | \"Joy!\""
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Almond!"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Joy!"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"A\" | \"B\""
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"A"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"AB\" | \"B\""
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"AB"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"AB\" | \"BB\""
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"AB"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"BB"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"A\\0B\" | \"B\\0B\""
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromRawData
argument_list|(
literal|"A\0B"
argument_list|,
literal|3
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromRawData
argument_list|(
literal|"B\0B"
argument_list|,
literal|3
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"(nil)\" | \"(nil)\""
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Bigmessage"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|600
argument_list|,
literal|'@'
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|600
argument_list|,
literal|'@'
argument_list|)
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|loop
name|void
name|tst_QUdpSocket
operator|::
name|loop
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|peterMessage
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|paulMessage
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|QUdpSocket
name|peter
decl_stmt|;
name|QUdpSocket
name|paul
decl_stmt|;
ifdef|#
directive|ifdef
name|FORCE_SESSION
name|peter
operator|.
name|setProperty
argument_list|(
literal|"_q_networksession"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|networkSession
argument_list|)
argument_list|)
expr_stmt|;
name|paul
operator|.
name|setProperty
argument_list|(
literal|"_q_networksession"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|networkSession
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY2
argument_list|(
name|peter
operator|.
name|bind
argument_list|()
argument_list|,
name|peter
operator|.
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|paul
operator|.
name|bind
argument_list|()
argument_list|,
name|paul
operator|.
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QHostAddress
name|peterAddress
init|=
name|QHostAddress
operator|::
name|LocalHost
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|peter
operator|.
name|localAddress
argument_list|()
operator|==
name|QHostAddress
operator|::
name|Any
operator|||
name|peter
operator|.
name|localAddress
argument_list|()
operator|==
name|QHostAddress
operator|::
name|AnyIPv6
operator|)
condition|)
name|peterAddress
operator|=
name|peter
operator|.
name|localAddress
argument_list|()
expr_stmt|;
name|QHostAddress
name|pualAddress
init|=
name|QHostAddress
operator|::
name|LocalHost
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|paul
operator|.
name|localAddress
argument_list|()
operator|==
name|QHostAddress
operator|::
name|Any
operator|||
name|paul
operator|.
name|localAddress
argument_list|()
operator|==
name|QHostAddress
operator|::
name|AnyIPv6
operator|)
condition|)
name|pualAddress
operator|=
name|paul
operator|.
name|localAddress
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|peter
operator|.
name|writeDatagram
argument_list|(
name|peterMessage
operator|.
name|data
argument_list|()
argument_list|,
name|peterMessage
operator|.
name|length
argument_list|()
argument_list|,
name|pualAddress
argument_list|,
name|paul
operator|.
name|localPort
argument_list|()
argument_list|)
argument_list|,
name|qint64
argument_list|(
name|peterMessage
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|paul
operator|.
name|writeDatagram
argument_list|(
name|paulMessage
operator|.
name|data
argument_list|()
argument_list|,
name|paulMessage
operator|.
name|length
argument_list|()
argument_list|,
name|peterAddress
argument_list|,
name|peter
operator|.
name|localPort
argument_list|()
argument_list|)
argument_list|,
name|qint64
argument_list|(
name|paulMessage
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|peter
operator|.
name|waitForReadyRead
argument_list|(
literal|9000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|paul
operator|.
name|waitForReadyRead
argument_list|(
literal|9000
argument_list|)
argument_list|)
expr_stmt|;
name|char
name|peterBuffer
index|[
literal|16
operator|*
literal|1024
index|]
decl_stmt|;
name|char
name|paulBuffer
index|[
literal|16
operator|*
literal|1024
index|]
decl_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|QCOMPARE
argument_list|(
name|peter
operator|.
name|readDatagram
argument_list|(
name|peterBuffer
argument_list|,
sizeof|sizeof
argument_list|(
name|peterBuffer
argument_list|)
argument_list|)
argument_list|,
name|qint64
argument_list|(
name|paulMessage
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|paul
operator|.
name|readDatagram
argument_list|(
name|paulBuffer
argument_list|,
sizeof|sizeof
argument_list|(
name|peterBuffer
argument_list|)
argument_list|)
argument_list|,
name|qint64
argument_list|(
name|peterMessage
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|peter
operator|.
name|readDatagram
argument_list|(
name|peterBuffer
argument_list|,
sizeof|sizeof
argument_list|(
name|peterBuffer
argument_list|)
argument_list|)
operator|!=
name|paulMessage
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|paul
operator|.
name|readDatagram
argument_list|(
name|paulBuffer
argument_list|,
sizeof|sizeof
argument_list|(
name|peterBuffer
argument_list|)
argument_list|)
operator|!=
name|peterMessage
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|QByteArray
argument_list|(
name|peterBuffer
argument_list|,
name|paulMessage
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|paulMessage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QByteArray
argument_list|(
name|paulBuffer
argument_list|,
name|peterMessage
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|peterMessage
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|ipv6Loop_data
name|void
name|tst_QUdpSocket
operator|::
name|ipv6Loop_data
parameter_list|()
block|{
name|loop_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ipv6Loop
name|void
name|tst_QUdpSocket
operator|::
name|ipv6Loop
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_NO_IPV6
argument_list|)
name|QSKIP
argument_list|(
literal|"IPv6 is not yet supported"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|peterMessage
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|paulMessage
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|QUdpSocket
name|peter
decl_stmt|;
name|QUdpSocket
name|paul
decl_stmt|;
ifdef|#
directive|ifdef
name|FORCE_SESSION
name|peter
operator|.
name|setProperty
argument_list|(
literal|"_q_networksession"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|networkSession
argument_list|)
argument_list|)
expr_stmt|;
name|paul
operator|.
name|setProperty
argument_list|(
literal|"_q_networksession"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|networkSession
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|quint16
name|peterPort
init|=
literal|28124
decl_stmt|;
name|quint16
name|paulPort
init|=
literal|28123
decl_stmt|;
if|if
condition|(
operator|!
name|peter
operator|.
name|bind
argument_list|(
name|QHostAddress
operator|::
name|LocalHostIPv6
argument_list|,
name|peterPort
argument_list|)
condition|)
block|{
name|QCOMPARE
argument_list|(
name|peter
operator|.
name|error
argument_list|()
argument_list|,
name|QUdpSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|paul
operator|.
name|bind
argument_list|(
name|QHostAddress
operator|::
name|LocalHostIPv6
argument_list|,
name|paulPort
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|peter
operator|.
name|writeDatagram
argument_list|(
name|peterMessage
operator|.
name|data
argument_list|()
argument_list|,
name|peterMessage
operator|.
name|length
argument_list|()
argument_list|,
name|QHostAddress
argument_list|(
literal|"::1"
argument_list|)
argument_list|,
name|paulPort
argument_list|)
argument_list|,
name|qint64
argument_list|(
name|peterMessage
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|paul
operator|.
name|writeDatagram
argument_list|(
name|paulMessage
operator|.
name|data
argument_list|()
argument_list|,
name|paulMessage
operator|.
name|length
argument_list|()
argument_list|,
name|QHostAddress
argument_list|(
literal|"::1"
argument_list|)
argument_list|,
name|peterPort
argument_list|)
argument_list|,
name|qint64
argument_list|(
name|paulMessage
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|char
name|peterBuffer
index|[
literal|16
operator|*
literal|1024
index|]
decl_stmt|;
name|char
name|paulBuffer
index|[
literal|16
operator|*
literal|1024
index|]
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QVERIFY
argument_list|(
name|peter
operator|.
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|paul
operator|.
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|QVERIFY
argument_list|(
name|peter
operator|.
name|waitForReadyRead
argument_list|(
literal|15000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|paul
operator|.
name|waitForReadyRead
argument_list|(
literal|15000
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|success
condition|)
block|{
name|QCOMPARE
argument_list|(
name|peter
operator|.
name|readDatagram
argument_list|(
name|peterBuffer
argument_list|,
sizeof|sizeof
argument_list|(
name|peterBuffer
argument_list|)
argument_list|)
argument_list|,
name|qint64
argument_list|(
name|paulMessage
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|paul
operator|.
name|readDatagram
argument_list|(
name|paulBuffer
argument_list|,
sizeof|sizeof
argument_list|(
name|peterBuffer
argument_list|)
argument_list|)
argument_list|,
name|qint64
argument_list|(
name|peterMessage
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|peter
operator|.
name|readDatagram
argument_list|(
name|peterBuffer
argument_list|,
sizeof|sizeof
argument_list|(
name|peterBuffer
argument_list|)
argument_list|)
operator|!=
name|paulMessage
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|paul
operator|.
name|readDatagram
argument_list|(
name|paulBuffer
argument_list|,
sizeof|sizeof
argument_list|(
name|peterBuffer
argument_list|)
argument_list|)
operator|!=
name|peterMessage
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|QByteArray
argument_list|(
name|peterBuffer
argument_list|,
name|paulMessage
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|paulMessage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QByteArray
argument_list|(
name|paulBuffer
argument_list|,
name|peterMessage
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|peterMessage
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|empty_readyReadSlot
name|void
name|tst_QUdpSocket
operator|::
name|empty_readyReadSlot
parameter_list|()
block|{
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|empty_connectedSlot
name|void
name|tst_QUdpSocket
operator|::
name|empty_connectedSlot
parameter_list|()
block|{
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|readLine
name|void
name|tst_QUdpSocket
operator|::
name|readLine
parameter_list|()
block|{
name|QUdpSocket
name|socket1
decl_stmt|;
name|QUdpSocket
name|socket2
decl_stmt|;
ifdef|#
directive|ifdef
name|FORCE_SESSION
name|socket1
operator|.
name|setProperty
argument_list|(
literal|"_q_networksession"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|networkSession
argument_list|)
argument_list|)
expr_stmt|;
name|socket2
operator|.
name|setProperty
argument_list|(
literal|"_q_networksession"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|networkSession
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY2
argument_list|(
name|socket1
operator|.
name|bind
argument_list|()
argument_list|,
name|socket1
operator|.
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|socket2
operator|.
name|connectToHost
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|socket1
operator|.
name|localPort
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket2
operator|.
name|waitForConnected
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|pendingDatagramSize
name|void
name|tst_QUdpSocket
operator|::
name|pendingDatagramSize
parameter_list|()
block|{
name|QUdpSocket
name|server
decl_stmt|;
ifdef|#
directive|ifdef
name|FORCE_SESSION
name|server
operator|.
name|setProperty
argument_list|(
literal|"_q_networksession"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|networkSession
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY2
argument_list|(
name|server
operator|.
name|bind
argument_list|()
argument_list|,
name|server
operator|.
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QHostAddress
name|serverAddress
init|=
name|QHostAddress
operator|::
name|LocalHost
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|server
operator|.
name|localAddress
argument_list|()
operator|==
name|QHostAddress
operator|::
name|Any
operator|||
name|server
operator|.
name|localAddress
argument_list|()
operator|==
name|QHostAddress
operator|::
name|AnyIPv6
operator|)
condition|)
name|serverAddress
operator|=
name|server
operator|.
name|localAddress
argument_list|()
expr_stmt|;
name|QUdpSocket
name|client
decl_stmt|;
ifdef|#
directive|ifdef
name|FORCE_SESSION
name|client
operator|.
name|setProperty
argument_list|(
literal|"_q_networksession"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|networkSession
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|client
operator|.
name|writeDatagram
argument_list|(
literal|"this is"
argument_list|,
literal|7
argument_list|,
name|serverAddress
argument_list|,
name|server
operator|.
name|localPort
argument_list|()
argument_list|)
operator|==
literal|7
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|client
operator|.
name|writeDatagram
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|serverAddress
argument_list|,
name|server
operator|.
name|localPort
argument_list|()
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|client
operator|.
name|writeDatagram
argument_list|(
literal|"3 messages"
argument_list|,
literal|10
argument_list|,
name|serverAddress
argument_list|,
name|server
operator|.
name|localPort
argument_list|()
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|char
name|c
init|=
literal|0
decl_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|waitForReadyRead
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|server
operator|.
name|hasPendingDatagrams
argument_list|()
condition|)
block|{
if|#
directive|if
name|defined
name|Q_OS_HPUX
operator|&&
name|defined
name|__ia64
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"HP-UX 11i v2 can't determine the datagram size correctly."
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|server
operator|.
name|pendingDatagramSize
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|=
literal|'\0'
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|readDatagram
argument_list|(
operator|&
name|c
argument_list|,
literal|1
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
literal|'t'
argument_list|)
expr_stmt|;
name|c
operator|=
literal|'\0'
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"does not have the 1st datagram"
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|server
operator|.
name|hasPendingDatagrams
argument_list|()
condition|)
block|{
name|QCOMPARE
argument_list|(
name|server
operator|.
name|pendingDatagramSize
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|readDatagram
argument_list|(
operator|&
name|c
argument_list|,
literal|1
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
literal|'\0'
argument_list|)
expr_stmt|;
comment|// untouched
name|c
operator|=
literal|'\0'
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"does not have the 2nd datagram"
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|server
operator|.
name|hasPendingDatagrams
argument_list|()
condition|)
block|{
name|QCOMPARE
argument_list|(
name|server
operator|.
name|pendingDatagramSize
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|readDatagram
argument_list|(
operator|&
name|c
argument_list|,
literal|1
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
literal|'3'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"does not have the 3rd datagram"
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|writeDatagram
name|void
name|tst_QUdpSocket
operator|::
name|writeDatagram
parameter_list|()
block|{
name|QUdpSocket
name|server
decl_stmt|;
ifdef|#
directive|ifdef
name|FORCE_SESSION
name|server
operator|.
name|setProperty
argument_list|(
literal|"_q_networksession"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|networkSession
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY2
argument_list|(
name|server
operator|.
name|bind
argument_list|()
argument_list|,
name|server
operator|.
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QHostAddress
name|serverAddress
init|=
name|QHostAddress
operator|::
name|LocalHost
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|server
operator|.
name|localAddress
argument_list|()
operator|==
name|QHostAddress
operator|::
name|Any
operator|||
name|server
operator|.
name|localAddress
argument_list|()
operator|==
name|QHostAddress
operator|::
name|AnyIPv6
operator|)
condition|)
name|serverAddress
operator|=
name|server
operator|.
name|localAddress
argument_list|()
expr_stmt|;
name|QUdpSocket
name|client
decl_stmt|;
ifdef|#
directive|ifdef
name|FORCE_SESSION
name|client
operator|.
name|setProperty
argument_list|(
literal|"_q_networksession"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|networkSession
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|qRegisterMetaType
argument_list|<
name|qint64
argument_list|>
argument_list|(
literal|"qint64"
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|QAbstractSocket
operator|::
name|SocketError
argument_list|>
argument_list|(
literal|"QAbstractSocket::SocketError"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
condition|;
name|i
operator|++
control|)
block|{
name|QSignalSpy
name|errorspy
argument_list|(
operator|&
name|client
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QAbstractSocket
operator|::
name|SocketError
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|bytesspy
argument_list|(
operator|&
name|client
argument_list|,
name|SIGNAL
argument_list|(
name|bytesWritten
argument_list|(
name|qint64
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|qint64
name|written
init|=
name|client
operator|.
name|writeDatagram
argument_list|(
name|QByteArray
argument_list|(
name|i
operator|*
literal|1024
argument_list|,
literal|'w'
argument_list|)
argument_list|,
name|serverAddress
argument_list|,
name|server
operator|.
name|localPort
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|written
operator|!=
name|i
operator|*
literal|1024
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_HPUX
argument_list|)
name|QSKIP
argument_list|(
literal|"HP-UX 11.11 on hai (PA-RISC 64) truncates too long datagrams."
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|bytesspy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|errorspy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
cast|static_cast
argument_list|<
specifier|const
name|int
operator|*
argument_list|>
argument_list|(
name|errorspy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|QUdpSocket
operator|::
name|DatagramTooLargeError
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|client
operator|.
name|error
argument_list|()
argument_list|,
name|QUdpSocket
operator|::
name|DatagramTooLargeError
argument_list|)
expr_stmt|;
break|break;
block|}
name|QVERIFY
argument_list|(
name|bytesspy
operator|.
name|count
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
cast|static_cast
argument_list|<
specifier|const
name|qint64
operator|*
argument_list|>
argument_list|(
name|bytesspy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|qint64
argument_list|(
name|i
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|errorspy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|server
operator|.
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
condition|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
comment|//symbian receive buffer for datagrams is ~30k, but it can send datagrams up to the maximum 64k...
if|if
condition|(
name|i
operator|>
literal|28
condition|)
block|{
name|i
operator|=
literal|64
expr_stmt|;
continue|continue;
block|}
endif|#
directive|endif
name|QSKIP
argument_list|(
name|QString
argument_list|(
literal|"UDP packet lost at size %1, unable to complete the test."
argument_list|)
operator|.
name|arg
argument_list|(
name|i
operator|*
literal|1024
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|server
operator|.
name|pendingDatagramSize
argument_list|()
argument_list|,
name|qint64
argument_list|(
name|i
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|readDatagram
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|performance
name|void
name|tst_QUdpSocket
operator|::
name|performance
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
comment|// Large packets seems not to go through on Symbian
comment|// Reason might be also fragmentation due to VPN connection etc
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
name|QFETCH_GLOBAL
argument_list|(
name|int
argument_list|,
name|proxyType
argument_list|)
expr_stmt|;
name|int
name|arrSize
init|=
literal|8192
decl_stmt|;
if|if
condition|(
name|setProxy
operator|&&
name|proxyType
operator|==
name|QNetworkProxy
operator|::
name|Socks5Proxy
condition|)
name|arrSize
operator|=
literal|1024
expr_stmt|;
name|QByteArray
name|arr
argument_list|(
name|arrSize
argument_list|,
literal|'@'
argument_list|)
decl_stmt|;
else|#
directive|else
name|QByteArray
name|arr
argument_list|(
literal|8192
argument_list|,
literal|'@'
argument_list|)
decl_stmt|;
endif|#
directive|endif
comment|// Q_OS_SYMBIAN
name|QUdpSocket
name|server
decl_stmt|;
ifdef|#
directive|ifdef
name|FORCE_SESSION
name|server
operator|.
name|setProperty
argument_list|(
literal|"_q_networksession"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|networkSession
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY2
argument_list|(
name|server
operator|.
name|bind
argument_list|()
argument_list|,
name|server
operator|.
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QHostAddress
name|serverAddress
init|=
name|QHostAddress
operator|::
name|LocalHost
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|server
operator|.
name|localAddress
argument_list|()
operator|==
name|QHostAddress
operator|::
name|Any
operator|||
name|server
operator|.
name|localAddress
argument_list|()
operator|==
name|QHostAddress
operator|::
name|AnyIPv6
operator|)
condition|)
name|serverAddress
operator|=
name|server
operator|.
name|localAddress
argument_list|()
expr_stmt|;
name|QUdpSocket
name|client
decl_stmt|;
ifdef|#
directive|ifdef
name|FORCE_SESSION
name|client
operator|.
name|setProperty
argument_list|(
literal|"_q_networksession"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|networkSession
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|client
operator|.
name|connectToHost
argument_list|(
name|serverAddress
argument_list|,
name|server
operator|.
name|localPort
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|client
operator|.
name|waitForConnected
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|QTime
name|stopWatch
decl_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
name|qint64
name|nbytes
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|stopWatch
operator|.
name|elapsed
argument_list|()
operator|<
literal|5000
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|client
operator|.
name|write
argument_list|(
name|arr
operator|.
name|data
argument_list|()
argument_list|,
name|arr
operator|.
name|size
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
block|{
do|do
block|{
name|nbytes
operator|+=
name|server
operator|.
name|readDatagram
argument_list|(
name|arr
operator|.
name|data
argument_list|()
argument_list|,
name|arr
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|server
operator|.
name|hasPendingDatagrams
argument_list|()
condition|)
do|;
block|}
block|}
block|}
name|float
name|secs
init|=
name|stopWatch
operator|.
name|elapsed
argument_list|()
operator|/
literal|1000.0
decl_stmt|;
name|qDebug
argument_list|(
literal|"\t%.2fMB/%.2fs: %.2fMB/s"
argument_list|,
name|float
argument_list|(
name|nbytes
operator|/
operator|(
literal|1024.0
operator|*
literal|1024.0
operator|)
argument_list|)
argument_list|,
name|secs
argument_list|,
name|float
argument_list|(
name|nbytes
operator|/
operator|(
literal|1024.0
operator|*
literal|1024.0
operator|)
argument_list|)
operator|/
name|secs
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
if|if
condition|(
name|nbytes
operator|==
literal|0
condition|)
block|{
name|qDebug
argument_list|(
literal|"No bytes passed through local UDP socket, since UDP socket write returns EWOULDBLOCK"
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"Should try with blocking sockets, but it is not currently possible due to Open C defect"
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|bindMode
name|void
name|tst_QUdpSocket
operator|::
name|bindMode
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
block|{
name|QFETCH_GLOBAL
argument_list|(
name|int
argument_list|,
name|proxyType
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxyType
operator|==
name|QNetworkProxy
operator|::
name|Socks5Proxy
condition|)
block|{
name|QSKIP
argument_list|(
literal|"With socks5 explicit port binding is not supported."
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
name|QUdpSocket
name|socket
decl_stmt|;
ifdef|#
directive|ifdef
name|FORCE_SESSION
name|socket
operator|.
name|setProperty
argument_list|(
literal|"_q_networksession"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|networkSession
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY2
argument_list|(
name|socket
operator|.
name|bind
argument_list|()
argument_list|,
name|socket
operator|.
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QUdpSocket
name|socket2
decl_stmt|;
ifdef|#
directive|ifdef
name|FORCE_SESSION
name|socket2
operator|.
name|setProperty
argument_list|(
literal|"_q_networksession"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|networkSession
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
operator|!
name|socket2
operator|.
name|bind
argument_list|(
name|socket
operator|.
name|localPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
if|if
condition|(
name|RProcess
argument_list|()
operator|.
name|HasCapability
argument_list|(
name|ECapabilityNetworkControl
argument_list|)
condition|)
block|{
name|qDebug
argument_list|(
literal|"Test executed *with* NetworkControl capability"
argument_list|)
expr_stmt|;
comment|// In Symbian OS ReuseAddressHint together with NetworkControl capability
comment|// gives application *always* right to bind to port. I.e. it does not matter
comment|// if first socket was bound with any bind flag. Since autotests in Symbian
comment|// are currently executed with ALL -TCB rights, this path is the one executed.
name|QVERIFY
argument_list|(
name|socket2
operator|.
name|bind
argument_list|(
name|socket
operator|.
name|localPort
argument_list|()
argument_list|,
name|QUdpSocket
operator|::
name|ReuseAddressHint
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
name|socket2
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|.
name|bind
argument_list|(
literal|0
argument_list|,
name|QUdpSocket
operator|::
name|ShareAddress
argument_list|)
argument_list|,
name|socket
operator|.
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket2
operator|.
name|bind
argument_list|(
name|socket
operator|.
name|localPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket2
operator|.
name|bind
argument_list|(
name|socket
operator|.
name|localPort
argument_list|()
argument_list|,
name|QUdpSocket
operator|::
name|ReuseAddressHint
argument_list|)
argument_list|,
name|socket2
operator|.
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
name|socket2
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|.
name|bind
argument_list|(
literal|0
argument_list|,
name|QUdpSocket
operator|::
name|DontShareAddress
argument_list|)
argument_list|,
name|socket
operator|.
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket2
operator|.
name|bind
argument_list|(
name|socket
operator|.
name|localPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket2
operator|.
name|bind
argument_list|(
name|socket
operator|.
name|localPort
argument_list|()
argument_list|,
name|QUdpSocket
operator|::
name|ReuseAddressHint
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
name|socket2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|qDebug
argument_list|(
literal|"Test executed *without* NetworkControl capability"
argument_list|)
expr_stmt|;
comment|// If we don't have NetworkControl capability, attempt to bind already bound
comment|// address will *always* fail. I.e. it does not matter if first socket was
comment|// bound with any bind flag.
name|QVERIFY
argument_list|(
operator|!
name|socket2
operator|.
name|bind
argument_list|(
name|socket
operator|.
name|localPort
argument_list|()
argument_list|,
name|QUdpSocket
operator|::
name|ReuseAddressHint
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|.
name|bind
argument_list|(
literal|0
argument_list|,
name|QUdpSocket
operator|::
name|ShareAddress
argument_list|)
argument_list|,
name|socket
operator|.
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket2
operator|.
name|bind
argument_list|(
name|socket
operator|.
name|localPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|socket2
operator|.
name|bind
argument_list|(
name|socket
operator|.
name|localPort
argument_list|()
argument_list|,
name|QUdpSocket
operator|::
name|ReuseAddressHint
argument_list|)
argument_list|,
name|socket2
operator|.
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|.
name|bind
argument_list|(
literal|0
argument_list|,
name|QUdpSocket
operator|::
name|DontShareAddress
argument_list|)
argument_list|,
name|socket
operator|.
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket2
operator|.
name|bind
argument_list|(
name|socket
operator|.
name|localPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket2
operator|.
name|bind
argument_list|(
name|socket
operator|.
name|localPort
argument_list|()
argument_list|,
name|QUdpSocket
operator|::
name|ReuseAddressHint
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
name|QVERIFY
argument_list|(
operator|!
name|socket2
operator|.
name|bind
argument_list|(
name|socket
operator|.
name|localPort
argument_list|()
argument_list|,
name|QUdpSocket
operator|::
name|ReuseAddressHint
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|.
name|bind
argument_list|(
literal|0
argument_list|,
name|QUdpSocket
operator|::
name|ShareAddress
argument_list|)
argument_list|,
name|socket
operator|.
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket2
operator|.
name|bind
argument_list|(
name|socket
operator|.
name|localPort
argument_list|()
argument_list|)
argument_list|,
name|socket2
operator|.
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|socket2
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket2
operator|.
name|bind
argument_list|(
name|socket
operator|.
name|localPort
argument_list|()
argument_list|,
name|QUdpSocket
operator|::
name|ReuseAddressHint
argument_list|)
argument_list|,
name|socket2
operator|.
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// Depending on the user's privileges, this or will succeed or
comment|// fail. Admins are allowed to reuse the address, but nobody else.
if|if
condition|(
operator|!
name|socket2
operator|.
name|bind
argument_list|(
name|socket
operator|.
name|localPort
argument_list|()
argument_list|,
name|QUdpSocket
operator|::
name|ReuseAddressHint
argument_list|)
operator|,
name|socket2
operator|.
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
condition|)
name|qWarning
argument_list|(
literal|"Failed to bind with QUdpSocket::ReuseAddressHint, user isn't an adminstrator?"
argument_list|)
expr_stmt|;
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|.
name|bind
argument_list|(
literal|0
argument_list|,
name|QUdpSocket
operator|::
name|ShareAddress
argument_list|)
argument_list|,
name|socket
operator|.
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket2
operator|.
name|bind
argument_list|(
name|socket
operator|.
name|localPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|.
name|bind
argument_list|(
literal|0
argument_list|,
name|QUdpSocket
operator|::
name|DontShareAddress
argument_list|)
argument_list|,
name|socket
operator|.
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket2
operator|.
name|bind
argument_list|(
name|socket
operator|.
name|localPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket2
operator|.
name|bind
argument_list|(
name|socket
operator|.
name|localPort
argument_list|()
argument_list|,
name|QUdpSocket
operator|::
name|ReuseAddressHint
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|writeDatagramToNonExistingPeer_data
name|void
name|tst_QUdpSocket
operator|::
name|writeDatagramToNonExistingPeer_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"bind"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QHostAddress
argument_list|>
argument_list|(
literal|"peerAddress"
argument_list|)
expr_stmt|;
name|QHostAddress
name|localhost
argument_list|(
name|QHostAddress
operator|::
name|LocalHost
argument_list|)
decl_stmt|;
name|QHostAddress
name|remote
init|=
name|QHostInfo
operator|::
name|fromName
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
operator|.
name|addresses
argument_list|()
operator|.
name|first
argument_list|()
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"localhost-unbound"
argument_list|)
operator|<<
literal|false
operator|<<
name|localhost
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"localhost-bound"
argument_list|)
operator|<<
literal|true
operator|<<
name|localhost
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"remote-unbound"
argument_list|)
operator|<<
literal|false
operator|<<
name|remote
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"remote-bound"
argument_list|)
operator|<<
literal|true
operator|<<
name|remote
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeDatagramToNonExistingPeer
name|void
name|tst_QUdpSocket
operator|::
name|writeDatagramToNonExistingPeer
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|bind
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QHostAddress
argument_list|,
name|peerAddress
argument_list|)
expr_stmt|;
name|quint16
name|peerPort
init|=
literal|33533
operator|+
name|int
argument_list|(
name|bind
argument_list|)
decl_stmt|;
name|QUdpSocket
name|sUdp
decl_stmt|;
ifdef|#
directive|ifdef
name|FORCE_SESSION
name|sUdp
operator|.
name|setProperty
argument_list|(
literal|"_q_networksession"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|networkSession
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QSignalSpy
name|sReadyReadSpy
argument_list|(
operator|&
name|sUdp
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|bind
condition|)
name|QVERIFY
argument_list|(
name|sUdp
operator|.
name|bind
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sUdp
operator|.
name|writeDatagram
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|,
name|peerAddress
argument_list|,
name|peerPort
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sReadyReadSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeToNonExistingPeer_data
name|void
name|tst_QUdpSocket
operator|::
name|writeToNonExistingPeer_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QHostAddress
argument_list|>
argument_list|(
literal|"peerAddress"
argument_list|)
expr_stmt|;
name|QHostAddress
name|localhost
argument_list|(
name|QHostAddress
operator|::
name|LocalHost
argument_list|)
decl_stmt|;
name|QHostAddress
name|remote
init|=
name|QHostInfo
operator|::
name|fromName
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
operator|.
name|addresses
argument_list|()
operator|.
name|first
argument_list|()
decl_stmt|;
comment|// write (required to be connected)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"localhost"
argument_list|)
operator|<<
name|localhost
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"remote"
argument_list|)
operator|<<
name|remote
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeToNonExistingPeer
name|void
name|tst_QUdpSocket
operator|::
name|writeToNonExistingPeer
parameter_list|()
block|{
name|QSKIP
argument_list|(
literal|"Connected-mode UDP sockets and their behaviour are erratic"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QHostAddress
argument_list|,
name|peerAddress
argument_list|)
expr_stmt|;
name|quint16
name|peerPort
init|=
literal|34534
decl_stmt|;
name|qRegisterMetaType
argument_list|<
name|QAbstractSocket
operator|::
name|SocketError
argument_list|>
argument_list|(
literal|"QAbstractSocket::SocketError"
argument_list|)
expr_stmt|;
name|QUdpSocket
name|sConnected
decl_stmt|;
ifdef|#
directive|ifdef
name|FORCE_SESSION
name|sConnected
operator|.
name|setProperty
argument_list|(
literal|"_q_networksession"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|networkSession
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QSignalSpy
name|sConnectedReadyReadSpy
argument_list|(
operator|&
name|sConnected
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|sConnectedErrorSpy
argument_list|(
operator|&
name|sConnected
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QAbstractSocket
operator|::
name|SocketError
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|sConnected
operator|.
name|connectToHost
argument_list|(
name|peerAddress
argument_list|,
name|peerPort
argument_list|,
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sConnected
operator|.
name|waitForConnected
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
comment|// the first write succeeds...
name|QCOMPARE
argument_list|(
name|sConnected
operator|.
name|write
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// the second one should fail!
name|QTest
operator|::
name|qSleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// do not process events
name|QCOMPARE
argument_list|(
name|sConnected
operator|.
name|write
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
argument_list|,
name|qint64
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|sConnected
operator|.
name|error
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|QUdpSocket
operator|::
name|ConnectionRefusedError
argument_list|)
argument_list|)
expr_stmt|;
comment|// the third one will succeed...
name|QCOMPARE
argument_list|(
name|sConnected
operator|.
name|write
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sConnectedReadyReadSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sConnectedErrorSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|sConnected
operator|.
name|error
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|QUdpSocket
operator|::
name|ConnectionRefusedError
argument_list|)
argument_list|)
expr_stmt|;
comment|// we should now get a read error
name|QCOMPARE
argument_list|(
name|sConnected
operator|.
name|write
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qSleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// do not process events
name|char
name|buf
index|[
literal|2
index|]
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|sConnected
operator|.
name|hasPendingDatagrams
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sConnected
operator|.
name|bytesAvailable
argument_list|()
argument_list|,
name|Q_INT64_C
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sConnected
operator|.
name|pendingDatagramSize
argument_list|()
argument_list|,
name|Q_INT64_C
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sConnected
operator|.
name|readDatagram
argument_list|(
name|buf
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Q_INT64_C
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|sConnected
operator|.
name|error
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|QUdpSocket
operator|::
name|ConnectionRefusedError
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sConnected
operator|.
name|write
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qSleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// do not process events
name|QCOMPARE
argument_list|(
name|sConnected
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Q_INT64_C
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|sConnected
operator|.
name|error
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|QUdpSocket
operator|::
name|ConnectionRefusedError
argument_list|)
argument_list|)
expr_stmt|;
comment|// we should still be connected
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|sConnected
operator|.
name|state
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|QUdpSocket
operator|::
name|ConnectedState
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|outOfProcessConnectedClientServerTest
name|void
name|tst_QUdpSocket
operator|::
name|outOfProcessConnectedClientServerTest
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
name|QSKIP
argument_list|(
literal|"This test depends on reading data from QProcess (not supported on Qt/WinCE and Symbian)."
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|QT_NO_PROCESS
argument_list|)
name|QSKIP
argument_list|(
literal|"Qt was compiled with QT_NO_PROCESS"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
else|#
directive|else
name|QProcess
name|serverProcess
decl_stmt|;
name|serverProcess
operator|.
name|start
argument_list|(
name|QLatin1String
argument_list|(
literal|"clientserver/clientserver server 1 1"
argument_list|)
argument_list|,
name|QIODevice
operator|::
name|ReadWrite
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|serverProcess
operator|.
name|waitForStarted
argument_list|(
literal|3000
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
literal|"Failed to start subprocess: "
operator|+
name|serverProcess
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Wait until the server has started and reports success.
while|while
condition|(
operator|!
name|serverProcess
operator|.
name|canReadLine
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|serverProcess
operator|.
name|waitForReadyRead
argument_list|(
literal|3000
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|serverGreeting
init|=
name|serverProcess
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|serverGreeting
operator|!=
name|QByteArray
argument_list|(
literal|"XXX\n"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|serverPort
init|=
name|serverGreeting
operator|.
name|trimmed
argument_list|()
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|serverPort
operator|>
literal|0
operator|&&
name|serverPort
operator|<
literal|65536
argument_list|)
expr_stmt|;
name|QProcess
name|clientProcess
decl_stmt|;
name|clientProcess
operator|.
name|start
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"clientserver/clientserver connectedclient %1 %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
literal|"127.0.0.1"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|serverPort
argument_list|)
argument_list|,
name|QIODevice
operator|::
name|ReadWrite
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|clientProcess
operator|.
name|waitForStarted
argument_list|(
literal|3000
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
literal|"Failed to start subprocess: "
operator|+
name|clientProcess
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Wait until the server has started and reports success.
while|while
condition|(
operator|!
name|clientProcess
operator|.
name|canReadLine
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|clientProcess
operator|.
name|waitForReadyRead
argument_list|(
literal|3000
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|clientGreeting
init|=
name|clientProcess
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|clientGreeting
argument_list|,
name|QByteArray
argument_list|(
literal|"ok\n"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Let the client and server talk for 3 seconds
name|QTest
operator|::
name|qWait
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|QStringList
name|serverData
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|serverProcess
operator|.
name|readAll
argument_list|()
argument_list|)
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
name|QStringList
name|clientData
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|clientProcess
operator|.
name|readAll
argument_list|()
argument_list|)
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|serverData
operator|.
name|size
argument_list|()
operator|>
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|clientData
operator|.
name|size
argument_list|()
operator|>
literal|5
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clientData
operator|.
name|size
argument_list|()
operator|/
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|clientData
operator|.
name|at
argument_list|(
name|i
operator|*
literal|2
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"readData()"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|serverData
operator|.
name|at
argument_list|(
name|i
operator|*
literal|3
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"readData()"
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|cdata
init|=
name|clientData
operator|.
name|at
argument_list|(
name|i
operator|*
literal|2
operator|+
literal|1
argument_list|)
decl_stmt|;
name|QString
name|sdata
init|=
name|serverData
operator|.
name|at
argument_list|(
name|i
operator|*
literal|3
operator|+
literal|1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|cdata
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"got "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cdata
operator|.
name|mid
argument_list|(
literal|4
argument_list|)
operator|.
name|trimmed
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|,
name|sdata
operator|.
name|mid
argument_list|(
literal|4
argument_list|)
operator|.
name|trimmed
argument_list|()
operator|.
name|toInt
argument_list|()
operator|*
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|serverData
operator|.
name|at
argument_list|(
name|i
operator|*
literal|3
operator|+
literal|2
argument_list|)
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"sending "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|serverData
operator|.
name|at
argument_list|(
name|i
operator|*
literal|3
operator|+
literal|2
argument_list|)
operator|.
name|trimmed
argument_list|()
operator|.
name|mid
argument_list|(
literal|8
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|sdata
operator|.
name|mid
argument_list|(
literal|4
argument_list|)
operator|.
name|trimmed
argument_list|()
operator|.
name|toInt
argument_list|()
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
name|clientProcess
operator|.
name|kill
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|clientProcess
operator|.
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
name|serverProcess
operator|.
name|kill
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|serverProcess
operator|.
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|outOfProcessUnconnectedClientServerTest
name|void
name|tst_QUdpSocket
operator|::
name|outOfProcessUnconnectedClientServerTest
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
name|QSKIP
argument_list|(
literal|"This test depends on reading data from QProcess (not supported on Qt/WinCE and Symbian)."
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|QT_NO_PROCESS
argument_list|)
name|QSKIP
argument_list|(
literal|"Qt was compiled with QT_NO_PROCESS"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
else|#
directive|else
name|QProcess
name|serverProcess
decl_stmt|;
name|serverProcess
operator|.
name|start
argument_list|(
name|QLatin1String
argument_list|(
literal|"clientserver/clientserver server 1 1"
argument_list|)
argument_list|,
name|QIODevice
operator|::
name|ReadWrite
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|serverProcess
operator|.
name|waitForStarted
argument_list|(
literal|3000
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
literal|"Failed to start subprocess: "
operator|+
name|serverProcess
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Wait until the server has started and reports success.
while|while
condition|(
operator|!
name|serverProcess
operator|.
name|canReadLine
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|serverProcess
operator|.
name|waitForReadyRead
argument_list|(
literal|3000
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|serverGreeting
init|=
name|serverProcess
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|serverGreeting
operator|!=
name|QByteArray
argument_list|(
literal|"XXX\n"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|serverPort
init|=
name|serverGreeting
operator|.
name|trimmed
argument_list|()
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|serverPort
operator|>
literal|0
operator|&&
name|serverPort
operator|<
literal|65536
argument_list|)
expr_stmt|;
name|QProcess
name|clientProcess
decl_stmt|;
name|clientProcess
operator|.
name|start
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"clientserver/clientserver unconnectedclient %1 %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
literal|"127.0.0.1"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|serverPort
argument_list|)
argument_list|,
name|QIODevice
operator|::
name|ReadWrite
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|clientProcess
operator|.
name|waitForStarted
argument_list|(
literal|3000
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
literal|"Failed to start subprocess: "
operator|+
name|clientProcess
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Wait until the server has started and reports success.
while|while
condition|(
operator|!
name|clientProcess
operator|.
name|canReadLine
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|clientProcess
operator|.
name|waitForReadyRead
argument_list|(
literal|3000
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|clientGreeting
init|=
name|clientProcess
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|clientGreeting
argument_list|,
name|QByteArray
argument_list|(
literal|"ok\n"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Let the client and server talk for 3 seconds
name|QTest
operator|::
name|qWait
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|QStringList
name|serverData
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|serverProcess
operator|.
name|readAll
argument_list|()
argument_list|)
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
name|QStringList
name|clientData
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|clientProcess
operator|.
name|readAll
argument_list|()
argument_list|)
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|serverData
operator|.
name|size
argument_list|()
operator|>
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|clientData
operator|.
name|size
argument_list|()
operator|>
literal|5
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clientData
operator|.
name|size
argument_list|()
operator|/
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|clientData
operator|.
name|at
argument_list|(
name|i
operator|*
literal|2
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"readData()"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|serverData
operator|.
name|at
argument_list|(
name|i
operator|*
literal|3
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"readData()"
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|cdata
init|=
name|clientData
operator|.
name|at
argument_list|(
name|i
operator|*
literal|2
operator|+
literal|1
argument_list|)
decl_stmt|;
name|QString
name|sdata
init|=
name|serverData
operator|.
name|at
argument_list|(
name|i
operator|*
literal|3
operator|+
literal|1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|cdata
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"got "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cdata
operator|.
name|mid
argument_list|(
literal|4
argument_list|)
operator|.
name|trimmed
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|,
name|sdata
operator|.
name|mid
argument_list|(
literal|4
argument_list|)
operator|.
name|trimmed
argument_list|()
operator|.
name|toInt
argument_list|()
operator|*
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|serverData
operator|.
name|at
argument_list|(
name|i
operator|*
literal|3
operator|+
literal|2
argument_list|)
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"sending "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|serverData
operator|.
name|at
argument_list|(
name|i
operator|*
literal|3
operator|+
literal|2
argument_list|)
operator|.
name|trimmed
argument_list|()
operator|.
name|mid
argument_list|(
literal|8
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|sdata
operator|.
name|mid
argument_list|(
literal|4
argument_list|)
operator|.
name|trimmed
argument_list|()
operator|.
name|toInt
argument_list|()
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
name|clientProcess
operator|.
name|kill
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|clientProcess
operator|.
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
name|serverProcess
operator|.
name|kill
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|serverProcess
operator|.
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|zeroLengthDatagram
name|void
name|tst_QUdpSocket
operator|::
name|zeroLengthDatagram
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
name|QUdpSocket
name|receiver
decl_stmt|;
ifdef|#
directive|ifdef
name|FORCE_SESSION
name|receiver
operator|.
name|setProperty
argument_list|(
literal|"_q_networksession"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|networkSession
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|receiver
operator|.
name|bind
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|receiver
operator|.
name|waitForReadyRead
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|receiver
operator|.
name|hasPendingDatagrams
argument_list|()
argument_list|)
expr_stmt|;
name|QUdpSocket
name|sender
decl_stmt|;
ifdef|#
directive|ifdef
name|FORCE_SESSION
name|sender
operator|.
name|setProperty
argument_list|(
literal|"_q_networksession"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|networkSession
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|sender
operator|.
name|writeDatagram
argument_list|(
name|QByteArray
argument_list|()
argument_list|,
name|QHostAddress
operator|::
name|LocalHost
argument_list|,
name|receiver
operator|.
name|localPort
argument_list|()
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|receiver
operator|.
name|waitForReadyRead
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|receiver
operator|.
name|hasPendingDatagrams
argument_list|()
argument_list|)
expr_stmt|;
name|char
name|buf
decl_stmt|;
name|QCOMPARE
argument_list|(
name|receiver
operator|.
name|readDatagram
argument_list|(
operator|&
name|buf
argument_list|,
literal|1
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multicastTtlOption_data
name|void
name|tst_QUdpSocket
operator|::
name|multicastTtlOption_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QHostAddress
argument_list|>
argument_list|(
literal|"bindAddress"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"ttl"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QHostAddress
argument_list|>
name|addresses
decl_stmt|;
name|addresses
operator|+=
name|QHostAddress
argument_list|(
name|QHostAddress
operator|::
name|Any
argument_list|)
expr_stmt|;
name|addresses
operator|+=
name|QHostAddress
argument_list|(
name|QHostAddress
operator|::
name|AnyIPv6
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QHostAddress
modifier|&
name|address
decl|,
name|addresses
control|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"%1 0"
argument_list|)
operator|.
name|arg
argument_list|(
name|address
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toAscii
argument_list|()
argument_list|)
operator|<<
name|address
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"%1 1"
argument_list|)
operator|.
name|arg
argument_list|(
name|address
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toAscii
argument_list|()
argument_list|)
operator|<<
name|address
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"%1 2"
argument_list|)
operator|.
name|arg
argument_list|(
name|address
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toAscii
argument_list|()
argument_list|)
operator|<<
name|address
operator|<<
literal|2
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"%1 128"
argument_list|)
operator|.
name|arg
argument_list|(
name|address
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toAscii
argument_list|()
argument_list|)
operator|<<
name|address
operator|<<
literal|128
operator|<<
literal|128
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"%1 255"
argument_list|)
operator|.
name|arg
argument_list|(
name|address
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toAscii
argument_list|()
argument_list|)
operator|<<
name|address
operator|<<
literal|255
operator|<<
literal|255
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"%1 1024"
argument_list|)
operator|.
name|arg
argument_list|(
name|address
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toAscii
argument_list|()
argument_list|)
operator|<<
name|address
operator|<<
literal|1024
operator|<<
literal|1
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|multicastTtlOption
name|void
name|tst_QUdpSocket
operator|::
name|multicastTtlOption
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QHostAddress
argument_list|,
name|bindAddress
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|ttl
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expected
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
block|{
comment|// UDP multicast does not work with proxies
name|expected
operator|=
literal|0
expr_stmt|;
block|}
name|QUdpSocket
name|udpSocket
decl_stmt|;
ifdef|#
directive|ifdef
name|FORCE_SESSION
name|udpSocket
operator|.
name|setProperty
argument_list|(
literal|"_q_networksession"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|networkSession
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// bind, but ignore the result, we are only interested in initializing the socket
operator|(
name|void
operator|)
name|udpSocket
operator|.
name|bind
argument_list|(
name|bindAddress
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|udpSocket
operator|.
name|setSocketOption
argument_list|(
name|QUdpSocket
operator|::
name|MulticastTtlOption
argument_list|,
name|ttl
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|udpSocket
operator|.
name|socketOption
argument_list|(
name|QUdpSocket
operator|::
name|MulticastTtlOption
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multicastLoopbackOption_data
name|void
name|tst_QUdpSocket
operator|::
name|multicastLoopbackOption_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QHostAddress
argument_list|>
argument_list|(
literal|"bindAddress"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"loopback"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QHostAddress
argument_list|>
name|addresses
decl_stmt|;
name|addresses
operator|+=
name|QHostAddress
argument_list|(
name|QHostAddress
operator|::
name|Any
argument_list|)
expr_stmt|;
name|addresses
operator|+=
name|QHostAddress
argument_list|(
name|QHostAddress
operator|::
name|AnyIPv6
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QHostAddress
modifier|&
name|address
decl|,
name|addresses
control|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"%1 0"
argument_list|)
operator|.
name|arg
argument_list|(
name|address
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toAscii
argument_list|()
argument_list|)
operator|<<
name|address
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"%1 1"
argument_list|)
operator|.
name|arg
argument_list|(
name|address
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toAscii
argument_list|()
argument_list|)
operator|<<
name|address
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"%1 2"
argument_list|)
operator|.
name|arg
argument_list|(
name|address
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toAscii
argument_list|()
argument_list|)
operator|<<
name|address
operator|<<
literal|2
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"%1 0 again"
argument_list|)
operator|.
name|arg
argument_list|(
name|address
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toAscii
argument_list|()
argument_list|)
operator|<<
name|address
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"%1 2 again"
argument_list|)
operator|.
name|arg
argument_list|(
name|address
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toAscii
argument_list|()
argument_list|)
operator|<<
name|address
operator|<<
literal|2
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"%1 0 last time"
argument_list|)
operator|.
name|arg
argument_list|(
name|address
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toAscii
argument_list|()
argument_list|)
operator|<<
name|address
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"%1 1 again"
argument_list|)
operator|.
name|arg
argument_list|(
name|address
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toAscii
argument_list|()
argument_list|)
operator|<<
name|address
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|multicastLoopbackOption
name|void
name|tst_QUdpSocket
operator|::
name|multicastLoopbackOption
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QHostAddress
argument_list|,
name|bindAddress
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|loopback
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expected
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
block|{
comment|// UDP multicast does not work with proxies
name|expected
operator|=
literal|0
expr_stmt|;
block|}
name|QUdpSocket
name|udpSocket
decl_stmt|;
ifdef|#
directive|ifdef
name|FORCE_SESSION
name|udpSocket
operator|.
name|setProperty
argument_list|(
literal|"_q_networksession"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|networkSession
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// bind, but ignore the result, we are only interested in initializing the socket
operator|(
name|void
operator|)
name|udpSocket
operator|.
name|bind
argument_list|(
name|bindAddress
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|udpSocket
operator|.
name|setSocketOption
argument_list|(
name|QUdpSocket
operator|::
name|MulticastLoopbackOption
argument_list|,
name|loopback
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|udpSocket
operator|.
name|socketOption
argument_list|(
name|QUdpSocket
operator|::
name|MulticastLoopbackOption
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multicastJoinBeforeBind_data
name|void
name|tst_QUdpSocket
operator|::
name|multicastJoinBeforeBind_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QHostAddress
argument_list|>
argument_list|(
literal|"groupAddress"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"valid ipv4 group address"
argument_list|)
operator|<<
name|QHostAddress
argument_list|(
literal|"239.255.118.62"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid ipv4 group address"
argument_list|)
operator|<<
name|QHostAddress
argument_list|(
name|QHostAddress
operator|::
name|Broadcast
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"valid ipv6 group address"
argument_list|)
operator|<<
name|QHostAddress
argument_list|(
literal|"FF01::114"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid ipv6 group address"
argument_list|)
operator|<<
name|QHostAddress
argument_list|(
name|QHostAddress
operator|::
name|AnyIPv6
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multicastJoinBeforeBind
name|void
name|tst_QUdpSocket
operator|::
name|multicastJoinBeforeBind
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QHostAddress
argument_list|,
name|groupAddress
argument_list|)
expr_stmt|;
name|QUdpSocket
name|udpSocket
decl_stmt|;
ifdef|#
directive|ifdef
name|FORCE_SESSION
name|udpSocket
operator|.
name|setProperty
argument_list|(
literal|"_q_networksession"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|networkSession
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// cannot join group before binding
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QUdpSocket::joinMulticastGroup() called on a QUdpSocket when not in QUdpSocket::BoundState"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|udpSocket
operator|.
name|joinMulticastGroup
argument_list|(
name|groupAddress
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multicastLeaveAfterClose_data
name|void
name|tst_QUdpSocket
operator|::
name|multicastLeaveAfterClose_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QHostAddress
argument_list|>
argument_list|(
literal|"groupAddress"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"valid ipv4 group address"
argument_list|)
operator|<<
name|QHostAddress
argument_list|(
literal|"239.255.118.62"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"valid ipv6 group address"
argument_list|)
operator|<<
name|QHostAddress
argument_list|(
literal|"FF01::114"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multicastLeaveAfterClose
name|void
name|tst_QUdpSocket
operator|::
name|multicastLeaveAfterClose
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QHostAddress
argument_list|,
name|groupAddress
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
block|{
name|QSKIP
argument_list|(
literal|"UDP Multicast does not work with proxies"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
name|QUdpSocket
name|udpSocket
decl_stmt|;
ifdef|#
directive|ifdef
name|FORCE_SESSION
name|udpSocket
operator|.
name|setProperty
argument_list|(
literal|"_q_networksession"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|networkSession
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
name|QVERIFY2
argument_list|(
name|udpSocket
operator|.
name|bind
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|udpSocket
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|QVERIFY2
argument_list|(
name|udpSocket
operator|.
name|bind
argument_list|(
name|groupAddress
argument_list|,
literal|0
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|udpSocket
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY2
argument_list|(
name|udpSocket
operator|.
name|joinMulticastGroup
argument_list|(
name|groupAddress
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|udpSocket
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|udpSocket
operator|.
name|close
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QUdpSocket::leaveMulticastGroup() called on a QUdpSocket when not in QUdpSocket::BoundState"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|udpSocket
operator|.
name|leaveMulticastGroup
argument_list|(
name|groupAddress
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setMulticastInterface_data
name|void
name|tst_QUdpSocket
operator|::
name|setMulticastInterface_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QNetworkInterface
argument_list|>
argument_list|(
literal|"iface"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QHostAddress
argument_list|>
argument_list|(
literal|"address"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QNetworkInterface
argument_list|>
name|interfaces
init|=
name|QNetworkInterface
operator|::
name|allInterfaces
argument_list|()
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QNetworkInterface
modifier|&
name|iface
decl|,
name|interfaces
control|)
block|{
foreach|foreach
control|(
specifier|const
name|QNetworkAddressEntry
modifier|&
name|entry
decl|,
name|iface
operator|.
name|addressEntries
argument_list|()
control|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"%1:%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|iface
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|entry
operator|.
name|ip
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toAscii
argument_list|()
argument_list|)
operator|<<
name|iface
operator|<<
name|entry
operator|.
name|ip
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|setMulticastInterface
name|void
name|tst_QUdpSocket
operator|::
name|setMulticastInterface
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
name|QSKIP
argument_list|(
literal|"Symbian has no IPV6_MULTICAST_IF equivalent"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
else|#
directive|else
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QNetworkInterface
argument_list|,
name|iface
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QHostAddress
argument_list|,
name|address
argument_list|)
expr_stmt|;
name|QUdpSocket
name|udpSocket
decl_stmt|;
comment|// bind initializes the socket
name|bool
name|bound
init|=
name|udpSocket
operator|.
name|bind
argument_list|(
operator|(
name|address
operator|.
name|protocol
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|IPv6Protocol
condition|?
name|QHostAddress
argument_list|(
name|QHostAddress
operator|::
name|AnyIPv6
argument_list|)
else|:
name|QHostAddress
argument_list|(
name|QHostAddress
operator|::
name|Any
argument_list|)
operator|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|bound
condition|)
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QUdpSocket::setMulticastInterface() called on a QUdpSocket when not in QUdpSocket::BoundState"
argument_list|)
expr_stmt|;
name|udpSocket
operator|.
name|setMulticastInterface
argument_list|(
name|iface
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|bound
condition|)
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QUdpSocket::multicastInterface() called on a QUdpSocket when not in QUdpSocket::BoundState"
argument_list|)
expr_stmt|;
name|QNetworkInterface
name|iface2
init|=
name|udpSocket
operator|.
name|multicastInterface
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|setProxy
condition|)
block|{
name|QVERIFY
argument_list|(
name|iface2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|.
name|name
argument_list|()
argument_list|,
name|iface2
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
operator|!
name|iface2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|multicast_data
name|void
name|tst_QUdpSocket
operator|::
name|multicast_data
parameter_list|()
block|{
name|QHostAddress
name|anyAddress
init|=
name|QHostAddress
argument_list|(
name|QHostAddress
operator|::
name|Any
argument_list|)
decl_stmt|;
name|QHostAddress
name|groupAddress
init|=
name|QHostAddress
argument_list|(
literal|"239.255.118.62"
argument_list|)
decl_stmt|;
name|QHostAddress
name|any6Address
init|=
name|QHostAddress
argument_list|(
name|QHostAddress
operator|::
name|AnyIPv6
argument_list|)
decl_stmt|;
name|QHostAddress
name|group6Address
init|=
name|QHostAddress
argument_list|(
literal|"FF01::114"
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QHostAddress
argument_list|>
argument_list|(
literal|"bindAddress"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"bindResult"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QHostAddress
argument_list|>
argument_list|(
literal|"groupAddress"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"joinResult"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"valid bind, group ipv4 address"
argument_list|)
operator|<<
name|anyAddress
operator|<<
literal|true
operator|<<
name|groupAddress
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"valid bind, invalid group ipv4 address"
argument_list|)
operator|<<
name|anyAddress
operator|<<
literal|true
operator|<<
name|anyAddress
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"same bind, group ipv4 address"
argument_list|)
operator|<<
name|groupAddress
operator|<<
literal|true
operator|<<
name|groupAddress
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"valid bind, group ipv6 address"
argument_list|)
operator|<<
name|any6Address
operator|<<
literal|true
operator|<<
name|group6Address
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"valid bind, invalid group ipv6 address"
argument_list|)
operator|<<
name|any6Address
operator|<<
literal|true
operator|<<
name|any6Address
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"same bind, group ipv6 address"
argument_list|)
operator|<<
name|group6Address
operator|<<
literal|true
operator|<<
name|group6Address
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multicast
name|void
name|tst_QUdpSocket
operator|::
name|multicast
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QHostAddress
argument_list|,
name|bindAddress
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|bindResult
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QHostAddress
argument_list|,
name|groupAddress
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|joinResult
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
block|{
comment|// UDP multicast does not work with proxies
if|if
condition|(
operator|(
name|bindAddress
operator|.
name|protocol
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|IPv4Protocol
operator|&&
operator|(
name|bindAddress
operator|.
name|toIPv4Address
argument_list|()
operator|&
literal|0xffff0000
operator|)
operator|==
literal|0xefff0000
operator|)
operator|||
name|bindAddress
operator|.
name|protocol
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|IPv6Protocol
condition|)
block|{
comment|// proxy cannot bind to IPv6 or multicast addresses
name|bindResult
operator|=
literal|false
expr_stmt|;
block|}
name|joinResult
operator|=
literal|false
expr_stmt|;
block|}
name|QUdpSocket
name|receiver
decl_stmt|;
ifdef|#
directive|ifdef
name|FORCE_SESSION
name|receiver
operator|.
name|setProperty
argument_list|(
literal|"_q_networksession"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|networkSession
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// bind first, then verify that we can join the multicast group
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
if|if
condition|(
operator|!
name|setProxy
condition|)
block|{
name|QEXPECT_FAIL
argument_list|(
literal|"same bind, group ipv4 address"
argument_list|,
literal|"bind to group address not supported on symbian"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"same bind, group ipv6 address"
argument_list|,
literal|"bind to group address not supported on symbian"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|QVERIFY2
argument_list|(
name|receiver
operator|.
name|bind
argument_list|(
name|bindAddress
argument_list|,
literal|0
argument_list|)
operator|==
name|bindResult
argument_list|,
name|qPrintable
argument_list|(
name|receiver
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|bindResult
condition|)
return|return;
name|QVERIFY2
argument_list|(
name|receiver
operator|.
name|joinMulticastGroup
argument_list|(
name|groupAddress
argument_list|)
operator|==
name|joinResult
argument_list|,
name|qPrintable
argument_list|(
name|receiver
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|joinResult
condition|)
return|return;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|datagrams
init|=
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|()
operator|<<
name|QByteArray
argument_list|(
literal|"0123"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"4567"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"89ab"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"cdef"
argument_list|)
decl_stmt|;
name|QUdpSocket
name|sender
decl_stmt|;
ifdef|#
directive|ifdef
name|FORCE_SESSION
name|sender
operator|.
name|setProperty
argument_list|(
literal|"_q_networksession"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|networkSession
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|sender
operator|.
name|bind
argument_list|()
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QByteArray
modifier|&
name|datagram
decl|,
name|datagrams
control|)
block|{
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|sender
operator|.
name|writeDatagram
argument_list|(
name|datagram
argument_list|,
name|groupAddress
argument_list|,
name|receiver
operator|.
name|localPort
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|int
argument_list|(
name|datagram
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QVERIFY2
argument_list|(
name|receiver
operator|.
name|waitForReadyRead
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|receiver
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|receiver
operator|.
name|hasPendingDatagrams
argument_list|()
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|receivedDatagrams
decl_stmt|;
while|while
condition|(
name|receiver
operator|.
name|hasPendingDatagrams
argument_list|()
condition|)
block|{
name|QByteArray
name|datagram
decl_stmt|;
name|datagram
operator|.
name|resize
argument_list|(
name|receiver
operator|.
name|pendingDatagramSize
argument_list|()
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|readDatagram
argument_list|(
name|datagram
operator|.
name|data
argument_list|()
argument_list|,
name|datagram
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|receivedDatagrams
operator|<<
name|datagram
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
name|QEXPECT_FAIL
argument_list|(
literal|"valid bind, group ipv4 address"
argument_list|,
literal|"IPv4 multicast not supported on symbian"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|receivedDatagrams
argument_list|,
name|datagrams
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|receiver
operator|.
name|leaveMulticastGroup
argument_list|(
name|groupAddress
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|receiver
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|echo_data
name|void
name|tst_QUdpSocket
operator|::
name|echo_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"connect"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"writeDatagram"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"write"
argument_list|)
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|echo
name|void
name|tst_QUdpSocket
operator|::
name|echo
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|connect
argument_list|)
expr_stmt|;
name|QHostInfo
name|info
init|=
name|QHostInfo
operator|::
name|fromName
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|info
operator|.
name|addresses
argument_list|()
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QHostAddress
name|remote
init|=
name|info
operator|.
name|addresses
argument_list|()
operator|.
name|first
argument_list|()
decl_stmt|;
name|QUdpSocket
name|sock
decl_stmt|;
ifdef|#
directive|ifdef
name|FORCE_SESSION
name|sock
operator|.
name|setProperty
argument_list|(
literal|"_q_networksession"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|networkSession
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|connect
condition|)
block|{
name|sock
operator|.
name|connectToHost
argument_list|(
name|remote
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sock
operator|.
name|waitForConnected
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sock
operator|.
name|bind
argument_list|()
expr_stmt|;
block|}
name|QByteArray
name|out
argument_list|(
literal|30
argument_list|,
literal|'x'
argument_list|)
decl_stmt|;
name|QByteArray
name|in
decl_stmt|;
name|int
name|successes
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|connect
condition|)
block|{
name|sock
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sock
operator|.
name|writeDatagram
argument_list|(
name|out
argument_list|,
name|remote
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sock
operator|.
name|waitForReadyRead
argument_list|(
literal|1000
argument_list|)
condition|)
block|{
while|while
condition|(
name|sock
operator|.
name|hasPendingDatagrams
argument_list|()
condition|)
block|{
name|QHostAddress
name|from
decl_stmt|;
name|quint16
name|port
decl_stmt|;
if|if
condition|(
name|connect
condition|)
block|{
name|in
operator|=
name|sock
operator|.
name|read
argument_list|(
name|sock
operator|.
name|pendingDatagramSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|in
operator|.
name|resize
argument_list|(
name|sock
operator|.
name|pendingDatagramSize
argument_list|()
argument_list|)
expr_stmt|;
name|sock
operator|.
name|readDatagram
argument_list|(
name|in
operator|.
name|data
argument_list|()
argument_list|,
name|in
operator|.
name|length
argument_list|()
argument_list|,
operator|&
name|from
argument_list|,
operator|&
name|port
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|==
name|out
condition|)
name|successes
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|sock
operator|.
name|isValid
argument_list|()
condition|)
name|QFAIL
argument_list|(
name|sock
operator|.
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"packets in"
operator|<<
name|successes
operator|<<
literal|"out"
operator|<<
name|i
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|50
argument_list|)
expr_stmt|;
comment|//choke to avoid triggering flood/DDoS protections on echo service
block|}
name|QVERIFY
argument_list|(
name|successes
operator|>=
literal|9
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QUdpSocket
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qudpsocket.moc"
end_include
end_unit
