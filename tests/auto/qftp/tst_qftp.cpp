begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<qbuffer.h>
end_include
begin_include
include|#
directive|include
file|"qftp.h"
end_include
begin_include
include|#
directive|include
file|<qmap.h>
end_include
begin_include
include|#
directive|include
file|<time.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<QNetworkProxy>
end_include
begin_include
include|#
directive|include
file|<QNetworkConfiguration>
end_include
begin_include
include|#
directive|include
file|<qnetworkconfigmanager.h>
end_include
begin_include
include|#
directive|include
file|<QNetworkSession>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/private/qnetworksession_p.h>
end_include
begin_include
include|#
directive|include
file|"../network-settings.h"
end_include
begin_comment
comment|//TESTED_CLASS=
end_comment
begin_comment
comment|//TESTED_FILES=
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
end_ifdef
begin_comment
comment|// In Symbian OS test data is located in applications private dir
end_comment
begin_comment
comment|// Application private dir is default serach path for files, so SRCDIR can be set to empty
end_comment
begin_define
DECL|macro|SRCDIR
define|#
directive|define
name|SRCDIR
value|""
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
end_ifndef
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QNetworkConfiguration
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|tst_QFtp
class|class
name|tst_QFtp
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QFtp
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QFtp
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|initTestCase_data
parameter_list|()
function_decl|;
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|connectToHost_data
parameter_list|()
function_decl|;
name|void
name|connectToHost
parameter_list|()
function_decl|;
name|void
name|connectToUnresponsiveHost
parameter_list|()
function_decl|;
name|void
name|login_data
parameter_list|()
function_decl|;
name|void
name|login
parameter_list|()
function_decl|;
name|void
name|close_data
parameter_list|()
function_decl|;
name|void
name|close
parameter_list|()
function_decl|;
name|void
name|list_data
parameter_list|()
function_decl|;
name|void
name|list
parameter_list|()
function_decl|;
name|void
name|cd_data
parameter_list|()
function_decl|;
name|void
name|cd
parameter_list|()
function_decl|;
name|void
name|get_data
parameter_list|()
function_decl|;
name|void
name|get
parameter_list|()
function_decl|;
name|void
name|put_data
parameter_list|()
function_decl|;
name|void
name|put
parameter_list|()
function_decl|;
name|void
name|remove
parameter_list|()
function_decl|;
name|void
name|mkdir_data
parameter_list|()
function_decl|;
name|void
name|mkdir
parameter_list|()
function_decl|;
name|void
name|mkdir2
parameter_list|()
function_decl|;
name|void
name|rmdir
parameter_list|()
function_decl|;
name|void
name|rename_data
parameter_list|()
function_decl|;
name|void
name|rename
parameter_list|()
function_decl|;
name|void
name|commandSequence_data
parameter_list|()
function_decl|;
name|void
name|commandSequence
parameter_list|()
function_decl|;
name|void
name|abort_data
parameter_list|()
function_decl|;
name|void
name|abort
parameter_list|()
function_decl|;
name|void
name|bytesAvailable_data
parameter_list|()
function_decl|;
name|void
name|bytesAvailable
parameter_list|()
function_decl|;
name|void
name|activeMode
parameter_list|()
function_decl|;
name|void
name|proxy_data
parameter_list|()
function_decl|;
name|void
name|proxy
parameter_list|()
function_decl|;
name|void
name|binaryAscii
parameter_list|()
function_decl|;
name|void
name|doneSignal
parameter_list|()
function_decl|;
name|void
name|queueMoreCommandsInDoneSlot
parameter_list|()
function_decl|;
name|void
name|qtbug7359Crash
parameter_list|()
function_decl|;
protected|protected
name|slots
protected|:
name|void
name|stateChanged
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|void
name|listInfo
parameter_list|(
specifier|const
name|QUrlInfo
modifier|&
parameter_list|)
function_decl|;
name|void
name|readyRead
parameter_list|()
function_decl|;
name|void
name|dataTransferProgress
parameter_list|(
name|qint64
parameter_list|,
name|qint64
parameter_list|)
function_decl|;
name|void
name|commandStarted
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|void
name|commandFinished
parameter_list|(
name|int
parameter_list|,
name|bool
parameter_list|)
function_decl|;
name|void
name|done
parameter_list|(
name|bool
parameter_list|)
function_decl|;
name|void
name|activeModeDone
parameter_list|(
name|bool
parameter_list|)
function_decl|;
name|void
name|mkdir2Slot
parameter_list|(
name|int
name|id
parameter_list|,
name|bool
name|error
parameter_list|)
function_decl|;
name|void
name|cdUpSlot
parameter_list|(
name|bool
parameter_list|)
function_decl|;
private|private:
name|QFtp
modifier|*
name|newFtp
parameter_list|()
function_decl|;
name|void
name|addCommand
parameter_list|(
name|QFtp
operator|::
name|Command
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|bool
name|fileExists
parameter_list|(
specifier|const
name|QString
modifier|&
name|host
parameter_list|,
name|quint16
name|port
parameter_list|,
specifier|const
name|QString
modifier|&
name|user
parameter_list|,
specifier|const
name|QString
modifier|&
name|password
parameter_list|,
specifier|const
name|QString
modifier|&
name|file
parameter_list|,
specifier|const
name|QString
modifier|&
name|cdDir
init|=
name|QString
operator|::
name|null
parameter_list|)
function_decl|;
name|bool
name|dirExists
parameter_list|(
specifier|const
name|QString
modifier|&
name|host
parameter_list|,
name|quint16
name|port
parameter_list|,
specifier|const
name|QString
modifier|&
name|user
parameter_list|,
specifier|const
name|QString
modifier|&
name|password
parameter_list|,
specifier|const
name|QString
modifier|&
name|cdDir
parameter_list|,
specifier|const
name|QString
modifier|&
name|dirToCreate
parameter_list|)
function_decl|;
name|void
name|renameInit
parameter_list|(
specifier|const
name|QString
modifier|&
name|host
parameter_list|,
specifier|const
name|QString
modifier|&
name|user
parameter_list|,
specifier|const
name|QString
modifier|&
name|password
parameter_list|,
specifier|const
name|QString
modifier|&
name|createFile
parameter_list|)
function_decl|;
name|void
name|renameCleanup
parameter_list|(
specifier|const
name|QString
modifier|&
name|host
parameter_list|,
specifier|const
name|QString
modifier|&
name|user
parameter_list|,
specifier|const
name|QString
modifier|&
name|password
parameter_list|,
specifier|const
name|QString
modifier|&
name|fileToDelete
parameter_list|)
function_decl|;
DECL|member|ftp
name|QFtp
modifier|*
name|ftp
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
DECL|member|networkSessionExplicit
name|QSharedPointer
argument_list|<
name|QNetworkSession
argument_list|>
name|networkSessionExplicit
decl_stmt|;
DECL|member|networkSessionImplicit
name|QSharedPointer
argument_list|<
name|QNetworkSession
argument_list|>
name|networkSessionImplicit
decl_stmt|;
endif|#
directive|endif
DECL|member|ids
name|QList
argument_list|<
name|int
argument_list|>
name|ids
decl_stmt|;
comment|// helper to make sure that all expected signals are emitted
DECL|member|current_id
name|int
name|current_id
decl_stmt|;
DECL|member|connectToHost_state
name|int
name|connectToHost_state
decl_stmt|;
DECL|member|close_state
name|int
name|close_state
decl_stmt|;
DECL|member|login_state
name|int
name|login_state
decl_stmt|;
DECL|member|cur_state
name|int
name|cur_state
decl_stmt|;
DECL|struct|CommandResult
struct|struct
name|CommandResult
block|{
DECL|member|id
name|int
name|id
decl_stmt|;
DECL|member|success
name|int
name|success
decl_stmt|;
block|}
struct|;
DECL|member|resultMap
name|QMap
argument_list|<
name|QFtp
operator|::
name|Command
argument_list|,
name|CommandResult
argument_list|>
name|resultMap
decl_stmt|;
DECL|typedef|ResMapIt
typedef|typedef
name|QMap
argument_list|<
name|QFtp
operator|::
name|Command
argument_list|,
name|CommandResult
argument_list|>
operator|::
name|Iterator
name|ResMapIt
typedef|;
DECL|member|done_success
name|int
name|done_success
decl_stmt|;
DECL|member|commandSequence_success
name|int
name|commandSequence_success
decl_stmt|;
DECL|member|bytesAvailable_finishedGet
name|qlonglong
name|bytesAvailable_finishedGet
decl_stmt|;
DECL|member|bytesAvailable_finished
name|qlonglong
name|bytesAvailable_finished
decl_stmt|;
DECL|member|bytesAvailable_done
name|qlonglong
name|bytesAvailable_done
decl_stmt|;
DECL|member|listInfo_i
name|QList
argument_list|<
name|QUrlInfo
argument_list|>
name|listInfo_i
decl_stmt|;
DECL|member|newData_ba
name|QByteArray
name|newData_ba
decl_stmt|;
DECL|member|bytesTotal
name|qlonglong
name|bytesTotal
decl_stmt|;
DECL|member|bytesDone
name|qlonglong
name|bytesDone
decl_stmt|;
DECL|member|inFileDirExistsFunction
name|bool
name|inFileDirExistsFunction
decl_stmt|;
DECL|member|uniqueExtension
name|QString
name|uniqueExtension
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|//#define DUMP_SIGNALS
end_comment
begin_decl_stmt
DECL|variable|bytesTotal_init
specifier|const
name|int
name|bytesTotal_init
init|=
operator|-
literal|10
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|bytesDone_init
specifier|const
name|int
name|bytesDone_init
init|=
operator|-
literal|10
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|tst_QFtp
name|tst_QFtp
operator|::
name|tst_QFtp
parameter_list|()
member_init_list|:
name|ftp
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~tst_QFtp
name|tst_QFtp
operator|::
name|~
name|tst_QFtp
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|initTestCase_data
name|void
name|tst_QFtp
operator|::
name|initTestCase_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"setProxy"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"proxyType"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"setSession"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"WithoutProxy"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"WithSocks5Proxy"
argument_list|)
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|QNetworkProxy
operator|::
name|Socks5Proxy
argument_list|)
operator|<<
literal|false
expr_stmt|;
comment|//### doesn't work well yet.
comment|//QTest::newRow("WithHttpProxy")<< true<< int(QNetworkProxy::HttpProxy);
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
name|QTest
operator|::
name|newRow
argument_list|(
literal|"WithoutProxyWithSession"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"WithSocks5ProxyAndSession"
argument_list|)
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|QNetworkProxy
operator|::
name|Socks5Proxy
argument_list|)
operator|<<
literal|true
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|initTestCase
name|void
name|tst_QFtp
operator|::
name|initTestCase
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
name|QNetworkConfigurationManager
name|manager
decl_stmt|;
name|networkSessionImplicit
operator|=
name|QSharedPointer
argument_list|<
name|QNetworkSession
argument_list|>
argument_list|(
operator|new
name|QNetworkSession
argument_list|(
name|manager
operator|.
name|defaultConfiguration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|networkSessionImplicit
operator|->
name|open
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|networkSessionImplicit
operator|->
name|waitForOpened
argument_list|(
literal|60000
argument_list|)
argument_list|)
expr_stmt|;
comment|//there may be user prompt on 1st connect
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QFtp
operator|::
name|cleanupTestCase
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
name|networkSessionExplicit
operator|.
name|clear
argument_list|()
expr_stmt|;
name|networkSessionImplicit
operator|.
name|clear
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_QFtp
operator|::
name|init
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
name|QFETCH_GLOBAL
argument_list|(
name|int
argument_list|,
name|proxyType
argument_list|)
expr_stmt|;
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
block|{
if|if
condition|(
name|proxyType
operator|==
name|QNetworkProxy
operator|::
name|Socks5Proxy
condition|)
block|{
name|QNetworkProxy
operator|::
name|setApplicationProxy
argument_list|(
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|Socks5Proxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|1080
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|proxyType
operator|==
name|QNetworkProxy
operator|::
name|HttpProxy
condition|)
block|{
name|QNetworkProxy
operator|::
name|setApplicationProxy
argument_list|(
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|HttpProxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|3128
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
if|if
condition|(
name|setSession
condition|)
block|{
name|networkSessionExplicit
operator|=
name|networkSessionImplicit
expr_stmt|;
if|if
condition|(
operator|!
name|networkSessionExplicit
operator|->
name|isOpen
argument_list|()
condition|)
block|{
name|networkSessionExplicit
operator|->
name|open
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|networkSessionExplicit
operator|->
name|waitForOpened
argument_list|(
literal|30000
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|networkSessionExplicit
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
operator|delete
name|ftp
expr_stmt|;
name|ftp
operator|=
literal|0
expr_stmt|;
name|ids
operator|.
name|clear
argument_list|()
expr_stmt|;
name|current_id
operator|=
literal|0
expr_stmt|;
name|resultMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|connectToHost_state
operator|=
operator|-
literal|1
expr_stmt|;
name|close_state
operator|=
operator|-
literal|1
expr_stmt|;
name|login_state
operator|=
operator|-
literal|1
expr_stmt|;
name|cur_state
operator|=
name|QFtp
operator|::
name|Unconnected
expr_stmt|;
name|listInfo_i
operator|.
name|clear
argument_list|()
expr_stmt|;
name|newData_ba
operator|=
name|QByteArray
argument_list|()
expr_stmt|;
name|bytesTotal
operator|=
name|bytesTotal_init
expr_stmt|;
name|bytesDone
operator|=
name|bytesDone_init
expr_stmt|;
name|done_success
operator|=
operator|-
literal|1
expr_stmt|;
name|commandSequence_success
operator|=
operator|-
literal|1
expr_stmt|;
name|bytesAvailable_finishedGet
operator|=
literal|1234567890
expr_stmt|;
name|bytesAvailable_finished
operator|=
literal|1234567890
expr_stmt|;
name|bytesAvailable_done
operator|=
literal|1234567890
expr_stmt|;
name|inFileDirExistsFunction
operator|=
name|FALSE
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|srand
argument_list|(
name|time
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|uniqueExtension
operator|=
name|QString
argument_list|(
literal|"%1%2%3"
argument_list|)
operator|.
name|arg
argument_list|(
operator|(
name|qulonglong
operator|)
name|this
argument_list|)
operator|.
name|arg
argument_list|(
name|rand
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
operator|(
name|qulonglong
operator|)
name|time
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|srand
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|uniqueExtension
operator|=
name|QString
argument_list|(
literal|"%1%2%3"
argument_list|)
operator|.
name|arg
argument_list|(
operator|(
name|qulonglong
operator|)
name|this
argument_list|)
operator|.
name|arg
argument_list|(
name|rand
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
call|(
name|qulonglong
call|)
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QFtp
operator|::
name|cleanup
parameter_list|()
block|{
if|if
condition|(
name|ftp
condition|)
block|{
operator|delete
name|ftp
expr_stmt|;
name|ftp
operator|=
literal|0
expr_stmt|;
block|}
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
block|{
name|QNetworkProxy
operator|::
name|setApplicationProxy
argument_list|(
name|QNetworkProxy
operator|::
name|DefaultProxy
argument_list|)
expr_stmt|;
block|}
operator|delete
name|ftp
expr_stmt|;
name|ftp
operator|=
literal|0
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
name|networkSessionExplicit
operator|.
name|clear
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|connectToHost_data
name|void
name|tst_QFtp
operator|::
name|connectToHost_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|uint
argument_list|>
argument_list|(
literal|"port"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"state"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok01"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
operator|(
name|int
operator|)
name|QFtp
operator|::
name|Connected
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"error01"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|2222
operator|<<
operator|(
name|int
operator|)
name|QFtp
operator|::
name|Unconnected
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"error02"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo.bar"
argument_list|)
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
operator|(
name|int
operator|)
name|QFtp
operator|::
name|Unconnected
expr_stmt|;
block|}
end_function
begin_function
DECL|function|connectToHost
name|void
name|tst_QFtp
operator|::
name|connectToHost
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|uint
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|ftp
operator|=
name|newFtp
argument_list|()
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|ConnectToHost
argument_list|,
name|ftp
operator|->
name|connectToHost
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|61
argument_list|)
expr_stmt|;
operator|delete
name|ftp
expr_stmt|;
name|ftp
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|connectToHost_state
argument_list|,
literal|"state"
argument_list|)
expr_stmt|;
name|ResMapIt
name|it
init|=
name|resultMap
operator|.
name|find
argument_list|(
name|QFtp
operator|::
name|ConnectToHost
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|resultMap
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|state
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|==
name|QFtp
operator|::
name|Connected
condition|)
block|{
name|QVERIFY
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|success
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|success
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|connectToUnresponsiveHost
name|void
name|tst_QFtp
operator|::
name|connectToUnresponsiveHost
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
name|QSKIP
argument_list|(
literal|"This test takes too long if we test with proxies too"
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
name|QString
name|host
init|=
literal|"192.0.2.42"
decl_stmt|;
comment|// IP out of TEST-NET, should be unreachable
name|uint
name|port
init|=
literal|21
decl_stmt|;
name|ftp
operator|=
name|newFtp
argument_list|()
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|ConnectToHost
argument_list|,
name|ftp
operator|->
name|connectToHost
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"About to connect to host that won't reply (this test takes 60 seconds)"
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|61
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
comment|/* On Windows, we do not get a timeout, because Winsock is behaving in a strange way:     We issue two "WSAConnect()" calls, after the first, as a result we get WSAEWOULDBLOCK,     after the second, we get WSAEISCONN, which means that the socket is connected, which cannot be.     However, after some seconds we get a socket error saying that the remote host closed the connection,     which can neither be. For this test, that would actually enable us to finish before timout, but handling that case     (in void QFtpPI::error(QAbstractSocket::SocketError e)) breaks     a lot of other stuff in QFtp, so we just expect this test to fail on Windows.     */
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"timeout not working due to strange Windows socket behaviour (see source file of this test for explanation)"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY2
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|,
literal|"Network timeout longer than expected (should have been 60 seconds)"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ftp
operator|->
name|state
argument_list|()
operator|==
name|QFtp
operator|::
name|Unconnected
argument_list|)
expr_stmt|;
name|ResMapIt
name|it
init|=
name|resultMap
operator|.
name|find
argument_list|(
name|QFtp
operator|::
name|ConnectToHost
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|resultMap
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|success
operator|==
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|ftp
expr_stmt|;
name|ftp
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|login_data
name|void
name|tst_QFtp
operator|::
name|login_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|uint
argument_list|>
argument_list|(
literal|"port"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"user"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"success"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok01"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok02"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|(
literal|"ftp"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok03"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|(
literal|"ftp"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok04"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|(
literal|"ftptest"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"password"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"error01"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"error02"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bar"
argument_list|)
operator|<<
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|login
name|void
name|tst_QFtp
operator|::
name|login
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|uint
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|ftp
operator|=
name|newFtp
argument_list|()
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|ConnectToHost
argument_list|,
name|ftp
operator|->
name|connectToHost
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Login
argument_list|,
name|ftp
operator|->
name|login
argument_list|(
name|user
argument_list|,
name|password
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
operator|delete
name|ftp
expr_stmt|;
name|ftp
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
name|ResMapIt
name|it
init|=
name|resultMap
operator|.
name|find
argument_list|(
name|QFtp
operator|::
name|Login
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|resultMap
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|success
argument_list|,
literal|"success"
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|success
condition|)
block|{
name|QVERIFY
argument_list|(
name|login_state
operator|==
name|QFtp
operator|::
name|LoggedIn
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|login_state
operator|!=
name|QFtp
operator|::
name|LoggedIn
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|close_data
name|void
name|tst_QFtp
operator|::
name|close_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|uint
argument_list|>
argument_list|(
literal|"port"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"user"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"login"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"login01"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
operator|(
name|bool
operator|)
name|TRUE
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"login02"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|(
literal|"ftp"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
operator|(
name|bool
operator|)
name|TRUE
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"login03"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|(
literal|"ftp"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
operator|(
name|bool
operator|)
name|TRUE
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"login04"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|(
literal|"ftptest"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"password"
argument_list|)
operator|<<
operator|(
name|bool
operator|)
name|TRUE
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-login01"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
operator|(
name|bool
operator|)
name|FALSE
expr_stmt|;
block|}
end_function
begin_function
DECL|function|close
name|void
name|tst_QFtp
operator|::
name|close
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|uint
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|login
argument_list|)
expr_stmt|;
name|ftp
operator|=
name|newFtp
argument_list|()
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|ConnectToHost
argument_list|,
name|ftp
operator|->
name|connectToHost
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|login
condition|)
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Login
argument_list|,
name|ftp
operator|->
name|login
argument_list|(
name|user
argument_list|,
name|password
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Close
argument_list|,
name|ftp
operator|->
name|close
argument_list|()
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
operator|delete
name|ftp
expr_stmt|;
name|ftp
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|close_state
argument_list|,
operator|(
name|int
operator|)
name|QFtp
operator|::
name|Unconnected
argument_list|)
expr_stmt|;
name|ResMapIt
name|it
init|=
name|resultMap
operator|.
name|find
argument_list|(
name|QFtp
operator|::
name|Close
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|resultMap
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|success
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|list_data
name|void
name|tst_QFtp
operator|::
name|list_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|uint
argument_list|>
argument_list|(
literal|"port"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"user"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"dir"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"success"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"entryNames"
argument_list|)
expr_stmt|;
comment|// ### we should rather use a QList<QUrlInfo> here
name|QStringList
name|flukeRoot
decl_stmt|;
name|flukeRoot
operator|<<
literal|"pub"
expr_stmt|;
name|flukeRoot
operator|<<
literal|"qtest"
expr_stmt|;
name|QStringList
name|flukeQtest
decl_stmt|;
name|flukeQtest
operator|<<
literal|"bigfile"
expr_stmt|;
name|flukeQtest
operator|<<
literal|"nonASCII"
expr_stmt|;
name|flukeQtest
operator|<<
literal|"rfc3252"
expr_stmt|;
name|flukeQtest
operator|<<
literal|"rfc3252.txt"
expr_stmt|;
name|flukeQtest
operator|<<
literal|"upload"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"workDir01"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
literal|1
operator|<<
name|flukeRoot
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"workDir02"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|(
literal|"ftptest"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"password"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|1
operator|<<
name|flukeRoot
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"relPath01"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"qtest"
argument_list|)
operator|<<
literal|1
operator|<<
name|flukeQtest
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"relPath02"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|(
literal|"ftptest"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"password"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qtest"
argument_list|)
operator|<<
literal|1
operator|<<
name|flukeQtest
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"absPath01"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"/qtest"
argument_list|)
operator|<<
literal|1
operator|<<
name|flukeQtest
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"absPath02"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|(
literal|"ftptest"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"password"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"/var/ftp/qtest"
argument_list|)
operator|<<
literal|1
operator|<<
name|flukeQtest
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonExist01"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
literal|1
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonExist02"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"/foo"
argument_list|)
operator|<<
literal|1
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
comment|// ### The microsoft server does not seem to work properly at the moment --
comment|// I am also not able to open a data connection with other, non-Qt FTP
comment|// clients to it.
comment|// QTest::newRow( "nonExist03" )<< "ftp.microsoft.com"<< (uint)21<< QString()<< QString()<< QString("/foo")<< 0<< QStringList();
name|QStringList
name|susePub
decl_stmt|;
name|susePub
operator|<<
literal|"README.mirror-policy"
operator|<<
literal|"axp"
operator|<<
literal|"i386"
operator|<<
literal|"ia64"
operator|<<
literal|"install"
operator|<<
literal|"noarch"
operator|<<
literal|"pubring.gpg-build.suse.de"
operator|<<
literal|"update"
operator|<<
literal|"x86_64"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"epsvNotSupported"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ftp.funet.fi"
argument_list|)
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"ftp"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"root@"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"/pub/Linux/suse/suse"
argument_list|)
operator|<<
literal|1
operator|<<
name|susePub
expr_stmt|;
block|}
end_function
begin_function
DECL|function|list
name|void
name|tst_QFtp
operator|::
name|list
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|uint
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|ftp
operator|=
name|newFtp
argument_list|()
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|ConnectToHost
argument_list|,
name|ftp
operator|->
name|connectToHost
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Login
argument_list|,
name|ftp
operator|->
name|login
argument_list|(
name|user
argument_list|,
name|password
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|List
argument_list|,
name|ftp
operator|->
name|list
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Close
argument_list|,
name|ftp
operator|->
name|close
argument_list|()
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
operator|delete
name|ftp
expr_stmt|;
name|ftp
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
name|ResMapIt
name|it
init|=
name|resultMap
operator|.
name|find
argument_list|(
name|QFtp
operator|::
name|List
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|resultMap
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|success
argument_list|,
literal|"success"
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|entryNames
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|listInfo_i
operator|.
name|count
argument_list|()
argument_list|,
name|entryNames
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|uint
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|uint
operator|)
name|entryNames
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QCOMPARE
argument_list|(
name|listInfo_i
index|[
name|i
index|]
operator|.
name|name
argument_list|()
argument_list|,
name|entryNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|cd_data
name|void
name|tst_QFtp
operator|::
name|cd_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|uint
argument_list|>
argument_list|(
literal|"port"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"user"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"dir"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"success"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"entryNames"
argument_list|)
expr_stmt|;
comment|// ### we should rather use a QList<QUrlInfo> here
name|QStringList
name|flukeRoot
decl_stmt|;
name|flukeRoot
operator|<<
literal|"qtest"
expr_stmt|;
name|QStringList
name|flukeQtest
decl_stmt|;
name|flukeQtest
operator|<<
literal|"bigfile"
expr_stmt|;
name|flukeQtest
operator|<<
literal|"nonASCII"
expr_stmt|;
name|flukeQtest
operator|<<
literal|"rfc3252"
expr_stmt|;
name|flukeQtest
operator|<<
literal|"rfc3252.txt"
expr_stmt|;
name|flukeQtest
operator|<<
literal|"upload"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"relPath01"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"qtest"
argument_list|)
operator|<<
literal|1
operator|<<
name|flukeQtest
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"relPath02"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|(
literal|"ftptest"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"password"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qtest"
argument_list|)
operator|<<
literal|1
operator|<<
name|flukeQtest
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"absPath01"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"/qtest"
argument_list|)
operator|<<
literal|1
operator|<<
name|flukeQtest
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"absPath02"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|(
literal|"ftptest"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"password"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"/var/ftp/qtest"
argument_list|)
operator|<<
literal|1
operator|<<
name|flukeQtest
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonExist01"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
literal|0
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonExist03"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"/foo"
argument_list|)
operator|<<
literal|0
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cd
name|void
name|tst_QFtp
operator|::
name|cd
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|uint
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|ftp
operator|=
name|newFtp
argument_list|()
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|ConnectToHost
argument_list|,
name|ftp
operator|->
name|connectToHost
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Login
argument_list|,
name|ftp
operator|->
name|login
argument_list|(
name|user
argument_list|,
name|password
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Cd
argument_list|,
name|ftp
operator|->
name|cd
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|List
argument_list|,
name|ftp
operator|->
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Close
argument_list|,
name|ftp
operator|->
name|close
argument_list|()
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
operator|delete
name|ftp
expr_stmt|;
name|ftp
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
block|{
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
block|}
name|ResMapIt
name|it
init|=
name|resultMap
operator|.
name|find
argument_list|(
name|QFtp
operator|::
name|Cd
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|resultMap
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|success
argument_list|,
literal|"success"
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|entryNames
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|listInfo_i
operator|.
name|count
argument_list|()
argument_list|,
name|entryNames
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|uint
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|uint
operator|)
name|entryNames
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QCOMPARE
argument_list|(
name|listInfo_i
index|[
name|i
index|]
operator|.
name|name
argument_list|()
argument_list|,
name|entryNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|get_data
name|void
name|tst_QFtp
operator|::
name|get_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|uint
argument_list|>
argument_list|(
literal|"port"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"user"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"file"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"success"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"res"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"useIODevice"
argument_list|)
expr_stmt|;
comment|// ### move this into external testdata
name|QFile
name|file
argument_list|(
name|SRCDIR
literal|"rfc3252.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|rfc3252
init|=
name|file
operator|.
name|readAll
argument_list|()
decl_stmt|;
comment|// test the two get() overloads in one routine
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"relPath01_%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
literal|"qtest/rfc3252"
operator|<<
literal|1
operator|<<
name|rfc3252
operator|<<
call|(
name|bool
call|)
argument_list|(
name|i
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"relPath02_%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|(
literal|"ftptest"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"password"
argument_list|)
operator|<<
literal|"qtest/rfc3252"
operator|<<
literal|1
operator|<<
name|rfc3252
operator|<<
call|(
name|bool
call|)
argument_list|(
name|i
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"absPath01_%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
literal|"/qtest/rfc3252"
operator|<<
literal|1
operator|<<
name|rfc3252
operator|<<
call|(
name|bool
call|)
argument_list|(
name|i
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"absPath02_%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|(
literal|"ftptest"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"password"
argument_list|)
operator|<<
literal|"/var/ftp/qtest/rfc3252"
operator|<<
literal|1
operator|<<
name|rfc3252
operator|<<
call|(
name|bool
call|)
argument_list|(
name|i
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"nonExist01_%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
literal|0
operator|<<
name|QByteArray
argument_list|()
operator|<<
call|(
name|bool
call|)
argument_list|(
name|i
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"nonExist02_%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"/foo"
argument_list|)
operator|<<
literal|0
operator|<<
name|QByteArray
argument_list|()
operator|<<
call|(
name|bool
call|)
argument_list|(
name|i
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|get
name|void
name|tst_QFtp
operator|::
name|get
parameter_list|()
block|{
comment|// for the overload that takes a QIODevice
name|QByteArray
name|buf_ba
decl_stmt|;
name|QBuffer
name|buf
argument_list|(
operator|&
name|buf_ba
argument_list|)
decl_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|uint
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|useIODevice
argument_list|)
expr_stmt|;
name|ftp
operator|=
name|newFtp
argument_list|()
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|ConnectToHost
argument_list|,
name|ftp
operator|->
name|connectToHost
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Login
argument_list|,
name|ftp
operator|->
name|login
argument_list|(
name|user
argument_list|,
name|password
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|useIODevice
condition|)
block|{
name|buf
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Get
argument_list|,
name|ftp
operator|->
name|get
argument_list|(
name|file
argument_list|,
operator|&
name|buf
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Get
argument_list|,
name|ftp
operator|->
name|get
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Close
argument_list|,
name|ftp
operator|->
name|close
argument_list|()
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|50
argument_list|)
expr_stmt|;
operator|delete
name|ftp
expr_stmt|;
name|ftp
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
name|ResMapIt
name|it
init|=
name|resultMap
operator|.
name|find
argument_list|(
name|QFtp
operator|::
name|Get
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|resultMap
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|success
argument_list|,
literal|"success"
argument_list|)
expr_stmt|;
if|if
condition|(
name|useIODevice
condition|)
block|{
name|QTEST
argument_list|(
name|buf_ba
argument_list|,
literal|"res"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QTEST
argument_list|(
name|newData_ba
argument_list|,
literal|"res"
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|bytesTotal
operator|!=
name|bytesTotal_init
argument_list|)
expr_stmt|;
if|if
condition|(
name|bytesTotal
operator|!=
operator|-
literal|1
condition|)
block|{
name|QVERIFY
argument_list|(
name|bytesDone
operator|==
name|bytesTotal
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|useIODevice
condition|)
block|{
if|if
condition|(
name|bytesDone
operator|!=
name|bytesDone_init
condition|)
block|{
name|QVERIFY
argument_list|(
operator|(
name|int
operator|)
name|buf_ba
operator|.
name|size
argument_list|()
operator|==
name|bytesDone
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|bytesDone
operator|!=
name|bytesDone_init
condition|)
block|{
name|QVERIFY
argument_list|(
operator|(
name|int
operator|)
name|newData_ba
operator|.
name|size
argument_list|()
operator|==
name|bytesDone
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|put_data
name|void
name|tst_QFtp
operator|::
name|put_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|uint
argument_list|>
argument_list|(
literal|"port"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"user"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"file"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"fileData"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"useIODevice"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"success"
argument_list|)
expr_stmt|;
comment|// ### move this into external testdata
name|QFile
name|file
argument_list|(
name|SRCDIR
literal|"rfc3252.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|rfc3252
init|=
name|file
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|QByteArray
name|bigData
argument_list|(
literal|10
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|bigData
operator|.
name|fill
argument_list|(
literal|'A'
argument_list|)
expr_stmt|;
comment|// test the two put() overloads in one routine
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"relPath01_%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"qtest/upload/rel01_%1"
argument_list|)
operator|<<
name|rfc3252
operator|<<
call|(
name|bool
call|)
argument_list|(
name|i
operator|==
literal|1
argument_list|)
operator|<<
literal|1
expr_stmt|;
comment|/*     QTest::newRow( QString("relPath02_%1").arg(i).toLatin1().constData() )<< QtNetworkSettings::serverName()<< (uint)21<< QString("ftptest")<< QString("password")<< QString("qtest/upload/rel02_%1")<< rfc3252<< (bool)(i==1)<< 1;     QTest::newRow( QString("relPath03_%1").arg(i).toLatin1().constData() )<< QtNetworkSettings::serverName()<< (uint)21<< QString("ftptest")<< QString("password")<< QString("qtest/upload/rel03_%1")<< QByteArray()<< (bool)(i==1)<< 1;     QTest::newRow( QString("relPath04_%1").arg(i).toLatin1().constData() )<< QtNetworkSettings::serverName()<< (uint)21<< QString("ftptest")<< QString("password")<< QString("qtest/upload/rel04_%1")<< bigData<< (bool)(i==1)<< 1;      QTest::newRow( QString("absPath01_%1").arg(i).toLatin1().constData() )<< QtNetworkSettings::serverName()<< (uint)21<< QString()<< QString()<< QString("/qtest/upload/abs01_%1")<< rfc3252<< (bool)(i==1)<< 1;     QTest::newRow( QString("absPath02_%1").arg(i).toLatin1().constData() )<< QtNetworkSettings::serverName()<< (uint)21<< QString("ftptest")<< QString("password")<< QString("/srv/ftp/qtest/upload/abs02_%1")<< rfc3252<< (bool)(i==1)<< 1;      QTest::newRow( QString("nonExist01_%1").arg(i).toLatin1().constData() )<< QtNetworkSettings::serverName()<< (uint)21<< QString()<< QString()<< QString("foo")<< QByteArray()<< (bool)(i==1)<< 0;     QTest::newRow( QString("nonExist02_%1").arg(i).toLatin1().constData() )<< QtNetworkSettings::serverName()<< (uint)21<< QString()<< QString()<< QString("/foo")<< QByteArray()<< (bool)(i==1)<< 0; */
block|}
block|}
end_function
begin_function
DECL|function|put
name|void
name|tst_QFtp
operator|::
name|put
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|uint
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|fileData
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|useIODevice
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
block|{
name|QFETCH_GLOBAL
argument_list|(
name|int
argument_list|,
name|proxyType
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxyType
operator|==
name|QNetworkProxy
operator|::
name|Socks5Proxy
condition|)
block|{
name|QSKIP
argument_list|(
literal|"With socks5 the put() test takes too long time on Windows."
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
specifier|const
name|int
name|timestep
init|=
literal|50
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|contains
argument_list|(
literal|'%'
argument_list|)
condition|)
name|file
operator|=
name|file
operator|.
name|arg
argument_list|(
name|uniqueExtension
argument_list|)
expr_stmt|;
comment|// for the overload that takes a QIODevice
name|QBuffer
name|buf_fileData
argument_list|(
operator|&
name|fileData
argument_list|)
decl_stmt|;
name|buf_fileData
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|ResMapIt
name|it
decl_stmt|;
comment|//////////////////////////////////////////////////////////////////
comment|// upload the file
name|init
argument_list|()
expr_stmt|;
name|ftp
operator|=
name|newFtp
argument_list|()
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|ConnectToHost
argument_list|,
name|ftp
operator|->
name|connectToHost
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Login
argument_list|,
name|ftp
operator|->
name|login
argument_list|(
name|user
argument_list|,
name|password
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|useIODevice
condition|)
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Put
argument_list|,
name|ftp
operator|->
name|put
argument_list|(
operator|&
name|buf_fileData
argument_list|,
name|file
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Put
argument_list|,
name|ftp
operator|->
name|put
argument_list|(
name|fileData
argument_list|,
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Close
argument_list|,
name|ftp
operator|->
name|close
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|time
init|=
literal|0
init|;
name|time
operator|<=
name|fileData
operator|.
name|length
argument_list|()
operator|/
literal|20000
condition|;
name|time
operator|+=
name|timestep
control|)
block|{
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
name|timestep
argument_list|)
expr_stmt|;
if|if
condition|(
name|ftp
operator|->
name|currentCommand
argument_list|()
operator|==
name|QFtp
operator|::
name|None
condition|)
break|break;
block|}
operator|delete
name|ftp
expr_stmt|;
name|ftp
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
name|it
operator|=
name|resultMap
operator|.
name|find
argument_list|(
name|QFtp
operator|::
name|Put
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|resultMap
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|success
argument_list|,
literal|"success"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|it
operator|.
name|value
argument_list|()
operator|.
name|success
condition|)
block|{
name|QVERIFY
argument_list|(
operator|!
name|fileExists
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|user
argument_list|,
name|password
argument_list|,
name|file
argument_list|)
argument_list|)
expr_stmt|;
return|return;
comment|// the following tests are only meaningful if the file could be put
block|}
name|QVERIFY
argument_list|(
name|bytesTotal
operator|==
operator|(
name|int
operator|)
name|fileData
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|bytesDone
operator|==
name|bytesTotal
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fileExists
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|user
argument_list|,
name|password
argument_list|,
name|file
argument_list|)
argument_list|)
expr_stmt|;
comment|//////////////////////////////////////////////////////////////////
comment|// fetch file to make sure that it is equal to the uploaded file
name|init
argument_list|()
expr_stmt|;
name|ftp
operator|=
name|newFtp
argument_list|()
expr_stmt|;
name|QBuffer
name|buf
decl_stmt|;
name|buf
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|ConnectToHost
argument_list|,
name|ftp
operator|->
name|connectToHost
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Login
argument_list|,
name|ftp
operator|->
name|login
argument_list|(
name|user
argument_list|,
name|password
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Get
argument_list|,
name|ftp
operator|->
name|get
argument_list|(
name|file
argument_list|,
operator|&
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Close
argument_list|,
name|ftp
operator|->
name|close
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|time
init|=
literal|0
init|;
name|time
operator|<=
name|fileData
operator|.
name|length
argument_list|()
operator|/
literal|20000
condition|;
name|time
operator|+=
name|timestep
control|)
block|{
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
name|timestep
argument_list|)
expr_stmt|;
if|if
condition|(
name|ftp
operator|->
name|currentCommand
argument_list|()
operator|==
name|QFtp
operator|::
name|None
condition|)
break|break;
block|}
operator|delete
name|ftp
expr_stmt|;
name|ftp
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|done_success
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|buf
operator|.
name|buffer
argument_list|()
argument_list|,
literal|"fileData"
argument_list|)
expr_stmt|;
comment|//////////////////////////////////////////////////////////////////
comment|// cleanup (i.e. remove the file) -- this also tests the remove command
name|init
argument_list|()
expr_stmt|;
name|ftp
operator|=
name|newFtp
argument_list|()
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|ConnectToHost
argument_list|,
name|ftp
operator|->
name|connectToHost
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Login
argument_list|,
name|ftp
operator|->
name|login
argument_list|(
name|user
argument_list|,
name|password
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Remove
argument_list|,
name|ftp
operator|->
name|remove
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Close
argument_list|,
name|ftp
operator|->
name|close
argument_list|()
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
name|timestep
argument_list|)
expr_stmt|;
operator|delete
name|ftp
expr_stmt|;
name|ftp
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
name|it
operator|=
name|resultMap
operator|.
name|find
argument_list|(
name|QFtp
operator|::
name|Remove
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|resultMap
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|success
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|fileExists
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|user
argument_list|,
name|password
argument_list|,
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|remove
name|void
name|tst_QFtp
operator|::
name|remove
parameter_list|()
block|{
name|DEPENDS_ON
argument_list|(
literal|"put"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mkdir_data
name|void
name|tst_QFtp
operator|::
name|mkdir_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|uint
argument_list|>
argument_list|(
literal|"port"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"user"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"cdDir"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"dirToCreate"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"success"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"relPath01"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
literal|"qtest/upload"
operator|<<
name|QString
argument_list|(
literal|"rel01_%1"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"relPath02"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|(
literal|"ftptest"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"password"
argument_list|)
operator|<<
literal|"qtest/upload"
operator|<<
name|QString
argument_list|(
literal|"rel02_%1"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"relPath03"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|(
literal|"ftptest"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"password"
argument_list|)
operator|<<
literal|"qtest/upload"
operator|<<
name|QString
argument_list|(
literal|"rel03_%1"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"absPath01"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
literal|"."
operator|<<
name|QString
argument_list|(
literal|"/qtest/upload/abs01_%1"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"absPath02"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|(
literal|"ftptest"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"password"
argument_list|)
operator|<<
literal|"."
operator|<<
name|QString
argument_list|(
literal|"/var/ftp/qtest/upload/abs02_%1"
argument_list|)
operator|<<
literal|1
expr_stmt|;
comment|//    QTest::newRow( "nonExist01" )<< QtNetworkSettings::serverName()<< (uint)21<< QString()<< QString()<< QString("foo")<< 0;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonExist01"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
literal|"."
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonExist02"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
literal|"."
operator|<<
name|QString
argument_list|(
literal|"/foo"
argument_list|)
operator|<<
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mkdir
name|void
name|tst_QFtp
operator|::
name|mkdir
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|uint
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|cdDir
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dirToCreate
argument_list|)
expr_stmt|;
if|if
condition|(
name|dirToCreate
operator|.
name|contains
argument_list|(
literal|'%'
argument_list|)
condition|)
name|dirToCreate
operator|=
name|dirToCreate
operator|.
name|arg
argument_list|(
name|uniqueExtension
argument_list|)
expr_stmt|;
comment|//////////////////////////////////////////////////////////////////
comment|// create the directory
name|init
argument_list|()
expr_stmt|;
name|ftp
operator|=
name|newFtp
argument_list|()
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|ConnectToHost
argument_list|,
name|ftp
operator|->
name|connectToHost
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Login
argument_list|,
name|ftp
operator|->
name|login
argument_list|(
name|user
argument_list|,
name|password
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Cd
argument_list|,
name|ftp
operator|->
name|cd
argument_list|(
name|cdDir
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Mkdir
argument_list|,
name|ftp
operator|->
name|mkdir
argument_list|(
name|dirToCreate
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Close
argument_list|,
name|ftp
operator|->
name|close
argument_list|()
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
operator|delete
name|ftp
expr_stmt|;
name|ftp
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
name|ResMapIt
name|it
init|=
name|resultMap
operator|.
name|find
argument_list|(
name|QFtp
operator|::
name|Mkdir
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|resultMap
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|success
argument_list|,
literal|"success"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|it
operator|.
name|value
argument_list|()
operator|.
name|success
condition|)
block|{
name|QVERIFY
argument_list|(
operator|!
name|dirExists
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|user
argument_list|,
name|password
argument_list|,
name|cdDir
argument_list|,
name|dirToCreate
argument_list|)
argument_list|)
expr_stmt|;
return|return;
comment|// the following tests are only meaningful if the dir could be created
block|}
name|QVERIFY
argument_list|(
name|dirExists
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|user
argument_list|,
name|password
argument_list|,
name|cdDir
argument_list|,
name|dirToCreate
argument_list|)
argument_list|)
expr_stmt|;
comment|//////////////////////////////////////////////////////////////////
comment|// create the directory again (should always fail!)
name|init
argument_list|()
expr_stmt|;
name|ftp
operator|=
name|newFtp
argument_list|()
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|ConnectToHost
argument_list|,
name|ftp
operator|->
name|connectToHost
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Login
argument_list|,
name|ftp
operator|->
name|login
argument_list|(
name|user
argument_list|,
name|password
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Cd
argument_list|,
name|ftp
operator|->
name|cd
argument_list|(
name|cdDir
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Mkdir
argument_list|,
name|ftp
operator|->
name|mkdir
argument_list|(
name|dirToCreate
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Close
argument_list|,
name|ftp
operator|->
name|close
argument_list|()
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
operator|delete
name|ftp
expr_stmt|;
name|ftp
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
name|it
operator|=
name|resultMap
operator|.
name|find
argument_list|(
name|QFtp
operator|::
name|Mkdir
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|resultMap
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|success
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//////////////////////////////////////////////////////////////////
comment|// remove the directory
name|init
argument_list|()
expr_stmt|;
name|ftp
operator|=
name|newFtp
argument_list|()
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|ConnectToHost
argument_list|,
name|ftp
operator|->
name|connectToHost
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Login
argument_list|,
name|ftp
operator|->
name|login
argument_list|(
name|user
argument_list|,
name|password
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Cd
argument_list|,
name|ftp
operator|->
name|cd
argument_list|(
name|cdDir
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Rmdir
argument_list|,
name|ftp
operator|->
name|rmdir
argument_list|(
name|dirToCreate
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Close
argument_list|,
name|ftp
operator|->
name|close
argument_list|()
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
operator|delete
name|ftp
expr_stmt|;
name|ftp
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
name|it
operator|=
name|resultMap
operator|.
name|find
argument_list|(
name|QFtp
operator|::
name|Rmdir
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|resultMap
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|success
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|dirExists
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|user
argument_list|,
name|password
argument_list|,
name|cdDir
argument_list|,
name|dirToCreate
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mkdir2
name|void
name|tst_QFtp
operator|::
name|mkdir2
parameter_list|()
block|{
name|ftp
operator|=
operator|new
name|QFtp
expr_stmt|;
name|ftp
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
expr_stmt|;
name|ftp
operator|->
name|login
argument_list|()
expr_stmt|;
name|current_id
operator|=
name|ftp
operator|->
name|cd
argument_list|(
literal|"kake/test"
argument_list|)
expr_stmt|;
name|QEventLoop
name|loop
decl_stmt|;
name|connect
argument_list|(
name|ftp
argument_list|,
name|SIGNAL
argument_list|(
name|done
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|ftp
argument_list|,
name|SIGNAL
argument_list|(
name|commandFinished
argument_list|(
name|int
argument_list|,
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|mkdir2Slot
argument_list|(
name|int
argument_list|,
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|5000
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QSignalSpy
name|commandStartedSpy
argument_list|(
name|ftp
argument_list|,
name|SIGNAL
argument_list|(
name|commandStarted
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|commandFinishedSpy
argument_list|(
name|ftp
argument_list|,
name|SIGNAL
argument_list|(
name|commandFinished
argument_list|(
name|int
argument_list|,
name|bool
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|loop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|commandStartedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// connect, login, cd, mkdir
name|QCOMPARE
argument_list|(
name|commandFinishedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|commandFinishedSpy
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|commandStartedSpy
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|commandFinishedSpy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|commandFinishedSpy
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|commandFinishedSpy
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|commandFinishedSpy
operator|.
name|at
argument_list|(
literal|3
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|ftp
expr_stmt|;
name|ftp
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mkdir2Slot
name|void
name|tst_QFtp
operator|::
name|mkdir2Slot
parameter_list|(
name|int
name|id
parameter_list|,
name|bool
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
name|current_id
condition|)
name|ftp
operator|->
name|mkdir
argument_list|(
literal|"kake/test"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rmdir
name|void
name|tst_QFtp
operator|::
name|rmdir
parameter_list|()
block|{
name|DEPENDS_ON
argument_list|(
literal|"mkdir"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rename_data
name|void
name|tst_QFtp
operator|::
name|rename_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"user"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"cdDir"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"oldfile"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"newfile"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"createFile"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"renamedFile"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"success"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"relPath01"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
literal|"qtest/upload"
operator|<<
name|QString
argument_list|(
literal|"rel_old01_%1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"rel_new01_%1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qtest/upload/rel_old01_%1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qtest/upload/rel_new01_%1"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"relPath02"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"ftptest"
argument_list|)
operator|<<
literal|"password"
operator|<<
literal|"qtest/upload"
operator|<<
name|QString
argument_list|(
literal|"rel_old02_%1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"rel_new02_%1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qtest/upload/rel_old02_%1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qtest/upload/rel_new02_%1"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"relPath03"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"ftptest"
argument_list|)
operator|<<
literal|"password"
operator|<<
literal|"qtest/upload"
operator|<<
name|QString
argument_list|(
literal|"rel_old03_%1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"rel_new03_%1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qtest/upload/rel_old03_%1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qtest/upload/rel_new03_%1"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"absPath01"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"/qtest/upload/abs_old01_%1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"/qtest/upload/abs_new01_%1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"/qtest/upload/abs_old01_%1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"/qtest/upload/abs_new01_%1"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"absPath02"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"ftptest"
argument_list|)
operator|<<
literal|"password"
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"/var/ftp/qtest/upload/abs_old02_%1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"/var/ftp/qtest/upload/abs_new02_%1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"/var/ftp/qtest/upload/abs_old02_%1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"/var/ftp/qtest/upload/abs_new02_%1"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonExist01"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
literal|"new_foo"
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonExist02"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"/foo"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"/new_foo"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|renameInit
name|void
name|tst_QFtp
operator|::
name|renameInit
parameter_list|(
specifier|const
name|QString
modifier|&
name|host
parameter_list|,
specifier|const
name|QString
modifier|&
name|user
parameter_list|,
specifier|const
name|QString
modifier|&
name|password
parameter_list|,
specifier|const
name|QString
modifier|&
name|createFile
parameter_list|)
block|{
if|if
condition|(
operator|!
name|createFile
operator|.
name|isNull
argument_list|()
condition|)
block|{
comment|// upload the file
name|init
argument_list|()
expr_stmt|;
name|ftp
operator|=
name|newFtp
argument_list|()
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|ConnectToHost
argument_list|,
name|ftp
operator|->
name|connectToHost
argument_list|(
name|host
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Login
argument_list|,
name|ftp
operator|->
name|login
argument_list|(
name|user
argument_list|,
name|password
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Put
argument_list|,
name|ftp
operator|->
name|put
argument_list|(
name|QByteArray
argument_list|()
argument_list|,
name|createFile
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Close
argument_list|,
name|ftp
operator|->
name|close
argument_list|()
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|50
argument_list|)
expr_stmt|;
operator|delete
name|ftp
expr_stmt|;
name|ftp
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
name|ResMapIt
name|it
init|=
name|resultMap
operator|.
name|find
argument_list|(
name|QFtp
operator|::
name|Put
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|resultMap
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|success
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fileExists
argument_list|(
name|host
argument_list|,
literal|21
argument_list|,
name|user
argument_list|,
name|password
argument_list|,
name|createFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|renameCleanup
name|void
name|tst_QFtp
operator|::
name|renameCleanup
parameter_list|(
specifier|const
name|QString
modifier|&
name|host
parameter_list|,
specifier|const
name|QString
modifier|&
name|user
parameter_list|,
specifier|const
name|QString
modifier|&
name|password
parameter_list|,
specifier|const
name|QString
modifier|&
name|fileToDelete
parameter_list|)
block|{
if|if
condition|(
operator|!
name|fileToDelete
operator|.
name|isNull
argument_list|()
condition|)
block|{
comment|// cleanup (i.e. remove the file)
name|init
argument_list|()
expr_stmt|;
name|ftp
operator|=
name|newFtp
argument_list|()
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|ConnectToHost
argument_list|,
name|ftp
operator|->
name|connectToHost
argument_list|(
name|host
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Login
argument_list|,
name|ftp
operator|->
name|login
argument_list|(
name|user
argument_list|,
name|password
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Remove
argument_list|,
name|ftp
operator|->
name|remove
argument_list|(
name|fileToDelete
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Close
argument_list|,
name|ftp
operator|->
name|close
argument_list|()
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
operator|delete
name|ftp
expr_stmt|;
name|ftp
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
name|ResMapIt
name|it
init|=
name|resultMap
operator|.
name|find
argument_list|(
name|QFtp
operator|::
name|Remove
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|resultMap
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|success
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|fileExists
argument_list|(
name|host
argument_list|,
literal|21
argument_list|,
name|user
argument_list|,
name|password
argument_list|,
name|fileToDelete
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rename
name|void
name|tst_QFtp
operator|::
name|rename
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|cdDir
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|oldfile
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|newfile
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|createFile
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|renamedFile
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldfile
operator|.
name|contains
argument_list|(
literal|'%'
argument_list|)
condition|)
name|oldfile
operator|=
name|oldfile
operator|.
name|arg
argument_list|(
name|uniqueExtension
argument_list|)
expr_stmt|;
if|if
condition|(
name|newfile
operator|.
name|contains
argument_list|(
literal|'%'
argument_list|)
condition|)
name|newfile
operator|=
name|newfile
operator|.
name|arg
argument_list|(
name|uniqueExtension
argument_list|)
expr_stmt|;
if|if
condition|(
name|createFile
operator|.
name|contains
argument_list|(
literal|'%'
argument_list|)
condition|)
name|createFile
operator|=
name|createFile
operator|.
name|arg
argument_list|(
name|uniqueExtension
argument_list|)
expr_stmt|;
if|if
condition|(
name|renamedFile
operator|.
name|contains
argument_list|(
literal|'%'
argument_list|)
condition|)
name|renamedFile
operator|=
name|renamedFile
operator|.
name|arg
argument_list|(
name|uniqueExtension
argument_list|)
expr_stmt|;
name|renameInit
argument_list|(
name|host
argument_list|,
name|user
argument_list|,
name|password
argument_list|,
name|createFile
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
name|ftp
operator|=
name|newFtp
argument_list|()
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|ConnectToHost
argument_list|,
name|ftp
operator|->
name|connectToHost
argument_list|(
name|host
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Login
argument_list|,
name|ftp
operator|->
name|login
argument_list|(
name|user
argument_list|,
name|password
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cdDir
operator|.
name|isNull
argument_list|()
condition|)
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Cd
argument_list|,
name|ftp
operator|->
name|cd
argument_list|(
name|cdDir
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Rename
argument_list|,
name|ftp
operator|->
name|rename
argument_list|(
name|oldfile
argument_list|,
name|newfile
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Close
argument_list|,
name|ftp
operator|->
name|close
argument_list|()
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
operator|delete
name|ftp
expr_stmt|;
name|ftp
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
name|ResMapIt
name|it
init|=
name|resultMap
operator|.
name|find
argument_list|(
name|QFtp
operator|::
name|Rename
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|resultMap
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|success
argument_list|,
literal|"success"
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|success
condition|)
block|{
name|QVERIFY
argument_list|(
operator|!
name|fileExists
argument_list|(
name|host
argument_list|,
literal|21
argument_list|,
name|user
argument_list|,
name|password
argument_list|,
name|oldfile
argument_list|,
name|cdDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fileExists
argument_list|(
name|host
argument_list|,
literal|21
argument_list|,
name|user
argument_list|,
name|password
argument_list|,
name|newfile
argument_list|,
name|cdDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fileExists
argument_list|(
name|host
argument_list|,
literal|21
argument_list|,
name|user
argument_list|,
name|password
argument_list|,
name|renamedFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
operator|!
name|fileExists
argument_list|(
name|host
argument_list|,
literal|21
argument_list|,
name|user
argument_list|,
name|password
argument_list|,
name|newfile
argument_list|,
name|cdDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|fileExists
argument_list|(
name|host
argument_list|,
literal|21
argument_list|,
name|user
argument_list|,
name|password
argument_list|,
name|renamedFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|renameCleanup
argument_list|(
name|host
argument_list|,
name|user
argument_list|,
name|password
argument_list|,
name|renamedFile
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*   The commandSequence() test does not test any particular function. It rather   tests a sequence of arbitrary commands specified in the test data. */
end_comment
begin_class
DECL|class|FtpCommand
class|class
name|FtpCommand
block|{
public|public:
DECL|function|FtpCommand
name|FtpCommand
parameter_list|()
member_init_list|:
name|cmd
argument_list|(
name|QFtp
operator|::
name|None
argument_list|)
block|{ }
DECL|function|FtpCommand
name|FtpCommand
parameter_list|(
name|QFtp
operator|::
name|Command
name|command
parameter_list|)
member_init_list|:
name|cmd
argument_list|(
name|command
argument_list|)
block|{ }
DECL|function|FtpCommand
name|FtpCommand
parameter_list|(
name|QFtp
operator|::
name|Command
name|command
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|arguments
parameter_list|)
member_init_list|:
name|cmd
argument_list|(
name|command
argument_list|)
member_init_list|,
name|args
argument_list|(
name|arguments
argument_list|)
block|{ }
DECL|function|FtpCommand
name|FtpCommand
parameter_list|(
specifier|const
name|FtpCommand
modifier|&
name|c
parameter_list|)
block|{
operator|*
name|this
operator|=
name|c
expr_stmt|;
block|}
DECL|function|operator =
name|FtpCommand
modifier|&
name|operator
name|=
parameter_list|(
specifier|const
name|FtpCommand
modifier|&
name|c
parameter_list|)
block|{
name|this
operator|->
name|cmd
operator|=
name|c
operator|.
name|cmd
expr_stmt|;
name|this
operator|->
name|args
operator|=
name|c
operator|.
name|args
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
DECL|member|cmd
name|QFtp
operator|::
name|Command
name|cmd
decl_stmt|;
DECL|member|args
name|QStringList
name|args
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|operator <<
name|QDataStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QDataStream
modifier|&
name|s
parameter_list|,
specifier|const
name|FtpCommand
modifier|&
name|command
parameter_list|)
block|{
name|s
operator|<<
operator|(
name|int
operator|)
name|command
operator|.
name|cmd
expr_stmt|;
name|s
operator|<<
name|command
operator|.
name|args
expr_stmt|;
return|return
name|s
return|;
block|}
end_function
begin_function
DECL|function|operator >>
name|QDataStream
modifier|&
name|operator
name|>>
parameter_list|(
name|QDataStream
modifier|&
name|s
parameter_list|,
name|FtpCommand
modifier|&
name|command
parameter_list|)
block|{
name|int
name|tmp
decl_stmt|;
name|s
operator|>>
name|tmp
expr_stmt|;
name|command
operator|.
name|cmd
operator|=
operator|(
name|QFtp
operator|::
name|Command
operator|)
name|tmp
expr_stmt|;
name|s
operator|>>
name|command
operator|.
name|args
expr_stmt|;
return|return
name|s
return|;
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<FtpCommand>
argument_list|)
end_macro
begin_function
DECL|function|commandSequence_data
name|void
name|tst_QFtp
operator|::
name|commandSequence_data
parameter_list|()
block|{
comment|// some "constants"
name|QStringList
name|argConnectToHost01
decl_stmt|;
name|argConnectToHost01
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|"21"
expr_stmt|;
name|QStringList
name|argLogin01
decl_stmt|,
name|argLogin02
decl_stmt|,
name|argLogin03
decl_stmt|,
name|argLogin04
decl_stmt|;
name|argLogin01
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|argLogin02
operator|<<
literal|"ftp"
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|argLogin03
operator|<<
literal|"ftp"
operator|<<
literal|"foo"
expr_stmt|;
name|argLogin04
operator|<<
name|QString
argument_list|(
literal|"ftptest"
argument_list|)
operator|<<
literal|"password"
expr_stmt|;
name|FtpCommand
name|connectToHost01
argument_list|(
name|QFtp
operator|::
name|ConnectToHost
argument_list|,
name|argConnectToHost01
argument_list|)
decl_stmt|;
name|FtpCommand
name|login01
argument_list|(
name|QFtp
operator|::
name|Login
argument_list|,
name|argLogin01
argument_list|)
decl_stmt|;
name|FtpCommand
name|login02
argument_list|(
name|QFtp
operator|::
name|Login
argument_list|,
name|argLogin01
argument_list|)
decl_stmt|;
name|FtpCommand
name|login03
argument_list|(
name|QFtp
operator|::
name|Login
argument_list|,
name|argLogin01
argument_list|)
decl_stmt|;
name|FtpCommand
name|login04
argument_list|(
name|QFtp
operator|::
name|Login
argument_list|,
name|argLogin01
argument_list|)
decl_stmt|;
name|FtpCommand
name|close01
argument_list|(
name|QFtp
operator|::
name|Close
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|FtpCommand
argument_list|>
argument_list|>
argument_list|(
literal|"cmds"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"success"
argument_list|)
expr_stmt|;
comment|// success data
block|{
name|QList
argument_list|<
name|FtpCommand
argument_list|>
name|cmds
decl_stmt|;
name|cmds
operator|<<
name|connectToHost01
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"simple_ok01"
argument_list|)
operator|<<
name|cmds
operator|<<
literal|1
expr_stmt|;
block|}
block|{
name|QList
argument_list|<
name|FtpCommand
argument_list|>
name|cmds
decl_stmt|;
name|cmds
operator|<<
name|connectToHost01
expr_stmt|;
name|cmds
operator|<<
name|login01
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"simple_ok02"
argument_list|)
operator|<<
name|cmds
operator|<<
literal|1
expr_stmt|;
block|}
block|{
name|QList
argument_list|<
name|FtpCommand
argument_list|>
name|cmds
decl_stmt|;
name|cmds
operator|<<
name|connectToHost01
expr_stmt|;
name|cmds
operator|<<
name|login01
expr_stmt|;
name|cmds
operator|<<
name|close01
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"simple_ok03"
argument_list|)
operator|<<
name|cmds
operator|<<
literal|1
expr_stmt|;
block|}
block|{
name|QList
argument_list|<
name|FtpCommand
argument_list|>
name|cmds
decl_stmt|;
name|cmds
operator|<<
name|connectToHost01
expr_stmt|;
name|cmds
operator|<<
name|close01
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"simple_ok04"
argument_list|)
operator|<<
name|cmds
operator|<<
literal|1
expr_stmt|;
block|}
block|{
name|QList
argument_list|<
name|FtpCommand
argument_list|>
name|cmds
decl_stmt|;
name|cmds
operator|<<
name|connectToHost01
expr_stmt|;
name|cmds
operator|<<
name|login01
expr_stmt|;
name|cmds
operator|<<
name|close01
expr_stmt|;
name|cmds
operator|<<
name|connectToHost01
expr_stmt|;
name|cmds
operator|<<
name|login02
expr_stmt|;
name|cmds
operator|<<
name|close01
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"connect_twice"
argument_list|)
operator|<<
name|cmds
operator|<<
literal|1
expr_stmt|;
block|}
comment|// error data
block|{
name|QList
argument_list|<
name|FtpCommand
argument_list|>
name|cmds
decl_stmt|;
name|cmds
operator|<<
name|close01
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"error01"
argument_list|)
operator|<<
name|cmds
operator|<<
literal|0
expr_stmt|;
block|}
block|{
name|QList
argument_list|<
name|FtpCommand
argument_list|>
name|cmds
decl_stmt|;
name|cmds
operator|<<
name|login01
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"error02"
argument_list|)
operator|<<
name|cmds
operator|<<
literal|0
expr_stmt|;
block|}
block|{
name|QList
argument_list|<
name|FtpCommand
argument_list|>
name|cmds
decl_stmt|;
name|cmds
operator|<<
name|login01
expr_stmt|;
name|cmds
operator|<<
name|close01
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"error03"
argument_list|)
operator|<<
name|cmds
operator|<<
literal|0
expr_stmt|;
block|}
block|{
name|QList
argument_list|<
name|FtpCommand
argument_list|>
name|cmds
decl_stmt|;
name|cmds
operator|<<
name|connectToHost01
expr_stmt|;
name|cmds
operator|<<
name|login01
expr_stmt|;
name|cmds
operator|<<
name|close01
expr_stmt|;
name|cmds
operator|<<
name|login01
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"error04"
argument_list|)
operator|<<
name|cmds
operator|<<
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|commandSequence
name|void
name|tst_QFtp
operator|::
name|commandSequence
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|FtpCommand
argument_list|>
argument_list|,
name|cmds
argument_list|)
expr_stmt|;
name|ftp
operator|=
name|newFtp
argument_list|()
expr_stmt|;
name|QList
argument_list|<
name|FtpCommand
argument_list|>
operator|::
name|iterator
name|it
decl_stmt|;
for|for
control|(
name|it
operator|=
name|cmds
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|cmds
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
switch|switch
condition|(
operator|(
operator|*
name|it
operator|)
operator|.
name|cmd
condition|)
block|{
case|case
name|QFtp
operator|::
name|ConnectToHost
case|:
block|{
name|QVERIFY
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|.
name|args
operator|.
name|count
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|uint
name|port
decl_stmt|;
name|bool
name|portOk
decl_stmt|;
name|port
operator|=
operator|(
operator|*
name|it
operator|)
operator|.
name|args
index|[
literal|1
index|]
operator|.
name|toUInt
argument_list|(
operator|&
name|portOk
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|portOk
argument_list|)
expr_stmt|;
name|ids
operator|<<
name|ftp
operator|->
name|connectToHost
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|.
name|args
index|[
literal|0
index|]
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QFtp
operator|::
name|Login
case|:
name|QVERIFY
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|.
name|args
operator|.
name|count
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|ids
operator|<<
name|ftp
operator|->
name|login
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|.
name|args
index|[
literal|0
index|]
argument_list|,
operator|(
operator|*
name|it
operator|)
operator|.
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|QFtp
operator|::
name|Close
case|:
name|QVERIFY
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|.
name|args
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|ids
operator|<<
name|ftp
operator|->
name|close
argument_list|()
expr_stmt|;
break|break;
default|default:
name|QFAIL
argument_list|(
literal|"Error in test: unexpected enum value"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
operator|delete
name|ftp
expr_stmt|;
name|ftp
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|commandSequence_success
argument_list|,
literal|"success"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|abort_data
name|void
name|tst_QFtp
operator|::
name|abort_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|uint
argument_list|>
argument_list|(
literal|"port"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"file"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"uploadData"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"get_fluke01"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|(
literal|"qtest/bigfile"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"get_fluke02"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|(
literal|"qtest/rfc3252"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
comment|// Qt/CE and Symbian test environment has to less memory for this test
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
name|QByteArray
name|bigData
argument_list|(
literal|10
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
literal|0
argument_list|)
decl_stmt|;
else|#
directive|else
name|QByteArray
name|bigData
argument_list|(
literal|1
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
literal|0
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|bigData
operator|.
name|fill
argument_list|(
literal|'B'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"put_fluke01"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|(
literal|"qtest/upload/abort_put"
argument_list|)
operator|<<
name|bigData
expr_stmt|;
block|}
end_function
begin_function
DECL|function|abort
name|void
name|tst_QFtp
operator|::
name|abort
parameter_list|()
block|{
comment|// In case you wonder where the abort() actually happens, look into
comment|// tst_QFtp::dataTransferProgress
comment|//
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|uint
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|uploadData
argument_list|)
expr_stmt|;
name|QFtp
operator|::
name|Command
name|cmd
decl_stmt|;
if|if
condition|(
name|uploadData
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
name|cmd
operator|=
name|QFtp
operator|::
name|Get
expr_stmt|;
else|else
name|cmd
operator|=
name|QFtp
operator|::
name|Put
expr_stmt|;
name|ftp
operator|=
name|newFtp
argument_list|()
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|ConnectToHost
argument_list|,
name|ftp
operator|->
name|connectToHost
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Login
argument_list|,
name|ftp
operator|->
name|login
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmd
operator|==
name|QFtp
operator|::
name|Get
condition|)
name|addCommand
argument_list|(
name|cmd
argument_list|,
name|ftp
operator|->
name|get
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|addCommand
argument_list|(
name|cmd
argument_list|,
name|ftp
operator|->
name|put
argument_list|(
name|uploadData
argument_list|,
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Close
argument_list|,
name|ftp
operator|->
name|close
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|time
init|=
literal|0
init|;
name|time
operator|<=
name|uploadData
operator|.
name|length
argument_list|()
operator|/
literal|30000
condition|;
name|time
operator|+=
literal|30
control|)
block|{
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|50
argument_list|)
expr_stmt|;
if|if
condition|(
name|ftp
operator|->
name|currentCommand
argument_list|()
operator|==
name|QFtp
operator|::
name|None
condition|)
break|break;
block|}
operator|delete
name|ftp
expr_stmt|;
name|ftp
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
name|ResMapIt
name|it
init|=
name|resultMap
operator|.
name|find
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|resultMap
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
comment|// ### how to test the abort?
if|if
condition|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|success
condition|)
block|{
comment|// The FTP server on fluke is sadly returning a success, even when
comment|// the operation was aborted. So we have to use some heuristics.
if|if
condition|(
name|host
operator|==
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
condition|)
block|{
if|if
condition|(
name|cmd
operator|==
name|QFtp
operator|::
name|Get
condition|)
block|{
name|QVERIFY
argument_list|(
name|bytesDone
operator|<=
name|bytesTotal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// put commands should always be aborted, since we use really
comment|// big data
name|QVERIFY
argument_list|(
name|bytesDone
operator|!=
name|bytesTotal
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// this could be tested by verifying that no more progress signals are emited
name|QVERIFY
argument_list|(
name|bytesDone
operator|<=
name|bytesTotal
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|bytesDone
operator|!=
name|bytesTotal
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmd
operator|==
name|QFtp
operator|::
name|Put
condition|)
block|{
comment|//////////////////////////////////////
comment|// cleanup (i.e. remove the file)
name|init
argument_list|()
expr_stmt|;
name|ftp
operator|=
name|newFtp
argument_list|()
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|ConnectToHost
argument_list|,
name|ftp
operator|->
name|connectToHost
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Login
argument_list|,
name|ftp
operator|->
name|login
argument_list|()
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Remove
argument_list|,
name|ftp
operator|->
name|remove
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Close
argument_list|,
name|ftp
operator|->
name|close
argument_list|()
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
operator|delete
name|ftp
expr_stmt|;
name|ftp
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
name|it
operator|=
name|resultMap
operator|.
name|find
argument_list|(
name|QFtp
operator|::
name|Remove
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|resultMap
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|success
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|bytesAvailable_data
name|void
name|tst_QFtp
operator|::
name|bytesAvailable_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"file"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qlonglong
argument_list|>
argument_list|(
literal|"bytesAvailFinishedGet"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qlonglong
argument_list|>
argument_list|(
literal|"bytesAvailFinished"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qlonglong
argument_list|>
argument_list|(
literal|"bytesAvailDone"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"fluke01"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"qtest/bigfile"
argument_list|)
operator|<<
literal|0
operator|<<
operator|(
name|qlonglong
operator|)
literal|519240
operator|<<
operator|(
name|qlonglong
operator|)
literal|519240
operator|<<
operator|(
name|qlonglong
operator|)
literal|519240
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"fluke02"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"qtest/rfc3252"
argument_list|)
operator|<<
literal|0
operator|<<
operator|(
name|qlonglong
operator|)
literal|25962
operator|<<
operator|(
name|qlonglong
operator|)
literal|25962
operator|<<
operator|(
name|qlonglong
operator|)
literal|25962
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"fluke03"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"qtest/bigfile"
argument_list|)
operator|<<
literal|1
operator|<<
operator|(
name|qlonglong
operator|)
literal|519240
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"fluke04"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"qtest/rfc3252"
argument_list|)
operator|<<
literal|1
operator|<<
operator|(
name|qlonglong
operator|)
literal|25962
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|bytesAvailable
name|void
name|tst_QFtp
operator|::
name|bytesAvailable
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|ftp
operator|=
name|newFtp
argument_list|()
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|ConnectToHost
argument_list|,
name|ftp
operator|->
name|connectToHost
argument_list|(
name|host
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Login
argument_list|,
name|ftp
operator|->
name|login
argument_list|()
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Get
argument_list|,
name|ftp
operator|->
name|get
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|!=
literal|0
condition|)
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Close
argument_list|,
name|ftp
operator|->
name|close
argument_list|()
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|40
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
name|ResMapIt
name|it
init|=
name|resultMap
operator|.
name|find
argument_list|(
name|QFtp
operator|::
name|Get
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|resultMap
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|success
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qlonglong
argument_list|,
name|bytesAvailFinishedGet
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bytesAvailable_finishedGet
argument_list|,
name|bytesAvailFinishedGet
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qlonglong
argument_list|,
name|bytesAvailFinished
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bytesAvailable_finished
argument_list|,
name|bytesAvailFinished
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qlonglong
argument_list|,
name|bytesAvailDone
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bytesAvailable_done
argument_list|,
name|bytesAvailDone
argument_list|)
expr_stmt|;
name|ftp
operator|->
name|readAll
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|ftp
operator|->
name|bytesAvailable
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|ftp
expr_stmt|;
name|ftp
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|activeMode
name|void
name|tst_QFtp
operator|::
name|activeMode
parameter_list|()
block|{
name|QFile
name|file
argument_list|(
literal|"tst_QFtp_activeMode_inittab"
argument_list|)
decl_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
name|QFtp
name|ftp
decl_stmt|;
name|ftp
operator|.
name|setTransferMode
argument_list|(
name|QFtp
operator|::
name|Active
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|21
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|login
argument_list|()
expr_stmt|;
name|ftp
operator|.
name|list
argument_list|()
expr_stmt|;
name|ftp
operator|.
name|get
argument_list|(
literal|"/qtest/rfc3252.txt"
argument_list|,
operator|&
name|file
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|ftp
argument_list|,
name|SIGNAL
argument_list|(
name|done
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|activeModeDone
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|900
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"tst_QFtp_activeMode_inittab"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|done_success
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|activeModeDone
name|void
name|tst_QFtp
operator|::
name|activeModeDone
parameter_list|(
name|bool
name|error
parameter_list|)
block|{
name|done_success
operator|=
name|error
condition|?
operator|-
literal|1
else|:
literal|1
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|proxy_data
name|void
name|tst_QFtp
operator|::
name|proxy_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|uint
argument_list|>
argument_list|(
literal|"port"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"user"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"dir"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"success"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"entryNames"
argument_list|)
expr_stmt|;
comment|// ### we should rather use a QList<QUrlInfo> here
name|QStringList
name|flukeRoot
decl_stmt|;
name|flukeRoot
operator|<<
literal|"qtest"
expr_stmt|;
name|QStringList
name|flukeQtest
decl_stmt|;
name|flukeQtest
operator|<<
literal|"bigfile"
expr_stmt|;
name|flukeQtest
operator|<<
literal|"nonASCII"
expr_stmt|;
name|flukeQtest
operator|<<
literal|"rfc3252"
expr_stmt|;
name|flukeQtest
operator|<<
literal|"rfc3252.txt"
expr_stmt|;
name|flukeQtest
operator|<<
literal|"upload"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"proxy_relPath01"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"qtest"
argument_list|)
operator|<<
literal|1
operator|<<
name|flukeQtest
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"proxy_relPath02"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|(
literal|"ftptest"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"password"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qtest"
argument_list|)
operator|<<
literal|1
operator|<<
name|flukeQtest
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"proxy_absPath01"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"/qtest"
argument_list|)
operator|<<
literal|1
operator|<<
name|flukeQtest
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"proxy_absPath02"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|(
literal|"ftptest"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"password"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"/var/ftp/qtest"
argument_list|)
operator|<<
literal|1
operator|<<
name|flukeQtest
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"proxy_nonExist01"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
literal|0
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"proxy_nonExist03"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
operator|(
name|uint
operator|)
literal|21
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"/foo"
argument_list|)
operator|<<
literal|0
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|proxy
name|void
name|tst_QFtp
operator|::
name|proxy
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|uint
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|ftp
operator|=
name|newFtp
argument_list|()
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|SetProxy
argument_list|,
name|ftp
operator|->
name|setProxy
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|2121
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|ConnectToHost
argument_list|,
name|ftp
operator|->
name|connectToHost
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Login
argument_list|,
name|ftp
operator|->
name|login
argument_list|(
name|user
argument_list|,
name|password
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Cd
argument_list|,
name|ftp
operator|->
name|cd
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|List
argument_list|,
name|ftp
operator|->
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|50
argument_list|)
expr_stmt|;
operator|delete
name|ftp
expr_stmt|;
name|ftp
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
block|{
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
block|}
name|ResMapIt
name|it
init|=
name|resultMap
operator|.
name|find
argument_list|(
name|QFtp
operator|::
name|Cd
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|resultMap
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|success
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|entryNames
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|listInfo_i
operator|.
name|count
argument_list|()
argument_list|,
name|entryNames
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|uint
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|uint
operator|)
name|entryNames
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QCOMPARE
argument_list|(
name|listInfo_i
index|[
name|i
index|]
operator|.
name|name
argument_list|()
argument_list|,
name|entryNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|binaryAscii
name|void
name|tst_QFtp
operator|::
name|binaryAscii
parameter_list|()
block|{
name|QString
name|file
init|=
literal|"asciifile%1.txt"
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|contains
argument_list|(
literal|'%'
argument_list|)
condition|)
name|file
operator|=
name|file
operator|.
name|arg
argument_list|(
name|uniqueExtension
argument_list|)
expr_stmt|;
name|QByteArray
name|putData
init|=
literal|"a line of text\r\n"
decl_stmt|;
name|init
argument_list|()
expr_stmt|;
name|ftp
operator|=
name|newFtp
argument_list|()
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|ConnectToHost
argument_list|,
name|ftp
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|21
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Login
argument_list|,
name|ftp
operator|->
name|login
argument_list|(
literal|"ftptest"
argument_list|,
literal|"password"
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Cd
argument_list|,
name|ftp
operator|->
name|cd
argument_list|(
literal|"qtest/upload"
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Put
argument_list|,
name|ftp
operator|->
name|put
argument_list|(
name|putData
argument_list|,
name|file
argument_list|,
name|QFtp
operator|::
name|Ascii
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Close
argument_list|,
name|ftp
operator|->
name|close
argument_list|()
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
operator|delete
name|ftp
expr_stmt|;
name|ftp
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
name|ResMapIt
name|it
init|=
name|resultMap
operator|.
name|find
argument_list|(
name|QFtp
operator|::
name|Put
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|resultMap
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|success
argument_list|)
expr_stmt|;
name|QByteArray
name|getData
decl_stmt|;
name|QBuffer
name|getBuf
argument_list|(
operator|&
name|getData
argument_list|)
decl_stmt|;
name|getBuf
operator|.
name|open
argument_list|(
name|QBuffer
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
name|ftp
operator|=
name|newFtp
argument_list|()
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|ConnectToHost
argument_list|,
name|ftp
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|21
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Login
argument_list|,
name|ftp
operator|->
name|login
argument_list|(
literal|"ftptest"
argument_list|,
literal|"password"
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Cd
argument_list|,
name|ftp
operator|->
name|cd
argument_list|(
literal|"qtest/upload"
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Get
argument_list|,
name|ftp
operator|->
name|get
argument_list|(
name|file
argument_list|,
operator|&
name|getBuf
argument_list|,
name|QFtp
operator|::
name|Binary
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Close
argument_list|,
name|ftp
operator|->
name|close
argument_list|()
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
operator|delete
name|ftp
expr_stmt|;
name|ftp
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
name|ResMapIt
name|it2
init|=
name|resultMap
operator|.
name|find
argument_list|(
name|QFtp
operator|::
name|Get
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|it2
operator|!=
name|resultMap
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it2
operator|.
name|value
argument_list|()
operator|.
name|success
argument_list|)
expr_stmt|;
comment|// most modern ftp servers leave the file as it is by default
comment|// (and do not remove the windows line ending), the -1 below could be
comment|// deleted in the future
name|QVERIFY
argument_list|(
name|getData
operator|.
name|size
argument_list|()
operator|==
name|putData
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|//////////////////////////////////////////////////////////////////
comment|// cleanup (i.e. remove the file) -- this also tests the remove command
name|init
argument_list|()
expr_stmt|;
name|ftp
operator|=
name|newFtp
argument_list|()
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|ConnectToHost
argument_list|,
name|ftp
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|21
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Login
argument_list|,
name|ftp
operator|->
name|login
argument_list|(
literal|"ftptest"
argument_list|,
literal|"password"
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Cd
argument_list|,
name|ftp
operator|->
name|cd
argument_list|(
literal|"qtest/upload"
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Remove
argument_list|,
name|ftp
operator|->
name|remove
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Close
argument_list|,
name|ftp
operator|->
name|close
argument_list|()
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
operator|delete
name|ftp
expr_stmt|;
name|ftp
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
name|it
operator|=
name|resultMap
operator|.
name|find
argument_list|(
name|QFtp
operator|::
name|Remove
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|resultMap
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|success
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|fileExists
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|21
argument_list|,
literal|"ftptest"
argument_list|,
literal|"password"
argument_list|,
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// test QFtp::currentId() and QFtp::currentCommand()
end_comment
begin_define
DECL|macro|CURRENTCOMMAND_TEST
define|#
directive|define
name|CURRENTCOMMAND_TEST
define|\
value|{ \   ResMapIt it; \   for ( it = resultMap.begin(); it != resultMap.end(); ++it ) { \                                                                 if ( it.value().id == ftp->currentId() ) { \                                                                                                            QVERIFY( it.key() == ftp->currentCommand() ); \                                                                                                        } \ } \ }
end_define
begin_function
DECL|function|commandStarted
name|void
name|tst_QFtp
operator|::
name|commandStarted
parameter_list|(
name|int
name|id
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|DUMP_SIGNALS
argument_list|)
name|qDebug
argument_list|(
literal|"%d:commandStarted( %d )"
argument_list|,
name|ftp
operator|->
name|currentId
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// make sure that the commandStarted and commandFinished are nested correctly
name|QVERIFY
argument_list|(
name|current_id
operator|==
literal|0
argument_list|)
expr_stmt|;
name|current_id
operator|=
name|id
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ids
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ids
operator|.
name|first
argument_list|()
operator|==
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|ids
operator|.
name|count
argument_list|()
operator|>
literal|1
condition|)
block|{
name|QVERIFY
argument_list|(
name|ftp
operator|->
name|hasPendingCommands
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
operator|!
name|ftp
operator|->
name|hasPendingCommands
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|ftp
operator|->
name|currentId
argument_list|()
operator|==
name|id
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cur_state
operator|==
name|ftp
operator|->
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|CURRENTCOMMAND_TEST
expr_stmt|;
name|QVERIFY
argument_list|(
name|ftp
operator|->
name|error
argument_list|()
operator|==
name|QFtp
operator|::
name|NoError
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|commandFinished
name|void
name|tst_QFtp
operator|::
name|commandFinished
parameter_list|(
name|int
name|id
parameter_list|,
name|bool
name|error
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|DUMP_SIGNALS
argument_list|)
name|qDebug
argument_list|(
literal|"%d:commandFinished( %d, %d ) -- errorString: '%s'"
argument_list|,
name|ftp
operator|->
name|currentId
argument_list|()
argument_list|,
name|id
argument_list|,
operator|(
name|int
operator|)
name|error
argument_list|,
name|ftp
operator|->
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|ftp
operator|->
name|currentCommand
argument_list|()
operator|==
name|QFtp
operator|::
name|Get
condition|)
block|{
name|bytesAvailable_finishedGet
operator|=
name|ftp
operator|->
name|bytesAvailable
argument_list|()
expr_stmt|;
block|}
name|bytesAvailable_finished
operator|=
name|ftp
operator|->
name|bytesAvailable
argument_list|()
expr_stmt|;
comment|// make sure that the commandStarted and commandFinished are nested correctly
name|QVERIFY
argument_list|(
name|current_id
operator|==
name|id
argument_list|)
expr_stmt|;
name|current_id
operator|=
literal|0
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ids
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ids
operator|.
name|first
argument_list|()
operator|==
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|error
operator|&&
name|ids
operator|.
name|count
argument_list|()
operator|>
literal|1
condition|)
block|{
name|QVERIFY
argument_list|(
name|ftp
operator|->
name|hasPendingCommands
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
operator|!
name|ftp
operator|->
name|hasPendingCommands
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|error
condition|)
block|{
name|QVERIFY
argument_list|(
name|ftp
operator|->
name|error
argument_list|()
operator|!=
name|QFtp
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|ids
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|ftp
operator|->
name|error
argument_list|()
operator|==
name|QFtp
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|ids
operator|.
name|pop_front
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|ftp
operator|->
name|currentId
argument_list|()
operator|==
name|id
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cur_state
operator|==
name|ftp
operator|->
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|CURRENTCOMMAND_TEST
expr_stmt|;
if|if
condition|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
operator|!=
name|QLatin1String
argument_list|(
literal|"commandSequence"
argument_list|)
condition|)
block|{
name|ResMapIt
name|it
init|=
name|resultMap
operator|.
name|find
argument_list|(
name|ftp
operator|->
name|currentCommand
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|resultMap
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|success
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
condition|)
name|it
operator|.
name|value
argument_list|()
operator|.
name|success
operator|=
literal|0
expr_stmt|;
else|else
name|it
operator|.
name|value
argument_list|()
operator|.
name|success
operator|=
literal|1
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|done
name|void
name|tst_QFtp
operator|::
name|done
parameter_list|(
name|bool
name|error
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|DUMP_SIGNALS
argument_list|)
name|qDebug
argument_list|(
literal|"%d:done( %d )"
argument_list|,
name|ftp
operator|->
name|currentId
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|error
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|bytesAvailable_done
operator|=
name|ftp
operator|->
name|bytesAvailable
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|ftp
operator|->
name|currentId
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|current_id
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ids
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cur_state
operator|==
name|ftp
operator|->
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ftp
operator|->
name|hasPendingCommands
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"commandSequence"
argument_list|)
condition|)
block|{
name|QVERIFY
argument_list|(
name|commandSequence_success
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
condition|)
name|commandSequence_success
operator|=
literal|0
expr_stmt|;
else|else
name|commandSequence_success
operator|=
literal|1
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|done_success
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
condition|)
block|{
name|QVERIFY
argument_list|(
name|ftp
operator|->
name|error
argument_list|()
operator|!=
name|QFtp
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|done_success
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|ftp
operator|->
name|error
argument_list|()
operator|==
name|QFtp
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|done_success
operator|=
literal|1
expr_stmt|;
block|}
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stateChanged
name|void
name|tst_QFtp
operator|::
name|stateChanged
parameter_list|(
name|int
name|state
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|DUMP_SIGNALS
argument_list|)
name|qDebug
argument_list|(
literal|"%d:  stateChanged( %d )"
argument_list|,
name|ftp
operator|->
name|currentId
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|ftp
operator|->
name|currentId
argument_list|()
argument_list|,
name|current_id
argument_list|)
expr_stmt|;
name|CURRENTCOMMAND_TEST
expr_stmt|;
name|QVERIFY
argument_list|(
name|state
operator|!=
name|cur_state
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|state
argument_list|,
operator|(
name|int
operator|)
name|ftp
operator|->
name|state
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|!=
name|QFtp
operator|::
name|Unconnected
condition|)
block|{
comment|// make sure that the states are always emitted in the right order (for
comment|// this, we assume an ordering on the enum values, which they have at
comment|// the moment)
name|QVERIFY
argument_list|(
name|cur_state
operator|<
name|state
argument_list|)
expr_stmt|;
comment|// make sure that state changes are only emitted in response to certain
comment|// commands
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|QFtp
operator|::
name|HostLookup
case|:
case|case
name|QFtp
operator|::
name|Connecting
case|:
case|case
name|QFtp
operator|::
name|Connected
case|:
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|ftp
operator|->
name|currentCommand
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|QFtp
operator|::
name|ConnectToHost
argument_list|)
expr_stmt|;
break|break;
case|case
name|QFtp
operator|::
name|LoggedIn
case|:
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|ftp
operator|->
name|currentCommand
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|QFtp
operator|::
name|Login
argument_list|)
expr_stmt|;
break|break;
case|case
name|QFtp
operator|::
name|Closing
case|:
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|ftp
operator|->
name|currentCommand
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|QFtp
operator|::
name|Close
argument_list|)
expr_stmt|;
break|break;
default|default:
name|QWARN
argument_list|(
name|QString
argument_list|(
literal|"Unexpected state '%1'"
argument_list|)
operator|.
name|arg
argument_list|(
name|state
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|cur_state
operator|=
name|state
expr_stmt|;
if|if
condition|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"connectToHost"
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|QFtp
operator|::
name|HostLookup
case|:
case|case
name|QFtp
operator|::
name|Connecting
case|:
case|case
name|QFtp
operator|::
name|LoggedIn
case|:
case|case
name|QFtp
operator|::
name|Closing
case|:
comment|// ignore
break|break;
case|case
name|QFtp
operator|::
name|Connected
case|:
case|case
name|QFtp
operator|::
name|Unconnected
case|:
name|QVERIFY
argument_list|(
name|connectToHost_state
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|connectToHost_state
operator|=
name|state
expr_stmt|;
break|break;
default|default:
name|QWARN
argument_list|(
name|QString
argument_list|(
literal|"Unknown state '%1'"
argument_list|)
operator|.
name|arg
argument_list|(
name|state
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
elseif|else
if|if
condition|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"close"
argument_list|)
condition|)
block|{
name|ResMapIt
name|it
init|=
name|resultMap
operator|.
name|find
argument_list|(
name|QFtp
operator|::
name|Close
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|resultMap
operator|.
name|end
argument_list|()
operator|&&
name|ftp
operator|->
name|currentId
argument_list|()
operator|==
name|it
operator|.
name|value
argument_list|()
operator|.
name|id
condition|)
block|{
if|if
condition|(
name|state
operator|==
name|QFtp
operator|::
name|Closing
condition|)
block|{
name|QVERIFY
argument_list|(
name|close_state
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|close_state
operator|=
name|state
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|state
operator|==
name|QFtp
operator|::
name|Unconnected
condition|)
block|{
name|QVERIFY
argument_list|(
name|close_state
operator|==
name|QFtp
operator|::
name|Closing
argument_list|)
expr_stmt|;
name|close_state
operator|=
name|state
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"login"
argument_list|)
condition|)
block|{
name|ResMapIt
name|it
init|=
name|resultMap
operator|.
name|find
argument_list|(
name|QFtp
operator|::
name|Login
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|resultMap
operator|.
name|end
argument_list|()
operator|&&
name|ftp
operator|->
name|currentId
argument_list|()
operator|==
name|it
operator|.
name|value
argument_list|()
operator|.
name|id
condition|)
block|{
if|if
condition|(
name|state
operator|==
name|QFtp
operator|::
name|LoggedIn
condition|)
block|{
name|QVERIFY
argument_list|(
name|login_state
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|login_state
operator|=
name|state
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|listInfo
name|void
name|tst_QFtp
operator|::
name|listInfo
parameter_list|(
specifier|const
name|QUrlInfo
modifier|&
name|i
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|DUMP_SIGNALS
argument_list|)
name|qDebug
argument_list|(
literal|"%d:  listInfo( %s )"
argument_list|,
name|ftp
operator|->
name|currentId
argument_list|()
argument_list|,
name|i
operator|.
name|name
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|ftp
operator|->
name|currentId
argument_list|()
argument_list|,
name|current_id
argument_list|)
expr_stmt|;
if|if
condition|(
name|ids
operator|.
name|count
argument_list|()
operator|>
literal|1
condition|)
block|{
name|QVERIFY
argument_list|(
name|ftp
operator|->
name|hasPendingCommands
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
operator|!
name|ftp
operator|->
name|hasPendingCommands
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|cur_state
operator|==
name|ftp
operator|->
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|CURRENTCOMMAND_TEST
expr_stmt|;
if|if
condition|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"list"
argument_list|)
operator|||
name|QTest
operator|::
name|currentTestFunction
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"cd"
argument_list|)
operator|||
name|QTest
operator|::
name|currentTestFunction
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"proxy"
argument_list|)
operator|||
name|inFileDirExistsFunction
condition|)
block|{
name|ResMapIt
name|it
init|=
name|resultMap
operator|.
name|find
argument_list|(
name|QFtp
operator|::
name|List
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|resultMap
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ftp
operator|->
name|currentId
argument_list|()
operator|==
name|it
operator|.
name|value
argument_list|()
operator|.
name|id
argument_list|)
expr_stmt|;
name|listInfo_i
operator|<<
name|i
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|readyRead
name|void
name|tst_QFtp
operator|::
name|readyRead
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|DUMP_SIGNALS
argument_list|)
name|qDebug
argument_list|(
literal|"%d:  readyRead(), bytesAvailable == %lu"
argument_list|,
name|ftp
operator|->
name|currentId
argument_list|()
argument_list|,
name|ftp
operator|->
name|bytesAvailable
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|ftp
operator|->
name|currentId
argument_list|()
argument_list|,
name|current_id
argument_list|)
expr_stmt|;
if|if
condition|(
name|ids
operator|.
name|count
argument_list|()
operator|>
literal|1
condition|)
block|{
name|QVERIFY
argument_list|(
name|ftp
operator|->
name|hasPendingCommands
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
operator|!
name|ftp
operator|->
name|hasPendingCommands
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|cur_state
operator|==
name|ftp
operator|->
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|CURRENTCOMMAND_TEST
expr_stmt|;
if|if
condition|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
operator|!=
name|QLatin1String
argument_list|(
literal|"bytesAvailable"
argument_list|)
condition|)
block|{
name|int
name|oldSize
init|=
name|newData_ba
operator|.
name|size
argument_list|()
decl_stmt|;
name|qlonglong
name|bytesAvail
init|=
name|ftp
operator|->
name|bytesAvailable
argument_list|()
decl_stmt|;
name|QByteArray
name|ba
init|=
name|ftp
operator|->
name|readAll
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|ba
operator|.
name|size
argument_list|()
operator|==
operator|(
name|int
operator|)
name|bytesAvail
argument_list|)
expr_stmt|;
name|newData_ba
operator|.
name|resize
argument_list|(
name|oldSize
operator|+
name|ba
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|newData_ba
operator|.
name|data
argument_list|()
operator|+
name|oldSize
argument_list|,
name|ba
operator|.
name|data
argument_list|()
argument_list|,
name|ba
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|bytesTotal
operator|!=
operator|-
literal|1
condition|)
block|{
name|QVERIFY
argument_list|(
operator|(
name|int
operator|)
name|newData_ba
operator|.
name|size
argument_list|()
operator|<=
name|bytesTotal
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|(
name|int
operator|)
name|newData_ba
operator|.
name|size
argument_list|()
operator|==
name|bytesDone
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|dataTransferProgress
name|void
name|tst_QFtp
operator|::
name|dataTransferProgress
parameter_list|(
name|qint64
name|done
parameter_list|,
name|qint64
name|total
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|DUMP_SIGNALS
argument_list|)
name|qDebug
argument_list|(
literal|"%d:  dataTransferProgress( %lli, %lli )"
argument_list|,
name|ftp
operator|->
name|currentId
argument_list|()
argument_list|,
name|done
argument_list|,
name|total
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|ftp
operator|->
name|currentId
argument_list|()
argument_list|,
name|current_id
argument_list|)
expr_stmt|;
if|if
condition|(
name|ids
operator|.
name|count
argument_list|()
operator|>
literal|1
condition|)
block|{
name|QVERIFY
argument_list|(
name|ftp
operator|->
name|hasPendingCommands
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
operator|!
name|ftp
operator|->
name|hasPendingCommands
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|cur_state
operator|==
name|ftp
operator|->
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|CURRENTCOMMAND_TEST
expr_stmt|;
if|if
condition|(
name|bytesTotal
operator|==
name|bytesTotal_init
condition|)
block|{
name|bytesTotal
operator|=
name|total
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|bytesTotal
operator|==
name|total
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|bytesTotal
operator|!=
name|bytesTotal_init
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|bytesDone
operator|<=
name|done
argument_list|)
expr_stmt|;
name|bytesDone
operator|=
name|done
expr_stmt|;
if|if
condition|(
name|bytesTotal
operator|!=
operator|-
literal|1
condition|)
block|{
name|QVERIFY
argument_list|(
name|bytesDone
operator|<=
name|bytesTotal
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"abort"
argument_list|)
condition|)
block|{
comment|// ### it would be nice if we could specify in our testdata when to do
comment|// the abort
if|if
condition|(
name|done
operator|>=
name|total
operator|/
literal|100000
condition|)
block|{
if|if
condition|(
name|ids
operator|.
name|count
argument_list|()
operator|!=
literal|1
condition|)
block|{
comment|// do abort only once
name|int
name|tmpId
init|=
name|ids
operator|.
name|first
argument_list|()
decl_stmt|;
name|ids
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ids
operator|<<
name|tmpId
expr_stmt|;
name|ftp
operator|->
name|abort
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|newFtp
name|QFtp
modifier|*
name|tst_QFtp
operator|::
name|newFtp
parameter_list|()
block|{
name|QFtp
modifier|*
name|nFtp
init|=
operator|new
name|QFtp
argument_list|(
name|this
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
if|if
condition|(
name|networkSessionExplicit
condition|)
block|{
name|nFtp
operator|->
name|setProperty
argument_list|(
literal|"_q_networksession"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|networkSessionExplicit
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|connect
argument_list|(
name|nFtp
argument_list|,
name|SIGNAL
argument_list|(
name|commandStarted
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|commandStarted
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|nFtp
argument_list|,
name|SIGNAL
argument_list|(
name|commandFinished
argument_list|(
name|int
argument_list|,
name|bool
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|commandFinished
argument_list|(
name|int
argument_list|,
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|nFtp
argument_list|,
name|SIGNAL
argument_list|(
name|done
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|done
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|nFtp
argument_list|,
name|SIGNAL
argument_list|(
name|stateChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|stateChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|nFtp
argument_list|,
name|SIGNAL
argument_list|(
name|listInfo
argument_list|(
specifier|const
name|QUrlInfo
operator|&
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|listInfo
argument_list|(
specifier|const
name|QUrlInfo
operator|&
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|nFtp
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|nFtp
argument_list|,
name|SIGNAL
argument_list|(
name|dataTransferProgress
argument_list|(
name|qint64
argument_list|,
name|qint64
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|dataTransferProgress
argument_list|(
name|qint64
argument_list|,
name|qint64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|nFtp
return|;
block|}
end_function
begin_function
DECL|function|addCommand
name|void
name|tst_QFtp
operator|::
name|addCommand
parameter_list|(
name|QFtp
operator|::
name|Command
name|cmd
parameter_list|,
name|int
name|id
parameter_list|)
block|{
name|ids
operator|<<
name|id
expr_stmt|;
name|CommandResult
name|res
decl_stmt|;
name|res
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|res
operator|.
name|success
operator|=
operator|-
literal|1
expr_stmt|;
name|resultMap
index|[
name|cmd
index|]
operator|=
name|res
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fileExists
name|bool
name|tst_QFtp
operator|::
name|fileExists
parameter_list|(
specifier|const
name|QString
modifier|&
name|host
parameter_list|,
name|quint16
name|port
parameter_list|,
specifier|const
name|QString
modifier|&
name|user
parameter_list|,
specifier|const
name|QString
modifier|&
name|password
parameter_list|,
specifier|const
name|QString
modifier|&
name|file
parameter_list|,
specifier|const
name|QString
modifier|&
name|cdDir
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|ftp
operator|=
name|newFtp
argument_list|()
expr_stmt|;
comment|// ### make these tests work
if|if
condition|(
name|ftp
operator|->
name|currentId
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"ftp->currentId() != 0"
argument_list|)
expr_stmt|;
return|return
name|FALSE
return|;
block|}
if|if
condition|(
name|ftp
operator|->
name|state
argument_list|()
operator|!=
name|QFtp
operator|::
name|Unconnected
condition|)
block|{
name|qWarning
argument_list|(
literal|"ftp->state() != QFtp::Unconnected"
argument_list|)
expr_stmt|;
return|return
name|FALSE
return|;
block|}
name|addCommand
argument_list|(
name|QFtp
operator|::
name|ConnectToHost
argument_list|,
name|ftp
operator|->
name|connectToHost
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Login
argument_list|,
name|ftp
operator|->
name|login
argument_list|(
name|user
argument_list|,
name|password
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cdDir
operator|.
name|isNull
argument_list|()
condition|)
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Cd
argument_list|,
name|ftp
operator|->
name|cd
argument_list|(
name|cdDir
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|List
argument_list|,
name|ftp
operator|->
name|list
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Close
argument_list|,
name|ftp
operator|->
name|close
argument_list|()
argument_list|)
expr_stmt|;
name|inFileDirExistsFunction
operator|=
name|TRUE
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
operator|delete
name|ftp
expr_stmt|;
name|ftp
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
block|{
comment|// ### make this test work
name|qWarning
argument_list|(
literal|"tst_QFtp::fileExists: Network operation timed out"
argument_list|)
expr_stmt|;
return|return
name|FALSE
return|;
block|}
name|inFileDirExistsFunction
operator|=
name|FALSE
expr_stmt|;
name|ResMapIt
name|it
init|=
name|resultMap
operator|.
name|find
argument_list|(
name|QFtp
operator|::
name|ConnectToHost
argument_list|)
decl_stmt|;
comment|// ### make these tests work
if|if
condition|(
name|it
operator|==
name|resultMap
operator|.
name|end
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"it != resultMap.end()"
argument_list|)
expr_stmt|;
return|return
name|FALSE
return|;
block|}
if|if
condition|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|success
operator|==
operator|-
literal|1
condition|)
block|{
name|qWarning
argument_list|(
literal|"it.value().success != -1"
argument_list|)
expr_stmt|;
return|return
name|FALSE
return|;
block|}
if|if
condition|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|success
operator|==
literal|1
condition|)
block|{
for|for
control|(
name|uint
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|uint
operator|)
name|listInfo_i
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|QFileInfo
argument_list|(
name|listInfo_i
index|[
name|i
index|]
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|fileName
argument_list|()
operator|==
name|QFileInfo
argument_list|(
name|file
argument_list|)
operator|.
name|fileName
argument_list|()
condition|)
return|return
name|TRUE
return|;
block|}
block|}
comment|//this is not a good warning considering sometime this function is used to test that a file does not exist
comment|//qWarning("file doesn't exist");
return|return
name|FALSE
return|;
block|}
end_function
begin_function
DECL|function|dirExists
name|bool
name|tst_QFtp
operator|::
name|dirExists
parameter_list|(
specifier|const
name|QString
modifier|&
name|host
parameter_list|,
name|quint16
name|port
parameter_list|,
specifier|const
name|QString
modifier|&
name|user
parameter_list|,
specifier|const
name|QString
modifier|&
name|password
parameter_list|,
specifier|const
name|QString
modifier|&
name|cdDir
parameter_list|,
specifier|const
name|QString
modifier|&
name|dirToCreate
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|ftp
operator|=
name|newFtp
argument_list|()
expr_stmt|;
comment|// ### make these tests work
comment|//    QCOMPARE( ftp->currentId(), 0 );
comment|//    QCOMPARE( (int)ftp->state(), (int)QFtp::Unconnected );
name|addCommand
argument_list|(
name|QFtp
operator|::
name|ConnectToHost
argument_list|,
name|ftp
operator|->
name|connectToHost
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Login
argument_list|,
name|ftp
operator|->
name|login
argument_list|(
name|user
argument_list|,
name|password
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dirToCreate
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Cd
argument_list|,
name|ftp
operator|->
name|cd
argument_list|(
name|dirToCreate
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Cd
argument_list|,
name|ftp
operator|->
name|cd
argument_list|(
name|cdDir
operator|+
literal|"/"
operator|+
name|dirToCreate
argument_list|)
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|QFtp
operator|::
name|Close
argument_list|,
name|ftp
operator|->
name|close
argument_list|()
argument_list|)
expr_stmt|;
name|inFileDirExistsFunction
operator|=
name|TRUE
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
operator|delete
name|ftp
expr_stmt|;
name|ftp
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
block|{
comment|// ### make this test work
comment|// QFAIL( "Network operation timed out" );
name|qWarning
argument_list|(
literal|"tst_QFtp::dirExists: Network operation timed out"
argument_list|)
expr_stmt|;
return|return
name|FALSE
return|;
block|}
name|inFileDirExistsFunction
operator|=
name|FALSE
expr_stmt|;
name|ResMapIt
name|it
init|=
name|resultMap
operator|.
name|find
argument_list|(
name|QFtp
operator|::
name|Cd
argument_list|)
decl_stmt|;
comment|// ### make these tests work
comment|//    QVERIFY( it != resultMap.end() );
comment|//    QVERIFY( it.value().success != -1 );
return|return
name|it
operator|.
name|value
argument_list|()
operator|.
name|success
operator|==
literal|1
return|;
block|}
end_function
begin_function
DECL|function|doneSignal
name|void
name|tst_QFtp
operator|::
name|doneSignal
parameter_list|()
block|{
name|QFtp
name|ftp
decl_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|ftp
argument_list|,
name|SIGNAL
argument_list|(
name|done
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ftp
operator|.
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|login
argument_list|(
literal|"anonymous"
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|list
argument_list|()
expr_stmt|;
name|ftp
operator|.
name|close
argument_list|()
expr_stmt|;
name|done_success
operator|=
literal|0
expr_stmt|;
name|connect
argument_list|(
operator|&
name|ftp
argument_list|,
name|SIGNAL
argument_list|(
name|done
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
operator|&
operator|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|)
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|61
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|first
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|toBool
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|queueMoreCommandsInDoneSlot
name|void
name|tst_QFtp
operator|::
name|queueMoreCommandsInDoneSlot
parameter_list|()
block|{
name|QSKIP
argument_list|(
literal|"Task 127050&& 113966"
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
name|QFtp
name|ftp
decl_stmt|;
name|QSignalSpy
name|doneSpy
argument_list|(
operator|&
name|ftp
argument_list|,
name|SIGNAL
argument_list|(
name|done
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|commandFinishedSpy
argument_list|(
operator|&
name|ftp
argument_list|,
name|SIGNAL
argument_list|(
name|commandFinished
argument_list|(
name|int
argument_list|,
name|bool
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|->
name|ftp
operator|=
operator|&
name|ftp
expr_stmt|;
name|connect
argument_list|(
operator|&
name|ftp
argument_list|,
name|SIGNAL
argument_list|(
name|done
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|cdUpSlot
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|connectToHost
argument_list|(
literal|"ftp.qt.nokia.com"
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|login
argument_list|()
expr_stmt|;
name|ftp
operator|.
name|cd
argument_list|(
literal|"qt"
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|rmdir
argument_list|(
literal|"qtest-removedir-noexist"
argument_list|)
expr_stmt|;
while|while
condition|(
name|ftp
operator|.
name|hasPendingCommands
argument_list|()
operator|||
name|ftp
operator|.
name|currentCommand
argument_list|()
operator|!=
name|QFtp
operator|::
name|None
condition|)
block|{
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|(
name|QEventLoop
operator|::
name|AllEvents
operator||
name|QEventLoop
operator|::
name|WaitForMoreEvents
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|doneSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doneSpy
operator|.
name|first
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|toBool
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doneSpy
operator|.
name|last
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|toBool
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|commandFinishedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|int
name|firstId
init|=
name|commandFinishedSpy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|commandFinishedSpy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|commandFinishedSpy
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|firstId
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|commandFinishedSpy
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|commandFinishedSpy
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|firstId
operator|+
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|commandFinishedSpy
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|commandFinishedSpy
operator|.
name|at
argument_list|(
literal|3
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|firstId
operator|+
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|commandFinishedSpy
operator|.
name|at
argument_list|(
literal|3
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|commandFinishedSpy
operator|.
name|at
argument_list|(
literal|4
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|firstId
operator|+
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|commandFinishedSpy
operator|.
name|at
argument_list|(
literal|4
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|commandFinishedSpy
operator|.
name|at
argument_list|(
literal|5
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|firstId
operator|+
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|commandFinishedSpy
operator|.
name|at
argument_list|(
literal|5
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|->
name|ftp
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cdUpSlot
name|void
name|tst_QFtp
operator|::
name|cdUpSlot
parameter_list|(
name|bool
name|error
parameter_list|)
block|{
if|if
condition|(
name|error
condition|)
block|{
name|ftp
operator|->
name|cd
argument_list|(
literal|".."
argument_list|)
expr_stmt|;
name|ftp
operator|->
name|cd
argument_list|(
literal|"qt"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qtbug7359Crash
name|void
name|tst_QFtp
operator|::
name|qtbug7359Crash
parameter_list|()
block|{
name|QFtp
name|ftp
decl_stmt|;
name|ftp
operator|.
name|connectToHost
argument_list|(
literal|"127.0.0.1"
argument_list|)
expr_stmt|;
name|QTime
name|t
decl_stmt|;
name|int
name|elapsed
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
name|elapsed
operator|=
name|t
operator|.
name|elapsed
argument_list|()
operator|)
operator|<
literal|200
condition|)
name|QCoreApplication
operator|::
name|processEvents
argument_list|(
name|QEventLoop
operator|::
name|AllEvents
argument_list|,
literal|200
operator|-
name|elapsed
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|close
argument_list|()
expr_stmt|;
name|t
operator|.
name|restart
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
name|elapsed
operator|=
name|t
operator|.
name|elapsed
argument_list|()
operator|)
operator|<
literal|1000
condition|)
name|QCoreApplication
operator|::
name|processEvents
argument_list|(
name|QEventLoop
operator|::
name|AllEvents
argument_list|,
literal|1000
operator|-
name|elapsed
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|connectToHost
argument_list|(
literal|"127.0.0.1"
argument_list|)
expr_stmt|;
name|t
operator|.
name|restart
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
name|elapsed
operator|=
name|t
operator|.
name|elapsed
argument_list|()
operator|)
operator|<
literal|2000
condition|)
name|QCoreApplication
operator|::
name|processEvents
argument_list|(
name|QEventLoop
operator|::
name|AllEvents
argument_list|,
literal|2000
operator|-
name|elapsed
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QFtp
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qftp.moc"
end_include
end_unit
