begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the Qt3Support module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q3TL_H
end_ifndef
begin_define
DECL|macro|Q3TL_H
define|#
directive|define
name|Q3TL_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qalgorithms.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
DECL|function|QT_MODULE
name|QT_MODULE
argument_list|(
name|Qt3SupportLight
argument_list|)
name|template
decl|<
name|typename
name|T
decl_stmt|,
name|typename
name|LessThan
decl|>
name|Q_OUTOFLINE_TEMPLATE
name|void
name|qHeapSortPushDown
argument_list|(
name|T
operator|*
name|heap
argument_list|,
name|int
name|first
argument_list|,
name|int
name|last
argument_list|,
name|LessThan
name|lessThan
argument_list|)
block|{
name|int
name|r
init|=
name|first
decl_stmt|;
while|while
condition|(
name|r
operator|<=
name|last
operator|/
literal|2
condition|)
block|{
if|if
condition|(
name|last
operator|==
literal|2
operator|*
name|r
condition|)
block|{
comment|// node r has only one child
if|if
condition|(
name|lessThan
argument_list|(
name|heap
index|[
literal|2
operator|*
name|r
index|]
argument_list|,
name|heap
index|[
name|r
index|]
argument_list|)
condition|)
name|qSwap
argument_list|(
name|heap
index|[
name|r
index|]
argument_list|,
name|heap
index|[
literal|2
operator|*
name|r
index|]
argument_list|)
expr_stmt|;
name|r
operator|=
name|last
expr_stmt|;
block|}
else|else
block|{
comment|// node r has two children
if|if
condition|(
name|lessThan
argument_list|(
name|heap
index|[
literal|2
operator|*
name|r
index|]
argument_list|,
name|heap
index|[
name|r
index|]
argument_list|)
operator|&&
operator|!
name|lessThan
argument_list|(
name|heap
index|[
literal|2
operator|*
name|r
operator|+
literal|1
index|]
argument_list|,
name|heap
index|[
literal|2
operator|*
name|r
index|]
argument_list|)
condition|)
block|{
comment|// swap with left child
name|qSwap
argument_list|(
name|heap
index|[
name|r
index|]
argument_list|,
name|heap
index|[
literal|2
operator|*
name|r
index|]
argument_list|)
expr_stmt|;
name|r
operator|*=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lessThan
argument_list|(
name|heap
index|[
literal|2
operator|*
name|r
operator|+
literal|1
index|]
argument_list|,
name|heap
index|[
name|r
index|]
argument_list|)
operator|&&
name|lessThan
argument_list|(
name|heap
index|[
literal|2
operator|*
name|r
operator|+
literal|1
index|]
argument_list|,
name|heap
index|[
literal|2
operator|*
name|r
index|]
argument_list|)
condition|)
block|{
comment|// swap with right child
name|qSwap
argument_list|(
name|heap
index|[
name|r
index|]
argument_list|,
name|heap
index|[
literal|2
operator|*
name|r
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|r
operator|=
literal|2
operator|*
name|r
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
name|r
operator|=
name|last
expr_stmt|;
block|}
block|}
block|}
block|}
end_decl_stmt
begin_expr_stmt
DECL|variable|BiIterator
DECL|variable|T
name|template
operator|<
name|typename
name|BiIterator
operator|,
name|typename
name|T
operator|,
name|typename
name|LessThan
operator|>
DECL|function|qHeapSortHelper
name|Q_OUTOFLINE_TEMPLATE
name|void
name|qHeapSortHelper
argument_list|(
argument|BiIterator begin
argument_list|,
argument|BiIterator end
argument_list|,
argument|const T&
comment|/* dummy */
argument_list|,
argument|LessThan lessThan
argument_list|)
block|{
name|BiIterator
name|it
operator|=
name|begin
block|;
name|uint
name|n
operator|=
literal|0
block|;
while|while
condition|(
name|it
operator|!=
name|end
condition|)
block|{
operator|++
name|n
expr_stmt|;
operator|++
name|it
expr_stmt|;
block|}
end_expr_stmt
begin_if
if|if
condition|(
name|n
operator|==
literal|0
condition|)
return|return;
end_if
begin_comment
comment|// Create the heap
end_comment
begin_decl_stmt
name|BiIterator
name|insert
init|=
name|begin
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|T
modifier|*
name|realheap
init|=
name|new
name|T
index|[
name|n
index|]
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|T
modifier|*
name|heap
init|=
name|realheap
operator|-
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|size
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_for
for|for
control|(
init|;
name|insert
operator|!=
name|end
condition|;
operator|++
name|insert
control|)
block|{
name|heap
index|[
operator|++
name|size
index|]
operator|=
operator|*
name|insert
expr_stmt|;
name|int
name|i
init|=
name|size
decl_stmt|;
while|while
condition|(
name|i
operator|>
literal|1
operator|&&
name|lessThan
argument_list|(
name|heap
index|[
name|i
index|]
argument_list|,
name|heap
index|[
name|i
operator|/
literal|2
index|]
argument_list|)
condition|)
block|{
name|qSwap
argument_list|(
name|heap
index|[
name|i
index|]
argument_list|,
name|heap
index|[
name|i
operator|/
literal|2
index|]
argument_list|)
expr_stmt|;
name|i
operator|/=
literal|2
expr_stmt|;
block|}
block|}
end_for
begin_comment
comment|// Now do the sorting
end_comment
begin_for
for|for
control|(
name|int
name|i
init|=
name|n
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
operator|*
name|begin
operator|++
operator|=
name|heap
index|[
literal|1
index|]
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|1
condition|)
block|{
name|heap
index|[
literal|1
index|]
operator|=
name|heap
index|[
name|i
index|]
expr_stmt|;
name|qHeapSortPushDown
argument_list|(
name|heap
argument_list|,
literal|1
argument_list|,
name|i
operator|-
literal|1
argument_list|,
name|lessThan
argument_list|)
expr_stmt|;
block|}
block|}
end_for
begin_decl_stmt
name|delete
index|[]
name|realheap
decl_stmt|;
end_decl_stmt
begin_expr_stmt
unit|}  template
DECL|variable|BiIterator
operator|<
name|typename
name|BiIterator
operator|,
name|typename
name|T
operator|>
DECL|function|qHeapSortHelper
specifier|inline
name|void
name|qHeapSortHelper
argument_list|(
argument|BiIterator begin
argument_list|,
argument|BiIterator end
argument_list|,
argument|const T&dummy
argument_list|)
block|{
name|qHeapSortHelper
argument_list|(
name|begin
argument_list|,
name|end
argument_list|,
name|dummy
argument_list|,
name|qLess
operator|<
name|T
operator|>
operator|(
operator|)
argument_list|)
block|; }
DECL|variable|BiIterator
name|template
operator|<
name|typename
name|BiIterator
operator|,
name|typename
name|LessThan
operator|>
DECL|function|qHeapSort
specifier|inline
name|void
name|qHeapSort
argument_list|(
argument|BiIterator begin
argument_list|,
argument|BiIterator end
argument_list|,
argument|LessThan lessThan
argument_list|)
block|{
if|if
condition|(
name|begin
operator|!=
name|end
condition|)
name|qHeapSortHelper
argument_list|(
name|begin
argument_list|,
name|end
argument_list|,
operator|*
name|begin
argument_list|,
name|lessThan
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|BiIterator
operator|>
DECL|function|qHeapSort
specifier|inline
name|void
name|qHeapSort
argument_list|(
argument|BiIterator begin
argument_list|,
argument|BiIterator end
argument_list|)
block|{
if|if
condition|(
name|begin
operator|!=
name|end
condition|)
name|qHeapSortHelper
argument_list|(
name|begin
argument_list|,
name|end
argument_list|,
operator|*
name|begin
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|Container
operator|>
DECL|function|qHeapSort
specifier|inline
name|void
name|qHeapSort
argument_list|(
argument|Container&c
argument_list|)
block|{
ifdef|#
directive|ifdef
name|Q_CC_BOR
comment|// Work around Borland 5.5 optimizer bug
name|c
operator|.
name|detach
argument_list|()
block|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|c
operator|.
name|empty
argument_list|()
condition|)
name|qHeapSortHelper
argument_list|(
name|c
operator|.
name|begin
argument_list|()
argument_list|,
name|c
operator|.
name|end
argument_list|()
argument_list|,
operator|*
name|c
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|variable|BiIterator
name|template
operator|<
name|typename
name|BiIterator
operator|,
name|typename
name|LessThan
operator|>
DECL|function|qBubbleSort
name|void
name|qBubbleSort
argument_list|(
argument|BiIterator begin
argument_list|,
argument|BiIterator end
argument_list|,
argument|LessThan lessThan
argument_list|)
block|{
comment|// Goto last element;
name|BiIterator
name|last
operator|=
name|end
block|;
comment|// empty list
if|if
condition|(
name|begin
operator|==
name|end
condition|)
return|return;
operator|--
name|last
expr_stmt|;
end_expr_stmt
begin_comment
comment|// only one element ?
end_comment
begin_if
if|if
condition|(
name|last
operator|==
name|begin
condition|)
return|return;
end_if
begin_comment
comment|// So we have at least two elements in here
end_comment
begin_while
while|while
condition|(
name|begin
operator|!=
name|last
condition|)
block|{
name|bool
name|swapped
init|=
name|false
decl_stmt|;
name|BiIterator
name|swapPos
init|=
name|begin
decl_stmt|;
name|BiIterator
name|x
init|=
name|end
decl_stmt|;
name|BiIterator
name|y
init|=
name|x
decl_stmt|;
name|y
operator|--
expr_stmt|;
do|do
block|{
operator|--
name|x
expr_stmt|;
operator|--
name|y
expr_stmt|;
if|if
condition|(
name|lessThan
argument_list|(
operator|*
name|x
argument_list|,
operator|*
name|y
argument_list|)
condition|)
block|{
name|swapped
operator|=
name|true
expr_stmt|;
name|qSwap
argument_list|(
operator|*
name|x
argument_list|,
operator|*
name|y
argument_list|)
expr_stmt|;
name|swapPos
operator|=
name|y
expr_stmt|;
block|}
block|}
do|while
condition|(
name|y
operator|!=
name|begin
condition|)
do|;
if|if
condition|(
operator|!
name|swapped
condition|)
return|return;
name|begin
operator|=
name|swapPos
expr_stmt|;
operator|++
name|begin
expr_stmt|;
block|}
end_while
begin_expr_stmt
unit|}  template
DECL|variable|BiIterator
operator|<
name|typename
name|BiIterator
operator|,
name|typename
name|T
operator|>
DECL|function|qBubbleSortHelper
name|void
name|qBubbleSortHelper
argument_list|(
argument|BiIterator begin
argument_list|,
argument|BiIterator end
argument_list|,
argument|T
argument_list|)
block|{
name|qBubbleSort
argument_list|(
name|begin
argument_list|,
name|end
argument_list|,
name|qLess
operator|<
name|T
operator|>
operator|(
operator|)
argument_list|)
block|; }
name|template
operator|<
name|typename
name|BiIterator
operator|>
DECL|function|qBubbleSort
name|void
name|qBubbleSort
argument_list|(
argument|BiIterator begin
argument_list|,
argument|BiIterator end
argument_list|)
block|{
if|if
condition|(
name|begin
operator|!=
name|end
condition|)
name|qBubbleSortHelper
argument_list|(
name|begin
argument_list|,
name|end
argument_list|,
operator|*
name|begin
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|Container
operator|>
DECL|function|qBubbleSort
specifier|inline
name|void
name|qBubbleSort
argument_list|(
argument|Container&c
argument_list|)
block|{
name|qBubbleSort
argument_list|(
name|c
operator|.
name|begin
argument_list|()
argument_list|,
name|c
operator|.
name|end
argument_list|()
argument_list|)
block|; }
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q3TL_H
end_comment
end_unit
