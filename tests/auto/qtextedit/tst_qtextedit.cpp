begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qtextedit.h>
end_include
begin_include
include|#
directive|include
file|<qtextcursor.h>
end_include
begin_include
include|#
directive|include
file|<qtextlist.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qclipboard.h>
end_include
begin_include
include|#
directive|include
file|<qtextbrowser.h>
end_include
begin_include
include|#
directive|include
file|<private/qwidgettextcontrol_p.h>
end_include
begin_include
include|#
directive|include
file|<qscrollbar.h>
end_include
begin_include
include|#
directive|include
file|<qtextobject.h>
end_include
begin_include
include|#
directive|include
file|<qtexttable.h>
end_include
begin_include
include|#
directive|include
file|<qpainter.h>
end_include
begin_include
include|#
directive|include
file|<qimagereader.h>
end_include
begin_include
include|#
directive|include
file|<qimagewriter.h>
end_include
begin_include
include|#
directive|include
file|<qcommonstyle.h>
end_include
begin_include
include|#
directive|include
file|<qlayout.h>
end_include
begin_include
include|#
directive|include
file|<qabstracttextdocumentlayout.h>
end_include
begin_include
include|#
directive|include
file|<qtextdocumentfragment.h>
end_include
begin_comment
comment|//Used in copyAvailable
end_comment
begin_typedef
DECL|typedef|keyPairType
typedef|typedef
name|QPair
argument_list|<
name|Qt
operator|::
name|Key
argument_list|,
name|Qt
operator|::
name|KeyboardModifier
argument_list|>
name|keyPairType
typedef|;
end_typedef
begin_typedef
DECL|typedef|pairListType
typedef|typedef
name|QList
argument_list|<
name|keyPairType
argument_list|>
name|pairListType
typedef|;
end_typedef
begin_expr_stmt
DECL|variable|pairListType
name|Q_DECLARE_METATYPE
argument_list|(
name|pairListType
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|keyPairType
name|Q_DECLARE_METATYPE
argument_list|(
name|keyPairType
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|QList
name|Q_DECLARE_METATYPE
argument_list|(
name|QList
argument_list|<
name|bool
argument_list|>
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|QList
name|Q_DECLARE_METATYPE
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|)
expr_stmt|;
end_expr_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_MAC
end_ifdef
begin_include
include|#
directive|include
file|<Carbon/Carbon.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
end_if
begin_define
DECL|macro|SRCDIR
define|#
directive|define
name|SRCDIR
value|""
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|nativeClipboardWorking
name|bool
name|nativeClipboardWorking
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_WS_MAC
name|PasteboardRef
name|pasteboard
decl_stmt|;
name|OSStatus
name|status
init|=
name|PasteboardCreate
argument_list|(
literal|0
argument_list|,
operator|&
name|pasteboard
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
name|noErr
condition|)
name|CFRelease
argument_list|(
name|pasteboard
argument_list|)
expr_stmt|;
return|return
name|status
operator|==
name|noErr
return|;
endif|#
directive|endif
return|return
literal|true
return|;
block|}
end_function
begin_macro
name|QT_FORWARD_DECLARE_CLASS
argument_list|(
argument|QTextEdit
argument_list|)
end_macro
begin_comment
comment|//TESTED_CLASS=
end_comment
begin_comment
comment|//TESTED_FILES=
end_comment
begin_class
DECL|class|tst_QTextEdit
class|class
name|tst_QTextEdit
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QTextEdit
parameter_list|()
constructor_decl|;
public|public
name|slots
public|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|inlineAttributesOnInsert
parameter_list|()
function_decl|;
name|void
name|inlineAttributesOnSelection
parameter_list|()
function_decl|;
name|void
name|inlineAttributeSymmetry
parameter_list|()
function_decl|;
name|void
name|inlineAttributeSymmetryWithSelection
parameter_list|()
function_decl|;
name|void
name|autoBulletList1
parameter_list|()
function_decl|;
name|void
name|autoBulletList2
parameter_list|()
function_decl|;
name|void
name|preserveCharFormatAfterNewline
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
name|void
name|clearMustNotChangeClipboard
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|clearMustNotResetRootFrameMarginToDefault
parameter_list|()
function_decl|;
name|void
name|clearShouldPreserveTheCurrentCharFormat
parameter_list|()
function_decl|;
name|void
name|clearShouldClearExtraSelections
parameter_list|()
function_decl|;
name|void
name|paragSeparatorOnPlaintextAppend
parameter_list|()
function_decl|;
name|void
name|layoutingLoop
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
name|void
name|selectAllSetsNotSelection
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|asciiTab
parameter_list|()
function_decl|;
name|void
name|setDocument
parameter_list|()
function_decl|;
name|void
name|setDocument_shared
parameter_list|()
function_decl|;
name|void
name|mergeCurrentCharFormat
parameter_list|()
function_decl|;
name|void
name|mergeCurrentBlockCharFormat
parameter_list|()
function_decl|;
name|void
name|emptyAppend
parameter_list|()
function_decl|;
name|void
name|appendOnEmptyDocumentShouldReuseInitialParagraph
parameter_list|()
function_decl|;
name|void
name|cursorPositionChanged
parameter_list|()
function_decl|;
name|void
name|setTextCursor
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
name|void
name|undoAvailableAfterPaste
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|undoRedoAvailableRepetition
parameter_list|()
function_decl|;
name|void
name|appendShouldUseCurrentFormat
parameter_list|()
function_decl|;
name|void
name|appendShouldNotTouchTheSelection
parameter_list|()
function_decl|;
name|void
name|backspace
parameter_list|()
function_decl|;
name|void
name|shiftBackspace
parameter_list|()
function_decl|;
name|void
name|undoRedo
parameter_list|()
function_decl|;
name|void
name|preserveCharFormatInAppend
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
name|void
name|copyAndSelectAllInReadonly
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|ctrlAltInput
parameter_list|()
function_decl|;
name|void
name|noPropertiesOnDefaultTextEditCharFormat
parameter_list|()
function_decl|;
name|void
name|setPlainTextShouldUseCurrentCharFormat
parameter_list|()
function_decl|;
name|void
name|setPlainTextShouldEmitTextChangedOnce
parameter_list|()
function_decl|;
name|void
name|overwriteMode
parameter_list|()
function_decl|;
name|void
name|shiftDownInLineLastShouldSelectToEnd_data
parameter_list|()
function_decl|;
name|void
name|shiftDownInLineLastShouldSelectToEnd
parameter_list|()
function_decl|;
name|void
name|undoRedoShouldRepositionTextEditCursor
parameter_list|()
function_decl|;
name|void
name|lineWrapModes
parameter_list|()
function_decl|;
name|void
name|mouseCursorShape
parameter_list|()
function_decl|;
name|void
name|implicitClear
parameter_list|()
function_decl|;
name|void
name|undoRedoAfterSetContent
parameter_list|()
function_decl|;
name|void
name|numPadKeyNavigation
parameter_list|()
function_decl|;
name|void
name|moveCursor
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
name|void
name|mimeDataReimplementations
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|ctrlEnterShouldInsertLineSeparator_NOT
parameter_list|()
function_decl|;
name|void
name|shiftEnterShouldInsertLineSeparator
parameter_list|()
function_decl|;
name|void
name|selectWordsFromStringsContainingSeparators_data
parameter_list|()
function_decl|;
name|void
name|selectWordsFromStringsContainingSeparators
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
name|void
name|canPaste
parameter_list|()
function_decl|;
name|void
name|copyAvailable_data
parameter_list|()
function_decl|;
name|void
name|copyAvailable
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|ensureCursorVisibleOnInitialShow
parameter_list|()
function_decl|;
name|void
name|setHtmlInsideResizeEvent
parameter_list|()
function_decl|;
name|void
name|colorfulAppend
parameter_list|()
function_decl|;
name|void
name|ensureVisibleWithRtl
parameter_list|()
function_decl|;
name|void
name|preserveCharFormatAfterSetPlainText
parameter_list|()
function_decl|;
name|void
name|extraSelections
parameter_list|()
function_decl|;
name|void
name|adjustScrollbars
parameter_list|()
function_decl|;
name|void
name|currentCharFormatChanged
parameter_list|()
function_decl|;
name|void
name|textObscuredByScrollbars
parameter_list|()
function_decl|;
name|void
name|setTextPreservesUndoRedoEnabled
parameter_list|()
function_decl|;
name|void
name|wordWrapProperty
parameter_list|()
function_decl|;
name|void
name|lineWrapProperty
parameter_list|()
function_decl|;
name|void
name|selectionChanged
parameter_list|()
function_decl|;
name|void
name|copyPasteBackgroundImage
parameter_list|()
function_decl|;
name|void
name|setText
parameter_list|()
function_decl|;
name|void
name|fullWidthSelection_data
parameter_list|()
function_decl|;
name|void
name|fullWidthSelection
parameter_list|()
function_decl|;
name|void
name|fullWidthSelection2
parameter_list|()
function_decl|;
name|void
name|cursorRect
parameter_list|()
function_decl|;
name|void
name|setDocumentPreservesPalette
parameter_list|()
function_decl|;
name|void
name|pasteFromQt3RichText
parameter_list|()
function_decl|;
name|void
name|noWrapBackgrounds
parameter_list|()
function_decl|;
name|void
name|preserveCharFormatAfterUnchangingSetPosition
parameter_list|()
function_decl|;
name|void
name|twoSameInputMethodEvents
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
name|void
name|taskQTBUG_7902_contextMenuCrash
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|bidiVisualMovement_data
parameter_list|()
function_decl|;
name|void
name|bidiVisualMovement
parameter_list|()
function_decl|;
name|void
name|bidiLogicalMovement_data
parameter_list|()
function_decl|;
name|void
name|bidiLogicalMovement
parameter_list|()
function_decl|;
name|void
name|inputMethodSelection
parameter_list|()
function_decl|;
private|private:
name|void
name|createSelection
parameter_list|()
function_decl|;
name|int
name|blockCount
parameter_list|()
specifier|const
function_decl|;
name|bool
name|nativeClipboardWorking
parameter_list|()
function_decl|;
name|void
name|compareWidgetAndImage
parameter_list|(
name|QTextEdit
modifier|&
name|widget
parameter_list|,
specifier|const
name|QString
modifier|&
name|imageFileName
parameter_list|)
function_decl|;
DECL|member|ed
name|QTextEdit
modifier|*
name|ed
decl_stmt|;
DECL|member|rootFrameMargin
name|qreal
name|rootFrameMargin
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|nativeClipboardWorking
name|bool
name|tst_QTextEdit
operator|::
name|nativeClipboardWorking
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_WS_MAC
name|PasteboardRef
name|pasteboard
decl_stmt|;
name|OSStatus
name|status
init|=
name|PasteboardCreate
argument_list|(
literal|0
argument_list|,
operator|&
name|pasteboard
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
name|noErr
condition|)
name|CFRelease
argument_list|(
name|pasteboard
argument_list|)
expr_stmt|;
return|return
name|status
operator|==
name|noErr
return|;
endif|#
directive|endif
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QTextEdit
operator|::
name|getSetCheck
parameter_list|()
block|{
name|QTextEdit
name|obj1
decl_stmt|;
comment|// QTextDocument * QTextEdit::document()
comment|// void QTextEdit::setDocument(QTextDocument *)
name|QTextDocument
modifier|*
name|var1
init|=
operator|new
name|QTextDocument
decl_stmt|;
name|obj1
operator|.
name|setDocument
argument_list|(
name|var1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|var1
argument_list|,
name|obj1
operator|.
name|document
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setDocument
argument_list|(
operator|(
name|QTextDocument
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|var1
operator|!=
name|obj1
operator|.
name|document
argument_list|()
argument_list|)
expr_stmt|;
comment|// QTextEdit creates a new document when setting 0
name|QVERIFY
argument_list|(
operator|(
name|QTextDocument
operator|*
operator|)
literal|0
operator|!=
name|obj1
operator|.
name|document
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|var1
expr_stmt|;
comment|// AutoFormatting QTextEdit::autoFormatting()
comment|// void QTextEdit::setAutoFormatting(AutoFormatting)
name|obj1
operator|.
name|setAutoFormatting
argument_list|(
name|QTextEdit
operator|::
name|AutoFormatting
argument_list|(
name|QTextEdit
operator|::
name|AutoNone
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTextEdit
operator|::
name|AutoFormatting
argument_list|(
name|QTextEdit
operator|::
name|AutoNone
argument_list|)
argument_list|,
name|obj1
operator|.
name|autoFormatting
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setAutoFormatting
argument_list|(
name|QTextEdit
operator|::
name|AutoFormatting
argument_list|(
name|QTextEdit
operator|::
name|AutoBulletList
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTextEdit
operator|::
name|AutoFormatting
argument_list|(
name|QTextEdit
operator|::
name|AutoBulletList
argument_list|)
argument_list|,
name|obj1
operator|.
name|autoFormatting
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setAutoFormatting
argument_list|(
name|QTextEdit
operator|::
name|AutoFormatting
argument_list|(
name|QTextEdit
operator|::
name|AutoAll
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTextEdit
operator|::
name|AutoFormatting
argument_list|(
name|QTextEdit
operator|::
name|AutoAll
argument_list|)
argument_list|,
name|obj1
operator|.
name|autoFormatting
argument_list|()
argument_list|)
expr_stmt|;
comment|// bool QTextEdit::tabChangesFocus()
comment|// void QTextEdit::setTabChangesFocus(bool)
name|obj1
operator|.
name|setTabChangesFocus
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|tabChangesFocus
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setTabChangesFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|tabChangesFocus
argument_list|()
argument_list|)
expr_stmt|;
comment|// LineWrapMode QTextEdit::lineWrapMode()
comment|// void QTextEdit::setLineWrapMode(LineWrapMode)
name|obj1
operator|.
name|setLineWrapMode
argument_list|(
name|QTextEdit
operator|::
name|LineWrapMode
argument_list|(
name|QTextEdit
operator|::
name|NoWrap
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTextEdit
operator|::
name|LineWrapMode
argument_list|(
name|QTextEdit
operator|::
name|NoWrap
argument_list|)
argument_list|,
name|obj1
operator|.
name|lineWrapMode
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setLineWrapMode
argument_list|(
name|QTextEdit
operator|::
name|LineWrapMode
argument_list|(
name|QTextEdit
operator|::
name|WidgetWidth
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTextEdit
operator|::
name|LineWrapMode
argument_list|(
name|QTextEdit
operator|::
name|WidgetWidth
argument_list|)
argument_list|,
name|obj1
operator|.
name|lineWrapMode
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setLineWrapMode
argument_list|(
name|QTextEdit
operator|::
name|LineWrapMode
argument_list|(
name|QTextEdit
operator|::
name|FixedPixelWidth
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTextEdit
operator|::
name|LineWrapMode
argument_list|(
name|QTextEdit
operator|::
name|FixedPixelWidth
argument_list|)
argument_list|,
name|obj1
operator|.
name|lineWrapMode
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setLineWrapMode
argument_list|(
name|QTextEdit
operator|::
name|LineWrapMode
argument_list|(
name|QTextEdit
operator|::
name|FixedColumnWidth
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTextEdit
operator|::
name|LineWrapMode
argument_list|(
name|QTextEdit
operator|::
name|FixedColumnWidth
argument_list|)
argument_list|,
name|obj1
operator|.
name|lineWrapMode
argument_list|()
argument_list|)
expr_stmt|;
comment|// int QTextEdit::lineWrapColumnOrWidth()
comment|// void QTextEdit::setLineWrapColumnOrWidth(int)
name|obj1
operator|.
name|setLineWrapColumnOrWidth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|lineWrapColumnOrWidth
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setLineWrapColumnOrWidth
argument_list|(
name|INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MIN
argument_list|,
name|obj1
operator|.
name|lineWrapColumnOrWidth
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setLineWrapColumnOrWidth
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MAX
argument_list|,
name|obj1
operator|.
name|lineWrapColumnOrWidth
argument_list|()
argument_list|)
expr_stmt|;
comment|// bool QTextEdit::overwriteMode()
comment|// void QTextEdit::setOverwriteMode(bool)
name|obj1
operator|.
name|setOverwriteMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|overwriteMode
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setOverwriteMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|overwriteMode
argument_list|()
argument_list|)
expr_stmt|;
comment|// int QTextEdit::tabStopWidth()
comment|// void QTextEdit::setTabStopWidth(int)
name|obj1
operator|.
name|setTabStopWidth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|tabStopWidth
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setTabStopWidth
argument_list|(
name|INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|tabStopWidth
argument_list|()
argument_list|)
expr_stmt|;
comment|// Makes no sense to set a negative tabstop value
if|#
directive|if
name|defined
argument_list|(
name|QT_ARCH_WINDOWSCE
argument_list|)
comment|// due to rounding error in qRound when qreal==float
comment|// we cannot use INT_MAX for this check
name|obj1
operator|.
name|setTabStopWidth
argument_list|(
name|SHRT_MAX
operator|*
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|SHRT_MAX
operator|*
literal|2
argument_list|,
name|obj1
operator|.
name|tabStopWidth
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|obj1
operator|.
name|setTabStopWidth
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MAX
argument_list|,
name|obj1
operator|.
name|tabStopWidth
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// bool QTextEdit::acceptRichText()
comment|// void QTextEdit::setAcceptRichText(bool)
name|obj1
operator|.
name|setAcceptRichText
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|acceptRichText
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setAcceptRichText
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|acceptRichText
argument_list|()
argument_list|)
expr_stmt|;
comment|// qreal QTextEdit::fontPointSize()
comment|// void QTextEdit::setFontPointSize(qreal)
name|obj1
operator|.
name|setFontPointSize
argument_list|(
name|qreal
argument_list|(
literal|1.1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qreal
argument_list|(
literal|1.1
argument_list|)
argument_list|,
name|obj1
operator|.
name|fontPointSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// we currently assert in QFont::setPointSizeF for that
comment|//obj1.setFontPointSize(0.0);
comment|//QCOMPARE(1.1, obj1.fontPointSize()); // Should not accept 0.0 => keep old
comment|// int QTextEdit::fontWeight()
comment|// void QTextEdit::setFontWeight(int)
name|obj1
operator|.
name|setFontWeight
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|1
argument_list|,
name|obj1
operator|.
name|fontWeight
argument_list|()
argument_list|)
expr_stmt|;
comment|// Range<1, 99>
name|obj1
operator|.
name|setFontWeight
argument_list|(
literal|99
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|99
argument_list|,
name|obj1
operator|.
name|fontWeight
argument_list|()
argument_list|)
expr_stmt|;
comment|// Range<1, 99>
comment|/* assertion in qfont.cpp     obj1.setFontWeight(INT_MIN);     QCOMPARE(1, obj1.fontWeight()); // Range<1, 99>     obj1.setFontWeight(INT_MAX);     QCOMPARE(99, obj1.fontWeight()); // Range<1, 99>     */
comment|// bool QTextEdit::fontUnderline()
comment|// void QTextEdit::setFontUnderline(bool)
name|obj1
operator|.
name|setFontUnderline
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|fontUnderline
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setFontUnderline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|fontUnderline
argument_list|()
argument_list|)
expr_stmt|;
comment|// bool QTextEdit::fontItalic()
comment|// void QTextEdit::setFontItalic(bool)
name|obj1
operator|.
name|setFontItalic
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|fontItalic
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setFontItalic
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|fontItalic
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QtTestDocumentLayout
class|class
name|QtTestDocumentLayout
super|:
specifier|public
name|QAbstractTextDocumentLayout
block|{
name|Q_OBJECT
public|public:
DECL|function|QtTestDocumentLayout
specifier|inline
name|QtTestDocumentLayout
parameter_list|(
name|QTextEdit
modifier|*
name|edit
parameter_list|,
name|QTextDocument
modifier|*
name|doc
parameter_list|,
name|int
modifier|&
name|itCount
parameter_list|)
member_init_list|:
name|QAbstractTextDocumentLayout
argument_list|(
name|doc
argument_list|)
member_init_list|,
name|useBiggerSize
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|ed
argument_list|(
name|edit
argument_list|)
member_init_list|,
name|iterationCounter
argument_list|(
name|itCount
argument_list|)
block|{}
DECL|function|draw
specifier|virtual
name|void
name|draw
parameter_list|(
name|QPainter
modifier|*
parameter_list|,
specifier|const
name|QAbstractTextDocumentLayout
operator|::
name|PaintContext
modifier|&
parameter_list|)
block|{}
DECL|function|hitTest
specifier|virtual
name|int
name|hitTest
parameter_list|(
specifier|const
name|QPointF
modifier|&
parameter_list|,
name|Qt
operator|::
name|HitTestAccuracy
parameter_list|)
specifier|const
block|{
return|return
literal|0
return|;
block|}
DECL|function|documentChanged
specifier|virtual
name|void
name|documentChanged
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
block|{}
DECL|function|pageCount
specifier|virtual
name|int
name|pageCount
parameter_list|()
specifier|const
block|{
return|return
literal|1
return|;
block|}
DECL|function|documentSize
specifier|virtual
name|QSizeF
name|documentSize
parameter_list|()
specifier|const
block|{
return|return
name|usedSize
return|;
block|}
DECL|function|frameBoundingRect
specifier|virtual
name|QRectF
name|frameBoundingRect
parameter_list|(
name|QTextFrame
modifier|*
parameter_list|)
specifier|const
block|{
return|return
name|QRectF
argument_list|()
return|;
block|}
DECL|function|blockBoundingRect
specifier|virtual
name|QRectF
name|blockBoundingRect
parameter_list|(
specifier|const
name|QTextBlock
modifier|&
parameter_list|)
specifier|const
block|{
return|return
name|QRectF
argument_list|()
return|;
block|}
DECL|member|useBiggerSize
name|bool
name|useBiggerSize
decl_stmt|;
DECL|member|usedSize
name|QSize
name|usedSize
decl_stmt|;
DECL|member|ed
name|QTextEdit
modifier|*
name|ed
decl_stmt|;
DECL|member|iterationCounter
name|int
modifier|&
name|iterationCounter
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QTextEdit
name|tst_QTextEdit
operator|::
name|tst_QTextEdit
parameter_list|()
block|{}
end_constructor
begin_function
DECL|function|init
name|void
name|tst_QTextEdit
operator|::
name|init
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE
comment|//disable magic for WindowsCE
name|qApp
operator|->
name|setAutoMaximizeThreshold
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|ed
operator|=
operator|new
name|QTextEdit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|rootFrameMargin
operator|=
name|ed
operator|->
name|document
argument_list|()
operator|->
name|documentMargin
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QTextEdit
operator|::
name|cleanup
parameter_list|()
block|{
operator|delete
name|ed
expr_stmt|;
name|ed
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|inlineAttributesOnInsert
name|void
name|tst_QTextEdit
operator|::
name|inlineAttributesOnInsert
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
operator|!=
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|inlineAttributesOnSelection
name|void
name|tst_QTextEdit
operator|::
name|inlineAttributesOnSelection
parameter_list|()
block|{
name|createSelection
argument_list|()
expr_stmt|;
name|ed
operator|->
name|setFontItalic
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|fontItalic
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|inlineAttributeSymmetry
name|void
name|tst_QTextEdit
operator|::
name|inlineAttributeSymmetry
parameter_list|()
block|{
name|ed
operator|->
name|setFontPointSize
argument_list|(
literal|42.0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|double
argument_list|(
name|ed
operator|->
name|fontPointSize
argument_list|()
argument_list|)
argument_list|,
literal|42.0
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setFontFamily
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|fontFamily
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Test"
argument_list|)
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setFontWeight
argument_list|(
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|ed
operator|->
name|fontWeight
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setFontUnderline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|fontUnderline
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setFontItalic
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|fontItalic
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textColor
argument_list|()
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextBackgroundColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textBackgroundColor
argument_list|()
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignRight
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|ed
operator|->
name|alignment
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|Qt
operator|::
name|AlignRight
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|inlineAttributeSymmetryWithSelection
name|void
name|tst_QTextEdit
operator|::
name|inlineAttributeSymmetryWithSelection
parameter_list|()
block|{
name|createSelection
argument_list|()
expr_stmt|;
name|inlineAttributeSymmetry
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|autoBulletList1
name|void
name|tst_QTextEdit
operator|::
name|autoBulletList1
parameter_list|()
block|{
name|ed
operator|->
name|setAutoFormatting
argument_list|(
name|QTextEdit
operator|::
name|AutoBulletList
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Return
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClicks
argument_list|(
name|ed
argument_list|,
literal|"*This should become a list"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|currentList
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|currentList
argument_list|()
operator|->
name|format
argument_list|()
operator|.
name|style
argument_list|()
operator|==
name|QTextListFormat
operator|::
name|ListDisc
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|autoBulletList2
name|void
name|tst_QTextEdit
operator|::
name|autoBulletList2
parameter_list|()
block|{
name|ed
operator|->
name|setAutoFormatting
argument_list|(
name|QTextEdit
operator|::
name|AutoNone
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Return
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClicks
argument_list|(
name|ed
argument_list|,
literal|"*This should NOT become a list"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|currentList
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|preserveCharFormatAfterNewline
name|void
name|tst_QTextEdit
operator|::
name|preserveCharFormatAfterNewline
parameter_list|()
block|{
name|ed
operator|->
name|setTextColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClicks
argument_list|(
name|ed
argument_list|,
literal|"Hello"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Return
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textColor
argument_list|()
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createSelection
name|void
name|tst_QTextEdit
operator|::
name|createSelection
parameter_list|()
block|{
name|QTest
operator|::
name|keyClicks
argument_list|(
name|ed
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
comment|/* go to start */
ifndef|#
directive|ifndef
name|Q_WS_MAC
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Home
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
else|#
directive|else
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Home
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|/* select until end of text */
ifndef|#
directive|ifndef
name|Q_WS_MAC
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_End
argument_list|,
name|Qt
operator|::
name|ControlModifier
operator||
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
else|#
directive|else
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_End
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|11
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
end_ifndef
begin_function
DECL|function|clearMustNotChangeClipboard
name|void
name|tst_QTextEdit
operator|::
name|clearMustNotChangeClipboard
parameter_list|()
block|{
if|if
condition|(
operator|!
name|nativeClipboardWorking
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"Clipboard not working with cron-started unit tests"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|insertText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|QString
name|txt
argument_list|(
literal|"This is different text"
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|setText
argument_list|(
name|txt
argument_list|)
expr_stmt|;
name|ed
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|text
argument_list|()
argument_list|,
name|txt
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|clearMustNotResetRootFrameMarginToDefault
name|void
name|tst_QTextEdit
operator|::
name|clearMustNotResetRootFrameMarginToDefault
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|document
argument_list|()
operator|->
name|rootFrame
argument_list|()
operator|->
name|frameFormat
argument_list|()
operator|.
name|margin
argument_list|()
argument_list|,
name|rootFrameMargin
argument_list|)
expr_stmt|;
name|ed
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|document
argument_list|()
operator|->
name|rootFrame
argument_list|()
operator|->
name|frameFormat
argument_list|()
operator|.
name|margin
argument_list|()
argument_list|,
name|rootFrameMargin
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearShouldPreserveTheCurrentCharFormat
name|void
name|tst_QTextEdit
operator|::
name|clearShouldPreserveTheCurrentCharFormat
parameter_list|()
block|{
name|ed
operator|->
name|setFontUnderline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|fontUnderline
argument_list|()
argument_list|)
expr_stmt|;
name|ed
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|fontUnderline
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearShouldClearExtraSelections
name|void
name|tst_QTextEdit
operator|::
name|clearShouldClearExtraSelections
parameter_list|()
block|{
name|QTextEdit
operator|::
name|ExtraSelection
name|sel
decl_stmt|;
name|sel
operator|.
name|cursor
operator|=
name|ed
operator|->
name|textCursor
argument_list|()
expr_stmt|;
name|sel
operator|.
name|format
operator|.
name|setProperty
argument_list|(
name|QTextFormat
operator|::
name|FullWidthSelection
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setExtraSelections
argument_list|(
name|QList
argument_list|<
name|QTextEdit
operator|::
name|ExtraSelection
argument_list|>
argument_list|()
operator|<<
name|sel
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|extraSelections
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ed
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|extraSelections
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paragSeparatorOnPlaintextAppend
name|void
name|tst_QTextEdit
operator|::
name|paragSeparatorOnPlaintextAppend
parameter_list|()
block|{
name|ed
operator|->
name|append
argument_list|(
literal|"Hello\nWorld"
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
name|QTextBlock
name|blk
init|=
name|ed
operator|->
name|document
argument_list|()
operator|->
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|blk
operator|.
name|isValid
argument_list|()
condition|)
block|{
operator|++
name|cnt
expr_stmt|;
name|blk
operator|=
name|blk
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|cnt
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|layoutingLoop
name|void
name|tst_QTextEdit
operator|::
name|layoutingLoop
parameter_list|()
block|{
name|QPointer
argument_list|<
name|QTextEdit
argument_list|>
name|ed
init|=
operator|new
name|QTextEdit
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// this is a testcase for an ugly layouting problem, causing an infinite loop.
comment|// QTextEdit's resizeEvent has a long comment about what and why it can happen.
name|int
name|callsToSetPageSize
init|=
literal|0
decl_stmt|;
name|QTextDocument
modifier|*
name|doc
init|=
operator|new
name|QTextDocument
decl_stmt|;
name|QtTestDocumentLayout
modifier|*
name|lout
init|=
operator|new
name|QtTestDocumentLayout
argument_list|(
name|ed
argument_list|,
name|doc
argument_list|,
name|callsToSetPageSize
argument_list|)
decl_stmt|;
name|doc
operator|->
name|setDocumentLayout
argument_list|(
name|lout
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|ed
operator|->
name|show
argument_list|()
expr_stmt|;
name|ed
operator|->
name|resize
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
operator|delete
name|doc
expr_stmt|;
operator|delete
name|ed
expr_stmt|;
comment|// ###### should need less!
name|QVERIFY
argument_list|(
name|callsToSetPageSize
operator|<
literal|10
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
end_ifndef
begin_function
DECL|function|selectAllSetsNotSelection
name|void
name|tst_QTextEdit
operator|::
name|selectAllSetsNotSelection
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|supportsSelection
argument_list|()
condition|)
block|{
name|QSKIP
argument_list|(
literal|"Test only relevant for systems with selection"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
return|return;
block|}
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|setText
argument_list|(
name|QString
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|QClipboard
operator|::
name|Selection
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|text
argument_list|(
name|QClipboard
operator|::
name|Selection
argument_list|)
operator|==
name|QString
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
name|ed
operator|->
name|insertPlainText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|selectAll
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|text
argument_list|(
name|QClipboard
operator|::
name|Selection
argument_list|)
argument_list|,
name|QString
operator|::
name|fromAscii
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|asciiTab
name|void
name|tst_QTextEdit
operator|::
name|asciiTab
parameter_list|()
block|{
name|QTextEdit
name|edit
decl_stmt|;
name|edit
operator|.
name|setPlainText
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|edit
operator|.
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|edit
operator|.
name|toPlainText
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QChar
argument_list|(
literal|'\t'
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setDocument
name|void
name|tst_QTextEdit
operator|::
name|setDocument
parameter_list|()
block|{
name|QTextDocument
modifier|*
name|document
init|=
operator|new
name|QTextDocument
argument_list|(
name|ed
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|document
operator|->
name|isModified
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|document
operator|->
name|isUndoAvailable
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QTextCursor
argument_list|(
name|document
argument_list|)
operator|.
name|insertText
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|document
operator|->
name|isUndoAvailable
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|document
operator|->
name|isModified
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Test"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|document
operator|->
name|isUndoAvailable
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|document
operator|->
name|isModified
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setDocument_shared
name|void
name|tst_QTextEdit
operator|::
name|setDocument_shared
parameter_list|()
block|{
name|QTextDocument
modifier|*
name|document
init|=
operator|new
name|QTextDocument
argument_list|(
name|ed
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|document
operator|->
name|isModified
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|document
operator|->
name|isUndoAvailable
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QTextCursor
argument_list|(
name|document
argument_list|)
operator|.
name|insertText
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|document
operator|->
name|isUndoAvailable
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|document
operator|->
name|setModified
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Test"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|document
operator|->
name|isUndoAvailable
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|document
operator|->
name|isModified
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QTextCursor
argument_list|(
name|document
argument_list|)
operator|.
name|insertText
argument_list|(
literal|"Test2"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|document
operator|->
name|isModified
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QTextEdit
name|editor2
decl_stmt|;
name|editor2
operator|.
name|setDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|document
operator|->
name|isUndoAvailable
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|document
operator|->
name|isModified
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mergeCurrentCharFormat
name|void
name|tst_QTextEdit
operator|::
name|mergeCurrentCharFormat
parameter_list|()
block|{
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"Hello Test World"
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursor
init|=
name|ed
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|QTextCharFormat
name|mod
decl_stmt|;
name|mod
operator|.
name|setFontItalic
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mod
operator|.
name|setForeground
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|ed
operator|->
name|mergeCurrentCharFormat
argument_list|(
name|mod
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Right
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Right
argument_list|)
expr_stmt|;
comment|// do NOT select the current word under the cursor, /JUST/
comment|// call mergeCharFormat on the cursor
name|QVERIFY
argument_list|(
operator|!
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|fontItalic
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
operator|!=
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mergeCurrentBlockCharFormat
name|void
name|tst_QTextEdit
operator|::
name|mergeCurrentBlockCharFormat
parameter_list|()
block|{
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"FirstLine\n\nThirdLine"
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursor
init|=
name|ed
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Down
argument_list|)
expr_stmt|;
comment|// make sure we're in the empty second line
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|atBlockStart
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|atBlockEnd
argument_list|()
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|QTextCharFormat
name|mod
decl_stmt|;
name|mod
operator|.
name|setForeground
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|ed
operator|->
name|mergeCurrentCharFormat
argument_list|(
name|mod
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|blockCharFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
operator|!=
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Up
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|blockCharFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
operator|!=
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Down
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Down
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|blockCharFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
operator|!=
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|blockCount
name|int
name|tst_QTextEdit
operator|::
name|blockCount
parameter_list|()
specifier|const
block|{
name|int
name|blocks
init|=
literal|0
decl_stmt|;
for|for
control|(
name|QTextBlock
name|block
init|=
name|ed
operator|->
name|document
argument_list|()
operator|->
name|begin
argument_list|()
init|;
name|block
operator|.
name|isValid
argument_list|()
condition|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
control|)
operator|++
name|blocks
expr_stmt|;
return|return
name|blocks
return|;
block|}
end_function
begin_comment
comment|// Supporter issue #56783
end_comment
begin_function
DECL|function|emptyAppend
name|void
name|tst_QTextEdit
operator|::
name|emptyAppend
parameter_list|()
block|{
name|ed
operator|->
name|append
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|blockCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ed
operator|->
name|append
argument_list|(
name|QString
operator|::
name|null
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|blockCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ed
operator|->
name|append
argument_list|(
name|QString
argument_list|(
literal|"   "
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|blockCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|appendOnEmptyDocumentShouldReuseInitialParagraph
name|void
name|tst_QTextEdit
operator|::
name|appendOnEmptyDocumentShouldReuseInitialParagraph
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|blockCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ed
operator|->
name|append
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|blockCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|CursorPositionChangedRecorder
class|class
name|CursorPositionChangedRecorder
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|CursorPositionChangedRecorder
specifier|inline
name|CursorPositionChangedRecorder
parameter_list|(
name|QTextEdit
modifier|*
name|ed
parameter_list|)
member_init_list|:
name|editor
argument_list|(
name|ed
argument_list|)
block|{
name|connect
argument_list|(
name|editor
argument_list|,
name|SIGNAL
argument_list|(
name|cursorPositionChanged
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|recordCursorPos
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|member|cursorPositions
name|QList
argument_list|<
name|int
argument_list|>
name|cursorPositions
decl_stmt|;
private|private
name|slots
private|:
DECL|function|recordCursorPos
name|void
name|recordCursorPos
parameter_list|()
block|{
name|cursorPositions
operator|.
name|append
argument_list|(
name|editor
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|member|editor
name|QTextEdit
modifier|*
name|editor
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|cursorPositionChanged
name|void
name|tst_QTextEdit
operator|::
name|cursorPositionChanged
parameter_list|()
block|{
name|QSignalSpy
name|spy
argument_list|(
name|ed
argument_list|,
name|SIGNAL
argument_list|(
name|cursorPositionChanged
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ed
operator|->
name|show
argument_list|()
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursor
init|=
name|ed
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|hasSelection
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseDClick
argument_list|(
name|ed
operator|->
name|viewport
argument_list|()
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|ed
operator|->
name|cursorRect
argument_list|()
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|hasSelection
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|CursorPositionChangedRecorder
name|spy2
argument_list|(
name|ed
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy2
operator|.
name|cursorPositions
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy2
operator|.
name|cursorPositions
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setTextCursor
name|void
name|tst_QTextEdit
operator|::
name|setTextCursor
parameter_list|()
block|{
name|QSignalSpy
name|spy
argument_list|(
name|ed
argument_list|,
name|SIGNAL
argument_list|(
name|cursorPositionChanged
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursor
init|=
name|ed
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ed
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
end_ifndef
begin_function
DECL|function|undoAvailableAfterPaste
name|void
name|tst_QTextEdit
operator|::
name|undoAvailableAfterPaste
parameter_list|()
block|{
if|if
condition|(
operator|!
name|nativeClipboardWorking
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"Clipboard not working with cron-started unit tests"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
name|ed
operator|->
name|document
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|undoAvailable
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|txt
argument_list|(
literal|"Test"
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|setText
argument_list|(
name|txt
argument_list|)
expr_stmt|;
name|ed
operator|->
name|paste
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|count
argument_list|()
operator|>=
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|txt
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|UndoRedoRecorder
class|class
name|UndoRedoRecorder
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|UndoRedoRecorder
name|UndoRedoRecorder
parameter_list|(
name|QTextDocument
modifier|*
name|doc
parameter_list|)
member_init_list|:
name|undoRepetitions
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|redoRepetitions
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|undoCount
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|redoCount
argument_list|(
literal|0
argument_list|)
block|{
name|connect
argument_list|(
name|doc
argument_list|,
name|SIGNAL
argument_list|(
name|undoAvailable
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|undoAvailable
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|doc
argument_list|,
name|SIGNAL
argument_list|(
name|redoAvailable
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|redoAvailable
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|member|undoRepetitions
name|bool
name|undoRepetitions
decl_stmt|;
DECL|member|redoRepetitions
name|bool
name|redoRepetitions
decl_stmt|;
private|private
name|slots
private|:
DECL|function|undoAvailable
name|void
name|undoAvailable
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|undoCount
operator|>
literal|0
operator|&&
name|enabled
operator|==
name|lastUndoEnabled
condition|)
name|undoRepetitions
operator|=
literal|true
expr_stmt|;
operator|++
name|undoCount
expr_stmt|;
name|lastUndoEnabled
operator|=
name|enabled
expr_stmt|;
block|}
DECL|function|redoAvailable
name|void
name|redoAvailable
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|redoCount
operator|>
literal|0
operator|&&
name|enabled
operator|==
name|lastRedoEnabled
condition|)
name|redoRepetitions
operator|=
literal|true
expr_stmt|;
operator|++
name|redoCount
expr_stmt|;
name|lastRedoEnabled
operator|=
name|enabled
expr_stmt|;
block|}
private|private:
DECL|member|lastUndoEnabled
name|bool
name|lastUndoEnabled
decl_stmt|;
DECL|member|lastRedoEnabled
name|bool
name|lastRedoEnabled
decl_stmt|;
DECL|member|undoCount
name|int
name|undoCount
decl_stmt|;
DECL|member|redoCount
name|int
name|redoCount
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|undoRedoAvailableRepetition
name|void
name|tst_QTextEdit
operator|::
name|undoRedoAvailableRepetition
parameter_list|()
block|{
name|UndoRedoRecorder
name|spy
argument_list|(
name|ed
operator|->
name|document
argument_list|()
argument_list|)
decl_stmt|;
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|insertText
argument_list|(
literal|"ABC\n\nDEF\n\nGHI\n"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|insertText
argument_list|(
literal|"foo\n"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|insertText
argument_list|(
literal|"bar\n"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|undo
argument_list|()
expr_stmt|;
name|ed
operator|->
name|undo
argument_list|()
expr_stmt|;
name|ed
operator|->
name|undo
argument_list|()
expr_stmt|;
name|ed
operator|->
name|redo
argument_list|()
expr_stmt|;
name|ed
operator|->
name|redo
argument_list|()
expr_stmt|;
name|ed
operator|->
name|redo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|spy
operator|.
name|undoRepetitions
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|spy
operator|.
name|redoRepetitions
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|appendShouldUseCurrentFormat
name|void
name|tst_QTextEdit
operator|::
name|appendShouldUseCurrentFormat
parameter_list|()
block|{
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|insertText
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setFontItalic
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setCurrentCharFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|ed
operator|->
name|append
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursor
argument_list|(
name|ed
operator|->
name|document
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
operator|!=
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|fontItalic
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|QTextCursor
name|tmp
init|=
name|cursor
decl_stmt|;
name|tmp
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tmp
operator|.
name|selectedText
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|fontItalic
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|appendShouldNotTouchTheSelection
name|void
name|tst_QTextEdit
operator|::
name|appendShouldNotTouchTheSelection
parameter_list|()
block|{
name|QTextCursor
name|cursor
argument_list|(
name|ed
operator|->
name|document
argument_list|()
argument_list|)
decl_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"H"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"ey"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"some random text inbetween"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectedText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hey"
argument_list|)
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|hasSelection
argument_list|()
argument_list|)
expr_stmt|;
name|ed
operator|->
name|append
argument_list|(
literal|"<b>Some Bold Text</b>"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|backspace
name|void
name|tst_QTextEdit
operator|::
name|backspace
parameter_list|()
block|{
name|QTextCursor
name|cursor
init|=
name|ed
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|QTextListFormat
name|listFmt
decl_stmt|;
name|listFmt
operator|.
name|setStyle
argument_list|(
name|QTextListFormat
operator|::
name|ListDisc
argument_list|)
expr_stmt|;
name|listFmt
operator|.
name|setIndent
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertList
argument_list|(
name|listFmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
comment|// delete 'A'
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Backspace
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|currentList
argument_list|()
argument_list|)
expr_stmt|;
comment|// delete list
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Backspace
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|currentList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|indent
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// outdent paragraph
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Backspace
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|indent
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|shiftBackspace
name|void
name|tst_QTextEdit
operator|::
name|shiftBackspace
parameter_list|()
block|{
name|QTextCursor
name|cursor
init|=
name|ed
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|QTextListFormat
name|listFmt
decl_stmt|;
name|listFmt
operator|.
name|setStyle
argument_list|(
name|QTextListFormat
operator|::
name|ListDisc
argument_list|)
expr_stmt|;
name|listFmt
operator|.
name|setIndent
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertList
argument_list|(
name|listFmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
comment|// delete 'A'
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Backspace
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|currentList
argument_list|()
argument_list|)
expr_stmt|;
comment|// delete list
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Backspace
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|currentList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|indent
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// outdent paragraph
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Backspace
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|indent
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|undoRedo
name|void
name|tst_QTextEdit
operator|::
name|undoRedo
parameter_list|()
block|{
name|ed
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|keyClicks
argument_list|(
name|ed
argument_list|,
literal|"abc d"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"abc d"
argument_list|)
argument_list|)
expr_stmt|;
name|ed
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|ed
operator|->
name|redo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"abc d"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_WIN
comment|// shortcut for undo
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Backspace
argument_list|,
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
comment|// shortcut for redo
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Backspace
argument_list|,
name|Qt
operator|::
name|ShiftModifier
operator||
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"abc d"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|// Task #70465
end_comment
begin_function
DECL|function|preserveCharFormatInAppend
name|void
name|tst_QTextEdit
operator|::
name|preserveCharFormatInAppend
parameter_list|()
block|{
name|ed
operator|->
name|append
argument_list|(
literal|"First para"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|append
argument_list|(
literal|"<b>Second para</b>"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|append
argument_list|(
literal|"third para"
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursor
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|fontWeight
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|QFont
operator|::
name|Normal
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"First para"
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|fontWeight
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Second para"
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|fontWeight
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|QFont
operator|::
name|Normal
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"third para"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
end_ifndef
begin_function
DECL|function|copyAndSelectAllInReadonly
name|void
name|tst_QTextEdit
operator|::
name|copyAndSelectAllInReadonly
parameter_list|()
block|{
if|if
condition|(
operator|!
name|nativeClipboardWorking
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"Clipboard not working with cron-started unit tests"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursor
init|=
name|ed
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
name|ed
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|hasSelection
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hello World"
argument_list|)
argument_list|)
expr_stmt|;
comment|// shouldn't do anything
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hello World"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|hasSelection
argument_list|()
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|setText
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_C
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hello World"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|ctrlAltInput
name|void
name|tst_QTextEdit
operator|::
name|ctrlAltInput
parameter_list|()
block|{
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_At
argument_list|,
name|Qt
operator|::
name|ControlModifier
operator||
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"@"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|noPropertiesOnDefaultTextEditCharFormat
name|void
name|tst_QTextEdit
operator|::
name|noPropertiesOnDefaultTextEditCharFormat
parameter_list|()
block|{
comment|// there should be no properties set on the default/initial char format
comment|// on a text edit. Font properties instead should be taken from the
comment|// widget's font (in sync with defaultFont property in document) and the
comment|// foreground color should be taken from the palette.
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|currentCharFormat
argument_list|()
operator|.
name|properties
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setPlainTextShouldUseCurrentCharFormat
name|void
name|tst_QTextEdit
operator|::
name|setPlainTextShouldUseCurrentCharFormat
parameter_list|()
block|{
name|ed
operator|->
name|setFontUnderline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursor
argument_list|(
name|ed
operator|->
name|document
argument_list|()
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|fontUnderline
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setHtml
argument_list|(
literal|"<p style=\"color:blue\">Foo</p>"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|cursor
operator|=
name|QTextCursor
argument_list|(
name|ed
operator|->
name|document
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|fontUnderline
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setPlainTextShouldEmitTextChangedOnce
name|void
name|tst_QTextEdit
operator|::
name|setPlainTextShouldEmitTextChangedOnce
parameter_list|()
block|{
name|QSignalSpy
name|spy
argument_list|(
name|ed
argument_list|,
name|SIGNAL
argument_list|(
name|textChanged
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"Yankee Doodle"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|overwriteMode
name|void
name|tst_QTextEdit
operator|::
name|overwriteMode
parameter_list|()
block|{
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|overwriteMode
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClicks
argument_list|(
name|ed
argument_list|,
literal|"Some first text"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Some first text"
argument_list|)
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setOverwriteMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursor
init|=
name|ed
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClicks
argument_list|(
name|ed
argument_list|,
literal|"shiny"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Some shiny text"
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setOverwriteMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClicks
argument_list|(
name|ed
argument_list|,
literal|"Second paragraph"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|blockCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|EndOfBlock
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setOverwriteMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClicks
argument_list|(
name|ed
argument_list|,
literal|" blah"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|blockCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QTextBlock
name|block
init|=
name|ed
operator|->
name|document
argument_list|()
operator|->
name|begin
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Some shiny text blah"
argument_list|)
argument_list|)
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Second paragraph"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|shiftDownInLineLastShouldSelectToEnd_data
name|void
name|tst_QTextEdit
operator|::
name|shiftDownInLineLastShouldSelectToEnd_data
parameter_list|()
block|{
comment|// shift cursor-down in the last line should select to the end of the document
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"totalLineCount"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Foo\nBar"
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Foo\nBar"
argument_list|)
operator|+
name|QChar
argument_list|(
name|QChar
operator|::
name|LineSeparator
argument_list|)
operator|+
name|QString
argument_list|(
literal|"Baz"
argument_list|)
operator|<<
literal|3
expr_stmt|;
block|}
end_function
begin_function
DECL|function|shiftDownInLineLastShouldSelectToEnd
name|void
name|tst_QTextEdit
operator|::
name|shiftDownInLineLastShouldSelectToEnd
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|totalLineCount
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|ed
operator|->
name|show
argument_list|()
expr_stmt|;
comment|// ensure we're layouted
name|ed
operator|->
name|document
argument_list|()
operator|->
name|documentLayout
argument_list|()
operator|->
name|documentSize
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|blockCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|int
name|lineCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|QTextBlock
name|block
init|=
name|ed
operator|->
name|document
argument_list|()
operator|->
name|begin
argument_list|()
init|;
name|block
operator|.
name|isValid
argument_list|()
condition|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
control|)
name|lineCount
operator|+=
name|block
operator|.
name|layout
argument_list|()
operator|->
name|lineCount
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lineCount
argument_list|,
name|totalLineCount
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursor
init|=
name|ed
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lineCount
condition|;
operator|++
name|i
control|)
block|{
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
block|}
name|input
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|,
name|QChar
argument_list|(
name|QChar
operator|::
name|ParagraphSeparator
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|selectedText
argument_list|()
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
comment|// also test that without shift modifier the cursor does not move to the end
comment|// for Key_Down in the last line
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lineCount
condition|;
operator|++
name|i
control|)
block|{
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|undoRedoShouldRepositionTextEditCursor
name|void
name|tst_QTextEdit
operator|::
name|undoRedoShouldRepositionTextEditCursor
parameter_list|()
block|{
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"five\nlines\nin\nthis\ntextedit"
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursor
init|=
name|ed
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setUndoRedoEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setUndoRedoEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|document
argument_list|()
operator|->
name|isUndoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|document
argument_list|()
operator|->
name|isRedoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|document
argument_list|()
operator|->
name|isUndoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|document
argument_list|()
operator|->
name|isRedoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|ed
argument_list|,
literal|"undo"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|document
argument_list|()
operator|->
name|isUndoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|document
argument_list|()
operator|->
name|isRedoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|ed
argument_list|,
literal|"redo"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|document
argument_list|()
operator|->
name|isUndoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|document
argument_list|()
operator|->
name|isRedoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lineWrapModes
name|void
name|tst_QTextEdit
operator|::
name|lineWrapModes
parameter_list|()
block|{
name|ed
operator|->
name|setLineWrapMode
argument_list|(
name|QTextEdit
operator|::
name|NoWrap
argument_list|)
expr_stmt|;
comment|// NoWrap at the same time as having all lines that are all left aligned means we optimize to only layout once. The effect is that the width is always 0
name|QVERIFY
argument_list|(
name|ed
operator|->
name|document
argument_list|()
operator|->
name|pageSize
argument_list|()
operator|.
name|width
argument_list|()
operator|==
name|qreal
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursor
init|=
name|QTextCursor
argument_list|(
name|ed
operator|->
name|document
argument_list|()
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|QString
argument_list|(
literal|"A simple line"
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|QTextBlockFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignRight
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|mergeBlockFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|QString
argument_list|(
literal|"Another line"
argument_list|)
argument_list|)
expr_stmt|;
name|ed
operator|->
name|show
argument_list|()
expr_stmt|;
comment|// relayout;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|document
argument_list|()
operator|->
name|pageSize
argument_list|()
operator|.
name|width
argument_list|()
operator|>
name|qreal
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setLineWrapColumnOrWidth
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setLineWrapMode
argument_list|(
name|QTextEdit
operator|::
name|FixedColumnWidth
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|qIsNull
argument_list|(
name|ed
operator|->
name|document
argument_list|()
operator|->
name|pageSize
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setLineWrapColumnOrWidth
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setLineWrapMode
argument_list|(
name|QTextEdit
operator|::
name|FixedPixelWidth
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|document
argument_list|()
operator|->
name|pageSize
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseCursorShape
name|void
name|tst_QTextEdit
operator|::
name|mouseCursorShape
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
comment|// always show an IBeamCursor, see change 170146
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|isReadOnly
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|viewport
argument_list|()
operator|->
name|cursor
argument_list|()
operator|.
name|shape
argument_list|()
operator|==
name|Qt
operator|::
name|IBeamCursor
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|viewport
argument_list|()
operator|->
name|cursor
argument_list|()
operator|.
name|shape
argument_list|()
operator|==
name|Qt
operator|::
name|IBeamCursor
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"Foo"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|viewport
argument_list|()
operator|->
name|cursor
argument_list|()
operator|.
name|shape
argument_list|()
operator|==
name|Qt
operator|::
name|IBeamCursor
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|implicitClear
name|void
name|tst_QTextEdit
operator|::
name|implicitClear
parameter_list|()
block|{
comment|// test that QTextEdit::setHtml, etc. avoid calling clear() but instead call
comment|// QTextDocument::setHtml/etc. instead, which also clear the contents and
comment|// cached resource but preserve manually added resources. setHtml on a textedit
comment|// should behave the same as on a document with respect to that.
comment|// see also clearResources() autotest in qtextdocument
comment|// regular resource for QTextDocument
name|QUrl
name|testUrl
argument_list|(
literal|":/foobar"
argument_list|)
decl_stmt|;
name|QVariant
name|testResource
argument_list|(
literal|"hello world"
argument_list|)
decl_stmt|;
name|ed
operator|->
name|document
argument_list|()
operator|->
name|addResource
argument_list|(
name|QTextDocument
operator|::
name|ImageResource
argument_list|,
name|testUrl
argument_list|,
name|testResource
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|document
argument_list|()
operator|->
name|resource
argument_list|(
name|QTextDocument
operator|::
name|ImageResource
argument_list|,
name|testUrl
argument_list|)
operator|==
name|testResource
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|document
argument_list|()
operator|->
name|resource
argument_list|(
name|QTextDocument
operator|::
name|ImageResource
argument_list|,
name|testUrl
argument_list|)
operator|==
name|testResource
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"<b>Blah</b>"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|document
argument_list|()
operator|->
name|resource
argument_list|(
name|QTextDocument
operator|::
name|ImageResource
argument_list|,
name|testUrl
argument_list|)
operator|==
name|testResource
argument_list|)
expr_stmt|;
name|ed
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|document
argument_list|()
operator|->
name|resource
argument_list|(
name|QTextDocument
operator|::
name|ImageResource
argument_list|,
name|testUrl
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|toPlainText
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
end_ifndef
begin_function
DECL|function|copyAvailable_data
name|void
name|tst_QTextEdit
operator|::
name|copyAvailable_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|pairListType
argument_list|>
argument_list|(
literal|"keystrokes"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|bool
argument_list|>
argument_list|>
argument_list|(
literal|"copyAvailable"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"function"
argument_list|)
expr_stmt|;
name|pairListType
name|keystrokes
decl_stmt|;
name|QList
argument_list|<
name|bool
argument_list|>
name|copyAvailable
decl_stmt|;
name|keystrokes
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_B
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_B
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|copyAvailable
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"Case1 B,B,<- + shift | signals: true"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|keystrokes
operator|<<
name|copyAvailable
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|keystrokes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|copyAvailable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keystrokes
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_T
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|copyAvailable
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"Case2 T,A,A,<- + shift, cut() | signals: true, false"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|keystrokes
operator|<<
name|copyAvailable
operator|<<
name|QString
argument_list|(
literal|"cut"
argument_list|)
expr_stmt|;
name|keystrokes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|copyAvailable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keystrokes
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_T
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|copyAvailable
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"Case3 T,A,A,<- + shift,<- + shift,<- + shift, copy() | signals: true"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|keystrokes
operator|<<
name|copyAvailable
operator|<<
name|QString
argument_list|(
literal|"copy"
argument_list|)
expr_stmt|;
name|keystrokes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|copyAvailable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keystrokes
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_T
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_X
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|copyAvailable
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"Case4 T,A,A,<- + shift,<- + shift,<- + shift, ctrl + x, paste() | signals: true, false"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|keystrokes
operator|<<
name|copyAvailable
operator|<<
name|QString
argument_list|(
literal|"paste"
argument_list|)
expr_stmt|;
name|keystrokes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|copyAvailable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keystrokes
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_B
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_B
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
expr_stmt|;
name|copyAvailable
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"Case5 B,B,<- + shift,<- | signals: true, false"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|keystrokes
operator|<<
name|copyAvailable
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|keystrokes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|copyAvailable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keystrokes
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_B
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_Right
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|copyAvailable
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"Case6 B,A,<- + shift, ->,<- + shift | signals: true, false, true, false"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|keystrokes
operator|<<
name|copyAvailable
operator|<<
name|QString
argument_list|(
literal|"cut"
argument_list|)
expr_stmt|;
name|keystrokes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|copyAvailable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keystrokes
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_T
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_X
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|copyAvailable
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"Case7 T,A,A,<- + shift,<- + shift,<- + shift, ctrl + x, undo() | signals: true, false, true"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|keystrokes
operator|<<
name|copyAvailable
operator|<<
name|QString
argument_list|(
literal|"undo"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//Tests the copyAvailable slot for several cases
end_comment
begin_function
DECL|function|copyAvailable
name|void
name|tst_QTextEdit
operator|::
name|copyAvailable
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|pairListType
argument_list|,
name|keystrokes
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|bool
argument_list|>
argument_list|,
name|copyAvailable
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|function
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_MAC
name|QSKIP
argument_list|(
literal|"copyAvailable has never passed on Mac, task to fix is 132482"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|ed
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|canPaste
argument_list|()
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spyCopyAvailabe
argument_list|(
name|ed
argument_list|,
name|SIGNAL
argument_list|(
name|copyAvailable
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|//Execute Keystrokes
foreach|foreach
control|(
name|keyPairType
name|keyPair
decl|,
name|keystrokes
control|)
block|{
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|keyPair
operator|.
name|first
argument_list|,
name|keyPair
operator|.
name|second
argument_list|)
expr_stmt|;
block|}
comment|//Execute ed->"function"
if|if
condition|(
name|function
operator|==
literal|"cut"
condition|)
name|ed
operator|->
name|cut
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|function
operator|==
literal|"copy"
condition|)
name|ed
operator|->
name|copy
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|function
operator|==
literal|"paste"
condition|)
name|ed
operator|->
name|paste
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|function
operator|==
literal|"undo"
condition|)
name|ed
operator|->
name|paste
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|function
operator|==
literal|"redo"
condition|)
name|ed
operator|->
name|paste
argument_list|()
expr_stmt|;
comment|//Compare spied signals
name|QEXPECT_FAIL
argument_list|(
literal|"Case7 T,A,A,<- + shift,<- + shift,<- + shift, ctrl + x, undo() | signals: true, false, true"
argument_list|,
literal|"Wrong undo selection behaviour. Should be fixed in some future release. (See task: 132482)"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyCopyAvailabe
operator|.
name|count
argument_list|()
argument_list|,
name|copyAvailable
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|spyCopyAvailabe
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QVariant
name|variantSpyCopyAvailable
init|=
name|spyCopyAvailabe
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|variantSpyCopyAvailable
operator|.
name|toBool
argument_list|()
operator|==
name|copyAvailable
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Spied singnal: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|undoRedoAfterSetContent
name|void
name|tst_QTextEdit
operator|::
name|undoRedoAfterSetContent
parameter_list|()
block|{
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|document
argument_list|()
operator|->
name|isUndoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|document
argument_list|()
operator|->
name|isRedoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"Foobar"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|document
argument_list|()
operator|->
name|isUndoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|document
argument_list|()
operator|->
name|isRedoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setHtml
argument_list|(
literal|"<p>bleh</p>"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|document
argument_list|()
operator|->
name|isUndoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|document
argument_list|()
operator|->
name|isRedoAvailable
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|numPadKeyNavigation
name|void
name|tst_QTextEdit
operator|::
name|numPadKeyNavigation
parameter_list|()
block|{
name|ed
operator|->
name|setText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Right
argument_list|,
name|Qt
operator|::
name|KeypadModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|moveCursor
name|void
name|tst_QTextEdit
operator|::
name|moveCursor
parameter_list|()
block|{
name|ed
operator|->
name|setText
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|QSignalSpy
name|cursorMovedSpy
argument_list|(
name|ed
argument_list|,
name|SIGNAL
argument_list|(
name|cursorPositionChanged
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursorMovedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursorMovedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|selectedText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|MyTextEdit
class|class
name|MyTextEdit
super|:
specifier|public
name|QTextEdit
block|{
public|public:
DECL|function|MyTextEdit
specifier|inline
name|MyTextEdit
parameter_list|()
member_init_list|:
name|createMimeDataCallCount
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|canInsertCallCount
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|insertCallCount
argument_list|(
literal|0
argument_list|)
block|{}
DECL|member|createMimeDataCallCount
specifier|mutable
name|int
name|createMimeDataCallCount
decl_stmt|;
DECL|member|canInsertCallCount
specifier|mutable
name|int
name|canInsertCallCount
decl_stmt|;
DECL|member|insertCallCount
specifier|mutable
name|int
name|insertCallCount
decl_stmt|;
DECL|function|createMimeDataFromSelection
specifier|virtual
name|QMimeData
modifier|*
name|createMimeDataFromSelection
parameter_list|()
specifier|const
block|{
name|createMimeDataCallCount
operator|++
expr_stmt|;
return|return
name|QTextEdit
operator|::
name|createMimeDataFromSelection
argument_list|()
return|;
block|}
DECL|function|canInsertFromMimeData
specifier|virtual
name|bool
name|canInsertFromMimeData
parameter_list|(
specifier|const
name|QMimeData
modifier|*
name|source
parameter_list|)
specifier|const
block|{
name|canInsertCallCount
operator|++
expr_stmt|;
return|return
name|QTextEdit
operator|::
name|canInsertFromMimeData
argument_list|(
name|source
argument_list|)
return|;
block|}
DECL|function|insertFromMimeData
specifier|virtual
name|void
name|insertFromMimeData
parameter_list|(
specifier|const
name|QMimeData
modifier|*
name|source
parameter_list|)
block|{
name|insertCallCount
operator|++
expr_stmt|;
name|QTextEdit
operator|::
name|insertFromMimeData
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
end_ifndef
begin_function
DECL|function|mimeDataReimplementations
name|void
name|tst_QTextEdit
operator|::
name|mimeDataReimplementations
parameter_list|()
block|{
name|MyTextEdit
name|ed
decl_stmt|;
name|ed
operator|.
name|setPlainText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|.
name|createMimeDataCallCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|.
name|canInsertCallCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|.
name|insertCallCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ed
operator|.
name|selectAll
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|.
name|createMimeDataCallCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|.
name|canInsertCallCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|.
name|insertCallCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ed
operator|.
name|copy
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|.
name|createMimeDataCallCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|.
name|canInsertCallCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|.
name|insertCallCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|QWidgetTextControl
modifier|*
name|control
init|=
name|qFindChild
argument_list|<
name|QWidgetTextControl
operator|*
argument_list|>
argument_list|(
operator|&
name|ed
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|control
argument_list|)
expr_stmt|;
name|control
operator|->
name|canInsertFromMimeData
argument_list|(
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|mimeData
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|.
name|createMimeDataCallCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|.
name|canInsertCallCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|.
name|insertCallCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ed
operator|.
name|paste
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|.
name|createMimeDataCallCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|.
name|canInsertCallCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|.
name|insertCallCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|ctrlEnterShouldInsertLineSeparator_NOT
name|void
name|tst_QTextEdit
operator|::
name|ctrlEnterShouldInsertLineSeparator_NOT
parameter_list|()
block|{
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_B
argument_list|)
expr_stmt|;
name|QString
name|expected
decl_stmt|;
name|expected
operator|+=
literal|'a'
expr_stmt|;
comment|//    expected += QChar::LineSeparator; // do NOT insert
name|expected
operator|+=
literal|'b'
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|shiftEnterShouldInsertLineSeparator
name|void
name|tst_QTextEdit
operator|::
name|shiftEnterShouldInsertLineSeparator
parameter_list|()
block|{
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_B
argument_list|)
expr_stmt|;
name|QString
name|expected
decl_stmt|;
name|expected
operator|+=
literal|'a'
expr_stmt|;
name|expected
operator|+=
name|QChar
operator|::
name|LineSeparator
expr_stmt|;
name|expected
operator|+=
literal|'b'
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|selectWordsFromStringsContainingSeparators_data
name|void
name|tst_QTextEdit
operator|::
name|selectWordsFromStringsContainingSeparators_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"testString"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"selectedWord"
argument_list|)
expr_stmt|;
name|QStringList
name|wordSeparators
decl_stmt|;
name|wordSeparators
operator|<<
literal|"."
operator|<<
literal|","
operator|<<
literal|"?"
operator|<<
literal|"!"
operator|<<
literal|":"
operator|<<
literal|";"
operator|<<
literal|"-"
operator|<<
literal|"<"
operator|<<
literal|">"
operator|<<
literal|"["
operator|<<
literal|"]"
operator|<<
literal|"("
operator|<<
literal|")"
operator|<<
literal|"{"
operator|<<
literal|"}"
operator|<<
literal|"="
operator|<<
literal|"\t"
operator|<<
name|QString
argument_list|(
name|QChar
operator|::
name|Nbsp
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QString
name|s
decl|,
name|wordSeparators
control|)
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"separator: "
operator|+
name|s
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|+
name|s
operator|+
name|QString
argument_list|(
literal|"bar"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|selectWordsFromStringsContainingSeparators
name|void
name|tst_QTextEdit
operator|::
name|selectWordsFromStringsContainingSeparators
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|testString
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|selectedWord
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setText
argument_list|(
name|testString
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursor
init|=
name|ed
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|StartOfLine
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|select
argument_list|(
name|QTextCursor
operator|::
name|WordUnderCursor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|hasSelection
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selection
argument_list|()
operator|.
name|toPlainText
argument_list|()
argument_list|,
name|selectedWord
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
end_ifndef
begin_function
DECL|function|canPaste
name|void
name|tst_QTextEdit
operator|::
name|canPaste
parameter_list|()
block|{
if|if
condition|(
operator|!
name|nativeClipboardWorking
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"Clipboard not working with cron-started unit tests"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|setText
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|canPaste
argument_list|()
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|setText
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|canPaste
argument_list|()
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextInteractionFlags
argument_list|(
name|Qt
operator|::
name|NoTextInteraction
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|canPaste
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|ensureCursorVisibleOnInitialShow
name|void
name|tst_QTextEdit
operator|::
name|ensureCursorVisibleOnInitialShow
parameter_list|()
block|{
name|QString
name|manyPagesOfPlainText
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|800
condition|;
operator|++
name|i
control|)
name|manyPagesOfPlainText
operator|+=
name|QLatin1String
argument_list|(
literal|"Blah blah blah blah blah blah\n"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
name|manyPagesOfPlainText
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|ed
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
operator|>
literal|10
argument_list|)
expr_stmt|;
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
operator|<
literal|10
argument_list|)
expr_stmt|;
name|ed
operator|->
name|hide
argument_list|()
expr_stmt|;
name|ed
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|setValue
argument_list|(
name|ed
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|maximum
argument_list|()
argument_list|)
expr_stmt|;
name|ed
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
argument_list|,
name|ed
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|maximum
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|TestEdit
class|class
name|TestEdit
super|:
specifier|public
name|QTextEdit
block|{
public|public:
DECL|function|TestEdit
name|TestEdit
parameter_list|()
member_init_list|:
name|resizeEventCalled
argument_list|(
literal|false
argument_list|)
block|{}
DECL|member|resizeEventCalled
name|bool
name|resizeEventCalled
decl_stmt|;
protected|protected:
DECL|function|resizeEvent
specifier|virtual
name|void
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
name|e
parameter_list|)
block|{
name|QTextEdit
operator|::
name|resizeEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|setHtml
argument_list|(
literal|"<img src=qtextbrowser-resizeevent.png width="
operator|+
name|QString
operator|::
name|number
argument_list|(
name|size
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
operator|+
literal|"><br>Size is "
operator|+
name|QString
operator|::
name|number
argument_list|(
name|size
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
operator|+
literal|" x "
operator|+
name|QString
operator|::
name|number
argument_list|(
name|size
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|resizeEventCalled
operator|=
literal|true
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|setHtmlInsideResizeEvent
name|void
name|tst_QTextEdit
operator|::
name|setHtmlInsideResizeEvent
parameter_list|()
block|{
name|TestEdit
name|edit
decl_stmt|;
name|edit
operator|.
name|show
argument_list|()
expr_stmt|;
name|edit
operator|.
name|resize
argument_list|(
literal|800
argument_list|,
literal|600
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|edit
operator|.
name|resizeEventCalled
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|colorfulAppend
name|void
name|tst_QTextEdit
operator|::
name|colorfulAppend
parameter_list|()
block|{
name|ed
operator|->
name|setTextColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|ed
operator|->
name|append
argument_list|(
literal|"Red"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|ed
operator|->
name|append
argument_list|(
literal|"Blue"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextColor
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
name|ed
operator|->
name|append
argument_list|(
literal|"Green"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|document
argument_list|()
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QTextBlock
name|block
init|=
name|ed
operator|->
name|document
argument_list|()
operator|->
name|begin
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Red"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Blue"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Green"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ensureVisibleWithRtl
name|void
name|tst_QTextEdit
operator|::
name|ensureVisibleWithRtl
parameter_list|()
block|{
name|ed
operator|->
name|setLayoutDirection
argument_list|(
name|Qt
operator|::
name|RightToLeft
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setLineWrapMode
argument_list|(
name|QTextEdit
operator|::
name|NoWrap
argument_list|)
expr_stmt|;
name|QString
name|txt
argument_list|(
literal|500
argument_list|,
name|QChar
argument_list|(
name|QLatin1Char
argument_list|(
literal|'a'
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|txt
operator|.
name|length
argument_list|()
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
name|txt
argument_list|)
expr_stmt|;
name|ed
operator|->
name|resize
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|ed
operator|->
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|horizontalScrollBar
argument_list|()
operator|->
name|maximum
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|horizontalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
argument_list|,
name|ed
operator|->
name|horizontalScrollBar
argument_list|()
operator|->
name|maximum
argument_list|()
argument_list|)
expr_stmt|;
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|horizontalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|horizontalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
argument_list|,
name|ed
operator|->
name|horizontalScrollBar
argument_list|()
operator|->
name|maximum
argument_list|()
argument_list|)
expr_stmt|;
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|horizontalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|preserveCharFormatAfterSetPlainText
name|void
name|tst_QTextEdit
operator|::
name|preserveCharFormatAfterSetPlainText
parameter_list|()
block|{
name|ed
operator|->
name|setTextColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"This is blue"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|append
argument_list|(
literal|"This should still be blue"
argument_list|)
expr_stmt|;
name|QTextBlock
name|block
init|=
name|ed
operator|->
name|document
argument_list|()
operator|->
name|begin
argument_list|()
decl_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"This should still be blue"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|QColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|extraSelections
name|void
name|tst_QTextEdit
operator|::
name|extraSelections
parameter_list|()
block|{
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|QTextCursor
name|c
init|=
name|ed
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|c
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|c
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
specifier|const
name|int
name|endPos
init|=
name|c
operator|.
name|position
argument_list|()
decl_stmt|;
name|QTextEdit
operator|::
name|ExtraSelection
name|sel
decl_stmt|;
name|sel
operator|.
name|cursor
operator|=
name|c
expr_stmt|;
name|ed
operator|->
name|setExtraSelections
argument_list|(
name|QList
argument_list|<
name|QTextEdit
operator|::
name|ExtraSelection
argument_list|>
argument_list|()
operator|<<
name|sel
argument_list|)
expr_stmt|;
name|c
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|c
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextWord
argument_list|)
expr_stmt|;
specifier|const
name|int
name|wordPos
init|=
name|c
operator|.
name|position
argument_list|()
decl_stmt|;
name|c
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|sel
operator|.
name|cursor
operator|=
name|c
expr_stmt|;
name|ed
operator|->
name|setExtraSelections
argument_list|(
name|QList
argument_list|<
name|QTextEdit
operator|::
name|ExtraSelection
argument_list|>
argument_list|()
operator|<<
name|sel
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QTextEdit
operator|::
name|ExtraSelection
argument_list|>
name|selections
init|=
name|ed
operator|->
name|extraSelections
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|selections
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selections
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
name|endPos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selections
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|cursor
operator|.
name|anchor
argument_list|()
argument_list|,
name|wordPos
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|adjustScrollbars
name|void
name|tst_QTextEdit
operator|::
name|adjustScrollbars
parameter_list|()
block|{
comment|// For some reason ff is defined to be<< on Mac Panther / gcc 3.3
DECL|macro|ff
undef|#
directive|undef
name|ff
name|QFont
name|ff
argument_list|(
name|ed
operator|->
name|font
argument_list|()
argument_list|)
decl_stmt|;
name|ff
operator|.
name|setFamily
argument_list|(
literal|"Tahoma"
argument_list|)
expr_stmt|;
name|ff
operator|.
name|setPointSize
argument_list|(
literal|11
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setFont
argument_list|(
name|ff
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setMinimumSize
argument_list|(
literal|140
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setMaximumSize
argument_list|(
literal|140
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|ed
operator|->
name|show
argument_list|()
expr_stmt|;
name|QLatin1String
name|txt
argument_list|(
literal|"\nabc def ghi jkl mno pqr stu vwx"
argument_list|)
decl_stmt|;
name|ed
operator|->
name|setText
argument_list|(
name|txt
operator|+
name|txt
operator|+
name|txt
operator|+
name|txt
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|maximum
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|int
name|oldMaximum
init|=
name|ed
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|maximum
argument_list|()
decl_stmt|;
name|QTextCursor
name|cursor
init|=
name|ed
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|QLatin1String
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|deletePreviousChar
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|maximum
argument_list|()
argument_list|,
name|oldMaximum
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|SignalReceiver
class|class
name|SignalReceiver
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|SignalReceiver
name|SignalReceiver
parameter_list|()
member_init_list|:
name|received
argument_list|(
literal|0
argument_list|)
block|{}
DECL|function|receivedSignals
name|int
name|receivedSignals
parameter_list|()
specifier|const
block|{
return|return
name|received
return|;
block|}
DECL|function|charFormat
name|QTextCharFormat
name|charFormat
parameter_list|()
specifier|const
block|{
return|return
name|format
return|;
block|}
public|public
name|slots
public|:
DECL|function|charFormatChanged
name|void
name|charFormatChanged
parameter_list|(
specifier|const
name|QTextCharFormat
modifier|&
name|tcf
parameter_list|)
block|{
operator|++
name|received
expr_stmt|;
name|format
operator|=
name|tcf
expr_stmt|;
block|}
private|private:
DECL|member|format
name|QTextCharFormat
name|format
decl_stmt|;
DECL|member|received
name|int
name|received
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|currentCharFormatChanged
name|void
name|tst_QTextEdit
operator|::
name|currentCharFormatChanged
parameter_list|()
block|{
name|QFont
name|ff
argument_list|(
name|ed
operator|->
name|font
argument_list|()
argument_list|)
decl_stmt|;
name|ff
operator|.
name|setFamily
argument_list|(
literal|"Tahoma"
argument_list|)
expr_stmt|;
name|ff
operator|.
name|setPointSize
argument_list|(
literal|11
argument_list|)
expr_stmt|;
name|SignalReceiver
name|receiver
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|ed
argument_list|,
name|SIGNAL
argument_list|(
name|currentCharFormatChanged
argument_list|(
specifier|const
name|QTextCharFormat
operator|&
argument_list|)
argument_list|)
argument_list|,
operator|&
name|receiver
argument_list|,
name|SLOT
argument_list|(
name|charFormatChanged
argument_list|(
specifier|const
name|QTextCharFormat
operator|&
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ed
operator|->
name|show
argument_list|()
expr_stmt|;
name|ed
operator|->
name|setCurrentFont
argument_list|(
name|ff
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|receiver
operator|.
name|receivedSignals
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|receiver
operator|.
name|charFormat
argument_list|()
operator|.
name|font
argument_list|()
argument_list|,
name|ff
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|textObscuredByScrollbars
name|void
name|tst_QTextEdit
operator|::
name|textObscuredByScrollbars
parameter_list|()
block|{
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|insertText
argument_list|(
literal|"ab cab cab c abca kjsdf lka sjd lfk jsal df j kasdf abc ab abc "
literal|"a b c d e f g h i j k l m n o p q r s t u v w x y z "
literal|"abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc "
literal|"ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab"
literal|"abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc "
literal|"ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab"
literal|"abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc "
literal|"ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab"
literal|"abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc "
literal|"ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab"
literal|"abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc "
literal|"ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setHorizontalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAlwaysOff
argument_list|)
expr_stmt|;
name|ed
operator|->
name|show
argument_list|()
expr_stmt|;
name|QSize
name|documentSize
init|=
name|ed
operator|->
name|document
argument_list|()
operator|->
name|documentLayout
argument_list|()
operator|->
name|documentSize
argument_list|()
operator|.
name|toSize
argument_list|()
decl_stmt|;
name|QSize
name|viewportSize
init|=
name|ed
operator|->
name|viewport
argument_list|()
operator|->
name|size
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|documentSize
operator|.
name|width
argument_list|()
operator|<=
name|viewportSize
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setTextPreservesUndoRedoEnabled
name|void
name|tst_QTextEdit
operator|::
name|setTextPreservesUndoRedoEnabled
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|ed
operator|->
name|isUndoRedoEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|isUndoRedoEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setUndoRedoEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|isUndoRedoEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"Test2"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|isUndoRedoEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setHtml
argument_list|(
literal|"<p>hello"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|isUndoRedoEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|wordWrapProperty
name|void
name|tst_QTextEdit
operator|::
name|wordWrapProperty
parameter_list|()
block|{
block|{
name|QTextEdit
name|edit
decl_stmt|;
name|QTextDocument
modifier|*
name|doc
init|=
operator|new
name|QTextDocument
argument_list|(
operator|&
name|edit
argument_list|)
decl_stmt|;
name|edit
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|edit
operator|.
name|setWordWrapMode
argument_list|(
name|QTextOption
operator|::
name|NoWrap
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|defaultTextOption
argument_list|()
operator|.
name|wrapMode
argument_list|()
operator|==
name|QTextOption
operator|::
name|NoWrap
argument_list|)
expr_stmt|;
block|}
block|{
name|QTextEdit
name|edit
decl_stmt|;
name|QTextDocument
modifier|*
name|doc
init|=
operator|new
name|QTextDocument
argument_list|(
operator|&
name|edit
argument_list|)
decl_stmt|;
name|edit
operator|.
name|setWordWrapMode
argument_list|(
name|QTextOption
operator|::
name|NoWrap
argument_list|)
expr_stmt|;
name|edit
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|defaultTextOption
argument_list|()
operator|.
name|wrapMode
argument_list|()
operator|==
name|QTextOption
operator|::
name|NoWrap
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|lineWrapProperty
name|void
name|tst_QTextEdit
operator|::
name|lineWrapProperty
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|ed
operator|->
name|wordWrapMode
argument_list|()
operator|==
name|QTextOption
operator|::
name|WrapAtWordBoundaryOrAnywhere
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|lineWrapMode
argument_list|()
operator|==
name|QTextEdit
operator|::
name|WidgetWidth
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setLineWrapMode
argument_list|(
name|QTextEdit
operator|::
name|NoWrap
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|lineWrapMode
argument_list|()
operator|==
name|QTextEdit
operator|::
name|NoWrap
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|wordWrapMode
argument_list|()
operator|==
name|QTextOption
operator|::
name|WrapAtWordBoundaryOrAnywhere
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|document
argument_list|()
operator|->
name|defaultTextOption
argument_list|()
operator|.
name|wrapMode
argument_list|()
operator|==
name|QTextOption
operator|::
name|NoWrap
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|selectionChanged
name|void
name|tst_QTextEdit
operator|::
name|selectionChanged
parameter_list|()
block|{
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|QSignalSpy
name|selectionChangedSpy
argument_list|(
name|ed
argument_list|,
name|SIGNAL
argument_list|(
name|selectionChanged
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Right
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selectionChangedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Right
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selectionChangedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Right
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selectionChangedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Right
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selectionChangedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Right
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selectionChangedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Right
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selectionChangedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|copyPasteBackgroundImage
name|void
name|tst_QTextEdit
operator|::
name|copyPasteBackgroundImage
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
if|if
condition|(
operator|!
name|nativeClipboardWorking
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"Native clipboard not working in this setup"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
name|QImage
name|foo
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|foo
operator|.
name|save
argument_list|(
literal|"foo.png"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setHtml
argument_list|(
literal|"<body><table><tr><td background=\"foo.png\">Foo</td></tr></table></body>"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|ed
operator|->
name|copy
argument_list|()
expr_stmt|;
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|,
name|QTextCursor
operator|::
name|MoveAnchor
argument_list|)
expr_stmt|;
name|ed
operator|->
name|paste
argument_list|()
expr_stmt|;
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|a
init|=
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|PreviousBlock
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|b
init|=
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|!=
name|b
argument_list|)
expr_stmt|;
name|QBrush
name|ba
init|=
name|a
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|format
argument_list|()
operator|.
name|background
argument_list|()
decl_stmt|;
name|QBrush
name|bb
init|=
name|b
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|format
argument_list|()
operator|.
name|background
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|style
argument_list|()
argument_list|,
name|Qt
operator|::
name|TexturePattern
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|style
argument_list|()
argument_list|,
name|bb
operator|.
name|style
argument_list|()
argument_list|)
expr_stmt|;
comment|// we don't want a copy/paste of the background image to cause
comment|// a new image/pixmap to be created, it should use the cached resource
comment|// already in the document
name|QVERIFY
argument_list|(
name|ba
operator|.
name|textureImage
argument_list|()
operator|.
name|cacheKey
argument_list|()
operator|==
name|bb
operator|.
name|textureImage
argument_list|()
operator|.
name|cacheKey
argument_list|()
operator|||
name|ba
operator|.
name|texture
argument_list|()
operator|.
name|cacheKey
argument_list|()
operator|==
name|bb
operator|.
name|texture
argument_list|()
operator|.
name|cacheKey
argument_list|()
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|QLatin1String
argument_list|(
literal|"foo.png"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|setText
name|void
name|tst_QTextEdit
operator|::
name|setText
parameter_list|()
block|{
name|QTextEdit
name|browser
decl_stmt|;
name|browser
operator|.
name|setText
argument_list|(
name|QLatin1String
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|browser
operator|.
name|toPlainText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|browser
operator|.
name|setText
argument_list|(
name|QLatin1String
argument_list|(
literal|"<b>bold   bold</b>"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|browser
operator|.
name|toPlainText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"bold bold"
argument_list|)
argument_list|)
expr_stmt|;
name|browser
operator|.
name|setText
argument_list|(
name|QLatin1String
argument_list|(
literal|"with   space"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|browser
operator|.
name|toPlainText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"with   space"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function_decl
name|QT_BEGIN_NAMESPACE
specifier|extern
name|void
name|qt_setQtEnableTestFont
parameter_list|(
name|bool
name|value
parameter_list|)
function_decl|;
end_function_decl
begin_function
name|QT_END_NAMESPACE
DECL|function|fullWidthSelection_data
name|void
name|tst_QTextEdit
operator|::
name|fullWidthSelection_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"cursorFrom"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"cursorTo"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"imageFileName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"centered fully selected"
argument_list|)
operator|<<
literal|0
operator|<<
literal|15
operator|<<
name|QString
argument_list|(
literal|"fullWidthSelection/centered-fully-selected.png"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"centered partly selected"
argument_list|)
operator|<<
literal|2
operator|<<
literal|15
operator|<<
name|QString
argument_list|(
literal|"fullWidthSelection/centered-partly-selected.png"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"last char on line"
argument_list|)
operator|<<
literal|42
operator|<<
literal|44
operator|<<
name|QString
argument_list|(
literal|"fullWidthSelection/last-char-on-line.png"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"last char on parag"
argument_list|)
operator|<<
literal|545
operator|<<
literal|548
operator|<<
name|QString
argument_list|(
literal|"fullWidthSelection/last-char-on-parag.png"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"multiple full width lines"
argument_list|)
operator|<<
literal|20
operator|<<
literal|60
operator|<<
name|QString
argument_list|(
literal|"fullWidthSelection/multiple-full-width-lines.png"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"single full width line"
argument_list|)
operator|<<
literal|20
operator|<<
literal|30
operator|<<
name|QString
argument_list|(
literal|"fullWidthSelection/single-full-width-line.png"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fullWidthSelection
name|void
name|tst_QTextEdit
operator|::
name|fullWidthSelection
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|cursorFrom
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|cursorTo
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|imageFileName
argument_list|)
expr_stmt|;
comment|// enable full-width-selection for our test widget.
class|class
name|FullWidthStyle
super|:
specifier|public
name|QCommonStyle
block|{
name|int
name|styleHint
parameter_list|(
name|StyleHint
name|stylehint
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QStyleHintReturn
modifier|*
name|returnData
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|stylehint
operator|==
name|QStyle
operator|::
name|SH_RichText_FullWidthSelection
condition|)
return|return
literal|1
return|;
return|return
name|QCommonStyle
operator|::
name|styleHint
argument_list|(
name|stylehint
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|,
name|returnData
argument_list|)
return|;
block|}
empty_stmt|;
block|}
class|;
name|FullWidthStyle
name|myStyle
decl_stmt|;
name|QPalette
name|myPalette
init|=
name|myStyle
operator|.
name|standardPalette
argument_list|()
decl_stmt|;
name|myPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|All
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|myPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|All
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|QColor
argument_list|(
literal|239
argument_list|,
literal|221
argument_list|,
literal|85
argument_list|)
argument_list|)
expr_stmt|;
name|QTextEdit
name|widget
decl_stmt|;
name|widget
operator|.
name|document
argument_list|()
operator|->
name|setDocumentMargin
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|widget
operator|.
name|setPalette
argument_list|(
name|myPalette
argument_list|)
expr_stmt|;
name|widget
operator|.
name|setStyle
argument_list|(
operator|&
name|myStyle
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursor
init|=
name|widget
operator|.
name|textCursor
argument_list|()
decl_stmt|;
name|QTextBlockFormat
name|bf1
decl_stmt|;
name|bf1
operator|.
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignCenter
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setBlockFormat
argument_list|(
name|bf1
argument_list|)
expr_stmt|;
comment|// use the test font so we always know where stuff will end up.
name|qt_setQtEnableTestFont
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QFont
name|testFont
decl_stmt|;
name|testFont
operator|.
name|setFamily
argument_list|(
literal|"__Qt__Box__Engine__"
argument_list|)
expr_stmt|;
name|testFont
operator|.
name|setPixelSize
argument_list|(
literal|11
argument_list|)
expr_stmt|;
name|testFont
operator|.
name|setWeight
argument_list|(
name|QFont
operator|::
name|Normal
argument_list|)
expr_stmt|;
name|QTextCharFormat
name|cf
decl_stmt|;
name|cf
operator|.
name|setFont
argument_list|(
name|testFont
argument_list|)
expr_stmt|;
name|cf
operator|.
name|setForeground
argument_list|(
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// tricky bit, this :)
name|cursor
operator|.
name|setCharFormat
argument_list|(
name|cf
argument_list|)
expr_stmt|;
comment|// populate with some demo text.
name|cursor
operator|.
name|insertText
argument_list|(
literal|"centered"
argument_list|)
expr_stmt|;
name|QTextBlockFormat
name|bf
decl_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|(
name|bf
argument_list|,
name|cf
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo cons.\nfoo\n"
argument_list|)
expr_stmt|;
comment|// Usecase 1 for full-width-selections; the 'show-cursor-position' one.
name|QList
argument_list|<
name|QTextEdit
operator|::
name|ExtraSelection
argument_list|>
name|selections
decl_stmt|;
name|QTextCursor
name|cursor2
argument_list|(
name|widget
operator|.
name|document
argument_list|()
argument_list|)
decl_stmt|;
name|QTextEdit
operator|::
name|ExtraSelection
name|es
decl_stmt|;
name|cursor2
operator|.
name|setPosition
argument_list|(
literal|300
argument_list|)
expr_stmt|;
name|es
operator|.
name|cursor
operator|=
name|cursor2
expr_stmt|;
name|es
operator|.
name|format
operator|.
name|setProperty
argument_list|(
name|QTextFormat
operator|::
name|FullWidthSelection
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|es
operator|.
name|format
operator|.
name|setBackground
argument_list|(
name|QColor
argument_list|(
literal|255
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|selections
operator|.
name|append
argument_list|(
name|es
argument_list|)
expr_stmt|;
name|widget
operator|.
name|setExtraSelections
argument_list|(
name|selections
argument_list|)
expr_stmt|;
comment|// Usecase 2; show it based on the style.
comment|// Select part of the centered text and part of the next; which means we should show the part right of the centered text.
name|cursor
operator|.
name|setPosition
argument_list|(
name|cursorFrom
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|cursorTo
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|widget
operator|.
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|compareWidgetAndImage
argument_list|(
name|widget
argument_list|,
name|imageFileName
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fullWidthSelection2
name|void
name|tst_QTextEdit
operator|::
name|fullWidthSelection2
parameter_list|()
block|{
name|QPalette
name|myPalette
decl_stmt|;
name|myPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|All
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|myPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|All
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|QColor
argument_list|(
literal|239
argument_list|,
literal|221
argument_list|,
literal|85
argument_list|)
argument_list|)
expr_stmt|;
name|QTextEdit
name|widget
decl_stmt|;
name|widget
operator|.
name|setPalette
argument_list|(
name|myPalette
argument_list|)
expr_stmt|;
name|widget
operator|.
name|setLineWrapMode
argument_list|(
name|QTextEdit
operator|::
name|NoWrap
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursor
init|=
name|widget
operator|.
name|textCursor
argument_list|()
decl_stmt|;
comment|// use the test font so we always know where stuff will end up.
name|qt_setQtEnableTestFont
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QFont
name|testFont
decl_stmt|;
name|testFont
operator|.
name|setFamily
argument_list|(
literal|"__Qt__Box__Engine__"
argument_list|)
expr_stmt|;
name|testFont
operator|.
name|setPixelSize
argument_list|(
literal|11
argument_list|)
expr_stmt|;
name|testFont
operator|.
name|setWeight
argument_list|(
name|QFont
operator|::
name|Normal
argument_list|)
expr_stmt|;
name|QTextCharFormat
name|cf
decl_stmt|;
name|cf
operator|.
name|setFont
argument_list|(
name|testFont
argument_list|)
expr_stmt|;
name|cf
operator|.
name|setForeground
argument_list|(
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// tricky bit, this :)
name|cursor
operator|.
name|setCharFormat
argument_list|(
name|cf
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QTextEdit
operator|::
name|ExtraSelection
argument_list|>
name|selections
decl_stmt|;
name|QTextCursor
name|cursor2
argument_list|(
name|widget
operator|.
name|document
argument_list|()
argument_list|)
decl_stmt|;
name|QTextEdit
operator|::
name|ExtraSelection
name|es
decl_stmt|;
name|cursor2
operator|.
name|setPosition
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|es
operator|.
name|cursor
operator|=
name|cursor2
expr_stmt|;
name|es
operator|.
name|format
operator|.
name|setProperty
argument_list|(
name|QTextFormat
operator|::
name|FullWidthSelection
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|es
operator|.
name|format
operator|.
name|setBackground
argument_list|(
name|QColor
argument_list|(
literal|255
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|selections
operator|.
name|append
argument_list|(
name|es
argument_list|)
expr_stmt|;
name|widget
operator|.
name|setExtraSelections
argument_list|(
name|selections
argument_list|)
expr_stmt|;
name|compareWidgetAndImage
argument_list|(
name|widget
argument_list|,
literal|"fullWidthSelection/nowrap_long.png"
argument_list|)
expr_stmt|;
name|QTextLine
name|line
init|=
name|widget
operator|.
name|document
argument_list|()
operator|->
name|begin
argument_list|()
operator|.
name|layout
argument_list|()
operator|->
name|lineAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// qDebug()<< line.width();
block|}
end_function
begin_function
DECL|function|compareWidgetAndImage
name|void
name|tst_QTextEdit
operator|::
name|compareWidgetAndImage
parameter_list|(
name|QTextEdit
modifier|&
name|widget
parameter_list|,
specifier|const
name|QString
modifier|&
name|imageFileName
parameter_list|)
block|{
name|widget
operator|.
name|setGeometry
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|300
argument_list|,
literal|390
argument_list|)
expr_stmt|;
name|widget
operator|.
name|setFrameShape
argument_list|(
name|QFrame
operator|::
name|NoFrame
argument_list|)
expr_stmt|;
name|QImage
name|image
argument_list|(
literal|300
argument_list|,
literal|390
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|QPainter
name|painter
argument_list|(
operator|&
name|image
argument_list|)
decl_stmt|;
name|widget
operator|.
name|viewport
argument_list|()
operator|->
name|render
argument_list|(
operator|&
name|painter
argument_list|)
expr_stmt|;
name|painter
operator|.
name|end
argument_list|()
expr_stmt|;
comment|// qDebug()<< "file: "<< QString(SRCDIR) + imageFileName;
name|QImageReader
name|reader
argument_list|(
name|QString
argument_list|(
name|SRCDIR
argument_list|)
operator|+
name|imageFileName
argument_list|,
literal|"PNG"
argument_list|)
decl_stmt|;
name|QImage
name|original
init|=
name|reader
operator|.
name|read
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|original
operator|.
name|isNull
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|original
operator|.
name|size
argument_list|()
argument_list|,
name|image
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|image
operator|.
name|depth
argument_list|()
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|original
operator|.
name|depth
argument_list|()
argument_list|,
name|image
operator|.
name|depth
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|int
name|bytesPerLine
init|=
name|image
operator|.
name|bytesPerLine
argument_list|()
decl_stmt|;
specifier|const
name|int
name|width
init|=
name|image
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|int
name|height
init|=
name|image
operator|.
name|height
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
operator|++
name|y
control|)
block|{
specifier|const
name|QRgb
modifier|*
specifier|const
name|firstLine
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|QRgb
operator|*
argument_list|>
argument_list|(
name|image
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QRgb
modifier|*
specifier|const
name|secondLine
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|QRgb
operator|*
argument_list|>
argument_list|(
name|original
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|memcmp
argument_list|(
name|firstLine
argument_list|,
name|secondLine
argument_list|,
name|bytesPerLine
argument_list|)
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
operator|++
name|x
control|)
block|{
specifier|const
name|QRgb
name|a
init|=
name|firstLine
index|[
name|x
index|]
decl_stmt|;
specifier|const
name|QRgb
name|b
init|=
name|secondLine
index|[
name|x
index|]
decl_stmt|;
specifier|const
name|bool
name|same
init|=
name|qAbs
argument_list|(
name|qRed
argument_list|(
name|a
argument_list|)
operator|-
name|qRed
argument_list|(
name|b
argument_list|)
argument_list|)
operator|<=
literal|20
operator|&&
name|qAbs
argument_list|(
name|qGreen
argument_list|(
name|a
argument_list|)
operator|-
name|qGreen
argument_list|(
name|b
argument_list|)
argument_list|)
operator|<=
literal|20
operator|&&
name|qAbs
argument_list|(
name|qBlue
argument_list|(
name|a
argument_list|)
operator|-
name|qBlue
argument_list|(
name|b
argument_list|)
argument_list|)
operator|<=
literal|20
decl_stmt|;
if|if
condition|(
operator|!
name|same
condition|)
block|{
name|QString
name|fileName
init|=
name|imageFileName
decl_stmt|;
name|QImageWriter
name|writer
argument_list|(
literal|"failed_"
operator|+
name|fileName
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'_'
argument_list|)
argument_list|,
literal|"PNG"
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|image
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|same
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|cursorRect
name|void
name|tst_QTextEdit
operator|::
name|cursorRect
parameter_list|()
block|{
name|ed
operator|->
name|show
argument_list|()
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"Hello Test World"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setCursorWidth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|cursorRect
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setCursorWidth
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|cursorRect
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setCursorWidth
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|cursorRect
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setCursorWidth
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|cursorRect
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setDocumentPreservesPalette
name|void
name|tst_QTextEdit
operator|::
name|setDocumentPreservesPalette
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|QWidgetTextControl
modifier|*
name|control
init|=
name|qFindChild
argument_list|<
name|QWidgetTextControl
operator|*
argument_list|>
argument_list|(
name|ed
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|control
argument_list|)
expr_stmt|;
name|QPalette
name|defaultPal
init|=
name|ed
operator|->
name|palette
argument_list|()
decl_stmt|;
name|QPalette
name|whitePal
init|=
name|ed
operator|->
name|palette
argument_list|()
decl_stmt|;
name|whitePal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|,
literal|"white"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|whitePal
operator|!=
name|ed
operator|->
name|palette
argument_list|()
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPalette
argument_list|(
name|whitePal
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|whitePal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|)
operator|==
name|ed
operator|->
name|palette
argument_list|()
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|whitePal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|)
operator|==
name|control
operator|->
name|palette
argument_list|()
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|QTextDocument
modifier|*
name|newDoc
init|=
operator|new
name|QTextDocument
argument_list|(
name|ed
argument_list|)
decl_stmt|;
name|ed
operator|->
name|setDocument
argument_list|(
name|newDoc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|control
operator|->
name|document
argument_list|()
operator|==
name|newDoc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|whitePal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|)
operator|==
name|control
operator|->
name|palette
argument_list|()
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_class
DECL|class|PublicTextEdit
class|class
name|PublicTextEdit
super|:
specifier|public
name|QTextEdit
block|{
public|public:
DECL|function|publicInsertFromMimeData
name|void
name|publicInsertFromMimeData
parameter_list|(
specifier|const
name|QMimeData
modifier|*
name|source
parameter_list|)
block|{
name|insertFromMimeData
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|pasteFromQt3RichText
name|void
name|tst_QTextEdit
operator|::
name|pasteFromQt3RichText
parameter_list|()
block|{
name|QByteArray
name|richtext
argument_list|(
literal|"<!--StartFragment--><p>  QTextEdit is an  "
argument_list|)
decl_stmt|;
name|QMimeData
name|mimeData
decl_stmt|;
name|mimeData
operator|.
name|setData
argument_list|(
literal|"application/x-qrichtext"
argument_list|,
name|richtext
argument_list|)
expr_stmt|;
cast|static_cast
argument_list|<
name|PublicTextEdit
operator|*
argument_list|>
argument_list|(
name|ed
argument_list|)
operator|->
name|publicInsertFromMimeData
argument_list|(
operator|&
name|mimeData
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"  QTextEdit is an  "
argument_list|)
argument_list|)
expr_stmt|;
name|ed
operator|->
name|clear
argument_list|()
expr_stmt|;
name|richtext
operator|=
literal|"<!--StartFragment-->  QTextEdit is an  "
expr_stmt|;
name|mimeData
operator|.
name|setData
argument_list|(
literal|"application/x-qrichtext"
argument_list|,
name|richtext
argument_list|)
expr_stmt|;
cast|static_cast
argument_list|<
name|PublicTextEdit
operator|*
argument_list|>
argument_list|(
name|ed
argument_list|)
operator|->
name|publicInsertFromMimeData
argument_list|(
operator|&
name|mimeData
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"  QTextEdit is an  "
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|noWrapBackgrounds
name|void
name|tst_QTextEdit
operator|::
name|noWrapBackgrounds
parameter_list|()
block|{
name|QWidget
name|topLevel
decl_stmt|;
name|QVBoxLayout
modifier|*
name|layout
init|=
operator|new
name|QVBoxLayout
argument_list|(
operator|&
name|topLevel
argument_list|)
decl_stmt|;
name|QTextEdit
name|edit
decl_stmt|;
name|edit
operator|.
name|setLineWrapMode
argument_list|(
name|QTextEdit
operator|::
name|NoWrap
argument_list|)
expr_stmt|;
comment|// hide the cursor in order to make the image comparison below reliable
name|edit
operator|.
name|setCursorWidth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTextFrame
modifier|*
name|root
init|=
name|edit
operator|.
name|document
argument_list|()
operator|->
name|rootFrame
argument_list|()
decl_stmt|;
name|QTextFrameFormat
name|frameFormat
init|=
name|root
operator|->
name|frameFormat
argument_list|()
decl_stmt|;
name|frameFormat
operator|.
name|setLeftMargin
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|frameFormat
operator|.
name|setRightMargin
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|root
operator|->
name|setFrameFormat
argument_list|(
name|frameFormat
argument_list|)
expr_stmt|;
name|QTextBlockFormat
name|format
decl_stmt|;
name|format
operator|.
name|setBackground
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|edit
operator|.
name|textCursor
argument_list|()
operator|.
name|setBlockFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|edit
operator|.
name|insertPlainText
argument_list|(
name|QLatin1String
argument_list|(
literal|" \n  \n   \n    \n"
argument_list|)
argument_list|)
expr_stmt|;
name|edit
operator|.
name|setFixedSize
argument_list|(
literal|100
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
operator|&
name|edit
argument_list|)
expr_stmt|;
name|topLevel
operator|.
name|show
argument_list|()
expr_stmt|;
name|QImage
name|img
init|=
name|QPixmap
operator|::
name|grabWidget
argument_list|(
name|edit
operator|.
name|viewport
argument_list|()
argument_list|)
operator|.
name|toImage
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|img
argument_list|,
name|img
operator|.
name|mirrored
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|preserveCharFormatAfterUnchangingSetPosition
name|void
name|tst_QTextEdit
operator|::
name|preserveCharFormatAfterUnchangingSetPosition
parameter_list|()
block|{
name|QColor
name|color
argument_list|(
name|Qt
operator|::
name|yellow
argument_list|)
decl_stmt|;
name|QTextEdit
name|edit
decl_stmt|;
name|edit
operator|.
name|setTextColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|QTextCursor
name|c
init|=
name|edit
operator|.
name|textCursor
argument_list|()
decl_stmt|;
name|c
operator|.
name|setPosition
argument_list|(
name|c
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|edit
operator|.
name|setTextCursor
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|edit
operator|.
name|textColor
argument_list|()
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Regression test for QTBUG-4696
end_comment
begin_function
DECL|function|twoSameInputMethodEvents
name|void
name|tst_QTextEdit
operator|::
name|twoSameInputMethodEvents
parameter_list|()
block|{
name|ed
operator|->
name|setText
argument_list|(
literal|"testLine"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|show
argument_list|()
expr_stmt|;
name|QList
argument_list|<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|>
name|attributes
decl_stmt|;
name|attributes
operator|.
name|append
argument_list|(
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|Cursor
argument_list|,
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|0
argument_list|,
name|QVariant
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QInputMethodEvent
name|event
argument_list|(
literal|"PreEditText"
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|ed
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|document
argument_list|()
operator|->
name|firstBlock
argument_list|()
operator|.
name|layout
argument_list|()
operator|->
name|lineCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|ed
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|document
argument_list|()
operator|->
name|firstBlock
argument_list|()
operator|.
name|layout
argument_list|()
operator|->
name|lineCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
end_ifndef
begin_function
DECL|function|taskQTBUG_7902_contextMenuCrash
name|void
name|tst_QTextEdit
operator|::
name|taskQTBUG_7902_contextMenuCrash
parameter_list|()
block|{
name|QTextEdit
modifier|*
name|w
init|=
operator|new
name|QTextEdit
decl_stmt|;
name|w
operator|->
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|QTimer
name|ti
decl_stmt|;
name|w
operator|->
name|connect
argument_list|(
operator|&
name|ti
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
name|w
argument_list|,
name|SLOT
argument_list|(
name|deleteLater
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ti
operator|.
name|start
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|QContextMenuEvent
modifier|*
name|cme
init|=
operator|new
name|QContextMenuEvent
argument_list|(
name|QContextMenuEvent
operator|::
name|Mouse
argument_list|,
name|w
operator|->
name|rect
argument_list|()
operator|.
name|center
argument_list|()
argument_list|)
decl_stmt|;
name|qApp
operator|->
name|postEvent
argument_list|(
name|w
operator|->
name|viewport
argument_list|()
argument_list|,
name|cme
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|300
argument_list|)
expr_stmt|;
comment|// No crash, it's allright.
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|bidiVisualMovement_data
name|void
name|tst_QTextEdit
operator|::
name|bidiVisualMovement_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"logical"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"basicDir"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|(
literal|"positionList"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Latin text"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"abc"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QChar
operator|::
name|DirL
operator|<<
operator|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Hebrew text, one item"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\327\220\327\221\327\222"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QChar
operator|::
name|DirR
operator|<<
operator|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Hebrew text after Latin text"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"abc\327\220\327\221\327\222"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QChar
operator|::
name|DirL
operator|<<
operator|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|6
operator|<<
literal|5
operator|<<
literal|4
operator|<<
literal|3
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Latin text after Hebrew text"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\327\220\327\221\327\222abc"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QChar
operator|::
name|DirR
operator|<<
operator|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|6
operator|<<
literal|5
operator|<<
literal|4
operator|<<
literal|3
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"LTR, 3 items"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"abc\327\220\327\221\327\222abc"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QChar
operator|::
name|DirL
operator|<<
operator|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|5
operator|<<
literal|4
operator|<<
literal|3
operator|<<
literal|6
operator|<<
literal|7
operator|<<
literal|8
operator|<<
literal|9
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RTL, 3 items"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\327\220\327\221\327\222abc\327\220\327\221\327\222"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QChar
operator|::
name|DirR
operator|<<
operator|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|5
operator|<<
literal|4
operator|<<
literal|3
operator|<<
literal|6
operator|<<
literal|7
operator|<<
literal|8
operator|<<
literal|9
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"LTR, 4 items"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"abc\327\220\327\221\327\222abc\327\220\327\221\327\222"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QChar
operator|::
name|DirL
operator|<<
operator|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|5
operator|<<
literal|4
operator|<<
literal|3
operator|<<
literal|6
operator|<<
literal|7
operator|<<
literal|8
operator|<<
literal|12
operator|<<
literal|11
operator|<<
literal|10
operator|<<
literal|9
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RTL, 4 items"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\327\220\327\221\327\222abc\327\220\327\221\327\222abc"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QChar
operator|::
name|DirR
operator|<<
operator|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|5
operator|<<
literal|4
operator|<<
literal|3
operator|<<
literal|6
operator|<<
literal|7
operator|<<
literal|8
operator|<<
literal|12
operator|<<
literal|11
operator|<<
literal|10
operator|<<
literal|9
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|bidiVisualMovement
name|void
name|tst_QTextEdit
operator|::
name|bidiVisualMovement
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|logical
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|basicDir
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|,
name|positionList
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setText
argument_list|(
name|logical
argument_list|)
expr_stmt|;
name|QTextOption
name|option
init|=
name|ed
operator|->
name|document
argument_list|()
operator|->
name|defaultTextOption
argument_list|()
decl_stmt|;
name|option
operator|.
name|setTextDirection
argument_list|(
name|basicDir
operator|==
name|QChar
operator|::
name|DirL
condition|?
name|Qt
operator|::
name|LeftToRight
else|:
name|Qt
operator|::
name|RightToLeft
argument_list|)
expr_stmt|;
name|ed
operator|->
name|document
argument_list|()
operator|->
name|setDefaultTextOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|ed
operator|->
name|document
argument_list|()
operator|->
name|setDefaultCursorMoveStyle
argument_list|(
name|Qt
operator|::
name|VisualMoveStyle
argument_list|)
expr_stmt|;
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|ed
operator|->
name|show
argument_list|()
expr_stmt|;
name|bool
name|moved
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|,
name|oldPos
decl_stmt|,
name|newPos
init|=
literal|0
decl_stmt|;
do|do
block|{
name|oldPos
operator|=
name|newPos
expr_stmt|;
name|QVERIFY
argument_list|(
name|oldPos
operator|==
name|positionList
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|basicDir
operator|==
name|QChar
operator|::
name|DirL
condition|)
block|{
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|Right
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|Left
argument_list|)
expr_stmt|;
block|}
name|newPos
operator|=
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
expr_stmt|;
name|moved
operator|=
operator|(
name|oldPos
operator|!=
name|newPos
operator|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|moved
condition|)
do|;
name|QVERIFY
argument_list|(
name|i
operator|==
name|positionList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
do|do
block|{
name|i
operator|--
expr_stmt|;
name|oldPos
operator|=
name|newPos
expr_stmt|;
name|QVERIFY
argument_list|(
name|oldPos
operator|==
name|positionList
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|basicDir
operator|==
name|QChar
operator|::
name|DirL
condition|)
block|{
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|Left
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|Right
argument_list|)
expr_stmt|;
block|}
name|newPos
operator|=
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
expr_stmt|;
name|moved
operator|=
operator|(
name|oldPos
operator|!=
name|newPos
operator|)
expr_stmt|;
block|}
do|while
condition|(
name|moved
operator|&&
name|i
operator|>=
literal|0
condition|)
do|;
block|}
end_function
begin_function
DECL|function|bidiLogicalMovement_data
name|void
name|tst_QTextEdit
operator|::
name|bidiLogicalMovement_data
parameter_list|()
block|{
name|bidiVisualMovement_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|bidiLogicalMovement
name|void
name|tst_QTextEdit
operator|::
name|bidiLogicalMovement
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|logical
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|basicDir
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setText
argument_list|(
name|logical
argument_list|)
expr_stmt|;
name|QTextOption
name|option
init|=
name|ed
operator|->
name|document
argument_list|()
operator|->
name|defaultTextOption
argument_list|()
decl_stmt|;
name|option
operator|.
name|setTextDirection
argument_list|(
name|basicDir
operator|==
name|QChar
operator|::
name|DirL
condition|?
name|Qt
operator|::
name|LeftToRight
else|:
name|Qt
operator|::
name|RightToLeft
argument_list|)
expr_stmt|;
name|ed
operator|->
name|document
argument_list|()
operator|->
name|setDefaultTextOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|ed
operator|->
name|document
argument_list|()
operator|->
name|setDefaultCursorMoveStyle
argument_list|(
name|Qt
operator|::
name|LogicalMoveStyle
argument_list|)
expr_stmt|;
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|ed
operator|->
name|show
argument_list|()
expr_stmt|;
name|bool
name|moved
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|,
name|oldPos
decl_stmt|,
name|newPos
init|=
literal|0
decl_stmt|;
do|do
block|{
name|oldPos
operator|=
name|newPos
expr_stmt|;
name|QVERIFY
argument_list|(
name|oldPos
operator|==
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|basicDir
operator|==
name|QChar
operator|::
name|DirL
condition|)
block|{
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|Right
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|Left
argument_list|)
expr_stmt|;
block|}
name|newPos
operator|=
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
expr_stmt|;
name|moved
operator|=
operator|(
name|oldPos
operator|!=
name|newPos
operator|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|moved
condition|)
do|;
do|do
block|{
name|i
operator|--
expr_stmt|;
name|oldPos
operator|=
name|newPos
expr_stmt|;
name|QVERIFY
argument_list|(
name|oldPos
operator|==
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|basicDir
operator|==
name|QChar
operator|::
name|DirL
condition|)
block|{
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|Left
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|Right
argument_list|)
expr_stmt|;
block|}
name|newPos
operator|=
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
expr_stmt|;
name|moved
operator|=
operator|(
name|oldPos
operator|!=
name|newPos
operator|)
expr_stmt|;
block|}
do|while
condition|(
name|moved
operator|&&
name|i
operator|>=
literal|0
condition|)
do|;
block|}
end_function
begin_function
DECL|function|inputMethodSelection
name|void
name|tst_QTextEdit
operator|::
name|inputMethodSelection
parameter_list|()
block|{
name|ed
operator|->
name|setText
argument_list|(
literal|"Lorem ipsum dolor sit amet, consectetur adipiscing elit."
argument_list|)
expr_stmt|;
name|QSignalSpy
name|selectionSpy
argument_list|(
name|ed
argument_list|,
name|SIGNAL
argument_list|(
name|selectionChanged
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QTextCursor
name|cursor
init|=
name|ed
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
literal|5
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selectionSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|selectionStart
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|selectionEnd
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|>
name|attributes
decl_stmt|;
name|attributes
operator|<<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|Selection
argument_list|,
literal|12
argument_list|,
literal|5
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QInputMethodEvent
name|event
argument_list|(
literal|""
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|ed
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selectionSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|selectionStart
argument_list|()
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|selectionEnd
argument_list|()
argument_list|,
literal|17
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QTextEdit
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qtextedit.moc"
end_include
end_unit
