begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QString>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_NETWORK_LIB
end_ifdef
begin_include
include|#
directive|include
file|<QtNetwork/QHostInfo>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
end_ifdef
begin_include
include|#
directive|include
file|<e32base.h>
end_include
begin_include
include|#
directive|include
file|<sys/socket.h>
end_include
begin_include
include|#
directive|include
file|<net/if.h>
end_include
begin_include
include|#
directive|include
file|<QSharedPointer>
end_include
begin_include
include|#
directive|include
file|<QHash>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
end_if
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_NOKIAX86
argument_list|)
end_if
begin_comment
comment|// In emulator we use WINSOCK connectivity by default. Unfortunately winsock
end_comment
begin_comment
comment|// does not work very well with UDP sockets. This defines skips some test
end_comment
begin_comment
comment|// cases which have known problems.
end_comment
begin_comment
comment|// NOTE: Prefer to use WINPCAP based connectivity in S60 emulator when running
end_comment
begin_comment
comment|// network tests. WINPCAP connectivity uses Symbian OS IP stack,
end_comment
begin_comment
comment|// correspondingly as HW does. When using WINPCAP disable this define
end_comment
begin_comment
comment|//#define SYMBIAN_WINSOCK_CONNECTIVITY
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_CC_NOKIAX86
end_comment
begin_comment
comment|// FIXME: any reason we do this for symbian only, and not other platforms?
end_comment
begin_decl_stmt
name|class
name|QtNetworkSettingsRecord
block|{
name|public
label|:
name|QtNetworkSettingsRecord
argument_list|()
block|{ }
name|QtNetworkSettingsRecord
argument_list|(
specifier|const
name|QString
operator|&
name|recName
argument_list|,
specifier|const
name|QString
operator|&
name|recVal
argument_list|)
operator|:
name|strRecordName
argument_list|(
name|recName
argument_list|)
operator|,
name|strRecordValue
argument_list|(
argument|recVal
argument_list|)
block|{ }
name|QtNetworkSettingsRecord
argument_list|(
specifier|const
name|QtNetworkSettingsRecord
operator|&
name|other
argument_list|)
operator|:
name|strRecordName
argument_list|(
name|other
operator|.
name|strRecordName
argument_list|)
operator|,
name|strRecordValue
argument_list|(
argument|other.strRecordValue
argument_list|)
block|{ }
operator|~
name|QtNetworkSettingsRecord
argument_list|()
block|{ }
specifier|const
name|QString
operator|&
name|recordName
argument_list|()
specifier|const
block|{
return|return
name|strRecordName
return|;
block|}
specifier|const
name|QString
operator|&
name|recordValue
argument_list|()
specifier|const
block|{
return|return
name|strRecordValue
return|;
block|}
name|private
label|:
name|QString
name|strRecordName
decl_stmt|;
name|QString
name|strRecordValue
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_OS_SYMBIAN
end_comment
begin_decl_stmt
name|class
name|QtNetworkSettings
block|{
name|public
label|:
specifier|static
name|QString
name|serverLocalName
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
name|loadTestSettings
argument_list|()
expr_stmt|;
if|if
condition|(
name|QtNetworkSettings
operator|::
name|entries
operator|.
name|contains
argument_list|(
literal|"server.localname"
argument_list|)
condition|)
block|{
name|QtNetworkSettingsRecord
modifier|*
name|entry
init|=
name|entries
index|[
literal|"server.localname"
index|]
decl_stmt|;
return|return
name|entry
operator|->
name|recordValue
argument_list|()
return|;
block|}
endif|#
directive|endif
return|return
name|QString
argument_list|(
literal|"qt-test-server"
argument_list|)
return|;
block|}
specifier|static
name|QString
name|serverDomainName
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
name|loadTestSettings
argument_list|()
expr_stmt|;
if|if
condition|(
name|QtNetworkSettings
operator|::
name|entries
operator|.
name|contains
argument_list|(
literal|"server.domainname"
argument_list|)
condition|)
block|{
name|QtNetworkSettingsRecord
modifier|*
name|entry
init|=
name|entries
index|[
literal|"server.domainname"
index|]
decl_stmt|;
return|return
name|entry
operator|->
name|recordValue
argument_list|()
return|;
block|}
endif|#
directive|endif
return|return
name|QString
argument_list|(
literal|"qt-test-net"
argument_list|)
return|;
block|}
specifier|static
name|QString
name|serverName
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
name|loadTestSettings
argument_list|()
expr_stmt|;
endif|#
directive|endif
return|return
name|serverLocalName
argument_list|()
operator|+
literal|"."
operator|+
name|serverDomainName
argument_list|()
return|;
block|}
specifier|static
name|QString
name|winServerName
parameter_list|()
block|{
return|return
name|serverName
argument_list|()
return|;
block|}
specifier|static
name|QString
name|wildcardServerName
parameter_list|()
block|{
return|return
literal|"qt-test-server.wildcard.dev."
operator|+
name|serverDomainName
argument_list|()
return|;
block|}
ifdef|#
directive|ifdef
name|QT_NETWORK_LIB
specifier|static
name|QHostAddress
name|serverIP
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
name|loadTestSettings
argument_list|()
expr_stmt|;
if|if
condition|(
name|QtNetworkSettings
operator|::
name|entries
operator|.
name|contains
argument_list|(
literal|"server.ip"
argument_list|)
condition|)
block|{
name|QtNetworkSettingsRecord
modifier|*
name|entry
init|=
name|entries
index|[
literal|"server.ip"
index|]
decl_stmt|;
if|if
condition|(
name|serverIp
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|serverIp
operator|=
name|entry
operator|->
name|recordValue
argument_list|()
operator|.
name|toAscii
argument_list|()
expr_stmt|;
block|}
return|return
name|QHostAddress
argument_list|(
name|serverIp
operator|.
name|data
argument_list|()
argument_list|)
return|;
block|}
endif|#
directive|endif
comment|// Q_OS_SYMBIAN
return|return
name|QHostInfo
operator|::
name|fromName
argument_list|(
name|serverName
argument_list|()
argument_list|)
operator|.
name|addresses
argument_list|()
operator|.
name|first
argument_list|()
return|;
block|}
endif|#
directive|endif
specifier|static
name|bool
name|compareReplyIMAP
parameter_list|(
name|QByteArray
specifier|const
modifier|&
name|actual
parameter_list|)
block|{
name|QList
operator|<
name|QByteArray
operator|>
name|expected
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
name|loadTestSettings
argument_list|()
expr_stmt|;
if|if
condition|(
name|QtNetworkSettings
operator|::
name|entries
operator|.
name|contains
argument_list|(
literal|"imap.expectedreply"
argument_list|)
condition|)
block|{
name|QtNetworkSettingsRecord
modifier|*
name|entry
init|=
name|entries
index|[
literal|"imap.expectedreply"
index|]
decl_stmt|;
if|if
condition|(
name|imapExpectedReply
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|imapExpectedReply
operator|=
name|entry
operator|->
name|recordValue
argument_list|()
operator|.
name|toAscii
argument_list|()
expr_stmt|;
name|imapExpectedReply
operator|.
name|append
argument_list|(
literal|'\r'
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|expected
operator|<<
name|imapExpectedReply
operator|.
name|data
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
comment|// Mandriva; old test server
name|expected
operator|<<
name|QByteArray
argument_list|(
literal|"* OK [CAPABILITY IMAP4 IMAP4rev1 LITERAL+ ID STARTTLS LOGINDISABLED] "
argument_list|)
operator|.
name|append
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|.
name|toAscii
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" Cyrus IMAP4 v2.3.11-Mandriva-RPM-2.3.11-6mdv2008.1 server ready\r\n"
argument_list|)
expr_stmt|;
comment|// Ubuntu 10.04; new test server
name|expected
operator|<<
name|QByteArray
argument_list|(
literal|"* OK "
argument_list|)
operator|.
name|append
argument_list|(
name|QtNetworkSettings
operator|::
name|serverLocalName
argument_list|()
operator|.
name|toAscii
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" Cyrus IMAP4 v2.2.13-Debian-2.2.13-19 server ready\r\n"
argument_list|)
expr_stmt|;
comment|// Feel free to add more as needed
name|Q_FOREACH
argument_list|(
argument|QByteArray const& ba
argument_list|,
argument|expected
argument_list|)
block|{
if|if
condition|(
name|ba
operator|==
name|actual
condition|)
block|{
return|return
name|true
return|;
block|}
block|}
return|return
name|false
return|;
block|}
specifier|static
name|bool
name|compareReplyIMAPSSL
parameter_list|(
name|QByteArray
specifier|const
modifier|&
name|actual
parameter_list|)
block|{
name|QList
operator|<
name|QByteArray
operator|>
name|expected
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
name|loadTestSettings
argument_list|()
expr_stmt|;
if|if
condition|(
name|QtNetworkSettings
operator|::
name|entries
operator|.
name|contains
argument_list|(
literal|"imap.expectedreplyssl"
argument_list|)
condition|)
block|{
name|QtNetworkSettingsRecord
modifier|*
name|entry
init|=
name|entries
index|[
literal|"imap.expectedreplyssl"
index|]
decl_stmt|;
if|if
condition|(
name|imapExpectedReplySsl
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|imapExpectedReplySsl
operator|=
name|entry
operator|->
name|recordValue
argument_list|()
operator|.
name|toAscii
argument_list|()
expr_stmt|;
name|imapExpectedReplySsl
operator|.
name|append
argument_list|(
literal|'\r'
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|expected
operator|<<
name|imapExpectedReplySsl
operator|.
name|data
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
comment|// Mandriva; old test server
name|expected
operator|<<
name|QByteArray
argument_list|(
literal|"* OK [CAPABILITY IMAP4 IMAP4rev1 LITERAL+ ID AUTH=PLAIN SASL-IR] "
argument_list|)
operator|.
name|append
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|.
name|toAscii
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" Cyrus IMAP4 v2.3.11-Mandriva-RPM-2.3.11-6mdv2008.1 server ready\r\n"
argument_list|)
expr_stmt|;
comment|// Ubuntu 10.04; new test server
name|expected
operator|<<
name|QByteArray
argument_list|(
literal|"* OK "
argument_list|)
operator|.
name|append
argument_list|(
name|QtNetworkSettings
operator|::
name|serverLocalName
argument_list|()
operator|.
name|toAscii
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" Cyrus IMAP4 v2.2.13-Debian-2.2.13-19 server ready\r\n"
argument_list|)
expr_stmt|;
comment|// Feel free to add more as needed
name|Q_FOREACH
argument_list|(
argument|QByteArray const& ba
argument_list|,
argument|expected
argument_list|)
block|{
if|if
condition|(
name|ba
operator|==
name|actual
condition|)
block|{
return|return
name|true
return|;
block|}
block|}
return|return
name|false
return|;
block|}
specifier|static
name|bool
name|compareReplyFtp
parameter_list|(
name|QByteArray
specifier|const
modifier|&
name|actual
parameter_list|)
block|{
name|QList
operator|<
name|QByteArray
operator|>
name|expected
expr_stmt|;
comment|// A few different vsFTPd versions.
comment|// Feel free to add more as needed
name|expected
operator|<<
name|QByteArray
argument_list|(
literal|"220 (vsFTPd 2.0.5)\r\n221 Goodbye.\r\n"
argument_list|)
expr_stmt|;
name|expected
operator|<<
name|QByteArray
argument_list|(
literal|"220 (vsFTPd 2.2.2)\r\n221 Goodbye.\r\n"
argument_list|)
expr_stmt|;
name|Q_FOREACH
argument_list|(
argument|QByteArray const& ba
argument_list|,
argument|expected
argument_list|)
block|{
if|if
condition|(
name|ba
operator|==
name|actual
condition|)
block|{
return|return
name|true
return|;
block|}
block|}
return|return
name|false
return|;
block|}
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
specifier|static
name|void
name|setDefaultIap
parameter_list|()
block|{
name|loadDefaultIap
argument_list|()
expr_stmt|;
name|struct
name|ifreq
name|ifReq
decl_stmt|;
if|if
condition|(
name|entries
operator|.
name|contains
argument_list|(
literal|"iap.default"
argument_list|)
condition|)
block|{
name|QtNetworkSettingsRecord
modifier|*
name|entry
init|=
name|entries
index|[
literal|"iap.default"
index|]
decl_stmt|;
name|QByteArray
name|tmp
argument_list|(
name|entry
operator|->
name|recordValue
argument_list|()
operator|.
name|toAscii
argument_list|()
argument_list|)
decl_stmt|;
name|strcpy
argument_list|(
name|ifReq
operator|.
name|ifr_name
argument_list|,
name|tmp
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
comment|// some default value
name|strcpy
argument_list|(
name|ifReq
operator|.
name|ifr_name
argument_list|,
literal|"Lab"
argument_list|)
expr_stmt|;
name|int
name|err
init|=
name|setdefaultif
argument_list|(
operator|&
name|ifReq
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
condition|)
name|printf
argument_list|(
literal|"Setting default IAP - '%s' failed: %d\n"
argument_list|,
name|ifReq
operator|.
name|ifr_name
argument_list|,
name|err
argument_list|)
expr_stmt|;
else|else
name|printf
argument_list|(
literal|"'%s' used as an default IAP\n"
argument_list|,
name|ifReq
operator|.
name|ifr_name
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|private
label|:
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
specifier|static
name|QHash
operator|<
name|QString
operator|,
name|QtNetworkSettingsRecord
operator|*
operator|>
name|entries
expr_stmt|;
specifier|static
name|bool
name|bDefaultIapLoaded
decl_stmt|;
specifier|static
name|bool
name|bTestSettingsLoaded
decl_stmt|;
specifier|static
name|QString
name|iapFileFullPath
decl_stmt|;
specifier|static
name|QByteArray
name|serverIp
decl_stmt|;
specifier|static
name|QByteArray
name|imapExpectedReply
decl_stmt|;
specifier|static
name|QByteArray
name|imapExpectedReplySsl
decl_stmt|;
specifier|static
name|bool
name|loadDefaultIap
parameter_list|()
block|{
if|if
condition|(
name|bDefaultIapLoaded
condition|)
return|return
name|true
return|;
name|QFile
name|iapCfgFile
argument_list|(
name|iapFileFullPath
argument_list|)
decl_stmt|;
name|bool
name|bFoundDefaultIapTag
init|=
name|false
decl_stmt|;
if|if
condition|(
name|iapCfgFile
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|QTextStream
name|input
argument_list|(
operator|&
name|iapCfgFile
argument_list|)
decl_stmt|;
name|QString
name|line
decl_stmt|;
do|do
block|{
name|line
operator|=
name|input
operator|.
name|readLine
argument_list|()
operator|.
name|trimmed
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
name|QString
argument_list|(
literal|"#"
argument_list|)
argument_list|)
condition|)
continue|continue;
comment|// comment found
if|if
condition|(
name|line
operator|.
name|contains
argument_list|(
name|QString
argument_list|(
literal|"[DEFAULT]"
argument_list|)
argument_list|)
condition|)
block|{
name|bFoundDefaultIapTag
operator|=
name|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|contains
argument_list|(
name|QString
argument_list|(
literal|"["
argument_list|)
argument_list|)
operator|&&
name|bFoundDefaultIapTag
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|bFoundDefaultIapTag
operator|&&
name|line
operator|.
name|contains
argument_list|(
literal|"name"
argument_list|)
condition|)
block|{
name|int
name|position
init|=
name|line
operator|.
name|indexOf
argument_list|(
name|QString
argument_list|(
literal|"="
argument_list|)
argument_list|)
decl_stmt|;
name|position
operator|+=
name|QString
argument_list|(
literal|"="
argument_list|)
operator|.
name|length
argument_list|()
expr_stmt|;
comment|//create record
name|QtNetworkSettingsRecord
modifier|*
name|entry
init|=
name|new
name|QtNetworkSettingsRecord
argument_list|(
name|QString
argument_list|(
literal|"iap.default"
argument_list|)
argument_list|,
name|line
operator|.
name|mid
argument_list|(
name|position
argument_list|)
operator|.
name|trimmed
argument_list|()
argument_list|)
decl_stmt|;
name|entries
operator|.
name|insert
argument_list|(
name|entry
operator|->
name|recordName
argument_list|()
argument_list|,
name|entry
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
do|while
condition|(
operator|!
name|line
operator|.
name|isNull
argument_list|()
condition|)
do|;
block|}
return|return
name|bDefaultIapLoaded
operator|=
name|bFoundDefaultIapTag
return|;
block|}
specifier|static
name|bool
name|loadTestSettings
parameter_list|()
block|{
if|if
condition|(
name|bTestSettingsLoaded
condition|)
return|return
name|true
return|;
name|QFile
name|cfgFile
argument_list|(
name|iapFileFullPath
argument_list|)
decl_stmt|;
name|bool
name|bFoundTestTag
init|=
name|false
decl_stmt|;
if|if
condition|(
name|cfgFile
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|QTextStream
name|input
argument_list|(
operator|&
name|cfgFile
argument_list|)
decl_stmt|;
name|QString
name|line
decl_stmt|;
do|do
block|{
name|line
operator|=
name|input
operator|.
name|readLine
argument_list|()
operator|.
name|trimmed
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
name|QString
argument_list|(
literal|"#"
argument_list|)
argument_list|)
operator|||
name|line
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
comment|// comment or empty line found
if|if
condition|(
name|line
operator|.
name|contains
argument_list|(
name|QString
argument_list|(
literal|"[TEST]"
argument_list|)
argument_list|)
condition|)
block|{
name|bFoundTestTag
operator|=
name|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
name|QString
argument_list|(
literal|"["
argument_list|)
argument_list|)
operator|&&
name|bFoundTestTag
condition|)
block|{
name|bFoundTestTag
operator|=
name|false
expr_stmt|;
break|break;
comment|// finished with test tag
block|}
if|if
condition|(
name|bFoundTestTag
condition|)
block|{
comment|// non-empty line
name|int
name|position
init|=
name|line
operator|.
name|indexOf
argument_list|(
name|QString
argument_list|(
literal|"="
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|position
operator|<=
literal|0
condition|)
comment|// not found
continue|continue;
comment|// found - extract
name|QString
name|recname
init|=
name|line
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
name|position
operator|-
name|QString
argument_list|(
literal|"="
argument_list|)
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trimmed
argument_list|()
decl_stmt|;
name|QString
name|recval
init|=
name|line
operator|.
name|mid
argument_list|(
name|position
operator|+
name|QString
argument_list|(
literal|"="
argument_list|)
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trimmed
argument_list|()
decl_stmt|;
comment|//create record
name|QtNetworkSettingsRecord
modifier|*
name|entry
init|=
name|new
name|QtNetworkSettingsRecord
argument_list|(
name|recname
argument_list|,
name|recval
argument_list|)
decl_stmt|;
name|entries
operator|.
name|insert
argument_list|(
name|entry
operator|->
name|recordName
argument_list|()
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
operator|!
name|line
operator|.
name|isNull
argument_list|()
condition|)
do|;
block|}
return|return
name|bTestSettingsLoaded
operator|=
name|true
return|;
block|}
endif|#
directive|endif
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
end_ifdef
begin_expr_stmt
DECL|variable|QString
DECL|member|entries
name|QHash
operator|<
name|QString
operator|,
name|QtNetworkSettingsRecord
operator|*
operator|>
name|QtNetworkSettings
operator|::
name|entries
operator|=
name|QHash
operator|<
name|QString
operator|,
name|QtNetworkSettingsRecord
operator|*
operator|>
operator|(
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|member|bDefaultIapLoaded
name|bool
name|QtNetworkSettings
operator|::
name|bDefaultIapLoaded
operator|=
name|false
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|member|bTestSettingsLoaded
name|bool
name|QtNetworkSettings
operator|::
name|bTestSettingsLoaded
operator|=
name|false
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|member|iapFileFullPath
name|QString
name|QtNetworkSettings
operator|::
name|iapFileFullPath
operator|=
name|QString
argument_list|(
literal|"C:\\Data\\iap.txt"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|member|serverIp
name|QByteArray
name|QtNetworkSettings
operator|::
name|serverIp
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|member|imapExpectedReply
name|QByteArray
name|QtNetworkSettings
operator|::
name|imapExpectedReply
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|member|imapExpectedReplySsl
name|QByteArray
name|QtNetworkSettings
operator|::
name|imapExpectedReplySsl
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
end_ifdef
begin_define
DECL|macro|Q_SET_DEFAULT_IAP
define|#
directive|define
name|Q_SET_DEFAULT_IAP
value|QtNetworkSettings::setDefaultIap();
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|Q_SET_DEFAULT_IAP
define|#
directive|define
name|Q_SET_DEFAULT_IAP
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QT_NETWORK_LIB
end_ifdef
begin_decl_stmt
name|class
name|QtNetworkSettingsInitializerCode
block|{
name|public
label|:
name|QtNetworkSettingsInitializerCode
argument_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
ifdef|#
directive|ifdef
name|Q_CC_NOKIAX86
comment|// We have a non-trivial constructor in global static.
comment|// The QtNetworkSettings::serverName() uses native API which assumes
comment|// Cleanup-stack to exist. That's why we create it here and install
comment|// top level TRAP harness.
name|CTrapCleanup
modifier|*
name|cleanupStack
init|=
name|q_check_ptr
argument_list|(
name|CTrapCleanup
operator|::
name|New
argument_list|()
argument_list|)
decl_stmt|;
name|TRAPD
argument_list|(
argument|err
argument_list|,
argument|QHostInfo testServerResult = QHostInfo::fromName(QtNetworkSettings::serverName());             if (testServerResult.error() != QHostInfo::NoError) {                 qWarning()<<
literal|"Could not lookup"
argument|<< QtNetworkSettings::serverName();                 qWarning()<<
literal|"Please configure the test environment!"
argument|;                 qWarning()<<
literal|"See /etc/hosts or network-settings.h"
argument|;                 qFatal(
literal|"Exiting"
argument|);             }
argument_list|)
name|delete
name|cleanupStack
decl_stmt|;
comment|//#else
comment|// In Symbian HW there is no sense to run this check since global statics are
comment|// initialized before QTestLib initializes the output channel for QWarnigns.
comment|// So if there is problem network setup, also all QtCore etc tests whcih have
comment|// QtNetwork dependency will crash with panic "0 - Exiciting"
endif|#
directive|endif
else|#
directive|else
name|QHostInfo
name|testServerResult
init|=
name|QHostInfo
operator|::
name|fromName
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|testServerResult
operator|.
name|error
argument_list|()
operator|!=
name|QHostInfo
operator|::
name|NoError
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Could not lookup"
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"Please configure the test environment!"
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"See /etc/hosts or network-settings.h"
expr_stmt|;
name|qFatal
argument_list|(
literal|"Exiting"
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
DECL|variable|qtNetworkSettingsInitializer
name|QtNetworkSettingsInitializerCode
name|qtNetworkSettingsInitializer
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
end_unit
