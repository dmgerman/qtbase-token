begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QString>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_NETWORK_LIB
end_ifdef
begin_include
include|#
directive|include
file|<QtNetwork/QHostInfo>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|class
name|QtNetworkSettings
block|{
name|public
label|:
specifier|static
name|QString
name|serverLocalName
parameter_list|()
block|{
return|return
name|QString
argument_list|(
literal|"qt-test-server"
argument_list|)
return|;
block|}
specifier|static
name|QString
name|serverDomainName
parameter_list|()
block|{
return|return
name|QString
argument_list|(
literal|"qt-test-net"
argument_list|)
return|;
block|}
specifier|static
name|QString
name|serverName
parameter_list|()
block|{
return|return
name|serverLocalName
argument_list|()
operator|+
literal|"."
operator|+
name|serverDomainName
argument_list|()
return|;
block|}
specifier|static
name|QString
name|winServerName
parameter_list|()
block|{
return|return
name|serverName
argument_list|()
return|;
block|}
specifier|static
name|QString
name|wildcardServerName
parameter_list|()
block|{
return|return
literal|"qt-test-server.wildcard.dev."
operator|+
name|serverDomainName
argument_list|()
return|;
block|}
ifdef|#
directive|ifdef
name|QT_NETWORK_LIB
specifier|static
name|QHostAddress
name|serverIP
parameter_list|()
block|{
return|return
name|QHostInfo
operator|::
name|fromName
argument_list|(
name|serverName
argument_list|()
argument_list|)
operator|.
name|addresses
argument_list|()
operator|.
name|first
argument_list|()
return|;
block|}
endif|#
directive|endif
specifier|static
name|bool
name|compareReplyIMAP
parameter_list|(
name|QByteArray
specifier|const
modifier|&
name|actual
parameter_list|)
block|{
name|QList
operator|<
name|QByteArray
operator|>
name|expected
expr_stmt|;
comment|// Mandriva; old test server
name|expected
operator|<<
name|QByteArray
argument_list|(
literal|"* OK [CAPABILITY IMAP4 IMAP4rev1 LITERAL+ ID STARTTLS LOGINDISABLED] "
argument_list|)
operator|.
name|append
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|.
name|toAscii
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" Cyrus IMAP4 v2.3.11-Mandriva-RPM-2.3.11-6mdv2008.1 server ready\r\n"
argument_list|)
expr_stmt|;
comment|// Ubuntu 10.04; new test server
name|expected
operator|<<
name|QByteArray
argument_list|(
literal|"* OK "
argument_list|)
operator|.
name|append
argument_list|(
name|QtNetworkSettings
operator|::
name|serverLocalName
argument_list|()
operator|.
name|toAscii
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" Cyrus IMAP4 v2.2.13-Debian-2.2.13-19 server ready\r\n"
argument_list|)
expr_stmt|;
comment|// Feel free to add more as needed
name|Q_FOREACH
argument_list|(
argument|QByteArray const& ba
argument_list|,
argument|expected
argument_list|)
block|{
if|if
condition|(
name|ba
operator|==
name|actual
condition|)
block|{
return|return
name|true
return|;
block|}
block|}
return|return
name|false
return|;
block|}
specifier|static
name|bool
name|compareReplyIMAPSSL
parameter_list|(
name|QByteArray
specifier|const
modifier|&
name|actual
parameter_list|)
block|{
name|QList
operator|<
name|QByteArray
operator|>
name|expected
expr_stmt|;
comment|// Mandriva; old test server
name|expected
operator|<<
name|QByteArray
argument_list|(
literal|"* OK [CAPABILITY IMAP4 IMAP4rev1 LITERAL+ ID AUTH=PLAIN SASL-IR] "
argument_list|)
operator|.
name|append
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|.
name|toAscii
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" Cyrus IMAP4 v2.3.11-Mandriva-RPM-2.3.11-6mdv2008.1 server ready\r\n"
argument_list|)
expr_stmt|;
comment|// Ubuntu 10.04; new test server
name|expected
operator|<<
name|QByteArray
argument_list|(
literal|"* OK "
argument_list|)
operator|.
name|append
argument_list|(
name|QtNetworkSettings
operator|::
name|serverLocalName
argument_list|()
operator|.
name|toAscii
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" Cyrus IMAP4 v2.2.13-Debian-2.2.13-19 server ready\r\n"
argument_list|)
expr_stmt|;
comment|// Feel free to add more as needed
name|Q_FOREACH
argument_list|(
argument|QByteArray const& ba
argument_list|,
argument|expected
argument_list|)
block|{
if|if
condition|(
name|ba
operator|==
name|actual
condition|)
block|{
return|return
name|true
return|;
block|}
block|}
return|return
name|false
return|;
block|}
specifier|static
name|bool
name|compareReplyFtp
parameter_list|(
name|QByteArray
specifier|const
modifier|&
name|actual
parameter_list|)
block|{
name|QList
operator|<
name|QByteArray
operator|>
name|expected
expr_stmt|;
comment|// A few different vsFTPd versions.
comment|// Feel free to add more as needed
name|expected
operator|<<
name|QByteArray
argument_list|(
literal|"220 (vsFTPd 2.0.5)\r\n221 Goodbye.\r\n"
argument_list|)
expr_stmt|;
name|expected
operator|<<
name|QByteArray
argument_list|(
literal|"220 (vsFTPd 2.2.2)\r\n221 Goodbye.\r\n"
argument_list|)
expr_stmt|;
name|Q_FOREACH
argument_list|(
argument|QByteArray const& ba
argument_list|,
argument|expected
argument_list|)
block|{
if|if
condition|(
name|ba
operator|==
name|actual
condition|)
block|{
return|return
name|true
return|;
block|}
block|}
return|return
name|false
return|;
block|}
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|QT_NETWORK_LIB
end_ifdef
begin_decl_stmt
name|class
name|QtNetworkSettingsInitializerCode
block|{
name|public
label|:
name|QtNetworkSettingsInitializerCode
argument_list|()
block|{
name|QHostInfo
name|testServerResult
init|=
name|QHostInfo
operator|::
name|fromName
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|testServerResult
operator|.
name|error
argument_list|()
operator|!=
name|QHostInfo
operator|::
name|NoError
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Could not lookup"
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"Please configure the test environment!"
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"See /etc/hosts or network-settings.h"
expr_stmt|;
name|qFatal
argument_list|(
literal|"Exiting"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
DECL|variable|qtNetworkSettingsInitializer
name|QtNetworkSettingsInitializerCode
name|qtNetworkSettingsInitializer
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
end_unit
