begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QStyleOption>
end_include
begin_class
DECL|class|tst_QStyleOption
class|class
name|tst_QStyleOption
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|qstyleoptioncast_data
parameter_list|()
function_decl|;
name|void
name|qstyleoptioncast
parameter_list|()
function_decl|;
name|void
name|copyconstructors
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_comment
comment|// Just a simple container for QStyleOption-pointer
end_comment
begin_struct
DECL|struct|StyleOptionPointerBase
struct|struct
name|StyleOptionPointerBase
block|{
DECL|member|pointer
name|QStyleOption
modifier|*
name|pointer
decl_stmt|;
DECL|function|StyleOptionPointerBase
name|StyleOptionPointerBase
parameter_list|(
name|QStyleOption
modifier|*
name|p
init|=
literal|0
parameter_list|)
member_init_list|:
name|pointer
argument_list|(
name|p
argument_list|)
block|{ }
DECL|function|~StyleOptionPointerBase
specifier|virtual
name|~
name|StyleOptionPointerBase
parameter_list|()
block|{
name|pointer
operator|=
literal|0
expr_stmt|;
block|}
block|}
struct|;
end_struct
begin_struct
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
struct|struct
DECL|struct|StyleOptionPointer
name|StyleOptionPointer
super|:
specifier|public
name|StyleOptionPointerBase
block|{
DECL|function|StyleOptionPointer
name|StyleOptionPointer
parameter_list|(
name|T
modifier|*
name|p
init|=
literal|0
parameter_list|)
member_init_list|:
name|StyleOptionPointerBase
argument_list|(
name|p
argument_list|)
block|{}
DECL|function|~StyleOptionPointer
name|~
name|StyleOptionPointer
parameter_list|()
block|{
operator|delete
cast|static_cast
argument_list|<
name|T
operator|*
argument_list|>
argument_list|(
name|pointer
argument_list|)
expr_stmt|;
name|pointer
operator|=
literal|0
expr_stmt|;
block|}
block|}
struct|;
end_struct
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|StyleOptionPointerBase*
argument_list|)
end_macro
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|stylePtr
specifier|inline
name|StyleOptionPointerBase
modifier|*
name|stylePtr
parameter_list|(
name|T
modifier|*
name|ptr
parameter_list|)
block|{
return|return
operator|new
name|StyleOptionPointer
argument_list|<
name|T
argument_list|>
argument_list|(
name|ptr
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qstyleoptioncast_data
name|void
name|tst_QStyleOption
operator|::
name|qstyleoptioncast_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|StyleOptionPointerBase
operator|*
argument_list|>
argument_list|(
literal|"testOption"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"canCastToComplex"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"optionDefault"
argument_list|)
operator|<<
name|stylePtr
argument_list|(
operator|new
name|QStyleOption
argument_list|)
operator|<<
literal|false
operator|<<
name|int
argument_list|(
name|QStyleOption
operator|::
name|SO_Default
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"optionButton"
argument_list|)
operator|<<
name|stylePtr
argument_list|(
operator|new
name|QStyleOptionButton
argument_list|)
operator|<<
literal|false
operator|<<
name|int
argument_list|(
name|QStyleOption
operator|::
name|SO_Button
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"optionComboBox"
argument_list|)
operator|<<
name|stylePtr
argument_list|(
operator|new
name|QStyleOptionComboBox
argument_list|)
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|QStyleOption
operator|::
name|SO_ComboBox
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"optionComplex"
argument_list|)
operator|<<
name|stylePtr
argument_list|(
operator|new
name|QStyleOptionComplex
argument_list|)
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|QStyleOption
operator|::
name|SO_Complex
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"optionDockWidget"
argument_list|)
operator|<<
name|stylePtr
argument_list|(
operator|new
name|QStyleOptionDockWidget
argument_list|)
operator|<<
literal|false
operator|<<
name|int
argument_list|(
name|QStyleOption
operator|::
name|SO_DockWidget
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"optionFocusRect"
argument_list|)
operator|<<
name|stylePtr
argument_list|(
operator|new
name|QStyleOptionFocusRect
argument_list|)
operator|<<
literal|false
operator|<<
name|int
argument_list|(
name|QStyleOption
operator|::
name|SO_FocusRect
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"optionFrame"
argument_list|)
operator|<<
name|stylePtr
argument_list|(
operator|new
name|QStyleOptionFrame
argument_list|)
operator|<<
literal|false
operator|<<
name|int
argument_list|(
name|QStyleOption
operator|::
name|SO_Frame
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"optionHeader"
argument_list|)
operator|<<
name|stylePtr
argument_list|(
operator|new
name|QStyleOptionHeader
argument_list|)
operator|<<
literal|false
operator|<<
name|int
argument_list|(
name|QStyleOption
operator|::
name|SO_Header
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"optionMenuItem"
argument_list|)
operator|<<
name|stylePtr
argument_list|(
operator|new
name|QStyleOptionMenuItem
argument_list|)
operator|<<
literal|false
operator|<<
name|int
argument_list|(
name|QStyleOption
operator|::
name|SO_MenuItem
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"optionProgressBar"
argument_list|)
operator|<<
name|stylePtr
argument_list|(
operator|new
name|QStyleOptionProgressBar
argument_list|)
operator|<<
literal|false
operator|<<
name|int
argument_list|(
name|QStyleOption
operator|::
name|SO_ProgressBar
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"optionSlider"
argument_list|)
operator|<<
name|stylePtr
argument_list|(
operator|new
name|QStyleOptionSlider
argument_list|)
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|QStyleOption
operator|::
name|SO_Slider
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"optionSpinBox"
argument_list|)
operator|<<
name|stylePtr
argument_list|(
operator|new
name|QStyleOptionSpinBox
argument_list|)
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|QStyleOption
operator|::
name|SO_SpinBox
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"optionTab"
argument_list|)
operator|<<
name|stylePtr
argument_list|(
operator|new
name|QStyleOptionTab
argument_list|)
operator|<<
literal|false
operator|<<
name|int
argument_list|(
name|QStyleOption
operator|::
name|SO_Tab
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"optionTitleBar"
argument_list|)
operator|<<
name|stylePtr
argument_list|(
operator|new
name|QStyleOptionTitleBar
argument_list|)
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|QStyleOption
operator|::
name|SO_TitleBar
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"optionToolBox"
argument_list|)
operator|<<
name|stylePtr
argument_list|(
operator|new
name|QStyleOptionToolBox
argument_list|)
operator|<<
literal|false
operator|<<
name|int
argument_list|(
name|QStyleOption
operator|::
name|SO_ToolBox
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"optionToolButton"
argument_list|)
operator|<<
name|stylePtr
argument_list|(
operator|new
name|QStyleOptionToolButton
argument_list|)
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|QStyleOption
operator|::
name|SO_ToolButton
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"optionViewItem"
argument_list|)
operator|<<
name|stylePtr
argument_list|(
operator|new
name|QStyleOptionViewItem
argument_list|)
operator|<<
literal|false
operator|<<
name|int
argument_list|(
name|QStyleOption
operator|::
name|SO_ViewItem
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"optionGraphicsItem"
argument_list|)
operator|<<
name|stylePtr
argument_list|(
operator|new
name|QStyleOptionGraphicsItem
argument_list|)
operator|<<
literal|false
operator|<<
name|int
argument_list|(
name|QStyleOption
operator|::
name|SO_GraphicsItem
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qstyleoptioncast
name|void
name|tst_QStyleOption
operator|::
name|qstyleoptioncast
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|StyleOptionPointerBase
operator|*
argument_list|,
name|testOption
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|canCastToComplex
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testOption
operator|->
name|pointer
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testOption
operator|->
name|pointer
operator|->
name|type
argument_list|,
name|type
argument_list|)
expr_stmt|;
comment|// Cast to common base class
name|QStyleOption
modifier|*
name|castOption
init|=
name|qstyleoption_cast
argument_list|<
name|QStyleOption
operator|*
argument_list|>
argument_list|(
name|testOption
operator|->
name|pointer
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|castOption
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|// Cast to complex base class
name|castOption
operator|=
name|qstyleoption_cast
argument_list|<
name|QStyleOptionComplex
operator|*
argument_list|>
argument_list|(
name|testOption
operator|->
name|pointer
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|canCastToComplex
argument_list|,
operator|(
name|castOption
operator|!=
literal|0
operator|)
argument_list|)
expr_stmt|;
comment|// Cast to combo box
name|castOption
operator|=
name|qstyleoption_cast
argument_list|<
name|QStyleOptionComboBox
operator|*
argument_list|>
argument_list|(
name|testOption
operator|->
name|pointer
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|castOption
operator|!=
literal|0
operator|)
argument_list|,
operator|(
name|testOption
operator|->
name|pointer
operator|->
name|type
operator|==
name|QStyleOption
operator|::
name|SO_ComboBox
operator|)
argument_list|)
expr_stmt|;
comment|// Cast to button
name|castOption
operator|=
name|qstyleoption_cast
argument_list|<
name|QStyleOptionButton
operator|*
argument_list|>
argument_list|(
name|testOption
operator|->
name|pointer
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|castOption
operator|!=
literal|0
operator|)
argument_list|,
operator|(
name|testOption
operator|->
name|pointer
operator|->
name|type
operator|==
name|QStyleOption
operator|::
name|SO_Button
operator|)
argument_list|)
expr_stmt|;
comment|// Cast to lower version
name|testOption
operator|->
name|pointer
operator|->
name|version
operator|+=
literal|1
expr_stmt|;
name|castOption
operator|=
name|qstyleoption_cast
argument_list|<
name|QStyleOption
operator|*
argument_list|>
argument_list|(
name|testOption
operator|->
name|pointer
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|castOption
argument_list|)
expr_stmt|;
comment|// Cast a null pointer
name|castOption
operator|=
name|qstyleoption_cast
argument_list|<
name|QStyleOption
operator|*
argument_list|>
argument_list|(
operator|(
name|QStyleOption
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|castOption
argument_list|,
operator|(
name|QStyleOption
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
comment|// Deallocate
operator|delete
name|testOption
expr_stmt|;
block|}
end_function
begin_function
DECL|function|copyconstructors
name|void
name|tst_QStyleOption
operator|::
name|copyconstructors
parameter_list|()
block|{
name|QStyleOptionFrame
name|frame
decl_stmt|;
name|QStyleOptionFrameV2
name|frame2
argument_list|(
name|frame
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|frame2
operator|.
name|version
argument_list|,
name|int
argument_list|(
name|QStyleOptionFrameV2
operator|::
name|Version
argument_list|)
argument_list|)
expr_stmt|;
name|frame2
operator|=
name|frame
expr_stmt|;
name|QCOMPARE
argument_list|(
name|frame2
operator|.
name|version
argument_list|,
name|int
argument_list|(
name|QStyleOptionFrameV2
operator|::
name|Version
argument_list|)
argument_list|)
expr_stmt|;
name|QStyleOptionProgressBar
name|bar
decl_stmt|;
name|QStyleOptionProgressBarV2
name|bar2
argument_list|(
name|bar
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|bar2
operator|.
name|version
argument_list|,
name|int
argument_list|(
name|QStyleOptionProgressBarV2
operator|::
name|Version
argument_list|)
argument_list|)
expr_stmt|;
name|bar2
operator|=
name|bar
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bar2
operator|.
name|version
argument_list|,
name|int
argument_list|(
name|QStyleOptionProgressBarV2
operator|::
name|Version
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QStyleOption
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qstyleoption.moc"
end_include
end_unit
