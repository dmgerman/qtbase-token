begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|"qmdisubwindow.h"
end_include
begin_include
include|#
directive|include
file|"qmdiarea.h"
end_include
begin_include
include|#
directive|include
file|<QLayout>
end_include
begin_include
include|#
directive|include
file|<QLineEdit>
end_include
begin_include
include|#
directive|include
file|<QMainWindow>
end_include
begin_include
include|#
directive|include
file|<QMenuBar>
end_include
begin_include
include|#
directive|include
file|<QMenu>
end_include
begin_include
include|#
directive|include
file|<QGroupBox>
end_include
begin_include
include|#
directive|include
file|<QTextEdit>
end_include
begin_include
include|#
directive|include
file|<QLayout>
end_include
begin_include
include|#
directive|include
file|<QHBoxLayout>
end_include
begin_include
include|#
directive|include
file|<QByteArray>
end_include
begin_include
include|#
directive|include
file|<QStyle>
end_include
begin_include
include|#
directive|include
file|<QStyleOptionTitleBar>
end_include
begin_include
include|#
directive|include
file|<QPushButton>
end_include
begin_include
include|#
directive|include
file|<QSizeGrip>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_MAC
argument_list|)
end_if
begin_include
include|#
directive|include
file|<QMacStyle>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"../../shared/util.h"
end_include
begin_function_decl
name|QT_BEGIN_NAMESPACE
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
specifier|extern
name|void
name|qt_x11_wait_for_window_manager
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
end_if
begin_decl_stmt
specifier|extern
name|bool
name|qt_tab_all_widgets
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_END_NAMESPACE
DECL|function|tabAllWidgets
specifier|static
specifier|inline
name|bool
name|tabAllWidgets
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
if|if
condition|(
name|qApp
operator|->
name|style
argument_list|()
operator|->
name|inherits
argument_list|(
literal|"QMacStyle"
argument_list|)
condition|)
return|return
name|qt_tab_all_widgets
return|;
endif|#
directive|endif
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|triggerSignal
specifier|static
specifier|inline
name|void
name|triggerSignal
parameter_list|(
name|QMdiSubWindow
modifier|*
name|window
parameter_list|,
name|QMdiArea
modifier|*
name|workspace
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|signal
parameter_list|)
block|{
if|if
condition|(
name|signal
operator|==
name|SIGNAL
argument_list|(
name|windowMaximized
argument_list|()
argument_list|)
condition|)
block|{
name|window
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
if|if
condition|(
name|window
operator|->
name|parent
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|window
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|signal
operator|==
name|SIGNAL
argument_list|(
name|windowMinimized
argument_list|()
argument_list|)
condition|)
block|{
name|window
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
if|if
condition|(
name|window
operator|->
name|parent
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|window
operator|->
name|isMinimized
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|signal
operator|==
name|SIGNAL
argument_list|(
name|windowRestored
argument_list|()
argument_list|)
condition|)
block|{
name|window
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|window
operator|->
name|showNormal
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|->
name|isMinimized
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|->
name|isShaded
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|signal
operator|==
name|SIGNAL
argument_list|(
name|aboutToActivate
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|window
operator|->
name|parent
argument_list|()
condition|)
block|{
name|workspace
operator|->
name|setActiveSubWindow
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|signal
operator|==
name|SIGNAL
argument_list|(
name|windowActivated
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|window
operator|->
name|parent
argument_list|()
condition|)
block|{
name|workspace
operator|->
name|setActiveSubWindow
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|signal
operator|==
name|SIGNAL
argument_list|(
name|windowDeactivated
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|window
operator|->
name|parent
argument_list|()
condition|)
return|return;
name|workspace
operator|->
name|setActiveSubWindow
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|workspace
operator|->
name|setActiveSubWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// --- from tst_qgraphicsview.cpp ---
end_comment
begin_function
DECL|function|sendMousePress
specifier|static
name|void
name|sendMousePress
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|point
parameter_list|,
name|Qt
operator|::
name|MouseButton
name|button
init|=
name|Qt
operator|::
name|LeftButton
parameter_list|)
block|{
name|QMouseEvent
name|event
argument_list|(
name|QEvent
operator|::
name|MouseButtonPress
argument_list|,
name|point
argument_list|,
name|widget
operator|->
name|mapToGlobal
argument_list|(
name|point
argument_list|)
argument_list|,
name|button
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendMouseMove
specifier|static
name|void
name|sendMouseMove
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|point
parameter_list|,
name|Qt
operator|::
name|MouseButton
name|button
init|=
name|Qt
operator|::
name|LeftButton
parameter_list|)
block|{
name|QMouseEvent
name|event
argument_list|(
name|QEvent
operator|::
name|MouseMove
argument_list|,
name|point
argument_list|,
name|widget
operator|->
name|mapToGlobal
argument_list|(
name|point
argument_list|)
argument_list|,
name|button
argument_list|,
name|button
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendMouseRelease
specifier|static
name|void
name|sendMouseRelease
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|point
parameter_list|,
name|Qt
operator|::
name|MouseButton
name|button
init|=
name|Qt
operator|::
name|LeftButton
parameter_list|)
block|{
name|QMouseEvent
name|event
argument_list|(
name|QEvent
operator|::
name|MouseButtonRelease
argument_list|,
name|point
argument_list|,
name|widget
operator|->
name|mapToGlobal
argument_list|(
name|point
argument_list|)
argument_list|,
name|button
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ---
end_comment
begin_function
DECL|function|sendMouseDoubleClick
specifier|static
name|void
name|sendMouseDoubleClick
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|point
parameter_list|,
name|Qt
operator|::
name|MouseButton
name|button
init|=
name|Qt
operator|::
name|LeftButton
parameter_list|)
block|{
name|sendMousePress
argument_list|(
name|widget
argument_list|,
name|point
argument_list|,
name|button
argument_list|)
expr_stmt|;
name|sendMouseRelease
argument_list|(
name|widget
argument_list|,
name|point
argument_list|,
name|button
argument_list|)
expr_stmt|;
name|QMouseEvent
name|event
argument_list|(
name|QEvent
operator|::
name|MouseButtonDblClick
argument_list|,
name|point
argument_list|,
name|widget
operator|->
name|mapToGlobal
argument_list|(
name|point
argument_list|)
argument_list|,
name|button
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|StandardWindowFlags
specifier|static
specifier|const
name|Qt
operator|::
name|WindowFlags
name|StandardWindowFlags
init|=
name|Qt
operator|::
name|WindowTitleHint
operator||
name|Qt
operator|::
name|WindowSystemMenuHint
operator||
name|Qt
operator|::
name|WindowMinMaxButtonsHint
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|DialogWindowFlags
specifier|static
specifier|const
name|Qt
operator|::
name|WindowFlags
name|DialogWindowFlags
init|=
name|Qt
operator|::
name|WindowTitleHint
operator||
name|Qt
operator|::
name|WindowSystemMenuHint
decl_stmt|;
end_decl_stmt
begin_expr_stmt
DECL|variable|WindowState
name|Q_DECLARE_METATYPE
argument_list|(
name|Qt
operator|::
name|WindowState
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|WindowStates
name|Q_DECLARE_METATYPE
argument_list|(
name|Qt
operator|::
name|WindowStates
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|WindowType
name|Q_DECLARE_METATYPE
argument_list|(
name|Qt
operator|::
name|WindowType
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|WindowFlags
name|Q_DECLARE_METATYPE
argument_list|(
name|Qt
operator|::
name|WindowFlags
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|//TESTED_CLASS=
end_comment
begin_comment
comment|//TESTED_FILES=
end_comment
begin_class
DECL|class|tst_QMdiSubWindow
class|class
name|tst_QMdiSubWindow
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|sizeHint
parameter_list|()
function_decl|;
name|void
name|minimumSizeHint
parameter_list|()
function_decl|;
name|void
name|minimumSize
parameter_list|()
function_decl|;
name|void
name|setWidget
parameter_list|()
function_decl|;
name|void
name|setWindowState_data
parameter_list|()
function_decl|;
name|void
name|setWindowState
parameter_list|()
function_decl|;
name|void
name|mainWindowSupport
parameter_list|()
function_decl|;
name|void
name|emittingOfSignals_data
parameter_list|()
function_decl|;
name|void
name|emittingOfSignals
parameter_list|()
function_decl|;
name|void
name|showShaded
parameter_list|()
function_decl|;
name|void
name|showNormal_data
parameter_list|()
function_decl|;
name|void
name|showNormal
parameter_list|()
function_decl|;
name|void
name|setOpaqueResizeAndMove_data
parameter_list|()
function_decl|;
name|void
name|setOpaqueResizeAndMove
parameter_list|()
function_decl|;
name|void
name|setWindowFlags_data
parameter_list|()
function_decl|;
name|void
name|setWindowFlags
parameter_list|()
function_decl|;
name|void
name|mouseDoubleClick
parameter_list|()
function_decl|;
name|void
name|setSystemMenu
parameter_list|()
function_decl|;
name|void
name|restoreFocus
parameter_list|()
function_decl|;
name|void
name|changeFocusWithTab
parameter_list|()
function_decl|;
name|void
name|closeEvent
parameter_list|()
function_decl|;
name|void
name|setWindowTitle
parameter_list|()
function_decl|;
name|void
name|resizeEvents_data
parameter_list|()
function_decl|;
name|void
name|resizeEvents
parameter_list|()
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
name|void
name|defaultSizeGrip
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|hideAndShow
parameter_list|()
function_decl|;
name|void
name|keepWindowMaximizedState
parameter_list|()
function_decl|;
name|void
name|explicitlyHiddenWidget
parameter_list|()
function_decl|;
name|void
name|resizeTimer
parameter_list|()
function_decl|;
name|void
name|fixedMinMaxSize
parameter_list|()
function_decl|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|void
name|replaceMenuBarWhileMaximized
parameter_list|()
function_decl|;
name|void
name|closeOnDoubleClick
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|setFont
parameter_list|()
function_decl|;
name|void
name|task_188849
parameter_list|()
function_decl|;
name|void
name|mdiArea
parameter_list|()
function_decl|;
name|void
name|task_182852
parameter_list|()
function_decl|;
name|void
name|task_233197
parameter_list|()
function_decl|;
name|void
name|task_226929
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|initTestCase
name|void
name|tst_QMdiSubWindow
operator|::
name|initTestCase
parameter_list|()
block|{
name|qRegisterMetaType
argument_list|<
name|Qt
operator|::
name|WindowStates
argument_list|>
argument_list|(
literal|"Qt::WindowStates"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sizeHint
name|void
name|tst_QMdiSubWindow
operator|::
name|sizeHint
parameter_list|()
block|{
name|QMdiSubWindow
modifier|*
name|window
init|=
operator|new
name|QMdiSubWindow
decl_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|sizeHint
argument_list|()
argument_list|,
name|window
operator|->
name|minimumSizeHint
argument_list|()
argument_list|)
expr_stmt|;
name|window
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|sizeHint
argument_list|()
argument_list|,
name|window
operator|->
name|minimumSizeHint
argument_list|()
argument_list|)
expr_stmt|;
name|QMdiArea
name|workspace
decl_stmt|;
name|workspace
operator|.
name|addSubWindow
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|sizeHint
argument_list|()
argument_list|,
name|window
operator|->
name|minimumSizeHint
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|minimumSizeHint
name|void
name|tst_QMdiSubWindow
operator|::
name|minimumSizeHint
parameter_list|()
block|{
name|QMdiSubWindow
name|window
decl_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|minimumSizeHint
argument_list|()
argument_list|,
name|qApp
operator|->
name|globalStrut
argument_list|()
argument_list|)
expr_stmt|;
name|window
operator|.
name|setWidget
argument_list|(
operator|new
name|QWidget
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|minimumSizeHint
argument_list|()
argument_list|,
name|window
operator|.
name|layout
argument_list|()
operator|->
name|minimumSize
argument_list|()
operator|.
name|expandedTo
argument_list|(
name|qApp
operator|->
name|globalStrut
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|window
operator|.
name|widget
argument_list|()
expr_stmt|;
operator|delete
name|window
operator|.
name|layout
argument_list|()
expr_stmt|;
name|window
operator|.
name|setWidget
argument_list|(
operator|new
name|QWidget
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|minimumSizeHint
argument_list|()
argument_list|,
name|qApp
operator|->
name|globalStrut
argument_list|()
argument_list|)
expr_stmt|;
name|window
operator|.
name|widget
argument_list|()
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|minimumSizeHint
argument_list|()
argument_list|,
name|window
operator|.
name|widget
argument_list|()
operator|->
name|minimumSizeHint
argument_list|()
operator|.
name|expandedTo
argument_list|(
name|qApp
operator|->
name|globalStrut
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|minimumSize
name|void
name|tst_QMdiSubWindow
operator|::
name|minimumSize
parameter_list|()
block|{
name|QMdiArea
name|mdiArea
decl_stmt|;
name|mdiArea
operator|.
name|resize
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
expr_stmt|;
comment|// Check that we respect the minimum size set on the sub-window itself.
name|QMdiSubWindow
modifier|*
name|subWindow1
init|=
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
decl_stmt|;
name|subWindow1
operator|->
name|setMinimumSize
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|show
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
name|qt_x11_wait_for_window_manager
argument_list|(
operator|&
name|mdiArea
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|subWindow1
operator|->
name|size
argument_list|()
argument_list|,
name|QSize
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that we respect the minimum size set on the internal widget.
name|QWidget
modifier|*
name|widget
init|=
operator|new
name|QWidget
decl_stmt|;
name|widget
operator|->
name|setMinimumSize
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|subWindow2
init|=
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|subWindow2
operator|->
name|size
argument_list|()
operator|!=
name|mdiArea
operator|.
name|viewport
argument_list|()
operator|->
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|subWindow2
operator|->
name|size
argument_list|()
argument_list|,
name|subWindow2
operator|->
name|minimumSizeHint
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setWidget
name|void
name|tst_QMdiSubWindow
operator|::
name|setWidget
parameter_list|()
block|{
name|QMdiSubWindow
name|window
decl_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|.
name|layout
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|.
name|widget
argument_list|()
argument_list|)
expr_stmt|;
comment|// QPointer so we can check if the widget is deleted
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|widget
init|=
operator|new
name|QWidget
decl_stmt|;
name|widget
operator|->
name|setWindowTitle
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"DummyTitle"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widget
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"DummyTitle"
argument_list|)
argument_list|)
expr_stmt|;
name|window
operator|.
name|setWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|windowTitle
argument_list|()
argument_list|,
name|window
operator|.
name|widget
argument_list|()
operator|->
name|windowTitle
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widget
operator|->
name|parentWidget
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
operator|&
name|window
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|widget
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|layout
argument_list|()
operator|->
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QMdiSubWindow::setWidget: widget is already set"
argument_list|)
expr_stmt|;
name|window
operator|.
name|setWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|widget
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widget
operator|->
name|parentWidget
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
operator|&
name|window
argument_list|)
argument_list|)
expr_stmt|;
name|window
operator|.
name|setWidget
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|widget
operator|->
name|parent
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|.
name|widget
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|layout
argument_list|()
operator|->
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|window
operator|.
name|setWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
operator|delete
name|window
operator|.
name|layout
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|.
name|layout
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|.
name|widget
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|widget
argument_list|()
operator|->
name|parentWidget
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
operator|&
name|window
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|window
operator|.
name|widget
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|widget
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|.
name|widget
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setWindowState_data
name|void
name|tst_QMdiSubWindow
operator|::
name|setWindowState_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|Qt
operator|::
name|WindowState
argument_list|>
argument_list|(
literal|"windowState"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"maximized"
argument_list|)
operator|<<
name|Qt
operator|::
name|WindowMaximized
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"minimized"
argument_list|)
operator|<<
name|Qt
operator|::
name|WindowMinimized
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"normalized"
argument_list|)
operator|<<
name|Qt
operator|::
name|WindowNoState
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setWindowState
name|void
name|tst_QMdiSubWindow
operator|::
name|setWindowState
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|Qt
operator|::
name|WindowState
argument_list|,
name|windowState
argument_list|)
expr_stmt|;
name|QMdiArea
name|workspace
decl_stmt|;
name|QMdiSubWindow
modifier|*
name|window
init|=
name|qobject_cast
argument_list|<
name|QMdiSubWindow
operator|*
argument_list|>
argument_list|(
name|workspace
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QLineEdit
argument_list|)
argument_list|)
decl_stmt|;
name|window
operator|->
name|show
argument_list|()
expr_stmt|;
name|workspace
operator|.
name|show
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
name|qt_x11_wait_for_window_manager
argument_list|(
operator|&
name|workspace
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QWidget
modifier|*
name|testWidget
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|iteration
init|=
literal|0
init|;
name|iteration
operator|<
literal|2
condition|;
operator|++
name|iteration
control|)
block|{
if|if
condition|(
name|iteration
operator|==
literal|0
condition|)
name|testWidget
operator|=
name|window
expr_stmt|;
else|else
name|testWidget
operator|=
name|window
operator|->
name|widget
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|setWindowState
argument_list|(
name|windowState
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|WindowStates
name|windowStateWindow
init|=
name|window
operator|->
name|windowState
argument_list|()
decl_stmt|;
name|windowStateWindow
operator|&=
operator|~
name|Qt
operator|::
name|WindowActive
expr_stmt|;
name|Qt
operator|::
name|WindowStates
name|windowStateWidget
init|=
name|window
operator|->
name|widget
argument_list|()
operator|->
name|windowState
argument_list|()
decl_stmt|;
name|windowStateWidget
operator|&=
operator|~
name|Qt
operator|::
name|WindowActive
expr_stmt|;
name|QCOMPARE
argument_list|(
name|windowStateWindow
argument_list|,
name|windowStateWidget
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|windowState
condition|)
block|{
case|case
name|Qt
operator|::
name|WindowNoState
case|:
name|QVERIFY
argument_list|(
operator|!
name|window
operator|->
name|widget
argument_list|()
operator|->
name|isMinimized
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|->
name|widget
argument_list|()
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|->
name|isMinimized
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|WindowMinimized
case|:
name|QVERIFY
argument_list|(
name|window
operator|->
name|widget
argument_list|()
operator|->
name|isMinimized
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|isMinimized
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|WindowMaximized
case|:
name|QVERIFY
argument_list|(
name|window
operator|->
name|widget
argument_list|()
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|mainWindowSupport
name|void
name|tst_QMdiSubWindow
operator|::
name|mainWindowSupport
parameter_list|()
block|{
name|QList
argument_list|<
name|QMdiSubWindow
modifier|*
argument_list|>
name|windows
decl_stmt|;
name|QMdiArea
modifier|*
name|workspace
init|=
operator|new
name|QMdiArea
decl_stmt|;
name|QMainWindow
name|mainWindow
decl_stmt|;
name|mainWindow
operator|.
name|setCentralWidget
argument_list|(
name|workspace
argument_list|)
expr_stmt|;
name|mainWindow
operator|.
name|show
argument_list|()
expr_stmt|;
name|mainWindow
operator|.
name|menuBar
argument_list|()
operator|->
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
operator|&
name|mainWindow
argument_list|)
expr_stmt|;
comment|// QMainWindow's window title is empty
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
block|{
name|QCOMPARE
argument_list|(
name|mainWindow
operator|.
name|windowTitle
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|window
init|=
name|workspace
operator|->
name|addSubWindow
argument_list|(
operator|new
name|QPushButton
argument_list|(
name|QLatin1String
argument_list|(
literal|"Test"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|expectedTitle
init|=
name|QLatin1String
argument_list|(
literal|"MainWindow's title is empty"
argument_list|)
decl_stmt|;
name|window
operator|->
name|setWindowTitle
argument_list|(
name|expectedTitle
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|expectedTitle
argument_list|)
expr_stmt|;
name|window
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|expectedTitle
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mainWindow
operator|.
name|windowTitle
argument_list|()
argument_list|,
name|expectedTitle
argument_list|)
expr_stmt|;
name|window
operator|->
name|showNormal
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|expectedTitle
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mainWindow
operator|.
name|windowTitle
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|window
operator|->
name|close
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
name|QString
name|originalWindowTitle
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"MainWindow"
argument_list|)
decl_stmt|;
name|mainWindow
operator|.
name|setWindowTitle
argument_list|(
name|originalWindowTitle
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
name|mainWindow
operator|.
name|menuBar
argument_list|()
operator|->
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|window
init|=
operator|new
name|QMdiSubWindow
decl_stmt|;
name|windows
operator|.
name|append
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|->
name|maximizedButtonsWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|->
name|maximizedSystemMenuIconWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QMdiArea
modifier|*
name|nestedWorkspace
init|=
operator|new
name|QMdiArea
decl_stmt|;
comment|// :-)
name|window
operator|->
name|setWidget
argument_list|(
name|nestedWorkspace
argument_list|)
expr_stmt|;
name|window
operator|->
name|widget
argument_list|()
operator|->
name|setWindowTitle
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Window %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|workspace
operator|->
name|addSubWindow
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|->
name|maximizedButtonsWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|->
name|maximizedSystemMenuIconWidget
argument_list|()
argument_list|)
expr_stmt|;
name|window
operator|->
name|show
argument_list|()
expr_stmt|;
comment|// mainWindow.menuBar() is not visible
name|window
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|->
name|maximizedButtonsWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|->
name|maximizedSystemMenuIconWidget
argument_list|()
argument_list|)
expr_stmt|;
name|window
operator|->
name|showNormal
argument_list|()
expr_stmt|;
comment|// Now it is
name|mainWindow
operator|.
name|menuBar
argument_list|()
operator|->
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|window
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QVERIFY
argument_list|(
name|window
operator|->
name|maximizedButtonsWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|maximizedButtonsWidget
argument_list|()
argument_list|,
name|mainWindow
operator|.
name|menuBar
argument_list|()
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopRightCorner
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|maximizedSystemMenuIconWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|maximizedSystemMenuIconWidget
argument_list|()
argument_list|,
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|mainWindow
operator|.
name|menuBar
argument_list|()
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopLeftCorner
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mainWindow
operator|.
name|windowTitle
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1 - [%2]"
argument_list|)
operator|.
name|arg
argument_list|(
name|originalWindowTitle
argument_list|,
name|window
operator|->
name|widget
argument_list|()
operator|->
name|windowTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Check that nested child windows don't set window title
name|nestedWorkspace
operator|->
name|show
argument_list|()
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|nestedWindow
init|=
operator|new
name|QMdiSubWindow
decl_stmt|;
name|nestedWindow
operator|->
name|setWidget
argument_list|(
operator|new
name|QWidget
argument_list|)
expr_stmt|;
name|nestedWorkspace
operator|->
name|addSubWindow
argument_list|(
name|nestedWindow
argument_list|)
expr_stmt|;
name|nestedWindow
operator|->
name|widget
argument_list|()
operator|->
name|setWindowTitle
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"NestedWindow %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|nestedWindow
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|nestedWindow
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|nestedWindow
operator|->
name|maximizedButtonsWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|nestedWindow
operator|->
name|maximizedSystemMenuIconWidget
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QCOMPARE
argument_list|(
name|mainWindow
operator|.
name|windowTitle
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1 - [%2]"
argument_list|)
operator|.
name|arg
argument_list|(
name|originalWindowTitle
argument_list|,
name|window
operator|->
name|widget
argument_list|()
operator|->
name|windowTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
return|return;
endif|#
directive|endif
name|workspace
operator|->
name|activateNextSubWindow
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
foreach|foreach
control|(
name|QMdiSubWindow
modifier|*
name|window
decl|,
name|windows
control|)
block|{
name|QCOMPARE
argument_list|(
name|workspace
operator|->
name|activeSubWindow
argument_list|()
argument_list|,
name|window
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|maximizedButtonsWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|maximizedButtonsWidget
argument_list|()
argument_list|,
name|mainWindow
operator|.
name|menuBar
argument_list|()
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopRightCorner
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|maximizedSystemMenuIconWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|maximizedSystemMenuIconWidget
argument_list|()
argument_list|,
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|mainWindow
operator|.
name|menuBar
argument_list|()
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopLeftCorner
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mainWindow
operator|.
name|windowTitle
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1 - [%2]"
argument_list|)
operator|.
name|arg
argument_list|(
name|originalWindowTitle
argument_list|,
name|window
operator|->
name|widget
argument_list|()
operator|->
name|windowTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|workspace
operator|->
name|activateNextSubWindow
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// This test was written when QMdiSubWindow emitted separate signals
end_comment
begin_function
DECL|function|emittingOfSignals_data
name|void
name|tst_QMdiSubWindow
operator|::
name|emittingOfSignals_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"signal"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|Qt
operator|::
name|WindowState
argument_list|>
argument_list|(
literal|"watchedState"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"windowMaximized"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|SIGNAL
argument_list|(
name|windowMaximized
argument_list|()
argument_list|)
argument_list|)
operator|<<
name|Qt
operator|::
name|WindowMaximized
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"windowMinimized"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|SIGNAL
argument_list|(
name|windowMinimized
argument_list|()
argument_list|)
argument_list|)
operator|<<
name|Qt
operator|::
name|WindowMinimized
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"windowRestored"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|SIGNAL
argument_list|(
name|windowRestored
argument_list|()
argument_list|)
argument_list|)
operator|<<
name|Qt
operator|::
name|WindowNoState
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"aboutToActivate"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|SIGNAL
argument_list|(
name|aboutToActivate
argument_list|()
argument_list|)
argument_list|)
operator|<<
name|Qt
operator|::
name|WindowNoState
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"windowActivated"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|SIGNAL
argument_list|(
name|windowActivated
argument_list|()
argument_list|)
argument_list|)
operator|<<
name|Qt
operator|::
name|WindowActive
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"windowDeactivated"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|SIGNAL
argument_list|(
name|windowDeactivated
argument_list|()
argument_list|)
argument_list|)
operator|<<
name|Qt
operator|::
name|WindowActive
expr_stmt|;
block|}
end_function
begin_function
DECL|function|emittingOfSignals
name|void
name|tst_QMdiSubWindow
operator|::
name|emittingOfSignals
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|signal
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|Qt
operator|::
name|WindowState
argument_list|,
name|watchedState
argument_list|)
expr_stmt|;
name|QMdiArea
name|workspace
decl_stmt|;
name|workspace
operator|.
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
operator|&
name|workspace
argument_list|)
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|window
init|=
name|qobject_cast
argument_list|<
name|QMdiSubWindow
operator|*
argument_list|>
argument_list|(
name|workspace
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
argument_list|)
decl_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|window
operator|->
name|show
argument_list|()
expr_stmt|;
if|if
condition|(
name|signal
operator|!=
name|SIGNAL
argument_list|(
name|windowRestored
argument_list|()
argument_list|)
condition|)
name|workspace
operator|.
name|setActiveSubWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
name|window
argument_list|,
name|signal
operator|==
name|SIGNAL
argument_list|(
name|aboutToActivate
argument_list|()
argument_list|)
condition|?
name|signal
operator|.
name|data
argument_list|()
else|:
name|SIGNAL
argument_list|(
name|windowStateChanged
argument_list|(
name|Qt
operator|::
name|WindowStates
argument_list|,
name|Qt
operator|::
name|WindowStates
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|triggerSignal
argument_list|(
name|window
argument_list|,
operator|&
name|workspace
argument_list|,
name|signal
argument_list|)
expr_stmt|;
comment|// Unless the signal is windowRestored or windowDeactivated,
comment|// we're already in correct state and nothing should happen.
if|if
condition|(
name|signal
operator|!=
name|SIGNAL
argument_list|(
name|windowRestored
argument_list|()
argument_list|)
operator|&&
name|signal
operator|!=
name|SIGNAL
argument_list|(
name|windowDeactivated
argument_list|()
argument_list|)
condition|)
name|triggerSignal
argument_list|(
name|window
argument_list|,
operator|&
name|workspace
argument_list|,
name|signal
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|signal
operator|==
name|SIGNAL
argument_list|(
name|aboutToActivate
argument_list|()
argument_list|)
condition|)
block|{
name|count
operator|+=
name|spy
operator|.
name|count
argument_list|()
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|spy
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Qt
operator|::
name|WindowStates
name|oldState
init|=
name|qvariant_cast
argument_list|<
name|Qt
operator|::
name|WindowStates
argument_list|>
argument_list|(
name|spy
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|WindowStates
name|newState
init|=
name|qvariant_cast
argument_list|<
name|Qt
operator|::
name|WindowStates
argument_list|>
argument_list|(
name|spy
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|watchedState
operator|!=
name|Qt
operator|::
name|WindowNoState
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|oldState
operator|&
name|watchedState
operator|)
operator|&&
operator|(
name|newState
operator|&
name|watchedState
operator|)
condition|)
operator|++
name|count
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|(
name|oldState
operator|&
operator|(
name|Qt
operator|::
name|WindowMinimized
operator||
name|Qt
operator|::
name|WindowMaximized
operator|)
operator|)
operator|&&
operator|(
name|newState
operator|&
operator|(
name|watchedState
operator||
name|Qt
operator|::
name|WindowActive
operator|)
operator|)
condition|)
block|{
operator|++
name|count
expr_stmt|;
block|}
block|}
block|}
block|}
name|QCOMPARE
argument_list|(
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|window
operator|->
name|setParent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|window
operator|->
name|showNormal
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
name|qt_x11_wait_for_window_manager
argument_list|(
name|window
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|triggerSignal
argument_list|(
name|window
argument_list|,
operator|&
name|workspace
argument_list|,
name|signal
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|window
expr_stmt|;
name|window
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|showShaded
name|void
name|tst_QMdiSubWindow
operator|::
name|showShaded
parameter_list|()
block|{
name|QMdiArea
name|workspace
decl_stmt|;
name|QMdiSubWindow
modifier|*
name|window
init|=
name|workspace
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QLineEdit
argument_list|)
decl_stmt|;
name|window
operator|->
name|resize
argument_list|(
literal|300
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|workspace
operator|.
name|show
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
name|qt_x11_wait_for_window_manager
argument_list|(
operator|&
name|workspace
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
operator|!
name|window
operator|->
name|isShaded
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|size
argument_list|()
argument_list|,
name|QSize
argument_list|(
literal|300
argument_list|,
literal|300
argument_list|)
argument_list|)
expr_stmt|;
name|QRect
name|restoreGeometry
init|=
name|window
operator|->
name|geometry
argument_list|()
decl_stmt|;
name|window
operator|->
name|showShaded
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|isShaded
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|isMinimized
argument_list|()
argument_list|)
expr_stmt|;
name|window
operator|->
name|showNormal
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|->
name|isShaded
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|->
name|isMinimized
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|geometry
argument_list|()
argument_list|,
name|restoreGeometry
argument_list|)
expr_stmt|;
name|window
operator|->
name|showShaded
argument_list|()
expr_stmt|;
name|window
operator|->
name|showNormal
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|->
name|isShaded
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|->
name|isMinimized
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|geometry
argument_list|()
argument_list|,
name|restoreGeometry
argument_list|)
expr_stmt|;
name|window
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
name|window
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|window
operator|->
name|showShaded
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|width
argument_list|()
argument_list|,
name|workspace
operator|.
name|contentsRect
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|window
operator|->
name|showNormal
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|geometry
argument_list|()
argument_list|,
name|workspace
operator|.
name|contentsRect
argument_list|()
argument_list|)
expr_stmt|;
name|window
operator|->
name|resize
argument_list|(
literal|300
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|size
argument_list|()
argument_list|,
name|QSize
argument_list|(
literal|300
argument_list|,
literal|300
argument_list|)
argument_list|)
expr_stmt|;
name|window
operator|->
name|showShaded
argument_list|()
expr_stmt|;
name|window
operator|->
name|showNormal
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|250
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|QSKIP
argument_list|(
literal|"Until we have a QEvent::WindowFlagsChange event, this will skip"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
endif|#
directive|endif
specifier|const
name|QSize
name|minimumSizeHint
init|=
name|window
operator|->
name|minimumSizeHint
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|minimumSizeHint
operator|.
name|height
argument_list|()
operator|<
literal|300
argument_list|)
expr_stmt|;
specifier|const
name|int
name|maxHeightDiff
init|=
literal|300
operator|-
name|minimumSizeHint
operator|.
name|height
argument_list|()
decl_stmt|;
comment|// Calculate mouse position for bottom right corner and simulate a
comment|// vertical resize with the mouse.
name|int
name|offset
init|=
name|window
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MDIFrameWidth
argument_list|)
operator|/
literal|2
decl_stmt|;
name|QPoint
name|mousePosition
argument_list|(
name|window
operator|->
name|width
argument_list|()
operator|-
name|qMax
argument_list|(
name|offset
argument_list|,
literal|2
argument_list|)
argument_list|,
name|window
operator|->
name|height
argument_list|()
operator|-
name|qMax
argument_list|(
name|offset
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|mouseReceiver
init|=
literal|0
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_MAC
if|if
condition|(
name|qobject_cast
argument_list|<
name|QMacStyle
operator|*
argument_list|>
argument_list|(
name|window
operator|->
name|style
argument_list|()
argument_list|)
condition|)
name|mouseReceiver
operator|=
name|qFindChild
argument_list|<
name|QSizeGrip
operator|*
argument_list|>
argument_list|(
name|window
argument_list|)
expr_stmt|;
else|else
endif|#
directive|endif
name|mouseReceiver
operator|=
name|window
expr_stmt|;
name|QVERIFY
argument_list|(
name|mouseReceiver
argument_list|)
expr_stmt|;
name|sendMouseMove
argument_list|(
name|mouseReceiver
argument_list|,
name|mousePosition
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|sendMousePress
argument_list|(
name|mouseReceiver
argument_list|,
name|mousePosition
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxHeightDiff
operator|+
literal|20
condition|;
operator|++
name|i
control|)
block|{
operator|--
name|mousePosition
operator|.
name|ry
argument_list|()
expr_stmt|;
name|sendMouseMove
argument_list|(
name|mouseReceiver
argument_list|,
name|mousePosition
argument_list|)
expr_stmt|;
block|}
name|sendMouseRelease
argument_list|(
name|mouseReceiver
argument_list|,
name|mousePosition
argument_list|)
expr_stmt|;
comment|// Make sure we respect the minimumSizeHint!
name|QCOMPARE
argument_list|(
name|window
operator|->
name|height
argument_list|()
argument_list|,
name|minimumSizeHint
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|window
operator|->
name|showShaded
argument_list|()
expr_stmt|;
name|window
operator|->
name|setParent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|window
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|->
name|isShaded
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|window
expr_stmt|;
block|}
end_function
begin_function
DECL|function|showNormal_data
name|void
name|tst_QMdiSubWindow
operator|::
name|showNormal_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"slot"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"showMinimized"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"showMinimized"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"showMaximized"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"showMaximized"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"showShaded"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"showShaded"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|showNormal
name|void
name|tst_QMdiSubWindow
operator|::
name|showNormal
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|slot
argument_list|)
expr_stmt|;
name|QMdiArea
name|workspace
decl_stmt|;
name|QWidget
modifier|*
name|window
init|=
name|workspace
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
decl_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|workspace
operator|.
name|show
argument_list|()
expr_stmt|;
name|window
operator|->
name|show
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
name|qt_x11_wait_for_window_manager
argument_list|(
operator|&
name|workspace
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QRect
name|originalGeometry
init|=
name|window
operator|->
name|geometry
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|window
argument_list|,
name|slot
operator|.
name|data
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|window
operator|->
name|showNormal
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|geometry
argument_list|()
argument_list|,
name|originalGeometry
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|EventSpy
class|class
name|EventSpy
super|:
specifier|public
name|QObject
block|{
public|public:
DECL|function|EventSpy
name|EventSpy
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|,
name|QEvent
operator|::
name|Type
name|event
parameter_list|)
member_init_list|:
name|eventToSpy
argument_list|(
name|event
argument_list|)
member_init_list|,
name|_count
argument_list|(
literal|0
argument_list|)
block|{
if|if
condition|(
name|object
condition|)
name|object
operator|->
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|count
name|int
name|count
parameter_list|()
specifier|const
block|{
return|return
name|_count
return|;
block|}
DECL|function|clear
name|void
name|clear
parameter_list|()
block|{
name|_count
operator|=
literal|0
expr_stmt|;
block|}
protected|protected:
DECL|function|eventFilter
name|bool
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|eventToSpy
condition|)
operator|++
name|_count
expr_stmt|;
return|return
name|QObject
operator|::
name|eventFilter
argument_list|(
name|object
argument_list|,
name|event
argument_list|)
return|;
block|}
private|private:
DECL|member|eventToSpy
name|QEvent
operator|::
name|Type
name|eventToSpy
decl_stmt|;
DECL|member|_count
name|int
name|_count
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|setOpaqueResizeAndMove_data
name|void
name|tst_QMdiSubWindow
operator|::
name|setOpaqueResizeAndMove_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"opaqueMode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"geometryCount"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedGeometryCount"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QSize
argument_list|>
argument_list|(
literal|"workspaceSize"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QSize
argument_list|>
argument_list|(
literal|"windowSize"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"normal mode"
argument_list|)
operator|<<
literal|true
operator|<<
literal|20
operator|<<
literal|20
operator|<<
name|QSize
argument_list|(
literal|400
argument_list|,
literal|400
argument_list|)
operator|<<
name|QSize
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rubberband mode"
argument_list|)
operator|<<
literal|false
operator|<<
literal|20
operator|<<
literal|1
operator|<<
name|QSize
argument_list|(
literal|400
argument_list|,
literal|400
argument_list|)
operator|<<
name|QSize
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setOpaqueResizeAndMove
name|void
name|tst_QMdiSubWindow
operator|::
name|setOpaqueResizeAndMove
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_NO_CURSOR
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WINCE_WM
argument_list|)
comment|//For Windows CE we will set QT_NO_CURSOR if there is no cursor support
name|QSKIP
argument_list|(
literal|"No cursor available"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|opaqueMode
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|geometryCount
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedGeometryCount
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QSize
argument_list|,
name|workspaceSize
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QSize
argument_list|,
name|windowSize
argument_list|)
expr_stmt|;
name|QMdiArea
name|workspace
decl_stmt|;
name|QMdiSubWindow
modifier|*
name|window
init|=
name|qobject_cast
argument_list|<
name|QMdiSubWindow
operator|*
argument_list|>
argument_list|(
name|workspace
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
argument_list|)
decl_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|workspace
operator|.
name|resize
argument_list|(
name|workspaceSize
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|show
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
name|qt_x11_wait_for_window_manager
argument_list|(
operator|&
name|workspace
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QWidget
modifier|*
name|mouseReceiver
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|window
operator|->
name|style
argument_list|()
operator|->
name|inherits
argument_list|(
literal|"QMacStyle"
argument_list|)
condition|)
name|mouseReceiver
operator|=
name|qFindChild
argument_list|<
name|QSizeGrip
operator|*
argument_list|>
argument_list|(
name|window
argument_list|)
expr_stmt|;
else|else
name|mouseReceiver
operator|=
name|window
expr_stmt|;
name|QVERIFY
argument_list|(
name|mouseReceiver
argument_list|)
expr_stmt|;
comment|// ----------------------------- resize -----------------------------
block|{
comment|// setOpaqueResize
name|window
operator|->
name|setOption
argument_list|(
name|QMdiSubWindow
operator|::
name|RubberBandResize
argument_list|,
operator|!
name|opaqueMode
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|testOption
argument_list|(
name|QMdiSubWindow
operator|::
name|RubberBandResize
argument_list|)
argument_list|,
operator|!
name|opaqueMode
argument_list|)
expr_stmt|;
comment|// Check that the event spy actually works
name|EventSpy
name|resizeSpy
argument_list|(
name|window
argument_list|,
name|QEvent
operator|::
name|Resize
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|resizeSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|window
operator|->
name|resize
argument_list|(
name|windowSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|size
argument_list|()
argument_list|,
name|windowSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|resizeSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|resizeSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|resizeSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|250
argument_list|)
expr_stmt|;
comment|// delayed update of dirty regions
comment|// Enter resize mode.
name|int
name|offset
init|=
name|window
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MDIFrameWidth
argument_list|)
operator|/
literal|2
decl_stmt|;
name|QPoint
name|mousePosition
argument_list|(
name|mouseReceiver
operator|->
name|width
argument_list|()
operator|-
name|qMax
argument_list|(
name|offset
argument_list|,
literal|2
argument_list|)
argument_list|,
name|mouseReceiver
operator|->
name|height
argument_list|()
operator|-
name|qMax
argument_list|(
name|offset
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|sendMouseMove
argument_list|(
name|mouseReceiver
argument_list|,
name|mousePosition
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|sendMousePress
argument_list|(
name|mouseReceiver
argument_list|,
name|mousePosition
argument_list|)
expr_stmt|;
comment|// The window itself is the grabber in rubberband mode
if|if
condition|(
operator|!
name|opaqueMode
condition|)
block|{
name|mouseReceiver
operator|=
name|window
expr_stmt|;
name|mousePosition
operator|=
name|QPoint
argument_list|(
name|window
operator|->
name|width
argument_list|()
operator|-
name|qMax
argument_list|(
name|offset
argument_list|,
literal|2
argument_list|)
argument_list|,
name|window
operator|->
name|height
argument_list|()
operator|-
name|qMax
argument_list|(
name|offset
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Trigger resize events
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|geometryCount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|mouseReceiver
operator|==
name|window
condition|)
block|{
operator|++
name|mousePosition
operator|.
name|rx
argument_list|()
expr_stmt|;
operator|++
name|mousePosition
operator|.
name|ry
argument_list|()
expr_stmt|;
name|sendMouseMove
argument_list|(
name|mouseReceiver
argument_list|,
name|mousePosition
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sendMouseMove
argument_list|(
name|mouseReceiver
argument_list|,
name|mousePosition
operator|+
name|QPoint
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Leave resize mode
name|sendMouseRelease
argument_list|(
name|mouseReceiver
argument_list|,
name|mousePosition
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|resizeSpy
operator|.
name|count
argument_list|()
argument_list|,
name|expectedGeometryCount
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|size
argument_list|()
argument_list|,
name|windowSize
operator|+
name|QSize
argument_list|(
name|geometryCount
argument_list|,
name|geometryCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// ------------------------------ move ------------------------------
block|{
comment|// setOpaqueMove
name|window
operator|->
name|setOption
argument_list|(
name|QMdiSubWindow
operator|::
name|RubberBandMove
argument_list|,
operator|!
name|opaqueMode
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|testOption
argument_list|(
name|QMdiSubWindow
operator|::
name|RubberBandMove
argument_list|)
argument_list|,
operator|!
name|opaqueMode
argument_list|)
expr_stmt|;
name|EventSpy
name|moveSpy
argument_list|(
name|window
argument_list|,
name|QEvent
operator|::
name|Move
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|moveSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|window
operator|->
name|move
argument_list|(
literal|30
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|moveSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|moveSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Enter move mode
name|QStyleOptionTitleBar
name|options
decl_stmt|;
name|options
operator|.
name|initFrom
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|int
name|height
init|=
name|window
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_TitleBarHeight
argument_list|,
operator|&
name|options
argument_list|)
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
comment|// ### Remove this after mac style has been fixed
name|height
operator|-=
literal|4
expr_stmt|;
endif|#
directive|endif
name|QPoint
name|mousePosition
argument_list|(
name|window
operator|->
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|height
operator|-
literal|1
argument_list|)
decl_stmt|;
name|sendMouseMove
argument_list|(
name|window
argument_list|,
name|mousePosition
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|sendMousePress
argument_list|(
name|window
argument_list|,
name|mousePosition
argument_list|)
expr_stmt|;
comment|// Trigger move events
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|geometryCount
condition|;
operator|++
name|i
control|)
block|{
operator|++
name|mousePosition
operator|.
name|rx
argument_list|()
expr_stmt|;
operator|++
name|mousePosition
operator|.
name|ry
argument_list|()
expr_stmt|;
name|sendMouseMove
argument_list|(
name|window
argument_list|,
name|mousePosition
argument_list|)
expr_stmt|;
block|}
comment|// Leave move mode
name|sendMouseRelease
argument_list|(
name|window
argument_list|,
name|mousePosition
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|moveSpy
operator|.
name|count
argument_list|()
argument_list|,
name|expectedGeometryCount
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|size
argument_list|()
argument_list|,
name|windowSize
operator|+
name|QSize
argument_list|(
name|geometryCount
argument_list|,
name|geometryCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setWindowFlags_data
name|void
name|tst_QMdiSubWindow
operator|::
name|setWindowFlags_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|Qt
operator|::
name|WindowType
argument_list|>
argument_list|(
literal|"windowType"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|Qt
operator|::
name|WindowType
argument_list|>
argument_list|(
literal|"expectedWindowType"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|Qt
operator|::
name|WindowFlags
argument_list|>
argument_list|(
literal|"customFlags"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|Qt
operator|::
name|WindowFlags
argument_list|>
argument_list|(
literal|"expectedCustomFlags"
argument_list|)
expr_stmt|;
comment|// NB! If 'expectedCustomFlags' is set to 'Qt::WindowFlags(0)'
comment|// and nothing else, it means we're expecting the same as customFlags.
comment|// Standard window types with no custom flags set.
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Qt::Widget"
argument_list|)
operator|<<
name|Qt
operator|::
name|Widget
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
name|Qt
operator|::
name|WindowFlags
argument_list|(
literal|0
argument_list|)
operator|<<
name|StandardWindowFlags
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Qt::Window"
argument_list|)
operator|<<
name|Qt
operator|::
name|Window
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
name|Qt
operator|::
name|WindowFlags
argument_list|(
literal|0
argument_list|)
operator|<<
name|StandardWindowFlags
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Qt::Dialog"
argument_list|)
operator|<<
name|Qt
operator|::
name|Dialog
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
name|Qt
operator|::
name|WindowFlags
argument_list|(
literal|0
argument_list|)
operator|<<
name|DialogWindowFlags
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Qt::Sheet"
argument_list|)
operator|<<
name|Qt
operator|::
name|Sheet
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
name|Qt
operator|::
name|WindowFlags
argument_list|(
literal|0
argument_list|)
operator|<<
name|StandardWindowFlags
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Qt::Drawer"
argument_list|)
operator|<<
name|Qt
operator|::
name|Drawer
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
name|Qt
operator|::
name|WindowFlags
argument_list|(
literal|0
argument_list|)
operator|<<
name|StandardWindowFlags
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Qt::Popup"
argument_list|)
operator|<<
name|Qt
operator|::
name|Popup
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
name|Qt
operator|::
name|WindowFlags
argument_list|(
literal|0
argument_list|)
operator|<<
name|StandardWindowFlags
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Qt::Tool"
argument_list|)
operator|<<
name|Qt
operator|::
name|Tool
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
name|Qt
operator|::
name|WindowFlags
argument_list|(
literal|0
argument_list|)
operator|<<
name|StandardWindowFlags
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Qt::ToolTip"
argument_list|)
operator|<<
name|Qt
operator|::
name|ToolTip
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
name|Qt
operator|::
name|WindowFlags
argument_list|(
literal|0
argument_list|)
operator|<<
name|StandardWindowFlags
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Qt::SplashScreen"
argument_list|)
operator|<<
name|Qt
operator|::
name|SplashScreen
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
name|Qt
operator|::
name|WindowFlags
argument_list|(
literal|0
argument_list|)
operator|<<
name|StandardWindowFlags
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Qt::Desktop"
argument_list|)
operator|<<
name|Qt
operator|::
name|Desktop
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
name|Qt
operator|::
name|WindowFlags
argument_list|(
literal|0
argument_list|)
operator|<<
name|StandardWindowFlags
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Qt::SubWindow"
argument_list|)
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
name|Qt
operator|::
name|WindowFlags
argument_list|(
literal|0
argument_list|)
operator|<<
name|StandardWindowFlags
expr_stmt|;
comment|// Custom flags
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Title"
argument_list|)
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
operator|(
name|Qt
operator|::
name|WindowTitleHint
operator||
name|Qt
operator|::
name|WindowFlags
argument_list|(
literal|0
argument_list|)
operator|)
operator|<<
name|Qt
operator|::
name|WindowFlags
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"TitleAndMin"
argument_list|)
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
operator|(
name|Qt
operator|::
name|WindowTitleHint
operator||
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator|)
operator|<<
name|Qt
operator|::
name|WindowFlags
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"TitleAndMax"
argument_list|)
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
operator|(
name|Qt
operator|::
name|WindowTitleHint
operator||
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator|)
operator|<<
name|Qt
operator|::
name|WindowFlags
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"TitleAndMinMax"
argument_list|)
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
operator|(
name|Qt
operator|::
name|WindowTitleHint
operator||
name|Qt
operator|::
name|WindowMinMaxButtonsHint
operator|)
operator|<<
name|Qt
operator|::
name|WindowFlags
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Standard"
argument_list|)
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
name|StandardWindowFlags
operator|<<
name|Qt
operator|::
name|WindowFlags
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"StandardAndShade"
argument_list|)
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
operator|(
name|StandardWindowFlags
operator||
name|Qt
operator|::
name|WindowShadeButtonHint
operator|)
operator|<<
name|Qt
operator|::
name|WindowFlags
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"StandardAndContext"
argument_list|)
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
operator|(
name|StandardWindowFlags
operator||
name|Qt
operator|::
name|WindowContextHelpButtonHint
operator|)
operator|<<
name|Qt
operator|::
name|WindowFlags
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"StandardAndStaysOnTop"
argument_list|)
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
operator|(
name|StandardWindowFlags
operator||
name|Qt
operator|::
name|WindowStaysOnTopHint
operator|)
operator|<<
name|Qt
operator|::
name|WindowFlags
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"StandardAndFrameless"
argument_list|)
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
operator|(
name|StandardWindowFlags
operator||
name|Qt
operator|::
name|FramelessWindowHint
operator|)
operator|<<
operator|(
name|Qt
operator|::
name|FramelessWindowHint
operator||
name|Qt
operator|::
name|WindowFlags
argument_list|(
literal|0
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"StandardAndFramelessAndStaysOnTop"
argument_list|)
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
operator|(
name|StandardWindowFlags
operator||
name|Qt
operator|::
name|FramelessWindowHint
operator||
name|Qt
operator|::
name|WindowStaysOnTopHint
operator|)
operator|<<
operator|(
name|Qt
operator|::
name|FramelessWindowHint
operator||
name|Qt
operator|::
name|WindowStaysOnTopHint
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Shade"
argument_list|)
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
operator|(
name|Qt
operator|::
name|WindowShadeButtonHint
operator||
name|Qt
operator|::
name|WindowFlags
argument_list|(
literal|0
argument_list|)
operator|)
operator|<<
operator|(
name|StandardWindowFlags
operator||
name|Qt
operator|::
name|WindowShadeButtonHint
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ShadeAndCustomize"
argument_list|)
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
operator|(
name|Qt
operator|::
name|WindowShadeButtonHint
operator||
name|Qt
operator|::
name|CustomizeWindowHint
operator|)
operator|<<
name|Qt
operator|::
name|WindowFlags
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Context"
argument_list|)
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
operator|(
name|Qt
operator|::
name|WindowContextHelpButtonHint
operator||
name|Qt
operator|::
name|WindowFlags
argument_list|(
literal|0
argument_list|)
operator|)
operator|<<
operator|(
name|StandardWindowFlags
operator||
name|Qt
operator|::
name|WindowContextHelpButtonHint
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ContextAndCustomize"
argument_list|)
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
operator|(
name|Qt
operator|::
name|WindowContextHelpButtonHint
operator||
name|Qt
operator|::
name|CustomizeWindowHint
operator|)
operator|<<
name|Qt
operator|::
name|WindowFlags
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ShadeAndContext"
argument_list|)
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
operator|(
name|Qt
operator|::
name|WindowShadeButtonHint
operator||
name|Qt
operator|::
name|WindowContextHelpButtonHint
operator|)
operator|<<
operator|(
name|StandardWindowFlags
operator||
name|Qt
operator|::
name|WindowShadeButtonHint
operator||
name|Qt
operator|::
name|WindowContextHelpButtonHint
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ShadeAndContextAndCustomize"
argument_list|)
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
operator|(
name|Qt
operator|::
name|WindowShadeButtonHint
operator||
name|Qt
operator|::
name|WindowContextHelpButtonHint
operator||
name|Qt
operator|::
name|CustomizeWindowHint
operator|)
operator|<<
name|Qt
operator|::
name|WindowFlags
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"OnlyCustomize"
argument_list|)
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
name|Qt
operator|::
name|SubWindow
operator|<<
operator|(
name|Qt
operator|::
name|CustomizeWindowHint
operator||
name|Qt
operator|::
name|WindowFlags
argument_list|(
literal|0
argument_list|)
operator|)
operator|<<
name|Qt
operator|::
name|WindowFlags
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setWindowFlags
name|void
name|tst_QMdiSubWindow
operator|::
name|setWindowFlags
parameter_list|()
block|{
name|QSKIP
argument_list|(
literal|"Until we have a QEvent::WindowFlagsChange event, this will skip"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|Qt
operator|::
name|WindowType
argument_list|,
name|windowType
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|Qt
operator|::
name|WindowType
argument_list|,
name|expectedWindowType
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|Qt
operator|::
name|WindowFlags
argument_list|,
name|customFlags
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|Qt
operator|::
name|WindowFlags
argument_list|,
name|expectedCustomFlags
argument_list|)
expr_stmt|;
name|QMdiArea
name|workspace
decl_stmt|;
name|QMdiSubWindow
modifier|*
name|window
init|=
name|qobject_cast
argument_list|<
name|QMdiSubWindow
operator|*
argument_list|>
argument_list|(
name|workspace
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
argument_list|)
decl_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|workspace
operator|.
name|show
argument_list|()
expr_stmt|;
name|window
operator|->
name|show
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
name|qt_x11_wait_for_window_manager
argument_list|(
operator|&
name|workspace
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|window
operator|->
name|setWindowFlags
argument_list|(
name|windowType
operator||
name|customFlags
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|windowType
argument_list|()
argument_list|,
name|expectedWindowType
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|expectedCustomFlags
condition|)
comment|// We expect the same as 'customFlags'
name|QCOMPARE
argument_list|(
name|window
operator|->
name|windowFlags
argument_list|()
operator|&
operator|~
name|expectedWindowType
argument_list|,
name|customFlags
argument_list|)
expr_stmt|;
else|else
name|QCOMPARE
argument_list|(
name|window
operator|->
name|windowFlags
argument_list|()
operator|&
operator|~
name|expectedWindowType
argument_list|,
name|expectedCustomFlags
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseDoubleClick
name|void
name|tst_QMdiSubWindow
operator|::
name|mouseDoubleClick
parameter_list|()
block|{
name|QMdiArea
name|workspace
decl_stmt|;
name|QMdiSubWindow
modifier|*
name|window
init|=
name|qobject_cast
argument_list|<
name|QMdiSubWindow
operator|*
argument_list|>
argument_list|(
name|workspace
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
argument_list|)
decl_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|workspace
operator|.
name|show
argument_list|()
expr_stmt|;
name|window
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|->
name|isShaded
argument_list|()
argument_list|)
expr_stmt|;
name|QRect
name|originalGeometry
init|=
name|window
operator|->
name|geometry
argument_list|()
decl_stmt|;
comment|// Calculate mouse position
name|QStyleOptionTitleBar
name|options
decl_stmt|;
name|options
operator|.
name|initFrom
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|int
name|height
init|=
name|window
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_TitleBarHeight
argument_list|,
operator|&
name|options
argument_list|)
decl_stmt|;
comment|// ### Remove this after mac style has been fixed
if|if
condition|(
name|window
operator|->
name|style
argument_list|()
operator|->
name|inherits
argument_list|(
literal|"QMacStyle"
argument_list|)
condition|)
name|height
operator|-=
literal|4
expr_stmt|;
comment|// has border
if|if
condition|(
operator|!
name|window
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_TitleBar_NoBorder
argument_list|,
operator|&
name|options
argument_list|,
name|window
argument_list|)
condition|)
name|height
operator|+=
name|window
operator|->
name|isMinimized
argument_list|()
condition|?
literal|8
else|:
literal|4
expr_stmt|;
name|QPoint
name|mousePosition
argument_list|(
name|window
operator|->
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|height
operator|-
literal|1
argument_list|)
decl_stmt|;
name|sendMouseMove
argument_list|(
name|window
argument_list|,
name|mousePosition
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
comment|// Without Qt::WindowShadeButtonHint flag set
name|sendMouseDoubleClick
argument_list|(
name|window
argument_list|,
name|mousePosition
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|sendMouseDoubleClick
argument_list|(
name|window
argument_list|,
name|mousePosition
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|geometry
argument_list|()
argument_list|,
name|originalGeometry
argument_list|)
expr_stmt|;
comment|// With Qt::WindowShadeButtonHint flag set
name|QSKIP
argument_list|(
literal|"Until we have a QEvent::WindowFlagsChange event, this will skip"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
name|window
operator|->
name|setWindowFlags
argument_list|(
name|window
operator|->
name|windowFlags
argument_list|()
operator||
name|Qt
operator|::
name|WindowShadeButtonHint
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowShadeButtonHint
argument_list|)
expr_stmt|;
name|originalGeometry
operator|=
name|window
operator|->
name|geometry
argument_list|()
expr_stmt|;
name|sendMouseDoubleClick
argument_list|(
name|window
argument_list|,
name|mousePosition
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|isShaded
argument_list|()
argument_list|)
expr_stmt|;
name|sendMouseDoubleClick
argument_list|(
name|window
argument_list|,
name|mousePosition
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|->
name|isShaded
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|geometry
argument_list|()
argument_list|,
name|originalGeometry
argument_list|)
expr_stmt|;
name|window
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|isMinimized
argument_list|()
argument_list|)
expr_stmt|;
name|sendMouseDoubleClick
argument_list|(
name|window
argument_list|,
name|mousePosition
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|->
name|isMinimized
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|geometry
argument_list|()
argument_list|,
name|originalGeometry
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setSystemMenu
name|void
name|tst_QMdiSubWindow
operator|::
name|setSystemMenu
parameter_list|()
block|{
name|QMdiSubWindow
modifier|*
name|subWindow
init|=
operator|new
name|QMdiSubWindow
decl_stmt|;
name|subWindow
operator|->
name|resize
argument_list|(
literal|200
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|QPointer
argument_list|<
name|QMenu
argument_list|>
name|systemMenu
init|=
name|subWindow
operator|->
name|systemMenu
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|systemMenu
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|subWindow
operator|->
name|actions
argument_list|()
argument_list|,
name|systemMenu
operator|->
name|actions
argument_list|()
argument_list|)
expr_stmt|;
name|QMainWindow
name|mainWindow
decl_stmt|;
name|QMdiArea
modifier|*
name|mdiArea
init|=
operator|new
name|QMdiArea
decl_stmt|;
name|mdiArea
operator|->
name|addSubWindow
argument_list|(
name|subWindow
argument_list|)
expr_stmt|;
name|mainWindow
operator|.
name|setCentralWidget
argument_list|(
name|mdiArea
argument_list|)
expr_stmt|;
name|mainWindow
operator|.
name|menuBar
argument_list|()
expr_stmt|;
name|mainWindow
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
operator|&
name|mainWindow
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|60
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|subWindow
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QPoint
name|globalPopupPos
decl_stmt|;
comment|// Show system menu
name|QVERIFY
argument_list|(
operator|!
name|qApp
operator|->
name|activePopupWidget
argument_list|()
argument_list|)
expr_stmt|;
name|subWindow
operator|->
name|showSystemMenu
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|qApp
operator|->
name|activePopupWidget
argument_list|()
argument_list|,
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|systemMenu
argument_list|)
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|systemMenu
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
operator|(
name|globalPopupPos
operator|=
name|subWindow
operator|->
name|mapToGlobal
argument_list|(
name|subWindow
operator|->
name|contentsRect
argument_list|()
operator|.
name|topLeft
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|systemMenu
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|qApp
operator|->
name|activePopupWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QMdiSubWindow::setSystemMenu: system menu is already set"
argument_list|)
expr_stmt|;
name|subWindow
operator|->
name|setSystemMenu
argument_list|(
name|systemMenu
argument_list|)
expr_stmt|;
name|subWindow
operator|->
name|setSystemMenu
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|systemMenu
argument_list|)
expr_stmt|;
comment|// systemMenu is QPointer
name|systemMenu
operator|=
operator|new
name|QMenu
argument_list|(
name|subWindow
argument_list|)
expr_stmt|;
name|systemMenu
operator|->
name|addAction
argument_list|(
name|QIcon
argument_list|(
name|subWindow
operator|->
name|style
argument_list|()
operator|->
name|standardIcon
argument_list|(
name|QStyle
operator|::
name|SP_TitleBarCloseButton
argument_list|)
argument_list|)
argument_list|,
name|QObject
operator|::
name|tr
argument_list|(
literal|"&Close"
argument_list|)
argument_list|,
name|subWindow
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|subWindow
operator|->
name|setSystemMenu
argument_list|(
name|systemMenu
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|subWindow
operator|->
name|systemMenu
argument_list|()
argument_list|,
name|qobject_cast
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|systemMenu
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|subWindow
operator|->
name|systemMenu
argument_list|()
operator|->
name|parentWidget
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|subWindow
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|subWindow
operator|->
name|systemMenu
argument_list|()
operator|->
name|actions
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Show the new system menu
name|QVERIFY
argument_list|(
operator|!
name|qApp
operator|->
name|activePopupWidget
argument_list|()
argument_list|)
expr_stmt|;
name|subWindow
operator|->
name|showSystemMenu
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|qApp
operator|->
name|activePopupWidget
argument_list|()
argument_list|,
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|systemMenu
argument_list|)
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|systemMenu
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|globalPopupPos
argument_list|)
expr_stmt|;
name|systemMenu
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|qApp
operator|->
name|activePopupWidget
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
comment|// System menu in menu bar.
name|subWindow
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|menuLabel
init|=
name|subWindow
operator|->
name|maximizedSystemMenuIconWidget
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|menuLabel
argument_list|)
expr_stmt|;
name|subWindow
operator|->
name|showSystemMenu
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|qApp
operator|->
name|activePopupWidget
argument_list|()
argument_list|,
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|systemMenu
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|systemMenu
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
operator|(
name|globalPopupPos
operator|=
name|menuLabel
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
name|menuLabel
operator|->
name|y
argument_list|()
operator|+
name|menuLabel
operator|->
name|height
argument_list|()
argument_list|)
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|systemMenu
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
operator|!
name|qApp
operator|->
name|activePopupWidget
argument_list|()
argument_list|)
expr_stmt|;
name|subWindow
operator|->
name|showNormal
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// Reverse
name|qApp
operator|->
name|setLayoutDirection
argument_list|(
name|Qt
operator|::
name|RightToLeft
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|mainWindow
operator|.
name|updateGeometry
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|150
argument_list|)
expr_stmt|;
name|subWindow
operator|->
name|showSystemMenu
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|250
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|qApp
operator|->
name|activePopupWidget
argument_list|()
argument_list|,
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|systemMenu
argument_list|)
argument_list|)
expr_stmt|;
comment|// + QPoint(1, 0) because topRight() == QPoint(left() + width() -1, top())
name|globalPopupPos
operator|=
name|subWindow
operator|->
name|mapToGlobal
argument_list|(
name|subWindow
operator|->
name|contentsRect
argument_list|()
operator|.
name|topRight
argument_list|()
argument_list|)
operator|+
name|QPoint
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|globalPopupPos
operator|-=
name|QPoint
argument_list|(
name|systemMenu
operator|->
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|systemMenu
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|globalPopupPos
argument_list|)
expr_stmt|;
name|systemMenu
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|qApp
operator|->
name|activePopupWidget
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
comment|// System menu in menu bar in reverse mode.
name|subWindow
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|menuLabel
operator|=
name|subWindow
operator|->
name|maximizedSystemMenuIconWidget
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|menuLabel
argument_list|)
expr_stmt|;
name|subWindow
operator|->
name|showSystemMenu
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|250
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|qApp
operator|->
name|activePopupWidget
argument_list|()
argument_list|,
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|systemMenu
argument_list|)
argument_list|)
expr_stmt|;
name|globalPopupPos
operator|=
name|menuLabel
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
name|menuLabel
operator|->
name|width
argument_list|()
argument_list|,
name|menuLabel
operator|->
name|y
argument_list|()
operator|+
name|menuLabel
operator|->
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|globalPopupPos
operator|-=
name|QPoint
argument_list|(
name|systemMenu
operator|->
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|systemMenu
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|globalPopupPos
argument_list|)
expr_stmt|;
endif|#
directive|endif
operator|delete
name|systemMenu
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|qApp
operator|->
name|activePopupWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|subWindow
operator|->
name|systemMenu
argument_list|()
argument_list|)
expr_stmt|;
comment|// Restore layout direction.
name|qApp
operator|->
name|setLayoutDirection
argument_list|(
name|Qt
operator|::
name|LeftToRight
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|restoreFocus
name|void
name|tst_QMdiSubWindow
operator|::
name|restoreFocus
parameter_list|()
block|{
comment|// Create complex layout.
name|QGroupBox
modifier|*
name|box
init|=
operator|new
name|QGroupBox
argument_list|(
name|tr
argument_list|(
literal|"GroupBox"
argument_list|)
argument_list|)
decl_stmt|;
name|box
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QGroupBox
modifier|*
name|box1
init|=
operator|new
name|QGroupBox
argument_list|(
name|tr
argument_list|(
literal|"&TopLeft"
argument_list|)
argument_list|)
decl_stmt|;
name|box1
operator|->
name|setLayout
argument_list|(
operator|new
name|QHBoxLayout
argument_list|)
expr_stmt|;
name|box1
operator|->
name|layout
argument_list|()
operator|->
name|addWidget
argument_list|(
operator|new
name|QTextEdit
argument_list|)
expr_stmt|;
name|QGroupBox
modifier|*
name|box2
init|=
operator|new
name|QGroupBox
argument_list|(
name|tr
argument_list|(
literal|"&TopRight"
argument_list|)
argument_list|)
decl_stmt|;
name|box2
operator|->
name|setLayout
argument_list|(
operator|new
name|QHBoxLayout
argument_list|)
expr_stmt|;
name|box2
operator|->
name|layout
argument_list|()
operator|->
name|addWidget
argument_list|(
operator|new
name|QTextEdit
argument_list|)
expr_stmt|;
name|QGroupBox
modifier|*
name|box3
init|=
operator|new
name|QGroupBox
argument_list|(
name|tr
argument_list|(
literal|"&BottomLeft"
argument_list|)
argument_list|)
decl_stmt|;
name|box3
operator|->
name|setLayout
argument_list|(
operator|new
name|QHBoxLayout
argument_list|)
expr_stmt|;
name|box3
operator|->
name|layout
argument_list|()
operator|->
name|addWidget
argument_list|(
operator|new
name|QTextEdit
argument_list|)
expr_stmt|;
name|QGroupBox
modifier|*
name|box4
init|=
operator|new
name|QGroupBox
argument_list|(
name|tr
argument_list|(
literal|"&BottomRight"
argument_list|)
argument_list|)
decl_stmt|;
name|box4
operator|->
name|setLayout
argument_list|(
operator|new
name|QHBoxLayout
argument_list|)
expr_stmt|;
name|QMdiArea
modifier|*
name|nestedWorkspace
init|=
operator|new
name|QMdiArea
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
name|nestedWorkspace
operator|->
name|addSubWindow
argument_list|(
operator|new
name|QTextEdit
argument_list|)
operator|->
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|nestedWorkspace
operator|->
name|setHorizontalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAsNeeded
argument_list|)
expr_stmt|;
name|nestedWorkspace
operator|->
name|setVerticalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAsNeeded
argument_list|)
expr_stmt|;
name|box4
operator|->
name|layout
argument_list|()
operator|->
name|addWidget
argument_list|(
name|nestedWorkspace
argument_list|)
expr_stmt|;
name|QGridLayout
modifier|*
name|layout
init|=
operator|new
name|QGridLayout
decl_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|box1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|box2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|box3
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|box4
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|box
operator|->
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
comment|// Add complex widget to workspace.
name|QMdiArea
name|topArea
decl_stmt|;
name|QMdiSubWindow
modifier|*
name|complexWindow
init|=
name|topArea
operator|.
name|addSubWindow
argument_list|(
name|box
argument_list|)
decl_stmt|;
name|topArea
operator|.
name|show
argument_list|()
expr_stmt|;
name|box
operator|->
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
operator|&
name|topArea
argument_list|)
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|expectedFocusWindow
init|=
name|nestedWorkspace
operator|->
name|subWindowList
argument_list|()
operator|.
name|last
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|expectedFocusWindow
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|expectedFocusWindow
operator|->
name|widget
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qApp
operator|->
name|focusWidget
argument_list|()
argument_list|,
name|expectedFocusWindow
operator|->
name|widget
argument_list|()
argument_list|)
expr_stmt|;
comment|// Normal -> minimized
name|expectedFocusWindow
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|expectedFocusWindow
operator|->
name|isMinimized
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qApp
operator|->
name|focusWidget
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|expectedFocusWindow
argument_list|)
argument_list|)
expr_stmt|;
comment|// Minimized -> normal
name|expectedFocusWindow
operator|->
name|showNormal
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|expectedFocusWindow
operator|->
name|isMinimized
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qApp
operator|->
name|focusWidget
argument_list|()
argument_list|,
name|expectedFocusWindow
operator|->
name|widget
argument_list|()
argument_list|)
expr_stmt|;
comment|// Normal -> maximized
name|expectedFocusWindow
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|expectedFocusWindow
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qApp
operator|->
name|focusWidget
argument_list|()
argument_list|,
name|expectedFocusWindow
operator|->
name|widget
argument_list|()
argument_list|)
expr_stmt|;
comment|// Maximized -> normal
name|expectedFocusWindow
operator|->
name|showNormal
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|expectedFocusWindow
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qApp
operator|->
name|focusWidget
argument_list|()
argument_list|,
name|expectedFocusWindow
operator|->
name|widget
argument_list|()
argument_list|)
expr_stmt|;
comment|// Minimized -> maximized
name|expectedFocusWindow
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|expectedFocusWindow
operator|->
name|isMinimized
argument_list|()
argument_list|)
expr_stmt|;
name|expectedFocusWindow
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|expectedFocusWindow
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qApp
operator|->
name|focusWidget
argument_list|()
argument_list|,
name|expectedFocusWindow
operator|->
name|widget
argument_list|()
argument_list|)
expr_stmt|;
comment|// Maximized -> minimized
name|expectedFocusWindow
operator|->
name|showNormal
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|expectedFocusWindow
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|expectedFocusWindow
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|expectedFocusWindow
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|expectedFocusWindow
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|expectedFocusWindow
operator|->
name|isMinimized
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qApp
operator|->
name|focusWidget
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|expectedFocusWindow
argument_list|)
argument_list|)
expr_stmt|;
name|complexWindow
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|complexWindow
operator|->
name|isMinimized
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qApp
operator|->
name|focusWidget
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|complexWindow
argument_list|)
argument_list|)
expr_stmt|;
name|complexWindow
operator|->
name|showNormal
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|complexWindow
operator|->
name|isMinimized
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qApp
operator|->
name|focusWidget
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|expectedFocusWindow
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|changeFocusWithTab
name|void
name|tst_QMdiSubWindow
operator|::
name|changeFocusWithTab
parameter_list|()
block|{
name|QWidget
modifier|*
name|widget
init|=
operator|new
name|QWidget
decl_stmt|;
name|widget
operator|->
name|setLayout
argument_list|(
operator|new
name|QVBoxLayout
argument_list|)
expr_stmt|;
name|QLineEdit
modifier|*
name|firstLineEdit
init|=
operator|new
name|QLineEdit
decl_stmt|;
name|widget
operator|->
name|layout
argument_list|()
operator|->
name|addWidget
argument_list|(
name|firstLineEdit
argument_list|)
expr_stmt|;
name|QLineEdit
modifier|*
name|secondLineEdit
init|=
operator|new
name|QLineEdit
decl_stmt|;
name|widget
operator|->
name|layout
argument_list|()
operator|->
name|addWidget
argument_list|(
name|secondLineEdit
argument_list|)
expr_stmt|;
name|QLineEdit
modifier|*
name|thirdLineEdit
init|=
operator|new
name|QLineEdit
decl_stmt|;
name|widget
operator|->
name|layout
argument_list|()
operator|->
name|addWidget
argument_list|(
name|thirdLineEdit
argument_list|)
expr_stmt|;
name|QMdiArea
name|mdiArea
decl_stmt|;
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|subWindowList
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
operator|&
name|mdiArea
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qApp
operator|->
name|focusWidget
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|firstLineEdit
argument_list|)
argument_list|)
expr_stmt|;
comment|// Next
name|QTest
operator|::
name|keyPress
argument_list|(
name|widget
argument_list|,
name|Qt
operator|::
name|Key_Tab
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qApp
operator|->
name|focusWidget
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|secondLineEdit
argument_list|)
argument_list|)
expr_stmt|;
comment|// Next
name|QTest
operator|::
name|keyPress
argument_list|(
name|widget
argument_list|,
name|Qt
operator|::
name|Key_Tab
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qApp
operator|->
name|focusWidget
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|thirdLineEdit
argument_list|)
argument_list|)
expr_stmt|;
comment|// Previous
name|QTest
operator|::
name|keyPress
argument_list|(
name|widget
argument_list|,
name|Qt
operator|::
name|Key_Backtab
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qApp
operator|->
name|focusWidget
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|secondLineEdit
argument_list|)
argument_list|)
expr_stmt|;
comment|// Previous
name|QTest
operator|::
name|keyPress
argument_list|(
name|widget
argument_list|,
name|Qt
operator|::
name|Key_Backtab
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qApp
operator|->
name|focusWidget
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|firstLineEdit
argument_list|)
argument_list|)
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|window
init|=
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QPushButton
argument_list|)
decl_stmt|;
name|window
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|window
argument_list|)
expr_stmt|;
comment|// Check that we don't give away focus to another window by
comment|// just hitting tab if the child widget does not accept
comment|// focus (which is the case for a QPushButton).
name|QTest
operator|::
name|keyPress
argument_list|(
name|window
argument_list|,
name|Qt
operator|::
name|Key_Tab
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|window
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qApp
operator|->
name|focusWidget
argument_list|()
argument_list|,
name|tabAllWidgets
argument_list|()
condition|?
name|window
operator|->
name|widget
argument_list|()
else|:
name|window
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|window
argument_list|,
name|Qt
operator|::
name|Key_Tab
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|window
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qApp
operator|->
name|focusWidget
argument_list|()
argument_list|,
name|tabAllWidgets
argument_list|()
condition|?
name|window
operator|->
name|widget
argument_list|()
else|:
name|window
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|MyTextEdit
class|class
name|MyTextEdit
super|:
specifier|public
name|QTextEdit
block|{
public|public:
DECL|function|MyTextEdit
name|MyTextEdit
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QTextEdit
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|acceptClose
argument_list|(
literal|false
argument_list|)
block|{}
DECL|function|setAcceptClose
name|void
name|setAcceptClose
parameter_list|(
name|bool
name|enable
init|=
literal|true
parameter_list|)
block|{
name|acceptClose
operator|=
name|enable
expr_stmt|;
block|}
protected|protected:
DECL|function|closeEvent
name|void
name|closeEvent
parameter_list|(
name|QCloseEvent
modifier|*
name|closeEvent
parameter_list|)
block|{
if|if
condition|(
operator|!
name|acceptClose
condition|)
name|closeEvent
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
private|private:
DECL|member|acceptClose
name|bool
name|acceptClose
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|closeEvent
name|void
name|tst_QMdiSubWindow
operator|::
name|closeEvent
parameter_list|()
block|{
name|QMdiArea
name|mdiArea
decl_stmt|;
name|mdiArea
operator|.
name|show
argument_list|()
expr_stmt|;
name|MyTextEdit
modifier|*
name|textEdit
init|=
operator|new
name|MyTextEdit
decl_stmt|;
name|textEdit
operator|->
name|setAcceptClose
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|window
init|=
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
name|textEdit
argument_list|)
decl_stmt|;
name|EventSpy
name|closeSpy
argument_list|(
name|window
operator|->
name|widget
argument_list|()
argument_list|,
name|QEvent
operator|::
name|Close
argument_list|)
decl_stmt|;
name|window
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|closeSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|textEdit
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|->
name|close
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|closeSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|textEdit
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|textEdit
operator|->
name|close
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|closeSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|textEdit
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|textEdit
operator|->
name|setAcceptClose
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|close
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|closeSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|subWindowList
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// There exists more tests in QMdiArea which covers window title support
end_comment
begin_comment
comment|// related to QMainWindow. This test is specific for QMdiSubWindow and its
end_comment
begin_comment
comment|// widget.
end_comment
begin_function
DECL|function|setWindowTitle
name|void
name|tst_QMdiSubWindow
operator|::
name|setWindowTitle
parameter_list|()
block|{
name|QString
name|expectedWindowTitle
init|=
name|QLatin1String
argument_list|(
literal|"This is teh shit[*]"
argument_list|)
decl_stmt|;
name|QTextEdit
modifier|*
name|textEdit
init|=
operator|new
name|QTextEdit
decl_stmt|;
name|textEdit
operator|->
name|setWindowTitle
argument_list|(
name|expectedWindowTitle
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|textEdit
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|expectedWindowTitle
argument_list|)
expr_stmt|;
name|textEdit
operator|->
name|setWindowModified
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|textEdit
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QMdiArea
name|mdiArea
decl_stmt|;
name|QMdiSubWindow
modifier|*
name|window
init|=
operator|new
name|QMdiSubWindow
decl_stmt|;
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|->
name|isWindowModified
argument_list|()
argument_list|)
expr_stmt|;
name|window
operator|->
name|setWidget
argument_list|(
name|textEdit
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|isWindowModified
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|textEdit
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|expectedWindowTitle
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|window
operator|->
name|widget
argument_list|()
operator|->
name|windowTitle
argument_list|()
argument_list|)
expr_stmt|;
name|textEdit
operator|->
name|setWindowModified
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|textEdit
operator|->
name|isWindowModified
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|->
name|isWindowModified
argument_list|()
argument_list|)
expr_stmt|;
comment|// This will return the title including the astrix, but the
comment|// actual window title does not contain the astrix. This behavior
comment|// seems a bit odd, but is equal to e.g. QTextEdit (and probably all
comment|// other widgets which are not real top-level widgets).
name|QCOMPARE
argument_list|(
name|window
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|expectedWindowTitle
argument_list|)
expr_stmt|;
name|textEdit
operator|->
name|setWindowModified
argument_list|(
literal|true
argument_list|)
expr_stmt|;
empty_stmt|;
name|expectedWindowTitle
operator|=
name|QLatin1String
argument_list|(
literal|"Override child title"
argument_list|)
expr_stmt|;
name|window
operator|->
name|setWindowTitle
argument_list|(
name|expectedWindowTitle
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|isWindowModified
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|expectedWindowTitle
argument_list|)
expr_stmt|;
name|textEdit
operator|->
name|setWindowTitle
argument_list|(
name|QLatin1String
argument_list|(
literal|"My parent overrides me"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|expectedWindowTitle
argument_list|)
expr_stmt|;
name|textEdit
operator|->
name|setWindowModified
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|isWindowModified
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|expectedWindowTitle
argument_list|)
expr_stmt|;
name|window
operator|->
name|setWindowModified
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|->
name|isWindowModified
argument_list|()
argument_list|)
expr_stmt|;
name|window
operator|->
name|setWindowTitle
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|expectedWindowTitle
operator|=
name|QLatin1String
argument_list|(
literal|"My parent doesn't have any title so now I can set one[*]"
argument_list|)
expr_stmt|;
name|textEdit
operator|->
name|setWindowTitle
argument_list|(
name|expectedWindowTitle
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|expectedWindowTitle
argument_list|)
expr_stmt|;
name|textEdit
operator|->
name|setWindowModified
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|isWindowModified
argument_list|()
argument_list|)
expr_stmt|;
name|window
operator|->
name|setWidget
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|->
name|isWindowModified
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|textEdit
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resizeEvents_data
name|void
name|tst_QMdiSubWindow
operator|::
name|resizeEvents_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|Qt
operator|::
name|WindowState
argument_list|>
argument_list|(
literal|"windowState"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedWindowResizeEvents"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedWidgetResizeEvents"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"isShadeMode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"minimized"
argument_list|)
operator|<<
name|Qt
operator|::
name|WindowMinimized
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"maximized"
argument_list|)
operator|<<
name|Qt
operator|::
name|WindowMaximized
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"shaded"
argument_list|)
operator|<<
name|Qt
operator|::
name|WindowMinimized
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resizeEvents
name|void
name|tst_QMdiSubWindow
operator|::
name|resizeEvents
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|Qt
operator|::
name|WindowState
argument_list|,
name|windowState
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedWindowResizeEvents
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedWidgetResizeEvents
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|isShadeMode
argument_list|)
expr_stmt|;
name|QMainWindow
name|mainWindow
decl_stmt|;
name|QMdiArea
modifier|*
name|mdiArea
init|=
operator|new
name|QMdiArea
decl_stmt|;
name|mainWindow
operator|.
name|setCentralWidget
argument_list|(
name|mdiArea
argument_list|)
expr_stmt|;
name|mainWindow
operator|.
name|show
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
name|qt_x11_wait_for_window_manager
argument_list|(
operator|&
name|mainWindow
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QMdiSubWindow
modifier|*
name|window
init|=
name|mdiArea
operator|->
name|addSubWindow
argument_list|(
operator|new
name|QTextEdit
argument_list|)
decl_stmt|;
name|window
operator|->
name|show
argument_list|()
expr_stmt|;
name|EventSpy
name|windowResizeEventSpy
argument_list|(
name|window
argument_list|,
name|QEvent
operator|::
name|Resize
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|windowResizeEventSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|EventSpy
name|widgetResizeEventSpy
argument_list|(
name|window
operator|->
name|widget
argument_list|()
argument_list|,
name|QEvent
operator|::
name|Resize
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|widgetResizeEventSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Set the window state.
if|if
condition|(
operator|!
name|isShadeMode
condition|)
name|window
operator|->
name|setWindowState
argument_list|(
name|windowState
argument_list|)
expr_stmt|;
else|else
name|window
operator|->
name|showShaded
argument_list|()
expr_stmt|;
comment|// Check that the window state is correct.
name|QCOMPARE
argument_list|(
name|window
operator|->
name|windowState
argument_list|()
argument_list|,
name|windowState
operator||
name|Qt
operator|::
name|WindowActive
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|widget
argument_list|()
operator|->
name|windowState
argument_list|()
argument_list|,
name|windowState
argument_list|)
expr_stmt|;
comment|// Make sure we got as many resize events as expected.
name|QCOMPARE
argument_list|(
name|windowResizeEventSpy
operator|.
name|count
argument_list|()
argument_list|,
name|expectedWindowResizeEvents
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widgetResizeEventSpy
operator|.
name|count
argument_list|()
argument_list|,
name|expectedWidgetResizeEvents
argument_list|)
expr_stmt|;
name|windowResizeEventSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|widgetResizeEventSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Normalize.
name|window
operator|->
name|showNormal
argument_list|()
expr_stmt|;
comment|// Check that the window state is correct.
name|QCOMPARE
argument_list|(
name|window
operator|->
name|windowState
argument_list|()
argument_list|,
name|Qt
operator|::
name|WindowNoState
operator||
name|Qt
operator|::
name|WindowActive
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|widget
argument_list|()
operator|->
name|windowState
argument_list|()
argument_list|,
name|Qt
operator|::
name|WindowNoState
argument_list|)
expr_stmt|;
comment|// Make sure we got as many resize events as expected.
name|QCOMPARE
argument_list|(
name|windowResizeEventSpy
operator|.
name|count
argument_list|()
argument_list|,
name|expectedWindowResizeEvents
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widgetResizeEventSpy
operator|.
name|count
argument_list|()
argument_list|,
name|expectedWidgetResizeEvents
argument_list|)
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
end_if
begin_function
DECL|function|defaultSizeGrip
name|void
name|tst_QMdiSubWindow
operator|::
name|defaultSizeGrip
parameter_list|()
block|{
if|if
condition|(
operator|!
name|qApp
operator|->
name|style
argument_list|()
operator|->
name|inherits
argument_list|(
literal|"QMacStyle"
argument_list|)
condition|)
return|return;
name|QMdiArea
name|mdiArea
decl_stmt|;
name|mdiArea
operator|.
name|show
argument_list|()
expr_stmt|;
comment|// QSizeGrip on windows with decoration.
name|QMdiSubWindow
modifier|*
name|windowWithDecoration
init|=
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
decl_stmt|;
name|windowWithDecoration
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFindChild
argument_list|<
name|QSizeGrip
operator|*
argument_list|>
argument_list|(
name|windowWithDecoration
argument_list|)
argument_list|)
expr_stmt|;
comment|// ...but not on windows without decoration (Qt::FramelessWindowHint).
name|QMdiSubWindow
modifier|*
name|windowWithoutDecoration
init|=
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|,
name|Qt
operator|::
name|FramelessWindowHint
argument_list|)
decl_stmt|;
name|windowWithoutDecoration
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|qFindChild
argument_list|<
name|QSizeGrip
operator|*
argument_list|>
argument_list|(
name|windowWithoutDecoration
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|hideAndShow
name|void
name|tst_QMdiSubWindow
operator|::
name|hideAndShow
parameter_list|()
block|{
comment|// Create a QTabWidget with two tabs; QMdiArea and QTextEdit.
name|QTabWidget
modifier|*
name|tabWidget
init|=
operator|new
name|QTabWidget
decl_stmt|;
name|QMdiArea
modifier|*
name|mdiArea
init|=
operator|new
name|QMdiArea
decl_stmt|;
name|tabWidget
operator|->
name|addTab
argument_list|(
name|mdiArea
argument_list|,
name|QLatin1String
argument_list|(
literal|"QMdiArea"
argument_list|)
argument_list|)
expr_stmt|;
name|tabWidget
operator|->
name|addTab
argument_list|(
operator|new
name|QTextEdit
argument_list|,
name|QLatin1String
argument_list|(
literal|"Dummy"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set the tab widget as the central widget in QMainWindow.
name|QMainWindow
name|mainWindow
decl_stmt|;
name|mainWindow
operator|.
name|setGeometry
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|640
argument_list|,
literal|480
argument_list|)
expr_stmt|;
name|QMenuBar
modifier|*
name|menuBar
init|=
name|mainWindow
operator|.
name|menuBar
argument_list|()
decl_stmt|;
name|mainWindow
operator|.
name|setCentralWidget
argument_list|(
name|tabWidget
argument_list|)
expr_stmt|;
name|mainWindow
operator|.
name|show
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
name|qt_x11_wait_for_window_manager
argument_list|(
operator|&
name|mainWindow
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
operator|!
name|menuBar
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopRightCorner
argument_list|)
argument_list|)
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|subWindow
init|=
name|mdiArea
operator|->
name|addSubWindow
argument_list|(
operator|new
name|QTextEdit
argument_list|)
decl_stmt|;
name|subWindow
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QVERIFY
argument_list|(
name|menuBar
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopRightCorner
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menuBar
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopRightCorner
argument_list|)
argument_list|,
name|subWindow
operator|->
name|maximizedButtonsWidget
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Hide QMdiArea.
name|tabWidget
operator|->
name|setCurrentIndex
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|menuBar
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopRightCorner
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|subWindow
operator|->
name|maximizedButtonsWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|subWindow
operator|->
name|maximizedSystemMenuIconWidget
argument_list|()
argument_list|)
expr_stmt|;
comment|// Show QMdiArea.
name|tabWidget
operator|->
name|setCurrentIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QVERIFY
argument_list|(
name|menuBar
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopRightCorner
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|maximizedButtonsWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|maximizedSystemMenuIconWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menuBar
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopRightCorner
argument_list|)
argument_list|,
name|subWindow
operator|->
name|maximizedButtonsWidget
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Hide QMdiArea.
name|tabWidget
operator|->
name|setCurrentIndex
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Add few more windows.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
name|mdiArea
operator|->
name|addSubWindow
argument_list|(
operator|new
name|QTextEdit
argument_list|)
expr_stmt|;
comment|// Show QMdiArea.
name|tabWidget
operator|->
name|setCurrentIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|subWindow
operator|=
name|mdiArea
operator|->
name|subWindowList
argument_list|()
operator|.
name|back
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|subWindow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|->
name|activeSubWindow
argument_list|()
argument_list|,
name|subWindow
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QVERIFY
argument_list|(
name|menuBar
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopRightCorner
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|maximizedButtonsWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|maximizedSystemMenuIconWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menuBar
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopRightCorner
argument_list|)
argument_list|,
name|subWindow
operator|->
name|maximizedButtonsWidget
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|subWindow
operator|->
name|showNormal
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|menuBar
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopRightCorner
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that newly added windows got right sizes.
foreach|foreach
control|(
name|QMdiSubWindow
modifier|*
name|window
decl|,
name|mdiArea
operator|->
name|subWindowList
argument_list|()
control|)
name|QCOMPARE
argument_list|(
name|window
operator|->
name|size
argument_list|()
argument_list|,
name|window
operator|->
name|sizeHint
argument_list|()
argument_list|)
expr_stmt|;
name|subWindow
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_WS_MAC
name|QCOMPARE
argument_list|(
name|menuBar
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopRightCorner
argument_list|)
argument_list|,
name|subWindow
operator|->
name|maximizedButtonsWidget
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|subWindow
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|subWindow
operator|->
name|maximizedButtonsWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|subWindow
operator|->
name|maximizedSystemMenuIconWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|menuBar
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopRightCorner
argument_list|)
argument_list|)
expr_stmt|;
name|subWindow
operator|->
name|show
argument_list|()
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|maximizedButtonsWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|maximizedSystemMenuIconWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menuBar
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopRightCorner
argument_list|)
argument_list|,
name|subWindow
operator|->
name|maximizedButtonsWidget
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Hide QMainWindow.
name|mainWindow
operator|.
name|hide
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|subWindow
operator|->
name|maximizedButtonsWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|subWindow
operator|->
name|maximizedSystemMenuIconWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|menuBar
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopRightCorner
argument_list|)
argument_list|)
expr_stmt|;
comment|// Show QMainWindow.
name|mainWindow
operator|.
name|show
argument_list|()
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|maximizedButtonsWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|maximizedSystemMenuIconWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menuBar
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopRightCorner
argument_list|)
argument_list|,
name|subWindow
operator|->
name|maximizedButtonsWidget
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|keepWindowMaximizedState
name|void
name|tst_QMdiSubWindow
operator|::
name|keepWindowMaximizedState
parameter_list|()
block|{
name|QMdiArea
name|mdiArea
decl_stmt|;
name|QMdiSubWindow
modifier|*
name|subWindow
init|=
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QTextEdit
argument_list|)
decl_stmt|;
name|mdiArea
operator|.
name|show
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
name|qt_x11_wait_for_window_manager
argument_list|(
operator|&
name|mdiArea
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|subWindow
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
comment|// move
specifier|const
name|QPoint
name|newPosition
init|=
name|subWindow
operator|->
name|pos
argument_list|()
operator|+
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|subWindow
operator|->
name|move
argument_list|(
name|newPosition
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|subWindow
operator|->
name|pos
argument_list|()
argument_list|,
name|newPosition
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
comment|// resize
specifier|const
name|QSize
name|newSize
init|=
name|subWindow
operator|->
name|size
argument_list|()
operator|-
name|QSize
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|subWindow
operator|->
name|resize
argument_list|(
name|newSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|subWindow
operator|->
name|size
argument_list|()
argument_list|,
name|newSize
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
comment|// setGeometry
specifier|const
name|QRect
name|newGeometry
init|=
name|QRect
argument_list|(
name|newPosition
operator|-
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|,
name|newSize
operator|+
name|QSize
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|subWindow
operator|->
name|setGeometry
argument_list|(
name|newGeometry
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|subWindow
operator|->
name|geometry
argument_list|()
argument_list|,
name|newGeometry
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|subWindow
operator|->
name|showNormal
argument_list|()
expr_stmt|;
comment|// Verify that we don't force Qt::WindowMaximized.
name|QVERIFY
argument_list|(
operator|!
name|subWindow
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|subWindow
operator|->
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|newPosition
argument_list|,
name|newSize
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|subWindow
operator|->
name|geometry
argument_list|()
argument_list|,
name|QRect
argument_list|(
name|newPosition
argument_list|,
name|newSize
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|subWindow
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|explicitlyHiddenWidget
name|void
name|tst_QMdiSubWindow
operator|::
name|explicitlyHiddenWidget
parameter_list|()
block|{
name|QMdiArea
name|mdiArea
decl_stmt|;
name|QTextEdit
modifier|*
name|textEdit
init|=
operator|new
name|QTextEdit
decl_stmt|;
name|textEdit
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|subWindow
init|=
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
name|textEdit
argument_list|)
decl_stmt|;
name|mdiArea
operator|.
name|show
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
name|qt_x11_wait_for_window_manager
argument_list|(
operator|&
name|mdiArea
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|textEdit
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|textEdit
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|textEdit
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
comment|// normal -> minimized
name|subWindow
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|textEdit
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
comment|// minimized -> normal
name|subWindow
operator|->
name|showNormal
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|textEdit
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
comment|// minimized -> maximized
name|subWindow
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
name|subWindow
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|textEdit
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|textEdit
operator|->
name|hide
argument_list|()
expr_stmt|;
comment|// maximized -> normal
name|subWindow
operator|->
name|showNormal
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|textEdit
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|textEdit
operator|->
name|show
argument_list|()
expr_stmt|;
name|subWindow
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
name|subWindow
operator|->
name|setWidget
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|textEdit
expr_stmt|;
name|textEdit
operator|=
operator|new
name|QTextEdit
expr_stmt|;
name|textEdit
operator|->
name|hide
argument_list|()
expr_stmt|;
name|subWindow
operator|->
name|setWidget
argument_list|(
name|textEdit
argument_list|)
expr_stmt|;
name|subWindow
operator|->
name|showNormal
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|textEdit
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resizeTimer
name|void
name|tst_QMdiSubWindow
operator|::
name|resizeTimer
parameter_list|()
block|{
name|QMdiArea
name|mdiArea
decl_stmt|;
name|QMdiSubWindow
modifier|*
name|subWindow
init|=
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
decl_stmt|;
name|mdiArea
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
operator|&
name|mdiArea
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|300
argument_list|)
expr_stmt|;
name|EventSpy
name|timerEventSpy
argument_list|(
name|subWindow
argument_list|,
name|QEvent
operator|::
name|Timer
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|timerEventSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
operator|++
name|i
control|)
block|{
name|subWindow
operator|->
name|resize
argument_list|(
name|subWindow
operator|->
name|size
argument_list|()
operator|+
name|QSize
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
block|}
name|QTest
operator|::
name|qWait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
comment|// Wait for timer events to occur.
name|QTRY_VERIFY
argument_list|(
name|timerEventSpy
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fixedMinMaxSize
name|void
name|tst_QMdiSubWindow
operator|::
name|fixedMinMaxSize
parameter_list|()
block|{
name|QMdiArea
name|mdiArea
decl_stmt|;
name|mdiArea
operator|.
name|setGeometry
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|640
argument_list|,
literal|480
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|show
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
name|qt_x11_wait_for_window_manager
argument_list|(
operator|&
name|mdiArea
argument_list|)
expr_stmt|;
endif|#
directive|endif
specifier|const
name|QSize
name|minimumSize
init|=
name|QSize
argument_list|(
literal|250
argument_list|,
literal|150
argument_list|)
decl_stmt|;
specifier|const
name|QSize
name|maximumSize
init|=
name|QSize
argument_list|(
literal|300
argument_list|,
literal|200
argument_list|)
decl_stmt|;
comment|// Add the sub window to QMdiArea and set min/max size.
name|QMdiSubWindow
modifier|*
name|subWindow
init|=
operator|new
name|QMdiSubWindow
decl_stmt|;
name|subWindow
operator|->
name|setMinimumSize
argument_list|(
name|minimumSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|subWindow
operator|->
name|minimumSize
argument_list|()
argument_list|,
name|minimumSize
argument_list|)
expr_stmt|;
name|subWindow
operator|->
name|setMaximumSize
argument_list|(
name|maximumSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|subWindow
operator|->
name|maximumSize
argument_list|()
argument_list|,
name|maximumSize
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
name|subWindow
argument_list|)
expr_stmt|;
name|subWindow
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|subWindow
operator|->
name|size
argument_list|()
argument_list|,
name|minimumSize
argument_list|)
expr_stmt|;
comment|// Calculate the size of a minimized sub window.
name|QStyleOptionTitleBar
name|options
decl_stmt|;
name|options
operator|.
name|initFrom
argument_list|(
name|subWindow
argument_list|)
expr_stmt|;
name|int
name|minimizedHeight
init|=
name|subWindow
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_TitleBarHeight
argument_list|,
operator|&
name|options
argument_list|)
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_MAC
argument_list|)
comment|// ### Remove this after mac style has been fixed
if|if
condition|(
name|qobject_cast
argument_list|<
name|QMacStyle
operator|*
argument_list|>
argument_list|(
name|subWindow
operator|->
name|style
argument_list|()
argument_list|)
condition|)
name|minimizedHeight
operator|-=
literal|4
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|subWindow
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_TitleBar_NoBorder
argument_list|,
operator|&
name|options
argument_list|,
name|subWindow
argument_list|)
condition|)
name|minimizedHeight
operator|+=
literal|8
expr_stmt|;
name|int
name|minimizedWidth
init|=
name|subWindow
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MDIMinimizedWidth
argument_list|,
operator|&
name|options
argument_list|)
decl_stmt|;
specifier|const
name|QSize
name|minimizedSize
init|=
name|QSize
argument_list|(
name|minimizedWidth
argument_list|,
name|minimizedHeight
argument_list|)
decl_stmt|;
comment|// Even though the sub window has a minimum size set, it should be possible
comment|// to minimize the window.
name|subWindow
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|isMinimized
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|subWindow
operator|->
name|size
argument_list|()
argument_list|,
name|minimizedSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|subWindow
operator|->
name|minimumSize
argument_list|()
argument_list|,
name|minimizedSize
argument_list|)
expr_stmt|;
comment|// Restore minimum size.
name|subWindow
operator|->
name|showNormal
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|subWindow
operator|->
name|isMinimized
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|subWindow
operator|->
name|size
argument_list|()
argument_list|,
name|minimumSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|subWindow
operator|->
name|minimumSize
argument_list|()
argument_list|,
name|minimumSize
argument_list|)
expr_stmt|;
comment|// Well, the logic here is of course broken (calling showMaximized on a window with
comment|// maximum size set), but we should handle it :)
name|subWindow
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|subWindow
operator|->
name|size
argument_list|()
argument_list|,
name|maximumSize
argument_list|)
expr_stmt|;
name|subWindow
operator|->
name|showNormal
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|subWindow
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|subWindow
operator|->
name|size
argument_list|()
argument_list|,
name|minimumSize
argument_list|)
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_function
DECL|function|replaceMenuBarWhileMaximized
name|void
name|tst_QMdiSubWindow
operator|::
name|replaceMenuBarWhileMaximized
parameter_list|()
block|{
name|QMainWindow
name|mainWindow
decl_stmt|;
name|QMdiArea
modifier|*
name|mdiArea
init|=
operator|new
name|QMdiArea
decl_stmt|;
name|QMdiSubWindow
modifier|*
name|subWindow
init|=
name|mdiArea
operator|->
name|addSubWindow
argument_list|(
operator|new
name|QTextEdit
argument_list|)
decl_stmt|;
name|subWindow
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|mainWindow
operator|.
name|setCentralWidget
argument_list|(
name|mdiArea
argument_list|)
expr_stmt|;
name|QMenuBar
modifier|*
name|menuBar
init|=
name|mainWindow
operator|.
name|menuBar
argument_list|()
decl_stmt|;
name|mainWindow
operator|.
name|show
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
name|qt_x11_wait_for_window_manager
argument_list|(
operator|&
name|mainWindow
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|maximizedButtonsWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|maximizedSystemMenuIconWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menuBar
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopLeftCorner
argument_list|)
argument_list|,
name|subWindow
operator|->
name|maximizedSystemMenuIconWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menuBar
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopRightCorner
argument_list|)
argument_list|,
name|subWindow
operator|->
name|maximizedButtonsWidget
argument_list|()
argument_list|)
expr_stmt|;
comment|// Replace.
name|mainWindow
operator|.
name|setMenuBar
argument_list|(
operator|new
name|QMenuBar
argument_list|)
expr_stmt|;
name|menuBar
operator|=
name|mainWindow
operator|.
name|menuBar
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|maximizedButtonsWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|maximizedSystemMenuIconWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menuBar
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopLeftCorner
argument_list|)
argument_list|,
name|subWindow
operator|->
name|maximizedSystemMenuIconWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menuBar
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopRightCorner
argument_list|)
argument_list|,
name|subWindow
operator|->
name|maximizedButtonsWidget
argument_list|()
argument_list|)
expr_stmt|;
name|subWindow
operator|->
name|showNormal
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|subWindow
operator|->
name|maximizedButtonsWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|subWindow
operator|->
name|maximizedSystemMenuIconWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|menuBar
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopLeftCorner
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|menuBar
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopRightCorner
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete and replace.
name|subWindow
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
operator|delete
name|menuBar
expr_stmt|;
name|mainWindow
operator|.
name|setMenuBar
argument_list|(
operator|new
name|QMenuBar
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|subWindow
operator|->
name|maximizedButtonsWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|subWindow
operator|->
name|maximizedSystemMenuIconWidget
argument_list|()
argument_list|)
expr_stmt|;
name|subWindow
operator|->
name|showNormal
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|subWindow
operator|->
name|maximizedButtonsWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|subWindow
operator|->
name|maximizedSystemMenuIconWidget
argument_list|()
argument_list|)
expr_stmt|;
comment|// Delete.
name|subWindow
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|mainWindow
operator|.
name|setMenuBar
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|mainWindow
operator|.
name|menuWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|subWindow
operator|->
name|maximizedButtonsWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|subWindow
operator|->
name|maximizedSystemMenuIconWidget
argument_list|()
argument_list|)
expr_stmt|;
name|subWindow
operator|->
name|showNormal
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|subWindow
operator|->
name|maximizedButtonsWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|subWindow
operator|->
name|maximizedSystemMenuIconWidget
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|closeOnDoubleClick
name|void
name|tst_QMdiSubWindow
operator|::
name|closeOnDoubleClick
parameter_list|()
block|{
name|QMdiArea
name|mdiArea
decl_stmt|;
name|QPointer
argument_list|<
name|QMdiSubWindow
argument_list|>
name|subWindow
init|=
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
decl_stmt|;
name|mdiArea
operator|.
name|show
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
name|qt_x11_wait_for_window_manager
argument_list|(
operator|&
name|mdiArea
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|subWindow
operator|->
name|showSystemMenu
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|QPointer
argument_list|<
name|QMenu
argument_list|>
name|systemMenu
init|=
name|subWindow
operator|->
name|systemMenu
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|systemMenu
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|systemMenu
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|sendMouseDoubleClick
argument_list|(
name|systemMenu
argument_list|,
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|qApp
operator|->
name|activePopupWidget
argument_list|()
operator|==
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|systemMenu
argument_list|)
condition|)
name|systemMenu
operator|->
name|hide
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|subWindow
operator|||
operator|!
name|subWindow
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|systemMenu
operator|||
operator|!
name|systemMenu
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|setFont
name|void
name|tst_QMdiSubWindow
operator|::
name|setFont
parameter_list|()
block|{
name|QMdiArea
name|mdiArea
decl_stmt|;
name|QMdiSubWindow
modifier|*
name|subWindow
init|=
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QPushButton
argument_list|(
name|QLatin1String
argument_list|(
literal|"test"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|subWindow
operator|->
name|resize
argument_list|(
literal|300
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|subWindow
operator|->
name|setWindowTitle
argument_list|(
name|QLatin1String
argument_list|(
literal|"Window title"
argument_list|)
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|show
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
name|qt_x11_wait_for_window_manager
argument_list|(
operator|&
name|mdiArea
argument_list|)
expr_stmt|;
endif|#
directive|endif
specifier|const
name|QFont
name|originalFont
init|=
name|QApplication
operator|::
name|font
argument_list|(
literal|"QWorkspaceTitleBar"
argument_list|)
decl_stmt|;
name|QStyleOptionTitleBar
name|opt
decl_stmt|;
name|opt
operator|.
name|initFrom
argument_list|(
name|subWindow
argument_list|)
expr_stmt|;
specifier|const
name|int
name|titleBarHeight
init|=
name|subWindow
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_TitleBarHeight
argument_list|,
operator|&
name|opt
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|titleBarRect
init|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|subWindow
operator|->
name|width
argument_list|()
argument_list|,
name|titleBarHeight
argument_list|)
decl_stmt|;
specifier|const
name|QImage
name|originalTitleBar
init|=
name|QPixmap
operator|::
name|grabWidget
argument_list|(
name|subWindow
argument_list|,
name|titleBarRect
argument_list|)
operator|.
name|toImage
argument_list|()
decl_stmt|;
name|QFont
name|newFont
argument_list|(
name|QLatin1String
argument_list|(
literal|"Helvetica"
argument_list|)
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|newFont
operator|.
name|setBold
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|subWindow
operator|->
name|setFont
argument_list|(
name|newFont
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
specifier|const
name|QFont
modifier|&
name|swFont
init|=
name|subWindow
operator|->
name|font
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|swFont
operator|.
name|family
argument_list|()
argument_list|,
name|newFont
operator|.
name|family
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|swFont
operator|.
name|pointSize
argument_list|()
argument_list|,
name|newFont
operator|.
name|pointSize
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|swFont
operator|.
name|weight
argument_list|()
argument_list|,
name|newFont
operator|.
name|weight
argument_list|()
argument_list|)
expr_stmt|;
name|QImage
name|newTitleBar
init|=
name|QPixmap
operator|::
name|grabWidget
argument_list|(
name|subWindow
argument_list|,
name|titleBarRect
argument_list|)
operator|.
name|toImage
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|newTitleBar
operator|!=
name|originalTitleBar
argument_list|)
expr_stmt|;
name|subWindow
operator|->
name|setFont
argument_list|(
name|originalFont
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|subWindow
operator|->
name|font
argument_list|()
argument_list|,
name|originalFont
argument_list|)
expr_stmt|;
name|newTitleBar
operator|=
name|QPixmap
operator|::
name|grabWidget
argument_list|(
name|subWindow
argument_list|,
name|titleBarRect
argument_list|)
operator|.
name|toImage
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|newTitleBar
argument_list|,
name|originalTitleBar
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task_188849
name|void
name|tst_QMdiSubWindow
operator|::
name|task_188849
parameter_list|()
block|{
name|QMainWindow
name|mainWindow
decl_stmt|;
comment|// Sets a regular QWidget (and NOT a QMenuBar) as the menu bar.
name|mainWindow
operator|.
name|setMenuWidget
argument_list|(
operator|new
name|QWidget
argument_list|)
expr_stmt|;
name|QMdiArea
modifier|*
name|mdiArea
init|=
operator|new
name|QMdiArea
decl_stmt|;
name|QMdiSubWindow
modifier|*
name|subWindow
init|=
name|mdiArea
operator|->
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
decl_stmt|;
name|mainWindow
operator|.
name|setCentralWidget
argument_list|(
name|mdiArea
argument_list|)
expr_stmt|;
name|mainWindow
operator|.
name|show
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
name|qt_x11_wait_for_window_manager
argument_list|(
operator|&
name|mainWindow
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QMdiSubWindow will now try to show its buttons in the menu bar.
comment|// Without checking that the menu bar is actually a QMenuBar
comment|// and not a regular QWidget, this will crash.
name|subWindow
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mdiArea
name|void
name|tst_QMdiSubWindow
operator|::
name|mdiArea
parameter_list|()
block|{
name|QMdiArea
name|mdiArea
decl_stmt|;
name|QMdiSubWindow
modifier|*
name|subWindow
init|=
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|subWindow
operator|->
name|mdiArea
argument_list|()
argument_list|,
operator|&
name|mdiArea
argument_list|)
expr_stmt|;
name|subWindow
operator|->
name|setParent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|subWindow
operator|->
name|mdiArea
argument_list|()
argument_list|)
expr_stmt|;
comment|// Child of the area's corner widget.
name|mdiArea
operator|.
name|setCornerWidget
argument_list|(
operator|new
name|QWidget
argument_list|)
expr_stmt|;
name|subWindow
operator|->
name|setParent
argument_list|(
name|mdiArea
operator|.
name|cornerWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|subWindow
operator|->
name|mdiArea
argument_list|()
argument_list|)
expr_stmt|;
comment|// Nested mdi area.
name|QMdiArea
modifier|*
name|nestedArea
init|=
operator|new
name|QMdiArea
decl_stmt|;
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
name|nestedArea
argument_list|)
expr_stmt|;
name|nestedArea
operator|->
name|addSubWindow
argument_list|(
name|subWindow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|subWindow
operator|->
name|mdiArea
argument_list|()
argument_list|,
name|nestedArea
argument_list|)
expr_stmt|;
name|nestedArea
operator|->
name|setViewport
argument_list|(
operator|new
name|QWidget
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|subWindow
operator|->
name|mdiArea
argument_list|()
argument_list|,
name|nestedArea
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task_182852
name|void
name|tst_QMdiSubWindow
operator|::
name|task_182852
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QMdiArea
modifier|*
name|workspace
init|=
operator|new
name|QMdiArea
decl_stmt|;
name|QMainWindow
name|mainWindow
decl_stmt|;
name|mainWindow
operator|.
name|setCentralWidget
argument_list|(
name|workspace
argument_list|)
expr_stmt|;
name|mainWindow
operator|.
name|show
argument_list|()
expr_stmt|;
name|mainWindow
operator|.
name|menuBar
argument_list|()
operator|->
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
operator|&
name|mainWindow
argument_list|)
expr_stmt|;
name|QString
name|originalWindowTitle
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"MainWindow - [foo]"
argument_list|)
decl_stmt|;
name|mainWindow
operator|.
name|setWindowTitle
argument_list|(
name|originalWindowTitle
argument_list|)
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|window
init|=
operator|new
name|QMdiSubWindow
decl_stmt|;
name|QMdiArea
modifier|*
name|nestedWorkspace
init|=
operator|new
name|QMdiArea
decl_stmt|;
comment|// :-)
name|window
operator|->
name|setWidget
argument_list|(
name|nestedWorkspace
argument_list|)
expr_stmt|;
name|window
operator|->
name|widget
argument_list|()
operator|->
name|setWindowTitle
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Window"
argument_list|)
argument_list|)
expr_stmt|;
name|workspace
operator|->
name|addSubWindow
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|window
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mainWindow
operator|.
name|windowTitle
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1 - [%2]"
argument_list|)
operator|.
name|arg
argument_list|(
name|originalWindowTitle
argument_list|,
name|window
operator|->
name|widget
argument_list|()
operator|->
name|windowTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|window
operator|->
name|showNormal
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mainWindow
operator|.
name|windowTitle
argument_list|()
argument_list|,
name|originalWindowTitle
argument_list|)
expr_stmt|;
name|window
operator|->
name|widget
argument_list|()
operator|->
name|setWindowTitle
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|window
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mainWindow
operator|.
name|windowTitle
argument_list|()
argument_list|,
name|originalWindowTitle
argument_list|)
expr_stmt|;
name|window
operator|->
name|showNormal
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mainWindow
operator|.
name|windowTitle
argument_list|()
argument_list|,
name|originalWindowTitle
argument_list|)
expr_stmt|;
name|window
operator|->
name|widget
argument_list|()
operator|->
name|setWindowTitle
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|window
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mainWindow
operator|.
name|windowTitle
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1 - [%2]"
argument_list|)
operator|.
name|arg
argument_list|(
name|originalWindowTitle
argument_list|,
name|window
operator|->
name|widget
argument_list|()
operator|->
name|windowTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|task_233197
name|void
name|tst_QMdiSubWindow
operator|::
name|task_233197
parameter_list|()
block|{
name|QMainWindow
modifier|*
name|mainWindow
init|=
operator|new
name|QMainWindow
decl_stmt|;
name|mainWindow
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DeleteOnClose
argument_list|)
expr_stmt|;
name|mainWindow
operator|->
name|resize
argument_list|(
literal|500
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|mainWindow
operator|->
name|show
argument_list|()
expr_stmt|;
name|QMdiArea
modifier|*
name|mdiArea
init|=
operator|new
name|QMdiArea
argument_list|(
name|mainWindow
argument_list|)
decl_stmt|;
name|mdiArea
operator|->
name|setOption
argument_list|(
name|QMdiArea
operator|::
name|DontMaximizeSubWindowOnActivation
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mainWindow
operator|->
name|setCentralWidget
argument_list|(
name|mdiArea
argument_list|)
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|subWindow1
init|=
operator|new
name|QMdiSubWindow
argument_list|()
decl_stmt|;
name|mdiArea
operator|->
name|addSubWindow
argument_list|(
name|subWindow1
argument_list|)
expr_stmt|;
name|subWindow1
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|subWindow2
init|=
operator|new
name|QMdiSubWindow
argument_list|()
decl_stmt|;
name|mdiArea
operator|->
name|addSubWindow
argument_list|(
name|subWindow2
argument_list|)
expr_stmt|;
name|subWindow2
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|subWindow3
init|=
operator|new
name|QMdiSubWindow
argument_list|()
decl_stmt|;
name|mdiArea
operator|->
name|addSubWindow
argument_list|(
name|subWindow3
argument_list|)
expr_stmt|;
name|subWindow3
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|QMenuBar
modifier|*
name|menuBar
init|=
name|mainWindow
operator|->
name|menuBar
argument_list|()
decl_stmt|;
comment|// force creation of a menubar
name|Q_UNUSED
argument_list|(
name|menuBar
argument_list|)
expr_stmt|;
name|QPushButton
modifier|*
name|focus1
init|=
operator|new
name|QPushButton
argument_list|(
name|QLatin1String
argument_list|(
literal|"Focus 1"
argument_list|)
argument_list|,
name|mainWindow
argument_list|)
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|focus1
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|subWindow1
argument_list|,
name|SLOT
argument_list|(
name|setFocus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|focus1
operator|->
name|move
argument_list|(
literal|5
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|focus1
operator|->
name|show
argument_list|()
expr_stmt|;
name|QPushButton
modifier|*
name|focus2
init|=
operator|new
name|QPushButton
argument_list|(
name|QLatin1String
argument_list|(
literal|"Focus 2"
argument_list|)
argument_list|,
name|mainWindow
argument_list|)
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|focus2
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|subWindow2
argument_list|,
name|SLOT
argument_list|(
name|setFocus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|focus2
operator|->
name|move
argument_list|(
literal|5
argument_list|,
literal|60
argument_list|)
expr_stmt|;
name|focus2
operator|->
name|show
argument_list|()
expr_stmt|;
name|QPushButton
modifier|*
name|close
init|=
operator|new
name|QPushButton
argument_list|(
name|QLatin1String
argument_list|(
literal|"Close"
argument_list|)
argument_list|,
name|mainWindow
argument_list|)
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|close
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|mainWindow
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|close
operator|->
name|move
argument_list|(
literal|5
argument_list|,
literal|90
argument_list|)
expr_stmt|;
name|close
operator|->
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|sendMousePress
argument_list|(
name|focus2
argument_list|,
name|QPoint
argument_list|()
argument_list|)
expr_stmt|;
name|sendMouseRelease
argument_list|(
name|focus2
argument_list|,
name|QPoint
argument_list|()
argument_list|)
expr_stmt|;
name|sendMousePress
argument_list|(
name|focus1
argument_list|,
name|QPoint
argument_list|()
argument_list|)
expr_stmt|;
name|sendMouseRelease
argument_list|(
name|focus1
argument_list|,
name|QPoint
argument_list|()
argument_list|)
expr_stmt|;
name|sendMousePress
argument_list|(
name|focus2
argument_list|,
name|QPoint
argument_list|()
argument_list|)
expr_stmt|;
name|sendMouseRelease
argument_list|(
name|focus2
argument_list|,
name|QPoint
argument_list|()
argument_list|)
expr_stmt|;
name|sendMousePress
argument_list|(
name|close
argument_list|,
name|QPoint
argument_list|()
argument_list|)
expr_stmt|;
name|sendMouseRelease
argument_list|(
name|close
argument_list|,
name|QPoint
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task_226929
name|void
name|tst_QMdiSubWindow
operator|::
name|task_226929
parameter_list|()
block|{
name|QMdiArea
name|mdiArea
decl_stmt|;
name|mdiArea
operator|.
name|show
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
name|qt_x11_wait_for_window_manager
argument_list|(
operator|&
name|mdiArea
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QMdiSubWindow
modifier|*
name|sub1
init|=
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QTextEdit
argument_list|)
decl_stmt|;
name|sub1
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|sub2
init|=
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QTextEdit
argument_list|)
decl_stmt|;
name|sub2
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// Do not assert.
comment|// This window will now be activated and automatically maximized
comment|// (if not QMdiArea::DontMaximizeSubWindowOnActionvation is set).
name|sub1
operator|->
name|showNormal
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|sub1
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QMdiSubWindow
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qmdisubwindow.moc"
end_include
end_unit
