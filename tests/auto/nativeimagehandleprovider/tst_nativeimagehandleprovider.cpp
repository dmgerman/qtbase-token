begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qpixmapdata_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qnativeimagehandleprovider_p.h>
end_include
begin_include
include|#
directive|include
file|<QScopedPointer>
end_include
begin_include
include|#
directive|include
file|<QPixmap>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_OPENVG
argument_list|)
end_if
begin_include
include|#
directive|include
file|<fbs.h>
end_include
begin_include
include|#
directive|include
file|<bitdev.h>
end_include
begin_include
include|#
directive|include
file|<QtOpenVG/private/qpixmapdata_vg_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|pixmapFromNativeImageHandleProvider
name|QPixmap
name|pixmapFromNativeImageHandleProvider
parameter_list|(
name|QNativeImageHandleProvider
modifier|*
name|source
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_OPENVG
argument_list|)
if|if
condition|(
operator|!
name|source
condition|)
return|return
name|QPixmap
argument_list|()
return|;
name|QScopedPointer
argument_list|<
name|QPixmapData
argument_list|>
name|pd
argument_list|(
name|QPixmapData
operator|::
name|create
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QPixmapData
operator|::
name|PixmapType
argument_list|)
argument_list|)
decl_stmt|;
name|pd
operator|->
name|fromNativeType
argument_list|(
name|source
argument_list|,
name|QPixmapData
operator|::
name|NativeImageHandleProvider
argument_list|)
expr_stmt|;
return|return
name|QPixmap
argument_list|(
name|pd
operator|.
name|take
argument_list|()
argument_list|)
return|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|QPixmap
argument_list|()
return|;
endif|#
directive|endif
block|}
end_function
begin_class
DECL|class|DummyProvider
class|class
name|DummyProvider
super|:
specifier|public
name|QNativeImageHandleProvider
block|{
public|public:
name|void
name|get
parameter_list|(
name|void
modifier|*
modifier|*
name|handle
parameter_list|,
name|QString
modifier|*
name|type
parameter_list|)
function_decl|;
name|void
name|release
parameter_list|(
name|void
modifier|*
name|handle
parameter_list|,
specifier|const
name|QString
modifier|&
name|type
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|get
name|void
name|DummyProvider
operator|::
name|get
parameter_list|(
name|void
modifier|*
modifier|*
name|handle
parameter_list|,
name|QString
modifier|*
name|type
parameter_list|)
block|{
operator|*
name|handle
operator|=
operator|(
name|void
operator|*
operator|)
literal|0x12345678
expr_stmt|;
operator|*
name|type
operator|=
literal|"some dummy type"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|release
name|void
name|DummyProvider
operator|::
name|release
parameter_list|(
name|void
modifier|*
name|handle
parameter_list|,
specifier|const
name|QString
modifier|&
name|type
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|handle
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_OPENVG
argument_list|)
end_if
begin_class
DECL|class|BitmapProvider
class|class
name|BitmapProvider
super|:
specifier|public
name|QNativeImageHandleProvider
block|{
public|public:
DECL|function|BitmapProvider
name|BitmapProvider
parameter_list|()
member_init_list|:
name|bmp
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|refCount
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|w
argument_list|(
literal|50
argument_list|)
member_init_list|,
name|h
argument_list|(
literal|60
argument_list|)
block|{ }
name|void
name|get
parameter_list|(
name|void
modifier|*
modifier|*
name|handle
parameter_list|,
name|QString
modifier|*
name|type
parameter_list|)
function_decl|;
name|void
name|release
parameter_list|(
name|void
modifier|*
name|handle
parameter_list|,
specifier|const
name|QString
modifier|&
name|type
parameter_list|)
function_decl|;
DECL|member|bmp
name|CFbsBitmap
modifier|*
name|bmp
decl_stmt|;
DECL|member|refCount
DECL|member|w
DECL|member|h
name|int
name|refCount
decl_stmt|,
name|w
decl_stmt|,
name|h
decl_stmt|;
DECL|member|returnedHandle
name|void
modifier|*
name|returnedHandle
decl_stmt|;
DECL|member|returnedType
name|QString
name|returnedType
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|get
name|void
name|BitmapProvider
operator|::
name|get
parameter_list|(
name|void
modifier|*
modifier|*
name|handle
parameter_list|,
name|QString
modifier|*
name|type
parameter_list|)
block|{
comment|// There may not be a release() if the get() fails so don't bother with
comment|// refcounting in such cases.
if|if
condition|(
name|bmp
condition|)
operator|++
name|refCount
expr_stmt|;
name|returnedType
operator|=
name|QLatin1String
argument_list|(
literal|"CFbsBitmap"
argument_list|)
expr_stmt|;
name|returnedHandle
operator|=
name|bmp
expr_stmt|;
operator|*
name|handle
operator|=
name|returnedHandle
expr_stmt|;
operator|*
name|type
operator|=
name|returnedType
expr_stmt|;
block|}
end_function
begin_function
DECL|function|release
name|void
name|BitmapProvider
operator|::
name|release
parameter_list|(
name|void
modifier|*
name|handle
parameter_list|,
specifier|const
name|QString
modifier|&
name|type
parameter_list|)
block|{
if|if
condition|(
name|handle
operator|==
name|returnedHandle
operator|&&
name|type
operator|==
name|returnedType
operator|&&
name|returnedHandle
condition|)
block|{
operator|--
name|refCount
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// symbian& openvg
end_comment
begin_class
DECL|class|tst_NativeImageHandleProvider
class|class
name|tst_NativeImageHandleProvider
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|tst_NativeImageHandleProvider
name|tst_NativeImageHandleProvider
parameter_list|()
block|{ }
private|private
name|slots
private|:
name|void
name|create
parameter_list|()
function_decl|;
name|void
name|bitmap
parameter_list|()
function_decl|;
name|void
name|hibernate
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|create
name|void
name|tst_NativeImageHandleProvider
operator|::
name|create
parameter_list|()
block|{
name|QPixmap
name|pm
init|=
name|pixmapFromNativeImageHandleProvider
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|pm
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QPixmap
name|tmp
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmp
operator|.
name|pixmapData
argument_list|()
operator|->
name|classId
argument_list|()
operator|==
name|QPixmapData
operator|::
name|OpenVGClass
condition|)
block|{
comment|// Verify that null pixmap is properly returned when get() provides bogus results.
name|DummyProvider
name|prov
decl_stmt|;
name|pm
operator|=
name|pixmapFromNativeImageHandleProvider
argument_list|(
operator|&
name|prov
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|pm
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|pm
operator|=
name|QPixmap
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"Not openvg, skipping non-trivial tests"
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|bitmap
name|void
name|tst_NativeImageHandleProvider
operator|::
name|bitmap
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_OPENVG
argument_list|)
name|QPixmap
name|tmp
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmp
operator|.
name|pixmapData
argument_list|()
operator|->
name|classId
argument_list|()
operator|==
name|QPixmapData
operator|::
name|OpenVGClass
condition|)
block|{
name|BitmapProvider
name|prov
decl_stmt|;
comment|// This should fail because of null ptr.
name|QPixmap
name|pm
init|=
name|pixmapFromNativeImageHandleProvider
argument_list|(
operator|&
name|prov
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|pm
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|pm
operator|=
name|QPixmap
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|prov
operator|.
name|refCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|prov
operator|.
name|bmp
operator|=
operator|new
name|CFbsBitmap
expr_stmt|;
name|QCOMPARE
argument_list|(
name|prov
operator|.
name|bmp
operator|->
name|Create
argument_list|(
name|TSize
argument_list|(
name|prov
operator|.
name|w
argument_list|,
name|prov
operator|.
name|h
argument_list|)
argument_list|,
name|EColor16MAP
argument_list|)
argument_list|,
name|KErrNone
argument_list|)
expr_stmt|;
name|CFbsBitmapDevice
modifier|*
name|bitmapDevice
init|=
name|CFbsBitmapDevice
operator|::
name|NewL
argument_list|(
name|prov
operator|.
name|bmp
argument_list|)
decl_stmt|;
name|CBitmapContext
modifier|*
name|bitmapContext
init|=
literal|0
decl_stmt|;
name|QCOMPARE
argument_list|(
name|bitmapDevice
operator|->
name|CreateBitmapContext
argument_list|(
name|bitmapContext
argument_list|)
argument_list|,
name|KErrNone
argument_list|)
expr_stmt|;
name|TRgb
name|symbianColor
init|=
name|TRgb
argument_list|(
literal|255
argument_list|,
literal|200
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|bitmapContext
operator|->
name|SetBrushColor
argument_list|(
name|symbianColor
argument_list|)
expr_stmt|;
name|bitmapContext
operator|->
name|Clear
argument_list|()
expr_stmt|;
operator|delete
name|bitmapContext
expr_stmt|;
operator|delete
name|bitmapDevice
expr_stmt|;
name|pm
operator|=
name|pixmapFromNativeImageHandleProvider
argument_list|(
operator|&
name|prov
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|pm
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pm
operator|.
name|width
argument_list|()
argument_list|,
name|prov
operator|.
name|w
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pm
operator|.
name|height
argument_list|()
argument_list|,
name|prov
operator|.
name|h
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|prov
operator|.
name|refCount
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QImage
name|img
init|=
name|pm
operator|.
name|toImage
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|prov
operator|.
name|refCount
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QRgb
name|pix
init|=
name|img
operator|.
name|pixel
argument_list|(
name|QPoint
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|qRed
argument_list|(
name|pix
argument_list|)
argument_list|,
name|symbianColor
operator|.
name|Red
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qGreen
argument_list|(
name|pix
argument_list|)
argument_list|,
name|symbianColor
operator|.
name|Green
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qBlue
argument_list|(
name|pix
argument_list|)
argument_list|,
name|symbianColor
operator|.
name|Blue
argument_list|()
argument_list|)
expr_stmt|;
name|pm
operator|=
name|QPixmap
argument_list|()
expr_stmt|;
comment|// should result in calling release
name|QCOMPARE
argument_list|(
name|prov
operator|.
name|refCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|prov
operator|.
name|bmp
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"Not openvg"
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
name|QSKIP
argument_list|(
literal|"Not applicable"
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|hibernate
name|void
name|tst_NativeImageHandleProvider
operator|::
name|hibernate
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_OPENVG
argument_list|)
name|QPixmap
name|tmp
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmp
operator|.
name|pixmapData
argument_list|()
operator|->
name|classId
argument_list|()
operator|==
name|QPixmapData
operator|::
name|OpenVGClass
condition|)
block|{
name|BitmapProvider
name|prov
decl_stmt|;
name|prov
operator|.
name|bmp
operator|=
operator|new
name|CFbsBitmap
expr_stmt|;
name|QCOMPARE
argument_list|(
name|prov
operator|.
name|bmp
operator|->
name|Create
argument_list|(
name|TSize
argument_list|(
name|prov
operator|.
name|w
argument_list|,
name|prov
operator|.
name|h
argument_list|)
argument_list|,
name|EColor16MAP
argument_list|)
argument_list|,
name|KErrNone
argument_list|)
expr_stmt|;
name|QPixmap
name|pm
init|=
name|pixmapFromNativeImageHandleProvider
argument_list|(
operator|&
name|prov
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|prov
operator|.
name|refCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVGPixmapData
modifier|*
name|vgpd
init|=
cast|static_cast
argument_list|<
name|QVGPixmapData
operator|*
argument_list|>
argument_list|(
name|pm
operator|.
name|pixmapData
argument_list|()
argument_list|)
decl_stmt|;
name|vgpd
operator|->
name|hibernate
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|prov
operator|.
name|refCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Calling toVGImage() may cause some warnings as we don't have a gui initialized,
comment|// but the only thing we care about here is get() being called.
name|vgpd
operator|->
name|toVGImage
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|prov
operator|.
name|refCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|pm
operator|=
name|QPixmap
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|prov
operator|.
name|refCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|prov
operator|.
name|bmp
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"Not openvg"
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
name|QSKIP
argument_list|(
literal|"Not applicable"
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
name|QApplication
operator|::
name|setGraphicsSystem
argument_list|(
literal|"openvg"
argument_list|)
expr_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|tst_NativeImageHandleProvider
name|tc
decl_stmt|;
return|return
name|QTest
operator|::
name|qExec
argument_list|(
operator|&
name|tc
argument_list|,
name|argc
argument_list|,
name|argv
argument_list|)
return|;
block|}
end_function
begin_include
include|#
directive|include
file|"tst_nativeimagehandleprovider.moc"
end_include
end_unit
