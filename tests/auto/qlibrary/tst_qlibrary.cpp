begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<qlibrary.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QRegExp>
end_include
begin_comment
comment|// Helper macros to let us know if some suffixes and prefixes are valid
end_comment
begin_define
DECL|macro|bundle_VALID
define|#
directive|define
name|bundle_VALID
value|false
end_define
begin_define
DECL|macro|dylib_VALID
define|#
directive|define
name|dylib_VALID
value|false
end_define
begin_define
DECL|macro|sl_VALID
define|#
directive|define
name|sl_VALID
value|false
end_define
begin_define
DECL|macro|a_VALID
define|#
directive|define
name|a_VALID
value|false
end_define
begin_define
DECL|macro|so_VALID
define|#
directive|define
name|so_VALID
value|false
end_define
begin_define
DECL|macro|dll_VALID
define|#
directive|define
name|dll_VALID
value|false
end_define
begin_define
DECL|macro|DLL_VALID
define|#
directive|define
name|DLL_VALID
value|false
end_define
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_DARWIN
argument_list|)
end_if
begin_undef
DECL|macro|bundle_VALID
undef|#
directive|undef
name|bundle_VALID
end_undef
begin_undef
DECL|macro|dylib_VALID
undef|#
directive|undef
name|dylib_VALID
end_undef
begin_undef
DECL|macro|so_VALID
undef|#
directive|undef
name|so_VALID
end_undef
begin_define
DECL|macro|bundle_VALID
define|#
directive|define
name|bundle_VALID
value|true
end_define
begin_define
DECL|macro|dylib_VALID
define|#
directive|define
name|dylib_VALID
value|true
end_define
begin_define
DECL|macro|so_VALID
define|#
directive|define
name|so_VALID
value|true
end_define
begin_define
DECL|macro|SUFFIX
define|#
directive|define
name|SUFFIX
value|".dylib"
end_define
begin_define
DECL|macro|PREFIX
define|#
directive|define
name|PREFIX
value|"lib"
end_define
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_HPUX
argument_list|)
end_elif
begin_undef
DECL|macro|sl_VALID
undef|#
directive|undef
name|sl_VALID
end_undef
begin_define
DECL|macro|sl_VALID
define|#
directive|define
name|sl_VALID
value|true
end_define
begin_ifndef
ifndef|#
directive|ifndef
name|__ia64
end_ifndef
begin_define
DECL|macro|SUFFIX
define|#
directive|define
name|SUFFIX
value|".sl"
end_define
begin_define
DECL|macro|PREFIX
define|#
directive|define
name|PREFIX
value|"lib"
end_define
begin_else
else|#
directive|else
end_else
begin_undef
DECL|macro|so_VALID
undef|#
directive|undef
name|so_VALID
end_undef
begin_define
DECL|macro|so_VALID
define|#
directive|define
name|so_VALID
value|true
end_define
begin_define
DECL|macro|SUFFIX
define|#
directive|define
name|SUFFIX
value|".so"
end_define
begin_define
DECL|macro|PREFIX
define|#
directive|define
name|PREFIX
value|"lib"
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_AIX
argument_list|)
end_elif
begin_undef
DECL|macro|a_VALID
undef|#
directive|undef
name|a_VALID
end_undef
begin_undef
DECL|macro|so_VALID
undef|#
directive|undef
name|so_VALID
end_undef
begin_define
DECL|macro|a_VALID
define|#
directive|define
name|a_VALID
value|true
end_define
begin_define
DECL|macro|so_VALID
define|#
directive|define
name|so_VALID
value|true
end_define
begin_define
DECL|macro|SUFFIX
define|#
directive|define
name|SUFFIX
value|".a"
end_define
begin_define
DECL|macro|PREFIX
define|#
directive|define
name|PREFIX
value|"lib"
end_define
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
end_elif
begin_undef
DECL|macro|dll_VALID
undef|#
directive|undef
name|dll_VALID
end_undef
begin_define
DECL|macro|dll_VALID
define|#
directive|define
name|dll_VALID
value|true
end_define
begin_undef
DECL|macro|DLL_VALID
undef|#
directive|undef
name|DLL_VALID
end_undef
begin_define
DECL|macro|DLL_VALID
define|#
directive|define
name|DLL_VALID
value|true
end_define
begin_define
DECL|macro|SUFFIX
define|#
directive|define
name|SUFFIX
value|".dll"
end_define
begin_define
DECL|macro|PREFIX
define|#
directive|define
name|PREFIX
value|""
end_define
begin_else
else|#
directive|else
end_else
begin_comment
comment|// all other Unix
end_comment
begin_undef
DECL|macro|so_VALID
undef|#
directive|undef
name|so_VALID
end_undef
begin_define
DECL|macro|so_VALID
define|#
directive|define
name|so_VALID
value|true
end_define
begin_define
DECL|macro|SUFFIX
define|#
directive|define
name|SUFFIX
value|".so"
end_define
begin_define
DECL|macro|PREFIX
define|#
directive|define
name|PREFIX
value|"lib"
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|sys_qualifiedLibraryName
specifier|static
name|QString
name|sys_qualifiedLibraryName
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
return|return
name|PREFIX
operator|+
name|fileName
operator|+
name|SUFFIX
return|;
else|#
directive|else
name|QString
name|currDir
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
decl_stmt|;
return|return
name|currDir
operator|+
literal|"/"
operator|+
name|PREFIX
operator|+
name|fileName
operator|+
name|SUFFIX
return|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|//TESTED_CLASS=
end_comment
begin_comment
comment|//TESTED_FILES=
end_comment
begin_macro
name|QT_FORWARD_DECLARE_CLASS
argument_list|(
argument|QLibrary
argument_list|)
end_macro
begin_class
DECL|class|tst_QLibrary
class|class
name|tst_QLibrary
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QLibrary
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QLibrary
parameter_list|()
destructor_decl|;
DECL|enum|QLibraryOperation
enum|enum
name|QLibraryOperation
block|{
DECL|enumerator|Load
name|Load
init|=
literal|1
block|,
DECL|enumerator|Unload
name|Unload
init|=
literal|2
block|,
DECL|enumerator|Resolve
name|Resolve
init|=
literal|3
block|,
DECL|enumerator|OperationMask
name|OperationMask
init|=
literal|7
block|,
DECL|enumerator|DontSetFileName
name|DontSetFileName
init|=
literal|0x100
block|}
enum|;
private|private
name|slots
private|:
name|void
name|load
parameter_list|()
function_decl|;
name|void
name|load_data
parameter_list|()
function_decl|;
name|void
name|library_data
parameter_list|()
function_decl|;
name|void
name|resolve_data
parameter_list|()
function_decl|;
name|void
name|resolve
parameter_list|()
function_decl|;
name|void
name|unload_data
parameter_list|()
function_decl|;
name|void
name|unload
parameter_list|()
function_decl|;
name|void
name|unload_after_implicit_load
parameter_list|()
function_decl|;
name|void
name|isLibrary_data
parameter_list|()
function_decl|;
name|void
name|isLibrary
parameter_list|()
function_decl|;
name|void
name|version_data
parameter_list|()
function_decl|;
name|void
name|version
parameter_list|()
function_decl|;
name|void
name|errorString_data
parameter_list|()
function_decl|;
name|void
name|errorString
parameter_list|()
function_decl|;
name|void
name|loadHints
parameter_list|()
function_decl|;
name|void
name|loadHints_data
parameter_list|()
function_decl|;
name|void
name|fileName_data
parameter_list|()
function_decl|;
name|void
name|fileName
parameter_list|()
function_decl|;
name|void
name|multipleInstancesForOneLibrary
parameter_list|()
function_decl|;
ifdef|#
directive|ifdef
name|Q_OS_WINCE
private|private:
DECL|member|app
name|QCoreApplication
modifier|*
name|app
decl_stmt|;
endif|#
directive|endif
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QLibrary
name|tst_QLibrary
operator|::
name|tst_QLibrary
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|char
modifier|*
name|argv
init|=
literal|"app"
decl_stmt|;
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|app
operator|=
operator|new
name|QCoreApplication
argument_list|(
name|argc
argument_list|,
operator|&
name|argv
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~tst_QLibrary
name|tst_QLibrary
operator|::
name|~
name|tst_QLibrary
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|app
operator|->
name|quit
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_destructor
begin_typedef
DECL|typedef|VersionFunction
typedef|typedef
name|int
function_decl|(
modifier|*
name|VersionFunction
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_typedef
begin_function
DECL|function|version_data
name|void
name|tst_QLibrary
operator|::
name|version_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"lib"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"loadversion"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"resultversion"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok00, version 1"
argument_list|)
operator|<<
literal|"mylib"
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok00, version 2"
argument_list|)
operator|<<
literal|"mylib"
operator|<<
literal|2
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok00, default to last version"
argument_list|)
operator|<<
literal|"mylib"
operator|<<
operator|-
literal|1
operator|<<
literal|2
expr_stmt|;
block|}
end_function
begin_function
DECL|function|version
name|void
name|tst_QLibrary
operator|::
name|version
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|lib
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|loadversion
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|resultversion
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_AIX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
name|QString
name|currDir
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
decl_stmt|;
name|QLibrary
name|library
argument_list|(
name|currDir
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|lib
argument_list|,
name|loadversion
argument_list|)
decl_stmt|;
name|bool
name|ok
init|=
name|library
operator|.
name|load
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|VersionFunction
name|fnVersion
init|=
operator|(
name|VersionFunction
operator|)
name|library
operator|.
name|resolve
argument_list|(
literal|"mylibversion"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fnVersion
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fnVersion
argument_list|()
argument_list|,
name|resultversion
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|library
operator|.
name|unload
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|lib
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|loadversion
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|resultversion
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|load_data
name|void
name|tst_QLibrary
operator|::
name|load_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"lib"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
name|QString
name|currDir
decl_stmt|;
else|#
directive|else
name|QString
name|currDir
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
decl_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok00"
argument_list|)
operator|<<
name|currDir
operator|+
literal|"/mylib"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"notexist"
argument_list|)
operator|<<
name|currDir
operator|+
literal|"/nolib"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"badlibrary"
argument_list|)
operator|<<
name|currDir
operator|+
literal|"/qlibrary.pro"
operator|<<
literal|false
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok (libmylib ver. 1)"
argument_list|)
operator|<<
name|currDir
operator|+
literal|"/libmylib"
operator|<<
literal|true
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN32
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok01 (with suffix)"
argument_list|)
operator|<<
name|currDir
operator|+
literal|"/mylib.dll"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok02 (with non-standard suffix)"
argument_list|)
operator|<<
name|currDir
operator|+
literal|"/mylib.dl2"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok03 (with many dots)"
argument_list|)
operator|<<
name|currDir
operator|+
literal|"/system.trolltech.test.mylib.dll"
operator|<<
literal|true
expr_stmt|;
elif|#
directive|elif
name|defined
name|Q_OS_UNIX
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok01 (with suffix)"
argument_list|)
operator|<<
name|currDir
operator|+
literal|"/libmylib"
name|SUFFIX
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok02 (with non-standard suffix)"
argument_list|)
operator|<<
name|currDir
operator|+
literal|"/libmylib.so2"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok03 (with many dots)"
argument_list|)
operator|<<
name|currDir
operator|+
literal|"/system.trolltech.test.mylib.so"
operator|<<
literal|true
expr_stmt|;
endif|#
directive|endif
comment|// Q_OS_UNIX
block|}
end_function
begin_function
DECL|function|load
name|void
name|tst_QLibrary
operator|::
name|load
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|lib
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QLibrary
name|library
argument_list|(
name|lib
argument_list|)
decl_stmt|;
name|bool
name|ok
init|=
name|library
operator|.
name|load
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|library
operator|.
name|unload
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|unload_data
name|void
name|tst_QLibrary
operator|::
name|unload_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"lib"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
name|QString
name|currDir
decl_stmt|;
else|#
directive|else
name|QString
name|currDir
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
decl_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mylib"
argument_list|)
operator|<<
name|currDir
operator|+
literal|"/mylib"
operator|<<
literal|true
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_MAC
if|if
condition|(
name|QSysInfo
operator|::
name|MacintoshVersion
operator|<=
name|QSysInfo
operator|::
name|MV_10_3
condition|)
name|QEXPECT_FAIL
argument_list|(
literal|"mylib"
argument_list|,
literal|"dlcompat cannot unload libraries"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok01"
argument_list|)
operator|<<
name|currDir
operator|+
literal|"/nolib"
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unload
name|void
name|tst_QLibrary
operator|::
name|unload
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|lib
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QLibrary
name|library
argument_list|(
name|lib
argument_list|)
decl_stmt|;
name|library
operator|.
name|load
argument_list|()
expr_stmt|;
name|bool
name|ok
init|=
name|library
operator|.
name|unload
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|unload_after_implicit_load
name|void
name|tst_QLibrary
operator|::
name|unload_after_implicit_load
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
name|QSKIP
argument_list|(
literal|"SYMBIAN does not support symbols on non-STDDLL libraries."
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QLibrary
name|library
argument_list|(
literal|"./mylib"
argument_list|)
decl_stmt|;
name|void
modifier|*
name|p
init|=
name|library
operator|.
name|resolve
argument_list|(
literal|"mylibversion"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// Check if it was loaded
name|QVERIFY
argument_list|(
name|library
operator|.
name|isLoaded
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|library
operator|.
name|unload
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|library
operator|.
name|isLoaded
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resolve_data
name|void
name|tst_QLibrary
operator|::
name|resolve_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"lib"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"symbol"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"goodPointer"
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
name|QString
name|currDir
decl_stmt|;
else|#
directive|else
name|QString
name|currDir
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
decl_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok00"
argument_list|)
operator|<<
name|currDir
operator|+
literal|"/mylib"
operator|<<
name|QString
argument_list|(
literal|"mylibversion"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bad00"
argument_list|)
operator|<<
name|currDir
operator|+
literal|"/mylib"
operator|<<
name|QString
argument_list|(
literal|"nosym"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bad01"
argument_list|)
operator|<<
name|currDir
operator|+
literal|"/nolib"
operator|<<
name|QString
argument_list|(
literal|"nosym"
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resolve
name|void
name|tst_QLibrary
operator|::
name|resolve
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
name|QSKIP
argument_list|(
literal|"SYMBIAN does not support symbols on non-STDDLL libraries."
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
endif|#
directive|endif
typedef|typedef
name|int
function_decl|(
modifier|*
name|testFunc
function_decl|)
parameter_list|()
function_decl|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|lib
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|symbol
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|goodPointer
argument_list|)
expr_stmt|;
name|QLibrary
name|library
argument_list|(
name|lib
argument_list|)
decl_stmt|;
name|testFunc
name|func
init|=
operator|(
name|testFunc
operator|)
name|library
operator|.
name|resolve
argument_list|(
name|symbol
operator|.
name|toLatin1
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|goodPointer
condition|)
block|{
name|QVERIFY
argument_list|(
name|func
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|func
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
name|library
operator|.
name|unload
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|library_data
name|void
name|tst_QLibrary
operator|::
name|library_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"lib"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isLibrary_data
name|void
name|tst_QLibrary
operator|::
name|isLibrary_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"filename"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"valid"
argument_list|)
expr_stmt|;
comment|// use the macros #defined at the top of the file
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bad"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"mylib.bad"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|".a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"mylib.a"
argument_list|)
operator|<<
name|a_VALID
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|".bundle"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"mylib.bundle"
argument_list|)
operator|<<
name|bundle_VALID
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|".dll"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"mylib.dll"
argument_list|)
operator|<<
name|dll_VALID
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|".DLL"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"MYLIB.DLL"
argument_list|)
operator|<<
name|DLL_VALID
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|".dl2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"mylib.dl2"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|".dylib"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"mylib.dylib"
argument_list|)
operator|<<
name|dylib_VALID
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|".sl"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"mylib.sl"
argument_list|)
operator|<<
name|sl_VALID
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|".so"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"mylib.so"
argument_list|)
operator|<<
name|so_VALID
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|".so+version"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"mylib.so.0"
argument_list|)
operator|<<
name|so_VALID
expr_stmt|;
comment|// special tests:
ifndef|#
directive|ifndef
name|Q_OS_MAC
name|QTest
operator|::
name|newRow
argument_list|(
literal|"version+.so"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"libc-2.7.so"
argument_list|)
operator|<<
name|so_VALID
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"version+.so+version"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"liboil-0.3.so.0.1.0"
argument_list|)
operator|<<
name|so_VALID
expr_stmt|;
else|#
directive|else
name|QTest
operator|::
name|newRow
argument_list|(
literal|"version+.so"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"libc-2.7.so"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"version+.so+version"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"liboil-0.3.so.0.1.0"
argument_list|)
operator|<<
literal|false
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|QTest
operator|::
name|newRow
argument_list|(
literal|"good (libmylib.1.0.0.dylib)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"libmylib.1.0.0.dylib"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"good (libmylib.dylib)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"libmylib.dylib"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"good (libmylib.so)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"libmylib.so"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"good (libmylib.so.1.0.0)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"libmylib.so.1.0.0"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bad (libmylib.1.0.0.foo)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"libmylib.1.0.0.foo"
argument_list|)
operator|<<
literal|false
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"good (with many dots)"
argument_list|)
operator|<<
literal|"/system.trolltech.test.mylib.dll"
operator|<<
literal|true
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|isLibrary
name|void
name|tst_QLibrary
operator|::
name|isLibrary
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|filename
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|valid
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QLibrary
operator|::
name|isLibrary
argument_list|(
name|filename
argument_list|)
argument_list|,
name|valid
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|errorString_data
name|void
name|tst_QLibrary
operator|::
name|errorString_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"operation"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"success"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"errorString"
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
name|QString
name|currDir
decl_stmt|;
else|#
directive|else
name|QString
name|currDir
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
decl_stmt|;
name|QString
name|srcDir
init|=
name|SRCDIR
decl_stmt|;
if|if
condition|(
name|srcDir
operator|.
name|isEmpty
argument_list|()
condition|)
name|srcDir
operator|=
name|currDir
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bad load()"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Load
operator|<<
name|QString
argument_list|(
literal|"nosuchlib"
argument_list|)
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"Cannot load library nosuchlib: .*"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"call errorString() on QLibrary with no d-pointer (crashtest)"
argument_list|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|Load
operator||
name|DontSetFileName
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"Unknown error"
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bad resolve"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Resolve
operator|<<
name|currDir
operator|+
literal|"/mylib"
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"Cannot resolve symbol \"nosuchsymbol\" in .*: .*"
argument_list|)
expr_stmt|;
else|#
directive|else
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bad resolve"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Resolve
operator|<<
name|currDir
operator|+
literal|"/mylib"
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"Cannot resolve symbol \"nosuchsymbol\" in \\S+: .*"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"good resolve"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Resolve
operator|<<
name|currDir
operator|+
literal|"/mylib"
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|"Unknown error"
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bad load() with .dll suffix"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Load
operator|<<
name|QString
argument_list|(
literal|"nosuchlib.dll"
argument_list|)
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"Cannot load library nosuchlib.dll: The specified module could not be found."
argument_list|)
expr_stmt|;
comment|//    QTest::newRow("bad unload")<< (int)Unload<< QString("nosuchlib.dll")<< false<< QString("QLibrary::unload_sys: Cannot unload nosuchlib.dll (The specified module could not be found.)");
elif|#
directive|elif
name|defined
name|Q_OS_MAC
elif|#
directive|elif
name|defined
name|Q_OS_SYMBIAN
name|QTest
operator|::
name|newRow
argument_list|(
literal|"load invalid file"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Load
operator|<<
literal|"tst_qlibrary.exe"
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"Cannot load library.*"
argument_list|)
expr_stmt|;
else|#
directive|else
name|QTest
operator|::
name|newRow
argument_list|(
literal|"load invalid file"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Load
operator|<<
name|srcDir
operator|+
literal|"/library_path/invalid.so"
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"Cannot load library.*"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|errorString
name|void
name|tst_QLibrary
operator|::
name|errorString
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|operation
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|errorString
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
if|if
condition|(
name|success
condition|)
block|{
name|QSKIP
argument_list|(
literal|"SYMBIAN does not support symbols on non-STDDLL libraries."
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|QLibrary
name|lib
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|operation
operator|&
name|DontSetFileName
operator|)
condition|)
block|{
name|lib
operator|.
name|setFileName
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
name|bool
name|ok
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|operation
operator|&
name|OperationMask
condition|)
block|{
case|case
name|Load
case|:
name|ok
operator|=
name|lib
operator|.
name|load
argument_list|()
expr_stmt|;
break|break;
case|case
name|Unload
case|:
name|ok
operator|=
name|lib
operator|.
name|load
argument_list|()
expr_stmt|;
comment|//###
name|ok
operator|=
name|lib
operator|.
name|unload
argument_list|()
expr_stmt|;
break|break;
case|case
name|Resolve
case|:
block|{
name|ok
operator|=
name|lib
operator|.
name|load
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ok
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|ok
operator|=
name|lib
operator|.
name|resolve
argument_list|(
literal|"mylibversion"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ok
operator|=
name|lib
operator|.
name|resolve
argument_list|(
literal|"nosuchsymbol"
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
name|Q_ASSERT
argument_list|(
literal|0
argument_list|)
expr_stmt|;
break|break;
block|}
name|QRegExp
name|re
argument_list|(
name|errorString
argument_list|)
decl_stmt|;
name|QString
name|libErrorString
init|=
name|lib
operator|.
name|errorString
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|lib
operator|.
name|isLoaded
argument_list|()
operator|||
name|lib
operator|.
name|unload
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|re
operator|.
name|exactMatch
argument_list|(
name|libErrorString
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|libErrorString
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ok
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|loadHints_data
name|void
name|tst_QLibrary
operator|::
name|loadHints_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"lib"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"loadHints"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QLibrary
operator|::
name|LoadHints
name|lh
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_AIX
argument_list|)
if|if
condition|(
name|QFile
operator|::
name|exists
argument_list|(
literal|"/usr/lib/libGL.a"
argument_list|)
operator|||
name|QFile
operator|::
name|exists
argument_list|(
literal|"/usr/X11R6/lib/libGL.a"
argument_list|)
condition|)
block|{
if|#
directive|if
name|QT_POINTER_SIZE
operator|==
literal|4
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok03 (Archive member)"
argument_list|)
operator|<<
literal|"libGL.a(shr.o)"
operator|<<
name|int
argument_list|(
name|QLibrary
operator|::
name|LoadArchiveMemberHint
argument_list|)
operator|<<
literal|true
expr_stmt|;
else|#
directive|else
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok03 (Archive member)"
argument_list|)
operator|<<
literal|"libGL.a(shr_64.o)"
operator|<<
name|int
argument_list|(
name|QLibrary
operator|::
name|LoadArchiveMemberHint
argument_list|)
operator|<<
literal|true
expr_stmt|;
endif|#
directive|endif
block|}
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
name|QString
name|currDir
decl_stmt|;
else|#
directive|else
name|QString
name|currDir
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
decl_stmt|;
endif|#
directive|endif
name|lh
operator||=
name|QLibrary
operator|::
name|ResolveAllSymbolsHint
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN32
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok01 (with suffix)"
argument_list|)
operator|<<
name|currDir
operator|+
literal|"/mylib.dll"
operator|<<
name|int
argument_list|(
name|lh
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok02 (with non-standard suffix)"
argument_list|)
operator|<<
name|currDir
operator|+
literal|"/mylib.dl2"
operator|<<
name|int
argument_list|(
name|lh
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok03 (with many dots)"
argument_list|)
operator|<<
name|currDir
operator|+
literal|"/system.trolltech.test.mylib.dll"
operator|<<
name|int
argument_list|(
name|lh
argument_list|)
operator|<<
literal|true
expr_stmt|;
elif|#
directive|elif
name|defined
name|Q_OS_UNIX
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok01 (with suffix)"
argument_list|)
operator|<<
name|currDir
operator|+
literal|"/libmylib"
name|SUFFIX
operator|<<
name|int
argument_list|(
name|lh
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok02 (with non-standard suffix)"
argument_list|)
operator|<<
name|currDir
operator|+
literal|"/libmylib.so2"
operator|<<
name|int
argument_list|(
name|lh
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok03 (with many dots)"
argument_list|)
operator|<<
name|currDir
operator|+
literal|"/system.trolltech.test.mylib.so"
operator|<<
name|int
argument_list|(
name|lh
argument_list|)
operator|<<
literal|true
expr_stmt|;
endif|#
directive|endif
comment|// Q_OS_UNIX
block|}
end_function
begin_function
DECL|function|loadHints
name|void
name|tst_QLibrary
operator|::
name|loadHints
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|lib
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|loadHints
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|//QLibrary library( lib );
name|QLibrary
name|library
decl_stmt|;
name|QLibrary
operator|::
name|LoadHints
name|lh
argument_list|(
name|loadHints
argument_list|)
decl_stmt|;
if|if
condition|(
name|int
argument_list|(
name|loadHints
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|lh
operator||=
name|library
operator|.
name|loadHints
argument_list|()
expr_stmt|;
name|library
operator|.
name|setLoadHints
argument_list|(
name|lh
argument_list|)
expr_stmt|;
block|}
name|library
operator|.
name|setFileName
argument_list|(
name|lib
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|library
operator|.
name|loadHints
argument_list|()
argument_list|,
name|lh
argument_list|)
expr_stmt|;
name|bool
name|ok
init|=
name|library
operator|.
name|load
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|library
operator|.
name|unload
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|fileName_data
name|void
name|tst_QLibrary
operator|::
name|fileName_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"libName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedFilename"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok02"
argument_list|)
operator|<<
name|sys_qualifiedLibraryName
argument_list|(
name|QLatin1String
argument_list|(
literal|"mylib"
argument_list|)
argument_list|)
operator|<<
name|sys_qualifiedLibraryName
argument_list|(
name|QLatin1String
argument_list|(
literal|"mylib"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_WIN
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok03"
argument_list|)
operator|<<
literal|"user32"
operator|<<
literal|"USER32.dll"
expr_stmt|;
else|#
directive|else
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok03"
argument_list|)
operator|<<
literal|"coredll"
operator|<<
literal|"coredll.dll"
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|fileName
name|void
name|tst_QLibrary
operator|::
name|fileName
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|libName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedFilename
argument_list|)
expr_stmt|;
name|QLibrary
name|lib
argument_list|(
name|libName
argument_list|)
decl_stmt|;
name|bool
name|ok
init|=
name|lib
operator|.
name|load
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
name|lib
operator|.
name|errorString
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
name|QCOMPARE
argument_list|(
name|lib
operator|.
name|fileName
argument_list|()
operator|.
name|toLower
argument_list|()
argument_list|,
name|expectedFilename
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|QCOMPARE
argument_list|(
name|lib
operator|.
name|fileName
argument_list|()
argument_list|,
name|expectedFilename
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|lib
operator|.
name|unload
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multipleInstancesForOneLibrary
name|void
name|tst_QLibrary
operator|::
name|multipleInstancesForOneLibrary
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
name|QString
name|lib
init|=
literal|"/mylib"
decl_stmt|;
else|#
directive|else
name|QString
name|lib
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"/mylib"
decl_stmt|;
endif|#
directive|endif
block|{
name|QLibrary
name|lib1
argument_list|(
name|lib
argument_list|)
decl_stmt|;
name|QLibrary
name|lib2
argument_list|(
name|lib
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|lib1
operator|.
name|isLoaded
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lib2
operator|.
name|isLoaded
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|lib1
operator|.
name|load
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lib1
operator|.
name|isLoaded
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lib2
operator|.
name|isLoaded
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lib1
operator|.
name|unload
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lib1
operator|.
name|isLoaded
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lib2
operator|.
name|isLoaded
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|lib1
operator|.
name|load
argument_list|()
expr_stmt|;
name|lib2
operator|.
name|load
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lib1
operator|.
name|isLoaded
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lib2
operator|.
name|isLoaded
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lib1
operator|.
name|unload
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lib1
operator|.
name|isLoaded
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lib2
operator|.
name|isLoaded
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lib2
operator|.
name|unload
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lib1
operator|.
name|isLoaded
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lib2
operator|.
name|isLoaded
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Finally; unload on that is already unloaded
name|QCOMPARE
argument_list|(
name|lib1
operator|.
name|unload
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|//now let's try with a 3rd one that will go out of scope
block|{
name|QLibrary
name|lib1
argument_list|(
name|lib
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|lib1
operator|.
name|isLoaded
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|lib1
operator|.
name|load
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lib1
operator|.
name|isLoaded
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|QLibrary
name|lib2
argument_list|(
name|lib
argument_list|)
decl_stmt|;
comment|//lib2 should be loaded because lib1 was loaded and never unloaded
name|QCOMPARE
argument_list|(
name|lib2
operator|.
name|isLoaded
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|/*     lib1.setLoadHints(QLibrary::ResolveAllSymbolsHint);     lib2.setLoadHints(QLibrary::ExportExternalSymbolHint); */
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QLibrary
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qlibrary.moc"
end_include
end_unit
