begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/QtNetwork>
end_include
begin_include
include|#
directive|include
file|<qnetworkdiskcache.h>
end_include
begin_include
include|#
directive|include
file|"../../shared/util.h"
end_include
begin_define
DECL|macro|EXAMPLE_URL
define|#
directive|define
name|EXAMPLE_URL
value|"http://user:pass@www.example.com/#foo"
end_define
begin_comment
comment|//cached objects are organized into these many subdirs
end_comment
begin_define
DECL|macro|NUM_SUBDIRECTORIES
define|#
directive|define
name|NUM_SUBDIRECTORIES
value|16
end_define
begin_class
DECL|class|tst_QNetworkDiskCache
class|class
name|tst_QNetworkDiskCache
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|qnetworkdiskcache_data
parameter_list|()
function_decl|;
name|void
name|qnetworkdiskcache
parameter_list|()
function_decl|;
name|void
name|prepare
parameter_list|()
function_decl|;
name|void
name|cacheSize
parameter_list|()
function_decl|;
name|void
name|clear
parameter_list|()
function_decl|;
name|void
name|data_data
parameter_list|()
function_decl|;
name|void
name|data
parameter_list|()
function_decl|;
name|void
name|metaData
parameter_list|()
function_decl|;
name|void
name|remove
parameter_list|()
function_decl|;
name|void
name|setCacheDirectory_data
parameter_list|()
function_decl|;
name|void
name|setCacheDirectory
parameter_list|()
function_decl|;
name|void
name|updateMetaData
parameter_list|()
function_decl|;
name|void
name|fileMetaData
parameter_list|()
function_decl|;
name|void
name|expire
parameter_list|()
function_decl|;
name|void
name|oldCacheVersionFile_data
parameter_list|()
function_decl|;
name|void
name|oldCacheVersionFile
parameter_list|()
function_decl|;
name|void
name|sync
parameter_list|()
function_decl|;
name|void
name|crashWhenParentingCache
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_comment
comment|// FIXME same as in tst_qnetworkreply.cpp .. could be unified
end_comment
begin_comment
comment|// Does not work for POST/PUT!
end_comment
begin_class
DECL|class|MiniHttpServer
class|class
name|MiniHttpServer
super|:
specifier|public
name|QTcpServer
block|{
name|Q_OBJECT
public|public:
DECL|member|client
name|QTcpSocket
modifier|*
name|client
decl_stmt|;
comment|// always the last one that was received
DECL|member|dataToTransmit
name|QByteArray
name|dataToTransmit
decl_stmt|;
DECL|member|receivedData
name|QByteArray
name|receivedData
decl_stmt|;
DECL|member|doClose
name|bool
name|doClose
decl_stmt|;
DECL|member|multiple
name|bool
name|multiple
decl_stmt|;
DECL|member|totalConnections
name|int
name|totalConnections
decl_stmt|;
DECL|function|MiniHttpServer
name|MiniHttpServer
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|)
member_init_list|:
name|client
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|dataToTransmit
argument_list|(
name|data
argument_list|)
member_init_list|,
name|doClose
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|multiple
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|totalConnections
argument_list|(
literal|0
argument_list|)
block|{
name|listen
argument_list|()
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|newConnection
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|doAccept
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
public|public
name|slots
public|:
DECL|function|doAccept
name|void
name|doAccept
parameter_list|()
block|{
name|client
operator|=
name|nextPendingConnection
argument_list|()
expr_stmt|;
name|client
operator|->
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
operator|++
name|totalConnections
expr_stmt|;
name|connect
argument_list|(
name|client
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|readyReadSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|readyReadSlot
name|void
name|readyReadSlot
parameter_list|()
block|{
name|receivedData
operator|+=
name|client
operator|->
name|readAll
argument_list|()
expr_stmt|;
name|int
name|doubleEndlPos
init|=
name|receivedData
operator|.
name|indexOf
argument_list|(
literal|"\r\n\r\n"
argument_list|)
decl_stmt|;
if|if
condition|(
name|doubleEndlPos
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// multiple requests incoming. remove the bytes of the current one
if|if
condition|(
name|multiple
condition|)
name|receivedData
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
name|doubleEndlPos
operator|+
literal|4
argument_list|)
expr_stmt|;
name|client
operator|->
name|write
argument_list|(
name|dataToTransmit
argument_list|)
expr_stmt|;
if|if
condition|(
name|doClose
condition|)
block|{
name|client
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
name|disconnect
argument_list|(
name|client
argument_list|,
literal|0
argument_list|,
name|this
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|client
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
block|}
class|;
end_class
begin_comment
comment|// Subclass that exposes the protected functions.
end_comment
begin_class
DECL|class|SubQNetworkDiskCache
class|class
name|SubQNetworkDiskCache
super|:
specifier|public
name|QNetworkDiskCache
block|{
public|public:
DECL|function|~SubQNetworkDiskCache
name|~
name|SubQNetworkDiskCache
parameter_list|()
block|{
if|if
condition|(
operator|!
name|cacheDirectory
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|function|call_fileMetaData
name|QNetworkCacheMetaData
name|call_fileMetaData
parameter_list|(
name|QString
specifier|const
modifier|&
name|fileName
parameter_list|)
block|{
return|return
name|SubQNetworkDiskCache
operator|::
name|fileMetaData
argument_list|(
name|fileName
argument_list|)
return|;
block|}
DECL|function|call_expire
name|qint64
name|call_expire
parameter_list|()
block|{
return|return
name|SubQNetworkDiskCache
operator|::
name|expire
argument_list|()
return|;
block|}
DECL|function|setupWithOne
name|void
name|setupWithOne
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|url
parameter_list|,
specifier|const
name|QNetworkCacheMetaData
modifier|&
name|metaData
init|=
name|QNetworkCacheMetaData
argument_list|()
parameter_list|)
block|{
name|setCacheDirectory
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
literal|"/diskCache"
argument_list|)
expr_stmt|;
name|QIODevice
modifier|*
name|d
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|metaData
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|d
operator|=
name|prepare
argument_list|(
name|metaData
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QNetworkCacheMetaData
name|m
decl_stmt|;
name|m
operator|.
name|setUrl
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|QNetworkCacheMetaData
operator|::
name|RawHeader
name|header
argument_list|(
literal|"content-type"
argument_list|,
literal|"text/html"
argument_list|)
decl_stmt|;
name|QNetworkCacheMetaData
operator|::
name|RawHeaderList
name|list
decl_stmt|;
name|list
operator|.
name|append
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|m
operator|.
name|setRawHeaders
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|d
operator|=
name|prepare
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|write
argument_list|(
literal|"Hello World!"
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_comment
comment|// This will be called before the first test function is executed.
end_comment
begin_comment
comment|// It is only called once.
end_comment
begin_function
DECL|function|initTestCase
name|void
name|tst_QNetworkDiskCache
operator|::
name|initTestCase
parameter_list|()
block|{
name|SubQNetworkDiskCache
name|cache
decl_stmt|;
name|cache
operator|.
name|setCacheDirectory
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
literal|"/diskCache"
argument_list|)
expr_stmt|;
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QString
name|s
init|=
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
literal|"/diskCache/"
decl_stmt|;
name|QDir
name|dir
decl_stmt|;
name|dir
operator|.
name|rmdir
argument_list|(
name|s
operator|+
literal|"data7"
argument_list|)
expr_stmt|;
comment|// the number is the internal cache version
name|dir
operator|.
name|rmdir
argument_list|(
name|s
operator|+
literal|"prepared"
argument_list|)
expr_stmt|;
name|dir
operator|.
name|rmdir
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|dir
operator|.
name|rmdir
argument_list|(
name|s
operator|+
literal|"http"
argument_list|)
expr_stmt|;
comment|// delete directory used by 4.7 and earlier (would make the tests fail)
block|}
end_function
begin_comment
comment|// This will be called after the last test function is executed.
end_comment
begin_comment
comment|// It is only called once.
end_comment
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QNetworkDiskCache
operator|::
name|cleanupTestCase
parameter_list|()
block|{ }
end_function
begin_comment
comment|// This will be called before each test function is executed.
end_comment
begin_function
DECL|function|init
name|void
name|tst_QNetworkDiskCache
operator|::
name|init
parameter_list|()
block|{ }
end_function
begin_comment
comment|// This will be called after every test function.
end_comment
begin_function
DECL|function|cleanup
name|void
name|tst_QNetworkDiskCache
operator|::
name|cleanup
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|qnetworkdiskcache_data
name|void
name|tst_QNetworkDiskCache
operator|::
name|qnetworkdiskcache_data
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|qnetworkdiskcache
name|void
name|tst_QNetworkDiskCache
operator|::
name|qnetworkdiskcache
parameter_list|()
block|{
name|QUrl
name|url
argument_list|(
name|EXAMPLE_URL
argument_list|)
decl_stmt|;
name|SubQNetworkDiskCache
name|cache
decl_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|cacheDirectory
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|cacheSize
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|metaData
argument_list|(
name|QUrl
argument_list|()
argument_list|)
argument_list|,
name|QNetworkCacheMetaData
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|remove
argument_list|(
name|QUrl
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|remove
argument_list|(
name|url
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cache
operator|.
name|insert
argument_list|(
operator|(
name|QIODevice
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|cache
operator|.
name|setCacheDirectory
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|updateMetaData
argument_list|(
name|QNetworkCacheMetaData
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|prepare
argument_list|(
name|QNetworkCacheMetaData
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|call_fileMetaData
argument_list|(
name|QString
argument_list|()
argument_list|)
argument_list|,
name|QNetworkCacheMetaData
argument_list|()
argument_list|)
expr_stmt|;
comment|// leave one hanging around...
name|QNetworkDiskCache
name|badCache
decl_stmt|;
name|QNetworkCacheMetaData
name|metaData
decl_stmt|;
name|metaData
operator|.
name|setUrl
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|badCache
operator|.
name|prepare
argument_list|(
name|metaData
argument_list|)
expr_stmt|;
name|badCache
operator|.
name|setCacheDirectory
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
literal|"/diskCache"
argument_list|)
expr_stmt|;
name|badCache
operator|.
name|prepare
argument_list|(
name|metaData
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|prepare
name|void
name|tst_QNetworkDiskCache
operator|::
name|prepare
parameter_list|()
block|{
name|SubQNetworkDiskCache
name|cache
decl_stmt|;
name|cache
operator|.
name|setCacheDirectory
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
literal|"/diskCache"
argument_list|)
expr_stmt|;
name|QUrl
name|url
argument_list|(
name|EXAMPLE_URL
argument_list|)
decl_stmt|;
name|QNetworkCacheMetaData
name|metaData
decl_stmt|;
name|metaData
operator|.
name|setUrl
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|cache
operator|.
name|prepare
argument_list|(
name|metaData
argument_list|)
expr_stmt|;
name|cache
operator|.
name|remove
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// public qint64 cacheSize() const
end_comment
begin_function
DECL|function|cacheSize
name|void
name|tst_QNetworkDiskCache
operator|::
name|cacheSize
parameter_list|()
block|{
name|SubQNetworkDiskCache
name|cache
decl_stmt|;
name|cache
operator|.
name|setCacheDirectory
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
literal|"/diskCache"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|cacheSize
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QUrl
name|url
argument_list|(
name|EXAMPLE_URL
argument_list|)
decl_stmt|;
name|QNetworkCacheMetaData
name|metaData
decl_stmt|;
name|metaData
operator|.
name|setUrl
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|QIODevice
modifier|*
name|d
init|=
name|cache
operator|.
name|prepare
argument_list|(
name|metaData
argument_list|)
decl_stmt|;
name|cache
operator|.
name|insert
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cache
operator|.
name|cacheSize
argument_list|()
operator|>
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|cacheSize
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|countFiles
specifier|static
name|QStringList
name|countFiles
parameter_list|(
specifier|const
name|QString
name|dir
parameter_list|)
block|{
name|QStringList
name|list
decl_stmt|;
name|QDir
operator|::
name|Filters
name|filter
argument_list|(
name|QDir
operator|::
name|AllEntries
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
decl_stmt|;
name|QDirIterator
name|it
argument_list|(
name|dir
argument_list|,
name|filter
argument_list|,
name|QDirIterator
operator|::
name|Subdirectories
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
name|list
operator|.
name|append
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
end_function
begin_comment
comment|// public void clear()
end_comment
begin_function
DECL|function|clear
name|void
name|tst_QNetworkDiskCache
operator|::
name|clear
parameter_list|()
block|{
name|SubQNetworkDiskCache
name|cache
decl_stmt|;
name|QUrl
name|url
argument_list|(
name|EXAMPLE_URL
argument_list|)
decl_stmt|;
name|cache
operator|.
name|setupWithOne
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cache
operator|.
name|cacheSize
argument_list|()
operator|>
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|cacheDirectory
init|=
name|cache
operator|.
name|cacheDirectory
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|countFiles
argument_list|(
name|cacheDirectory
argument_list|)
operator|.
name|count
argument_list|()
argument_list|,
name|NUM_SUBDIRECTORIES
operator|+
literal|3
argument_list|)
expr_stmt|;
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|countFiles
argument_list|(
name|cacheDirectory
argument_list|)
operator|.
name|count
argument_list|()
argument_list|,
name|NUM_SUBDIRECTORIES
operator|+
literal|2
argument_list|)
expr_stmt|;
comment|// don't delete files that it didn't create
name|QTemporaryFile
name|file
argument_list|(
name|cacheDirectory
operator|+
literal|"/XXXXXX"
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|open
argument_list|()
condition|)
block|{
name|QCOMPARE
argument_list|(
name|countFiles
argument_list|(
name|cacheDirectory
argument_list|)
operator|.
name|count
argument_list|()
argument_list|,
name|NUM_SUBDIRECTORIES
operator|+
literal|3
argument_list|)
expr_stmt|;
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|countFiles
argument_list|(
name|cacheDirectory
argument_list|)
operator|.
name|count
argument_list|()
argument_list|,
name|NUM_SUBDIRECTORIES
operator|+
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QNetworkCacheMetaData
argument_list|)
end_macro
begin_function
DECL|function|data_data
name|void
name|tst_QNetworkDiskCache
operator|::
name|data_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QNetworkCacheMetaData
argument_list|>
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
name|QNetworkCacheMetaData
argument_list|()
expr_stmt|;
name|QUrl
name|url
argument_list|(
name|EXAMPLE_URL
argument_list|)
decl_stmt|;
name|QNetworkCacheMetaData
name|metaData
decl_stmt|;
name|metaData
operator|.
name|setUrl
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|QNetworkCacheMetaData
operator|::
name|RawHeaderList
name|headers
decl_stmt|;
name|headers
operator|.
name|append
argument_list|(
name|QNetworkCacheMetaData
operator|::
name|RawHeader
argument_list|(
literal|"type"
argument_list|,
literal|"bin"
argument_list|)
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|setRawHeaders
argument_list|(
name|headers
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
name|metaData
expr_stmt|;
block|}
end_function
begin_comment
comment|// public QIODevice* data(QUrl const& url)
end_comment
begin_function
DECL|function|data
name|void
name|tst_QNetworkDiskCache
operator|::
name|data
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QNetworkCacheMetaData
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|SubQNetworkDiskCache
name|cache
decl_stmt|;
name|QUrl
name|url
argument_list|(
name|EXAMPLE_URL
argument_list|)
decl_stmt|;
name|cache
operator|.
name|setupWithOne
argument_list|(
name|url
argument_list|,
name|data
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|QIODevice
modifier|*
name|d
init|=
name|cache
operator|.
name|data
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d
operator|->
name|readAll
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"Hello World!"
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|d
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// public QNetworkCacheMetaData metaData(QUrl const& url)
end_comment
begin_function
DECL|function|metaData
name|void
name|tst_QNetworkDiskCache
operator|::
name|metaData
parameter_list|()
block|{
name|SubQNetworkDiskCache
name|cache
decl_stmt|;
name|QUrl
name|url
argument_list|(
name|EXAMPLE_URL
argument_list|)
decl_stmt|;
name|QNetworkCacheMetaData
name|metaData
decl_stmt|;
name|metaData
operator|.
name|setUrl
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|QNetworkCacheMetaData
operator|::
name|RawHeaderList
name|headers
decl_stmt|;
name|headers
operator|.
name|append
argument_list|(
name|QNetworkCacheMetaData
operator|::
name|RawHeader
argument_list|(
literal|"type"
argument_list|,
literal|"bin"
argument_list|)
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|setRawHeaders
argument_list|(
name|headers
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|setLastModified
argument_list|(
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|setExpirationDate
argument_list|(
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|setSaveToDisk
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cache
operator|.
name|setupWithOne
argument_list|(
name|url
argument_list|,
name|metaData
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|QNetworkCacheMetaData
name|cacheMetaData
init|=
name|cache
operator|.
name|metaData
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|cacheMetaData
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|metaData
argument_list|,
name|cacheMetaData
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// public bool remove(QUrl const& url)
end_comment
begin_function
DECL|function|remove
name|void
name|tst_QNetworkDiskCache
operator|::
name|remove
parameter_list|()
block|{
name|SubQNetworkDiskCache
name|cache
decl_stmt|;
name|QUrl
name|url
argument_list|(
name|EXAMPLE_URL
argument_list|)
decl_stmt|;
name|cache
operator|.
name|setupWithOne
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|QString
name|cacheDirectory
init|=
name|cache
operator|.
name|cacheDirectory
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|countFiles
argument_list|(
name|cacheDirectory
argument_list|)
operator|.
name|count
argument_list|()
argument_list|,
name|NUM_SUBDIRECTORIES
operator|+
literal|3
argument_list|)
expr_stmt|;
name|cache
operator|.
name|remove
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|countFiles
argument_list|(
name|cacheDirectory
argument_list|)
operator|.
name|count
argument_list|()
argument_list|,
name|NUM_SUBDIRECTORIES
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setCacheDirectory_data
name|void
name|tst_QNetworkDiskCache
operator|::
name|setCacheDirectory_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"cacheDir"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QDir
name|dir
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|dir
operator|.
name|absolutePath
argument_list|()
operator|+
name|QString
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// public void setCacheDirectory(QString const& cacheDir)
end_comment
begin_function
DECL|function|setCacheDirectory
name|void
name|tst_QNetworkDiskCache
operator|::
name|setCacheDirectory
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|cacheDir
argument_list|)
expr_stmt|;
name|SubQNetworkDiskCache
name|cache
decl_stmt|;
name|cache
operator|.
name|setCacheDirectory
argument_list|(
name|cacheDir
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|cacheDirectory
argument_list|()
argument_list|,
name|cacheDir
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// public void updateMetaData(QNetworkCacheMetaData const& metaData)
end_comment
begin_function
DECL|function|updateMetaData
name|void
name|tst_QNetworkDiskCache
operator|::
name|updateMetaData
parameter_list|()
block|{
name|QUrl
name|url
argument_list|(
name|EXAMPLE_URL
argument_list|)
decl_stmt|;
name|SubQNetworkDiskCache
name|cache
decl_stmt|;
name|cache
operator|.
name|setupWithOne
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|QNetworkCacheMetaData
name|metaData
init|=
name|cache
operator|.
name|metaData
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|metaData
operator|.
name|setLastModified
argument_list|(
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|updateMetaData
argument_list|(
name|metaData
argument_list|)
expr_stmt|;
name|QNetworkCacheMetaData
name|newMetaData
init|=
name|cache
operator|.
name|metaData
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|newMetaData
argument_list|,
name|metaData
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// protected QNetworkCacheMetaData fileMetaData(QString const& fileName)
end_comment
begin_function
DECL|function|fileMetaData
name|void
name|tst_QNetworkDiskCache
operator|::
name|fileMetaData
parameter_list|()
block|{
name|SubQNetworkDiskCache
name|cache
decl_stmt|;
name|QUrl
name|url
argument_list|(
name|EXAMPLE_URL
argument_list|)
decl_stmt|;
name|cache
operator|.
name|setupWithOne
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|url
operator|.
name|setPassword
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|url
operator|.
name|setFragment
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|cacheDirectory
init|=
name|cache
operator|.
name|cacheDirectory
argument_list|()
decl_stmt|;
name|QStringList
name|list
init|=
name|countFiles
argument_list|(
name|cacheDirectory
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|count
argument_list|()
argument_list|,
name|NUM_SUBDIRECTORIES
operator|+
literal|3
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QString
name|fileName
decl|,
name|list
control|)
block|{
name|QFileInfo
name|info
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|QNetworkCacheMetaData
name|metaData
init|=
name|cache
operator|.
name|call_fileMetaData
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|metaData
operator|.
name|url
argument_list|()
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
block|}
name|QTemporaryFile
name|file
argument_list|(
name|cacheDirectory
operator|+
literal|"/qt_temp.XXXXXX"
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|open
argument_list|()
condition|)
block|{
name|QNetworkCacheMetaData
name|metaData
init|=
name|cache
operator|.
name|call_fileMetaData
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|metaData
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// protected qint64 expire()
end_comment
begin_function
DECL|function|expire
name|void
name|tst_QNetworkDiskCache
operator|::
name|expire
parameter_list|()
block|{
name|SubQNetworkDiskCache
name|cache
decl_stmt|;
name|cache
operator|.
name|setCacheDirectory
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
literal|"/diskCache"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|call_expire
argument_list|()
argument_list|,
operator|(
name|qint64
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QUrl
name|url
argument_list|(
name|EXAMPLE_URL
argument_list|)
decl_stmt|;
name|cache
operator|.
name|setupWithOne
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cache
operator|.
name|call_expire
argument_list|()
operator|>
operator|(
name|qint64
operator|)
literal|0
argument_list|)
expr_stmt|;
name|qint64
name|limit
init|=
operator|(
literal|1024
operator|*
literal|1024
operator|/
literal|4
operator|)
operator|*
literal|5
decl_stmt|;
name|cache
operator|.
name|setMaximumCacheSize
argument_list|(
name|limit
argument_list|)
expr_stmt|;
name|qint64
name|max
init|=
name|cache
operator|.
name|maximumCacheSize
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|max
argument_list|,
name|limit
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|3
operator|==
literal|0
condition|)
name|QTest
operator|::
name|qWait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|QNetworkCacheMetaData
name|m
decl_stmt|;
name|m
operator|.
name|setUrl
argument_list|(
name|QUrl
argument_list|(
literal|"http://www.foo.com/"
operator|+
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QIODevice
modifier|*
name|d
init|=
name|cache
operator|.
name|prepare
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|QString
name|bigString
decl_stmt|;
name|bigString
operator|.
name|fill
argument_list|(
name|QLatin1Char
argument_list|(
literal|'Z'
argument_list|)
argument_list|,
operator|(
literal|1024
operator|*
literal|1024
operator|/
literal|4
operator|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|write
argument_list|(
name|bigString
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|insert
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cache
operator|.
name|call_expire
argument_list|()
operator|<
name|max
argument_list|)
expr_stmt|;
block|}
name|QString
name|cacheDirectory
init|=
name|cache
operator|.
name|cacheDirectory
argument_list|()
decl_stmt|;
name|QStringList
name|list
init|=
name|countFiles
argument_list|(
name|cacheDirectory
argument_list|)
decl_stmt|;
name|QStringList
name|cacheList
decl_stmt|;
foreach|foreach
control|(
name|QString
name|fileName
decl|,
name|list
control|)
block|{
name|QFileInfo
name|info
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|QNetworkCacheMetaData
name|metaData
init|=
name|cache
operator|.
name|call_fileMetaData
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|cacheList
operator|.
name|append
argument_list|(
name|metaData
operator|.
name|url
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|qSort
argument_list|(
name|cacheList
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cacheList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|fileName
init|=
name|cacheList
index|[
name|i
index|]
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fileName
argument_list|,
name|QString
argument_list|(
literal|"http://www.foo.com/%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
operator|+
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|oldCacheVersionFile_data
name|void
name|tst_QNetworkDiskCache
operator|::
name|oldCacheVersionFile_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"pass"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|oldCacheVersionFile
name|void
name|tst_QNetworkDiskCache
operator|::
name|oldCacheVersionFile
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|pass
argument_list|)
expr_stmt|;
name|SubQNetworkDiskCache
name|cache
decl_stmt|;
name|QUrl
name|url
argument_list|(
name|EXAMPLE_URL
argument_list|)
decl_stmt|;
name|cache
operator|.
name|setupWithOne
argument_list|(
name|url
argument_list|)
expr_stmt|;
if|if
condition|(
name|pass
operator|==
literal|0
condition|)
block|{
name|QString
name|name
decl_stmt|;
block|{
name|QTemporaryFile
name|file
argument_list|(
name|cache
operator|.
name|cacheDirectory
argument_list|()
operator|+
literal|"/XXXXXX.d"
argument_list|)
decl_stmt|;
name|file
operator|.
name|setAutoRemove
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|()
argument_list|)
expr_stmt|;
name|QDataStream
name|out
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|out
operator|<<
name|qint32
argument_list|(
literal|0xe8
argument_list|)
expr_stmt|;
name|out
operator|<<
name|qint32
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|name
operator|=
name|file
operator|.
name|fileName
argument_list|()
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|exists
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|QNetworkCacheMetaData
name|metaData
init|=
name|cache
operator|.
name|call_fileMetaData
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|metaData
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QStringList
name|files
init|=
name|countFiles
argument_list|(
name|cache
operator|.
name|cacheDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|files
operator|.
name|count
argument_list|()
argument_list|,
name|NUM_SUBDIRECTORIES
operator|+
literal|3
argument_list|)
expr_stmt|;
comment|// find the file
name|QString
name|cacheFile
decl_stmt|;
foreach|foreach
control|(
name|QString
name|file
decl|,
name|files
control|)
block|{
name|QFileInfo
name|info
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|isFile
argument_list|()
condition|)
name|cacheFile
operator|=
name|file
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|exists
argument_list|(
name|cacheFile
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|cacheFile
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadWrite
argument_list|)
argument_list|)
expr_stmt|;
name|QDataStream
name|out
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|out
operator|<<
name|qint32
argument_list|(
literal|0xe8
argument_list|)
expr_stmt|;
name|out
operator|<<
name|qint32
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QIODevice
modifier|*
name|device
init|=
name|cache
operator|.
name|data
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|device
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|cacheFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|Runner
class|class
name|Runner
super|:
specifier|public
name|QThread
block|{
public|public:
DECL|function|Runner
name|Runner
parameter_list|()
member_init_list|:
name|QThread
argument_list|()
member_init_list|,
name|other
argument_list|(
literal|0
argument_list|)
block|{}
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|QByteArray
name|longString
init|=
literal|"Hello World, this is some long string, well not really that long"
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
operator|++
name|j
control|)
name|longString
operator|+=
name|longString
expr_stmt|;
name|QByteArray
name|longString2
init|=
literal|"Help, I am stuck in an autotest!"
decl_stmt|;
name|QUrl
name|url
argument_list|(
name|EXAMPLE_URL
argument_list|)
decl_stmt|;
name|QNetworkCacheMetaData
name|metaData
decl_stmt|;
name|metaData
operator|.
name|setUrl
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|QNetworkCacheMetaData
operator|::
name|RawHeaderList
name|headers
decl_stmt|;
name|headers
operator|.
name|append
argument_list|(
name|QNetworkCacheMetaData
operator|::
name|RawHeader
argument_list|(
literal|"type"
argument_list|,
literal|"bin"
argument_list|)
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|setRawHeaders
argument_list|(
name|headers
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|setLastModified
argument_list|(
name|dt
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|setSaveToDisk
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QNetworkCacheMetaData
name|metaData2
init|=
name|metaData
decl_stmt|;
name|metaData2
operator|.
name|setExpirationDate
argument_list|(
name|dt
argument_list|)
expr_stmt|;
name|QNetworkDiskCache
name|cache
decl_stmt|;
name|cache
operator|.
name|setCacheDirectory
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
literal|"/diskCache"
argument_list|)
expr_stmt|;
name|int
name|read
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
literal|5000
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|other
operator|&&
name|other
operator|->
name|isFinished
argument_list|()
condition|)
break|break;
if|if
condition|(
name|write
condition|)
block|{
name|QNetworkCacheMetaData
name|m
decl_stmt|;
if|if
condition|(
name|qrand
argument_list|()
operator|%
literal|2
operator|==
literal|0
condition|)
name|m
operator|=
name|metaData
expr_stmt|;
else|else
name|m
operator|=
name|metaData2
expr_stmt|;
if|if
condition|(
name|qrand
argument_list|()
operator|%
literal|20
operator|==
literal|1
condition|)
block|{
comment|//qDebug()<< "write update";
name|cache
operator|.
name|updateMetaData
argument_list|(
name|m
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|QIODevice
modifier|*
name|device
init|=
name|cache
operator|.
name|prepare
argument_list|(
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|qrand
argument_list|()
operator|%
literal|20
operator|==
literal|1
condition|)
block|{
comment|//qDebug()<< "write remove";
name|cache
operator|.
name|remove
argument_list|(
name|url
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|QVERIFY
argument_list|(
name|device
argument_list|)
expr_stmt|;
if|if
condition|(
name|qrand
argument_list|()
operator|%
literal|2
operator|==
literal|0
condition|)
name|device
operator|->
name|write
argument_list|(
name|longString
argument_list|)
expr_stmt|;
else|else
name|device
operator|->
name|write
argument_list|(
name|longString2
argument_list|)
expr_stmt|;
comment|//qDebug()<< "write write"<< device->size();
name|cache
operator|.
name|insert
argument_list|(
name|device
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|QNetworkCacheMetaData
name|gotMetaData
init|=
name|cache
operator|.
name|metaData
argument_list|(
name|url
argument_list|)
decl_stmt|;
if|if
condition|(
name|gotMetaData
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
name|gotMetaData
operator|==
name|metaData
operator|||
name|gotMetaData
operator|==
name|metaData2
argument_list|)
expr_stmt|;
name|QIODevice
modifier|*
name|d
init|=
name|cache
operator|.
name|data
argument_list|(
name|url
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
condition|)
block|{
name|QByteArray
name|x
init|=
name|d
operator|->
name|readAll
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|!=
name|longString
operator|&&
name|x
operator|!=
name|longString2
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
name|x
operator|.
name|length
argument_list|()
operator|<<
name|QString
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|gotMetaData
operator|=
name|cache
operator|.
name|metaData
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
operator|(
name|gotMetaData
operator|.
name|url
argument_list|()
operator|.
name|toString
argument_list|()
operator|)
operator|<<
name|gotMetaData
operator|.
name|lastModified
argument_list|()
operator|<<
name|gotMetaData
operator|.
name|expirationDate
argument_list|()
operator|<<
name|gotMetaData
operator|.
name|saveToDisk
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|gotMetaData
operator|.
name|isValid
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|x
operator|==
name|longString
operator|||
name|x
operator|==
name|longString2
argument_list|)
expr_stmt|;
name|read
operator|++
expr_stmt|;
operator|delete
name|d
expr_stmt|;
block|}
block|}
if|if
condition|(
name|qrand
argument_list|()
operator|%
literal|5
operator|==
literal|1
condition|)
name|cache
operator|.
name|remove
argument_list|(
name|url
argument_list|)
expr_stmt|;
if|if
condition|(
name|qrand
argument_list|()
operator|%
literal|5
operator|==
literal|1
condition|)
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|sleep
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|//qDebug()<< "read!"<< read<< i;
block|}
DECL|member|dt
name|QDateTime
name|dt
decl_stmt|;
DECL|member|write
name|bool
name|write
decl_stmt|;
DECL|member|other
name|Runner
modifier|*
name|other
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|crashWhenParentingCache
name|void
name|tst_QNetworkDiskCache
operator|::
name|crashWhenParentingCache
parameter_list|()
block|{
comment|// the trick here is to not send the complete response
comment|// but some data. So we get a readyRead() and it gets tried
comment|// to be saved to the cache
name|QByteArray
name|data
argument_list|(
literal|"HTTP/1.0 200 OK\r\nCache-Control: max-age=300\r\nAge: 1\r\nContent-Length: 5\r\n\r\n123"
argument_list|)
decl_stmt|;
name|MiniHttpServer
name|server
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|QNetworkAccessManager
modifier|*
name|manager
init|=
operator|new
name|QNetworkAccessManager
argument_list|()
decl_stmt|;
name|QNetworkDiskCache
modifier|*
name|diskCache
init|=
operator|new
name|QNetworkDiskCache
argument_list|(
name|manager
argument_list|)
decl_stmt|;
comment|// parent to qnam!
comment|// we expect the temp dir to be cleaned at some point anyway
name|diskCache
operator|->
name|setCacheDirectory
argument_list|(
name|QString
argument_list|(
literal|"%1/cacheDir_%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|QCoreApplication
operator|::
name|applicationPid
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|->
name|setCache
argument_list|(
name|diskCache
argument_list|)
expr_stmt|;
name|QUrl
name|url
argument_list|(
literal|"http://127.0.0.1:"
operator|+
name|QString
operator|::
name|number
argument_list|(
name|server
operator|.
name|serverPort
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QNetworkRequest
name|request
argument_list|(
name|url
argument_list|)
decl_stmt|;
comment|// request.setAttribute(QNetworkRequest::CacheLoadControlAttribute, QNetworkRequest::AlwaysNetwork);
name|QNetworkReply
modifier|*
name|reply
init|=
name|manager
operator|->
name|get
argument_list|(
name|request
argument_list|)
decl_stmt|;
comment|// new reply is parented to qnam
comment|// wait for readyRead of reply!
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|manager
expr_stmt|;
comment|// crashed before..
block|}
end_function
begin_function
DECL|function|sync
name|void
name|tst_QNetworkDiskCache
operator|::
name|sync
parameter_list|()
block|{
comment|// This tests would be a nice to have, but is currently not supported.
return|return;
name|QTime
name|midnight
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|qsrand
argument_list|(
name|midnight
operator|.
name|secsTo
argument_list|(
name|QTime
operator|::
name|currentTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Runner
name|reader
decl_stmt|;
name|reader
operator|.
name|dt
operator|=
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
expr_stmt|;
name|reader
operator|.
name|write
operator|=
literal|false
expr_stmt|;
name|Runner
name|writer
decl_stmt|;
name|writer
operator|.
name|dt
operator|=
name|reader
operator|.
name|dt
expr_stmt|;
name|writer
operator|.
name|write
operator|=
literal|true
expr_stmt|;
name|writer
operator|.
name|other
operator|=
operator|&
name|reader
expr_stmt|;
name|reader
operator|.
name|other
operator|=
operator|&
name|writer
expr_stmt|;
name|writer
operator|.
name|start
argument_list|()
expr_stmt|;
name|reader
operator|.
name|start
argument_list|()
expr_stmt|;
name|writer
operator|.
name|wait
argument_list|()
expr_stmt|;
name|reader
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QNetworkDiskCache
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qnetworkdiskcache.moc"
end_include
end_unit
