begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"externaltests.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QTemporaryFile>
end_include
begin_include
include|#
directive|include
file|<QtCore/QProcess>
end_include
begin_include
include|#
directive|include
file|<QtCore/QByteArray>
end_include
begin_include
include|#
directive|include
file|<QtCore/QString>
end_include
begin_include
include|#
directive|include
file|<QtCore/QFileInfo>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDir>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDirIterator>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDateTime>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
end_ifdef
begin_define
DECL|macro|DEFAULT_MAKESPEC
define|#
directive|define
name|DEFAULT_MAKESPEC
value|"X:/STLsupport/mkspecs/symbian-abld/"
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|DEFAULT_MAKESPEC
end_ifndef
begin_error
error|#
directive|error
error|DEFAULT_MAKESPEC not defined
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_UNIX
end_ifdef
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|makespec
specifier|static
name|QString
name|makespec
parameter_list|()
block|{
specifier|static
specifier|const
name|char
name|default_makespec
index|[]
init|=
name|DEFAULT_MAKESPEC
decl_stmt|;
specifier|const
name|char
modifier|*
name|p
decl_stmt|;
for|for
control|(
name|p
operator|=
name|default_makespec
operator|+
sizeof|sizeof
argument_list|(
name|default_makespec
argument_list|)
operator|-
literal|1
init|;
name|p
operator|>=
name|default_makespec
condition|;
operator|--
name|p
control|)
if|if
condition|(
operator|*
name|p
operator|==
literal|'/'
operator|||
operator|*
name|p
operator|==
literal|'\\'
condition|)
break|break;
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
name|p
operator|+
literal|1
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|removeRecursive
specifier|static
name|bool
name|removeRecursive
parameter_list|(
specifier|const
name|QString
modifier|&
name|pathname
parameter_list|)
block|{
name|QFileInfo
name|fi
argument_list|(
name|pathname
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fi
operator|.
name|exists
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|fi
operator|.
name|isFile
argument_list|()
condition|)
return|return
name|QFile
operator|::
name|remove
argument_list|(
name|pathname
argument_list|)
return|;
if|if
condition|(
operator|!
name|fi
operator|.
name|isDir
argument_list|()
condition|)
block|{
comment|//  not a file or directory. How do I remove it?
return|return
literal|false
return|;
block|}
comment|// not empty -- we must empty it first
name|QDirIterator
name|di
argument_list|(
name|pathname
argument_list|,
name|QDir
operator|::
name|AllEntries
operator||
name|QDir
operator|::
name|Hidden
operator||
name|QDir
operator|::
name|System
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
decl_stmt|;
while|while
condition|(
name|di
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|di
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|di
operator|.
name|fileInfo
argument_list|()
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|di
operator|.
name|fileInfo
argument_list|()
operator|.
name|isSymLink
argument_list|()
condition|)
continue|continue;
name|bool
name|ok
decl_stmt|;
if|if
condition|(
name|di
operator|.
name|fileInfo
argument_list|()
operator|.
name|isFile
argument_list|()
operator|||
name|di
operator|.
name|fileInfo
argument_list|()
operator|.
name|isSymLink
argument_list|()
condition|)
name|ok
operator|=
name|QFile
operator|::
name|remove
argument_list|(
name|di
operator|.
name|filePath
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|ok
operator|=
name|removeRecursive
argument_list|(
name|di
operator|.
name|filePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
name|QDir
name|dir
argument_list|(
name|pathname
argument_list|)
decl_stmt|;
name|QString
name|dirname
init|=
name|dir
operator|.
name|dirName
argument_list|()
decl_stmt|;
name|dir
operator|.
name|cdUp
argument_list|()
expr_stmt|;
return|return
name|dir
operator|.
name|rmdir
argument_list|(
name|dirname
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_namespace
DECL|namespace|QTest
namespace|namespace
name|QTest
block|{
DECL|class|QExternalProcess
class|class
name|QExternalProcess
super|:
specifier|public
name|QProcess
block|{
protected|protected:
ifdef|#
directive|ifdef
name|Q_OS_UNIX
DECL|function|setupChildProcess
name|void
name|setupChildProcess
parameter_list|()
block|{
comment|// run in user code
name|QProcess
operator|::
name|setupChildProcess
argument_list|()
expr_stmt|;
if|if
condition|(
name|processChannelMode
argument_list|()
operator|==
name|ForwardedChannels
condition|)
block|{
comment|// reopen /dev/tty into stdin
name|int
name|fd
init|=
operator|::
name|open
argument_list|(
literal|"/dev/tty"
argument_list|,
name|O_RDONLY
argument_list|)
decl_stmt|;
if|if
condition|(
name|fd
operator|==
operator|-
literal|1
condition|)
return|return;
operator|::
name|dup2
argument_list|(
name|fd
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|::
name|close
argument_list|(
name|fd
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
block|}
class|;
DECL|class|QExternalTestPrivate
class|class
name|QExternalTestPrivate
block|{
public|public:
DECL|function|QExternalTestPrivate
name|QExternalTestPrivate
parameter_list|()
member_init_list|:
name|qtModules
argument_list|(
name|QExternalTest
operator|::
name|QtCore
operator||
name|QExternalTest
operator|::
name|QtGui
operator||
name|QExternalTest
operator|::
name|QtTest
argument_list|)
member_init_list|,
name|appType
argument_list|(
name|QExternalTest
operator|::
name|AutoApplication
argument_list|)
member_init_list|,
name|exitCode
argument_list|(
operator|-
literal|1
argument_list|)
block|{         }
DECL|function|~QExternalTestPrivate
name|~
name|QExternalTestPrivate
parameter_list|()
block|{
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|enum|Target
DECL|enumerator|Compile
DECL|enumerator|Link
DECL|enumerator|Run
enum|enum
name|Target
block|{
name|Compile
block|,
name|Link
block|,
name|Run
block|}
enum|;
DECL|member|qmakeLines
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|qmakeLines
decl_stmt|;
DECL|member|extraProgramSources
name|QStringList
name|extraProgramSources
decl_stmt|;
DECL|member|programHeader
name|QByteArray
name|programHeader
decl_stmt|;
DECL|member|qtModules
name|QExternalTest
operator|::
name|QtModules
name|qtModules
decl_stmt|;
DECL|member|appType
name|QExternalTest
operator|::
name|ApplicationType
name|appType
decl_stmt|;
DECL|member|temporaryDir
name|QString
name|temporaryDir
decl_stmt|;
DECL|member|sourceCode
name|QByteArray
name|sourceCode
decl_stmt|;
DECL|member|std_out
name|QByteArray
name|std_out
decl_stmt|;
DECL|member|std_err
name|QByteArray
name|std_err
decl_stmt|;
DECL|member|exitCode
name|int
name|exitCode
decl_stmt|;
DECL|member|failedStage
name|QExternalTest
operator|::
name|Stage
name|failedStage
decl_stmt|;
name|void
name|clear
parameter_list|()
function_decl|;
name|bool
name|tryCompile
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|body
parameter_list|)
function_decl|;
name|bool
name|tryLink
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|body
parameter_list|)
function_decl|;
name|bool
name|tryRun
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|body
parameter_list|)
function_decl|;
private|private:
name|void
name|removeTemporaryDirectory
parameter_list|()
function_decl|;
name|bool
name|createTemporaryDirectory
parameter_list|()
function_decl|;
name|bool
name|prepareSourceCode
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|body
parameter_list|)
function_decl|;
name|bool
name|createProjectFile
parameter_list|()
function_decl|;
name|bool
name|runQmake
parameter_list|()
function_decl|;
name|bool
name|runMake
parameter_list|(
name|Target
name|target
parameter_list|)
function_decl|;
name|bool
name|commonSetup
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|body
parameter_list|)
function_decl|;
block|}
class|;
DECL|function|QExternalTest
name|QExternalTest
operator|::
name|QExternalTest
parameter_list|()
member_init_list|:
name|d
argument_list|(
operator|new
name|QExternalTestPrivate
argument_list|)
block|{     }
DECL|function|~QExternalTest
name|QExternalTest
operator|::
name|~
name|QExternalTest
parameter_list|()
block|{
operator|delete
name|d
expr_stmt|;
block|}
DECL|function|qmakeSettings
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|QExternalTest
operator|::
name|qmakeSettings
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|qmakeLines
return|;
block|}
DECL|function|setQmakeSettings
name|void
name|QExternalTest
operator|::
name|setQmakeSettings
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QByteArray
argument_list|>
modifier|&
name|settings
parameter_list|)
block|{
name|d
operator|->
name|qmakeLines
operator|=
name|settings
expr_stmt|;
block|}
DECL|function|qtModules
name|QExternalTest
operator|::
name|QtModules
name|QExternalTest
operator|::
name|qtModules
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|qtModules
return|;
block|}
DECL|function|setQtModules
name|void
name|QExternalTest
operator|::
name|setQtModules
parameter_list|(
name|QtModules
name|modules
parameter_list|)
block|{
name|d
operator|->
name|qtModules
operator|=
name|modules
expr_stmt|;
block|}
DECL|function|applicationType
name|QExternalTest
operator|::
name|ApplicationType
name|QExternalTest
operator|::
name|applicationType
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|appType
return|;
block|}
DECL|function|setApplicationType
name|void
name|QExternalTest
operator|::
name|setApplicationType
parameter_list|(
name|ApplicationType
name|type
parameter_list|)
block|{
name|d
operator|->
name|appType
operator|=
name|type
expr_stmt|;
block|}
DECL|function|extraProgramSources
name|QStringList
name|QExternalTest
operator|::
name|extraProgramSources
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|extraProgramSources
return|;
block|}
DECL|function|setExtraProgramSources
name|void
name|QExternalTest
operator|::
name|setExtraProgramSources
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|extra
parameter_list|)
block|{
name|d
operator|->
name|extraProgramSources
operator|=
name|extra
expr_stmt|;
block|}
DECL|function|programHeader
name|QByteArray
name|QExternalTest
operator|::
name|programHeader
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|programHeader
return|;
block|}
DECL|function|setProgramHeader
name|void
name|QExternalTest
operator|::
name|setProgramHeader
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|header
parameter_list|)
block|{
name|d
operator|->
name|programHeader
operator|=
name|header
expr_stmt|;
block|}
DECL|function|tryCompile
name|bool
name|QExternalTest
operator|::
name|tryCompile
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|body
parameter_list|)
block|{
return|return
name|d
operator|->
name|tryCompile
argument_list|(
name|body
argument_list|)
operator|&&
name|d
operator|->
name|exitCode
operator|==
literal|0
return|;
block|}
DECL|function|tryLink
name|bool
name|QExternalTest
operator|::
name|tryLink
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|body
parameter_list|)
block|{
return|return
name|d
operator|->
name|tryLink
argument_list|(
name|body
argument_list|)
operator|&&
name|d
operator|->
name|exitCode
operator|==
literal|0
return|;
block|}
DECL|function|tryRun
name|bool
name|QExternalTest
operator|::
name|tryRun
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|body
parameter_list|)
block|{
return|return
name|d
operator|->
name|tryRun
argument_list|(
name|body
argument_list|)
operator|&&
name|d
operator|->
name|exitCode
operator|==
literal|0
return|;
block|}
DECL|function|tryCompileFail
name|bool
name|QExternalTest
operator|::
name|tryCompileFail
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|body
parameter_list|)
block|{
return|return
name|d
operator|->
name|tryCompile
argument_list|(
name|body
argument_list|)
operator|&&
name|d
operator|->
name|exitCode
operator|!=
literal|0
return|;
block|}
DECL|function|tryLinkFail
name|bool
name|QExternalTest
operator|::
name|tryLinkFail
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|body
parameter_list|)
block|{
return|return
name|d
operator|->
name|tryLink
argument_list|(
name|body
argument_list|)
operator|&&
name|d
operator|->
name|exitCode
operator|!=
literal|0
return|;
block|}
DECL|function|tryRunFail
name|bool
name|QExternalTest
operator|::
name|tryRunFail
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|body
parameter_list|)
block|{
return|return
name|d
operator|->
name|tryRun
argument_list|(
name|body
argument_list|)
operator|&&
name|d
operator|->
name|exitCode
operator|!=
literal|0
return|;
block|}
DECL|function|failedStage
name|QExternalTest
operator|::
name|Stage
name|QExternalTest
operator|::
name|failedStage
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|failedStage
return|;
block|}
DECL|function|exitCode
name|int
name|QExternalTest
operator|::
name|exitCode
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|exitCode
return|;
block|}
DECL|function|fullProgramSource
name|QByteArray
name|QExternalTest
operator|::
name|fullProgramSource
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|sourceCode
return|;
block|}
DECL|function|standardOutput
name|QByteArray
name|QExternalTest
operator|::
name|standardOutput
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|std_out
return|;
block|}
DECL|function|standardError
name|QByteArray
name|QExternalTest
operator|::
name|standardError
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|std_err
return|;
block|}
DECL|function|errorReport
name|QString
name|QExternalTest
operator|::
name|errorReport
parameter_list|()
specifier|const
block|{
specifier|const
name|char
modifier|*
name|stage
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|d
operator|->
name|failedStage
condition|)
block|{
case|case
name|FileStage
case|:
name|stage
operator|=
literal|"creating files"
expr_stmt|;
break|break;
case|case
name|QmakeStage
case|:
name|stage
operator|=
literal|"executing qmake"
expr_stmt|;
break|break;
case|case
name|CompilationStage
case|:
name|stage
operator|=
literal|"during compilation"
expr_stmt|;
break|break;
case|case
name|LinkStage
case|:
name|stage
operator|=
literal|"during linking"
expr_stmt|;
break|break;
case|case
name|RunStage
case|:
name|stage
operator|=
literal|"executing program"
expr_stmt|;
break|break;
block|}
name|QString
name|report
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"External test failed %1 with exit code %4\n"
literal|"==== standard error: ====\n"
literal|"%2\n"
literal|"==== standard output: ====\n"
literal|"%3\n"
literal|"==== ====\n"
argument_list|)
decl_stmt|;
return|return
name|report
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|stage
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|d
operator|->
name|std_err
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|d
operator|->
name|std_out
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|d
operator|->
name|exitCode
argument_list|)
return|;
block|}
comment|// actual execution code
DECL|function|clear
name|void
name|QExternalTestPrivate
operator|::
name|clear
parameter_list|()
block|{
if|if
condition|(
operator|!
name|temporaryDir
operator|.
name|isEmpty
argument_list|()
condition|)
name|removeTemporaryDirectory
argument_list|()
expr_stmt|;
name|sourceCode
operator|.
name|clear
argument_list|()
expr_stmt|;
name|std_out
operator|.
name|clear
argument_list|()
expr_stmt|;
name|std_err
operator|.
name|clear
argument_list|()
expr_stmt|;
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|failedStage
operator|=
name|QExternalTest
operator|::
name|FileStage
expr_stmt|;
block|}
DECL|function|removeTemporaryDirectory
name|void
name|QExternalTestPrivate
operator|::
name|removeTemporaryDirectory
parameter_list|()
block|{
if|if
condition|(
name|temporaryDir
operator|.
name|isEmpty
argument_list|()
condition|)
name|qWarning
argument_list|()
operator|<<
literal|"Temporary directory is expected to be non-empty"
expr_stmt|;
name|removeRecursive
argument_list|(
name|temporaryDir
argument_list|)
expr_stmt|;
name|temporaryDir
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|function|prepareSourceCode
name|bool
name|QExternalTestPrivate
operator|::
name|prepareSourceCode
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|body
parameter_list|)
block|{
name|sourceCode
operator|.
name|clear
argument_list|()
expr_stmt|;
name|sourceCode
operator|.
name|reserve
argument_list|(
literal|8192
argument_list|)
expr_stmt|;
name|sourceCode
operator|+=
name|programHeader
expr_stmt|;
comment|// Add Qt header includes
if|if
condition|(
name|qtModules
operator|&
name|QExternalTest
operator|::
name|QtCore
condition|)
name|sourceCode
operator|+=
literal|"#include<QtCore/QtCore>\n"
expr_stmt|;
if|if
condition|(
name|qtModules
operator|&
name|QExternalTest
operator|::
name|QtGui
condition|)
name|sourceCode
operator|+=
literal|"#include<QtGui/QtGui>\n"
expr_stmt|;
if|if
condition|(
name|qtModules
operator|&
name|QExternalTest
operator|::
name|QtNetwork
condition|)
name|sourceCode
operator|+=
literal|"#include<QtNetwork/QtNetwork>\n"
expr_stmt|;
if|if
condition|(
name|qtModules
operator|&
name|QExternalTest
operator|::
name|QtXml
condition|)
name|sourceCode
operator|+=
literal|"#include<QtXml/QtXml>\n"
expr_stmt|;
if|if
condition|(
name|qtModules
operator|&
name|QExternalTest
operator|::
name|QtXmlPatterns
condition|)
name|sourceCode
operator|+=
literal|"#include<QtXmlPatterns/QtXmlPatterns>\n"
expr_stmt|;
if|if
condition|(
name|qtModules
operator|&
name|QExternalTest
operator|::
name|QtOpenGL
condition|)
name|sourceCode
operator|+=
literal|"#include<QtOpenGL/QtOpenGL>\n"
expr_stmt|;
if|if
condition|(
name|qtModules
operator|&
name|QExternalTest
operator|::
name|QtSql
condition|)
name|sourceCode
operator|+=
literal|"#include<QtSql/QtSql>\n"
expr_stmt|;
if|if
condition|(
name|qtModules
operator|&
name|QExternalTest
operator|::
name|Qt3Support
condition|)
name|sourceCode
operator|+=
literal|"#include<Qt3Support/Qt3Support>\n"
expr_stmt|;
if|if
condition|(
name|qtModules
operator|&
name|QExternalTest
operator|::
name|QtSvg
condition|)
name|sourceCode
operator|+=
literal|"#include<QtSvg/QtSvg>\n"
expr_stmt|;
if|if
condition|(
name|qtModules
operator|&
name|QExternalTest
operator|::
name|QtScript
condition|)
name|sourceCode
operator|+=
literal|"#include<QtScript/QtScript>\n"
expr_stmt|;
if|if
condition|(
name|qtModules
operator|&
name|QExternalTest
operator|::
name|QtTest
condition|)
name|sourceCode
operator|+=
literal|"#include<QtTest/QtTest>\n"
expr_stmt|;
if|if
condition|(
name|qtModules
operator|&
name|QExternalTest
operator|::
name|QtDBus
condition|)
name|sourceCode
operator|+=
literal|"#include<QtDBus/QtDBus>\n"
expr_stmt|;
if|if
condition|(
name|qtModules
operator|&
name|QExternalTest
operator|::
name|QtWebKit
condition|)
name|sourceCode
operator|+=
literal|"#include<QtWebKit/QtWebKit>\n"
expr_stmt|;
if|if
condition|(
name|qtModules
operator|&
name|QExternalTest
operator|::
name|Phonon
condition|)
name|sourceCode
operator|+=
literal|"#include<Phonon/Phonon>\n"
expr_stmt|;
name|sourceCode
operator|+=
literal|"#include<stdlib.h>\n"
literal|"#include<stddef.h>\n"
expr_stmt|;
name|sourceCode
operator|+=
literal|"\n"
literal|"void q_external_test_user_code()\n"
literal|"{\n"
literal|"#include \"user_code.cpp\"\n"
literal|"}\n"
literal|"\n"
literal|"#ifdef Q_OS_WIN\n"
literal|"#include<windows.h>\n"
literal|"static void q_test_setup()\n"
literal|"{\n"
literal|"    SetErrorMode(SEM_FAILCRITICALERRORS | SEM_NOGPFAULTERRORBOX | SEM_NOOPENFILEERRORBOX);\n"
literal|"}\n"
literal|"#else\n"
literal|"static void q_test_setup() { }\n"
literal|"#endif\n"
literal|"int main(int argc, char **argv)\n"
literal|"{\n"
expr_stmt|;
switch|switch
condition|(
name|appType
condition|)
block|{
name|applicationless
label|:
case|case
name|QExternalTest
operator|::
name|Applicationless
case|:
name|sourceCode
operator|+=
literal|"    (void)argc; (void)argv;\n"
expr_stmt|;
break|break;
name|coreapplication
label|:
case|case
name|QExternalTest
operator|::
name|QCoreApplication
case|:
name|sourceCode
operator|+=
literal|"    QCoreApplication app(argc, argv);\n"
expr_stmt|;
break|break;
case|case
name|QExternalTest
operator|::
name|QApplicationTty
case|:
name|sourceCode
operator|+=
literal|"    QApplication app(argc, argv, QApplication::Tty);\n"
expr_stmt|;
break|break;
name|guiapplication
label|:
case|case
name|QExternalTest
operator|::
name|QApplicationGuiClient
case|:
name|sourceCode
operator|+=
literal|"    QApplication app(argc, argv, QApplication::GuiClient);\n"
expr_stmt|;
break|break;
case|case
name|QExternalTest
operator|::
name|QApplicationGuiServer
case|:
name|sourceCode
operator|+=
literal|"    QApplication app(argc, argv, QApplication::GuiServer);\n"
expr_stmt|;
break|break;
case|case
name|QExternalTest
operator|::
name|AutoApplication
case|:
if|if
condition|(
name|qtModules
operator|&
name|QExternalTest
operator|::
name|QtGui
condition|)
goto|goto
name|guiapplication
goto|;
if|if
condition|(
name|qtModules
operator|==
literal|0
condition|)
goto|goto
name|applicationless
goto|;
goto|goto
name|coreapplication
goto|;
block|}
name|sourceCode
operator|+=
literal|"    q_test_setup();\n"
literal|"    q_external_test_user_code();\n"
literal|"    return 0;\n"
literal|"}\n"
expr_stmt|;
name|QFile
name|sourceFile
argument_list|(
name|temporaryDir
operator|+
name|QLatin1String
argument_list|(
literal|"/project.cpp"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sourceFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Truncate
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
name|std_err
operator|=
name|sourceFile
operator|.
name|errorString
argument_list|()
operator|.
name|toLocal8Bit
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
name|sourceFile
operator|.
name|write
argument_list|(
name|sourceCode
argument_list|)
expr_stmt|;
name|sourceFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|sourceFile
operator|.
name|setFileName
argument_list|(
name|temporaryDir
operator|+
name|QLatin1String
argument_list|(
literal|"/user_code.cpp"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sourceFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Truncate
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
name|std_err
operator|=
name|sourceFile
operator|.
name|errorString
argument_list|()
operator|.
name|toLocal8Bit
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
name|sourceFile
operator|.
name|write
argument_list|(
name|body
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|createTemporaryDirectory
name|bool
name|QExternalTestPrivate
operator|::
name|createTemporaryDirectory
parameter_list|()
block|{
name|QDir
name|temp
init|=
name|QDir
operator|::
name|temp
argument_list|()
decl_stmt|;
name|QString
name|subdir
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"qexternaltest-%1-%2-%3"
argument_list|)
operator|.
name|arg
argument_list|(
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
operator|.
name|toString
argument_list|(
name|QLatin1String
argument_list|(
literal|"yyyyMMddhhmmss"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|quintptr
argument_list|(
name|this
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|16
argument_list|)
operator|.
name|arg
argument_list|(
name|qrand
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|temp
operator|.
name|mkdir
argument_list|(
name|subdir
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|temp
operator|.
name|cd
argument_list|(
name|subdir
argument_list|)
condition|)
return|return
literal|false
return|;
name|temporaryDir
operator|=
name|temp
operator|.
name|absolutePath
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|createProjectFile
name|bool
name|QExternalTestPrivate
operator|::
name|createProjectFile
parameter_list|()
block|{
if|if
condition|(
name|temporaryDir
operator|.
name|isEmpty
argument_list|()
condition|)
name|qWarning
argument_list|()
operator|<<
literal|"Temporary directory is expected to be non-empty"
expr_stmt|;
name|QFile
name|projectFile
argument_list|(
name|temporaryDir
operator|+
name|QLatin1String
argument_list|(
literal|"/project.pro"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|projectFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Truncate
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
name|std_err
operator|=
name|projectFile
operator|.
name|errorString
argument_list|()
operator|.
name|toLocal8Bit
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
name|projectFile
operator|.
name|write
argument_list|(
literal|"TEMPLATE = app\n"
literal|"\n"
literal|"TARGET   = externaltest\n"
literal|"CONFIG   -= app_bundle\n"
comment|// for the Mac
literal|"CONFIG   -= debug_and_release\n"
literal|"DESTDIR  = .\n"
literal|"OBJECTS_DIR = .\n"
literal|"UI_DIR   = .\n"
literal|"MOC_DIR  = .\n"
literal|"RCC_DIR  = .\n"
literal|"HEADERS  +=\n"
literal|"SOURCES  += project.cpp\n"
literal|"QT       -= core gui\n"
literal|"INCLUDEPATH += . "
argument_list|)
expr_stmt|;
name|projectFile
operator|.
name|write
argument_list|(
name|QFile
operator|::
name|encodeName
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
name|projectFile
operator|.
name|write
argument_list|(
literal|"\nCONFIG  += debug\n"
argument_list|)
expr_stmt|;
else|#
directive|else
name|projectFile
operator|.
name|write
argument_list|(
literal|"\nCONFIG  += release\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QByteArray
name|extraSources
init|=
name|QFile
operator|::
name|encodeName
argument_list|(
name|extraProgramSources
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|extraSources
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|projectFile
operator|.
name|write
argument_list|(
literal|"SOURCES  += "
argument_list|)
expr_stmt|;
name|projectFile
operator|.
name|write
argument_list|(
name|extraSources
argument_list|)
expr_stmt|;
name|projectFile
operator|.
name|putChar
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
comment|// Add Qt modules
if|if
condition|(
name|qtModules
operator|&
name|QExternalTest
operator|::
name|QtCore
condition|)
name|projectFile
operator|.
name|write
argument_list|(
literal|"QT += core\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|qtModules
operator|&
name|QExternalTest
operator|::
name|QtGui
condition|)
name|projectFile
operator|.
name|write
argument_list|(
literal|"QT += gui\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|qtModules
operator|&
name|QExternalTest
operator|::
name|QtNetwork
condition|)
name|projectFile
operator|.
name|write
argument_list|(
literal|"QT += network\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|qtModules
operator|&
name|QExternalTest
operator|::
name|QtXml
condition|)
name|projectFile
operator|.
name|write
argument_list|(
literal|"QT += xml\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|qtModules
operator|&
name|QExternalTest
operator|::
name|QtXmlPatterns
condition|)
name|projectFile
operator|.
name|write
argument_list|(
literal|"QT += xmlpatterns\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|qtModules
operator|&
name|QExternalTest
operator|::
name|QtOpenGL
condition|)
name|projectFile
operator|.
name|write
argument_list|(
literal|"QT += opengl\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|qtModules
operator|&
name|QExternalTest
operator|::
name|QtSql
condition|)
name|projectFile
operator|.
name|write
argument_list|(
literal|"QT += sql\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|qtModules
operator|&
name|QExternalTest
operator|::
name|Qt3Support
condition|)
name|projectFile
operator|.
name|write
argument_list|(
literal|"QT += qt3support\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|qtModules
operator|&
name|QExternalTest
operator|::
name|QtSvg
condition|)
name|projectFile
operator|.
name|write
argument_list|(
literal|"QT += svg\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|qtModules
operator|&
name|QExternalTest
operator|::
name|QtScript
condition|)
name|projectFile
operator|.
name|write
argument_list|(
literal|"QT += script\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|qtModules
operator|&
name|QExternalTest
operator|::
name|QtTest
condition|)
name|projectFile
operator|.
name|write
argument_list|(
literal|"QT += testlib\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|qtModules
operator|&
name|QExternalTest
operator|::
name|QtDBus
condition|)
name|projectFile
operator|.
name|write
argument_list|(
literal|"QT += dbus\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|qtModules
operator|&
name|QExternalTest
operator|::
name|QtWebKit
condition|)
name|projectFile
operator|.
name|write
argument_list|(
literal|"QT += webkit\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|qtModules
operator|&
name|QExternalTest
operator|::
name|Phonon
condition|)
name|projectFile
operator|.
name|write
argument_list|(
literal|"QT += phonon\n"
argument_list|)
expr_stmt|;
name|projectFile
operator|.
name|write
argument_list|(
literal|"\n### User-specified settings start ###\n"
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QByteArray
name|line
decl|,
name|qmakeLines
control|)
block|{
name|projectFile
operator|.
name|write
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|projectFile
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|projectFile
operator|.
name|write
argument_list|(
literal|"\n### User-specified settings end ###\n"
argument_list|)
expr_stmt|;
comment|// Use qmake to just compile:
name|projectFile
operator|.
name|write
argument_list|(
literal|"\n"
literal|"test_compile.depends        += $(OBJECTS)\n"
literal|"QMAKE_EXTRA_TARGETS += test_compile\n"
argument_list|)
expr_stmt|;
comment|// Use qmake to run the app too:
name|projectFile
operator|.
name|write
argument_list|(
literal|"\n"
literal|"unix:test_run.commands     = ./$(QMAKE_TARGET)\n"
literal|"else:test_run.commands     = $(QMAKE_TARGET)\n"
literal|"embedded:test_run.commands += -qws\n"
literal|"QMAKE_EXTRA_TARGETS += test_run\n"
argument_list|)
expr_stmt|;
comment|// Use qmake to debug:
name|projectFile
operator|.
name|write
argument_list|(
literal|"\n"
literal|"*-g++* {\n"
literal|"    unix:test_debug.commands      =  gdb --args ./$(QMAKE_TARGET)\n"
literal|"    else:test_debug.commands      = gdb --args $(QMAKE_TARGET)\n"
literal|"    embedded:test_debug.commands += -qws\n"
literal|"    QMAKE_EXTRA_TARGETS += test_debug\n"
literal|"}\n"
argument_list|)
expr_stmt|;
comment|// Also use qmake to run the app with valgrind:
name|projectFile
operator|.
name|write
argument_list|(
literal|"\n"
literal|"unix:test_valgrind.commands      = valgrind ./$(QMAKE_TARGET)\n"
literal|"else:test_valgrind.commands      = valgrind $(QMAKE_TARGET)\n"
literal|"embedded:test_valgrind.commands += -qws\n"
literal|"QMAKE_EXTRA_TARGETS    += test_valgrind\n"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|runQmake
name|bool
name|QExternalTestPrivate
operator|::
name|runQmake
parameter_list|()
block|{
if|if
condition|(
name|temporaryDir
operator|.
name|isEmpty
argument_list|()
condition|)
name|qWarning
argument_list|()
operator|<<
literal|"Temporary directory is expected to be non-empty"
expr_stmt|;
if|if
condition|(
operator|!
name|createProjectFile
argument_list|()
condition|)
return|return
literal|false
return|;
name|failedStage
operator|=
name|QExternalTest
operator|::
name|QmakeStage
expr_stmt|;
name|QProcess
name|qmake
decl_stmt|;
name|QStringList
name|args
decl_stmt|;
name|args
operator|<<
name|QLatin1String
argument_list|(
literal|"-makefile"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"-spec"
argument_list|)
operator|<<
name|makespec
argument_list|()
operator|<<
name|QLatin1String
argument_list|(
literal|"project.pro"
argument_list|)
expr_stmt|;
name|qmake
operator|.
name|setWorkingDirectory
argument_list|(
name|temporaryDir
argument_list|)
expr_stmt|;
name|qmake
operator|.
name|start
argument_list|(
name|QLatin1String
argument_list|(
literal|"qmake"
argument_list|)
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|std_out
operator|+=
literal|"### --- stdout from qmake --- ###\n"
expr_stmt|;
name|std_err
operator|+=
literal|"### --- stderr from qmake --- ###\n"
expr_stmt|;
name|bool
name|ok
init|=
name|qmake
operator|.
name|waitForStarted
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
block|{
name|exitCode
operator|=
literal|255
expr_stmt|;
name|std_err
operator|+=
literal|"qmake: "
expr_stmt|;
name|std_err
operator|+=
name|qmake
operator|.
name|errorString
argument_list|()
operator|.
name|toLocal8Bit
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ok
operator|=
name|qmake
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
name|exitCode
operator|=
name|qmake
operator|.
name|exitCode
argument_list|()
expr_stmt|;
name|std_out
operator|+=
name|qmake
operator|.
name|readAllStandardOutput
argument_list|()
expr_stmt|;
name|std_err
operator|+=
name|qmake
operator|.
name|readAllStandardError
argument_list|()
expr_stmt|;
block|}
return|return
name|ok
operator|&&
name|exitCode
operator|==
literal|0
return|;
block|}
DECL|function|runMake
name|bool
name|QExternalTestPrivate
operator|::
name|runMake
parameter_list|(
name|Target
name|target
parameter_list|)
block|{
if|if
condition|(
name|temporaryDir
operator|.
name|isEmpty
argument_list|()
condition|)
name|qWarning
argument_list|()
operator|<<
literal|"Temporary directory is expected to be non-empty"
expr_stmt|;
name|QExternalProcess
name|make
decl_stmt|;
name|make
operator|.
name|setWorkingDirectory
argument_list|(
name|temporaryDir
argument_list|)
expr_stmt|;
name|QStringList
name|environment
init|=
name|QProcess
operator|::
name|systemEnvironment
argument_list|()
decl_stmt|;
name|environment
operator|+=
name|QLatin1String
argument_list|(
literal|"LC_ALL=C"
argument_list|)
expr_stmt|;
name|make
operator|.
name|setEnvironment
argument_list|(
name|environment
argument_list|)
expr_stmt|;
name|QStringList
name|args
decl_stmt|;
name|QProcess
operator|::
name|ProcessChannelMode
name|channelMode
init|=
name|QProcess
operator|::
name|SeparateChannels
decl_stmt|;
if|if
condition|(
name|target
operator|==
name|Compile
condition|)
block|{
name|args
operator|<<
name|QLatin1String
argument_list|(
literal|"test_compile"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|target
operator|==
name|Run
condition|)
block|{
name|QByteArray
name|run
init|=
name|qgetenv
argument_list|(
literal|"QTEST_EXTERNAL_RUN"
argument_list|)
decl_stmt|;
if|if
condition|(
name|run
operator|==
literal|"valgrind"
condition|)
name|args
operator|<<
name|QLatin1String
argument_list|(
literal|"test_valgrind"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|run
operator|==
literal|"debug"
condition|)
name|args
operator|<<
name|QLatin1String
argument_list|(
literal|"test_debug"
argument_list|)
expr_stmt|;
else|else
name|args
operator|<<
name|QLatin1String
argument_list|(
literal|"test_run"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|run
operator|.
name|isEmpty
argument_list|()
condition|)
name|channelMode
operator|=
name|QProcess
operator|::
name|ForwardedChannels
expr_stmt|;
block|}
name|make
operator|.
name|setProcessChannelMode
argument_list|(
name|channelMode
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|char
name|makes
index|[]
init|=
literal|"nmake.exe\0"
comment|//for visual c++
literal|"mingw32-make.exe\0"
comment|//for mingw
literal|"gmake\0"
literal|"make\0"
decl_stmt|;
for|for
control|(
specifier|const
name|char
modifier|*
name|p
init|=
name|makes
init|;
operator|*
name|p
condition|;
name|p
operator|+=
name|strlen
argument_list|(
name|p
argument_list|)
operator|+
literal|1
control|)
block|{
name|make
operator|.
name|start
argument_list|(
name|QLatin1String
argument_list|(
name|p
argument_list|)
argument_list|,
name|args
argument_list|)
expr_stmt|;
if|if
condition|(
name|make
operator|.
name|waitForStarted
argument_list|()
condition|)
break|break;
block|}
if|if
condition|(
name|make
operator|.
name|state
argument_list|()
operator|!=
name|QProcess
operator|::
name|Running
condition|)
block|{
name|exitCode
operator|=
literal|255
expr_stmt|;
name|std_err
operator|+=
literal|"make: "
expr_stmt|;
name|std_err
operator|+=
name|make
operator|.
name|errorString
argument_list|()
operator|.
name|toLocal8Bit
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
name|make
operator|.
name|closeWriteChannel
argument_list|()
expr_stmt|;
name|bool
name|ok
init|=
name|make
operator|.
name|waitForFinished
argument_list|(
name|channelMode
operator|==
name|QProcess
operator|::
name|ForwardedChannels
condition|?
operator|-
literal|1
else|:
literal|60000
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
name|make
operator|.
name|terminate
argument_list|()
expr_stmt|;
name|exitCode
operator|=
name|make
operator|.
name|exitCode
argument_list|()
expr_stmt|;
name|std_out
operator|+=
name|make
operator|.
name|readAllStandardOutput
argument_list|()
expr_stmt|;
name|std_err
operator|+=
name|make
operator|.
name|readAllStandardError
argument_list|()
expr_stmt|;
return|return
name|ok
return|;
block|}
DECL|function|commonSetup
name|bool
name|QExternalTestPrivate
operator|::
name|commonSetup
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|body
parameter_list|)
block|{
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|createTemporaryDirectory
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|createProjectFile
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|prepareSourceCode
argument_list|(
name|body
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|runQmake
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
DECL|function|tryCompile
name|bool
name|QExternalTestPrivate
operator|::
name|tryCompile
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|body
parameter_list|)
block|{
if|if
condition|(
operator|!
name|commonSetup
argument_list|(
name|body
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// compile
name|failedStage
operator|=
name|QExternalTest
operator|::
name|CompilationStage
expr_stmt|;
name|std_out
operator|+=
literal|"\n### --- stdout from make (compilation) --- ###\n"
expr_stmt|;
name|std_err
operator|+=
literal|"\n### --- stderr from make (compilation) --- ###\n"
expr_stmt|;
return|return
name|runMake
argument_list|(
name|Compile
argument_list|)
return|;
block|}
DECL|function|tryLink
name|bool
name|QExternalTestPrivate
operator|::
name|tryLink
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|body
parameter_list|)
block|{
if|if
condition|(
operator|!
name|tryCompile
argument_list|(
name|body
argument_list|)
operator|||
name|exitCode
operator|!=
literal|0
condition|)
return|return
literal|false
return|;
comment|// link
name|failedStage
operator|=
name|QExternalTest
operator|::
name|LinkStage
expr_stmt|;
name|std_out
operator|+=
literal|"\n### --- stdout from make (linking) --- ###\n"
expr_stmt|;
name|std_err
operator|+=
literal|"\n### --- stderr from make (linking) --- ###\n"
expr_stmt|;
return|return
name|runMake
argument_list|(
name|Link
argument_list|)
return|;
block|}
DECL|function|tryRun
name|bool
name|QExternalTestPrivate
operator|::
name|tryRun
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|body
parameter_list|)
block|{
if|if
condition|(
operator|!
name|tryLink
argument_list|(
name|body
argument_list|)
operator|||
name|exitCode
operator|!=
literal|0
condition|)
return|return
literal|false
return|;
comment|// run
name|failedStage
operator|=
name|QExternalTest
operator|::
name|RunStage
expr_stmt|;
name|std_out
operator|+=
literal|"\n### --- stdout from process --- ###\n"
expr_stmt|;
name|std_err
operator|+=
literal|"\n### --- stderr from process --- ###\n"
expr_stmt|;
return|return
name|runMake
argument_list|(
name|Run
argument_list|)
return|;
block|}
block|}
end_namespace
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
