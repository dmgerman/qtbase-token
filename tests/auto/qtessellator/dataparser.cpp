begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"dataparser.h"
end_include
begin_include
include|#
directive|include
file|<QString>
end_include
begin_include
include|#
directive|include
file|<QVector>
end_include
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_include
include|#
directive|include
file|<QTextStream>
end_include
begin_include
include|#
directive|include
file|<QtDebug>
end_include
begin_function
DECL|function|parseNumbersList
specifier|static
name|QList
argument_list|<
name|qreal
argument_list|>
name|parseNumbersList
parameter_list|(
name|QByteArray
operator|::
name|const_iterator
modifier|&
name|itr
parameter_list|)
block|{
name|QList
argument_list|<
name|qreal
argument_list|>
name|points
decl_stmt|;
name|QByteArray
name|temp
decl_stmt|;
while|while
condition|(
operator|(
operator|*
name|itr
operator|)
operator|==
literal|' '
condition|)
operator|++
name|itr
expr_stmt|;
while|while
condition|(
operator|(
operator|(
operator|*
name|itr
operator|)
operator|>=
literal|'0'
operator|&&
operator|(
operator|*
name|itr
operator|)
operator|<=
literal|'9'
operator|)
operator|||
operator|(
operator|*
name|itr
operator|)
operator|==
literal|'-'
operator|||
operator|(
operator|*
name|itr
operator|)
operator|==
literal|'+'
condition|)
block|{
name|temp
operator|=
name|QByteArray
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
operator|*
name|itr
operator|)
operator|==
literal|'-'
condition|)
name|temp
operator|+=
operator|*
name|itr
operator|++
expr_stmt|;
elseif|else
if|if
condition|(
operator|(
operator|*
name|itr
operator|)
operator|==
literal|'+'
condition|)
name|temp
operator|+=
operator|*
name|itr
operator|++
expr_stmt|;
while|while
condition|(
operator|(
operator|*
name|itr
operator|)
operator|>=
literal|'0'
operator|&&
operator|(
operator|*
name|itr
operator|)
operator|<=
literal|'9'
condition|)
name|temp
operator|+=
operator|*
name|itr
operator|++
expr_stmt|;
if|if
condition|(
operator|(
operator|*
name|itr
operator|)
operator|==
literal|'.'
condition|)
name|temp
operator|+=
operator|*
name|itr
operator|++
expr_stmt|;
while|while
condition|(
operator|(
operator|*
name|itr
operator|)
operator|>=
literal|'0'
operator|&&
operator|(
operator|*
name|itr
operator|)
operator|<=
literal|'9'
condition|)
name|temp
operator|+=
operator|*
name|itr
operator|++
expr_stmt|;
if|if
condition|(
operator|(
operator|*
name|itr
operator|)
operator|==
literal|'e'
condition|)
block|{
name|temp
operator|+=
operator|*
name|itr
operator|++
expr_stmt|;
if|if
condition|(
operator|(
operator|*
name|itr
operator|)
operator|==
literal|'-'
operator|||
operator|(
operator|*
name|itr
operator|)
operator|==
literal|'+'
condition|)
name|temp
operator|+=
operator|*
name|itr
operator|++
expr_stmt|;
block|}
while|while
condition|(
operator|(
operator|*
name|itr
operator|)
operator|>=
literal|'0'
operator|&&
operator|(
operator|*
name|itr
operator|)
operator|<=
literal|'9'
condition|)
name|temp
operator|+=
operator|*
name|itr
operator|++
expr_stmt|;
while|while
condition|(
operator|(
operator|*
name|itr
operator|)
operator|==
literal|' '
condition|)
operator|++
name|itr
expr_stmt|;
if|if
condition|(
operator|(
operator|*
name|itr
operator|)
operator|==
literal|','
condition|)
operator|++
name|itr
expr_stmt|;
name|points
operator|.
name|append
argument_list|(
name|temp
operator|.
name|toDouble
argument_list|()
argument_list|)
expr_stmt|;
comment|//eat the rest of space
while|while
condition|(
operator|(
operator|*
name|itr
operator|)
operator|==
literal|' '
condition|)
operator|++
name|itr
expr_stmt|;
block|}
return|return
name|points
return|;
block|}
end_function
begin_function
DECL|function|parsePoints
specifier|static
name|QList
argument_list|<
name|QPointF
argument_list|>
name|parsePoints
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|line
parameter_list|)
block|{
name|QList
argument_list|<
name|QPointF
argument_list|>
name|res
decl_stmt|;
name|QByteArray
operator|::
name|const_iterator
name|it
init|=
name|line
operator|.
name|constBegin
argument_list|()
decl_stmt|;
if|if
condition|(
operator|*
name|it
operator|==
literal|','
condition|)
operator|++
name|it
expr_stmt|;
name|QList
argument_list|<
name|qreal
argument_list|>
name|nums
init|=
name|parseNumbersList
argument_list|(
name|it
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|qreal
argument_list|>
operator|::
name|const_iterator
name|nitr
decl_stmt|;
for|for
control|(
name|nitr
operator|=
name|nums
operator|.
name|begin
argument_list|()
init|;
name|nitr
operator|!=
name|nums
operator|.
name|end
argument_list|()
condition|;
operator|++
name|nitr
control|)
block|{
name|qreal
name|x
init|=
operator|*
name|nitr
decl_stmt|;
operator|++
name|nitr
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|nitr
operator|!=
name|nums
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|qreal
name|y
init|=
operator|*
name|nitr
decl_stmt|;
name|res
operator|.
name|append
argument_list|(
name|QPointF
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
DECL|function|parseData
name|QList
argument_list|<
name|QVector
argument_list|<
name|QPointF
argument_list|>
argument_list|>
name|parseData
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|contents
parameter_list|)
block|{
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|lines
init|=
name|contents
operator|.
name|split
argument_list|(
literal|'\n'
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
operator|::
name|const_iterator
name|itr
decl_stmt|;
name|QList
argument_list|<
name|QVector
argument_list|<
name|QPointF
argument_list|>
argument_list|>
name|res
decl_stmt|;
name|QVector
argument_list|<
name|QPointF
argument_list|>
name|current
decl_stmt|;
for|for
control|(
name|itr
operator|=
name|lines
operator|.
name|begin
argument_list|()
init|;
name|itr
operator|!=
name|lines
operator|.
name|end
argument_list|()
condition|;
operator|++
name|itr
control|)
block|{
name|QByteArray
name|line
init|=
operator|(
operator|*
name|itr
operator|)
operator|.
name|trimmed
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|isEmpty
argument_list|()
operator|||
name|line
operator|.
name|startsWith
argument_list|(
literal|'/'
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|current
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|res
operator|.
name|append
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|current
operator|=
name|QVector
argument_list|<
name|QPointF
argument_list|>
argument_list|()
expr_stmt|;
block|}
continue|continue;
block|}
else|else
block|{
name|QList
argument_list|<
name|QPointF
argument_list|>
name|lst
init|=
name|parsePoints
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|current
operator|<<
name|lst
operator|.
name|toVector
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
DECL|function|parseFile
name|QList
argument_list|<
name|QVector
argument_list|<
name|QPointF
argument_list|>
argument_list|>
name|parseFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
block|{
name|QList
argument_list|<
name|QVector
argument_list|<
name|QPointF
argument_list|>
argument_list|>
name|res
decl_stmt|;
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"couldn't open "
operator|<<
name|fileName
expr_stmt|;
return|return
name|res
return|;
block|}
name|QVector
argument_list|<
name|QPointF
argument_list|>
name|current
decl_stmt|;
while|while
condition|(
operator|!
name|file
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|QByteArray
name|line
init|=
name|file
operator|.
name|readLine
argument_list|()
operator|.
name|trimmed
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|isEmpty
argument_list|()
operator|||
name|line
operator|.
name|startsWith
argument_list|(
literal|'/'
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|current
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|res
operator|.
name|append
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|current
operator|=
name|QVector
argument_list|<
name|QPointF
argument_list|>
argument_list|()
expr_stmt|;
block|}
continue|continue;
block|}
else|else
block|{
name|QList
argument_list|<
name|QPointF
argument_list|>
name|lst
init|=
name|parsePoints
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|current
operator|<<
name|lst
operator|.
name|toVector
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|res
return|;
block|}
end_function
end_unit
