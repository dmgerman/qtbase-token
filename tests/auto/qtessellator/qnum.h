begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QNUM_H
end_ifndef
begin_define
DECL|macro|QNUM_H
define|#
directive|define
name|QNUM_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"QtCore/qglobal.h"
end_include
begin_decl_stmt
DECL|variable|qt_be_inf_bytes
specifier|static
specifier|const
name|unsigned
name|char
name|qt_be_inf_bytes
index|[]
init|=
block|{
literal|0x7f
block|,
literal|0xf0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_le_inf_bytes
specifier|static
specifier|const
name|unsigned
name|char
name|qt_le_inf_bytes
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0xf0
block|,
literal|0x7f
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qtInf
specifier|static
specifier|inline
name|double
name|qtInf
parameter_list|()
block|{
return|return
operator|*
name|reinterpret_cast
operator|<
specifier|const
name|double
operator|*
operator|>
operator|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|?
name|qt_be_inf_bytes
else|:
name|qt_le_inf_bytes
operator|)
return|;
block|}
end_function
begin_define
DECL|macro|Q_INFINITY
define|#
directive|define
name|Q_INFINITY
value|(::qtInf())
end_define
begin_comment
comment|// Signaling NAN
end_comment
begin_decl_stmt
DECL|variable|qt_be_snan_bytes
specifier|static
specifier|const
name|unsigned
name|char
name|qt_be_snan_bytes
index|[]
init|=
block|{
literal|0x7f
block|,
literal|0xf8
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_le_snan_bytes
specifier|static
specifier|const
name|unsigned
name|char
name|qt_le_snan_bytes
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0xf8
block|,
literal|0x7f
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qtSnan
specifier|static
specifier|inline
name|double
name|qtSnan
parameter_list|()
block|{
return|return
operator|*
name|reinterpret_cast
operator|<
specifier|const
name|double
operator|*
operator|>
operator|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|?
name|qt_be_snan_bytes
else|:
name|qt_le_snan_bytes
operator|)
return|;
block|}
end_function
begin_define
DECL|macro|Q_SNAN
define|#
directive|define
name|Q_SNAN
value|(::qtSnan())
end_define
begin_comment
comment|// Quiet NAN
end_comment
begin_decl_stmt
DECL|variable|qt_be_qnan_bytes
specifier|static
specifier|const
name|unsigned
name|char
name|qt_be_qnan_bytes
index|[]
init|=
block|{
literal|0xff
block|,
literal|0xf8
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_le_qnan_bytes
specifier|static
specifier|const
name|unsigned
name|char
name|qt_le_qnan_bytes
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0xf8
block|,
literal|0xff
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qtQnan
specifier|static
specifier|inline
name|double
name|qtQnan
parameter_list|()
block|{
return|return
operator|*
name|reinterpret_cast
operator|<
specifier|const
name|double
operator|*
operator|>
operator|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|?
name|qt_be_qnan_bytes
else|:
name|qt_le_qnan_bytes
operator|)
return|;
block|}
end_function
begin_define
DECL|macro|Q_QNAN
define|#
directive|define
name|Q_QNAN
value|(::qtQnan())
end_define
begin_function
DECL|function|qIsInf
specifier|static
specifier|inline
name|bool
name|qIsInf
parameter_list|(
name|double
name|d
parameter_list|)
block|{
name|uchar
modifier|*
name|ch
init|=
operator|(
name|uchar
operator|*
operator|)
operator|&
name|d
decl_stmt|;
if|if
condition|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|)
block|{
return|return
operator|(
name|ch
index|[
literal|0
index|]
operator|&
literal|0x7f
operator|)
operator|==
literal|0x7f
operator|&&
name|ch
index|[
literal|1
index|]
operator|==
literal|0xf0
return|;
block|}
else|else
block|{
return|return
operator|(
name|ch
index|[
literal|7
index|]
operator|&
literal|0x7f
operator|)
operator|==
literal|0x7f
operator|&&
name|ch
index|[
literal|6
index|]
operator|==
literal|0xf0
return|;
block|}
block|}
end_function
begin_function
DECL|function|qIsNaN
specifier|static
specifier|inline
name|bool
name|qIsNaN
parameter_list|(
name|double
name|d
parameter_list|)
block|{
name|uchar
modifier|*
name|ch
init|=
operator|(
name|uchar
operator|*
operator|)
operator|&
name|d
decl_stmt|;
if|if
condition|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|)
block|{
return|return
operator|(
name|ch
index|[
literal|0
index|]
operator|&
literal|0x7f
operator|)
operator|==
literal|0x7f
operator|&&
name|ch
index|[
literal|1
index|]
operator|>
literal|0xf0
return|;
block|}
else|else
block|{
return|return
operator|(
name|ch
index|[
literal|7
index|]
operator|&
literal|0x7f
operator|)
operator|==
literal|0x7f
operator|&&
name|ch
index|[
literal|6
index|]
operator|>
literal|0xf0
return|;
block|}
block|}
end_function
begin_function
DECL|function|qIsFinite
specifier|static
specifier|inline
name|bool
name|qIsFinite
parameter_list|(
name|double
name|d
parameter_list|)
block|{
name|uchar
modifier|*
name|ch
init|=
operator|(
name|uchar
operator|*
operator|)
operator|&
name|d
decl_stmt|;
if|if
condition|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|)
block|{
return|return
operator|(
name|ch
index|[
literal|0
index|]
operator|&
literal|0x7f
operator|)
operator|!=
literal|0x7f
operator|||
operator|(
name|ch
index|[
literal|1
index|]
operator|&
literal|0xf0
operator|)
operator|!=
literal|0xf0
return|;
block|}
else|else
block|{
return|return
operator|(
name|ch
index|[
literal|7
index|]
operator|&
literal|0x7f
operator|)
operator|!=
literal|0x7f
operator|||
operator|(
name|ch
index|[
literal|6
index|]
operator|&
literal|0xf0
operator|)
operator|!=
literal|0xf0
return|;
block|}
block|}
end_function
begin_function
DECL|function|qIsInf
specifier|static
specifier|inline
name|bool
name|qIsInf
parameter_list|(
name|float
name|d
parameter_list|)
block|{
name|uchar
modifier|*
name|ch
init|=
operator|(
name|uchar
operator|*
operator|)
operator|&
name|d
decl_stmt|;
if|if
condition|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|)
block|{
return|return
operator|(
name|ch
index|[
literal|0
index|]
operator|&
literal|0x7f
operator|)
operator|==
literal|0x7f
operator|&&
name|ch
index|[
literal|1
index|]
operator|==
literal|0x80
return|;
block|}
else|else
block|{
return|return
operator|(
name|ch
index|[
literal|3
index|]
operator|&
literal|0x7f
operator|)
operator|==
literal|0x7f
operator|&&
name|ch
index|[
literal|2
index|]
operator|==
literal|0x80
return|;
block|}
block|}
end_function
begin_function
DECL|function|qIsNaN
specifier|static
specifier|inline
name|bool
name|qIsNaN
parameter_list|(
name|float
name|d
parameter_list|)
block|{
name|uchar
modifier|*
name|ch
init|=
operator|(
name|uchar
operator|*
operator|)
operator|&
name|d
decl_stmt|;
if|if
condition|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|)
block|{
return|return
operator|(
name|ch
index|[
literal|0
index|]
operator|&
literal|0x7f
operator|)
operator|==
literal|0x7f
operator|&&
name|ch
index|[
literal|1
index|]
operator|>
literal|0x80
return|;
block|}
else|else
block|{
return|return
operator|(
name|ch
index|[
literal|3
index|]
operator|&
literal|0x7f
operator|)
operator|==
literal|0x7f
operator|&&
name|ch
index|[
literal|2
index|]
operator|>
literal|0x80
return|;
block|}
block|}
end_function
begin_function
DECL|function|qIsFinite
specifier|static
specifier|inline
name|bool
name|qIsFinite
parameter_list|(
name|float
name|d
parameter_list|)
block|{
name|uchar
modifier|*
name|ch
init|=
operator|(
name|uchar
operator|*
operator|)
operator|&
name|d
decl_stmt|;
if|if
condition|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|)
block|{
return|return
operator|(
name|ch
index|[
literal|0
index|]
operator|&
literal|0x7f
operator|)
operator|!=
literal|0x7f
operator|||
operator|(
name|ch
index|[
literal|1
index|]
operator|&
literal|0x80
operator|)
operator|!=
literal|0x80
return|;
block|}
else|else
block|{
return|return
operator|(
name|ch
index|[
literal|3
index|]
operator|&
literal|0x7f
operator|)
operator|!=
literal|0x7f
operator|||
operator|(
name|ch
index|[
literal|2
index|]
operator|&
literal|0x80
operator|)
operator|!=
literal|0x80
return|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QNUMERIC_P_H
end_comment
end_unit
