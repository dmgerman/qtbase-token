begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"utils.h"
end_include
begin_include
include|#
directive|include
file|<assert.h>
end_include
begin_include
include|#
directive|include
file|<qglobal.h>
end_include
begin_include
include|#
directive|include
file|"qnum.h"
end_include
begin_define
DECL|macro|FloatToXFixed
define|#
directive|define
name|FloatToXFixed
parameter_list|(
name|i
parameter_list|)
value|(int)((i) * 65536)
end_define
begin_define
DECL|macro|IntToXFixed
define|#
directive|define
name|IntToXFixed
parameter_list|(
name|i
parameter_list|)
value|((i)<< 16)
end_define
begin_function
DECL|function|compute_x_at
specifier|static
name|double
name|compute_x_at
parameter_list|(
name|XFixed
name|y
parameter_list|,
name|XPointFixed
name|p1
parameter_list|,
name|XPointFixed
name|p2
parameter_list|)
block|{
name|double
name|d
init|=
name|XFixedToDouble
argument_list|(
name|p2
operator|.
name|x
operator|-
name|p1
operator|.
name|x
argument_list|)
decl_stmt|;
return|return
name|XFixedToDouble
argument_list|(
name|p1
operator|.
name|x
argument_list|)
operator|+
name|d
operator|*
name|XFixedToDouble
argument_list|(
name|y
operator|-
name|p1
operator|.
name|y
argument_list|)
operator|/
name|XFixedToDouble
argument_list|(
name|p2
operator|.
name|y
operator|-
name|p1
operator|.
name|y
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|compute_area
name|double
name|compute_area
parameter_list|(
name|XTrapezoid
modifier|*
name|trap
parameter_list|)
block|{
name|double
name|x1
init|=
name|compute_x_at
argument_list|(
name|trap
operator|->
name|top
argument_list|,
name|trap
operator|->
name|left
operator|.
name|p1
argument_list|,
name|trap
operator|->
name|left
operator|.
name|p2
argument_list|)
decl_stmt|;
name|double
name|x2
init|=
name|compute_x_at
argument_list|(
name|trap
operator|->
name|top
argument_list|,
name|trap
operator|->
name|right
operator|.
name|p1
argument_list|,
name|trap
operator|->
name|right
operator|.
name|p2
argument_list|)
decl_stmt|;
name|double
name|x3
init|=
name|compute_x_at
argument_list|(
name|trap
operator|->
name|bottom
argument_list|,
name|trap
operator|->
name|left
operator|.
name|p1
argument_list|,
name|trap
operator|->
name|left
operator|.
name|p2
argument_list|)
decl_stmt|;
name|double
name|x4
init|=
name|compute_x_at
argument_list|(
name|trap
operator|->
name|bottom
argument_list|,
name|trap
operator|->
name|right
operator|.
name|p1
argument_list|,
name|trap
operator|->
name|right
operator|.
name|p2
argument_list|)
decl_stmt|;
name|double
name|top
init|=
name|XFixedToDouble
argument_list|(
name|trap
operator|->
name|top
argument_list|)
decl_stmt|;
name|double
name|bottom
init|=
name|XFixedToDouble
argument_list|(
name|trap
operator|->
name|bottom
argument_list|)
decl_stmt|;
name|double
name|h
init|=
name|bottom
operator|-
name|top
decl_stmt|;
name|double
name|top_base
init|=
name|x2
operator|-
name|x1
decl_stmt|;
name|double
name|bottom_base
init|=
name|x4
operator|-
name|x3
decl_stmt|;
if|if
condition|(
operator|(
name|top_base
argument_list|<
literal|0
operator|&&
name|bottom_base
argument_list|>
literal|0
operator|)
operator|||
operator|(
name|top_base
operator|>
literal|0
operator|&&
name|bottom_base
operator|<
literal|0
operator|)
condition|)
block|{
name|double
name|y0
init|=
name|top_base
operator|*
name|h
operator|/
operator|(
name|top_base
operator|-
name|bottom_base
operator|)
operator|+
name|top
decl_stmt|;
name|double
name|area
init|=
name|qAbs
argument_list|(
name|top_base
operator|*
operator|(
name|y0
operator|-
name|top
operator|)
operator|/
literal|2.
argument_list|)
decl_stmt|;
name|area
operator|+=
name|qAbs
argument_list|(
name|bottom_base
operator|*
operator|(
name|bottom
operator|-
name|y0
operator|)
operator|/
literal|2.
argument_list|)
expr_stmt|;
return|return
name|area
return|;
block|}
return|return
literal|0.5
operator|*
name|h
operator|*
name|qAbs
argument_list|(
name|top_base
operator|+
name|bottom_base
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|compute_area_for_x
name|double
name|compute_area_for_x
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|XTrapezoid
argument_list|>
modifier|&
name|traps
parameter_list|)
block|{
name|double
name|area
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|traps
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|XTrapezoid
name|trap
init|=
name|traps
index|[
name|i
index|]
decl_stmt|;
name|area
operator|+=
name|compute_area
argument_list|(
operator|&
name|trap
argument_list|)
expr_stmt|;
block|}
return|return
name|area
return|;
block|}
end_function
end_unit
