begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"testtessellator.h"
end_include
begin_include
include|#
directive|include
file|<private/qtessellator_p.h>
end_include
begin_include
include|#
directive|include
file|"math.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_class
DECL|class|TestTessellator
class|class
name|TestTessellator
super|:
specifier|public
name|QTessellator
block|{
public|public:
DECL|member|traps
name|QVector
argument_list|<
name|XTrapezoid
argument_list|>
modifier|*
name|traps
decl_stmt|;
name|void
name|addTrap
parameter_list|(
specifier|const
name|Trapezoid
modifier|&
name|trap
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|addTrap
name|void
name|TestTessellator
operator|::
name|addTrap
parameter_list|(
specifier|const
name|Trapezoid
modifier|&
name|trap
parameter_list|)
block|{
name|XTrapezoid
name|xtrap
decl_stmt|;
name|xtrap
operator|.
name|top
operator|=
name|Q27Dot5ToXFixed
argument_list|(
name|trap
operator|.
name|top
argument_list|)
expr_stmt|;
name|xtrap
operator|.
name|bottom
operator|=
name|Q27Dot5ToXFixed
argument_list|(
name|trap
operator|.
name|bottom
argument_list|)
expr_stmt|;
name|xtrap
operator|.
name|left
operator|.
name|p1
operator|.
name|x
operator|=
name|Q27Dot5ToXFixed
argument_list|(
name|trap
operator|.
name|topLeft
operator|->
name|x
argument_list|)
expr_stmt|;
name|xtrap
operator|.
name|left
operator|.
name|p1
operator|.
name|y
operator|=
name|Q27Dot5ToXFixed
argument_list|(
name|trap
operator|.
name|topLeft
operator|->
name|y
argument_list|)
expr_stmt|;
name|xtrap
operator|.
name|left
operator|.
name|p2
operator|.
name|x
operator|=
name|Q27Dot5ToXFixed
argument_list|(
name|trap
operator|.
name|bottomLeft
operator|->
name|x
argument_list|)
expr_stmt|;
name|xtrap
operator|.
name|left
operator|.
name|p2
operator|.
name|y
operator|=
name|Q27Dot5ToXFixed
argument_list|(
name|trap
operator|.
name|bottomLeft
operator|->
name|y
argument_list|)
expr_stmt|;
name|xtrap
operator|.
name|right
operator|.
name|p1
operator|.
name|x
operator|=
name|Q27Dot5ToXFixed
argument_list|(
name|trap
operator|.
name|topRight
operator|->
name|x
argument_list|)
expr_stmt|;
name|xtrap
operator|.
name|right
operator|.
name|p1
operator|.
name|y
operator|=
name|Q27Dot5ToXFixed
argument_list|(
name|trap
operator|.
name|topRight
operator|->
name|y
argument_list|)
expr_stmt|;
name|xtrap
operator|.
name|right
operator|.
name|p2
operator|.
name|x
operator|=
name|Q27Dot5ToXFixed
argument_list|(
name|trap
operator|.
name|bottomRight
operator|->
name|x
argument_list|)
expr_stmt|;
name|xtrap
operator|.
name|right
operator|.
name|p2
operator|.
name|y
operator|=
name|Q27Dot5ToXFixed
argument_list|(
name|trap
operator|.
name|bottomRight
operator|->
name|y
argument_list|)
expr_stmt|;
name|traps
operator|->
name|append
argument_list|(
name|xtrap
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|test_tesselate_polygon
name|void
name|test_tesselate_polygon
parameter_list|(
name|QVector
argument_list|<
name|XTrapezoid
argument_list|>
modifier|*
name|traps
parameter_list|,
specifier|const
name|QPointF
modifier|*
name|points
parameter_list|,
name|int
name|nPoints
parameter_list|,
name|bool
name|winding
parameter_list|)
block|{
name|TestTessellator
name|t
decl_stmt|;
name|t
operator|.
name|traps
operator|=
name|traps
expr_stmt|;
name|t
operator|.
name|setWinding
argument_list|(
name|winding
argument_list|)
expr_stmt|;
name|t
operator|.
name|tessellate
argument_list|(
name|points
argument_list|,
name|nPoints
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|test_tessellate_polygon_convex
name|void
name|test_tessellate_polygon_convex
parameter_list|(
name|QVector
argument_list|<
name|XTrapezoid
argument_list|>
modifier|*
name|traps
parameter_list|,
specifier|const
name|QPointF
modifier|*
name|points
parameter_list|,
name|int
name|nPoints
parameter_list|,
name|bool
name|winding
parameter_list|)
block|{
name|TestTessellator
name|t
decl_stmt|;
name|t
operator|.
name|traps
operator|=
name|traps
expr_stmt|;
name|t
operator|.
name|setWinding
argument_list|(
name|winding
argument_list|)
expr_stmt|;
name|t
operator|.
name|tessellateConvex
argument_list|(
name|points
argument_list|,
name|nPoints
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|test_tessellate_polygon_rect
name|void
name|test_tessellate_polygon_rect
parameter_list|(
name|QVector
argument_list|<
name|XTrapezoid
argument_list|>
modifier|*
name|traps
parameter_list|,
specifier|const
name|QPointF
modifier|*
name|points
parameter_list|,
name|int
name|nPoints
parameter_list|,
name|bool
name|winding
parameter_list|)
block|{
comment|// 5 points per rect
if|if
condition|(
name|nPoints
operator|%
literal|5
operator|!=
literal|0
condition|)
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"multiples of 5 points expected"
expr_stmt|;
name|TestTessellator
name|t
decl_stmt|;
name|t
operator|.
name|traps
operator|=
name|traps
expr_stmt|;
name|t
operator|.
name|setWinding
argument_list|(
name|winding
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPoints
operator|/
literal|5
condition|;
operator|++
name|i
control|)
block|{
name|QPointF
name|rectA
init|=
name|points
index|[
literal|5
operator|*
name|i
index|]
decl_stmt|;
name|QPointF
name|rectB
init|=
name|points
index|[
literal|5
operator|*
name|i
operator|+
literal|1
index|]
decl_stmt|;
name|QPointF
name|rectC
init|=
name|points
index|[
literal|5
operator|*
name|i
operator|+
literal|2
index|]
decl_stmt|;
name|QPointF
name|rectD
init|=
name|points
index|[
literal|5
operator|*
name|i
operator|+
literal|3
index|]
decl_stmt|;
name|QPointF
name|a
init|=
operator|(
name|rectA
operator|+
name|rectD
operator|)
operator|*
literal|0.5
decl_stmt|;
name|QPointF
name|b
init|=
operator|(
name|rectB
operator|+
name|rectC
operator|)
operator|*
literal|0.5
decl_stmt|;
name|QPointF
name|delta
init|=
name|rectA
operator|-
name|rectD
decl_stmt|;
name|qreal
name|width
init|=
name|sqrt
argument_list|(
name|delta
operator|.
name|x
argument_list|()
operator|*
name|delta
operator|.
name|x
argument_list|()
operator|+
name|delta
operator|.
name|y
argument_list|()
operator|*
name|delta
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
name|t
operator|.
name|tessellateRect
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|width
argument_list|)
expr_stmt|;
block|}
block|}
end_function
end_unit
