begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QVector>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qpolygon.h>
end_include
begin_include
include|#
directive|include
file|<qmatrix.h>
end_include
begin_include
include|#
directive|include
file|"oldtessellator.h"
end_include
begin_include
include|#
directive|include
file|"testtessellator.h"
end_include
begin_include
include|#
directive|include
file|"utils.h"
end_include
begin_include
include|#
directive|include
file|"simple.h"
end_include
begin_include
include|#
directive|include
file|"arc.h"
end_include
begin_include
include|#
directive|include
file|"math.h"
end_include
begin_comment
comment|//TESTED_CLASS=
end_comment
begin_comment
comment|//TESTED_FILES=
end_comment
begin_class
DECL|class|tst_QTessellator
class|class
name|tst_QTessellator
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|tst_QTessellator
name|tst_QTessellator
parameter_list|()
block|{     }
private|private
name|slots
private|:
name|void
name|testStandardSet
parameter_list|()
function_decl|;
name|void
name|testRandom
parameter_list|()
function_decl|;
name|void
name|testArc
parameter_list|()
function_decl|;
name|void
name|testRects
parameter_list|()
function_decl|;
name|void
name|testConvexRects
parameter_list|()
function_decl|;
name|void
name|testConvex
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|creatPoint
name|QPointF
name|creatPoint
parameter_list|()
block|{
name|qreal
name|x
init|=
name|int
argument_list|(
literal|20.0
operator|*
operator|(
name|rand
argument_list|()
operator|/
operator|(
name|RAND_MAX
operator|+
literal|1.0
operator|)
operator|)
argument_list|)
decl_stmt|;
name|qreal
name|y
init|=
name|int
argument_list|(
literal|20.0
operator|*
operator|(
name|rand
argument_list|()
operator|/
operator|(
name|RAND_MAX
operator|+
literal|1.0
operator|)
operator|)
argument_list|)
decl_stmt|;
return|return
name|QPointF
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|test
name|bool
name|test
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|pg
parameter_list|,
name|int
name|pgSize
parameter_list|,
name|bool
name|winding
parameter_list|,
name|tessellate_function
name|tessellate
init|=
name|test_tesselate_polygon
parameter_list|,
name|qreal
name|maxDiff
init|=
literal|0.005
parameter_list|)
block|{
name|QVector
argument_list|<
name|XTrapezoid
argument_list|>
name|traps
decl_stmt|;
name|qreal
name|area1
init|=
literal|0
decl_stmt|;
name|qreal
name|area2
init|=
literal|0
decl_stmt|;
name|old_tesselate_polygon
argument_list|(
operator|&
name|traps
argument_list|,
name|pg
argument_list|,
name|pgSize
argument_list|,
name|winding
argument_list|)
expr_stmt|;
name|area1
operator|=
name|compute_area_for_x
argument_list|(
name|traps
argument_list|)
expr_stmt|;
name|traps
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tessellate
argument_list|(
operator|&
name|traps
argument_list|,
name|pg
argument_list|,
name|pgSize
argument_list|,
name|winding
argument_list|)
expr_stmt|;
name|area2
operator|=
name|compute_area_for_x
argument_list|(
name|traps
argument_list|)
expr_stmt|;
name|bool
name|result
init|=
operator|(
name|qAbs
argument_list|(
name|area2
operator|-
name|area1
argument_list|)
operator|<
name|maxDiff
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|&&
name|area1
condition|)
name|result
operator|=
operator|(
name|qAbs
argument_list|(
name|area1
operator|-
name|area2
argument_list|)
operator|/
name|area1
operator|<
name|maxDiff
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
name|qDebug
argument_list|()
operator|<<
name|area1
operator|<<
name|area2
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|simplifyTestFailure
name|void
name|simplifyTestFailure
parameter_list|(
name|QVector
argument_list|<
name|QPointF
argument_list|>
name|failure
parameter_list|,
name|bool
name|winding
parameter_list|)
block|{
name|int
name|i
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|failure
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|QVector
argument_list|<
name|QPointF
argument_list|>
name|t
init|=
name|failure
decl_stmt|;
name|t
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|test
argument_list|(
name|t
operator|.
name|data
argument_list|()
argument_list|,
name|t
operator|.
name|size
argument_list|()
argument_list|,
name|winding
argument_list|)
condition|)
block|{
operator|++
name|i
expr_stmt|;
continue|continue;
block|}
name|failure
operator|=
name|t
expr_stmt|;
name|i
operator|=
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|failure
operator|.
name|size
argument_list|()
condition|;
operator|++
name|x
control|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"%lf,%lf, "
argument_list|,
name|failure
index|[
name|x
index|]
operator|.
name|x
argument_list|()
argument_list|,
name|failure
index|[
name|x
index|]
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testStandardSet
name|void
name|tst_QTessellator
operator|::
name|testStandardSet
parameter_list|()
block|{
name|QVector
argument_list|<
name|FullData
argument_list|>
name|sampleSet
decl_stmt|;
name|sampleSet
operator|.
name|append
argument_list|(
name|simpleData
argument_list|()
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|FullData
name|data
decl|,
name|sampleSet
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|test
argument_list|(
name|data
index|[
name|i
index|]
operator|.
name|data
argument_list|()
argument_list|,
name|data
index|[
name|i
index|]
operator|.
name|size
argument_list|()
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|simplifyTestFailure
argument_list|(
name|data
index|[
name|i
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|test
argument_list|(
name|data
index|[
name|i
index|]
operator|.
name|data
argument_list|()
argument_list|,
name|data
index|[
name|i
index|]
operator|.
name|size
argument_list|()
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|simplifyTestFailure
argument_list|(
name|data
index|[
name|i
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|fillRandomVec
name|void
name|fillRandomVec
parameter_list|(
name|QVector
argument_list|<
name|QPointF
argument_list|>
modifier|&
name|vec
parameter_list|)
block|{
name|int
name|size
init|=
name|vec
operator|.
name|size
argument_list|()
decl_stmt|;
operator|--
name|size
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|vec
index|[
name|i
index|]
operator|=
name|creatPoint
argument_list|()
expr_stmt|;
block|}
name|vec
index|[
name|size
index|]
operator|=
name|vec
index|[
literal|0
index|]
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testRandom
name|void
name|tst_QTessellator
operator|::
name|testRandom
parameter_list|()
block|{
name|int
name|failures
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|5
init|;
name|i
operator|<
literal|12
condition|;
operator|++
name|i
control|)
block|{
name|QVector
argument_list|<
name|QPointF
argument_list|>
name|vec
argument_list|(
name|i
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_ARCH_ARM
name|int
name|k
init|=
literal|200
decl_stmt|;
else|#
directive|else
name|int
name|k
init|=
literal|5000
decl_stmt|;
endif|#
directive|endif
while|while
condition|(
operator|--
name|k
condition|)
block|{
name|fillRandomVec
argument_list|(
name|vec
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|test
argument_list|(
name|vec
operator|.
name|data
argument_list|()
argument_list|,
name|vec
operator|.
name|size
argument_list|()
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|simplifyTestFailure
argument_list|(
name|vec
argument_list|,
literal|false
argument_list|)
expr_stmt|;
operator|++
name|failures
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|test
argument_list|(
name|vec
operator|.
name|data
argument_list|()
argument_list|,
name|vec
operator|.
name|size
argument_list|()
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|simplifyTestFailure
argument_list|(
name|vec
argument_list|,
literal|true
argument_list|)
expr_stmt|;
operator|++
name|failures
expr_stmt|;
block|}
block|}
block|}
name|QVERIFY
argument_list|(
name|failures
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// we need a higher threshold for failure here than in the above tests, as this basically draws
end_comment
begin_comment
comment|// a very thin outline, where the discretization in the new tesselator shows
end_comment
begin_function
DECL|function|test_arc
name|bool
name|test_arc
parameter_list|(
specifier|const
name|QPolygonF
modifier|&
name|poly
parameter_list|,
name|bool
name|winding
parameter_list|)
block|{
name|QVector
argument_list|<
name|XTrapezoid
argument_list|>
name|traps
decl_stmt|;
name|qreal
name|area1
init|=
literal|0
decl_stmt|;
name|qreal
name|area2
init|=
literal|0
decl_stmt|;
name|old_tesselate_polygon
argument_list|(
operator|&
name|traps
argument_list|,
name|poly
operator|.
name|data
argument_list|()
argument_list|,
name|poly
operator|.
name|size
argument_list|()
argument_list|,
name|winding
argument_list|)
expr_stmt|;
name|area1
operator|=
name|compute_area_for_x
argument_list|(
name|traps
argument_list|)
expr_stmt|;
name|traps
operator|.
name|clear
argument_list|()
expr_stmt|;
name|test_tesselate_polygon
argument_list|(
operator|&
name|traps
argument_list|,
name|poly
operator|.
name|data
argument_list|()
argument_list|,
name|poly
operator|.
name|size
argument_list|()
argument_list|,
name|winding
argument_list|)
expr_stmt|;
name|area2
operator|=
name|compute_area_for_x
argument_list|(
name|traps
argument_list|)
expr_stmt|;
name|bool
name|result
init|=
operator|(
name|area2
operator|-
name|area1
operator|<
literal|.02
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|&&
name|area1
condition|)
name|result
operator|=
operator|(
name|qAbs
argument_list|(
name|area1
operator|-
name|area2
argument_list|)
operator|/
name|area1
operator|<
literal|.02
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|testArc
name|void
name|tst_QTessellator
operator|::
name|testArc
parameter_list|()
block|{
name|FullData
name|arc
init|=
name|arcData
argument_list|()
decl_stmt|;
name|QMatrix
name|mat
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_ARCH_ARM
specifier|const
name|int
name|stop
init|=
literal|5
decl_stmt|;
else|#
directive|else
specifier|const
name|int
name|stop
init|=
literal|1000
decl_stmt|;
endif|#
directive|endif
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stop
condition|;
operator|++
name|i
control|)
block|{
name|mat
operator|.
name|rotate
argument_list|(
name|qreal
argument_list|(
literal|.01
argument_list|)
argument_list|)
expr_stmt|;
name|mat
operator|.
name|scale
argument_list|(
name|qreal
argument_list|(
literal|.99
argument_list|)
argument_list|,
name|qreal
argument_list|(
literal|.99
argument_list|)
argument_list|)
expr_stmt|;
name|QPolygonF
name|poly
init|=
name|arc
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QPolygonF
name|vec
init|=
name|poly
operator|*
name|mat
decl_stmt|;
name|QVERIFY
argument_list|(
name|test_arc
argument_list|(
name|vec
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_arc
argument_list|(
name|vec
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|isConvex
specifier|static
name|bool
name|isConvex
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|QPointF
argument_list|>
modifier|&
name|v
parameter_list|)
block|{
name|int
name|nPoints
init|=
name|v
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
name|qreal
name|lastCross
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPoints
condition|;
operator|++
name|i
control|)
block|{
name|QPointF
name|a
init|=
name|v
index|[
name|i
index|]
decl_stmt|;
name|QPointF
name|b
init|=
name|v
index|[
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
name|nPoints
index|]
decl_stmt|;
name|QPointF
name|d1
init|=
name|b
operator|-
name|a
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|nPoints
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|j
operator|==
name|i
operator|||
name|j
operator|==
name|i
operator|+
literal|1
condition|)
continue|continue;
name|QPointF
name|p
init|=
name|v
index|[
name|j
index|]
decl_stmt|;
name|QPointF
name|d2
init|=
name|p
operator|-
name|a
decl_stmt|;
name|qreal
name|cross
init|=
name|d1
operator|.
name|x
argument_list|()
operator|*
name|d2
operator|.
name|y
argument_list|()
operator|-
name|d1
operator|.
name|y
argument_list|()
operator|*
name|d2
operator|.
name|x
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|qFuzzyCompare
argument_list|(
name|cross
operator|+
literal|1
argument_list|,
literal|1
argument_list|)
operator|&&
operator|!
name|qFuzzyCompare
argument_list|(
name|cross
operator|+
literal|1
argument_list|,
literal|1
argument_list|)
operator|&&
operator|(
name|lastCross
operator|>
literal|0
operator|)
operator|!=
operator|(
name|cross
operator|>
literal|0
operator|)
condition|)
return|return
literal|false
return|;
name|lastCross
operator|=
name|cross
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|fillRectVec
specifier|static
name|void
name|fillRectVec
parameter_list|(
name|QVector
argument_list|<
name|QPointF
argument_list|>
modifier|&
name|v
parameter_list|)
block|{
name|int
name|numRects
init|=
name|v
operator|.
name|size
argument_list|()
operator|/
literal|5
decl_stmt|;
name|int
name|first
init|=
literal|0
decl_stmt|;
name|v
index|[
name|first
operator|++
index|]
operator|=
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|v
index|[
name|first
operator|++
index|]
operator|=
name|QPointF
argument_list|(
literal|10
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|v
index|[
name|first
operator|++
index|]
operator|=
name|QPointF
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|v
index|[
name|first
operator|++
index|]
operator|=
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|v
index|[
name|first
operator|++
index|]
operator|=
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|v
index|[
name|first
operator|++
index|]
operator|=
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|v
index|[
name|first
operator|++
index|]
operator|=
name|QPointF
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|v
index|[
name|first
operator|++
index|]
operator|=
name|QPointF
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|v
index|[
name|first
operator|++
index|]
operator|=
name|QPointF
argument_list|(
literal|2
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|v
index|[
name|first
operator|++
index|]
operator|=
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|v
index|[
name|first
operator|++
index|]
operator|=
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|v
index|[
name|first
operator|++
index|]
operator|=
name|QPointF
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|v
index|[
name|first
operator|++
index|]
operator|=
name|QPointF
argument_list|(
literal|6
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|v
index|[
name|first
operator|++
index|]
operator|=
name|QPointF
argument_list|(
literal|2
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|v
index|[
name|first
operator|++
index|]
operator|=
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|first
operator|/
literal|5
init|;
name|i
operator|<
name|numRects
condition|;
operator|++
name|i
control|)
block|{
name|QPointF
name|a
init|=
name|creatPoint
argument_list|()
decl_stmt|;
name|QPointF
name|b
init|=
name|creatPoint
argument_list|()
decl_stmt|;
name|QPointF
name|delta
init|=
name|a
operator|-
name|b
decl_stmt|;
name|QPointF
name|perp
argument_list|(
name|delta
operator|.
name|y
argument_list|()
argument_list|,
operator|-
name|delta
operator|.
name|x
argument_list|()
argument_list|)
decl_stmt|;
name|perp
operator|*=
operator|(
call|(
name|int
call|)
argument_list|(
literal|20.0
operator|*
name|rand
argument_list|()
operator|/
operator|(
name|RAND_MAX
operator|+
literal|1.0
operator|)
argument_list|)
operator|)
operator|/
literal|20.0
expr_stmt|;
name|int
name|j
init|=
literal|5
operator|*
name|i
decl_stmt|;
name|v
index|[
name|j
operator|++
index|]
operator|=
name|a
operator|+
name|perp
expr_stmt|;
name|v
index|[
name|j
operator|++
index|]
operator|=
name|a
operator|-
name|perp
expr_stmt|;
name|v
index|[
name|j
operator|++
index|]
operator|=
name|b
operator|-
name|perp
expr_stmt|;
name|v
index|[
name|j
operator|++
index|]
operator|=
name|b
operator|+
name|perp
expr_stmt|;
name|v
index|[
name|j
operator|++
index|]
operator|=
name|a
operator|+
name|perp
expr_stmt|;
block|}
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_ARCH_ARM
end_ifdef
begin_decl_stmt
DECL|variable|numRects
specifier|const
name|int
name|numRects
init|=
literal|500
decl_stmt|;
end_decl_stmt
begin_else
else|#
directive|else
end_else
begin_decl_stmt
DECL|variable|numRects
specifier|const
name|int
name|numRects
init|=
literal|5000
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|testConvexRects
name|void
name|tst_QTessellator
operator|::
name|testConvexRects
parameter_list|()
block|{
return|return;
name|int
name|failures
init|=
literal|0
decl_stmt|;
name|QVector
argument_list|<
name|QPointF
argument_list|>
name|vec
argument_list|(
name|numRects
operator|*
literal|5
argument_list|)
decl_stmt|;
name|fillRectVec
argument_list|(
name|vec
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|rect
init|=
literal|0
init|;
name|rect
operator|<
name|numRects
condition|;
operator|++
name|rect
control|)
block|{
name|QVector
argument_list|<
name|QPointF
argument_list|>
name|v
argument_list|(
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
name|v
index|[
name|i
index|]
operator|=
name|vec
index|[
literal|5
operator|*
name|rect
operator|+
name|i
index|]
expr_stmt|;
if|if
condition|(
operator|!
name|test
argument_list|(
name|v
operator|.
name|data
argument_list|()
argument_list|,
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|false
argument_list|,
name|test_tessellate_polygon_convex
argument_list|)
condition|)
block|{
name|simplifyTestFailure
argument_list|(
name|v
argument_list|,
literal|false
argument_list|)
expr_stmt|;
operator|++
name|failures
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|test
argument_list|(
name|v
operator|.
name|data
argument_list|()
argument_list|,
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|true
argument_list|,
name|test_tessellate_polygon_convex
argument_list|)
condition|)
block|{
name|simplifyTestFailure
argument_list|(
name|v
argument_list|,
literal|true
argument_list|)
expr_stmt|;
operator|++
name|failures
expr_stmt|;
block|}
block|}
name|QVERIFY
argument_list|(
name|failures
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testConvex
name|void
name|tst_QTessellator
operator|::
name|testConvex
parameter_list|()
block|{
name|int
name|failures
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|4
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|QVector
argument_list|<
name|QPointF
argument_list|>
name|vec
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|k
init|=
literal|5000
decl_stmt|;
while|while
condition|(
name|k
operator|--
condition|)
block|{
name|fillRandomVec
argument_list|(
name|vec
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isConvex
argument_list|(
name|vec
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|test
argument_list|(
name|vec
operator|.
name|data
argument_list|()
argument_list|,
name|vec
operator|.
name|size
argument_list|()
argument_list|,
literal|false
argument_list|,
name|test_tessellate_polygon_convex
argument_list|)
condition|)
block|{
name|simplifyTestFailure
argument_list|(
name|vec
argument_list|,
literal|false
argument_list|)
expr_stmt|;
operator|++
name|failures
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|test
argument_list|(
name|vec
operator|.
name|data
argument_list|()
argument_list|,
name|vec
operator|.
name|size
argument_list|()
argument_list|,
literal|true
argument_list|,
name|test_tessellate_polygon_convex
argument_list|)
condition|)
block|{
name|simplifyTestFailure
argument_list|(
name|vec
argument_list|,
literal|true
argument_list|)
expr_stmt|;
operator|++
name|failures
expr_stmt|;
block|}
block|}
block|}
name|QVERIFY
argument_list|(
name|failures
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testRects
name|void
name|tst_QTessellator
operator|::
name|testRects
parameter_list|()
block|{
name|int
name|failures
init|=
literal|0
decl_stmt|;
name|QVector
argument_list|<
name|QPointF
argument_list|>
name|vec
argument_list|(
name|numRects
operator|*
literal|5
argument_list|)
decl_stmt|;
name|fillRectVec
argument_list|(
name|vec
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|rect
init|=
literal|0
init|;
name|rect
operator|<
name|numRects
condition|;
operator|++
name|rect
control|)
block|{
name|QVector
argument_list|<
name|QPointF
argument_list|>
name|v
argument_list|(
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
name|v
index|[
name|i
index|]
operator|=
name|vec
index|[
literal|5
operator|*
name|rect
operator|+
name|i
index|]
expr_stmt|;
if|if
condition|(
operator|!
name|test
argument_list|(
name|v
operator|.
name|data
argument_list|()
argument_list|,
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|false
argument_list|,
name|test_tessellate_polygon_rect
argument_list|,
name|qreal
argument_list|(
literal|0.05
argument_list|)
argument_list|)
condition|)
block|{
name|simplifyTestFailure
argument_list|(
name|v
argument_list|,
literal|false
argument_list|)
expr_stmt|;
operator|++
name|failures
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|test
argument_list|(
name|v
operator|.
name|data
argument_list|()
argument_list|,
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|true
argument_list|,
name|test_tessellate_polygon_rect
argument_list|,
name|qreal
argument_list|(
literal|0.05
argument_list|)
argument_list|)
condition|)
block|{
name|simplifyTestFailure
argument_list|(
name|v
argument_list|,
literal|true
argument_list|)
expr_stmt|;
operator|++
name|failures
expr_stmt|;
block|}
block|}
name|QVERIFY
argument_list|(
name|failures
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QTessellator
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_tessellator.moc"
end_include
end_unit
