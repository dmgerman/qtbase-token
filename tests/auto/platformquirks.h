begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|PLATFORMQUIRKS_H
end_ifndef
begin_define
DECL|macro|PLATFORMQUIRKS_H
define|#
directive|define
name|PLATFORMQUIRKS_H
end_define
begin_include
include|#
directive|include
file|<qglobal.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_GUI_LIB
end_ifdef
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_X11
end_ifdef
begin_include
include|#
directive|include
file|<private/qt_x11_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_struct
DECL|struct|PlatformQuirks
struct|struct
name|PlatformQuirks
block|{
DECL|enum|MediaFileTypes
enum|enum
name|MediaFileTypes
block|{
DECL|enumerator|mp3
name|mp3
block|,
DECL|enumerator|wav
name|wav
block|,
DECL|enumerator|ogg
name|ogg
block|}
enum|;
comment|/* On some platforms, libpng or libjpeg sacrifice precision for speed.        Esp. with NEON support, color values after decoding can be off by up        to three bytes.      */
DECL|function|isImageLoaderImprecise
specifier|static
specifier|inline
name|bool
name|isImageLoaderImprecise
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_WS_MAEMO_5
return|return
name|true
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
comment|// ### this is a very bad assumption, we should really check the version of libjpeg
return|return
name|X11
operator|->
name|desktopEnvironment
operator|==
name|DE_MEEGO_COMPOSITOR
return|;
else|#
directive|else
return|return
name|false
return|;
endif|#
directive|endif
block|}
comment|/* Some windowing systems automatically maximize apps on startup (e.g. Maemo)        "Normal" fixed-sized windows do not work, the WM ignores their size settings.     */
DECL|function|isAutoMaximizing
specifier|static
specifier|inline
name|bool
name|isAutoMaximizing
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_WS_MAEMO_5
return|return
name|true
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
return|return
name|X11
operator|->
name|desktopEnvironment
operator|==
name|DE_MEEGO_COMPOSITOR
return|;
else|#
directive|else
return|return
name|false
return|;
endif|#
directive|endif
block|}
DECL|function|haveMouseCursor
specifier|static
specifier|inline
name|bool
name|haveMouseCursor
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_WS_MAEMO_5
return|return
name|false
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
return|return
name|X11
operator|->
name|desktopEnvironment
operator|!=
name|DE_MEEGO_COMPOSITOR
return|;
else|#
directive|else
return|return
name|true
return|;
endif|#
directive|endif
block|}
comment|/* On some systems an ogg codec is not installed by default.     The autotests have to know which fileType is the default on the system*/
DECL|function|defaultMediaFileType
specifier|static
specifier|inline
name|MediaFileTypes
name|defaultMediaFileType
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_WS_MAEMO_5
return|return
name|PlatformQuirks
operator|::
name|mp3
return|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_WS_X11
comment|// ### very bad assumption
if|if
condition|(
name|X11
operator|->
name|desktopEnvironment
operator|==
name|DE_MEEGO_COMPOSITOR
condition|)
return|return
name|PlatformQuirks
operator|::
name|mp3
return|;
endif|#
directive|endif
return|return
name|PlatformQuirks
operator|::
name|ogg
return|;
block|}
block|}
struct|;
end_struct
begin_endif
endif|#
directive|endif
end_endif
end_unit
