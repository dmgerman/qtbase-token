begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtGlobal>
end_include
begin_include
include|#
directive|include
file|<math.h>
end_include
begin_class
DECL|class|tst_QNumeric
class|class
name|tst_QNumeric
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|fuzzyCompare_data
parameter_list|()
function_decl|;
name|void
name|fuzzyCompare
parameter_list|()
function_decl|;
name|void
name|qNan
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|fuzzyCompare_data
name|void
name|tst_QNumeric
operator|::
name|fuzzyCompare_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|double
argument_list|>
argument_list|(
literal|"val1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|double
argument_list|>
argument_list|(
literal|"val2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"isEqual"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"zero"
argument_list|)
operator|<<
literal|0.0
operator|<<
literal|0.0
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ten"
argument_list|)
operator|<<
literal|10.0
operator|<<
literal|10.0
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"large"
argument_list|)
operator|<<
literal|1000000000.0
operator|<<
literal|1000000000.0
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"small"
argument_list|)
operator|<<
literal|0.00000000001
operator|<<
literal|0.00000000001
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"eps"
argument_list|)
operator|<<
literal|10.000000000000001
operator|<<
literal|10.00000000000002
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"eps2"
argument_list|)
operator|<<
literal|10.000000000000001
operator|<<
literal|10.000000000000009
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mis1"
argument_list|)
operator|<<
literal|0.0
operator|<<
literal|1.0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mis2"
argument_list|)
operator|<<
literal|0.0
operator|<<
literal|10000000.0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mis3"
argument_list|)
operator|<<
literal|0.0
operator|<<
literal|0.000000001
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mis4"
argument_list|)
operator|<<
literal|100000000.0
operator|<<
literal|0.000000001
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mis4"
argument_list|)
operator|<<
literal|0.0000000001
operator|<<
literal|0.000000001
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fuzzyCompare
name|void
name|tst_QNumeric
operator|::
name|fuzzyCompare
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|double
argument_list|,
name|val1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|double
argument_list|,
name|val2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|isEqual
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|::
name|qFuzzyCompare
argument_list|(
name|val1
argument_list|,
name|val2
argument_list|)
argument_list|,
name|isEqual
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|::
name|qFuzzyCompare
argument_list|(
name|val2
argument_list|,
name|val1
argument_list|)
argument_list|,
name|isEqual
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|::
name|qFuzzyCompare
argument_list|(
operator|-
name|val1
argument_list|,
operator|-
name|val2
argument_list|)
argument_list|,
name|isEqual
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|::
name|qFuzzyCompare
argument_list|(
operator|-
name|val2
argument_list|,
operator|-
name|val1
argument_list|)
argument_list|,
name|isEqual
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qNan
name|void
name|tst_QNumeric
operator|::
name|qNan
parameter_list|()
block|{
name|double
name|nan
init|=
name|qQNaN
argument_list|()
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__INTEL_COMPILER
argument_list|)
name|QCOMPARE
argument_list|(
operator|(
literal|0
operator|>
name|nan
operator|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
literal|0
operator|<
name|nan
operator|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QSKIP
argument_list|(
literal|"This fails due to a bug in the Intel Compiler"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
literal|0
operator|>
name|nan
condition|)
name|QFAIL
argument_list|(
literal|"compiler thinks 0> nan"
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_DIAB
argument_list|)
name|QWARN
argument_list|(
literal|"!(0< nan) would fail due to a bug in dcc"
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
literal|0
operator|<
name|nan
condition|)
name|QFAIL
argument_list|(
literal|"compiler thinks 0< nan"
argument_list|)
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|qIsNaN
argument_list|(
name|nan
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsNaN
argument_list|(
name|nan
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsNaN
argument_list|(
operator|-
name|nan
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|inf
init|=
name|qInf
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|inf
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|-
name|inf
operator|<
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsInf
argument_list|(
name|inf
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsInf
argument_list|(
operator|-
name|inf
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsInf
argument_list|(
literal|2
operator|*
name|inf
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|1
operator|/
name|inf
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsNaN
argument_list|(
literal|0
operator|*
name|nan
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsNaN
argument_list|(
literal|0
operator|*
name|inf
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
literal|1
operator|/
name|inf
argument_list|,
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QNumeric
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qnumeric.moc"
end_include
end_unit
