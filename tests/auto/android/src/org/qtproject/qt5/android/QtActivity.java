begin_unit
begin_comment
comment|/*     Copyright (c) 2012, BogDan Vatra<bogdan@kde.org>     Contact: http://www.qt-project.org/legal      Redistribution and use in source and binary forms, with or without     modification, are permitted provided that the following conditions     are met:      1. Redistributions of source code must retain the above copyright     notice, this list of conditions and the following disclaimer.     2. Redistributions in binary form must reproduce the above copyright     notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.      THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR     IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES     OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.     IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,     INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT     NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,     DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY     THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF     THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
end_comment
begin_package
DECL|package|org.qtproject.qt5.android
package|package
name|org
operator|.
name|qtproject
operator|.
name|qt5
operator|.
name|android
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|qtproject
operator|.
name|qt5
operator|.
name|android
operator|.
name|tests
operator|.
name|R
import|;
end_import
begin_import
import|import
name|android
operator|.
name|app
operator|.
name|Activity
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|Context
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|res
operator|.
name|Configuration
import|;
end_import
begin_import
import|import
name|android
operator|.
name|graphics
operator|.
name|Rect
import|;
end_import
begin_import
import|import
name|android
operator|.
name|os
operator|.
name|Bundle
import|;
end_import
begin_import
import|import
name|android
operator|.
name|text
operator|.
name|method
operator|.
name|MetaKeyKeyListener
import|;
end_import
begin_import
import|import
name|android
operator|.
name|util
operator|.
name|DisplayMetrics
import|;
end_import
begin_import
import|import
name|android
operator|.
name|util
operator|.
name|Log
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|KeyCharacterMap
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|KeyEvent
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|Menu
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|MenuItem
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|Window
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|WindowManager
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|inputmethod
operator|.
name|InputMethodManager
import|;
end_import
begin_class
DECL|class|QtActivity
specifier|public
class|class
name|QtActivity
extends|extends
name|Activity
block|{
DECL|field|m_id
specifier|private
name|int
name|m_id
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|softwareKeyboardIsVisible
specifier|private
name|boolean
name|softwareKeyboardIsVisible
init|=
literal|false
decl_stmt|;
DECL|field|m_metaState
specifier|private
name|long
name|m_metaState
decl_stmt|;
DECL|field|m_lastChar
specifier|private
name|int
name|m_lastChar
init|=
literal|0
decl_stmt|;
DECL|field|m_fullScreen
specifier|private
name|boolean
name|m_fullScreen
init|=
literal|false
decl_stmt|;
DECL|field|m_started
specifier|private
name|boolean
name|m_started
init|=
literal|false
decl_stmt|;
DECL|field|m_surface
specifier|private
name|QtSurface
name|m_surface
init|=
literal|null
decl_stmt|;
DECL|field|m_usesGL
specifier|private
name|boolean
name|m_usesGL
init|=
literal|false
decl_stmt|;
DECL|method|loadQtLibs
specifier|private
name|void
name|loadQtLibs
parameter_list|(
name|String
index|[]
name|libs
parameter_list|,
name|String
name|environment
parameter_list|,
name|String
name|params
parameter_list|,
name|String
name|mainLib
parameter_list|,
name|String
name|nativeLibDir
parameter_list|)
throws|throws
name|Exception
block|{
name|QtNative
operator|.
name|loadQtLibraries
argument_list|(
name|libs
argument_list|)
expr_stmt|;
comment|// start application
specifier|final
name|String
name|envPaths
init|=
literal|"NECESSITAS_API_LEVEL=2\tHOME="
operator|+
name|getDir
argument_list|(
literal|"files"
argument_list|,
name|MODE_WORLD_WRITEABLE
operator||
name|MODE_WORLD_READABLE
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"\tTMPDIR="
operator|+
name|getDir
argument_list|(
literal|"files"
argument_list|,
name|MODE_WORLD_WRITEABLE
operator||
name|MODE_WORLD_READABLE
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"\tCACHE_PATH="
operator|+
name|getDir
argument_list|(
literal|"files"
argument_list|,
name|MODE_WORLD_WRITEABLE
operator||
name|MODE_WORLD_READABLE
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|environment
operator|!=
literal|null
operator|&&
name|environment
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|environment
operator|=
name|envPaths
operator|+
literal|"\t"
operator|+
name|environment
expr_stmt|;
else|else
name|environment
operator|=
name|envPaths
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|QtNative
operator|.
name|startApplication
argument_list|(
name|params
argument_list|,
name|environment
argument_list|,
name|mainLib
argument_list|,
name|nativeLibDir
argument_list|)
expr_stmt|;
name|m_surface
operator|.
name|applicationStarted
argument_list|(
name|m_usesGL
argument_list|)
expr_stmt|;
name|m_started
operator|=
literal|true
expr_stmt|;
block|}
DECL|field|m_quitApp
specifier|private
name|boolean
name|m_quitApp
init|=
literal|true
decl_stmt|;
DECL|field|m_debuggerProcess
specifier|private
name|Process
name|m_debuggerProcess
init|=
literal|null
decl_stmt|;
comment|// debugger process
DECL|method|startApp
specifier|private
name|void
name|startApp
parameter_list|(
specifier|final
name|boolean
name|firstStart
parameter_list|)
block|{
try|try
block|{
name|String
name|qtLibs
index|[]
init|=
name|getResources
argument_list|()
operator|.
name|getStringArray
argument_list|(
name|R
operator|.
name|array
operator|.
name|qt_libs
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|libraryList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qtLibs
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|libraryList
operator|.
name|add
argument_list|(
literal|"/data/local/tmp/qt/lib/lib"
operator|+
name|qtLibs
index|[
name|i
index|]
operator|+
literal|".so"
argument_list|)
expr_stmt|;
name|String
name|mainLib
init|=
literal|null
decl_stmt|;
name|String
name|nativeLibDir
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getIntent
argument_list|()
operator|.
name|getExtras
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|getIntent
argument_list|()
operator|.
name|getExtras
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"extra_libs"
argument_list|)
condition|)
block|{
name|String
name|extra_libs
init|=
name|getIntent
argument_list|()
operator|.
name|getExtras
argument_list|()
operator|.
name|getString
argument_list|(
literal|"extra_libs"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|lib
range|:
name|extra_libs
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
control|)
name|libraryList
operator|.
name|add
argument_list|(
name|lib
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getIntent
argument_list|()
operator|.
name|getExtras
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"lib_name"
argument_list|)
condition|)
block|{
name|mainLib
operator|=
name|getIntent
argument_list|()
operator|.
name|getExtras
argument_list|()
operator|.
name|getString
argument_list|(
literal|"lib_name"
argument_list|)
expr_stmt|;
name|libraryList
operator|.
name|add
argument_list|(
name|mainLib
argument_list|)
expr_stmt|;
name|int
name|slash
init|=
name|mainLib
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|slash
operator|>=
literal|0
condition|)
block|{
name|nativeLibDir
operator|=
name|mainLib
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|slash
operator|+
literal|1
argument_list|)
expr_stmt|;
name|mainLib
operator|=
name|mainLib
operator|.
name|substring
argument_list|(
name|slash
operator|+
literal|1
operator|+
literal|3
argument_list|,
name|mainLib
operator|.
name|length
argument_list|()
operator|-
literal|3
argument_list|)
expr_stmt|;
comment|//remove lib and .so
block|}
else|else
block|{
name|nativeLibDir
operator|=
literal|""
expr_stmt|;
block|}
block|}
if|if
condition|(
name|getIntent
argument_list|()
operator|.
name|getExtras
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"needsOpenGl"
argument_list|)
condition|)
name|m_usesGL
operator|=
name|getIntent
argument_list|()
operator|.
name|getExtras
argument_list|()
operator|.
name|getBoolean
argument_list|(
literal|"needsOpenGl"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|finish
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|libs
init|=
operator|new
name|String
index|[
name|libraryList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|libs
operator|=
name|libraryList
operator|.
name|toArray
argument_list|(
name|libs
argument_list|)
expr_stmt|;
name|loadQtLibs
argument_list|(
name|libs
argument_list|,
literal|"QT_QPA_EGLFS_HIDECURSOR=1\tQML2_IMPORT_PATH=/data/local/tmp/qt/qml\tQML_IMPORT_PATH=/data/local/tmp/qt/imports\tQT_PLUGIN_PATH=/data/local/tmp/qt/plugins"
argument_list|,
literal|"-xml\t-silent\t-o\toutput.xml"
argument_list|,
name|mainLib
argument_list|,
name|nativeLibDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Log
operator|.
name|e
argument_list|(
name|QtNative
operator|.
name|QtTAG
argument_list|,
literal|"Can't create main activity"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onCreate
specifier|public
name|void
name|onCreate
parameter_list|(
name|Bundle
name|savedInstanceState
parameter_list|)
block|{
name|super
operator|.
name|onCreate
argument_list|(
name|savedInstanceState
argument_list|)
expr_stmt|;
name|getDir
argument_list|(
literal|"files"
argument_list|,
name|MODE_WORLD_WRITEABLE
operator||
name|MODE_WORLD_READABLE
argument_list|)
expr_stmt|;
name|requestWindowFeature
argument_list|(
name|Window
operator|.
name|FEATURE_NO_TITLE
argument_list|)
expr_stmt|;
name|m_quitApp
operator|=
literal|true
expr_stmt|;
name|QtNative
operator|.
name|setMainActivity
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|getLastNonConfigurationInstance
argument_list|()
condition|)
block|{
name|DisplayMetrics
name|metrics
init|=
operator|new
name|DisplayMetrics
argument_list|()
decl_stmt|;
name|getWindowManager
argument_list|()
operator|.
name|getDefaultDisplay
argument_list|()
operator|.
name|getMetrics
argument_list|(
name|metrics
argument_list|)
expr_stmt|;
name|QtNative
operator|.
name|setApplicationDisplayMetrics
argument_list|(
name|metrics
operator|.
name|widthPixels
argument_list|,
name|metrics
operator|.
name|heightPixels
argument_list|,
name|metrics
operator|.
name|widthPixels
argument_list|,
name|metrics
operator|.
name|heightPixels
argument_list|,
name|metrics
operator|.
name|xdpi
argument_list|,
name|metrics
operator|.
name|ydpi
argument_list|)
expr_stmt|;
block|}
name|m_surface
operator|=
operator|new
name|QtSurface
argument_list|(
name|this
argument_list|,
name|m_id
argument_list|)
expr_stmt|;
name|setContentView
argument_list|(
name|m_surface
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|getLastNonConfigurationInstance
argument_list|()
condition|)
name|startApp
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|getQtSurface
specifier|public
name|QtSurface
name|getQtSurface
parameter_list|()
block|{
return|return
name|m_surface
return|;
block|}
annotation|@
name|Override
DECL|method|onRetainNonConfigurationInstance
specifier|public
name|Object
name|onRetainNonConfigurationInstance
parameter_list|()
block|{
name|super
operator|.
name|onRetainNonConfigurationInstance
argument_list|()
expr_stmt|;
name|m_quitApp
operator|=
literal|false
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|onDestroy
specifier|protected
name|void
name|onDestroy
parameter_list|()
block|{
name|QtNative
operator|.
name|setMainActivity
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|super
operator|.
name|onDestroy
argument_list|()
expr_stmt|;
if|if
condition|(
name|m_quitApp
condition|)
block|{
name|Log
operator|.
name|i
argument_list|(
name|QtNative
operator|.
name|QtTAG
argument_list|,
literal|"onDestroy"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_debuggerProcess
operator|!=
literal|null
condition|)
name|m_debuggerProcess
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// FIXME remove it or find a better way
block|}
name|QtNative
operator|.
name|setMainActivity
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onResume
specifier|protected
name|void
name|onResume
parameter_list|()
block|{
comment|// fire all lostActions
synchronized|synchronized
init|(
name|QtNative
operator|.
name|m_mainActivityMutex
init|)
block|{
name|Iterator
argument_list|<
name|Runnable
argument_list|>
name|itr
init|=
name|QtNative
operator|.
name|getLostActions
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
name|runOnUiThread
argument_list|(
name|itr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_started
condition|)
block|{
name|QtNative
operator|.
name|clearLostActions
argument_list|()
expr_stmt|;
name|QtNative
operator|.
name|updateWindow
argument_list|()
expr_stmt|;
block|}
block|}
name|super
operator|.
name|onResume
argument_list|()
expr_stmt|;
block|}
DECL|method|redrawWindow
specifier|public
name|void
name|redrawWindow
parameter_list|(
name|int
name|left
parameter_list|,
name|int
name|top
parameter_list|,
name|int
name|right
parameter_list|,
name|int
name|bottom
parameter_list|)
block|{
name|m_surface
operator|.
name|drawBitmap
argument_list|(
operator|new
name|Rect
argument_list|(
name|left
argument_list|,
name|top
argument_list|,
name|right
argument_list|,
name|bottom
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setFullScreen
specifier|public
name|void
name|setFullScreen
parameter_list|(
name|boolean
name|enterFullScreen
parameter_list|)
block|{
if|if
condition|(
name|m_fullScreen
operator|==
name|enterFullScreen
condition|)
return|return;
if|if
condition|(
name|m_fullScreen
operator|=
name|enterFullScreen
condition|)
name|getWindow
argument_list|()
operator|.
name|addFlags
argument_list|(
name|WindowManager
operator|.
name|LayoutParams
operator|.
name|FLAG_FULLSCREEN
argument_list|)
expr_stmt|;
else|else
name|getWindow
argument_list|()
operator|.
name|clearFlags
argument_list|(
name|WindowManager
operator|.
name|LayoutParams
operator|.
name|FLAG_FULLSCREEN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onSaveInstanceState
specifier|protected
name|void
name|onSaveInstanceState
parameter_list|(
name|Bundle
name|outState
parameter_list|)
block|{
name|super
operator|.
name|onSaveInstanceState
argument_list|(
name|outState
argument_list|)
expr_stmt|;
name|outState
operator|.
name|putBoolean
argument_list|(
literal|"FullScreen"
argument_list|,
name|m_fullScreen
argument_list|)
expr_stmt|;
name|outState
operator|.
name|putBoolean
argument_list|(
literal|"Started"
argument_list|,
name|m_started
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onRestoreInstanceState
specifier|protected
name|void
name|onRestoreInstanceState
parameter_list|(
name|Bundle
name|savedInstanceState
parameter_list|)
block|{
name|super
operator|.
name|onRestoreInstanceState
argument_list|(
name|savedInstanceState
argument_list|)
expr_stmt|;
name|setFullScreen
argument_list|(
name|savedInstanceState
operator|.
name|getBoolean
argument_list|(
literal|"FullScreen"
argument_list|)
argument_list|)
expr_stmt|;
name|m_started
operator|=
name|savedInstanceState
operator|.
name|getBoolean
argument_list|(
literal|"Started"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_started
condition|)
name|m_surface
operator|.
name|applicationStarted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|showSoftwareKeyboard
specifier|public
name|void
name|showSoftwareKeyboard
parameter_list|()
block|{
name|softwareKeyboardIsVisible
operator|=
literal|true
expr_stmt|;
name|InputMethodManager
name|imm
init|=
operator|(
name|InputMethodManager
operator|)
name|getSystemService
argument_list|(
name|Context
operator|.
name|INPUT_METHOD_SERVICE
argument_list|)
decl_stmt|;
name|imm
operator|.
name|toggleSoftInput
argument_list|(
name|InputMethodManager
operator|.
name|SHOW_FORCED
argument_list|,
name|InputMethodManager
operator|.
name|HIDE_IMPLICIT_ONLY
argument_list|)
expr_stmt|;
block|}
DECL|method|resetSoftwareKeyboard
specifier|public
name|void
name|resetSoftwareKeyboard
parameter_list|()
block|{     }
DECL|method|hideSoftwareKeyboard
specifier|public
name|void
name|hideSoftwareKeyboard
parameter_list|()
block|{
if|if
condition|(
name|softwareKeyboardIsVisible
condition|)
block|{
name|InputMethodManager
name|imm
init|=
operator|(
name|InputMethodManager
operator|)
name|getSystemService
argument_list|(
name|Context
operator|.
name|INPUT_METHOD_SERVICE
argument_list|)
decl_stmt|;
name|imm
operator|.
name|toggleSoftInput
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|softwareKeyboardIsVisible
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|dispatchKeyEvent
specifier|public
name|boolean
name|dispatchKeyEvent
parameter_list|(
name|KeyEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|m_started
operator|&&
name|event
operator|.
name|getAction
argument_list|()
operator|==
name|KeyEvent
operator|.
name|ACTION_MULTIPLE
operator|&&
name|event
operator|.
name|getCharacters
argument_list|()
operator|!=
literal|null
operator|&&
name|event
operator|.
name|getCharacters
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|1
operator|&&
name|event
operator|.
name|getKeyCode
argument_list|()
operator|==
literal|0
condition|)
block|{
name|Log
operator|.
name|i
argument_list|(
name|QtNative
operator|.
name|QtTAG
argument_list|,
literal|"dispatchKeyEvent at MULTIPLE with one character: "
operator|+
name|event
operator|.
name|getCharacters
argument_list|()
argument_list|)
expr_stmt|;
name|QtNative
operator|.
name|keyDown
argument_list|(
literal|0
argument_list|,
name|event
operator|.
name|getCharacters
argument_list|()
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|,
name|event
operator|.
name|getMetaState
argument_list|()
argument_list|)
expr_stmt|;
name|QtNative
operator|.
name|keyUp
argument_list|(
literal|0
argument_list|,
name|event
operator|.
name|getCharacters
argument_list|()
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|,
name|event
operator|.
name|getMetaState
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|dispatchKeyEvent
argument_list|(
name|event
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|onKeyDown
specifier|public
name|boolean
name|onKeyDown
parameter_list|(
name|int
name|keyCode
parameter_list|,
name|KeyEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_started
condition|)
return|return
literal|false
return|;
name|m_metaState
operator|=
name|MetaKeyKeyListener
operator|.
name|handleKeyDown
argument_list|(
name|m_metaState
argument_list|,
name|keyCode
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|int
name|c
init|=
name|event
operator|.
name|getUnicodeChar
argument_list|(
name|MetaKeyKeyListener
operator|.
name|getMetaState
argument_list|(
name|m_metaState
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|lc
init|=
name|c
decl_stmt|;
name|m_metaState
operator|=
name|MetaKeyKeyListener
operator|.
name|adjustMetaAfterKeypress
argument_list|(
name|m_metaState
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|c
operator|&
name|KeyCharacterMap
operator|.
name|COMBINING_ACCENT
operator|)
operator|!=
literal|0
condition|)
block|{
name|c
operator|=
name|c
operator|&
name|KeyCharacterMap
operator|.
name|COMBINING_ACCENT_MASK
expr_stmt|;
name|int
name|composed
init|=
name|KeyEvent
operator|.
name|getDeadChar
argument_list|(
name|m_lastChar
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|c
operator|=
name|composed
expr_stmt|;
block|}
name|m_lastChar
operator|=
name|lc
expr_stmt|;
if|if
condition|(
name|keyCode
operator|!=
name|KeyEvent
operator|.
name|KEYCODE_BACK
condition|)
name|QtNative
operator|.
name|keyDown
argument_list|(
name|keyCode
argument_list|,
name|c
argument_list|,
name|event
operator|.
name|getMetaState
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|onKeyUp
specifier|public
name|boolean
name|onKeyUp
parameter_list|(
name|int
name|keyCode
parameter_list|,
name|KeyEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_started
condition|)
return|return
literal|false
return|;
name|m_metaState
operator|=
name|MetaKeyKeyListener
operator|.
name|handleKeyUp
argument_list|(
name|m_metaState
argument_list|,
name|keyCode
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|QtNative
operator|.
name|keyUp
argument_list|(
name|keyCode
argument_list|,
name|event
operator|.
name|getUnicodeChar
argument_list|()
argument_list|,
name|event
operator|.
name|getMetaState
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|onConfigurationChanged
specifier|public
name|void
name|onConfigurationChanged
parameter_list|(
name|Configuration
name|newConfig
parameter_list|)
block|{
name|super
operator|.
name|onConfigurationChanged
argument_list|(
name|newConfig
argument_list|)
expr_stmt|;
block|}
comment|/*    public boolean onCreateOptionsMenu(Menu menu)     {         QtNative.createOptionsMenu(menu);         try {             return onPrepareOptionsMenu(menu);         } catch (Exception e) {             e.printStackTrace();             return false;         }     }      public boolean onPrepareOptionsMenu(Menu menu)     {         QtNative.prepareOptionsMenu(menu);         try {             return (Boolean) onPrepareOptionsMenu(menu);         } catch (Exception e) {             e.printStackTrace();             return false;         }     }      public boolean onOptionsItemSelected(MenuItem item)     {         return QtNative.optionsItemSelected(item.getGroupId(), item.getItemId());     }*/
block|}
end_class
end_unit
