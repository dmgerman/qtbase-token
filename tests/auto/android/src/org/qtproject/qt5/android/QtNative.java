begin_unit
begin_comment
comment|/*     Copyright (c) 2012, BogDan Vatra<bogdan@kde.org>     Contact: http://www.qt-project.org/legal      Redistribution and use in source and binary forms, with or without     modification, are permitted provided that the following conditions     are met:      1. Redistributions of source code must retain the above copyright     notice, this list of conditions and the following disclaimer.     2. Redistributions in binary form must reproduce the above copyright     notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.      THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR     IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES     OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.     IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,     INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT     NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,     DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY     THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF     THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
end_comment
begin_package
DECL|package|org.qtproject.qt5.android
package|package
name|org
operator|.
name|qtproject
operator|.
name|qt5
operator|.
name|android
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|android
operator|.
name|app
operator|.
name|Activity
import|;
end_import
begin_import
import|import
name|android
operator|.
name|app
operator|.
name|Application
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|Intent
import|;
end_import
begin_import
import|import
name|android
operator|.
name|net
operator|.
name|Uri
import|;
end_import
begin_import
import|import
name|android
operator|.
name|util
operator|.
name|Log
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|ContextMenu
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|Menu
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|MotionEvent
import|;
end_import
begin_class
DECL|class|QtNative
specifier|public
class|class
name|QtNative
extends|extends
name|Application
block|{
DECL|field|m_mainActivity
specifier|private
specifier|static
name|QtActivity
name|m_mainActivity
init|=
literal|null
decl_stmt|;
DECL|field|m_mainView
specifier|private
specifier|static
name|QtSurface
name|m_mainView
init|=
literal|null
decl_stmt|;
DECL|field|m_mainActivityMutex
specifier|public
specifier|static
name|Object
name|m_mainActivityMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|// mutex used to synchronize runnable operations
DECL|field|QtTAG
specifier|public
specifier|static
specifier|final
name|String
name|QtTAG
init|=
literal|"Qt JAVA"
decl_stmt|;
comment|// string used for Log.x
DECL|field|m_lostActions
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|Runnable
argument_list|>
name|m_lostActions
init|=
operator|new
name|ArrayList
argument_list|<
name|Runnable
argument_list|>
argument_list|()
decl_stmt|;
comment|// a list containing all actions which could not be performed (e.g. the main activity is destroyed, etc.)
DECL|field|m_started
specifier|private
specifier|static
name|boolean
name|m_started
init|=
literal|false
decl_stmt|;
DECL|field|m_displayMetricsScreenWidthPixels
specifier|private
specifier|static
name|int
name|m_displayMetricsScreenWidthPixels
init|=
literal|0
decl_stmt|;
DECL|field|m_displayMetricsScreenHeightPixels
specifier|private
specifier|static
name|int
name|m_displayMetricsScreenHeightPixels
init|=
literal|0
decl_stmt|;
DECL|field|m_displayMetricsDesktopWidthPixels
specifier|private
specifier|static
name|int
name|m_displayMetricsDesktopWidthPixels
init|=
literal|0
decl_stmt|;
DECL|field|m_displayMetricsDesktopHeightPixels
specifier|private
specifier|static
name|int
name|m_displayMetricsDesktopHeightPixels
init|=
literal|0
decl_stmt|;
DECL|field|m_displayMetricsXDpi
specifier|private
specifier|static
name|double
name|m_displayMetricsXDpi
init|=
literal|.0
decl_stmt|;
DECL|field|m_displayMetricsYDpi
specifier|private
specifier|static
name|double
name|m_displayMetricsYDpi
init|=
literal|.0
decl_stmt|;
DECL|field|m_oldx
DECL|field|m_oldy
specifier|private
specifier|static
name|int
name|m_oldx
decl_stmt|,
name|m_oldy
decl_stmt|;
DECL|field|m_moveThreshold
specifier|private
specifier|static
specifier|final
name|int
name|m_moveThreshold
init|=
literal|0
decl_stmt|;
DECL|method|classLoader
specifier|public
specifier|static
name|ClassLoader
name|classLoader
parameter_list|()
block|{
return|return
name|m_mainActivity
operator|.
name|getClassLoader
argument_list|()
return|;
block|}
DECL|method|activity
specifier|public
specifier|static
name|Activity
name|activity
parameter_list|()
block|{
return|return
name|m_mainActivity
return|;
block|}
DECL|method|mainView
specifier|public
specifier|static
name|QtSurface
name|mainView
parameter_list|()
block|{
return|return
name|m_mainView
return|;
block|}
DECL|method|openURL
specifier|public
specifier|static
name|void
name|openURL
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|Uri
name|uri
init|=
name|Uri
operator|.
name|parse
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|Intent
name|intent
init|=
operator|new
name|Intent
argument_list|(
name|Intent
operator|.
name|ACTION_VIEW
argument_list|,
name|uri
argument_list|)
decl_stmt|;
name|activity
argument_list|()
operator|.
name|startActivity
argument_list|(
name|intent
argument_list|)
expr_stmt|;
block|}
comment|// this method loads full path libs
DECL|method|loadQtLibraries
specifier|public
specifier|static
name|void
name|loadQtLibraries
parameter_list|(
name|String
index|[]
name|libraries
parameter_list|)
block|{
if|if
condition|(
name|libraries
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|libraries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|libraries
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
name|System
operator|.
name|load
argument_list|(
name|libraries
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
name|Log
operator|.
name|i
argument_list|(
name|QtTAG
argument_list|,
literal|"Can't load '"
operator|+
name|libraries
index|[
name|i
index|]
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Log
operator|.
name|i
argument_list|(
name|QtTAG
argument_list|,
literal|"Can't load '"
operator|+
name|libraries
index|[
name|i
index|]
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// this method loads bundled libs by name.
DECL|method|loadBundledLibraries
specifier|public
specifier|static
name|void
name|loadBundledLibraries
parameter_list|(
name|String
index|[]
name|libraries
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|libraries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|System
operator|.
name|loadLibrary
argument_list|(
name|libraries
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsatisfiedLinkError
name|e
parameter_list|)
block|{
name|Log
operator|.
name|i
argument_list|(
name|QtTAG
argument_list|,
literal|"Can't load '"
operator|+
name|libraries
index|[
name|i
index|]
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
name|Log
operator|.
name|i
argument_list|(
name|QtTAG
argument_list|,
literal|"Can't load '"
operator|+
name|libraries
index|[
name|i
index|]
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Log
operator|.
name|i
argument_list|(
name|QtTAG
argument_list|,
literal|"Can't load '"
operator|+
name|libraries
index|[
name|i
index|]
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|setMainActivity
specifier|public
specifier|static
name|void
name|setMainActivity
parameter_list|(
name|QtActivity
name|qtMainActivity
parameter_list|)
block|{
synchronized|synchronized
init|(
name|m_mainActivityMutex
init|)
block|{
name|m_mainActivity
operator|=
name|qtMainActivity
expr_stmt|;
block|}
block|}
DECL|method|setMainView
specifier|public
specifier|static
name|void
name|setMainView
parameter_list|(
name|QtSurface
name|qtSurface
parameter_list|)
block|{
synchronized|synchronized
init|(
name|m_mainActivityMutex
init|)
block|{
name|m_mainView
operator|=
name|qtSurface
expr_stmt|;
block|}
block|}
DECL|method|getLostActions
specifier|static
specifier|public
name|ArrayList
argument_list|<
name|Runnable
argument_list|>
name|getLostActions
parameter_list|()
block|{
return|return
name|m_lostActions
return|;
block|}
DECL|method|clearLostActions
specifier|static
specifier|public
name|void
name|clearLostActions
parameter_list|()
block|{
name|m_lostActions
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|runAction
specifier|private
specifier|static
name|boolean
name|runAction
parameter_list|(
name|Runnable
name|action
parameter_list|)
block|{
synchronized|synchronized
init|(
name|m_mainActivityMutex
init|)
block|{
if|if
condition|(
name|m_mainActivity
operator|==
literal|null
condition|)
name|m_lostActions
operator|.
name|add
argument_list|(
name|action
argument_list|)
expr_stmt|;
else|else
name|m_mainActivity
operator|.
name|runOnUiThread
argument_list|(
name|action
argument_list|)
expr_stmt|;
return|return
name|m_mainActivity
operator|!=
literal|null
return|;
block|}
block|}
DECL|method|startApplication
specifier|public
specifier|static
name|boolean
name|startApplication
parameter_list|(
name|String
name|params
parameter_list|,
name|String
name|environment
parameter_list|,
name|String
name|mainLibrary
parameter_list|,
name|String
name|nativeLibraryDir
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|nativeLibraryDir
operator|+
literal|"lib"
operator|+
name|mainLibrary
operator|+
literal|".so"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|exists
argument_list|()
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Can't find main library '"
operator|+
name|mainLibrary
operator|+
literal|"'"
argument_list|)
throw|;
if|if
condition|(
name|params
operator|==
literal|null
condition|)
name|params
operator|=
literal|"-platform\tandroid"
expr_stmt|;
name|boolean
name|res
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|m_mainActivityMutex
init|)
block|{
name|res
operator|=
name|startQtAndroidPlugin
argument_list|()
expr_stmt|;
name|setDisplayMetrics
argument_list|(
name|m_displayMetricsScreenWidthPixels
argument_list|,
name|m_displayMetricsScreenHeightPixels
argument_list|,
name|m_displayMetricsDesktopWidthPixels
argument_list|,
name|m_displayMetricsDesktopHeightPixels
argument_list|,
name|m_displayMetricsXDpi
argument_list|,
name|m_displayMetricsYDpi
argument_list|)
expr_stmt|;
name|startQtApplication
argument_list|(
name|f
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"\t"
operator|+
name|params
argument_list|,
name|environment
argument_list|)
expr_stmt|;
name|m_started
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
DECL|method|setApplicationDisplayMetrics
specifier|public
specifier|static
name|void
name|setApplicationDisplayMetrics
parameter_list|(
name|int
name|screenWidthPixels
parameter_list|,
name|int
name|screenHeightPixels
parameter_list|,
name|int
name|desktopWidthPixels
parameter_list|,
name|int
name|desktopHeightPixels
parameter_list|,
name|double
name|XDpi
parameter_list|,
name|double
name|YDpi
parameter_list|)
block|{
comment|/* Fix buggy dpi report */
if|if
condition|(
name|XDpi
operator|<
name|android
operator|.
name|util
operator|.
name|DisplayMetrics
operator|.
name|DENSITY_LOW
condition|)
name|XDpi
operator|=
name|android
operator|.
name|util
operator|.
name|DisplayMetrics
operator|.
name|DENSITY_LOW
expr_stmt|;
if|if
condition|(
name|YDpi
operator|<
name|android
operator|.
name|util
operator|.
name|DisplayMetrics
operator|.
name|DENSITY_LOW
condition|)
name|YDpi
operator|=
name|android
operator|.
name|util
operator|.
name|DisplayMetrics
operator|.
name|DENSITY_LOW
expr_stmt|;
synchronized|synchronized
init|(
name|m_mainActivityMutex
init|)
block|{
if|if
condition|(
name|m_started
condition|)
block|{
name|setDisplayMetrics
argument_list|(
name|screenWidthPixels
argument_list|,
name|screenHeightPixels
argument_list|,
name|desktopWidthPixels
argument_list|,
name|desktopHeightPixels
argument_list|,
name|XDpi
argument_list|,
name|YDpi
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m_displayMetricsScreenWidthPixels
operator|=
name|screenWidthPixels
expr_stmt|;
name|m_displayMetricsScreenHeightPixels
operator|=
name|screenHeightPixels
expr_stmt|;
name|m_displayMetricsDesktopWidthPixels
operator|=
name|desktopWidthPixels
expr_stmt|;
name|m_displayMetricsDesktopHeightPixels
operator|=
name|desktopHeightPixels
expr_stmt|;
name|m_displayMetricsXDpi
operator|=
name|XDpi
expr_stmt|;
name|m_displayMetricsYDpi
operator|=
name|YDpi
expr_stmt|;
block|}
block|}
block|}
DECL|method|pauseApplication
specifier|public
specifier|static
name|void
name|pauseApplication
parameter_list|()
block|{
synchronized|synchronized
init|(
name|m_mainActivityMutex
init|)
block|{
if|if
condition|(
name|m_started
condition|)
name|pauseQtApp
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|resumeApplication
specifier|public
specifier|static
name|void
name|resumeApplication
parameter_list|()
block|{
synchronized|synchronized
init|(
name|m_mainActivityMutex
init|)
block|{
if|if
condition|(
name|m_started
condition|)
block|{
name|resumeQtApp
argument_list|()
expr_stmt|;
name|updateWindow
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// application methods
DECL|method|startQtApplication
specifier|public
specifier|static
specifier|native
name|void
name|startQtApplication
parameter_list|(
name|String
name|params
parameter_list|,
name|String
name|env
parameter_list|)
function_decl|;
DECL|method|pauseQtApp
specifier|public
specifier|static
specifier|native
name|void
name|pauseQtApp
parameter_list|()
function_decl|;
DECL|method|resumeQtApp
specifier|public
specifier|static
specifier|native
name|void
name|resumeQtApp
parameter_list|()
function_decl|;
DECL|method|startQtAndroidPlugin
specifier|public
specifier|static
specifier|native
name|boolean
name|startQtAndroidPlugin
parameter_list|()
function_decl|;
DECL|method|quitQtAndroidPlugin
specifier|public
specifier|static
specifier|native
name|void
name|quitQtAndroidPlugin
parameter_list|()
function_decl|;
DECL|method|terminateQt
specifier|public
specifier|static
specifier|native
name|void
name|terminateQt
parameter_list|()
function_decl|;
comment|// application methods
DECL|method|quitApp
specifier|private
specifier|static
name|void
name|quitApp
parameter_list|()
block|{
name|m_mainActivity
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
DECL|method|redrawSurface
specifier|private
specifier|static
name|void
name|redrawSurface
parameter_list|(
specifier|final
name|int
name|left
parameter_list|,
specifier|final
name|int
name|top
parameter_list|,
specifier|final
name|int
name|right
parameter_list|,
specifier|final
name|int
name|bottom
parameter_list|)
block|{
name|runAction
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|m_mainActivity
operator|.
name|redrawWindow
argument_list|(
name|left
argument_list|,
name|top
argument_list|,
name|right
argument_list|,
name|bottom
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onTerminate
specifier|public
name|void
name|onTerminate
parameter_list|()
block|{
if|if
condition|(
name|m_started
condition|)
name|terminateQt
argument_list|()
expr_stmt|;
name|super
operator|.
name|onTerminate
argument_list|()
expr_stmt|;
block|}
DECL|method|sendTouchEvent
specifier|static
specifier|public
name|void
name|sendTouchEvent
parameter_list|(
name|MotionEvent
name|event
parameter_list|,
name|int
name|id
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getAction
argument_list|()
condition|)
block|{
case|case
name|MotionEvent
operator|.
name|ACTION_UP
case|:
name|mouseUp
argument_list|(
name|id
argument_list|,
operator|(
name|int
operator|)
name|event
operator|.
name|getX
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|event
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|MotionEvent
operator|.
name|ACTION_DOWN
case|:
name|mouseDown
argument_list|(
name|id
argument_list|,
operator|(
name|int
operator|)
name|event
operator|.
name|getX
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|event
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
name|m_oldx
operator|=
operator|(
name|int
operator|)
name|event
operator|.
name|getX
argument_list|()
expr_stmt|;
name|m_oldy
operator|=
operator|(
name|int
operator|)
name|event
operator|.
name|getY
argument_list|()
expr_stmt|;
break|break;
case|case
name|MotionEvent
operator|.
name|ACTION_MOVE
case|:
name|int
name|dx
init|=
call|(
name|int
call|)
argument_list|(
name|event
operator|.
name|getX
argument_list|()
operator|-
name|m_oldx
argument_list|)
decl_stmt|;
name|int
name|dy
init|=
call|(
name|int
call|)
argument_list|(
name|event
operator|.
name|getY
argument_list|()
operator|-
name|m_oldy
argument_list|)
decl_stmt|;
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|dx
argument_list|)
operator|>
name|m_moveThreshold
operator|||
name|Math
operator|.
name|abs
argument_list|(
name|dy
argument_list|)
operator|>
name|m_moveThreshold
condition|)
block|{
name|mouseMove
argument_list|(
name|id
argument_list|,
operator|(
name|int
operator|)
name|event
operator|.
name|getX
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|event
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
name|m_oldx
operator|=
operator|(
name|int
operator|)
name|event
operator|.
name|getX
argument_list|()
expr_stmt|;
name|m_oldy
operator|=
operator|(
name|int
operator|)
name|event
operator|.
name|getY
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
DECL|method|sendTrackballEvent
specifier|static
specifier|public
name|void
name|sendTrackballEvent
parameter_list|(
name|MotionEvent
name|event
parameter_list|,
name|int
name|id
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getAction
argument_list|()
condition|)
block|{
case|case
name|MotionEvent
operator|.
name|ACTION_UP
case|:
name|mouseUp
argument_list|(
name|id
argument_list|,
operator|(
name|int
operator|)
name|event
operator|.
name|getX
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|event
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|MotionEvent
operator|.
name|ACTION_DOWN
case|:
name|mouseDown
argument_list|(
name|id
argument_list|,
operator|(
name|int
operator|)
name|event
operator|.
name|getX
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|event
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
name|m_oldx
operator|=
operator|(
name|int
operator|)
name|event
operator|.
name|getX
argument_list|()
expr_stmt|;
name|m_oldy
operator|=
operator|(
name|int
operator|)
name|event
operator|.
name|getY
argument_list|()
expr_stmt|;
break|break;
case|case
name|MotionEvent
operator|.
name|ACTION_MOVE
case|:
name|int
name|dx
init|=
call|(
name|int
call|)
argument_list|(
name|event
operator|.
name|getX
argument_list|()
operator|-
name|m_oldx
argument_list|)
decl_stmt|;
name|int
name|dy
init|=
call|(
name|int
call|)
argument_list|(
name|event
operator|.
name|getY
argument_list|()
operator|-
name|m_oldy
argument_list|)
decl_stmt|;
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|dx
argument_list|)
operator|>
literal|5
operator|||
name|Math
operator|.
name|abs
argument_list|(
name|dy
argument_list|)
operator|>
literal|5
condition|)
block|{
name|mouseMove
argument_list|(
name|id
argument_list|,
operator|(
name|int
operator|)
name|event
operator|.
name|getX
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|event
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
name|m_oldx
operator|=
operator|(
name|int
operator|)
name|event
operator|.
name|getX
argument_list|()
expr_stmt|;
name|m_oldy
operator|=
operator|(
name|int
operator|)
name|event
operator|.
name|getY
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
DECL|method|updateSelection
specifier|private
specifier|static
name|void
name|updateSelection
parameter_list|(
specifier|final
name|int
name|selStart
parameter_list|,
specifier|final
name|int
name|selEnd
parameter_list|,
specifier|final
name|int
name|candidatesStart
parameter_list|,
specifier|final
name|int
name|candidatesEnd
parameter_list|)
block|{     }
DECL|method|showSoftwareKeyboard
specifier|private
specifier|static
name|void
name|showSoftwareKeyboard
parameter_list|(
specifier|final
name|int
name|x
parameter_list|,
specifier|final
name|int
name|y
parameter_list|,
specifier|final
name|int
name|width
parameter_list|,
specifier|final
name|int
name|height
parameter_list|,
specifier|final
name|int
name|inputHints
parameter_list|)
block|{
name|runAction
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|m_mainActivity
operator|.
name|showSoftwareKeyboard
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|resetSoftwareKeyboard
specifier|private
specifier|static
name|void
name|resetSoftwareKeyboard
parameter_list|()
block|{
name|runAction
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|m_mainActivity
operator|.
name|resetSoftwareKeyboard
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|hideSoftwareKeyboard
specifier|private
specifier|static
name|void
name|hideSoftwareKeyboard
parameter_list|()
block|{
name|runAction
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|m_mainActivity
operator|.
name|hideSoftwareKeyboard
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|isSoftwareKeyboardVisible
specifier|private
specifier|static
name|boolean
name|isSoftwareKeyboardVisible
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|setFullScreen
specifier|private
specifier|static
name|void
name|setFullScreen
parameter_list|(
specifier|final
name|boolean
name|fullScreen
parameter_list|)
block|{
name|runAction
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|m_mainActivity
operator|.
name|setFullScreen
argument_list|(
name|fullScreen
argument_list|)
expr_stmt|;
name|updateWindow
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|registerClipboardManager
specifier|private
specifier|static
name|void
name|registerClipboardManager
parameter_list|()
block|{     }
DECL|method|setClipboardText
specifier|private
specifier|static
name|void
name|setClipboardText
parameter_list|(
name|String
name|text
parameter_list|)
block|{     }
DECL|method|hasClipboardText
specifier|private
specifier|static
name|boolean
name|hasClipboardText
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|getClipboardText
specifier|private
specifier|static
name|String
name|getClipboardText
parameter_list|()
block|{
return|return
literal|"Qt"
return|;
block|}
DECL|method|openContextMenu
specifier|private
specifier|static
name|void
name|openContextMenu
parameter_list|()
block|{     }
DECL|method|closeContextMenu
specifier|private
specifier|static
name|void
name|closeContextMenu
parameter_list|()
block|{     }
DECL|method|resetOptionsMenu
specifier|private
specifier|static
name|void
name|resetOptionsMenu
parameter_list|()
block|{     }
comment|// screen methods
DECL|method|setDisplayMetrics
specifier|public
specifier|static
specifier|native
name|void
name|setDisplayMetrics
parameter_list|(
name|int
name|screenWidthPixels
parameter_list|,
name|int
name|screenHeightPixels
parameter_list|,
name|int
name|desktopWidthPixels
parameter_list|,
name|int
name|desktopHeightPixels
parameter_list|,
name|double
name|XDpi
parameter_list|,
name|double
name|YDpi
parameter_list|)
function_decl|;
DECL|method|handleOrientationChanged
specifier|public
specifier|static
specifier|native
name|void
name|handleOrientationChanged
parameter_list|(
name|int
name|newOrientation
parameter_list|)
function_decl|;
comment|// screen methods
DECL|method|showOptionsMenu
specifier|private
specifier|static
name|void
name|showOptionsMenu
parameter_list|()
block|{
name|runAction
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|m_mainActivity
operator|!=
literal|null
condition|)
name|m_mainActivity
operator|.
name|openOptionsMenu
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|hideOptionsMenu
specifier|private
specifier|static
name|void
name|hideOptionsMenu
parameter_list|()
block|{
name|runAction
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|m_mainActivity
operator|!=
literal|null
condition|)
name|m_mainActivity
operator|.
name|closeOptionsMenu
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|showContextMenu
specifier|private
specifier|static
name|void
name|showContextMenu
parameter_list|()
block|{
name|runAction
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|m_mainActivity
operator|!=
literal|null
condition|)
name|m_mainActivity
operator|.
name|openContextMenu
argument_list|(
name|m_mainView
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|hideContextMenu
specifier|private
specifier|static
name|void
name|hideContextMenu
parameter_list|()
block|{
name|runAction
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|m_mainActivity
operator|!=
literal|null
condition|)
name|m_mainActivity
operator|.
name|closeContextMenu
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// pointer methods
DECL|method|mouseDown
specifier|public
specifier|static
specifier|native
name|void
name|mouseDown
parameter_list|(
name|int
name|winId
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
function_decl|;
DECL|method|mouseUp
specifier|public
specifier|static
specifier|native
name|void
name|mouseUp
parameter_list|(
name|int
name|winId
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
function_decl|;
DECL|method|mouseMove
specifier|public
specifier|static
specifier|native
name|void
name|mouseMove
parameter_list|(
name|int
name|winId
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
function_decl|;
DECL|method|touchBegin
specifier|public
specifier|static
specifier|native
name|void
name|touchBegin
parameter_list|(
name|int
name|winId
parameter_list|)
function_decl|;
DECL|method|touchAdd
specifier|public
specifier|static
specifier|native
name|void
name|touchAdd
parameter_list|(
name|int
name|winId
parameter_list|,
name|int
name|pointerId
parameter_list|,
name|int
name|action
parameter_list|,
name|boolean
name|primary
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|float
name|size
parameter_list|,
name|float
name|pressure
parameter_list|)
function_decl|;
DECL|method|touchEnd
specifier|public
specifier|static
specifier|native
name|void
name|touchEnd
parameter_list|(
name|int
name|winId
parameter_list|,
name|int
name|action
parameter_list|)
function_decl|;
DECL|method|longPress
specifier|public
specifier|static
specifier|native
name|void
name|longPress
parameter_list|(
name|int
name|winId
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
function_decl|;
comment|// pointer methods
comment|// keyboard methods
DECL|method|keyDown
specifier|public
specifier|static
specifier|native
name|void
name|keyDown
parameter_list|(
name|int
name|key
parameter_list|,
name|int
name|unicode
parameter_list|,
name|int
name|modifier
parameter_list|)
function_decl|;
DECL|method|keyUp
specifier|public
specifier|static
specifier|native
name|void
name|keyUp
parameter_list|(
name|int
name|key
parameter_list|,
name|int
name|unicode
parameter_list|,
name|int
name|modifier
parameter_list|)
function_decl|;
comment|// keyboard methods
comment|// surface methods
DECL|method|destroySurface
specifier|public
specifier|static
specifier|native
name|void
name|destroySurface
parameter_list|()
function_decl|;
DECL|method|setSurface
specifier|public
specifier|static
specifier|native
name|void
name|setSurface
parameter_list|(
name|Object
name|surface
parameter_list|)
function_decl|;
DECL|method|lockSurface
specifier|public
specifier|static
specifier|native
name|void
name|lockSurface
parameter_list|()
function_decl|;
DECL|method|unlockSurface
specifier|public
specifier|static
specifier|native
name|void
name|unlockSurface
parameter_list|()
function_decl|;
comment|// surface methods
comment|// window methods
DECL|method|updateWindow
specifier|public
specifier|static
specifier|native
name|void
name|updateWindow
parameter_list|()
function_decl|;
comment|// window methods
comment|// menu methods
DECL|method|onPrepareOptionsMenu
specifier|public
specifier|static
specifier|native
name|boolean
name|onPrepareOptionsMenu
parameter_list|(
name|Menu
name|menu
parameter_list|)
function_decl|;
DECL|method|onOptionsItemSelected
specifier|public
specifier|static
specifier|native
name|boolean
name|onOptionsItemSelected
parameter_list|(
name|int
name|itemId
parameter_list|,
name|boolean
name|checked
parameter_list|)
function_decl|;
DECL|method|onOptionsMenuClosed
specifier|public
specifier|static
specifier|native
name|void
name|onOptionsMenuClosed
parameter_list|(
name|Menu
name|menu
parameter_list|)
function_decl|;
DECL|method|onCreateContextMenu
specifier|public
specifier|static
specifier|native
name|void
name|onCreateContextMenu
parameter_list|(
name|ContextMenu
name|menu
parameter_list|)
function_decl|;
DECL|method|onContextItemSelected
specifier|public
specifier|static
specifier|native
name|boolean
name|onContextItemSelected
parameter_list|(
name|int
name|itemId
parameter_list|,
name|boolean
name|checked
parameter_list|)
function_decl|;
DECL|method|onContextMenuClosed
specifier|public
specifier|static
specifier|native
name|void
name|onContextMenuClosed
parameter_list|(
name|Menu
name|menu
parameter_list|)
function_decl|;
comment|// menu methods
block|}
end_class
end_unit
