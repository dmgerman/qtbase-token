begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_class
DECL|class|tst_QCryptographicHash
class|class
name|tst_QCryptographicHash
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|repeated_result_data
parameter_list|()
function_decl|;
name|void
name|repeated_result
parameter_list|()
function_decl|;
name|void
name|intermediary_result_data
parameter_list|()
function_decl|;
name|void
name|intermediary_result
parameter_list|()
function_decl|;
name|void
name|sha1
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_include
include|#
directive|include
file|<QtCore>
end_include
begin_function
DECL|function|repeated_result_data
name|void
name|tst_QCryptographicHash
operator|::
name|repeated_result_data
parameter_list|()
block|{
name|intermediary_result_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|repeated_result
name|void
name|tst_QCryptographicHash
operator|::
name|repeated_result
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|algo
argument_list|)
expr_stmt|;
name|QCryptographicHash
operator|::
name|Algorithm
name|_algo
init|=
name|QCryptographicHash
operator|::
name|Algorithm
argument_list|(
name|algo
argument_list|)
decl_stmt|;
name|QCryptographicHash
name|hash
argument_list|(
name|_algo
argument_list|)
decl_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|hash
operator|.
name|addData
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|hash_first
argument_list|)
expr_stmt|;
name|QByteArray
name|result
init|=
name|hash
operator|.
name|result
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|hash_first
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|hash
operator|.
name|result
argument_list|()
argument_list|)
expr_stmt|;
name|hash
operator|.
name|reset
argument_list|()
expr_stmt|;
name|hash
operator|.
name|addData
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|result
operator|=
name|hash
operator|.
name|result
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|hash_first
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|hash
operator|.
name|result
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|intermediary_result_data
name|void
name|tst_QCryptographicHash
operator|::
name|intermediary_result_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"algo"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"first"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"second"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"hash_first"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"hash_firstsecond"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"md4"
argument_list|)
operator|<<
name|int
argument_list|(
name|QCryptographicHash
operator|::
name|Md4
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"A448017AAF21D8525FC10AE87AA6729D"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"03E5E436DAFAF3B9B3589DB83C417C6B"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"md5"
argument_list|)
operator|<<
name|int
argument_list|(
name|QCryptographicHash
operator|::
name|Md5
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"900150983CD24FB0D6963F7D28E17F72"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"440AC85892CA43AD26D44C7AD9D47D3E"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"sha1"
argument_list|)
operator|<<
name|int
argument_list|(
name|QCryptographicHash
operator|::
name|Sha1
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"A9993E364706816ABA3E25717850C26C9CD0D89D"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"F8C1D87006FBF7E5CC4B026C3138BC046883DC71"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|intermediary_result
name|void
name|tst_QCryptographicHash
operator|::
name|intermediary_result
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|algo
argument_list|)
expr_stmt|;
name|QCryptographicHash
operator|::
name|Algorithm
name|_algo
init|=
name|QCryptographicHash
operator|::
name|Algorithm
argument_list|(
name|algo
argument_list|)
decl_stmt|;
name|QCryptographicHash
name|hash
argument_list|(
name|_algo
argument_list|)
decl_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|hash
operator|.
name|addData
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|hash_first
argument_list|)
expr_stmt|;
name|QByteArray
name|result
init|=
name|hash
operator|.
name|result
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|hash_first
argument_list|)
expr_stmt|;
comment|// don't reset
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|second
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|hash_firstsecond
argument_list|)
expr_stmt|;
name|hash
operator|.
name|addData
argument_list|(
name|second
argument_list|)
expr_stmt|;
name|result
operator|=
name|hash
operator|.
name|result
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|hash_firstsecond
argument_list|)
expr_stmt|;
name|hash
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sha1
name|void
name|tst_QCryptographicHash
operator|::
name|sha1
parameter_list|()
block|{
comment|//  SHA1("abc") =
comment|//      A9993E36 4706816A BA3E2571 7850C26C 9CD0D89D
name|QCOMPARE
argument_list|(
name|QCryptographicHash
operator|::
name|hash
argument_list|(
literal|"abc"
argument_list|,
name|QCryptographicHash
operator|::
name|Sha1
argument_list|)
operator|.
name|toHex
argument_list|()
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"A9993E364706816ABA3E25717850C26C9CD0D89D"
argument_list|)
argument_list|)
expr_stmt|;
comment|//  SHA1("abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq") =
comment|//      84983E44 1C3BD26E BAAE4AA1 F95129E5 E54670F1
name|QCOMPARE
argument_list|(
name|QCryptographicHash
operator|::
name|hash
argument_list|(
literal|"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq"
argument_list|,
name|QCryptographicHash
operator|::
name|Sha1
argument_list|)
operator|.
name|toHex
argument_list|()
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"84983E441C3BD26EBAAE4AA1F95129E5E54670F1"
argument_list|)
argument_list|)
expr_stmt|;
comment|//  SHA1(A million repetitions of "a") =
comment|//      34AA973C D4C4DAA4 F61EEB2B DBAD2731 6534016F
name|QByteArray
name|as
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000000
condition|;
operator|++
name|i
control|)
name|as
operator|+=
literal|'a'
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QCryptographicHash
operator|::
name|hash
argument_list|(
name|as
argument_list|,
name|QCryptographicHash
operator|::
name|Sha1
argument_list|)
operator|.
name|toHex
argument_list|()
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"34AA973CD4C4DAA4F61EEB2BDBAD27316534016F"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QCryptographicHash
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qcryptographichash.moc"
end_include
end_unit
