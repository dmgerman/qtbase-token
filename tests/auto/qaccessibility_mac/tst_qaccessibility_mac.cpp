begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_MAC_USE_COCOA
argument_list|)
end_if
begin_include
include|#
directive|include
file|<private/qt_mac_p.h>
end_include
begin_undef
DECL|macro|verify
undef|#
directive|undef
name|verify
end_undef
begin_comment
DECL|macro|verify
comment|// yes, lets reserve the word "verify"
end_comment
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QTimer>
end_include
begin_include
include|#
directive|include
file|<QString>
end_include
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_include
include|#
directive|include
file|<QVariant>
end_include
begin_include
include|#
directive|include
file|<QPushButton>
end_include
begin_include
include|#
directive|include
file|<QToolBar>
end_include
begin_include
include|#
directive|include
file|<QSlider>
end_include
begin_include
include|#
directive|include
file|<QListWidget>
end_include
begin_include
include|#
directive|include
file|<QTableWidget>
end_include
begin_include
include|#
directive|include
file|<QScrollArea>
end_include
begin_include
include|#
directive|include
file|<QLabel>
end_include
begin_include
include|#
directive|include
file|<QScrollBar>
end_include
begin_include
include|#
directive|include
file|<QTextEdit>
end_include
begin_include
include|#
directive|include
file|<QAccessibleInterface>
end_include
begin_include
include|#
directive|include
file|<QAccessible>
end_include
begin_include
include|#
directive|include
file|<QPluginLoader>
end_include
begin_include
include|#
directive|include
file|<private/qaccessible_mac_p.h>
end_include
begin_include
include|#
directive|include
file|<quiloader.h>
end_include
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_comment
comment|// for getpid()
end_comment
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_expr_stmt
DECL|variable|AXUIElementRef
name|Q_DECLARE_METATYPE
argument_list|(
name|AXUIElementRef
argument_list|)
expr_stmt|;
end_expr_stmt
begin_typedef
DECL|typedef|QCFArrayRef
typedef|typedef
name|QCFType
argument_list|<
name|CFArrayRef
argument_list|>
name|QCFArrayRef
typedef|;
end_typedef
begin_class
DECL|class|tst_qaccessibility_mac
class|class
name|tst_qaccessibility_mac
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
name|void
name|printInfo
parameter_list|()
function_decl|;
name|void
name|testForm
parameter_list|()
function_decl|;
name|void
name|testButtons
parameter_list|()
function_decl|;
name|void
name|testLineEdit
parameter_list|()
function_decl|;
name|void
name|testLabel
parameter_list|()
function_decl|;
name|void
name|testGroups
parameter_list|()
function_decl|;
name|void
name|testTabWidget
parameter_list|()
function_decl|;
name|void
name|testTabBar
parameter_list|()
function_decl|;
name|void
name|testComboBox
parameter_list|()
function_decl|;
name|void
name|testDeleteWidget
parameter_list|()
function_decl|;
name|void
name|testDeleteWidgets
parameter_list|()
function_decl|;
name|void
name|testMultipleWindows
parameter_list|()
function_decl|;
name|void
name|testHiddenWidgets
parameter_list|()
function_decl|;
name|void
name|testActions
parameter_list|()
function_decl|;
name|void
name|testChangeState
parameter_list|()
function_decl|;
name|void
name|testSlider
parameter_list|()
function_decl|;
name|void
name|testScrollArea
parameter_list|()
function_decl|;
name|void
name|testListView
parameter_list|()
function_decl|;
name|void
name|testTableView
parameter_list|()
function_decl|;
name|void
name|testScrollBar
parameter_list|()
function_decl|;
name|void
name|testSplitter
parameter_list|()
function_decl|;
name|void
name|testTextEdit
parameter_list|()
function_decl|;
name|void
name|testItemViewsWithoutModel
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|testQAElement
parameter_list|()
function_decl|;
name|void
name|testQAInterface
parameter_list|()
function_decl|;
comment|// ui tests load an .ui file.
name|void
name|uitests_data
parameter_list|()
function_decl|;
name|void
name|uitests
parameter_list|()
function_decl|;
name|void
name|tests_data
parameter_list|()
function_decl|;
name|void
name|tests
parameter_list|()
function_decl|;
private|private:
name|void
name|runTest
parameter_list|(
specifier|const
name|QString
modifier|&
name|testSlot
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_comment
comment|/*     VERIFYs that there is no error and prints an error message if there is. */
end_comment
begin_function
DECL|function|testError
name|void
name|testError
parameter_list|(
name|AXError
name|error
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
if|if
condition|(
name|error
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"Error"
operator|<<
name|error
operator|<<
name|text
expr_stmt|;
name|QVERIFY
argument_list|(
name|error
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Prints an CFArray holding CFStrings. */
end_comment
begin_function
DECL|function|printCFStringArray
name|void
name|printCFStringArray
parameter_list|(
name|CFArrayRef
name|array
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|)
block|{
specifier|const
name|int
name|numElements
init|=
name|CFArrayGetCount
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"num"
operator|<<
name|title
operator|<<
literal|" "
operator|<<
name|numElements
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numElements
condition|;
operator|++
name|i
control|)
block|{
name|CFStringRef
name|str
init|=
operator|(
name|CFStringRef
operator|)
name|CFArrayGetValueAtIndex
argument_list|(
name|array
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
name|QCFString
operator|::
name|toQString
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|toQStringList
name|QStringList
name|toQStringList
parameter_list|(
specifier|const
name|CFArrayRef
name|array
parameter_list|)
block|{
specifier|const
name|int
name|numElements
init|=
name|CFArrayGetCount
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|QStringList
name|qtStrings
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numElements
condition|;
operator|++
name|i
control|)
block|{
name|CFStringRef
name|str
init|=
operator|(
name|CFStringRef
operator|)
name|CFArrayGetValueAtIndex
argument_list|(
name|array
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|qtStrings
operator|.
name|append
argument_list|(
name|QCFString
operator|::
name|toQString
argument_list|(
name|str
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|qtStrings
return|;
block|}
end_function
begin_function
DECL|function|AXValueToQVariant
name|QVariant
name|AXValueToQVariant
parameter_list|(
name|AXValueRef
name|value
parameter_list|)
block|{
name|QVariant
name|var
decl_stmt|;
specifier|const
name|AXValueType
name|type
init|=
name|AXValueGetType
argument_list|(
name|value
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|kAXValueCGPointType
case|:
block|{
name|CGPoint
name|point
decl_stmt|;
if|if
condition|(
name|AXValueGetValue
argument_list|(
name|value
argument_list|,
name|type
argument_list|,
operator|&
name|point
argument_list|)
condition|)
name|var
operator|=
name|QPointF
argument_list|(
name|point
operator|.
name|x
argument_list|,
name|point
operator|.
name|y
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|kAXValueCGSizeType
case|:
block|{
name|CGSize
name|size
decl_stmt|;
if|if
condition|(
name|AXValueGetValue
argument_list|(
name|value
argument_list|,
name|type
argument_list|,
operator|&
name|size
argument_list|)
condition|)
name|var
operator|=
name|QSizeF
argument_list|(
name|size
operator|.
name|width
argument_list|,
name|size
operator|.
name|height
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|kAXValueCGRectType
case|:
block|{
name|CGRect
name|rect
decl_stmt|;
if|if
condition|(
name|AXValueGetValue
argument_list|(
name|value
argument_list|,
name|type
argument_list|,
operator|&
name|rect
argument_list|)
condition|)
name|var
operator|=
name|QRectF
argument_list|(
name|rect
operator|.
name|origin
operator|.
name|x
argument_list|,
name|rect
operator|.
name|origin
operator|.
name|y
argument_list|,
name|rect
operator|.
name|size
operator|.
name|width
argument_list|,
name|rect
operator|.
name|size
operator|.
name|height
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|kAXValueCFRangeType
case|:
if|#
directive|if
operator|(
name|MAC_OS_X_VERSION_MAX_ALLOWED
operator|>=
name|MAC_OS_X_VERSION_10_4
operator|)
case|case
name|kAXValueAXErrorType
case|:
endif|#
directive|endif
case|case
name|kAXValueIllegalType
case|:
default|default:
name|qDebug
argument_list|()
operator|<<
literal|"Illegal/Unsuported AXValue:"
operator|<<
name|type
expr_stmt|;
break|break;
block|}
empty_stmt|;
return|return
name|var
return|;
block|}
end_function
begin_comment
comment|/*     Converts a CFTypeRef to a QVariant, for certain selected types. Prints     an error message and returns QVariant() if the type is not supported. */
end_comment
begin_function
DECL|function|CFTypeToQVariant
name|QVariant
name|CFTypeToQVariant
parameter_list|(
name|CFTypeRef
name|value
parameter_list|)
block|{
name|QVariant
name|var
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|0
condition|)
return|return
name|var
return|;
specifier|const
name|uint
name|typeID
init|=
name|CFGetTypeID
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeID
operator|==
name|CFStringGetTypeID
argument_list|()
condition|)
block|{
name|var
operator|.
name|setValue
argument_list|(
name|QCFString
operator|::
name|toQString
argument_list|(
operator|(
name|CFStringRef
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|typeID
operator|==
name|CFBooleanGetTypeID
argument_list|()
condition|)
block|{
name|var
operator|.
name|setValue
argument_list|(
operator|(
name|bool
operator|)
name|CFBooleanGetValue
argument_list|(
operator|(
name|CFBooleanRef
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|typeID
operator|==
name|AXUIElementGetTypeID
argument_list|()
condition|)
block|{
name|var
operator|.
name|setValue
argument_list|(
operator|(
name|AXUIElementRef
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|typeID
operator|==
name|AXValueGetTypeID
argument_list|()
condition|)
block|{
name|var
operator|=
name|AXValueToQVariant
argument_list|(
operator|(
name|AXValueRef
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|typeID
operator|==
name|CFNumberGetTypeID
argument_list|()
condition|)
block|{
name|CFNumberRef
name|number
init|=
operator|(
name|CFNumberRef
operator|)
name|value
decl_stmt|;
if|if
condition|(
name|CFNumberGetType
argument_list|(
name|number
argument_list|)
operator|!=
name|kCFNumberSInt32Type
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"unsupported number type"
operator|<<
name|CFNumberGetType
argument_list|(
name|number
argument_list|)
expr_stmt|;
name|int
name|theNumber
decl_stmt|;
name|CFNumberGetValue
argument_list|(
name|number
argument_list|,
name|kCFNumberSInt32Type
argument_list|,
operator|&
name|theNumber
argument_list|)
expr_stmt|;
name|var
operator|.
name|setValue
argument_list|(
name|theNumber
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|typeID
operator|==
name|CFArrayGetTypeID
argument_list|()
condition|)
block|{
name|CFArrayRef
name|cfarray
init|=
cast|static_cast
argument_list|<
name|CFArrayRef
argument_list|>
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|QVariantList
name|list
decl_stmt|;
name|CFIndex
name|size
init|=
name|CFArrayGetCount
argument_list|(
name|cfarray
argument_list|)
decl_stmt|;
for|for
control|(
name|CFIndex
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
name|list
operator|<<
name|CFTypeToQVariant
argument_list|(
name|CFArrayGetValueAtIndex
argument_list|(
name|cfarray
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|var
operator|.
name|setValue
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCFString
name|str
init|=
name|CFCopyTypeIDDescription
argument_list|(
name|typeID
argument_list|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Unknown CFType: "
operator|<<
name|typeID
operator|<<
operator|(
name|QString
operator|)
name|str
expr_stmt|;
block|}
return|return
name|var
return|;
block|}
end_function
begin_comment
comment|/*     Tests if a given attribute is supported by an element. Expects either     no error or error -25205 (Not supported). Causes a test failure     on other error values. */
end_comment
begin_function
DECL|function|supportsAttribute
name|bool
name|supportsAttribute
parameter_list|(
name|AXUIElementRef
name|element
parameter_list|,
name|CFStringRef
name|attribute
parameter_list|)
block|{
name|CFArrayRef
name|array
decl_stmt|;
name|AXError
name|err
init|=
name|AXUIElementCopyAttributeNames
argument_list|(
name|element
argument_list|,
operator|&
name|array
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
condition|)
block|{
name|testError
argument_list|(
name|err
argument_list|,
name|QLatin1String
argument_list|(
literal|"unexpected error when testing for supported attribute"
argument_list|)
operator|+
name|QCFString
operator|::
name|toQString
argument_list|(
name|attribute
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|CFRange
name|range
decl_stmt|;
name|range
operator|.
name|location
operator|=
literal|0
expr_stmt|;
name|range
operator|.
name|length
operator|=
name|CFArrayGetCount
argument_list|(
name|array
argument_list|)
expr_stmt|;
return|return
name|CFArrayContainsValue
argument_list|(
name|array
argument_list|,
name|range
argument_list|,
name|attribute
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*     Returns the accessibility attribute specified with attribute in a QVariant */
end_comment
begin_function
DECL|function|attribute
name|QVariant
name|attribute
parameter_list|(
name|AXUIElementRef
name|element
parameter_list|,
name|CFStringRef
name|attribute
parameter_list|)
block|{
name|CFTypeRef
name|value
init|=
literal|0
decl_stmt|;
name|AXError
name|err
init|=
name|AXUIElementCopyAttributeValue
argument_list|(
name|element
argument_list|,
name|attribute
argument_list|,
operator|&
name|value
argument_list|)
decl_stmt|;
name|testError
argument_list|(
name|err
argument_list|,
name|QString
argument_list|(
literal|"Error getting element attribute "
argument_list|)
operator|+
name|QCFString
operator|::
name|toQString
argument_list|(
name|attribute
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
condition|)
return|return
name|QVariant
argument_list|()
return|;
return|return
name|CFTypeToQVariant
argument_list|(
name|value
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*     Returns the title for an element. */
end_comment
begin_function
DECL|function|title
name|QString
name|title
parameter_list|(
name|AXUIElementRef
name|element
parameter_list|)
block|{
return|return
name|attribute
argument_list|(
name|element
argument_list|,
name|kAXTitleAttribute
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*     Returns the role for an element. */
end_comment
begin_function
DECL|function|role
name|QString
name|role
parameter_list|(
name|AXUIElementRef
name|element
parameter_list|)
block|{
return|return
name|attribute
argument_list|(
name|element
argument_list|,
name|kAXRoleAttribute
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*     Returns the subrole for an element. */
end_comment
begin_function
DECL|function|subrole
name|QString
name|subrole
parameter_list|(
name|AXUIElementRef
name|element
parameter_list|)
block|{
return|return
name|attribute
argument_list|(
name|element
argument_list|,
name|kAXSubroleAttribute
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*     Returns the role description for an element. */
end_comment
begin_function
DECL|function|roleDescription
name|QString
name|roleDescription
parameter_list|(
name|AXUIElementRef
name|element
parameter_list|)
block|{
return|return
name|attribute
argument_list|(
name|element
argument_list|,
name|kAXRoleDescriptionAttribute
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*     Returns the enabled attribute for an element. */
end_comment
begin_function
DECL|function|enabled
name|bool
name|enabled
parameter_list|(
name|AXUIElementRef
name|element
parameter_list|)
block|{
return|return
name|attribute
argument_list|(
name|element
argument_list|,
name|kAXEnabledAttribute
argument_list|)
operator|.
name|toBool
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*     Returns the value attribute for an element as an QVariant. */
end_comment
begin_function
DECL|function|value
name|QVariant
name|value
parameter_list|(
name|AXUIElementRef
name|element
parameter_list|)
block|{
return|return
name|attribute
argument_list|(
name|element
argument_list|,
name|kAXValueAttribute
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|value
name|QVariant
name|value
parameter_list|(
name|QAElement
name|element
parameter_list|)
block|{
return|return
name|value
argument_list|(
name|element
operator|.
name|element
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*     Returns the description attribute for an element as an QVariant. */
end_comment
begin_function
DECL|function|description
name|QVariant
name|description
parameter_list|(
name|AXUIElementRef
name|element
parameter_list|)
block|{
return|return
name|attribute
argument_list|(
name|element
argument_list|,
name|kAXDescriptionAttribute
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*     Returns the value attribute for an element as an bool. */
end_comment
begin_function
DECL|function|boolValue
name|bool
name|boolValue
parameter_list|(
name|AXUIElementRef
name|element
parameter_list|)
block|{
return|return
name|attribute
argument_list|(
name|element
argument_list|,
name|kAXValueAttribute
argument_list|)
operator|.
name|toBool
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*     Returns the parent for an element */
end_comment
begin_function
DECL|function|parent
name|AXUIElementRef
name|parent
parameter_list|(
name|AXUIElementRef
name|element
parameter_list|)
block|{
return|return
name|attribute
argument_list|(
name|element
argument_list|,
name|kAXParentAttribute
argument_list|)
operator|.
name|value
argument_list|<
name|AXUIElementRef
argument_list|>
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*     Returns the (top-level) window(not a sheet or a drawer) for an element */
end_comment
begin_function
DECL|function|window
name|AXUIElementRef
name|window
parameter_list|(
name|AXUIElementRef
name|element
parameter_list|)
block|{
return|return
name|attribute
argument_list|(
name|element
argument_list|,
name|kAXWindowAttribute
argument_list|)
operator|.
name|value
argument_list|<
name|AXUIElementRef
argument_list|>
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*     Returns the (top-level) UI element(can also be a sheet or drawer) for an element */
end_comment
begin_if
if|#
directive|if
operator|(
name|MAC_OS_X_VERSION_MAX_ALLOWED
operator|>=
name|MAC_OS_X_VERSION_10_4
operator|)
end_if
begin_function
DECL|function|topLevelUIElement
name|AXUIElementRef
name|topLevelUIElement
parameter_list|(
name|AXUIElementRef
name|element
parameter_list|)
block|{
return|return
name|attribute
argument_list|(
name|element
argument_list|,
name|kAXTopLevelUIElementAttribute
argument_list|)
operator|.
name|value
argument_list|<
name|AXUIElementRef
argument_list|>
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*     Returns thie size of the element. */
end_comment
begin_function
DECL|function|size
name|QSizeF
name|size
parameter_list|(
name|AXUIElementRef
name|element
parameter_list|)
block|{
return|return
name|attribute
argument_list|(
name|element
argument_list|,
name|kAXSizeAttribute
argument_list|)
operator|.
name|value
argument_list|<
name|QSizeF
argument_list|>
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*     Returns the position of the element. */
end_comment
begin_function
DECL|function|position
name|QPointF
name|position
parameter_list|(
name|AXUIElementRef
name|element
parameter_list|)
block|{
return|return
name|attribute
argument_list|(
name|element
argument_list|,
name|kAXPositionAttribute
argument_list|)
operator|.
name|value
argument_list|<
name|QPointF
argument_list|>
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*     Returns the rect of the element. */
end_comment
begin_function
DECL|function|rect
name|QRectF
name|rect
parameter_list|(
name|AXUIElementRef
name|element
parameter_list|)
block|{
return|return
name|QRectF
argument_list|(
name|position
argument_list|(
name|element
argument_list|)
argument_list|,
name|size
argument_list|(
name|element
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|above
name|bool
name|above
parameter_list|(
name|AXUIElementRef
name|a
parameter_list|,
name|AXUIElementRef
name|b
parameter_list|)
block|{
return|return
operator|(
name|position
argument_list|(
name|a
argument_list|)
operator|.
name|y
argument_list|()
operator|+
name|size
argument_list|(
name|a
argument_list|)
operator|.
name|height
argument_list|()
operator|<=
name|position
argument_list|(
name|b
argument_list|)
operator|.
name|y
argument_list|()
operator|)
return|;
block|}
end_function
begin_function
DECL|function|contains
name|bool
name|contains
parameter_list|(
name|AXUIElementRef
name|a
parameter_list|,
name|AXUIElementRef
name|b
parameter_list|)
block|{
return|return
name|rect
argument_list|(
name|a
argument_list|)
operator|.
name|contains
argument_list|(
name|rect
argument_list|(
name|b
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|tabs
name|QList
argument_list|<
name|AXUIElementRef
argument_list|>
name|tabs
parameter_list|(
name|AXUIElementRef
name|element
parameter_list|)
block|{
name|CFTypeRef
name|value
decl_stmt|;
name|AXError
name|err
init|=
name|AXUIElementCopyAttributeValue
argument_list|(
name|element
argument_list|,
name|kAXTabsAttribute
argument_list|,
operator|&
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
condition|)
return|return
name|QList
argument_list|<
name|AXUIElementRef
argument_list|>
argument_list|()
return|;
name|CFArrayRef
name|array
init|=
operator|(
name|CFArrayRef
operator|)
name|value
decl_stmt|;
name|QList
argument_list|<
name|AXUIElementRef
argument_list|>
name|elements
decl_stmt|;
specifier|const
name|int
name|count
init|=
name|CFArrayGetCount
argument_list|(
name|array
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
name|elements
operator|.
name|append
argument_list|(
operator|(
name|AXUIElementRef
operator|)
name|CFArrayGetValueAtIndex
argument_list|(
name|array
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|elements
return|;
block|}
end_function
begin_function
DECL|function|elementListAttribute
name|QList
argument_list|<
name|AXUIElementRef
argument_list|>
name|elementListAttribute
parameter_list|(
name|AXUIElementRef
name|element
parameter_list|,
name|CFStringRef
name|attributeName
parameter_list|)
block|{
name|QList
argument_list|<
name|AXUIElementRef
argument_list|>
name|elementList
decl_stmt|;
name|QVariantList
name|variants
init|=
name|attribute
argument_list|(
name|element
argument_list|,
name|attributeName
argument_list|)
operator|.
name|value
argument_list|<
name|QVariantList
argument_list|>
argument_list|()
decl_stmt|;
foreach|foreach
control|(
name|QVariant
name|variant
decl|,
name|variants
control|)
name|elementList
operator|.
name|append
argument_list|(
name|variant
operator|.
name|value
argument_list|<
name|AXUIElementRef
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|elementList
return|;
block|}
end_function
begin_function
DECL|function|elementAttribute
name|AXUIElementRef
name|elementAttribute
parameter_list|(
name|AXUIElementRef
name|element
parameter_list|,
name|CFStringRef
name|attributeName
parameter_list|)
block|{
return|return
name|attribute
argument_list|(
name|element
argument_list|,
name|attributeName
argument_list|)
operator|.
name|value
argument_list|<
name|AXUIElementRef
argument_list|>
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|stringAttribute
name|QString
name|stringAttribute
parameter_list|(
name|AXUIElementRef
name|element
parameter_list|,
name|CFStringRef
name|attributeName
parameter_list|)
block|{
return|return
name|attribute
argument_list|(
name|element
argument_list|,
name|attributeName
argument_list|)
operator|.
name|value
argument_list|<
name|QString
argument_list|>
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*     Returns the UIElement at the given position. */
end_comment
begin_function
DECL|function|childAtPoint
name|AXUIElementRef
name|childAtPoint
parameter_list|(
name|QPointF
name|position
parameter_list|)
block|{
name|AXUIElementRef
name|element
init|=
literal|0
decl_stmt|;
specifier|const
name|AXError
name|err
init|=
name|AXUIElementCopyElementAtPosition
argument_list|(
name|AXUIElementCreateApplication
argument_list|(
name|getpid
argument_list|()
argument_list|)
argument_list|,
name|position
operator|.
name|x
argument_list|()
argument_list|,
name|position
operator|.
name|y
argument_list|()
argument_list|,
operator|&
name|element
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Error getting element at "
operator|<<
name|position
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
name|element
return|;
block|}
end_function
begin_comment
comment|/*     Returns a QStringList containing the names of the actions the ui element supports */
end_comment
begin_function
DECL|function|actionNames
name|QStringList
name|actionNames
parameter_list|(
name|AXUIElementRef
name|element
parameter_list|)
block|{
name|CFArrayRef
name|cfStrings
decl_stmt|;
specifier|const
name|AXError
name|err
init|=
name|AXUIElementCopyActionNames
argument_list|(
name|element
argument_list|,
operator|&
name|cfStrings
argument_list|)
decl_stmt|;
name|testError
argument_list|(
name|err
argument_list|,
literal|"Unable to get action names"
argument_list|)
expr_stmt|;
return|return
name|toQStringList
argument_list|(
name|cfStrings
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|supportsAction
name|bool
name|supportsAction
parameter_list|(
specifier|const
name|AXUIElementRef
name|element
parameter_list|,
specifier|const
name|QString
modifier|&
name|actionName
parameter_list|)
block|{
specifier|const
name|QStringList
name|actions
init|=
name|actionNames
argument_list|(
name|element
argument_list|)
decl_stmt|;
return|return
name|actions
operator|.
name|contains
argument_list|(
name|actionName
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|performAction
name|bool
name|performAction
parameter_list|(
specifier|const
name|AXUIElementRef
name|element
parameter_list|,
specifier|const
name|QString
modifier|&
name|actionName
parameter_list|)
block|{
specifier|const
name|AXError
name|err
init|=
name|AXUIElementPerformAction
argument_list|(
name|element
argument_list|,
name|QCFString
argument_list|(
name|actionName
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|err
operator|==
literal|0
operator|)
return|;
block|}
end_function
begin_comment
comment|/*     Om 10.4 and up, verifyes the AXRoleDescription attribute for an element,     on 10.3 and below this test always passes.      The reason for this is that the HICopyAccessibilityRoleDescription call     used to implement this functionality was introduced in 10.4. */
end_comment
begin_if
if|#
directive|if
operator|(
name|MAC_OS_X_VERSION_MAX_ALLOWED
operator|>=
name|MAC_OS_X_VERSION_10_4
operator|)
end_if
begin_define
DECL|macro|VERIFY_ROLE_DESCRIPTION
define|#
directive|define
name|VERIFY_ROLE_DESCRIPTION
parameter_list|(
name|ELEMENT
parameter_list|,
name|TEXT
parameter_list|)
define|\
value|QCOMPARE(roleDescription(ELEMENT), QString(TEXT))
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|VERIFY_ROLE_DESCRIPTION
define|#
directive|define
name|VERIFY_ROLE_DESCRIPTION
parameter_list|(
name|ELEMENT
parameter_list|,
name|TEXT
parameter_list|)
value|QVERIFY(true)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|childrenArray
name|CFArrayRef
name|childrenArray
parameter_list|(
name|AXUIElementRef
name|element
parameter_list|)
block|{
name|CFTypeRef
name|value
init|=
literal|0
decl_stmt|;
name|AXError
name|err
init|=
name|AXUIElementCopyAttributeValue
argument_list|(
name|element
argument_list|,
name|kAXChildrenAttribute
argument_list|,
operator|&
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|err
operator|&&
name|CFGetTypeID
argument_list|(
name|value
argument_list|)
operator|==
name|CFArrayGetTypeID
argument_list|()
condition|)
block|{
return|return
operator|(
name|CFArrayRef
operator|)
name|value
return|;
block|}
return|return
name|CFArrayCreate
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*     Gest the child count from an element. */
end_comment
begin_function
DECL|function|numChildren
name|int
name|numChildren
parameter_list|(
name|AXUIElementRef
name|element
parameter_list|)
block|{
return|return
name|CFArrayGetCount
argument_list|(
name|childrenArray
argument_list|(
name|element
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*     Gets the child with index childIndex from element. Returns 0 if not found. */
end_comment
begin_function
DECL|function|child
name|AXUIElementRef
name|child
parameter_list|(
name|AXUIElementRef
name|element
parameter_list|,
name|int
name|childIndex
parameter_list|)
block|{
name|CFArrayRef
name|children
init|=
name|childrenArray
argument_list|(
name|element
argument_list|)
decl_stmt|;
if|if
condition|(
name|childIndex
operator|>=
name|CFArrayGetCount
argument_list|(
name|children
argument_list|)
condition|)
return|return
literal|0
return|;
specifier|const
name|void
modifier|*
name|data
init|=
name|CFArrayGetValueAtIndex
argument_list|(
name|children
argument_list|,
name|childIndex
argument_list|)
decl_stmt|;
return|return
operator|(
name|AXUIElementRef
operator|)
name|data
return|;
block|}
end_function
begin_comment
comment|/*     Gets the child titled childTitle from element. Returns 0 if not found. */
end_comment
begin_function
DECL|function|childByTitle
name|AXUIElementRef
name|childByTitle
parameter_list|(
name|AXUIElementRef
name|element
parameter_list|,
specifier|const
name|QString
modifier|&
name|childTitle
parameter_list|)
block|{
name|CFArrayRef
name|children
init|=
name|childrenArray
argument_list|(
name|element
argument_list|)
decl_stmt|;
specifier|const
name|int
name|numChildren
init|=
name|CFArrayGetCount
argument_list|(
name|children
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numChildren
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|AXUIElementRef
name|childElement
init|=
operator|(
name|AXUIElementRef
operator|)
name|CFArrayGetValueAtIndex
argument_list|(
name|children
argument_list|,
name|i
argument_list|)
decl_stmt|;
comment|// Test for support for title attribute before getting it to avoid test fail.
if|if
condition|(
name|supportsAttribute
argument_list|(
name|childElement
argument_list|,
name|kAXTitleAttribute
argument_list|)
operator|&&
name|title
argument_list|(
name|childElement
argument_list|)
operator|==
name|childTitle
condition|)
return|return
name|childElement
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*     Gets the child with the given value from element. Returns 0 if not found. */
end_comment
begin_function
DECL|function|childByValue
name|AXUIElementRef
name|childByValue
parameter_list|(
name|AXUIElementRef
name|element
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|testValue
parameter_list|)
block|{
name|CFArrayRef
name|children
init|=
name|childrenArray
argument_list|(
name|element
argument_list|)
decl_stmt|;
specifier|const
name|int
name|numChildren
init|=
name|CFArrayGetCount
argument_list|(
name|children
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numChildren
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|AXUIElementRef
name|childElement
init|=
operator|(
name|AXUIElementRef
operator|)
name|CFArrayGetValueAtIndex
argument_list|(
name|children
argument_list|,
name|i
argument_list|)
decl_stmt|;
comment|// Test for support for value attribute before getting it to avoid test fail.
if|if
condition|(
name|supportsAttribute
argument_list|(
name|childElement
argument_list|,
name|kAXValueAttribute
argument_list|)
operator|&&
name|value
argument_list|(
name|childElement
argument_list|)
operator|==
name|testValue
condition|)
return|return
name|childElement
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*     Gets the child by role from element. Returns 0 if not found. */
end_comment
begin_function
DECL|function|childByRole
name|AXUIElementRef
name|childByRole
parameter_list|(
name|AXUIElementRef
name|element
parameter_list|,
specifier|const
name|QString
modifier|&
name|macRole
parameter_list|)
block|{
name|CFArrayRef
name|children
init|=
name|childrenArray
argument_list|(
name|element
argument_list|)
decl_stmt|;
specifier|const
name|int
name|numChildren
init|=
name|CFArrayGetCount
argument_list|(
name|children
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numChildren
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|AXUIElementRef
name|childElement
init|=
operator|(
name|AXUIElementRef
operator|)
name|CFArrayGetValueAtIndex
argument_list|(
name|children
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|role
argument_list|(
name|childElement
argument_list|)
operator|==
name|macRole
condition|)
return|return
name|childElement
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|printTypeForAttribute
name|void
name|printTypeForAttribute
parameter_list|(
name|AXUIElementRef
name|element
parameter_list|,
name|CFStringRef
name|attribute
parameter_list|)
block|{
name|CFTypeRef
name|value
init|=
literal|0
decl_stmt|;
name|AXError
name|err
init|=
name|AXUIElementCopyAttributeValue
argument_list|(
name|element
argument_list|,
name|attribute
argument_list|,
operator|&
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|err
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"type id"
operator|<<
name|CFGetTypeID
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|QCFString
name|str
init|=
name|CFCopyTypeIDDescription
argument_list|(
name|CFGetTypeID
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
operator|(
name|QString
operator|)
name|str
expr_stmt|;
block|}
else|else
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Attribute Get error"
operator|<<
name|endl
expr_stmt|;
block|}
block|}
end_function
begin_decl_stmt
DECL|variable|indent
name|int
name|indent
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|space
name|QString
name|space
parameter_list|()
block|{
name|QString
name|space
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indent
condition|;
operator|++
name|i
control|)
block|{
name|space
operator|+=
literal|" "
expr_stmt|;
block|}
return|return
name|space
return|;
block|}
end_function
begin_comment
comment|/*     Recursively prints acccesibility info for currentElement and all its children. */
end_comment
begin_function
DECL|function|printElementInfo
name|void
name|printElementInfo
parameter_list|(
name|AXUIElementRef
name|currentElement
parameter_list|)
block|{
if|if
condition|(
name|HIObjectIsAccessibilityIgnored
argument_list|(
name|AXUIElementGetHIObject
argument_list|(
name|currentElement
argument_list|)
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
name|space
argument_list|()
operator|<<
literal|"Ignoring element with role"
operator|<<
name|role
argument_list|(
name|currentElement
argument_list|)
expr_stmt|;
return|return;
block|}
name|qDebug
argument_list|()
operator|<<
name|space
argument_list|()
operator|<<
literal|"Role"
operator|<<
name|role
argument_list|(
name|currentElement
argument_list|)
expr_stmt|;
if|if
condition|(
name|supportsAttribute
argument_list|(
name|currentElement
argument_list|,
name|kAXTitleAttribute
argument_list|)
condition|)
name|qDebug
argument_list|()
operator|<<
name|space
argument_list|()
operator|<<
literal|"Title"
operator|<<
name|title
argument_list|(
name|currentElement
argument_list|)
expr_stmt|;
else|else
name|qDebug
argument_list|()
operator|<<
name|space
argument_list|()
operator|<<
literal|"Title not supported"
expr_stmt|;
if|if
condition|(
name|supportsAttribute
argument_list|(
name|currentElement
argument_list|,
name|kAXValueAttribute
argument_list|)
condition|)
name|qDebug
argument_list|()
operator|<<
name|space
argument_list|()
operator|<<
literal|"Value"
operator|<<
name|attribute
argument_list|(
name|currentElement
argument_list|,
name|kAXValueAttribute
argument_list|)
expr_stmt|;
else|else
name|qDebug
argument_list|()
operator|<<
name|space
argument_list|()
operator|<<
literal|"Value not supported"
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
name|space
argument_list|()
operator|<<
literal|"Number of children"
operator|<<
name|numChildren
argument_list|(
name|currentElement
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numChildren
argument_list|(
name|currentElement
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|AXUIElementRef
name|childElement
init|=
name|child
argument_list|(
name|currentElement
argument_list|,
name|i
argument_list|)
decl_stmt|;
comment|// Skip the menu bar.
if|if
condition|(
name|role
argument_list|(
name|childElement
argument_list|)
operator|!=
literal|"AXMenuBar"
condition|)
block|{
name|indent
operator|+=
literal|4
expr_stmt|;
name|printElementInfo
argument_list|(
name|childElement
argument_list|)
expr_stmt|;
name|indent
operator|-=
literal|4
expr_stmt|;
block|}
block|}
name|qDebug
argument_list|()
operator|<<
literal|" "
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Recursively prints the child interfaces belonging to interface. */
end_comment
begin_function
DECL|function|printChildren
name|void
name|printChildren
parameter_list|(
specifier|const
name|QAInterface
modifier|&
name|interface
parameter_list|)
block|{
if|if
condition|(
name|interface
operator|.
name|isValid
argument_list|()
operator|==
literal|false
condition|)
return|return;
name|QList
argument_list|<
name|QAInterface
argument_list|>
name|children
init|=
name|interface
operator|.
name|children
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|qDebug
argument_list|()
operator|<<
literal|"## Children for"
operator|<<
name|interface
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QAInterface
modifier|&
name|child
decl|,
name|children
control|)
block|{
name|qDebug
argument_list|()
operator|<<
name|child
operator|<<
literal|"index in parent"
operator|<<
name|interface
operator|.
name|indexOfChild
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
foreach|foreach
control|(
specifier|const
name|QAInterface
modifier|&
name|child
decl|,
name|children
control|)
block|{
name|printChildren
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|isIgnored
name|bool
name|isIgnored
parameter_list|(
name|AXUIElementRef
name|currentElement
parameter_list|)
block|{
return|return
name|HIObjectIsAccessibilityIgnored
argument_list|(
name|AXUIElementGetHIObject
argument_list|(
name|currentElement
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|equal
name|bool
name|equal
parameter_list|(
name|CFTypeRef
name|o1
parameter_list|,
name|CFTypeRef
name|o2
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|==
literal|0
operator|||
name|o2
operator|==
literal|0
condition|)
return|return
literal|false
return|;
return|return
name|CFEqual
argument_list|(
name|o1
argument_list|,
name|o2
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*     Verifies basic element info. */
end_comment
begin_define
DECL|macro|VERIFY_ELEMENT
define|#
directive|define
name|VERIFY_ELEMENT
parameter_list|(
name|element
parameter_list|,
name|_parent
parameter_list|,
name|_role
parameter_list|)
define|\
value|QVERIFY(element != 0); \     QVERIFY(role(element) == _role); \     QVERIFY(equal(::parent(element), _parent));
end_define
begin_comment
comment|/*     Verifies that the application and the main form is there has the right info. */
end_comment
begin_function
DECL|function|testAppAndForm
name|void
name|testAppAndForm
parameter_list|(
name|AXUIElementRef
name|application
parameter_list|)
block|{
name|QVERIFY
argument_list|(
name|title
argument_list|(
name|application
argument_list|)
operator|==
literal|"tst_qaccessibility_mac"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|role
argument_list|(
name|application
argument_list|)
operator|==
literal|"AXApplication"
argument_list|)
expr_stmt|;
name|AXUIElementRef
name|form
init|=
name|childByTitle
argument_list|(
name|application
argument_list|,
literal|"Form"
argument_list|)
decl_stmt|;
name|VERIFY_ELEMENT
argument_list|(
name|form
argument_list|,
name|application
argument_list|,
literal|"AXWindow"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|printInfo
name|void
name|tst_qaccessibility_mac
operator|::
name|printInfo
parameter_list|()
block|{
name|AXUIElementRef
name|currentApplication
init|=
name|AXUIElementCreateApplication
argument_list|(
name|getpid
argument_list|()
argument_list|)
decl_stmt|;
name|printElementInfo
argument_list|(
name|currentApplication
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Tests for form.ui */
end_comment
begin_function
DECL|function|testForm
name|void
name|tst_qaccessibility_mac
operator|::
name|testForm
parameter_list|()
block|{
comment|// Get reference to the current application.
name|AXUIElementRef
name|currentApplication
init|=
name|AXUIElementCreateApplication
argument_list|(
name|getpid
argument_list|()
argument_list|)
decl_stmt|;
name|testAppAndForm
argument_list|(
name|currentApplication
argument_list|)
expr_stmt|;
name|childByTitle
argument_list|(
name|currentApplication
argument_list|,
literal|"Form"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Tests for buttons.ui */
end_comment
begin_function
DECL|function|testButtons
name|void
name|tst_qaccessibility_mac
operator|::
name|testButtons
parameter_list|()
block|{
comment|// Get reference to the current application.
name|AXUIElementRef
name|currentApplication
init|=
name|AXUIElementCreateApplication
argument_list|(
name|getpid
argument_list|()
argument_list|)
decl_stmt|;
name|testAppAndForm
argument_list|(
name|currentApplication
argument_list|)
expr_stmt|;
name|AXUIElementRef
name|form
init|=
name|childByTitle
argument_list|(
name|currentApplication
argument_list|,
literal|"Form"
argument_list|)
decl_stmt|;
name|AXUIElementRef
name|ren
init|=
name|childByTitle
argument_list|(
name|form
argument_list|,
literal|"Ren"
argument_list|)
decl_stmt|;
name|VERIFY_ELEMENT
argument_list|(
name|ren
argument_list|,
name|form
argument_list|,
literal|"AXButton"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|enabled
argument_list|(
name|ren
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
name|VERIFY_ROLE_DESCRIPTION
argument_list|(
name|ren
argument_list|,
literal|"button"
argument_list|)
expr_stmt|;
name|AXUIElementRef
name|stimpy
init|=
name|childByTitle
argument_list|(
name|form
argument_list|,
literal|"Stimpy"
argument_list|)
decl_stmt|;
name|VERIFY_ELEMENT
argument_list|(
name|stimpy
argument_list|,
name|form
argument_list|,
literal|"AXRadioButton"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|enabled
argument_list|(
name|stimpy
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
argument_list|(
name|stimpy
argument_list|)
operator|.
name|toInt
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// checked;
name|VERIFY_ROLE_DESCRIPTION
argument_list|(
name|stimpy
argument_list|,
literal|"radio button"
argument_list|)
expr_stmt|;
name|AXUIElementRef
name|pinky
init|=
name|childByTitle
argument_list|(
name|form
argument_list|,
literal|"Pinky"
argument_list|)
decl_stmt|;
name|VERIFY_ELEMENT
argument_list|(
name|pinky
argument_list|,
name|form
argument_list|,
literal|"AXCheckBox"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|enabled
argument_list|(
name|pinky
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
argument_list|(
name|pinky
argument_list|)
operator|.
name|toInt
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// unchecked;
name|VERIFY_ROLE_DESCRIPTION
argument_list|(
name|pinky
argument_list|,
literal|"check box"
argument_list|)
expr_stmt|;
name|AXUIElementRef
name|brain
init|=
name|childByTitle
argument_list|(
name|form
argument_list|,
literal|"Brain"
argument_list|)
decl_stmt|;
name|VERIFY_ELEMENT
argument_list|(
name|brain
argument_list|,
name|form
argument_list|,
literal|"AXButton"
argument_list|)
expr_stmt|;
name|VERIFY_ROLE_DESCRIPTION
argument_list|(
name|brain
argument_list|,
literal|"button"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testLabel
name|void
name|tst_qaccessibility_mac
operator|::
name|testLabel
parameter_list|()
block|{
comment|// Get reference to the current application.
name|AXUIElementRef
name|currentApplication
init|=
name|AXUIElementCreateApplication
argument_list|(
name|getpid
argument_list|()
argument_list|)
decl_stmt|;
name|testAppAndForm
argument_list|(
name|currentApplication
argument_list|)
expr_stmt|;
name|AXUIElementRef
name|form
init|=
name|childByTitle
argument_list|(
name|currentApplication
argument_list|,
literal|"Form"
argument_list|)
decl_stmt|;
name|AXUIElementRef
name|label
init|=
name|childByValue
argument_list|(
name|form
argument_list|,
literal|"This is a Text Label"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|label
argument_list|)
expr_stmt|;
name|VERIFY_ELEMENT
argument_list|(
name|label
argument_list|,
name|form
argument_list|,
literal|"AXStaticText"
argument_list|)
expr_stmt|;
name|VERIFY_ROLE_DESCRIPTION
argument_list|(
name|label
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|supportsAttribute
argument_list|(
name|label
argument_list|,
name|kAXDescriptionAttribute
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Tests for lineedit.ui */
end_comment
begin_function
DECL|function|testLineEdit
name|void
name|tst_qaccessibility_mac
operator|::
name|testLineEdit
parameter_list|()
block|{
comment|// Get reference to the current application.
name|AXUIElementRef
name|currentApplication
init|=
name|AXUIElementCreateApplication
argument_list|(
name|getpid
argument_list|()
argument_list|)
decl_stmt|;
name|testAppAndForm
argument_list|(
name|currentApplication
argument_list|)
expr_stmt|;
name|AXUIElementRef
name|form
init|=
name|childByTitle
argument_list|(
name|currentApplication
argument_list|,
literal|"Form"
argument_list|)
decl_stmt|;
name|AXUIElementRef
name|lineEdit
init|=
name|childByValue
argument_list|(
name|form
argument_list|,
literal|"Line edit"
argument_list|)
decl_stmt|;
name|VERIFY_ELEMENT
argument_list|(
name|lineEdit
argument_list|,
name|form
argument_list|,
literal|"AXTextField"
argument_list|)
expr_stmt|;
name|VERIFY_ROLE_DESCRIPTION
argument_list|(
name|lineEdit
argument_list|,
literal|"text field"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Tests for groups.ui */
end_comment
begin_function
DECL|function|testGroups
name|void
name|tst_qaccessibility_mac
operator|::
name|testGroups
parameter_list|()
block|{
comment|// Get reference to the current application.
name|AXUIElementRef
name|currentApplication
init|=
name|AXUIElementCreateApplication
argument_list|(
name|getpid
argument_list|()
argument_list|)
decl_stmt|;
name|testAppAndForm
argument_list|(
name|currentApplication
argument_list|)
expr_stmt|;
name|AXUIElementRef
name|form
init|=
name|childByTitle
argument_list|(
name|currentApplication
argument_list|,
literal|"Form"
argument_list|)
decl_stmt|;
name|AXUIElementRef
name|groupA
init|=
name|childByTitle
argument_list|(
name|form
argument_list|,
literal|"Group A"
argument_list|)
decl_stmt|;
name|VERIFY_ELEMENT
argument_list|(
name|groupA
argument_list|,
name|form
argument_list|,
literal|"AXGroup"
argument_list|)
expr_stmt|;
name|AXUIElementRef
name|button1
init|=
name|childByTitle
argument_list|(
name|groupA
argument_list|,
literal|"PushButton 1"
argument_list|)
decl_stmt|;
name|VERIFY_ELEMENT
argument_list|(
name|button1
argument_list|,
name|groupA
argument_list|,
literal|"AXButton"
argument_list|)
expr_stmt|;
name|VERIFY_ROLE_DESCRIPTION
argument_list|(
name|groupA
argument_list|,
literal|"group"
argument_list|)
expr_stmt|;
name|AXUIElementRef
name|groupB
init|=
name|childByTitle
argument_list|(
name|form
argument_list|,
literal|"Group B"
argument_list|)
decl_stmt|;
name|VERIFY_ELEMENT
argument_list|(
name|groupB
argument_list|,
name|form
argument_list|,
literal|"AXGroup"
argument_list|)
expr_stmt|;
name|AXUIElementRef
name|button3
init|=
name|childByTitle
argument_list|(
name|groupB
argument_list|,
literal|"PushButton 3"
argument_list|)
decl_stmt|;
name|VERIFY_ELEMENT
argument_list|(
name|button3
argument_list|,
name|groupB
argument_list|,
literal|"AXButton"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Tests for tabs.ui */
end_comment
begin_function
DECL|function|testTabWidget
name|void
name|tst_qaccessibility_mac
operator|::
name|testTabWidget
parameter_list|()
block|{
block|{
comment|// Test that the QTabWidget hierarchy is what we expect it to be.
name|QTabWidget
name|tabWidget
decl_stmt|;
name|tabWidget
operator|.
name|show
argument_list|()
expr_stmt|;
name|QAInterface
name|interface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
operator|&
name|tabWidget
argument_list|)
decl_stmt|;
name|tabWidget
operator|.
name|addTab
argument_list|(
operator|new
name|QPushButton
argument_list|(
literal|"Foo"
argument_list|)
argument_list|,
literal|"FooTab"
argument_list|)
expr_stmt|;
name|tabWidget
operator|.
name|addTab
argument_list|(
operator|new
name|QPushButton
argument_list|(
literal|"Bar"
argument_list|)
argument_list|,
literal|"BarTab"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|.
name|childCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
specifier|const
name|QList
argument_list|<
name|QAInterface
argument_list|>
name|children
init|=
name|interface
operator|.
name|children
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|children
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|object
argument_list|()
operator|->
name|inherits
argument_list|(
literal|"QStackedWidget"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|children
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|object
argument_list|()
operator|->
name|inherits
argument_list|(
literal|"QTabBar"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QList
argument_list|<
name|QAInterface
argument_list|>
name|tabBarChildren
init|=
name|children
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|children
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|tabBarChildren
operator|.
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tabBarChildren
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"FooTab"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tabBarChildren
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"BarTab"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tabBarChildren
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|PageTab
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tabBarChildren
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|PageTab
argument_list|)
expr_stmt|;
comment|// Check that the hierarchy manager is able to register the tab bar children.
name|QAccessibleHierarchyManager
modifier|*
name|manager
init|=
name|QAccessibleHierarchyManager
operator|::
name|instance
argument_list|()
decl_stmt|;
name|QAInterface
name|tabBarInterface
init|=
name|children
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QAElement
name|tabBarElement
init|=
name|manager
operator|->
name|registerInterface
argument_list|(
name|tabBarInterface
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|manager
operator|->
name|lookup
argument_list|(
name|tabBarElement
argument_list|)
operator|.
name|childCount
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|manager
operator|->
name|registerChildren
argument_list|(
name|tabBarInterface
argument_list|)
expr_stmt|;
name|QAElement
name|tabButtonElement
init|=
name|manager
operator|->
name|lookup
argument_list|(
name|tabBarChildren
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|QAInterface
name|tabButtonInterface
init|=
name|manager
operator|->
name|lookup
argument_list|(
name|tabButtonElement
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|tabButtonInterface
operator|.
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"BarTab"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isItInteresting
argument_list|(
name|tabButtonInterface
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Get reference to the current application.
name|AXUIElementRef
name|currentApplication
init|=
name|AXUIElementCreateApplication
argument_list|(
name|getpid
argument_list|()
argument_list|)
decl_stmt|;
name|testAppAndForm
argument_list|(
name|currentApplication
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|formTitle
init|=
literal|"Form"
decl_stmt|;
name|AXUIElementRef
name|form
init|=
name|childByTitle
argument_list|(
name|currentApplication
argument_list|,
name|formTitle
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|form
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|tabRole
init|=
literal|"AXTabGroup"
decl_stmt|;
name|AXUIElementRef
name|tabGroup
init|=
name|childByRole
argument_list|(
name|form
argument_list|,
name|tabRole
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|tabGroup
argument_list|)
expr_stmt|;
comment|// Test that we have three child buttons (the tab buttons + plus the contents of the first tab)
specifier|const
name|int
name|numChildren
init|=
operator|::
name|numChildren
argument_list|(
name|tabGroup
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|numChildren
argument_list|,
literal|3
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|tab1Title
init|=
literal|"Tab 1"
decl_stmt|;
name|AXUIElementRef
name|tabButton1
init|=
name|childByTitle
argument_list|(
name|tabGroup
argument_list|,
name|tab1Title
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|tabButton1
argument_list|)
expr_stmt|;
name|VERIFY_ELEMENT
argument_list|(
name|tabButton1
argument_list|,
name|tabGroup
argument_list|,
literal|"AXRadioButton"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|title
argument_list|(
name|tabButton1
argument_list|)
argument_list|,
name|tab1Title
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|tab2Title
init|=
literal|"Tab 2"
decl_stmt|;
specifier|const
name|AXUIElementRef
name|tabButton2
init|=
name|childByTitle
argument_list|(
name|tabGroup
argument_list|,
name|tab2Title
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|tabButton2
argument_list|)
expr_stmt|;
name|VERIFY_ELEMENT
argument_list|(
name|tabButton2
argument_list|,
name|tabGroup
argument_list|,
literal|"AXRadioButton"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|title
argument_list|(
name|tabButton2
argument_list|)
argument_list|,
name|tab2Title
argument_list|)
expr_stmt|;
comment|// Test that the window and top-level-ui-elment is the form.
comment|// Window is not reported properly on 10.5
if|if
condition|(
name|QSysInfo
operator|::
name|MacintoshVersion
operator|<
name|QSysInfo
operator|::
name|MV_10_5
condition|)
block|{
name|QVERIFY
argument_list|(
name|equal
argument_list|(
name|window
argument_list|(
name|tabGroup
argument_list|)
argument_list|,
name|form
argument_list|)
argument_list|)
expr_stmt|;
comment|//   ### hangs on 10.4
if|#
directive|if
operator|(
name|MAC_OS_X_VERSION_MAX_ALLOWED
operator|>=
name|MAC_OS_X_VERSION_10_5
operator|)
name|QVERIFY
argument_list|(
name|equal
argument_list|(
name|window
argument_list|(
name|tabButton1
argument_list|)
argument_list|,
name|form
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
comment|//   ### hangs on 10.4
if|#
directive|if
operator|(
name|MAC_OS_X_VERSION_MAX_ALLOWED
operator|>=
name|MAC_OS_X_VERSION_10_5
operator|)
name|QVERIFY
argument_list|(
name|equal
argument_list|(
name|topLevelUIElement
argument_list|(
name|tabGroup
argument_list|)
argument_list|,
name|form
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|equal
argument_list|(
name|topLevelUIElement
argument_list|(
name|tabButton1
argument_list|)
argument_list|,
name|form
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Test the bounding rectangles for the tab group and buttons.
specifier|const
name|QRectF
name|groupRect
argument_list|(
name|position
argument_list|(
name|tabGroup
argument_list|)
argument_list|,
name|size
argument_list|(
name|tabGroup
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QRectF
name|tabButton1Rect
argument_list|(
name|position
argument_list|(
name|tabButton1
argument_list|)
argument_list|,
name|size
argument_list|(
name|tabButton1
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QRectF
name|tabButton2Rect
argument_list|(
name|position
argument_list|(
name|tabButton2
argument_list|)
argument_list|,
name|size
argument_list|(
name|tabButton2
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|groupRect
operator|.
name|isNull
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tabButton1Rect
operator|.
name|isNull
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tabButton1Rect
operator|.
name|isNull
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|groupRect
operator|.
name|contains
argument_list|(
name|tabButton1Rect
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|groupRect
operator|.
name|contains
argument_list|(
name|tabButton2Rect
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tabButton2Rect
operator|.
name|contains
argument_list|(
name|tabButton1Rect
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
comment|// Test the childAtPoint event.
specifier|const
name|AXUIElementRef
name|childAtTab1Position
init|=
name|childAtPoint
argument_list|(
name|position
argument_list|(
name|tabButton1
argument_list|)
operator|+
name|QPointF
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|equal
argument_list|(
name|childAtTab1Position
argument_list|,
name|tabButton1
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|AXUIElementRef
name|childAtOtherPosition
init|=
name|childAtPoint
argument_list|(
name|position
argument_list|(
name|tabButton1
argument_list|)
operator|-
name|QPointF
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|equal
argument_list|(
name|childAtOtherPosition
argument_list|,
name|tabButton1
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
comment|// Test AXTabs attribute
name|QVERIFY
argument_list|(
name|supportsAttribute
argument_list|(
name|tabGroup
argument_list|,
name|kAXTabsAttribute
argument_list|)
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|AXUIElementRef
argument_list|>
name|tabElements
init|=
name|tabs
argument_list|(
name|tabGroup
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|tabElements
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|equal
argument_list|(
name|tabElements
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|tabButton1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|equal
argument_list|(
name|tabElements
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
name|tabButton2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Perform the press action on each child.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numChildren
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|AXUIElementRef
name|child
init|=
operator|::
name|child
argument_list|(
name|tabGroup
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|supportsAction
argument_list|(
name|child
argument_list|,
literal|"AXPress"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|performAction
argument_list|(
name|child
argument_list|,
literal|"AXPress"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|testTabBar
name|void
name|tst_qaccessibility_mac
operator|::
name|testTabBar
parameter_list|()
block|{
name|QTabBar
name|tabBar
decl_stmt|;
name|tabBar
operator|.
name|addTab
argument_list|(
literal|"Tab A"
argument_list|)
expr_stmt|;
name|tabBar
operator|.
name|addTab
argument_list|(
literal|"Tab B"
argument_list|)
expr_stmt|;
name|tabBar
operator|.
name|show
argument_list|()
expr_stmt|;
name|AXUIElementRef
name|currentApplication
init|=
name|AXUIElementCreateApplication
argument_list|(
name|getpid
argument_list|()
argument_list|)
decl_stmt|;
name|AXUIElementRef
name|window
init|=
name|childByRole
argument_list|(
name|currentApplication
argument_list|,
literal|"AXWindow"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|window
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|tabRole
init|=
literal|"AXTabGroup"
decl_stmt|;
name|AXUIElementRef
name|tabGroup
init|=
name|childByRole
argument_list|(
name|window
argument_list|,
name|tabRole
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|tabGroup
argument_list|)
expr_stmt|;
specifier|const
name|int
name|numChildren
init|=
operator|::
name|numChildren
argument_list|(
name|tabGroup
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|numChildren
argument_list|,
literal|2
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|tab1Title
init|=
literal|"Tab A"
decl_stmt|;
name|AXUIElementRef
name|tabButton1
init|=
name|childByTitle
argument_list|(
name|tabGroup
argument_list|,
name|tab1Title
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|tabButton1
argument_list|)
expr_stmt|;
name|VERIFY_ELEMENT
argument_list|(
name|tabButton1
argument_list|,
name|tabGroup
argument_list|,
literal|"AXRadioButton"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|title
argument_list|(
name|tabButton1
argument_list|)
argument_list|,
name|tab1Title
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|tab2Title
init|=
literal|"Tab B"
decl_stmt|;
specifier|const
name|AXUIElementRef
name|tabButton2
init|=
name|childByTitle
argument_list|(
name|tabGroup
argument_list|,
name|tab2Title
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|tabButton2
argument_list|)
expr_stmt|;
name|VERIFY_ELEMENT
argument_list|(
name|tabButton2
argument_list|,
name|tabGroup
argument_list|,
literal|"AXRadioButton"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|title
argument_list|(
name|tabButton2
argument_list|)
argument_list|,
name|tab2Title
argument_list|)
expr_stmt|;
comment|// Test the childAtPoint event.
specifier|const
name|AXUIElementRef
name|childAtTab1Position
init|=
name|childAtPoint
argument_list|(
name|position
argument_list|(
name|tabButton1
argument_list|)
operator|+
name|QPointF
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|equal
argument_list|(
name|childAtTab1Position
argument_list|,
name|tabButton1
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|AXUIElementRef
name|childAtOtherPosition
init|=
name|childAtPoint
argument_list|(
name|position
argument_list|(
name|tabButton1
argument_list|)
operator|-
name|QPointF
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|equal
argument_list|(
name|childAtOtherPosition
argument_list|,
name|tabButton1
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
comment|// Test AXTabs attribute
name|QVERIFY
argument_list|(
name|supportsAttribute
argument_list|(
name|tabGroup
argument_list|,
name|kAXTabsAttribute
argument_list|)
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|AXUIElementRef
argument_list|>
name|tabElements
init|=
name|tabs
argument_list|(
name|tabGroup
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|tabElements
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|equal
argument_list|(
name|tabElements
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|tabButton1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|equal
argument_list|(
name|tabElements
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
name|tabButton2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Perform the press action on each child.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numChildren
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|AXUIElementRef
name|child
init|=
operator|::
name|child
argument_list|(
name|tabGroup
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|supportsAction
argument_list|(
name|child
argument_list|,
literal|"AXPress"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|performAction
argument_list|(
name|child
argument_list|,
literal|"AXPress"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|testComboBox
name|void
name|tst_qaccessibility_mac
operator|::
name|testComboBox
parameter_list|()
block|{
comment|// Get reference to the current application.
name|AXUIElementRef
name|currentApplication
init|=
name|AXUIElementCreateApplication
argument_list|(
name|getpid
argument_list|()
argument_list|)
decl_stmt|;
name|testAppAndForm
argument_list|(
name|currentApplication
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|formTitle
init|=
literal|"Form"
decl_stmt|;
name|AXUIElementRef
name|form
init|=
name|childByTitle
argument_list|(
name|currentApplication
argument_list|,
name|formTitle
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|comboBoxRole
init|=
literal|"AXPopUpButton"
decl_stmt|;
name|AXUIElementRef
name|comboBox
init|=
name|childByRole
argument_list|(
name|form
argument_list|,
name|comboBoxRole
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|comboBox
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|supportsAction
argument_list|(
name|comboBox
argument_list|,
literal|"AXPress"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|performAction
argument_list|(
name|comboBox
argument_list|,
literal|"AXPress"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testDeleteWidget
name|void
name|tst_qaccessibility_mac
operator|::
name|testDeleteWidget
parameter_list|()
block|{
specifier|const
name|QString
name|buttonTitle
init|=
literal|"Hi there"
decl_stmt|;
name|QWidget
modifier|*
name|form
init|=
operator|new
name|QWidget
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|Window
argument_list|)
decl_stmt|;
name|form
operator|->
name|setWindowTitle
argument_list|(
literal|"Form"
argument_list|)
expr_stmt|;
name|form
operator|->
name|show
argument_list|()
expr_stmt|;
name|QPushButton
modifier|*
name|button
init|=
operator|new
name|QPushButton
argument_list|(
name|buttonTitle
argument_list|,
name|form
argument_list|)
decl_stmt|;
name|button
operator|->
name|show
argument_list|()
expr_stmt|;
name|AXUIElementRef
name|currentApplication
init|=
name|AXUIElementCreateApplication
argument_list|(
name|getpid
argument_list|()
argument_list|)
decl_stmt|;
name|testAppAndForm
argument_list|(
name|currentApplication
argument_list|)
expr_stmt|;
name|AXUIElementRef
name|formElement
init|=
name|childByTitle
argument_list|(
name|currentApplication
argument_list|,
literal|"Form"
argument_list|)
decl_stmt|;
name|AXUIElementRef
name|buttonElement
init|=
name|childByTitle
argument_list|(
name|formElement
argument_list|,
name|buttonTitle
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|buttonElement
argument_list|)
expr_stmt|;
name|button
operator|->
name|hide
argument_list|()
expr_stmt|;
operator|delete
name|button
expr_stmt|;
name|buttonElement
operator|=
name|childByTitle
argument_list|(
name|formElement
argument_list|,
name|buttonTitle
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|buttonElement
argument_list|)
expr_stmt|;
operator|delete
name|form
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testDeleteWidgets
name|void
name|tst_qaccessibility_mac
operator|::
name|testDeleteWidgets
parameter_list|()
block|{
specifier|const
name|QString
name|buttonTitle
init|=
literal|"Hi there"
decl_stmt|;
specifier|const
name|int
name|repeats
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|repeats
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|form
init|=
operator|new
name|QWidget
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|Window
argument_list|)
decl_stmt|;
name|form
operator|->
name|setWindowTitle
argument_list|(
literal|"Form"
argument_list|)
expr_stmt|;
name|form
operator|->
name|show
argument_list|()
expr_stmt|;
name|QPushButton
modifier|*
name|button
init|=
operator|new
name|QPushButton
argument_list|(
name|buttonTitle
argument_list|,
name|form
argument_list|)
decl_stmt|;
name|button
operator|->
name|show
argument_list|()
expr_stmt|;
name|AXUIElementRef
name|currentApplication
init|=
name|AXUIElementCreateApplication
argument_list|(
name|getpid
argument_list|()
argument_list|)
decl_stmt|;
name|testAppAndForm
argument_list|(
name|currentApplication
argument_list|)
expr_stmt|;
name|AXUIElementRef
name|formElement
init|=
name|childByTitle
argument_list|(
name|currentApplication
argument_list|,
literal|"Form"
argument_list|)
decl_stmt|;
name|AXUIElementRef
name|buttonElement
init|=
name|childByTitle
argument_list|(
name|formElement
argument_list|,
name|buttonTitle
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|buttonElement
argument_list|)
expr_stmt|;
operator|delete
name|form
expr_stmt|;
block|{
name|AXUIElementRef
name|currentApplication
init|=
name|AXUIElementCreateApplication
argument_list|(
name|getpid
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|currentApplication
argument_list|)
expr_stmt|;
name|AXUIElementRef
name|formElement
init|=
name|childByTitle
argument_list|(
name|currentApplication
argument_list|,
literal|"Form"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|formElement
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|repeats
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|form
init|=
operator|new
name|QWidget
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|Window
argument_list|)
decl_stmt|;
name|form
operator|->
name|setWindowTitle
argument_list|(
literal|"Form"
argument_list|)
expr_stmt|;
operator|new
name|QScrollBar
argument_list|(
name|form
argument_list|)
expr_stmt|;
name|form
operator|->
name|show
argument_list|()
expr_stmt|;
name|AXUIElementRef
name|currentApplication
init|=
name|AXUIElementCreateApplication
argument_list|(
name|getpid
argument_list|()
argument_list|)
decl_stmt|;
name|testAppAndForm
argument_list|(
name|currentApplication
argument_list|)
expr_stmt|;
name|AXUIElementRef
name|formElement
init|=
name|childByTitle
argument_list|(
name|currentApplication
argument_list|,
literal|"Form"
argument_list|)
decl_stmt|;
specifier|const
name|AXUIElementRef
name|scrollBarElement
init|=
name|childByRole
argument_list|(
name|formElement
argument_list|,
literal|"AXScrollBar"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|scrollBarElement
argument_list|)
expr_stmt|;
operator|delete
name|form
expr_stmt|;
block|{
name|AXUIElementRef
name|currentApplication
init|=
name|AXUIElementCreateApplication
argument_list|(
name|getpid
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|currentApplication
argument_list|)
expr_stmt|;
name|AXUIElementRef
name|formElement
init|=
name|childByTitle
argument_list|(
name|currentApplication
argument_list|,
literal|"Form"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|formElement
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|repeats
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|form
init|=
operator|new
name|QWidget
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|Window
argument_list|)
decl_stmt|;
name|form
operator|->
name|setWindowTitle
argument_list|(
literal|"Form"
argument_list|)
expr_stmt|;
name|QListWidget
modifier|*
name|listWidget
init|=
operator|new
name|QListWidget
argument_list|(
name|form
argument_list|)
decl_stmt|;
name|listWidget
operator|->
name|addItem
argument_list|(
literal|"Foo"
argument_list|)
expr_stmt|;
name|listWidget
operator|->
name|addItem
argument_list|(
literal|"Bar"
argument_list|)
expr_stmt|;
name|form
operator|->
name|show
argument_list|()
expr_stmt|;
name|AXUIElementRef
name|currentApplication
init|=
name|AXUIElementCreateApplication
argument_list|(
name|getpid
argument_list|()
argument_list|)
decl_stmt|;
name|testAppAndForm
argument_list|(
name|currentApplication
argument_list|)
expr_stmt|;
name|AXUIElementRef
name|formElement
init|=
name|childByTitle
argument_list|(
name|currentApplication
argument_list|,
literal|"Form"
argument_list|)
decl_stmt|;
specifier|const
name|AXUIElementRef
name|scrollAreaElement
init|=
name|childByRole
argument_list|(
name|formElement
argument_list|,
literal|"AXScrollArea"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|scrollAreaElement
argument_list|)
expr_stmt|;
specifier|const
name|AXUIElementRef
name|listElement
init|=
name|childByRole
argument_list|(
name|scrollAreaElement
argument_list|,
literal|"AXList"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|listElement
argument_list|)
expr_stmt|;
operator|delete
name|form
expr_stmt|;
block|{
name|AXUIElementRef
name|currentApplication
init|=
name|AXUIElementCreateApplication
argument_list|(
name|getpid
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|currentApplication
argument_list|)
expr_stmt|;
name|AXUIElementRef
name|formElement
init|=
name|childByTitle
argument_list|(
name|currentApplication
argument_list|,
literal|"Form"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|formElement
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|testMultipleWindows
name|void
name|tst_qaccessibility_mac
operator|::
name|testMultipleWindows
parameter_list|()
block|{
specifier|const
name|QString
name|formATitle
argument_list|(
literal|"FormA"
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|formBTitle
argument_list|(
literal|"FormB"
argument_list|)
decl_stmt|;
comment|// Create a window
name|QWidget
modifier|*
name|formA
init|=
operator|new
name|QWidget
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|Window
argument_list|)
decl_stmt|;
name|formA
operator|->
name|setWindowTitle
argument_list|(
name|formATitle
argument_list|)
expr_stmt|;
name|formA
operator|->
name|show
argument_list|()
expr_stmt|;
comment|// Test if we can access the window
name|AXUIElementRef
name|currentApplication
init|=
name|AXUIElementCreateApplication
argument_list|(
name|getpid
argument_list|()
argument_list|)
decl_stmt|;
name|AXUIElementRef
name|formAElement
init|=
name|childByTitle
argument_list|(
name|currentApplication
argument_list|,
name|formATitle
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|formAElement
argument_list|)
expr_stmt|;
comment|// Create another window
name|QWidget
modifier|*
name|formB
init|=
operator|new
name|QWidget
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|Window
argument_list|)
decl_stmt|;
name|formB
operator|->
name|setWindowTitle
argument_list|(
name|formBTitle
argument_list|)
expr_stmt|;
name|formB
operator|->
name|show
argument_list|()
expr_stmt|;
comment|// Test if we can access both windows
name|formAElement
operator|=
name|childByTitle
argument_list|(
name|currentApplication
argument_list|,
name|formATitle
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|formAElement
argument_list|)
expr_stmt|;
name|AXUIElementRef
name|formBElement
init|=
name|childByTitle
argument_list|(
name|currentApplication
argument_list|,
name|formBTitle
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|formBElement
argument_list|)
expr_stmt|;
operator|delete
name|formA
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testHiddenWidgets
name|void
name|tst_qaccessibility_mac
operator|::
name|testHiddenWidgets
parameter_list|()
block|{
specifier|const
name|QString
name|windowTitle
init|=
literal|"a widget"
decl_stmt|;
name|QWidget
modifier|*
specifier|const
name|window
init|=
operator|new
name|QWidget
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|window
operator|->
name|setWindowTitle
argument_list|(
name|windowTitle
argument_list|)
expr_stmt|;
name|window
operator|->
name|show
argument_list|()
expr_stmt|;
specifier|const
name|AXUIElementRef
name|currentApplication
init|=
name|AXUIElementCreateApplication
argument_list|(
name|getpid
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|AXUIElementRef
name|windowElement
init|=
name|childByTitle
argument_list|(
name|currentApplication
argument_list|,
name|windowTitle
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|windowElement
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|isIgnored
argument_list|(
name|windowElement
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|buttonTitle
init|=
literal|"a button"
decl_stmt|;
name|QPushButton
modifier|*
specifier|const
name|button
init|=
operator|new
name|QPushButton
argument_list|(
name|window
argument_list|)
decl_stmt|;
name|button
operator|->
name|setText
argument_list|(
name|buttonTitle
argument_list|)
expr_stmt|;
name|button
operator|->
name|show
argument_list|()
expr_stmt|;
specifier|const
name|AXUIElementRef
name|buttonElement
init|=
name|childByTitle
argument_list|(
name|windowElement
argument_list|,
name|buttonTitle
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|buttonElement
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|isIgnored
argument_list|(
name|buttonElement
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|toolbarTitle
init|=
literal|"a toolbar"
decl_stmt|;
name|QToolBar
modifier|*
specifier|const
name|toolbar
init|=
operator|new
name|QToolBar
argument_list|(
name|toolbarTitle
argument_list|,
name|window
argument_list|)
decl_stmt|;
name|toolbar
operator|->
name|show
argument_list|()
expr_stmt|;
specifier|const
name|AXUIElementRef
name|toolBarElement
init|=
name|childByTitle
argument_list|(
name|windowElement
argument_list|,
name|toolbarTitle
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|toolBarElement
operator|==
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|window
expr_stmt|;
block|}
end_function
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_function
DECL|function|testActions
name|void
name|tst_qaccessibility_mac
operator|::
name|testActions
parameter_list|()
block|{
comment|// create a window with a push button
specifier|const
name|QString
name|windowTitle
init|=
literal|"a widget"
decl_stmt|;
name|QWidget
modifier|*
specifier|const
name|window
init|=
operator|new
name|QWidget
argument_list|()
decl_stmt|;
name|window
operator|->
name|setWindowTitle
argument_list|(
name|windowTitle
argument_list|)
expr_stmt|;
name|window
operator|->
name|show
argument_list|()
expr_stmt|;
specifier|const
name|AXUIElementRef
name|currentApplication
init|=
name|AXUIElementCreateApplication
argument_list|(
name|getpid
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|AXUIElementRef
name|windowElement
init|=
name|childByTitle
argument_list|(
name|currentApplication
argument_list|,
name|windowTitle
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|windowElement
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|buttonTitle
init|=
literal|"a button"
decl_stmt|;
name|QPushButton
modifier|*
specifier|const
name|button
init|=
operator|new
name|QPushButton
argument_list|(
name|window
argument_list|)
decl_stmt|;
name|button
operator|->
name|setText
argument_list|(
name|buttonTitle
argument_list|)
expr_stmt|;
name|button
operator|->
name|show
argument_list|()
expr_stmt|;
specifier|const
name|AXUIElementRef
name|buttonElement
init|=
name|childByTitle
argument_list|(
name|windowElement
argument_list|,
name|buttonTitle
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|buttonElement
argument_list|)
expr_stmt|;
comment|// Verify that the button has the Press action.
specifier|const
name|QStringList
name|actions
init|=
name|actionNames
argument_list|(
name|buttonElement
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|pressActionName
argument_list|(
literal|"AXPress"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|actions
operator|.
name|contains
argument_list|(
name|pressActionName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Press button and check the pressed signal
name|QSignalSpy
name|pressed
argument_list|(
name|button
argument_list|,
name|SIGNAL
argument_list|(
name|pressed
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|performAction
argument_list|(
name|buttonElement
argument_list|,
name|pressActionName
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pressed
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|pressed
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|performAction
argument_list|(
name|buttonElement
argument_list|,
name|QString
argument_list|(
literal|"does not exist"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pressed
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|window
expr_stmt|;
block|}
end_function
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_function
DECL|function|testChangeState
name|void
name|tst_qaccessibility_mac
operator|::
name|testChangeState
parameter_list|()
block|{
specifier|const
name|QString
name|windowTitle
init|=
literal|"a widget"
decl_stmt|;
name|QWidget
modifier|*
specifier|const
name|window
init|=
operator|new
name|QWidget
argument_list|()
decl_stmt|;
name|window
operator|->
name|setWindowTitle
argument_list|(
name|windowTitle
argument_list|)
expr_stmt|;
name|window
operator|->
name|show
argument_list|()
expr_stmt|;
specifier|const
name|AXUIElementRef
name|applicationElement
init|=
name|AXUIElementCreateApplication
argument_list|(
name|getpid
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|AXUIElementRef
name|windowElement
init|=
name|childByTitle
argument_list|(
name|applicationElement
argument_list|,
name|windowTitle
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|windowElement
argument_list|)
expr_stmt|;
specifier|const
name|int
name|otherChildren
init|=
name|numChildren
argument_list|(
name|windowElement
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|buttonTitle
init|=
literal|"Button"
decl_stmt|;
name|QPushButton
modifier|*
specifier|const
name|button
init|=
operator|new
name|QPushButton
argument_list|(
name|buttonTitle
argument_list|,
name|window
argument_list|)
decl_stmt|;
name|button
operator|->
name|setText
argument_list|(
name|buttonTitle
argument_list|)
expr_stmt|;
comment|// Test that show/hide adds/removes the button from the hierachy.
name|QVERIFY
argument_list|(
name|childByTitle
argument_list|(
name|windowElement
argument_list|,
name|buttonTitle
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|numChildren
argument_list|(
name|windowElement
argument_list|)
argument_list|,
name|otherChildren
argument_list|)
expr_stmt|;
name|button
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|childByTitle
argument_list|(
name|windowElement
argument_list|,
name|buttonTitle
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|numChildren
argument_list|(
name|windowElement
argument_list|)
argument_list|,
name|otherChildren
operator|+
literal|1
argument_list|)
expr_stmt|;
name|button
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|childByTitle
argument_list|(
name|windowElement
argument_list|,
name|buttonTitle
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|numChildren
argument_list|(
name|windowElement
argument_list|)
argument_list|,
name|otherChildren
argument_list|)
expr_stmt|;
name|button
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|childByTitle
argument_list|(
name|windowElement
argument_list|,
name|buttonTitle
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|numChildren
argument_list|(
name|windowElement
argument_list|)
argument_list|,
name|otherChildren
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// Test that hiding and showing a widget also removes and adds all its children.
block|{
name|QWidget
modifier|*
specifier|const
name|parent
init|=
operator|new
name|QWidget
argument_list|(
name|window
argument_list|)
decl_stmt|;
specifier|const
name|int
name|otherChildren
init|=
name|numChildren
argument_list|(
name|windowElement
argument_list|)
decl_stmt|;
name|QPushButton
modifier|*
specifier|const
name|child
init|=
operator|new
name|QPushButton
argument_list|(
name|parent
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|childButtonTitle
init|=
literal|"child button"
decl_stmt|;
name|child
operator|->
name|setText
argument_list|(
name|childButtonTitle
argument_list|)
expr_stmt|;
name|parent
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|childByTitle
argument_list|(
name|windowElement
argument_list|,
name|childButtonTitle
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|numChildren
argument_list|(
name|windowElement
argument_list|)
argument_list|,
name|otherChildren
operator|+
literal|1
argument_list|)
expr_stmt|;
name|parent
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|childByTitle
argument_list|(
name|windowElement
argument_list|,
name|childButtonTitle
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|numChildren
argument_list|(
name|windowElement
argument_list|)
argument_list|,
name|otherChildren
argument_list|)
expr_stmt|;
name|parent
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|childByTitle
argument_list|(
name|windowElement
argument_list|,
name|childButtonTitle
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|numChildren
argument_list|(
name|windowElement
argument_list|)
argument_list|,
name|otherChildren
operator|+
literal|1
argument_list|)
expr_stmt|;
operator|delete
name|parent
expr_stmt|;
block|}
comment|// Test that the enabled attribute is updated after a call to setEnabled.
specifier|const
name|AXUIElementRef
name|buttonElement
init|=
name|childByTitle
argument_list|(
name|windowElement
argument_list|,
name|buttonTitle
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|enabled
argument_list|(
name|buttonElement
argument_list|)
argument_list|)
expr_stmt|;
name|button
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|enabled
argument_list|(
name|buttonElement
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
name|button
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|enabled
argument_list|(
name|buttonElement
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test that changing the title updates the accessibility information.
specifier|const
name|QString
name|buttonTitle2
init|=
literal|"Button 2"
decl_stmt|;
name|button
operator|->
name|setText
argument_list|(
name|buttonTitle2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|childByTitle
argument_list|(
name|windowElement
argument_list|,
name|buttonTitle2
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|childByTitle
argument_list|(
name|windowElement
argument_list|,
name|buttonTitle
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|window
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testSlider
name|void
name|tst_qaccessibility_mac
operator|::
name|testSlider
parameter_list|()
block|{
specifier|const
name|QString
name|windowTitle
init|=
literal|"a widget"
decl_stmt|;
name|QWidget
modifier|*
specifier|const
name|window
init|=
operator|new
name|QWidget
argument_list|()
decl_stmt|;
name|window
operator|->
name|setWindowTitle
argument_list|(
name|windowTitle
argument_list|)
expr_stmt|;
name|window
operator|->
name|show
argument_list|()
expr_stmt|;
specifier|const
name|AXUIElementRef
name|applicationElement
init|=
name|AXUIElementCreateApplication
argument_list|(
name|getpid
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|applicationElement
argument_list|)
expr_stmt|;
specifier|const
name|AXUIElementRef
name|windowElement
init|=
name|childByTitle
argument_list|(
name|applicationElement
argument_list|,
name|windowTitle
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|windowElement
argument_list|)
expr_stmt|;
specifier|const
name|int
name|windowChildren
init|=
name|numChildren
argument_list|(
name|windowElement
argument_list|)
decl_stmt|;
name|QSlider
modifier|*
specifier|const
name|slider
init|=
operator|new
name|QSlider
argument_list|(
name|window
argument_list|)
decl_stmt|;
name|slider
operator|->
name|show
argument_list|()
expr_stmt|;
specifier|const
name|AXUIElementRef
name|sliderElement
init|=
name|childByRole
argument_list|(
name|windowElement
argument_list|,
literal|"AXSlider"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|sliderElement
argument_list|)
expr_stmt|;
comment|// Test that the slider and its children are removed from the hierachy when we call hide().
name|QCOMPARE
argument_list|(
name|numChildren
argument_list|(
name|windowElement
argument_list|)
argument_list|,
name|windowChildren
operator|+
literal|1
argument_list|)
expr_stmt|;
name|slider
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|numChildren
argument_list|(
name|windowElement
argument_list|)
argument_list|,
name|windowChildren
argument_list|)
expr_stmt|;
operator|delete
name|slider
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testScrollArea
name|void
name|tst_qaccessibility_mac
operator|::
name|testScrollArea
parameter_list|()
block|{
name|QWidget
name|window
decl_stmt|;
specifier|const
name|QString
name|windowTitle
init|=
literal|"window"
decl_stmt|;
name|window
operator|.
name|setWindowTitle
argument_list|(
name|windowTitle
argument_list|)
expr_stmt|;
name|window
operator|.
name|resize
argument_list|(
literal|300
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|QScrollArea
name|scrollArea
argument_list|(
operator|&
name|window
argument_list|)
decl_stmt|;
name|scrollArea
operator|.
name|resize
argument_list|(
literal|300
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|scrollArea
operator|.
name|setVerticalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAlwaysOn
argument_list|)
expr_stmt|;
name|scrollArea
operator|.
name|setHorizontalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAlwaysOn
argument_list|)
expr_stmt|;
name|QLabel
name|label
decl_stmt|;
name|label
operator|.
name|setText
argument_list|(
literal|"Foo"
argument_list|)
expr_stmt|;
name|scrollArea
operator|.
name|setWidget
argument_list|(
operator|&
name|label
argument_list|)
expr_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
comment|// Verify that the QAinterface returns the correct children
name|QAInterface
name|interface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
operator|&
name|scrollArea
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|.
name|childCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QAInterface
name|viewport
init|=
name|interface
operator|.
name|navigate
argument_list|(
name|QAccessible
operator|::
name|Child
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|viewport
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QAInterface
name|scrollBarContainer1
init|=
name|interface
operator|.
name|navigate
argument_list|(
name|QAccessible
operator|::
name|Child
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|scrollBarContainer1
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QAInterface
name|scrollBar1
init|=
name|scrollBarContainer1
operator|.
name|navigate
argument_list|(
name|QAccessible
operator|::
name|Child
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|scrollBar1
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|scrollBar1
operator|.
name|role
argument_list|()
operator|==
name|QAccessible
operator|::
name|ScrollBar
argument_list|)
expr_stmt|;
name|QAInterface
name|scrollBarContainer2
init|=
name|interface
operator|.
name|navigate
argument_list|(
name|QAccessible
operator|::
name|Child
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|scrollBarContainer1
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QAInterface
name|scrollBar2
init|=
name|scrollBarContainer2
operator|.
name|navigate
argument_list|(
name|QAccessible
operator|::
name|Child
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|scrollBar2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|scrollBar2
operator|.
name|role
argument_list|()
operator|==
name|QAccessible
operator|::
name|ScrollBar
argument_list|)
expr_stmt|;
comment|// Navigate to the scroll area from the application
specifier|const
name|AXUIElementRef
name|applicationElement
init|=
name|AXUIElementCreateApplication
argument_list|(
name|getpid
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|applicationElement
argument_list|)
expr_stmt|;
specifier|const
name|AXUIElementRef
name|windowElement
init|=
name|childByTitle
argument_list|(
name|applicationElement
argument_list|,
name|windowTitle
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|windowElement
argument_list|)
expr_stmt|;
specifier|const
name|AXUIElementRef
name|scrollAreaElement
init|=
name|childByRole
argument_list|(
name|windowElement
argument_list|,
literal|"AXScrollArea"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|scrollAreaElement
argument_list|)
expr_stmt|;
comment|// Get the scroll bars
name|QVERIFY
argument_list|(
name|supportsAttribute
argument_list|(
name|scrollAreaElement
argument_list|,
name|kAXHorizontalScrollBarAttribute
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|AXUIElementRef
name|horizontalScrollBar
init|=
name|elementAttribute
argument_list|(
name|scrollAreaElement
argument_list|,
name|kAXHorizontalScrollBarAttribute
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|horizontalScrollBar
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|role
argument_list|(
name|horizontalScrollBar
argument_list|)
operator|==
literal|"AXScrollBar"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|stringAttribute
argument_list|(
name|horizontalScrollBar
argument_list|,
name|kAXOrientationAttribute
argument_list|)
operator|==
literal|"AXHorizontalOrientation"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|supportsAttribute
argument_list|(
name|scrollAreaElement
argument_list|,
name|kAXVerticalScrollBarAttribute
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|AXUIElementRef
name|verticalScrollBar
init|=
name|elementAttribute
argument_list|(
name|scrollAreaElement
argument_list|,
name|kAXVerticalScrollBarAttribute
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|verticalScrollBar
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|role
argument_list|(
name|verticalScrollBar
argument_list|)
operator|==
literal|"AXScrollBar"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|stringAttribute
argument_list|(
name|verticalScrollBar
argument_list|,
name|kAXOrientationAttribute
argument_list|)
operator|==
literal|"AXVerticalOrientation"
argument_list|)
expr_stmt|;
comment|// Get the contents and verify that we get the label.
name|QVERIFY
argument_list|(
name|supportsAttribute
argument_list|(
name|scrollAreaElement
argument_list|,
name|kAXContentsAttribute
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QList
argument_list|<
name|AXUIElementRef
argument_list|>
name|contents
init|=
name|elementListAttribute
argument_list|(
name|scrollAreaElement
argument_list|,
name|kAXContentsAttribute
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|contents
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|AXUIElementRef
name|content
init|=
name|contents
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|role
argument_list|(
name|content
argument_list|)
operator|==
literal|"AXStaticText"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|title
argument_list|(
name|content
argument_list|)
operator|==
literal|"Foo"
argument_list|)
expr_stmt|;
comment|// Turn scroll bars off
block|{
name|scrollArea
operator|.
name|setVerticalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAlwaysOff
argument_list|)
expr_stmt|;
name|scrollArea
operator|.
name|setHorizontalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAlwaysOff
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|supportsAttribute
argument_list|(
name|scrollAreaElement
argument_list|,
name|kAXHorizontalScrollBarAttribute
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|supportsAttribute
argument_list|(
name|scrollAreaElement
argument_list|,
name|kAXVerticalScrollBarAttribute
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|supportsAttribute
argument_list|(
name|scrollAreaElement
argument_list|,
name|kAXContentsAttribute
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QList
argument_list|<
name|AXUIElementRef
argument_list|>
name|contents
init|=
name|elementListAttribute
argument_list|(
name|scrollAreaElement
argument_list|,
name|kAXContentsAttribute
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|contents
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|AXUIElementRef
name|content
init|=
name|contents
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|role
argument_list|(
name|content
argument_list|)
operator|==
literal|"AXStaticText"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|title
argument_list|(
name|content
argument_list|)
operator|==
literal|"Foo"
argument_list|)
expr_stmt|;
block|}
comment|// Turn the horizontal scrollbar on.
block|{
name|scrollArea
operator|.
name|setHorizontalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAlwaysOn
argument_list|)
expr_stmt|;
name|scrollArea
operator|.
name|setVerticalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAlwaysOff
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|supportsAttribute
argument_list|(
name|scrollAreaElement
argument_list|,
name|kAXHorizontalScrollBarAttribute
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|supportsAttribute
argument_list|(
name|scrollAreaElement
argument_list|,
name|kAXVerticalScrollBarAttribute
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
specifier|const
name|AXUIElementRef
name|horizontalScrollBar
init|=
name|elementAttribute
argument_list|(
name|scrollAreaElement
argument_list|,
name|kAXHorizontalScrollBarAttribute
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|horizontalScrollBar
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|role
argument_list|(
name|horizontalScrollBar
argument_list|)
operator|==
literal|"AXScrollBar"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|stringAttribute
argument_list|(
name|horizontalScrollBar
argument_list|,
name|kAXOrientationAttribute
argument_list|)
operator|==
literal|"AXHorizontalOrientation"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|supportsAttribute
argument_list|(
name|scrollAreaElement
argument_list|,
name|kAXContentsAttribute
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QList
argument_list|<
name|AXUIElementRef
argument_list|>
name|contents
init|=
name|elementListAttribute
argument_list|(
name|scrollAreaElement
argument_list|,
name|kAXContentsAttribute
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|contents
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|AXUIElementRef
name|content
init|=
name|contents
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|role
argument_list|(
name|content
argument_list|)
operator|==
literal|"AXStaticText"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|title
argument_list|(
name|content
argument_list|)
operator|==
literal|"Foo"
argument_list|)
expr_stmt|;
block|}
comment|// Turn the vertical scrollbar on.
block|{
name|scrollArea
operator|.
name|setHorizontalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAlwaysOff
argument_list|)
expr_stmt|;
name|scrollArea
operator|.
name|setVerticalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAlwaysOn
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|supportsAttribute
argument_list|(
name|scrollAreaElement
argument_list|,
name|kAXHorizontalScrollBarAttribute
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|supportsAttribute
argument_list|(
name|scrollAreaElement
argument_list|,
name|kAXVerticalScrollBarAttribute
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|supportsAttribute
argument_list|(
name|scrollAreaElement
argument_list|,
name|kAXVerticalScrollBarAttribute
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|AXUIElementRef
name|verticalScrollBar
init|=
name|elementAttribute
argument_list|(
name|scrollAreaElement
argument_list|,
name|kAXVerticalScrollBarAttribute
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|verticalScrollBar
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|role
argument_list|(
name|verticalScrollBar
argument_list|)
operator|==
literal|"AXScrollBar"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|stringAttribute
argument_list|(
name|verticalScrollBar
argument_list|,
name|kAXOrientationAttribute
argument_list|)
operator|==
literal|"AXVerticalOrientation"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|supportsAttribute
argument_list|(
name|scrollAreaElement
argument_list|,
name|kAXContentsAttribute
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QList
argument_list|<
name|AXUIElementRef
argument_list|>
name|contents
init|=
name|elementListAttribute
argument_list|(
name|scrollAreaElement
argument_list|,
name|kAXContentsAttribute
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|contents
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|AXUIElementRef
name|content
init|=
name|contents
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|role
argument_list|(
name|content
argument_list|)
operator|==
literal|"AXStaticText"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|title
argument_list|(
name|content
argument_list|)
operator|==
literal|"Foo"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|testListView
name|void
name|tst_qaccessibility_mac
operator|::
name|testListView
parameter_list|()
block|{
name|QWidget
name|window
decl_stmt|;
specifier|const
name|QString
name|windowTitle
argument_list|(
literal|"window"
argument_list|)
decl_stmt|;
name|window
operator|.
name|setWindowTitle
argument_list|(
name|windowTitle
argument_list|)
expr_stmt|;
name|window
operator|.
name|resize
argument_list|(
literal|300
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|QListWidget
modifier|*
name|listWidget
init|=
operator|new
name|QListWidget
argument_list|(
operator|&
name|window
argument_list|)
decl_stmt|;
name|listWidget
operator|->
name|setObjectName
argument_list|(
literal|"listwidget"
argument_list|)
expr_stmt|;
name|listWidget
operator|->
name|addItem
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|listWidget
operator|->
name|addItem
argument_list|(
literal|"B"
argument_list|)
expr_stmt|;
name|listWidget
operator|->
name|addItem
argument_list|(
literal|"C"
argument_list|)
expr_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|{
comment|// Verify that QAInterface works as expected for list views
name|QAInterface
name|listWidgetInterface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|listWidget
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|listWidgetInterface
operator|.
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|Client
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|listWidgetInterface
operator|.
name|childCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QAInterface
name|viewPort
init|=
name|listWidgetInterface
operator|.
name|childAt
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|viewPort
operator|.
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|List
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|viewPort
operator|.
name|object
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|viewPort
operator|.
name|childCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
specifier|const
name|QList
argument_list|<
name|QAInterface
argument_list|>
name|rows
init|=
name|viewPort
operator|.
name|children
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|rows
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rows
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|object
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rows
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|parent
argument_list|()
operator|.
name|indexOfChild
argument_list|(
name|rows
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rows
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|parent
argument_list|()
operator|.
name|indexOfChild
argument_list|(
name|rows
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rows
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|parent
argument_list|()
operator|.
name|indexOfChild
argument_list|(
name|rows
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// test the QAInterface comparison operator
name|QVERIFY
argument_list|(
name|rows
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|rows
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rows
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|!=
name|rows
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rows
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|!=
name|viewPort
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|viewPort
operator|==
name|viewPort
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|listWidgetInterface
operator|!=
name|viewPort
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|listWidgetInterface
operator|==
name|listWidgetInterface
argument_list|)
expr_stmt|;
comment|// test QAInterface::isHIView()
name|QVERIFY
argument_list|(
name|viewPort
operator|.
name|isHIView
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|listWidgetInterface
operator|.
name|isHIView
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rows
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|isHIView
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|const
name|AXUIElementRef
name|applicationElement
init|=
name|AXUIElementCreateApplication
argument_list|(
name|getpid
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|applicationElement
argument_list|)
expr_stmt|;
specifier|const
name|AXUIElementRef
name|windowElement
init|=
name|childByTitle
argument_list|(
name|applicationElement
argument_list|,
name|windowTitle
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|windowElement
argument_list|)
expr_stmt|;
specifier|const
name|AXUIElementRef
name|scrollAreaElement
init|=
name|childByRole
argument_list|(
name|windowElement
argument_list|,
literal|"AXScrollArea"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|scrollAreaElement
argument_list|)
expr_stmt|;
specifier|const
name|AXUIElementRef
name|listElement
init|=
name|childByRole
argument_list|(
name|scrollAreaElement
argument_list|,
literal|"AXList"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|listElement
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|equal
argument_list|(
operator|::
name|parent
argument_list|(
name|listElement
argument_list|)
argument_list|,
name|scrollAreaElement
argument_list|)
argument_list|)
expr_stmt|;
comment|// Window is not reported properly on 10.5
if|if
condition|(
name|QSysInfo
operator|::
name|MacintoshVersion
operator|<
name|QSysInfo
operator|::
name|MV_10_5
condition|)
name|QVERIFY
argument_list|(
name|equal
argument_list|(
operator|::
name|window
argument_list|(
name|listElement
argument_list|)
argument_list|,
name|windowElement
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|AXUIElementRef
name|A
init|=
name|childByTitle
argument_list|(
name|listElement
argument_list|,
literal|"A"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|A
argument_list|)
expr_stmt|;
specifier|const
name|AXUIElementRef
name|B
init|=
name|childByTitle
argument_list|(
name|listElement
argument_list|,
literal|"B"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|B
argument_list|)
expr_stmt|;
specifier|const
name|AXUIElementRef
name|C
init|=
name|childByTitle
argument_list|(
name|listElement
argument_list|,
literal|"C"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|C
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
argument_list|(
name|A
argument_list|)
operator|==
literal|"A"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|equal
argument_list|(
operator|::
name|parent
argument_list|(
name|A
argument_list|)
argument_list|,
name|listElement
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|enabled
argument_list|(
name|A
argument_list|)
argument_list|)
expr_stmt|;
comment|// Window is not reported properly on 10.5, this test
comment|// hangs on 10.4. Disable it for now.
comment|//    if (QSysInfo::MacintoshVersion< QSysInfo::MV_10_5)
comment|//        QVERIFY(equal(::window(A), windowElement));
name|QVERIFY
argument_list|(
name|above
argument_list|(
name|A
argument_list|,
name|B
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|above
argument_list|(
name|B
argument_list|,
name|A
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|above
argument_list|(
name|B
argument_list|,
name|C
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|contains
argument_list|(
name|listElement
argument_list|,
name|A
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|contains
argument_list|(
name|A
argument_list|,
name|listElement
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|contains
argument_list|(
name|listElement
argument_list|,
name|B
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|contains
argument_list|(
name|listElement
argument_list|,
name|C
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testTableView
name|void
name|tst_qaccessibility_mac
operator|::
name|testTableView
parameter_list|()
block|{
name|QWidget
name|window
decl_stmt|;
specifier|const
name|QString
name|windowTitle
argument_list|(
literal|"window"
argument_list|)
decl_stmt|;
name|window
operator|.
name|setWindowTitle
argument_list|(
name|windowTitle
argument_list|)
expr_stmt|;
name|window
operator|.
name|resize
argument_list|(
literal|300
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|QTableWidget
modifier|*
name|tableWidget
init|=
operator|new
name|QTableWidget
argument_list|(
operator|&
name|window
argument_list|)
decl_stmt|;
name|tableWidget
operator|->
name|setObjectName
argument_list|(
literal|"tablewidget"
argument_list|)
expr_stmt|;
name|tableWidget
operator|->
name|setRowCount
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|tableWidget
operator|->
name|setColumnCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|tableWidget
operator|->
name|setItem
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|new
name|QTableWidgetItem
argument_list|(
literal|"A1"
argument_list|)
argument_list|)
expr_stmt|;
name|tableWidget
operator|->
name|setItem
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
operator|new
name|QTableWidgetItem
argument_list|(
literal|"A2"
argument_list|)
argument_list|)
expr_stmt|;
name|tableWidget
operator|->
name|setItem
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
operator|new
name|QTableWidgetItem
argument_list|(
literal|"B1"
argument_list|)
argument_list|)
expr_stmt|;
name|tableWidget
operator|->
name|setItem
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|new
name|QTableWidgetItem
argument_list|(
literal|"B2"
argument_list|)
argument_list|)
expr_stmt|;
name|tableWidget
operator|->
name|setItem
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
operator|new
name|QTableWidgetItem
argument_list|(
literal|"C1"
argument_list|)
argument_list|)
expr_stmt|;
name|tableWidget
operator|->
name|setItem
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
operator|new
name|QTableWidgetItem
argument_list|(
literal|"C2"
argument_list|)
argument_list|)
expr_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
block|{
comment|// Verify that QAInterface works as expected for table view children.
name|QAInterface
name|tableWidgetInterface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|tableWidget
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|tableWidgetInterface
operator|.
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|Client
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tableWidgetInterface
operator|.
name|childCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QAInterface
name|viewPort
init|=
name|tableWidgetInterface
operator|.
name|childAt
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|viewPort
operator|.
name|childCount
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|viewPort
operator|.
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|Table
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|viewPort
operator|.
name|object
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
specifier|const
name|QList
argument_list|<
name|QAInterface
argument_list|>
name|rows
init|=
name|viewPort
operator|.
name|children
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|rows
operator|.
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rows
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|object
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rows
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|parent
argument_list|()
operator|.
name|indexOfChild
argument_list|(
name|rows
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rows
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|parent
argument_list|()
operator|.
name|indexOfChild
argument_list|(
name|rows
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rows
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|parent
argument_list|()
operator|.
name|indexOfChild
argument_list|(
name|rows
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QAInterface
name|Arow
init|=
name|rows
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|Arow
operator|.
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|Row
argument_list|)
expr_stmt|;
name|QAInterface
name|Brow
init|=
name|rows
operator|.
name|at
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|Arow
operator|.
name|name
argument_list|()
operator|==
literal|"1"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|Brow
operator|.
name|name
argument_list|()
operator|==
literal|"2"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|Arow
operator|==
name|Arow
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|Brow
operator|!=
name|Arow
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|Arow
operator|.
name|isHIView
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|Arow
operator|.
name|childCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QAInterface
argument_list|>
name|Achildren
init|=
name|Arow
operator|.
name|children
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|Achildren
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QAInterface
name|A1
init|=
name|Achildren
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QAInterface
name|A2
init|=
name|Achildren
operator|.
name|at
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|Arow
operator|.
name|indexOfChild
argument_list|(
name|A1
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|Arow
operator|.
name|indexOfChild
argument_list|(
name|A2
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|A1
operator|.
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|Cell
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QAInterface
argument_list|>
name|Bchildren
init|=
name|Brow
operator|.
name|children
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|Bchildren
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QAInterface
name|B1
init|=
name|Bchildren
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QAInterface
name|B2
init|=
name|Bchildren
operator|.
name|at
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|B1
operator|.
name|parent
argument_list|()
operator|==
name|Brow
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|B1
operator|.
name|parent
argument_list|()
operator|!=
name|Arow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|Arow
operator|.
name|indexOfChild
argument_list|(
name|B1
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|A1
operator|==
name|A1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|A1
operator|!=
name|A2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|B1
operator|!=
name|A1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|B1
operator|!=
name|A2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|A1
operator|!=
name|Arow
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|A1
operator|!=
name|Brow
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|A1
operator|!=
name|viewPort
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|A1
operator|.
name|isHIView
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|B1
operator|.
name|parent
argument_list|()
operator|==
name|Brow
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|A1
operator|.
name|parent
argument_list|()
operator|==
name|Arow
argument_list|)
expr_stmt|;
name|B1
operator|=
name|A1
expr_stmt|;
name|QVERIFY
argument_list|(
name|B1
operator|.
name|parent
argument_list|()
operator|==
name|Arow
argument_list|)
expr_stmt|;
block|}
specifier|const
name|AXUIElementRef
name|applicationElement
init|=
name|AXUIElementCreateApplication
argument_list|(
name|getpid
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|applicationElement
argument_list|)
expr_stmt|;
specifier|const
name|AXUIElementRef
name|windowElement
init|=
name|childByTitle
argument_list|(
name|applicationElement
argument_list|,
name|windowTitle
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|windowElement
argument_list|)
expr_stmt|;
specifier|const
name|AXUIElementRef
name|scrollAreaElement
init|=
name|childByRole
argument_list|(
name|windowElement
argument_list|,
literal|"AXScrollArea"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|scrollAreaElement
argument_list|)
expr_stmt|;
specifier|const
name|AXUIElementRef
name|tableElement
init|=
name|childByRole
argument_list|(
name|scrollAreaElement
argument_list|,
literal|"AXTable"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|tableElement
argument_list|)
expr_stmt|;
block|{
comment|// Verify that QAccessibleHierarchyManager can look up table view children correctly
name|QAccessibleHierarchyManager
modifier|*
name|manager
init|=
name|QAccessibleHierarchyManager
operator|::
name|instance
argument_list|()
decl_stmt|;
name|QAInterface
name|tableInterface
init|=
name|manager
operator|->
name|lookup
argument_list|(
name|tableElement
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|tableInterface
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tableInterface
operator|.
name|role
argument_list|()
operator|==
name|QAccessible
operator|::
name|Table
argument_list|)
expr_stmt|;
name|QAInterface
name|ArowInterface
init|=
name|tableInterface
operator|.
name|childAt
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|ArowInterface
operator|.
name|name
argument_list|()
operator|==
literal|"1"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|manager
operator|->
name|lookup
argument_list|(
name|manager
operator|->
name|lookup
argument_list|(
name|ArowInterface
argument_list|)
argument_list|)
operator|.
name|name
argument_list|()
operator|==
literal|"1"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ArowInterface
operator|.
name|childCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QAInterface
name|A1Interface
init|=
name|ArowInterface
operator|.
name|childAt
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|A1Interface
operator|.
name|value
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"A1"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
argument_list|(
name|manager
operator|->
name|lookup
argument_list|(
name|A1Interface
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
operator|==
literal|"A1"
argument_list|)
expr_stmt|;
name|QAInterface
name|A2Interface
init|=
name|ArowInterface
operator|.
name|childAt
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|QAElement
name|A2Element
init|=
name|manager
operator|->
name|lookup
argument_list|(
name|A2Interface
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|manager
operator|->
name|lookup
argument_list|(
name|A2Element
argument_list|)
operator|.
name|value
argument_list|()
operator|==
literal|"A2"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
argument_list|(
name|A2Element
argument_list|)
operator|.
name|toString
argument_list|()
operator|==
literal|"A2"
argument_list|)
expr_stmt|;
name|QAInterface
name|BrowInterface
init|=
name|tableInterface
operator|.
name|childAt
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|BrowInterface
operator|.
name|value
argument_list|()
operator|==
literal|"2"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|manager
operator|->
name|lookup
argument_list|(
name|manager
operator|->
name|lookup
argument_list|(
name|BrowInterface
argument_list|)
argument_list|)
operator|.
name|value
argument_list|()
operator|==
literal|"2"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|BrowInterface
operator|.
name|childCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QAInterface
name|B1Interface
init|=
name|BrowInterface
operator|.
name|childAt
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|value
argument_list|(
name|manager
operator|->
name|lookup
argument_list|(
name|B1Interface
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
operator|==
literal|"B1"
argument_list|)
expr_stmt|;
name|QAInterface
name|B2Interface
init|=
name|BrowInterface
operator|.
name|childAt
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|QAElement
name|B2Element
init|=
name|manager
operator|->
name|lookup
argument_list|(
name|B2Interface
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|manager
operator|->
name|lookup
argument_list|(
name|B2Element
argument_list|)
operator|.
name|value
argument_list|()
operator|==
literal|"B2"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
argument_list|(
name|B2Element
argument_list|)
operator|.
name|toString
argument_list|()
operator|==
literal|"B2"
argument_list|)
expr_stmt|;
block|}
specifier|const
name|AXUIElementRef
name|Arow
init|=
name|childByTitle
argument_list|(
name|tableElement
argument_list|,
literal|"1"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|Arow
argument_list|)
expr_stmt|;
specifier|const
name|AXUIElementRef
name|Brow
init|=
name|childByTitle
argument_list|(
name|tableElement
argument_list|,
literal|"2"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|Brow
argument_list|)
expr_stmt|;
specifier|const
name|AXUIElementRef
name|Crow
init|=
name|childByTitle
argument_list|(
name|tableElement
argument_list|,
literal|"3"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|Crow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|numChildren
argument_list|(
name|Arow
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
specifier|const
name|AXUIElementRef
name|A1cell
init|=
name|childByTitle
argument_list|(
name|Arow
argument_list|,
literal|"A1"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|A1cell
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|role
argument_list|(
name|A1cell
argument_list|)
operator|==
literal|"AXTextField"
argument_list|)
expr_stmt|;
specifier|const
name|AXUIElementRef
name|A2cell
init|=
name|childByTitle
argument_list|(
name|Arow
argument_list|,
literal|"A2"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|A2cell
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|equal
argument_list|(
operator|::
name|parent
argument_list|(
name|A2cell
argument_list|)
argument_list|,
name|Arow
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|AXUIElementRef
name|B2cell
init|=
name|childByTitle
argument_list|(
name|Brow
argument_list|,
literal|"B2"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|B2cell
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|equal
argument_list|(
operator|::
name|parent
argument_list|(
name|B2cell
argument_list|)
argument_list|,
name|Brow
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|QVERIFY
argument_list|(
name|supportsAttribute
argument_list|(
name|tableElement
argument_list|,
name|kAXRowsAttribute
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QList
argument_list|<
name|AXUIElementRef
argument_list|>
name|rows
init|=
name|elementListAttribute
argument_list|(
name|tableElement
argument_list|,
name|kAXRowsAttribute
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|rows
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// the header is not a row
name|QVERIFY
argument_list|(
name|value
argument_list|(
name|rows
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|==
literal|"2"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
argument_list|(
name|rows
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|==
literal|"3"
argument_list|)
expr_stmt|;
block|}
block|{
name|QVERIFY
argument_list|(
name|supportsAttribute
argument_list|(
name|tableElement
argument_list|,
name|kAXVisibleRowsAttribute
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QList
argument_list|<
name|AXUIElementRef
argument_list|>
name|rows
init|=
name|elementListAttribute
argument_list|(
name|tableElement
argument_list|,
name|kAXVisibleRowsAttribute
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|rows
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
argument_list|(
name|rows
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|==
literal|"2"
argument_list|)
expr_stmt|;
block|}
block|{
name|QVERIFY
argument_list|(
name|supportsAttribute
argument_list|(
name|tableElement
argument_list|,
name|kAXSelectedRowsAttribute
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QList
argument_list|<
name|AXUIElementRef
argument_list|>
name|rows
init|=
name|elementListAttribute
argument_list|(
name|tableElement
argument_list|,
name|kAXSelectedRowsAttribute
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|rows
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// test row visibility
block|{
name|QTableWidget
name|tableWidget
decl_stmt|;
name|tableWidget
operator|.
name|setObjectName
argument_list|(
literal|"tablewidget"
argument_list|)
expr_stmt|;
name|tableWidget
operator|.
name|setRowCount
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|tableWidget
operator|.
name|setColumnCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
operator|++
name|i
control|)
block|{
name|tableWidget
operator|.
name|setItem
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
operator|new
name|QTableWidgetItem
argument_list|(
literal|"item"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tableWidget
operator|.
name|show
argument_list|()
expr_stmt|;
name|QAInterface
name|tableWidgetInterface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
operator|&
name|tableWidget
argument_list|)
decl_stmt|;
name|QAInterface
name|viewPortInterface
init|=
name|tableWidgetInterface
operator|.
name|childAt
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|viewPortInterface
operator|.
name|childCount
argument_list|()
argument_list|,
literal|1001
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|viewPortInterface
operator|.
name|childAt
argument_list|(
literal|2
argument_list|)
operator|.
name|state
argument_list|()
operator|&
name|QAccessible
operator|::
name|Invisible
operator|)
operator|==
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|viewPortInterface
operator|.
name|childAt
argument_list|(
literal|2
argument_list|)
operator|.
name|state
argument_list|()
operator|&
name|QAccessible
operator|::
name|Offscreen
operator|)
operator|==
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|viewPortInterface
operator|.
name|childAt
argument_list|(
literal|500
argument_list|)
operator|.
name|state
argument_list|()
operator|&
name|QAccessible
operator|::
name|Invisible
argument_list|)
expr_stmt|;
comment|//        QVERIFY(viewPortInterface.childAt(500).state()& QAccessible::Offscreen);
name|tableWidget
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
comment|//    printElementInfo(tableElement);
comment|//    QTest::qWait(1000000);
block|}
end_function
begin_function
DECL|function|testScrollBar
name|void
name|tst_qaccessibility_mac
operator|::
name|testScrollBar
parameter_list|()
block|{
block|{
name|QScrollBar
name|scrollBar
decl_stmt|;
name|scrollBar
operator|.
name|show
argument_list|()
expr_stmt|;
name|QAInterface
name|scrollBarInterface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
operator|&
name|scrollBar
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|scrollBarInterface
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|scrollBarInterface
operator|.
name|childCount
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|scrollBarInterface
operator|.
name|indexOfChild
argument_list|(
name|scrollBarInterface
operator|.
name|childAt
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|scrollBarInterface
operator|.
name|indexOfChild
argument_list|(
name|scrollBarInterface
operator|.
name|childAt
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|scrollBarInterface
operator|.
name|indexOfChild
argument_list|(
name|scrollBarInterface
operator|.
name|childAt
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|scrollBarInterface
operator|.
name|indexOfChild
argument_list|(
name|scrollBarInterface
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|const
name|AXUIElementRef
name|currentApplication
init|=
name|AXUIElementCreateApplication
argument_list|(
name|getpid
argument_list|()
argument_list|)
decl_stmt|;
name|testAppAndForm
argument_list|(
name|currentApplication
argument_list|)
expr_stmt|;
specifier|const
name|AXUIElementRef
name|form
init|=
name|childByTitle
argument_list|(
name|currentApplication
argument_list|,
literal|"Form"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|form
argument_list|)
expr_stmt|;
specifier|const
name|AXUIElementRef
name|scrollBarElement
init|=
name|childByRole
argument_list|(
name|form
argument_list|,
literal|"AXScrollBar"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|scrollBarElement
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|attribute
argument_list|(
name|scrollBarElement
argument_list|,
name|kAXOrientationAttribute
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"AXVerticalOrientation"
argument_list|)
argument_list|)
expr_stmt|;
block|{
specifier|const
name|AXUIElementRef
name|lineUpElement
init|=
name|childByTitle
argument_list|(
name|scrollBarElement
argument_list|,
literal|"Line up"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|lineUpElement
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|subrole
argument_list|(
name|lineUpElement
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"AXDecrementArrow"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|AXUIElementRef
name|lineDownElement
init|=
name|childByTitle
argument_list|(
name|scrollBarElement
argument_list|,
literal|"Line down"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|lineDownElement
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|subrole
argument_list|(
name|lineDownElement
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"AXIncrementArrow"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|AXUIElementRef
name|pageUpElement
init|=
name|childByTitle
argument_list|(
name|scrollBarElement
argument_list|,
literal|"Page up"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|pageUpElement
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|subrole
argument_list|(
name|pageUpElement
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"AXDecrementPage"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|AXUIElementRef
name|pageDownElement
init|=
name|childByTitle
argument_list|(
name|scrollBarElement
argument_list|,
literal|"Page down"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|pageDownElement
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|subrole
argument_list|(
name|pageDownElement
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"AXIncrementPage"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|AXUIElementRef
name|valueIndicatorElement
init|=
name|childByTitle
argument_list|(
name|scrollBarElement
argument_list|,
literal|"Position"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|valueIndicatorElement
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|value
argument_list|(
name|valueIndicatorElement
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|50
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|testSplitter
name|void
name|tst_qaccessibility_mac
operator|::
name|testSplitter
parameter_list|()
block|{
specifier|const
name|AXUIElementRef
name|currentApplication
init|=
name|AXUIElementCreateApplication
argument_list|(
name|getpid
argument_list|()
argument_list|)
decl_stmt|;
name|testAppAndForm
argument_list|(
name|currentApplication
argument_list|)
expr_stmt|;
specifier|const
name|AXUIElementRef
name|form
init|=
name|childByTitle
argument_list|(
name|currentApplication
argument_list|,
literal|"Form"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|form
argument_list|)
expr_stmt|;
specifier|const
name|AXUIElementRef
name|splitGroupElement
init|=
name|childByRole
argument_list|(
name|form
argument_list|,
literal|"AXSplitGroup"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|splitGroupElement
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numChildren
argument_list|(
name|splitGroupElement
argument_list|)
condition|;
operator|++
name|i
control|)
name|QVERIFY
argument_list|(
name|child
argument_list|(
name|splitGroupElement
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// Visual Order: Foo splitter Bar splitter Baz
name|QList
argument_list|<
name|AXUIElementRef
argument_list|>
name|splitterList
init|=
name|elementListAttribute
argument_list|(
name|splitGroupElement
argument_list|,
name|kAXSplittersAttribute
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|splitterList
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|AXUIElementRef
name|splitter
decl|,
name|splitterList
control|)
block|{
name|QCOMPARE
argument_list|(
name|role
argument_list|(
name|splitter
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"AXSplitter"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|supportsAttribute
argument_list|(
name|splitter
argument_list|,
name|kAXPreviousContentsAttribute
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|supportsAttribute
argument_list|(
name|splitter
argument_list|,
name|kAXNextContentsAttribute
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|attribute
argument_list|(
name|splitter
argument_list|,
name|kAXOrientationAttribute
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"AXVerticalOrientation"
argument_list|)
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|AXUIElementRef
argument_list|>
name|prevList
init|=
name|elementListAttribute
argument_list|(
name|splitter
argument_list|,
name|kAXPreviousContentsAttribute
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|prevList
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|AXUIElementRef
argument_list|>
name|nextList
init|=
name|elementListAttribute
argument_list|(
name|splitter
argument_list|,
name|kAXNextContentsAttribute
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|nextList
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// verify order
if|if
condition|(
name|title
argument_list|(
name|prevList
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|==
name|QLatin1String
argument_list|(
literal|"Foo"
argument_list|)
condition|)
name|QCOMPARE
argument_list|(
name|title
argument_list|(
name|nextList
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Bar"
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|title
argument_list|(
name|prevList
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|==
name|QLatin1String
argument_list|(
literal|"Bar"
argument_list|)
condition|)
name|QCOMPARE
argument_list|(
name|title
argument_list|(
name|nextList
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Baz"
argument_list|)
argument_list|)
expr_stmt|;
else|else
block|{
name|QFAIL
argument_list|(
literal|"Splitter contents and handles are out of order"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|testTextEdit
name|void
name|tst_qaccessibility_mac
operator|::
name|testTextEdit
parameter_list|()
block|{
name|QWidget
name|window
decl_stmt|;
specifier|const
name|QString
name|windowTitle
argument_list|(
literal|"window"
argument_list|)
decl_stmt|;
name|window
operator|.
name|setWindowTitle
argument_list|(
name|windowTitle
argument_list|)
expr_stmt|;
name|window
operator|.
name|resize
argument_list|(
literal|300
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|QTextEdit
modifier|*
name|textEdit
init|=
operator|new
name|QTextEdit
argument_list|(
operator|&
name|window
argument_list|)
decl_stmt|;
name|textEdit
operator|->
name|resize
argument_list|(
literal|300
argument_list|,
literal|300
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|textLine
argument_list|(
literal|"this is a line"
argument_list|)
decl_stmt|;
name|textEdit
operator|->
name|setText
argument_list|(
name|textLine
argument_list|)
expr_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
specifier|const
name|AXUIElementRef
name|applicationElement
init|=
name|AXUIElementCreateApplication
argument_list|(
name|getpid
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|applicationElement
argument_list|)
expr_stmt|;
specifier|const
name|AXUIElementRef
name|windowElement
init|=
name|childByTitle
argument_list|(
name|applicationElement
argument_list|,
name|windowTitle
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|windowElement
argument_list|)
expr_stmt|;
specifier|const
name|AXUIElementRef
name|scrollAreaElement
init|=
name|childByRole
argument_list|(
name|windowElement
argument_list|,
literal|"AXScrollArea"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|scrollAreaElement
argument_list|)
expr_stmt|;
specifier|const
name|AXUIElementRef
name|textElement
init|=
name|childByRole
argument_list|(
name|scrollAreaElement
argument_list|,
literal|"AXTextField"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|textElement
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
argument_list|(
name|textElement
argument_list|)
operator|==
name|textLine
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testModelLessItemView
name|void
name|testModelLessItemView
parameter_list|(
name|QAbstractItemView
modifier|*
name|itemView
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|role
parameter_list|)
block|{
specifier|const
name|QString
name|windowTitle
argument_list|(
literal|"window"
argument_list|)
decl_stmt|;
name|itemView
operator|->
name|setWindowTitle
argument_list|(
name|windowTitle
argument_list|)
expr_stmt|;
name|itemView
operator|->
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
name|qt_x11_wait_for_window_manager
argument_list|(
name|w
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QAccessibleInterface
modifier|*
name|acc
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|itemView
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|acc
operator|->
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|acc
operator|->
name|childCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|acc
operator|->
name|role
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|acc
operator|->
name|rect
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|accViewport
init|=
literal|0
decl_stmt|;
name|int
name|entry
init|=
name|acc
operator|->
name|navigate
argument_list|(
name|QAccessible
operator|::
name|Child
argument_list|,
literal|1
argument_list|,
operator|&
name|accViewport
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|accViewport
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|entry
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|accViewport
operator|->
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|accViewport
operator|->
name|childCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|accViewport
operator|->
name|role
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|accViewport
operator|->
name|rect
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|acc
expr_stmt|;
operator|delete
name|accViewport
expr_stmt|;
specifier|const
name|AXUIElementRef
name|applicationElement
init|=
name|AXUIElementCreateApplication
argument_list|(
name|getpid
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|applicationElement
argument_list|)
expr_stmt|;
specifier|const
name|AXUIElementRef
name|windowElement
init|=
name|childByTitle
argument_list|(
name|applicationElement
argument_list|,
name|windowTitle
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|windowElement
argument_list|)
expr_stmt|;
specifier|const
name|AXUIElementRef
name|scrollAreaElement
init|=
name|childByRole
argument_list|(
name|windowElement
argument_list|,
literal|"AXScrollArea"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|scrollAreaElement
argument_list|)
expr_stmt|;
specifier|const
name|AXUIElementRef
name|tableElement
init|=
name|childByRole
argument_list|(
name|scrollAreaElement
argument_list|,
name|role
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|tableElement
argument_list|)
expr_stmt|;
operator|delete
name|itemView
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testItemViewsWithoutModel
name|void
name|tst_qaccessibility_mac
operator|::
name|testItemViewsWithoutModel
parameter_list|()
block|{
name|testModelLessItemView
argument_list|(
operator|new
name|QListView
argument_list|()
argument_list|,
literal|"AXList"
argument_list|)
expr_stmt|;
name|testModelLessItemView
argument_list|(
operator|new
name|QTableView
argument_list|()
argument_list|,
literal|"AXTable"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testQAElement
name|void
name|tst_qaccessibility_mac
operator|::
name|testQAElement
parameter_list|()
block|{
block|{
name|QAElement
name|element
decl_stmt|;
name|QVERIFY
argument_list|(
name|element
operator|.
name|isValid
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
block|}
block|{
name|QAElement
name|element
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|element
operator|.
name|isValid
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|char
modifier|*
modifier|*
name|argv
init|=
literal|0
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QWidget
name|w
decl_stmt|;
name|QAElement
name|element
argument_list|(
cast|reinterpret_cast
argument_list|<
name|HIObjectRef
argument_list|>
argument_list|(
name|w
operator|.
name|winId
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|element
operator|.
name|isValid
argument_list|()
operator|==
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|testQAInterface
name|void
name|tst_qaccessibility_mac
operator|::
name|testQAInterface
parameter_list|()
block|{
block|{
name|QAInterface
name|interface
decl_stmt|;
name|QVERIFY
argument_list|(
name|interface
operator|.
name|isValid
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
block|}
block|{
name|QAInterface
name|interface
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|interface
operator|.
name|isValid
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|char
modifier|*
modifier|*
name|argv
init|=
literal|0
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
block|{
name|QWidget
name|w
decl_stmt|;
name|QAInterface
name|element
argument_list|(
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
operator|&
name|w
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|element
operator|.
name|isValid
argument_list|()
operator|==
literal|true
argument_list|)
expr_stmt|;
block|}
block|{
name|QWidget
name|w
decl_stmt|;
name|QAInterface
name|element
argument_list|(
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
operator|&
name|w
argument_list|)
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|element
operator|.
name|isValid
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|uitests_data
name|void
name|tst_qaccessibility_mac
operator|::
name|uitests_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"uiFilename"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"testSlot"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"form"
argument_list|)
operator|<<
literal|"form.ui"
operator|<<
name|SLOT
argument_list|(
name|testForm
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"buttons"
argument_list|)
operator|<<
literal|"buttons.ui"
operator|<<
name|SLOT
argument_list|(
name|testButtons
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"label"
argument_list|)
operator|<<
literal|"label.ui"
operator|<<
name|SLOT
argument_list|(
name|testLabel
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"line edit"
argument_list|)
operator|<<
literal|"lineedit.ui"
operator|<<
name|SLOT
argument_list|(
name|testLineEdit
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"groups"
argument_list|)
operator|<<
literal|"groups.ui"
operator|<<
name|SLOT
argument_list|(
name|testGroups
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"tabs"
argument_list|)
operator|<<
literal|"tabs.ui"
operator|<<
name|SLOT
argument_list|(
name|testTabWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"combobox"
argument_list|)
operator|<<
literal|"combobox.ui"
operator|<<
name|SLOT
argument_list|(
name|testComboBox
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"scrollbar"
argument_list|)
operator|<<
literal|"scrollbar.ui"
operator|<<
name|SLOT
argument_list|(
name|testScrollBar
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"splitters"
argument_list|)
operator|<<
literal|"splitters.ui"
operator|<<
name|SLOT
argument_list|(
name|testSplitter
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|uitests
name|void
name|tst_qaccessibility_mac
operator|::
name|uitests
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|uiFilename
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|testSlot
argument_list|)
expr_stmt|;
comment|// The Accessibility interface must be enabled to run this test.
if|if
condition|(
operator|!
name|AXAPIEnabled
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"Accessibility not enabled. Check \"Enable access for assistive devices\" in the system preferences -> universal access to run this test."
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|char
modifier|*
modifier|*
name|argv
init|=
literal|0
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
comment|// Create and display form.
name|QUiLoader
name|loader
decl_stmt|;
name|QFile
name|file
argument_list|(
literal|":"
operator|+
name|uiFilename
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|window
init|=
name|loader
operator|.
name|load
argument_list|(
operator|&
name|file
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|window
operator|->
name|show
argument_list|()
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|50
argument_list|,
name|this
argument_list|,
name|qPrintable
argument_list|(
name|testSlot
argument_list|)
argument_list|)
expr_stmt|;
comment|// Quit when returning to the main event loop after running tests.
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|200
argument_list|,
operator|&
name|app
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|app
operator|.
name|exec
argument_list|()
expr_stmt|;
operator|delete
name|window
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tests_data
name|void
name|tst_qaccessibility_mac
operator|::
name|tests_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"testSlot"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"deleteWidget"
argument_list|)
operator|<<
name|SLOT
argument_list|(
name|testDeleteWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"deleteWidgets"
argument_list|)
operator|<<
name|SLOT
argument_list|(
name|testDeleteWidgets
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"multipleWindows"
argument_list|)
operator|<<
name|SLOT
argument_list|(
name|testMultipleWindows
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hiddenWidgets"
argument_list|)
operator|<<
name|SLOT
argument_list|(
name|testHiddenWidgets
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"actions"
argument_list|)
operator|<<
name|SLOT
argument_list|(
name|testActions
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"changeState"
argument_list|)
operator|<<
name|SLOT
argument_list|(
name|testChangeState
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"slider"
argument_list|)
operator|<<
name|SLOT
argument_list|(
name|testSlider
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"scrollArea"
argument_list|)
operator|<<
name|SLOT
argument_list|(
name|testScrollArea
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"listView"
argument_list|)
operator|<<
name|SLOT
argument_list|(
name|testListView
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"tableView"
argument_list|)
operator|<<
name|SLOT
argument_list|(
name|testTableView
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"textEdit"
argument_list|)
operator|<<
name|SLOT
argument_list|(
name|testTextEdit
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ItemViews without model"
argument_list|)
operator|<<
name|SLOT
argument_list|(
name|testItemViewsWithoutModel
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"tabbar"
argument_list|)
operator|<<
name|SLOT
argument_list|(
name|testTabBar
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tests
name|void
name|tst_qaccessibility_mac
operator|::
name|tests
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|testSlot
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|testSlot
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Tests show that querying the accessibility interface directly does not work. (I get a     kAXErrorAPIDisabled error, indicating that the accessible API is disabled, which it isn't.)     To work around this, we run the tests in a callback slot called from the main event loop. */
end_comment
begin_function
DECL|function|runTest
name|void
name|tst_qaccessibility_mac
operator|::
name|runTest
parameter_list|(
specifier|const
name|QString
modifier|&
name|testSlot
parameter_list|)
block|{
comment|// The Accessibility interface must be enabled to run this test.
if|if
condition|(
operator|!
name|AXAPIEnabled
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"Accessibility not enabled. Check \"Enable access for assistive devices\" in the system preferences -> universal access to run this test."
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|char
modifier|*
modifier|*
name|argv
init|=
literal|0
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|50
argument_list|,
name|this
argument_list|,
name|qPrintable
argument_list|(
name|testSlot
argument_list|)
argument_list|)
expr_stmt|;
comment|// Quit when returning to the main event loop after running tests.
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|200
argument_list|,
operator|&
name|app
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|app
operator|.
name|exec
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_qaccessibility_mac
argument_list|)
end_macro
begin_else
else|#
directive|else
end_else
begin_comment
comment|// defined(Q_WS_MAC)&& !defined (QT_MAC_USE_COCOA)
end_comment
begin_macro
name|QTEST_NOOP_MAIN
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"tst_qaccessibility_mac.moc"
end_include
end_unit
