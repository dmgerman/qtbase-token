begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_class
DECL|class|tst_StrCmp
class|class
name|tst_StrCmp
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|compareCharStars
parameter_list|()
specifier|const
function_decl|;
name|void
name|compareByteArray
parameter_list|()
specifier|const
function_decl|;
name|void
name|failByteArray
parameter_list|()
specifier|const
function_decl|;
name|void
name|failByteArrayNull
parameter_list|()
specifier|const
function_decl|;
name|void
name|failByteArrayEmpty
parameter_list|()
specifier|const
function_decl|;
name|void
name|failByteArraySingleChars
parameter_list|()
specifier|const
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|compareCharStars
name|void
name|tst_StrCmp
operator|::
name|compareCharStars
parameter_list|()
specifier|const
block|{
name|QCOMPARE
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
literal|"foo"
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
literal|"foo"
argument_list|)
expr_stmt|;
specifier|const
name|char
modifier|*
name|str1
init|=
literal|"foo"
decl_stmt|;
name|QCOMPARE
argument_list|(
literal|"foo"
argument_list|,
name|str1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str1
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str1
argument_list|,
name|str1
argument_list|)
expr_stmt|;
name|char
modifier|*
name|str2
init|=
literal|"foo"
decl_stmt|;
name|QCOMPARE
argument_list|(
literal|"foo"
argument_list|,
name|str2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str2
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str2
argument_list|,
name|str2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str1
argument_list|,
name|str2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str2
argument_list|,
name|str1
argument_list|)
expr_stmt|;
specifier|const
name|char
name|str3
index|[]
init|=
literal|"foo"
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|str3
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|"foo"
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|str3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|str3
argument_list|,
name|str1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|str3
argument_list|,
name|str2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str1
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|str3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str2
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|str3
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compareByteArray
name|void
name|tst_StrCmp
operator|::
name|compareByteArray
parameter_list|()
specifier|const
block|{
name|QByteArray
name|ba
init|=
literal|"foo"
decl_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"Next test should fail"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|constData
argument_list|()
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|constData
argument_list|()
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|char
modifier|*
name|bar
init|=
literal|"bar"
decl_stmt|;
name|char
modifier|*
name|foo
init|=
literal|"foo"
decl_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"Next test should fail"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|data
argument_list|()
argument_list|,
name|bar
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|data
argument_list|()
argument_list|,
name|foo
argument_list|)
expr_stmt|;
specifier|const
name|char
modifier|*
name|cbar
init|=
literal|"bar"
decl_stmt|;
specifier|const
name|char
modifier|*
name|cfoo
init|=
literal|"foo"
decl_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"Next test should fail"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|constData
argument_list|()
argument_list|,
name|cbar
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|constData
argument_list|()
argument_list|,
name|cfoo
argument_list|)
expr_stmt|;
comment|/* Create QByteArrays of the size that makes the corresponding toString() crop output. */
specifier|const
name|QByteArray
name|b
argument_list|(
literal|500
argument_list|,
literal|'A'
argument_list|)
decl_stmt|;
specifier|const
name|QByteArray
name|a
argument_list|(
literal|500
argument_list|,
literal|'B'
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|failByteArray
name|void
name|tst_StrCmp
operator|::
name|failByteArray
parameter_list|()
specifier|const
block|{
comment|/* Compare small, different byte arrays. */
name|QCOMPARE
argument_list|(
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"cba"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|failByteArrayNull
name|void
name|tst_StrCmp
operator|::
name|failByteArrayNull
parameter_list|()
specifier|const
block|{
comment|/* Compare null byte array against with content. */
name|QCOMPARE
argument_list|(
name|QByteArray
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|failByteArrayEmpty
name|void
name|tst_StrCmp
operator|::
name|failByteArrayEmpty
parameter_list|()
specifier|const
block|{
name|QCOMPARE
argument_list|(
name|QByteArray
argument_list|(
literal|""
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|failByteArraySingleChars
name|void
name|tst_StrCmp
operator|::
name|failByteArraySingleChars
parameter_list|()
specifier|const
block|{
comment|/* Compare null byte array against with content. */
comment|//QCOMPARE(QString(250, 'a'), QString(250, 'b'));
name|QCOMPARE
argument_list|(
name|QByteArray
argument_list|(
literal|"6"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_StrCmp
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_strcmp.moc"
end_include
end_unit
