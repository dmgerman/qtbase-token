begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest>
end_include
begin_include
include|#
directive|include
file|<QtDBus>
end_include
begin_include
include|#
directive|include
file|<QtCore/QVarLengthArray>
end_include
begin_include
include|#
directive|include
file|<QtCore/QThread>
end_include
begin_include
include|#
directive|include
file|<QtCore/QObject>
end_include
begin_include
include|#
directive|include
file|<QtCore/QSemaphore>
end_include
begin_include
include|#
directive|include
file|<QtCore/QMutex>
end_include
begin_include
include|#
directive|include
file|<QtCore/QWaitCondition>
end_include
begin_include
include|#
directive|include
file|<QtCore/QMap>
end_include
begin_class
DECL|class|Thread
class|class
name|Thread
super|:
specifier|public
name|QThread
block|{
name|Q_OBJECT
DECL|member|counter
specifier|static
name|int
name|counter
decl_stmt|;
public|public:
name|Thread
parameter_list|(
name|bool
name|automatic
init|=
literal|true
parameter_list|)
constructor_decl|;
name|void
name|run
parameter_list|()
function_decl|;
using|using
name|QThread
operator|::
name|exec
using|;
block|}
class|;
end_class
begin_decl_stmt
DECL|member|counter
name|int
name|Thread
operator|::
name|counter
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|tst_QDBusThreading
class|class
name|tst_QDBusThreading
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
DECL|member|_self
specifier|static
name|tst_QDBusThreading
modifier|*
name|_self
decl_stmt|;
DECL|member|threadJoinCount
name|QAtomicInt
name|threadJoinCount
decl_stmt|;
DECL|member|threadJoin
name|QSemaphore
name|threadJoin
decl_stmt|;
public|public:
DECL|member|sem1
DECL|member|sem2
name|QSemaphore
name|sem1
decl_stmt|,
name|sem2
decl_stmt|;
DECL|member|success
specifier|volatile
name|bool
name|success
decl_stmt|;
DECL|member|loop
name|QEventLoop
modifier|*
name|loop
decl_stmt|;
DECL|enum|FunctionSpy
enum|enum
name|FunctionSpy
block|{
DECL|enumerator|NoMethod
name|NoMethod
init|=
literal|0
block|,
DECL|enumerator|Adaptor_method
name|Adaptor_method
block|,
DECL|enumerator|Object_method
name|Object_method
block|}
DECL|member|functionSpy
name|functionSpy
enum|;
DECL|member|threadSpy
name|QThread
modifier|*
name|threadSpy
decl_stmt|;
DECL|member|signalSpy
name|int
name|signalSpy
decl_stmt|;
name|tst_QDBusThreading
parameter_list|()
constructor_decl|;
DECL|function|self
specifier|static
specifier|inline
name|tst_QDBusThreading
modifier|*
name|self
parameter_list|()
block|{
return|return
name|_self
return|;
block|}
name|void
name|joinThreads
parameter_list|()
function_decl|;
name|bool
name|waitForSignal
parameter_list|(
name|QObject
modifier|*
name|obj
parameter_list|,
specifier|const
name|char
modifier|*
name|signal
parameter_list|,
name|int
name|delay
init|=
literal|1
parameter_list|)
function_decl|;
public|public
name|Q_SLOTS
public|:
name|void
name|cleanup
parameter_list|()
function_decl|;
DECL|function|signalSpySlot
name|void
name|signalSpySlot
parameter_list|()
block|{
operator|++
name|signalSpy
expr_stmt|;
block|}
DECL|function|threadStarted
name|void
name|threadStarted
parameter_list|()
block|{
name|threadJoinCount
operator|.
name|ref
argument_list|()
expr_stmt|;
block|}
DECL|function|threadFinished
name|void
name|threadFinished
parameter_list|()
block|{
name|threadJoin
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
name|void
name|dyingThread_thread
parameter_list|()
function_decl|;
name|void
name|lastInstanceInOtherThread_thread
parameter_list|()
function_decl|;
name|void
name|concurrentCreation_thread
parameter_list|()
function_decl|;
name|void
name|disconnectAnothersConnection_thread
parameter_list|()
function_decl|;
name|void
name|accessMainsConnection_thread
parameter_list|()
function_decl|;
name|void
name|accessOthersConnection_thread
parameter_list|()
function_decl|;
name|void
name|registerObjectInOtherThread_thread
parameter_list|()
function_decl|;
name|void
name|registerAdaptorInOtherThread_thread
parameter_list|()
function_decl|;
name|void
name|callbackInMainThread_thread
parameter_list|()
function_decl|;
name|void
name|callbackInAuxThread_thread
parameter_list|()
function_decl|;
name|void
name|callbackInAnotherAuxThread_thread
parameter_list|()
function_decl|;
private|private
name|Q_SLOTS
private|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|dyingThread
parameter_list|()
function_decl|;
name|void
name|lastInstanceInOtherThread
parameter_list|()
function_decl|;
name|void
name|concurrentCreation
parameter_list|()
function_decl|;
name|void
name|disconnectAnothersConnection
parameter_list|()
function_decl|;
name|void
name|accessMainsConnection
parameter_list|()
function_decl|;
name|void
name|accessOthersConnection
parameter_list|()
function_decl|;
name|void
name|registerObjectInOtherThread
parameter_list|()
function_decl|;
name|void
name|registerAdaptorInOtherThread
parameter_list|()
function_decl|;
name|void
name|callbackInMainThread
parameter_list|()
function_decl|;
name|void
name|callbackInAuxThread
parameter_list|()
function_decl|;
name|void
name|callbackInAnotherAuxThread
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|member|_self
name|tst_QDBusThreading
modifier|*
name|tst_QDBusThreading
operator|::
name|_self
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|Adaptor
class|class
name|Adaptor
super|:
specifier|public
name|QDBusAbstractAdaptor
block|{
name|Q_OBJECT
name|Q_CLASSINFO
argument_list|(
literal|"D-Bus Interface"
argument_list|,
literal|"local.Adaptor"
argument_list|)
decl|public
range|:
DECL|function|Adaptor
name|Adaptor
argument_list|(
name|QObject
operator|*
name|parent
argument_list|)
operator|:
name|QDBusAbstractAdaptor
argument_list|(
argument|parent
argument_list|)
block|{     }
specifier|public
name|Q_SLOTS
operator|:
DECL|function|method
name|void
name|method
argument_list|()
block|{
name|tst_QDBusThreading
operator|::
name|self
argument_list|()
operator|->
name|functionSpy
operator|=
name|tst_QDBusThreading
operator|::
name|Adaptor_method
block|;
name|tst_QDBusThreading
operator|::
name|self
argument_list|()
operator|->
name|threadSpy
operator|=
name|QThread
operator|::
name|currentThread
argument_list|()
block|;
emit|emit
name|signal
argument_list|()
emit|;
block|}
name|Q_SIGNALS
label|:
name|void
name|signal
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_class
DECL|class|Object
class|class
name|Object
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
name|Q_CLASSINFO
argument_list|(
literal|"D-Bus Interface"
argument_list|,
literal|"local.Object"
argument_list|)
decl|public
range|:
DECL|function|Object
name|Object
argument_list|(
argument|bool useAdaptor
argument_list|)
block|{
if|if
condition|(
name|useAdaptor
condition|)
operator|new
name|Adaptor
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|~Object
name|~
name|Object
parameter_list|()
block|{
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|QThread
operator|::
name|currentThread
argument_list|()
argument_list|,
literal|"quit"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
block|}
public|public
name|Q_SLOTS
public|:
DECL|function|method
name|void
name|method
parameter_list|()
block|{
name|tst_QDBusThreading
operator|::
name|self
argument_list|()
operator|->
name|functionSpy
operator|=
name|tst_QDBusThreading
operator|::
name|Object_method
expr_stmt|;
name|tst_QDBusThreading
operator|::
name|self
argument_list|()
operator|->
name|threadSpy
operator|=
name|QThread
operator|::
name|currentThread
argument_list|()
expr_stmt|;
emit|emit
name|signal
argument_list|()
emit|;
name|deleteLater
argument_list|()
expr_stmt|;
block|}
name|Q_SIGNALS
label|:
name|void
name|signal
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_if
if|#
directive|if
literal|0
end_if
begin_endif
unit|typedef void (*qdbusThreadDebugFunc)(int, int, QDBusConnectionPrivate *); QDBUS_EXPORT void qdbusDefaultThreadDebug(int, int, QDBusConnectionPrivate *); extern QDBUS_EXPORT qdbusThreadDebugFunc qdbusThreadDebug;  static void threadDebug(int action, int condition, QDBusConnectionPrivate *p) {     qdbusDefaultThreadDebug(action, condition, p); }
endif|#
directive|endif
end_endif
begin_constructor
DECL|function|Thread
name|Thread
operator|::
name|Thread
parameter_list|(
name|bool
name|automatic
parameter_list|)
block|{
name|setObjectName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Aux thread %1"
argument_list|)
operator|.
name|arg
argument_list|(
operator|++
name|counter
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|started
argument_list|()
argument_list|)
argument_list|,
name|tst_QDBusThreading
operator|::
name|self
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|threadStarted
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
name|tst_QDBusThreading
operator|::
name|self
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|threadFinished
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|deleteLater
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
if|if
condition|(
name|automatic
condition|)
name|start
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|run
name|void
name|Thread
operator|::
name|run
parameter_list|()
block|{
name|QVarLengthArray
argument_list|<
name|char
argument_list|,
literal|56
argument_list|>
name|name
decl_stmt|;
name|name
operator|.
name|append
argument_list|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
argument_list|,
name|qstrlen
argument_list|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|name
operator|.
name|append
argument_list|(
literal|"_thread"
argument_list|,
sizeof|sizeof
expr|"_thread"
argument_list|)
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|tst_QDBusThreading
operator|::
name|self
argument_list|()
argument_list|,
name|name
operator|.
name|constData
argument_list|()
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|myConnectionName
specifier|static
specifier|const
name|char
name|myConnectionName
index|[]
init|=
literal|"connection"
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|tst_QDBusThreading
name|tst_QDBusThreading
operator|::
name|tst_QDBusThreading
parameter_list|()
member_init_list|:
name|loop
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|functionSpy
argument_list|(
name|NoMethod
argument_list|)
member_init_list|,
name|threadSpy
argument_list|(
literal|0
argument_list|)
block|{
name|_self
operator|=
name|this
expr_stmt|;
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|thread
argument_list|()
operator|->
name|setObjectName
argument_list|(
literal|"Main thread"
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|joinThreads
name|void
name|tst_QDBusThreading
operator|::
name|joinThreads
parameter_list|()
block|{
name|threadJoin
operator|.
name|acquire
argument_list|(
name|threadJoinCount
argument_list|)
expr_stmt|;
name|threadJoinCount
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|waitForSignal
name|bool
name|tst_QDBusThreading
operator|::
name|waitForSignal
parameter_list|(
name|QObject
modifier|*
name|obj
parameter_list|,
specifier|const
name|char
modifier|*
name|signal
parameter_list|,
name|int
name|delay
parameter_list|)
block|{
name|QObject
operator|::
name|connect
argument_list|(
name|obj
argument_list|,
name|signal
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QPointer
argument_list|<
name|QObject
argument_list|>
name|safe
init|=
name|obj
decl_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
name|delay
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|safe
operator|.
name|isNull
argument_list|()
condition|)
name|QObject
operator|::
name|disconnect
argument_list|(
name|safe
argument_list|,
name|signal
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QDBusThreading
operator|::
name|cleanup
parameter_list|()
block|{
name|joinThreads
argument_list|()
expr_stmt|;
if|if
condition|(
name|sem1
operator|.
name|available
argument_list|()
condition|)
name|sem1
operator|.
name|acquire
argument_list|(
name|sem1
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sem2
operator|.
name|available
argument_list|()
condition|)
name|sem2
operator|.
name|acquire
argument_list|(
name|sem2
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|QDBusConnection
argument_list|(
name|myConnectionName
argument_list|)
operator|.
name|isConnected
argument_list|()
condition|)
name|QDBusConnection
operator|::
name|disconnectFromBus
argument_list|(
name|myConnectionName
argument_list|)
expr_stmt|;
operator|delete
name|loop
expr_stmt|;
name|loop
operator|=
literal|0
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initTestCase
name|void
name|tst_QDBusThreading
operator|::
name|initTestCase
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|dyingThread_thread
name|void
name|tst_QDBusThreading
operator|::
name|dyingThread_thread
parameter_list|()
block|{
name|QDBusConnection
operator|::
name|connectToBus
argument_list|(
name|QDBusConnection
operator|::
name|SessionBus
argument_list|,
name|myConnectionName
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dyingThread
name|void
name|tst_QDBusThreading
operator|::
name|dyingThread
parameter_list|()
block|{
name|Thread
modifier|*
name|th
init|=
operator|new
name|Thread
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|connect
argument_list|(
name|th
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|(
name|QObject
operator|*
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|th
operator|->
name|start
argument_list|()
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QDBusConnection
name|con
argument_list|(
name|myConnectionName
argument_list|)
decl_stmt|;
name|QDBusConnection
operator|::
name|disconnectFromBus
argument_list|(
name|myConnectionName
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|QDBusReply
argument_list|<
name|QStringList
argument_list|>
name|reply
init|=
name|con
operator|.
name|interface
argument_list|()
operator|->
name|registeredServiceNames
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|reply
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|reply
operator|.
name|value
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|reply
operator|.
name|value
argument_list|()
operator|.
name|contains
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|interface
argument_list|()
operator|->
name|callWithCallback
argument_list|(
literal|"ListNames"
argument_list|,
name|QVariantList
argument_list|()
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lastInstanceInOtherThread_thread
name|void
name|tst_QDBusThreading
operator|::
name|lastInstanceInOtherThread_thread
parameter_list|()
block|{
name|QDBusConnection
name|con
argument_list|(
name|myConnectionName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|QDBusConnection
operator|::
name|disconnectFromBus
argument_list|(
name|myConnectionName
argument_list|)
expr_stmt|;
comment|// con is being destroyed in the wrong thread
block|}
end_function
begin_function
DECL|function|lastInstanceInOtherThread
name|void
name|tst_QDBusThreading
operator|::
name|lastInstanceInOtherThread
parameter_list|()
block|{
name|Thread
modifier|*
name|th
init|=
operator|new
name|Thread
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// create the connection:
name|QDBusConnection
operator|::
name|connectToBus
argument_list|(
name|QDBusConnection
operator|::
name|SessionBus
argument_list|,
name|myConnectionName
argument_list|)
expr_stmt|;
name|th
operator|->
name|start
argument_list|()
expr_stmt|;
name|th
operator|->
name|wait
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|concurrentCreation_thread
name|void
name|tst_QDBusThreading
operator|::
name|concurrentCreation_thread
parameter_list|()
block|{
name|sem1
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|connectToBus
argument_list|(
name|QDBusConnection
operator|::
name|SessionBus
argument_list|,
name|myConnectionName
argument_list|)
decl_stmt|;
name|sem2
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|concurrentCreation
name|void
name|tst_QDBusThreading
operator|::
name|concurrentCreation
parameter_list|()
block|{
name|Thread
modifier|*
name|th
init|=
operator|new
name|Thread
decl_stmt|;
block|{
name|sem1
operator|.
name|release
argument_list|()
expr_stmt|;
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|connectToBus
argument_list|(
name|QDBusConnection
operator|::
name|SessionBus
argument_list|,
name|myConnectionName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|sem2
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
name|waitForSignal
argument_list|(
name|th
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QDBusConnection
operator|::
name|disconnectFromBus
argument_list|(
name|myConnectionName
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QDBusConnection
argument_list|(
name|myConnectionName
argument_list|)
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|disconnectAnothersConnection_thread
name|void
name|tst_QDBusThreading
operator|::
name|disconnectAnothersConnection_thread
parameter_list|()
block|{
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|connectToBus
argument_list|(
name|QDBusConnection
operator|::
name|SessionBus
argument_list|,
name|myConnectionName
argument_list|)
decl_stmt|;
name|sem2
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|disconnectAnothersConnection
name|void
name|tst_QDBusThreading
operator|::
name|disconnectAnothersConnection
parameter_list|()
block|{
operator|new
name|Thread
expr_stmt|;
name|sem2
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QDBusConnection
argument_list|(
name|myConnectionName
argument_list|)
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|QDBusConnection
operator|::
name|disconnectFromBus
argument_list|(
name|myConnectionName
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|accessMainsConnection_thread
name|void
name|tst_QDBusThreading
operator|::
name|accessMainsConnection_thread
parameter_list|()
block|{
name|sem1
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|con
operator|.
name|interface
argument_list|()
operator|->
name|registeredServiceNames
argument_list|()
expr_stmt|;
name|sem2
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|accessMainsConnection
name|void
name|tst_QDBusThreading
operator|::
name|accessMainsConnection
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
operator|new
name|Thread
expr_stmt|;
name|sem1
operator|.
name|release
argument_list|()
expr_stmt|;
name|sem2
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
end_function
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_function
DECL|function|accessOthersConnection_thread
name|void
name|tst_QDBusThreading
operator|::
name|accessOthersConnection_thread
parameter_list|()
block|{
name|QDBusConnection
operator|::
name|connectToBus
argument_list|(
name|QDBusConnection
operator|::
name|SessionBus
argument_list|,
name|myConnectionName
argument_list|)
expr_stmt|;
name|sem2
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// wait for main thread to be done
name|sem1
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|QDBusConnection
operator|::
name|disconnectFromBus
argument_list|(
name|myConnectionName
argument_list|)
expr_stmt|;
name|sem2
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|accessOthersConnection
name|void
name|tst_QDBusThreading
operator|::
name|accessOthersConnection
parameter_list|()
block|{
operator|new
name|Thread
expr_stmt|;
comment|// wait for the connection to be created
name|sem2
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|{
name|QDBusConnection
name|con
argument_list|(
name|myConnectionName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
operator|!=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|baseService
argument_list|()
argument_list|)
expr_stmt|;
name|QDBusReply
argument_list|<
name|QStringList
argument_list|>
name|reply
init|=
name|con
operator|.
name|interface
argument_list|()
operator|->
name|registeredServiceNames
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|reply
operator|.
name|isValid
argument_list|()
condition|)
name|qDebug
argument_list|()
operator|<<
name|reply
operator|.
name|error
argument_list|()
operator|.
name|name
argument_list|()
operator|<<
name|reply
operator|.
name|error
argument_list|()
operator|.
name|message
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|reply
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|reply
operator|.
name|value
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|reply
operator|.
name|value
argument_list|()
operator|.
name|contains
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|reply
operator|.
name|value
argument_list|()
operator|.
name|contains
argument_list|(
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|baseService
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// tell it to destroy:
name|sem1
operator|.
name|release
argument_list|()
expr_stmt|;
name|sem2
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|QDBusConnection
name|con
argument_list|(
name|myConnectionName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|registerObjectInOtherThread_thread
name|void
name|tst_QDBusThreading
operator|::
name|registerObjectInOtherThread_thread
parameter_list|()
block|{
block|{
name|Object
modifier|*
name|obj
init|=
operator|new
name|Object
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|registerObject
argument_list|(
literal|"/"
argument_list|,
name|obj
argument_list|,
name|QDBusConnection
operator|::
name|ExportAllSlots
operator||
name|QDBusConnection
operator|::
name|ExportAllSignals
argument_list|)
expr_stmt|;
name|sem2
operator|.
name|release
argument_list|()
expr_stmt|;
cast|static_cast
argument_list|<
name|Thread
operator|*
argument_list|>
argument_list|(
name|QThread
operator|::
name|currentThread
argument_list|()
argument_list|)
operator|->
name|exec
argument_list|()
expr_stmt|;
block|}
name|sem2
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|registerObjectInOtherThread
name|void
name|tst_QDBusThreading
operator|::
name|registerObjectInOtherThread
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|QThread
modifier|*
name|th
init|=
operator|new
name|Thread
decl_stmt|;
name|sem2
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|signalSpy
operator|=
literal|0
expr_stmt|;
name|QDBusInterface
name|iface
argument_list|(
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.Object"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|iface
argument_list|,
name|SIGNAL
argument_list|(
name|signal
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|signalSpySlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|signalSpy
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|functionSpy
operator|=
name|NoMethod
expr_stmt|;
name|threadSpy
operator|=
literal|0
expr_stmt|;
name|QDBusReply
argument_list|<
name|void
argument_list|>
name|reply
init|=
name|iface
operator|.
name|call
argument_list|(
literal|"method"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|reply
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|functionSpy
argument_list|,
name|Object_method
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|threadSpy
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|signalSpy
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|sem2
operator|.
name|acquire
argument_list|()
expr_stmt|;
comment|// the object is gone
name|functionSpy
operator|=
name|NoMethod
expr_stmt|;
name|threadSpy
operator|=
literal|0
expr_stmt|;
name|reply
operator|=
name|iface
operator|.
name|call
argument_list|(
literal|"method"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|reply
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|functionSpy
argument_list|,
name|NoMethod
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|threadSpy
argument_list|,
operator|(
name|QThread
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|registerAdaptorInOtherThread_thread
name|void
name|tst_QDBusThreading
operator|::
name|registerAdaptorInOtherThread_thread
parameter_list|()
block|{
block|{
name|Object
modifier|*
name|obj
init|=
operator|new
name|Object
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|registerObject
argument_list|(
literal|"/"
argument_list|,
name|obj
argument_list|,
name|QDBusConnection
operator|::
name|ExportAdaptors
operator||
name|QDBusConnection
operator|::
name|ExportAllSlots
operator||
name|QDBusConnection
operator|::
name|ExportAllSignals
argument_list|)
expr_stmt|;
name|sem2
operator|.
name|release
argument_list|()
expr_stmt|;
cast|static_cast
argument_list|<
name|Thread
operator|*
argument_list|>
argument_list|(
name|QThread
operator|::
name|currentThread
argument_list|()
argument_list|)
operator|->
name|exec
argument_list|()
expr_stmt|;
block|}
name|sem2
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|registerAdaptorInOtherThread
name|void
name|tst_QDBusThreading
operator|::
name|registerAdaptorInOtherThread
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|QThread
modifier|*
name|th
init|=
operator|new
name|Thread
decl_stmt|;
name|sem2
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|QDBusInterface
name|object
argument_list|(
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.Object"
argument_list|)
decl_stmt|;
name|QDBusInterface
name|adaptor
argument_list|(
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.Adaptor"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|object
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|adaptor
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|signalSpy
operator|=
literal|0
expr_stmt|;
name|connect
argument_list|(
operator|&
name|adaptor
argument_list|,
name|SIGNAL
argument_list|(
name|signal
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|signalSpySlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|signalSpy
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|functionSpy
operator|=
name|NoMethod
expr_stmt|;
name|threadSpy
operator|=
literal|0
expr_stmt|;
name|QDBusReply
argument_list|<
name|void
argument_list|>
name|reply
init|=
name|adaptor
operator|.
name|call
argument_list|(
literal|"method"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|reply
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|functionSpy
argument_list|,
name|Adaptor_method
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|threadSpy
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|signalSpy
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|functionSpy
operator|=
name|NoMethod
expr_stmt|;
name|threadSpy
operator|=
literal|0
expr_stmt|;
name|reply
operator|=
name|object
operator|.
name|call
argument_list|(
literal|"method"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|reply
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|functionSpy
argument_list|,
name|Object_method
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|threadSpy
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|signalSpy
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|sem2
operator|.
name|acquire
argument_list|()
expr_stmt|;
comment|// the object is gone
name|functionSpy
operator|=
name|NoMethod
expr_stmt|;
name|threadSpy
operator|=
literal|0
expr_stmt|;
name|reply
operator|=
name|adaptor
operator|.
name|call
argument_list|(
literal|"method"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|reply
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|functionSpy
argument_list|,
name|NoMethod
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|threadSpy
argument_list|,
operator|(
name|QThread
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|reply
operator|=
name|object
operator|.
name|call
argument_list|(
literal|"method"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|reply
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|functionSpy
argument_list|,
name|NoMethod
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|threadSpy
argument_list|,
operator|(
name|QThread
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|callbackInMainThread_thread
name|void
name|tst_QDBusThreading
operator|::
name|callbackInMainThread_thread
parameter_list|()
block|{
name|QDBusConnection
operator|::
name|connectToBus
argument_list|(
name|QDBusConnection
operator|::
name|SessionBus
argument_list|,
name|myConnectionName
argument_list|)
expr_stmt|;
name|sem2
operator|.
name|release
argument_list|()
expr_stmt|;
cast|static_cast
argument_list|<
name|Thread
operator|*
argument_list|>
argument_list|(
name|QThread
operator|::
name|currentThread
argument_list|()
argument_list|)
operator|->
name|exec
argument_list|()
expr_stmt|;
name|QDBusConnection
operator|::
name|disconnectFromBus
argument_list|(
name|myConnectionName
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|callbackInMainThread
name|void
name|tst_QDBusThreading
operator|::
name|callbackInMainThread
parameter_list|()
block|{
name|Thread
modifier|*
name|th
init|=
operator|new
name|Thread
decl_stmt|;
comment|// wait for it to be connected
name|sem2
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|QDBusConnection
name|con
argument_list|(
name|myConnectionName
argument_list|)
decl_stmt|;
name|con
operator|.
name|interface
argument_list|()
operator|->
name|callWithCallback
argument_list|(
literal|"ListNames"
argument_list|,
name|QVariantList
argument_list|()
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|th
argument_list|,
literal|"quit"
argument_list|)
expr_stmt|;
name|waitForSignal
argument_list|(
name|th
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|callbackInAuxThread_thread
name|void
name|tst_QDBusThreading
operator|::
name|callbackInAuxThread_thread
parameter_list|()
block|{
name|QDBusConnection
name|con
argument_list|(
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
argument_list|)
decl_stmt|;
name|QTestEventLoop
name|ownLoop
decl_stmt|;
name|con
operator|.
name|interface
argument_list|()
operator|->
name|callWithCallback
argument_list|(
literal|"ListNames"
argument_list|,
name|QVariantList
argument_list|()
argument_list|,
operator|&
name|ownLoop
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ownLoop
operator|.
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|loop
operator|->
name|exit
argument_list|(
name|ownLoop
operator|.
name|timeout
argument_list|()
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|callbackInAuxThread
name|void
name|tst_QDBusThreading
operator|::
name|callbackInAuxThread
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|loop
operator|=
operator|new
name|QEventLoop
expr_stmt|;
operator|new
name|Thread
expr_stmt|;
name|QCOMPARE
argument_list|(
name|loop
operator|->
name|exec
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|callbackInAnotherAuxThread_thread
name|void
name|tst_QDBusThreading
operator|::
name|callbackInAnotherAuxThread_thread
parameter_list|()
block|{
name|sem1
operator|.
name|acquire
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|loop
condition|)
block|{
comment|// first thread
comment|// create the connection and just wait
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|connectToBus
argument_list|(
name|QDBusConnection
operator|::
name|SessionBus
argument_list|,
name|myConnectionName
argument_list|)
decl_stmt|;
name|loop
operator|=
operator|new
name|QEventLoop
expr_stmt|;
comment|// tell the main thread we have created the loop and connection
name|sem2
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// wait for the main thread to connect its signal
name|sem1
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|success
operator|=
name|loop
operator|->
name|exec
argument_list|()
operator|==
literal|0
expr_stmt|;
name|sem2
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// clean up
name|QDBusConnection
operator|::
name|disconnectFromBus
argument_list|(
name|myConnectionName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// second thread
comment|// try waiting for a message
name|QDBusConnection
name|con
argument_list|(
name|myConnectionName
argument_list|)
decl_stmt|;
name|QTestEventLoop
name|ownLoop
decl_stmt|;
name|con
operator|.
name|interface
argument_list|()
operator|->
name|callWithCallback
argument_list|(
literal|"ListNames"
argument_list|,
name|QVariantList
argument_list|()
argument_list|,
operator|&
name|ownLoop
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ownLoop
operator|.
name|enterLoop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|loop
operator|->
name|exit
argument_list|(
name|ownLoop
operator|.
name|timeout
argument_list|()
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|callbackInAnotherAuxThread
name|void
name|tst_QDBusThreading
operator|::
name|callbackInAnotherAuxThread
parameter_list|()
block|{
comment|// create first thread
name|success
operator|=
literal|false
expr_stmt|;
operator|new
name|Thread
expr_stmt|;
comment|// wait for the event loop
name|sem1
operator|.
name|release
argument_list|()
expr_stmt|;
name|sem2
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|loop
argument_list|)
expr_stmt|;
comment|// create the second thread
operator|new
name|Thread
expr_stmt|;
name|sem1
operator|.
name|release
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// wait for loop thread to finish executing:
name|sem2
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|success
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Next tests:
end_comment
begin_comment
comment|// - unexport an object at the moment the call is being delivered
end_comment
begin_comment
comment|// - delete an object at the moment the call is being delivered
end_comment
begin_comment
comment|// - keep a global-static QDBusConnection for a thread-created connection
end_comment
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QDBusThreading
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qdbusthreading.moc"
end_include
end_unit
