begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_include
include|#
directive|include
file|"../../../src/widgets/dialogs/qfilesystemmodel_p.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QFileSystemModel>
end_include
begin_include
include|#
directive|include
file|<QFileIconProvider>
end_include
begin_include
include|#
directive|include
file|<QTreeView>
end_include
begin_include
include|#
directive|include
file|<QHeaderView>
end_include
begin_include
include|#
directive|include
file|"../../shared/util.h"
end_include
begin_include
include|#
directive|include
file|<QTime>
end_include
begin_include
include|#
directive|include
file|<QStyle>
end_include
begin_include
include|#
directive|include
file|<QtGlobal>
end_include
begin_comment
comment|//TESTED_CLASS=
end_comment
begin_comment
comment|//TESTED_FILES=
end_comment
begin_define
DECL|macro|WAITTIME
define|#
directive|define
name|WAITTIME
value|1000
end_define
begin_comment
comment|// Will try to wait for the condition while allowing event processing
end_comment
begin_comment
comment|// for a maximum of 5 seconds.
end_comment
begin_define
DECL|macro|TRY_WAIT
define|#
directive|define
name|TRY_WAIT
parameter_list|(
name|expr
parameter_list|)
define|\
value|do { \         const int step = 50; \         for (int __i = 0; __i< 5000&& !(expr); __i+=step) { \             QTest::qWait(step); \         } \     } while(0)
end_define
begin_class
DECL|class|tst_QFileSystemModel
class|class
name|tst_QFileSystemModel
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QFileSystemModel
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QFileSystemModel
parameter_list|()
destructor_decl|;
public|public
name|Q_SLOTS
public|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|indexPath
parameter_list|()
function_decl|;
name|void
name|rootPath
parameter_list|()
function_decl|;
name|void
name|naturalCompare_data
parameter_list|()
function_decl|;
name|void
name|naturalCompare
parameter_list|()
function_decl|;
name|void
name|readOnly
parameter_list|()
function_decl|;
name|void
name|iconProvider
parameter_list|()
function_decl|;
name|void
name|rowCount
parameter_list|()
function_decl|;
name|void
name|rowsInserted_data
parameter_list|()
function_decl|;
name|void
name|rowsInserted
parameter_list|()
function_decl|;
name|void
name|rowsRemoved_data
parameter_list|()
function_decl|;
name|void
name|rowsRemoved
parameter_list|()
function_decl|;
name|void
name|dataChanged_data
parameter_list|()
function_decl|;
name|void
name|dataChanged
parameter_list|()
function_decl|;
name|void
name|filters_data
parameter_list|()
function_decl|;
name|void
name|filters
parameter_list|()
function_decl|;
name|void
name|nameFilters
parameter_list|()
function_decl|;
name|void
name|setData_data
parameter_list|()
function_decl|;
name|void
name|setData
parameter_list|()
function_decl|;
name|void
name|sort_data
parameter_list|()
function_decl|;
name|void
name|sort
parameter_list|()
function_decl|;
name|void
name|mkdir
parameter_list|()
function_decl|;
name|void
name|caseSensitivity
parameter_list|()
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|void
name|Win32LongFileName
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|drives_data
parameter_list|()
function_decl|;
name|void
name|drives
parameter_list|()
function_decl|;
name|void
name|dirsBeforeFiles
parameter_list|()
function_decl|;
name|void
name|roleNames_data
parameter_list|()
function_decl|;
name|void
name|roleNames
parameter_list|()
function_decl|;
protected|protected:
name|bool
name|createFiles
parameter_list|(
specifier|const
name|QString
modifier|&
name|test_path
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|initial_files
parameter_list|,
name|int
name|existingFileCount
init|=
literal|0
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|intial_dirs
init|=
name|QStringList
argument_list|()
parameter_list|,
specifier|const
name|QString
modifier|&
name|baseDir
init|=
name|QDir
operator|::
name|temp
argument_list|()
operator|.
name|absolutePath
argument_list|()
parameter_list|)
function_decl|;
private|private:
DECL|member|model
name|QFileSystemModel
modifier|*
name|model
decl_stmt|;
DECL|member|flatDirTestPath
name|QString
name|flatDirTestPath
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QFileSystemModel
name|tst_QFileSystemModel
operator|::
name|tst_QFileSystemModel
parameter_list|()
member_init_list|:
name|model
argument_list|(
literal|0
argument_list|)
block|{
name|qRegisterMetaType
argument_list|<
name|QModelIndex
argument_list|>
argument_list|(
literal|"QModelIndex"
argument_list|)
expr_stmt|;
name|QTime
name|midnight
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|qsrand
argument_list|(
name|midnight
operator|.
name|secsTo
argument_list|(
name|QTime
operator|::
name|currentTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// generating unique temporary directory name
name|flatDirTestPath
operator|=
name|QDir
operator|::
name|temp
argument_list|()
operator|.
name|path
argument_list|()
operator|+
literal|'/'
operator|+
name|QString
argument_list|(
literal|"flatdirtest."
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|qrand
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~tst_QFileSystemModel
name|tst_QFileSystemModel
operator|::
name|~
name|tst_QFileSystemModel
parameter_list|()
block|{
name|QString
name|tmp
init|=
name|flatDirTestPath
decl_stmt|;
name|QDir
name|dir
argument_list|(
name|tmp
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|dir
operator|.
name|rmdir
argument_list|(
name|tmp
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"failed to remove tmp dir %s"
argument_list|,
name|dir
operator|.
name|dirName
argument_list|()
operator|.
name|toAscii
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|init
name|void
name|tst_QFileSystemModel
operator|::
name|init
parameter_list|()
block|{
name|cleanup
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
argument_list|,
operator|(
name|QFileSystemModel
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|model
operator|=
operator|new
name|QFileSystemModel
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QFileSystemModel
operator|::
name|cleanup
parameter_list|()
block|{
operator|delete
name|model
expr_stmt|;
name|model
operator|=
literal|0
expr_stmt|;
name|QString
name|tmp
init|=
name|flatDirTestPath
decl_stmt|;
name|QDir
name|dir
argument_list|(
name|tmp
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|exists
argument_list|(
name|tmp
argument_list|)
condition|)
block|{
name|QStringList
name|list
init|=
name|dir
operator|.
name|entryList
argument_list|(
name|QDir
operator|::
name|AllEntries
operator||
name|QDir
operator|::
name|System
operator||
name|QDir
operator|::
name|Hidden
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QFileInfo
name|fi
argument_list|(
name|dir
operator|.
name|path
argument_list|()
operator|+
literal|'/'
operator|+
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|.
name|exists
argument_list|()
operator|&&
name|fi
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|QFile
name|p
argument_list|(
name|fi
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
decl_stmt|;
name|p
operator|.
name|setPermissions
argument_list|(
name|QFile
operator|::
name|ReadUser
operator||
name|QFile
operator|::
name|ReadOwner
operator||
name|QFile
operator|::
name|ExeOwner
operator||
name|QFile
operator|::
name|ExeUser
operator||
name|QFile
operator|::
name|WriteUser
operator||
name|QFile
operator|::
name|WriteOwner
operator||
name|QFile
operator|::
name|WriteOther
argument_list|)
expr_stmt|;
name|QFile
name|dead
argument_list|(
name|dir
operator|.
name|path
argument_list|()
operator|+
literal|'/'
operator|+
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|dead
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fi
operator|.
name|exists
argument_list|()
operator|&&
name|fi
operator|.
name|isDir
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|dir
operator|.
name|rmdir
argument_list|(
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|list
operator|=
name|dir
operator|.
name|entryList
argument_list|(
name|QDir
operator|::
name|AllEntries
operator||
name|QDir
operator|::
name|System
operator||
name|QDir
operator|::
name|Hidden
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|indexPath
name|void
name|tst_QFileSystemModel
operator|::
name|indexPath
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|int
name|depth
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
operator|.
name|count
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
name|model
operator|->
name|setRootPath
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
name|WAITTIME
argument_list|)
expr_stmt|;
name|QString
name|backPath
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|depth
operator|*
literal|2
operator|+
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|backPath
operator|+=
literal|"../"
expr_stmt|;
name|QModelIndex
name|idx
init|=
name|model
operator|->
name|index
argument_list|(
name|backPath
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|!=
name|depth
operator|-
literal|1
condition|?
name|idx
operator|.
name|isValid
argument_list|()
else|:
operator|!
name|idx
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QTest
operator|::
name|qWait
argument_list|(
name|WAITTIME
operator|*
literal|3
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|rootPath
name|void
name|tst_QFileSystemModel
operator|::
name|rootPath
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|model
operator|->
name|rootPath
argument_list|()
argument_list|,
name|QString
argument_list|(
name|QDir
argument_list|()
operator|.
name|path
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QSignalSpy
name|rootChanged
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rootPathChanged
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QModelIndex
name|root
init|=
name|model
operator|->
name|setRootPath
argument_list|(
name|model
operator|->
name|rootPath
argument_list|()
argument_list|)
decl_stmt|;
name|root
operator|=
name|model
operator|->
name|setRootPath
argument_list|(
literal|"this directory shouldn't exist"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rootChanged
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QString
name|oldRootPath
init|=
name|model
operator|->
name|rootPath
argument_list|()
decl_stmt|;
name|root
operator|=
name|model
operator|->
name|setRootPath
argument_list|(
name|QDir
operator|::
name|homePath
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|model
operator|->
name|rowCount
argument_list|(
name|root
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|->
name|rootPath
argument_list|()
argument_list|,
name|QString
argument_list|(
name|QDir
operator|::
name|homePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rootChanged
operator|.
name|count
argument_list|()
argument_list|,
name|oldRootPath
operator|==
name|model
operator|->
name|rootPath
argument_list|()
condition|?
literal|0
else|:
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|->
name|rootDirectory
argument_list|()
operator|.
name|absolutePath
argument_list|()
argument_list|,
name|QDir
operator|::
name|homePath
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|->
name|setRootPath
argument_list|(
name|QDir
operator|::
name|rootPath
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|oldCount
init|=
name|rootChanged
operator|.
name|count
argument_list|()
decl_stmt|;
name|oldRootPath
operator|=
name|model
operator|->
name|rootPath
argument_list|()
expr_stmt|;
name|root
operator|=
name|model
operator|->
name|setRootPath
argument_list|(
name|QDir
operator|::
name|homePath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/."
argument_list|)
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|model
operator|->
name|rowCount
argument_list|(
name|root
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|->
name|rootPath
argument_list|()
argument_list|,
name|QDir
operator|::
name|homePath
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rootChanged
operator|.
name|count
argument_list|()
argument_list|,
name|oldRootPath
operator|==
name|model
operator|->
name|rootPath
argument_list|()
condition|?
name|oldCount
else|:
name|oldCount
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|->
name|rootDirectory
argument_list|()
operator|.
name|absolutePath
argument_list|()
argument_list|,
name|QDir
operator|::
name|homePath
argument_list|()
argument_list|)
expr_stmt|;
name|QDir
name|newdir
init|=
name|QDir
operator|::
name|home
argument_list|()
decl_stmt|;
if|if
condition|(
name|newdir
operator|.
name|cdUp
argument_list|()
condition|)
block|{
name|oldCount
operator|=
name|rootChanged
operator|.
name|count
argument_list|()
expr_stmt|;
name|oldRootPath
operator|=
name|model
operator|->
name|rootPath
argument_list|()
expr_stmt|;
name|root
operator|=
name|model
operator|->
name|setRootPath
argument_list|(
name|QDir
operator|::
name|homePath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/.."
argument_list|)
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|model
operator|->
name|rowCount
argument_list|(
name|root
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|->
name|rootPath
argument_list|()
argument_list|,
name|newdir
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rootChanged
operator|.
name|count
argument_list|()
argument_list|,
name|oldCount
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|->
name|rootDirectory
argument_list|()
operator|.
name|absolutePath
argument_list|()
argument_list|,
name|newdir
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|naturalCompare_data
name|void
name|tst_QFileSystemModel
operator|::
name|naturalCompare_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"s1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"s2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"caseSensitive"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"swap"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|4
condition|;
operator|++
name|j
control|)
block|{
comment|//<- set a prefix and a postfix string (not numbers)
name|QString
name|prefix
init|=
operator|(
name|j
operator|==
literal|0
operator|||
name|j
operator|==
literal|1
operator|)
condition|?
literal|"b"
else|:
literal|""
decl_stmt|;
name|QString
name|postfix
init|=
operator|(
name|j
operator|==
literal|1
operator|||
name|j
operator|==
literal|2
operator|)
condition|?
literal|"y"
else|:
literal|""
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|3
condition|;
operator|++
name|k
control|)
block|{
comment|//<- make 0 not a special case
name|QString
name|num
init|=
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|QString
name|nump
init|=
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|k
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|10
init|;
name|i
operator|<
literal|12
condition|;
operator|++
name|i
control|)
block|{
comment|//<- swap s1 and s2 and reverse the result
name|QTest
operator|::
name|newRow
argument_list|(
literal|"basic"
argument_list|)
operator|<<
name|prefix
operator|+
literal|"0"
operator|+
name|postfix
operator|<<
name|prefix
operator|+
literal|"0"
operator|+
name|postfix
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<<
literal|0
expr_stmt|;
comment|// s1 should always be less then s2
name|QTest
operator|::
name|newRow
argument_list|(
literal|"just text"
argument_list|)
operator|<<
name|prefix
operator|+
literal|"fred"
operator|+
name|postfix
operator|<<
name|prefix
operator|+
literal|"jane"
operator|+
name|postfix
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<<
name|i
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"just numbers"
argument_list|)
operator|<<
name|prefix
operator|+
name|num
operator|+
name|postfix
operator|<<
name|prefix
operator|+
literal|"9"
operator|+
name|postfix
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<<
name|i
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"zero"
argument_list|)
operator|<<
name|prefix
operator|+
name|num
operator|+
name|postfix
operator|<<
name|prefix
operator|+
literal|"0"
operator|+
name|nump
operator|+
name|postfix
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<<
name|i
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"space b"
argument_list|)
operator|<<
name|prefix
operator|+
name|num
operator|+
name|postfix
operator|<<
name|prefix
operator|+
literal|" "
operator|+
name|nump
operator|+
name|postfix
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<<
name|i
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"space a"
argument_list|)
operator|<<
name|prefix
operator|+
name|num
operator|+
name|postfix
operator|<<
name|prefix
operator|+
name|nump
operator|+
literal|" "
operator|+
name|postfix
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<<
name|i
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"tab b"
argument_list|)
operator|<<
name|prefix
operator|+
name|num
operator|+
name|postfix
operator|<<
name|prefix
operator|+
literal|"    "
operator|+
name|nump
operator|+
name|postfix
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<<
name|i
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"tab a"
argument_list|)
operator|<<
name|prefix
operator|+
name|num
operator|+
name|postfix
operator|<<
name|prefix
operator|+
name|nump
operator|+
literal|"   "
operator|+
name|postfix
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<<
name|i
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10 vs 2"
argument_list|)
operator|<<
name|prefix
operator|+
name|num
operator|+
name|postfix
operator|<<
name|prefix
operator|+
literal|"10"
operator|+
name|postfix
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<<
name|i
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"diff len"
argument_list|)
operator|<<
name|prefix
operator|+
name|num
operator|+
name|postfix
operator|<<
name|prefix
operator|+
name|nump
operator|+
name|postfix
operator|+
literal|"x"
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<<
name|i
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"01 before 1"
argument_list|)
operator|<<
name|prefix
operator|+
literal|"0"
operator|+
name|num
operator|+
name|postfix
operator|<<
name|prefix
operator|+
name|nump
operator|+
name|postfix
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<<
name|i
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mul nums 2nd"
argument_list|)
operator|<<
name|prefix
operator|+
literal|"1-"
operator|+
name|num
operator|+
name|postfix
operator|<<
name|prefix
operator|+
literal|"1-"
operator|+
name|nump
operator|+
name|postfix
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<<
name|i
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mul nums 2nd"
argument_list|)
operator|<<
name|prefix
operator|+
literal|"10-"
operator|+
name|num
operator|+
name|postfix
operator|<<
name|prefix
operator|+
literal|"10-10"
operator|+
name|postfix
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<<
name|i
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mul nums 2nd"
argument_list|)
operator|<<
name|prefix
operator|+
literal|"10-0"
operator|+
name|num
operator|+
name|postfix
operator|<<
name|prefix
operator|+
literal|"10-10"
operator|+
name|postfix
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<<
name|i
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mul nums 2nd"
argument_list|)
operator|<<
name|prefix
operator|+
literal|"10-"
operator|+
name|num
operator|+
name|postfix
operator|<<
name|prefix
operator|+
literal|"10-010"
operator|+
name|postfix
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<<
name|i
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mul nums big"
argument_list|)
operator|<<
name|prefix
operator|+
literal|"10-"
operator|+
name|num
operator|+
name|postfix
operator|<<
name|prefix
operator|+
literal|"20-0"
operator|+
name|postfix
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<<
name|i
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mul nums big"
argument_list|)
operator|<<
name|prefix
operator|+
literal|"2-"
operator|+
name|num
operator|+
name|postfix
operator|<<
name|prefix
operator|+
literal|"10-0"
operator|+
name|postfix
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<<
name|i
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mul alphabet"
argument_list|)
operator|<<
name|prefix
operator|+
name|num
operator|+
literal|"-a"
operator|+
name|postfix
operator|<<
name|prefix
operator|+
name|num
operator|+
literal|"-c"
operator|+
name|postfix
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<<
name|i
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mul alphabet2"
argument_list|)
operator|<<
name|prefix
operator|+
name|num
operator|+
literal|"-a9"
operator|+
name|postfix
operator|<<
name|prefix
operator|+
name|num
operator|+
literal|"-c0"
operator|+
name|postfix
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<<
name|i
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mul nums w\\0"
argument_list|)
operator|<<
name|prefix
operator|+
name|num
operator|+
literal|"-"
operator|+
name|num
operator|+
name|postfix
operator|<<
name|prefix
operator|+
name|num
operator|+
literal|"-0"
operator|+
name|nump
operator|+
name|postfix
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<<
name|i
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"num first"
argument_list|)
operator|<<
name|prefix
operator|+
name|num
operator|+
name|postfix
operator|<<
name|prefix
operator|+
literal|"a"
operator|+
name|postfix
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<<
name|i
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|naturalCompare
name|void
name|tst_QFileSystemModel
operator|::
name|naturalCompare
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|s1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|s2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|caseSensitive
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|10
condition|)
name|QCOMPARE
argument_list|(
name|QFileSystemModelPrivate
operator|::
name|naturalCompare
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
argument_list|(
name|caseSensitive
argument_list|)
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|result
operator|==
literal|11
condition|)
name|QCOMPARE
argument_list|(
name|QFileSystemModelPrivate
operator|::
name|naturalCompare
argument_list|(
name|s2
argument_list|,
name|s1
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
argument_list|(
name|caseSensitive
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
else|else
name|QCOMPARE
argument_list|(
name|QFileSystemModelPrivate
operator|::
name|naturalCompare
argument_list|(
name|s2
argument_list|,
name|s1
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
argument_list|(
name|caseSensitive
argument_list|)
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
comment|// On Windows CE we need to wait after each test, otherwise no new threads can be
comment|// created. The scheduler takes its time to recognize ended threads.
name|QTest
operator|::
name|qWait
argument_list|(
literal|300
argument_list|)
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|readOnly
name|void
name|tst_QFileSystemModel
operator|::
name|readOnly
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|model
operator|->
name|isReadOnly
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QTemporaryFile
name|file
decl_stmt|;
name|file
operator|.
name|open
argument_list|()
expr_stmt|;
name|QModelIndex
name|root
init|=
name|model
operator|->
name|setRootPath
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
argument_list|)
decl_stmt|;
name|QTRY_VERIFY
argument_list|(
name|model
operator|->
name|rowCount
argument_list|(
name|root
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|model
operator|->
name|flags
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|)
operator|&
name|Qt
operator|::
name|ItemIsEditable
operator|)
argument_list|)
expr_stmt|;
name|model
operator|->
name|setReadOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|->
name|isReadOnly
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|model
operator|->
name|flags
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|)
operator|&
name|Qt
operator|::
name|ItemIsEditable
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|CustomFileIconProvider
class|class
name|CustomFileIconProvider
super|:
specifier|public
name|QFileIconProvider
block|{
public|public:
DECL|function|CustomFileIconProvider
name|CustomFileIconProvider
parameter_list|()
member_init_list|:
name|QFileIconProvider
argument_list|()
block|{
name|mb
operator|=
name|qApp
operator|->
name|style
argument_list|()
operator|->
name|standardIcon
argument_list|(
name|QStyle
operator|::
name|SP_MessageBoxCritical
argument_list|)
expr_stmt|;
name|dvd
operator|=
name|qApp
operator|->
name|style
argument_list|()
operator|->
name|standardIcon
argument_list|(
name|QStyle
operator|::
name|SP_DriveDVDIcon
argument_list|)
expr_stmt|;
block|}
DECL|function|icon
specifier|virtual
name|QIcon
name|icon
parameter_list|(
specifier|const
name|QFileInfo
modifier|&
name|info
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|info
operator|.
name|isDir
argument_list|()
condition|)
return|return
name|mb
return|;
return|return
name|QFileIconProvider
operator|::
name|icon
argument_list|(
name|info
argument_list|)
return|;
block|}
DECL|function|icon
specifier|virtual
name|QIcon
name|icon
parameter_list|(
name|IconType
name|type
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|type
operator|==
name|QFileIconProvider
operator|::
name|Folder
condition|)
return|return
name|dvd
return|;
return|return
name|QFileIconProvider
operator|::
name|icon
argument_list|(
name|type
argument_list|)
return|;
block|}
private|private:
DECL|member|mb
name|QIcon
name|mb
decl_stmt|;
DECL|member|dvd
name|QIcon
name|dvd
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|iconProvider
name|void
name|tst_QFileSystemModel
operator|::
name|iconProvider
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|model
operator|->
name|iconProvider
argument_list|()
argument_list|)
expr_stmt|;
name|QFileIconProvider
modifier|*
name|p
init|=
operator|new
name|QFileIconProvider
argument_list|()
decl_stmt|;
name|model
operator|->
name|setIconProvider
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|->
name|iconProvider
argument_list|()
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|model
operator|->
name|setIconProvider
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|p
expr_stmt|;
name|QFileSystemModel
modifier|*
name|myModel
init|=
operator|new
name|QFileSystemModel
argument_list|()
decl_stmt|;
name|myModel
operator|->
name|setRootPath
argument_list|(
name|QDir
operator|::
name|homePath
argument_list|()
argument_list|)
expr_stmt|;
comment|//Let's wait to populate the model
name|QTest
operator|::
name|qWait
argument_list|(
literal|250
argument_list|)
expr_stmt|;
comment|//We change the provider, icons must me updated
name|CustomFileIconProvider
modifier|*
name|custom
init|=
operator|new
name|CustomFileIconProvider
argument_list|()
decl_stmt|;
name|myModel
operator|->
name|setIconProvider
argument_list|(
name|custom
argument_list|)
expr_stmt|;
name|QPixmap
name|mb
init|=
name|qApp
operator|->
name|style
argument_list|()
operator|->
name|standardIcon
argument_list|(
name|QStyle
operator|::
name|SP_MessageBoxCritical
argument_list|)
operator|.
name|pixmap
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|myModel
operator|->
name|fileIcon
argument_list|(
name|myModel
operator|->
name|index
argument_list|(
name|QDir
operator|::
name|homePath
argument_list|()
argument_list|)
argument_list|)
operator|.
name|pixmap
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|)
argument_list|,
name|mb
argument_list|)
expr_stmt|;
operator|delete
name|myModel
expr_stmt|;
operator|delete
name|custom
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createFiles
name|bool
name|tst_QFileSystemModel
operator|::
name|createFiles
parameter_list|(
specifier|const
name|QString
modifier|&
name|test_path
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|initial_files
parameter_list|,
name|int
name|existingFileCount
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|initial_dirs
parameter_list|,
specifier|const
name|QString
modifier|&
name|dir
parameter_list|)
block|{
name|QDir
name|baseDir
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|baseDir
operator|.
name|exists
argument_list|(
name|test_path
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|baseDir
operator|.
name|mkdir
argument_list|(
name|test_path
argument_list|)
operator|&&
literal|false
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"failed to create dir"
operator|<<
name|test_path
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|//qDebug()<< (model->rowCount(model->index(test_path)))<< existingFileCount<< initial_files;
name|TRY_WAIT
argument_list|(
operator|(
name|model
operator|->
name|rowCount
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|test_path
argument_list|)
argument_list|)
operator|==
name|existingFileCount
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|initial_dirs
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QDir
name|dir
argument_list|(
name|test_path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"error"
operator|<<
name|test_path
operator|<<
literal|"doesn't exists"
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|dir
operator|.
name|mkdir
argument_list|(
name|initial_dirs
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"error"
operator|<<
literal|"failed to make"
operator|<<
name|initial_dirs
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|//qDebug()<< test_path + '/' + initial_dirs.at(i)<< (QFile::exists(test_path + '/' + initial_dirs.at(i)));
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|initial_files
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QFile
name|file
argument_list|(
name|test_path
operator|+
literal|'/'
operator|+
name|initial_files
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Append
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"failed to open file"
operator|<<
name|initial_files
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|resize
argument_list|(
literal|1024
operator|+
name|file
operator|.
name|size
argument_list|()
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"failed to resize file"
operator|<<
name|initial_files
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|flush
argument_list|()
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"failed to flush file"
operator|<<
name|initial_files
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
if|if
condition|(
name|initial_files
operator|.
name|at
argument_list|(
name|i
argument_list|)
index|[
literal|0
index|]
operator|==
literal|'.'
condition|)
name|QProcess
operator|::
name|execute
argument_list|(
name|QString
argument_list|(
literal|"attrib +h %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|//qDebug()<< test_path + '/' + initial_files.at(i)<< (QFile::exists(test_path + '/' + initial_files.at(i)));
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|rowCount
name|void
name|tst_QFileSystemModel
operator|::
name|rowCount
parameter_list|()
block|{
name|QString
name|tmp
init|=
name|flatDirTestPath
decl_stmt|;
name|QVERIFY
argument_list|(
name|createFiles
argument_list|(
name|tmp
argument_list|,
name|QStringList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy2
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsInserted
argument_list|(
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spy3
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeInserted
argument_list|(
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QStringList
name|files
init|=
name|QStringList
argument_list|()
operator|<<
literal|"b"
operator|<<
literal|"d"
operator|<<
literal|"f"
operator|<<
literal|"h"
operator|<<
literal|"j"
operator|<<
literal|".a"
operator|<<
literal|".c"
operator|<<
literal|".e"
operator|<<
literal|".g"
decl_stmt|;
name|QString
name|l
init|=
literal|"b,d,f,h,j,.a,.c,.e,.g"
decl_stmt|;
else|#
directive|else
comment|// Cannot hide them on CE
name|QStringList
name|files
init|=
name|QStringList
argument_list|()
operator|<<
literal|"b"
operator|<<
literal|"d"
operator|<<
literal|"f"
operator|<<
literal|"h"
operator|<<
literal|"j"
decl_stmt|;
name|QString
name|l
init|=
literal|"b,d,f,h,j"
decl_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|createFiles
argument_list|(
name|tmp
argument_list|,
name|files
argument_list|)
argument_list|)
expr_stmt|;
name|QModelIndex
name|root
init|=
name|model
operator|->
name|setRootPath
argument_list|(
name|tmp
argument_list|)
decl_stmt|;
name|QTRY_COMPARE
argument_list|(
name|model
operator|->
name|rowCount
argument_list|(
name|root
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy2
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy3
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rowsInserted_data
name|void
name|tst_QFileSystemModel
operator|::
name|rowsInserted_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"count"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"assending"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"Qt::AscendingOrder %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
name|i
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|AscendingOrder
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"Qt::DescendingOrder %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
name|i
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|DescendingOrder
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rowsInserted
name|void
name|tst_QFileSystemModel
operator|::
name|rowsInserted
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QSKIP
argument_list|(
literal|"Watching directories does not work on CE(see #137910)"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QString
name|tmp
init|=
name|flatDirTestPath
decl_stmt|;
name|rowCount
argument_list|()
expr_stmt|;
name|QModelIndex
name|root
init|=
name|model
operator|->
name|index
argument_list|(
name|model
operator|->
name|rootPath
argument_list|()
argument_list|)
decl_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|assending
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|model
operator|->
name|sort
argument_list|(
literal|0
argument_list|,
operator|(
name|Qt
operator|::
name|SortOrder
operator|)
name|assending
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy0
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsInserted
argument_list|(
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spy1
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeInserted
argument_list|(
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|oldCount
init|=
name|model
operator|->
name|rowCount
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|QStringList
name|files
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
name|files
operator|.
name|append
argument_list|(
name|QString
argument_list|(
literal|"c%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|createFiles
argument_list|(
name|tmp
argument_list|,
name|files
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|TRY_WAIT
argument_list|(
name|model
operator|->
name|rowCount
argument_list|(
name|root
argument_list|)
operator|==
name|oldCount
operator|+
name|count
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|model
operator|->
name|rowCount
argument_list|(
name|root
argument_list|)
argument_list|,
name|oldCount
operator|+
name|count
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// Let the sort settle.
name|int
name|totalRowsInserted
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|spy0
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|int
name|start
init|=
name|spy0
index|[
name|i
index|]
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|end
init|=
name|spy0
index|[
name|i
index|]
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|totalRowsInserted
operator|+=
name|end
operator|-
name|start
operator|+
literal|1
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|totalRowsInserted
argument_list|,
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|assending
operator|==
operator|(
name|Qt
operator|::
name|SortOrder
operator|)
name|Qt
operator|::
name|AscendingOrder
condition|)
block|{
name|QString
name|letter
init|=
name|model
operator|->
name|index
argument_list|(
name|model
operator|->
name|rowCount
argument_list|(
name|root
argument_list|)
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
name|root
argument_list|)
operator|.
name|data
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|letter
argument_list|,
name|QString
argument_list|(
literal|"j"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|model
operator|->
name|rowCount
argument_list|(
name|root
argument_list|)
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
name|root
argument_list|)
operator|.
name|data
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|spy0
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|count
operator|==
literal|0
condition|)
name|QCOMPARE
argument_list|(
name|spy0
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|QVERIFY
argument_list|(
name|spy0
operator|.
name|count
argument_list|()
operator|>=
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|==
literal|0
condition|)
name|QCOMPARE
argument_list|(
name|spy1
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|QVERIFY
argument_list|(
name|spy1
operator|.
name|count
argument_list|()
operator|>=
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|createFiles
argument_list|(
name|tmp
argument_list|,
name|QStringList
argument_list|(
literal|".hidden_file"
argument_list|)
argument_list|,
literal|5
operator|+
name|count
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|!=
literal|0
condition|)
name|QTRY_VERIFY
argument_list|(
name|spy0
operator|.
name|count
argument_list|()
operator|>=
literal|1
argument_list|)
expr_stmt|;
else|else
name|QTRY_VERIFY
argument_list|(
name|spy0
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|!=
literal|0
condition|)
name|QTRY_VERIFY
argument_list|(
name|spy1
operator|.
name|count
argument_list|()
operator|>=
literal|1
argument_list|)
expr_stmt|;
else|else
name|QTRY_VERIFY
argument_list|(
name|spy1
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rowsRemoved_data
name|void
name|tst_QFileSystemModel
operator|::
name|rowsRemoved_data
parameter_list|()
block|{
name|rowsInserted_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rowsRemoved
name|void
name|tst_QFileSystemModel
operator|::
name|rowsRemoved
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QSKIP
argument_list|(
literal|"Watching directories does not work on CE(see #137910)"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QString
name|tmp
init|=
name|flatDirTestPath
decl_stmt|;
name|rowCount
argument_list|()
expr_stmt|;
name|QModelIndex
name|root
init|=
name|model
operator|->
name|index
argument_list|(
name|model
operator|->
name|rootPath
argument_list|()
argument_list|)
decl_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|assending
argument_list|)
expr_stmt|;
name|model
operator|->
name|sort
argument_list|(
literal|0
argument_list|,
operator|(
name|Qt
operator|::
name|SortOrder
operator|)
name|assending
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
name|WAITTIME
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy0
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsRemoved
argument_list|(
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spy1
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeRemoved
argument_list|(
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|oldCount
init|=
name|model
operator|->
name|rowCount
argument_list|(
name|root
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|count
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
comment|//qDebug()<< "removing"<<  model->index(i, 0, root).data().toString();
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|remove
argument_list|(
name|tmp
operator|+
literal|'/'
operator|+
name|model
operator|->
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
name|root
argument_list|)
operator|.
name|data
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|QTest
operator|::
name|qWait
argument_list|(
name|WAITTIME
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
if|if
condition|(
name|count
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|i
operator|==
literal|10
operator|||
name|spy0
operator|.
name|count
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|QVERIFY
argument_list|(
name|spy0
operator|.
name|count
argument_list|()
operator|>=
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy1
operator|.
name|count
argument_list|()
operator|>=
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|i
operator|==
literal|10
operator|||
name|spy0
operator|.
name|count
argument_list|()
operator|==
literal|0
condition|)
block|{
name|QVERIFY
argument_list|(
name|spy0
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy1
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|QStringList
name|lst
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|model
operator|->
name|rowCount
argument_list|(
name|root
argument_list|)
condition|;
operator|++
name|i
control|)
name|lst
operator|.
name|append
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
name|root
argument_list|)
operator|.
name|data
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|->
name|rowCount
argument_list|(
name|root
argument_list|)
operator|==
name|oldCount
operator|-
name|count
condition|)
break|break;
name|qDebug
argument_list|()
operator|<<
literal|"still have:"
operator|<<
name|lst
operator|<<
name|QFile
operator|::
name|exists
argument_list|(
name|tmp
operator|+
literal|'/'
operator|+
name|QString
argument_list|(
literal|".a"
argument_list|)
argument_list|)
expr_stmt|;
name|QDir
name|tmpLister
argument_list|(
name|tmp
argument_list|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
name|tmpLister
operator|.
name|entryList
argument_list|()
expr_stmt|;
block|}
name|QTRY_COMPARE
argument_list|(
name|model
operator|->
name|rowCount
argument_list|(
name|root
argument_list|)
argument_list|,
name|oldCount
operator|-
name|count
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|exists
argument_list|(
name|tmp
operator|+
literal|'/'
operator|+
name|QString
argument_list|(
literal|".a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|remove
argument_list|(
name|tmp
operator|+
literal|'/'
operator|+
name|QString
argument_list|(
literal|".a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|remove
argument_list|(
name|tmp
operator|+
literal|'/'
operator|+
name|QString
argument_list|(
literal|".c"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
name|WAITTIME
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|!=
literal|0
condition|)
name|QVERIFY
argument_list|(
name|spy0
operator|.
name|count
argument_list|()
operator|>=
literal|1
argument_list|)
expr_stmt|;
else|else
name|QVERIFY
argument_list|(
name|spy0
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|!=
literal|0
condition|)
name|QVERIFY
argument_list|(
name|spy1
operator|.
name|count
argument_list|()
operator|>=
literal|1
argument_list|)
expr_stmt|;
else|else
name|QVERIFY
argument_list|(
name|spy1
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dataChanged_data
name|void
name|tst_QFileSystemModel
operator|::
name|dataChanged_data
parameter_list|()
block|{
name|rowsInserted_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dataChanged
name|void
name|tst_QFileSystemModel
operator|::
name|dataChanged
parameter_list|()
block|{
comment|// This can't be tested right now sense we don't watch files, only directories
return|return;
comment|/*     QString tmp = flatDirTestPath;     rowCount();     QModelIndex root = model->index(model->rootPath());      QFETCH(int, count);     QFETCH(int, assending);     model->sort(0, (Qt::SortOrder)assending);      QSignalSpy spy(model, SIGNAL(dataChanged (const QModelIndex&, const QModelIndex&)));     QStringList files;     for (int i = 0; i< count; ++i)         files.append(model->index(i, 0, root).data().toString());     createFiles(tmp, files);      QTest::qWait(WAITTIME);      if (count != 0) QVERIFY(spy.count()>= 1); else QVERIFY(spy.count() == 0);     */
block|}
end_function
begin_function
DECL|function|filters_data
name|void
name|tst_QFileSystemModel
operator|::
name|filters_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"files"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"dirs"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"dirFilters"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"nameFilters"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"rowCount"
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no dirs"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
name|QStringList
argument_list|()
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|Dirs
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no dirs - dot"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
name|QStringList
argument_list|()
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|NoDot
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no dirs - dotdot"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
name|QStringList
argument_list|()
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|NoDotDot
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no dirs - dotanddotdot"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
name|QStringList
argument_list|()
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one dir - dot"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Z"
operator|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|NoDot
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one dir - dotdot"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Z"
operator|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|NoDotDot
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one dir - dotanddotdot"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Z"
operator|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one dir"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Z"
operator|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|Dirs
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no dir + hidden"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
name|QStringList
argument_list|()
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|Hidden
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dir+hid+files"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
name|QStringList
argument_list|()
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|Files
operator||
name|QDir
operator|::
name|Hidden
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dir+file+hid-dot .A"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|".A"
operator|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|Files
operator||
name|QDir
operator|::
name|Hidden
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dir+files+hid+dot A"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"AFolder"
operator|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|Files
operator||
name|QDir
operator|::
name|Hidden
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"A*"
operator|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dir+files+hid+dot+cas1"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Z"
operator|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|Files
operator||
name|QDir
operator|::
name|Hidden
operator||
name|QDir
operator|::
name|NoDotAndDotDot
operator||
name|QDir
operator|::
name|CaseSensitive
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Z"
operator|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dir+files+hid+dot+cas2"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Z"
operator|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|Files
operator||
name|QDir
operator|::
name|Hidden
operator||
name|QDir
operator|::
name|NoDotAndDotDot
operator||
name|QDir
operator|::
name|CaseSensitive
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dir+files+hid+dot+cas+alldir"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Z"
operator|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|Files
operator||
name|QDir
operator|::
name|Hidden
operator||
name|QDir
operator|::
name|NoDotAndDotDot
operator||
name|QDir
operator|::
name|CaseSensitive
operator||
name|QDir
operator|::
name|AllDirs
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Z"
operator|)
operator|<<
literal|1
expr_stmt|;
else|#
directive|else
name|QTest
operator|::
name|qWait
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
comment|// We need to calm down a bit...
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no dirs"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
name|QStringList
argument_list|()
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|Dirs
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no dirs - dot"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
name|QStringList
argument_list|()
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|NoDot
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no dirs - dotdot"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
name|QStringList
argument_list|()
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|NoDotDot
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no dirs - dotanddotdot"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
name|QStringList
argument_list|()
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one dir - dot"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Z"
operator|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|NoDot
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one dir - dotdot"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Z"
operator|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|NoDotDot
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one dir - dotanddotdot"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Z"
operator|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one dir"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Z"
operator|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|Dirs
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no dir + hidden"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
name|QStringList
argument_list|()
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|Hidden
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dir+hid+files"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
name|QStringList
argument_list|()
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|Files
operator||
name|QDir
operator|::
name|Hidden
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dir+file+hid-dot .A"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|".A"
operator|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|Files
operator||
name|QDir
operator|::
name|Hidden
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dir+files+hid+dot A"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"AFolder"
operator|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|Files
operator||
name|QDir
operator|::
name|Hidden
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"A*"
operator|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dir+files+hid+dot+cas1"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Z"
operator|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|Files
operator||
name|QDir
operator|::
name|Hidden
operator||
name|QDir
operator|::
name|NoDotAndDotDot
operator||
name|QDir
operator|::
name|CaseSensitive
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Z"
operator|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dir+files+hid+dot+cas2"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Z"
operator|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|Files
operator||
name|QDir
operator|::
name|Hidden
operator||
name|QDir
operator|::
name|NoDotAndDotDot
operator||
name|QDir
operator|::
name|CaseSensitive
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dir+files+hid+dot+cas+alldir"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Z"
operator|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|Files
operator||
name|QDir
operator|::
name|Hidden
operator||
name|QDir
operator|::
name|NoDotAndDotDot
operator||
name|QDir
operator|::
name|CaseSensitive
operator||
name|QDir
operator|::
name|AllDirs
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Z"
operator|)
operator|<<
literal|1
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"case sensitive"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Antiguagdb"
operator|<<
literal|"Antiguamtd"
operator|<<
literal|"Antiguamtp"
operator|<<
literal|"afghanistangdb"
operator|<<
literal|"afghanistanmtd"
operator|)
operator|<<
name|QStringList
argument_list|()
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|Files
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
literal|5
expr_stmt|;
block|}
end_function
begin_function
DECL|function|filters
name|void
name|tst_QFileSystemModel
operator|::
name|filters
parameter_list|()
block|{
name|QString
name|tmp
init|=
name|flatDirTestPath
decl_stmt|;
name|QVERIFY
argument_list|(
name|createFiles
argument_list|(
name|tmp
argument_list|,
name|QStringList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QModelIndex
name|root
init|=
name|model
operator|->
name|setRootPath
argument_list|(
name|tmp
argument_list|)
decl_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|files
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|dirs
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|dirFilters
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|nameFilters
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|nameFilters
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
name|model
operator|->
name|setNameFilters
argument_list|(
name|nameFilters
argument_list|)
expr_stmt|;
name|model
operator|->
name|setNameFilterDisables
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|model
operator|->
name|setFilter
argument_list|(
operator|(
name|QDir
operator|::
name|Filters
operator|)
name|dirFilters
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|createFiles
argument_list|(
name|tmp
argument_list|,
name|files
argument_list|,
literal|0
argument_list|,
name|dirs
argument_list|)
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|model
operator|->
name|rowCount
argument_list|(
name|root
argument_list|)
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
comment|// Make sure that we do what QDir does
name|QDir
name|xFactor
argument_list|(
name|tmp
argument_list|)
decl_stmt|;
name|QDir
operator|::
name|Filters
name|filters
init|=
operator|(
name|QDir
operator|::
name|Filters
operator|)
name|dirFilters
decl_stmt|;
name|QStringList
name|dirEntries
decl_stmt|;
if|if
condition|(
name|nameFilters
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
name|dirEntries
operator|=
name|xFactor
operator|.
name|entryList
argument_list|(
name|nameFilters
argument_list|,
name|filters
argument_list|)
expr_stmt|;
else|else
name|dirEntries
operator|=
name|xFactor
operator|.
name|entryList
argument_list|(
name|filters
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dirEntries
operator|.
name|count
argument_list|()
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
name|QStringList
name|modelEntries
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowCount
condition|;
operator|++
name|i
control|)
name|modelEntries
operator|.
name|append
argument_list|(
name|model
operator|->
name|data
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
name|root
argument_list|)
argument_list|,
name|QFileSystemModel
operator|::
name|FileNameRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|qSort
argument_list|(
name|dirEntries
argument_list|)
expr_stmt|;
name|qSort
argument_list|(
name|modelEntries
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dirEntries
argument_list|,
name|modelEntries
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_LINUX
if|if
condition|(
name|files
operator|.
name|count
argument_list|()
operator|>=
literal|3
operator|&&
name|rowCount
operator|>=
literal|3
operator|&&
name|rowCount
operator|!=
literal|5
condition|)
block|{
name|QString
name|fileName1
init|=
operator|(
name|tmp
operator|+
literal|'/'
operator|+
name|files
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|)
decl_stmt|;
name|QString
name|fileName2
init|=
operator|(
name|tmp
operator|+
literal|'/'
operator|+
name|files
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|)
decl_stmt|;
name|QString
name|fileName3
init|=
operator|(
name|tmp
operator|+
literal|'/'
operator|+
name|files
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|)
decl_stmt|;
name|QFile
operator|::
name|Permissions
name|originalPermissions
init|=
name|QFile
operator|::
name|permissions
argument_list|(
name|fileName1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|setPermissions
argument_list|(
name|fileName1
argument_list|,
name|QFile
operator|::
name|WriteOwner
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|setPermissions
argument_list|(
name|fileName2
argument_list|,
name|QFile
operator|::
name|ReadOwner
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|setPermissions
argument_list|(
name|fileName3
argument_list|,
name|QFile
operator|::
name|ExeOwner
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|->
name|setFilter
argument_list|(
operator|(
name|QDir
operator|::
name|Files
operator||
name|QDir
operator|::
name|Readable
operator|)
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|model
operator|->
name|rowCount
argument_list|(
name|root
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|model
operator|->
name|setFilter
argument_list|(
operator|(
name|QDir
operator|::
name|Files
operator||
name|QDir
operator|::
name|Writable
operator|)
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|model
operator|->
name|rowCount
argument_list|(
name|root
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|model
operator|->
name|setFilter
argument_list|(
operator|(
name|QDir
operator|::
name|Files
operator||
name|QDir
operator|::
name|Executable
operator|)
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|model
operator|->
name|rowCount
argument_list|(
name|root
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// reset permissions
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|setPermissions
argument_list|(
name|fileName1
argument_list|,
name|originalPermissions
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|setPermissions
argument_list|(
name|fileName2
argument_list|,
name|originalPermissions
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|setPermissions
argument_list|(
name|fileName3
argument_list|,
name|originalPermissions
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|nameFilters
name|void
name|tst_QFileSystemModel
operator|::
name|nameFilters
parameter_list|()
block|{
name|QStringList
name|list
decl_stmt|;
name|list
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
expr_stmt|;
name|model
operator|->
name|setNameFilters
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|model
operator|->
name|setNameFilterDisables
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|->
name|nameFilters
argument_list|()
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|QString
name|tmp
init|=
name|flatDirTestPath
decl_stmt|;
name|QVERIFY
argument_list|(
name|createFiles
argument_list|(
name|tmp
argument_list|,
name|list
argument_list|)
argument_list|)
expr_stmt|;
name|QModelIndex
name|root
init|=
name|model
operator|->
name|setRootPath
argument_list|(
name|tmp
argument_list|)
decl_stmt|;
name|QTRY_COMPARE
argument_list|(
name|model
operator|->
name|rowCount
argument_list|(
name|root
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QStringList
name|filters
decl_stmt|;
name|filters
operator|<<
literal|"a"
operator|<<
literal|"b"
expr_stmt|;
name|model
operator|->
name|setNameFilters
argument_list|(
name|filters
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|model
operator|->
name|rowCount
argument_list|(
name|root
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setData_data
name|void
name|tst_QFileSystemModel
operator|::
name|setData_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"files"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"oldFileName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"newFileName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"success"
argument_list|)
expr_stmt|;
comment|/*QTest::newRow("outside current dir")<< (QStringList()<< "a"<< "b"<< "c")<< flatDirTestPath + '/' + "a"<< QDir::temp().absolutePath() + '/' + "a"<< false;     */
name|QTest
operator|::
name|newRow
argument_list|(
literal|"in current dir"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
literal|"a"
operator|<<
literal|"d"
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setData
name|void
name|tst_QFileSystemModel
operator|::
name|setData
parameter_list|()
block|{
name|QSignalSpy
name|spy
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|fileRenamed
argument_list|(
specifier|const
name|QString
operator|&
argument_list|,
specifier|const
name|QString
operator|&
argument_list|,
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|tmp
init|=
name|flatDirTestPath
decl_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|files
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|oldFileName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|newFileName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|createFiles
argument_list|(
name|tmp
argument_list|,
name|files
argument_list|)
argument_list|)
expr_stmt|;
name|QModelIndex
name|root
init|=
name|model
operator|->
name|setRootPath
argument_list|(
name|tmp
argument_list|)
decl_stmt|;
name|QTRY_COMPARE
argument_list|(
name|model
operator|->
name|rowCount
argument_list|(
name|root
argument_list|)
argument_list|,
name|files
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QModelIndex
name|idx
init|=
name|model
operator|->
name|index
argument_list|(
name|tmp
operator|+
literal|'/'
operator|+
name|oldFileName
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|isValid
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|->
name|setData
argument_list|(
name|idx
argument_list|,
name|newFileName
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|model
operator|->
name|setReadOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|->
name|setData
argument_list|(
name|idx
argument_list|,
name|newFileName
argument_list|)
argument_list|,
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|arguments
init|=
name|spy
operator|.
name|takeFirst
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|->
name|data
argument_list|(
name|idx
argument_list|,
name|QFileSystemModel
operator|::
name|FileNameRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|newFileName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|arguments
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|model
operator|->
name|index
argument_list|(
name|tmp
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|arguments
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|oldFileName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|arguments
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|newFileName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFile
operator|::
name|rename
argument_list|(
name|tmp
operator|+
literal|'/'
operator|+
name|newFileName
argument_list|,
name|tmp
operator|+
literal|'/'
operator|+
name|oldFileName
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|QTRY_COMPARE
argument_list|(
name|model
operator|->
name|rowCount
argument_list|(
name|root
argument_list|)
argument_list|,
name|files
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|MyFriendFileSystemModel
class|class
name|MyFriendFileSystemModel
super|:
specifier|public
name|QFileSystemModel
block|{
friend|friend
class_decl|class
name|tst_QFileSystemModel
class_decl|;
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QFileSystemModel
argument_list|)
block|}
class|;
end_class
begin_function
DECL|function|sort_data
name|void
name|tst_QFileSystemModel
operator|::
name|sort_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"fileDialogMode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"standard usage"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QFileDialog usage"
argument_list|)
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sort
name|void
name|tst_QFileSystemModel
operator|::
name|sort
parameter_list|()
block|{
name|QTemporaryFile
name|file
decl_stmt|;
name|file
operator|.
name|open
argument_list|()
expr_stmt|;
name|QModelIndex
name|root
init|=
name|model
operator|->
name|setRootPath
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
argument_list|)
decl_stmt|;
name|QTRY_VERIFY
argument_list|(
name|model
operator|->
name|rowCount
argument_list|(
name|root
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QPersistentModelIndex
name|idx
init|=
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|root
argument_list|)
decl_stmt|;
name|model
operator|->
name|sort
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|AscendingOrder
argument_list|)
expr_stmt|;
name|model
operator|->
name|sort
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|DescendingOrder
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|idx
operator|.
name|column
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|model
operator|->
name|setRootPath
argument_list|(
name|QDir
operator|::
name|homePath
argument_list|()
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|fileDialogMode
argument_list|)
expr_stmt|;
name|MyFriendFileSystemModel
modifier|*
name|myModel
init|=
operator|new
name|MyFriendFileSystemModel
argument_list|()
decl_stmt|;
name|QTreeView
modifier|*
name|tree
init|=
operator|new
name|QTreeView
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
if|if
condition|(
name|fileDialogMode
condition|)
name|myModel
operator|->
name|d_func
argument_list|()
operator|->
name|disableRecursiveSort
operator|=
literal|true
expr_stmt|;
endif|#
directive|endif
name|QDir
name|dir
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
argument_list|)
decl_stmt|;
comment|//initialize the randomness
name|qsrand
argument_list|(
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
operator|.
name|toTime_t
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|tempName
init|=
name|QLatin1String
argument_list|(
literal|"sortTemp."
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|qrand
argument_list|()
argument_list|)
decl_stmt|;
name|dir
operator|.
name|mkdir
argument_list|(
name|tempName
argument_list|)
expr_stmt|;
name|dir
operator|.
name|cd
argument_list|(
name|tempName
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|dir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|dirPath
init|=
name|dir
operator|.
name|absolutePath
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|dir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|//Create a file that will be at the end when sorting by name (For Mac, the default)
comment|//but if we sort by size descending it will be the first
name|QFile
name|tempFile
argument_list|(
name|dirPath
operator|+
literal|"/plop2.txt"
argument_list|)
decl_stmt|;
name|tempFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
expr_stmt|;
name|QTextStream
name|out
argument_list|(
operator|&
name|tempFile
argument_list|)
decl_stmt|;
name|out
operator|<<
literal|"The magic number is: "
operator|<<
literal|49
operator|<<
literal|"\n"
expr_stmt|;
name|tempFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|QFile
name|tempFile2
argument_list|(
name|dirPath
operator|+
literal|"/plop.txt"
argument_list|)
decl_stmt|;
name|tempFile2
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
expr_stmt|;
name|QTextStream
name|out2
argument_list|(
operator|&
name|tempFile2
argument_list|)
decl_stmt|;
name|out2
operator|<<
literal|"The magic number is : "
operator|<<
literal|49
operator|<<
literal|" but i write some stuff in the file \n"
expr_stmt|;
name|tempFile2
operator|.
name|close
argument_list|()
expr_stmt|;
name|myModel
operator|->
name|setRootPath
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|myModel
operator|->
name|setFilter
argument_list|(
name|QDir
operator|::
name|AllEntries
operator||
name|QDir
operator|::
name|System
operator||
name|QDir
operator|::
name|Hidden
argument_list|)
expr_stmt|;
name|tree
operator|->
name|setSortingEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tree
operator|->
name|setModel
argument_list|(
name|myModel
argument_list|)
expr_stmt|;
name|tree
operator|->
name|show
argument_list|()
expr_stmt|;
name|tree
operator|->
name|resize
argument_list|(
literal|800
argument_list|,
literal|800
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|tree
operator|->
name|header
argument_list|()
operator|->
name|setSortIndicator
argument_list|(
literal|1
argument_list|,
name|Qt
operator|::
name|DescendingOrder
argument_list|)
expr_stmt|;
name|tree
operator|->
name|header
argument_list|()
operator|->
name|setResizeMode
argument_list|(
literal|0
argument_list|,
name|QHeaderView
operator|::
name|ResizeToContents
argument_list|)
expr_stmt|;
name|QStringList
name|dirsToOpen
decl_stmt|;
do|do
block|{
name|dirsToOpen
operator|<<
name|dir
operator|.
name|absolutePath
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|dir
operator|.
name|cdUp
argument_list|()
condition|)
do|;
for|for
control|(
name|int
name|i
init|=
name|dirsToOpen
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|QString
name|path
init|=
name|dirsToOpen
index|[
name|i
index|]
decl_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|tree
operator|->
name|expand
argument_list|(
name|myModel
operator|->
name|index
argument_list|(
name|path
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tree
operator|->
name|expand
argument_list|(
name|myModel
operator|->
name|index
argument_list|(
name|dirPath
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|QModelIndex
name|parent
init|=
name|myModel
operator|->
name|index
argument_list|(
name|dirPath
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QString
argument_list|>
name|expectedOrder
decl_stmt|;
name|expectedOrder
operator|<<
name|tempFile2
operator|.
name|fileName
argument_list|()
operator|<<
name|tempFile
operator|.
name|fileName
argument_list|()
operator|<<
name|dirPath
operator|+
name|QChar
argument_list|(
literal|'/'
argument_list|)
operator|+
literal|"."
operator|<<
name|dirPath
operator|+
name|QChar
argument_list|(
literal|'/'
argument_list|)
operator|+
literal|".."
expr_stmt|;
comment|//File dialog Mode means sub trees are not sorted, only the current root
if|if
condition|(
name|fileDialogMode
condition|)
block|{
comment|// FIXME: we were only able to disableRecursiveSort in developer builds, so we can only
comment|// stably perform this test for developer builds
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|QList
argument_list|<
name|QString
argument_list|>
name|actualRows
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|myModel
operator|->
name|rowCount
argument_list|(
name|parent
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|actualRows
operator|<<
name|dirPath
operator|+
name|QChar
argument_list|(
literal|'/'
argument_list|)
operator|+
name|myModel
operator|->
name|index
argument_list|(
name|i
argument_list|,
literal|1
argument_list|,
name|parent
argument_list|)
operator|.
name|data
argument_list|(
name|QFileSystemModel
operator|::
name|FileNameRole
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|actualRows
operator|!=
name|expectedOrder
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|myModel
operator|->
name|rowCount
argument_list|(
name|parent
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|QTRY_COMPARE
argument_list|(
name|dirPath
operator|+
name|QChar
argument_list|(
literal|'/'
argument_list|)
operator|+
name|myModel
operator|->
name|index
argument_list|(
name|i
argument_list|,
literal|1
argument_list|,
name|parent
argument_list|)
operator|.
name|data
argument_list|(
name|QFileSystemModel
operator|::
name|FileNameRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|expectedOrder
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
operator|delete
name|tree
expr_stmt|;
operator|delete
name|myModel
expr_stmt|;
name|dir
operator|.
name|setPath
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
argument_list|)
expr_stmt|;
name|dir
operator|.
name|cd
argument_list|(
name|tempName
argument_list|)
expr_stmt|;
name|tempFile
operator|.
name|remove
argument_list|()
expr_stmt|;
name|tempFile2
operator|.
name|remove
argument_list|()
expr_stmt|;
name|dir
operator|.
name|cdUp
argument_list|()
expr_stmt|;
name|dir
operator|.
name|rmdir
argument_list|(
name|tempName
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mkdir
name|void
name|tst_QFileSystemModel
operator|::
name|mkdir
parameter_list|()
block|{
name|QString
name|tmp
init|=
name|QDir
operator|::
name|tempPath
argument_list|()
decl_stmt|;
name|QString
name|newFolderPath
init|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|tmp
operator|+
literal|'/'
operator|+
literal|"NewFoldermkdirtest4"
argument_list|)
decl_stmt|;
name|QModelIndex
name|tmpDir
init|=
name|model
operator|->
name|index
argument_list|(
name|tmp
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|tmpDir
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QDir
name|bestatic
argument_list|(
name|newFolderPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|bestatic
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|bestatic
operator|.
name|rmdir
argument_list|(
name|newFolderPath
argument_list|)
condition|)
name|qWarning
argument_list|()
operator|<<
literal|"unable to remove"
operator|<<
name|newFolderPath
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
name|WAITTIME
argument_list|)
expr_stmt|;
block|}
name|model
operator|->
name|mkdir
argument_list|(
name|tmpDir
argument_list|,
literal|"NewFoldermkdirtest3"
argument_list|)
expr_stmt|;
name|model
operator|->
name|mkdir
argument_list|(
name|tmpDir
argument_list|,
literal|"NewFoldermkdirtest5"
argument_list|)
expr_stmt|;
name|QModelIndex
name|idx
init|=
name|model
operator|->
name|mkdir
argument_list|(
name|tmpDir
argument_list|,
literal|"NewFoldermkdirtest4"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|idx
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|oldRow
init|=
name|idx
operator|.
name|row
argument_list|()
decl_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
name|WAITTIME
argument_list|)
expr_stmt|;
name|idx
operator|=
name|model
operator|->
name|index
argument_list|(
name|newFolderPath
argument_list|)
expr_stmt|;
name|QDir
name|cleanup
argument_list|(
name|tmp
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|cleanup
operator|.
name|rmdir
argument_list|(
name|QLatin1String
argument_list|(
literal|"NewFoldermkdirtest3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cleanup
operator|.
name|rmdir
argument_list|(
name|QLatin1String
argument_list|(
literal|"NewFoldermkdirtest5"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|bestatic
operator|.
name|rmdir
argument_list|(
name|newFolderPath
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|0
operator|!=
name|idx
operator|.
name|row
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|oldRow
argument_list|,
name|idx
operator|.
name|row
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|caseSensitivity
name|void
name|tst_QFileSystemModel
operator|::
name|caseSensitivity
parameter_list|()
block|{
name|QString
name|tmp
init|=
name|flatDirTestPath
decl_stmt|;
name|QStringList
name|files
decl_stmt|;
name|files
operator|<<
literal|"a"
operator|<<
literal|"c"
operator|<<
literal|"C"
expr_stmt|;
name|QVERIFY
argument_list|(
name|createFiles
argument_list|(
name|tmp
argument_list|,
name|files
argument_list|)
argument_list|)
expr_stmt|;
name|QModelIndex
name|root
init|=
name|model
operator|->
name|index
argument_list|(
name|tmp
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|->
name|rowCount
argument_list|(
name|root
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|tmp
operator|+
literal|'/'
operator|+
name|files
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_function
DECL|function|Win32LongFileName
name|void
name|tst_QFileSystemModel
operator|::
name|Win32LongFileName
parameter_list|()
block|{
name|QString
name|tmp
init|=
name|flatDirTestPath
decl_stmt|;
name|QStringList
name|files
decl_stmt|;
name|files
operator|<<
literal|"aaaaaaaaaa"
operator|<<
literal|"bbbbbbbbbb"
operator|<<
literal|"cccccccccc"
expr_stmt|;
name|QVERIFY
argument_list|(
name|createFiles
argument_list|(
name|tmp
argument_list|,
name|files
argument_list|)
argument_list|)
expr_stmt|;
name|QModelIndex
name|root
init|=
name|model
operator|->
name|setRootPath
argument_list|(
name|tmp
argument_list|)
decl_stmt|;
name|QTRY_VERIFY
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|tmp
operator|+
name|QLatin1String
argument_list|(
literal|"/aaaaaa~1"
argument_list|)
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|tmp
operator|+
name|QLatin1String
argument_list|(
literal|"/bbbbbb~1"
argument_list|)
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|tmp
operator|+
name|QLatin1String
argument_list|(
literal|"/cccccc~1"
argument_list|)
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|drives_data
name|void
name|tst_QFileSystemModel
operator|::
name|drives_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"current"
argument_list|)
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"slash"
argument_list|)
operator|<<
literal|"/"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"My Computer"
argument_list|)
operator|<<
literal|"My Computer"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drives
name|void
name|tst_QFileSystemModel
operator|::
name|drives
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFileSystemModel
name|model
decl_stmt|;
name|model
operator|.
name|setRootPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|model
operator|.
name|fetchMore
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|QFileInfoList
name|drives
init|=
name|QDir
operator|::
name|drives
argument_list|()
decl_stmt|;
name|int
name|driveCount
init|=
literal|0
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QFileInfo
modifier|&
name|driveRoot
decl|,
name|drives
control|)
if|if
condition|(
name|driveRoot
operator|.
name|exists
argument_list|()
condition|)
name|driveCount
operator|++
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|model
operator|.
name|rowCount
argument_list|()
argument_list|,
name|driveCount
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dirsBeforeFiles
name|void
name|tst_QFileSystemModel
operator|::
name|dirsBeforeFiles
parameter_list|()
block|{
specifier|const
name|QString
name|dirPath
init|=
name|QString
argument_list|(
literal|"%1/task221717_sortedOrder_test_dir"
argument_list|)
operator|.
name|arg
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
argument_list|)
decl_stmt|;
name|QDir
name|dir
argument_list|(
name|dirPath
argument_list|)
decl_stmt|;
comment|// clean up from last time
if|if
condition|(
name|dir
operator|.
name|exists
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|QLatin1Char
name|c
argument_list|(
literal|'a'
operator|+
name|i
argument_list|)
decl_stmt|;
name|dir
operator|.
name|rmdir
argument_list|(
name|QString
argument_list|(
literal|"%1-dir"
argument_list|)
operator|.
name|arg
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|dirPath
operator|+
name|QString
argument_list|(
literal|"/%1-file"
argument_list|)
operator|.
name|arg
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dir
operator|.
name|rmdir
argument_list|(
name|dirPath
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|dir
operator|.
name|mkpath
argument_list|(
name|dirPath
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QDir
argument_list|(
name|dirPath
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|QLatin1Char
name|c
argument_list|(
literal|'a'
operator|+
name|i
argument_list|)
decl_stmt|;
name|dir
operator|.
name|mkdir
argument_list|(
name|QString
argument_list|(
literal|"%1-dir"
argument_list|)
operator|.
name|arg
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|dirPath
operator|+
name|QString
argument_list|(
literal|"/%1-file"
argument_list|)
operator|.
name|arg
argument_list|(
name|c
argument_list|)
argument_list|)
decl_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|QModelIndex
name|root
init|=
name|model
operator|->
name|setRootPath
argument_list|(
name|dirPath
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// allow model to be notified by the file system watcher
comment|// ensure that no file occurs before a directory
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|model
operator|->
name|rowCount
argument_list|(
name|root
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
ifndef|#
directive|ifndef
name|Q_OS_MAC
name|QVERIFY
argument_list|(
name|i
operator|==
literal|0
operator|||
operator|!
operator|(
name|model
operator|->
name|fileInfo
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|i
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
name|root
argument_list|)
argument_list|)
operator|.
name|isFile
argument_list|()
operator|&&
name|model
operator|->
name|fileInfo
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
name|root
argument_list|)
argument_list|)
operator|.
name|isDir
argument_list|()
operator|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|QVERIFY
argument_list|(
name|i
operator|==
literal|0
operator|||
name|model
operator|->
name|fileInfo
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|i
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
name|root
argument_list|)
argument_list|)
operator|.
name|fileName
argument_list|()
operator|<
name|model
operator|->
name|fileInfo
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
name|root
argument_list|)
argument_list|)
operator|.
name|fileName
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function
begin_function
DECL|function|roleNames_data
name|void
name|tst_QFileSystemModel
operator|::
name|roleNames_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"role"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"roleName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"decoration"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|DecorationRole
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"decoration"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"display"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"display"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"fileIcon"
argument_list|)
operator|<<
name|int
argument_list|(
name|QFileSystemModel
operator|::
name|FileIconRole
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"fileIcon"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"filePath"
argument_list|)
operator|<<
name|int
argument_list|(
name|QFileSystemModel
operator|::
name|FilePathRole
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"filePath"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"fileName"
argument_list|)
operator|<<
name|int
argument_list|(
name|QFileSystemModel
operator|::
name|FileNameRole
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"filePermissions"
argument_list|)
operator|<<
name|int
argument_list|(
name|QFileSystemModel
operator|::
name|FilePermissions
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"filePermissions"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|roleNames
name|void
name|tst_QFileSystemModel
operator|::
name|roleNames
parameter_list|()
block|{
name|QFileSystemModel
name|model
decl_stmt|;
name|QHash
argument_list|<
name|int
argument_list|,
name|QByteArray
argument_list|>
name|roles
init|=
name|model
operator|.
name|roleNames
argument_list|()
decl_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|role
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|roles
operator|.
name|contains
argument_list|(
name|role
argument_list|)
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|roleName
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|values
init|=
name|roles
operator|.
name|values
argument_list|(
name|role
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|values
operator|.
name|contains
argument_list|(
name|roleName
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QFileSystemModel
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qfilesystemmodel.moc"
end_include
end_unit
