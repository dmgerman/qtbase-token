begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|"paintcommands.h"
end_include
begin_include
include|#
directive|include
file|<QPainter>
end_include
begin_include
include|#
directive|include
file|<QLibraryInfo>
end_include
begin_include
include|#
directive|include
file|<baselineprotocol.h>
end_include
begin_include
include|#
directive|include
file|<QHash>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_OPENGL
end_ifndef
begin_include
include|#
directive|include
file|<QtOpenGL>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|SRCDIR
end_ifndef
begin_define
DECL|macro|SRCDIR
define|#
directive|define
name|SRCDIR
value|"."
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|tst_Lancelot
class|class
name|tst_Lancelot
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_Lancelot
parameter_list|()
constructor_decl|;
DECL|member|simfail
specifier|static
name|bool
name|simfail
decl_stmt|;
private|private:
DECL|enum|GraphicsEngine
enum|enum
name|GraphicsEngine
block|{
DECL|enumerator|Raster
name|Raster
init|=
literal|0
block|,
DECL|enumerator|OpenGL
name|OpenGL
init|=
literal|1
block|}
enum|;
name|bool
name|setupTestSuite
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|blacklist
parameter_list|)
function_decl|;
name|void
name|runTestSuite
parameter_list|(
name|GraphicsEngine
name|engine
parameter_list|,
name|QImage
operator|::
name|Format
name|format
parameter_list|)
function_decl|;
name|ImageItem
name|render
parameter_list|(
specifier|const
name|ImageItem
modifier|&
name|item
parameter_list|,
name|GraphicsEngine
name|engine
parameter_list|,
name|QImage
operator|::
name|Format
name|format
parameter_list|)
function_decl|;
name|void
name|paint
parameter_list|(
name|QPaintDevice
modifier|*
name|device
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|script
parameter_list|,
specifier|const
name|QString
modifier|&
name|filePath
parameter_list|)
function_decl|;
DECL|member|proto
name|BaselineProtocol
name|proto
decl_stmt|;
DECL|member|baseList
name|ImageItemList
name|baseList
decl_stmt|;
DECL|member|scripts
name|QHash
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
name|scripts
decl_stmt|;
DECL|member|dryRunMode
name|bool
name|dryRunMode
decl_stmt|;
DECL|member|scriptsDir
name|QString
name|scriptsDir
decl_stmt|;
private|private
name|slots
private|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
DECL|function|cleanupTestCase
name|void
name|cleanupTestCase
parameter_list|()
block|{}
name|void
name|testRasterARGB32PM_data
parameter_list|()
function_decl|;
name|void
name|testRasterARGB32PM
parameter_list|()
function_decl|;
name|void
name|testRasterRGB32_data
parameter_list|()
function_decl|;
name|void
name|testRasterRGB32
parameter_list|()
function_decl|;
name|void
name|testRasterRGB16_data
parameter_list|()
function_decl|;
name|void
name|testRasterRGB16
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_OPENGL
name|void
name|testOpenGL_data
parameter_list|()
function_decl|;
name|void
name|testOpenGL
parameter_list|()
function_decl|;
endif|#
directive|endif
block|}
class|;
end_class
begin_decl_stmt
DECL|member|simfail
name|bool
name|tst_Lancelot
operator|::
name|simfail
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|tst_Lancelot
name|tst_Lancelot
operator|::
name|tst_Lancelot
parameter_list|()
block|{ }
end_constructor
begin_function
DECL|function|initTestCase
name|void
name|tst_Lancelot
operator|::
name|initTestCase
parameter_list|()
block|{
comment|// Check and setup the environment. We treat failures because of test environment
comment|// (e.g. script files not found) as just warnings, and not QFAILs, to avoid false negatives
comment|// caused by environment or server instability
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SOMEPLATFORM
argument_list|)
name|QSKIP
argument_list|(
literal|"This test is not supported on this platform."
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|proto
operator|.
name|connect
argument_list|(
name|QLatin1String
argument_list|(
literal|"tst_Lancelot"
argument_list|)
argument_list|,
operator|&
name|dryRunMode
argument_list|)
condition|)
name|QSKIP
argument_list|(
name|qPrintable
argument_list|(
name|proto
operator|.
name|errorMessage
argument_list|()
argument_list|)
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|USE_RUNTIME_DIR
argument_list|)
name|scriptsDir
operator|=
name|QCoreApplication
operator|::
name|applicationDirPath
argument_list|()
operator|+
literal|"/scripts/"
expr_stmt|;
else|#
directive|else
name|scriptsDir
operator|=
name|SRCDIR
literal|"/scripts/"
expr_stmt|;
endif|#
directive|endif
name|QDir
name|qpsDir
argument_list|(
name|scriptsDir
argument_list|)
decl_stmt|;
name|QStringList
name|files
init|=
name|qpsDir
operator|.
name|entryList
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QLatin1String
argument_list|(
literal|"*.qps"
argument_list|)
argument_list|,
name|QDir
operator|::
name|Files
operator||
name|QDir
operator|::
name|Readable
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QWARN
argument_list|(
literal|"No qps script files found in "
operator|+
name|qpsDir
operator|.
name|path
argument_list|()
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
name|QSKIP
argument_list|(
literal|"Aborted due to errors."
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
name|baseList
operator|.
name|resize
argument_list|(
name|files
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|ImageItemList
operator|::
name|iterator
name|it
init|=
name|baseList
operator|.
name|begin
argument_list|()
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|fileName
decl|,
name|files
control|)
block|{
name|QFile
name|file
argument_list|(
name|scriptsDir
operator|+
name|fileName
argument_list|)
decl_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QByteArray
name|cont
init|=
name|file
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|scripts
operator|.
name|insert
argument_list|(
name|fileName
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
name|cont
argument_list|)
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
argument_list|)
expr_stmt|;
name|it
operator|->
name|itemName
operator|=
name|fileName
expr_stmt|;
name|it
operator|->
name|itemChecksum
operator|=
name|qChecksum
argument_list|(
name|cont
operator|.
name|constData
argument_list|()
argument_list|,
name|cont
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|++
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|testRasterARGB32PM_data
name|void
name|tst_Lancelot
operator|::
name|testRasterARGB32PM_data
parameter_list|()
block|{
name|QStringList
name|localBlacklist
decl_stmt|;
if|if
condition|(
operator|!
name|setupTestSuite
argument_list|(
name|localBlacklist
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"Communication with baseline image server failed."
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testRasterARGB32PM
name|void
name|tst_Lancelot
operator|::
name|testRasterARGB32PM
parameter_list|()
block|{
name|runTestSuite
argument_list|(
name|Raster
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testRasterRGB32_data
name|void
name|tst_Lancelot
operator|::
name|testRasterRGB32_data
parameter_list|()
block|{
name|QStringList
name|localBlacklist
decl_stmt|;
if|if
condition|(
operator|!
name|setupTestSuite
argument_list|(
name|localBlacklist
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"Communication with baseline image server failed."
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testRasterRGB32
name|void
name|tst_Lancelot
operator|::
name|testRasterRGB32
parameter_list|()
block|{
name|runTestSuite
argument_list|(
name|Raster
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testRasterRGB16_data
name|void
name|tst_Lancelot
operator|::
name|testRasterRGB16_data
parameter_list|()
block|{
name|QStringList
name|localBlacklist
decl_stmt|;
if|if
condition|(
operator|!
name|setupTestSuite
argument_list|(
name|localBlacklist
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"Communication with baseline image server failed."
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testRasterRGB16
name|void
name|tst_Lancelot
operator|::
name|testRasterRGB16
parameter_list|()
block|{
name|runTestSuite
argument_list|(
name|Raster
argument_list|,
name|QImage
operator|::
name|Format_RGB16
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_OPENGL
end_ifndef
begin_function
DECL|function|testOpenGL_data
name|void
name|tst_Lancelot
operator|::
name|testOpenGL_data
parameter_list|()
block|{
name|QStringList
name|localBlacklist
init|=
name|QStringList
argument_list|()
operator|<<
name|QLatin1String
argument_list|(
literal|"rasterops.qps"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|setupTestSuite
argument_list|(
name|localBlacklist
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"Communication with baseline image server failed."
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testOpenGL
name|void
name|tst_Lancelot
operator|::
name|testOpenGL
parameter_list|()
block|{
name|bool
name|ok
init|=
literal|false
decl_stmt|;
name|QGLWidget
name|glWidget
decl_stmt|;
if|if
condition|(
name|glWidget
operator|.
name|isValid
argument_list|()
operator|&&
name|glWidget
operator|.
name|format
argument_list|()
operator|.
name|directRendering
argument_list|()
operator|&&
operator|(
operator|(
name|QGLFormat
operator|::
name|openGLVersionFlags
argument_list|()
operator|&
name|QGLFormat
operator|::
name|OpenGL_Version_2_0
operator|)
operator|||
operator|(
name|QGLFormat
operator|::
name|openGLVersionFlags
argument_list|()
operator|&
name|QGLFormat
operator|::
name|OpenGL_ES_Version_2_0
operator|)
operator|)
operator|&&
name|QGLFramebufferObject
operator|::
name|hasOpenGLFramebufferObjects
argument_list|()
condition|)
block|{
name|glWidget
operator|.
name|makeCurrent
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|QByteArray
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|glGetString
argument_list|(
name|GL_VERSION
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Mesa"
argument_list|)
condition|)
name|ok
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|ok
condition|)
name|runTestSuite
argument_list|(
name|OpenGL
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
expr_stmt|;
else|else
name|QSKIP
argument_list|(
literal|"System under test does not meet preconditions for GL testing. Skipping."
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|setupTestSuite
name|bool
name|tst_Lancelot
operator|::
name|setupTestSuite
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|blacklist
parameter_list|)
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|ImageItem
argument_list|>
argument_list|(
literal|"baseline"
argument_list|)
expr_stmt|;
name|ImageItemList
name|itemList
argument_list|(
name|baseList
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|proto
operator|.
name|requestBaselineChecksums
argument_list|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
argument_list|,
operator|&
name|itemList
argument_list|)
condition|)
block|{
name|QWARN
argument_list|(
name|qPrintable
argument_list|(
name|proto
operator|.
name|errorMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
foreach|foreach
control|(
specifier|const
name|ImageItem
modifier|&
name|item
decl|,
name|itemList
control|)
block|{
if|if
condition|(
operator|!
name|blacklist
operator|.
name|contains
argument_list|(
name|item
operator|.
name|itemName
argument_list|)
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
name|item
operator|.
name|itemName
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|item
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|runTestSuite
name|void
name|tst_Lancelot
operator|::
name|runTestSuite
parameter_list|(
name|GraphicsEngine
name|engine
parameter_list|,
name|QImage
operator|::
name|Format
name|format
parameter_list|)
block|{
name|QFETCH
argument_list|(
name|ImageItem
argument_list|,
name|baseline
argument_list|)
expr_stmt|;
if|if
condition|(
name|baseline
operator|.
name|status
operator|==
name|ImageItem
operator|::
name|IgnoreItem
condition|)
name|QSKIP
argument_list|(
literal|"Blacklisted by baseline server."
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
name|ImageItem
name|rendered
init|=
name|render
argument_list|(
name|baseline
argument_list|,
name|engine
argument_list|,
name|format
argument_list|)
decl_stmt|;
specifier|static
name|int
name|consecutiveErrs
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|rendered
operator|.
name|image
operator|.
name|isNull
argument_list|()
condition|)
block|{
comment|// Assume an error in the test environment, not Qt
name|QWARN
argument_list|(
literal|"Error: Failed to render image."
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|consecutiveErrs
operator|<
literal|3
condition|)
block|{
name|QSKIP
argument_list|(
literal|"Aborted due to errors."
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consecutiveErrs
operator|=
literal|0
expr_stmt|;
name|QSKIP
argument_list|(
literal|"Too many errors, skipping rest of testfunction."
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|consecutiveErrs
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|baseline
operator|.
name|status
operator|==
name|ImageItem
operator|::
name|BaselineNotFound
condition|)
block|{
if|if
condition|(
operator|!
name|proto
operator|.
name|submitNewBaseline
argument_list|(
name|rendered
argument_list|,
literal|0
argument_list|)
condition|)
name|QWARN
argument_list|(
literal|"Failed to submit new baseline: "
operator|+
name|proto
operator|.
name|errorMessage
argument_list|()
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
name|QSKIP
argument_list|(
literal|"Baseline not found; new baseline created."
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|baseline
operator|.
name|imageChecksums
operator|.
name|contains
argument_list|(
name|rendered
operator|.
name|imageChecksums
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|QByteArray
name|serverMsg
decl_stmt|;
if|if
condition|(
operator|!
name|proto
operator|.
name|submitMismatch
argument_list|(
name|rendered
argument_list|,
operator|&
name|serverMsg
argument_list|)
condition|)
name|serverMsg
operator|=
literal|"Failed to submit mismatching image to server."
expr_stmt|;
if|if
condition|(
name|dryRunMode
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"Dryrun mode, ignoring detected mismatch."
operator|<<
name|serverMsg
expr_stmt|;
else|else
name|QFAIL
argument_list|(
literal|"Rendered image differs from baseline. Report:\n   "
operator|+
name|serverMsg
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|render
name|ImageItem
name|tst_Lancelot
operator|::
name|render
parameter_list|(
specifier|const
name|ImageItem
modifier|&
name|item
parameter_list|,
name|GraphicsEngine
name|engine
parameter_list|,
name|QImage
operator|::
name|Format
name|format
parameter_list|)
block|{
name|ImageItem
name|res
init|=
name|item
decl_stmt|;
name|res
operator|.
name|imageChecksums
operator|.
name|clear
argument_list|()
expr_stmt|;
name|res
operator|.
name|image
operator|=
name|QImage
argument_list|()
expr_stmt|;
name|QString
name|filePath
init|=
name|scriptsDir
operator|+
name|item
operator|.
name|itemName
decl_stmt|;
name|QStringList
name|script
init|=
name|scripts
operator|.
name|value
argument_list|(
name|item
operator|.
name|itemName
argument_list|)
decl_stmt|;
if|if
condition|(
name|engine
operator|==
name|Raster
condition|)
block|{
name|QImage
name|img
argument_list|(
literal|800
argument_list|,
literal|800
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|paint
argument_list|(
operator|&
name|img
argument_list|,
name|script
argument_list|,
name|QFileInfo
argument_list|(
name|filePath
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// eh yuck (filePath stuff)
name|res
operator|.
name|image
operator|=
name|img
expr_stmt|;
name|res
operator|.
name|imageChecksums
operator|.
name|append
argument_list|(
name|ImageItem
operator|::
name|computeChecksum
argument_list|(
name|img
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_OPENGL
block|}
elseif|else
if|if
condition|(
name|engine
operator|==
name|OpenGL
condition|)
block|{
name|QGLWidget
name|glWidget
decl_stmt|;
if|if
condition|(
name|glWidget
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|glWidget
operator|.
name|makeCurrent
argument_list|()
expr_stmt|;
name|QGLFramebufferObjectFormat
name|fboFormat
decl_stmt|;
name|fboFormat
operator|.
name|setSamples
argument_list|(
literal|16
argument_list|)
expr_stmt|;
name|fboFormat
operator|.
name|setAttachment
argument_list|(
name|QGLFramebufferObject
operator|::
name|CombinedDepthStencil
argument_list|)
expr_stmt|;
name|QGLFramebufferObject
name|fbo
argument_list|(
literal|800
argument_list|,
literal|800
argument_list|,
name|fboFormat
argument_list|)
decl_stmt|;
name|paint
argument_list|(
operator|&
name|fbo
argument_list|,
name|script
argument_list|,
name|QFileInfo
argument_list|(
name|filePath
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// eh yuck (filePath stuff)
name|res
operator|.
name|image
operator|=
name|fbo
operator|.
name|toImage
argument_list|()
operator|.
name|convertToFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|res
operator|.
name|imageChecksums
operator|.
name|append
argument_list|(
name|ImageItem
operator|::
name|computeChecksum
argument_list|(
name|res
operator|.
name|image
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
DECL|function|paint
name|void
name|tst_Lancelot
operator|::
name|paint
parameter_list|(
name|QPaintDevice
modifier|*
name|device
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|script
parameter_list|,
specifier|const
name|QString
modifier|&
name|filePath
parameter_list|)
block|{
name|QPainter
name|p
argument_list|(
name|device
argument_list|)
decl_stmt|;
name|PaintCommands
name|pcmd
argument_list|(
name|script
argument_list|,
literal|800
argument_list|,
literal|800
argument_list|)
decl_stmt|;
comment|//pcmd.setShouldDrawText(false);
name|pcmd
operator|.
name|setType
argument_list|(
name|ImageType
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|setPainter
argument_list|(
operator|&
name|p
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|setFilePath
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|runCommands
argument_list|()
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
if|if
condition|(
name|simfail
condition|)
block|{
name|QPainter
name|p2
argument_list|(
name|device
argument_list|)
decl_stmt|;
name|p2
operator|.
name|setPen
argument_list|(
name|QPen
argument_list|(
name|QBrush
argument_list|(
name|Qt
operator|::
name|cyan
argument_list|)
argument_list|,
literal|3
argument_list|,
name|Qt
operator|::
name|DashLine
argument_list|)
argument_list|)
expr_stmt|;
name|p2
operator|.
name|drawLine
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|,
literal|600
argument_list|,
literal|600
argument_list|)
expr_stmt|;
name|p2
operator|.
name|drawLine
argument_list|(
literal|600
argument_list|,
literal|200
argument_list|,
literal|200
argument_list|,
literal|600
argument_list|)
expr_stmt|;
name|simfail
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_function
begin_define
DECL|macro|main
define|#
directive|define
name|main
value|rmain
end_define
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_Lancelot
argument_list|)
end_macro
begin_undef
DECL|macro|main
undef|#
directive|undef
name|main
end_undef
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
name|char
modifier|*
name|fargv
index|[
literal|20
index|]
decl_stmt|;
name|int
name|fargc
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qMin
argument_list|(
name|argc
argument_list|,
literal|19
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|qstrcmp
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|,
literal|"-simfail"
argument_list|)
condition|)
name|tst_Lancelot
operator|::
name|simfail
operator|=
literal|true
expr_stmt|;
else|else
name|fargv
index|[
name|fargc
operator|++
index|]
operator|=
name|argv
index|[
name|i
index|]
expr_stmt|;
block|}
name|fargv
index|[
name|fargc
index|]
operator|=
literal|0
expr_stmt|;
return|return
name|rmain
argument_list|(
name|fargc
argument_list|,
name|fargv
argument_list|)
return|;
block|}
end_function
begin_include
include|#
directive|include
file|"tst_lancelot.moc"
end_include
end_unit
