begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/*  * This programm takes a *.ui file and an output dir as argument in order to  * create a screenshot of the widget defined in the ui file.  *  * The screenshot is saved in the output dir (default current dir), ".png" is  * appended to the ui file name.  */
end_comment
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QWidget>
end_include
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QDir>
end_include
begin_include
include|#
directive|include
file|<iostream>
end_include
begin_using
using|using
namespace|namespace
name|std
namespace|;
end_using
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_QWS
end_ifdef
begin_comment
comment|// we don't compile designer on embedded...
end_comment
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|<QUiLoader>
end_include
begin_comment
comment|/*  * Take the path of an ui file and return appropriate QWidget.  */
end_comment
begin_function
name|QWidget
modifier|*
name|getWidgetFromUiFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileNameUiFile
parameter_list|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"\t\t\t...loading ui file"
operator|<<
name|fileNameUiFile
expr_stmt|;
name|QUiLoader
name|loader
decl_stmt|;
name|QFile
name|uiFile
argument_list|(
name|fileNameUiFile
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|uiFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
name|qDebug
argument_list|(
literal|"\t\tError: QFile.open() failed."
argument_list|)
expr_stmt|;
name|exit
argument_list|(
name|EXIT_FAILURE
argument_list|)
expr_stmt|;
block|}
name|QFileInfo
name|fileInfo
argument_list|(
name|fileNameUiFile
argument_list|)
decl_stmt|;
name|QDir
operator|::
name|setCurrent
argument_list|(
name|fileInfo
operator|.
name|absolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|//for the stylesheet to find their images
name|QWidget
modifier|*
name|ui
init|=
name|loader
operator|.
name|load
argument_list|(
operator|&
name|uiFile
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ui
condition|)
block|{
name|qDebug
argument_list|(
literal|"\t\tError: Quilodader.load() returned NULL pointer."
argument_list|)
expr_stmt|;
name|exit
argument_list|(
name|EXIT_FAILURE
argument_list|)
expr_stmt|;
block|}
name|uiFile
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|ui
return|;
block|}
end_function
begin_comment
comment|/*  * Takes the actual screenshot.  *  * Hint: provide filename without extension, ".png" will be added  */
end_comment
begin_function
name|void
name|makeScreenshot
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
specifier|const
name|QString
modifier|&
name|pathOutputDir
parameter_list|)
block|{
name|QFileInfo
name|fileInfo
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QString
name|realFileName
init|=
name|fileInfo
operator|.
name|completeBaseName
argument_list|()
operator|+
literal|"."
operator|+
name|fileInfo
operator|.
name|suffix
argument_list|()
operator|+
literal|".png"
decl_stmt|;
name|QString
name|realPath
init|=
name|pathOutputDir
operator|+
literal|"/"
operator|+
name|realFileName
decl_stmt|;
comment|//QString realFileName = fileName + ".png";
name|qDebug
argument_list|()
operator|<<
literal|"\t\t\t...Taking screenshot"
operator|<<
name|fileInfo
operator|.
name|absoluteFilePath
argument_list|()
expr_stmt|;
comment|//widget->show();
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QImage
name|originalPixmap
argument_list|(
name|widget
operator|->
name|size
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|widget
operator|->
name|render
argument_list|(
operator|&
name|originalPixmap
argument_list|)
expr_stmt|;
if|if
condition|(
name|originalPixmap
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|qDebug
argument_list|(
literal|"\t\tError: QPixmap::grabWidget() returned a NULL QPixmap."
argument_list|)
expr_stmt|;
name|exit
argument_list|(
name|EXIT_FAILURE
argument_list|)
expr_stmt|;
block|}
comment|//QString fileName = QDir::currentPath() + "/secondwidget." + format;
if|if
condition|(
operator|!
name|originalPixmap
operator|.
name|save
argument_list|(
name|realPath
argument_list|,
literal|"PNG"
argument_list|)
condition|)
block|{
name|qDebug
argument_list|(
literal|"\t\tError: QPixmap.save() failed."
argument_list|)
expr_stmt|;
name|exit
argument_list|(
name|EXIT_FAILURE
argument_list|)
expr_stmt|;
block|}
name|qDebug
argument_list|()
operator|<<
literal|"\t\t\t...Screenshot saved in"
operator|<<
name|realPath
expr_stmt|;
name|widget
operator|->
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*  * Call this if you just want to pass the ui file name and the output dir.  */
end_comment
begin_function
name|void
name|createScreenshotFromUiFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileNameUiFile
parameter_list|,
specifier|const
name|QString
name|pathOutputDir
parameter_list|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"\t\tCreating screenshot from widget defined in"
operator|<<
name|fileNameUiFile
expr_stmt|;
name|QWidget
modifier|*
name|w
init|=
name|getWidgetFromUiFile
argument_list|(
name|fileNameUiFile
argument_list|)
decl_stmt|;
name|makeScreenshot
argument_list|(
name|w
argument_list|,
name|fileNameUiFile
argument_list|,
name|pathOutputDir
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*  * Start here.  */
end_comment
begin_function
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
comment|// check for necessary arguments
if|if
condition|(
name|argc
operator|==
literal|1
condition|)
block|{
name|cout
operator|<<
literal|"Syntax: "
operator|<<
name|argv
index|[
literal|0
index|]
operator|<<
literal|"<path to *.ui file> [output directory]"
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|""
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Takes a *.ui file and an output dir as argument in order to"
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"create a screenshot of the widget defined in the ui file."
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|""
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"The screenshot is saved in the output dir (default current dir),"
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"'.png' is appended to the ui file name."
operator|<<
name|endl
expr_stmt|;
name|exit
argument_list|(
name|EXIT_FAILURE
argument_list|)
expr_stmt|;
block|}
comment|// check for *.ui
name|QString
name|fileName
init|=
name|app
operator|.
name|arguments
argument_list|()
operator|.
name|value
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fileName
operator|.
name|endsWith
argument_list|(
literal|".ui"
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
name|fileName
operator|+
literal|" is not a *.ui file."
expr_stmt|;
name|exit
argument_list|(
name|EXIT_FAILURE
argument_list|)
expr_stmt|;
block|}
comment|// does the file exist?
name|QFile
name|uiFile
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|uiFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
name|fileName
operator|+
literal|" does not exist."
expr_stmt|;
name|exit
argument_list|(
name|EXIT_FAILURE
argument_list|)
expr_stmt|;
block|}
comment|// check output directory
name|QString
name|pathOutputDir
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|argc
operator|>=
literal|3
condition|)
block|{
name|QDir
name|outputDir
init|=
name|app
operator|.
name|arguments
argument_list|()
operator|.
name|value
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|outputDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|pathOutputDir
operator|=
name|outputDir
operator|.
name|absolutePath
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|qDebug
argument_list|()
operator|<<
name|outputDir
operator|.
name|absolutePath
argument_list|()
operator|+
literal|" does not exist or is not a directory."
expr_stmt|;
name|exit
argument_list|(
name|EXIT_FAILURE
argument_list|)
expr_stmt|;
block|}
block|}
comment|// take the screenshot
name|createScreenshotFromUiFile
argument_list|(
name|fileName
argument_list|,
name|pathOutputDir
argument_list|)
expr_stmt|;
name|app
operator|.
name|quit
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
end_unit
