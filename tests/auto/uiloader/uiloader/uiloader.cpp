begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"uiloader.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QDir>
end_include
begin_include
include|#
directive|include
file|<QtCore/QProcess>
end_include
begin_include
include|#
directive|include
file|<QtCore/QSettings>
end_include
begin_include
include|#
directive|include
file|<QtCore/QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QtTest/QSignalSpy>
end_include
begin_include
include|#
directive|include
file|<QTest>
end_include
begin_include
include|#
directive|include
file|<QString>
end_include
begin_include
include|#
directive|include
file|<QHash>
end_include
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_include
include|#
directive|include
file|<QFtp>
end_include
begin_include
include|#
directive|include
file|<QObject>
end_include
begin_include
include|#
directive|include
file|<QHostInfo>
end_include
begin_include
include|#
directive|include
file|<QWidget>
end_include
begin_include
include|#
directive|include
file|<QImage>
end_include
begin_include
include|#
directive|include
file|<QLibraryInfo>
end_include
begin_comment
comment|/*  * Our own QVERIFY since the one from QTest can't be used in non-void functions.  * Just pass the desired return value as third argument.  */
end_comment
begin_define
DECL|macro|QVERIFY3
define|#
directive|define
name|QVERIFY3
parameter_list|(
name|statement
parameter_list|,
name|description
parameter_list|,
name|returnValue
parameter_list|)
define|\
value|do {\     if (statement) {\         if (!QTest::qVerify(true, #statement, (description), __FILE__, __LINE__))\             return returnValue;\     } else {\         if (!QTest::qVerify(false, #statement, (description), __FILE__, __LINE__))\             return returnValue;\     }\ } while (0)
end_define
begin_constructor
DECL|function|uiLoader
name|uiLoader
operator|::
name|uiLoader
parameter_list|(
specifier|const
name|QString
modifier|&
name|_pathToProgram
parameter_list|)
member_init_list|:
name|pathToProgram
argument_list|(
name|_pathToProgram
argument_list|)
block|{
comment|//   initTests();
block|}
end_constructor
begin_comment
comment|/*  * Load the configuration file for your machine.  * Return true if everything was loaded, else false.  *  * If the hostname is 'kayak', the config file should be 'kayak.ini':  *  *  [General]  *  ftpBaseDir=/arthurtest  *  ftpHost=wartburg  *  ftpPass=anonymouspass  *  ftpUser=anonymous  *  output=testresults  *  *  [engines]  *  1\engine=uic  *  size=1  */
end_comment
begin_function
DECL|function|loadConfig
name|bool
name|uiLoader
operator|::
name|loadConfig
parameter_list|(
specifier|const
name|QString
modifier|&
name|filePath
parameter_list|,
name|QString
modifier|*
name|errorMessage
parameter_list|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|" ========== Loading config file "
operator|<<
name|filePath
expr_stmt|;
name|configPath
operator|=
name|filePath
expr_stmt|;
comment|// If there is no config file, dont proceed;
name|QSettings
name|settings
argument_list|(
name|filePath
argument_list|,
name|QSettings
operator|::
name|IniFormat
argument_list|,
name|this
argument_list|)
decl_stmt|;
comment|// all keys available?
name|QStringList
name|keyList
decl_stmt|;
name|keyList
operator|<<
name|QLatin1String
argument_list|(
literal|"output"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"ftpUser"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"ftpPass"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"ftpHost"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"ftpBaseDir"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QString
name|currentKey
init|=
name|keyList
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|settings
operator|.
name|contains
argument_list|(
name|currentKey
argument_list|)
condition|)
block|{
operator|*
name|errorMessage
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Config file '%1' does not contain the required key '%2'."
argument_list|)
operator|.
name|arg
argument_list|(
name|filePath
argument_list|,
name|currentKey
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|qDebug
argument_list|()
operator|<<
literal|"\t\t(I)"
operator|<<
name|currentKey
operator|<<
literal|"\t"
operator|<<
name|settings
operator|.
name|value
argument_list|(
name|currentKey
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
specifier|const
name|int
name|size
init|=
name|settings
operator|.
name|beginReadArray
argument_list|(
name|QLatin1String
argument_list|(
literal|"engines"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|size
condition|)
block|{
operator|*
name|errorMessage
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Config file '%1' does not contain the necessary section engines."
argument_list|)
operator|.
name|arg
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// get the values
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|settings
operator|.
name|setArrayIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"\t\t(I)"
operator|<<
literal|"engine"
operator|<<
literal|"\t"
operator|<<
name|settings
operator|.
name|value
argument_list|(
literal|"engine"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|enginesToTest
operator|.
name|insert
argument_list|(
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"engine"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"Info here please :p"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|settings
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|output
operator|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"output"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|output
operator|+=
name|QDir
operator|::
name|separator
argument_list|()
operator|+
name|QLibraryInfo
operator|::
name|buildKey
argument_list|()
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
name|QString
argument_list|(
name|qVersion
argument_list|()
argument_list|)
expr_stmt|;
name|ftpUser
operator|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"ftpUser"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ftpPass
operator|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"ftpPass"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ftpHost
operator|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"ftpHost"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ftpBaseDir
operator|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"ftpBaseDir"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
name|QHostInfo
operator|::
name|localHostName
argument_list|()
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
operator|.
name|first
argument_list|()
expr_stmt|;
name|threshold
operator|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"threshold"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"\t(I) Values adapted:"
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"\t\t(I)"
operator|<<
literal|"ftpBaseDir"
operator|<<
literal|"\t"
operator|<<
name|ftpBaseDir
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"\t\t(I)"
operator|<<
literal|"output"
operator|<<
literal|"\t"
operator|<<
name|output
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*  * Upload testresults to the server in order to create the new baseline.  */
end_comment
begin_function
DECL|function|createBaseline
name|void
name|uiLoader
operator|::
name|createBaseline
parameter_list|()
block|{
comment|// can't use ftpUploadFile() here
name|qDebug
argument_list|()
operator|<<
literal|" ========== Uploading baseline of only the latest test values "
expr_stmt|;
name|QFtp
name|ftp
decl_stmt|;
name|ftp
operator|.
name|connectToHost
argument_list|(
name|ftpHost
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|login
argument_list|(
name|ftpUser
argument_list|,
name|ftpPass
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|cd
argument_list|(
name|ftpBaseDir
argument_list|)
expr_stmt|;
name|QDir
name|dir
argument_list|(
name|output
argument_list|)
decl_stmt|;
comment|// Upload all the latest test results to the FTP server's baseline directory.
name|QHashIterator
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|i
argument_list|(
name|enginesToTest
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|dir
operator|.
name|cd
argument_list|(
name|i
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|cd
argument_list|(
name|i
operator|.
name|key
argument_list|()
operator|+
literal|".baseline"
argument_list|)
expr_stmt|;
name|dir
operator|.
name|setFilter
argument_list|(
name|QDir
operator|::
name|Files
operator||
name|QDir
operator|::
name|Hidden
operator||
name|QDir
operator|::
name|NoSymLinks
argument_list|)
expr_stmt|;
name|dir
operator|.
name|setNameFilters
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"*.png"
argument_list|)
expr_stmt|;
name|QFileInfoList
name|list
init|=
name|dir
operator|.
name|entryInfoList
argument_list|()
decl_stmt|;
name|dir
operator|.
name|cd
argument_list|(
literal|".."
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|n
operator|++
control|)
block|{
name|QFileInfo
name|fileInfo
init|=
name|list
operator|.
name|at
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|QFile
name|file
argument_list|(
name|QString
argument_list|(
name|output
argument_list|)
operator|+
literal|"/"
operator|+
name|i
operator|.
name|key
argument_list|()
operator|+
literal|"/"
operator|+
name|fileInfo
operator|.
name|fileName
argument_list|()
argument_list|)
decl_stmt|;
name|errorMsg
operator|=
literal|"could not open file "
operator|+
name|fileInfo
operator|.
name|fileName
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|errorMsg
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|fileData
init|=
name|file
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|ftp
operator|.
name|put
argument_list|(
name|fileData
argument_list|,
name|fileInfo
operator|.
name|fileName
argument_list|()
argument_list|,
name|QFtp
operator|::
name|Binary
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"\t(I) Uploading:"
operator|<<
name|fileInfo
operator|.
name|fileName
argument_list|()
operator|<<
literal|"with file size"
operator|<<
name|fileData
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|ftp
operator|.
name|cd
argument_list|(
literal|".."
argument_list|)
expr_stmt|;
block|}
name|ftp
operator|.
name|close
argument_list|()
expr_stmt|;
while|while
condition|(
name|ftp
operator|.
name|hasPendingCommands
argument_list|()
condition|)
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*  * Download baseline from server in order to compare results.  */
end_comment
begin_function
DECL|function|downloadBaseline
name|void
name|uiLoader
operator|::
name|downloadBaseline
parameter_list|()
block|{
name|qDebug
argument_list|()
operator|<<
literal|" ========== Downloading baseline..."
expr_stmt|;
name|QHashIterator
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|i
argument_list|(
name|enginesToTest
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|QString
name|engineName
init|=
name|i
operator|.
name|key
argument_list|()
decl_stmt|;
name|QString
name|dirWithFiles
init|=
name|ftpBaseDir
operator|+
literal|'/'
operator|+
name|engineName
operator|+
literal|".baseline"
decl_stmt|;
name|QString
name|ftpDir
init|=
name|ftpBaseDir
operator|+
literal|'/'
operator|+
name|engineName
operator|+
literal|".baseline"
decl_stmt|;
name|QString
name|saveToDir
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|'/'
operator|+
name|output
operator|+
literal|'/'
operator|+
name|engineName
operator|+
literal|".baseline"
decl_stmt|;
name|ftpList
argument_list|(
name|dirWithFiles
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QString
argument_list|>
name|filesToDownload
argument_list|(
name|lsDirList
argument_list|)
decl_stmt|;
name|ftpGetFiles
argument_list|(
name|filesToDownload
argument_list|,
name|ftpDir
argument_list|,
name|saveToDir
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*  * Enter the dir pathDir local and remove all files (not recursive!)  */
end_comment
begin_function
DECL|function|clearDirectory
name|void
name|uiLoader
operator|::
name|clearDirectory
parameter_list|(
specifier|const
name|QString
modifier|&
name|pathDir
parameter_list|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"\t(I) Clearing directory local: "
operator|<<
name|pathDir
expr_stmt|;
name|QDir
name|dir
argument_list|(
name|pathDir
argument_list|)
decl_stmt|;
name|dir
operator|.
name|setFilter
argument_list|(
name|QDir
operator|::
name|Files
argument_list|)
expr_stmt|;
name|QStringList
name|list
init|=
name|dir
operator|.
name|entryList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|n
operator|++
control|)
block|{
name|QString
name|filePath
init|=
name|pathDir
operator|+
literal|"/"
operator|+
name|list
operator|.
name|at
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|QFile
name|file
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|errorMsg
operator|=
literal|"could not remove file "
operator|+
name|filePath
expr_stmt|;
name|QVERIFY2
argument_list|(
name|file
operator|.
name|remove
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|errorMsg
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*  * Setup the local environment.  */
end_comment
begin_function
DECL|function|setupLocal
name|void
name|uiLoader
operator|::
name|setupLocal
parameter_list|()
block|{
name|qDebug
argument_list|(
literal|" ========== Setting up local environment"
argument_list|)
expr_stmt|;
name|QDir
name|dir
decl_stmt|;
name|errorMsg
operator|=
literal|"could not create path "
operator|+
name|output
expr_stmt|;
name|QVERIFY2
argument_list|(
name|dir
operator|.
name|mkpath
argument_list|(
name|output
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|errorMsg
argument_list|)
argument_list|)
expr_stmt|;
name|QHashIterator
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|j
argument_list|(
name|enginesToTest
argument_list|)
decl_stmt|;
while|while
condition|(
name|j
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|j
operator|.
name|next
argument_list|()
expr_stmt|;
name|QString
name|engineName
init|=
name|j
operator|.
name|key
argument_list|()
decl_stmt|;
name|QString
name|engineDir
init|=
name|output
operator|+
literal|'/'
operator|+
name|engineName
decl_stmt|;
comment|// create<engine> or clean it
name|QString
name|tmpPath
init|=
name|output
operator|+
literal|'/'
operator|+
name|engineName
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|exists
argument_list|(
name|tmpPath
argument_list|)
condition|)
block|{
name|clearDirectory
argument_list|(
name|tmpPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|.
name|mkdir
argument_list|(
name|tmpPath
argument_list|)
expr_stmt|;
block|}
comment|// create *.baseline or clean it
name|tmpPath
operator|=
name|output
operator|+
literal|'/'
operator|+
name|engineName
operator|+
literal|".baseline"
expr_stmt|;
if|if
condition|(
name|dir
operator|.
name|exists
argument_list|(
name|tmpPath
argument_list|)
condition|)
block|{
name|clearDirectory
argument_list|(
name|tmpPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|.
name|mkdir
argument_list|(
name|tmpPath
argument_list|)
expr_stmt|;
block|}
comment|// create *.diff or clean it
name|tmpPath
operator|=
name|output
operator|+
literal|'/'
operator|+
name|engineName
operator|+
literal|".diff"
expr_stmt|;
if|if
condition|(
name|dir
operator|.
name|exists
argument_list|(
name|tmpPath
argument_list|)
condition|)
block|{
name|clearDirectory
argument_list|(
name|tmpPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|.
name|mkdir
argument_list|(
name|tmpPath
argument_list|)
expr_stmt|;
block|}
comment|// create *.failed or clean it
name|tmpPath
operator|=
name|output
operator|+
literal|'/'
operator|+
name|engineName
operator|+
literal|".failed"
expr_stmt|;
if|if
condition|(
name|dir
operator|.
name|exists
argument_list|(
name|tmpPath
argument_list|)
condition|)
block|{
name|clearDirectory
argument_list|(
name|tmpPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|.
name|mkdir
argument_list|(
name|tmpPath
argument_list|)
expr_stmt|;
block|}
block|}
name|qDebug
argument_list|()
operator|<<
literal|"\t(I) Created on local machine:"
operator|<<
name|output
expr_stmt|;
block|}
end_function
begin_comment
comment|/*  * Setup the remote environment.  */
end_comment
begin_function
DECL|function|setupFTP
name|void
name|uiLoader
operator|::
name|setupFTP
parameter_list|()
block|{
name|qDebug
argument_list|(
literal|" ========== Setting up FTP environment"
argument_list|)
expr_stmt|;
comment|// create dirs on ftp server
name|ftpMkDir
argument_list|(
name|ftpBaseDir
argument_list|)
expr_stmt|;
name|ftpBaseDir
operator|+=
literal|"/"
operator|+
name|QLibraryInfo
operator|::
name|buildKey
argument_list|()
expr_stmt|;
name|ftpMkDir
argument_list|(
name|ftpBaseDir
argument_list|)
expr_stmt|;
name|ftpBaseDir
operator|+=
literal|"/"
operator|+
name|QString
argument_list|(
name|qVersion
argument_list|()
argument_list|)
expr_stmt|;
name|ftpMkDir
argument_list|(
name|ftpBaseDir
argument_list|)
expr_stmt|;
name|QString
name|dir
init|=
literal|""
decl_stmt|;
name|ftpList
argument_list|(
name|ftpBaseDir
operator|+
literal|'/'
operator|+
name|dir
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QString
argument_list|>
name|dirListing
argument_list|(
name|lsDirList
argument_list|)
decl_stmt|;
comment|// create *.failed, *.diff if necessary, else remove the files in it
comment|// if *.baseline does not exist, memorize it
name|QHashIterator
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|j
argument_list|(
name|enginesToTest
argument_list|)
decl_stmt|;
while|while
condition|(
name|j
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|j
operator|.
name|next
argument_list|()
expr_stmt|;
name|QString
name|curDir
init|=
name|QString
argument_list|(
name|j
operator|.
name|key
argument_list|()
argument_list|)
operator|+
literal|".failed"
decl_stmt|;
if|if
condition|(
name|dirListing
operator|.
name|contains
argument_list|(
name|curDir
argument_list|)
condition|)
block|{
name|ftpClearDirectory
argument_list|(
name|ftpBaseDir
operator|+
literal|"/"
operator|+
name|curDir
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ftpMkDir
argument_list|(
name|ftpBaseDir
operator|+
literal|"/"
operator|+
name|curDir
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
name|curDir
operator|=
name|QString
argument_list|(
name|j
operator|.
name|key
argument_list|()
argument_list|)
operator|+
literal|".diff"
expr_stmt|;
if|if
condition|(
name|dirListing
operator|.
name|contains
argument_list|(
name|curDir
argument_list|)
condition|)
block|{
name|ftpClearDirectory
argument_list|(
name|ftpBaseDir
operator|+
literal|"/"
operator|+
name|curDir
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ftpMkDir
argument_list|(
name|ftpBaseDir
operator|+
literal|"/"
operator|+
name|curDir
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
name|curDir
operator|=
name|QString
argument_list|(
name|j
operator|.
name|key
argument_list|()
argument_list|)
operator|+
literal|".baseline"
expr_stmt|;
name|lsNeedBaseline
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|dirListing
operator|.
name|contains
argument_list|(
name|curDir
argument_list|)
condition|)
block|{
name|ftpMkDir
argument_list|(
name|ftpBaseDir
operator|+
literal|"/"
operator|+
name|curDir
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|lsNeedBaseline
operator|<<
name|j
operator|.
name|key
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|qDebug
argument_list|()
operator|<<
literal|"\t(I)"
operator|<<
name|curDir
operator|<<
literal|"exists on server."
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*  * Download files listed in fileLisiting from dir pathRemoteDir on sever and save  * them in pathSaveDir.  */
end_comment
begin_function
DECL|function|ftpGetFiles
name|void
name|uiLoader
operator|::
name|ftpGetFiles
parameter_list|(
name|QList
argument_list|<
name|QString
argument_list|>
modifier|&
name|fileListing
parameter_list|,
specifier|const
name|QString
modifier|&
name|pathRemoteDir
parameter_list|,
specifier|const
name|QString
modifier|&
name|pathSaveDir
parameter_list|)
block|{
name|QFtp
name|ftp
decl_stmt|;
name|ftp
operator|.
name|connectToHost
argument_list|(
name|ftpHost
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|login
argument_list|(
name|ftpUser
argument_list|,
name|ftpPass
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fileListing
operator|.
name|empty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileListing
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QFile
name|file
argument_list|(
name|pathSaveDir
operator|+
literal|"/"
operator|+
name|fileListing
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|errorMsg
operator|=
literal|"could not open file for writing: "
operator|+
name|file
operator|.
name|fileName
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|errorMsg
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|ftpFileName
init|=
name|pathRemoteDir
operator|+
literal|'/'
operator|+
name|fileListing
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ftp
operator|.
name|get
argument_list|(
name|ftpFileName
argument_list|,
operator|&
name|file
argument_list|)
expr_stmt|;
comment|//qDebug()<< "\t(I) Got"<< file.fileName();
name|ftp
operator|.
name|list
argument_list|()
expr_stmt|;
comment|//Only there to fill up a slot in the pendingCommands queue.
while|while
condition|(
name|ftp
operator|.
name|hasPendingCommands
argument_list|()
condition|)
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|ftp
operator|.
name|close
argument_list|()
expr_stmt|;
while|while
condition|(
name|ftp
operator|.
name|hasPendingCommands
argument_list|()
condition|)
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|fileListing
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*  * Upload the file filePath to the server and save it there at filePathRemote.  *  * HINT: It seems you can't use this function in a loop, to many connections  *       are established?!  */
end_comment
begin_function
DECL|function|ftpUploadFile
name|bool
name|uiLoader
operator|::
name|ftpUploadFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|filePathRemote
parameter_list|,
specifier|const
name|QString
modifier|&
name|filePath
parameter_list|)
block|{
name|QFile
name|file
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|errorMsg
operator|=
literal|"could not open file: "
operator|+
name|filePath
expr_stmt|;
name|QVERIFY3
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|errorMsg
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QByteArray
name|contents
init|=
name|file
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"\t(I) Uploading file to"
operator|<<
name|filePathRemote
expr_stmt|;
name|QFtp
name|ftp
decl_stmt|;
name|ftp
operator|.
name|connectToHost
argument_list|(
name|ftpHost
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|login
argument_list|(
name|ftpUser
argument_list|,
name|ftpPass
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|put
argument_list|(
name|contents
argument_list|,
name|filePathRemote
argument_list|,
name|QFtp
operator|::
name|Binary
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|close
argument_list|()
expr_stmt|;
while|while
condition|(
name|ftp
operator|.
name|hasPendingCommands
argument_list|()
condition|)
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*  * Enter the dir dir on the server and remove all files (not recursive!)  */
end_comment
begin_function
DECL|function|ftpClearDirectory
name|void
name|uiLoader
operator|::
name|ftpClearDirectory
parameter_list|(
specifier|const
name|QString
modifier|&
name|pathDir
parameter_list|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"\t(I) Clearing directory remote: "
operator|<<
name|pathDir
expr_stmt|;
name|ftpList
argument_list|(
name|pathDir
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QString
argument_list|>
name|dirListing
argument_list|(
name|lsDirList
argument_list|)
decl_stmt|;
name|QFtp
name|ftp
decl_stmt|;
name|ftp
operator|.
name|connectToHost
argument_list|(
name|ftpHost
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|login
argument_list|(
name|ftpUser
argument_list|,
name|ftpPass
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirListing
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|file
init|=
name|dirListing
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"\t(I) Removing"
operator|<<
name|pathDir
operator|+
name|file
expr_stmt|;
name|ftp
operator|.
name|remove
argument_list|(
name|pathDir
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
name|ftp
operator|.
name|close
argument_list|()
expr_stmt|;
while|while
condition|(
name|ftp
operator|.
name|hasPendingCommands
argument_list|()
condition|)
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*  * Get a directory listing from the server in the dir dir.  * You can access it via lsDirList.  */
end_comment
begin_function
DECL|function|ftpList
name|void
name|uiLoader
operator|::
name|ftpList
parameter_list|(
specifier|const
name|QString
modifier|&
name|dir
parameter_list|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"\t(I) Getting list of files in dir"
operator|<<
name|dir
expr_stmt|;
name|lsDirList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QFtp
name|ftp
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|ftp
argument_list|,
name|SIGNAL
argument_list|(
name|listInfo
argument_list|(
specifier|const
name|QUrlInfo
operator|&
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|ftpAddLsEntry
argument_list|(
specifier|const
name|QUrlInfo
operator|&
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//QObject::connect(&ftp, SIGNAL( done( bool ) ), this, SLOT( ftpAddLsDone( bool ) ) );
name|ftp
operator|.
name|connectToHost
argument_list|(
name|ftpHost
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|login
argument_list|(
name|ftpUser
argument_list|,
name|ftpPass
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|list
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|close
argument_list|()
expr_stmt|;
while|while
condition|(
name|ftp
operator|.
name|hasPendingCommands
argument_list|()
condition|)
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*  * Creates a dir on the ftp server.  *  * Hint: If the ftp.mkdir() fails we just assume the dir already exist.  */
end_comment
begin_function
DECL|function|ftpMkDir
name|void
name|uiLoader
operator|::
name|ftpMkDir
parameter_list|(
name|QString
name|pathDir
parameter_list|)
block|{
name|QFtp
name|ftp
decl_stmt|;
name|QSignalSpy
name|commandSpy
argument_list|(
operator|&
name|ftp
argument_list|,
name|SIGNAL
argument_list|(
name|commandFinished
argument_list|(
name|int
argument_list|,
name|bool
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ftp
operator|.
name|connectToHost
argument_list|(
name|ftpHost
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|login
argument_list|(
name|ftpUser
argument_list|,
name|ftpPass
argument_list|)
expr_stmt|;
specifier|const
name|int
name|command
init|=
name|ftp
operator|.
name|mkdir
argument_list|(
name|pathDir
argument_list|)
decl_stmt|;
name|ftp
operator|.
name|close
argument_list|()
expr_stmt|;
while|while
condition|(
name|ftp
operator|.
name|hasPendingCommands
argument_list|()
condition|)
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
comment|// check wheter there was an error or not
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|commandSpy
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|commandSpy
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|command
condition|)
block|{
if|if
condition|(
operator|!
name|commandSpy
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toBool
argument_list|()
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"\t(I) Created at remote machine:"
operator|<<
name|pathDir
expr_stmt|;
block|}
else|else
block|{
name|qDebug
argument_list|()
operator|<<
literal|"\t(I) Could not create on remote machine - probably the dir exists"
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_comment
comment|/*  * Just a slot, needed for ftpList().  */
end_comment
begin_function
DECL|function|ftpAddLsEntry
name|void
name|uiLoader
operator|::
name|ftpAddLsEntry
parameter_list|(
specifier|const
name|QUrlInfo
modifier|&
name|urlInfo
parameter_list|)
block|{
comment|//Just adding the file to the list
name|lsDirList
operator|<<
name|urlInfo
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*  * Return a list of the test case ui files  */
end_comment
begin_function
DECL|function|uiFiles
name|QStringList
name|uiLoader
operator|::
name|uiFiles
parameter_list|()
specifier|const
block|{
name|QString
name|baselinePath
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
decl_stmt|;
name|baselinePath
operator|+=
name|QLatin1String
argument_list|(
literal|"/baseline"
argument_list|)
expr_stmt|;
name|QDir
name|dir
argument_list|(
name|baselinePath
argument_list|)
decl_stmt|;
name|dir
operator|.
name|setFilter
argument_list|(
name|QDir
operator|::
name|Files
argument_list|)
expr_stmt|;
name|dir
operator|.
name|setNameFilters
argument_list|(
name|QStringList
argument_list|(
name|QLatin1String
argument_list|(
literal|"*.ui"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QFileInfoList
name|list
init|=
name|dir
operator|.
name|entryInfoList
argument_list|()
decl_stmt|;
name|QStringList
name|rc
decl_stmt|;
specifier|const
name|QChar
name|slash
init|=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QFileInfo
modifier|&
name|fi
decl|,
name|list
control|)
block|{
name|QString
name|fileAbsolutePath
init|=
name|baselinePath
decl_stmt|;
name|fileAbsolutePath
operator|+=
name|slash
expr_stmt|;
name|fileAbsolutePath
operator|+=
name|fi
operator|.
name|fileName
argument_list|()
expr_stmt|;
name|rc
operator|.
name|push_back
argument_list|(
name|fileAbsolutePath
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
end_function
begin_comment
comment|/*  * The actual method for generating local files that will be compared  * to the baseline.  *  * The external program uiscreenshot/uiscreenshot is called to generate  * *.png files of *.ui files.  */
end_comment
begin_function
DECL|function|executeTests
name|void
name|uiLoader
operator|::
name|executeTests
parameter_list|()
block|{
name|qDebug
argument_list|(
literal|" ========== Executing the tests...[generating pngs from uis]"
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Current Dir"
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"\t(I) Using"
operator|<<
name|pathToProgram
expr_stmt|;
name|QProcess
name|myProcess
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|fileAbsolutePath
decl|,
name|uiFiles
argument_list|()
control|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"\t(I) Current file:"
operator|<<
name|fileAbsolutePath
expr_stmt|;
name|QHashIterator
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|j
argument_list|(
name|enginesToTest
argument_list|)
decl_stmt|;
while|while
condition|(
name|j
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|j
operator|.
name|next
argument_list|()
expr_stmt|;
name|QString
name|outputDirectory
init|=
name|output
operator|+
literal|'/'
operator|+
name|j
operator|.
name|key
argument_list|()
decl_stmt|;
name|QStringList
name|arguments
decl_stmt|;
name|arguments
operator|<<
name|fileAbsolutePath
expr_stmt|;
name|arguments
operator|<<
name|outputDirectory
expr_stmt|;
name|myProcess
operator|.
name|start
argument_list|(
name|pathToProgram
argument_list|,
name|arguments
argument_list|)
expr_stmt|;
comment|// took too long?
name|errorMsg
operator|=
literal|"process does not exited normally (QProcess timeout) -  "
operator|+
name|pathToProgram
expr_stmt|;
name|QVERIFY2
argument_list|(
name|myProcess
operator|.
name|waitForFinished
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|errorMsg
argument_list|)
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"\n"
operator|<<
name|myProcess
operator|.
name|readAllStandardError
argument_list|()
expr_stmt|;
comment|// check exit code/status
name|errorMsg
operator|=
literal|"process does not exited normally - "
operator|+
name|pathToProgram
expr_stmt|;
name|QVERIFY2
argument_list|(
name|myProcess
operator|.
name|exitStatus
argument_list|()
operator|==
name|QProcess
operator|::
name|NormalExit
argument_list|,
name|qPrintable
argument_list|(
name|errorMsg
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|myProcess
operator|.
name|exitCode
argument_list|()
operator|==
name|EXIT_SUCCESS
argument_list|,
name|qPrintable
argument_list|(
name|errorMsg
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*  * Comparing generated files to the baseline.  */
end_comment
begin_function
DECL|function|compare
name|bool
name|uiLoader
operator|::
name|compare
parameter_list|()
block|{
name|qDebug
argument_list|(
literal|" ========== Now comparing the results to the baseline"
argument_list|)
expr_stmt|;
name|QDir
name|dir
argument_list|(
name|output
argument_list|)
decl_stmt|;
name|QHashIterator
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|i
argument_list|(
name|enginesToTest
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|QString
name|engineName
init|=
name|i
operator|.
name|key
argument_list|()
decl_stmt|;
comment|// Perform comparisons between the two directories.
name|dir
operator|.
name|setFilter
argument_list|(
name|QDir
operator|::
name|Files
operator||
name|QDir
operator|::
name|Hidden
operator||
name|QDir
operator|::
name|NoSymLinks
argument_list|)
expr_stmt|;
name|dir
operator|.
name|setNameFilters
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"*.png"
argument_list|)
expr_stmt|;
name|dir
operator|.
name|cd
argument_list|(
name|engineName
operator|+
literal|".baseline"
argument_list|)
expr_stmt|;
name|QFileInfoList
name|list
init|=
name|dir
operator|.
name|entryInfoList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QFileInfo
name|fileInfo
init|=
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|diff
argument_list|(
name|output
argument_list|,
name|engineName
argument_list|,
name|fileInfo
operator|.
name|fileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|diff
name|void
name|uiLoader
operator|::
name|diff
parameter_list|(
specifier|const
name|QString
modifier|&
name|basedir
parameter_list|,
specifier|const
name|QString
modifier|&
name|engine
parameter_list|,
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
block|{
name|QString
name|filePathBaseline
init|=
name|basedir
operator|+
literal|"/"
operator|+
name|engine
operator|+
literal|".baseline/"
operator|+
name|fileName
decl_stmt|;
name|QString
name|filePathGenerated
init|=
name|basedir
operator|+
literal|"/"
operator|+
name|engine
operator|+
literal|'/'
operator|+
name|fileName
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"\t(I) Comparing"
operator|<<
name|filePathBaseline
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"\t(I) Comparing"
operator|<<
name|filePathGenerated
expr_stmt|;
name|QString
name|filePathDiffImage
init|=
name|basedir
operator|+
literal|"/"
operator|+
name|engine
operator|+
literal|".diff/"
operator|+
name|fileName
decl_stmt|;
if|if
condition|(
name|QFile
operator|::
name|exists
argument_list|(
name|filePathGenerated
argument_list|)
condition|)
block|{
name|QString
name|filePathDiffImage
init|=
name|basedir
operator|+
literal|"/"
operator|+
name|engine
operator|+
literal|".diff/"
operator|+
name|fileName
decl_stmt|;
name|int
name|pixelDiff
init|=
name|imgDiff
argument_list|(
name|filePathBaseline
argument_list|,
name|filePathGenerated
argument_list|,
name|filePathDiffImage
argument_list|)
decl_stmt|;
if|if
condition|(
name|pixelDiff
operator|<=
name|threshold
operator|.
name|toInt
argument_list|()
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"\t(I) TEST OK"
expr_stmt|;
name|QVERIFY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qDebug
argument_list|()
operator|<<
literal|"\t(I) TEST FAILED"
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"\t(I)\t...saving baseline in *.failed"
expr_stmt|;
comment|// local: save in *.failed
name|QString
name|filePathFailed
init|=
name|basedir
operator|+
literal|"/"
operator|+
name|engine
operator|+
literal|".failed/"
operator|+
name|fileName
decl_stmt|;
name|errorMsg
operator|=
literal|"Could not save "
operator|+
name|filePathGenerated
operator|+
literal|" to "
operator|+
name|filePathFailed
expr_stmt|;
name|QVERIFY2
argument_list|(
name|QFile
operator|::
name|copy
argument_list|(
name|filePathGenerated
argument_list|,
name|filePathFailed
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|errorMsg
argument_list|)
argument_list|)
expr_stmt|;
comment|// remote: save in *.failed
name|QString
name|filePathFailedRemote
init|=
name|ftpBaseDir
operator|+
literal|"/"
operator|+
name|engine
operator|+
literal|".failed"
operator|+
literal|"/"
operator|+
name|fileName
decl_stmt|;
name|ftpUploadFile
argument_list|(
name|filePathFailedRemote
argument_list|,
name|filePathGenerated
argument_list|)
expr_stmt|;
name|errorMsg
operator|=
literal|"Something broke in the image comparison with  "
operator|+
name|filePathDiffImage
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|(
name|pixelDiff
operator|!=
operator|-
literal|1
operator|)
argument_list|,
name|qPrintable
argument_list|(
name|errorMsg
argument_list|)
argument_list|)
expr_stmt|;
comment|// remote: save in *.diff
name|QString
name|filePathDiffRemote
init|=
name|ftpBaseDir
operator|+
literal|"/"
operator|+
name|engine
operator|+
literal|".diff"
operator|+
literal|"/"
operator|+
name|fileName
decl_stmt|;
name|ftpUploadFile
argument_list|(
name|filePathDiffRemote
argument_list|,
name|filePathDiffImage
argument_list|)
expr_stmt|;
name|QFAIL
argument_list|(
name|qPrintable
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"\t(W) Expected generated file"
operator|<<
name|filePathGenerated
operator|<<
literal|"does not exist."
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"\t(W)   ...saving baseline in *.failed"
expr_stmt|;
comment|// save local
name|QString
name|filePathMissing
init|=
name|basedir
operator|+
literal|'/'
operator|+
name|engine
operator|+
literal|".failed/"
operator|+
name|fileName
operator|+
literal|"_missing"
decl_stmt|;
name|errorMsg
operator|=
literal|"Could not save "
operator|+
name|filePathMissing
expr_stmt|;
name|QVERIFY2
argument_list|(
name|QFile
operator|::
name|copy
argument_list|(
name|filePathBaseline
argument_list|,
name|filePathMissing
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|errorMsg
argument_list|)
argument_list|)
expr_stmt|;
comment|// save remote
name|QString
name|filePathDiffRemote
init|=
name|ftpBaseDir
operator|+
literal|"/"
operator|+
name|engine
operator|+
literal|".diff"
operator|+
literal|"/"
operator|+
name|fileName
decl_stmt|;
name|ftpUploadFile
argument_list|(
name|filePathDiffRemote
argument_list|,
name|filePathBaseline
argument_list|)
expr_stmt|;
name|errorMsg
operator|=
name|filePathGenerated
operator|+
literal|" was not generated, but baseline for this file exists"
expr_stmt|;
name|QVERIFY2
argument_list|(
literal|false
argument_list|,
name|qPrintable
argument_list|(
name|errorMsg
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*  * Execution starts here.  */
end_comment
begin_function
DECL|function|runAutoTests
name|uiLoader
operator|::
name|TestResult
name|uiLoader
operator|::
name|runAutoTests
parameter_list|(
name|QString
modifier|*
name|errorMessage
parameter_list|)
block|{
comment|// SVG needs this widget...
name|QWidget
name|dummy
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Running test on buildkey:"
operator|<<
name|QLibraryInfo
operator|::
name|buildKey
argument_list|()
operator|<<
literal|"  qt version:"
operator|<<
name|qVersion
argument_list|()
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Initializing tests..."
expr_stmt|;
comment|// load config
specifier|const
name|QString
name|configFileName
init|=
name|QHostInfo
operator|::
name|localHostName
argument_list|()
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
operator|.
name|first
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|".ini"
argument_list|)
decl_stmt|;
specifier|const
name|QFileInfo
name|fi
argument_list|(
name|configFileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fi
operator|.
name|isFile
argument_list|()
operator|||
operator|!
name|fi
operator|.
name|isReadable
argument_list|()
condition|)
block|{
operator|*
name|errorMessage
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Config file '%1' does not exist or is not readable."
argument_list|)
operator|.
name|arg
argument_list|(
name|configFileName
argument_list|)
expr_stmt|;
return|return
name|TestNoConfig
return|;
block|}
if|if
condition|(
operator|!
name|loadConfig
argument_list|(
name|configFileName
argument_list|,
name|errorMessage
argument_list|)
condition|)
return|return
name|TestConfigError
return|;
comment|// reset the local environment where the results are stored
name|setupLocal
argument_list|()
expr_stmt|;
comment|// reset the FTP environment where the results are stored
name|setupFTP
argument_list|()
expr_stmt|;
comment|// retrieve the latest test result baseline from the FTP server.
name|downloadBaseline
argument_list|()
expr_stmt|;
comment|// execute tests
name|executeTests
argument_list|()
expr_stmt|;
comment|// upload testresults as new baseline or compare results
if|if
condition|(
name|lsNeedBaseline
operator|.
name|size
argument_list|()
condition|)
name|createBaseline
argument_list|()
expr_stmt|;
else|else
name|compare
argument_list|()
expr_stmt|;
return|return
name|TestRunDone
return|;
block|}
end_function
begin_function
DECL|function|imgDiff
name|int
name|uiLoader
operator|::
name|imgDiff
parameter_list|(
specifier|const
name|QString
name|fileA
parameter_list|,
specifier|const
name|QString
name|fileB
parameter_list|,
specifier|const
name|QString
name|output
parameter_list|)
block|{
comment|//  qDebug()<< "Comparing "<< fileA<< " and "<< fileB<< " outputting to "<< output;
name|QImage
name|imageA
argument_list|(
name|fileA
argument_list|)
decl_stmt|;
name|QImage
name|imageB
argument_list|(
name|fileB
argument_list|)
decl_stmt|;
comment|// Invalid images
if|if
condition|(
name|imageA
operator|.
name|isNull
argument_list|()
operator|||
name|imageB
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Fatal error: unable to open one or more input images."
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|//Choose the largest image size, so that the output can capture the entire diff.
name|QSize
name|largestSize
init|=
name|imageA
operator|.
name|size
argument_list|()
decl_stmt|;
name|QSize
name|otherSize
init|=
name|imageB
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|largestSize
operator|.
name|width
argument_list|()
operator|<
name|otherSize
operator|.
name|width
argument_list|()
condition|)
name|largestSize
operator|.
name|setWidth
argument_list|(
name|otherSize
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|largestSize
operator|.
name|height
argument_list|()
operator|<
name|otherSize
operator|.
name|height
argument_list|()
condition|)
name|largestSize
operator|.
name|setHeight
argument_list|(
name|otherSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|QImage
name|imageDiff
argument_list|(
name|largestSize
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|imageA
operator|=
name|imageA
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
expr_stmt|;
name|imageB
operator|=
name|imageB
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
expr_stmt|;
name|int
name|pixelDiff
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|imageDiff
operator|.
name|height
argument_list|()
condition|;
operator|++
name|y
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|imageDiff
operator|.
name|width
argument_list|()
condition|;
operator|++
name|x
control|)
block|{
comment|//Are the pixels within range? Else, draw a black pixel in diff.
if|if
condition|(
name|imageA
operator|.
name|valid
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|&&
name|imageB
operator|.
name|valid
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
condition|)
block|{
comment|//Both images have a pixel at x,y - are they the same? If not, black pixel in diff.
if|if
condition|(
name|imageA
operator|.
name|pixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|!=
name|imageB
operator|.
name|pixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
condition|)
block|{
name|imageDiff
operator|.
name|setPixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
literal|0xff000000
argument_list|)
expr_stmt|;
name|pixelDiff
operator|++
expr_stmt|;
block|}
else|else
name|imageDiff
operator|.
name|setPixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
literal|0xffffffff
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|imageDiff
operator|.
name|setPixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
literal|0xff000000
argument_list|)
expr_stmt|;
name|pixelDiff
operator|++
expr_stmt|;
block|}
block|}
block|}
name|imageDiff
operator|.
name|setText
argument_list|(
literal|"comment"
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|pixelDiff
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|imageDiff
operator|.
name|save
argument_list|(
name|output
argument_list|,
literal|"PNG"
argument_list|)
condition|)
name|pixelDiff
operator|=
operator|-
literal|1
expr_stmt|;
return|return
name|pixelDiff
return|;
block|}
end_function
end_unit
