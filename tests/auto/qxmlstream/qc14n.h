begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_macro
DECL|function|QT_FORWARD_DECLARE_CLASS
name|QT_FORWARD_DECLARE_CLASS
argument_list|(
argument|QIODevice
argument_list|)
end_macro
begin_macro
name|QT_FORWARD_DECLARE_CLASS
argument_list|(
argument|QString
argument_list|)
end_macro
begin_include
include|#
directive|include
file|<QtCore/QFlags>
end_include
begin_decl_stmt
name|class
name|QC14N
block|{
name|public
label|:
specifier|static
name|bool
name|isEqual
parameter_list|(
name|QIODevice
modifier|*
specifier|const
name|firstDocument
parameter_list|,
name|QIODevice
modifier|*
specifier|const
name|secondDocument
parameter_list|,
name|QString
modifier|*
specifier|const
name|message
init|=
literal|0
parameter_list|)
function_decl|;
name|private
label|:
specifier|static
name|bool
name|isDifferent
parameter_list|(
specifier|const
name|QXmlStreamReader
modifier|&
name|r1
parameter_list|,
specifier|const
name|QXmlStreamReader
modifier|&
name|r2
parameter_list|,
name|QString
modifier|*
specifier|const
name|message
parameter_list|)
function_decl|;
specifier|static
name|bool
name|isAttributesEqual
parameter_list|(
specifier|const
name|QXmlStreamReader
modifier|&
name|r1
parameter_list|,
specifier|const
name|QXmlStreamReader
modifier|&
name|r2
parameter_list|,
name|QString
modifier|*
specifier|const
name|message
parameter_list|)
function_decl|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_include
include|#
directive|include
file|<QXmlStreamReader>
end_include
begin_comment
comment|/*! \internal    \a firstDocument and \a secondDocument must be pointers to opened devices.  */
end_comment
begin_expr_stmt
DECL|function|isEqual
name|bool
name|QC14N
operator|::
name|isEqual
argument_list|(
argument|QIODevice *const firstDocument
argument_list|,
argument|QIODevice *const secondDocument
argument_list|,
argument|QString *const message
argument_list|)
block|{
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
block|;
name|Q_ASSERT_X
argument_list|(
name|firstDocument
argument_list|,
name|Q_FUNC_INFO
argument_list|,
literal|"A valid QIODevice pointer must be supplied"
argument_list|)
block|;
name|Q_ASSERT_X
argument_list|(
name|secondDocument
argument_list|,
name|Q_FUNC_INFO
argument_list|,
literal|"A valid QIODevice pointer must be supplied"
argument_list|)
block|;
name|Q_ASSERT_X
argument_list|(
name|firstDocument
operator|->
name|isReadable
argument_list|()
argument_list|,
name|Q_FUNC_INFO
argument_list|,
literal|"The device must be readable."
argument_list|)
block|;
name|Q_ASSERT_X
argument_list|(
name|secondDocument
operator|->
name|isReadable
argument_list|()
argument_list|,
name|Q_FUNC_INFO
argument_list|,
literal|"The device must be readable."
argument_list|)
block|;
name|QXmlStreamReader
name|r1
argument_list|(
name|firstDocument
argument_list|)
block|;
name|QXmlStreamReader
name|r2
argument_list|(
name|secondDocument
argument_list|)
block|;
while|while
condition|(
operator|!
name|r1
operator|.
name|atEnd
argument_list|()
condition|)
block|{
if|if
condition|(
name|r1
operator|.
name|error
argument_list|()
condition|)
block|{
if|if
condition|(
name|message
condition|)
operator|*
name|message
operator|=
name|r1
operator|.
name|errorString
argument_list|()
expr_stmt|;
return|return
name|false
return|;
block|}
end_expr_stmt
begin_elseif
elseif|else
if|if
condition|(
name|r2
operator|.
name|error
argument_list|()
condition|)
block|{
if|if
condition|(
name|message
condition|)
operator|*
name|message
operator|=
name|r1
operator|.
name|errorString
argument_list|()
expr_stmt|;
return|return
name|false
return|;
block|}
end_elseif
begin_else
else|else
block|{
if|if
condition|(
name|isDifferent
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|,
name|message
argument_list|)
condition|)
return|return
name|true
return|;
block|}
end_else
begin_expr_stmt
name|r1
operator|.
name|readNext
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|r2
operator|.
name|readNext
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}      if
operator|(
operator|!
name|r2
operator|.
name|atEnd
argument_list|()
operator|)
block|{
if|if
condition|(
name|message
condition|)
operator|*
name|message
operator|=
name|QLatin1String
argument_list|(
literal|"Reached the end of the first document, while there was still content left in the second"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|false
return|;
end_return
begin_comment
unit|}
comment|/* And they lived happily ever after. */
end_comment
begin_expr_stmt
unit|return
name|true
expr_stmt|;
end_expr_stmt
begin_comment
unit|}
comment|/*! \internal  */
end_comment
begin_expr_stmt
unit|bool
DECL|function|isAttributesEqual
name|QC14N
operator|::
name|isAttributesEqual
argument_list|(
argument|const QXmlStreamReader&r1
argument_list|,
argument|const QXmlStreamReader&r2
argument_list|,
argument|QString *const message
argument_list|)
block|{
name|Q_UNUSED
argument_list|(
name|message
argument_list|)
block|;
specifier|const
name|QXmlStreamAttributes
operator|&
name|attrs1
operator|=
name|r1
operator|.
name|attributes
argument_list|()
block|;
specifier|const
name|QXmlStreamAttributes
operator|&
name|attrs2
operator|=
name|r2
operator|.
name|attributes
argument_list|()
block|;
specifier|const
name|int
name|len
operator|=
name|attrs1
operator|.
name|size
argument_list|()
block|;
if|if
condition|(
name|len
operator|!=
name|attrs2
operator|.
name|size
argument_list|()
condition|)
return|return
name|false
return|;
end_expr_stmt
begin_for
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|attrs2
operator|.
name|contains
argument_list|(
name|attrs1
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
return|return
name|false
return|;
block|}
end_for
begin_return
return|return
name|true
return|;
end_return
begin_expr_stmt
unit|}  bool
DECL|function|isDifferent
name|QC14N
operator|::
name|isDifferent
argument_list|(
argument|const QXmlStreamReader&r1
argument_list|,
argument|const QXmlStreamReader&r2
argument_list|,
argument|QString *const message
argument_list|)
block|{
comment|// TODO error reporting can be a lot better here.
if|if
condition|(
name|r1
operator|.
name|tokenType
argument_list|()
operator|!=
name|r2
operator|.
name|tokenType
argument_list|()
condition|)
return|return
name|false
return|;
end_expr_stmt
begin_switch
switch|switch
condition|(
name|r1
operator|.
name|tokenType
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|NoToken
case|:
comment|/* Fallthrough. */
case|case
name|QXmlStreamReader
operator|::
name|StartDocument
case|:
comment|/* Fallthrough. */
case|case
name|QXmlStreamReader
operator|::
name|EndDocument
case|:
comment|/* Fallthrough. */
case|case
name|QXmlStreamReader
operator|::
name|DTD
case|:
return|return
name|true
return|;
case|case
name|QXmlStreamReader
operator|::
name|Invalid
case|:
return|return
name|false
return|;
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
block|{
return|return
name|r1
operator|.
name|qualifiedName
argument_list|()
operator|==
name|r2
operator|.
name|qualifiedName
argument_list|()
comment|/* Yes, the namespace test below should be redundant, but with it we                     * trap namespace bugs in QXmlStreamReader, if any. */
operator|&&
name|r1
operator|.
name|namespaceUri
argument_list|()
operator|==
name|r2
operator|.
name|namespaceUri
argument_list|()
operator|&&
name|isAttributesEqual
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|,
name|message
argument_list|)
return|;
block|}
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
block|{
return|return
name|r1
operator|.
name|qualifiedName
argument_list|()
operator|==
name|r2
operator|.
name|qualifiedName
argument_list|()
operator|&&
name|r1
operator|.
name|namespaceUri
argument_list|()
operator|==
name|r2
operator|.
name|namespaceUri
argument_list|()
operator|&&
name|r1
operator|.
name|name
argument_list|()
operator|==
name|r2
operator|.
name|name
argument_list|()
return|;
block|}
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
comment|/* Fallthrough. */
case|case
name|QXmlStreamReader
operator|::
name|Comment
case|:
return|return
name|r1
operator|.
name|text
argument_list|()
operator|==
name|r2
operator|.
name|text
argument_list|()
return|;
case|case
name|QXmlStreamReader
operator|::
name|EntityReference
case|:
case|case
name|QXmlStreamReader
operator|::
name|ProcessingInstruction
case|:
block|{
return|return
name|r1
operator|.
name|processingInstructionTarget
argument_list|()
operator|==
name|r2
operator|.
name|processingInstructionTarget
argument_list|()
operator|&&
name|r2
operator|.
name|processingInstructionData
argument_list|()
operator|==
name|r2
operator|.
name|processingInstructionData
argument_list|()
return|;
block|}
block|}
end_switch
begin_expr_stmt
name|Q_ASSERT_X
argument_list|(
name|false
argument_list|,
name|Q_FUNC_INFO
argument_list|,
literal|"This line should never be reached"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|false
return|;
end_return
unit|}
end_unit
