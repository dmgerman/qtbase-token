begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QDirIterator>
end_include
begin_include
include|#
directive|include
file|<QEventLoop>
end_include
begin_include
include|#
directive|include
file|<QNetworkAccessManager>
end_include
begin_include
include|#
directive|include
file|<QNetworkReply>
end_include
begin_include
include|#
directive|include
file|<QNetworkRequest>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QUrl>
end_include
begin_include
include|#
directive|include
file|<QXmlDefaultHandler>
end_include
begin_include
include|#
directive|include
file|<QXmlStreamReader>
end_include
begin_include
include|#
directive|include
file|"qc14n.h"
end_include
begin_comment
comment|//TESTED_CLASS=QXmlStreamReader QXmlStreamWriter
end_comment
begin_comment
comment|//TESTED_FILES=corelib/xml/stream/qxmlutils.cpp corelib/xml/stream/qxmlstream.cpp corelib/xml/stream/qxmlstream_p.h
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
end_ifdef
begin_define
DECL|macro|SRCDIR
define|#
directive|define
name|SRCDIR
value|""
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QXmlStreamReader::ReadElementTextBehaviour
argument_list|)
end_macro
begin_decl_stmt
DECL|variable|catalogFile
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|catalogFile
init|=
name|SRCDIR
literal|"XML-Test-Suite/xmlconf/finalCatalog.xml"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|expectedRunCount
specifier|static
specifier|const
name|int
name|expectedRunCount
init|=
literal|1646
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|expectedSkipCount
specifier|static
specifier|const
name|int
name|expectedSkipCount
init|=
literal|532
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|best
specifier|static
specifier|inline
name|int
name|best
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|<
literal|0
condition|)
return|return
name|b
return|;
if|if
condition|(
name|b
operator|<
literal|0
condition|)
return|return
name|a
return|;
return|return
name|qMin
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|best
specifier|static
specifier|inline
name|int
name|best
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|,
name|int
name|c
parameter_list|)
block|{
if|if
condition|(
name|a
operator|<
literal|0
condition|)
return|return
name|best
argument_list|(
name|b
argument_list|,
name|c
argument_list|)
return|;
if|if
condition|(
name|b
operator|<
literal|0
condition|)
return|return
name|best
argument_list|(
name|a
argument_list|,
name|c
argument_list|)
return|;
if|if
condition|(
name|c
operator|<
literal|0
condition|)
return|return
name|best
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
return|return
name|qMin
argument_list|(
name|qMin
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|,
name|c
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/**  *  Opens @p filename and returns content produced as per  *  xmlconf/xmltest/canonxml.html.  *  *  @p docType is the DOCTYPE name that the returned output should  *  have, if it doesn't already have one.  */
end_comment
begin_function
DECL|function|makeCanonical
specifier|static
name|QByteArray
name|makeCanonical
parameter_list|(
specifier|const
name|QString
modifier|&
name|filename
parameter_list|,
specifier|const
name|QString
modifier|&
name|docType
parameter_list|,
name|bool
modifier|&
name|hasError
parameter_list|,
name|bool
name|testIncremental
init|=
literal|false
parameter_list|)
block|{
name|QFile
name|file
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QXmlStreamReader
name|reader
decl_stmt|;
name|QByteArray
name|buffer
decl_stmt|;
name|int
name|bufferPos
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|testIncremental
condition|)
name|buffer
operator|=
name|file
operator|.
name|readAll
argument_list|()
expr_stmt|;
else|else
name|reader
operator|.
name|setDevice
argument_list|(
operator|&
name|file
argument_list|)
expr_stmt|;
name|QByteArray
name|outarray
decl_stmt|;
name|QXmlStreamWriter
name|writer
argument_list|(
operator|&
name|outarray
argument_list|)
decl_stmt|;
forever|forever
block|{
while|while
condition|(
operator|!
name|reader
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|reader
operator|.
name|readNext
argument_list|()
expr_stmt|;
if|if
condition|(
name|reader
operator|.
name|isDTD
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|reader
operator|.
name|notationDeclarations
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|dtd
decl_stmt|;
name|QTextStream
name|writeDtd
argument_list|(
operator|&
name|dtd
argument_list|)
decl_stmt|;
name|writeDtd
operator|<<
literal|"<!DOCTYPE "
expr_stmt|;
name|writeDtd
operator|<<
name|docType
expr_stmt|;
name|writeDtd
operator|<<
literal|" ["
expr_stmt|;
name|writeDtd
operator|<<
name|endl
expr_stmt|;
name|QMap
argument_list|<
name|QString
argument_list|,
name|QXmlStreamNotationDeclaration
argument_list|>
name|sortedNotationDeclarations
decl_stmt|;
foreach|foreach
control|(
name|QXmlStreamNotationDeclaration
name|notation
decl|,
name|reader
operator|.
name|notationDeclarations
argument_list|()
control|)
name|sortedNotationDeclarations
operator|.
name|insert
argument_list|(
name|notation
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|notation
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QXmlStreamNotationDeclaration
name|notation
decl|,
name|sortedNotationDeclarations
operator|.
name|values
argument_list|()
control|)
block|{
name|writeDtd
operator|<<
literal|"<!NOTATION "
expr_stmt|;
name|writeDtd
operator|<<
name|notation
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|notation
operator|.
name|publicId
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|writeDtd
operator|<<
literal|" SYSTEM \'"
expr_stmt|;
name|writeDtd
operator|<<
name|notation
operator|.
name|systemId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|writeDtd
operator|<<
literal|"\'"
expr_stmt|;
block|}
else|else
block|{
name|writeDtd
operator|<<
literal|" PUBLIC \'"
expr_stmt|;
name|writeDtd
operator|<<
name|notation
operator|.
name|publicId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|writeDtd
operator|<<
literal|"\'"
expr_stmt|;
if|if
condition|(
operator|!
name|notation
operator|.
name|systemId
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|writeDtd
operator|<<
literal|" \'"
expr_stmt|;
name|writeDtd
operator|<<
name|notation
operator|.
name|systemId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|writeDtd
operator|<<
literal|"\'"
expr_stmt|;
block|}
block|}
name|writeDtd
operator|<<
literal|">"
expr_stmt|;
name|writeDtd
operator|<<
name|endl
expr_stmt|;
block|}
name|writeDtd
operator|<<
literal|"]>"
expr_stmt|;
name|writeDtd
operator|<<
name|endl
expr_stmt|;
name|writer
operator|.
name|writeDTD
argument_list|(
name|dtd
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|reader
operator|.
name|isStartElement
argument_list|()
condition|)
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|reader
operator|.
name|namespaceUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|QMap
argument_list|<
name|QString
argument_list|,
name|QXmlStreamAttribute
argument_list|>
name|sortedAttributes
decl_stmt|;
foreach|foreach
control|(
name|QXmlStreamAttribute
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
name|sortedAttributes
operator|.
name|insert
argument_list|(
name|attribute
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|attribute
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QXmlStreamAttribute
name|attribute
decl|,
name|sortedAttributes
operator|.
name|values
argument_list|()
control|)
name|writer
operator|.
name|writeAttribute
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
comment|// write empty string to avoid having empty xml tags
block|}
elseif|else
if|if
condition|(
name|reader
operator|.
name|isCharacters
argument_list|()
condition|)
block|{
comment|// make canonical
name|QString
name|text
init|=
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|int
name|p
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|i
operator|=
name|best
argument_list|(
name|text
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|10
argument_list|)
argument_list|,
name|p
argument_list|)
argument_list|,
name|text
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|13
argument_list|)
argument_list|,
name|p
argument_list|)
argument_list|,
name|text
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|9
argument_list|)
argument_list|,
name|p
argument_list|)
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|writer
operator|.
name|writeCharacters
argument_list|(
name|text
operator|.
name|mid
argument_list|(
name|p
argument_list|,
name|i
operator|-
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEntityReference
argument_list|(
name|QString
argument_list|(
literal|"#%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|text
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|unicode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|=
name|i
operator|+
literal|1
expr_stmt|;
block|}
name|writer
operator|.
name|writeCharacters
argument_list|(
name|text
operator|.
name|mid
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|reader
operator|.
name|isStartDocument
argument_list|()
operator|||
name|reader
operator|.
name|isEndDocument
argument_list|()
operator|||
name|reader
operator|.
name|isComment
argument_list|()
condition|)
block|{
comment|// canonical does not want any of those
block|}
elseif|else
if|if
condition|(
name|reader
operator|.
name|isProcessingInstruction
argument_list|()
operator|&&
name|reader
operator|.
name|processingInstructionData
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// for some reason canonical wants a space
name|writer
operator|.
name|writeProcessingInstruction
argument_list|(
name|reader
operator|.
name|processingInstructionTarget
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|reader
operator|.
name|hasError
argument_list|()
condition|)
block|{
name|writer
operator|.
name|writeCurrentToken
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|testIncremental
operator|&&
name|bufferPos
operator|<
name|buffer
operator|.
name|size
argument_list|()
condition|)
block|{
name|reader
operator|.
name|addData
argument_list|(
name|QByteArray
argument_list|(
name|buffer
operator|.
name|data
argument_list|()
operator|+
operator|(
name|bufferPos
operator|++
operator|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
name|reader
operator|.
name|hasError
argument_list|()
condition|)
block|{
name|hasError
operator|=
literal|true
expr_stmt|;
name|outarray
operator|+=
literal|"ERROR:"
expr_stmt|;
name|outarray
operator|+=
name|reader
operator|.
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
expr_stmt|;
block|}
else|else
name|hasError
operator|=
literal|false
expr_stmt|;
return|return
name|outarray
return|;
block|}
end_function
begin_comment
comment|/**  * @short Returns the lexical QName of the document element in  * @p document.  *  * It is assumed that @p document is a well-formed XML document.  */
end_comment
begin_function
DECL|function|documentElement
specifier|static
name|QString
name|documentElement
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|document
parameter_list|)
block|{
name|QXmlStreamReader
name|reader
argument_list|(
name|document
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|reader
operator|.
name|atEnd
argument_list|()
condition|)
block|{
if|if
condition|(
name|reader
operator|.
name|isStartElement
argument_list|()
condition|)
return|return
name|reader
operator|.
name|qualifiedName
argument_list|()
operator|.
name|toString
argument_list|()
return|;
name|reader
operator|.
name|readNext
argument_list|()
expr_stmt|;
block|}
name|qFatal
argument_list|(
literal|"The input %s didn't contain an element"
argument_list|,
name|document
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/**  * @short Loads W3C's XML conformance test suite and runs it on QXmlStreamReader.  *  * Since this suite is fairly large, it runs the tests sequentially in order to not  * have them all loaded into memory at once. In this way, the maximum memory usage stays  * low, which means one can run valgrind on this test. However, the drawback is that  * QTestLib's usual error reporting and testing mechanisms are slightly bypassed.  *  * Part of this code is a manual, ad-hoc implementation of xml:base.  *  * @see<a href="http://www.w3.org/XML/Test/">Extensible  * Markup Language (XML) Conformance Test Suites</a>  */
end_comment
begin_class
DECL|class|TestSuiteHandler
class|class
name|TestSuiteHandler
super|:
specifier|public
name|QXmlDefaultHandler
block|{
public|public:
comment|/**      * The first string is the test ID, the second is      * a description of what went wrong.      */
DECL|typedef|GeneralFailure
typedef|typedef
name|QPair
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|GeneralFailure
typedef|;
comment|/**      * The string is the test ID.      */
DECL|member|successes
name|QStringList
name|successes
decl_stmt|;
comment|/**      * The first value is the baseline, while the se      */
DECL|class|MissedBaseline
class|class
name|MissedBaseline
block|{
public|public:
DECL|function|MissedBaseline
name|MissedBaseline
parameter_list|(
specifier|const
name|QString
modifier|&
name|aId
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|aExpected
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|aOutput
parameter_list|)
member_init_list|:
name|id
argument_list|(
name|aId
argument_list|)
member_init_list|,
name|expected
argument_list|(
name|aExpected
argument_list|)
member_init_list|,
name|output
argument_list|(
name|aOutput
argument_list|)
block|{
if|if
condition|(
name|aId
operator|.
name|isEmpty
argument_list|()
condition|)
name|qFatal
argument_list|(
literal|"%s: aId must not be an empty string"
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
block|}
DECL|member|id
name|QString
name|id
decl_stmt|;
DECL|member|expected
name|QByteArray
name|expected
decl_stmt|;
DECL|member|output
name|QByteArray
name|output
decl_stmt|;
block|}
class|;
DECL|member|failures
name|QList
argument_list|<
name|GeneralFailure
argument_list|>
name|failures
decl_stmt|;
DECL|member|missedBaselines
name|QList
argument_list|<
name|MissedBaseline
argument_list|>
name|missedBaselines
decl_stmt|;
comment|/**      * The count of how many tests that were run.      */
DECL|member|runCount
name|int
name|runCount
decl_stmt|;
DECL|member|skipCount
name|int
name|skipCount
decl_stmt|;
comment|/**      * @p baseURI is the the URI of where the catalog file resides.      */
DECL|function|TestSuiteHandler
name|TestSuiteHandler
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|baseURI
parameter_list|)
member_init_list|:
name|runCount
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|skipCount
argument_list|(
literal|0
argument_list|)
block|{
if|if
condition|(
operator|!
name|baseURI
operator|.
name|isValid
argument_list|()
condition|)
name|qFatal
argument_list|(
literal|"%s: baseURI must be valid"
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
name|m_baseURI
operator|.
name|push
argument_list|(
name|baseURI
argument_list|)
expr_stmt|;
block|}
DECL|function|characters
specifier|virtual
name|bool
name|characters
parameter_list|(
specifier|const
name|QString
modifier|&
name|chars
parameter_list|)
block|{
name|m_ch
operator|=
name|chars
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|startElement
specifier|virtual
name|bool
name|startElement
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QXmlAttributes
modifier|&
name|atts
parameter_list|)
block|{
name|m_atts
operator|.
name|push
argument_list|(
name|atts
argument_list|)
expr_stmt|;
specifier|const
name|int
name|i
init|=
name|atts
operator|.
name|index
argument_list|(
name|QLatin1String
argument_list|(
literal|"xml:base"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
operator|-
literal|1
condition|)
name|m_baseURI
operator|.
name|push
argument_list|(
name|m_baseURI
operator|.
name|top
argument_list|()
operator|.
name|resolved
argument_list|(
name|atts
operator|.
name|value
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|endElement
specifier|virtual
name|bool
name|endElement
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QString
modifier|&
name|localName
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|)
block|{
if|if
condition|(
name|localName
operator|==
name|QLatin1String
argument_list|(
literal|"TEST"
argument_list|)
condition|)
block|{
comment|/* We don't want tests for XML 1.1.0, in fact). */
if|if
condition|(
name|m_atts
operator|.
name|top
argument_list|()
operator|.
name|value
argument_list|(
name|QString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"VERSION"
argument_list|)
argument_list|)
operator|==
name|QLatin1String
argument_list|(
literal|"1.1"
argument_list|)
condition|)
block|{
operator|++
name|skipCount
expr_stmt|;
name|m_atts
operator|.
name|pop
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/* We don't want tests that conflict with the namespaces spec. Our parser is a              * namespace-aware parser. */
elseif|else
if|if
condition|(
name|m_atts
operator|.
name|top
argument_list|()
operator|.
name|value
argument_list|(
name|QString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"NAMESPACE"
argument_list|)
argument_list|)
operator|==
name|QLatin1String
argument_list|(
literal|"no"
argument_list|)
condition|)
block|{
operator|++
name|skipCount
expr_stmt|;
name|m_atts
operator|.
name|pop
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|const
name|QString
name|inputFilePath
argument_list|(
name|m_baseURI
operator|.
name|top
argument_list|()
operator|.
name|resolved
argument_list|(
name|m_atts
operator|.
name|top
argument_list|()
operator|.
name|value
argument_list|(
name|QString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"URI"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toLocalFile
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|id
argument_list|(
name|m_atts
operator|.
name|top
argument_list|()
operator|.
name|value
argument_list|(
name|QString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"ID"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|type
argument_list|(
name|m_atts
operator|.
name|top
argument_list|()
operator|.
name|value
argument_list|(
name|QString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"TYPE"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|expectedFilePath
decl_stmt|;
specifier|const
name|int
name|index
init|=
name|m_atts
operator|.
name|top
argument_list|()
operator|.
name|index
argument_list|(
name|QString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"OUTPUT"
argument_list|)
argument_list|)
decl_stmt|;
comment|//qDebug()<< "Running test case:"<< id;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|expectedFilePath
operator|=
name|m_baseURI
operator|.
name|top
argument_list|()
operator|.
name|resolved
argument_list|(
name|m_atts
operator|.
name|top
argument_list|()
operator|.
name|value
argument_list|(
name|QString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"OUTPUT"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toLocalFile
argument_list|()
expr_stmt|;
block|}
comment|/* testcases.dtd: 'No parser should accept a "not-wf" testcase              * unless it's a nonvalidating parser and the test contains              * external entities that the parser doesn't read.'              *              * We also let this apply to "valid", "invalid" and "error" tests, although              * I'm not fully sure this is correct. */
specifier|const
name|QString
name|ents
argument_list|(
name|m_atts
operator|.
name|top
argument_list|()
operator|.
name|value
argument_list|(
name|QString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"ENTITIES"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|m_atts
operator|.
name|pop
argument_list|()
expr_stmt|;
if|if
condition|(
name|ents
operator|==
name|QLatin1String
argument_list|(
literal|"both"
argument_list|)
operator|||
name|ents
operator|==
name|QLatin1String
argument_list|(
literal|"general"
argument_list|)
operator|||
name|ents
operator|==
name|QLatin1String
argument_list|(
literal|"parameter"
argument_list|)
condition|)
block|{
operator|++
name|skipCount
expr_stmt|;
return|return
literal|true
return|;
block|}
operator|++
name|runCount
expr_stmt|;
name|QFile
name|inputFile
argument_list|(
name|inputFilePath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|inputFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|failures
operator|.
name|append
argument_list|(
name|qMakePair
argument_list|(
name|id
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Failed to open input file %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|inputFilePath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|type
operator|==
name|QLatin1String
argument_list|(
literal|"not-wf"
argument_list|)
condition|)
block|{
if|if
condition|(
name|isWellformed
argument_list|(
operator|&
name|inputFile
argument_list|,
name|ParseSinglePass
argument_list|)
condition|)
block|{
name|failures
operator|.
name|append
argument_list|(
name|qMakePair
argument_list|(
name|id
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Failed to flag %1 as not well-formed."
argument_list|)
operator|.
name|arg
argument_list|(
name|inputFilePath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Exit, the incremental test will fail as well, no need to flood the output. */
return|return
literal|true
return|;
block|}
else|else
name|successes
operator|.
name|append
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|isWellformed
argument_list|(
operator|&
name|inputFile
argument_list|,
name|ParseIncrementally
argument_list|)
condition|)
block|{
name|failures
operator|.
name|append
argument_list|(
name|qMakePair
argument_list|(
name|id
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Failed to flag %1 as not well-formed with incremental parsing."
argument_list|)
operator|.
name|arg
argument_list|(
name|inputFilePath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|successes
operator|.
name|append
argument_list|(
name|id
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|QXmlStreamReader
name|reader
argument_list|(
operator|&
name|inputFile
argument_list|)
decl_stmt|;
comment|/* See testcases.dtd which reads: 'Nonvalidating parsers              * must also accept "invalid" testcases, but validating ones must reject them.' */
if|if
condition|(
name|type
operator|==
name|QLatin1String
argument_list|(
literal|"invalid"
argument_list|)
operator|||
name|type
operator|==
name|QLatin1String
argument_list|(
literal|"valid"
argument_list|)
condition|)
block|{
name|QByteArray
name|expected
decl_stmt|;
name|QString
name|docType
decl_stmt|;
comment|/* We only want to compare against a baseline when we have                  * one. Some "invalid"-tests, for instance, doesn't have baselines. */
if|if
condition|(
operator|!
name|expectedFilePath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QFile
name|expectedFile
argument_list|(
name|expectedFilePath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|expectedFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|failures
operator|.
name|append
argument_list|(
name|qMakePair
argument_list|(
name|id
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Failed to open baseline %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|expectedFilePath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|expected
operator|=
name|expectedFile
operator|.
name|readAll
argument_list|()
expr_stmt|;
name|docType
operator|=
name|documentElement
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
else|else
name|docType
operator|=
name|QLatin1String
argument_list|(
literal|"dummy"
argument_list|)
expr_stmt|;
name|bool
name|hasError
init|=
literal|true
decl_stmt|;
name|bool
name|incremental
init|=
literal|false
decl_stmt|;
name|QByteArray
name|input
argument_list|(
name|makeCanonical
argument_list|(
name|inputFilePath
argument_list|,
name|docType
argument_list|,
name|hasError
argument_list|,
name|incremental
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hasError
operator|&&
operator|!
name|expectedFilePath
operator|.
name|isEmpty
argument_list|()
operator|&&
name|input
operator|==
name|expected
condition|)
name|input
operator|=
name|makeCanonical
argument_list|(
name|inputFilePath
argument_list|,
name|docType
argument_list|,
name|hasError
argument_list|,
operator|(
name|incremental
operator|=
literal|true
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasError
condition|)
name|failures
operator|.
name|append
argument_list|(
name|qMakePair
argument_list|(
name|id
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Failed to parse %1%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|incremental
condition|?
literal|"(incremental run only) "
else|:
literal|""
argument_list|)
operator|.
name|arg
argument_list|(
name|inputFilePath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|expectedFilePath
operator|.
name|isEmpty
argument_list|()
operator|&&
name|input
operator|!=
name|expected
condition|)
block|{
name|missedBaselines
operator|.
name|append
argument_list|(
name|MissedBaseline
argument_list|(
name|id
argument_list|,
name|expected
argument_list|,
name|input
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|successes
operator|.
name|append
argument_list|(
name|id
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|QLatin1String
argument_list|(
literal|"error"
argument_list|)
condition|)
block|{
comment|/* Not yet sure about this one. */
comment|// TODO
return|return
literal|true
return|;
block|}
else|else
block|{
name|qFatal
argument_list|(
literal|"The input catalog is invalid."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|localName
operator|==
name|QLatin1String
argument_list|(
literal|"TESTCASES"
argument_list|)
operator|&&
name|m_atts
operator|.
name|top
argument_list|()
operator|.
name|index
argument_list|(
name|QLatin1String
argument_list|(
literal|"xml:base"
argument_list|)
argument_list|)
operator|!=
operator|-
literal|1
condition|)
name|m_baseURI
operator|.
name|pop
argument_list|()
expr_stmt|;
name|m_atts
operator|.
name|pop
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|enum|ParseMode
enum|enum
name|ParseMode
block|{
DECL|enumerator|ParseIncrementally
name|ParseIncrementally
block|,
DECL|enumerator|ParseSinglePass
name|ParseSinglePass
block|}
enum|;
DECL|function|isWellformed
specifier|static
name|bool
name|isWellformed
parameter_list|(
name|QIODevice
modifier|*
specifier|const
name|inputFile
parameter_list|,
specifier|const
name|ParseMode
name|mode
parameter_list|)
block|{
if|if
condition|(
operator|!
name|inputFile
condition|)
name|qFatal
argument_list|(
literal|"%s: inputFile must be a valid QIODevice pointer"
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|inputFile
operator|->
name|isOpen
argument_list|()
condition|)
name|qFatal
argument_list|(
literal|"%s: inputFile must be opened by the caller"
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
operator|!=
name|ParseIncrementally
operator|&&
name|mode
operator|!=
name|ParseSinglePass
condition|)
name|qFatal
argument_list|(
literal|"%s: mode must be either ParseIncrementally or ParseSinglePass"
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
operator|==
name|ParseIncrementally
condition|)
block|{
name|QXmlStreamReader
name|reader
decl_stmt|;
name|QByteArray
name|buffer
decl_stmt|;
name|int
name|bufferPos
init|=
literal|0
decl_stmt|;
name|buffer
operator|=
name|inputFile
operator|->
name|readAll
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
while|while
condition|(
operator|!
name|reader
operator|.
name|atEnd
argument_list|()
condition|)
name|reader
operator|.
name|readNext
argument_list|()
expr_stmt|;
if|if
condition|(
name|bufferPos
operator|<
name|buffer
operator|.
name|size
argument_list|()
condition|)
block|{
operator|++
name|bufferPos
expr_stmt|;
name|reader
operator|.
name|addData
argument_list|(
name|QByteArray
argument_list|(
name|buffer
operator|.
name|data
argument_list|()
operator|+
name|bufferPos
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
break|break;
block|}
return|return
operator|!
name|reader
operator|.
name|hasError
argument_list|()
return|;
block|}
else|else
block|{
name|QXmlStreamReader
name|reader
decl_stmt|;
name|reader
operator|.
name|setDevice
argument_list|(
name|inputFile
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|reader
operator|.
name|atEnd
argument_list|()
condition|)
name|reader
operator|.
name|readNext
argument_list|()
expr_stmt|;
return|return
operator|!
name|reader
operator|.
name|hasError
argument_list|()
return|;
block|}
block|}
private|private:
DECL|member|m_atts
name|QStack
argument_list|<
name|QXmlAttributes
argument_list|>
name|m_atts
decl_stmt|;
DECL|member|m_ch
name|QString
name|m_ch
decl_stmt|;
DECL|member|m_baseURI
name|QStack
argument_list|<
name|QUrl
argument_list|>
name|m_baseURI
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|tst_QXmlStream
class|class
name|tst_QXmlStream
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|tst_QXmlStream
name|tst_QXmlStream
parameter_list|()
member_init_list|:
name|m_handler
argument_list|(
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|QLatin1String
argument_list|(
name|catalogFile
argument_list|)
argument_list|)
argument_list|)
block|{     }
private|private
name|slots
private|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|reportFailures
parameter_list|()
specifier|const
function_decl|;
name|void
name|reportFailures_data
parameter_list|()
function_decl|;
name|void
name|checkBaseline
parameter_list|()
specifier|const
function_decl|;
name|void
name|checkBaseline_data
parameter_list|()
specifier|const
function_decl|;
name|void
name|testReader
parameter_list|()
specifier|const
function_decl|;
name|void
name|testReader_data
parameter_list|()
specifier|const
function_decl|;
name|void
name|reportSuccess
parameter_list|()
specifier|const
function_decl|;
name|void
name|reportSuccess_data
parameter_list|()
specifier|const
function_decl|;
name|void
name|parseXSLTTestSuite
parameter_list|()
specifier|const
function_decl|;
name|void
name|writerHangs
parameter_list|()
specifier|const
function_decl|;
name|void
name|writerAutoFormattingWithComments
parameter_list|()
specifier|const
function_decl|;
name|void
name|writerAutoFormattingWithTabs
parameter_list|()
specifier|const
function_decl|;
name|void
name|writerAutoFormattingWithProcessingInstructions
parameter_list|()
specifier|const
function_decl|;
name|void
name|writerAutoEmptyTags
parameter_list|()
specifier|const
function_decl|;
name|void
name|writeAttributesWithSpace
parameter_list|()
specifier|const
function_decl|;
name|void
name|addExtraNamespaceDeclarations
parameter_list|()
function_decl|;
name|void
name|setEntityResolver
parameter_list|()
function_decl|;
name|void
name|readFromQBuffer
parameter_list|()
specifier|const
function_decl|;
name|void
name|readFromQBufferInvalid
parameter_list|()
specifier|const
function_decl|;
name|void
name|readNextStartElement
parameter_list|()
specifier|const
function_decl|;
name|void
name|readElementText
parameter_list|()
specifier|const
function_decl|;
name|void
name|readElementText_data
parameter_list|()
specifier|const
function_decl|;
name|void
name|crashInUTF16Codec
parameter_list|()
specifier|const
function_decl|;
name|void
name|hasAttributeSignature
parameter_list|()
specifier|const
function_decl|;
name|void
name|hasAttribute
parameter_list|()
specifier|const
function_decl|;
name|void
name|writeWithCodec
parameter_list|()
specifier|const
function_decl|;
name|void
name|writeWithUtf8Codec
parameter_list|()
specifier|const
function_decl|;
name|void
name|writeWithStandalone
parameter_list|()
specifier|const
function_decl|;
name|void
name|entitiesAndWhitespace_1
parameter_list|()
specifier|const
function_decl|;
name|void
name|entitiesAndWhitespace_2
parameter_list|()
specifier|const
function_decl|;
name|void
name|testFalsePrematureError
parameter_list|()
specifier|const
function_decl|;
name|void
name|garbageInXMLPrologDefaultCodec
parameter_list|()
specifier|const
function_decl|;
name|void
name|garbageInXMLPrologUTF8Explicitly
parameter_list|()
specifier|const
function_decl|;
name|void
name|clear
parameter_list|()
specifier|const
function_decl|;
name|void
name|checkCommentIndentation
parameter_list|()
specifier|const
function_decl|;
name|void
name|checkCommentIndentation_data
parameter_list|()
specifier|const
function_decl|;
name|void
name|qtbug9196_crash
parameter_list|()
specifier|const
function_decl|;
name|void
name|hasError
parameter_list|()
specifier|const
function_decl|;
private|private:
specifier|static
name|QByteArray
name|readFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|filename
parameter_list|)
function_decl|;
DECL|member|m_handler
name|TestSuiteHandler
name|m_handler
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|initTestCase
name|void
name|tst_QXmlStream
operator|::
name|initTestCase
parameter_list|()
block|{
name|QFile
name|file
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|catalogFile
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Failed to open the test suite catalog; %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QXmlInputSource
name|source
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|QXmlSimpleReader
name|reader
decl_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
operator|&
name|m_handler
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|reader
operator|.
name|parse
argument_list|(
operator|&
name|source
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|reportFailures
name|void
name|tst_QXmlStream
operator|::
name|reportFailures
parameter_list|()
specifier|const
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|isError
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|description
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|isError
argument_list|,
name|qPrintable
argument_list|(
name|description
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|reportFailures_data
name|void
name|tst_QXmlStream
operator|::
name|reportFailures_data
parameter_list|()
block|{
specifier|const
name|int
name|len
init|=
name|m_handler
operator|.
name|failures
operator|.
name|count
argument_list|()
decl_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"isError"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"description"
argument_list|)
expr_stmt|;
comment|/* We loop over all our failures(if any!), and output them such      * that they appear in the QTestLib log. */
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
name|QTest
operator|::
name|newRow
argument_list|(
name|m_handler
operator|.
name|failures
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|first
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
literal|true
operator|<<
name|m_handler
operator|.
name|failures
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|second
expr_stmt|;
comment|/* We need to add at least one column of test data, otherwise QTestLib complains. */
if|if
condition|(
name|len
operator|==
literal|0
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Whole test suite passed"
argument_list|)
operator|<<
literal|false
operator|<<
name|QString
argument_list|()
expr_stmt|;
comment|/* We compare the test case counts to ensure that we've actually run test cases, that      * the driver hasn't been broken or changed without updating the expected count, and      * similar reasons. */
name|QCOMPARE
argument_list|(
name|m_handler
operator|.
name|runCount
argument_list|,
name|expectedRunCount
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m_handler
operator|.
name|skipCount
argument_list|,
name|expectedSkipCount
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|checkBaseline
name|void
name|tst_QXmlStream
operator|::
name|checkBaseline
parameter_list|()
specifier|const
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|isError
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|output
argument_list|)
expr_stmt|;
if|if
condition|(
name|isError
condition|)
name|QCOMPARE
argument_list|(
name|output
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|checkBaseline_data
name|void
name|tst_QXmlStream
operator|::
name|checkBaseline_data
parameter_list|()
specifier|const
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"isError"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"output"
argument_list|)
expr_stmt|;
specifier|const
name|int
name|len
init|=
name|m_handler
operator|.
name|missedBaselines
operator|.
name|count
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|TestSuiteHandler
operator|::
name|MissedBaseline
modifier|&
name|b
init|=
name|m_handler
operator|.
name|missedBaselines
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|/* We indeed don't know what encoding the content is in so in some cases fromUtf8          * is all wrong, but it's an acceptable guess for error reporting. */
name|QTest
operator|::
name|newRow
argument_list|(
name|b
operator|.
name|id
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
literal|true
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
name|b
operator|.
name|expected
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
name|b
operator|.
name|output
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|len
operator|==
literal|0
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dummy"
argument_list|)
operator|<<
literal|false
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|reportSuccess
name|void
name|tst_QXmlStream
operator|::
name|reportSuccess
parameter_list|()
specifier|const
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|isError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|isError
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|reportSuccess_data
name|void
name|tst_QXmlStream
operator|::
name|reportSuccess_data
parameter_list|()
specifier|const
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"isError"
argument_list|)
expr_stmt|;
specifier|const
name|int
name|len
init|=
name|m_handler
operator|.
name|successes
operator|.
name|count
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
name|QTest
operator|::
name|newRow
argument_list|(
name|m_handler
operator|.
name|successes
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
literal|false
expr_stmt|;
if|if
condition|(
name|len
operator|==
literal|0
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"No test cases succeeded."
argument_list|)
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readFile
name|QByteArray
name|tst_QXmlStream
operator|::
name|readFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|filename
parameter_list|)
block|{
name|QFile
name|file
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QXmlStreamReader
name|reader
decl_stmt|;
name|reader
operator|.
name|setDevice
argument_list|(
operator|&
name|file
argument_list|)
expr_stmt|;
name|QByteArray
name|outarray
decl_stmt|;
name|QTextStream
name|writer
argument_list|(
operator|&
name|outarray
argument_list|)
decl_stmt|;
comment|// We always want UTF-8, and not what the system picks up.
name|writer
operator|.
name|setCodec
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|reader
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|reader
operator|.
name|readNext
argument_list|()
expr_stmt|;
name|writer
operator|<<
name|reader
operator|.
name|tokenString
argument_list|()
operator|<<
literal|"("
expr_stmt|;
if|if
condition|(
name|reader
operator|.
name|isWhitespace
argument_list|()
condition|)
name|writer
operator|<<
literal|" whitespace"
expr_stmt|;
if|if
condition|(
name|reader
operator|.
name|isCDATA
argument_list|()
condition|)
name|writer
operator|<<
literal|" CDATA"
expr_stmt|;
if|if
condition|(
name|reader
operator|.
name|isStartDocument
argument_list|()
operator|&&
name|reader
operator|.
name|isStandaloneDocument
argument_list|()
condition|)
name|writer
operator|<<
literal|" standalone"
expr_stmt|;
if|if
condition|(
operator|!
name|reader
operator|.
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|<<
literal|" text=\""
operator|<<
name|reader
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
operator|<<
literal|"\""
expr_stmt|;
if|if
condition|(
operator|!
name|reader
operator|.
name|processingInstructionTarget
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|<<
literal|" processingInstructionTarget=\""
operator|<<
name|reader
operator|.
name|processingInstructionTarget
argument_list|()
operator|.
name|toString
argument_list|()
operator|<<
literal|"\""
expr_stmt|;
if|if
condition|(
operator|!
name|reader
operator|.
name|processingInstructionData
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|<<
literal|" processingInstructionData=\""
operator|<<
name|reader
operator|.
name|processingInstructionData
argument_list|()
operator|.
name|toString
argument_list|()
operator|<<
literal|"\""
expr_stmt|;
if|if
condition|(
operator|!
name|reader
operator|.
name|dtdName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|<<
literal|" dtdName=\""
operator|<<
name|reader
operator|.
name|dtdName
argument_list|()
operator|.
name|toString
argument_list|()
operator|<<
literal|"\""
expr_stmt|;
if|if
condition|(
operator|!
name|reader
operator|.
name|dtdPublicId
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|<<
literal|" dtdPublicId=\""
operator|<<
name|reader
operator|.
name|dtdPublicId
argument_list|()
operator|.
name|toString
argument_list|()
operator|<<
literal|"\""
expr_stmt|;
if|if
condition|(
operator|!
name|reader
operator|.
name|dtdSystemId
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|<<
literal|" dtdSystemId=\""
operator|<<
name|reader
operator|.
name|dtdSystemId
argument_list|()
operator|.
name|toString
argument_list|()
operator|<<
literal|"\""
expr_stmt|;
if|if
condition|(
operator|!
name|reader
operator|.
name|documentVersion
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|<<
literal|" documentVersion=\""
operator|<<
name|reader
operator|.
name|documentVersion
argument_list|()
operator|.
name|toString
argument_list|()
operator|<<
literal|"\""
expr_stmt|;
if|if
condition|(
operator|!
name|reader
operator|.
name|documentEncoding
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|<<
literal|" documentEncoding=\""
operator|<<
name|reader
operator|.
name|documentEncoding
argument_list|()
operator|.
name|toString
argument_list|()
operator|<<
literal|"\""
expr_stmt|;
if|if
condition|(
operator|!
name|reader
operator|.
name|name
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|<<
literal|" name=\""
operator|<<
name|reader
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|<<
literal|"\""
expr_stmt|;
if|if
condition|(
operator|!
name|reader
operator|.
name|namespaceUri
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|<<
literal|" namespaceUri=\""
operator|<<
name|reader
operator|.
name|namespaceUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|<<
literal|"\""
expr_stmt|;
if|if
condition|(
operator|!
name|reader
operator|.
name|qualifiedName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|<<
literal|" qualifiedName=\""
operator|<<
name|reader
operator|.
name|qualifiedName
argument_list|()
operator|.
name|toString
argument_list|()
operator|<<
literal|"\""
expr_stmt|;
if|if
condition|(
operator|!
name|reader
operator|.
name|prefix
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|<<
literal|" prefix=\""
operator|<<
name|reader
operator|.
name|prefix
argument_list|()
operator|.
name|toString
argument_list|()
operator|<<
literal|"\""
expr_stmt|;
if|if
condition|(
name|reader
operator|.
name|attributes
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
foreach|foreach
control|(
name|QXmlStreamAttribute
name|attribute
decl|,
name|reader
operator|.
name|attributes
argument_list|()
control|)
block|{
name|writer
operator|<<
name|endl
operator|<<
literal|"    Attribute("
expr_stmt|;
if|if
condition|(
operator|!
name|attribute
operator|.
name|name
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|<<
literal|" name=\""
operator|<<
name|attribute
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|<<
literal|"\""
expr_stmt|;
if|if
condition|(
operator|!
name|attribute
operator|.
name|namespaceUri
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|<<
literal|" namespaceUri=\""
operator|<<
name|attribute
operator|.
name|namespaceUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|<<
literal|"\""
expr_stmt|;
if|if
condition|(
operator|!
name|attribute
operator|.
name|qualifiedName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|<<
literal|" qualifiedName=\""
operator|<<
name|attribute
operator|.
name|qualifiedName
argument_list|()
operator|.
name|toString
argument_list|()
operator|<<
literal|"\""
expr_stmt|;
if|if
condition|(
operator|!
name|attribute
operator|.
name|prefix
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|<<
literal|" prefix=\""
operator|<<
name|attribute
operator|.
name|prefix
argument_list|()
operator|.
name|toString
argument_list|()
operator|<<
literal|"\""
expr_stmt|;
if|if
condition|(
operator|!
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|<<
literal|" value=\""
operator|<<
name|attribute
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
operator|<<
literal|"\""
expr_stmt|;
name|writer
operator|<<
literal|" )"
operator|<<
name|endl
expr_stmt|;
block|}
block|}
if|if
condition|(
name|reader
operator|.
name|namespaceDeclarations
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
foreach|foreach
control|(
name|QXmlStreamNamespaceDeclaration
name|namespaceDeclaration
decl|,
name|reader
operator|.
name|namespaceDeclarations
argument_list|()
control|)
block|{
name|writer
operator|<<
name|endl
operator|<<
literal|"    NamespaceDeclaration("
expr_stmt|;
if|if
condition|(
operator|!
name|namespaceDeclaration
operator|.
name|prefix
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|<<
literal|" prefix=\""
operator|<<
name|namespaceDeclaration
operator|.
name|prefix
argument_list|()
operator|.
name|toString
argument_list|()
operator|<<
literal|"\""
expr_stmt|;
if|if
condition|(
operator|!
name|namespaceDeclaration
operator|.
name|namespaceUri
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|<<
literal|" namespaceUri=\""
operator|<<
name|namespaceDeclaration
operator|.
name|namespaceUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|<<
literal|"\""
expr_stmt|;
name|writer
operator|<<
literal|" )"
operator|<<
name|endl
expr_stmt|;
block|}
block|}
if|if
condition|(
name|reader
operator|.
name|notationDeclarations
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
foreach|foreach
control|(
name|QXmlStreamNotationDeclaration
name|notationDeclaration
decl|,
name|reader
operator|.
name|notationDeclarations
argument_list|()
control|)
block|{
name|writer
operator|<<
name|endl
operator|<<
literal|"    NotationDeclaration("
expr_stmt|;
if|if
condition|(
operator|!
name|notationDeclaration
operator|.
name|name
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|<<
literal|" name=\""
operator|<<
name|notationDeclaration
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|<<
literal|"\""
expr_stmt|;
if|if
condition|(
operator|!
name|notationDeclaration
operator|.
name|systemId
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|<<
literal|" systemId=\""
operator|<<
name|notationDeclaration
operator|.
name|systemId
argument_list|()
operator|.
name|toString
argument_list|()
operator|<<
literal|"\""
expr_stmt|;
if|if
condition|(
operator|!
name|notationDeclaration
operator|.
name|publicId
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|<<
literal|" publicId=\""
operator|<<
name|notationDeclaration
operator|.
name|publicId
argument_list|()
operator|.
name|toString
argument_list|()
operator|<<
literal|"\""
expr_stmt|;
name|writer
operator|<<
literal|" )"
operator|<<
name|endl
expr_stmt|;
block|}
block|}
if|if
condition|(
name|reader
operator|.
name|entityDeclarations
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
foreach|foreach
control|(
name|QXmlStreamEntityDeclaration
name|entityDeclaration
decl|,
name|reader
operator|.
name|entityDeclarations
argument_list|()
control|)
block|{
name|writer
operator|<<
name|endl
operator|<<
literal|"    EntityDeclaration("
expr_stmt|;
if|if
condition|(
operator|!
name|entityDeclaration
operator|.
name|name
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|<<
literal|" name=\""
operator|<<
name|entityDeclaration
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|<<
literal|"\""
expr_stmt|;
if|if
condition|(
operator|!
name|entityDeclaration
operator|.
name|notationName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|<<
literal|" notationName=\""
operator|<<
name|entityDeclaration
operator|.
name|notationName
argument_list|()
operator|.
name|toString
argument_list|()
operator|<<
literal|"\""
expr_stmt|;
if|if
condition|(
operator|!
name|entityDeclaration
operator|.
name|systemId
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|<<
literal|" systemId=\""
operator|<<
name|entityDeclaration
operator|.
name|systemId
argument_list|()
operator|.
name|toString
argument_list|()
operator|<<
literal|"\""
expr_stmt|;
if|if
condition|(
operator|!
name|entityDeclaration
operator|.
name|publicId
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|<<
literal|" publicId=\""
operator|<<
name|entityDeclaration
operator|.
name|publicId
argument_list|()
operator|.
name|toString
argument_list|()
operator|<<
literal|"\""
expr_stmt|;
if|if
condition|(
operator|!
name|entityDeclaration
operator|.
name|value
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|writer
operator|<<
literal|" value=\""
operator|<<
name|entityDeclaration
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
operator|<<
literal|"\""
expr_stmt|;
name|writer
operator|<<
literal|" )"
operator|<<
name|endl
expr_stmt|;
block|}
block|}
name|writer
operator|<<
literal|" )"
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
name|reader
operator|.
name|hasError
argument_list|()
condition|)
name|writer
operator|<<
literal|"ERROR: "
operator|<<
name|reader
operator|.
name|errorString
argument_list|()
operator|<<
name|endl
expr_stmt|;
return|return
name|outarray
return|;
block|}
end_function
begin_function
DECL|function|testReader
name|void
name|tst_QXmlStream
operator|::
name|testReader
parameter_list|()
specifier|const
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|ref
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|QByteArray
name|reference
init|=
name|readFile
argument_list|(
name|xml
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|write
argument_list|(
name|reference
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|reference
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|file
operator|.
name|readAll
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|qxmlstream
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|readFile
argument_list|(
name|xml
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|qxmlstream
argument_list|,
name|reference
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|testReader_data
name|void
name|tst_QXmlStream
operator|::
name|testReader_data
parameter_list|()
specifier|const
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"xml"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"ref"
argument_list|)
expr_stmt|;
name|QDir
name|dir
decl_stmt|;
name|dir
operator|.
name|cd
argument_list|(
name|SRCDIR
literal|"data/"
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QString
name|filename
decl|,
name|dir
operator|.
name|entryList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"*.xml"
argument_list|)
control|)
block|{
name|QString
name|reference
init|=
name|QFileInfo
argument_list|(
name|filename
argument_list|)
operator|.
name|baseName
argument_list|()
operator|+
literal|".ref"
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|dir
operator|.
name|filePath
argument_list|(
name|filename
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
operator|<<
name|dir
operator|.
name|filePath
argument_list|(
name|filename
argument_list|)
operator|<<
name|dir
operator|.
name|filePath
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|parseXSLTTestSuite
name|void
name|tst_QXmlStream
operator|::
name|parseXSLTTestSuite
parameter_list|()
specifier|const
block|{
comment|/* We disable this test for now, so it doesn't show up as an XFAIL. */
if|#
directive|if
literal|0
block|QEXPECT_FAIL("", "Two problems needs to be solved in order to enable this test: \n"                      "* The XSLT suite is 69 MB large, which is quite a lot compared to the existing XML suite on 2 mb.\n"                      "* We need a c14n-like implementation in order to compare the outputs.", Abort);     QVERIFY(false);
comment|/* We don't yet know this. TODO */
block|int xsltExpectedRunCount = -1;      QStringList nameFilters;     nameFilters.append("*.xsl");     nameFilters.append("*.xml");      QDirIterator dirIterator("XSLT-Test-Suite/", nameFilters,                              QDir::AllEntries, QDirIterator::Subdirectories);      int filesParsed = 0;      while(dirIterator.hasNext())     {         dirIterator.next();          const QString fp(dirIterator.filePath());         qDebug()<< "Found"<< fp;          QFile inputFile(fp);         QVERIFY(inputFile.open(QIODevice::ReadOnly));
comment|/* Read in and write out to the QByteArray. */
block|QByteArray outputArray;         {             QXmlStreamReader reader(&inputFile);              QXmlStreamWriter writer(&outputArray);              while(!reader.atEnd())             {                 writer.writeCurrentToken(reader);                 reader.readNext();                  QVERIFY2(!reader.hasError(), qPrintable(reader.errorString()));             }
comment|/* Might be we got an error here, but we don't care. */
block|}
comment|/* Read in the two files, and compare them. */
block|{             QBuffer outputBuffer(&outputArray);             outputBuffer.open(QIODevice::ReadOnly);             inputFile.close();             inputFile.open(QIODevice::ReadOnly);              QString message;             const bool isEqual = QC14N::isEqual(&inputFile,&outputBuffer,&message);              QVERIFY2(isEqual, message.toLatin1().constData());              ++filesParsed;         }     }      QCOMPARE(xsltExpectedRunCount, filesParsed);
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|addExtraNamespaceDeclarations
name|void
name|tst_QXmlStream
operator|::
name|addExtraNamespaceDeclarations
parameter_list|()
block|{
specifier|const
name|char
modifier|*
name|data
init|=
literal|"<bla><undeclared:foo/><undeclared_too:foo/></bla>"
decl_stmt|;
block|{
name|QXmlStreamReader
name|xml
argument_list|(
name|data
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|xml
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|xml
operator|.
name|readNext
argument_list|()
expr_stmt|;
block|}
name|QVERIFY2
argument_list|(
name|xml
operator|.
name|hasError
argument_list|()
argument_list|,
literal|"namespaces undeclared"
argument_list|)
expr_stmt|;
block|}
block|{
name|QXmlStreamReader
name|xml
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|xml
operator|.
name|addExtraNamespaceDeclaration
argument_list|(
name|QXmlStreamNamespaceDeclaration
argument_list|(
literal|"undeclared"
argument_list|,
literal|"blabla"
argument_list|)
argument_list|)
expr_stmt|;
name|xml
operator|.
name|addExtraNamespaceDeclaration
argument_list|(
name|QXmlStreamNamespaceDeclaration
argument_list|(
literal|"undeclared_too"
argument_list|,
literal|"foofoo"
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|xml
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|xml
operator|.
name|readNext
argument_list|()
expr_stmt|;
block|}
name|QVERIFY2
argument_list|(
operator|!
name|xml
operator|.
name|hasError
argument_list|()
argument_list|,
name|xml
operator|.
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|EntityResolver
class|class
name|EntityResolver
super|:
specifier|public
name|QXmlStreamEntityResolver
block|{
public|public:
DECL|function|resolveUndeclaredEntity
name|QString
name|resolveUndeclaredEntity
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
specifier|static
name|int
name|count
init|=
literal|0
decl_stmt|;
return|return
name|name
operator|.
name|toUpper
argument_list|()
operator|+
name|QString
operator|::
name|number
argument_list|(
operator|++
name|count
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|setEntityResolver
name|void
name|tst_QXmlStream
operator|::
name|setEntityResolver
parameter_list|()
block|{
specifier|const
name|char
modifier|*
name|data
init|=
literal|"<bla foo=\"&undeclared;\">&undeclared_too;</bla>"
decl_stmt|;
block|{
name|QXmlStreamReader
name|xml
argument_list|(
name|data
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|xml
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|xml
operator|.
name|readNext
argument_list|()
expr_stmt|;
block|}
name|QVERIFY2
argument_list|(
name|xml
operator|.
name|hasError
argument_list|()
argument_list|,
literal|"undeclared entities"
argument_list|)
expr_stmt|;
block|}
block|{
name|QString
name|foo
decl_stmt|;
name|QString
name|bla_text
decl_stmt|;
name|QXmlStreamReader
name|xml
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|EntityResolver
name|resolver
decl_stmt|;
name|xml
operator|.
name|setEntityResolver
argument_list|(
operator|&
name|resolver
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|xml
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|xml
operator|.
name|readNext
argument_list|()
expr_stmt|;
if|if
condition|(
name|xml
operator|.
name|isStartElement
argument_list|()
condition|)
name|foo
operator|=
name|xml
operator|.
name|attributes
argument_list|()
operator|.
name|value
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|xml
operator|.
name|isCharacters
argument_list|()
condition|)
name|bla_text
operator|+=
name|xml
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|QVERIFY2
argument_list|(
operator|!
name|xml
operator|.
name|hasError
argument_list|()
argument_list|,
name|xml
operator|.
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|foo
argument_list|,
name|QLatin1String
argument_list|(
literal|"UNDECLARED1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bla_text
argument_list|,
name|QLatin1String
argument_list|(
literal|"UNDECLARED_TOO2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|testFalsePrematureError
name|void
name|tst_QXmlStream
operator|::
name|testFalsePrematureError
parameter_list|()
specifier|const
comment|// task 179320
block|{
specifier|const
name|char
modifier|*
name|illegal_start
init|=
literal|"illegal<sta"
decl_stmt|;
specifier|const
name|char
modifier|*
name|legal_start
init|=
literal|"<sta"
decl_stmt|;
specifier|const
name|char
modifier|*
name|end
init|=
literal|"rt/>"
decl_stmt|;
block|{
name|QXmlStreamReader
name|xml
argument_list|(
literal|""
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|xml
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|xml
operator|.
name|readNext
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|xml
operator|.
name|error
argument_list|()
operator|==
name|QXmlStreamReader
operator|::
name|PrematureEndOfDocumentError
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|xml
operator|.
name|errorString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"Premature end of document."
argument_list|)
argument_list|)
expr_stmt|;
name|xml
operator|.
name|addData
argument_list|(
name|legal_start
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|xml
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|xml
operator|.
name|readNext
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|xml
operator|.
name|error
argument_list|()
operator|==
name|QXmlStreamReader
operator|::
name|PrematureEndOfDocumentError
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|xml
operator|.
name|errorString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"Premature end of document."
argument_list|)
argument_list|)
expr_stmt|;
name|xml
operator|.
name|addData
argument_list|(
name|end
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|xml
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|xml
operator|.
name|readNext
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|xml
operator|.
name|hasError
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QXmlStreamReader
name|xml
argument_list|(
name|illegal_start
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|xml
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|xml
operator|.
name|readNext
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|xml
operator|.
name|hasError
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|xml
operator|.
name|errorString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"Start tag expected."
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|xml
operator|.
name|error
argument_list|()
operator|==
name|QXmlStreamReader
operator|::
name|NotWellFormedError
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!  See task 188737. Crash due to using empty QStack.  */
end_comment
begin_function
DECL|function|writerHangs
name|void
name|tst_QXmlStream
operator|::
name|writerHangs
parameter_list|()
specifier|const
block|{
name|QFile
name|file
argument_list|(
literal|"test.xml"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QXmlStreamWriter
name|writer
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|double
name|radius
init|=
literal|4.0
decl_stmt|;
name|writer
operator|.
name|setAutoFormatting
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartDocument
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEmptyElement
argument_list|(
literal|"circle"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"radius"
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|radius
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndDocument
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Task 189611 */
end_comment
begin_function
DECL|function|writerAutoFormattingWithComments
name|void
name|tst_QXmlStream
operator|::
name|writerAutoFormattingWithComments
parameter_list|()
specifier|const
block|{
name|QBuffer
name|buffer
decl_stmt|;
name|buffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|QXmlStreamWriter
name|writer
argument_list|(
operator|&
name|buffer
argument_list|)
decl_stmt|;
name|writer
operator|.
name|setAutoFormatting
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartDocument
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeComment
argument_list|(
literal|"This is a comment"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndDocument
argument_list|()
expr_stmt|;
specifier|const
name|char
modifier|*
name|str
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--This is a comment-->\n"
decl_stmt|;
name|QCOMPARE
argument_list|(
name|buffer
operator|.
name|buffer
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Task 206782 */
end_comment
begin_function
DECL|function|writerAutoFormattingWithTabs
name|void
name|tst_QXmlStream
operator|::
name|writerAutoFormattingWithTabs
parameter_list|()
specifier|const
block|{
name|QBuffer
name|buffer
decl_stmt|;
name|buffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|QXmlStreamWriter
name|writer
argument_list|(
operator|&
name|buffer
argument_list|)
decl_stmt|;
name|writer
operator|.
name|setAutoFormatting
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setAutoFormattingIndent
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|writer
operator|.
name|autoFormattingIndent
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartDocument
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"B"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndDocument
argument_list|()
expr_stmt|;
specifier|const
name|char
modifier|*
name|str
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<A>\n\t<B/>\n</A>\n"
decl_stmt|;
name|QCOMPARE
argument_list|(
name|buffer
operator|.
name|buffer
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writerAutoFormattingWithProcessingInstructions
name|void
name|tst_QXmlStream
operator|::
name|writerAutoFormattingWithProcessingInstructions
parameter_list|()
specifier|const
block|{
name|QBuffer
name|buffer
decl_stmt|;
name|buffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|QXmlStreamWriter
name|writer
argument_list|(
operator|&
name|buffer
argument_list|)
decl_stmt|;
name|writer
operator|.
name|setAutoFormatting
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartDocument
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeProcessingInstruction
argument_list|(
literal|"B"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndDocument
argument_list|()
expr_stmt|;
specifier|const
name|char
modifier|*
name|str
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<?B C?>\n<A/>\n"
decl_stmt|;
name|QCOMPARE
argument_list|(
name|buffer
operator|.
name|buffer
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Task 204822 */
end_comment
begin_function
DECL|function|writeAttributesWithSpace
name|void
name|tst_QXmlStream
operator|::
name|writeAttributesWithSpace
parameter_list|()
specifier|const
block|{
name|QBuffer
name|buffer
decl_stmt|;
name|buffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|QXmlStreamWriter
name|writer
argument_list|(
operator|&
name|buffer
argument_list|)
decl_stmt|;
name|writer
operator|.
name|writeStartDocument
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEmptyElement
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"attribute"
argument_list|,
name|QString
argument_list|(
literal|"value"
argument_list|)
operator|+
name|QChar
operator|::
name|Nbsp
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndDocument
argument_list|()
expr_stmt|;
name|QString
name|s
init|=
name|QString
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?><A attribute=\"value%1\"/>\n"
argument_list|)
operator|.
name|arg
argument_list|(
name|QChar
argument_list|(
name|QChar
operator|::
name|Nbsp
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|buffer
operator|.
name|buffer
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|s
operator|.
name|toUtf8
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Task 209340 */
end_comment
begin_function
DECL|function|writerAutoEmptyTags
name|void
name|tst_QXmlStream
operator|::
name|writerAutoEmptyTags
parameter_list|()
specifier|const
block|{
name|QBuffer
name|buffer
decl_stmt|;
name|buffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|QXmlStreamWriter
name|writer
argument_list|(
operator|&
name|buffer
argument_list|)
decl_stmt|;
name|writer
operator|.
name|writeStartDocument
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"Hans"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"Hans"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEmptyElement
argument_list|(
literal|"Leer"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"Hans"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
literal|"stuff"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndDocument
argument_list|()
expr_stmt|;
name|QString
name|s
init|=
name|QString
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?><Hans key=\"value\"/><Hans key=\"value\"><Leer key=\"value\"/></Hans><Hans key=\"value\">stuff</Hans>\n"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|buffer
operator|.
name|buffer
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|s
operator|.
name|toUtf8
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readFromQBuffer
name|void
name|tst_QXmlStream
operator|::
name|readFromQBuffer
parameter_list|()
specifier|const
block|{
name|QByteArray
name|in
argument_list|(
literal|"<e/>"
argument_list|)
decl_stmt|;
name|QBuffer
name|buffer
argument_list|(
operator|&
name|in
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|buffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QXmlStreamReader
name|reader
argument_list|(
operator|&
name|buffer
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|reader
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|reader
operator|.
name|readNext
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|reader
operator|.
name|hasError
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readFromQBufferInvalid
name|void
name|tst_QXmlStream
operator|::
name|readFromQBufferInvalid
parameter_list|()
specifier|const
block|{
name|QByteArray
name|in
argument_list|(
literal|"<e/><e/>"
argument_list|)
decl_stmt|;
name|QBuffer
name|buffer
argument_list|(
operator|&
name|in
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|buffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QXmlStreamReader
name|reader
argument_list|(
operator|&
name|buffer
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|reader
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|reader
operator|.
name|readNext
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|reader
operator|.
name|hasError
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readNextStartElement
name|void
name|tst_QXmlStream
operator|::
name|readNextStartElement
parameter_list|()
specifier|const
block|{
name|QLatin1String
name|in
argument_list|(
literal|"<?xml version=\"1.0\"?><A><!-- blah --><B><C/></B><B attr=\"value\"/>text</A>"
argument_list|)
decl_stmt|;
name|QXmlStreamReader
name|reader
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|reader
operator|.
name|readNextStartElement
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|reader
operator|.
name|isStartElement
argument_list|()
operator|&&
name|reader
operator|.
name|name
argument_list|()
operator|==
literal|"A"
argument_list|)
expr_stmt|;
name|int
name|amountOfB
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|readNextStartElement
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
name|reader
operator|.
name|isStartElement
argument_list|()
operator|&&
name|reader
operator|.
name|name
argument_list|()
operator|==
literal|"B"
argument_list|)
expr_stmt|;
operator|++
name|amountOfB
expr_stmt|;
name|reader
operator|.
name|skipCurrentElement
argument_list|()
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|amountOfB
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readElementText
name|void
name|tst_QXmlStream
operator|::
name|readElementText
parameter_list|()
specifier|const
block|{
name|QFETCH
argument_list|(
name|QXmlStreamReader
operator|::
name|ReadElementTextBehaviour
argument_list|,
name|behaviour
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QXmlStreamReader
name|reader
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|reader
operator|.
name|readNextStartElement
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reader
operator|.
name|readElementText
argument_list|(
name|behaviour
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readElementText_data
name|void
name|tst_QXmlStream
operator|::
name|readElementText_data
parameter_list|()
specifier|const
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QXmlStreamReader
operator|::
name|ReadElementTextBehaviour
argument_list|>
argument_list|(
literal|"behaviour"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QString
name|validInput
argument_list|(
literal|"<p>He was<em>never</em> going to admit<!-- TODO: rephrase --> his mistake.</p>"
argument_list|)
decl_stmt|;
name|QString
name|invalidInput
argument_list|(
literal|"<p>invalid...<p>"
argument_list|)
decl_stmt|;
name|QString
name|invalidOutput
argument_list|(
literal|"invalid..."
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ErrorOnUnexpectedElement"
argument_list|)
operator|<<
name|QXmlStreamReader
operator|::
name|ErrorOnUnexpectedElement
operator|<<
name|validInput
operator|<<
name|QString
argument_list|(
literal|"He was "
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"IncludeChildElements"
argument_list|)
operator|<<
name|QXmlStreamReader
operator|::
name|IncludeChildElements
operator|<<
name|validInput
operator|<<
name|QString
argument_list|(
literal|"He was never going to admit his mistake."
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"SkipChildElements"
argument_list|)
operator|<<
name|QXmlStreamReader
operator|::
name|SkipChildElements
operator|<<
name|validInput
operator|<<
name|QString
argument_list|(
literal|"He was  going to admit his mistake."
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ErrorOnUnexpectedElement Invalid"
argument_list|)
operator|<<
name|QXmlStreamReader
operator|::
name|ErrorOnUnexpectedElement
operator|<<
name|invalidInput
operator|<<
name|invalidOutput
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"IncludeChildElements Invalid"
argument_list|)
operator|<<
name|QXmlStreamReader
operator|::
name|IncludeChildElements
operator|<<
name|invalidInput
operator|<<
name|invalidOutput
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"SkipChildElements Invalid"
argument_list|)
operator|<<
name|QXmlStreamReader
operator|::
name|SkipChildElements
operator|<<
name|invalidInput
operator|<<
name|invalidOutput
expr_stmt|;
block|}
end_function
begin_function
DECL|function|crashInUTF16Codec
name|void
name|tst_QXmlStream
operator|::
name|crashInUTF16Codec
parameter_list|()
specifier|const
block|{
name|QEventLoop
name|eventLoop
decl_stmt|;
name|QNetworkAccessManager
name|networkManager
decl_stmt|;
name|QNetworkRequest
name|request
argument_list|(
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|QLatin1String
argument_list|(
name|SRCDIR
literal|"data/051reduced.xml"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QNetworkReply
modifier|*
specifier|const
name|reply
init|=
name|networkManager
operator|.
name|get
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|eventLoop
operator|.
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|eventLoop
operator|.
name|exec
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QXmlStreamReader
name|reader
argument_list|(
name|reply
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|reader
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|reader
operator|.
name|readNext
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|QVERIFY
argument_list|(
operator|!
name|reader
operator|.
name|hasError
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*   In addition to QTestLib's flags, one can specify "-c<filename>" and have that file output in its canonical form. */
end_comment
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
name|QCoreApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
if|if
condition|(
name|argc
operator|==
literal|3
operator|&&
name|QByteArray
argument_list|(
name|argv
index|[
literal|1
index|]
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"-c"
argument_list|)
condition|)
block|{
comment|// output canonical only
name|bool
name|error
init|=
literal|false
decl_stmt|;
name|QByteArray
name|canonical
init|=
name|makeCanonical
argument_list|(
name|argv
index|[
literal|2
index|]
argument_list|,
literal|"doc"
argument_list|,
name|error
argument_list|)
decl_stmt|;
name|QTextStream
name|myStdOut
argument_list|(
name|stdout
argument_list|)
decl_stmt|;
name|myStdOut
operator|<<
name|canonical
operator|<<
name|endl
expr_stmt|;
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|tst_QXmlStream
name|tc
decl_stmt|;
return|return
name|QTest
operator|::
name|qExec
argument_list|(
operator|&
name|tc
argument_list|,
name|argc
argument_list|,
name|argv
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|hasAttributeSignature
name|void
name|tst_QXmlStream
operator|::
name|hasAttributeSignature
parameter_list|()
specifier|const
block|{
comment|/* These functions should be const so invoke all      * of them on a const object. */
specifier|const
name|QXmlStreamAttributes
name|atts
decl_stmt|;
name|atts
operator|.
name|hasAttribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"localName"
argument_list|)
argument_list|)
expr_stmt|;
name|atts
operator|.
name|hasAttribute
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"localName"
argument_list|)
argument_list|)
expr_stmt|;
name|atts
operator|.
name|hasAttribute
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"http://example.com/"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"localName"
argument_list|)
argument_list|)
expr_stmt|;
comment|/* The input arguments should be const references, not mutable references      * so pass const references. */
specifier|const
name|QLatin1String
name|latin1StringLocalName
argument_list|(
name|QLatin1String
argument_list|(
literal|"localName"
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|qStringLocalname
argument_list|(
name|QLatin1String
argument_list|(
literal|"localName"
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|namespaceURI
argument_list|(
name|QLatin1String
argument_list|(
literal|"http://example.com/"
argument_list|)
argument_list|)
decl_stmt|;
comment|/* QLatin1String overload. */
name|atts
operator|.
name|hasAttribute
argument_list|(
name|latin1StringLocalName
argument_list|)
expr_stmt|;
comment|/* QString overload. */
name|atts
operator|.
name|hasAttribute
argument_list|(
name|latin1StringLocalName
argument_list|)
expr_stmt|;
comment|/* namespace/local name overload. */
name|atts
operator|.
name|hasAttribute
argument_list|(
name|namespaceURI
argument_list|,
name|qStringLocalname
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hasAttribute
name|void
name|tst_QXmlStream
operator|::
name|hasAttribute
parameter_list|()
specifier|const
block|{
name|QXmlStreamReader
name|reader
argument_list|(
name|QLatin1String
argument_list|(
literal|"<e xmlns:p='http://example.com/2' xmlns='http://example.com/' "
literal|"attr1='value' attr2='value2' p:attr3='value3' emptyAttr=''><noAttributes/></e>"
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|reader
operator|.
name|readNext
argument_list|()
argument_list|,
name|QXmlStreamReader
operator|::
name|StartDocument
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reader
operator|.
name|readNext
argument_list|()
argument_list|,
name|QXmlStreamReader
operator|::
name|StartElement
argument_list|)
expr_stmt|;
specifier|const
name|QXmlStreamAttributes
modifier|&
name|atts
init|=
name|reader
operator|.
name|attributes
argument_list|()
decl_stmt|;
comment|/* QLatin1String overload. */
name|QVERIFY
argument_list|(
name|atts
operator|.
name|hasAttribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"attr1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atts
operator|.
name|hasAttribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"attr2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atts
operator|.
name|hasAttribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"p:attr3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atts
operator|.
name|hasAttribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"emptyAttr"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|atts
operator|.
name|hasAttribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"DOESNOTEXIST"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Test with an empty& null namespaces. */
name|QVERIFY
argument_list|(
name|atts
operator|.
name|hasAttribute
argument_list|(
name|QString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"attr2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|/* A null string. */
name|QVERIFY
argument_list|(
name|atts
operator|.
name|hasAttribute
argument_list|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"attr2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|/* An empty string. */
comment|/* QString overload. */
name|QVERIFY
argument_list|(
name|atts
operator|.
name|hasAttribute
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"attr1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atts
operator|.
name|hasAttribute
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"attr2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atts
operator|.
name|hasAttribute
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"p:attr3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atts
operator|.
name|hasAttribute
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"emptyAttr"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|atts
operator|.
name|hasAttribute
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"DOESNOTEXIST"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|/* namespace/local name overload. */
name|QVERIFY
argument_list|(
name|atts
operator|.
name|hasAttribute
argument_list|(
name|QString
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"attr1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Attributes do not pick up the default namespace. */
name|QVERIFY
argument_list|(
operator|!
name|atts
operator|.
name|hasAttribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"http://example.com/"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"attr1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atts
operator|.
name|hasAttribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"http://example.com/2"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"attr3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atts
operator|.
name|hasAttribute
argument_list|(
name|QString
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"emptyAttr"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|atts
operator|.
name|hasAttribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"http://example.com/2"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"DOESNOTEXIST"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|atts
operator|.
name|hasAttribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"WRONG_NAMESPACE"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"attr3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Invoke on an QXmlStreamAttributes that has no attributes at all. */
name|QCOMPARE
argument_list|(
name|reader
operator|.
name|readNext
argument_list|()
argument_list|,
name|QXmlStreamReader
operator|::
name|StartElement
argument_list|)
expr_stmt|;
specifier|const
name|QXmlStreamAttributes
modifier|&
name|atts2
init|=
name|reader
operator|.
name|attributes
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|atts2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|/* QLatin1String overload. */
name|QVERIFY
argument_list|(
operator|!
name|atts
operator|.
name|hasAttribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"arbitraryName"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|/* QString overload. */
name|QVERIFY
argument_list|(
operator|!
name|atts
operator|.
name|hasAttribute
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"arbitraryName"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|/* namespace/local name overload. */
name|QVERIFY
argument_list|(
operator|!
name|atts
operator|.
name|hasAttribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"http://example.com/"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"arbitraryName"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|reader
operator|.
name|atEnd
argument_list|()
condition|)
name|reader
operator|.
name|readNext
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|reader
operator|.
name|hasError
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeWithCodec
name|void
name|tst_QXmlStream
operator|::
name|writeWithCodec
parameter_list|()
specifier|const
block|{
name|QByteArray
name|outarray
decl_stmt|;
name|QXmlStreamWriter
name|writer
argument_list|(
operator|&
name|outarray
argument_list|)
decl_stmt|;
name|writer
operator|.
name|setAutoFormatting
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QTextCodec
modifier|*
name|codec
init|=
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"ISO 8859-15"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|codec
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setCodec
argument_list|(
name|codec
argument_list|)
expr_stmt|;
specifier|const
name|char
modifier|*
name|latin2
init|=
literal|"hé hé"
decl_stmt|;
specifier|const
name|QString
name|string
init|=
name|codec
operator|->
name|toUnicode
argument_list|(
name|latin2
argument_list|)
decl_stmt|;
name|writer
operator|.
name|writeStartDocument
argument_list|(
literal|"1.0"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeTextElement
argument_list|(
literal|"foo"
argument_list|,
name|string
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndDocument
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|outarray
operator|.
name|contains
argument_list|(
name|latin2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|outarray
operator|.
name|contains
argument_list|(
name|codec
operator|->
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeWithUtf8Codec
name|void
name|tst_QXmlStream
operator|::
name|writeWithUtf8Codec
parameter_list|()
specifier|const
block|{
name|QByteArray
name|outarray
decl_stmt|;
name|QXmlStreamWriter
name|writer
argument_list|(
operator|&
name|outarray
argument_list|)
decl_stmt|;
name|QTextCodec
modifier|*
name|codec
init|=
name|QTextCodec
operator|::
name|codecForMib
argument_list|(
literal|106
argument_list|)
decl_stmt|;
comment|// utf-8
name|QVERIFY
argument_list|(
name|codec
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setCodec
argument_list|(
name|codec
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartDocument
argument_list|(
literal|"1.0"
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|char
name|begin
index|[]
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
decl_stmt|;
name|QVERIFY
argument_list|(
name|outarray
operator|.
name|startsWith
argument_list|(
name|begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeWithStandalone
name|void
name|tst_QXmlStream
operator|::
name|writeWithStandalone
parameter_list|()
specifier|const
block|{
block|{
name|QByteArray
name|outarray
decl_stmt|;
name|QXmlStreamWriter
name|writer
argument_list|(
operator|&
name|outarray
argument_list|)
decl_stmt|;
name|writer
operator|.
name|setAutoFormatting
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartDocument
argument_list|(
literal|"1.0"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndDocument
argument_list|()
expr_stmt|;
specifier|const
name|char
modifier|*
name|ref
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n"
decl_stmt|;
name|QCOMPARE
argument_list|(
name|outarray
operator|.
name|constData
argument_list|()
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
block|{
name|QByteArray
name|outarray
decl_stmt|;
name|QXmlStreamWriter
name|writer
argument_list|(
operator|&
name|outarray
argument_list|)
decl_stmt|;
name|writer
operator|.
name|setAutoFormatting
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartDocument
argument_list|(
literal|"1.0"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndDocument
argument_list|()
expr_stmt|;
specifier|const
name|char
modifier|*
name|ref
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n"
decl_stmt|;
name|QCOMPARE
argument_list|(
name|outarray
operator|.
name|constData
argument_list|()
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|entitiesAndWhitespace_1
name|void
name|tst_QXmlStream
operator|::
name|entitiesAndWhitespace_1
parameter_list|()
specifier|const
block|{
name|QXmlStreamReader
name|reader
argument_list|(
name|QLatin1String
argument_list|(
literal|"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"><test>&extEnt;</test>"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|entityCount
init|=
literal|0
decl_stmt|;
name|int
name|characterCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|reader
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|QXmlStreamReader
operator|::
name|TokenType
name|token
init|=
name|reader
operator|.
name|readNext
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|token
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
name|characterCount
operator|++
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EntityReference
case|:
name|entityCount
operator|++
expr_stmt|;
break|break;
default|default:
empty_stmt|;
block|}
block|}
name|QCOMPARE
argument_list|(
name|entityCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|characterCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|reader
operator|.
name|hasError
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|entitiesAndWhitespace_2
name|void
name|tst_QXmlStream
operator|::
name|entitiesAndWhitespace_2
parameter_list|()
specifier|const
block|{
name|QXmlStreamReader
name|reader
argument_list|(
name|QLatin1String
argument_list|(
literal|"<test>&extEnt;</test>"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|entityCount
init|=
literal|0
decl_stmt|;
name|int
name|characterCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|reader
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|QXmlStreamReader
operator|::
name|TokenType
name|token
init|=
name|reader
operator|.
name|readNext
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|token
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|Characters
case|:
name|characterCount
operator|++
expr_stmt|;
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EntityReference
case|:
name|entityCount
operator|++
expr_stmt|;
break|break;
default|default:
empty_stmt|;
block|}
block|}
name|QCOMPARE
argument_list|(
name|entityCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|characterCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|reader
operator|.
name|hasError
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|garbageInXMLPrologDefaultCodec
name|void
name|tst_QXmlStream
operator|::
name|garbageInXMLPrologDefaultCodec
parameter_list|()
specifier|const
block|{
name|QBuffer
name|out
decl_stmt|;
name|QVERIFY
argument_list|(
name|out
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
argument_list|)
expr_stmt|;
name|QXmlStreamWriter
name|writer
argument_list|(
operator|&
name|out
argument_list|)
decl_stmt|;
name|writer
operator|.
name|writeStartDocument
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEmptyElement
argument_list|(
literal|"Foo"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndDocument
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|out
operator|.
name|data
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?><Foo/>\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|garbageInXMLPrologUTF8Explicitly
name|void
name|tst_QXmlStream
operator|::
name|garbageInXMLPrologUTF8Explicitly
parameter_list|()
specifier|const
block|{
name|QBuffer
name|out
decl_stmt|;
name|QVERIFY
argument_list|(
name|out
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
argument_list|)
expr_stmt|;
name|QXmlStreamWriter
name|writer
argument_list|(
operator|&
name|out
argument_list|)
decl_stmt|;
name|writer
operator|.
name|setCodec
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartDocument
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEmptyElement
argument_list|(
literal|"Foo"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndDocument
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|out
operator|.
name|data
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?><Foo/>\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|tst_QXmlStream
operator|::
name|clear
parameter_list|()
specifier|const
comment|// task 228768
block|{
name|QString
name|xml
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?><body></body>"
decl_stmt|;
name|QXmlStreamReader
name|reader
decl_stmt|;
name|reader
operator|.
name|addData
argument_list|(
name|xml
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|reader
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|reader
operator|.
name|readNext
argument_list|()
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|reader
operator|.
name|tokenType
argument_list|()
argument_list|,
name|QXmlStreamReader
operator|::
name|EndDocument
argument_list|)
expr_stmt|;
name|reader
operator|.
name|clear
argument_list|()
expr_stmt|;
name|reader
operator|.
name|addData
argument_list|(
name|xml
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|reader
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|reader
operator|.
name|readNext
argument_list|()
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|reader
operator|.
name|tokenType
argument_list|()
argument_list|,
name|QXmlStreamReader
operator|::
name|EndDocument
argument_list|)
expr_stmt|;
comment|// now we stop in the middle to check whether clear really works
name|reader
operator|.
name|clear
argument_list|()
expr_stmt|;
name|reader
operator|.
name|addData
argument_list|(
name|xml
argument_list|)
expr_stmt|;
name|reader
operator|.
name|readNext
argument_list|()
expr_stmt|;
name|reader
operator|.
name|readNext
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reader
operator|.
name|tokenType
argument_list|()
argument_list|,
name|QXmlStreamReader
operator|::
name|StartElement
argument_list|)
expr_stmt|;
comment|// and here the final read
name|reader
operator|.
name|clear
argument_list|()
expr_stmt|;
name|reader
operator|.
name|addData
argument_list|(
name|xml
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|reader
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|reader
operator|.
name|readNext
argument_list|()
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|reader
operator|.
name|tokenType
argument_list|()
argument_list|,
name|QXmlStreamReader
operator|::
name|EndDocument
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|checkCommentIndentation_data
name|void
name|tst_QXmlStream
operator|::
name|checkCommentIndentation_data
parameter_list|()
specifier|const
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedOutput"
argument_list|)
expr_stmt|;
name|QString
name|simpleInput
init|=
literal|"<a><!-- bla --></a>"
decl_stmt|;
name|QString
name|simpleOutput
init|=
literal|"<?xml version=\"1.0\"?>\n"
literal|"<a>\n"
literal|"<!-- bla -->\n"
literal|"</a>\n"
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"simple-comment"
argument_list|)
operator|<<
name|simpleInput
operator|<<
name|simpleOutput
expr_stmt|;
name|QString
name|advancedInput
init|=
literal|"<a><!-- bla --><!-- bla --><b><!-- bla --><c><!-- bla --></c><!-- bla --></b></a>"
decl_stmt|;
name|QString
name|advancedOutput
init|=
literal|"<?xml version=\"1.0\"?>\n"
literal|"<a>\n"
literal|"<!-- bla -->\n"
literal|"<!-- bla -->\n"
literal|"<b>\n"
literal|"<!-- bla -->\n"
literal|"<c>\n"
literal|"<!-- bla -->\n"
literal|"</c>\n"
literal|"<!-- bla -->\n"
literal|"</b>\n"
literal|"</a>\n"
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"advanced-comment"
argument_list|)
operator|<<
name|advancedInput
operator|<<
name|advancedOutput
expr_stmt|;
block|}
end_function
begin_function
DECL|function|checkCommentIndentation
name|void
name|tst_QXmlStream
operator|::
name|checkCommentIndentation
parameter_list|()
specifier|const
comment|// task 256468
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedOutput
argument_list|)
expr_stmt|;
name|QString
name|output
decl_stmt|;
name|QXmlStreamReader
name|reader
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|QXmlStreamWriter
name|writer
argument_list|(
operator|&
name|output
argument_list|)
decl_stmt|;
name|writer
operator|.
name|setAutoFormatting
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setAutoFormattingIndent
argument_list|(
literal|3
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|reader
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|reader
operator|.
name|readNext
argument_list|()
expr_stmt|;
if|if
condition|(
name|reader
operator|.
name|error
argument_list|()
condition|)
block|{
name|QFAIL
argument_list|(
literal|"error reading XML input"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|writeCurrentToken
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
name|QCOMPARE
argument_list|(
name|output
argument_list|,
name|expectedOutput
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qtbug9196_crash
name|void
name|tst_QXmlStream
operator|::
name|qtbug9196_crash
parameter_list|()
specifier|const
block|{
comment|// the following input used to produce a crash in the stream reader
name|QByteArray
name|ba
argument_list|(
literal|"<a><a><a><a><a><a><a><a><a><a><a><a><a><a><a><a><a><a><a><a><a><a><a><a><a><a><a><a><a><a><a><a>"
literal|"<a><a><a><a><a><a><a><a><a><a><a><a><a><a><a><a><a><a><a><a><a><a><a><a><a><a><a><a><a></a>"
argument_list|)
decl_stmt|;
name|QXmlStreamReader
name|xml
argument_list|(
name|ba
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|xml
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|xml
operator|.
name|readNext
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|FakeBuffer
class|class
name|FakeBuffer
super|:
specifier|public
name|QBuffer
block|{
protected|protected:
DECL|function|writeData
name|qint64
name|writeData
parameter_list|(
specifier|const
name|char
modifier|*
name|c
parameter_list|,
name|qint64
name|i
parameter_list|)
block|{
name|qint64
name|ai
init|=
name|qMin
argument_list|(
name|m_capacity
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|m_capacity
operator|-=
name|ai
expr_stmt|;
return|return
name|ai
condition|?
name|QBuffer
operator|::
name|writeData
argument_list|(
name|c
argument_list|,
name|ai
argument_list|)
else|:
literal|0
return|;
block|}
public|public:
DECL|function|setCapacity
name|void
name|setCapacity
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
name|m_capacity
operator|=
name|capacity
expr_stmt|;
block|}
private|private:
DECL|member|m_capacity
name|qint64
name|m_capacity
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|hasError
name|void
name|tst_QXmlStream
operator|::
name|hasError
parameter_list|()
specifier|const
block|{
block|{
name|FakeBuffer
name|fb
decl_stmt|;
name|QVERIFY
argument_list|(
name|fb
operator|.
name|open
argument_list|(
name|QBuffer
operator|::
name|ReadWrite
argument_list|)
argument_list|)
expr_stmt|;
name|fb
operator|.
name|setCapacity
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|QXmlStreamWriter
name|writer
argument_list|(
operator|&
name|fb
argument_list|)
decl_stmt|;
name|writer
operator|.
name|writeStartDocument
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndDocument
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|writer
operator|.
name|hasError
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fb
operator|.
name|data
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|// Failure caused by write(QString)
name|FakeBuffer
name|fb
decl_stmt|;
name|QVERIFY
argument_list|(
name|fb
operator|.
name|open
argument_list|(
name|QBuffer
operator|::
name|ReadWrite
argument_list|)
argument_list|)
expr_stmt|;
name|fb
operator|.
name|setCapacity
argument_list|(
name|strlen
argument_list|(
literal|"<?xml version=\""
argument_list|)
argument_list|)
expr_stmt|;
name|QXmlStreamWriter
name|writer
argument_list|(
operator|&
name|fb
argument_list|)
decl_stmt|;
name|writer
operator|.
name|writeStartDocument
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|writer
operator|.
name|hasError
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fb
operator|.
name|data
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"<?xml version=\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|// Failure caused by write(char *)
name|FakeBuffer
name|fb
decl_stmt|;
name|QVERIFY
argument_list|(
name|fb
operator|.
name|open
argument_list|(
name|QBuffer
operator|::
name|ReadWrite
argument_list|)
argument_list|)
expr_stmt|;
name|fb
operator|.
name|setCapacity
argument_list|(
name|strlen
argument_list|(
literal|"<?xml version=\"1.0"
argument_list|)
argument_list|)
expr_stmt|;
name|QXmlStreamWriter
name|writer
argument_list|(
operator|&
name|fb
argument_list|)
decl_stmt|;
name|writer
operator|.
name|writeStartDocument
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|writer
operator|.
name|hasError
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fb
operator|.
name|data
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"<?xml version=\"1.0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|// Failure caused by write(QStringRef)
name|FakeBuffer
name|fb
decl_stmt|;
name|QVERIFY
argument_list|(
name|fb
operator|.
name|open
argument_list|(
name|QBuffer
operator|::
name|ReadWrite
argument_list|)
argument_list|)
expr_stmt|;
name|fb
operator|.
name|setCapacity
argument_list|(
name|strlen
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?><test xmlns:"
argument_list|)
argument_list|)
expr_stmt|;
name|QXmlStreamWriter
name|writer
argument_list|(
operator|&
name|fb
argument_list|)
decl_stmt|;
name|writer
operator|.
name|writeStartDocument
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeNamespace
argument_list|(
literal|"http://foo.bar"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|writer
operator|.
name|hasError
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fb
operator|.
name|data
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?><test xmlns:"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|// Refusal to write after 1st failure
name|FakeBuffer
name|fb
decl_stmt|;
name|QVERIFY
argument_list|(
name|fb
operator|.
name|open
argument_list|(
name|QBuffer
operator|::
name|ReadWrite
argument_list|)
argument_list|)
expr_stmt|;
name|fb
operator|.
name|setCapacity
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QXmlStreamWriter
name|writer
argument_list|(
operator|&
name|fb
argument_list|)
decl_stmt|;
name|writer
operator|.
name|writeStartDocument
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|writer
operator|.
name|hasError
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fb
operator|.
name|data
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"<?xml vers"
argument_list|)
argument_list|)
expr_stmt|;
name|fb
operator|.
name|setCapacity
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
comment|// literal& qstring
name|writer
operator|.
name|writeNamespace
argument_list|(
literal|"http://foo.bar"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
comment|// literal& qstringref
name|QVERIFY
argument_list|(
name|writer
operator|.
name|hasError
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fb
operator|.
name|data
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"<?xml vers"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_include
include|#
directive|include
file|"tst_qxmlstream.moc"
end_include
begin_comment
comment|// vim: et:ts=4:sw=4:sts=4
end_comment
end_unit
