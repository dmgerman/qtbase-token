begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qregexp.h>
end_include
begin_include
include|#
directive|include
file|<qvalidator.h>
end_include
begin_class
DECL|class|tst_QRegExpValidator
class|class
name|tst_QRegExpValidator
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QRegExpValidator
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QRegExpValidator
parameter_list|()
destructor_decl|;
comment|// I can think of no other way to do this for the moment
DECL|enum|State
DECL|enumerator|Invalid
DECL|enumerator|Intermediate
DECL|enumerator|Acceptable
enum|enum
name|State
block|{
name|Invalid
init|=
literal|0
block|,
name|Intermediate
init|=
literal|1
block|,
name|Acceptable
init|=
literal|2
block|}
enum|;
public|public
name|slots
public|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|validate_data
parameter_list|()
function_decl|;
name|void
name|validate
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QRegExpValidator
name|tst_QRegExpValidator
operator|::
name|tst_QRegExpValidator
parameter_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~tst_QRegExpValidator
name|tst_QRegExpValidator
operator|::
name|~
name|tst_QRegExpValidator
parameter_list|()
block|{  }
end_destructor
begin_function
DECL|function|init
name|void
name|tst_QRegExpValidator
operator|::
name|init
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QRegExpValidator
operator|::
name|cleanup
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|validate_data
name|void
name|tst_QRegExpValidator
operator|::
name|validate_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"rx"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"state"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"[1-9]\\d{0,3}"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"0"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"[1-9]\\d{0,3}"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"12345"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"[1-9]\\d{0,3}"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1"
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\\S+"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"myfile.txt"
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\\S+"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"my file.txt"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"[A-C]\\d{5}[W-Z]"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a12345Z"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data6"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"[A-C]\\d{5}[W-Z]"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A12345Z"
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data7"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"[A-C]\\d{5}[W-Z]"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B12"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"read\\S?me(\\.(txt|asc|1st))?"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"readme"
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data9"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"read\\S?me(\\.(txt|asc|1st))?"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"read me.txt"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"read\\S?me(\\.(txt|asc|1st))?"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"readm"
argument_list|)
operator|<<
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|validate
name|void
name|tst_QRegExpValidator
operator|::
name|validate
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|rx
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|QRegExpValidator
name|rv
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|rv
argument_list|,
name|SIGNAL
argument_list|(
name|regExpChanged
argument_list|(
name|QRegExp
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|changedSpy
argument_list|(
operator|&
name|rv
argument_list|,
name|SIGNAL
argument_list|(
name|changed
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|rv
operator|.
name|setRegExp
argument_list|(
name|QRegExp
argument_list|(
name|rx
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|dummy
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|rv
operator|.
name|validate
argument_list|(
name|value
argument_list|,
name|dummy
argument_list|)
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|changedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QRegExpValidator
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qregexpvalidator.moc"
end_include
end_unit
