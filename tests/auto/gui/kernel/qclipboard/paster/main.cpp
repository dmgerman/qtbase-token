begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QtGui/QClipboard>
end_include
begin_include
include|#
directive|include
file|<QtGui/QImage>
end_include
begin_include
include|#
directive|include
file|<QtGui/QColor>
end_include
begin_include
include|#
directive|include
file|<QtCore/QStringList>
end_include
begin_include
include|#
directive|include
file|<QtCore/QCommandLineParser>
end_include
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
name|QGuiApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QCommandLineParser
name|parser
decl_stmt|;
name|parser
operator|.
name|addHelpOption
argument_list|()
expr_stmt|;
name|QCommandLineOption
name|textOption
argument_list|(
name|QStringLiteral
argument_list|(
literal|"text"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Text to compare"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"text"
argument_list|)
argument_list|)
decl_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|textOption
argument_list|)
expr_stmt|;
name|QCommandLineOption
name|imageOption
argument_list|(
name|QStringLiteral
argument_list|(
literal|"image"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Perform image check"
argument_list|)
argument_list|)
decl_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|imageOption
argument_list|)
expr_stmt|;
name|parser
operator|.
name|process
argument_list|(
name|QCoreApplication
operator|::
name|arguments
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|isSet
argument_list|(
name|imageOption
argument_list|)
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
specifier|const
name|QImage
name|actual
init|=
name|QGuiApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|image
argument_list|()
decl_stmt|;
else|#
directive|else
specifier|const
name|QImage
name|actual
decl_stmt|;
endif|#
directive|endif
comment|// Perform hard-coded checks on copied image (size, pixel 0,0: transparent,
comment|// pixel 1,0: blue). Note: Windows sets RGB of transparent to 0xFF when converting
comment|// to DIB5.
if|if
condition|(
name|actual
operator|.
name|size
argument_list|()
operator|!=
name|QSize
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
condition|)
return|return
literal|1
return|;
specifier|const
name|QRgb
name|pixel00
init|=
name|actual
operator|.
name|pixel
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|qAlpha
argument_list|(
name|pixel00
argument_list|)
condition|)
return|return
literal|2
return|;
specifier|const
name|QRgb
name|pixel01
init|=
name|actual
operator|.
name|pixel
argument_list|(
name|QPoint
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|pixel01
operator|!=
name|QColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
operator|.
name|rgba
argument_list|()
condition|)
return|return
literal|3
return|;
return|return
literal|0
return|;
block|}
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|QString
name|expected
decl_stmt|;
if|if
condition|(
name|parser
operator|.
name|isSet
argument_list|(
name|textOption
argument_list|)
condition|)
name|expected
operator|=
name|parser
operator|.
name|value
argument_list|(
name|textOption
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// !Q_OS_WINCE
specifier|const
name|QString
name|expected
init|=
name|QStringLiteral
argument_list|(
literal|"testString.!"
argument_list|)
decl_stmt|;
endif|#
directive|endif
comment|// Q_OS_WINCE
if|if
condition|(
operator|!
name|expected
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
specifier|const
name|QString
name|actual
init|=
name|QGuiApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|text
argument_list|()
decl_stmt|;
else|#
directive|else
specifier|const
name|QString
name|actual
decl_stmt|;
endif|#
directive|endif
return|return
name|actual
operator|==
name|expected
condition|?
literal|0
else|:
literal|1
return|;
block|}
return|return
operator|-
literal|2
return|;
block|}
end_function
end_unit
