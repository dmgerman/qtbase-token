begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qkeysequence.h>
end_include
begin_include
include|#
directive|include
file|<qplatformtheme_qpa.h>
end_include
begin_include
include|#
directive|include
file|<private/qkeysequence_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<QTranslator>
end_include
begin_include
include|#
directive|include
file|<QLibraryInfo>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_MAC
end_ifdef
begin_include
include|#
directive|include
file|<Carbon/Carbon.h>
end_include
begin_struct
DECL|struct|MacSpecialKey
struct|struct
name|MacSpecialKey
block|{
DECL|member|key
name|int
name|key
decl_stmt|;
DECL|member|macSymbol
name|ushort
name|macSymbol
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
DECL|variable|NumEntries
specifier|static
specifier|const
name|int
name|NumEntries
init|=
literal|21
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|entries
specifier|static
specifier|const
name|MacSpecialKey
name|entries
index|[
name|NumEntries
index|]
init|=
block|{
block|{
name|Qt
operator|::
name|Key_Escape
block|,
literal|0x238B
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Tab
block|,
literal|0x21E5
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Backtab
block|,
literal|0x21E4
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Backspace
block|,
literal|0x232B
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Return
block|,
literal|0x21B5
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Enter
block|,
literal|0x21B5
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Delete
block|,
literal|0x2326
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Home
block|,
literal|0x2196
block|}
block|,
block|{
name|Qt
operator|::
name|Key_End
block|,
literal|0x2198
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Left
block|,
literal|0x2190
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Up
block|,
literal|0x2191
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Right
block|,
literal|0x2192
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Down
block|,
literal|0x2193
block|}
block|,
block|{
name|Qt
operator|::
name|Key_PageUp
block|,
literal|0x21DE
block|}
block|,
block|{
name|Qt
operator|::
name|Key_PageDown
block|,
literal|0x21DF
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Shift
block|,
name|kShiftUnicode
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Control
block|,
name|kCommandUnicode
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Meta
block|,
name|kControlUnicode
block|}
block|,
block|{
name|Qt
operator|::
name|Key_Alt
block|,
name|kOptionUnicode
block|}
block|,
block|{
name|Qt
operator|::
name|Key_CapsLock
block|,
literal|0x21EA
block|}
block|, }
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|operator <
specifier|static
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|MacSpecialKey
modifier|&
name|entry
parameter_list|,
name|int
name|key
parameter_list|)
block|{
return|return
name|entry
operator|.
name|key
operator|<
name|key
return|;
block|}
end_function
begin_function
DECL|function|operator <
specifier|static
name|bool
name|operator
name|<
parameter_list|(
name|int
name|key
parameter_list|,
specifier|const
name|MacSpecialKey
modifier|&
name|entry
parameter_list|)
block|{
return|return
name|key
operator|<
name|entry
operator|.
name|key
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|MacSpecialKeyEntriesEnd
specifier|static
specifier|const
name|MacSpecialKey
modifier|*
specifier|const
name|MacSpecialKeyEntriesEnd
init|=
name|entries
operator|+
name|NumEntries
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|macSymbolForQtKey
specifier|static
name|QChar
name|macSymbolForQtKey
parameter_list|(
name|int
name|key
parameter_list|)
block|{
specifier|const
name|MacSpecialKey
modifier|*
name|i
init|=
name|qBinaryFind
argument_list|(
name|entries
argument_list|,
name|MacSpecialKeyEntriesEnd
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|MacSpecialKeyEntriesEnd
condition|)
return|return
name|QChar
argument_list|()
return|;
return|return
name|QChar
argument_list|(
name|i
operator|->
name|macSymbol
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|tst_QKeySequence
class|class
name|tst_QKeySequence
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QKeySequence
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QKeySequence
parameter_list|()
destructor_decl|;
private|private
name|slots
private|:
name|void
name|swap
parameter_list|()
function_decl|;
name|void
name|operatorQString_data
parameter_list|()
function_decl|;
name|void
name|operatorQString
parameter_list|()
function_decl|;
name|void
name|compareConstructors_data
parameter_list|()
function_decl|;
name|void
name|compareConstructors
parameter_list|()
function_decl|;
name|void
name|symetricConstructors_data
parameter_list|()
function_decl|;
name|void
name|symetricConstructors
parameter_list|()
function_decl|;
name|void
name|checkMultipleNames
parameter_list|()
function_decl|;
name|void
name|checkMultipleCodes
parameter_list|()
function_decl|;
name|void
name|mnemonic_data
parameter_list|()
function_decl|;
name|void
name|mnemonic
parameter_list|()
function_decl|;
name|void
name|toString_data
parameter_list|()
function_decl|;
name|void
name|toString
parameter_list|()
function_decl|;
name|void
name|toStringFromKeycode_data
parameter_list|()
function_decl|;
name|void
name|toStringFromKeycode
parameter_list|()
function_decl|;
name|void
name|streamOperators_data
parameter_list|()
function_decl|;
name|void
name|streamOperators
parameter_list|()
function_decl|;
name|void
name|parseString_data
parameter_list|()
function_decl|;
name|void
name|parseString
parameter_list|()
function_decl|;
name|void
name|fromString_data
parameter_list|()
function_decl|;
name|void
name|fromString
parameter_list|()
function_decl|;
name|void
name|ensureSorted
parameter_list|()
function_decl|;
name|void
name|standardKeys_data
parameter_list|()
function_decl|;
name|void
name|standardKeys
parameter_list|()
function_decl|;
name|void
name|keyBindings
parameter_list|()
function_decl|;
name|void
name|translated_data
parameter_list|()
function_decl|;
name|void
name|translated
parameter_list|()
function_decl|;
name|void
name|i18nKeys_data
parameter_list|()
function_decl|;
name|void
name|i18nKeys
parameter_list|()
function_decl|;
name|void
name|initTestCase
parameter_list|()
function_decl|;
private|private:
DECL|member|m_keyboardScheme
name|int
name|m_keyboardScheme
decl_stmt|;
DECL|member|ourTranslator
name|QTranslator
modifier|*
name|ourTranslator
decl_stmt|;
DECL|member|qtTranslator
name|QTranslator
modifier|*
name|qtTranslator
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
DECL|member|MacCtrl
specifier|static
specifier|const
name|QString
name|MacCtrl
decl_stmt|;
DECL|member|MacMeta
specifier|static
specifier|const
name|QString
name|MacMeta
decl_stmt|;
DECL|member|MacAlt
specifier|static
specifier|const
name|QString
name|MacAlt
decl_stmt|;
DECL|member|MacShift
specifier|static
specifier|const
name|QString
name|MacShift
decl_stmt|;
endif|#
directive|endif
block|}
class|;
end_class
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_MAC
end_ifdef
begin_decl_stmt
DECL|member|MacCtrl
specifier|const
name|QString
name|tst_QKeySequence
operator|::
name|MacCtrl
init|=
name|QString
argument_list|(
name|QChar
argument_list|(
literal|0x2318
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|MacMeta
specifier|const
name|QString
name|tst_QKeySequence
operator|::
name|MacMeta
init|=
name|QString
argument_list|(
name|QChar
argument_list|(
literal|0x2303
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|MacAlt
specifier|const
name|QString
name|tst_QKeySequence
operator|::
name|MacAlt
init|=
name|QString
argument_list|(
name|QChar
argument_list|(
literal|0x2325
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|MacShift
specifier|const
name|QString
name|tst_QKeySequence
operator|::
name|MacShift
init|=
name|QString
argument_list|(
name|QChar
argument_list|(
literal|0x21E7
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_constructor
DECL|function|tst_QKeySequence
name|tst_QKeySequence
operator|::
name|tst_QKeySequence
parameter_list|()
member_init_list|:
name|m_keyboardScheme
argument_list|(
name|QPlatformTheme
operator|::
name|WindowsKeyboardScheme
argument_list|)
block|{
if|if
condition|(
specifier|const
name|QPlatformTheme
modifier|*
name|theme
init|=
name|QGuiApplicationPrivate
operator|::
name|platformTheme
argument_list|()
condition|)
name|m_keyboardScheme
operator|=
name|theme
operator|->
name|themeHint
argument_list|(
name|QPlatformTheme
operator|::
name|KeyboardScheme
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~tst_QKeySequence
name|tst_QKeySequence
operator|::
name|~
name|tst_QKeySequence
parameter_list|()
block|{  }
end_destructor
begin_function
DECL|function|initTestCase
name|void
name|tst_QKeySequence
operator|::
name|initTestCase
parameter_list|()
block|{
name|ourTranslator
operator|=
operator|new
name|QTranslator
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|ourTranslator
operator|->
name|load
argument_list|(
literal|":/keys_de"
argument_list|)
expr_stmt|;
name|qtTranslator
operator|=
operator|new
name|QTranslator
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|qtTranslator
operator|->
name|load
argument_list|(
literal|":/qt_de"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|swap
name|void
name|tst_QKeySequence
operator|::
name|swap
parameter_list|()
block|{
name|QKeySequence
name|ks1
argument_list|(
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_O
argument_list|)
decl_stmt|;
name|QKeySequence
name|ks2
argument_list|(
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_L
argument_list|)
decl_stmt|;
name|ks1
operator|.
name|swap
argument_list|(
name|ks2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ks1
index|[
literal|0
index|]
argument_list|,
name|int
argument_list|(
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_L
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ks2
index|[
literal|0
index|]
argument_list|,
name|int
argument_list|(
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_O
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|operatorQString_data
name|void
name|tst_QKeySequence
operator|::
name|operatorQString_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"modifiers"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"keycode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"keystring"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"No modifier"
argument_list|)
operator|<<
literal|0
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Aring
operator||
name|Qt
operator|::
name|UNICODE_ACCEL
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\x0c5"
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_MAC
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Ctrl+Left"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CTRL
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Ctrl+Left"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Ctrl+,"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CTRL
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Comma
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Ctrl+,"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Alt+Left"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|ALT
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Alt+Left"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Alt+Shift+Left"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|SHIFT
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Alt+Shift+Left"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Ctrl"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CTRL
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Aring
operator||
name|Qt
operator|::
name|UNICODE_ACCEL
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Ctrl+\x0c5"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Alt"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|ALT
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Aring
operator||
name|Qt
operator|::
name|UNICODE_ACCEL
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Alt+\x0c5"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Shift"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|SHIFT
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Aring
operator||
name|Qt
operator|::
name|UNICODE_ACCEL
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Shift+\x0c5"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Meta"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|META
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Aring
operator||
name|Qt
operator|::
name|UNICODE_ACCEL
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Meta+\x0c5"
argument_list|)
expr_stmt|;
else|#
directive|else
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Ctrl+Left"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CTRL
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|)
operator|<<
name|MacCtrl
operator|+
name|macSymbolForQtKey
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Ctrl+,"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CTRL
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Comma
argument_list|)
operator|<<
name|MacCtrl
operator|+
literal|","
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Alt+Left"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|ALT
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|)
operator|<<
name|MacAlt
operator|+
name|macSymbolForQtKey
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Alt+Shift+Left"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|ALT
operator||
name|Qt
operator|::
name|SHIFT
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|)
operator|<<
name|MacAlt
operator|+
name|MacShift
operator|+
name|macSymbolForQtKey
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Ctrl"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CTRL
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Aring
operator||
name|Qt
operator|::
name|UNICODE_ACCEL
argument_list|)
operator|<<
name|MacCtrl
operator|+
literal|"\x0c5"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Alt"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|ALT
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Aring
operator||
name|Qt
operator|::
name|UNICODE_ACCEL
argument_list|)
operator|<<
name|MacAlt
operator|+
literal|"\x0c5"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Shift"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|SHIFT
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Aring
operator||
name|Qt
operator|::
name|UNICODE_ACCEL
argument_list|)
operator|<<
name|MacShift
operator|+
literal|"\x0c5"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Meta"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|META
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Aring
operator||
name|Qt
operator|::
name|UNICODE_ACCEL
argument_list|)
operator|<<
name|MacMeta
operator|+
literal|"\x0c5"
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|symetricConstructors_data
name|void
name|tst_QKeySequence
operator|::
name|symetricConstructors_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"modifiers"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"keycode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"No modifier"
argument_list|)
operator|<<
literal|0
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Aring
operator||
name|Qt
operator|::
name|UNICODE_ACCEL
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Ctrl"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CTRL
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Aring
operator||
name|Qt
operator|::
name|UNICODE_ACCEL
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Alt"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|ALT
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Aring
operator||
name|Qt
operator|::
name|UNICODE_ACCEL
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Shift"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|SHIFT
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Aring
operator||
name|Qt
operator|::
name|UNICODE_ACCEL
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Meta"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|META
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Aring
operator||
name|Qt
operator|::
name|UNICODE_ACCEL
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compareConstructors_data
name|void
name|tst_QKeySequence
operator|::
name|compareConstructors_data
parameter_list|()
block|{
name|operatorQString_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|// operator QString()
end_comment
begin_function
DECL|function|operatorQString
name|void
name|tst_QKeySequence
operator|::
name|operatorQString
parameter_list|()
block|{
name|QKeySequence
name|seq
decl_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|modifiers
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|keycode
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|keystring
argument_list|)
expr_stmt|;
name|seq
operator|=
name|QKeySequence
argument_list|(
name|modifiers
operator||
name|keycode
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|QString
operator|)
name|seq
argument_list|,
name|keystring
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// this verifies that the constructors can handle the same strings in and out
end_comment
begin_function
DECL|function|symetricConstructors
name|void
name|tst_QKeySequence
operator|::
name|symetricConstructors
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|modifiers
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|keycode
argument_list|)
expr_stmt|;
name|QKeySequence
name|seq1
argument_list|(
name|modifiers
operator||
name|keycode
argument_list|)
decl_stmt|;
name|QKeySequence
name|seq2
argument_list|(
operator|(
name|QString
operator|)
name|seq1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|seq1
operator|==
name|seq2
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/* Compares QKeySequence constructurs with int or QString arguments    We don't do this for 3.0 since it doesn't support unicode accelerators */
end_comment
begin_function
DECL|function|compareConstructors
name|void
name|tst_QKeySequence
operator|::
name|compareConstructors
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|modifiers
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|keycode
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|keystring
argument_list|)
expr_stmt|;
name|QKeySequence
name|qstringSeq
argument_list|(
name|keystring
argument_list|)
decl_stmt|;
name|QKeySequence
name|intSeq
argument_list|(
name|modifiers
operator||
name|keycode
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|qstringSeq
operator|==
name|intSeq
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|checkMultipleNames
name|void
name|tst_QKeySequence
operator|::
name|checkMultipleNames
parameter_list|()
block|{
name|QKeySequence
name|oldK
argument_list|(
literal|"Ctrl+Page Up"
argument_list|)
decl_stmt|;
name|QKeySequence
name|newK
argument_list|(
literal|"Ctrl+PgUp"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|oldK
operator|==
name|newK
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//TODO: could test third constructor, or test fromString on all constructor-data
end_comment
begin_function
DECL|function|checkMultipleCodes
name|void
name|tst_QKeySequence
operator|::
name|checkMultipleCodes
parameter_list|()
block|{
name|QKeySequence
name|seq1
argument_list|(
literal|"Alt+d, l"
argument_list|)
decl_stmt|;
name|QKeySequence
name|seq2
init|=
name|QKeySequence
operator|::
name|fromString
argument_list|(
literal|"Alt+d, l"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|seq1
operator|==
name|seq2
argument_list|)
expr_stmt|;
name|QKeySequence
name|seq3
argument_list|(
literal|"Alt+d,l"
argument_list|)
decl_stmt|;
name|QKeySequence
name|seq4
init|=
name|QKeySequence
operator|::
name|fromString
argument_list|(
literal|"Alt+d,l"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|seq3
operator|==
name|seq4
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/* * We must ensure that the keyBindings data is always sorted * so that we can safely perform binary searches. */
end_comment
begin_function
DECL|function|ensureSorted
name|void
name|tst_QKeySequence
operator|::
name|ensureSorted
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_BUILD_INTERNAL
argument_list|)
name|uint
name|N
init|=
name|QKeySequencePrivate
operator|::
name|numberOfKeyBindings
decl_stmt|;
name|uint
name|val
init|=
name|QKeySequencePrivate
operator|::
name|keyBindings
index|[
literal|0
index|]
operator|.
name|shortcut
decl_stmt|;
for|for
control|(
name|uint
name|i
init|=
literal|1
init|;
name|i
operator|<
name|N
condition|;
operator|++
name|i
control|)
block|{
name|uint
name|nextval
init|=
name|QKeySequencePrivate
operator|::
name|keyBindings
index|[
name|i
index|]
operator|.
name|shortcut
decl_stmt|;
if|if
condition|(
name|nextval
operator|<
name|val
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"Data not sorted at index "
operator|<<
name|i
expr_stmt|;
name|QVERIFY
argument_list|(
name|nextval
operator|>=
name|val
argument_list|)
expr_stmt|;
name|val
operator|=
name|nextval
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|standardKeys_data
name|void
name|tst_QKeySequence
operator|::
name|standardKeys_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"standardKey"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unknownkey"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QKeySequence
operator|::
name|UnknownKey
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"copy"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QKeySequence
operator|::
name|Copy
operator|<<
name|QString
argument_list|(
literal|"CTRL+C"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"cut"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QKeySequence
operator|::
name|Cut
operator|<<
name|QString
argument_list|(
literal|"CTRL+X"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"paste"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QKeySequence
operator|::
name|Paste
operator|<<
name|QString
argument_list|(
literal|"CTRL+V"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"delete"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QKeySequence
operator|::
name|Delete
operator|<<
name|QString
argument_list|(
literal|"DEL"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"open"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QKeySequence
operator|::
name|Open
operator|<<
name|QString
argument_list|(
literal|"CTRL+O"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"find"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QKeySequence
operator|::
name|Find
operator|<<
name|QString
argument_list|(
literal|"CTRL+F"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_keyboardScheme
operator|==
name|QPlatformTheme
operator|::
name|WindowsKeyboardScheme
condition|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"addTab"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QKeySequence
operator|::
name|AddTab
operator|<<
name|QString
argument_list|(
literal|"CTRL+T"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"findNext"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QKeySequence
operator|::
name|FindNext
operator|<<
name|QString
argument_list|(
literal|"F3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"findPrevious"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QKeySequence
operator|::
name|FindPrevious
operator|<<
name|QString
argument_list|(
literal|"SHIFT+F3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"close"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QKeySequence
operator|::
name|Close
operator|<<
name|QString
argument_list|(
literal|"CTRL+F4"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"replace"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QKeySequence
operator|::
name|Replace
operator|<<
name|QString
argument_list|(
literal|"CTRL+H"
argument_list|)
expr_stmt|;
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bold"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QKeySequence
operator|::
name|Bold
operator|<<
name|QString
argument_list|(
literal|"CTRL+B"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"italic"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QKeySequence
operator|::
name|Italic
operator|<<
name|QString
argument_list|(
literal|"CTRL+I"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"underline"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QKeySequence
operator|::
name|Underline
operator|<<
name|QString
argument_list|(
literal|"CTRL+U"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"selectall"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QKeySequence
operator|::
name|SelectAll
operator|<<
name|QString
argument_list|(
literal|"CTRL+A"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"print"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QKeySequence
operator|::
name|Print
operator|<<
name|QString
argument_list|(
literal|"CTRL+P"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"movenextchar"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QKeySequence
operator|::
name|MoveToNextChar
operator|<<
name|QString
argument_list|(
literal|"RIGHT"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"zoomIn"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QKeySequence
operator|::
name|ZoomIn
operator|<<
name|QString
argument_list|(
literal|"CTRL++"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"zoomOut"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QKeySequence
operator|::
name|ZoomOut
operator|<<
name|QString
argument_list|(
literal|"CTRL+-"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"whatsthis"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QKeySequence
operator|::
name|WhatsThis
operator|<<
name|QString
argument_list|(
literal|"SHIFT+F1"
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"help"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QKeySequence
operator|::
name|HelpContents
operator|<<
name|QString
argument_list|(
literal|"Ctrl+?"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nextChild"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QKeySequence
operator|::
name|NextChild
operator|<<
name|QString
argument_list|(
literal|"CTRL+}"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"previousChild"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QKeySequence
operator|::
name|PreviousChild
operator|<<
name|QString
argument_list|(
literal|"CTRL+{"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"MoveToEndOfBlock"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QKeySequence
operator|::
name|MoveToEndOfBlock
operator|<<
name|QString
argument_list|(
literal|"ALT+DOWN"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"forward"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QKeySequence
operator|::
name|Forward
operator|<<
name|QString
argument_list|(
literal|"CTRL+]"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"backward"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QKeySequence
operator|::
name|Back
operator|<<
name|QString
argument_list|(
literal|"CTRL+["
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"SelectEndOfDocument"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QKeySequence
operator|::
name|SelectEndOfDocument
operator|<<
name|QString
argument_list|(
literal|"CTRL+SHIFT+DOWN"
argument_list|)
expr_stmt|;
comment|//mac only
else|#
directive|else
name|QTest
operator|::
name|newRow
argument_list|(
literal|"help"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QKeySequence
operator|::
name|HelpContents
operator|<<
name|QString
argument_list|(
literal|"F1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nextChild"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QKeySequence
operator|::
name|NextChild
operator|<<
name|QString
argument_list|(
literal|"CTRL+Tab"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"previousChild"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QKeySequence
operator|::
name|PreviousChild
operator|<<
name|QString
argument_list|(
literal|"CTRL+SHIFT+BACKTAB"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"forward"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QKeySequence
operator|::
name|Forward
operator|<<
name|QString
argument_list|(
literal|"ALT+RIGHT"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"backward"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QKeySequence
operator|::
name|Back
operator|<<
name|QString
argument_list|(
literal|"ALT+LEFT"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"MoveToEndOfBlock"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QKeySequence
operator|::
name|MoveToEndOfBlock
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
comment|//mac only
name|QTest
operator|::
name|newRow
argument_list|(
literal|"SelectEndOfDocument"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QKeySequence
operator|::
name|SelectEndOfDocument
operator|<<
name|QString
argument_list|(
literal|"CTRL+SHIFT+END"
argument_list|)
expr_stmt|;
comment|//mac only
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|standardKeys
name|void
name|tst_QKeySequence
operator|::
name|standardKeys
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|standardKey
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QKeySequence
name|actualKeySequence
argument_list|(
operator|(
name|QKeySequence
operator|::
name|StandardKey
operator|)
name|standardKey
argument_list|)
decl_stmt|;
name|QKeySequence
name|expectedKeySequence
argument_list|(
name|expected
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|actualKeySequence
operator|==
name|expectedKeySequence
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Key mismatch, expected '%1', got '%2' for standard key %3"
argument_list|)
operator|.
name|arg
argument_list|(
name|expected
argument_list|,
name|actualKeySequence
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|standardKey
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|keyBindings
name|void
name|tst_QKeySequence
operator|::
name|keyBindings
parameter_list|()
block|{
specifier|const
name|QList
argument_list|<
name|QKeySequence
argument_list|>
name|bindings
init|=
name|QKeySequence
operator|::
name|keyBindings
argument_list|(
name|QKeySequence
operator|::
name|Copy
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QKeySequence
argument_list|>
name|expected
decl_stmt|;
specifier|const
name|QKeySequence
name|ctrlC
init|=
name|QKeySequence
argument_list|(
name|QStringLiteral
argument_list|(
literal|"CTRL+C"
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QKeySequence
name|ctrlInsert
init|=
name|QKeySequence
argument_list|(
name|QStringLiteral
argument_list|(
literal|"CTRL+INSERT"
argument_list|)
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|m_keyboardScheme
condition|)
block|{
case|case
name|QPlatformTheme
operator|::
name|MacKeyboardScheme
case|:
name|expected
operator|<<
name|ctrlC
expr_stmt|;
break|break;
case|case
name|QPlatformTheme
operator|::
name|WindowsKeyboardScheme
case|:
name|expected
operator|<<
name|ctrlC
operator|<<
name|ctrlInsert
expr_stmt|;
break|break;
default|default:
comment|// X11
name|expected
operator|<<
name|ctrlC
operator|<<
name|QKeySequence
argument_list|(
name|QStringLiteral
argument_list|(
literal|"F16"
argument_list|)
argument_list|)
operator|<<
name|ctrlInsert
expr_stmt|;
break|break;
block|}
name|QCOMPARE
argument_list|(
name|bindings
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mnemonic_data
name|void
name|tst_QKeySequence
operator|::
name|mnemonic_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"string"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"key"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"warning"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"&bonjour"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"ALT+B"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"&&bonjour"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"&&bon&jour"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"ALT+J"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"&&bon&jo&ur"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"ALT+J"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"b&on&&jour"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"ALT+O"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"bonjour"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"7"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"&&&bonjour"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"ALT+B"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"bonjour&&&"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"9"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"bo&&nj&o&&u&r"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"ALT+O"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"BON&JOUR"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"ALT+J"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"11"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"bonjour"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mnemonic
name|void
name|tst_QKeySequence
operator|::
name|mnemonic
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|QSKIP
argument_list|(
literal|"mnemonics are not used on Mac OS X"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|string
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|warning
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_NO_DEBUG
name|Q_UNUSED
argument_list|(
argument|warning
argument_list|)
else|#
directive|else
if|if
condition|(
name|warning
condition|)
block|{
name|QString
name|str
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QKeySequence::mnemonic: \"%1\" contains multiple occurrences of '&'"
argument_list|)
operator|.
name|arg
argument_list|(
name|string
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
name|qPrintable
argument_list|(
name|str
argument_list|)
argument_list|)
expr_stmt|;
comment|//    qWarning(qPrintable(str));
block|}
endif|#
directive|endif
name|QKeySequence
name|seq
init|=
name|QKeySequence
operator|::
name|mnemonic
argument_list|(
name|string
argument_list|)
decl_stmt|;
name|QKeySequence
name|res
init|=
name|QKeySequence
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|seq
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toString_data
name|void
name|tst_QKeySequence
operator|::
name|toString_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"strSequence"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"neutralString"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"platformString"
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_MAC
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Ctrl+Left"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Ctrl+Left"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Ctrl+Left"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Ctrl+Left"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Alt+Left"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Alt+Left"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Alt+Left"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Alt+Left"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Alt+Shift+Left"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Alt+Shift+Left"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Alt+Shift+Left"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Alt+Shift+Left"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Ctrl"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Ctrl+\x0c5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Ctrl+\x0c5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Ctrl+\x0c5"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Alt"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Alt+\x0c5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Alt+\x0c5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Alt+\x0c5"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Shift"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Shift+\x0c5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Shift+\x0c5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Shift+\x0c5"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Meta"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Meta+\x0c5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Meta+\x0c5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Meta+\x0c5"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Ctrl+Plus"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Ctrl++"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Ctrl++"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Ctrl++"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Ctrl+,"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Ctrl+,"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Ctrl+,"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Ctrl+,"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Ctrl+,,Ctrl+,"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Ctrl+,,Ctrl+,"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Ctrl+,, Ctrl+,"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Ctrl+,, Ctrl+,"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"MultiKey"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Alt+X, Ctrl+Y, Z"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Alt+X, Ctrl+Y, Z"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Alt+X, Ctrl+Y, Z"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Invalid"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Ctrly"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
else|#
directive|else
comment|/*     QTest::newRow("Ctrl+Left")<< MacCtrl + "Left"<< QString("Ctrl+Left")<< MacCtrl + macSymbolForQtKey(Qt::Key_Left);     QTest::newRow("Alt+Left")<< MacAlt + "Left"<< QString("Alt+Left")<< MacAlt + macSymbolForQtKey(Qt::Key_Left);     QTest::newRow("Alt+Shift+Left")<< MacAlt + MacShift + "Left"<< QString("Alt+Shift+Left")<< MacAlt + MacShift + macSymbolForQtKey(Qt::Key_Left);                                  */
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Ctrl+Right,Left"
argument_list|)
operator|<<
name|MacCtrl
operator|+
literal|"Right, Left"
operator|<<
name|QString
argument_list|(
literal|"Ctrl+Right, Left"
argument_list|)
operator|<<
name|MacCtrl
operator|+
name|macSymbolForQtKey
argument_list|(
name|Qt
operator|::
name|Key_Right
argument_list|)
operator|+
name|QString
argument_list|(
literal|", "
argument_list|)
operator|+
name|macSymbolForQtKey
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Ctrl"
argument_list|)
operator|<<
name|MacCtrl
operator|+
literal|"\x0c5"
operator|<<
name|QString
argument_list|(
literal|"Ctrl+\x0c5"
argument_list|)
operator|<<
name|MacCtrl
operator|+
literal|"\x0c5"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Alt"
argument_list|)
operator|<<
name|MacAlt
operator|+
literal|"\x0c5"
operator|<<
name|QString
argument_list|(
literal|"Alt+\x0c5"
argument_list|)
operator|<<
name|MacAlt
operator|+
literal|"\x0c5"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Shift"
argument_list|)
operator|<<
name|MacShift
operator|+
literal|"\x0c5"
operator|<<
name|QString
argument_list|(
literal|"Shift+\x0c5"
argument_list|)
operator|<<
name|MacShift
operator|+
literal|"\x0c5"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Meta"
argument_list|)
operator|<<
name|MacMeta
operator|+
literal|"\x0c5"
operator|<<
name|QString
argument_list|(
literal|"Meta+\x0c5"
argument_list|)
operator|<<
name|MacMeta
operator|+
literal|"\x0c5"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Ctrl+Plus"
argument_list|)
operator|<<
name|MacCtrl
operator|+
literal|"+"
operator|<<
name|QString
argument_list|(
literal|"Ctrl++"
argument_list|)
operator|<<
name|MacCtrl
operator|+
literal|"+"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Ctrl+,"
argument_list|)
operator|<<
name|MacCtrl
operator|+
literal|","
operator|<<
name|QString
argument_list|(
literal|"Ctrl+,"
argument_list|)
operator|<<
name|MacCtrl
operator|+
literal|","
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Ctrl+,,Ctrl+,"
argument_list|)
operator|<<
name|MacCtrl
operator|+
literal|",, "
operator|+
name|MacCtrl
operator|+
literal|","
operator|<<
name|QString
argument_list|(
literal|"Ctrl+,, Ctrl+,"
argument_list|)
operator|<<
name|MacCtrl
operator|+
literal|",, "
operator|+
name|MacCtrl
operator|+
literal|","
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"MultiKey"
argument_list|)
operator|<<
name|MacAlt
operator|+
literal|"X, "
operator|+
name|MacCtrl
operator|+
literal|"Y, Z"
operator|<<
name|QString
argument_list|(
literal|"Alt+X, Ctrl+Y, Z"
argument_list|)
operator|<<
name|MacAlt
operator|+
literal|"X, "
operator|+
name|MacCtrl
operator|+
literal|"Y, Z"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Invalid"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Ctrly"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|toString
name|void
name|tst_QKeySequence
operator|::
name|toString
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|strSequence
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|neutralString
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|platformString
argument_list|)
expr_stmt|;
name|QKeySequence
name|ks1
argument_list|(
name|strSequence
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ks1
operator|.
name|toString
argument_list|(
name|QKeySequence
operator|::
name|NativeText
argument_list|)
argument_list|,
name|platformString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ks1
operator|.
name|toString
argument_list|(
name|QKeySequence
operator|::
name|PortableText
argument_list|)
argument_list|,
name|neutralString
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toStringFromKeycode_data
name|void
name|tst_QKeySequence
operator|::
name|toStringFromKeycode_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QKeySequence
argument_list|>
argument_list|(
literal|"keycode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedString"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"A"
argument_list|)
operator|<<
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|)
operator|<<
literal|"A"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1"
argument_list|)
operator|<<
name|QKeySequence
argument_list|(
operator|-
literal|1
argument_list|)
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Unknown"
argument_list|)
operator|<<
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|Key_unknown
argument_list|)
operator|<<
literal|""
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toStringFromKeycode
name|void
name|tst_QKeySequence
operator|::
name|toStringFromKeycode
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QKeySequence
argument_list|,
name|keycode
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QKeySequence
argument_list|(
name|keycode
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|expectedString
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|streamOperators_data
name|void
name|tst_QKeySequence
operator|::
name|streamOperators_data
parameter_list|()
block|{
name|operatorQString_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|streamOperators
name|void
name|tst_QKeySequence
operator|::
name|streamOperators
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|modifiers
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|keycode
argument_list|)
expr_stmt|;
name|QByteArray
name|data
decl_stmt|;
name|QKeySequence
name|refK
argument_list|(
name|modifiers
operator||
name|keycode
argument_list|)
decl_stmt|;
name|QKeySequence
name|orgK
argument_list|(
literal|"Ctrl+A"
argument_list|)
decl_stmt|;
name|QKeySequence
name|copyOrgK
init|=
name|orgK
decl_stmt|;
name|QVERIFY
argument_list|(
name|copyOrgK
operator|==
name|orgK
argument_list|)
expr_stmt|;
name|QDataStream
name|in
argument_list|(
operator|&
name|data
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|in
operator|<<
name|refK
expr_stmt|;
name|QDataStream
name|out
argument_list|(
operator|&
name|data
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|out
operator|>>
name|orgK
expr_stmt|;
name|QVERIFY
argument_list|(
name|orgK
operator|==
name|refK
argument_list|)
expr_stmt|;
comment|// check if detached
name|QVERIFY
argument_list|(
name|orgK
operator|!=
name|copyOrgK
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|parseString_data
name|void
name|tst_QKeySequence
operator|::
name|parseString_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"strSequence"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QKeySequence
argument_list|>
argument_list|(
literal|"keycode"
argument_list|)
expr_stmt|;
comment|// Valid
name|QTest
operator|::
name|newRow
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|"A"
operator|<<
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|"a"
operator|<<
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Ctrl+Left"
argument_list|)
operator|<<
literal|"Ctrl+Left"
operator|<<
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"CTRL+LEFT"
argument_list|)
operator|<<
literal|"CTRL+LEFT"
operator|<<
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Meta+A"
argument_list|)
operator|<<
literal|"Meta+a"
operator|<<
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|META
operator|+
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mEtA+A"
argument_list|)
operator|<<
literal|"mEtA+a"
operator|<<
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|META
operator|+
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Ctrl++"
argument_list|)
operator|<<
literal|"Ctrl++"
operator|<<
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_Plus
argument_list|)
expr_stmt|;
comment|// Invalid modifiers
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Win+A"
argument_list|)
operator|<<
literal|"Win+a"
operator|<<
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|Key_unknown
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Super+Meta+A"
argument_list|)
operator|<<
literal|"Super+Meta+A"
operator|<<
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|Key_unknown
argument_list|)
expr_stmt|;
comment|// Invalid Keys
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Meta+Trolls"
argument_list|)
operator|<<
literal|"Meta+Trolls"
operator|<<
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|Key_unknown
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Meta+Period"
argument_list|)
operator|<<
literal|"Meta+Period"
operator|<<
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|Key_unknown
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Meta+Ypsilon"
argument_list|)
operator|<<
literal|"Meta+Ypsilon"
operator|<<
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|Key_unknown
argument_list|)
expr_stmt|;
comment|// Garbage
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4+3=2"
argument_list|)
operator|<<
literal|"4+3=2"
operator|<<
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|Key_unknown
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Alabama"
argument_list|)
operator|<<
literal|"Alabama"
operator|<<
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|Key_unknown
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Simon+G"
argument_list|)
operator|<<
literal|"Simon+G"
operator|<<
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|Key_unknown
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Shift+++2"
argument_list|)
operator|<<
literal|"Shift+++2"
operator|<<
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|Key_unknown
argument_list|)
expr_stmt|;
comment|// Wrong order
name|QTest
operator|::
name|newRow
argument_list|(
literal|"A+Meta"
argument_list|)
operator|<<
literal|"a+Meta"
operator|<<
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|Key_unknown
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Meta+++Shift"
argument_list|)
operator|<<
literal|"Meta+++Shift"
operator|<<
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|Key_unknown
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Meta+a+Shift"
argument_list|)
operator|<<
literal|"Meta+a+Shift"
operator|<<
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|Key_unknown
argument_list|)
expr_stmt|;
comment|// Only Modifiers - currently not supported
comment|//QTest::newRow("Meta+Shift")<< "Meta+Shift"<< QKeySequence(Qt::META + Qt::SHIFT);
comment|//QTest::newRow("Ctrl")<< "Ctrl"<< QKeySequence(Qt::CTRL);
comment|//QTest::newRow("Shift")<< "Shift"<< QKeySequence(Qt::SHIFT);
comment|// Only Keys
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|"a"
operator|<<
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|"A"
operator|<<
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
comment|// Incomplete
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Meta+Shift+"
argument_list|)
operator|<<
literal|"Meta+Shift+"
operator|<<
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|Key_unknown
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|parseString
name|void
name|tst_QKeySequence
operator|::
name|parseString
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|strSequence
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QKeySequence
argument_list|,
name|keycode
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|QEXPECT_FAIL
argument_list|(
literal|"Win+A"
argument_list|,
literal|"QTBUG-24406 - This test fails on OSX"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"Simon+G"
argument_list|,
literal|"QTBUG-24406 - This test fails on OSX"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|QKeySequence
argument_list|(
name|strSequence
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|keycode
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QKeySequence
argument_list|(
name|strSequence
argument_list|)
operator|==
name|keycode
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromString_data
name|void
name|tst_QKeySequence
operator|::
name|fromString_data
parameter_list|()
block|{
name|toString_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromString
name|void
name|tst_QKeySequence
operator|::
name|fromString
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|strSequence
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|neutralString
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|platformString
argument_list|)
expr_stmt|;
if|if
condition|(
name|strSequence
operator|==
literal|"Ctrly"
condition|)
comment|// Key_Unknown gives empty string
return|return;
name|QKeySequence
name|ks1
argument_list|(
name|strSequence
argument_list|)
decl_stmt|;
name|QKeySequence
name|ks2
init|=
name|QKeySequence
operator|::
name|fromString
argument_list|(
name|ks1
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|QKeySequence
name|ks3
init|=
name|QKeySequence
operator|::
name|fromString
argument_list|(
name|neutralString
argument_list|,
name|QKeySequence
operator|::
name|PortableText
argument_list|)
decl_stmt|;
name|QKeySequence
name|ks4
init|=
name|QKeySequence
operator|::
name|fromString
argument_list|(
name|platformString
argument_list|,
name|QKeySequence
operator|::
name|NativeText
argument_list|)
decl_stmt|;
comment|// assume the transitive property exists here.
name|QCOMPARE
argument_list|(
name|ks2
argument_list|,
name|ks1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ks3
argument_list|,
name|ks1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ks4
argument_list|,
name|ks1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|translated_data
name|void
name|tst_QKeySequence
operator|::
name|translated_data
parameter_list|()
block|{
name|qApp
operator|->
name|installTranslator
argument_list|(
name|ourTranslator
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|installTranslator
argument_list|(
name|qtTranslator
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"transKey"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"compKey"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Shift++"
argument_list|)
operator|<<
name|tr
argument_list|(
literal|"Shift++"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Umschalt++"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Ctrl++"
argument_list|)
operator|<<
name|tr
argument_list|(
literal|"Ctrl++"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Strg++"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Alt++"
argument_list|)
operator|<<
name|tr
argument_list|(
literal|"Alt++"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Alt++"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Meta++"
argument_list|)
operator|<<
name|tr
argument_list|(
literal|"Meta++"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Meta++"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Shift+,, Shift++"
argument_list|)
operator|<<
name|tr
argument_list|(
literal|"Shift+,, Shift++"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Umschalt+,, Umschalt++"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Shift+,, Ctrl++"
argument_list|)
operator|<<
name|tr
argument_list|(
literal|"Shift+,, Ctrl++"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Umschalt+,, Strg++"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Shift+,, Alt++"
argument_list|)
operator|<<
name|tr
argument_list|(
literal|"Shift+,, Alt++"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Umschalt+,, Alt++"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Shift+,, Meta++"
argument_list|)
operator|<<
name|tr
argument_list|(
literal|"Shift+,, Meta++"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Umschalt+,, Meta++"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Ctrl+,, Shift++"
argument_list|)
operator|<<
name|tr
argument_list|(
literal|"Ctrl+,, Shift++"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Strg+,, Umschalt++"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Ctrl+,, Ctrl++"
argument_list|)
operator|<<
name|tr
argument_list|(
literal|"Ctrl+,, Ctrl++"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Strg+,, Strg++"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Ctrl+,, Alt++"
argument_list|)
operator|<<
name|tr
argument_list|(
literal|"Ctrl+,, Alt++"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Strg+,, Alt++"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Ctrl+,, Meta++"
argument_list|)
operator|<<
name|tr
argument_list|(
literal|"Ctrl+,, Meta++"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Strg+,, Meta++"
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|removeTranslator
argument_list|(
name|ourTranslator
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|removeTranslator
argument_list|(
name|qtTranslator
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|translated
name|void
name|tst_QKeySequence
operator|::
name|translated
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|transKey
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|compKey
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|QSKIP
argument_list|(
literal|"No need to translate modifiers on Mac OS X"
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QSKIP
argument_list|(
literal|"No need to translate modifiers on WinCE"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|qApp
operator|->
name|installTranslator
argument_list|(
name|ourTranslator
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|installTranslator
argument_list|(
name|qtTranslator
argument_list|)
expr_stmt|;
name|QKeySequence
name|ks1
argument_list|(
name|transKey
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ks1
operator|.
name|toString
argument_list|(
name|QKeySequence
operator|::
name|NativeText
argument_list|)
argument_list|,
name|compKey
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|removeTranslator
argument_list|(
name|ourTranslator
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|removeTranslator
argument_list|(
name|qtTranslator
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|i18nKeys_data
name|void
name|tst_QKeySequence
operator|::
name|i18nKeys_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"keycode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"keystring"
argument_list|)
expr_stmt|;
comment|// Japanese keyboard support
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Kanji"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|Key_Kanji
operator|<<
name|QString
argument_list|(
literal|"Kanji"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Muhenkan"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|Key_Muhenkan
operator|<<
name|QString
argument_list|(
literal|"Muhenkan"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Henkan"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|Key_Henkan
operator|<<
name|QString
argument_list|(
literal|"Henkan"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Romaji"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|Key_Romaji
operator|<<
name|QString
argument_list|(
literal|"Romaji"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Hiragana"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|Key_Hiragana
operator|<<
name|QString
argument_list|(
literal|"Hiragana"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Katakana"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|Key_Katakana
operator|<<
name|QString
argument_list|(
literal|"Katakana"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Hiragana Katakana"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|Key_Hiragana_Katakana
operator|<<
name|QString
argument_list|(
literal|"Hiragana Katakana"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Zenkaku"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|Key_Zenkaku
operator|<<
name|QString
argument_list|(
literal|"Zenkaku"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Hankaku"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|Key_Hankaku
operator|<<
name|QString
argument_list|(
literal|"Hankaku"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Zenkaku Hankaku"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|Key_Zenkaku_Hankaku
operator|<<
name|QString
argument_list|(
literal|"Zenkaku Hankaku"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Touroku"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|Key_Touroku
operator|<<
name|QString
argument_list|(
literal|"Touroku"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Massyo"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|Key_Massyo
operator|<<
name|QString
argument_list|(
literal|"Massyo"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Kana Lock"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|Key_Kana_Lock
operator|<<
name|QString
argument_list|(
literal|"Kana Lock"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Kana Shift"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|Key_Kana_Shift
operator|<<
name|QString
argument_list|(
literal|"Kana Shift"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Eisu Shift"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|Key_Eisu_Shift
operator|<<
name|QString
argument_list|(
literal|"Eisu Shift"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Eisu_toggle"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|Key_Eisu_toggle
operator|<<
name|QString
argument_list|(
literal|"Eisu toggle"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Code input"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|Key_Codeinput
operator|<<
name|QString
argument_list|(
literal|"Code input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Multiple Candidate"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|Key_MultipleCandidate
operator|<<
name|QString
argument_list|(
literal|"Multiple Candidate"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Previous Candidate"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|Key_PreviousCandidate
operator|<<
name|QString
argument_list|(
literal|"Previous Candidate"
argument_list|)
expr_stmt|;
comment|// Korean keyboard support
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Hangul"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|Key_Hangul
operator|<<
name|QString
argument_list|(
literal|"Hangul"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Hangul Start"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|Key_Hangul_Start
operator|<<
name|QString
argument_list|(
literal|"Hangul Start"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Hangul End"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|Key_Hangul_End
operator|<<
name|QString
argument_list|(
literal|"Hangul End"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Hangul Hanja"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|Key_Hangul_Hanja
operator|<<
name|QString
argument_list|(
literal|"Hangul Hanja"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Hangul Jamo"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|Key_Hangul_Jamo
operator|<<
name|QString
argument_list|(
literal|"Hangul Jamo"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Hangul Romaja"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|Key_Hangul_Romaja
operator|<<
name|QString
argument_list|(
literal|"Hangul Romaja"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Hangul Jeonja"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|Key_Hangul_Jeonja
operator|<<
name|QString
argument_list|(
literal|"Hangul Jeonja"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Hangul Banja"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|Key_Hangul_Banja
operator|<<
name|QString
argument_list|(
literal|"Hangul Banja"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Hangul PreHanja"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|Key_Hangul_PreHanja
operator|<<
name|QString
argument_list|(
literal|"Hangul PreHanja"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Hangul PostHanja"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|Key_Hangul_PostHanja
operator|<<
name|QString
argument_list|(
literal|"Hangul PostHanja"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Hangul Special"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|Key_Hangul_Special
operator|<<
name|QString
argument_list|(
literal|"Hangul Special"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|i18nKeys
name|void
name|tst_QKeySequence
operator|::
name|i18nKeys
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|keycode
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|keystring
argument_list|)
expr_stmt|;
name|QKeySequence
name|seq
argument_list|(
name|keycode
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|seq
argument_list|,
name|QKeySequence
argument_list|(
name|keystring
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|seq
operator|.
name|toString
argument_list|()
argument_list|,
name|keystring
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QKeySequence
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qkeysequence.moc"
end_include
end_unit
