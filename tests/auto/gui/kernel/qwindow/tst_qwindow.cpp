begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qwindow.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QEvent>
end_include
begin_class
DECL|class|tst_QWindow
class|class
name|tst_QWindow
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|mapGlobal
parameter_list|()
function_decl|;
name|void
name|positioning
parameter_list|()
function_decl|;
name|void
name|isActive
parameter_list|()
function_decl|;
name|void
name|testInputEvents
parameter_list|()
function_decl|;
name|void
name|touchToMouseTranslation
parameter_list|()
function_decl|;
name|void
name|mouseToTouchTranslation
parameter_list|()
function_decl|;
name|void
name|mouseToTouchLoop
parameter_list|()
function_decl|;
DECL|function|initTestCase
name|void
name|initTestCase
parameter_list|()
block|{
name|touchDevice
operator|=
operator|new
name|QTouchDevice
expr_stmt|;
name|touchDevice
operator|->
name|setType
argument_list|(
name|QTouchDevice
operator|::
name|TouchScreen
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|registerTouchDevice
argument_list|(
name|touchDevice
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|member|touchDevice
name|QTouchDevice
modifier|*
name|touchDevice
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|mapGlobal
name|void
name|tst_QWindow
operator|::
name|mapGlobal
parameter_list|()
block|{
name|QWindow
name|a
decl_stmt|;
name|QWindow
name|b
argument_list|(
operator|&
name|a
argument_list|)
decl_stmt|;
name|QWindow
name|c
argument_list|(
operator|&
name|b
argument_list|)
decl_stmt|;
name|a
operator|.
name|setGeometry
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|300
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|b
operator|.
name|setGeometry
argument_list|(
literal|20
argument_list|,
literal|20
argument_list|,
literal|200
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|c
operator|.
name|setGeometry
argument_list|(
literal|40
argument_list|,
literal|40
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|110
argument_list|,
literal|110
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|130
argument_list|,
literal|130
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|170
argument_list|,
literal|170
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|mapFromGlobal
argument_list|(
name|QPoint
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|90
argument_list|,
literal|90
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|mapFromGlobal
argument_list|(
name|QPoint
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|70
argument_list|,
literal|70
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|mapFromGlobal
argument_list|(
name|QPoint
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|30
argument_list|,
literal|30
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|Window
class|class
name|Window
super|:
specifier|public
name|QWindow
block|{
public|public:
DECL|function|Window
name|Window
parameter_list|()
block|{
name|reset
argument_list|()
expr_stmt|;
name|setWindowFlags
argument_list|(
name|Qt
operator|::
name|Window
operator||
name|Qt
operator|::
name|WindowTitleHint
operator||
name|Qt
operator|::
name|WindowMinMaxButtonsHint
operator||
name|Qt
operator|::
name|WindowCloseButtonHint
argument_list|)
expr_stmt|;
block|}
DECL|function|reset
name|void
name|reset
parameter_list|()
block|{
name|m_received
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|function|event
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|m_received
index|[
name|event
operator|->
name|type
argument_list|()
index|]
operator|++
expr_stmt|;
return|return
name|QWindow
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
DECL|function|received
name|int
name|received
parameter_list|(
name|QEvent
operator|::
name|Type
name|type
parameter_list|)
block|{
return|return
name|m_received
operator|.
name|value
argument_list|(
name|type
argument_list|,
literal|0
argument_list|)
return|;
block|}
private|private:
DECL|member|m_received
name|QHash
argument_list|<
name|QEvent
operator|::
name|Type
argument_list|,
name|int
argument_list|>
name|m_received
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|positioning
name|void
name|tst_QWindow
operator|::
name|positioning
parameter_list|()
block|{
name|QRect
name|geometry
argument_list|(
literal|80
argument_list|,
literal|80
argument_list|,
literal|40
argument_list|,
literal|40
argument_list|)
decl_stmt|;
name|Window
name|window
decl_stmt|;
name|window
operator|.
name|setGeometry
argument_list|(
name|geometry
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|geometry
argument_list|()
argument_list|,
name|geometry
argument_list|)
expr_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Resize
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Map
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QMargins
name|originalMargins
init|=
name|window
operator|.
name|frameMargins
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|pos
argument_list|()
argument_list|,
name|window
operator|.
name|framePos
argument_list|()
operator|+
name|QPoint
argument_list|(
name|originalMargins
operator|.
name|left
argument_list|()
argument_list|,
name|originalMargins
operator|.
name|top
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|.
name|frameGeometry
argument_list|()
operator|.
name|contains
argument_list|(
name|window
operator|.
name|geometry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QPoint
name|originalPos
init|=
name|window
operator|.
name|pos
argument_list|()
decl_stmt|;
name|QPoint
name|originalFramePos
init|=
name|window
operator|.
name|framePos
argument_list|()
decl_stmt|;
name|window
operator|.
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowFullScreen
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Resize
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|window
operator|.
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Resize
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|originalPos
argument_list|,
name|window
operator|.
name|pos
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|originalFramePos
argument_list|,
name|window
operator|.
name|framePos
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|originalMargins
argument_list|,
name|window
operator|.
name|frameMargins
argument_list|()
argument_list|)
expr_stmt|;
comment|// if our positioning is actually fully respected by the window manager
comment|// test whether it correctly handles frame positioning as well
if|if
condition|(
name|originalPos
operator|==
name|geometry
operator|.
name|topLeft
argument_list|()
operator|&&
operator|(
name|originalMargins
operator|.
name|top
argument_list|()
operator|!=
literal|0
operator|||
name|originalMargins
operator|.
name|left
argument_list|()
operator|!=
literal|0
operator|)
condition|)
block|{
name|QPoint
name|framePos
argument_list|(
literal|40
argument_list|,
literal|40
argument_list|)
decl_stmt|;
name|window
operator|.
name|reset
argument_list|()
expr_stmt|;
name|window
operator|.
name|setFramePos
argument_list|(
name|framePos
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Move
argument_list|)
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|framePos
argument_list|,
name|window
operator|.
name|framePos
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|originalMargins
argument_list|,
name|window
operator|.
name|frameMargins
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|pos
argument_list|()
argument_list|,
name|window
operator|.
name|framePos
argument_list|()
operator|+
name|QPoint
argument_list|(
name|originalMargins
operator|.
name|left
argument_list|()
argument_list|,
name|originalMargins
operator|.
name|top
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// and back to regular positioning
name|window
operator|.
name|reset
argument_list|()
expr_stmt|;
name|window
operator|.
name|setPos
argument_list|(
name|originalPos
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Move
argument_list|)
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|originalPos
argument_list|,
name|window
operator|.
name|pos
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|isActive
name|void
name|tst_QWindow
operator|::
name|isActive
parameter_list|()
block|{
name|Window
name|window
decl_stmt|;
name|window
operator|.
name|setGeometry
argument_list|(
literal|80
argument_list|,
literal|80
argument_list|,
literal|40
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Map
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Resize
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
operator|==
operator|&
name|window
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|Window
name|child
decl_stmt|;
name|child
operator|.
name|setParent
argument_list|(
operator|&
name|window
argument_list|)
expr_stmt|;
name|child
operator|.
name|setGeometry
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|child
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|child
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Map
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|child
operator|.
name|requestActivateWindow
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
operator|==
operator|&
name|child
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|child
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
comment|// parent shouldn't receive new map or resize events from child being shown
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Map
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Resize
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|FocusIn
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|FocusOut
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|child
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|FocusIn
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// child has focus
name|QVERIFY
argument_list|(
name|window
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|Window
name|dialog
decl_stmt|;
name|dialog
operator|.
name|setTransientParent
argument_list|(
operator|&
name|window
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setGeometry
argument_list|(
literal|110
argument_list|,
literal|110
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|show
argument_list|()
expr_stmt|;
name|dialog
operator|.
name|requestActivateWindow
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|dialog
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Map
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|dialog
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Resize
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
operator|==
operator|&
name|dialog
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|dialog
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
comment|// transient child has focus
name|QVERIFY
argument_list|(
name|window
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
comment|// parent is active
name|QVERIFY
argument_list|(
name|child
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|window
operator|.
name|requestActivateWindow
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
operator|==
operator|&
name|window
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|dialog
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|FocusOut
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|FocusIn
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
comment|// transient parent has focus
name|QVERIFY
argument_list|(
name|dialog
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
comment|// parent has focus
name|QVERIFY
argument_list|(
name|child
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|InputTestWindow
class|class
name|InputTestWindow
super|:
specifier|public
name|QWindow
block|{
public|public:
DECL|function|keyPressEvent
name|void
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|event
parameter_list|)
block|{
name|keyPressCode
operator|=
name|event
operator|->
name|key
argument_list|()
expr_stmt|;
block|}
DECL|function|keyReleaseEvent
name|void
name|keyReleaseEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|event
parameter_list|)
block|{
name|keyReleaseCode
operator|=
name|event
operator|->
name|key
argument_list|()
expr_stmt|;
block|}
DECL|function|mousePressEvent
name|void
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|ignoreMouse
condition|)
block|{
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|mousePressButton
operator|=
name|event
operator|->
name|button
argument_list|()
expr_stmt|;
name|mousePressScreenPos
operator|=
name|event
operator|->
name|screenPos
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|mouseReleaseEvent
name|void
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|ignoreMouse
condition|)
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
else|else
name|mouseReleaseButton
operator|=
name|event
operator|->
name|button
argument_list|()
expr_stmt|;
block|}
DECL|function|mouseMoveEvent
name|void
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|ignoreMouse
condition|)
block|{
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|mouseMoveButton
operator|=
name|event
operator|->
name|button
argument_list|()
expr_stmt|;
name|mouseMoveScreenPos
operator|=
name|event
operator|->
name|screenPos
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|touchEvent
name|void
name|touchEvent
parameter_list|(
name|QTouchEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|ignoreTouch
condition|)
block|{
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
name|QList
argument_list|<
name|QTouchEvent
operator|::
name|TouchPoint
argument_list|>
name|points
init|=
name|event
operator|->
name|touchPoints
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|points
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
switch|switch
condition|(
name|points
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|state
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|TouchPointPressed
case|:
operator|++
name|touchPressedCount
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|TouchPointReleased
case|:
operator|++
name|touchReleasedCount
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
block|}
DECL|function|InputTestWindow
name|InputTestWindow
parameter_list|()
block|{
name|keyPressCode
operator|=
name|keyReleaseCode
operator|=
literal|0
expr_stmt|;
name|mousePressButton
operator|=
name|mouseReleaseButton
operator|=
literal|0
expr_stmt|;
name|touchPressedCount
operator|=
name|touchReleasedCount
operator|=
literal|0
expr_stmt|;
name|ignoreMouse
operator|=
name|ignoreTouch
operator|=
literal|0
expr_stmt|;
block|}
DECL|member|keyPressCode
DECL|member|keyReleaseCode
name|int
name|keyPressCode
decl_stmt|,
name|keyReleaseCode
decl_stmt|;
DECL|member|mousePressButton
DECL|member|mouseReleaseButton
DECL|member|mouseMoveButton
name|int
name|mousePressButton
decl_stmt|,
name|mouseReleaseButton
decl_stmt|,
name|mouseMoveButton
decl_stmt|;
DECL|member|mousePressScreenPos
DECL|member|mouseMoveScreenPos
name|QPointF
name|mousePressScreenPos
decl_stmt|,
name|mouseMoveScreenPos
decl_stmt|;
DECL|member|touchPressedCount
DECL|member|touchReleasedCount
name|int
name|touchPressedCount
decl_stmt|,
name|touchReleasedCount
decl_stmt|;
DECL|member|ignoreMouse
DECL|member|ignoreTouch
name|bool
name|ignoreMouse
decl_stmt|,
name|ignoreTouch
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|testInputEvents
name|void
name|tst_QWindow
operator|::
name|testInputEvents
parameter_list|()
block|{
name|InputTestWindow
name|window
decl_stmt|;
name|window
operator|.
name|setGeometry
argument_list|(
literal|80
argument_list|,
literal|80
argument_list|,
literal|40
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
operator|&
name|window
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleKeyEvent
argument_list|(
operator|&
name|window
argument_list|,
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleKeyEvent
argument_list|(
operator|&
name|window
argument_list|,
name|QEvent
operator|::
name|KeyRelease
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|keyPressCode
argument_list|,
name|int
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|keyReleaseCode
argument_list|,
name|int
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|)
argument_list|)
expr_stmt|;
name|QPointF
name|local
argument_list|(
literal|12
argument_list|,
literal|34
argument_list|)
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mousePressButton
argument_list|,
name|int
argument_list|(
name|Qt
operator|::
name|LeftButton
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mouseReleaseButton
argument_list|,
name|int
argument_list|(
name|Qt
operator|::
name|LeftButton
argument_list|)
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QWindowSystemInterface
operator|::
name|TouchPoint
argument_list|>
name|points
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|TouchPoint
name|tp1
decl_stmt|,
name|tp2
decl_stmt|;
name|tp1
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|tp1
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointPressed
expr_stmt|;
name|tp1
operator|.
name|area
operator|=
name|QRect
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|tp2
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|tp2
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointPressed
expr_stmt|;
name|tp2
operator|.
name|area
operator|=
name|QRect
argument_list|(
literal|20
argument_list|,
literal|20
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|points
operator|<<
name|tp1
operator|<<
name|tp2
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|,
name|points
argument_list|)
expr_stmt|;
name|points
index|[
literal|0
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointReleased
expr_stmt|;
name|points
index|[
literal|1
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointReleased
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|,
name|points
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|touchPressedCount
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|touchReleasedCount
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|touchToMouseTranslation
name|void
name|tst_QWindow
operator|::
name|touchToMouseTranslation
parameter_list|()
block|{
name|InputTestWindow
name|window
decl_stmt|;
name|window
operator|.
name|ignoreTouch
operator|=
literal|true
expr_stmt|;
name|window
operator|.
name|setGeometry
argument_list|(
literal|80
argument_list|,
literal|80
argument_list|,
literal|40
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
operator|&
name|window
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QWindowSystemInterface
operator|::
name|TouchPoint
argument_list|>
name|points
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|TouchPoint
name|tp1
decl_stmt|,
name|tp2
decl_stmt|;
specifier|const
name|QRectF
name|pressArea
argument_list|(
literal|101
argument_list|,
literal|102
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
decl_stmt|;
specifier|const
name|QRectF
name|moveArea
argument_list|(
literal|105
argument_list|,
literal|108
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|tp1
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|tp1
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointPressed
expr_stmt|;
name|tp1
operator|.
name|area
operator|=
name|pressArea
expr_stmt|;
name|tp2
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|tp2
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointPressed
expr_stmt|;
name|points
operator|<<
name|tp1
operator|<<
name|tp2
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|,
name|points
argument_list|)
expr_stmt|;
comment|// Now an update but with changed list order. The mouse event should still
comment|// be generated from the point with id 1.
name|tp1
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|tp1
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointStationary
expr_stmt|;
name|tp2
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|tp2
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointMoved
expr_stmt|;
name|tp2
operator|.
name|area
operator|=
name|moveArea
expr_stmt|;
name|points
operator|.
name|clear
argument_list|()
expr_stmt|;
name|points
operator|<<
name|tp1
operator|<<
name|tp2
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|,
name|points
argument_list|)
expr_stmt|;
name|points
index|[
literal|0
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointReleased
expr_stmt|;
name|points
index|[
literal|1
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointReleased
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|,
name|points
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|mousePressButton
argument_list|,
name|int
argument_list|(
name|Qt
operator|::
name|LeftButton
argument_list|)
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|mouseReleaseButton
argument_list|,
name|int
argument_list|(
name|Qt
operator|::
name|LeftButton
argument_list|)
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|mousePressScreenPos
argument_list|,
name|pressArea
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|mouseMoveScreenPos
argument_list|,
name|moveArea
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|window
operator|.
name|mousePressButton
operator|=
literal|0
expr_stmt|;
name|window
operator|.
name|mouseReleaseButton
operator|=
literal|0
expr_stmt|;
name|window
operator|.
name|ignoreTouch
operator|=
literal|false
expr_stmt|;
name|points
index|[
literal|0
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointPressed
expr_stmt|;
name|points
index|[
literal|1
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointPressed
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|,
name|points
argument_list|)
expr_stmt|;
name|points
index|[
literal|0
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointReleased
expr_stmt|;
name|points
index|[
literal|1
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointReleased
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|,
name|points
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
comment|// no new mouse events should be generated since the input window handles the touch events
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|mousePressButton
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|mouseReleaseButton
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_SynthesizeMouseForUnhandledTouchEvents
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|window
operator|.
name|ignoreTouch
operator|=
literal|true
expr_stmt|;
name|points
index|[
literal|0
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointPressed
expr_stmt|;
name|points
index|[
literal|1
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointPressed
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|,
name|points
argument_list|)
expr_stmt|;
name|points
index|[
literal|0
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointReleased
expr_stmt|;
name|points
index|[
literal|1
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointReleased
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|,
name|points
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_SynthesizeMouseForUnhandledTouchEvents
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// mouse event synthesizing disabled
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|mousePressButton
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|mouseReleaseButton
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseToTouchTranslation
name|void
name|tst_QWindow
operator|::
name|mouseToTouchTranslation
parameter_list|()
block|{
name|qApp
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_SynthesizeTouchForUnhandledMouseEvents
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|InputTestWindow
name|window
decl_stmt|;
name|window
operator|.
name|ignoreMouse
operator|=
literal|true
expr_stmt|;
name|window
operator|.
name|setGeometry
argument_list|(
literal|80
argument_list|,
literal|80
argument_list|,
literal|40
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
operator|&
name|window
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|,
name|window
operator|.
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|,
name|window
operator|.
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_SynthesizeTouchForUnhandledMouseEvents
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|touchPressedCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|touchReleasedCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_SynthesizeTouchForUnhandledMouseEvents
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|window
operator|.
name|ignoreMouse
operator|=
literal|false
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|,
name|window
operator|.
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|,
name|window
operator|.
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_SynthesizeTouchForUnhandledMouseEvents
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// no new touch events should be generated since the input window handles the mouse events
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|touchPressedCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|touchReleasedCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|window
operator|.
name|ignoreMouse
operator|=
literal|true
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|,
name|window
operator|.
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|,
name|window
operator|.
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
comment|// touch event synthesis disabled
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|touchPressedCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|touchReleasedCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseToTouchLoop
name|void
name|tst_QWindow
operator|::
name|mouseToTouchLoop
parameter_list|()
block|{
comment|// make sure there's no infinite loop when synthesizing both ways
name|qApp
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_SynthesizeTouchForUnhandledMouseEvents
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_SynthesizeMouseForUnhandledTouchEvents
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|InputTestWindow
name|window
decl_stmt|;
name|window
operator|.
name|ignoreMouse
operator|=
literal|true
expr_stmt|;
name|window
operator|.
name|ignoreTouch
operator|=
literal|true
expr_stmt|;
name|window
operator|.
name|setGeometry
argument_list|(
literal|80
argument_list|,
literal|80
argument_list|,
literal|40
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
operator|&
name|window
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|,
name|window
operator|.
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|,
name|window
operator|.
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_SynthesizeTouchForUnhandledMouseEvents
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_SynthesizeMouseForUnhandledTouchEvents
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_include
include|#
directive|include
file|<tst_qwindow.moc>
end_include
begin_expr_stmt
DECL|variable|tst_QWindow
name|QTEST_MAIN
argument_list|(
name|tst_QWindow
argument_list|)
expr_stmt|;
end_expr_stmt
end_unit
