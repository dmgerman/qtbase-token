begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qrasterwindow.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qwindowsysteminterface.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformintegration.h>
end_include
begin_include
include|#
directive|include
file|<private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qhighdpiscaling_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/QPainter>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QEvent>
end_include
begin_include
include|#
directive|include
file|<QStyleHints>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_QNX
argument_list|)
end_if
begin_include
include|#
directive|include
file|<QOpenGLContext>
end_include
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINRT
argument_list|)
end_elif
begin_include
include|#
directive|include
file|<QtCore/qt_windows.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// For QSignalSpy slot connections.
end_comment
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|Qt::ScreenOrientation
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QWindow::Visibility
argument_list|)
end_macro
begin_class
DECL|class|tst_QWindow
class|class
name|tst_QWindow
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|eventOrderOnShow
parameter_list|()
function_decl|;
name|void
name|resizeEventAfterResize
parameter_list|()
function_decl|;
name|void
name|mapGlobal
parameter_list|()
function_decl|;
name|void
name|positioning_data
parameter_list|()
function_decl|;
name|void
name|positioning
parameter_list|()
function_decl|;
name|void
name|positioningDuringMinimized
parameter_list|()
function_decl|;
name|void
name|platformSurface
parameter_list|()
function_decl|;
name|void
name|isExposed
parameter_list|()
function_decl|;
name|void
name|isActive
parameter_list|()
function_decl|;
name|void
name|testInputEvents
parameter_list|()
function_decl|;
name|void
name|touchToMouseTranslation
parameter_list|()
function_decl|;
name|void
name|touchToMouseTranslationForDevices
parameter_list|()
function_decl|;
name|void
name|mouseToTouchTranslation
parameter_list|()
function_decl|;
name|void
name|mouseToTouchLoop
parameter_list|()
function_decl|;
name|void
name|touchCancel
parameter_list|()
function_decl|;
name|void
name|touchCancelWithTouchToMouse
parameter_list|()
function_decl|;
name|void
name|touchInterruptedByPopup
parameter_list|()
function_decl|;
name|void
name|orientation
parameter_list|()
function_decl|;
name|void
name|sizes
parameter_list|()
function_decl|;
name|void
name|close
parameter_list|()
function_decl|;
name|void
name|activateAndClose
parameter_list|()
function_decl|;
name|void
name|mouseEventSequence
parameter_list|()
function_decl|;
name|void
name|windowModality
parameter_list|()
function_decl|;
name|void
name|inputReentrancy
parameter_list|()
function_decl|;
name|void
name|tabletEvents
parameter_list|()
function_decl|;
name|void
name|windowModality_QTBUG27039
parameter_list|()
function_decl|;
name|void
name|visibility
parameter_list|()
function_decl|;
name|void
name|mask
parameter_list|()
function_decl|;
name|void
name|initialSize
parameter_list|()
function_decl|;
name|void
name|modalDialog
parameter_list|()
function_decl|;
name|void
name|modalDialogClosingOneOfTwoModal
parameter_list|()
function_decl|;
name|void
name|modalWithChildWindow
parameter_list|()
function_decl|;
name|void
name|modalWindowModallity
parameter_list|()
function_decl|;
name|void
name|modalWindowPosition
parameter_list|()
function_decl|;
name|void
name|windowsTransientChildren
parameter_list|()
function_decl|;
name|void
name|requestUpdate
parameter_list|()
function_decl|;
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|stateChange_data
parameter_list|()
function_decl|;
name|void
name|stateChange
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private:
DECL|member|m_availableTopLeft
name|QPoint
name|m_availableTopLeft
decl_stmt|;
DECL|member|m_testWindowSize
name|QSize
name|m_testWindowSize
decl_stmt|;
DECL|member|touchDevice
name|QTouchDevice
modifier|*
name|touchDevice
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|initTestCase
name|void
name|tst_QWindow
operator|::
name|initTestCase
parameter_list|()
block|{
comment|// Size of reference window, 200 for< 2000, scale up for larger screens
comment|// to avoid Windows warnings about minimum size for decorated windows.
name|int
name|width
init|=
literal|200
decl_stmt|;
specifier|const
name|QScreen
modifier|*
name|screen
init|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
decl_stmt|;
name|m_availableTopLeft
operator|=
name|screen
operator|->
name|availableGeometry
argument_list|()
operator|.
name|topLeft
argument_list|()
expr_stmt|;
specifier|const
name|int
name|screenWidth
init|=
name|screen
operator|->
name|geometry
argument_list|()
operator|.
name|width
argument_list|()
decl_stmt|;
if|if
condition|(
name|screenWidth
operator|>
literal|2000
condition|)
name|width
operator|=
literal|100
operator|*
operator|(
operator|(
name|screenWidth
operator|+
literal|500
operator|)
operator|/
literal|1000
operator|)
expr_stmt|;
name|m_testWindowSize
operator|=
name|QSize
argument_list|(
name|width
argument_list|,
name|width
argument_list|)
expr_stmt|;
name|touchDevice
operator|=
operator|new
name|QTouchDevice
expr_stmt|;
name|touchDevice
operator|->
name|setType
argument_list|(
name|QTouchDevice
operator|::
name|TouchScreen
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|registerTouchDevice
argument_list|(
name|touchDevice
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QWindow
operator|::
name|cleanup
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QGuiApplication
operator|::
name|allWindows
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mapGlobal
name|void
name|tst_QWindow
operator|::
name|mapGlobal
parameter_list|()
block|{
name|QWindow
name|a
decl_stmt|;
name|QWindow
name|b
argument_list|(
operator|&
name|a
argument_list|)
decl_stmt|;
name|QWindow
name|c
argument_list|(
operator|&
name|b
argument_list|)
decl_stmt|;
name|a
operator|.
name|setGeometry
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|300
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|b
operator|.
name|setGeometry
argument_list|(
literal|20
argument_list|,
literal|20
argument_list|,
literal|200
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|c
operator|.
name|setGeometry
argument_list|(
literal|40
argument_list|,
literal|40
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|110
argument_list|,
literal|110
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|130
argument_list|,
literal|130
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|170
argument_list|,
literal|170
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|mapFromGlobal
argument_list|(
name|QPoint
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|90
argument_list|,
literal|90
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|mapFromGlobal
argument_list|(
name|QPoint
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|70
argument_list|,
literal|70
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|mapFromGlobal
argument_list|(
name|QPoint
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|30
argument_list|,
literal|30
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|Window
class|class
name|Window
super|:
specifier|public
name|QWindow
block|{
public|public:
DECL|function|Window
name|Window
parameter_list|(
specifier|const
name|Qt
operator|::
name|WindowFlags
name|flags
init|=
name|Qt
operator|::
name|Window
operator||
name|Qt
operator|::
name|WindowTitleHint
operator||
name|Qt
operator|::
name|WindowMinMaxButtonsHint
operator||
name|Qt
operator|::
name|WindowCloseButtonHint
parameter_list|)
block|{
name|reset
argument_list|()
expr_stmt|;
name|setFlags
argument_list|(
name|flags
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_QNX
argument_list|)
name|setSurfaceType
argument_list|(
name|QSurface
operator|::
name|OpenGLSurface
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
DECL|function|reset
name|void
name|reset
parameter_list|()
block|{
name|m_received
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_framePositionsOnMove
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|function|event
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|m_received
index|[
name|event
operator|->
name|type
argument_list|()
index|]
operator|++
expr_stmt|;
name|m_order
operator|<<
name|event
operator|->
name|type
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|Expose
case|:
name|m_exposeRegion
operator|=
cast|static_cast
argument_list|<
name|QExposeEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
operator|->
name|region
argument_list|()
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|PlatformSurface
case|:
name|m_surfaceventType
operator|=
cast|static_cast
argument_list|<
name|QPlatformSurfaceEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
operator|->
name|surfaceEventType
argument_list|()
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|Move
case|:
name|m_framePositionsOnMove
operator|<<
name|framePosition
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|QWindow
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
DECL|function|received
name|int
name|received
parameter_list|(
name|QEvent
operator|::
name|Type
name|type
parameter_list|)
block|{
return|return
name|m_received
operator|.
name|value
argument_list|(
name|type
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|function|eventIndex
name|int
name|eventIndex
parameter_list|(
name|QEvent
operator|::
name|Type
name|type
parameter_list|)
block|{
return|return
name|m_order
operator|.
name|indexOf
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|function|exposeRegion
name|QRegion
name|exposeRegion
parameter_list|()
specifier|const
block|{
return|return
name|m_exposeRegion
return|;
block|}
DECL|function|surfaceEventType
name|QPlatformSurfaceEvent
operator|::
name|SurfaceEventType
name|surfaceEventType
parameter_list|()
specifier|const
block|{
return|return
name|m_surfaceventType
return|;
block|}
DECL|member|m_framePositionsOnMove
name|QVector
argument_list|<
name|QPoint
argument_list|>
name|m_framePositionsOnMove
decl_stmt|;
private|private:
DECL|member|m_received
name|QHash
argument_list|<
name|QEvent
operator|::
name|Type
argument_list|,
name|int
argument_list|>
name|m_received
decl_stmt|;
DECL|member|m_order
name|QVector
argument_list|<
name|QEvent
operator|::
name|Type
argument_list|>
name|m_order
decl_stmt|;
DECL|member|m_exposeRegion
name|QRegion
name|m_exposeRegion
decl_stmt|;
DECL|member|m_surfaceventType
name|QPlatformSurfaceEvent
operator|::
name|SurfaceEventType
name|m_surfaceventType
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|eventOrderOnShow
name|void
name|tst_QWindow
operator|::
name|eventOrderOnShow
parameter_list|()
block|{
comment|// Some platforms enforce minimum widths for windows, which can cause extra resize
comment|// events, so set the width to suitably large value to avoid those.
name|QRect
name|geometry
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|80
argument_list|,
literal|80
argument_list|)
argument_list|,
name|m_testWindowSize
argument_list|)
decl_stmt|;
name|Window
name|window
decl_stmt|;
name|window
operator|.
name|setGeometry
argument_list|(
name|geometry
argument_list|)
expr_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Show
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Resize
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|window
operator|.
name|isExposed
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|.
name|eventIndex
argument_list|(
name|QEvent
operator|::
name|Show
argument_list|)
operator|<
name|window
operator|.
name|eventIndex
argument_list|(
name|QEvent
operator|::
name|Resize
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|.
name|eventIndex
argument_list|(
name|QEvent
operator|::
name|Resize
argument_list|)
operator|<
name|window
operator|.
name|eventIndex
argument_list|(
name|QEvent
operator|::
name|Expose
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resizeEventAfterResize
name|void
name|tst_QWindow
operator|::
name|resizeEventAfterResize
parameter_list|()
block|{
comment|// Some platforms enforce minimum widths for windows, which can cause extra resize
comment|// events, so set the width to suitably large value to avoid those.
name|QRect
name|geometry
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|80
argument_list|,
literal|80
argument_list|)
argument_list|,
name|m_testWindowSize
operator|*
literal|2
argument_list|)
decl_stmt|;
name|Window
name|window
decl_stmt|;
name|window
operator|.
name|setGeometry
argument_list|(
name|geometry
argument_list|)
expr_stmt|;
name|window
operator|.
name|showNormal
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Resize
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// QTBUG-32706
comment|// Make sure we get a resizeEvent after calling resize
name|window
operator|.
name|resize
argument_list|(
name|m_testWindowSize
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_BLACKBERRY
argument_list|)
comment|// "window" is the "root" window and will always be shown fullscreen
comment|// so we only expect one resize event
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Resize
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
else|#
directive|else
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Resize
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|positioning_data
name|void
name|tst_QWindow
operator|::
name|positioning_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"windowflags"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"default"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Window
operator||
name|Qt
operator|::
name|WindowTitleHint
operator||
name|Qt
operator|::
name|WindowMinMaxButtonsHint
operator||
name|Qt
operator|::
name|WindowCloseButtonHint
operator||
name|Qt
operator|::
name|WindowFullscreenButtonHint
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_OSX
name|QTest
operator|::
name|newRow
argument_list|(
literal|"fake"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Window
operator||
name|Qt
operator|::
name|WindowTitleHint
operator||
name|Qt
operator|::
name|WindowMinMaxButtonsHint
operator||
name|Qt
operator|::
name|WindowCloseButtonHint
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|// Compare a window position that may go through scaling in the platform plugin with fuzz.
end_comment
begin_function
DECL|function|qFuzzyCompareWindowPosition
specifier|static
specifier|inline
name|bool
name|qFuzzyCompareWindowPosition
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|p1
parameter_list|,
specifier|const
name|QPoint
name|p2
parameter_list|,
name|int
name|fuzz
parameter_list|)
block|{
return|return
operator|(
name|p1
operator|-
name|p2
operator|)
operator|.
name|manhattanLength
argument_list|()
operator|<=
name|fuzz
return|;
block|}
end_function
begin_function
DECL|function|qFuzzyCompareWindowSize
specifier|static
specifier|inline
name|bool
name|qFuzzyCompareWindowSize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|s1
parameter_list|,
specifier|const
name|QSize
modifier|&
name|s2
parameter_list|,
name|int
name|fuzz
parameter_list|)
block|{
specifier|const
name|int
name|manhattanLength
init|=
name|qAbs
argument_list|(
name|s1
operator|.
name|width
argument_list|()
operator|-
name|s2
operator|.
name|width
argument_list|()
argument_list|)
operator|+
name|qAbs
argument_list|(
name|s1
operator|.
name|height
argument_list|()
operator|-
name|s2
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|manhattanLength
operator|<=
name|fuzz
return|;
block|}
end_function
begin_function
DECL|function|qFuzzyCompareWindowGeometry
specifier|static
specifier|inline
name|bool
name|qFuzzyCompareWindowGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r1
parameter_list|,
specifier|const
name|QRect
modifier|&
name|r2
parameter_list|,
name|int
name|fuzz
parameter_list|)
block|{
return|return
name|qFuzzyCompareWindowPosition
argument_list|(
name|r1
operator|.
name|topLeft
argument_list|()
argument_list|,
name|r2
operator|.
name|topLeft
argument_list|()
argument_list|,
name|fuzz
argument_list|)
operator|&&
name|qFuzzyCompareWindowSize
argument_list|(
name|r1
operator|.
name|size
argument_list|()
argument_list|,
name|r2
operator|.
name|size
argument_list|()
argument_list|,
name|fuzz
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|msgPointMismatch
specifier|static
name|QString
name|msgPointMismatch
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|p1
parameter_list|,
specifier|const
name|QPoint
name|p2
parameter_list|)
block|{
name|QString
name|result
decl_stmt|;
name|QDebug
argument_list|(
operator|&
name|result
argument_list|)
operator|<<
name|p1
operator|<<
literal|"!="
operator|<<
name|p2
operator|<<
literal|", manhattanLength="
operator|<<
operator|(
name|p1
operator|-
name|p2
operator|)
operator|.
name|manhattanLength
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|msgRectMismatch
specifier|static
name|QString
name|msgRectMismatch
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r1
parameter_list|,
specifier|const
name|QRect
modifier|&
name|r2
parameter_list|)
block|{
name|QString
name|result
decl_stmt|;
name|QDebug
argument_list|(
operator|&
name|result
argument_list|)
operator|<<
name|r1
operator|<<
literal|"!="
operator|<<
name|r2
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|positioning
name|void
name|tst_QWindow
operator|::
name|positioning
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|hasCapability
argument_list|(
name|QPlatformIntegration
operator|::
name|NonFullScreenWindows
argument_list|)
condition|)
block|{
name|QSKIP
argument_list|(
literal|"This platform does not support non-fullscreen windows"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|QGuiApplication
operator|::
name|platformName
argument_list|()
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|"wayland"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"Wayland: This fails. Figure out why."
argument_list|)
expr_stmt|;
comment|// Some platforms enforce minimum widths for windows, which can cause extra resize
comment|// events, so set the width to suitably large value to avoid those.
specifier|const
name|QRect
name|geometry
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|80
argument_list|,
literal|80
argument_list|)
argument_list|,
name|m_testWindowSize
argument_list|)
decl_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|windowflags
argument_list|)
expr_stmt|;
name|Window
name|window
argument_list|(
operator|(
name|Qt
operator|::
name|WindowFlags
operator|)
name|windowflags
argument_list|)
decl_stmt|;
name|window
operator|.
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|20
argument_list|,
literal|20
argument_list|)
argument_list|,
name|m_testWindowSize
argument_list|)
argument_list|)
expr_stmt|;
name|window
operator|.
name|setFramePosition
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|40
argument_list|,
literal|40
argument_list|)
argument_list|)
expr_stmt|;
comment|// Move window around before show, size must not change.
name|QCOMPARE
argument_list|(
name|window
operator|.
name|geometry
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|m_testWindowSize
argument_list|)
expr_stmt|;
name|window
operator|.
name|setGeometry
argument_list|(
name|geometry
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|geometry
argument_list|()
argument_list|,
name|geometry
argument_list|)
expr_stmt|;
comment|//  explicitly use non-fullscreen show. show() can be fullscreen on some platforms
name|window
operator|.
name|showNormal
argument_list|()
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|window
argument_list|)
expr_stmt|;
name|QMargins
name|originalMargins
init|=
name|window
operator|.
name|frameMargins
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|position
argument_list|()
argument_list|,
name|window
operator|.
name|framePosition
argument_list|()
operator|+
name|QPoint
argument_list|(
name|originalMargins
operator|.
name|left
argument_list|()
argument_list|,
name|originalMargins
operator|.
name|top
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|.
name|frameGeometry
argument_list|()
operator|.
name|contains
argument_list|(
name|window
operator|.
name|geometry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QPoint
name|originalPos
init|=
name|window
operator|.
name|position
argument_list|()
decl_stmt|;
name|QPoint
name|originalFramePos
init|=
name|window
operator|.
name|framePosition
argument_list|()
decl_stmt|;
name|window
operator|.
name|reset
argument_list|()
expr_stmt|;
name|window
operator|.
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowFullScreen
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
comment|// On BB10 the window is the root window and fullscreen, so nothing is resized.
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_BLACKBERRY
argument_list|)
name|QTRY_VERIFY
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Resize
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|qWait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|window
operator|.
name|reset
argument_list|()
expr_stmt|;
name|window
operator|.
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
comment|// On BB10 the window is the root window and fullscreen, so nothing is resized.
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_BLACKBERRY
argument_list|)
name|QTRY_VERIFY
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Resize
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|qWait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|originalPos
argument_list|,
name|window
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|originalFramePos
argument_list|,
name|window
operator|.
name|framePosition
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|originalMargins
argument_list|,
name|window
operator|.
name|frameMargins
argument_list|()
argument_list|)
expr_stmt|;
comment|// if our positioning is actually fully respected by the window manager
comment|// test whether it correctly handles frame positioning as well
if|if
condition|(
name|originalPos
operator|==
name|geometry
operator|.
name|topLeft
argument_list|()
operator|&&
operator|(
name|originalMargins
operator|.
name|top
argument_list|()
operator|!=
literal|0
operator|||
name|originalMargins
operator|.
name|left
argument_list|()
operator|!=
literal|0
operator|)
condition|)
block|{
specifier|const
name|QScreen
modifier|*
name|screen
init|=
name|window
operator|.
name|screen
argument_list|()
decl_stmt|;
specifier|const
name|QRect
name|availableGeometry
init|=
name|screen
operator|->
name|availableGeometry
argument_list|()
decl_stmt|;
specifier|const
name|QPoint
name|framePos
init|=
name|availableGeometry
operator|.
name|center
argument_list|()
decl_stmt|;
name|window
operator|.
name|reset
argument_list|()
expr_stmt|;
specifier|const
name|QPoint
name|oldFramePos
init|=
name|window
operator|.
name|framePosition
argument_list|()
decl_stmt|;
name|window
operator|.
name|setFramePosition
argument_list|(
name|framePos
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Move
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|int
name|fuzz
init|=
name|int
argument_list|(
name|QHighDpiScaling
operator|::
name|factor
argument_list|(
operator|&
name|window
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|qFuzzyCompareWindowPosition
argument_list|(
name|window
operator|.
name|framePosition
argument_list|()
argument_list|,
name|framePos
argument_list|,
name|fuzz
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"About to fail auto-test. Here is some additional information:"
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"window.framePosition() == "
operator|<<
name|window
operator|.
name|framePosition
argument_list|()
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"old frame position == "
operator|<<
name|oldFramePos
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"We received "
operator|<<
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Move
argument_list|)
operator|<<
literal|" move events"
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"frame positions after each move event:"
operator|<<
name|window
operator|.
name|m_framePositionsOnMove
expr_stmt|;
block|}
name|QTRY_VERIFY2
argument_list|(
name|qFuzzyCompareWindowPosition
argument_list|(
name|window
operator|.
name|framePosition
argument_list|()
argument_list|,
name|framePos
argument_list|,
name|fuzz
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|msgPointMismatch
argument_list|(
name|window
operator|.
name|framePosition
argument_list|()
argument_list|,
name|framePos
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|originalMargins
argument_list|,
name|window
operator|.
name|frameMargins
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|position
argument_list|()
argument_list|,
name|window
operator|.
name|framePosition
argument_list|()
operator|+
name|QPoint
argument_list|(
name|originalMargins
operator|.
name|left
argument_list|()
argument_list|,
name|originalMargins
operator|.
name|top
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// and back to regular positioning
name|window
operator|.
name|reset
argument_list|()
expr_stmt|;
name|window
operator|.
name|setPosition
argument_list|(
name|originalPos
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Move
argument_list|)
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|originalPos
argument_list|,
name|window
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|positioningDuringMinimized
name|void
name|tst_QWindow
operator|::
name|positioningDuringMinimized
parameter_list|()
block|{
comment|// QTBUG-39544, setting a geometry in minimized state should work as well.
if|if
condition|(
name|QGuiApplication
operator|::
name|platformName
argument_list|()
operator|.
name|compare
argument_list|(
literal|"windows"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|!=
literal|0
operator|&&
name|QGuiApplication
operator|::
name|platformName
argument_list|()
operator|.
name|compare
argument_list|(
literal|"cocoa"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|!=
literal|0
condition|)
name|QSKIP
argument_list|(
literal|"Not supported on this platform"
argument_list|)
expr_stmt|;
name|Window
name|window
decl_stmt|;
name|window
operator|.
name|setTitle
argument_list|(
name|QStringLiteral
argument_list|(
literal|"positioningDuringMinimized"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QRect
name|initialGeometry
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|,
name|m_testWindowSize
argument_list|)
decl_stmt|;
name|window
operator|.
name|setGeometry
argument_list|(
name|initialGeometry
argument_list|)
expr_stmt|;
name|window
operator|.
name|showNormal
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|window
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|geometry
argument_list|()
argument_list|,
name|initialGeometry
argument_list|)
expr_stmt|;
name|window
operator|.
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowMinimized
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|geometry
argument_list|()
argument_list|,
name|initialGeometry
argument_list|)
expr_stmt|;
specifier|const
name|QRect
name|newGeometry
argument_list|(
name|initialGeometry
operator|.
name|topLeft
argument_list|()
operator|+
name|QPoint
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|)
argument_list|,
name|initialGeometry
operator|.
name|size
argument_list|()
operator|+
name|QSize
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|)
argument_list|)
decl_stmt|;
name|window
operator|.
name|setGeometry
argument_list|(
name|newGeometry
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|geometry
argument_list|()
argument_list|,
name|newGeometry
argument_list|)
expr_stmt|;
name|window
operator|.
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|geometry
argument_list|()
argument_list|,
name|newGeometry
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// QTBUG-49709: Verify that the normal geometry is correctly restored
end_comment
begin_comment
comment|// when executing a sequence of window state changes. So far, Windows
end_comment
begin_comment
comment|// only where state changes have immediate effect.
end_comment
begin_typedef
DECL|typedef|WindowStateList
typedef|typedef
name|QList
argument_list|<
name|Qt
operator|::
name|WindowState
argument_list|>
name|WindowStateList
typedef|;
end_typedef
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|WindowStateList
argument_list|)
end_macro
begin_function
DECL|function|stateChange_data
name|void
name|tst_QWindow
operator|::
name|stateChange_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|WindowStateList
argument_list|>
argument_list|(
literal|"stateSequence"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"normal->min->normal"
argument_list|)
operator|<<
operator|(
name|WindowStateList
argument_list|()
operator|<<
name|Qt
operator|::
name|WindowMinimized
operator|<<
name|Qt
operator|::
name|WindowNoState
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"normal->maximized->normal"
argument_list|)
operator|<<
operator|(
name|WindowStateList
argument_list|()
operator|<<
name|Qt
operator|::
name|WindowMaximized
operator|<<
name|Qt
operator|::
name|WindowNoState
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"normal->fullscreen->normal"
argument_list|)
operator|<<
operator|(
name|WindowStateList
argument_list|()
operator|<<
name|Qt
operator|::
name|WindowFullScreen
operator|<<
name|Qt
operator|::
name|WindowNoState
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"normal->maximized->fullscreen->normal"
argument_list|)
operator|<<
operator|(
name|WindowStateList
argument_list|()
operator|<<
name|Qt
operator|::
name|WindowMaximized
operator|<<
name|Qt
operator|::
name|WindowFullScreen
operator|<<
name|Qt
operator|::
name|WindowNoState
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stateChange
name|void
name|tst_QWindow
operator|::
name|stateChange
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|WindowStateList
argument_list|,
name|stateSequence
argument_list|)
expr_stmt|;
if|if
condition|(
name|QGuiApplication
operator|::
name|platformName
argument_list|()
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|"windows"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"Windows-only test"
argument_list|)
expr_stmt|;
name|Window
name|window
decl_stmt|;
name|window
operator|.
name|setTitle
argument_list|(
name|QLatin1String
argument_list|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|QLatin1String
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QRect
name|normalGeometry
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|40
argument_list|,
literal|40
argument_list|)
argument_list|,
name|m_testWindowSize
argument_list|)
decl_stmt|;
name|window
operator|.
name|setGeometry
argument_list|(
name|normalGeometry
argument_list|)
expr_stmt|;
comment|//  explicitly use non-fullscreen show. show() can be fullscreen on some platforms
name|window
operator|.
name|showNormal
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|window
argument_list|)
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|Qt
operator|::
name|WindowState
name|state
decl|,
name|stateSequence
control|)
block|{
name|window
operator|.
name|setWindowState
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
block|}
specifier|const
name|QRect
name|geometry
init|=
name|window
operator|.
name|geometry
argument_list|()
decl_stmt|;
specifier|const
name|int
name|fuzz
init|=
name|int
argument_list|(
name|QHighDpiScaling
operator|::
name|factor
argument_list|(
operator|&
name|window
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|qFuzzyCompareWindowGeometry
argument_list|(
name|geometry
argument_list|,
name|normalGeometry
argument_list|,
name|fuzz
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|msgRectMismatch
argument_list|(
name|geometry
argument_list|,
name|normalGeometry
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|PlatformWindowFilter
class|class
name|PlatformWindowFilter
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|PlatformWindowFilter
name|PlatformWindowFilter
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_window
argument_list|(
name|Q_NULLPTR
argument_list|)
member_init_list|,
name|m_alwaysExisted
argument_list|(
literal|true
argument_list|)
block|{}
DECL|function|setWindow
name|void
name|setWindow
parameter_list|(
name|Window
modifier|*
name|window
parameter_list|)
block|{
name|m_window
operator|=
name|window
expr_stmt|;
block|}
DECL|function|eventFilter
name|bool
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|,
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
comment|// Check that the platform surface events are delivered synchronously.
comment|// If they are, the native platform surface should always exist when we
comment|// receive a QPlatformSurfaceEvent
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|PlatformSurface
operator|&&
name|o
operator|==
name|m_window
condition|)
block|{
name|m_alwaysExisted
operator|&=
operator|(
name|m_window
operator|->
name|handle
argument_list|()
operator|!=
name|Q_NULLPTR
operator|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
DECL|function|surfaceExisted
name|bool
name|surfaceExisted
parameter_list|()
specifier|const
block|{
return|return
name|m_alwaysExisted
return|;
block|}
private|private:
DECL|member|m_window
name|Window
modifier|*
name|m_window
decl_stmt|;
DECL|member|m_alwaysExisted
name|bool
name|m_alwaysExisted
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|platformSurface
name|void
name|tst_QWindow
operator|::
name|platformSurface
parameter_list|()
block|{
name|QRect
name|geometry
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|80
argument_list|,
literal|80
argument_list|)
argument_list|,
name|m_testWindowSize
argument_list|)
decl_stmt|;
name|Window
name|window
decl_stmt|;
name|PlatformWindowFilter
name|filter
decl_stmt|;
name|filter
operator|.
name|setWindow
argument_list|(
operator|&
name|window
argument_list|)
expr_stmt|;
name|window
operator|.
name|installEventFilter
argument_list|(
operator|&
name|filter
argument_list|)
expr_stmt|;
name|window
operator|.
name|setGeometry
argument_list|(
name|geometry
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|geometry
argument_list|()
argument_list|,
name|geometry
argument_list|)
expr_stmt|;
name|window
operator|.
name|create
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|PlatformSurface
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|surfaceEventType
argument_list|()
argument_list|,
name|QPlatformSurfaceEvent
operator|::
name|SurfaceCreated
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|window
operator|.
name|handle
argument_list|()
operator|!=
name|Q_NULLPTR
argument_list|)
expr_stmt|;
name|window
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|PlatformSurface
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|surfaceEventType
argument_list|()
argument_list|,
name|QPlatformSurfaceEvent
operator|::
name|SurfaceAboutToBeDestroyed
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
operator|!
name|window
operator|.
name|handle
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check for synchronous delivery of platform surface events and that the platform
comment|// surface always existed upon event delivery
name|QTRY_VERIFY
argument_list|(
name|filter
operator|.
name|surfaceExisted
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isExposed
name|void
name|tst_QWindow
operator|::
name|isExposed
parameter_list|()
block|{
name|QRect
name|geometry
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|80
argument_list|,
literal|80
argument_list|)
argument_list|,
name|m_testWindowSize
argument_list|)
decl_stmt|;
name|Window
name|window
decl_stmt|;
name|window
operator|.
name|setGeometry
argument_list|(
name|geometry
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|geometry
argument_list|()
argument_list|,
name|geometry
argument_list|)
expr_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Expose
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|window
operator|.
name|isExposed
argument_list|()
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WIN
comment|// This is a top-level window so assuming it is completely exposed, the
comment|// expose region must be (0, 0), (width, height). If this is not the case,
comment|// the platform plugin is sending expose events with a region in an
comment|// incorrect coordinate system.
name|QRect
name|r
init|=
name|window
operator|.
name|exposeRegion
argument_list|()
operator|.
name|boundingRect
argument_list|()
decl_stmt|;
name|r
operator|=
name|QRect
argument_list|(
name|window
operator|.
name|mapToGlobal
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
argument_list|)
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|r
argument_list|,
name|window
operator|.
name|geometry
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|window
operator|.
name|hide
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|QGuiApplication
operator|::
name|platformName
argument_list|()
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|"wayland"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"Wayland: This is flaky. Figure out why."
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Expose
argument_list|)
operator|>
literal|1
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
operator|!
name|window
operator|.
name|isExposed
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isActive
name|void
name|tst_QWindow
operator|::
name|isActive
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QGuiApplication
operator|::
name|platformName
argument_list|()
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|"wayland"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"Wayland: This fails. Figure out why."
argument_list|)
expr_stmt|;
name|Window
name|window
decl_stmt|;
comment|// Some platforms enforce minimum widths for windows, which can cause extra resize
comment|// events, so set the width to suitably large value to avoid those.
name|window
operator|.
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|80
argument_list|,
literal|80
argument_list|)
argument_list|,
name|m_testWindowSize
argument_list|)
argument_list|)
expr_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|window
operator|.
name|isExposed
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_QNX
argument_list|)
comment|// We either need to create a eglSurface or a create a backing store
comment|// and then post the window in order for screen to show the window
name|QOpenGLContext
name|context
decl_stmt|;
name|context
operator|.
name|create
argument_list|()
expr_stmt|;
name|context
operator|.
name|makeCurrent
argument_list|(
operator|&
name|window
argument_list|)
expr_stmt|;
name|context
operator|.
name|swapBuffers
argument_list|(
operator|&
name|window
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Resize
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
argument_list|,
operator|&
name|window
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|Window
name|child
decl_stmt|;
name|child
operator|.
name|setParent
argument_list|(
operator|&
name|window
argument_list|)
expr_stmt|;
name|child
operator|.
name|setGeometry
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|child
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|child
operator|.
name|isExposed
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|requestActivate
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
argument_list|,
operator|&
name|child
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|child
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
comment|// parent shouldn't receive new resize events from child being shown
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Resize
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|FocusIn
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|FocusOut
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|child
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|FocusIn
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// child has focus
name|QVERIFY
argument_list|(
name|window
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|Window
name|dialog
decl_stmt|;
name|dialog
operator|.
name|setTransientParent
argument_list|(
operator|&
name|window
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|110
argument_list|,
literal|100
argument_list|)
argument_list|,
name|m_testWindowSize
argument_list|)
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|show
argument_list|()
expr_stmt|;
name|dialog
operator|.
name|requestActivate
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|dialog
operator|.
name|isExposed
argument_list|()
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|dialog
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Resize
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
argument_list|,
operator|&
name|dialog
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|dialog
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
comment|// transient child has focus
name|QVERIFY
argument_list|(
name|window
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
comment|// parent is active
name|QVERIFY
argument_list|(
name|child
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|window
operator|.
name|requestActivate
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
argument_list|,
operator|&
name|window
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|dialog
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|FocusOut
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|FocusIn
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
comment|// transient parent has focus
name|QVERIFY
argument_list|(
name|dialog
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
comment|// parent has focus
name|QVERIFY
argument_list|(
name|child
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|InputTestWindow
class|class
name|InputTestWindow
super|:
specifier|public
name|QWindow
block|{
public|public:
DECL|function|keyPressEvent
name|void
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|event
parameter_list|)
block|{
name|keyPressCode
operator|=
name|event
operator|->
name|key
argument_list|()
expr_stmt|;
block|}
DECL|function|keyReleaseEvent
name|void
name|keyReleaseEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|event
parameter_list|)
block|{
name|keyReleaseCode
operator|=
name|event
operator|->
name|key
argument_list|()
expr_stmt|;
block|}
DECL|function|mousePressEvent
name|void
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|ignoreMouse
condition|)
block|{
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
else|else
block|{
operator|++
name|mousePressedCount
expr_stmt|;
name|mouseSequenceSignature
operator|+=
literal|'p'
expr_stmt|;
name|mousePressButton
operator|=
name|event
operator|->
name|button
argument_list|()
expr_stmt|;
name|mousePressScreenPos
operator|=
name|event
operator|->
name|screenPos
argument_list|()
expr_stmt|;
name|mousePressLocalPos
operator|=
name|event
operator|->
name|localPos
argument_list|()
expr_stmt|;
if|if
condition|(
name|spinLoopWhenPressed
condition|)
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|mouseReleaseEvent
name|void
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|ignoreMouse
condition|)
block|{
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
else|else
block|{
operator|++
name|mouseReleasedCount
expr_stmt|;
name|mouseSequenceSignature
operator|+=
literal|'r'
expr_stmt|;
name|mouseReleaseButton
operator|=
name|event
operator|->
name|button
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|mouseMoveEvent
name|void
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|ignoreMouse
condition|)
block|{
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
else|else
block|{
operator|++
name|mouseMovedCount
expr_stmt|;
name|mouseMoveButton
operator|=
name|event
operator|->
name|button
argument_list|()
expr_stmt|;
name|mouseMoveScreenPos
operator|=
name|event
operator|->
name|screenPos
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|mouseDoubleClickEvent
name|void
name|mouseDoubleClickEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|ignoreMouse
condition|)
block|{
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
else|else
block|{
operator|++
name|mouseDoubleClickedCount
expr_stmt|;
name|mouseSequenceSignature
operator|+=
literal|'d'
expr_stmt|;
block|}
block|}
DECL|function|touchEvent
name|void
name|touchEvent
parameter_list|(
name|QTouchEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|ignoreTouch
condition|)
block|{
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
name|touchEventType
operator|=
name|event
operator|->
name|type
argument_list|()
expr_stmt|;
name|QList
argument_list|<
name|QTouchEvent
operator|::
name|TouchPoint
argument_list|>
name|points
init|=
name|event
operator|->
name|touchPoints
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|points
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
switch|switch
condition|(
name|points
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|state
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|TouchPointPressed
case|:
operator|++
name|touchPressedCount
expr_stmt|;
if|if
condition|(
name|spinLoopWhenPressed
condition|)
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|TouchPointReleased
case|:
operator|++
name|touchReleasedCount
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|TouchPointMoved
case|:
operator|++
name|touchMovedCount
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
block|}
DECL|function|resetCounters
name|void
name|resetCounters
parameter_list|()
block|{
name|mousePressedCount
operator|=
name|mouseReleasedCount
operator|=
name|mouseMovedCount
operator|=
name|mouseDoubleClickedCount
operator|=
literal|0
expr_stmt|;
name|mouseSequenceSignature
operator|=
name|QString
argument_list|()
expr_stmt|;
name|touchPressedCount
operator|=
name|touchReleasedCount
operator|=
name|touchMovedCount
operator|=
literal|0
expr_stmt|;
block|}
DECL|function|InputTestWindow
name|InputTestWindow
parameter_list|()
block|{
name|keyPressCode
operator|=
name|keyReleaseCode
operator|=
literal|0
expr_stmt|;
name|mousePressButton
operator|=
name|mouseReleaseButton
operator|=
name|mouseMoveButton
operator|=
literal|0
expr_stmt|;
name|ignoreMouse
operator|=
name|ignoreTouch
operator|=
literal|false
expr_stmt|;
name|spinLoopWhenPressed
operator|=
literal|false
expr_stmt|;
name|resetCounters
argument_list|()
expr_stmt|;
block|}
DECL|member|keyPressCode
DECL|member|keyReleaseCode
name|int
name|keyPressCode
decl_stmt|,
name|keyReleaseCode
decl_stmt|;
DECL|member|mousePressButton
DECL|member|mouseReleaseButton
DECL|member|mouseMoveButton
name|int
name|mousePressButton
decl_stmt|,
name|mouseReleaseButton
decl_stmt|,
name|mouseMoveButton
decl_stmt|;
DECL|member|mousePressedCount
DECL|member|mouseReleasedCount
DECL|member|mouseMovedCount
DECL|member|mouseDoubleClickedCount
name|int
name|mousePressedCount
decl_stmt|,
name|mouseReleasedCount
decl_stmt|,
name|mouseMovedCount
decl_stmt|,
name|mouseDoubleClickedCount
decl_stmt|;
DECL|member|mouseSequenceSignature
name|QString
name|mouseSequenceSignature
decl_stmt|;
DECL|member|mousePressScreenPos
DECL|member|mouseMoveScreenPos
DECL|member|mousePressLocalPos
name|QPointF
name|mousePressScreenPos
decl_stmt|,
name|mouseMoveScreenPos
decl_stmt|,
name|mousePressLocalPos
decl_stmt|;
DECL|member|touchPressedCount
DECL|member|touchReleasedCount
DECL|member|touchMovedCount
name|int
name|touchPressedCount
decl_stmt|,
name|touchReleasedCount
decl_stmt|,
name|touchMovedCount
decl_stmt|;
DECL|member|touchEventType
name|QEvent
operator|::
name|Type
name|touchEventType
decl_stmt|;
DECL|member|ignoreMouse
DECL|member|ignoreTouch
name|bool
name|ignoreMouse
decl_stmt|,
name|ignoreTouch
decl_stmt|;
DECL|member|spinLoopWhenPressed
name|bool
name|spinLoopWhenPressed
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|testInputEvents
name|void
name|tst_QWindow
operator|::
name|testInputEvents
parameter_list|()
block|{
name|InputTestWindow
name|window
decl_stmt|;
name|window
operator|.
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|80
argument_list|,
literal|80
argument_list|)
argument_list|,
name|m_testWindowSize
argument_list|)
argument_list|)
expr_stmt|;
name|window
operator|.
name|showNormal
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|window
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|window
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|keyPressCode
argument_list|,
name|int
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|keyReleaseCode
argument_list|,
name|int
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|)
argument_list|)
expr_stmt|;
name|QPointF
name|local
argument_list|(
literal|12
argument_list|,
literal|34
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|mouseClick
argument_list|(
operator|&
name|window
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|,
name|local
operator|.
name|toPoint
argument_list|()
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mousePressButton
argument_list|,
name|int
argument_list|(
name|Qt
operator|::
name|LeftButton
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mouseReleaseButton
argument_list|,
name|int
argument_list|(
name|Qt
operator|::
name|LeftButton
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mousePressLocalPos
argument_list|,
name|local
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QWindowSystemInterface
operator|::
name|TouchPoint
argument_list|>
name|points
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|TouchPoint
name|tp1
decl_stmt|,
name|tp2
decl_stmt|;
name|tp1
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|tp1
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointPressed
expr_stmt|;
name|tp1
operator|.
name|area
operator|=
name|QRect
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|tp2
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|tp2
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointPressed
expr_stmt|;
name|tp2
operator|.
name|area
operator|=
name|QRect
argument_list|(
literal|20
argument_list|,
literal|20
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|points
operator|<<
name|tp1
operator|<<
name|tp2
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|,
name|points
argument_list|)
expr_stmt|;
name|points
index|[
literal|0
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointReleased
expr_stmt|;
name|points
index|[
literal|1
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointReleased
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|,
name|points
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|touchPressedCount
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|touchReleasedCount
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Now with null pointer as window. local param should not be utilized:
comment|// handleMouseEvent() with tlw == 0 means the event is in global coords only.
name|window
operator|.
name|mousePressButton
operator|=
name|window
operator|.
name|mouseReleaseButton
operator|=
literal|0
expr_stmt|;
specifier|const
name|QPointF
name|nonWindowGlobal
argument_list|(
name|window
operator|.
name|geometry
argument_list|()
operator|.
name|topRight
argument_list|()
operator|+
name|QPoint
argument_list|(
literal|200
argument_list|,
literal|50
argument_list|)
argument_list|)
decl_stmt|;
comment|// not inside the window
specifier|const
name|QPointF
name|deviceNonWindowGlobal
init|=
name|QHighDpi
operator|::
name|toNativePixels
argument_list|(
name|nonWindowGlobal
argument_list|,
name|window
operator|.
name|screen
argument_list|()
argument_list|)
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
literal|0
argument_list|,
name|deviceNonWindowGlobal
argument_list|,
name|deviceNonWindowGlobal
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
literal|0
argument_list|,
name|deviceNonWindowGlobal
argument_list|,
name|deviceNonWindowGlobal
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mousePressButton
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mouseReleaseButton
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|const
name|QPointF
name|windowGlobal
init|=
name|window
operator|.
name|mapToGlobal
argument_list|(
name|local
operator|.
name|toPoint
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QPointF
name|deviceWindowGlobal
init|=
name|QHighDpi
operator|::
name|toNativePixels
argument_list|(
name|windowGlobal
argument_list|,
name|window
operator|.
name|screen
argument_list|()
argument_list|)
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
literal|0
argument_list|,
name|deviceWindowGlobal
argument_list|,
name|deviceWindowGlobal
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
literal|0
argument_list|,
name|deviceWindowGlobal
argument_list|,
name|deviceWindowGlobal
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mousePressButton
argument_list|,
name|int
argument_list|(
name|Qt
operator|::
name|LeftButton
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mouseReleaseButton
argument_list|,
name|int
argument_list|(
name|Qt
operator|::
name|LeftButton
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mousePressScreenPos
argument_list|,
name|windowGlobal
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mousePressLocalPos
argument_list|,
name|local
argument_list|)
expr_stmt|;
comment|// the local we passed was bogus, verify that qGuiApp calculated the proper one
block|}
end_function
begin_function
DECL|function|touchToMouseTranslation
name|void
name|tst_QWindow
operator|::
name|touchToMouseTranslation
parameter_list|()
block|{
name|InputTestWindow
name|window
decl_stmt|;
name|window
operator|.
name|ignoreTouch
operator|=
literal|true
expr_stmt|;
name|window
operator|.
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|80
argument_list|,
literal|80
argument_list|)
argument_list|,
name|m_testWindowSize
argument_list|)
argument_list|)
expr_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|window
argument_list|)
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QWindowSystemInterface
operator|::
name|TouchPoint
argument_list|>
name|points
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|TouchPoint
name|tp1
decl_stmt|,
name|tp2
decl_stmt|;
specifier|const
name|QRectF
name|pressArea
argument_list|(
literal|101
argument_list|,
literal|102
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
decl_stmt|;
specifier|const
name|QRectF
name|moveArea
argument_list|(
literal|105
argument_list|,
literal|108
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|tp1
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|tp1
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointPressed
expr_stmt|;
name|tp1
operator|.
name|area
operator|=
name|QHighDpi
operator|::
name|toNativePixels
argument_list|(
name|pressArea
argument_list|,
operator|&
name|window
argument_list|)
expr_stmt|;
name|tp2
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|tp2
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointPressed
expr_stmt|;
name|points
operator|<<
name|tp1
operator|<<
name|tp2
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|,
name|points
argument_list|)
expr_stmt|;
comment|// Now an update but with changed list order. The mouse event should still
comment|// be generated from the point with id 1.
name|tp1
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|tp1
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointStationary
expr_stmt|;
name|tp2
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|tp2
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointMoved
expr_stmt|;
name|tp2
operator|.
name|area
operator|=
name|QHighDpi
operator|::
name|toNativePixels
argument_list|(
name|moveArea
argument_list|,
operator|&
name|window
argument_list|)
expr_stmt|;
name|points
operator|.
name|clear
argument_list|()
expr_stmt|;
name|points
operator|<<
name|tp1
operator|<<
name|tp2
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|,
name|points
argument_list|)
expr_stmt|;
name|points
index|[
literal|0
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointReleased
expr_stmt|;
name|points
index|[
literal|1
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointReleased
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|,
name|points
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|mousePressButton
argument_list|,
name|int
argument_list|(
name|Qt
operator|::
name|LeftButton
argument_list|)
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|mouseReleaseButton
argument_list|,
name|int
argument_list|(
name|Qt
operator|::
name|LeftButton
argument_list|)
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|mousePressScreenPos
argument_list|,
name|pressArea
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|mouseMoveScreenPos
argument_list|,
name|moveArea
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|window
operator|.
name|mousePressButton
operator|=
literal|0
expr_stmt|;
name|window
operator|.
name|mouseReleaseButton
operator|=
literal|0
expr_stmt|;
name|window
operator|.
name|ignoreTouch
operator|=
literal|false
expr_stmt|;
name|points
index|[
literal|0
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointPressed
expr_stmt|;
name|points
index|[
literal|1
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointPressed
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|,
name|points
argument_list|)
expr_stmt|;
name|points
index|[
literal|0
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointReleased
expr_stmt|;
name|points
index|[
literal|1
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointReleased
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|,
name|points
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
comment|// no new mouse events should be generated since the input window handles the touch events
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|mousePressButton
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|mouseReleaseButton
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_SynthesizeMouseForUnhandledTouchEvents
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|window
operator|.
name|ignoreTouch
operator|=
literal|true
expr_stmt|;
name|points
index|[
literal|0
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointPressed
expr_stmt|;
name|points
index|[
literal|1
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointPressed
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|,
name|points
argument_list|)
expr_stmt|;
name|points
index|[
literal|0
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointReleased
expr_stmt|;
name|points
index|[
literal|1
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointReleased
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|,
name|points
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_SynthesizeMouseForUnhandledTouchEvents
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// mouse event synthesizing disabled
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|mousePressButton
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|mouseReleaseButton
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|touchToMouseTranslationForDevices
name|void
name|tst_QWindow
operator|::
name|touchToMouseTranslationForDevices
parameter_list|()
block|{
name|InputTestWindow
name|window
decl_stmt|;
name|window
operator|.
name|ignoreTouch
operator|=
literal|true
expr_stmt|;
name|window
operator|.
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|80
argument_list|,
literal|80
argument_list|)
argument_list|,
name|m_testWindowSize
argument_list|)
argument_list|)
expr_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|window
argument_list|)
argument_list|)
expr_stmt|;
name|QPoint
name|touchPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|touchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|)
operator|.
name|press
argument_list|(
literal|0
argument_list|,
name|touchPoint
argument_list|,
operator|&
name|window
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|touchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|)
operator|.
name|release
argument_list|(
literal|0
argument_list|,
name|touchPoint
argument_list|,
operator|&
name|window
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mousePressedCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mouseReleasedCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|window
operator|.
name|resetCounters
argument_list|()
expr_stmt|;
name|touchDevice
operator|->
name|setCapabilities
argument_list|(
name|touchDevice
operator|->
name|capabilities
argument_list|()
operator||
name|QTouchDevice
operator|::
name|MouseEmulation
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|touchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|)
operator|.
name|press
argument_list|(
literal|0
argument_list|,
name|touchPoint
argument_list|,
operator|&
name|window
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|touchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|)
operator|.
name|release
argument_list|(
literal|0
argument_list|,
name|touchPoint
argument_list|,
operator|&
name|window
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|touchDevice
operator|->
name|setCapabilities
argument_list|(
name|touchDevice
operator|->
name|capabilities
argument_list|()
operator|&
operator|~
name|QTouchDevice
operator|::
name|MouseEmulation
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mousePressedCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mouseReleasedCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseToTouchTranslation
name|void
name|tst_QWindow
operator|::
name|mouseToTouchTranslation
parameter_list|()
block|{
name|qApp
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_SynthesizeTouchForUnhandledMouseEvents
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|InputTestWindow
name|window
decl_stmt|;
name|window
operator|.
name|ignoreMouse
operator|=
literal|true
expr_stmt|;
name|window
operator|.
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|80
argument_list|,
literal|80
argument_list|)
argument_list|,
name|m_testWindowSize
argument_list|)
argument_list|)
expr_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|window
argument_list|)
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|,
name|window
operator|.
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|,
name|window
operator|.
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_SynthesizeTouchForUnhandledMouseEvents
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|touchPressedCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|touchReleasedCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_SynthesizeTouchForUnhandledMouseEvents
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|window
operator|.
name|ignoreMouse
operator|=
literal|false
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|,
name|window
operator|.
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|,
name|window
operator|.
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_SynthesizeTouchForUnhandledMouseEvents
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// no new touch events should be generated since the input window handles the mouse events
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|touchPressedCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|touchReleasedCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|window
operator|.
name|ignoreMouse
operator|=
literal|true
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|,
name|window
operator|.
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|,
name|window
operator|.
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
comment|// touch event synthesis disabled
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|touchPressedCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|touchReleasedCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseToTouchLoop
name|void
name|tst_QWindow
operator|::
name|mouseToTouchLoop
parameter_list|()
block|{
comment|// make sure there's no infinite loop when synthesizing both ways
name|qApp
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_SynthesizeTouchForUnhandledMouseEvents
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_SynthesizeMouseForUnhandledTouchEvents
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|InputTestWindow
name|window
decl_stmt|;
name|window
operator|.
name|ignoreMouse
operator|=
literal|true
expr_stmt|;
name|window
operator|.
name|ignoreTouch
operator|=
literal|true
expr_stmt|;
name|window
operator|.
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|80
argument_list|,
literal|80
argument_list|)
argument_list|,
name|m_testWindowSize
argument_list|)
argument_list|)
expr_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|window
argument_list|)
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|,
name|window
operator|.
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|,
name|window
operator|.
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_SynthesizeTouchForUnhandledMouseEvents
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_SynthesizeMouseForUnhandledTouchEvents
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|touchCancel
name|void
name|tst_QWindow
operator|::
name|touchCancel
parameter_list|()
block|{
name|InputTestWindow
name|window
decl_stmt|;
name|window
operator|.
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|80
argument_list|,
literal|80
argument_list|)
argument_list|,
name|m_testWindowSize
argument_list|)
argument_list|)
expr_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|window
argument_list|)
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QWindowSystemInterface
operator|::
name|TouchPoint
argument_list|>
name|points
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|TouchPoint
name|tp1
decl_stmt|;
name|tp1
operator|.
name|id
operator|=
literal|1
expr_stmt|;
comment|// Start a touch.
name|tp1
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointPressed
expr_stmt|;
name|tp1
operator|.
name|area
operator|=
name|QRect
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|points
operator|<<
name|tp1
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|,
name|points
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|touchEventType
argument_list|,
name|QEvent
operator|::
name|TouchBegin
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|touchPressedCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Cancel the active touch sequence.
name|QWindowSystemInterface
operator|::
name|handleTouchCancelEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|touchEventType
argument_list|,
name|QEvent
operator|::
name|TouchCancel
argument_list|)
expr_stmt|;
comment|// Send a move -> will not be delivered due to the cancellation.
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|touchMovedCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|points
index|[
literal|0
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointMoved
expr_stmt|;
name|tp1
operator|.
name|area
operator|.
name|adjust
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|,
name|points
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|touchMovedCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Likewise. The only allowed transition is TouchCancel -> TouchBegin.
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|touchReleasedCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|points
index|[
literal|0
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointReleased
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|,
name|points
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|touchReleasedCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Start a new sequence -> from this point on everything should go through normally.
name|points
index|[
literal|0
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointPressed
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|,
name|points
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|touchEventType
argument_list|,
name|QEvent
operator|::
name|TouchBegin
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|touchPressedCount
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|points
index|[
literal|0
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointMoved
expr_stmt|;
name|tp1
operator|.
name|area
operator|.
name|adjust
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|,
name|points
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|touchMovedCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|points
index|[
literal|0
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointReleased
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|,
name|points
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|touchReleasedCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|touchCancelWithTouchToMouse
name|void
name|tst_QWindow
operator|::
name|touchCancelWithTouchToMouse
parameter_list|()
block|{
name|InputTestWindow
name|window
decl_stmt|;
name|window
operator|.
name|ignoreTouch
operator|=
literal|true
expr_stmt|;
name|window
operator|.
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|80
argument_list|,
literal|80
argument_list|)
argument_list|,
name|m_testWindowSize
argument_list|)
argument_list|)
expr_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|window
argument_list|)
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QWindowSystemInterface
operator|::
name|TouchPoint
argument_list|>
name|points
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|TouchPoint
name|tp1
decl_stmt|;
name|tp1
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|tp1
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointPressed
expr_stmt|;
specifier|const
name|QRect
name|area
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|tp1
operator|.
name|area
operator|=
name|QHighDpi
operator|::
name|toNativePixels
argument_list|(
name|area
argument_list|,
operator|&
name|window
argument_list|)
expr_stmt|;
name|points
operator|<<
name|tp1
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|,
name|points
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|mousePressButton
argument_list|,
name|int
argument_list|(
name|Qt
operator|::
name|LeftButton
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|int
name|fuzz
init|=
literal|2
operator|*
name|int
argument_list|(
name|QHighDpiScaling
operator|::
name|factor
argument_list|(
operator|&
name|window
argument_list|)
argument_list|)
decl_stmt|;
name|QTRY_VERIFY2
argument_list|(
name|qFuzzyCompareWindowPosition
argument_list|(
name|window
operator|.
name|mousePressScreenPos
operator|.
name|toPoint
argument_list|()
argument_list|,
name|area
operator|.
name|center
argument_list|()
argument_list|,
name|fuzz
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|msgPointMismatch
argument_list|(
name|window
operator|.
name|mousePressScreenPos
operator|.
name|toPoint
argument_list|()
argument_list|,
name|area
operator|.
name|center
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Cancel the touch. Should result in a mouse release for windows that have
comment|// have an active touch-to-mouse sequence.
name|QWindowSystemInterface
operator|::
name|handleTouchCancelEvent
argument_list|(
literal|0
argument_list|,
name|touchDevice
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|mouseReleaseButton
argument_list|,
name|int
argument_list|(
name|Qt
operator|::
name|LeftButton
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now change the window to accept touches.
name|window
operator|.
name|mousePressButton
operator|=
name|window
operator|.
name|mouseReleaseButton
operator|=
literal|0
expr_stmt|;
name|window
operator|.
name|ignoreTouch
operator|=
literal|false
expr_stmt|;
comment|// Send a touch, there will be no mouse event generated.
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|,
name|points
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|mousePressButton
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Cancel the touch. It should not result in a mouse release with this window.
name|QWindowSystemInterface
operator|::
name|handleTouchCancelEvent
argument_list|(
literal|0
argument_list|,
name|touchDevice
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|mouseReleaseButton
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|touchInterruptedByPopup
name|void
name|tst_QWindow
operator|::
name|touchInterruptedByPopup
parameter_list|()
block|{
name|InputTestWindow
name|window
decl_stmt|;
name|window
operator|.
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|80
argument_list|,
literal|80
argument_list|)
argument_list|,
name|m_testWindowSize
argument_list|)
argument_list|)
expr_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|window
argument_list|)
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QWindowSystemInterface
operator|::
name|TouchPoint
argument_list|>
name|points
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|TouchPoint
name|tp1
decl_stmt|;
name|tp1
operator|.
name|id
operator|=
literal|1
expr_stmt|;
comment|// Start a touch.
name|tp1
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointPressed
expr_stmt|;
name|tp1
operator|.
name|area
operator|=
name|QRect
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|points
operator|<<
name|tp1
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|,
name|points
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|touchEventType
argument_list|,
name|QEvent
operator|::
name|TouchBegin
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|touchPressedCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Launch a popup window
name|InputTestWindow
name|popup
decl_stmt|;
name|popup
operator|.
name|setFlags
argument_list|(
name|Qt
operator|::
name|Popup
argument_list|)
expr_stmt|;
name|popup
operator|.
name|setModality
argument_list|(
name|Qt
operator|::
name|WindowModal
argument_list|)
expr_stmt|;
name|popup
operator|.
name|resize
argument_list|(
name|m_testWindowSize
operator|/
literal|2
argument_list|)
expr_stmt|;
name|popup
operator|.
name|setTransientParent
argument_list|(
operator|&
name|window
argument_list|)
expr_stmt|;
name|popup
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|popup
argument_list|)
argument_list|)
expr_stmt|;
comment|// Send a move -> will not be delivered to the original window
comment|// (TODO verify where it is forwarded, after we've defined that)
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|touchMovedCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|points
index|[
literal|0
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointMoved
expr_stmt|;
name|tp1
operator|.
name|area
operator|.
name|adjust
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|,
name|points
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|touchMovedCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Send a touch end -> will not be delivered to the original window
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|touchReleasedCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|points
index|[
literal|0
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointReleased
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|,
name|points
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|touchReleasedCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Due to temporary fix for QTBUG-37371: the original window should receive a TouchCancel
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|touchEventType
argument_list|,
name|QEvent
operator|::
name|TouchCancel
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|orientation
name|void
name|tst_QWindow
operator|::
name|orientation
parameter_list|()
block|{
name|qRegisterMetaType
argument_list|<
name|Qt
operator|::
name|ScreenOrientation
argument_list|>
argument_list|(
literal|"Qt::ScreenOrientation"
argument_list|)
expr_stmt|;
name|QWindow
name|window
decl_stmt|;
name|window
operator|.
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|80
argument_list|,
literal|80
argument_list|)
argument_list|,
name|m_testWindowSize
argument_list|)
argument_list|)
expr_stmt|;
name|window
operator|.
name|create
argument_list|()
expr_stmt|;
name|window
operator|.
name|reportContentOrientationChange
argument_list|(
name|Qt
operator|::
name|PortraitOrientation
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|contentOrientation
argument_list|()
argument_list|,
name|Qt
operator|::
name|PortraitOrientation
argument_list|)
expr_stmt|;
name|window
operator|.
name|reportContentOrientationChange
argument_list|(
name|Qt
operator|::
name|PrimaryOrientation
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|contentOrientation
argument_list|()
argument_list|,
name|Qt
operator|::
name|PrimaryOrientation
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|window
argument_list|,
name|SIGNAL
argument_list|(
name|contentOrientationChanged
argument_list|(
name|Qt
operator|::
name|ScreenOrientation
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|window
operator|.
name|reportContentOrientationChange
argument_list|(
name|Qt
operator|::
name|LandscapeOrientation
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sizes
name|void
name|tst_QWindow
operator|::
name|sizes
parameter_list|()
block|{
name|QWindow
name|window
decl_stmt|;
name|QSignalSpy
name|minimumWidthSpy
argument_list|(
operator|&
name|window
argument_list|,
name|SIGNAL
argument_list|(
name|minimumWidthChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|minimumHeightSpy
argument_list|(
operator|&
name|window
argument_list|,
name|SIGNAL
argument_list|(
name|minimumHeightChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|maximumWidthSpy
argument_list|(
operator|&
name|window
argument_list|,
name|SIGNAL
argument_list|(
name|maximumWidthChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|maximumHeightSpy
argument_list|(
operator|&
name|window
argument_list|,
name|SIGNAL
argument_list|(
name|maximumHeightChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSize
name|oldMaximum
init|=
name|window
operator|.
name|maximumSize
argument_list|()
decl_stmt|;
name|window
operator|.
name|setMinimumWidth
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|minimumWidth
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|minimumHeight
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|minimumSize
argument_list|()
argument_list|,
name|QSize
argument_list|(
literal|10
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|maximumSize
argument_list|()
argument_list|,
name|oldMaximum
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|minimumWidthSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|minimumHeightSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|maximumWidthSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|maximumHeightSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|window
operator|.
name|setMinimumHeight
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|minimumWidth
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|minimumHeight
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|minimumSize
argument_list|()
argument_list|,
name|QSize
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|maximumSize
argument_list|()
argument_list|,
name|oldMaximum
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|minimumWidthSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|minimumHeightSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|maximumWidthSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|maximumHeightSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|window
operator|.
name|setMaximumWidth
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|maximumWidth
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|maximumHeight
argument_list|()
argument_list|,
name|oldMaximum
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|minimumSize
argument_list|()
argument_list|,
name|QSize
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|maximumSize
argument_list|()
argument_list|,
name|QSize
argument_list|(
literal|100
argument_list|,
name|oldMaximum
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|minimumWidthSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|minimumHeightSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|maximumWidthSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|maximumHeightSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|window
operator|.
name|setMaximumHeight
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|maximumWidth
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|maximumHeight
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|minimumSize
argument_list|()
argument_list|,
name|QSize
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|maximumSize
argument_list|()
argument_list|,
name|QSize
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|minimumWidthSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|minimumHeightSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|maximumWidthSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|maximumHeightSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|close
name|void
name|tst_QWindow
operator|::
name|close
parameter_list|()
block|{
name|QWindow
name|a
decl_stmt|;
name|QWindow
name|b
decl_stmt|;
name|QWindow
name|c
argument_list|(
operator|&
name|a
argument_list|)
decl_stmt|;
name|a
operator|.
name|show
argument_list|()
expr_stmt|;
name|b
operator|.
name|show
argument_list|()
expr_stmt|;
comment|// we can not close a non top level window
name|QVERIFY
argument_list|(
operator|!
name|c
operator|.
name|close
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|close
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|.
name|close
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|activateAndClose
name|void
name|tst_QWindow
operator|::
name|activateAndClose
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QGuiApplication
operator|::
name|platformName
argument_list|()
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|"wayland"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"Wayland: This fails. Figure out why."
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|QWindow
name|window
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_QNX
argument_list|)
name|window
operator|.
name|setSurfaceType
argument_list|(
name|QSurface
operator|::
name|OpenGLSurface
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// qWaitForWindowActive will block for the duration of
comment|// of the timeout if the window is at 0,0
name|window
operator|.
name|setGeometry
argument_list|(
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
operator|->
name|availableGeometry
argument_list|()
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|window
operator|.
name|showNormal
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_QNX
argument_list|)
comment|// We either need to create a eglSurface or a create a backing store
comment|// and then post the window in order for screen to show the window
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|window
argument_list|)
expr_stmt|;
name|QOpenGLContext
name|context
decl_stmt|;
name|context
operator|.
name|create
argument_list|()
expr_stmt|;
name|context
operator|.
name|makeCurrent
argument_list|(
operator|&
name|window
argument_list|)
expr_stmt|;
name|context
operator|.
name|swapBuffers
argument_list|(
operator|&
name|window
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|window
operator|.
name|requestActivate
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowActive
argument_list|(
operator|&
name|window
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qGuiApp
operator|->
name|focusWindow
argument_list|()
argument_list|,
operator|&
name|window
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|mouseEventSequence
name|void
name|tst_QWindow
operator|::
name|mouseEventSequence
parameter_list|()
block|{
name|int
name|doubleClickInterval
init|=
name|qGuiApp
operator|->
name|styleHints
argument_list|()
operator|->
name|mouseDoubleClickInterval
argument_list|()
decl_stmt|;
name|InputTestWindow
name|window
decl_stmt|;
name|window
operator|.
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|80
argument_list|,
literal|80
argument_list|)
argument_list|,
name|m_testWindowSize
argument_list|)
argument_list|)
expr_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|window
argument_list|)
argument_list|)
expr_stmt|;
name|ulong
name|timestamp
init|=
literal|0
decl_stmt|;
name|QPointF
name|local
argument_list|(
literal|12
argument_list|,
literal|34
argument_list|)
decl_stmt|;
specifier|const
name|QPointF
name|deviceLocal
init|=
name|QHighDpi
operator|::
name|toNativePixels
argument_list|(
name|local
argument_list|,
operator|&
name|window
argument_list|)
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|timestamp
operator|++
argument_list|,
name|deviceLocal
argument_list|,
name|deviceLocal
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|timestamp
operator|++
argument_list|,
name|deviceLocal
argument_list|,
name|deviceLocal
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mousePressedCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mouseReleasedCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mouseDoubleClickedCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mouseSequenceSignature
argument_list|,
name|QLatin1String
argument_list|(
literal|"pr"
argument_list|)
argument_list|)
expr_stmt|;
name|window
operator|.
name|resetCounters
argument_list|()
expr_stmt|;
name|timestamp
operator|+=
name|doubleClickInterval
expr_stmt|;
comment|// A double click must result in press, release, press, doubleclick, release.
comment|// Check that no unexpected event suppression occurs and that the order is correct.
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|timestamp
operator|++
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|timestamp
operator|++
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|timestamp
operator|++
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|timestamp
operator|++
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mousePressedCount
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mouseReleasedCount
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mouseDoubleClickedCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mouseSequenceSignature
argument_list|,
name|QLatin1String
argument_list|(
literal|"prpdr"
argument_list|)
argument_list|)
expr_stmt|;
name|timestamp
operator|+=
name|doubleClickInterval
expr_stmt|;
name|window
operator|.
name|resetCounters
argument_list|()
expr_stmt|;
comment|// Triple click = double + single click
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|timestamp
operator|++
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|timestamp
operator|++
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|timestamp
operator|++
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|timestamp
operator|++
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|timestamp
operator|++
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|timestamp
operator|++
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mousePressedCount
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mouseReleasedCount
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mouseDoubleClickedCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mouseSequenceSignature
argument_list|,
name|QLatin1String
argument_list|(
literal|"prpdrpr"
argument_list|)
argument_list|)
expr_stmt|;
name|timestamp
operator|+=
name|doubleClickInterval
expr_stmt|;
name|window
operator|.
name|resetCounters
argument_list|()
expr_stmt|;
comment|// Two double clicks.
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|timestamp
operator|++
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|timestamp
operator|++
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|timestamp
operator|++
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|timestamp
operator|++
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|timestamp
operator|++
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|timestamp
operator|++
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|timestamp
operator|++
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|timestamp
operator|++
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mousePressedCount
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mouseReleasedCount
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mouseDoubleClickedCount
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mouseSequenceSignature
argument_list|,
name|QLatin1String
argument_list|(
literal|"prpdrprpdr"
argument_list|)
argument_list|)
expr_stmt|;
name|timestamp
operator|+=
name|doubleClickInterval
expr_stmt|;
name|window
operator|.
name|resetCounters
argument_list|()
expr_stmt|;
comment|// Four clicks, none of which qualifies as a double click.
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|timestamp
operator|++
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|timestamp
operator|++
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|timestamp
operator|+=
name|doubleClickInterval
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|timestamp
operator|++
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|timestamp
operator|++
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|timestamp
operator|+=
name|doubleClickInterval
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|timestamp
operator|++
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|timestamp
operator|++
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|timestamp
operator|+=
name|doubleClickInterval
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|timestamp
operator|++
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|timestamp
operator|++
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|timestamp
operator|+=
name|doubleClickInterval
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mousePressedCount
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mouseReleasedCount
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mouseDoubleClickedCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mouseSequenceSignature
argument_list|,
name|QLatin1String
argument_list|(
literal|"prprprpr"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|windowModality
name|void
name|tst_QWindow
operator|::
name|windowModality
parameter_list|()
block|{
name|qRegisterMetaType
argument_list|<
name|Qt
operator|::
name|WindowModality
argument_list|>
argument_list|(
literal|"Qt::WindowModality"
argument_list|)
expr_stmt|;
name|QWindow
name|window
decl_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|window
argument_list|,
name|SIGNAL
argument_list|(
name|modalityChanged
argument_list|(
name|Qt
operator|::
name|WindowModality
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|modality
argument_list|()
argument_list|,
name|Qt
operator|::
name|NonModal
argument_list|)
expr_stmt|;
name|window
operator|.
name|setModality
argument_list|(
name|Qt
operator|::
name|NonModal
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|modality
argument_list|()
argument_list|,
name|Qt
operator|::
name|NonModal
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|window
operator|.
name|setModality
argument_list|(
name|Qt
operator|::
name|WindowModal
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|modality
argument_list|()
argument_list|,
name|Qt
operator|::
name|WindowModal
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|window
operator|.
name|setModality
argument_list|(
name|Qt
operator|::
name|WindowModal
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|modality
argument_list|()
argument_list|,
name|Qt
operator|::
name|WindowModal
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|window
operator|.
name|setModality
argument_list|(
name|Qt
operator|::
name|ApplicationModal
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|modality
argument_list|()
argument_list|,
name|Qt
operator|::
name|ApplicationModal
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|window
operator|.
name|setModality
argument_list|(
name|Qt
operator|::
name|ApplicationModal
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|modality
argument_list|()
argument_list|,
name|Qt
operator|::
name|ApplicationModal
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|window
operator|.
name|setModality
argument_list|(
name|Qt
operator|::
name|NonModal
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|modality
argument_list|()
argument_list|,
name|Qt
operator|::
name|NonModal
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|inputReentrancy
name|void
name|tst_QWindow
operator|::
name|inputReentrancy
parameter_list|()
block|{
name|InputTestWindow
name|window
decl_stmt|;
name|window
operator|.
name|spinLoopWhenPressed
operator|=
literal|true
expr_stmt|;
name|window
operator|.
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|80
argument_list|,
literal|80
argument_list|)
argument_list|,
name|m_testWindowSize
argument_list|)
argument_list|)
expr_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|window
argument_list|)
argument_list|)
expr_stmt|;
comment|// Queue three events.
name|QPointF
name|local
argument_list|(
literal|12
argument_list|,
literal|34
argument_list|)
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|local
operator|+=
name|QPointF
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|window
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
comment|// Process them. However, the event handler for the press will also call
comment|// processEvents() so the move and release will be delivered before returning
comment|// from mousePressEvent(). The point is that no events should get lost.
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mousePressButton
argument_list|,
name|int
argument_list|(
name|Qt
operator|::
name|LeftButton
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mouseReleaseButton
argument_list|,
name|int
argument_list|(
name|Qt
operator|::
name|LeftButton
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mousePressedCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mouseMovedCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mouseReleasedCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Now the same for touch.
name|QList
argument_list|<
name|QWindowSystemInterface
operator|::
name|TouchPoint
argument_list|>
name|points
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|TouchPoint
name|tp1
decl_stmt|;
name|tp1
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|tp1
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointPressed
expr_stmt|;
name|tp1
operator|.
name|area
operator|=
name|QRectF
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|points
operator|<<
name|tp1
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|,
name|points
argument_list|)
expr_stmt|;
name|points
index|[
literal|0
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointMoved
expr_stmt|;
name|points
index|[
literal|0
index|]
operator|.
name|area
operator|=
name|QRectF
argument_list|(
literal|20
argument_list|,
literal|20
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|,
name|points
argument_list|)
expr_stmt|;
name|points
index|[
literal|0
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointReleased
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
operator|&
name|window
argument_list|,
name|touchDevice
argument_list|,
name|points
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|touchPressedCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|touchMovedCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|touchReleasedCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TABLETEVENT
end_ifndef
begin_class
DECL|class|TabletTestWindow
class|class
name|TabletTestWindow
super|:
specifier|public
name|QWindow
block|{
public|public:
DECL|function|TabletTestWindow
name|TabletTestWindow
parameter_list|()
member_init_list|:
name|eventType
argument_list|(
name|QEvent
operator|::
name|None
argument_list|)
block|{ }
DECL|function|tabletEvent
name|void
name|tabletEvent
parameter_list|(
name|QTabletEvent
modifier|*
name|ev
parameter_list|)
block|{
name|eventType
operator|=
name|ev
operator|->
name|type
argument_list|()
expr_stmt|;
name|eventGlobal
operator|=
name|ev
operator|->
name|globalPosF
argument_list|()
expr_stmt|;
name|eventLocal
operator|=
name|ev
operator|->
name|posF
argument_list|()
expr_stmt|;
name|eventDevice
operator|=
name|ev
operator|->
name|device
argument_list|()
expr_stmt|;
block|}
DECL|member|eventType
name|QEvent
operator|::
name|Type
name|eventType
decl_stmt|;
DECL|member|eventGlobal
DECL|member|eventLocal
name|QPointF
name|eventGlobal
decl_stmt|,
name|eventLocal
decl_stmt|;
DECL|member|eventDevice
name|int
name|eventDevice
decl_stmt|;
DECL|function|eventFilter
name|bool
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|obj
parameter_list|,
name|QEvent
modifier|*
name|ev
parameter_list|)
block|{
if|if
condition|(
name|ev
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|TabletEnterProximity
operator|||
name|ev
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|TabletLeaveProximity
condition|)
block|{
name|eventType
operator|=
name|ev
operator|->
name|type
argument_list|()
expr_stmt|;
name|QTabletEvent
modifier|*
name|te
init|=
cast|static_cast
argument_list|<
name|QTabletEvent
operator|*
argument_list|>
argument_list|(
name|ev
argument_list|)
decl_stmt|;
name|eventDevice
operator|=
name|te
operator|->
name|device
argument_list|()
expr_stmt|;
block|}
return|return
name|QWindow
operator|::
name|eventFilter
argument_list|(
name|obj
argument_list|,
name|ev
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|tabletEvents
name|void
name|tst_QWindow
operator|::
name|tabletEvents
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_TABLETEVENT
name|TabletTestWindow
name|window
decl_stmt|;
name|window
operator|.
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|,
name|m_testWindowSize
argument_list|)
argument_list|)
expr_stmt|;
name|qGuiApp
operator|->
name|installEventFilter
argument_list|(
operator|&
name|window
argument_list|)
expr_stmt|;
specifier|const
name|QPoint
name|local
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
specifier|const
name|QPoint
name|global
init|=
name|window
operator|.
name|mapToGlobal
argument_list|(
name|local
argument_list|)
decl_stmt|;
specifier|const
name|QPoint
name|deviceLocal
init|=
name|QHighDpi
operator|::
name|toNativeLocalPosition
argument_list|(
name|local
argument_list|,
operator|&
name|window
argument_list|)
decl_stmt|;
specifier|const
name|QPoint
name|deviceGlobal
init|=
name|QHighDpi
operator|::
name|toNativePixels
argument_list|(
name|global
argument_list|,
name|window
operator|.
name|screen
argument_list|()
argument_list|)
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTabletEvent
argument_list|(
operator|&
name|window
argument_list|,
literal|true
argument_list|,
name|deviceLocal
argument_list|,
name|deviceGlobal
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|0.5
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|0.1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|window
operator|.
name|eventType
operator|==
name|QEvent
operator|::
name|TabletPress
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|eventGlobal
operator|.
name|toPoint
argument_list|()
argument_list|,
name|global
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|eventLocal
operator|.
name|toPoint
argument_list|()
argument_list|,
name|local
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTabletEvent
argument_list|(
operator|&
name|window
argument_list|,
literal|false
argument_list|,
name|deviceLocal
argument_list|,
name|deviceGlobal
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|0.5
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|0.1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|eventType
argument_list|,
name|QEvent
operator|::
name|TabletRelease
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTabletEnterProximityEvent
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|eventType
argument_list|,
name|QEvent
operator|::
name|TabletEnterProximity
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|eventDevice
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTabletLeaveProximityEvent
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|eventType
argument_list|,
name|QEvent
operator|::
name|TabletLeaveProximity
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|eventDevice
argument_list|,
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|windowModality_QTBUG27039
name|void
name|tst_QWindow
operator|::
name|windowModality_QTBUG27039
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QGuiApplication
operator|::
name|platformName
argument_list|()
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|"wayland"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"Wayland: This fails. Figure out why."
argument_list|)
expr_stmt|;
name|QWindow
name|parent
decl_stmt|;
name|parent
operator|.
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|,
name|m_testWindowSize
argument_list|)
argument_list|)
expr_stmt|;
name|parent
operator|.
name|show
argument_list|()
expr_stmt|;
name|InputTestWindow
name|modalA
decl_stmt|;
name|modalA
operator|.
name|setTransientParent
argument_list|(
operator|&
name|parent
argument_list|)
expr_stmt|;
name|modalA
operator|.
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|20
argument_list|,
literal|10
argument_list|)
argument_list|,
name|m_testWindowSize
argument_list|)
argument_list|)
expr_stmt|;
name|modalA
operator|.
name|setModality
argument_list|(
name|Qt
operator|::
name|ApplicationModal
argument_list|)
expr_stmt|;
name|modalA
operator|.
name|show
argument_list|()
expr_stmt|;
name|InputTestWindow
name|modalB
decl_stmt|;
name|modalB
operator|.
name|setTransientParent
argument_list|(
operator|&
name|parent
argument_list|)
expr_stmt|;
name|modalA
operator|.
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|30
argument_list|,
literal|10
argument_list|)
argument_list|,
name|m_testWindowSize
argument_list|)
argument_list|)
expr_stmt|;
name|modalB
operator|.
name|setModality
argument_list|(
name|Qt
operator|::
name|ApplicationModal
argument_list|)
expr_stmt|;
name|modalB
operator|.
name|show
argument_list|()
expr_stmt|;
name|QPointF
name|local
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|modalA
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|modalA
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|modalB
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|modalB
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
comment|// modal A should be blocked since it was shown first, but modal B should not be blocked
name|QCOMPARE
argument_list|(
name|modalB
operator|.
name|mousePressedCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|modalA
operator|.
name|mousePressedCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|modalB
operator|.
name|hide
argument_list|()
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|modalA
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
operator|&
name|modalA
argument_list|,
name|local
argument_list|,
name|local
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
comment|// modal B has been hidden, modal A should be unblocked again
name|QCOMPARE
argument_list|(
name|modalA
operator|.
name|mousePressedCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|visibility
name|void
name|tst_QWindow
operator|::
name|visibility
parameter_list|()
block|{
name|qRegisterMetaType
argument_list|<
name|Qt
operator|::
name|WindowModality
argument_list|>
argument_list|(
literal|"QWindow::Visibility"
argument_list|)
expr_stmt|;
name|QWindow
name|window
decl_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|window
argument_list|,
name|SIGNAL
argument_list|(
name|visibilityChanged
argument_list|(
name|QWindow
operator|::
name|Visibility
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|window
operator|.
name|setVisibility
argument_list|(
name|QWindow
operator|::
name|AutomaticVisibility
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|.
name|visibility
argument_list|()
operator|!=
name|QWindow
operator|::
name|Hidden
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|.
name|visibility
argument_list|()
operator|!=
name|QWindow
operator|::
name|AutomaticVisibility
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|window
operator|.
name|setVisibility
argument_list|(
name|QWindow
operator|::
name|Hidden
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|visibility
argument_list|()
argument_list|,
name|QWindow
operator|::
name|Hidden
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|window
operator|.
name|setVisibility
argument_list|(
name|QWindow
operator|::
name|FullScreen
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|windowState
argument_list|()
argument_list|,
name|Qt
operator|::
name|WindowFullScreen
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|visibility
argument_list|()
argument_list|,
name|QWindow
operator|::
name|FullScreen
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|window
operator|.
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|visibility
argument_list|()
argument_list|,
name|QWindow
operator|::
name|Windowed
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|window
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|visibility
argument_list|()
argument_list|,
name|QWindow
operator|::
name|Hidden
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mask
name|void
name|tst_QWindow
operator|::
name|mask
parameter_list|()
block|{
name|QRegion
name|mask
init|=
name|QRect
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|800
operator|-
literal|20
argument_list|,
literal|600
operator|-
literal|20
argument_list|)
decl_stmt|;
name|QWindow
name|window
decl_stmt|;
name|window
operator|.
name|resize
argument_list|(
literal|800
argument_list|,
literal|600
argument_list|)
expr_stmt|;
name|window
operator|.
name|setMask
argument_list|(
name|mask
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mask
argument_list|()
argument_list|,
name|QRegion
argument_list|()
argument_list|)
expr_stmt|;
name|window
operator|.
name|create
argument_list|()
expr_stmt|;
name|window
operator|.
name|setMask
argument_list|(
name|mask
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|mask
argument_list|()
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initialSize
name|void
name|tst_QWindow
operator|::
name|initialSize
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QGuiApplication
operator|::
name|platformName
argument_list|()
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|"wayland"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"Wayland: This fails. Figure out why."
argument_list|)
expr_stmt|;
name|QSize
name|defaultSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
block|{
name|Window
name|w
decl_stmt|;
name|w
operator|.
name|showNormal
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|w
operator|.
name|width
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|w
operator|.
name|height
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|defaultSize
operator|=
name|QSize
argument_list|(
name|w
operator|.
name|width
argument_list|()
argument_list|,
name|w
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|Window
name|w
decl_stmt|;
name|w
operator|.
name|setWidth
argument_list|(
name|m_testWindowSize
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|.
name|showNormal
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_BLACKBERRY
argument_list|)
comment|// "window" is the "root" window and will always be shown fullscreen
comment|// so we only expect one resize event
name|QTRY_COMPARE
argument_list|(
name|w
operator|.
name|width
argument_list|()
argument_list|,
name|qGuiApp
operator|->
name|primaryScreen
argument_list|()
operator|->
name|availableGeometry
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|QTRY_COMPARE
argument_list|(
name|w
operator|.
name|width
argument_list|()
argument_list|,
name|m_testWindowSize
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTRY_VERIFY
argument_list|(
name|w
operator|.
name|height
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|{
name|Window
name|w
decl_stmt|;
specifier|const
name|QSize
name|testSize
argument_list|(
name|m_testWindowSize
operator|.
name|width
argument_list|()
argument_list|,
literal|42
argument_list|)
decl_stmt|;
name|w
operator|.
name|resize
argument_list|(
name|testSize
argument_list|)
expr_stmt|;
name|w
operator|.
name|showNormal
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_BLACKBERRY
argument_list|)
comment|// "window" is the "root" window and will always be shown fullscreen
comment|// so we only expect one resize event
specifier|const
name|QSize
name|expectedSize
init|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
operator|->
name|availableGeometry
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
else|#
directive|else
specifier|const
name|QSize
name|expectedSize
init|=
name|testSize
decl_stmt|;
endif|#
directive|endif
name|QTRY_COMPARE
argument_list|(
name|w
operator|.
name|size
argument_list|()
argument_list|,
name|expectedSize
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|modalDialog
name|void
name|tst_QWindow
operator|::
name|modalDialog
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QGuiApplication
operator|::
name|platformName
argument_list|()
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|"wayland"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"Wayland: This fails. Figure out why."
argument_list|)
expr_stmt|;
name|QWindow
name|normalWindow
decl_stmt|;
name|normalWindow
operator|.
name|setFramePosition
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|80
argument_list|,
literal|80
argument_list|)
argument_list|)
expr_stmt|;
name|normalWindow
operator|.
name|resize
argument_list|(
name|m_testWindowSize
argument_list|)
expr_stmt|;
name|normalWindow
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|normalWindow
argument_list|)
argument_list|)
expr_stmt|;
name|QWindow
name|dialog
decl_stmt|;
name|dialog
operator|.
name|setFramePosition
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|resize
argument_list|(
name|m_testWindowSize
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setModality
argument_list|(
name|Qt
operator|::
name|ApplicationModal
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setFlags
argument_list|(
name|Qt
operator|::
name|Dialog
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|dialog
argument_list|)
argument_list|)
expr_stmt|;
name|normalWindow
operator|.
name|requestActivate
argument_list|()
expr_stmt|;
name|QGuiApplication
operator|::
name|sync
argument_list|()
expr_stmt|;
name|QGuiApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
argument_list|,
operator|&
name|dialog
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|modalDialogClosingOneOfTwoModal
name|void
name|tst_QWindow
operator|::
name|modalDialogClosingOneOfTwoModal
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QGuiApplication
operator|::
name|platformName
argument_list|()
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|"wayland"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"Wayland: This fails. Figure out why."
argument_list|)
expr_stmt|;
name|QWindow
name|normalWindow
decl_stmt|;
name|normalWindow
operator|.
name|setFramePosition
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|80
argument_list|,
literal|80
argument_list|)
argument_list|)
expr_stmt|;
name|normalWindow
operator|.
name|resize
argument_list|(
name|m_testWindowSize
argument_list|)
expr_stmt|;
name|normalWindow
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|normalWindow
argument_list|)
argument_list|)
expr_stmt|;
name|QWindow
name|first_dialog
decl_stmt|;
name|first_dialog
operator|.
name|setFramePosition
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|first_dialog
operator|.
name|resize
argument_list|(
name|m_testWindowSize
argument_list|)
expr_stmt|;
name|first_dialog
operator|.
name|setModality
argument_list|(
name|Qt
operator|::
name|ApplicationModal
argument_list|)
expr_stmt|;
name|first_dialog
operator|.
name|setFlags
argument_list|(
name|Qt
operator|::
name|Dialog
argument_list|)
expr_stmt|;
name|first_dialog
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|first_dialog
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|QWindow
name|second_dialog
decl_stmt|;
name|second_dialog
operator|.
name|setFramePosition
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|300
argument_list|,
literal|300
argument_list|)
argument_list|)
expr_stmt|;
name|second_dialog
operator|.
name|resize
argument_list|(
name|m_testWindowSize
argument_list|)
expr_stmt|;
name|second_dialog
operator|.
name|setModality
argument_list|(
name|Qt
operator|::
name|ApplicationModal
argument_list|)
expr_stmt|;
name|second_dialog
operator|.
name|setFlags
argument_list|(
name|Qt
operator|::
name|Dialog
argument_list|)
expr_stmt|;
name|second_dialog
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|second_dialog
argument_list|)
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
argument_list|,
operator|&
name|second_dialog
argument_list|)
expr_stmt|;
name|second_dialog
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|QGuiApplication
operator|::
name|sync
argument_list|()
expr_stmt|;
name|QGuiApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
argument_list|,
operator|&
name|first_dialog
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|modalWithChildWindow
name|void
name|tst_QWindow
operator|::
name|modalWithChildWindow
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QGuiApplication
operator|::
name|platformName
argument_list|()
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|"wayland"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"Wayland: This fails. Figure out why."
argument_list|)
expr_stmt|;
name|QWindow
name|normalWindow
decl_stmt|;
name|normalWindow
operator|.
name|setFramePosition
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|80
argument_list|,
literal|80
argument_list|)
argument_list|)
expr_stmt|;
name|normalWindow
operator|.
name|resize
argument_list|(
name|m_testWindowSize
argument_list|)
expr_stmt|;
name|normalWindow
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|normalWindow
argument_list|)
argument_list|)
expr_stmt|;
name|QWindow
name|tlw_dialog
decl_stmt|;
name|tlw_dialog
operator|.
name|setFramePosition
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|tlw_dialog
operator|.
name|resize
argument_list|(
name|m_testWindowSize
argument_list|)
expr_stmt|;
name|tlw_dialog
operator|.
name|setModality
argument_list|(
name|Qt
operator|::
name|ApplicationModal
argument_list|)
expr_stmt|;
name|tlw_dialog
operator|.
name|setFlags
argument_list|(
name|Qt
operator|::
name|Dialog
argument_list|)
expr_stmt|;
name|tlw_dialog
operator|.
name|create
argument_list|()
expr_stmt|;
name|QWindow
name|sub_window
argument_list|(
operator|&
name|tlw_dialog
argument_list|)
decl_stmt|;
name|sub_window
operator|.
name|resize
argument_list|(
literal|200
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|sub_window
operator|.
name|show
argument_list|()
expr_stmt|;
name|tlw_dialog
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|tlw_dialog
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|sub_window
argument_list|)
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
argument_list|,
operator|&
name|tlw_dialog
argument_list|)
expr_stmt|;
name|sub_window
operator|.
name|requestActivate
argument_list|()
expr_stmt|;
name|QGuiApplication
operator|::
name|sync
argument_list|()
expr_stmt|;
name|QGuiApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
argument_list|,
operator|&
name|sub_window
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|modalWindowModallity
name|void
name|tst_QWindow
operator|::
name|modalWindowModallity
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QGuiApplication
operator|::
name|platformName
argument_list|()
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|"wayland"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"Wayland: This fails. Figure out why."
argument_list|)
expr_stmt|;
name|QWindow
name|normal_window
decl_stmt|;
name|normal_window
operator|.
name|setFramePosition
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|80
argument_list|,
literal|80
argument_list|)
argument_list|)
expr_stmt|;
name|normal_window
operator|.
name|resize
argument_list|(
name|m_testWindowSize
argument_list|)
expr_stmt|;
name|normal_window
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|normal_window
argument_list|)
argument_list|)
expr_stmt|;
name|QWindow
name|parent_to_modal
decl_stmt|;
name|parent_to_modal
operator|.
name|setFramePosition
argument_list|(
name|normal_window
operator|.
name|geometry
argument_list|()
operator|.
name|topRight
argument_list|()
operator|+
name|QPoint
argument_list|(
literal|100
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|parent_to_modal
operator|.
name|resize
argument_list|(
name|m_testWindowSize
argument_list|)
expr_stmt|;
name|parent_to_modal
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|parent_to_modal
argument_list|)
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
argument_list|,
operator|&
name|parent_to_modal
argument_list|)
expr_stmt|;
name|QWindow
name|modal_dialog
decl_stmt|;
name|modal_dialog
operator|.
name|resize
argument_list|(
name|m_testWindowSize
argument_list|)
expr_stmt|;
name|modal_dialog
operator|.
name|setFramePosition
argument_list|(
name|normal_window
operator|.
name|geometry
argument_list|()
operator|.
name|bottomLeft
argument_list|()
operator|+
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|modal_dialog
operator|.
name|setModality
argument_list|(
name|Qt
operator|::
name|WindowModal
argument_list|)
expr_stmt|;
name|modal_dialog
operator|.
name|setFlags
argument_list|(
name|Qt
operator|::
name|Dialog
argument_list|)
expr_stmt|;
name|modal_dialog
operator|.
name|setTransientParent
argument_list|(
operator|&
name|parent_to_modal
argument_list|)
expr_stmt|;
name|modal_dialog
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|modal_dialog
argument_list|)
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
argument_list|,
operator|&
name|modal_dialog
argument_list|)
expr_stmt|;
name|normal_window
operator|.
name|requestActivate
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
argument_list|,
operator|&
name|normal_window
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|modalWindowPosition
name|void
name|tst_QWindow
operator|::
name|modalWindowPosition
parameter_list|()
block|{
name|QWindow
name|window
decl_stmt|;
name|window
operator|.
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|,
name|m_testWindowSize
argument_list|)
argument_list|)
expr_stmt|;
comment|// Allow for any potential resizing due to constraints
name|QRect
name|origGeo
init|=
name|window
operator|.
name|geometry
argument_list|()
decl_stmt|;
name|window
operator|.
name|setModality
argument_list|(
name|Qt
operator|::
name|WindowModal
argument_list|)
expr_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|window
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|geometry
argument_list|()
argument_list|,
name|origGeo
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|ColoredWindow
class|class
name|ColoredWindow
super|:
specifier|public
name|QRasterWindow
block|{
public|public:
DECL|function|ColoredWindow
specifier|explicit
name|ColoredWindow
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|,
name|QWindow
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QRasterWindow
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_color
argument_list|(
name|color
argument_list|)
block|{}
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|size
argument_list|()
argument_list|)
argument_list|,
name|m_color
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|member|m_color
specifier|const
name|QColor
name|m_color
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|isNativeWindowVisible
specifier|static
name|bool
name|isNativeWindowVisible
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINRT
argument_list|)
return|return
name|IsWindowVisible
argument_list|(
cast|reinterpret_cast
argument_list|<
name|HWND
argument_list|>
argument_list|(
name|window
operator|->
name|winId
argument_list|()
argument_list|)
argument_list|)
return|;
else|#
directive|else
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
name|window
operator|->
name|isVisible
argument_list|()
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|windowsTransientChildren
name|void
name|tst_QWindow
operator|::
name|windowsTransientChildren
parameter_list|()
block|{
if|if
condition|(
name|QGuiApplication
operator|::
name|platformName
argument_list|()
operator|.
name|compare
argument_list|(
name|QStringLiteral
argument_list|(
literal|"windows"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"Windows only test"
argument_list|)
expr_stmt|;
name|ColoredWindow
name|mainWindow
argument_list|(
name|Qt
operator|::
name|yellow
argument_list|)
decl_stmt|;
name|mainWindow
operator|.
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|,
name|m_testWindowSize
argument_list|)
argument_list|)
expr_stmt|;
name|mainWindow
operator|.
name|setTitle
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Main"
argument_list|)
argument_list|)
expr_stmt|;
name|ColoredWindow
name|child
argument_list|(
name|Qt
operator|::
name|blue
argument_list|,
operator|&
name|mainWindow
argument_list|)
decl_stmt|;
name|child
operator|.
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|m_testWindowSize
operator|/
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|ColoredWindow
name|dialog
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
decl_stmt|;
name|dialog
operator|.
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
argument_list|,
name|m_testWindowSize
argument_list|)
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setTitle
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Dialog"
argument_list|)
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setTransientParent
argument_list|(
operator|&
name|mainWindow
argument_list|)
expr_stmt|;
name|mainWindow
operator|.
name|show
argument_list|()
expr_stmt|;
name|child
operator|.
name|show
argument_list|()
expr_stmt|;
name|dialog
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|dialog
argument_list|)
argument_list|)
expr_stmt|;
name|mainWindow
operator|.
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowMinimized
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|isNativeWindowVisible
argument_list|(
operator|&
name|dialog
argument_list|)
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|hide
argument_list|()
expr_stmt|;
name|mainWindow
operator|.
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
expr_stmt|;
comment|// QTBUG-40696, transient children hidden by Qt should not be re-shown by Windows.
name|QVERIFY
argument_list|(
operator|!
name|isNativeWindowVisible
argument_list|(
operator|&
name|dialog
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isNativeWindowVisible
argument_list|(
operator|&
name|child
argument_list|)
argument_list|)
expr_stmt|;
comment|// Real children should be visible.
block|}
end_function
begin_function
DECL|function|requestUpdate
name|void
name|tst_QWindow
operator|::
name|requestUpdate
parameter_list|()
block|{
name|QRect
name|geometry
argument_list|(
name|m_availableTopLeft
operator|+
name|QPoint
argument_list|(
literal|80
argument_list|,
literal|80
argument_list|)
argument_list|,
name|m_testWindowSize
argument_list|)
decl_stmt|;
name|Window
name|window
decl_stmt|;
name|window
operator|.
name|setGeometry
argument_list|(
name|geometry
argument_list|)
expr_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|window
operator|.
name|isExposed
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|UpdateRequest
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|window
operator|.
name|requestUpdate
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|UpdateRequest
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|window
operator|.
name|requestUpdate
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|UpdateRequest
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_include
include|#
directive|include
file|<tst_qwindow.moc>
end_include
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QWindow
argument_list|)
end_macro
end_unit
