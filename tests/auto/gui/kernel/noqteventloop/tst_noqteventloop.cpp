begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QEvent>
end_include
begin_include
include|#
directive|include
file|<QtCore/qthread.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qguiapplication.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qt_windows.h>
end_include
begin_class
DECL|class|tst_NoQtEventLoop
class|class
name|tst_NoQtEventLoop
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|consumeMouseEvents
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_class
DECL|class|Window
class|class
name|Window
super|:
specifier|public
name|QWindow
block|{
public|public:
DECL|function|Window
name|Window
parameter_list|(
name|QWindow
modifier|*
name|parentWindow
init|=
literal|0
parameter_list|)
member_init_list|:
name|QWindow
argument_list|(
name|parentWindow
argument_list|)
block|{     }
DECL|function|reset
name|void
name|reset
parameter_list|()
block|{
name|m_received
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|function|event
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|m_received
index|[
name|event
operator|->
name|type
argument_list|()
index|]
operator|++
expr_stmt|;
return|return
name|QWindow
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
DECL|function|received
name|int
name|received
parameter_list|(
name|QEvent
operator|::
name|Type
name|type
parameter_list|)
block|{
return|return
name|m_received
operator|.
name|value
argument_list|(
name|type
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|member|m_received
name|QHash
argument_list|<
name|QEvent
operator|::
name|Type
argument_list|,
name|int
argument_list|>
name|m_received
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|g_exit
name|bool
name|g_exit
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_extern
DECL|function|wndProc
extern|extern
literal|"C"
name|LRESULT
name|QT_WIN_CALLBACK
name|wndProc
parameter_list|(
name|HWND
name|hwnd
parameter_list|,
name|UINT
name|message
parameter_list|,
name|WPARAM
name|wParam
parameter_list|,
name|LPARAM
name|lParam
parameter_list|)
block|{
if|if
condition|(
name|message
operator|==
name|WM_SHOWWINDOW
operator|&&
name|wParam
operator|==
literal|0
condition|)
name|g_exit
operator|=
literal|true
expr_stmt|;
return|return
name|DefWindowProc
argument_list|(
name|hwnd
argument_list|,
name|message
argument_list|,
name|wParam
argument_list|,
name|lParam
argument_list|)
return|;
block|}
end_extern
begin_class
DECL|class|TestThread
class|class
name|TestThread
super|:
specifier|public
name|QThread
block|{
name|Q_OBJECT
public|public:
DECL|function|TestThread
name|TestThread
parameter_list|(
name|HWND
name|parentWnd
parameter_list|,
name|Window
modifier|*
name|childWindow
parameter_list|)
member_init_list|:
name|QThread
argument_list|()
member_init_list|,
name|m_hwnd
argument_list|(
name|parentWnd
argument_list|)
member_init_list|,
name|m_childWindow
argument_list|(
name|childWindow
argument_list|)
block|{
name|m_screenW
operator|=
operator|::
name|GetSystemMetrics
argument_list|(
name|SM_CXSCREEN
argument_list|)
expr_stmt|;
name|m_screenH
operator|=
operator|::
name|GetSystemMetrics
argument_list|(
name|SM_CYSCREEN
argument_list|)
expr_stmt|;
block|}
enum|enum
block|{
DECL|enumerator|MouseClick
name|MouseClick
block|,
DECL|enumerator|MouseMove
name|MouseMove
block|}
enum|;
DECL|function|mouseInput
name|void
name|mouseInput
parameter_list|(
name|int
name|command
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|p
init|=
name|QPoint
argument_list|()
parameter_list|)
block|{
name|INPUT
name|mouseEvent
decl_stmt|;
name|mouseEvent
operator|.
name|type
operator|=
name|INPUT_MOUSE
expr_stmt|;
name|MOUSEINPUT
modifier|&
name|mi
init|=
name|mouseEvent
operator|.
name|mi
decl_stmt|;
name|mi
operator|.
name|mouseData
operator|=
literal|0
expr_stmt|;
name|mi
operator|.
name|time
operator|=
literal|0
expr_stmt|;
name|mi
operator|.
name|dwExtraInfo
operator|=
literal|0
expr_stmt|;
name|mi
operator|.
name|dx
operator|=
literal|0
expr_stmt|;
name|mi
operator|.
name|dy
operator|=
literal|0
expr_stmt|;
switch|switch
condition|(
name|command
condition|)
block|{
case|case
name|MouseClick
case|:
name|mi
operator|.
name|dwFlags
operator|=
name|MOUSEEVENTF_LEFTDOWN
expr_stmt|;
operator|::
name|SendInput
argument_list|(
literal|1
argument_list|,
operator|&
name|mouseEvent
argument_list|,
sizeof|sizeof
argument_list|(
name|INPUT
argument_list|)
argument_list|)
expr_stmt|;
operator|::
name|Sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|mi
operator|.
name|dwFlags
operator|=
name|MOUSEEVENTF_LEFTUP
expr_stmt|;
operator|::
name|SendInput
argument_list|(
literal|1
argument_list|,
operator|&
name|mouseEvent
argument_list|,
sizeof|sizeof
argument_list|(
name|INPUT
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|MouseMove
case|:
name|mi
operator|.
name|dwFlags
operator|=
name|MOUSEEVENTF_MOVE
operator||
name|MOUSEEVENTF_ABSOLUTE
expr_stmt|;
name|mi
operator|.
name|dx
operator|=
name|p
operator|.
name|x
argument_list|()
operator|*
literal|65536
operator|/
name|m_screenW
expr_stmt|;
name|mi
operator|.
name|dy
operator|=
name|p
operator|.
name|y
argument_list|()
operator|*
literal|65536
operator|/
name|m_screenH
expr_stmt|;
operator|::
name|SendInput
argument_list|(
literal|1
argument_list|,
operator|&
name|mouseEvent
argument_list|,
sizeof|sizeof
argument_list|(
name|INPUT
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
DECL|function|mouseClick
name|void
name|mouseClick
parameter_list|()
block|{
name|mouseInput
argument_list|(
name|MouseClick
argument_list|)
expr_stmt|;
block|}
DECL|function|mouseMove
name|void
name|mouseMove
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pt
parameter_list|)
block|{
name|mouseInput
argument_list|(
name|MouseMove
argument_list|,
name|pt
argument_list|)
expr_stmt|;
block|}
DECL|function|run
name|void
name|run
parameter_list|()
block|{
struct|struct
name|ScopedCleanup
block|{
comment|/* This is in order to ensure that the window is hidden when returning from run(),                regardless of the return point (e.g. with QTRY_COMPARE) */
name|ScopedCleanup
parameter_list|(
name|HWND
name|hwnd
parameter_list|)
member_init_list|:
name|m_hwnd
argument_list|(
name|hwnd
argument_list|)
block|{ }
name|~
name|ScopedCleanup
parameter_list|()
block|{
operator|::
name|ShowWindow
argument_list|(
name|m_hwnd
argument_list|,
name|SW_HIDE
argument_list|)
expr_stmt|;
block|}
name|HWND
name|m_hwnd
decl_stmt|;
block|}
name|cleanup
argument_list|(
name|m_hwnd
argument_list|)
struct|;
name|m_testPassed
operator|=
literal|false
expr_stmt|;
name|POINT
name|pt
decl_stmt|;
name|pt
operator|.
name|x
operator|=
literal|0
expr_stmt|;
name|pt
operator|.
name|y
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
operator|::
name|ClientToScreen
argument_list|(
name|m_hwnd
argument_list|,
operator|&
name|pt
argument_list|)
condition|)
return|return;
name|m_windowPos
operator|=
name|QPoint
argument_list|(
name|pt
operator|.
name|x
argument_list|,
name|pt
operator|.
name|y
argument_list|)
expr_stmt|;
comment|// First activate the parent window (which will also activate the child window)
name|m_windowPos
operator|+=
name|QPoint
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|mouseMove
argument_list|(
name|m_windowPos
argument_list|)
expr_stmt|;
operator|::
name|Sleep
argument_list|(
literal|150
argument_list|)
expr_stmt|;
name|mouseClick
argument_list|()
expr_stmt|;
comment|// At this point the windows are activated, no further events will be send to the QWindow
comment|// if we click on the native parent HWND
name|m_childWindow
operator|->
name|reset
argument_list|()
expr_stmt|;
operator|::
name|Sleep
argument_list|(
literal|150
argument_list|)
expr_stmt|;
name|mouseClick
argument_list|()
expr_stmt|;
operator|::
name|Sleep
argument_list|(
literal|150
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|m_childWindow
operator|->
name|received
argument_list|(
name|QEvent
operator|::
name|MouseButtonPress
argument_list|)
operator|+
name|m_childWindow
operator|->
name|received
argument_list|(
name|QEvent
operator|::
name|MouseButtonRelease
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Now click in the QWindow. The QWindow should receive those events.
name|m_windowPos
operator|.
name|ry
argument_list|()
operator|+=
literal|50
expr_stmt|;
name|mouseMove
argument_list|(
name|m_windowPos
argument_list|)
expr_stmt|;
operator|::
name|Sleep
argument_list|(
literal|150
argument_list|)
expr_stmt|;
name|mouseClick
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|m_childWindow
operator|->
name|received
argument_list|(
name|QEvent
operator|::
name|MouseButtonPress
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|m_childWindow
operator|->
name|received
argument_list|(
name|QEvent
operator|::
name|MouseButtonRelease
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|m_testPassed
operator|=
literal|true
expr_stmt|;
comment|// ScopedCleanup will hide the window here
comment|// Once the native window is hidden, it will exit the event loop.
block|}
DECL|function|passed
name|bool
name|passed
parameter_list|()
specifier|const
block|{
return|return
name|m_testPassed
return|;
block|}
private|private:
DECL|member|m_screenW
name|int
name|m_screenW
decl_stmt|;
DECL|member|m_screenH
name|int
name|m_screenH
decl_stmt|;
DECL|member|m_testPassed
name|bool
name|m_testPassed
decl_stmt|;
DECL|member|m_hwnd
name|HWND
name|m_hwnd
decl_stmt|;
DECL|member|m_childWindow
name|Window
modifier|*
name|m_childWindow
decl_stmt|;
DECL|member|m_windowPos
name|QPoint
name|m_windowPos
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|consumeMouseEvents
name|void
name|tst_NoQtEventLoop
operator|::
name|consumeMouseEvents
parameter_list|()
block|{
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|char
modifier|*
name|argv
index|[]
init|=
block|{
expr|const_cast
operator|<
name|char
operator|*
operator|>
operator|(
literal|"test"
operator|)
block|}
decl_stmt|;
name|QGuiApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QString
name|clsName
argument_list|(
name|QStringLiteral
argument_list|(
literal|"tst_NoQtEventLoop_WINDOW"
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|HINSTANCE
name|appInstance
init|=
operator|(
name|HINSTANCE
operator|)
name|GetModuleHandle
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|WNDCLASSEX
name|wc
decl_stmt|;
name|wc
operator|.
name|cbSize
operator|=
sizeof|sizeof
argument_list|(
name|WNDCLASSEX
argument_list|)
expr_stmt|;
name|wc
operator|.
name|style
operator|=
name|CS_DBLCLKS
operator||
name|CS_OWNDC
expr_stmt|;
comment|// CS_SAVEBITS
name|wc
operator|.
name|lpfnWndProc
operator|=
name|wndProc
expr_stmt|;
name|wc
operator|.
name|cbClsExtra
operator|=
literal|0
expr_stmt|;
name|wc
operator|.
name|cbWndExtra
operator|=
literal|0
expr_stmt|;
name|wc
operator|.
name|hInstance
operator|=
name|appInstance
expr_stmt|;
name|wc
operator|.
name|hIcon
operator|=
literal|0
expr_stmt|;
name|wc
operator|.
name|hIconSm
operator|=
literal|0
expr_stmt|;
name|wc
operator|.
name|hCursor
operator|=
literal|0
expr_stmt|;
name|wc
operator|.
name|hbrBackground
operator|=
operator|::
name|GetSysColorBrush
argument_list|(
name|COLOR_BTNFACE
comment|/*COLOR_WINDOW*/
argument_list|)
expr_stmt|;
name|wc
operator|.
name|lpszMenuName
operator|=
literal|0
expr_stmt|;
name|wc
operator|.
name|lpszClassName
operator|=
operator|(
name|wchar_t
operator|*
operator|)
name|clsName
operator|.
name|utf16
argument_list|()
expr_stmt|;
name|ATOM
name|atom
init|=
operator|::
name|RegisterClassEx
argument_list|(
operator|&
name|wc
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|atom
argument_list|,
literal|"RegisterClassEx failed"
argument_list|)
expr_stmt|;
name|DWORD
name|dwExStyle
init|=
name|WS_EX_APPWINDOW
decl_stmt|;
name|DWORD
name|dwStyle
init|=
name|WS_CAPTION
operator||
name|WS_HSCROLL
operator||
name|WS_TABSTOP
operator||
name|WS_VISIBLE
decl_stmt|;
name|HWND
name|mainWnd
init|=
operator|::
name|CreateWindowEx
argument_list|(
name|dwExStyle
argument_list|,
operator|(
name|wchar_t
operator|*
operator|)
name|clsName
operator|.
name|utf16
argument_list|()
argument_list|,
name|TEXT
argument_list|(
literal|"tst_NoQtEventLoop"
argument_list|)
argument_list|,
name|dwStyle
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|300
argument_list|,
literal|300
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|,
name|appInstance
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|mainWnd
argument_list|,
literal|"CreateWindowEx failed"
argument_list|)
expr_stmt|;
operator|::
name|ShowWindow
argument_list|(
name|mainWnd
argument_list|,
name|SW_SHOW
argument_list|)
expr_stmt|;
name|Window
modifier|*
name|childWindow
init|=
operator|new
name|Window
decl_stmt|;
name|childWindow
operator|->
name|setParent
argument_list|(
name|QWindow
operator|::
name|fromWinId
argument_list|(
operator|(
name|WId
operator|)
name|mainWnd
argument_list|)
argument_list|)
expr_stmt|;
name|childWindow
operator|->
name|setGeometry
argument_list|(
literal|0
argument_list|,
literal|50
argument_list|,
literal|200
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|childWindow
operator|->
name|show
argument_list|()
expr_stmt|;
name|TestThread
modifier|*
name|testThread
init|=
operator|new
name|TestThread
argument_list|(
name|mainWnd
argument_list|,
name|childWindow
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|testThread
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
name|testThread
argument_list|,
name|SLOT
argument_list|(
name|deleteLater
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|testThread
operator|->
name|start
argument_list|()
expr_stmt|;
comment|// Our own message loop...
name|MSG
name|msg
decl_stmt|;
while|while
condition|(
operator|::
name|GetMessage
argument_list|(
operator|&
name|msg
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|>
literal|0
condition|)
block|{
operator|::
name|TranslateMessage
argument_list|(
operator|&
name|msg
argument_list|)
expr_stmt|;
operator|::
name|DispatchMessage
argument_list|(
operator|&
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
name|g_exit
condition|)
break|break;
block|}
name|QCOMPARE
argument_list|(
name|testThread
operator|->
name|passed
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_include
include|#
directive|include
file|<tst_noqteventloop.moc>
end_include
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_NoQtEventLoop
argument_list|)
end_macro
end_unit
