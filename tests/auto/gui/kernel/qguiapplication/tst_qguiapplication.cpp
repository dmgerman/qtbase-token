begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QtGui/QWindow>
end_include
begin_include
include|#
directive|include
file|<QtGui/QScreen>
end_include
begin_include
include|#
directive|include
file|<QtGui/QCursor>
end_include
begin_include
include|#
directive|include
file|<QtGui/QFont>
end_include
begin_include
include|#
directive|include
file|<QtGui/QPalette>
end_include
begin_include
include|#
directive|include
file|<QtGui/QStyleHints>
end_include
begin_include
include|#
directive|include
file|<qpa/qwindowsysteminterface.h>
end_include
begin_include
include|#
directive|include
file|<qgenericplugin.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_QNX
argument_list|)
end_if
begin_include
include|#
directive|include
file|<QOpenGLContext>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QtGui/private/qopenglcontext_p.h>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|"tst_qcoreapplication.h"
end_include
begin_enum
DECL|enumerator|spacing
DECL|enumerator|windowSize
enum|enum
block|{
name|spacing
init|=
literal|50
block|,
name|windowSize
init|=
literal|200
block|}
enum|;
end_enum
begin_class
DECL|class|tst_QGuiApplication
class|class
name|tst_QGuiApplication
super|:
specifier|public
name|tst_QCoreApplication
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|cleanup
parameter_list|()
function_decl|;
name|void
name|displayName
parameter_list|()
function_decl|;
name|void
name|firstWindowTitle
parameter_list|()
function_decl|;
name|void
name|windowIcon
parameter_list|()
function_decl|;
name|void
name|focusObject
parameter_list|()
function_decl|;
name|void
name|allWindows
parameter_list|()
function_decl|;
name|void
name|topLevelWindows
parameter_list|()
function_decl|;
name|void
name|abortQuitOnShow
parameter_list|()
function_decl|;
name|void
name|changeFocusWindow
parameter_list|()
function_decl|;
name|void
name|keyboardModifiers
parameter_list|()
function_decl|;
name|void
name|palette
parameter_list|()
function_decl|;
name|void
name|modalWindow
parameter_list|()
function_decl|;
name|void
name|quitOnLastWindowClosed
parameter_list|()
function_decl|;
name|void
name|genericPluginsAndWindowSystemEvents
parameter_list|()
function_decl|;
name|void
name|layoutDirection
parameter_list|()
function_decl|;
name|void
name|globalShareContext
parameter_list|()
function_decl|;
name|void
name|testSetPaletteAttribute
parameter_list|()
function_decl|;
name|void
name|staticFunctions
parameter_list|()
function_decl|;
name|void
name|settableStyleHints_data
parameter_list|()
function_decl|;
name|void
name|settableStyleHints
parameter_list|()
function_decl|;
comment|// Needs to run last as it changes style hints.
block|}
class|;
end_class
begin_function
DECL|function|cleanup
name|void
name|tst_QGuiApplication
operator|::
name|cleanup
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QGuiApplication
operator|::
name|allWindows
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|displayName
name|void
name|tst_QGuiApplication
operator|::
name|displayName
parameter_list|()
block|{
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|char
modifier|*
name|argv
index|[]
init|=
block|{
expr|const_cast
operator|<
name|char
operator|*
operator|>
operator|(
literal|"tst_qguiapplication"
operator|)
block|}
decl_stmt|;
name|QGuiApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|::
name|qAppName
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"tst_qguiapplication"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|applicationName
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"tst_qguiapplication"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|applicationDisplayName
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"tst_qguiapplication"
argument_list|)
argument_list|)
expr_stmt|;
name|QGuiApplication
operator|::
name|setApplicationDisplayName
argument_list|(
literal|"The GUI Application"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|applicationDisplayName
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"The GUI Application"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|firstWindowTitle
name|void
name|tst_QGuiApplication
operator|::
name|firstWindowTitle
parameter_list|()
block|{
name|int
name|argc
init|=
literal|3
decl_stmt|;
name|char
modifier|*
name|argv
index|[]
init|=
block|{
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
literal|"tst_qguiapplication"
argument_list|)
block|,
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
literal|"-qwindowtitle"
argument_list|)
block|,
expr|const_cast
operator|<
name|char
operator|*
operator|>
operator|(
literal|"User Title"
operator|)
block|}
decl_stmt|;
name|QGuiApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QWindow
name|window
decl_stmt|;
name|window
operator|.
name|setTitle
argument_list|(
literal|"Application Title"
argument_list|)
expr_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|title
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"User Title"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|windowIcon
name|void
name|tst_QGuiApplication
operator|::
name|windowIcon
parameter_list|()
block|{
name|int
name|argc
init|=
literal|3
decl_stmt|;
name|char
modifier|*
name|argv
index|[]
init|=
block|{
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
literal|"tst_qguiapplication"
argument_list|)
block|,
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
literal|"-qwindowicon"
argument_list|)
block|,
expr|const_cast
operator|<
name|char
operator|*
operator|>
operator|(
literal|":/icons/usericon.png"
operator|)
block|}
decl_stmt|;
name|QGuiApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QIcon
name|appIcon
argument_list|(
literal|":/icons/appicon.png"
argument_list|)
decl_stmt|;
name|app
operator|.
name|setWindowIcon
argument_list|(
name|appIcon
argument_list|)
expr_stmt|;
name|QWindow
name|window
decl_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|QIcon
name|userIcon
argument_list|(
literal|":/icons/usericon.png"
argument_list|)
decl_stmt|;
comment|// Comparing icons is hard. cacheKey() differs because the icon was independently loaded.
comment|// So we use availableSizes, after making sure that the app and user icons do have different sizes.
name|QVERIFY
argument_list|(
name|userIcon
operator|.
name|availableSizes
argument_list|()
operator|!=
name|appIcon
operator|.
name|availableSizes
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|icon
argument_list|()
operator|.
name|availableSizes
argument_list|()
argument_list|,
name|userIcon
operator|.
name|availableSizes
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|DummyWindow
class|class
name|DummyWindow
super|:
specifier|public
name|QWindow
block|{
public|public:
DECL|function|DummyWindow
name|DummyWindow
parameter_list|()
member_init_list|:
name|m_focusObject
argument_list|(
literal|0
argument_list|)
block|{}
DECL|function|focusObject
specifier|virtual
name|QObject
modifier|*
name|focusObject
parameter_list|()
specifier|const
block|{
return|return
name|m_focusObject
return|;
block|}
DECL|function|setFocusObject
name|void
name|setFocusObject
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|)
block|{
name|m_focusObject
operator|=
name|object
expr_stmt|;
emit|emit
name|focusObjectChanged
argument_list|(
name|object
argument_list|)
emit|;
block|}
DECL|member|m_focusObject
name|QObject
modifier|*
name|m_focusObject
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|focusObject
name|void
name|tst_QGuiApplication
operator|::
name|focusObject
parameter_list|()
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QGuiApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|qApp
operator|->
name|platformName
argument_list|()
operator|.
name|toLower
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"wayland"
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"Wayland: This fails. Figure out why."
argument_list|)
expr_stmt|;
name|QObject
name|obj1
decl_stmt|,
name|obj2
decl_stmt|,
name|obj3
decl_stmt|;
specifier|const
name|QRect
name|screenGeometry
init|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
operator|->
name|availableVirtualGeometry
argument_list|()
decl_stmt|;
name|DummyWindow
name|window1
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_QNX
argument_list|)
name|window1
operator|.
name|setSurfaceType
argument_list|(
name|QSurface
operator|::
name|OpenGLSurface
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|window1
operator|.
name|resize
argument_list|(
name|windowSize
argument_list|,
name|windowSize
argument_list|)
expr_stmt|;
name|window1
operator|.
name|setTitle
argument_list|(
name|QStringLiteral
argument_list|(
literal|"focusObject:window1"
argument_list|)
argument_list|)
expr_stmt|;
name|window1
operator|.
name|setFramePosition
argument_list|(
name|QPoint
argument_list|(
name|screenGeometry
operator|.
name|left
argument_list|()
operator|+
name|spacing
argument_list|,
name|screenGeometry
operator|.
name|top
argument_list|()
operator|+
name|spacing
argument_list|)
argument_list|)
expr_stmt|;
name|DummyWindow
name|window2
decl_stmt|;
name|window2
operator|.
name|resize
argument_list|(
name|windowSize
argument_list|,
name|windowSize
argument_list|)
expr_stmt|;
name|window2
operator|.
name|setFramePosition
argument_list|(
name|QPoint
argument_list|(
name|screenGeometry
operator|.
name|left
argument_list|()
operator|+
literal|2
operator|*
name|spacing
operator|+
name|windowSize
argument_list|,
name|screenGeometry
operator|.
name|top
argument_list|()
operator|+
name|spacing
argument_list|)
argument_list|)
expr_stmt|;
name|window2
operator|.
name|setTitle
argument_list|(
name|QStringLiteral
argument_list|(
literal|"focusObject:window2"
argument_list|)
argument_list|)
expr_stmt|;
name|window1
operator|.
name|show
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_QNX
argument_list|)
comment|// We either need to create a eglSurface or a create a backing store
comment|// and then post the window in order for screen to show the window
name|QOpenGLContext
name|context
decl_stmt|;
name|context
operator|.
name|create
argument_list|()
expr_stmt|;
name|context
operator|.
name|makeCurrent
argument_list|(
operator|&
name|window1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|window1
argument_list|)
expr_stmt|;
comment|// Buffer swap only succeeds with exposed window
name|context
operator|.
name|swapBuffers
argument_list|(
operator|&
name|window1
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|app
argument_list|,
name|SIGNAL
argument_list|(
name|focusObjectChanged
argument_list|(
name|QObject
operator|*
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// verify active window focus propagates to qguiapplication
name|window1
operator|.
name|requestActivate
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowActive
argument_list|(
operator|&
name|window1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|focusWindow
argument_list|()
argument_list|,
operator|&
name|window1
argument_list|)
expr_stmt|;
name|window1
operator|.
name|setFocusObject
argument_list|(
operator|&
name|obj1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|focusObject
argument_list|()
argument_list|,
operator|&
name|obj1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|window1
operator|.
name|setFocusObject
argument_list|(
operator|&
name|obj2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|focusObject
argument_list|()
argument_list|,
operator|&
name|obj2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|window2
operator|.
name|setFocusObject
argument_list|(
operator|&
name|obj3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|focusObject
argument_list|()
argument_list|,
operator|&
name|obj2
argument_list|)
expr_stmt|;
comment|// not yet changed
name|window2
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|window2
argument_list|)
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|app
operator|.
name|focusWindow
argument_list|()
argument_list|,
operator|&
name|window2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|focusObject
argument_list|()
argument_list|,
operator|&
name|obj3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// focus change on unfocused window does not show
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|window1
operator|.
name|setFocusObject
argument_list|(
operator|&
name|obj1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|focusObject
argument_list|()
argument_list|,
operator|&
name|obj3
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|allWindows
name|void
name|tst_QGuiApplication
operator|::
name|allWindows
parameter_list|()
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QGuiApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QWindow
modifier|*
name|window1
init|=
operator|new
name|QWindow
decl_stmt|;
name|QWindow
modifier|*
name|window2
init|=
operator|new
name|QWindow
argument_list|(
name|window1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|app
operator|.
name|allWindows
argument_list|()
operator|.
name|contains
argument_list|(
name|window1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|app
operator|.
name|allWindows
argument_list|()
operator|.
name|contains
argument_list|(
name|window2
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|allWindows
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
operator|delete
name|window1
expr_stmt|;
name|window1
operator|=
literal|0
expr_stmt|;
name|window2
operator|=
literal|0
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|app
operator|.
name|allWindows
argument_list|()
operator|.
name|contains
argument_list|(
name|window2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|app
operator|.
name|allWindows
argument_list|()
operator|.
name|contains
argument_list|(
name|window1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|allWindows
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|topLevelWindows
name|void
name|tst_QGuiApplication
operator|::
name|topLevelWindows
parameter_list|()
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QGuiApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QWindow
modifier|*
name|window1
init|=
operator|new
name|QWindow
decl_stmt|;
name|QWindow
modifier|*
name|window2
init|=
operator|new
name|QWindow
argument_list|(
name|window1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|app
operator|.
name|topLevelWindows
argument_list|()
operator|.
name|contains
argument_list|(
name|window1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|app
operator|.
name|topLevelWindows
argument_list|()
operator|.
name|contains
argument_list|(
name|window2
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|topLevelWindows
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
operator|delete
name|window1
expr_stmt|;
name|window1
operator|=
literal|0
expr_stmt|;
name|window2
operator|=
literal|0
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|app
operator|.
name|topLevelWindows
argument_list|()
operator|.
name|contains
argument_list|(
name|window2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|app
operator|.
name|topLevelWindows
argument_list|()
operator|.
name|contains
argument_list|(
name|window1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|topLevelWindows
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|ShowCloseShowWindow
class|class
name|ShowCloseShowWindow
super|:
specifier|public
name|QWindow
block|{
name|Q_OBJECT
public|public:
DECL|function|ShowCloseShowWindow
name|ShowCloseShowWindow
parameter_list|(
name|bool
name|showAgain
parameter_list|,
name|QWindow
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QWindow
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|showAgain
argument_list|(
name|showAgain
argument_list|)
block|{
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|0
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|doClose
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|500
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|exitApp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
private|private
name|slots
private|:
DECL|function|doClose
name|void
name|doClose
parameter_list|()
block|{
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|showAgain
condition|)
name|show
argument_list|()
expr_stmt|;
block|}
DECL|function|exitApp
name|void
name|exitApp
parameter_list|()
block|{
name|qApp
operator|->
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|member|showAgain
name|bool
name|showAgain
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|abortQuitOnShow
name|void
name|tst_QGuiApplication
operator|::
name|abortQuitOnShow
parameter_list|()
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QGuiApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|screenGeometry
init|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
operator|->
name|availableVirtualGeometry
argument_list|()
decl_stmt|;
name|QScopedPointer
argument_list|<
name|QWindow
argument_list|>
name|window1
argument_list|(
operator|new
name|ShowCloseShowWindow
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|window1
operator|->
name|resize
argument_list|(
name|windowSize
argument_list|,
name|windowSize
argument_list|)
expr_stmt|;
name|window1
operator|->
name|setFramePosition
argument_list|(
name|QPoint
argument_list|(
name|screenGeometry
operator|.
name|left
argument_list|()
operator|+
name|spacing
argument_list|,
name|screenGeometry
operator|.
name|top
argument_list|()
operator|+
name|spacing
argument_list|)
argument_list|)
expr_stmt|;
name|window1
operator|->
name|setTitle
argument_list|(
name|QStringLiteral
argument_list|(
literal|"abortQuitOnShow:window1"
argument_list|)
argument_list|)
expr_stmt|;
name|window1
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|exec
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QScopedPointer
argument_list|<
name|QWindow
argument_list|>
name|window2
argument_list|(
operator|new
name|ShowCloseShowWindow
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|window2
operator|->
name|setTitle
argument_list|(
name|QStringLiteral
argument_list|(
literal|"abortQuitOnShow:window2"
argument_list|)
argument_list|)
expr_stmt|;
name|window2
operator|->
name|resize
argument_list|(
name|windowSize
argument_list|,
name|windowSize
argument_list|)
expr_stmt|;
name|window2
operator|->
name|setFramePosition
argument_list|(
name|QPoint
argument_list|(
name|screenGeometry
operator|.
name|left
argument_list|()
operator|+
literal|2
operator|*
name|spacing
operator|+
name|windowSize
argument_list|,
name|screenGeometry
operator|.
name|top
argument_list|()
operator|+
name|spacing
argument_list|)
argument_list|)
expr_stmt|;
name|window2
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|exec
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|FocusChangeWindow
class|class
name|FocusChangeWindow
super|:
specifier|public
name|QWindow
block|{
protected|protected:
DECL|function|event
specifier|virtual
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
name|ev
parameter_list|)
block|{
if|if
condition|(
name|ev
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|FocusAboutToChange
condition|)
name|windowDuringFocusAboutToChange
operator|=
name|qGuiApp
operator|->
name|focusWindow
argument_list|()
expr_stmt|;
return|return
name|QWindow
operator|::
name|event
argument_list|(
name|ev
argument_list|)
return|;
block|}
DECL|function|focusOutEvent
specifier|virtual
name|void
name|focusOutEvent
parameter_list|(
name|QFocusEvent
modifier|*
parameter_list|)
block|{
name|windowDuringFocusOut
operator|=
name|qGuiApp
operator|->
name|focusWindow
argument_list|()
expr_stmt|;
block|}
public|public:
DECL|function|FocusChangeWindow
name|FocusChangeWindow
parameter_list|()
member_init_list|:
name|QWindow
argument_list|()
member_init_list|,
name|windowDuringFocusAboutToChange
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|windowDuringFocusOut
argument_list|(
literal|0
argument_list|)
block|{}
DECL|member|windowDuringFocusAboutToChange
name|QWindow
modifier|*
name|windowDuringFocusAboutToChange
decl_stmt|;
DECL|member|windowDuringFocusOut
name|QWindow
modifier|*
name|windowDuringFocusOut
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|changeFocusWindow
name|void
name|tst_QGuiApplication
operator|::
name|changeFocusWindow
parameter_list|()
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QGuiApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|qApp
operator|->
name|platformName
argument_list|()
operator|.
name|toLower
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"wayland"
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"Wayland: This fails. Figure out why."
argument_list|)
expr_stmt|;
specifier|const
name|QRect
name|screenGeometry
init|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
operator|->
name|availableVirtualGeometry
argument_list|()
decl_stmt|;
comment|// focus is changed between FocusAboutToChange and FocusChanged
name|FocusChangeWindow
name|window1
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_QNX
argument_list|)
name|window1
operator|.
name|setSurfaceType
argument_list|(
name|QSurface
operator|::
name|OpenGLSurface
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|window1
operator|.
name|resize
argument_list|(
name|windowSize
argument_list|,
name|windowSize
argument_list|)
expr_stmt|;
name|window1
operator|.
name|setFramePosition
argument_list|(
name|QPoint
argument_list|(
name|screenGeometry
operator|.
name|left
argument_list|()
operator|+
name|spacing
argument_list|,
name|screenGeometry
operator|.
name|top
argument_list|()
operator|+
name|spacing
argument_list|)
argument_list|)
expr_stmt|;
name|window1
operator|.
name|setTitle
argument_list|(
name|QStringLiteral
argument_list|(
literal|"changeFocusWindow:window1"
argument_list|)
argument_list|)
expr_stmt|;
name|window1
operator|.
name|show
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_QNX
argument_list|)
comment|// We either need to create a eglSurface or a create a backing store
comment|// and then post the window in order for screen to show the window
name|QOpenGLContext
name|context
decl_stmt|;
name|context
operator|.
name|create
argument_list|()
expr_stmt|;
name|context
operator|.
name|makeCurrent
argument_list|(
operator|&
name|window1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|window1
argument_list|)
expr_stmt|;
comment|// Buffer swap only succeeds with exposed window
name|context
operator|.
name|swapBuffers
argument_list|(
operator|&
name|window1
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|FocusChangeWindow
name|window2
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_QNX
argument_list|)
name|window2
operator|.
name|setSurfaceType
argument_list|(
name|QSurface
operator|::
name|OpenGLSurface
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|window2
operator|.
name|resize
argument_list|(
name|windowSize
argument_list|,
name|windowSize
argument_list|)
expr_stmt|;
name|window2
operator|.
name|setFramePosition
argument_list|(
name|QPoint
argument_list|(
name|screenGeometry
operator|.
name|left
argument_list|()
operator|+
literal|2
operator|*
name|spacing
operator|+
name|windowSize
argument_list|,
name|screenGeometry
operator|.
name|top
argument_list|()
operator|+
name|spacing
argument_list|)
argument_list|)
expr_stmt|;
name|window2
operator|.
name|setTitle
argument_list|(
name|QStringLiteral
argument_list|(
literal|"changeFocusWindow:window2"
argument_list|)
argument_list|)
expr_stmt|;
name|window2
operator|.
name|show
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_QNX
argument_list|)
comment|// We either need to create a eglSurface or a create a backing store
comment|// and then post the window in order for screen to show the window
name|context
operator|.
name|makeCurrent
argument_list|(
operator|&
name|window2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|window2
argument_list|)
expr_stmt|;
comment|// Buffer swap only succeeds with exposed window
name|context
operator|.
name|swapBuffers
argument_list|(
operator|&
name|window2
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|window1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|window2
argument_list|)
argument_list|)
expr_stmt|;
name|window1
operator|.
name|requestActivate
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|app
operator|.
name|focusWindow
argument_list|()
argument_list|,
operator|&
name|window1
argument_list|)
expr_stmt|;
name|window2
operator|.
name|requestActivate
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|app
operator|.
name|focusWindow
argument_list|()
argument_list|,
operator|&
name|window2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window1
operator|.
name|windowDuringFocusAboutToChange
argument_list|,
operator|&
name|window1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window1
operator|.
name|windowDuringFocusOut
argument_list|,
operator|&
name|window2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|keyboardModifiers
name|void
name|tst_QGuiApplication
operator|::
name|keyboardModifiers
parameter_list|()
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QGuiApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|screenGeometry
init|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
operator|->
name|availableVirtualGeometry
argument_list|()
decl_stmt|;
name|QScopedPointer
argument_list|<
name|QWindow
argument_list|>
name|window
argument_list|(
operator|new
name|QWindow
argument_list|)
decl_stmt|;
name|window
operator|->
name|resize
argument_list|(
name|windowSize
argument_list|,
name|windowSize
argument_list|)
expr_stmt|;
name|window
operator|->
name|setFramePosition
argument_list|(
name|QPoint
argument_list|(
name|screenGeometry
operator|.
name|left
argument_list|()
operator|+
name|spacing
argument_list|,
name|screenGeometry
operator|.
name|top
argument_list|()
operator|+
name|spacing
argument_list|)
argument_list|)
expr_stmt|;
name|window
operator|->
name|setTitle
argument_list|(
name|QStringLiteral
argument_list|(
literal|"keyboardModifiers"
argument_list|)
argument_list|)
expr_stmt|;
name|window
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
name|window
operator|.
name|data
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
expr_stmt|;
comment|// mouse events
name|QPoint
name|center
init|=
name|window
operator|->
name|geometry
argument_list|()
operator|.
name|center
argument_list|()
decl_stmt|;
name|QTest
operator|::
name|mouseEvent
argument_list|(
name|QTest
operator|::
name|MousePress
argument_list|,
name|window
operator|.
name|data
argument_list|()
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|,
name|center
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseEvent
argument_list|(
name|QTest
operator|::
name|MouseRelease
argument_list|,
name|window
operator|.
name|data
argument_list|()
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|,
name|center
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseEvent
argument_list|(
name|QTest
operator|::
name|MousePress
argument_list|,
name|window
operator|.
name|data
argument_list|()
argument_list|,
name|Qt
operator|::
name|RightButton
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|,
name|center
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseEvent
argument_list|(
name|QTest
operator|::
name|MouseRelease
argument_list|,
name|window
operator|.
name|data
argument_list|()
argument_list|,
name|Qt
operator|::
name|RightButton
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|,
name|center
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
comment|// shortcut events
name|QTest
operator|::
name|keyEvent
argument_list|(
name|QTest
operator|::
name|Shortcut
argument_list|,
name|window
operator|.
name|data
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_5
argument_list|,
name|Qt
operator|::
name|MetaModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|MetaModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyEvent
argument_list|(
name|QTest
operator|::
name|Shortcut
argument_list|,
name|window
operator|.
name|data
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_Period
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyEvent
argument_list|(
name|QTest
operator|::
name|Shortcut
argument_list|,
name|window
operator|.
name|data
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_0
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
comment|// key events
name|QTest
operator|::
name|keyEvent
argument_list|(
name|QTest
operator|::
name|Press
argument_list|,
name|window
operator|.
name|data
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_C
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyEvent
argument_list|(
name|QTest
operator|::
name|Release
argument_list|,
name|window
operator|.
name|data
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_C
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyEvent
argument_list|(
name|QTest
operator|::
name|Press
argument_list|,
name|window
operator|.
name|data
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_U
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyEvent
argument_list|(
name|QTest
operator|::
name|Release
argument_list|,
name|window
operator|.
name|data
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_U
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyEvent
argument_list|(
name|QTest
operator|::
name|Press
argument_list|,
name|window
operator|.
name|data
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_T
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyEvent
argument_list|(
name|QTest
operator|::
name|Release
argument_list|,
name|window
operator|.
name|data
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_T
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyEvent
argument_list|(
name|QTest
operator|::
name|Press
argument_list|,
name|window
operator|.
name|data
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_E
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyEvent
argument_list|(
name|QTest
operator|::
name|Release
argument_list|,
name|window
operator|.
name|data
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_E
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
comment|// wheel events
name|QPoint
name|global
init|=
name|window
operator|->
name|mapToGlobal
argument_list|(
name|center
argument_list|)
decl_stmt|;
name|QPoint
name|delta
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleWheelEvent
argument_list|(
name|window
operator|.
name|data
argument_list|()
argument_list|,
name|center
argument_list|,
name|global
argument_list|,
name|delta
argument_list|,
name|delta
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|sendWindowSystemEvents
argument_list|(
name|QEventLoop
operator|::
name|AllEvents
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleWheelEvent
argument_list|(
name|window
operator|.
name|data
argument_list|()
argument_list|,
name|center
argument_list|,
name|global
argument_list|,
name|delta
argument_list|,
name|delta
argument_list|,
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|sendWindowSystemEvents
argument_list|(
name|QEventLoop
operator|::
name|AllEvents
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleWheelEvent
argument_list|(
name|window
operator|.
name|data
argument_list|()
argument_list|,
name|center
argument_list|,
name|global
argument_list|,
name|delta
argument_list|,
name|delta
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|sendWindowSystemEvents
argument_list|(
name|QEventLoop
operator|::
name|AllEvents
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
comment|// touch events
name|QList
argument_list|<
specifier|const
name|QTouchDevice
modifier|*
argument_list|>
name|touchDevices
init|=
name|QTouchDevice
operator|::
name|devices
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|touchDevices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QTouchDevice
modifier|*
name|touchDevice
init|=
cast|const_cast
argument_list|<
name|QTouchDevice
operator|*
argument_list|>
argument_list|(
name|touchDevices
operator|.
name|first
argument_list|()
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|touchEvent
argument_list|(
name|window
operator|.
name|data
argument_list|()
argument_list|,
name|touchDevice
argument_list|)
operator|.
name|press
argument_list|(
literal|1
argument_list|,
name|center
argument_list|)
operator|.
name|release
argument_list|(
literal|1
argument_list|,
name|center
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
expr_stmt|;
block|}
name|window
operator|->
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|palette
name|void
name|tst_QGuiApplication
operator|::
name|palette
parameter_list|()
block|{
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|char
modifier|*
name|argv
index|[]
init|=
block|{
expr|const_cast
operator|<
name|char
operator|*
operator|>
operator|(
literal|"tst_qguiapplication"
operator|)
block|}
decl_stmt|;
name|QGuiApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QSignalSpy
name|signalSpy
argument_list|(
operator|&
name|app
argument_list|,
name|SIGNAL
argument_list|(
name|paletteChanged
argument_list|(
name|QPalette
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QPalette
name|oldPalette
init|=
name|QGuiApplication
operator|::
name|palette
argument_list|()
decl_stmt|;
name|QPalette
name|newPalette
init|=
name|QPalette
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
decl_stmt|;
name|QGuiApplication
operator|::
name|setPalette
argument_list|(
name|newPalette
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|palette
argument_list|()
argument_list|,
name|newPalette
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|signalSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|signalSpy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QVariant
argument_list|(
name|newPalette
argument_list|)
argument_list|)
expr_stmt|;
name|QGuiApplication
operator|::
name|setPalette
argument_list|(
name|oldPalette
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|palette
argument_list|()
argument_list|,
name|oldPalette
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|signalSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|signalSpy
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QVariant
argument_list|(
name|oldPalette
argument_list|)
argument_list|)
expr_stmt|;
name|QGuiApplication
operator|::
name|setPalette
argument_list|(
name|oldPalette
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|palette
argument_list|()
argument_list|,
name|oldPalette
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|signalSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|BlockableWindow
class|class
name|BlockableWindow
super|:
specifier|public
name|QWindow
block|{
name|Q_OBJECT
public|public:
DECL|member|blocked
name|int
name|blocked
decl_stmt|;
DECL|member|leaves
name|int
name|leaves
decl_stmt|;
DECL|member|enters
name|int
name|enters
decl_stmt|;
DECL|function|BlockableWindow
specifier|inline
specifier|explicit
name|BlockableWindow
parameter_list|(
name|QWindow
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QWindow
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|blocked
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|leaves
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|enters
argument_list|(
literal|0
argument_list|)
block|{}
DECL|function|event
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
switch|switch
condition|(
name|e
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|WindowBlocked
case|:
operator|++
name|blocked
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|WindowUnblocked
case|:
operator|--
name|blocked
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|Leave
case|:
name|leaves
operator|++
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|Enter
case|:
name|enters
operator|++
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|QWindow
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
DECL|function|resetCounts
name|void
name|resetCounts
parameter_list|()
block|{
name|leaves
operator|=
literal|0
expr_stmt|;
name|enters
operator|=
literal|0
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|modalWindow
name|void
name|tst_QGuiApplication
operator|::
name|modalWindow
parameter_list|()
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QGuiApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|screenGeometry
init|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
operator|->
name|availableVirtualGeometry
argument_list|()
decl_stmt|;
name|int
name|x
init|=
name|screenGeometry
operator|.
name|left
argument_list|()
operator|+
name|spacing
decl_stmt|;
name|int
name|y
init|=
name|screenGeometry
operator|.
name|top
argument_list|()
operator|+
name|spacing
decl_stmt|;
name|QScopedPointer
argument_list|<
name|BlockableWindow
argument_list|>
name|window1
argument_list|(
operator|new
name|BlockableWindow
argument_list|)
decl_stmt|;
name|window1
operator|->
name|setTitle
argument_list|(
name|QStringLiteral
argument_list|(
literal|"window1"
argument_list|)
argument_list|)
expr_stmt|;
name|window1
operator|->
name|resize
argument_list|(
name|windowSize
argument_list|,
name|windowSize
argument_list|)
expr_stmt|;
name|window1
operator|->
name|setFramePosition
argument_list|(
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|BlockableWindow
modifier|*
name|childWindow1
init|=
operator|new
name|BlockableWindow
argument_list|(
name|window1
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
name|childWindow1
operator|->
name|resize
argument_list|(
name|windowSize
operator|/
literal|2
argument_list|,
name|windowSize
operator|/
literal|2
argument_list|)
expr_stmt|;
name|x
operator|+=
name|spacing
operator|+
name|windowSize
expr_stmt|;
name|QScopedPointer
argument_list|<
name|BlockableWindow
argument_list|>
name|window2
argument_list|(
operator|new
name|BlockableWindow
argument_list|)
decl_stmt|;
name|window2
operator|->
name|setTitle
argument_list|(
name|QStringLiteral
argument_list|(
literal|"window2"
argument_list|)
argument_list|)
expr_stmt|;
name|window2
operator|->
name|setFlags
argument_list|(
name|window2
operator|->
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|Tool
argument_list|)
expr_stmt|;
comment|// QTBUG-32433, don't be fooled by unusual window flags.
name|window2
operator|->
name|resize
argument_list|(
name|windowSize
argument_list|,
name|windowSize
argument_list|)
expr_stmt|;
name|window2
operator|->
name|setFramePosition
argument_list|(
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|+=
name|spacing
operator|+
name|windowSize
expr_stmt|;
name|QScopedPointer
argument_list|<
name|BlockableWindow
argument_list|>
name|windowModalWindow1
argument_list|(
operator|new
name|BlockableWindow
argument_list|)
decl_stmt|;
name|windowModalWindow1
operator|->
name|setTitle
argument_list|(
name|QStringLiteral
argument_list|(
literal|"windowModalWindow1"
argument_list|)
argument_list|)
expr_stmt|;
name|windowModalWindow1
operator|->
name|setTransientParent
argument_list|(
name|window1
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|windowModalWindow1
operator|->
name|setModality
argument_list|(
name|Qt
operator|::
name|WindowModal
argument_list|)
expr_stmt|;
name|windowModalWindow1
operator|->
name|resize
argument_list|(
name|windowSize
argument_list|,
name|windowSize
argument_list|)
expr_stmt|;
name|windowModalWindow1
operator|->
name|setFramePosition
argument_list|(
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|+=
name|spacing
operator|+
name|windowSize
expr_stmt|;
name|QScopedPointer
argument_list|<
name|BlockableWindow
argument_list|>
name|windowModalWindow2
argument_list|(
operator|new
name|BlockableWindow
argument_list|)
decl_stmt|;
name|windowModalWindow2
operator|->
name|setTitle
argument_list|(
name|QStringLiteral
argument_list|(
literal|"windowModalWindow2"
argument_list|)
argument_list|)
expr_stmt|;
name|windowModalWindow2
operator|->
name|setTransientParent
argument_list|(
name|windowModalWindow1
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|windowModalWindow2
operator|->
name|setModality
argument_list|(
name|Qt
operator|::
name|WindowModal
argument_list|)
expr_stmt|;
name|windowModalWindow2
operator|->
name|resize
argument_list|(
name|windowSize
argument_list|,
name|windowSize
argument_list|)
expr_stmt|;
name|windowModalWindow2
operator|->
name|setFramePosition
argument_list|(
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|=
name|screenGeometry
operator|.
name|left
argument_list|()
operator|+
name|spacing
expr_stmt|;
name|y
operator|+=
name|spacing
operator|+
name|windowSize
expr_stmt|;
name|QScopedPointer
argument_list|<
name|BlockableWindow
argument_list|>
name|applicationModalWindow1
argument_list|(
operator|new
name|BlockableWindow
argument_list|)
decl_stmt|;
name|applicationModalWindow1
operator|->
name|setTitle
argument_list|(
name|QStringLiteral
argument_list|(
literal|"applicationModalWindow1"
argument_list|)
argument_list|)
expr_stmt|;
name|applicationModalWindow1
operator|->
name|setModality
argument_list|(
name|Qt
operator|::
name|ApplicationModal
argument_list|)
expr_stmt|;
name|applicationModalWindow1
operator|->
name|resize
argument_list|(
name|windowSize
argument_list|,
name|windowSize
argument_list|)
expr_stmt|;
name|applicationModalWindow1
operator|->
name|setFramePosition
argument_list|(
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
comment|// Get the mouse cursor out of the way since we are manually sending enter/leave.
name|QCursor
operator|::
name|setPos
argument_list|(
name|QPoint
argument_list|(
name|x
operator|+
literal|2
operator|*
name|spacing
operator|+
name|windowSize
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// show the 2 windows, nothing is blocked
name|window1
operator|->
name|show
argument_list|()
expr_stmt|;
name|window2
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
name|window1
operator|.
name|data
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
name|window2
operator|.
name|data
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|modalWindow
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QWindow
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window1
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|childWindow1
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window2
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|windowModalWindow1
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|windowModalWindow2
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|applicationModalWindow1
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// enter mouse in window1
name|QWindowSystemInterface
operator|::
name|handleEnterEvent
argument_list|(
name|window1
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|QGuiApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window1
operator|->
name|enters
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window1
operator|->
name|leaves
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// show applicationModalWindow1, everything is blocked
name|applicationModalWindow1
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|modalWindow
argument_list|()
argument_list|,
name|applicationModalWindow1
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window1
operator|->
name|blocked
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|childWindow1
operator|->
name|blocked
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// QTBUG-32242, blocked status needs to be set on children as well.
name|QCOMPARE
argument_list|(
name|window2
operator|->
name|blocked
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|windowModalWindow1
operator|->
name|blocked
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|windowModalWindow2
operator|->
name|blocked
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|applicationModalWindow1
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// opening modal causes leave for previously entered window, but not others
name|QGuiApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window1
operator|->
name|enters
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window1
operator|->
name|leaves
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window2
operator|->
name|enters
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window2
operator|->
name|leaves
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|applicationModalWindow1
operator|->
name|enters
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|applicationModalWindow1
operator|->
name|leaves
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|window1
operator|->
name|resetCounts
argument_list|()
expr_stmt|;
comment|// Try entering/leaving blocked window2 - no events should reach it
name|QWindowSystemInterface
operator|::
name|handleEnterEvent
argument_list|(
name|window2
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|QGuiApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleLeaveEvent
argument_list|(
name|window2
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|QGuiApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window2
operator|->
name|enters
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window2
operator|->
name|leaves
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// everything is unblocked when applicationModalWindow1 is hidden
name|applicationModalWindow1
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|modalWindow
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QWindow
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window1
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|childWindow1
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// QTBUG-32242, blocked status needs to be set on children as well.
name|QCOMPARE
argument_list|(
name|window2
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|windowModalWindow1
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|windowModalWindow2
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|applicationModalWindow1
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Enter window2 - should not be blocked
name|QWindowSystemInterface
operator|::
name|handleEnterEvent
argument_list|(
name|window2
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|QGuiApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window2
operator|->
name|enters
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window2
operator|->
name|leaves
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// show the windowModalWindow1, only window1 is blocked
name|windowModalWindow1
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|modalWindow
argument_list|()
argument_list|,
name|windowModalWindow1
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window1
operator|->
name|blocked
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window2
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|windowModalWindow1
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|windowModalWindow2
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|applicationModalWindow1
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// opening window modal window doesn't cause leave for unblocked window
name|QGuiApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window1
operator|->
name|enters
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window1
operator|->
name|leaves
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window2
operator|->
name|enters
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window2
operator|->
name|leaves
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|windowModalWindow1
operator|->
name|enters
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|windowModalWindow1
operator|->
name|leaves
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// show the windowModalWindow2, windowModalWindow1 is blocked as well
name|windowModalWindow2
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|modalWindow
argument_list|()
argument_list|,
name|windowModalWindow2
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window1
operator|->
name|blocked
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window2
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|windowModalWindow1
operator|->
name|blocked
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|windowModalWindow2
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|applicationModalWindow1
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// hide windowModalWindow1, nothing is unblocked
name|windowModalWindow1
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|modalWindow
argument_list|()
argument_list|,
name|windowModalWindow2
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window1
operator|->
name|blocked
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window2
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|windowModalWindow1
operator|->
name|blocked
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|windowModalWindow2
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|applicationModalWindow1
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// hide windowModalWindow2, windowModalWindow1 and window1 are unblocked
name|windowModalWindow2
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|modalWindow
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QWindow
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window1
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window2
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|windowModalWindow1
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|windowModalWindow2
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|applicationModalWindow1
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// show windowModalWindow1 again, window1 is blocked
name|windowModalWindow1
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|modalWindow
argument_list|()
argument_list|,
name|windowModalWindow1
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window1
operator|->
name|blocked
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window2
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|windowModalWindow1
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|windowModalWindow2
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|applicationModalWindow1
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// show windowModalWindow2 again, windowModalWindow1 is also blocked
name|windowModalWindow2
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|modalWindow
argument_list|()
argument_list|,
name|windowModalWindow2
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window1
operator|->
name|blocked
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window2
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|windowModalWindow1
operator|->
name|blocked
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|windowModalWindow2
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|applicationModalWindow1
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// show applicationModalWindow1, everything is blocked
name|applicationModalWindow1
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|modalWindow
argument_list|()
argument_list|,
name|applicationModalWindow1
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window1
operator|->
name|blocked
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window2
operator|->
name|blocked
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|windowModalWindow1
operator|->
name|blocked
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|windowModalWindow2
operator|->
name|blocked
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|applicationModalWindow1
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// window2 gets finally the leave
name|QGuiApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window1
operator|->
name|enters
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window1
operator|->
name|leaves
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window2
operator|->
name|enters
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window2
operator|->
name|leaves
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|windowModalWindow1
operator|->
name|enters
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|windowModalWindow1
operator|->
name|leaves
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|applicationModalWindow1
operator|->
name|enters
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|applicationModalWindow1
operator|->
name|leaves
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// hide applicationModalWindow1, windowModalWindow1 and window1 are blocked
name|applicationModalWindow1
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|modalWindow
argument_list|()
argument_list|,
name|windowModalWindow2
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window1
operator|->
name|blocked
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window2
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|windowModalWindow1
operator|->
name|blocked
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|windowModalWindow2
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|applicationModalWindow1
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// hide windowModalWindow2, window1 is blocked
name|windowModalWindow2
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|modalWindow
argument_list|()
argument_list|,
name|windowModalWindow1
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window1
operator|->
name|blocked
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window2
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|windowModalWindow1
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|windowModalWindow2
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|applicationModalWindow1
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// hide windowModalWindow1, everything is unblocked
name|windowModalWindow1
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|modalWindow
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QWindow
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window1
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window2
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|windowModalWindow1
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|windowModalWindow2
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|applicationModalWindow1
operator|->
name|blocked
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|window2
operator|->
name|hide
argument_list|()
expr_stmt|;
name|window1
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|quitOnLastWindowClosed
name|void
name|tst_QGuiApplication
operator|::
name|quitOnLastWindowClosed
parameter_list|()
block|{
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QGuiApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|screenGeometry
init|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
operator|->
name|availableVirtualGeometry
argument_list|()
decl_stmt|;
name|QTimer
name|timer
decl_stmt|;
name|timer
operator|.
name|setInterval
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|app
argument_list|,
name|SIGNAL
argument_list|(
name|aboutToQuit
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spy2
argument_list|(
operator|&
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QWindow
name|mainWindow
decl_stmt|;
name|mainWindow
operator|.
name|setTitle
argument_list|(
name|QStringLiteral
argument_list|(
literal|"quitOnLastWindowClosedMainWindow"
argument_list|)
argument_list|)
expr_stmt|;
name|mainWindow
operator|.
name|resize
argument_list|(
name|windowSize
argument_list|,
name|windowSize
argument_list|)
expr_stmt|;
name|mainWindow
operator|.
name|setFramePosition
argument_list|(
name|QPoint
argument_list|(
name|screenGeometry
operator|.
name|left
argument_list|()
operator|+
name|spacing
argument_list|,
name|screenGeometry
operator|.
name|top
argument_list|()
operator|+
name|spacing
argument_list|)
argument_list|)
expr_stmt|;
name|QWindow
name|dialog
decl_stmt|;
name|dialog
operator|.
name|setTransientParent
argument_list|(
operator|&
name|mainWindow
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setTitle
argument_list|(
name|QStringLiteral
argument_list|(
literal|"quitOnLastWindowClosedDialog"
argument_list|)
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|resize
argument_list|(
name|windowSize
argument_list|,
name|windowSize
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setFramePosition
argument_list|(
name|QPoint
argument_list|(
name|screenGeometry
operator|.
name|left
argument_list|()
operator|+
literal|2
operator|*
name|spacing
operator|+
name|windowSize
argument_list|,
name|screenGeometry
operator|.
name|top
argument_list|()
operator|+
name|spacing
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|app
operator|.
name|quitOnLastWindowClosed
argument_list|()
argument_list|)
expr_stmt|;
name|mainWindow
operator|.
name|show
argument_list|()
expr_stmt|;
name|dialog
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|dialog
argument_list|)
argument_list|)
expr_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|1000
argument_list|,
operator|&
name|mainWindow
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// This should quit the application
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|2000
argument_list|,
operator|&
name|app
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// This makes sure we quit even if it didn't
name|app
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy2
operator|.
name|count
argument_list|()
operator|<
literal|15
argument_list|)
expr_stmt|;
comment|// Should be around 10 if closing caused the quit
block|}
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QGuiApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|screenGeometry
init|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
operator|->
name|availableVirtualGeometry
argument_list|()
decl_stmt|;
name|QTimer
name|timer
decl_stmt|;
name|timer
operator|.
name|setInterval
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|app
argument_list|,
name|SIGNAL
argument_list|(
name|aboutToQuit
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spy2
argument_list|(
operator|&
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QWindow
name|mainWindow
decl_stmt|;
name|mainWindow
operator|.
name|setTitle
argument_list|(
name|QStringLiteral
argument_list|(
literal|"quitOnLastWindowClosedMainWindow"
argument_list|)
argument_list|)
expr_stmt|;
name|mainWindow
operator|.
name|resize
argument_list|(
name|windowSize
argument_list|,
name|windowSize
argument_list|)
expr_stmt|;
name|mainWindow
operator|.
name|setFramePosition
argument_list|(
name|QPoint
argument_list|(
name|screenGeometry
operator|.
name|left
argument_list|()
operator|+
name|spacing
argument_list|,
name|screenGeometry
operator|.
name|top
argument_list|()
operator|+
name|spacing
argument_list|)
argument_list|)
expr_stmt|;
name|QWindow
name|dialog
decl_stmt|;
name|dialog
operator|.
name|setTitle
argument_list|(
name|QStringLiteral
argument_list|(
literal|"quitOnLastWindowClosedDialog"
argument_list|)
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|resize
argument_list|(
name|windowSize
argument_list|,
name|windowSize
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setFramePosition
argument_list|(
name|QPoint
argument_list|(
name|screenGeometry
operator|.
name|left
argument_list|()
operator|+
literal|2
operator|*
name|spacing
operator|+
name|windowSize
argument_list|,
name|screenGeometry
operator|.
name|top
argument_list|()
operator|+
name|spacing
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|dialog
operator|.
name|transientParent
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|app
operator|.
name|quitOnLastWindowClosed
argument_list|()
argument_list|)
expr_stmt|;
name|mainWindow
operator|.
name|show
argument_list|()
expr_stmt|;
name|dialog
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|dialog
argument_list|)
argument_list|)
expr_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|1000
argument_list|,
operator|&
name|mainWindow
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// This should not quit the application
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|2000
argument_list|,
operator|&
name|app
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|app
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy2
operator|.
name|count
argument_list|()
operator|>
literal|15
argument_list|)
expr_stmt|;
comment|// Should be around 20 if closing did not cause the quit
block|}
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QGuiApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|app
operator|.
name|setQuitOnLastWindowClosed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QTimer
name|timer
decl_stmt|;
name|timer
operator|.
name|setInterval
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|timer
operator|.
name|setSingleShot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
operator|&
name|app
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|app
argument_list|,
name|SIGNAL
argument_list|(
name|lastWindowClosed
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spy2
argument_list|(
operator|&
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QPointer
argument_list|<
name|QWindow
argument_list|>
name|mainWindow
init|=
operator|new
name|QWindow
decl_stmt|;
name|mainWindow
operator|->
name|show
argument_list|()
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|1000
argument_list|,
name|mainWindow
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// This should not quit the application
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|app
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy2
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// quit timer fired
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// lastWindowClosed emitted
name|app
operator|.
name|setQuitOnLastWindowClosed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// restore underlying static to default value
block|}
block|}
end_function
begin_decl_stmt
DECL|variable|testOrientationToSend
specifier|static
name|Qt
operator|::
name|ScreenOrientation
name|testOrientationToSend
init|=
name|Qt
operator|::
name|PrimaryOrientation
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|TestPlugin
class|class
name|TestPlugin
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|TestPlugin
name|TestPlugin
parameter_list|()
block|{
name|QScreen
modifier|*
name|screen
init|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
decl_stmt|;
comment|// Make sure the orientation we want to send doesn't get filtered out.
name|screen
operator|->
name|setOrientationUpdateMask
argument_list|(
name|screen
operator|->
name|orientationUpdateMask
argument_list|()
operator||
name|testOrientationToSend
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleScreenOrientationChange
argument_list|(
name|screen
argument_list|,
name|testOrientationToSend
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|TestPluginFactory
class|class
name|TestPluginFactory
super|:
specifier|public
name|QGenericPlugin
block|{
name|Q_OBJECT
name|Q_PLUGIN_METADATA
argument_list|(
name|IID
literal|"org.qt-project.Qt.QGenericPluginFactoryInterface"
name|FILE
literal|"testplugin.json"
argument_list|)
decl|public
range|:
DECL|function|create
name|QObject
operator|*
name|create
argument_list|(
argument|const QString&key
argument_list|,
argument|const QString&
argument_list|)
block|{
if|if
condition|(
name|key
operator|==
literal|"testplugin"
condition|)
return|return
operator|new
name|TestPlugin
return|;
return|return
literal|0
return|;
block|}
end_class
begin_class
DECL|class|TestEventReceiver
unit|};
class|class
name|TestEventReceiver
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|member|customEvents
name|int
name|customEvents
decl_stmt|;
DECL|function|TestEventReceiver
name|TestEventReceiver
parameter_list|()
member_init_list|:
name|customEvents
argument_list|(
literal|0
argument_list|)
block|{}
DECL|function|customEvent
specifier|virtual
name|void
name|customEvent
parameter_list|(
name|QEvent
modifier|*
parameter_list|)
block|{
name|customEvents
operator|++
expr_stmt|;
block|}
block|}
class|;
end_class
begin_include
include|#
directive|include
file|"tst_qguiapplication.moc"
end_include
begin_function
DECL|function|genericPluginsAndWindowSystemEvents
name|void
name|tst_QGuiApplication
operator|::
name|genericPluginsAndWindowSystemEvents
parameter_list|()
block|{
name|testOrientationToSend
operator|=
name|Qt
operator|::
name|InvertedLandscapeOrientation
expr_stmt|;
name|TestEventReceiver
name|testReceiver
decl_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|testReceiver
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|User
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testReceiver
operator|.
name|customEvents
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QStaticPlugin
name|testPluginInfo
decl_stmt|;
name|testPluginInfo
operator|.
name|instance
operator|=
name|qt_plugin_instance
expr_stmt|;
name|testPluginInfo
operator|.
name|rawMetaData
operator|=
name|qt_plugin_query_metadata
expr_stmt|;
name|qRegisterStaticPluginFunction
argument_list|(
name|testPluginInfo
argument_list|)
expr_stmt|;
name|int
name|argc
init|=
literal|3
decl_stmt|;
name|char
modifier|*
name|argv
index|[]
init|=
block|{
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|QTest
operator|::
name|currentAppName
argument_list|()
argument_list|)
block|,
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
literal|"-plugin"
argument_list|)
block|,
expr|const_cast
operator|<
name|char
operator|*
operator|>
operator|(
literal|"testplugin"
operator|)
block|}
decl_stmt|;
name|QGuiApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
operator|->
name|orientation
argument_list|()
argument_list|,
name|testOrientationToSend
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testReceiver
operator|.
name|customEvents
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|sendPostedEvents
argument_list|(
operator|&
name|testReceiver
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testReceiver
operator|.
name|customEvents
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|Qt::LayoutDirection
argument_list|)
end_macro
begin_function
DECL|function|layoutDirection
name|void
name|tst_QGuiApplication
operator|::
name|layoutDirection
parameter_list|()
block|{
name|qRegisterMetaType
argument_list|<
name|Qt
operator|::
name|LayoutDirection
argument_list|>
argument_list|()
expr_stmt|;
name|Qt
operator|::
name|LayoutDirection
name|oldDirection
init|=
name|QGuiApplication
operator|::
name|layoutDirection
argument_list|()
decl_stmt|;
name|Qt
operator|::
name|LayoutDirection
name|newDirection
init|=
name|oldDirection
operator|==
name|Qt
operator|::
name|LeftToRight
condition|?
name|Qt
operator|::
name|RightToLeft
else|:
name|Qt
operator|::
name|LeftToRight
decl_stmt|;
name|QGuiApplication
operator|::
name|setLayoutDirection
argument_list|(
name|newDirection
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|layoutDirection
argument_list|()
argument_list|,
name|newDirection
argument_list|)
expr_stmt|;
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|char
modifier|*
name|argv
index|[]
init|=
block|{
expr|const_cast
operator|<
name|char
operator|*
operator|>
operator|(
literal|"tst_qguiapplication"
operator|)
block|}
decl_stmt|;
name|QGuiApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QSignalSpy
name|signalSpy
argument_list|(
operator|&
name|app
argument_list|,
name|SIGNAL
argument_list|(
name|layoutDirectionChanged
argument_list|(
name|Qt
operator|::
name|LayoutDirection
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QGuiApplication
operator|::
name|setLayoutDirection
argument_list|(
name|oldDirection
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|layoutDirection
argument_list|()
argument_list|,
name|oldDirection
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|signalSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|signalSpy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|oldDirection
argument_list|)
argument_list|)
expr_stmt|;
name|QGuiApplication
operator|::
name|setLayoutDirection
argument_list|(
name|oldDirection
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|layoutDirection
argument_list|()
argument_list|,
name|oldDirection
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|signalSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|globalShareContext
name|void
name|tst_QGuiApplication
operator|::
name|globalShareContext
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_OPENGL
comment|// Test that there is a global share context when requested.
name|QCoreApplication
operator|::
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_ShareOpenGLContexts
argument_list|)
expr_stmt|;
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|char
modifier|*
name|argv
index|[]
init|=
block|{
expr|const_cast
operator|<
name|char
operator|*
operator|>
operator|(
literal|"tst_qguiapplication"
operator|)
block|}
decl_stmt|;
name|QScopedPointer
argument_list|<
name|QGuiApplication
argument_list|>
name|app
argument_list|(
operator|new
name|QGuiApplication
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
argument_list|)
decl_stmt|;
name|QOpenGLContext
modifier|*
name|ctx
init|=
name|qt_gl_global_share_context
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|app
operator|.
name|reset
argument_list|()
expr_stmt|;
name|ctx
operator|=
name|qt_gl_global_share_context
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ctx
argument_list|)
expr_stmt|;
comment|// Test that there is no global share context by default.
name|QCoreApplication
operator|::
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_ShareOpenGLContexts
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|app
operator|.
name|reset
argument_list|(
operator|new
name|QGuiApplication
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
argument_list|)
expr_stmt|;
name|ctx
operator|=
name|qt_gl_global_share_context
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ctx
argument_list|)
expr_stmt|;
else|#
directive|else
name|QSKIP
argument_list|(
literal|"No OpenGL support"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|testSetPaletteAttribute
name|void
name|tst_QGuiApplication
operator|::
name|testSetPaletteAttribute
parameter_list|()
block|{
name|QCoreApplication
operator|::
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_SetPalette
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|char
modifier|*
name|argv
index|[]
init|=
block|{
expr|const_cast
operator|<
name|char
operator|*
operator|>
operator|(
literal|"tst_qguiapplication"
operator|)
block|}
decl_stmt|;
name|QGuiApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QCoreApplication
operator|::
name|testAttribute
argument_list|(
name|Qt
operator|::
name|AA_SetPalette
argument_list|)
argument_list|)
expr_stmt|;
name|QPalette
name|palette
decl_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Foreground
argument_list|,
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|QGuiApplication
operator|::
name|setPalette
argument_list|(
name|palette
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QCoreApplication
operator|::
name|testAttribute
argument_list|(
name|Qt
operator|::
name|AA_SetPalette
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test that static functions do not crash if there is no application instance.
end_comment
begin_function
DECL|function|staticFunctions
name|void
name|tst_QGuiApplication
operator|::
name|staticFunctions
parameter_list|()
block|{
name|QGuiApplication
operator|::
name|setApplicationDisplayName
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QGuiApplication
operator|::
name|applicationDisplayName
argument_list|()
expr_stmt|;
name|QGuiApplication
operator|::
name|allWindows
argument_list|()
expr_stmt|;
name|QGuiApplication
operator|::
name|topLevelWindows
argument_list|()
expr_stmt|;
name|QGuiApplication
operator|::
name|topLevelAt
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QGuiApplication
operator|::
name|setWindowIcon
argument_list|(
name|QIcon
argument_list|()
argument_list|)
expr_stmt|;
name|QGuiApplication
operator|::
name|windowIcon
argument_list|()
expr_stmt|;
name|QGuiApplication
operator|::
name|platformName
argument_list|()
expr_stmt|;
name|QGuiApplication
operator|::
name|modalWindow
argument_list|()
expr_stmt|;
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
expr_stmt|;
name|QGuiApplication
operator|::
name|focusObject
argument_list|()
expr_stmt|;
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
expr_stmt|;
name|QGuiApplication
operator|::
name|screens
argument_list|()
expr_stmt|;
name|QGuiApplication
operator|::
name|overrideCursor
argument_list|()
expr_stmt|;
name|QGuiApplication
operator|::
name|setOverrideCursor
argument_list|(
name|QCursor
argument_list|()
argument_list|)
expr_stmt|;
name|QGuiApplication
operator|::
name|changeOverrideCursor
argument_list|(
name|QCursor
argument_list|()
argument_list|)
expr_stmt|;
name|QGuiApplication
operator|::
name|restoreOverrideCursor
argument_list|()
expr_stmt|;
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
expr_stmt|;
name|QGuiApplication
operator|::
name|queryKeyboardModifiers
argument_list|()
expr_stmt|;
name|QGuiApplication
operator|::
name|mouseButtons
argument_list|()
expr_stmt|;
name|QGuiApplication
operator|::
name|setLayoutDirection
argument_list|(
name|Qt
operator|::
name|LeftToRight
argument_list|)
expr_stmt|;
name|QGuiApplication
operator|::
name|layoutDirection
argument_list|()
expr_stmt|;
name|QGuiApplication
operator|::
name|styleHints
argument_list|()
expr_stmt|;
name|QGuiApplication
operator|::
name|setDesktopSettingsAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QGuiApplication
operator|::
name|desktopSettingsAware
argument_list|()
expr_stmt|;
name|QGuiApplication
operator|::
name|inputMethod
argument_list|()
expr_stmt|;
name|QGuiApplication
operator|::
name|platformNativeInterface
argument_list|()
expr_stmt|;
name|QGuiApplication
operator|::
name|platformFunction
argument_list|(
name|QByteArrayLiteral
argument_list|(
literal|"bla"
argument_list|)
argument_list|)
expr_stmt|;
name|QGuiApplication
operator|::
name|setQuitOnLastWindowClosed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QGuiApplication
operator|::
name|quitOnLastWindowClosed
argument_list|()
expr_stmt|;
name|QGuiApplication
operator|::
name|applicationState
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|settableStyleHints_data
name|void
name|tst_QGuiApplication
operator|::
name|settableStyleHints_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"appInstance"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"app"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-app"
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|settableStyleHints
name|void
name|tst_QGuiApplication
operator|::
name|settableStyleHints
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|appInstance
argument_list|)
expr_stmt|;
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QScopedPointer
argument_list|<
name|QGuiApplication
argument_list|>
name|app
decl_stmt|;
if|if
condition|(
name|appInstance
condition|)
name|app
operator|.
name|reset
argument_list|(
operator|new
name|QGuiApplication
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|int
name|keyboardInputInterval
init|=
literal|555
decl_stmt|;
name|QGuiApplication
operator|::
name|styleHints
argument_list|()
operator|->
name|setKeyboardInputInterval
argument_list|(
name|keyboardInputInterval
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|styleHints
argument_list|()
operator|->
name|keyboardInputInterval
argument_list|()
argument_list|,
name|keyboardInputInterval
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QGuiApplication
argument_list|)
end_macro
end_unit
