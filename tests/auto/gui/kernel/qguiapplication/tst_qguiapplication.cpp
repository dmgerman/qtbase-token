begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QtGui/QWindow>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_class
DECL|class|tst_QGuiApplication
class|class
name|tst_QGuiApplication
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|focusObject
parameter_list|()
function_decl|;
name|void
name|allWindows
parameter_list|()
function_decl|;
name|void
name|topLevelWindows
parameter_list|()
function_decl|;
name|void
name|abortQuitOnShow
parameter_list|()
function_decl|;
name|void
name|changeFocusWindow
parameter_list|()
function_decl|;
name|void
name|keyboardModifiers
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_class
DECL|class|DummyWindow
class|class
name|DummyWindow
super|:
specifier|public
name|QWindow
block|{
public|public:
DECL|function|DummyWindow
name|DummyWindow
parameter_list|()
member_init_list|:
name|m_focusObject
argument_list|(
literal|0
argument_list|)
block|{}
DECL|function|focusObject
specifier|virtual
name|QObject
modifier|*
name|focusObject
parameter_list|()
specifier|const
block|{
return|return
name|m_focusObject
return|;
block|}
DECL|function|setFocusObject
name|void
name|setFocusObject
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|)
block|{
name|m_focusObject
operator|=
name|object
expr_stmt|;
emit|emit
name|focusObjectChanged
argument_list|(
name|object
argument_list|)
emit|;
block|}
DECL|member|m_focusObject
name|QObject
modifier|*
name|m_focusObject
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|focusObject
name|void
name|tst_QGuiApplication
operator|::
name|focusObject
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|QSKIP
argument_list|(
literal|"This test fails intermittently, and at different locations. See QTBUG-24322"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QGuiApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QObject
name|obj1
decl_stmt|,
name|obj2
decl_stmt|,
name|obj3
decl_stmt|;
name|DummyWindow
name|window1
decl_stmt|;
name|DummyWindow
name|window2
decl_stmt|;
name|window1
operator|.
name|show
argument_list|()
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|app
argument_list|,
name|SIGNAL
argument_list|(
name|focusObjectChanged
argument_list|(
name|QObject
operator|*
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// verify active window focus propagates to qguiapplication
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
operator|&
name|window1
argument_list|)
expr_stmt|;
name|window1
operator|.
name|requestActivateWindow
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|app
operator|.
name|focusWindow
argument_list|()
argument_list|,
operator|&
name|window1
argument_list|)
expr_stmt|;
name|window1
operator|.
name|setFocusObject
argument_list|(
operator|&
name|obj1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|focusObject
argument_list|()
argument_list|,
operator|&
name|obj1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|window1
operator|.
name|setFocusObject
argument_list|(
operator|&
name|obj2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|focusObject
argument_list|()
argument_list|,
operator|&
name|obj2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|window2
operator|.
name|setFocusObject
argument_list|(
operator|&
name|obj3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|focusObject
argument_list|()
argument_list|,
operator|&
name|obj2
argument_list|)
expr_stmt|;
comment|// not yet changed
name|window2
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
operator|&
name|window2
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|app
operator|.
name|focusWindow
argument_list|()
argument_list|,
operator|&
name|window2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|focusObject
argument_list|()
argument_list|,
operator|&
name|obj3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// focus change on unfocused window does not show
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|window1
operator|.
name|setFocusObject
argument_list|(
operator|&
name|obj1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|focusObject
argument_list|()
argument_list|,
operator|&
name|obj3
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|allWindows
name|void
name|tst_QGuiApplication
operator|::
name|allWindows
parameter_list|()
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QGuiApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QWindow
modifier|*
name|window1
init|=
operator|new
name|QWindow
decl_stmt|;
name|QWindow
modifier|*
name|window2
init|=
operator|new
name|QWindow
argument_list|(
name|window1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|app
operator|.
name|allWindows
argument_list|()
operator|.
name|contains
argument_list|(
name|window1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|app
operator|.
name|allWindows
argument_list|()
operator|.
name|contains
argument_list|(
name|window2
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|allWindows
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
operator|delete
name|window1
expr_stmt|;
name|window1
operator|=
literal|0
expr_stmt|;
name|window2
operator|=
literal|0
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|app
operator|.
name|allWindows
argument_list|()
operator|.
name|contains
argument_list|(
name|window2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|app
operator|.
name|allWindows
argument_list|()
operator|.
name|contains
argument_list|(
name|window1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|allWindows
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|topLevelWindows
name|void
name|tst_QGuiApplication
operator|::
name|topLevelWindows
parameter_list|()
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QGuiApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QWindow
modifier|*
name|window1
init|=
operator|new
name|QWindow
decl_stmt|;
name|QWindow
modifier|*
name|window2
init|=
operator|new
name|QWindow
argument_list|(
name|window1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|app
operator|.
name|topLevelWindows
argument_list|()
operator|.
name|contains
argument_list|(
name|window1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|app
operator|.
name|topLevelWindows
argument_list|()
operator|.
name|contains
argument_list|(
name|window2
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|topLevelWindows
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
operator|delete
name|window1
expr_stmt|;
name|window1
operator|=
literal|0
expr_stmt|;
name|window2
operator|=
literal|0
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|app
operator|.
name|topLevelWindows
argument_list|()
operator|.
name|contains
argument_list|(
name|window2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|app
operator|.
name|topLevelWindows
argument_list|()
operator|.
name|contains
argument_list|(
name|window1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|topLevelWindows
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|ShowCloseShowWindow
class|class
name|ShowCloseShowWindow
super|:
specifier|public
name|QWindow
block|{
name|Q_OBJECT
public|public:
DECL|function|ShowCloseShowWindow
name|ShowCloseShowWindow
parameter_list|(
name|bool
name|showAgain
parameter_list|,
name|QWindow
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QWindow
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|showAgain
argument_list|(
name|showAgain
argument_list|)
block|{
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|0
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|doClose
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|500
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|exitApp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
private|private
name|slots
private|:
DECL|function|doClose
name|void
name|doClose
parameter_list|()
block|{
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|showAgain
condition|)
name|show
argument_list|()
expr_stmt|;
block|}
DECL|function|exitApp
name|void
name|exitApp
parameter_list|()
block|{
name|qApp
operator|->
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|member|showAgain
name|bool
name|showAgain
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|abortQuitOnShow
name|void
name|tst_QGuiApplication
operator|::
name|abortQuitOnShow
parameter_list|()
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QGuiApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QWindow
modifier|*
name|window1
init|=
operator|new
name|ShowCloseShowWindow
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|window1
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|exec
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QWindow
modifier|*
name|window2
init|=
operator|new
name|ShowCloseShowWindow
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|window2
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|exec
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|FocusChangeWindow
class|class
name|FocusChangeWindow
super|:
specifier|public
name|QWindow
block|{
protected|protected:
DECL|function|event
specifier|virtual
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
name|ev
parameter_list|)
block|{
if|if
condition|(
name|ev
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|FocusAboutToChange
condition|)
name|windowDuringFocusAboutToChange
operator|=
name|qGuiApp
operator|->
name|focusWindow
argument_list|()
expr_stmt|;
return|return
name|QWindow
operator|::
name|event
argument_list|(
name|ev
argument_list|)
return|;
block|}
DECL|function|focusOutEvent
specifier|virtual
name|void
name|focusOutEvent
parameter_list|(
name|QFocusEvent
modifier|*
parameter_list|)
block|{
name|windowDuringFocusOut
operator|=
name|qGuiApp
operator|->
name|focusWindow
argument_list|()
expr_stmt|;
block|}
public|public:
DECL|function|FocusChangeWindow
name|FocusChangeWindow
parameter_list|()
member_init_list|:
name|QWindow
argument_list|()
member_init_list|,
name|windowDuringFocusAboutToChange
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|windowDuringFocusOut
argument_list|(
literal|0
argument_list|)
block|{}
DECL|member|windowDuringFocusAboutToChange
name|QWindow
modifier|*
name|windowDuringFocusAboutToChange
decl_stmt|;
DECL|member|windowDuringFocusOut
name|QWindow
modifier|*
name|windowDuringFocusOut
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|changeFocusWindow
name|void
name|tst_QGuiApplication
operator|::
name|changeFocusWindow
parameter_list|()
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QGuiApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// focus is changed between FocusAboutToChange and FocusChanged
name|FocusChangeWindow
name|window1
decl_stmt|,
name|window2
decl_stmt|;
name|window1
operator|.
name|show
argument_list|()
expr_stmt|;
name|window2
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
operator|&
name|window1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
operator|&
name|window2
argument_list|)
expr_stmt|;
name|window1
operator|.
name|requestActivateWindow
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|app
operator|.
name|focusWindow
argument_list|()
argument_list|,
operator|&
name|window1
argument_list|)
expr_stmt|;
name|window2
operator|.
name|requestActivateWindow
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|app
operator|.
name|focusWindow
argument_list|()
argument_list|,
operator|&
name|window2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window1
operator|.
name|windowDuringFocusAboutToChange
argument_list|,
operator|&
name|window1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window1
operator|.
name|windowDuringFocusOut
argument_list|,
operator|&
name|window2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|keyboardModifiers
name|void
name|tst_QGuiApplication
operator|::
name|keyboardModifiers
parameter_list|()
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QGuiApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QWindow
modifier|*
name|window
init|=
operator|new
name|QWindow
decl_stmt|;
name|window
operator|->
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
expr_stmt|;
comment|// mouse events
name|QPoint
name|center
init|=
name|window
operator|->
name|geometry
argument_list|()
operator|.
name|center
argument_list|()
decl_stmt|;
name|QTest
operator|::
name|mouseEvent
argument_list|(
name|QTest
operator|::
name|MousePress
argument_list|,
name|window
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|,
name|center
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseEvent
argument_list|(
name|QTest
operator|::
name|MouseRelease
argument_list|,
name|window
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|,
name|center
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseEvent
argument_list|(
name|QTest
operator|::
name|MousePress
argument_list|,
name|window
argument_list|,
name|Qt
operator|::
name|RightButton
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|,
name|center
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseEvent
argument_list|(
name|QTest
operator|::
name|MouseRelease
argument_list|,
name|window
argument_list|,
name|Qt
operator|::
name|RightButton
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|,
name|center
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
comment|// shortcut events
name|QWindowSystemInterface
operator|::
name|tryHandleSynchronousShortcutEvent
argument_list|(
name|window
argument_list|,
name|Qt
operator|::
name|Key_5
argument_list|,
name|Qt
operator|::
name|MetaModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|MetaModifier
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|tryHandleSynchronousShortcutEvent
argument_list|(
name|window
argument_list|,
name|Qt
operator|::
name|Key_Period
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|tryHandleSynchronousShortcutEvent
argument_list|(
name|window
argument_list|,
name|Qt
operator|::
name|Key_0
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
comment|// key events
name|QTest
operator|::
name|keyEvent
argument_list|(
name|QTest
operator|::
name|Press
argument_list|,
name|window
argument_list|,
name|Qt
operator|::
name|Key_C
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyEvent
argument_list|(
name|QTest
operator|::
name|Release
argument_list|,
name|window
argument_list|,
name|Qt
operator|::
name|Key_C
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyEvent
argument_list|(
name|QTest
operator|::
name|Press
argument_list|,
name|window
argument_list|,
name|Qt
operator|::
name|Key_U
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyEvent
argument_list|(
name|QTest
operator|::
name|Release
argument_list|,
name|window
argument_list|,
name|Qt
operator|::
name|Key_U
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyEvent
argument_list|(
name|QTest
operator|::
name|Press
argument_list|,
name|window
argument_list|,
name|Qt
operator|::
name|Key_T
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyEvent
argument_list|(
name|QTest
operator|::
name|Release
argument_list|,
name|window
argument_list|,
name|Qt
operator|::
name|Key_T
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyEvent
argument_list|(
name|QTest
operator|::
name|Press
argument_list|,
name|window
argument_list|,
name|Qt
operator|::
name|Key_E
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyEvent
argument_list|(
name|QTest
operator|::
name|Release
argument_list|,
name|window
argument_list|,
name|Qt
operator|::
name|Key_E
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
comment|// wheel events
name|QPoint
name|global
init|=
name|window
operator|->
name|mapToGlobal
argument_list|(
name|center
argument_list|)
decl_stmt|;
name|QPoint
name|delta
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleWheelEvent
argument_list|(
name|window
argument_list|,
name|center
argument_list|,
name|global
argument_list|,
name|delta
argument_list|,
name|delta
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|sendWindowSystemEvents
argument_list|(
name|app
operator|.
name|eventDispatcher
argument_list|()
argument_list|,
name|QEventLoop
operator|::
name|AllEvents
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleWheelEvent
argument_list|(
name|window
argument_list|,
name|center
argument_list|,
name|global
argument_list|,
name|delta
argument_list|,
name|delta
argument_list|,
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|sendWindowSystemEvents
argument_list|(
name|app
operator|.
name|eventDispatcher
argument_list|()
argument_list|,
name|QEventLoop
operator|::
name|AllEvents
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleWheelEvent
argument_list|(
name|window
argument_list|,
name|center
argument_list|,
name|global
argument_list|,
name|delta
argument_list|,
name|delta
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|sendWindowSystemEvents
argument_list|(
name|app
operator|.
name|eventDispatcher
argument_list|()
argument_list|,
name|QEventLoop
operator|::
name|AllEvents
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
comment|// touch events
name|QList
argument_list|<
specifier|const
name|QTouchDevice
modifier|*
argument_list|>
name|touchDevices
init|=
name|QTouchDevice
operator|::
name|devices
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|touchDevices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QTouchDevice
modifier|*
name|touchDevice
init|=
cast|const_cast
argument_list|<
name|QTouchDevice
operator|*
argument_list|>
argument_list|(
name|touchDevices
operator|.
name|first
argument_list|()
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|touchEvent
argument_list|(
name|window
argument_list|,
name|touchDevice
argument_list|)
operator|.
name|press
argument_list|(
literal|1
argument_list|,
name|center
argument_list|)
operator|.
name|release
argument_list|(
literal|1
argument_list|,
name|center
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
expr_stmt|;
block|}
name|window
operator|->
name|close
argument_list|()
expr_stmt|;
operator|delete
name|window
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QGuiApplication
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qguiapplication.moc"
end_include
end_unit
