begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qlineedit.h>
end_include
begin_include
include|#
directive|include
file|<qlabel.h>
end_include
begin_include
include|#
directive|include
file|<qdialog.h>
end_include
begin_include
include|#
directive|include
file|<qevent.h>
end_include
begin_include
include|#
directive|include
file|<qwidget.h>
end_include
begin_class
DECL|class|MouseEventWidget
class|class
name|MouseEventWidget
super|:
specifier|public
name|QWidget
block|{
public|public:
DECL|function|MouseEventWidget
name|MouseEventWidget
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
block|{
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|StrongFocus
argument_list|)
expr_stmt|;
block|}
DECL|member|mousePressEventRecieved
name|bool
name|mousePressEventRecieved
decl_stmt|;
DECL|member|mouseReleaseEventRecieved
name|bool
name|mouseReleaseEventRecieved
decl_stmt|;
DECL|member|mousePressButton
name|int
name|mousePressButton
decl_stmt|;
DECL|member|mousePressButtons
name|int
name|mousePressButtons
decl_stmt|;
DECL|member|mousePressModifiers
name|int
name|mousePressModifiers
decl_stmt|;
DECL|member|mouseReleaseButton
name|int
name|mouseReleaseButton
decl_stmt|;
DECL|member|mouseReleaseButtons
name|int
name|mouseReleaseButtons
decl_stmt|;
DECL|member|mouseReleaseModifiers
name|int
name|mouseReleaseModifiers
decl_stmt|;
protected|protected:
DECL|function|mousePressEvent
name|void
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|QWidget
operator|::
name|mousePressEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|mousePressButton
operator|=
name|e
operator|->
name|button
argument_list|()
expr_stmt|;
name|mousePressButtons
operator|=
name|e
operator|->
name|buttons
argument_list|()
expr_stmt|;
name|mousePressModifiers
operator|=
name|e
operator|->
name|modifiers
argument_list|()
expr_stmt|;
name|mousePressEventRecieved
operator|=
literal|true
expr_stmt|;
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
block|}
DECL|function|mouseReleaseEvent
name|void
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|QWidget
operator|::
name|mouseReleaseEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|mouseReleaseButton
operator|=
name|e
operator|->
name|button
argument_list|()
expr_stmt|;
name|mouseReleaseButtons
operator|=
name|e
operator|->
name|buttons
argument_list|()
expr_stmt|;
name|mouseReleaseModifiers
operator|=
name|e
operator|->
name|modifiers
argument_list|()
expr_stmt|;
name|mouseReleaseEventRecieved
operator|=
literal|true
expr_stmt|;
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|tst_QMouseEvent
class|class
name|tst_QMouseEvent
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QMouseEvent
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QMouseEvent
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|checkMousePressEvent_data
parameter_list|()
function_decl|;
name|void
name|checkMousePressEvent
parameter_list|()
function_decl|;
name|void
name|checkMouseReleaseEvent_data
parameter_list|()
function_decl|;
name|void
name|checkMouseReleaseEvent
parameter_list|()
function_decl|;
private|private:
DECL|member|testMouseWidget
name|MouseEventWidget
modifier|*
name|testMouseWidget
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QMouseEvent
name|tst_QMouseEvent
operator|::
name|tst_QMouseEvent
parameter_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~tst_QMouseEvent
name|tst_QMouseEvent
operator|::
name|~
name|tst_QMouseEvent
parameter_list|()
block|{  }
end_destructor
begin_function
DECL|function|initTestCase
name|void
name|tst_QMouseEvent
operator|::
name|initTestCase
parameter_list|()
block|{
name|testMouseWidget
operator|=
operator|new
name|MouseEventWidget
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|testMouseWidget
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QMouseEvent
operator|::
name|cleanupTestCase
parameter_list|()
block|{
operator|delete
name|testMouseWidget
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_QMouseEvent
operator|::
name|init
parameter_list|()
block|{
name|testMouseWidget
operator|->
name|mousePressEventRecieved
operator|=
literal|false
expr_stmt|;
name|testMouseWidget
operator|->
name|mouseReleaseEventRecieved
operator|=
literal|false
expr_stmt|;
name|testMouseWidget
operator|->
name|mousePressButton
operator|=
literal|0
expr_stmt|;
name|testMouseWidget
operator|->
name|mousePressButtons
operator|=
literal|0
expr_stmt|;
name|testMouseWidget
operator|->
name|mousePressModifiers
operator|=
literal|0
expr_stmt|;
name|testMouseWidget
operator|->
name|mouseReleaseButton
operator|=
literal|0
expr_stmt|;
name|testMouseWidget
operator|->
name|mouseReleaseButtons
operator|=
literal|0
expr_stmt|;
name|testMouseWidget
operator|->
name|mouseReleaseModifiers
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QMouseEvent
operator|::
name|cleanup
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|checkMousePressEvent_data
name|void
name|tst_QMouseEvent
operator|::
name|checkMousePressEvent_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"buttonPressed"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"keyPressed"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"leftButton-nokey"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|LeftButton
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"leftButton-shiftkey"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|LeftButton
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"leftButton-controlkey"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|LeftButton
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"leftButton-altkey"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|LeftButton
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"leftButton-metakey"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|LeftButton
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|MetaModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rightButton-nokey"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|RightButton
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rightButton-shiftkey"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|RightButton
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rightButton-controlkey"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|RightButton
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rightButton-altkey"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|RightButton
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rightButton-metakey"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|RightButton
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|MetaModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"midButton-nokey"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|MidButton
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"midButton-shiftkey"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|MidButton
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"midButton-controlkey"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|MidButton
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"midButton-altkey"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|MidButton
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"midButton-metakey"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|MidButton
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|MetaModifier
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|checkMousePressEvent
name|void
name|tst_QMouseEvent
operator|::
name|checkMousePressEvent
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|buttonPressed
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|keyPressed
argument_list|)
expr_stmt|;
name|int
name|button
init|=
name|buttonPressed
decl_stmt|;
name|int
name|buttons
init|=
name|button
decl_stmt|;
name|int
name|modifiers
init|=
name|keyPressed
decl_stmt|;
name|QTest
operator|::
name|mousePress
argument_list|(
name|testMouseWidget
argument_list|,
name|Qt
operator|::
name|MouseButton
argument_list|(
name|buttonPressed
argument_list|)
argument_list|,
name|Qt
operator|::
name|KeyboardModifiers
argument_list|(
name|keyPressed
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testMouseWidget
operator|->
name|mousePressEventRecieved
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testMouseWidget
operator|->
name|mousePressButton
argument_list|,
name|button
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testMouseWidget
operator|->
name|mousePressButtons
argument_list|,
name|buttons
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testMouseWidget
operator|->
name|mousePressModifiers
argument_list|,
name|modifiers
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseRelease
argument_list|(
name|testMouseWidget
argument_list|,
name|Qt
operator|::
name|MouseButton
argument_list|(
name|buttonPressed
argument_list|)
argument_list|,
name|Qt
operator|::
name|KeyboardModifiers
argument_list|(
name|keyPressed
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|checkMouseReleaseEvent_data
name|void
name|tst_QMouseEvent
operator|::
name|checkMouseReleaseEvent_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"buttonReleased"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"keyPressed"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"leftButton-nokey"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|LeftButton
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"leftButton-shiftkey"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|LeftButton
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"leftButton-controlkey"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|LeftButton
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"leftButton-altkey"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|LeftButton
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"leftButton-metakey"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|LeftButton
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|MetaModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rightButton-nokey"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|RightButton
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rightButton-shiftkey"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|RightButton
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rightButton-controlkey"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|RightButton
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rightButton-altkey"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|RightButton
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rightButton-metakey"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|RightButton
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|MetaModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"midButton-nokey"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|MidButton
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"midButton-shiftkey"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|MidButton
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"midButton-controlkey"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|MidButton
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"midButton-altkey"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|MidButton
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"midButton-metakey"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|MidButton
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|MetaModifier
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|checkMouseReleaseEvent
name|void
name|tst_QMouseEvent
operator|::
name|checkMouseReleaseEvent
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|buttonReleased
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|keyPressed
argument_list|)
expr_stmt|;
name|int
name|button
init|=
name|buttonReleased
decl_stmt|;
name|int
name|buttons
init|=
literal|0
decl_stmt|;
name|int
name|modifiers
init|=
name|keyPressed
decl_stmt|;
name|QTest
operator|::
name|mouseClick
argument_list|(
name|testMouseWidget
argument_list|,
name|Qt
operator|::
name|MouseButton
argument_list|(
name|buttonReleased
argument_list|)
argument_list|,
name|Qt
operator|::
name|KeyboardModifiers
argument_list|(
name|keyPressed
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testMouseWidget
operator|->
name|mouseReleaseEventRecieved
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testMouseWidget
operator|->
name|mouseReleaseButton
argument_list|,
name|button
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testMouseWidget
operator|->
name|mouseReleaseButtons
argument_list|,
name|buttons
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testMouseWidget
operator|->
name|mouseReleaseModifiers
argument_list|,
name|modifiers
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QMouseEvent
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qmouseevent.moc"
end_include
end_unit
