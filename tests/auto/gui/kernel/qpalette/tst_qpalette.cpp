begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|"qpalette.h"
end_include
begin_class
DECL|class|tst_QPalette
class|class
name|tst_QPalette
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|Q_SLOTS
private|:
name|void
name|roleValues_data
parameter_list|()
function_decl|;
name|void
name|roleValues
parameter_list|()
function_decl|;
name|void
name|copySemantics
parameter_list|()
function_decl|;
name|void
name|moveSemantics
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|roleValues_data
name|void
name|tst_QPalette
operator|::
name|roleValues_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"role"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QPalette::WindowText"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPalette
operator|::
name|WindowText
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QPalette::Button"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QPalette::Light"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPalette
operator|::
name|Light
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QPalette::Midlight"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPalette
operator|::
name|Midlight
argument_list|)
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QPalette::Dark"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPalette
operator|::
name|Dark
argument_list|)
operator|<<
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QPalette::Mid"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPalette
operator|::
name|Mid
argument_list|)
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QPalette::Text"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPalette
operator|::
name|Text
argument_list|)
operator|<<
literal|6
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QPalette::BrightText"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPalette
operator|::
name|BrightText
argument_list|)
operator|<<
literal|7
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QPalette::ButtonText"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPalette
operator|::
name|ButtonText
argument_list|)
operator|<<
literal|8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QPalette::Base"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|)
operator|<<
literal|9
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QPalette::Window"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|)
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QPalette::Shadow"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPalette
operator|::
name|Shadow
argument_list|)
operator|<<
literal|11
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QPalette::Highlight"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|)
operator|<<
literal|12
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QPalette::HighlightedText"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPalette
operator|::
name|HighlightedText
argument_list|)
operator|<<
literal|13
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QPalette::Link"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPalette
operator|::
name|Link
argument_list|)
operator|<<
literal|14
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QPalette::LinkVisited"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPalette
operator|::
name|LinkVisited
argument_list|)
operator|<<
literal|15
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QPalette::AlternateBase"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPalette
operator|::
name|AlternateBase
argument_list|)
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QPalette::NoRole"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPalette
operator|::
name|NoRole
argument_list|)
operator|<<
literal|17
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QPalette::ToolTipBase"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPalette
operator|::
name|ToolTipBase
argument_list|)
operator|<<
literal|18
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QPalette::ToolTipText"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPalette
operator|::
name|ToolTipText
argument_list|)
operator|<<
literal|19
expr_stmt|;
comment|// Change this value as you add more roles.
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QPalette::NColorRoles"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPalette
operator|::
name|NColorRoles
argument_list|)
operator|<<
literal|20
expr_stmt|;
block|}
end_function
begin_function
DECL|function|roleValues
name|void
name|tst_QPalette
operator|::
name|roleValues
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|role
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|role
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|copySemantics
name|void
name|tst_QPalette
operator|::
name|copySemantics
parameter_list|()
block|{
name|QPalette
name|src
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
decl_stmt|,
name|dst
decl_stmt|;
specifier|const
name|QPalette
name|control
init|=
name|src
decl_stmt|;
comment|// copy construction
name|QVERIFY
argument_list|(
name|src
operator|!=
name|dst
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|src
operator|.
name|isCopyOf
argument_list|(
name|dst
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|src
argument_list|,
name|control
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|src
operator|.
name|isCopyOf
argument_list|(
name|control
argument_list|)
argument_list|)
expr_stmt|;
name|dst
operator|=
name|src
expr_stmt|;
comment|// copy assignment
name|QCOMPARE
argument_list|(
name|dst
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dst
argument_list|,
name|control
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|dst
operator|.
name|isCopyOf
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
name|dst
operator|=
name|QPalette
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|dst
operator|!=
name|src
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|dst
operator|!=
name|control
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|src
argument_list|,
name|control
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|dst
operator|.
name|isCopyOf
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|src
operator|.
name|isCopyOf
argument_list|(
name|control
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|moveSemantics
name|void
name|tst_QPalette
operator|::
name|moveSemantics
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_COMPILER_RVALUE_REFS
name|QPalette
name|src
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
decl_stmt|,
name|dst
decl_stmt|;
specifier|const
name|QPalette
name|control
init|=
name|src
decl_stmt|;
name|QVERIFY
argument_list|(
name|src
operator|!=
name|dst
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|src
argument_list|,
name|control
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|dst
operator|.
name|isCopyOf
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|dst
operator|.
name|isCopyOf
argument_list|(
name|control
argument_list|)
argument_list|)
expr_stmt|;
name|dst
operator|=
name|qMove
argument_list|(
name|src
argument_list|)
expr_stmt|;
comment|// move assignment
name|QVERIFY
argument_list|(
operator|!
name|dst
operator|.
name|isCopyOf
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
comment|// isCopyOf() works on moved-from palettes, too
name|QVERIFY
argument_list|(
name|dst
operator|.
name|isCopyOf
argument_list|(
name|control
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dst
argument_list|,
name|control
argument_list|)
expr_stmt|;
name|src
operator|=
name|control
expr_stmt|;
comment|// check moved-from 'src' can still be assigned to (doesn't crash)
name|QVERIFY
argument_list|(
name|src
operator|.
name|isCopyOf
argument_list|(
name|dst
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|src
operator|.
name|isCopyOf
argument_list|(
name|control
argument_list|)
argument_list|)
expr_stmt|;
name|QPalette
name|dst2
argument_list|(
name|qMove
argument_list|(
name|src
argument_list|)
argument_list|)
decl_stmt|;
comment|// move construction
name|QVERIFY
argument_list|(
operator|!
name|src
operator|.
name|isCopyOf
argument_list|(
name|dst
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|src
operator|.
name|isCopyOf
argument_list|(
name|dst2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|src
operator|.
name|isCopyOf
argument_list|(
name|control
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dst2
argument_list|,
name|control
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|dst2
operator|.
name|isCopyOf
argument_list|(
name|dst
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|dst2
operator|.
name|isCopyOf
argument_list|(
name|control
argument_list|)
argument_list|)
expr_stmt|;
comment|// check moved-from 'src' can still be destroyed (doesn't crash)
else|#
directive|else
name|QSKIP
argument_list|(
literal|"Compiler doesn't support C++11 move semantics"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QPalette
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qpalette.moc"
end_include
end_unit
