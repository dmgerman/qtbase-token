begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qvariant.h>
end_include
begin_include
include|#
directive|include
file|<qkeysequence.h>
end_include
begin_include
include|#
directive|include
file|<qbitmap.h>
end_include
begin_include
include|#
directive|include
file|<qcursor.h>
end_include
begin_include
include|#
directive|include
file|<qimage.h>
end_include
begin_include
include|#
directive|include
file|<qicon.h>
end_include
begin_include
include|#
directive|include
file|<qmatrix.h>
end_include
begin_include
include|#
directive|include
file|<qmatrix4x4.h>
end_include
begin_include
include|#
directive|include
file|<qpen.h>
end_include
begin_include
include|#
directive|include
file|<qpolygon.h>
end_include
begin_include
include|#
directive|include
file|<qpalette.h>
end_include
begin_include
include|#
directive|include
file|<qtransform.h>
end_include
begin_include
include|#
directive|include
file|<qvector2d.h>
end_include
begin_include
include|#
directive|include
file|<qvector3d.h>
end_include
begin_include
include|#
directive|include
file|<qvector4d.h>
end_include
begin_include
include|#
directive|include
file|<qquaternion.h>
end_include
begin_include
include|#
directive|include
file|<qtextdocument.h>
end_include
begin_include
include|#
directive|include
file|<qtextformat.h>
end_include
begin_include
include|#
directive|include
file|<qfont.h>
end_include
begin_include
include|#
directive|include
file|"tst_qvariant_common.h"
end_include
begin_include
include|#
directive|include
file|"../../../../qtest-config.h"
end_include
begin_class
DECL|class|tst_QGuiVariant
class|class
name|tst_QGuiVariant
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|constructor_invalid_data
parameter_list|()
function_decl|;
name|void
name|constructor_invalid
parameter_list|()
function_decl|;
name|void
name|canConvert_data
parameter_list|()
function_decl|;
name|void
name|canConvert
parameter_list|()
function_decl|;
name|void
name|toInt_data
parameter_list|()
function_decl|;
name|void
name|toInt
parameter_list|()
function_decl|;
name|void
name|toFont_data
parameter_list|()
function_decl|;
name|void
name|toFont
parameter_list|()
function_decl|;
name|void
name|toKeySequence_data
parameter_list|()
function_decl|;
name|void
name|toKeySequence
parameter_list|()
function_decl|;
name|void
name|toString_data
parameter_list|()
function_decl|;
name|void
name|toString
parameter_list|()
function_decl|;
name|void
name|toColor_data
parameter_list|()
function_decl|;
name|void
name|toColor
parameter_list|()
function_decl|;
name|void
name|toPixmap_data
parameter_list|()
function_decl|;
name|void
name|toPixmap
parameter_list|()
function_decl|;
name|void
name|toImage_data
parameter_list|()
function_decl|;
name|void
name|toImage
parameter_list|()
function_decl|;
name|void
name|toBrush_data
parameter_list|()
function_decl|;
name|void
name|toBrush
parameter_list|()
function_decl|;
name|void
name|matrix
parameter_list|()
function_decl|;
name|void
name|transform
parameter_list|()
function_decl|;
name|void
name|matrix4x4
parameter_list|()
function_decl|;
name|void
name|vector2D
parameter_list|()
function_decl|;
name|void
name|vector3D
parameter_list|()
function_decl|;
name|void
name|vector4D
parameter_list|()
function_decl|;
name|void
name|quaternion
parameter_list|()
function_decl|;
name|void
name|writeToReadFromDataStream_data
parameter_list|()
function_decl|;
name|void
name|writeToReadFromDataStream
parameter_list|()
function_decl|;
name|void
name|writeToReadFromOldDataStream
parameter_list|()
function_decl|;
name|void
name|colorInteger
parameter_list|()
function_decl|;
name|void
name|invalidQColor
parameter_list|()
function_decl|;
name|void
name|debugStream_data
parameter_list|()
function_decl|;
name|void
name|debugStream
parameter_list|()
function_decl|;
name|void
name|implicitConstruction
parameter_list|()
function_decl|;
name|void
name|guiVariantAtExit
parameter_list|()
function_decl|;
name|void
name|iconEquality
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|constructor_invalid_data
name|void
name|tst_QGuiVariant
operator|::
name|constructor_invalid_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|uint
argument_list|>
argument_list|(
literal|"typeId"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"LastGuiType + 1"
argument_list|)
operator|<<
name|uint
argument_list|(
name|QMetaType
operator|::
name|LastGuiType
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QMetaType
operator|::
name|isRegistered
argument_list|(
name|QMetaType
operator|::
name|LastGuiType
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"LastWidgetsType + 1"
argument_list|)
operator|<<
name|uint
argument_list|(
name|QMetaType
operator|::
name|LastWidgetsType
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QMetaType
operator|::
name|isRegistered
argument_list|(
name|QMetaType
operator|::
name|LastWidgetsType
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|constructor_invalid
name|void
name|tst_QGuiVariant
operator|::
name|constructor_invalid
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|uint
argument_list|,
name|typeId
argument_list|)
expr_stmt|;
block|{
name|MessageHandlerInvalidType
name|msg
decl_stmt|;
name|QVariant
name|variant
argument_list|(
cast|static_cast
argument_list|<
name|QVariant
operator|::
name|Type
argument_list|>
argument_list|(
name|typeId
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|variant
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|variant
operator|.
name|userType
argument_list|()
operator|==
name|QMetaType
operator|::
name|UnknownType
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|msg
operator|.
name|ok
argument_list|)
expr_stmt|;
block|}
block|{
name|MessageHandlerInvalidType
name|msg
decl_stmt|;
name|QVariant
name|variant
argument_list|(
name|typeId
argument_list|,
comment|/* copy */
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|variant
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|variant
operator|.
name|userType
argument_list|()
operator|==
name|QMetaType
operator|::
name|UnknownType
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|msg
operator|.
name|ok
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|canConvert_data
name|void
name|tst_QGuiVariant
operator|::
name|canConvert_data
parameter_list|()
block|{
name|TST_QVARIANT_CANCONVERT_DATATABLE_HEADERS
ifdef|#
directive|ifdef
name|Y
DECL|macro|Y
undef|#
directive|undef
name|Y
endif|#
directive|endif
ifdef|#
directive|ifdef
name|N
DECL|macro|N
undef|#
directive|undef
name|N
endif|#
directive|endif
DECL|macro|Y
define|#
directive|define
name|Y
value|true
DECL|macro|N
define|#
directive|define
name|N
value|false
name|QVariant
name|var
decl_stmt|;
comment|//            bita bitm bool brsh byta col  curs date dt   dbl  font img  int  inv  kseq list ll   map  pal  pen  pix  pnt  rect reg  size sp   str  strl time uint ull
name|var
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QBitmap
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Bitmap"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
name|var
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QBrush
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Brush"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
name|var
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QColor
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Color"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|Y
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
ifndef|#
directive|ifndef
name|QTEST_NO_CURSOR
name|var
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QCursor
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Cursor"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
endif|#
directive|endif
name|var
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QFont
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Font"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
name|var
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QIcon
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Icon"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
name|var
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QImage
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Image"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
name|var
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QKeySequence
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"KeySequence"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
name|var
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QPalette
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Palette"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
name|var
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QPen
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Pen"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
name|var
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QPixmap
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Pixmap"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
name|var
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QPolygon
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"PointArray"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
name|var
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QRegion
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Region"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
DECL|macro|N
undef|#
directive|undef
name|N
DECL|macro|Y
undef|#
directive|undef
name|Y
block|}
end_function
begin_function
DECL|function|canConvert
name|void
name|tst_QGuiVariant
operator|::
name|canConvert
parameter_list|()
block|{
name|TST_QVARIANT_CANCONVERT_FETCH_DATA
name|TST_QVARIANT_CANCONVERT_COMPARE_DATA
block|}
end_function
begin_function
DECL|function|toInt_data
name|void
name|tst_QGuiVariant
operator|::
name|toInt_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"valueOK"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"keysequence"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|)
argument_list|)
operator|<<
literal|65
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toInt
name|void
name|tst_QGuiVariant
operator|::
name|toInt
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|valueOK
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|isValid
argument_list|()
operator|==
name|value
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Int
argument_list|)
argument_list|)
expr_stmt|;
name|bool
name|ok
decl_stmt|;
name|int
name|i
init|=
name|value
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
operator|==
name|valueOK
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toColor_data
name|void
name|tst_QGuiVariant
operator|::
name|toColor_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QColor
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QColor
name|c
argument_list|(
literal|"red"
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"string"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"red"
argument_list|)
argument_list|)
operator|<<
name|c
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"solid brush"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QBrush
argument_list|(
name|c
argument_list|)
argument_list|)
operator|<<
name|c
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toColor
name|void
name|tst_QGuiVariant
operator|::
name|toColor
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QColor
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Color
argument_list|)
argument_list|)
expr_stmt|;
name|QColor
name|d
init|=
name|qvariant_cast
argument_list|<
name|QColor
argument_list|>
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|d
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toPixmap_data
name|void
name|tst_QGuiVariant
operator|::
name|toPixmap_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QPixmap
name|pm
argument_list|(
literal|30
argument_list|,
literal|30
argument_list|)
decl_stmt|;
name|pm
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"image"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|pm
argument_list|)
operator|<<
name|pm
expr_stmt|;
name|QBitmap
name|bm
argument_list|(
literal|30
argument_list|,
literal|30
argument_list|)
decl_stmt|;
name|bm
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|color1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bitmap"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|bm
argument_list|)
operator|<<
name|QPixmap
argument_list|(
name|bm
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toPixmap
name|void
name|tst_QGuiVariant
operator|::
name|toPixmap
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QPixmap
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Pixmap
argument_list|)
argument_list|)
expr_stmt|;
name|QPixmap
name|d
init|=
name|qvariant_cast
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|d
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toImage_data
name|void
name|tst_QGuiVariant
operator|::
name|toImage_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QImage
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QImage
name|im
argument_list|(
literal|30
argument_list|,
literal|30
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|im
operator|.
name|fill
argument_list|(
literal|0x7fff0000
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"image"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|im
argument_list|)
operator|<<
name|im
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toImage
name|void
name|tst_QGuiVariant
operator|::
name|toImage
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QImage
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Image
argument_list|)
argument_list|)
expr_stmt|;
name|QImage
name|d
init|=
name|qvariant_cast
argument_list|<
name|QImage
argument_list|>
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|d
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toBrush_data
name|void
name|tst_QGuiVariant
operator|::
name|toBrush_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QBrush
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QColor
name|c
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"color"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|c
argument_list|)
operator|<<
name|QBrush
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|QPixmap
name|pm
argument_list|(
literal|30
argument_list|,
literal|30
argument_list|)
decl_stmt|;
name|pm
operator|.
name|fill
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pixmap"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|pm
argument_list|)
operator|<<
name|QBrush
argument_list|(
name|pm
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toBrush
name|void
name|tst_QGuiVariant
operator|::
name|toBrush
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QBrush
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Brush
argument_list|)
argument_list|)
expr_stmt|;
name|QBrush
name|d
init|=
name|qvariant_cast
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|d
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toFont_data
name|void
name|tst_QGuiVariant
operator|::
name|toFont_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QFont
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QFont
name|f
argument_list|(
literal|"times"
argument_list|,
literal|12
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"string"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"times,12,-1,5,50,0,0,0,0,0"
argument_list|)
argument_list|)
operator|<<
name|f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toFont
name|void
name|tst_QGuiVariant
operator|::
name|toFont
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QFont
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Font
argument_list|)
argument_list|)
expr_stmt|;
name|QFont
name|d
init|=
name|qvariant_cast
argument_list|<
name|QFont
argument_list|>
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|d
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toKeySequence_data
name|void
name|tst_QGuiVariant
operator|::
name|toKeySequence_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QKeySequence
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|67108929
argument_list|)
operator|<<
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qstring"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"Ctrl+A"
argument_list|)
argument_list|)
operator|<<
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toKeySequence
name|void
name|tst_QGuiVariant
operator|::
name|toKeySequence
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QKeySequence
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|KeySequence
argument_list|)
argument_list|)
expr_stmt|;
name|QKeySequence
name|d
init|=
name|qvariant_cast
argument_list|<
name|QKeySequence
argument_list|>
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|d
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toString_data
name|void
name|tst_QGuiVariant
operator|::
name|toString_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qkeysequence"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_A
argument_list|)
argument_list|)
ifndef|#
directive|ifndef
name|Q_OS_MAC
operator|<<
name|QString
argument_list|(
literal|"Ctrl+A"
argument_list|)
expr_stmt|;
else|#
directive|else
operator|<<
name|QString
argument_list|(
name|QChar
argument_list|(
literal|0x2318
argument_list|)
argument_list|)
operator|+
literal|"A"
expr_stmt|;
endif|#
directive|endif
name|QFont
name|font
argument_list|(
literal|"times"
argument_list|,
literal|12
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qfont"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|font
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"times,12,-1,5,50,0,0,0,0,0"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qcolor"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QColor
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"#0a0a0a"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toString
name|void
name|tst_QGuiVariant
operator|::
name|toString
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|String
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|str
init|=
name|value
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|str
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|matrix
name|void
name|tst_QGuiVariant
operator|::
name|matrix
parameter_list|()
block|{
name|QVariant
name|variant
decl_stmt|;
name|QMatrix
name|matrix
init|=
name|qvariant_cast
argument_list|<
name|QMatrix
argument_list|>
argument_list|(
name|variant
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|matrix
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
name|variant
operator|.
name|setValue
argument_list|(
name|QMatrix
argument_list|()
operator|.
name|rotate
argument_list|(
literal|90
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QMatrix
argument_list|()
operator|.
name|rotate
argument_list|(
literal|90
argument_list|)
argument_list|,
name|qvariant_cast
argument_list|<
name|QMatrix
argument_list|>
argument_list|(
name|variant
argument_list|)
argument_list|)
expr_stmt|;
name|void
modifier|*
name|mmatrix
init|=
name|QMetaType
operator|::
name|create
argument_list|(
name|QVariant
operator|::
name|Matrix
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|mmatrix
argument_list|)
expr_stmt|;
name|QMetaType
operator|::
name|destroy
argument_list|(
name|QVariant
operator|::
name|Matrix
argument_list|,
name|mmatrix
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|matrix4x4
name|void
name|tst_QGuiVariant
operator|::
name|matrix4x4
parameter_list|()
block|{
name|QVariant
name|variant
decl_stmt|;
name|QMatrix4x4
name|matrix
init|=
name|qvariant_cast
argument_list|<
name|QMatrix4x4
argument_list|>
argument_list|(
name|variant
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|matrix
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m
decl_stmt|;
name|m
operator|.
name|scale
argument_list|(
literal|2.0f
argument_list|)
expr_stmt|;
name|variant
operator|.
name|setValue
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m
argument_list|,
name|qvariant_cast
argument_list|<
name|QMatrix4x4
argument_list|>
argument_list|(
name|variant
argument_list|)
argument_list|)
expr_stmt|;
name|void
modifier|*
name|mmatrix
init|=
name|QMetaType
operator|::
name|create
argument_list|(
name|QVariant
operator|::
name|Matrix4x4
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|mmatrix
argument_list|)
expr_stmt|;
name|QMetaType
operator|::
name|destroy
argument_list|(
name|QVariant
operator|::
name|Matrix4x4
argument_list|,
name|mmatrix
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|transform
name|void
name|tst_QGuiVariant
operator|::
name|transform
parameter_list|()
block|{
name|QVariant
name|variant
decl_stmt|;
name|QTransform
name|matrix
init|=
name|qvariant_cast
argument_list|<
name|QTransform
argument_list|>
argument_list|(
name|variant
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|matrix
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
name|variant
operator|.
name|setValue
argument_list|(
name|QTransform
argument_list|()
operator|.
name|rotate
argument_list|(
literal|90
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTransform
argument_list|()
operator|.
name|rotate
argument_list|(
literal|90
argument_list|)
argument_list|,
name|qvariant_cast
argument_list|<
name|QTransform
argument_list|>
argument_list|(
name|variant
argument_list|)
argument_list|)
expr_stmt|;
name|void
modifier|*
name|mmatrix
init|=
name|QMetaType
operator|::
name|create
argument_list|(
name|QVariant
operator|::
name|Transform
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|mmatrix
argument_list|)
expr_stmt|;
name|QMetaType
operator|::
name|destroy
argument_list|(
name|QVariant
operator|::
name|Transform
argument_list|,
name|mmatrix
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|vector2D
name|void
name|tst_QGuiVariant
operator|::
name|vector2D
parameter_list|()
block|{
name|QVariant
name|variant
decl_stmt|;
name|QVector2D
name|vector
init|=
name|qvariant_cast
argument_list|<
name|QVector2D
argument_list|>
argument_list|(
name|variant
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|vector
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|variant
operator|.
name|setValue
argument_list|(
name|QVector2D
argument_list|(
literal|0.1f
argument_list|,
literal|0.2f
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QVector2D
argument_list|(
literal|0.1f
argument_list|,
literal|0.2f
argument_list|)
argument_list|,
name|qvariant_cast
argument_list|<
name|QVector2D
argument_list|>
argument_list|(
name|variant
argument_list|)
argument_list|)
expr_stmt|;
name|void
modifier|*
name|pvector
init|=
name|QMetaType
operator|::
name|create
argument_list|(
name|QVariant
operator|::
name|Vector2D
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|pvector
argument_list|)
expr_stmt|;
name|QMetaType
operator|::
name|destroy
argument_list|(
name|QVariant
operator|::
name|Vector2D
argument_list|,
name|pvector
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|vector3D
name|void
name|tst_QGuiVariant
operator|::
name|vector3D
parameter_list|()
block|{
name|QVariant
name|variant
decl_stmt|;
name|QVector3D
name|vector
init|=
name|qvariant_cast
argument_list|<
name|QVector3D
argument_list|>
argument_list|(
name|variant
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|vector
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|variant
operator|.
name|setValue
argument_list|(
name|QVector3D
argument_list|(
literal|0.1
argument_list|,
literal|0.2
argument_list|,
literal|0.3
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QVector3D
argument_list|(
literal|0.1
argument_list|,
literal|0.2
argument_list|,
literal|0.3
argument_list|)
argument_list|,
name|qvariant_cast
argument_list|<
name|QVector3D
argument_list|>
argument_list|(
name|variant
argument_list|)
argument_list|)
expr_stmt|;
name|void
modifier|*
name|pvector
init|=
name|QMetaType
operator|::
name|create
argument_list|(
name|QVariant
operator|::
name|Vector3D
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|pvector
argument_list|)
expr_stmt|;
name|QMetaType
operator|::
name|destroy
argument_list|(
name|QVariant
operator|::
name|Vector3D
argument_list|,
name|pvector
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|vector4D
name|void
name|tst_QGuiVariant
operator|::
name|vector4D
parameter_list|()
block|{
name|QVariant
name|variant
decl_stmt|;
name|QVector4D
name|vector
init|=
name|qvariant_cast
argument_list|<
name|QVector4D
argument_list|>
argument_list|(
name|variant
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|vector
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|variant
operator|.
name|setValue
argument_list|(
name|QVector4D
argument_list|(
literal|0.1
argument_list|,
literal|0.2
argument_list|,
literal|0.3
argument_list|,
literal|0.4
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QVector4D
argument_list|(
literal|0.1
argument_list|,
literal|0.2
argument_list|,
literal|0.3
argument_list|,
literal|0.4
argument_list|)
argument_list|,
name|qvariant_cast
argument_list|<
name|QVector4D
argument_list|>
argument_list|(
name|variant
argument_list|)
argument_list|)
expr_stmt|;
name|void
modifier|*
name|pvector
init|=
name|QMetaType
operator|::
name|create
argument_list|(
name|QVariant
operator|::
name|Vector4D
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|pvector
argument_list|)
expr_stmt|;
name|QMetaType
operator|::
name|destroy
argument_list|(
name|QVariant
operator|::
name|Vector4D
argument_list|,
name|pvector
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|quaternion
name|void
name|tst_QGuiVariant
operator|::
name|quaternion
parameter_list|()
block|{
name|QVariant
name|variant
decl_stmt|;
name|QQuaternion
name|quaternion
init|=
name|qvariant_cast
argument_list|<
name|QQuaternion
argument_list|>
argument_list|(
name|variant
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|quaternion
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
name|variant
operator|.
name|setValue
argument_list|(
name|QQuaternion
argument_list|(
literal|0.1
argument_list|,
literal|0.2
argument_list|,
literal|0.3
argument_list|,
literal|0.4
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QQuaternion
argument_list|(
literal|0.1
argument_list|,
literal|0.2
argument_list|,
literal|0.3
argument_list|,
literal|0.4
argument_list|)
argument_list|,
name|qvariant_cast
argument_list|<
name|QQuaternion
argument_list|>
argument_list|(
name|variant
argument_list|)
argument_list|)
expr_stmt|;
name|void
modifier|*
name|pquaternion
init|=
name|QMetaType
operator|::
name|create
argument_list|(
name|QVariant
operator|::
name|Quaternion
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|pquaternion
argument_list|)
expr_stmt|;
name|QMetaType
operator|::
name|destroy
argument_list|(
name|QVariant
operator|::
name|Quaternion
argument_list|,
name|pquaternion
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeToReadFromDataStream_data
name|void
name|tst_QGuiVariant
operator|::
name|writeToReadFromDataStream_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"writeVariant"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"isNull"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bitmap_invalid"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QBitmap
argument_list|()
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QBitmap
name|bitmap
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|bitmap
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bitmap_valid"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|bitmap
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"brush_valid"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QBrush
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"color_valid"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
ifndef|#
directive|ifndef
name|QTEST_NO_CURSOR
name|QTest
operator|::
name|newRow
argument_list|(
literal|"cursor_valid"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QCursor
argument_list|(
name|Qt
operator|::
name|PointingHandCursor
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"font_valid"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QFont
argument_list|(
literal|"times"
argument_list|,
literal|12
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pixmap_invalid"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QPixmap
argument_list|()
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QPixmap
name|pixmap
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|pixmap
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pixmap_valid"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|pixmap
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"image_invalid"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QImage
argument_list|()
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"keysequence_valid"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_A
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"palette_valid"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QPalette
argument_list|(
name|QColor
argument_list|(
literal|"turquoise"
argument_list|)
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pen_valid"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QPen
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pointarray_invalid"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QPolygon
argument_list|()
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pointarray_valid"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QPolygon
argument_list|(
name|QRect
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"region_invalid"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QRegion
argument_list|()
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"region_valid"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QRegion
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"polygonf_invalid"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QPolygonF
argument_list|()
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"polygonf_valid"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QPolygonF
argument_list|(
name|QRectF
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invalidQColor
name|void
name|tst_QGuiVariant
operator|::
name|invalidQColor
parameter_list|()
block|{
name|QVariant
name|va
argument_list|(
literal|"An invalid QColor::name() value."
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|va
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Color
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|va
operator|.
name|convert
argument_list|(
name|QVariant
operator|::
name|Color
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|qvariant_cast
argument_list|<
name|QColor
argument_list|>
argument_list|(
name|va
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|colorInteger
name|void
name|tst_QGuiVariant
operator|::
name|colorInteger
parameter_list|()
block|{
name|QVariant
name|v
init|=
name|QColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Color
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|value
argument_list|<
name|QColor
argument_list|>
argument_list|()
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
argument_list|)
expr_stmt|;
name|v
operator|.
name|setValue
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|v
operator|.
name|setValue
argument_list|(
name|QColor
argument_list|(
name|Qt
operator|::
name|yellow
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Color
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|value
argument_list|<
name|QColor
argument_list|>
argument_list|()
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|yellow
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeToReadFromDataStream
name|void
name|tst_QGuiVariant
operator|::
name|writeToReadFromDataStream
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|writeVariant
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|isNull
argument_list|)
expr_stmt|;
name|QByteArray
name|data
decl_stmt|;
name|QDataStream
name|writeStream
argument_list|(
operator|&
name|data
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|writeStream
operator|<<
name|writeVariant
expr_stmt|;
name|QVariant
name|readVariant
decl_stmt|;
name|QDataStream
name|readStream
argument_list|(
operator|&
name|data
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|readStream
operator|>>
name|readVariant
expr_stmt|;
name|QVERIFY
argument_list|(
name|readVariant
operator|.
name|isNull
argument_list|()
operator|==
name|isNull
argument_list|)
expr_stmt|;
comment|// Best way to confirm the readVariant contains the same data?
comment|// Since only a few won't match since the serial numbers are different
comment|// I won't bother adding another bool in the data test.
specifier|const
name|int
name|writeType
init|=
name|writeVariant
operator|.
name|userType
argument_list|()
decl_stmt|;
if|if
condition|(
name|writeType
operator|!=
name|QVariant
operator|::
name|Invalid
operator|&&
name|writeType
operator|!=
name|QVariant
operator|::
name|Bitmap
operator|&&
name|writeType
operator|!=
name|QVariant
operator|::
name|Pixmap
operator|&&
name|writeType
operator|!=
name|QVariant
operator|::
name|Image
condition|)
block|{
switch|switch
condition|(
name|writeType
condition|)
block|{
default|default:
name|QCOMPARE
argument_list|(
name|readVariant
argument_list|,
name|writeVariant
argument_list|)
expr_stmt|;
break|break;
comment|// compare types know by QMetaType but not QVariant (QVariant::operator==() knows nothing about them)
case|case
name|QMetaType
operator|::
name|Long
case|:
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|long
argument_list|>
argument_list|(
name|readVariant
argument_list|)
argument_list|,
name|qvariant_cast
argument_list|<
name|long
argument_list|>
argument_list|(
name|writeVariant
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|ULong
case|:
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|ulong
argument_list|>
argument_list|(
name|readVariant
argument_list|)
argument_list|,
name|qvariant_cast
argument_list|<
name|ulong
argument_list|>
argument_list|(
name|writeVariant
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|Short
case|:
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|short
argument_list|>
argument_list|(
name|readVariant
argument_list|)
argument_list|,
name|qvariant_cast
argument_list|<
name|short
argument_list|>
argument_list|(
name|writeVariant
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|UShort
case|:
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|ushort
argument_list|>
argument_list|(
name|readVariant
argument_list|)
argument_list|,
name|qvariant_cast
argument_list|<
name|ushort
argument_list|>
argument_list|(
name|writeVariant
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|Char
case|:
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|char
argument_list|>
argument_list|(
name|readVariant
argument_list|)
argument_list|,
name|qvariant_cast
argument_list|<
name|char
argument_list|>
argument_list|(
name|writeVariant
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|UChar
case|:
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|uchar
argument_list|>
argument_list|(
name|readVariant
argument_list|)
argument_list|,
name|qvariant_cast
argument_list|<
name|uchar
argument_list|>
argument_list|(
name|writeVariant
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|Float
case|:
block|{
comment|// the uninitialized float can be NaN (observed on Windows Mobile 5 ARMv4i)
name|float
name|readFloat
init|=
name|qvariant_cast
argument_list|<
name|float
argument_list|>
argument_list|(
name|readVariant
argument_list|)
decl_stmt|;
name|float
name|writtenFloat
init|=
name|qvariant_cast
argument_list|<
name|float
argument_list|>
argument_list|(
name|writeVariant
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|qIsNaN
argument_list|(
name|readFloat
argument_list|)
operator|==
name|qIsNaN
argument_list|(
name|writtenFloat
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|qIsNaN
argument_list|(
name|readFloat
argument_list|)
condition|)
name|QVERIFY
argument_list|(
name|readFloat
operator|==
name|writtenFloat
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|writeToReadFromOldDataStream
name|void
name|tst_QGuiVariant
operator|::
name|writeToReadFromOldDataStream
parameter_list|()
block|{
name|QPolygonF
name|polyF
argument_list|(
name|QRectF
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|50
argument_list|,
literal|50
argument_list|)
argument_list|)
decl_stmt|;
name|QVariant
name|testVariant
argument_list|(
name|polyF
argument_list|)
decl_stmt|;
block|{
comment|// Read into a variant and compare
name|QFile
name|file
argument_list|(
literal|":/data/qpolygonf.bin"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QDataStream
name|dataFileStream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|dataFileStream
operator|.
name|setVersion
argument_list|(
name|QDataStream
operator|::
name|Qt_4_9
argument_list|)
expr_stmt|;
name|QVariant
name|readVariant
decl_stmt|;
name|dataFileStream
operator|>>
name|readVariant
expr_stmt|;
name|QVERIFY
argument_list|(
name|readVariant
operator|.
name|type
argument_list|()
operator|==
name|QMetaType
operator|::
name|QPolygonF
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testVariant
argument_list|,
name|readVariant
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|{
name|QByteArray
name|variantData
decl_stmt|;
block|{
name|QDataStream
name|varDataStream
argument_list|(
operator|&
name|variantData
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|varDataStream
operator|<<
name|testVariant
expr_stmt|;
block|}
comment|// Read into a bytearray and compare
name|QFile
name|file
argument_list|(
literal|":/data/qpolygonf.bin"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QDataStream
name|dataFileStream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|dataFileStream
operator|.
name|setVersion
argument_list|(
name|QDataStream
operator|::
name|Qt_4_9
argument_list|)
expr_stmt|;
name|int
name|dummy
decl_stmt|;
name|dataFileStream
operator|>>
name|dummy
expr_stmt|;
name|QByteArray
name|polyData49
decl_stmt|;
name|dataFileStream
operator|>>
name|polyData49
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QByteArray
name|polyData50
decl_stmt|;
name|QDataStream
name|readVarData
argument_list|(
name|variantData
argument_list|)
decl_stmt|;
name|readVarData
operator|>>
name|dummy
expr_stmt|;
name|readVarData
operator|>>
name|polyData50
expr_stmt|;
name|QVERIFY
argument_list|(
name|polyData49
operator|==
name|polyData50
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|debugStream_data
name|void
name|tst_QGuiVariant
operator|::
name|debugStream_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"variant"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"typeId"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|id
init|=
name|QMetaType
operator|::
name|FirstGuiType
init|;
name|id
operator|<=
name|QMetaType
operator|::
name|LastGuiType
condition|;
operator|++
name|id
control|)
block|{
specifier|const
name|char
modifier|*
name|tagName
init|=
name|QMetaType
operator|::
name|typeName
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tagName
condition|)
continue|continue;
name|QTest
operator|::
name|newRow
argument_list|(
name|tagName
argument_list|)
operator|<<
name|QVariant
argument_list|(
cast|static_cast
argument_list|<
name|QVariant
operator|::
name|Type
argument_list|>
argument_list|(
name|id
argument_list|)
argument_list|)
operator|<<
name|id
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|debugStream
name|void
name|tst_QGuiVariant
operator|::
name|debugStream
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|variant
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|typeId
argument_list|)
expr_stmt|;
name|MessageHandler
name|msgHandler
argument_list|(
name|typeId
argument_list|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
name|variant
expr_stmt|;
name|QVERIFY
argument_list|(
name|msgHandler
operator|.
name|testPassed
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|implicitConstruction
name|void
name|tst_QGuiVariant
operator|::
name|implicitConstruction
parameter_list|()
block|{
comment|// This is a compile-time test
name|QVariant
name|v
decl_stmt|;
DECL|macro|FOR_EACH_GUI_CLASS_BASE
define|#
directive|define
name|FOR_EACH_GUI_CLASS_BASE
parameter_list|(
name|F
parameter_list|)
define|\
value|F(Font) \     F(Pixmap) \     F(Brush) \     F(Color) \     F(Palette) \     F(Icon) \     F(Image) \     F(Polygon) \     F(Region) \     F(Bitmap) \     F(KeySequence) \     F(Pen) \     F(TextLength) \     F(TextFormat) \     F(Matrix) \     F(Transform) \     F(Matrix4x4) \     F(Vector2D) \     F(Vector3D) \     F(Vector4D) \     F(Quaternion) \     F(PolygonF)
ifndef|#
directive|ifndef
name|QTEST_NO_CURSOR
DECL|macro|FOR_EACH_GUI_CLASS
define|#
directive|define
name|FOR_EACH_GUI_CLASS
parameter_list|(
name|F
parameter_list|)
define|\
value|FOR_EACH_GUI_CLASS_BASE(F) \     F(Cursor)
else|#
directive|else
comment|// !QTEST_NO_CURSOR
define|#
directive|define
name|FOR_EACH_GUI_CLASS
parameter_list|(
name|F
parameter_list|)
define|\
value|FOR_EACH_GUI_CLASS_BASE(F)
endif|#
directive|endif
comment|// QTEST_NO_CURSOR
DECL|macro|CONSTRUCT
define|#
directive|define
name|CONSTRUCT
parameter_list|(
name|TYPE
parameter_list|)
define|\
value|{ \         Q##TYPE t; \         v = t; \         QVERIFY(true); \     }
name|FOR_EACH_GUI_CLASS
argument_list|(
argument|CONSTRUCT
argument_list|)
DECL|macro|CONSTRUCT
undef|#
directive|undef
name|CONSTRUCT
DECL|macro|FOR_EACH_GUI_CLASS
undef|#
directive|undef
name|FOR_EACH_GUI_CLASS
block|}
end_function
begin_function
DECL|function|guiVariantAtExit
name|void
name|tst_QGuiVariant
operator|::
name|guiVariantAtExit
parameter_list|()
block|{
comment|// crash test, it should not crash at QGuiApplication exit
ifndef|#
directive|ifndef
name|QTEST_NO_CURSOR
specifier|static
name|QVariant
name|cursor
init|=
name|QCursor
argument_list|()
decl_stmt|;
endif|#
directive|endif
specifier|static
name|QVariant
name|point
init|=
name|QPoint
argument_list|()
decl_stmt|;
specifier|static
name|QVariant
name|icon
init|=
name|QIcon
argument_list|()
decl_stmt|;
specifier|static
name|QVariant
name|image
init|=
name|QImage
argument_list|()
decl_stmt|;
specifier|static
name|QVariant
name|palette
init|=
name|QPalette
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|QTEST_NO_CURSOR
name|Q_UNUSED
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|Q_UNUSED
argument_list|(
name|point
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|icon
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|image
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|palette
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|iconEquality
name|void
name|tst_QGuiVariant
operator|::
name|iconEquality
parameter_list|()
block|{
name|QIcon
name|i
decl_stmt|;
name|QVariant
name|a
init|=
name|i
decl_stmt|;
name|QVariant
name|b
init|=
name|i
decl_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|i
operator|=
name|QIcon
argument_list|(
literal|":/black.png"
argument_list|)
expr_stmt|;
name|a
operator|=
name|i
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|!=
name|b
argument_list|)
expr_stmt|;
name|b
operator|=
name|a
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|i
operator|=
name|QIcon
argument_list|(
literal|":/black2.png"
argument_list|)
expr_stmt|;
name|a
operator|=
name|i
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|!=
name|b
argument_list|)
expr_stmt|;
name|b
operator|=
name|i
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
comment|// This is a "different" QIcon
comment|// even if the contents are the same
name|b
operator|=
name|QIcon
argument_list|(
literal|":/black2.png"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|!=
name|b
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QGuiVariant
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qguivariant.moc"
end_include
end_unit
