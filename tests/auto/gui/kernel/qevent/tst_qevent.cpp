begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtCore/qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qcoreevent.h>
end_include
begin_class
DECL|class|tst_QEvent
class|class
name|tst_QEvent
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QEvent
parameter_list|()
constructor_decl|;
name|~
name|tst_QEvent
parameter_list|()
destructor_decl|;
private|private
name|slots
private|:
name|void
name|registerEventType_data
parameter_list|()
function_decl|;
name|void
name|registerEventType
parameter_list|()
function_decl|;
name|void
name|exhaustEventTypeRegistration
parameter_list|()
function_decl|;
comment|// keep behind registerEventType() test
private|private:
DECL|member|registerEventTypeSucceeded
name|bool
name|registerEventTypeSucceeded
decl_stmt|;
comment|// track success of registerEventType for use by exhaustEventTypeRegistration()
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QEvent
name|tst_QEvent
operator|::
name|tst_QEvent
parameter_list|()
member_init_list|:
name|registerEventTypeSucceeded
argument_list|(
literal|true
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~tst_QEvent
name|tst_QEvent
operator|::
name|~
name|tst_QEvent
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|registerEventType_data
name|void
name|tst_QEvent
operator|::
name|registerEventType_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"hint"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
comment|// default argument
name|QTest
operator|::
name|newRow
argument_list|(
literal|"default"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
name|int
argument_list|(
name|QEvent
operator|::
name|MaxUser
argument_list|)
expr_stmt|;
comment|// hint not valid
name|QTest
operator|::
name|newRow
argument_list|(
literal|"User-1"
argument_list|)
operator|<<
name|int
argument_list|(
name|QEvent
operator|::
name|User
operator|-
literal|1
argument_list|)
operator|<<
name|int
argument_list|(
name|QEvent
operator|::
name|MaxUser
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// hint not valid II
name|QTest
operator|::
name|newRow
argument_list|(
literal|"MaxUser+1"
argument_list|)
operator|<<
name|int
argument_list|(
name|QEvent
operator|::
name|MaxUser
operator|+
literal|1
argument_list|)
operator|<<
name|int
argument_list|(
name|QEvent
operator|::
name|MaxUser
operator|-
literal|2
argument_list|)
expr_stmt|;
comment|// hint valid, but already taken
name|QTest
operator|::
name|newRow
argument_list|(
literal|"MaxUser-1"
argument_list|)
operator|<<
name|int
argument_list|(
name|QEvent
operator|::
name|MaxUser
operator|-
literal|1
argument_list|)
operator|<<
name|int
argument_list|(
name|QEvent
operator|::
name|MaxUser
operator|-
literal|3
argument_list|)
expr_stmt|;
comment|// hint valid, but not taken
name|QTest
operator|::
name|newRow
argument_list|(
literal|"User + 1000"
argument_list|)
operator|<<
name|int
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|1000
argument_list|)
operator|<<
name|int
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|1000
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|registerEventType
name|void
name|tst_QEvent
operator|::
name|registerEventType
parameter_list|()
block|{
specifier|const
name|bool
name|oldRegisterEventTypeSucceeded
init|=
name|registerEventTypeSucceeded
decl_stmt|;
name|registerEventTypeSucceeded
operator|=
literal|false
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|hint
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QEvent
operator|::
name|registerEventType
argument_list|(
name|hint
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|registerEventTypeSucceeded
operator|=
name|oldRegisterEventTypeSucceeded
expr_stmt|;
block|}
end_function
begin_function
DECL|function|exhaustEventTypeRegistration
name|void
name|tst_QEvent
operator|::
name|exhaustEventTypeRegistration
parameter_list|()
block|{
if|if
condition|(
operator|!
name|registerEventTypeSucceeded
condition|)
name|QSKIP
argument_list|(
literal|"requires the previous test (registerEventType) to have finished successfully"
argument_list|)
expr_stmt|;
name|int
name|i
init|=
name|QEvent
operator|::
name|User
decl_stmt|;
name|int
name|result
decl_stmt|;
while|while
condition|(
operator|(
name|result
operator|=
name|QEvent
operator|::
name|registerEventType
argument_list|(
name|i
argument_list|)
operator|)
operator|==
name|i
condition|)
operator|++
name|i
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
name|int
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|int
argument_list|(
name|QEvent
operator|::
name|MaxUser
operator|-
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|=
name|QEvent
operator|::
name|User
operator|+
literal|1001
expr_stmt|;
while|while
condition|(
operator|(
name|result
operator|=
name|QEvent
operator|::
name|registerEventType
argument_list|(
name|i
argument_list|)
operator|)
operator|==
name|i
condition|)
operator|++
name|i
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
name|int
argument_list|(
name|QEvent
operator|::
name|MaxUser
operator|-
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QEvent
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qevent.moc"
end_include
end_unit
