begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_define
DECL|macro|Q_TEST_QPIXMAPCACHE
define|#
directive|define
name|Q_TEST_QPIXMAPCACHE
end_define
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qpixmapcache.h>
end_include
begin_include
include|#
directive|include
file|"private/qpixmapcache_p.h"
end_include
begin_class
DECL|class|tst_QPixmapCache
class|class
name|tst_QPixmapCache
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QPixmapCache
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QPixmapCache
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|init
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|cacheLimit
parameter_list|()
function_decl|;
name|void
name|setCacheLimit
parameter_list|()
function_decl|;
name|void
name|find
parameter_list|()
function_decl|;
name|void
name|insert
parameter_list|()
function_decl|;
name|void
name|replace
parameter_list|()
function_decl|;
name|void
name|remove
parameter_list|()
function_decl|;
name|void
name|clear
parameter_list|()
function_decl|;
name|void
name|pixmapKey
parameter_list|()
function_decl|;
name|void
name|noLeak
parameter_list|()
function_decl|;
name|void
name|strictCacheLimit
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|getPrivate
specifier|static
name|QPixmapCache
operator|::
name|KeyData
modifier|*
name|getPrivate
parameter_list|(
name|QPixmapCache
operator|::
name|Key
modifier|&
name|key
parameter_list|)
block|{
return|return
operator|(
operator|*
cast|reinterpret_cast
argument_list|<
name|QPixmapCache
operator|::
name|KeyData
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|key
argument_list|)
operator|)
return|;
block|}
end_function
begin_function
DECL|function|getPrivateRef
specifier|static
name|QPixmapCache
operator|::
name|KeyData
modifier|*
modifier|*
name|getPrivateRef
parameter_list|(
name|QPixmapCache
operator|::
name|Key
modifier|&
name|key
parameter_list|)
block|{
return|return
operator|(
cast|reinterpret_cast
argument_list|<
name|QPixmapCache
operator|::
name|KeyData
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|key
argument_list|)
operator|)
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|originalCacheLimit
specifier|static
name|int
name|originalCacheLimit
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|tst_QPixmapCache
name|tst_QPixmapCache
operator|::
name|tst_QPixmapCache
parameter_list|()
block|{
name|originalCacheLimit
operator|=
name|QPixmapCache
operator|::
name|cacheLimit
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~tst_QPixmapCache
name|tst_QPixmapCache
operator|::
name|~
name|tst_QPixmapCache
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|init
name|void
name|tst_QPixmapCache
operator|::
name|init
parameter_list|()
block|{
name|QPixmapCache
operator|::
name|setCacheLimit
argument_list|(
name|originalCacheLimit
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cacheLimit
name|void
name|tst_QPixmapCache
operator|::
name|cacheLimit
parameter_list|()
block|{
comment|// make sure the default is reasonable;
comment|// it was between 2048 and 10240 last time I looked at it
name|QVERIFY
argument_list|(
name|originalCacheLimit
operator|>=
literal|1024
operator|&&
name|originalCacheLimit
operator|<=
literal|20480
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|setCacheLimit
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QPixmapCache
operator|::
name|cacheLimit
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|setCacheLimit
argument_list|(
operator|-
literal|50
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QPixmapCache
operator|::
name|cacheLimit
argument_list|()
argument_list|,
operator|-
literal|50
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setCacheLimit
name|void
name|tst_QPixmapCache
operator|::
name|setCacheLimit
parameter_list|()
block|{
name|QPixmap
modifier|*
name|p1
init|=
operator|new
name|QPixmap
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|QPixmapCache
operator|::
name|insert
argument_list|(
literal|"P1"
argument_list|,
operator|*
name|p1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QPixmapCache
operator|::
name|find
argument_list|(
literal|"P1"
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|p1
expr_stmt|;
name|QPixmapCache
operator|::
name|setCacheLimit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QPixmapCache
operator|::
name|find
argument_list|(
literal|"P1"
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|p1
operator|=
operator|new
name|QPixmap
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|setCacheLimit
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|insert
argument_list|(
literal|"P1"
argument_list|,
operator|*
name|p1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QPixmapCache
operator|::
name|find
argument_list|(
literal|"P1"
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|p1
expr_stmt|;
comment|//The int part of the API
name|p1
operator|=
operator|new
name|QPixmap
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|Key
name|key
init|=
name|QPixmapCache
operator|::
name|insert
argument_list|(
operator|*
name|p1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QPixmapCache
operator|::
name|find
argument_list|(
name|key
argument_list|,
name|p1
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|p1
expr_stmt|;
name|QPixmapCache
operator|::
name|setCacheLimit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QPixmapCache
operator|::
name|find
argument_list|(
name|key
argument_list|,
name|p1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|p1
operator|=
operator|new
name|QPixmap
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|setCacheLimit
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|replace
argument_list|(
name|key
argument_list|,
operator|*
name|p1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QPixmapCache
operator|::
name|find
argument_list|(
name|key
argument_list|,
name|p1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|p1
expr_stmt|;
comment|//Let check if keys are released when the pixmap cache is
comment|//full or has been flushed.
name|QPixmapCache
operator|::
name|clear
argument_list|()
expr_stmt|;
name|p1
operator|=
operator|new
name|QPixmap
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|key
operator|=
name|QPixmapCache
operator|::
name|insert
argument_list|(
operator|*
name|p1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QPixmapCache
operator|::
name|find
argument_list|(
name|key
argument_list|,
name|p1
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|p1
operator|->
name|detach
argument_list|()
expr_stmt|;
comment|// dectach so that the cache thinks no-one is using it.
name|QPixmapCache
operator|::
name|setCacheLimit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QPixmapCache
operator|::
name|find
argument_list|(
name|key
argument_list|,
name|p1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|setCacheLimit
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|key
operator|=
name|QPixmapCache
operator|::
name|insert
argument_list|(
operator|*
name|p1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|getPrivate
argument_list|(
name|key
argument_list|)
operator|->
name|isValid
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|getPrivate
argument_list|(
name|key
argument_list|)
operator|->
name|key
argument_list|,
literal|1
argument_list|)
expr_stmt|;
operator|delete
name|p1
expr_stmt|;
comment|//Let check if removing old entries doesn't let you get
comment|// wrong pixmaps
name|QPixmapCache
operator|::
name|clear
argument_list|()
expr_stmt|;
name|QPixmap
name|p2
decl_stmt|;
name|p1
operator|=
operator|new
name|QPixmap
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|key
operator|=
name|QPixmapCache
operator|::
name|insert
argument_list|(
operator|*
name|p1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QPixmapCache
operator|::
name|find
argument_list|(
name|key
argument_list|,
operator|&
name|p2
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|//we flush the cache
name|p1
operator|->
name|detach
argument_list|()
expr_stmt|;
name|p2
operator|.
name|detach
argument_list|()
expr_stmt|;
name|QPixmapCache
operator|::
name|setCacheLimit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|setCacheLimit
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|Key
name|key2
init|=
name|QPixmapCache
operator|::
name|insert
argument_list|(
operator|*
name|p1
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|getPrivate
argument_list|(
name|key2
argument_list|)
operator|->
name|key
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QPixmapCache
operator|::
name|find
argument_list|(
name|key
argument_list|,
operator|&
name|p2
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QPixmapCache
operator|::
name|find
argument_list|(
name|key2
argument_list|,
operator|&
name|p2
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p2
argument_list|,
operator|*
name|p1
argument_list|)
expr_stmt|;
operator|delete
name|p1
expr_stmt|;
comment|//Here we simulate the flushing when the app is idle
name|QPixmapCache
operator|::
name|clear
argument_list|()
expr_stmt|;
name|QPixmapCache
operator|::
name|setCacheLimit
argument_list|(
name|originalCacheLimit
argument_list|)
expr_stmt|;
name|p1
operator|=
operator|new
name|QPixmap
argument_list|(
literal|300
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|key
operator|=
name|QPixmapCache
operator|::
name|insert
argument_list|(
operator|*
name|p1
argument_list|)
expr_stmt|;
name|p1
operator|->
name|detach
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|getPrivate
argument_list|(
name|key
argument_list|)
operator|->
name|key
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|key2
operator|=
name|QPixmapCache
operator|::
name|insert
argument_list|(
operator|*
name|p1
argument_list|)
expr_stmt|;
name|p1
operator|->
name|detach
argument_list|()
expr_stmt|;
name|key2
operator|=
name|QPixmapCache
operator|::
name|insert
argument_list|(
operator|*
name|p1
argument_list|)
expr_stmt|;
name|p1
operator|->
name|detach
argument_list|()
expr_stmt|;
name|QPixmapCache
operator|::
name|Key
name|key3
init|=
name|QPixmapCache
operator|::
name|insert
argument_list|(
operator|*
name|p1
argument_list|)
decl_stmt|;
name|p1
operator|->
name|detach
argument_list|()
expr_stmt|;
name|QPixmapCache
operator|::
name|flushDetachedPixmaps
argument_list|()
expr_stmt|;
name|key2
operator|=
name|QPixmapCache
operator|::
name|insert
argument_list|(
operator|*
name|p1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|getPrivate
argument_list|(
name|key2
argument_list|)
operator|->
name|key
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//This old key is not valid anymore after the flush
name|QCOMPARE
argument_list|(
name|getPrivate
argument_list|(
name|key
argument_list|)
operator|->
name|isValid
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QPixmapCache
operator|::
name|find
argument_list|(
name|key
argument_list|,
operator|&
name|p2
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|p1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|find
name|void
name|tst_QPixmapCache
operator|::
name|find
parameter_list|()
block|{
name|QPixmap
name|p1
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|p1
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QPixmapCache
operator|::
name|insert
argument_list|(
literal|"P1"
argument_list|,
name|p1
argument_list|)
argument_list|)
expr_stmt|;
name|QPixmap
name|p2
decl_stmt|;
name|QVERIFY
argument_list|(
name|QPixmapCache
operator|::
name|find
argument_list|(
literal|"P1"
argument_list|,
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p2
operator|.
name|width
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p2
operator|.
name|height
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
expr_stmt|;
comment|// obsolete
name|QPixmap
modifier|*
name|p3
init|=
name|QPixmapCache
operator|::
name|find
argument_list|(
literal|"P1"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|p3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p1
argument_list|,
operator|*
name|p3
argument_list|)
expr_stmt|;
comment|//The int part of the API
name|QPixmapCache
operator|::
name|Key
name|key
init|=
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|p1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QPixmapCache
operator|::
name|find
argument_list|(
name|key
argument_list|,
operator|&
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p2
operator|.
name|width
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p2
operator|.
name|height
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|clear
argument_list|()
expr_stmt|;
name|QPixmapCache
operator|::
name|setCacheLimit
argument_list|(
literal|128
argument_list|)
expr_stmt|;
name|QPixmap
name|p4
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|key
operator|=
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|p4
argument_list|)
expr_stmt|;
name|p4
operator|.
name|detach
argument_list|()
expr_stmt|;
name|QPixmap
name|p5
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QPixmapCache
operator|::
name|Key
argument_list|>
name|keys
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4000
condition|;
operator|++
name|i
control|)
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|p5
argument_list|)
expr_stmt|;
comment|//at that time the first key has been erase because no more place in the cache
name|QVERIFY
argument_list|(
name|QPixmapCache
operator|::
name|find
argument_list|(
name|key
argument_list|,
operator|&
name|p1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|getPrivate
argument_list|(
name|key
argument_list|)
operator|->
name|isValid
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insert
name|void
name|tst_QPixmapCache
operator|::
name|insert
parameter_list|()
block|{
name|QPixmap
name|p1
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|p1
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|QPixmap
name|p2
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|p2
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|yellow
argument_list|)
expr_stmt|;
comment|// Calcuate estimated num of items what fits to cache
name|int
name|estimatedNum
init|=
operator|(
literal|1024
operator|*
name|QPixmapCache
operator|::
name|cacheLimit
argument_list|()
operator|)
operator|/
operator|(
operator|(
name|p1
operator|.
name|width
argument_list|()
operator|*
name|p1
operator|.
name|height
argument_list|()
operator|*
name|p1
operator|.
name|depth
argument_list|()
operator|)
operator|/
literal|8
operator|)
decl_stmt|;
comment|// Mare sure we will put enough items to reach the cache limit
specifier|const
name|int
name|numberOfKeys
init|=
name|estimatedNum
operator|+
literal|1000
decl_stmt|;
comment|// make sure it doesn't explode
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfKeys
condition|;
operator|++
name|i
control|)
name|QPixmapCache
operator|::
name|insert
argument_list|(
literal|"0"
argument_list|,
name|p1
argument_list|)
expr_stmt|;
comment|// ditto
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numberOfKeys
condition|;
operator|++
name|j
control|)
block|{
name|QPixmap
name|p3
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|j
argument_list|)
argument_list|,
name|p3
argument_list|)
expr_stmt|;
block|}
name|int
name|num
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|numberOfKeys
condition|;
operator|++
name|k
control|)
block|{
if|if
condition|(
name|QPixmapCache
operator|::
name|find
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|k
argument_list|)
argument_list|)
condition|)
operator|++
name|num
expr_stmt|;
block|}
if|if
condition|(
name|QPixmapCache
operator|::
name|find
argument_list|(
literal|"0"
argument_list|)
condition|)
operator|++
name|num
expr_stmt|;
name|QVERIFY
argument_list|(
name|num
operator|<=
name|estimatedNum
argument_list|)
expr_stmt|;
name|QPixmap
name|p3
decl_stmt|;
name|QPixmapCache
operator|::
name|insert
argument_list|(
literal|"null"
argument_list|,
name|p3
argument_list|)
expr_stmt|;
name|QPixmap
name|c1
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|c1
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|yellow
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|insert
argument_list|(
literal|"custom"
argument_list|,
name|c1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|c1
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QPixmap
name|c2
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|c2
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|insert
argument_list|(
literal|"custom"
argument_list|,
name|c2
argument_list|)
expr_stmt|;
comment|//We have deleted the old pixmap in the cache for the same key
name|QVERIFY
argument_list|(
name|c1
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
comment|//The int part of the API
comment|// make sure it doesn't explode
name|QList
argument_list|<
name|QPixmapCache
operator|::
name|Key
argument_list|>
name|keys
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfKeys
condition|;
operator|++
name|i
control|)
block|{
name|QPixmap
name|p3
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|keys
operator|.
name|append
argument_list|(
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|p3
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|num
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|numberOfKeys
condition|;
operator|++
name|k
control|)
block|{
if|if
condition|(
name|QPixmapCache
operator|::
name|find
argument_list|(
name|keys
operator|.
name|at
argument_list|(
name|k
argument_list|)
argument_list|,
operator|&
name|p2
argument_list|)
condition|)
operator|++
name|num
expr_stmt|;
block|}
name|estimatedNum
operator|=
operator|(
literal|1024
operator|*
name|QPixmapCache
operator|::
name|cacheLimit
argument_list|()
operator|)
operator|/
operator|(
operator|(
name|p1
operator|.
name|width
argument_list|()
operator|*
name|p1
operator|.
name|height
argument_list|()
operator|*
name|p1
operator|.
name|depth
argument_list|()
operator|)
operator|/
literal|8
operator|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|num
operator|<=
name|estimatedNum
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|replace
name|void
name|tst_QPixmapCache
operator|::
name|replace
parameter_list|()
block|{
comment|//The int part of the API
name|QPixmap
name|p1
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|p1
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|QPixmap
name|p2
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|p2
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|yellow
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|Key
name|key
init|=
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|p1
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|getPrivate
argument_list|(
name|key
argument_list|)
operator|->
name|isValid
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QPixmap
name|p3
decl_stmt|;
name|QVERIFY
argument_list|(
name|QPixmapCache
operator|::
name|find
argument_list|(
name|key
argument_list|,
operator|&
name|p3
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|replace
argument_list|(
name|key
argument_list|,
name|p2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QPixmapCache
operator|::
name|find
argument_list|(
name|key
argument_list|,
operator|&
name|p3
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|getPrivate
argument_list|(
name|key
argument_list|)
operator|->
name|isValid
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|getPrivate
argument_list|(
name|key
argument_list|)
operator|->
name|key
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p3
operator|.
name|width
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p3
operator|.
name|height
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p3
argument_list|,
name|p2
argument_list|)
expr_stmt|;
comment|//Broken keys
name|QCOMPARE
argument_list|(
name|QPixmapCache
operator|::
name|replace
argument_list|(
name|QPixmapCache
operator|::
name|Key
argument_list|()
argument_list|,
name|p2
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|remove
name|void
name|tst_QPixmapCache
operator|::
name|remove
parameter_list|()
block|{
name|QPixmap
name|p1
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|p1
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|insert
argument_list|(
literal|"red"
argument_list|,
name|p1
argument_list|)
expr_stmt|;
name|p1
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|yellow
argument_list|)
expr_stmt|;
name|QPixmap
name|p2
decl_stmt|;
name|QVERIFY
argument_list|(
name|QPixmapCache
operator|::
name|find
argument_list|(
literal|"red"
argument_list|,
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|p1
operator|.
name|toImage
argument_list|()
operator|!=
name|p2
operator|.
name|toImage
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|p1
operator|.
name|toImage
argument_list|()
operator|==
name|p1
operator|.
name|toImage
argument_list|()
argument_list|)
expr_stmt|;
comment|// sanity check
name|QPixmapCache
operator|::
name|remove
argument_list|(
literal|"red"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QPixmapCache
operator|::
name|find
argument_list|(
literal|"red"
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|remove
argument_list|(
literal|"red"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QPixmapCache
operator|::
name|find
argument_list|(
literal|"red"
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|remove
argument_list|(
literal|"green"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QPixmapCache
operator|::
name|find
argument_list|(
literal|"green"
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|//The int part of the API
name|QPixmapCache
operator|::
name|clear
argument_list|()
expr_stmt|;
name|p1
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|Key
name|key
init|=
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|p1
argument_list|)
decl_stmt|;
name|p1
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|yellow
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QPixmapCache
operator|::
name|find
argument_list|(
name|key
argument_list|,
operator|&
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|p1
operator|.
name|toImage
argument_list|()
operator|!=
name|p2
operator|.
name|toImage
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|p1
operator|.
name|toImage
argument_list|()
operator|==
name|p1
operator|.
name|toImage
argument_list|()
argument_list|)
expr_stmt|;
comment|// sanity check
name|QPixmapCache
operator|::
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QPixmapCache
operator|::
name|find
argument_list|(
name|key
argument_list|,
operator|&
name|p1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|//Broken key
name|QPixmapCache
operator|::
name|remove
argument_list|(
name|QPixmapCache
operator|::
name|Key
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QPixmapCache
operator|::
name|find
argument_list|(
name|QPixmapCache
operator|::
name|Key
argument_list|()
argument_list|,
operator|&
name|p1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|//Test if keys are release
name|QPixmapCache
operator|::
name|clear
argument_list|()
expr_stmt|;
name|key
operator|=
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|getPrivate
argument_list|(
name|key
argument_list|)
operator|->
name|key
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|key
operator|=
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|getPrivate
argument_list|(
name|key
argument_list|)
operator|->
name|key
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//Test if pixmaps are correctly deleted
name|QPixmapCache
operator|::
name|clear
argument_list|()
expr_stmt|;
name|key
operator|=
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|getPrivate
argument_list|(
name|key
argument_list|)
operator|->
name|key
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QPixmapCache
operator|::
name|find
argument_list|(
name|key
argument_list|,
operator|&
name|p1
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p1
operator|.
name|isDetached
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//We mix both part of the API
name|QPixmapCache
operator|::
name|clear
argument_list|()
expr_stmt|;
name|p1
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|insert
argument_list|(
literal|"red"
argument_list|,
name|p1
argument_list|)
expr_stmt|;
name|key
operator|=
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QPixmapCache
operator|::
name|find
argument_list|(
name|key
argument_list|,
operator|&
name|p1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QPixmapCache
operator|::
name|find
argument_list|(
literal|"red"
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|tst_QPixmapCache
operator|::
name|clear
parameter_list|()
block|{
name|QPixmap
name|p1
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|p1
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
comment|// Calcuate estimated num of items what fits to cache
name|int
name|estimatedNum
init|=
operator|(
literal|1024
operator|*
name|QPixmapCache
operator|::
name|cacheLimit
argument_list|()
operator|)
operator|/
operator|(
operator|(
name|p1
operator|.
name|width
argument_list|()
operator|*
name|p1
operator|.
name|height
argument_list|()
operator|*
name|p1
operator|.
name|depth
argument_list|()
operator|)
operator|/
literal|8
operator|)
decl_stmt|;
comment|// Mare sure we will put enough items to reach the cache limit
specifier|const
name|int
name|numberOfKeys
init|=
name|estimatedNum
operator|+
literal|1000
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfKeys
condition|;
operator|++
name|i
control|)
name|QVERIFY
argument_list|(
name|QPixmapCache
operator|::
name|find
argument_list|(
literal|"x"
operator|+
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numberOfKeys
condition|;
operator|++
name|j
control|)
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|j
argument_list|)
argument_list|,
name|p1
argument_list|)
expr_stmt|;
name|int
name|num
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|numberOfKeys
condition|;
operator|++
name|k
control|)
block|{
if|if
condition|(
name|QPixmapCache
operator|::
name|find
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|k
argument_list|)
argument_list|,
name|p1
argument_list|)
condition|)
operator|++
name|num
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|num
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|numberOfKeys
condition|;
operator|++
name|k
control|)
name|QVERIFY
argument_list|(
name|QPixmapCache
operator|::
name|find
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|k
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|//The int part of the API
name|QPixmap
name|p2
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|p2
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QPixmapCache
operator|::
name|Key
argument_list|>
name|keys
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|numberOfKeys
condition|;
operator|++
name|k
control|)
name|keys
operator|.
name|append
argument_list|(
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|numberOfKeys
condition|;
operator|++
name|k
control|)
block|{
name|QVERIFY
argument_list|(
name|QPixmapCache
operator|::
name|find
argument_list|(
name|keys
operator|.
name|at
argument_list|(
name|k
argument_list|)
argument_list|,
operator|&
name|p1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|getPrivate
argument_list|(
name|keys
index|[
name|k
index|]
argument_list|)
operator|->
name|isValid
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|pixmapKey
name|void
name|tst_QPixmapCache
operator|::
name|pixmapKey
parameter_list|()
block|{
name|QPixmapCache
operator|::
name|Key
name|key
decl_stmt|;
comment|//Default constructed keys have no d pointer unless
comment|//we use them
name|QVERIFY
argument_list|(
operator|!
name|getPrivate
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
comment|//Let's put a d pointer
name|QPixmapCache
operator|::
name|KeyData
modifier|*
modifier|*
name|keyd
init|=
name|getPrivateRef
argument_list|(
name|key
argument_list|)
decl_stmt|;
operator|*
name|keyd
operator|=
operator|new
name|QPixmapCache
operator|::
name|KeyData
expr_stmt|;
name|QCOMPARE
argument_list|(
name|getPrivate
argument_list|(
name|key
argument_list|)
operator|->
name|ref
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|Key
name|key2
decl_stmt|;
comment|//Let's put a d pointer
name|QPixmapCache
operator|::
name|KeyData
modifier|*
modifier|*
name|key2d
init|=
name|getPrivateRef
argument_list|(
name|key2
argument_list|)
decl_stmt|;
operator|*
name|key2d
operator|=
operator|new
name|QPixmapCache
operator|::
name|KeyData
expr_stmt|;
name|QCOMPARE
argument_list|(
name|getPrivate
argument_list|(
name|key2
argument_list|)
operator|->
name|ref
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|key
operator|=
name|key2
expr_stmt|;
name|QCOMPARE
argument_list|(
name|getPrivate
argument_list|(
name|key2
argument_list|)
operator|->
name|ref
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|getPrivate
argument_list|(
name|key
argument_list|)
operator|->
name|ref
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|Key
name|key3
decl_stmt|;
comment|//Let's put a d pointer
name|QPixmapCache
operator|::
name|KeyData
modifier|*
modifier|*
name|key3d
init|=
name|getPrivateRef
argument_list|(
name|key3
argument_list|)
decl_stmt|;
operator|*
name|key3d
operator|=
operator|new
name|QPixmapCache
operator|::
name|KeyData
expr_stmt|;
name|QPixmapCache
operator|::
name|Key
name|key4
init|=
name|key3
decl_stmt|;
name|QCOMPARE
argument_list|(
name|getPrivate
argument_list|(
name|key3
argument_list|)
operator|->
name|ref
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|getPrivate
argument_list|(
name|key4
argument_list|)
operator|->
name|ref
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|key4
operator|=
name|key
expr_stmt|;
name|QCOMPARE
argument_list|(
name|getPrivate
argument_list|(
name|key4
argument_list|)
operator|->
name|ref
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|getPrivate
argument_list|(
name|key3
argument_list|)
operator|->
name|ref
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|Key
name|key5
argument_list|(
name|key3
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|getPrivate
argument_list|(
name|key3
argument_list|)
operator|->
name|ref
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|getPrivate
argument_list|(
name|key5
argument_list|)
operator|->
name|ref
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|//let test default constructed keys
name|QPixmapCache
operator|::
name|Key
name|key6
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|getPrivate
argument_list|(
name|key6
argument_list|)
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|Key
name|key7
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|getPrivate
argument_list|(
name|key7
argument_list|)
argument_list|)
expr_stmt|;
name|key6
operator|=
name|key7
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|getPrivate
argument_list|(
name|key6
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|getPrivate
argument_list|(
name|key7
argument_list|)
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|Key
name|key8
argument_list|(
name|key7
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|getPrivate
argument_list|(
name|key8
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function_decl
name|QT_BEGIN_NAMESPACE
specifier|extern
name|int
name|q_QPixmapCache_keyHashSize
parameter_list|()
function_decl|;
end_function_decl
begin_function
name|QT_END_NAMESPACE
DECL|function|noLeak
name|void
name|tst_QPixmapCache
operator|::
name|noLeak
parameter_list|()
block|{
name|QPixmapCache
operator|::
name|Key
name|key
decl_stmt|;
name|int
name|oldSize
init|=
name|q_QPixmapCache_keyHashSize
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|QPixmap
name|pm
argument_list|(
literal|128
argument_list|,
literal|128
argument_list|)
decl_stmt|;
name|pm
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|key
operator|=
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|pm
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|int
name|newSize
init|=
name|q_QPixmapCache_keyHashSize
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|oldSize
argument_list|,
name|newSize
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|strictCacheLimit
name|void
name|tst_QPixmapCache
operator|::
name|strictCacheLimit
parameter_list|()
block|{
specifier|const
name|int
name|limit
init|=
literal|1024
decl_stmt|;
comment|// 1024 KB
name|QPixmapCache
operator|::
name|clear
argument_list|()
expr_stmt|;
name|QPixmapCache
operator|::
name|setCacheLimit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
comment|// insert 200 64x64 pixmaps
comment|// 3200 KB for 32-bit depths
comment|// 1600 KB for 16-bit depths
comment|// not counting the duplicate entries
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|200
condition|;
operator|++
name|i
control|)
block|{
name|QPixmap
name|pixmap
argument_list|(
literal|64
argument_list|,
literal|64
argument_list|)
decl_stmt|;
name|pixmap
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|QString
name|id
init|=
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|id
operator|+
literal|"-a"
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|id
operator|+
literal|"-b"
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|QPixmapCache
operator|::
name|totalUsed
argument_list|()
operator|<=
name|limit
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QPixmapCache
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qpixmapcache.moc"
end_include
end_unit
