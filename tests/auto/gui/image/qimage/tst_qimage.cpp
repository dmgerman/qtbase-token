begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qimage.h>
end_include
begin_include
include|#
directive|include
file|<qimagereader.h>
end_include
begin_include
include|#
directive|include
file|<qlist.h>
end_include
begin_include
include|#
directive|include
file|<qmatrix.h>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_include
include|#
directive|include
file|<qpainter.h>
end_include
begin_include
include|#
directive|include
file|<private/qdrawhelper_p.h>
end_include
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QImage::Format
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|Qt::GlobalColor
argument_list|)
end_macro
begin_class
DECL|class|tst_QImage
class|class
name|tst_QImage
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QImage
parameter_list|()
constructor_decl|;
private|private
name|slots
private|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|swap
parameter_list|()
function_decl|;
name|void
name|create
parameter_list|()
function_decl|;
name|void
name|createInvalidXPM
parameter_list|()
function_decl|;
name|void
name|createFromUChar
parameter_list|()
function_decl|;
name|void
name|formatHandlersInput_data
parameter_list|()
function_decl|;
name|void
name|formatHandlersInput
parameter_list|()
function_decl|;
name|void
name|setAlphaChannel_data
parameter_list|()
function_decl|;
name|void
name|setAlphaChannel
parameter_list|()
function_decl|;
name|void
name|alphaChannel
parameter_list|()
function_decl|;
name|void
name|convertToFormat_data
parameter_list|()
function_decl|;
name|void
name|convertToFormat
parameter_list|()
function_decl|;
name|void
name|convertToFormatRgb888ToRGB32
parameter_list|()
function_decl|;
name|void
name|createAlphaMask_data
parameter_list|()
function_decl|;
name|void
name|createAlphaMask
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_IMAGE_HEURISTIC_MASK
name|void
name|createHeuristicMask
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|dotsPerMeterZero
parameter_list|()
function_decl|;
name|void
name|dotsPerMeterAndDpi
parameter_list|()
function_decl|;
name|void
name|convertToFormatPreserveDotsPrMeter
parameter_list|()
function_decl|;
name|void
name|convertToFormatPreserveText
parameter_list|()
function_decl|;
name|void
name|rotate_data
parameter_list|()
function_decl|;
name|void
name|rotate
parameter_list|()
function_decl|;
name|void
name|copy
parameter_list|()
function_decl|;
name|void
name|load
parameter_list|()
function_decl|;
name|void
name|loadFromData
parameter_list|()
function_decl|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DATASTREAM
argument_list|)
name|void
name|loadFromDataStream
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|setPixel_data
parameter_list|()
function_decl|;
name|void
name|setPixel
parameter_list|()
function_decl|;
name|void
name|setColorCount
parameter_list|()
function_decl|;
name|void
name|setColor
parameter_list|()
function_decl|;
name|void
name|rasterClipping
parameter_list|()
function_decl|;
name|void
name|pointOverloads
parameter_list|()
function_decl|;
name|void
name|destructor
parameter_list|()
function_decl|;
name|void
name|cacheKey
parameter_list|()
function_decl|;
name|void
name|smoothScale
parameter_list|()
function_decl|;
name|void
name|smoothScale2_data
parameter_list|()
function_decl|;
name|void
name|smoothScale2
parameter_list|()
function_decl|;
name|void
name|smoothScale3
parameter_list|()
function_decl|;
name|void
name|smoothScaleBig
parameter_list|()
function_decl|;
name|void
name|smoothScaleAlpha
parameter_list|()
function_decl|;
name|void
name|transformed_data
parameter_list|()
function_decl|;
name|void
name|transformed
parameter_list|()
function_decl|;
name|void
name|transformed2
parameter_list|()
function_decl|;
name|void
name|scaled
parameter_list|()
function_decl|;
name|void
name|paintEngine
parameter_list|()
function_decl|;
name|void
name|setAlphaChannelWhilePainting
parameter_list|()
function_decl|;
name|void
name|smoothScaledSubImage
parameter_list|()
function_decl|;
name|void
name|nullSize_data
parameter_list|()
function_decl|;
name|void
name|nullSize
parameter_list|()
function_decl|;
name|void
name|premultipliedAlphaConsistency
parameter_list|()
function_decl|;
name|void
name|compareIndexed
parameter_list|()
function_decl|;
name|void
name|fillColor_data
parameter_list|()
function_decl|;
name|void
name|fillColor
parameter_list|()
function_decl|;
name|void
name|fillColorWithAlpha
parameter_list|()
function_decl|;
name|void
name|fillRGB888
parameter_list|()
function_decl|;
name|void
name|fillPixel_data
parameter_list|()
function_decl|;
name|void
name|fillPixel
parameter_list|()
function_decl|;
name|void
name|rgbSwapped_data
parameter_list|()
function_decl|;
name|void
name|rgbSwapped
parameter_list|()
function_decl|;
name|void
name|mirrored_data
parameter_list|()
function_decl|;
name|void
name|mirrored
parameter_list|()
function_decl|;
name|void
name|inplaceRgbSwapped_data
parameter_list|()
function_decl|;
name|void
name|inplaceRgbSwapped
parameter_list|()
function_decl|;
name|void
name|inplaceMirrored_data
parameter_list|()
function_decl|;
name|void
name|inplaceMirrored
parameter_list|()
function_decl|;
name|void
name|inplaceMirroredOdd_data
parameter_list|()
function_decl|;
name|void
name|inplaceMirroredOdd
parameter_list|()
function_decl|;
name|void
name|inplaceRgbMirrored
parameter_list|()
function_decl|;
name|void
name|inplaceConversion_data
parameter_list|()
function_decl|;
name|void
name|inplaceConversion
parameter_list|()
function_decl|;
name|void
name|deepCopyWhenPaintingActive
parameter_list|()
function_decl|;
name|void
name|scaled_QTBUG19157
parameter_list|()
function_decl|;
name|void
name|convertOverUnPreMul
parameter_list|()
function_decl|;
name|void
name|scaled_QTBUG35972
parameter_list|()
function_decl|;
name|void
name|convertToPixelFormat
parameter_list|()
function_decl|;
name|void
name|convertToImageFormat_data
parameter_list|()
function_decl|;
name|void
name|convertToImageFormat
parameter_list|()
function_decl|;
name|void
name|invertPixelsRGB_data
parameter_list|()
function_decl|;
name|void
name|invertPixelsRGB
parameter_list|()
function_decl|;
name|void
name|exifOrientation_data
parameter_list|()
function_decl|;
name|void
name|exifOrientation
parameter_list|()
function_decl|;
name|void
name|cleanupFunctions
parameter_list|()
function_decl|;
name|void
name|devicePixelRatio
parameter_list|()
function_decl|;
private|private:
DECL|member|m_prefix
specifier|const
name|QString
name|m_prefix
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QImage
name|tst_QImage
operator|::
name|tst_QImage
parameter_list|()
member_init_list|:
name|m_prefix
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"images/"
argument_list|)
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|initTestCase
name|void
name|tst_QImage
operator|::
name|initTestCase
parameter_list|()
block|{
name|QVERIFY
argument_list|(
operator|!
name|m_prefix
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|swap
name|void
name|tst_QImage
operator|::
name|swap
parameter_list|()
block|{
name|QImage
name|i1
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|,
name|i2
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|i1
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|i2
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
specifier|const
name|qint64
name|i1k
init|=
name|i1
operator|.
name|cacheKey
argument_list|()
decl_stmt|;
specifier|const
name|qint64
name|i2k
init|=
name|i2
operator|.
name|cacheKey
argument_list|()
decl_stmt|;
name|i1
operator|.
name|swap
argument_list|(
name|i2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i1
operator|.
name|cacheKey
argument_list|()
argument_list|,
name|i2k
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i1
operator|.
name|size
argument_list|()
argument_list|,
name|QSize
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i2
operator|.
name|cacheKey
argument_list|()
argument_list|,
name|i1k
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i2
operator|.
name|size
argument_list|()
argument_list|,
name|QSize
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test if QImage (or any functions called from QImage) throws an
end_comment
begin_comment
comment|// exception when creating an extremely large image.
end_comment
begin_comment
comment|// QImage::create() should return "false" in this case.
end_comment
begin_function
DECL|function|create
name|void
name|tst_QImage
operator|::
name|create
parameter_list|()
block|{
name|bool
name|cr
init|=
literal|true
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QT_TRY
block|{
endif|#
directive|endif
comment|//QImage image(7000000, 7000000, 8, 256, QImage::IgnoreEndian);
name|QImage
name|image
argument_list|(
literal|7000000
argument_list|,
literal|7000000
argument_list|,
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
decl_stmt|;
name|image
operator|.
name|setColorCount
argument_list|(
literal|256
argument_list|)
expr_stmt|;
name|cr
operator|=
operator|!
name|image
operator|.
name|isNull
argument_list|()
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{     }
endif|#
directive|endif
name|QVERIFY
argument_list|(
operator|!
name|cr
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createInvalidXPM
name|void
name|tst_QImage
operator|::
name|createInvalidXPM
parameter_list|()
block|{
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QImage::QImage(), XPM is not supported"
argument_list|)
expr_stmt|;
specifier|const
name|char
modifier|*
name|xpm
index|[]
init|=
block|{
literal|""
block|}
decl_stmt|;
name|QImage
name|invalidXPM
argument_list|(
name|xpm
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|invalidXPM
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createFromUChar
name|void
name|tst_QImage
operator|::
name|createFromUChar
parameter_list|()
block|{
name|uint
name|data
index|[]
init|=
block|{
literal|0xff010101U
block|,
literal|0xff020202U
block|,
literal|0xff030303U
block|,
literal|0xff040404U
block|}
decl_stmt|;
comment|// When the data is const, nothing you do to the image will change the source data.
name|QImage
name|i1
argument_list|(
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|data
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|8
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|i1
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0xFF010101U
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i1
operator|.
name|pixel
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0xFF020202U
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i1
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0xFF030303U
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i1
operator|.
name|pixel
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0xFF040404U
argument_list|)
expr_stmt|;
block|{
name|QImage
name|i
argument_list|(
name|i1
argument_list|)
decl_stmt|;
name|i
operator|.
name|setPixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|i1
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0xFF010101U
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
operator|(
name|QRgb
operator|*
operator|)
name|data
argument_list|,
literal|0xFF010101U
argument_list|)
expr_stmt|;
operator|*
operator|(
operator|(
name|QRgb
operator|*
operator|)
name|i1
operator|.
name|bits
argument_list|()
operator|)
operator|=
literal|0xFF070707U
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i1
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0xFF070707U
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
operator|(
name|QRgb
operator|*
operator|)
name|data
argument_list|,
literal|0xFF010101U
argument_list|)
expr_stmt|;
comment|// Changing copies should not change the original image or data.
block|{
name|QImage
name|i
argument_list|(
name|i1
argument_list|)
decl_stmt|;
name|i
operator|.
name|setPixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
operator|(
name|QRgb
operator|*
operator|)
name|data
argument_list|,
literal|0xFF010101U
argument_list|)
expr_stmt|;
name|i1
operator|.
name|setPixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i1
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0xFF000009U
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0xFF000005U
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|i1
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0xFF000009U
argument_list|)
expr_stmt|;
comment|// When the data is non-const, nothing you do to copies of the image will change the source data,
comment|// but changing the image (here via bits()) will change the source data.
name|QImage
name|i2
argument_list|(
operator|(
name|uchar
operator|*
operator|)
name|data
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|8
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|i2
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0xFF010101U
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i2
operator|.
name|pixel
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0xFF020202U
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i2
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0xFF030303U
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i2
operator|.
name|pixel
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0xFF040404U
argument_list|)
expr_stmt|;
block|{
name|QImage
name|i
argument_list|(
name|i2
argument_list|)
decl_stmt|;
name|i
operator|.
name|setPixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|i2
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0xFF010101U
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
operator|(
name|QRgb
operator|*
operator|)
name|data
argument_list|,
literal|0xFF010101U
argument_list|)
expr_stmt|;
operator|*
operator|(
operator|(
name|QRgb
operator|*
operator|)
name|i2
operator|.
name|bits
argument_list|()
operator|)
operator|=
literal|0xFF070707U
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i2
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0xFF070707U
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
operator|(
name|QRgb
operator|*
operator|)
name|data
argument_list|,
literal|0xFF070707U
argument_list|)
expr_stmt|;
comment|// Changing the data will change the image in either case.
name|QImage
name|i3
argument_list|(
operator|(
name|uchar
operator|*
operator|)
name|data
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|8
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|QImage
name|i4
argument_list|(
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|data
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|8
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
operator|*
operator|(
name|QRgb
operator|*
operator|)
name|data
operator|=
literal|0xFF060606U
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i3
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0xFF060606U
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i4
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0xFF060606U
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|formatHandlersInput_data
name|void
name|tst_QImage
operator|::
name|formatHandlersInput_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"testFormat"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"testFile"
argument_list|)
expr_stmt|;
comment|// add a new line here when a file is added
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ICO"
argument_list|)
operator|<<
literal|"ICO"
operator|<<
name|m_prefix
operator|+
literal|"image.ico"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"PNG"
argument_list|)
operator|<<
literal|"PNG"
operator|<<
name|m_prefix
operator|+
literal|"image.png"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"GIF"
argument_list|)
operator|<<
literal|"GIF"
operator|<<
name|m_prefix
operator|+
literal|"image.gif"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BMP"
argument_list|)
operator|<<
literal|"BMP"
operator|<<
name|m_prefix
operator|+
literal|"image.bmp"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"JPEG"
argument_list|)
operator|<<
literal|"JPEG"
operator|<<
name|m_prefix
operator|+
literal|"image.jpg"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"PBM"
argument_list|)
operator|<<
literal|"PBM"
operator|<<
name|m_prefix
operator|+
literal|"image.pbm"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"PGM"
argument_list|)
operator|<<
literal|"PGM"
operator|<<
name|m_prefix
operator|+
literal|"image.pgm"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"PPM"
argument_list|)
operator|<<
literal|"PPM"
operator|<<
name|m_prefix
operator|+
literal|"image.ppm"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"XBM"
argument_list|)
operator|<<
literal|"XBM"
operator|<<
name|m_prefix
operator|+
literal|"image.xbm"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"XPM"
argument_list|)
operator|<<
literal|"XPM"
operator|<<
name|m_prefix
operator|+
literal|"image.xpm"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|formatHandlersInput
name|void
name|tst_QImage
operator|::
name|formatHandlersInput
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|testFormat
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|formats
init|=
name|QImageReader
operator|::
name|supportedImageFormats
argument_list|()
decl_stmt|;
comment|// qDebug("Image input formats : %s", formats.join(" | ").latin1());
name|bool
name|formatSupported
init|=
literal|false
decl_stmt|;
for|for
control|(
name|QList
argument_list|<
name|QByteArray
argument_list|>
operator|::
name|Iterator
name|it
init|=
name|formats
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|formats
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
operator|*
name|it
operator|==
name|testFormat
operator|.
name|toLower
argument_list|()
condition|)
block|{
name|formatSupported
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|formatSupported
condition|)
block|{
comment|//     qDebug(QImage::imageFormat(testFile));
name|QCOMPARE
argument_list|(
name|testFormat
operator|.
name|toLatin1
argument_list|()
operator|.
name|toLower
argument_list|()
argument_list|,
name|QImageReader
operator|::
name|imageFormat
argument_list|(
name|testFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QString
name|msg
init|=
literal|"Format not supported : "
decl_stmt|;
name|QSKIP
argument_list|(
name|QString
argument_list|(
name|msg
operator|+
name|testFormat
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setAlphaChannel_data
name|void
name|tst_QImage
operator|::
name|setAlphaChannel_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"red"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"green"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"blue"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"alpha"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"gray"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"red at 0%, gray"
argument_list|)
operator|<<
literal|255
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"red at 25%, gray"
argument_list|)
operator|<<
literal|255
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|63
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"red at 50%, gray"
argument_list|)
operator|<<
literal|255
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|127
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"red at 100%, gray"
argument_list|)
operator|<<
literal|255
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|191
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"red at 0%, 32bit"
argument_list|)
operator|<<
literal|255
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"red at 25%, 32bit"
argument_list|)
operator|<<
literal|255
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|63
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"red at 50%, 32bit"
argument_list|)
operator|<<
literal|255
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|127
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"red at 100%, 32bit"
argument_list|)
operator|<<
literal|255
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|191
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"green at 0%, gray"
argument_list|)
operator|<<
literal|0
operator|<<
literal|255
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"green at 25%, gray"
argument_list|)
operator|<<
literal|0
operator|<<
literal|255
operator|<<
literal|0
operator|<<
literal|63
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"green at 50%, gray"
argument_list|)
operator|<<
literal|0
operator|<<
literal|255
operator|<<
literal|0
operator|<<
literal|127
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"green at 100%, gray"
argument_list|)
operator|<<
literal|0
operator|<<
literal|255
operator|<<
literal|0
operator|<<
literal|191
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"green at 0%, 32bit"
argument_list|)
operator|<<
literal|0
operator|<<
literal|255
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"green at 25%, 32bit"
argument_list|)
operator|<<
literal|0
operator|<<
literal|255
operator|<<
literal|0
operator|<<
literal|63
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"green at 50%, 32bit"
argument_list|)
operator|<<
literal|0
operator|<<
literal|255
operator|<<
literal|0
operator|<<
literal|127
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"green at 100%, 32bit"
argument_list|)
operator|<<
literal|0
operator|<<
literal|255
operator|<<
literal|0
operator|<<
literal|191
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blue at 0%, gray"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|255
operator|<<
literal|0
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blue at 25%, gray"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|255
operator|<<
literal|63
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blue at 50%, gray"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|255
operator|<<
literal|127
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blue at 100%, gray"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|255
operator|<<
literal|191
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blue at 0%, 32bit"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|255
operator|<<
literal|0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blue at 25%, 32bit"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|255
operator|<<
literal|63
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blue at 50%, 32bit"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|255
operator|<<
literal|127
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blue at 100%, 32bit"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|255
operator|<<
literal|191
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setAlphaChannel
name|void
name|tst_QImage
operator|::
name|setAlphaChannel
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|red
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|green
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|blue
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|gray
argument_list|)
expr_stmt|;
name|int
name|width
init|=
literal|100
decl_stmt|;
name|int
name|height
init|=
literal|100
decl_stmt|;
name|QImage
name|image
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|image
operator|.
name|fill
argument_list|(
name|qRgb
argument_list|(
name|red
argument_list|,
name|green
argument_list|,
name|blue
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create the alpha channel
name|QImage
name|alphaChannel
decl_stmt|;
if|if
condition|(
name|gray
condition|)
block|{
name|alphaChannel
operator|=
name|QImage
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
expr_stmt|;
name|alphaChannel
operator|.
name|setColorCount
argument_list|(
literal|256
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
operator|++
name|i
control|)
name|alphaChannel
operator|.
name|setColor
argument_list|(
name|i
argument_list|,
name|qRgb
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|alphaChannel
operator|.
name|fill
argument_list|(
name|alpha
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|alphaChannel
operator|=
name|QImage
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
expr_stmt|;
name|alphaChannel
operator|.
name|fill
argument_list|(
name|qRgb
argument_list|(
name|alpha
argument_list|,
name|alpha
argument_list|,
name|alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|image
operator|.
name|setAlphaChannel
argument_list|(
name|alphaChannel
argument_list|)
expr_stmt|;
name|image
operator|=
name|image
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|image
operator|.
name|format
argument_list|()
operator|==
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
expr_stmt|;
comment|// alpha of 0 becomes black at a=0 due to premultiplication
name|QRgb
name|pixel
init|=
name|alpha
operator|==
literal|0
condition|?
literal|0
else|:
name|qRgba
argument_list|(
name|red
argument_list|,
name|green
argument_list|,
name|blue
argument_list|,
name|alpha
argument_list|)
decl_stmt|;
name|bool
name|allPixelsOK
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
operator|++
name|y
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
operator|++
name|x
control|)
block|{
name|allPixelsOK
operator|&=
name|image
operator|.
name|pixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|==
name|pixel
expr_stmt|;
block|}
block|}
name|QVERIFY
argument_list|(
name|allPixelsOK
argument_list|)
expr_stmt|;
name|QImage
name|outAlpha
init|=
name|image
operator|.
name|alphaChannel
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|outAlpha
operator|.
name|size
argument_list|()
argument_list|,
name|image
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|bool
name|allAlphaOk
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
operator|++
name|y
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
operator|++
name|x
control|)
block|{
name|allAlphaOk
operator|&=
name|outAlpha
operator|.
name|pixelIndex
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|==
name|alpha
expr_stmt|;
block|}
block|}
name|QVERIFY
argument_list|(
name|allAlphaOk
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|alphaChannel
name|void
name|tst_QImage
operator|::
name|alphaChannel
parameter_list|()
block|{
name|QImage
name|img
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
name|QImage
operator|::
name|Format_Mono
argument_list|)
decl_stmt|;
name|img
operator|.
name|setColor
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|img
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|img
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|img
argument_list|)
decl_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|6
argument_list|,
literal|6
argument_list|,
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|alphaChannel
argument_list|()
argument_list|,
name|img
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|.
name|alphaChannel
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|convertToFormat_data
name|void
name|tst_QImage
operator|::
name|convertToFormat_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"inFormat"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|uint
argument_list|>
argument_list|(
literal|"inPixel"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"resFormat"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|uint
argument_list|>
argument_list|(
literal|"resPixel"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"red rgb32 -> argb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xffff0000
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0xffff0000
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"green rgb32 -> argb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xff00ff00
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0xff00ff00
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blue rgb32 -> argb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xff0000ff
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0xff0000ff
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"red rgb32 -> rgb16"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xffff0000
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xffff0000
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"green rgb32 -> rgb16"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xff00ff00
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xff00ff00
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blue rgb32 -> rgb16"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xff0000ff
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xff0000ff
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"funky rgb32 -> rgb16"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xfff0c080
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xfff7c384
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"red rgb32 -> argb32_pm"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xffff0000
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0xffff0000
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"green rgb32 -> argb32_pm"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xff00ff00
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0xff00ff00
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blue rgb32 -> argb32_pm"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xff0000ff
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0xff0000ff
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semired argb32 -> pm"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0x7fff0000u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f7f0000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semigreen argb32 -> pm"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0x7f00ff00u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f007f00u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiblue argb32 -> pm"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0x7f0000ffu
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f00007fu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiwhite argb32 -> pm"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0x7fffffffu
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f7f7f7fu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiblack argb32 -> pm"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0x7f000000u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f000000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semired pm -> argb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f7f0000u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0x7fff0000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semigreen pm -> argb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f007f00u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0x7f00ff00u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiblue pm -> argb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f00007fu
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0x7f0000ffu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiwhite pm -> argb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f7f7f7fu
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0x7fffffffu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiblack pm -> argb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f000000u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0x7f000000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semired pm -> rgb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f7f0000u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xffff0000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semigreen pm -> rgb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f007f00u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xff00ff00u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiblue pm -> rgb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f00007fu
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xff0000ffu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiwhite pm -> rgb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f7f7f7fu
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xffffffffu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiblack pm -> rgb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f000000u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xff000000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semired argb32 -> rgb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0x7fff0000u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xffff0000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semigreen argb32 -> rgb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0x7f00ff00u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xff00ff00u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiblue argb32 -> rgb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0x7f0000ffu
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xff0000ffu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiwhite argb -> rgb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0x7fffffffu
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xffffffffu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiblack argb -> rgb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0x7f000000u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xff000000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"black mono -> rgb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_Mono
argument_list|)
operator|<<
literal|0x00000000u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xff000000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"white mono -> rgb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_Mono
argument_list|)
operator|<<
literal|0x00000001u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xffffffffu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"red rgb16 -> argb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xffff0000
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0xffff0000
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"green rgb16 -> argb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xff00ff00
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0xff00ff00
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blue rgb16 -> argb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xff0000ff
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0xff0000ff
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"red rgb16 -> rgb16"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xffff0000
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xffff0000
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"green rgb16 -> rgb16"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xff00ff00
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xff00ff00
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blue rgb16 -> rgb16"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xff0000ff
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xff0000ff
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semired argb32 -> rgb16"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0x7fff0000u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xffff0000
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semigreen argb32 -> rgb16"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0x7f00ff00u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xff00ff00
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiblue argb32 -> rgb16"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0x7f0000ffu
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xff0000ff
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semired pm -> rgb16"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f7f0000u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xffff0000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semigreen pm -> rgb16"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f007f00u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xff00ff00u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiblue pm -> rgb16"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f00007fu
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xff0000ffu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiwhite pm -> rgb16"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f7f7f7fu
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xffffffffu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiblack pm -> rgb16"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f000000u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xff000000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mono -> mono lsb"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_Mono
argument_list|)
operator|<<
literal|1u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_MonoLSB
argument_list|)
operator|<<
literal|0xffffffffu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mono lsb -> mono"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_MonoLSB
argument_list|)
operator|<<
literal|1u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_Mono
argument_list|)
operator|<<
literal|0xffffffffu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"red rgb32 -> rgb666"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xffff0000
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB666
argument_list|)
operator|<<
literal|0xffff0000
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"green rgb32 -> rgb666"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xff00ff00
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB666
argument_list|)
operator|<<
literal|0xff00ff00
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blue rgb32 -> rgb666"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xff0000ff
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB666
argument_list|)
operator|<<
literal|0xff0000ff
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"red rgb16 -> rgb666"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xffff0000
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB666
argument_list|)
operator|<<
literal|0xffff0000
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"green rgb16 -> rgb666"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xff00ff00
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB666
argument_list|)
operator|<<
literal|0xff00ff00
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blue rgb16 -> rgb666"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xff0000ff
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB666
argument_list|)
operator|<<
literal|0xff0000ff
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"red rgb32 -> rgb15"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xffff0000
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB555
argument_list|)
operator|<<
literal|0xffff0000
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"green rgb32 -> rgb15"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xff00ff00
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB555
argument_list|)
operator|<<
literal|0xff00ff00
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blue rgb32 -> rgb15"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xff0000ff
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB555
argument_list|)
operator|<<
literal|0xff0000ff
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"funky rgb32 -> rgb15"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xfff0c080
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB555
argument_list|)
operator|<<
literal|0xfff7c684
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"red rgb16 -> rgb15"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xffff0000
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB555
argument_list|)
operator|<<
literal|0xffff0000
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"green rgb16 -> rgb15"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xff00ff00
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB555
argument_list|)
operator|<<
literal|0xff00ff00
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blue rgb16 -> rgb15"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xff0000ff
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB555
argument_list|)
operator|<<
literal|0xff0000ff
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"funky rgb16 -> rgb15"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xfff0c080
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB555
argument_list|)
operator|<<
literal|0xfff7c684
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"red rgb32 -> argb8565"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xffff0000
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
argument_list|)
operator|<<
literal|0xffff0000
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"green rgb32 -> argb8565"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xff00ff00
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
argument_list|)
operator|<<
literal|0xff00ff00
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blue rgb32 -> argb8565"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xff0000ff
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
argument_list|)
operator|<<
literal|0xff0000ff
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"red rgb16 -> argb8565"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xffff0000
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
argument_list|)
operator|<<
literal|0xffff0000
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"green rgb16 -> argb8565"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xff00ff00
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
argument_list|)
operator|<<
literal|0xff00ff00
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blue rgb16 -> argb8565"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xff0000ff
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
argument_list|)
operator|<<
literal|0xff0000ff
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"red argb8565 -> argb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
argument_list|)
operator|<<
literal|0xffff0000
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0xffff0000
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"green argb8565 -> argb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
argument_list|)
operator|<<
literal|0xff00ff00
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0xff00ff00
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blue argb8565 -> argb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
argument_list|)
operator|<<
literal|0xff0000ff
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0xff0000ff
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semired argb32 -> argb8565"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0x7fff0000u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
argument_list|)
operator|<<
literal|0x7f7b0000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semigreen argb32 -> argb8565"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0x7f00ff00u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
argument_list|)
operator|<<
literal|0x7f007d00u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiblue argb32 -> argb8565"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0x7f0000ffu
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
argument_list|)
operator|<<
literal|0x7f00007bu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semired pm -> argb8565"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f7f0000u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
argument_list|)
operator|<<
literal|0x7f7b0000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semigreen pm -> argb8565"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f007f00u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
argument_list|)
operator|<<
literal|0x7f007d00u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiblue pm -> argb8565"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f00007fu
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
argument_list|)
operator|<<
literal|0x7f00007bu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiwhite pm -> argb8565"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f7f7f7fu
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
argument_list|)
operator|<<
literal|0x7f7b7d7bu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiblack pm -> argb8565"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f000000u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
argument_list|)
operator|<<
literal|0x7f000000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"red rgb666 -> argb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB666
argument_list|)
operator|<<
literal|0xffff0000
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0xffff0000
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"green rgb666 -> argb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB666
argument_list|)
operator|<<
literal|0xff00ff00
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0xff00ff00
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blue rgb666 -> argb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB666
argument_list|)
operator|<<
literal|0xff0000ff
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0xff0000ff
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semired argb32 -> rgb666"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0x7fff0000u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB666
argument_list|)
operator|<<
literal|0xffff0000
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semigreen argb32 -> rgb666"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0x7f00ff00u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB666
argument_list|)
operator|<<
literal|0xff00ff00
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiblue argb32 -> rgb666"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0x7f0000ffu
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB666
argument_list|)
operator|<<
literal|0xff0000ff
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semired pm -> rgb666"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f7f0000u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB666
argument_list|)
operator|<<
literal|0xffff0000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semigreen pm -> rgb666"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f007f00u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB666
argument_list|)
operator|<<
literal|0xff00ff00u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiblue pm -> rgb666"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f00007fu
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB666
argument_list|)
operator|<<
literal|0xff0000ffu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiwhite pm -> rgb666"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f7f7f7fu
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB666
argument_list|)
operator|<<
literal|0xffffffffu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiblack pm -> rgb666"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f000000u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB666
argument_list|)
operator|<<
literal|0xff000000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"red rgb15 -> argb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB555
argument_list|)
operator|<<
literal|0xffff0000
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0xffff0000
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"green rgb15 -> argb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB555
argument_list|)
operator|<<
literal|0xff00ff00
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0xff00ff00
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blue rgb15 -> argb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB555
argument_list|)
operator|<<
literal|0xff0000ff
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0xff0000ff
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semired argb32 -> rgb15"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0x7fff0000u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB555
argument_list|)
operator|<<
literal|0xffff0000
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semigreen argb32 -> rgb15"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0x7f00ff00u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB555
argument_list|)
operator|<<
literal|0xff00ff00
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiblue argb32 -> rgb15"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0x7f0000ffu
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB555
argument_list|)
operator|<<
literal|0xff0000ff
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semired pm -> rgb15"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f7f0000u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB555
argument_list|)
operator|<<
literal|0xffff0000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semigreen pm -> rgb15"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f007f00u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB555
argument_list|)
operator|<<
literal|0xff00ff00u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiblue pm -> rgb15"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f00007fu
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB555
argument_list|)
operator|<<
literal|0xff0000ffu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiwhite pm -> rgb15"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f7f7f7fu
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB555
argument_list|)
operator|<<
literal|0xffffffffu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiblack pm -> rgb15"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f000000u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB555
argument_list|)
operator|<<
literal|0xff000000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"red rgb32 -> argb8555"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xffff0000
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8555_Premultiplied
argument_list|)
operator|<<
literal|0xffff0000
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"green rgb32 -> argb8555"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xff00ff00
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8555_Premultiplied
argument_list|)
operator|<<
literal|0xff00ff00
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blue rgb32 -> argb8555"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xff0000ff
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8555_Premultiplied
argument_list|)
operator|<<
literal|0xff0000ff
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"red rgb16 -> argb8555"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xffff0000
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8555_Premultiplied
argument_list|)
operator|<<
literal|0xffff0000
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"green rgb16 -> argb8555"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xff00ff00
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8555_Premultiplied
argument_list|)
operator|<<
literal|0xff00ff00
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blue rgb16 -> argb8555"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xff0000ff
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8555_Premultiplied
argument_list|)
operator|<<
literal|0xff0000ff
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"red argb8555 -> argb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8555_Premultiplied
argument_list|)
operator|<<
literal|0xffff0000
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0xffff0000
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"green argb8555 -> argb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8555_Premultiplied
argument_list|)
operator|<<
literal|0xff00ff00
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0xff00ff00
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blue argb8555 -> argb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8555_Premultiplied
argument_list|)
operator|<<
literal|0xff0000ff
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0xff0000ff
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semired argb32 -> argb8555"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0x7fff0000u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8555_Premultiplied
argument_list|)
operator|<<
literal|0x7f7b0000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semigreen argb32 -> argb8555"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0x7f00ff00u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8555_Premultiplied
argument_list|)
operator|<<
literal|0x7f007b00u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiblue argb32 -> argb8555"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0x7f0000ffu
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8555_Premultiplied
argument_list|)
operator|<<
literal|0x7f00007bu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semired pm -> argb8555"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f7f0000u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8555_Premultiplied
argument_list|)
operator|<<
literal|0x7f7b0000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semigreen pm -> argb8555"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f007f00u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8555_Premultiplied
argument_list|)
operator|<<
literal|0x7f007b00u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiblue pm -> argb8555"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f00007fu
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8555_Premultiplied
argument_list|)
operator|<<
literal|0x7f00007bu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiwhite pm -> argb8555"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f7f7f7fu
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8555_Premultiplied
argument_list|)
operator|<<
literal|0x7f7b7b7bu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiblack pm -> argb8555"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f000000u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8555_Premultiplied
argument_list|)
operator|<<
literal|0x7f000000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"red rgb32 -> rgb888"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xffff0000
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB888
argument_list|)
operator|<<
literal|0xffff0000
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"green rgb32 -> rgb888"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xff00ff00
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB888
argument_list|)
operator|<<
literal|0xff00ff00
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blue rgb32 -> rgb888"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
operator|<<
literal|0xff0000ff
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB888
argument_list|)
operator|<<
literal|0xff0000ff
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"red rgb16 -> rgb888"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xffff0000
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB888
argument_list|)
operator|<<
literal|0xffff0000
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"green rgb16 -> rgb888"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xff00ff00
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB888
argument_list|)
operator|<<
literal|0xff00ff00
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blue rgb16 -> rgb888"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xff0000ff
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB888
argument_list|)
operator|<<
literal|0xff0000ff
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"red rgb888 -> argb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB888
argument_list|)
operator|<<
literal|0xffff0000
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0xffff0000
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"green rgb888 -> argb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB888
argument_list|)
operator|<<
literal|0xff00ff00
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0xff00ff00
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blue rgb888 -> argb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB888
argument_list|)
operator|<<
literal|0xff0000ff
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0xff0000ff
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"red rgb888 -> rgbx8888"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB888
argument_list|)
operator|<<
literal|0xffff0000
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGBX8888
argument_list|)
operator|<<
literal|0xffff0000
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"green rgb888 -> rgbx8888"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB888
argument_list|)
operator|<<
literal|0xff00ff00
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGBX8888
argument_list|)
operator|<<
literal|0xff00ff00
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blue rgb888 -> rgbx8888"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB888
argument_list|)
operator|<<
literal|0xff0000ff
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGBX8888
argument_list|)
operator|<<
literal|0xff0000ff
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semired argb32 -> rgb888"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0x7fff0000u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB888
argument_list|)
operator|<<
literal|0xffff0000
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semigreen argb32 -> rgb888"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0x7f00ff00u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB888
argument_list|)
operator|<<
literal|0xff00ff00
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiblue argb32 -> rgb888"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0x7f0000ffu
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB888
argument_list|)
operator|<<
literal|0xff0000ff
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semired pm -> rgb888"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f7f0000u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB888
argument_list|)
operator|<<
literal|0xffff0000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semigreen pm -> rgb888"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f007f00u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB888
argument_list|)
operator|<<
literal|0xff00ff00u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiblue pm -> rgb888"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f00007fu
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB888
argument_list|)
operator|<<
literal|0xff0000ffu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiwhite pm -> rgb888"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f7f7f7fu
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB888
argument_list|)
operator|<<
literal|0xffffffffu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiblack pm -> rgb888"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f000000u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB888
argument_list|)
operator|<<
literal|0xff000000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"red rgba8888 -> argb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGBA8888
argument_list|)
operator|<<
literal|0xffff0000
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0xffff0000
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"green rgba8888 -> argb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGBA8888
argument_list|)
operator|<<
literal|0xff00ff00
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0xff00ff00
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blue rgba8888 -> argb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGBA8888
argument_list|)
operator|<<
literal|0xff0000ff
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0xff0000ff
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semired rgba8888 -> argb pm"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGBA8888
argument_list|)
operator|<<
literal|0x7fff0000u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f7f0000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semigreen rgba8888 -> argb pm"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGBA8888
argument_list|)
operator|<<
literal|0x7f00ff00u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f007f00u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiblue rgba8888 -> argb pm"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGBA8888
argument_list|)
operator|<<
literal|0x7f0000ffu
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f00007fu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiwhite rgba8888 -> argb pm"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGBA8888
argument_list|)
operator|<<
literal|0x7fffffffu
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f7f7f7fu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"semiblack rgba8888 -> argb pm"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGBA8888
argument_list|)
operator|<<
literal|0x7f000000u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0x7f000000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"red rgb30 -> argb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB30
argument_list|)
operator|<<
literal|0xffff0000
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0xffff0000
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"green rgb30 -> argb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB30
argument_list|)
operator|<<
literal|0xff00ff00
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0xff00ff00
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blue rgb30 -> argb32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB30
argument_list|)
operator|<<
literal|0xff0000ff
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0xff0000ff
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"white gray8 -> argb pm"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_Grayscale8
argument_list|)
operator|<<
literal|0xfffffeffu
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0xfffefefeu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gray gray8 -> argb pm"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_Grayscale8
argument_list|)
operator|<<
literal|0xff565557u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0xff555555u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"black gray8 -> argb pm"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_Grayscale8
argument_list|)
operator|<<
literal|0xff000100u
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
operator|<<
literal|0xff000000u
expr_stmt|;
block|}
end_function
begin_function
DECL|function|convertToFormat
name|void
name|tst_QImage
operator|::
name|convertToFormat
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|inFormat
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|uint
argument_list|,
name|inPixel
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|resFormat
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|uint
argument_list|,
name|resPixel
argument_list|)
expr_stmt|;
name|QImage
name|src
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|,
name|QImage
operator|::
name|Format
argument_list|(
name|inFormat
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|inFormat
operator|==
name|QImage
operator|::
name|Format_Mono
condition|)
block|{
name|src
operator|.
name|setColor
argument_list|(
literal|0
argument_list|,
name|qRgba
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0xff
argument_list|)
argument_list|)
expr_stmt|;
name|src
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
name|qRgba
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|255
argument_list|,
literal|0xff
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|src
operator|.
name|height
argument_list|()
condition|;
operator|++
name|y
control|)
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|src
operator|.
name|width
argument_list|()
condition|;
operator|++
name|x
control|)
name|src
operator|.
name|setPixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|inPixel
argument_list|)
expr_stmt|;
name|QImage
name|result
init|=
name|src
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format
argument_list|(
name|resFormat
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|src
operator|.
name|width
argument_list|()
argument_list|,
name|result
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|src
operator|.
name|height
argument_list|()
argument_list|,
name|result
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|bool
name|same
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|result
operator|.
name|height
argument_list|()
condition|;
operator|++
name|y
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|result
operator|.
name|width
argument_list|()
condition|;
operator|++
name|x
control|)
block|{
name|QRgb
name|pixel
init|=
name|result
operator|.
name|pixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|same
operator|&=
operator|(
name|pixel
operator|==
name|resPixel
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|same
condition|)
block|{
name|printf
argument_list|(
literal|"expect=%08x, result=%08x\n"
argument_list|,
name|resPixel
argument_list|,
name|pixel
argument_list|)
expr_stmt|;
name|y
operator|=
literal|100000
expr_stmt|;
break|break;
block|}
block|}
block|}
name|QVERIFY
argument_list|(
name|same
argument_list|)
expr_stmt|;
comment|// repeat tests converting from an image with nonstandard stride
name|int
name|dp
init|=
operator|(
name|src
operator|.
name|depth
argument_list|()
operator|<
literal|8
operator|||
name|result
operator|.
name|depth
argument_list|()
operator|<
literal|8
operator|)
condition|?
literal|8
else|:
literal|1
decl_stmt|;
name|QImage
name|src2
argument_list|(
name|src
operator|.
name|bits
argument_list|()
operator|+
operator|(
name|dp
operator|*
name|src
operator|.
name|depth
argument_list|()
operator|)
operator|/
literal|8
argument_list|,
name|src
operator|.
name|width
argument_list|()
operator|-
name|dp
operator|*
literal|2
argument_list|,
name|src
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|,
name|src
operator|.
name|bytesPerLine
argument_list|()
argument_list|,
name|src
operator|.
name|format
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|src
operator|.
name|depth
argument_list|()
operator|<
literal|8
condition|)
name|src2
operator|.
name|setColorTable
argument_list|(
name|src
operator|.
name|colorTable
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QImage
name|result2
init|=
name|src2
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format
argument_list|(
name|resFormat
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|src2
operator|.
name|width
argument_list|()
argument_list|,
name|result2
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|src2
operator|.
name|height
argument_list|()
argument_list|,
name|result2
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|QImage
name|expected2
argument_list|(
name|result
operator|.
name|bits
argument_list|()
operator|+
operator|(
name|dp
operator|*
name|result
operator|.
name|depth
argument_list|()
operator|)
operator|/
literal|8
argument_list|,
name|result
operator|.
name|width
argument_list|()
operator|-
name|dp
operator|*
literal|2
argument_list|,
name|result
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|,
name|result
operator|.
name|bytesPerLine
argument_list|()
argument_list|,
name|result
operator|.
name|format
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|depth
argument_list|()
operator|<
literal|8
condition|)
name|expected2
operator|.
name|setColorTable
argument_list|(
name|result
operator|.
name|colorTable
argument_list|()
argument_list|)
expr_stmt|;
name|result2
operator|.
name|save
argument_list|(
literal|"result2.xpm"
argument_list|,
literal|"XPM"
argument_list|)
expr_stmt|;
name|expected2
operator|.
name|save
argument_list|(
literal|"expected2.xpm"
argument_list|,
literal|"XPM"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result2
argument_list|,
name|expected2
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|QLatin1String
argument_list|(
literal|"result2.xpm"
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|QLatin1String
argument_list|(
literal|"expected2.xpm"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|convertToFormatRgb888ToRGB32
name|void
name|tst_QImage
operator|::
name|convertToFormatRgb888ToRGB32
parameter_list|()
block|{
comment|// 545 so width % 4 != 0. This ensure there is padding at the end of the scanlines
specifier|const
name|int
name|height
init|=
literal|545
decl_stmt|;
specifier|const
name|int
name|width
init|=
literal|545
decl_stmt|;
name|QImage
name|source
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|QImage
operator|::
name|Format_RGB888
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
operator|++
name|y
control|)
block|{
name|uchar
modifier|*
name|srcPixels
init|=
name|source
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
operator|*
literal|3
condition|;
operator|++
name|x
control|)
name|srcPixels
index|[
name|x
index|]
operator|=
name|x
expr_stmt|;
block|}
name|QImage
name|rgb32Image
init|=
name|source
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB888
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|rgb32Image
operator|.
name|format
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_RGB888
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
operator|++
name|x
control|)
block|{
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
operator|++
name|y
control|)
name|QCOMPARE
argument_list|(
name|rgb32Image
operator|.
name|pixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|,
name|source
operator|.
name|pixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|createAlphaMask_data
name|void
name|tst_QImage
operator|::
name|createAlphaMask_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"alpha1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"alpha2"
argument_list|)
expr_stmt|;
name|int
name|alphas
index|[]
init|=
block|{
literal|0
block|,
literal|127
block|,
literal|255
block|}
decl_stmt|;
for|for
control|(
name|unsigned
name|a1
init|=
literal|0
init|;
name|a1
operator|<
sizeof|sizeof
argument_list|(
name|alphas
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|int
argument_list|)
condition|;
operator|++
name|a1
control|)
block|{
for|for
control|(
name|unsigned
name|a2
init|=
literal|0
init|;
name|a2
operator|<
sizeof|sizeof
argument_list|(
name|alphas
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|int
argument_list|)
condition|;
operator|++
name|a2
control|)
block|{
if|if
condition|(
name|a1
operator|==
name|a2
condition|)
continue|continue;
for|for
control|(
name|int
name|x
init|=
literal|10
init|;
name|x
operator|<
literal|18
condition|;
name|x
operator|+=
literal|3
control|)
block|{
for|for
control|(
name|int
name|y
init|=
literal|100
init|;
name|y
operator|<
literal|108
condition|;
name|y
operator|+=
literal|3
control|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"x=%1, y=%2, a1=%3, a2=%4"
argument_list|)
operator|.
name|arg
argument_list|(
name|x
argument_list|)
operator|.
name|arg
argument_list|(
name|y
argument_list|)
operator|.
name|arg
argument_list|(
name|alphas
index|[
name|a1
index|]
argument_list|)
operator|.
name|arg
argument_list|(
name|alphas
index|[
name|a2
index|]
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|x
operator|<<
name|y
operator|<<
name|alphas
index|[
name|a1
index|]
operator|<<
name|alphas
index|[
name|a2
index|]
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|createAlphaMask
name|void
name|tst_QImage
operator|::
name|createAlphaMask
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|alpha1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|alpha2
argument_list|)
expr_stmt|;
name|QSize
name|size
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|)
decl_stmt|;
name|int
name|pixelsInLines
init|=
name|size
operator|.
name|width
argument_list|()
operator|+
name|size
operator|.
name|height
argument_list|()
operator|-
literal|1
decl_stmt|;
name|int
name|pixelsOutofLines
init|=
name|size
operator|.
name|width
argument_list|()
operator|*
name|size
operator|.
name|height
argument_list|()
operator|-
name|pixelsInLines
decl_stmt|;
comment|// Generate an white image with two lines, horizontal at y and vertical at x.
comment|// Lines have alpha of alpha2, rest has alpha of alpha1
name|QImage
name|image
argument_list|(
name|size
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|cy
init|=
literal|0
init|;
name|cy
operator|<
name|image
operator|.
name|height
argument_list|()
condition|;
operator|++
name|cy
control|)
block|{
for|for
control|(
name|int
name|cx
init|=
literal|0
init|;
name|cx
operator|<
name|image
operator|.
name|width
argument_list|()
condition|;
operator|++
name|cx
control|)
block|{
name|int
name|alpha
init|=
operator|(
name|y
operator|==
name|cy
operator|||
name|x
operator|==
name|cx
operator|)
condition|?
name|alpha2
else|:
name|alpha1
decl_stmt|;
name|image
operator|.
name|setPixel
argument_list|(
name|cx
argument_list|,
name|cy
argument_list|,
name|qRgba
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|255
argument_list|,
name|alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|QImage
name|mask
init|=
name|image
operator|.
name|createAlphaMask
argument_list|(
name|Qt
operator|::
name|OrderedAlphaDither
argument_list|)
decl_stmt|;
comment|// Sanity check...
name|QCOMPARE
argument_list|(
name|mask
operator|.
name|width
argument_list|()
argument_list|,
name|image
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mask
operator|.
name|height
argument_list|()
argument_list|,
name|image
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
comment|// Sum up the number of pixels set for both lines and other area
name|int
name|sumAlpha1
init|=
literal|0
decl_stmt|;
name|int
name|sumAlpha2
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|cy
init|=
literal|0
init|;
name|cy
operator|<
name|image
operator|.
name|height
argument_list|()
condition|;
operator|++
name|cy
control|)
block|{
for|for
control|(
name|int
name|cx
init|=
literal|0
init|;
name|cx
operator|<
name|image
operator|.
name|width
argument_list|()
condition|;
operator|++
name|cx
control|)
block|{
name|int
modifier|*
name|alpha
init|=
operator|(
name|y
operator|==
name|cy
operator|||
name|x
operator|==
name|cx
operator|)
condition|?
operator|&
name|sumAlpha2
else|:
operator|&
name|sumAlpha1
decl_stmt|;
operator|*
name|alpha
operator|+=
name|mask
operator|.
name|pixelIndex
argument_list|(
name|cx
argument_list|,
name|cy
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Compare the set bits to whats expected for that alpha.
specifier|const
name|int
name|threshold
init|=
literal|5
decl_stmt|;
name|QVERIFY
argument_list|(
name|qAbs
argument_list|(
name|sumAlpha1
operator|*
literal|255
operator|/
name|pixelsOutofLines
operator|-
name|alpha1
argument_list|)
operator|<
name|threshold
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qAbs
argument_list|(
name|sumAlpha2
operator|*
literal|255
operator|/
name|pixelsInLines
operator|-
name|alpha2
argument_list|)
operator|<
name|threshold
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dotsPerMeterZero
name|void
name|tst_QImage
operator|::
name|dotsPerMeterZero
parameter_list|()
block|{
name|QImage
name|img
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|img
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|defaultDpmX
init|=
name|img
operator|.
name|dotsPerMeterX
argument_list|()
decl_stmt|;
name|int
name|defaultDpmY
init|=
name|img
operator|.
name|dotsPerMeterY
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|defaultDpmX
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|defaultDpmY
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|img
operator|.
name|setDotsPerMeterX
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|img
operator|.
name|setDotsPerMeterY
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|dotsPerMeterX
argument_list|()
argument_list|,
name|defaultDpmX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|dotsPerMeterY
argument_list|()
argument_list|,
name|defaultDpmY
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// verify that setting dotsPerMeter has an effect on the dpi.
end_comment
begin_function
DECL|function|dotsPerMeterAndDpi
name|void
name|tst_QImage
operator|::
name|dotsPerMeterAndDpi
parameter_list|()
block|{
name|QImage
name|img
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|img
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QPoint
name|defaultLogicalDpi
argument_list|(
name|img
operator|.
name|logicalDpiX
argument_list|()
argument_list|,
name|img
operator|.
name|logicalDpiY
argument_list|()
argument_list|)
decl_stmt|;
name|QPoint
name|defaultPhysicalDpi
argument_list|(
name|img
operator|.
name|physicalDpiX
argument_list|()
argument_list|,
name|img
operator|.
name|physicalDpiY
argument_list|()
argument_list|)
decl_stmt|;
name|img
operator|.
name|setDotsPerMeterX
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// set x
name|QCOMPARE
argument_list|(
name|img
operator|.
name|logicalDpiY
argument_list|()
argument_list|,
name|defaultLogicalDpi
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
comment|// no effect on y
name|QCOMPARE
argument_list|(
name|img
operator|.
name|physicalDpiY
argument_list|()
argument_list|,
name|defaultPhysicalDpi
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|logicalDpiX
argument_list|()
operator|!=
name|defaultLogicalDpi
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
comment|// x changed
name|QVERIFY
argument_list|(
name|img
operator|.
name|physicalDpiX
argument_list|()
operator|!=
name|defaultPhysicalDpi
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|img
operator|.
name|setDotsPerMeterY
argument_list|(
literal|200
argument_list|)
expr_stmt|;
comment|// set y
name|QVERIFY
argument_list|(
name|img
operator|.
name|logicalDpiY
argument_list|()
operator|!=
name|defaultLogicalDpi
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
comment|// y changed
name|QVERIFY
argument_list|(
name|img
operator|.
name|physicalDpiY
argument_list|()
operator|!=
name|defaultPhysicalDpi
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rotate_data
name|void
name|tst_QImage
operator|::
name|rotate_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QImage
operator|::
name|Format
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"degrees"
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|degrees
decl_stmt|;
name|degrees
operator|<<
literal|0
operator|<<
literal|90
operator|<<
literal|180
operator|<<
literal|270
expr_stmt|;
foreach|foreach
control|(
name|int
name|d
decl|,
name|degrees
control|)
block|{
name|QString
name|title
init|=
name|QString
argument_list|(
literal|"%1 %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|title
operator|.
name|arg
argument_list|(
literal|"Format_RGB32"
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB32
operator|<<
name|d
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|title
operator|.
name|arg
argument_list|(
literal|"Format_ARGB32"
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB32
operator|<<
name|d
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|title
operator|.
name|arg
argument_list|(
literal|"Format_ARGB32_Premultiplied"
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
operator|<<
name|d
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|title
operator|.
name|arg
argument_list|(
literal|"Format_RGB16"
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB16
operator|<<
name|d
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|title
operator|.
name|arg
argument_list|(
literal|"Format_ARGB8565_Premultiplied"
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
operator|<<
name|d
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|title
operator|.
name|arg
argument_list|(
literal|"Format_RGB666"
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB666
operator|<<
name|d
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|title
operator|.
name|arg
argument_list|(
literal|"Format_RGB555"
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB555
operator|<<
name|d
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|title
operator|.
name|arg
argument_list|(
literal|"Format_ARGB8555_Premultiplied"
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB8555_Premultiplied
operator|<<
name|d
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|title
operator|.
name|arg
argument_list|(
literal|"Format_RGB888"
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB888
operator|<<
name|d
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|title
operator|.
name|arg
argument_list|(
literal|"Format_Indexed8"
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_Indexed8
operator|<<
name|d
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|title
operator|.
name|arg
argument_list|(
literal|"Format_RGBX8888"
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGBX8888
operator|<<
name|d
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|title
operator|.
name|arg
argument_list|(
literal|"Format_RGBA8888_Premultiplied"
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGBA8888_Premultiplied
operator|<<
name|d
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|title
operator|.
name|arg
argument_list|(
literal|"Format_Alpha8"
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_Alpha8
operator|<<
name|d
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|title
operator|.
name|arg
argument_list|(
literal|"Format_Grayscale8"
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_Grayscale8
operator|<<
name|d
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rotate
name|void
name|tst_QImage
operator|::
name|rotate
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QImage
operator|::
name|Format
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|degrees
argument_list|)
expr_stmt|;
comment|// test if rotate90 is lossless
name|int
name|w
init|=
literal|54
decl_stmt|;
name|int
name|h
init|=
literal|13
decl_stmt|;
name|QImage
name|original
argument_list|(
name|w
argument_list|,
name|h
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|original
operator|.
name|fill
argument_list|(
name|qRgb
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|255
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|==
name|QImage
operator|::
name|Format_Indexed8
condition|)
block|{
name|original
operator|.
name|setColorCount
argument_list|(
literal|256
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|255
condition|;
operator|++
name|i
control|)
name|original
operator|.
name|setColor
argument_list|(
name|i
argument_list|,
name|qRgb
argument_list|(
literal|0
argument_list|,
name|i
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|original
operator|.
name|colorTable
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|w
condition|;
operator|++
name|x
control|)
block|{
name|original
operator|.
name|setPixel
argument_list|(
name|x
argument_list|,
literal|0
argument_list|,
name|qRgb
argument_list|(
name|x
argument_list|,
literal|0
argument_list|,
literal|128
argument_list|)
argument_list|)
expr_stmt|;
name|original
operator|.
name|setPixel
argument_list|(
name|x
argument_list|,
name|h
operator|-
literal|1
argument_list|,
name|qRgb
argument_list|(
literal|0
argument_list|,
literal|255
operator|-
name|x
argument_list|,
literal|128
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
name|original
operator|.
name|setPixel
argument_list|(
literal|0
argument_list|,
name|y
argument_list|,
name|qRgb
argument_list|(
name|y
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
argument_list|)
expr_stmt|;
name|original
operator|.
name|setPixel
argument_list|(
name|w
operator|-
literal|1
argument_list|,
name|y
argument_list|,
name|qRgb
argument_list|(
literal|0
argument_list|,
literal|255
operator|-
name|y
argument_list|,
literal|255
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|const
name|int
name|n
init|=
name|original
operator|.
name|colorTable
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|w
condition|;
operator|++
name|x
control|)
block|{
name|original
operator|.
name|setPixel
argument_list|(
name|x
argument_list|,
literal|0
argument_list|,
name|x
operator|%
name|n
argument_list|)
expr_stmt|;
name|original
operator|.
name|setPixel
argument_list|(
name|x
argument_list|,
name|h
operator|-
literal|1
argument_list|,
name|n
operator|-
operator|(
name|x
operator|%
name|n
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
name|original
operator|.
name|setPixel
argument_list|(
literal|0
argument_list|,
name|y
argument_list|,
name|y
operator|%
name|n
argument_list|)
expr_stmt|;
name|original
operator|.
name|setPixel
argument_list|(
name|w
operator|-
literal|1
argument_list|,
name|y
argument_list|,
name|n
operator|-
operator|(
name|y
operator|%
name|n
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|// original.save("rotated90_original.png", "png");
comment|// Initialize the matrix manually (do not use rotate) to avoid rounding errors
name|QMatrix
name|matRotate90
decl_stmt|;
name|matRotate90
operator|.
name|rotate
argument_list|(
name|degrees
argument_list|)
expr_stmt|;
name|QImage
name|dest
init|=
name|original
decl_stmt|;
comment|// And rotate it 4 times, then the image should be identical to the original
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|dest
operator|=
name|dest
operator|.
name|transformed
argument_list|(
name|matRotate90
argument_list|)
expr_stmt|;
block|}
comment|// Make sure they are similar in format before we compare them.
name|dest
operator|=
name|dest
operator|.
name|convertToFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
comment|// dest.save("rotated90_result.png","png");
name|QCOMPARE
argument_list|(
name|original
argument_list|,
name|dest
argument_list|)
expr_stmt|;
comment|// Test with QMatrix::rotate 90 also, since we trust that now
name|matRotate90
operator|.
name|rotate
argument_list|(
name|degrees
argument_list|)
expr_stmt|;
name|dest
operator|=
name|original
expr_stmt|;
comment|// And rotate it 4 times, then the image should be identical to the original
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|dest
operator|=
name|dest
operator|.
name|transformed
argument_list|(
name|matRotate90
argument_list|)
expr_stmt|;
block|}
comment|// Make sure they are similar in format before we compare them.
name|dest
operator|=
name|dest
operator|.
name|convertToFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|original
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|copy
name|void
name|tst_QImage
operator|::
name|copy
parameter_list|()
block|{
comment|// Task 99250
block|{
name|QImage
name|img
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|img
operator|.
name|copy
argument_list|(
name|QRect
argument_list|(
literal|1000
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|load
name|void
name|tst_QImage
operator|::
name|load
parameter_list|()
block|{
specifier|const
name|QString
name|filePath
init|=
name|m_prefix
operator|+
name|QLatin1String
argument_list|(
literal|"image.jpg"
argument_list|)
decl_stmt|;
name|QImage
name|dest
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|dest
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|dest
operator|.
name|load
argument_list|(
literal|"image_that_does_not_exist.png"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|dest
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|dest
operator|.
name|load
argument_list|(
name|filePath
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|dest
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|loadFromData
name|void
name|tst_QImage
operator|::
name|loadFromData
parameter_list|()
block|{
specifier|const
name|QString
name|filePath
init|=
name|m_prefix
operator|+
name|QLatin1String
argument_list|(
literal|"image.jpg"
argument_list|)
decl_stmt|;
name|QImage
name|original
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|original
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QByteArray
name|ba
decl_stmt|;
block|{
name|QBuffer
name|buf
argument_list|(
operator|&
name|ba
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|buf
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|original
operator|.
name|save
argument_list|(
operator|&
name|buf
argument_list|,
literal|"BMP"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|ba
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QImage
name|dest
decl_stmt|;
name|QVERIFY
argument_list|(
name|dest
operator|.
name|loadFromData
argument_list|(
name|ba
argument_list|,
literal|"BMP"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|dest
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|original
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|dest
operator|.
name|loadFromData
argument_list|(
name|QByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|dest
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DATASTREAM
argument_list|)
end_if
begin_function
DECL|function|loadFromDataStream
name|void
name|tst_QImage
operator|::
name|loadFromDataStream
parameter_list|()
block|{
specifier|const
name|QString
name|filePath
init|=
name|m_prefix
operator|+
name|QLatin1String
argument_list|(
literal|"image.jpg"
argument_list|)
decl_stmt|;
name|QImage
name|original
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|original
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QByteArray
name|ba
decl_stmt|;
block|{
name|QDataStream
name|s
argument_list|(
operator|&
name|ba
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|s
operator|<<
name|original
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|ba
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QImage
name|dest
decl_stmt|;
block|{
name|QDataStream
name|s
argument_list|(
operator|&
name|ba
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|s
operator|>>
name|dest
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|dest
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|original
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|{
name|ba
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QDataStream
name|s
argument_list|(
operator|&
name|ba
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|s
operator|>>
name|dest
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|dest
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DATASTREAM
end_comment
begin_function
DECL|function|setPixel_data
name|void
name|tst_QImage
operator|::
name|setPixel_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|uint
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|uint
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ARGB32 red"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0xffff0000
operator|<<
literal|0xffff0000
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ARGB32 green"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0xff00ff00
operator|<<
literal|0xff00ff00
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ARGB32 blue"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|<<
literal|0xff0000ff
operator|<<
literal|0xff0000ff
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RGB16 red"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xffff0000
operator|<<
literal|0xf800u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RGB16 green"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xff00ff00
operator|<<
literal|0x07e0u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RGB16 blue"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
operator|<<
literal|0xff0000ff
operator|<<
literal|0x001fu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ARGB8565_Premultiplied red"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
argument_list|)
operator|<<
literal|0xffff0000
operator|<<
literal|0xf800ffu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ARGB8565_Premultiplied green"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
argument_list|)
operator|<<
literal|0xff00ff00
operator|<<
literal|0x07e0ffu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ARGB8565_Premultiplied blue"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
argument_list|)
operator|<<
literal|0xff0000ff
operator|<<
literal|0x001fffu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RGB666 red"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB666
argument_list|)
operator|<<
literal|0xffff0000
operator|<<
literal|0x03f000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RGB666 green"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB666
argument_list|)
operator|<<
literal|0xff00ff00
operator|<<
literal|0x000fc0u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RGB666 blue"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB666
argument_list|)
operator|<<
literal|0xff0000ff
operator|<<
literal|0x00003fu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RGB555 red"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB555
argument_list|)
operator|<<
literal|0xffff0000
operator|<<
literal|0x7c00u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RGB555 green"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB555
argument_list|)
operator|<<
literal|0xff00ff00
operator|<<
literal|0x03e0u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RGB555 blue"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB555
argument_list|)
operator|<<
literal|0xff0000ff
operator|<<
literal|0x001fu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ARGB8555_Premultiplied red"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8555_Premultiplied
argument_list|)
operator|<<
literal|0xffff0000
operator|<<
literal|0x7c00ffu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ARGB8555_Premultiplied green"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8555_Premultiplied
argument_list|)
operator|<<
literal|0xff00ff00
operator|<<
literal|0x03e0ffu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ARGB8555_Premultiplied blue"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8555_Premultiplied
argument_list|)
operator|<<
literal|0xff0000ff
operator|<<
literal|0x001fffu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RGB888 red"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB888
argument_list|)
operator|<<
literal|0xffff0000
operator|<<
literal|0xff0000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RGB888 green"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB888
argument_list|)
operator|<<
literal|0xff00ff00
operator|<<
literal|0x00ff00u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RGB888 blue"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB888
argument_list|)
operator|<<
literal|0xff0000ff
operator|<<
literal|0x0000ffu
expr_stmt|;
if|#
directive|if
name|Q_BYTE_ORDER
operator|==
name|Q_BIG_ENDIAN
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RGBA8888 red"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGBA8888
argument_list|)
operator|<<
literal|0xffff0000u
operator|<<
literal|0xff0000ffu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RGBA8888 green"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGBA8888
argument_list|)
operator|<<
literal|0xff00ff00u
operator|<<
literal|0x00ff00ffu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RGBA8888 blue"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGBA8888
argument_list|)
operator|<<
literal|0xff0000ffu
operator|<<
literal|0x0000ffffu
expr_stmt|;
else|#
directive|else
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RGBA8888 red"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGBA8888
argument_list|)
operator|<<
literal|0xffff0000u
operator|<<
literal|0xff0000ffu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RGBA8888 green"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGBA8888
argument_list|)
operator|<<
literal|0xff00ff00u
operator|<<
literal|0xff00ff00u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RGBA8888 blue"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGBA8888
argument_list|)
operator|<<
literal|0xff0000ffu
operator|<<
literal|0xffff0000u
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"A2BGR30_Premultiplied red"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_A2BGR30_Premultiplied
argument_list|)
operator|<<
literal|0xffff0000u
operator|<<
literal|0xc00003ffu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"A2BGR30_Premultiplied green"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_A2BGR30_Premultiplied
argument_list|)
operator|<<
literal|0xff00ff00u
operator|<<
literal|0xc00ffc00u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"A2BGR30_Premultiplied blue"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_A2BGR30_Premultiplied
argument_list|)
operator|<<
literal|0xff0000ffu
operator|<<
literal|0xfff00000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RGB30 red"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB30
argument_list|)
operator|<<
literal|0xffff0000u
operator|<<
literal|0xfff00000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RGB30 green"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB30
argument_list|)
operator|<<
literal|0xff00ff00u
operator|<<
literal|0xc00ffc00u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RGB30 blue"
argument_list|)
operator|<<
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB30
argument_list|)
operator|<<
literal|0xff0000ffu
operator|<<
literal|0xc00003ffu
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setPixel
name|void
name|tst_QImage
operator|::
name|setPixel
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|uint
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|uint
argument_list|,
name|expected
argument_list|)
expr_stmt|;
specifier|const
name|int
name|w
init|=
literal|13
decl_stmt|;
specifier|const
name|int
name|h
init|=
literal|15
decl_stmt|;
name|QImage
name|img
argument_list|(
name|w
argument_list|,
name|h
argument_list|,
name|QImage
operator|::
name|Format
argument_list|(
name|format
argument_list|)
argument_list|)
decl_stmt|;
comment|// fill image
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|w
condition|;
operator|++
name|x
control|)
name|img
operator|.
name|setPixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// check pixel values
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
case|:
case|case
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
case|:
case|case
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
case|:
case|case
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGBX8888
argument_list|)
case|:
case|case
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGBA8888
argument_list|)
case|:
case|case
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGBA8888_Premultiplied
argument_list|)
case|:
case|case
name|int
argument_list|(
name|QImage
operator|::
name|Format_A2BGR30_Premultiplied
argument_list|)
case|:
case|case
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB30
argument_list|)
case|:
block|{
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
specifier|const
name|quint32
modifier|*
name|row
init|=
operator|(
specifier|const
name|quint32
operator|*
operator|)
operator|(
name|img
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
operator|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|w
condition|;
operator|++
name|x
control|)
block|{
name|quint32
name|result
init|=
name|row
index|[
name|x
index|]
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|expected
condition|)
name|printf
argument_list|(
literal|"[x,y]: %d,%d, expected=%08x, result=%08x\n"
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|uint
argument_list|(
name|result
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
case|case
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB555
argument_list|)
case|:
case|case
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
case|:
block|{
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
specifier|const
name|quint16
modifier|*
name|row
init|=
operator|(
specifier|const
name|quint16
operator|*
operator|)
operator|(
name|img
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
operator|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|w
condition|;
operator|++
name|x
control|)
block|{
name|quint16
name|result
init|=
name|row
index|[
name|x
index|]
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|expected
condition|)
name|printf
argument_list|(
literal|"[x,y]: %d,%d, expected=%04x, result=%04x\n"
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|uint
argument_list|(
name|result
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
case|case
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB666
argument_list|)
case|:
case|case
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
argument_list|)
case|:
case|case
name|int
argument_list|(
name|QImage
operator|::
name|Format_ARGB8555_Premultiplied
argument_list|)
case|:
case|case
name|int
argument_list|(
name|QImage
operator|::
name|Format_RGB888
argument_list|)
case|:
block|{
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
specifier|const
name|quint24
modifier|*
name|row
init|=
operator|(
specifier|const
name|quint24
operator|*
operator|)
operator|(
name|img
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
operator|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|w
condition|;
operator|++
name|x
control|)
block|{
name|quint32
name|result
init|=
name|row
index|[
name|x
index|]
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|expected
condition|)
name|printf
argument_list|(
literal|"[x,y]: %d,%d, expected=%04x, result=%04x\n"
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
default|default:
name|qFatal
argument_list|(
literal|"Test not implemented for format %d"
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|convertToFormatPreserveDotsPrMeter
name|void
name|tst_QImage
operator|::
name|convertToFormatPreserveDotsPrMeter
parameter_list|()
block|{
name|QImage
name|img
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|int
name|dpmx
init|=
literal|123
decl_stmt|;
name|int
name|dpmy
init|=
literal|234
decl_stmt|;
name|img
operator|.
name|setDotsPerMeterX
argument_list|(
name|dpmx
argument_list|)
expr_stmt|;
name|img
operator|.
name|setDotsPerMeterY
argument_list|(
name|dpmy
argument_list|)
expr_stmt|;
name|img
operator|.
name|fill
argument_list|(
literal|0x12345678
argument_list|)
expr_stmt|;
name|img
operator|=
name|img
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|dotsPerMeterX
argument_list|()
argument_list|,
name|dpmx
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|dotsPerMeterY
argument_list|()
argument_list|,
name|dpmy
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|convertToFormatPreserveText
name|void
name|tst_QImage
operator|::
name|convertToFormatPreserveText
parameter_list|()
block|{
name|QImage
name|img
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|img
operator|.
name|setText
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|img
operator|.
name|setText
argument_list|(
literal|"foo2"
argument_list|,
literal|"bar2"
argument_list|)
expr_stmt|;
name|img
operator|.
name|fill
argument_list|(
literal|0x12345678
argument_list|)
expr_stmt|;
name|QStringList
name|listResult
decl_stmt|;
name|listResult
operator|<<
literal|"foo"
operator|<<
literal|"foo2"
expr_stmt|;
name|QString
name|result
init|=
literal|"foo: bar\n\nfoo2: bar2"
decl_stmt|;
name|QImage
name|imgResult1
init|=
name|img
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|imgResult1
operator|.
name|text
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|imgResult1
operator|.
name|textKeys
argument_list|()
argument_list|,
name|listResult
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QRgb
argument_list|>
name|colorTable
argument_list|(
literal|4
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
name|colorTable
index|[
name|i
index|]
operator|=
name|QRgb
argument_list|(
literal|42
argument_list|)
expr_stmt|;
name|QImage
name|imgResult2
init|=
name|img
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_MonoLSB
argument_list|,
name|colorTable
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|imgResult2
operator|.
name|text
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|imgResult2
operator|.
name|textKeys
argument_list|()
argument_list|,
name|listResult
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setColorCount
name|void
name|tst_QImage
operator|::
name|setColorCount
parameter_list|()
block|{
name|QImage
name|img
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QImage::setColorCount: null image"
argument_list|)
expr_stmt|;
name|img
operator|.
name|setColorCount
argument_list|(
literal|256
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|colorCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setColor
name|void
name|tst_QImage
operator|::
name|setColor
parameter_list|()
block|{
name|QImage
name|img
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
decl_stmt|;
name|img
operator|.
name|setColor
argument_list|(
literal|0
argument_list|,
name|qRgba
argument_list|(
literal|18
argument_list|,
literal|219
argument_list|,
literal|108
argument_list|,
literal|128
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|colorCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QImage
name|img2
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
decl_stmt|;
name|img2
operator|.
name|setColor
argument_list|(
literal|0
argument_list|,
name|qRgba
argument_list|(
literal|18
argument_list|,
literal|219
argument_list|,
literal|108
argument_list|,
literal|128
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img2
operator|.
name|colorCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/* Just some sanity checking that we don't draw outside the buffer of  * the image. Hopefully this will create crashes or at least some  * random test fails when broken.  */
end_comment
begin_function
DECL|function|rasterClipping
name|void
name|tst_QImage
operator|::
name|rasterClipping
parameter_list|()
block|{
name|QImage
name|image
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|image
operator|.
name|fill
argument_list|(
literal|0xffffffff
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|image
argument_list|)
decl_stmt|;
name|p
operator|.
name|drawLine
argument_list|(
operator|-
literal|1000
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawLine
argument_list|(
operator|-
literal|1000
argument_list|,
literal|5
argument_list|,
literal|1000
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawLine
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|1000
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawLine
argument_list|(
literal|5
argument_list|,
operator|-
literal|1000
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawLine
argument_list|(
literal|5
argument_list|,
operator|-
literal|1000
argument_list|,
literal|5
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawLine
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|p
operator|.
name|setBrush
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawEllipse
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawEllipse
argument_list|(
operator|-
literal|100
argument_list|,
operator|-
literal|100
argument_list|,
literal|210
argument_list|,
literal|210
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawEllipse
argument_list|(
operator|-
literal|1000
argument_list|,
literal|0
argument_list|,
literal|2010
argument_list|,
literal|2010
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawEllipse
argument_list|(
literal|0
argument_list|,
operator|-
literal|1000
argument_list|,
literal|2010
argument_list|,
literal|2010
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawEllipse
argument_list|(
operator|-
literal|2010
argument_list|,
operator|-
literal|1000
argument_list|,
literal|2010
argument_list|,
literal|2010
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawEllipse
argument_list|(
operator|-
literal|1000
argument_list|,
operator|-
literal|2010
argument_list|,
literal|2010
argument_list|,
literal|2010
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Tests the new QPoint overloads in QImage in Qt 4.2
end_comment
begin_function
DECL|function|pointOverloads
name|void
name|tst_QImage
operator|::
name|pointOverloads
parameter_list|()
block|{
name|QImage
name|image
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|image
operator|.
name|fill
argument_list|(
literal|0xff00ff00
argument_list|)
expr_stmt|;
comment|// IsValid
name|QVERIFY
argument_list|(
name|image
operator|.
name|valid
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|image
operator|.
name|valid
argument_list|(
name|QPoint
argument_list|(
literal|99
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|image
operator|.
name|valid
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|99
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|image
operator|.
name|valid
argument_list|(
name|QPoint
argument_list|(
literal|99
argument_list|,
literal|99
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|image
operator|.
name|valid
argument_list|(
name|QPoint
argument_list|(
literal|50
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// outside on the top
name|QVERIFY
argument_list|(
operator|!
name|image
operator|.
name|valid
argument_list|(
name|QPoint
argument_list|(
literal|50
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// outside on the bottom
name|QVERIFY
argument_list|(
operator|!
name|image
operator|.
name|valid
argument_list|(
name|QPoint
argument_list|(
operator|-
literal|1
argument_list|,
literal|50
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// outside on the left
name|QVERIFY
argument_list|(
operator|!
name|image
operator|.
name|valid
argument_list|(
name|QPoint
argument_list|(
literal|100
argument_list|,
literal|50
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// outside on the right
comment|// Test the pixel setter
name|image
operator|.
name|setPixel
argument_list|(
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|0xff0000ff
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|image
operator|.
name|pixel
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|0xff0000ff
argument_list|)
expr_stmt|;
comment|// pixel getter
name|QCOMPARE
argument_list|(
name|image
operator|.
name|pixel
argument_list|(
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|,
literal|0xff0000ff
argument_list|)
expr_stmt|;
comment|// pixelIndex()
name|QImage
name|indexed
init|=
name|image
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|indexed
operator|.
name|pixelIndex
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|,
name|indexed
operator|.
name|pixelIndex
argument_list|(
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|destructor
name|void
name|tst_QImage
operator|::
name|destructor
parameter_list|()
block|{
name|QPolygon
name|poly
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|poly
operator|.
name|setPoint
argument_list|(
literal|0
argument_list|,
operator|-
literal|1455
argument_list|,
literal|1435
argument_list|)
expr_stmt|;
name|QImage
name|image
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|QPainter
name|ptPix
argument_list|(
operator|&
name|image
argument_list|)
decl_stmt|;
name|ptPix
operator|.
name|setPen
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|ptPix
operator|.
name|setBrush
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|ptPix
operator|.
name|drawPolygon
argument_list|(
name|poly
argument_list|,
name|Qt
operator|::
name|WindingFill
argument_list|)
expr_stmt|;
name|ptPix
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/* XPM */
end_comment
begin_decl_stmt
DECL|variable|monoPixmap
specifier|static
specifier|const
name|char
modifier|*
name|monoPixmap
index|[]
init|=
block|{
comment|/* width height ncolors chars_per_pixel */
literal|"4 4 2 1"
block|,
literal|"x c #000000"
block|,
literal|". c #ffffff"
block|,
comment|/* pixels */
literal|"xxxx"
block|,
literal|"x..x"
block|,
literal|"x..x"
block|,
literal|"xxxx"
block|}
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_IMAGE_HEURISTIC_MASK
end_ifndef
begin_function
DECL|function|createHeuristicMask
name|void
name|tst_QImage
operator|::
name|createHeuristicMask
parameter_list|()
block|{
name|QImage
name|img
argument_list|(
name|monoPixmap
argument_list|)
decl_stmt|;
name|img
operator|=
name|img
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_MonoLSB
argument_list|)
expr_stmt|;
name|QImage
name|mask
init|=
name|img
operator|.
name|createHeuristicMask
argument_list|()
decl_stmt|;
name|QImage
name|newMask
init|=
name|mask
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
comment|// line 2
name|QVERIFY
argument_list|(
name|newMask
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|!=
name|newMask
operator|.
name|pixel
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|newMask
operator|.
name|pixel
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|==
name|newMask
operator|.
name|pixel
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|newMask
operator|.
name|pixel
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
operator|!=
name|newMask
operator|.
name|pixel
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// line 3
name|QVERIFY
argument_list|(
name|newMask
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
operator|!=
name|newMask
operator|.
name|pixel
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|newMask
operator|.
name|pixel
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
operator|==
name|newMask
operator|.
name|pixel
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|newMask
operator|.
name|pixel
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
operator|!=
name|newMask
operator|.
name|pixel
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|cacheKey
name|void
name|tst_QImage
operator|::
name|cacheKey
parameter_list|()
block|{
name|QImage
name|image1
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|qint64
name|image1_key
init|=
name|image1
operator|.
name|cacheKey
argument_list|()
decl_stmt|;
name|QImage
name|image2
init|=
name|image1
decl_stmt|;
name|QVERIFY
argument_list|(
name|image2
operator|.
name|cacheKey
argument_list|()
operator|==
name|image1
operator|.
name|cacheKey
argument_list|()
argument_list|)
expr_stmt|;
name|image2
operator|.
name|detach
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|image2
operator|.
name|cacheKey
argument_list|()
operator|!=
name|image1
operator|.
name|cacheKey
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|image1
operator|.
name|cacheKey
argument_list|()
operator|==
name|image1_key
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|smoothScale
name|void
name|tst_QImage
operator|::
name|smoothScale
parameter_list|()
block|{
name|unsigned
name|int
name|data
index|[
literal|2
index|]
init|=
block|{
name|qRgba
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
block|,
name|qRgba
argument_list|(
literal|128
argument_list|,
literal|128
argument_list|,
literal|128
argument_list|,
literal|128
argument_list|)
block|}
decl_stmt|;
name|QImage
name|imgX
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|)
name|data
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|QImage
name|imgY
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|)
name|data
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|QImage
name|scaledX
init|=
name|imgX
operator|.
name|scaled
argument_list|(
name|QSize
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Qt
operator|::
name|IgnoreAspectRatio
argument_list|,
name|Qt
operator|::
name|SmoothTransformation
argument_list|)
decl_stmt|;
name|QImage
name|scaledY
init|=
name|imgY
operator|.
name|scaled
argument_list|(
name|QSize
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|,
name|Qt
operator|::
name|IgnoreAspectRatio
argument_list|,
name|Qt
operator|::
name|SmoothTransformation
argument_list|)
decl_stmt|;
name|uint
modifier|*
name|scaled
index|[
literal|2
index|]
init|=
block|{
operator|(
name|unsigned
name|int
operator|*
operator|)
name|scaledX
operator|.
name|bits
argument_list|()
block|,
operator|(
name|unsigned
name|int
operator|*
operator|)
name|scaledY
operator|.
name|bits
argument_list|()
block|}
decl_stmt|;
name|int
name|expected
index|[
literal|4
index|]
init|=
block|{
literal|0
block|,
literal|32
block|,
literal|96
block|,
literal|128
block|}
decl_stmt|;
for|for
control|(
name|int
name|image
init|=
literal|0
init|;
name|image
operator|<
literal|2
condition|;
operator|++
name|image
control|)
block|{
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
literal|4
condition|;
operator|++
name|index
control|)
block|{
for|for
control|(
name|int
name|component
init|=
literal|0
init|;
name|component
operator|<
literal|4
condition|;
operator|++
name|component
control|)
block|{
name|int
name|pixel
init|=
name|scaled
index|[
name|image
index|]
index|[
name|index
index|]
decl_stmt|;
name|int
name|val
init|=
operator|(
name|pixel
operator|>>
operator|(
name|component
operator|*
literal|8
operator|)
operator|)
operator|&
literal|0xff
decl_stmt|;
name|QCOMPARE
argument_list|(
name|val
argument_list|,
name|expected
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_comment
comment|// test area sampling
end_comment
begin_function
DECL|function|smoothScale2_data
name|void
name|tst_QImage
operator|::
name|smoothScale2_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"size"
argument_list|)
expr_stmt|;
name|int
name|sizes
index|[]
init|=
block|{
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|10
block|,
literal|16
block|,
literal|20
block|,
literal|32
block|,
literal|40
block|,
literal|64
block|,
literal|100
block|,
literal|101
block|,
literal|128
block|,
literal|0
block|}
decl_stmt|;
name|QImage
operator|::
name|Format
name|formats
index|[]
init|=
block|{
name|QImage
operator|::
name|Format_RGB32
block|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
block|,
name|QImage
operator|::
name|Format_Invalid
block|}
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|formats
index|[
name|j
index|]
operator|!=
name|QImage
operator|::
name|Format_Invalid
condition|;
operator|++
name|j
control|)
block|{
name|QString
name|formatstr
init|=
name|formats
index|[
name|j
index|]
operator|==
name|QImage
operator|::
name|Format_RGB32
condition|?
name|QStringLiteral
argument_list|(
literal|"rgb32"
argument_list|)
else|:
name|QStringLiteral
argument_list|(
literal|"argb32pm"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|sizes
index|[
name|i
index|]
operator|!=
literal|0
condition|;
operator|++
name|i
control|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"%1 %2x%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|formatstr
argument_list|)
operator|.
name|arg
argument_list|(
name|sizes
index|[
name|i
index|]
argument_list|)
operator|.
name|toUtf8
argument_list|()
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|formats
index|[
name|j
index|]
operator|<<
name|sizes
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|smoothScale2
name|void
name|tst_QImage
operator|::
name|smoothScale2
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|QRgb
name|expected
init|=
name|format
operator|==
name|QImage
operator|::
name|Format_RGB32
condition|?
name|qRgb
argument_list|(
literal|63
argument_list|,
literal|127
argument_list|,
literal|255
argument_list|)
else|:
name|qRgba
argument_list|(
literal|31
argument_list|,
literal|63
argument_list|,
literal|127
argument_list|,
literal|127
argument_list|)
decl_stmt|;
name|QImage
name|img
argument_list|(
name|size
argument_list|,
name|size
argument_list|,
operator|(
name|QImage
operator|::
name|Format
operator|)
name|format
argument_list|)
decl_stmt|;
name|img
operator|.
name|fill
argument_list|(
name|expected
argument_list|)
expr_stmt|;
comment|// scale x down, y down
name|QImage
name|scaled
init|=
name|img
operator|.
name|scaled
argument_list|(
name|QSize
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Qt
operator|::
name|IgnoreAspectRatio
argument_list|,
name|Qt
operator|::
name|SmoothTransformation
argument_list|)
decl_stmt|;
name|QRgb
name|pixel
init|=
name|scaled
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|qAlpha
argument_list|(
name|pixel
argument_list|)
argument_list|,
name|qAlpha
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qRed
argument_list|(
name|pixel
argument_list|)
argument_list|,
name|qRed
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qGreen
argument_list|(
name|pixel
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qBlue
argument_list|(
name|pixel
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
comment|// scale x down, y up
name|scaled
operator|=
name|img
operator|.
name|scaled
argument_list|(
name|QSize
argument_list|(
literal|1
argument_list|,
name|size
operator|*
literal|2
argument_list|)
argument_list|,
name|Qt
operator|::
name|IgnoreAspectRatio
argument_list|,
name|Qt
operator|::
name|SmoothTransformation
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|scaled
operator|.
name|height
argument_list|()
condition|;
operator|++
name|y
control|)
block|{
name|pixel
operator|=
name|scaled
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qAlpha
argument_list|(
name|pixel
argument_list|)
argument_list|,
name|qAlpha
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qRed
argument_list|(
name|pixel
argument_list|)
argument_list|,
name|qRed
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qGreen
argument_list|(
name|pixel
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qBlue
argument_list|(
name|pixel
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// scale x up, y down
name|scaled
operator|=
name|img
operator|.
name|scaled
argument_list|(
name|QSize
argument_list|(
name|size
operator|*
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Qt
operator|::
name|IgnoreAspectRatio
argument_list|,
name|Qt
operator|::
name|SmoothTransformation
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|scaled
operator|.
name|width
argument_list|()
condition|;
operator|++
name|x
control|)
block|{
name|pixel
operator|=
name|scaled
operator|.
name|pixel
argument_list|(
name|x
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qAlpha
argument_list|(
name|pixel
argument_list|)
argument_list|,
name|qAlpha
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qRed
argument_list|(
name|pixel
argument_list|)
argument_list|,
name|qRed
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qGreen
argument_list|(
name|pixel
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qBlue
argument_list|(
name|pixel
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// scale x up, y up
name|scaled
operator|=
name|img
operator|.
name|scaled
argument_list|(
name|QSize
argument_list|(
name|size
operator|*
literal|2
argument_list|,
name|size
operator|*
literal|2
argument_list|)
argument_list|,
name|Qt
operator|::
name|IgnoreAspectRatio
argument_list|,
name|Qt
operator|::
name|SmoothTransformation
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|scaled
operator|.
name|height
argument_list|()
condition|;
operator|++
name|y
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|scaled
operator|.
name|width
argument_list|()
condition|;
operator|++
name|x
control|)
block|{
name|pixel
operator|=
name|scaled
operator|.
name|pixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qAlpha
argument_list|(
name|pixel
argument_list|)
argument_list|,
name|qAlpha
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qRed
argument_list|(
name|pixel
argument_list|)
argument_list|,
name|qRed
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qGreen
argument_list|(
name|pixel
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qBlue
argument_list|(
name|pixel
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|rand8
specifier|static
specifier|inline
name|int
name|rand8
parameter_list|()
block|{
return|return
name|int
argument_list|(
literal|256.
operator|*
operator|(
name|qrand
argument_list|()
operator|/
operator|(
name|RAND_MAX
operator|+
literal|1.0
operator|)
operator|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// compares img.scale against the bilinear filtering used by QPainter
end_comment
begin_function
DECL|function|smoothScale3
name|void
name|tst_QImage
operator|::
name|smoothScale3
parameter_list|()
block|{
name|QImage
name|img
argument_list|(
literal|128
argument_list|,
literal|128
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|img
operator|.
name|height
argument_list|()
condition|;
operator|++
name|y
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|img
operator|.
name|width
argument_list|()
condition|;
operator|++
name|x
control|)
block|{
specifier|const
name|int
name|red
init|=
name|rand8
argument_list|()
decl_stmt|;
specifier|const
name|int
name|green
init|=
name|rand8
argument_list|()
decl_stmt|;
specifier|const
name|int
name|blue
init|=
name|rand8
argument_list|()
decl_stmt|;
specifier|const
name|int
name|alpha
init|=
literal|255
decl_stmt|;
name|img
operator|.
name|setPixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|qRgba
argument_list|(
name|red
argument_list|,
name|green
argument_list|,
name|blue
argument_list|,
name|alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|qreal
name|scales
index|[
literal|2
index|]
init|=
block|{
literal|.5
block|,
literal|2
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|QImage
name|a
init|=
name|img
operator|.
name|scaled
argument_list|(
name|img
operator|.
name|size
argument_list|()
operator|*
name|scales
index|[
name|i
index|]
argument_list|,
name|Qt
operator|::
name|IgnoreAspectRatio
argument_list|,
name|Qt
operator|::
name|SmoothTransformation
argument_list|)
decl_stmt|;
name|QImage
name|b
argument_list|(
name|a
operator|.
name|size
argument_list|()
argument_list|,
name|a
operator|.
name|format
argument_list|()
argument_list|)
decl_stmt|;
name|b
operator|.
name|fill
argument_list|(
literal|0x0
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|b
argument_list|)
decl_stmt|;
name|p
operator|.
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|SmoothPixmapTransform
argument_list|)
expr_stmt|;
name|p
operator|.
name|scale
argument_list|(
name|scales
index|[
name|i
index|]
argument_list|,
name|scales
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawImage
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|img
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|int
name|err
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|a
operator|.
name|height
argument_list|()
condition|;
operator|++
name|y
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|a
operator|.
name|width
argument_list|()
condition|;
operator|++
name|x
control|)
block|{
name|QRgb
name|ca
init|=
name|a
operator|.
name|pixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|QRgb
name|cb
init|=
name|b
operator|.
name|pixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
comment|// tolerate a little bit of rounding errors
name|bool
name|r
init|=
literal|true
decl_stmt|;
name|r
operator|&=
name|qAbs
argument_list|(
name|qRed
argument_list|(
name|ca
argument_list|)
operator|-
name|qRed
argument_list|(
name|cb
argument_list|)
argument_list|)
operator|<=
literal|18
expr_stmt|;
name|r
operator|&=
name|qAbs
argument_list|(
name|qGreen
argument_list|(
name|ca
argument_list|)
operator|-
name|qGreen
argument_list|(
name|cb
argument_list|)
argument_list|)
operator|<=
literal|18
expr_stmt|;
name|r
operator|&=
name|qAbs
argument_list|(
name|qBlue
argument_list|(
name|ca
argument_list|)
operator|-
name|qBlue
argument_list|(
name|cb
argument_list|)
argument_list|)
operator|<=
literal|18
expr_stmt|;
if|if
condition|(
operator|!
name|r
condition|)
name|err
operator|++
expr_stmt|;
block|}
block|}
name|QCOMPARE
argument_list|(
name|err
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|smoothScaleBig
name|void
name|tst_QImage
operator|::
name|smoothScaleBig
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|int
name|bigValue
init|=
literal|2000
decl_stmt|;
else|#
directive|else
name|int
name|bigValue
init|=
literal|200000
decl_stmt|;
endif|#
directive|endif
name|QImage
name|tall
argument_list|(
literal|4
argument_list|,
name|bigValue
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|tall
operator|.
name|fill
argument_list|(
literal|0x0
argument_list|)
expr_stmt|;
name|QImage
name|wide
argument_list|(
name|bigValue
argument_list|,
literal|4
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|wide
operator|.
name|fill
argument_list|(
literal|0x0
argument_list|)
expr_stmt|;
name|QImage
name|tallScaled
init|=
name|tall
operator|.
name|scaled
argument_list|(
literal|4
argument_list|,
name|tall
operator|.
name|height
argument_list|()
operator|/
literal|4
argument_list|,
name|Qt
operator|::
name|IgnoreAspectRatio
argument_list|,
name|Qt
operator|::
name|SmoothTransformation
argument_list|)
decl_stmt|;
name|QImage
name|wideScaled
init|=
name|wide
operator|.
name|scaled
argument_list|(
name|wide
operator|.
name|width
argument_list|()
operator|/
literal|4
argument_list|,
literal|4
argument_list|,
name|Qt
operator|::
name|IgnoreAspectRatio
argument_list|,
name|Qt
operator|::
name|SmoothTransformation
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|tallScaled
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QRgb
argument_list|(
literal|0x0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|wideScaled
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QRgb
argument_list|(
literal|0x0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|smoothScaleAlpha
name|void
name|tst_QImage
operator|::
name|smoothScaleAlpha
parameter_list|()
block|{
name|QImage
name|src
argument_list|(
literal|128
argument_list|,
literal|128
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|src
operator|.
name|fill
argument_list|(
literal|0x0
argument_list|)
expr_stmt|;
name|QPainter
name|srcPainter
argument_list|(
operator|&
name|src
argument_list|)
decl_stmt|;
name|srcPainter
operator|.
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
name|srcPainter
operator|.
name|setBrush
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|srcPainter
operator|.
name|drawEllipse
argument_list|(
name|QRect
argument_list|(
name|QPoint
argument_list|()
argument_list|,
name|src
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|srcPainter
operator|.
name|end
argument_list|()
expr_stmt|;
name|QImage
name|dst
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|dst
operator|.
name|fill
argument_list|(
literal|0xffffffff
argument_list|)
expr_stmt|;
name|QImage
name|expected
init|=
name|dst
decl_stmt|;
name|QPainter
name|dstPainter
argument_list|(
operator|&
name|dst
argument_list|)
decl_stmt|;
name|dstPainter
operator|.
name|drawImage
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|src
operator|.
name|scaled
argument_list|(
name|dst
operator|.
name|size
argument_list|()
argument_list|,
name|Qt
operator|::
name|IgnoreAspectRatio
argument_list|,
name|Qt
operator|::
name|SmoothTransformation
argument_list|)
argument_list|)
expr_stmt|;
name|dstPainter
operator|.
name|end
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dst
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|count
specifier|static
name|int
name|count
parameter_list|(
specifier|const
name|QImage
modifier|&
name|img
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|,
name|QRgb
name|pixel
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|x
operator|>=
literal|0
operator|&&
name|x
operator|<
name|img
operator|.
name|width
argument_list|()
operator|&&
name|y
operator|>=
literal|0
operator|&&
name|y
operator|<
name|img
operator|.
name|height
argument_list|()
condition|)
block|{
name|i
operator|+=
operator|(
name|img
operator|.
name|pixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|==
name|pixel
operator|)
expr_stmt|;
name|x
operator|+=
name|dx
expr_stmt|;
name|y
operator|+=
name|dy
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|transformed_image_width
specifier|const
name|int
name|transformed_image_width
init|=
literal|128
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|transformed_image_height
specifier|const
name|int
name|transformed_image_height
init|=
literal|128
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|transformed_data
name|void
name|tst_QImage
operator|::
name|transformed_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QTransform
argument_list|>
argument_list|(
literal|"transform"
argument_list|)
expr_stmt|;
block|{
name|QTransform
name|transform
decl_stmt|;
name|transform
operator|.
name|translate
argument_list|(
literal|10.4
argument_list|,
literal|10.4
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Translate"
argument_list|)
operator|<<
name|transform
expr_stmt|;
block|}
block|{
name|QTransform
name|transform
decl_stmt|;
name|transform
operator|.
name|scale
argument_list|(
literal|1.5
argument_list|,
literal|1.5
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Scale"
argument_list|)
operator|<<
name|transform
expr_stmt|;
block|}
block|{
name|QTransform
name|transform
decl_stmt|;
name|transform
operator|.
name|rotate
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Rotate 30"
argument_list|)
operator|<<
name|transform
expr_stmt|;
block|}
block|{
name|QTransform
name|transform
decl_stmt|;
name|transform
operator|.
name|rotate
argument_list|(
literal|90
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Rotate 90"
argument_list|)
operator|<<
name|transform
expr_stmt|;
block|}
block|{
name|QTransform
name|transform
decl_stmt|;
name|transform
operator|.
name|rotate
argument_list|(
literal|180
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Rotate 180"
argument_list|)
operator|<<
name|transform
expr_stmt|;
block|}
block|{
name|QTransform
name|transform
decl_stmt|;
name|transform
operator|.
name|rotate
argument_list|(
literal|270
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Rotate 270"
argument_list|)
operator|<<
name|transform
expr_stmt|;
block|}
block|{
name|QTransform
name|transform
decl_stmt|;
name|transform
operator|.
name|translate
argument_list|(
name|transformed_image_width
operator|/
literal|2
argument_list|,
name|transformed_image_height
operator|/
literal|2
argument_list|)
expr_stmt|;
name|transform
operator|.
name|rotate
argument_list|(
literal|155
argument_list|,
name|Qt
operator|::
name|XAxis
argument_list|)
expr_stmt|;
name|transform
operator|.
name|translate
argument_list|(
operator|-
name|transformed_image_width
operator|/
literal|2
argument_list|,
operator|-
name|transformed_image_height
operator|/
literal|2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Perspective 1"
argument_list|)
operator|<<
name|transform
expr_stmt|;
block|}
block|{
name|QTransform
name|transform
decl_stmt|;
name|transform
operator|.
name|rotate
argument_list|(
literal|155
argument_list|,
name|Qt
operator|::
name|XAxis
argument_list|)
expr_stmt|;
name|transform
operator|.
name|translate
argument_list|(
operator|-
name|transformed_image_width
operator|/
literal|2
argument_list|,
operator|-
name|transformed_image_height
operator|/
literal|2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Perspective 2"
argument_list|)
operator|<<
name|transform
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|transformed
name|void
name|tst_QImage
operator|::
name|transformed
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QTransform
argument_list|,
name|transform
argument_list|)
expr_stmt|;
name|QImage
name|img
argument_list|(
name|transformed_image_width
argument_list|,
name|transformed_image_height
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|img
argument_list|)
decl_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|img
operator|.
name|width
argument_list|()
argument_list|,
name|img
operator|.
name|height
argument_list|()
argument_list|,
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|img
operator|.
name|width
argument_list|()
operator|-
literal|1
argument_list|,
name|img
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|QImage
name|transformed
init|=
name|img
operator|.
name|transformed
argument_list|(
name|transform
argument_list|,
name|Qt
operator|::
name|SmoothTransformation
argument_list|)
decl_stmt|;
comment|// all borders should have touched pixels
name|QVERIFY
argument_list|(
name|count
argument_list|(
name|transformed
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0x0
argument_list|)
operator|<
name|transformed
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|count
argument_list|(
name|transformed
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0x0
argument_list|)
operator|<
name|transformed
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|count
argument_list|(
name|transformed
argument_list|,
literal|0
argument_list|,
name|img
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0x0
argument_list|)
operator|<
name|transformed
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|count
argument_list|(
name|transformed
argument_list|,
name|img
operator|.
name|width
argument_list|()
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0x0
argument_list|)
operator|<
name|transformed
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|QImage
name|transformedPadded
argument_list|(
name|transformed
operator|.
name|width
argument_list|()
operator|+
literal|2
argument_list|,
name|transformed
operator|.
name|height
argument_list|()
operator|+
literal|2
argument_list|,
name|img
operator|.
name|format
argument_list|()
argument_list|)
decl_stmt|;
name|transformedPadded
operator|.
name|fill
argument_list|(
literal|0x0
argument_list|)
expr_stmt|;
name|p
operator|.
name|begin
argument_list|(
operator|&
name|transformedPadded
argument_list|)
expr_stmt|;
name|p
operator|.
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|SmoothPixmapTransform
argument_list|)
expr_stmt|;
name|p
operator|.
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|)
expr_stmt|;
name|p
operator|.
name|setTransform
argument_list|(
name|transformed
operator|.
name|trueMatrix
argument_list|(
name|transform
argument_list|,
name|img
operator|.
name|width
argument_list|()
argument_list|,
name|img
operator|.
name|height
argument_list|()
argument_list|)
operator|*
name|QTransform
argument_list|()
operator|.
name|translate
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawImage
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|img
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
comment|// no borders should have touched pixels since we have a one-pixel padding
name|QCOMPARE
argument_list|(
name|count
argument_list|(
name|transformedPadded
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0x0
argument_list|)
argument_list|,
name|transformedPadded
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|count
argument_list|(
name|transformedPadded
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0x0
argument_list|)
argument_list|,
name|transformedPadded
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|count
argument_list|(
name|transformedPadded
argument_list|,
literal|0
argument_list|,
name|transformedPadded
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0x0
argument_list|)
argument_list|,
name|transformedPadded
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|count
argument_list|(
name|transformedPadded
argument_list|,
name|transformedPadded
operator|.
name|width
argument_list|()
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0x0
argument_list|)
argument_list|,
name|transformedPadded
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|transformed2
name|void
name|tst_QImage
operator|::
name|transformed2
parameter_list|()
block|{
name|QImage
name|img
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
name|QImage
operator|::
name|Format_Mono
argument_list|)
decl_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|img
argument_list|)
decl_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|QTransform
name|transform
decl_stmt|;
name|transform
operator|.
name|scale
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QImage
name|expected
argument_list|(
literal|9
argument_list|,
literal|9
argument_list|,
name|QImage
operator|::
name|Format_Mono
argument_list|)
decl_stmt|;
name|p
operator|.
name|begin
argument_list|(
operator|&
name|expected
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|,
literal|9
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|p
operator|.
name|setBrush
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawRect
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawRect
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawRect
argument_list|(
literal|6
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawRect
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
block|{
name|QImage
name|actual
init|=
name|img
operator|.
name|transformed
argument_list|(
name|transform
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|actual
operator|.
name|format
argument_list|()
argument_list|,
name|expected
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|actual
operator|.
name|size
argument_list|()
argument_list|,
name|expected
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|actual
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|{
name|transform
operator|.
name|rotate
argument_list|(
operator|-
literal|90
argument_list|)
expr_stmt|;
name|QImage
name|actual
init|=
name|img
operator|.
name|transformed
argument_list|(
name|transform
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|actual
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
argument_list|,
name|expected
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|scaled
name|void
name|tst_QImage
operator|::
name|scaled
parameter_list|()
block|{
name|QImage
name|img
argument_list|(
literal|102
argument_list|,
literal|3
argument_list|,
name|QImage
operator|::
name|Format_Mono
argument_list|)
decl_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|img
argument_list|)
decl_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|img
operator|.
name|width
argument_list|()
argument_list|,
name|img
operator|.
name|height
argument_list|()
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|QImage
name|scaled
init|=
name|img
operator|.
name|scaled
argument_list|(
literal|1994
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|QImage
name|expected
argument_list|(
literal|1994
argument_list|,
literal|10
argument_list|,
name|QImage
operator|::
name|Format_Mono
argument_list|)
decl_stmt|;
name|p
operator|.
name|begin
argument_list|(
operator|&
name|expected
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|expected
operator|.
name|width
argument_list|()
argument_list|,
name|expected
operator|.
name|height
argument_list|()
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|scaled
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paintEngine
name|void
name|tst_QImage
operator|::
name|paintEngine
parameter_list|()
block|{
name|QImage
name|img
decl_stmt|;
name|QPaintEngine
modifier|*
name|engine
decl_stmt|;
block|{
name|QImage
name|temp
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|temp
operator|.
name|fill
argument_list|(
literal|0xff000000
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|temp
argument_list|)
decl_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
literal|80
argument_list|,
literal|80
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|img
operator|=
name|temp
expr_stmt|;
name|engine
operator|=
name|temp
operator|.
name|paintEngine
argument_list|()
expr_stmt|;
block|}
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|img
argument_list|)
decl_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
literal|80
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
name|Qt
operator|::
name|yellow
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
name|QImage
name|expected
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|expected
operator|.
name|fill
argument_list|(
literal|0xff000000
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|expected
argument_list|)
decl_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
literal|80
argument_list|,
literal|80
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
literal|80
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
name|Qt
operator|::
name|yellow
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|engine
argument_list|,
name|img
operator|.
name|paintEngine
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setAlphaChannelWhilePainting
name|void
name|tst_QImage
operator|::
name|setAlphaChannelWhilePainting
parameter_list|()
block|{
name|QImage
name|image
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|image
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|image
argument_list|)
decl_stmt|;
name|image
operator|.
name|setAlphaChannel
argument_list|(
name|image
operator|.
name|createMaskFromColor
argument_list|(
name|QColor
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|,
name|Qt
operator|::
name|MaskInColor
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// See task 240047 for details
end_comment
begin_function
DECL|function|smoothScaledSubImage
name|void
name|tst_QImage
operator|::
name|smoothScaledSubImage
parameter_list|()
block|{
name|QImage
name|original
argument_list|(
literal|128
argument_list|,
literal|128
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|original
argument_list|)
decl_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|64
argument_list|,
literal|128
argument_list|,
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
literal|64
argument_list|,
literal|0
argument_list|,
literal|64
argument_list|,
literal|128
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|QImage
name|subimage
argument_list|(
operator|(
operator|(
specifier|const
name|QImage
operator|&
operator|)
name|original
operator|)
operator|.
name|bits
argument_list|()
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
name|original
operator|.
name|bytesPerLine
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
comment|// only in the black part of the source...
name|QImage
name|scaled
init|=
name|subimage
operator|.
name|scaled
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
name|Qt
operator|::
name|IgnoreAspectRatio
argument_list|,
name|Qt
operator|::
name|SmoothTransformation
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|scaled
operator|.
name|height
argument_list|()
condition|;
operator|++
name|y
control|)
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|scaled
operator|.
name|width
argument_list|()
condition|;
operator|++
name|x
control|)
name|QCOMPARE
argument_list|(
name|scaled
operator|.
name|pixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|,
literal|0xff000000
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nullSize_data
name|void
name|tst_QImage
operator|::
name|nullSize_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QImage
argument_list|>
argument_list|(
literal|"image"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null image"
argument_list|)
operator|<<
name|QImage
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"zero-size image"
argument_list|)
operator|<<
name|QImage
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nullSize
name|void
name|tst_QImage
operator|::
name|nullSize
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QImage
argument_list|,
name|image
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|image
operator|.
name|isNull
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|image
operator|.
name|width
argument_list|()
argument_list|,
name|image
operator|.
name|size
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|image
operator|.
name|height
argument_list|()
argument_list|,
name|image
operator|.
name|size
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|premultipliedAlphaConsistency
name|void
name|tst_QImage
operator|::
name|premultipliedAlphaConsistency
parameter_list|()
block|{
name|QImage
name|img
argument_list|(
literal|256
argument_list|,
literal|1
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|256
condition|;
operator|++
name|x
control|)
name|img
operator|.
name|setPixel
argument_list|(
name|x
argument_list|,
literal|0
argument_list|,
operator|(
name|x
operator|<<
literal|24
operator|)
operator||
literal|0xffffff
argument_list|)
expr_stmt|;
name|QImage
name|converted
init|=
name|img
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
argument_list|)
decl_stmt|;
name|QImage
name|pm32
init|=
name|converted
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pm32
operator|.
name|width
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QRgb
name|pixel
init|=
name|pm32
operator|.
name|pixel
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|qRed
argument_list|(
name|pixel
argument_list|)
operator|<=
name|qAlpha
argument_list|(
name|pixel
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qGreen
argument_list|(
name|pixel
argument_list|)
operator|<=
name|qAlpha
argument_list|(
name|pixel
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qBlue
argument_list|(
name|pixel
argument_list|)
operator|<=
name|qAlpha
argument_list|(
name|pixel
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|compareIndexed
name|void
name|tst_QImage
operator|::
name|compareIndexed
parameter_list|()
block|{
name|QImage
name|img
argument_list|(
literal|256
argument_list|,
literal|1
argument_list|,
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|QRgb
argument_list|>
name|colorTable
argument_list|(
literal|256
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
operator|++
name|i
control|)
name|colorTable
index|[
name|i
index|]
operator|=
name|qRgb
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|img
operator|.
name|setColorTable
argument_list|(
name|colorTable
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
operator|++
name|i
control|)
block|{
name|img
operator|.
name|setPixel
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|QImage
name|imgInverted
argument_list|(
literal|256
argument_list|,
literal|1
argument_list|,
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|QRgb
argument_list|>
name|invertedColorTable
argument_list|(
literal|256
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
operator|++
name|i
control|)
name|invertedColorTable
index|[
literal|255
operator|-
name|i
index|]
operator|=
name|qRgb
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|imgInverted
operator|.
name|setColorTable
argument_list|(
name|invertedColorTable
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
operator|++
name|i
control|)
block|{
name|imgInverted
operator|.
name|setPixel
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
operator|(
literal|255
operator|-
name|i
operator|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|img
argument_list|,
name|imgInverted
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fillColor_data
name|void
name|tst_QImage
operator|::
name|fillColor_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QImage
operator|::
name|Format
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|Qt
operator|::
name|GlobalColor
argument_list|>
argument_list|(
literal|"color"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|uint
argument_list|>
argument_list|(
literal|"pixelValue"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Mono, color0"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_Mono
operator|<<
name|Qt
operator|::
name|color0
operator|<<
literal|0u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Mono, color1"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_Mono
operator|<<
name|Qt
operator|::
name|color1
operator|<<
literal|1u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"MonoLSB, color0"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_MonoLSB
operator|<<
name|Qt
operator|::
name|color0
operator|<<
literal|0u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"MonoLSB, color1"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_MonoLSB
operator|<<
name|Qt
operator|::
name|color1
operator|<<
literal|1u
expr_stmt|;
specifier|const
name|char
modifier|*
name|names
index|[]
init|=
block|{
literal|"Indexed8"
block|,
literal|"RGB32"
block|,
literal|"ARGB32"
block|,
literal|"ARGB32pm"
block|,
literal|"RGB16"
block|,
literal|"ARGB8565pm"
block|,
literal|"RGB666"
block|,
literal|"ARGB6666pm"
block|,
literal|"RGB555"
block|,
literal|"ARGB8555pm"
block|,
literal|"RGB888"
block|,
literal|"RGB444"
block|,
literal|"ARGB4444pm"
block|,
literal|"RGBx8888"
block|,
literal|"RGBA8888pm"
block|,
literal|"BGR30"
block|,
literal|"A2RGB30pm"
block|,
literal|0
block|}
decl_stmt|;
name|QImage
operator|::
name|Format
name|formats
index|[]
init|=
block|{
name|QImage
operator|::
name|Format_Indexed8
block|,
name|QImage
operator|::
name|Format_RGB32
block|,
name|QImage
operator|::
name|Format_ARGB32
block|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
block|,
name|QImage
operator|::
name|Format_RGB16
block|,
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
block|,
name|QImage
operator|::
name|Format_RGB666
block|,
name|QImage
operator|::
name|Format_ARGB6666_Premultiplied
block|,
name|QImage
operator|::
name|Format_RGB555
block|,
name|QImage
operator|::
name|Format_ARGB8555_Premultiplied
block|,
name|QImage
operator|::
name|Format_RGB888
block|,
name|QImage
operator|::
name|Format_RGB444
block|,
name|QImage
operator|::
name|Format_ARGB4444_Premultiplied
block|,
name|QImage
operator|::
name|Format_RGBX8888
block|,
name|QImage
operator|::
name|Format_RGBA8888_Premultiplied
block|,
name|QImage
operator|::
name|Format_BGR30
block|,
name|QImage
operator|::
name|Format_A2RGB30_Premultiplied
block|,     }
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|names
index|[
name|i
index|]
operator|!=
literal|0
condition|;
operator|++
name|i
control|)
block|{
name|QByteArray
name|name
decl_stmt|;
name|name
operator|.
name|append
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QByteArray
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|"black"
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
name|formats
index|[
name|i
index|]
operator|<<
name|Qt
operator|::
name|black
operator|<<
literal|0xff000000
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QByteArray
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|"white"
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
name|formats
index|[
name|i
index|]
operator|<<
name|Qt
operator|::
name|white
operator|<<
literal|0xffffffff
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QByteArray
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|"red"
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
name|formats
index|[
name|i
index|]
operator|<<
name|Qt
operator|::
name|red
operator|<<
literal|0xffff0000
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QByteArray
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|"green"
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
name|formats
index|[
name|i
index|]
operator|<<
name|Qt
operator|::
name|green
operator|<<
literal|0xff00ff00
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QByteArray
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|"blue"
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
name|formats
index|[
name|i
index|]
operator|<<
name|Qt
operator|::
name|blue
operator|<<
literal|0xff0000ff
expr_stmt|;
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RGB16, transparent"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB16
operator|<<
name|Qt
operator|::
name|transparent
operator|<<
literal|0xff000000
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RGB32, transparent"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB32
operator|<<
name|Qt
operator|::
name|transparent
operator|<<
literal|0xff000000
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ARGB32, transparent"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB32
operator|<<
name|Qt
operator|::
name|transparent
operator|<<
literal|0x00000000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ARGB32pm, transparent"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
operator|<<
name|Qt
operator|::
name|transparent
operator|<<
literal|0x00000000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RGBA8888pm, transparent"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGBA8888_Premultiplied
operator|<<
name|Qt
operator|::
name|transparent
operator|<<
literal|0x00000000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"A2RGB30pm, transparent"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_A2RGB30_Premultiplied
operator|<<
name|Qt
operator|::
name|transparent
operator|<<
literal|0x00000000u
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fillColor
name|void
name|tst_QImage
operator|::
name|fillColor
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QImage
operator|::
name|Format
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|Qt
operator|::
name|GlobalColor
argument_list|,
name|color
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|uint
argument_list|,
name|pixelValue
argument_list|)
expr_stmt|;
name|QImage
name|image
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|format
argument_list|)
decl_stmt|;
if|if
condition|(
name|image
operator|.
name|depth
argument_list|()
operator|==
literal|8
condition|)
block|{
name|QVector
argument_list|<
name|QRgb
argument_list|>
name|table
decl_stmt|;
name|table
operator|<<
literal|0xff000000
expr_stmt|;
name|table
operator|<<
literal|0xffffffff
expr_stmt|;
name|table
operator|<<
literal|0xffff0000
expr_stmt|;
name|table
operator|<<
literal|0xff00ff00
expr_stmt|;
name|table
operator|<<
literal|0xff0000ff
expr_stmt|;
name|image
operator|.
name|setColorTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
name|image
operator|.
name|fill
argument_list|(
name|color
argument_list|)
expr_stmt|;
if|if
condition|(
name|image
operator|.
name|depth
argument_list|()
operator|==
literal|1
condition|)
block|{
name|QCOMPARE
argument_list|(
name|image
operator|.
name|pixelIndex
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|(
name|int
operator|)
name|pixelValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|image
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|pixelValue
argument_list|)
expr_stmt|;
block|}
name|image
operator|.
name|fill
argument_list|(
name|QColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|image
operator|.
name|depth
argument_list|()
operator|==
literal|1
condition|)
block|{
name|QCOMPARE
argument_list|(
name|image
operator|.
name|pixelIndex
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|(
name|int
operator|)
name|pixelValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|image
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|pixelValue
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|fillColorWithAlpha
name|void
name|tst_QImage
operator|::
name|fillColorWithAlpha
parameter_list|()
block|{
name|QImage
name|argb32
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|argb32
operator|.
name|fill
argument_list|(
name|QColor
argument_list|(
literal|255
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|127
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|argb32
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|qRgba
argument_list|(
literal|255
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|127
argument_list|)
argument_list|)
expr_stmt|;
name|QImage
name|argb32pm
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|argb32pm
operator|.
name|fill
argument_list|(
name|QColor
argument_list|(
literal|255
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|127
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|argb32pm
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0x7f7f0000u
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fillRGB888
name|void
name|tst_QImage
operator|::
name|fillRGB888
parameter_list|()
block|{
name|QImage
name|expected
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|QImage
operator|::
name|Format_RGB888
argument_list|)
decl_stmt|;
name|QImage
name|actual
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|QImage
operator|::
name|Format_RGB888
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
name|Qt
operator|::
name|black
init|;
name|c
operator|<
name|Qt
operator|::
name|transparent
condition|;
operator|++
name|c
control|)
block|{
name|QColor
name|color
init|=
name|QColor
argument_list|(
name|Qt
operator|::
name|GlobalColor
argument_list|(
name|c
argument_list|)
argument_list|)
decl_stmt|;
name|expected
operator|.
name|fill
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|actual
operator|.
name|fill
argument_list|(
name|color
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|actual
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|expected
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|fillPixel_data
name|void
name|tst_QImage
operator|::
name|fillPixel_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QImage
operator|::
name|Format
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|uint
argument_list|>
argument_list|(
literal|"color"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|uint
argument_list|>
argument_list|(
literal|"pixelValue"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RGB16, transparent"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB16
operator|<<
literal|0x0u
operator|<<
literal|0xff000000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RGB32, transparent"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB32
operator|<<
literal|0x0u
operator|<<
literal|0xff000000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RGBx8888, transparent"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGBX8888
operator|<<
literal|0x0u
operator|<<
literal|0xff000000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ARGB32, transparent"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB32
operator|<<
literal|0x0u
operator|<<
literal|0x00000000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ARGB32pm, transparent"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
operator|<<
literal|0x0u
operator|<<
literal|0x00000000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RGBA8888pm, transparent"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGBA8888_Premultiplied
operator|<<
literal|0x0u
operator|<<
literal|0x00000000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Alpha8, transparent"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_Alpha8
operator|<<
literal|0x0u
operator|<<
literal|0x00000000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RGB16, red"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB16
operator|<<
operator|(
name|uint
operator|)
name|qConvertRgb32To16
argument_list|(
literal|0xffff0000
argument_list|)
operator|<<
literal|0xffff0000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RGB32, red"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB32
operator|<<
literal|0xffff0000u
operator|<<
literal|0xffff0000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ARGB32, red"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB32
operator|<<
literal|0xffff0000u
operator|<<
literal|0xffff0000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RGBA8888, red"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGBA8888
operator|<<
literal|0xff0000ffu
operator|<<
literal|0xffff0000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Grayscale8, grey"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_Grayscale8
operator|<<
literal|0xff808080u
operator|<<
literal|0xff808080u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RGB32, semi-red"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB32
operator|<<
literal|0x80ff0000u
operator|<<
literal|0xffff0000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ARGB32, semi-red"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB32
operator|<<
literal|0x80ff0000u
operator|<<
literal|0x80ff0000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ARGB32pm, semi-red"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB32
operator|<<
literal|0x80800000u
operator|<<
literal|0x80800000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RGBA8888pm, semi-red"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGBA8888_Premultiplied
operator|<<
literal|0x80000080u
operator|<<
literal|0x80800000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Alpha8, semi-red"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_Alpha8
operator|<<
literal|0x80000080u
operator|<<
literal|0x80000000u
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fillPixel
name|void
name|tst_QImage
operator|::
name|fillPixel
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QImage
operator|::
name|Format
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|uint
argument_list|,
name|color
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|uint
argument_list|,
name|pixelValue
argument_list|)
expr_stmt|;
name|QImage
name|image
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|image
operator|.
name|fill
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|image
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|pixelValue
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rgbSwapped_data
name|void
name|tst_QImage
operator|::
name|rgbSwapped_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QImage
operator|::
name|Format
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_Indexed8"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_Indexed8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB32"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB32
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_ARGB32"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB32
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_ARGB32_Premultiplied"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB16"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_ARGB8565_Premultiplied"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_ARGB6666_Premultiplied"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB6666_Premultiplied
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_ARGB4444_Premultiplied"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB4444_Premultiplied
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB666"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB666
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB555"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB555
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_ARGB8555_Premultiplied"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB8555_Premultiplied
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB888"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB888
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB444"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB444
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGBX8888"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGBX8888
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGBA8888_Premultiplied"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGBA8888_Premultiplied
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_A2BGR30_Premultiplied"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_A2BGR30_Premultiplied
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB30"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB30
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rgbSwapped
name|void
name|tst_QImage
operator|::
name|rgbSwapped
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QImage
operator|::
name|Format
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QImage
name|image
argument_list|(
literal|100
argument_list|,
literal|1
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|image
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QColor
argument_list|>
name|testColor
argument_list|(
name|image
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|image
operator|.
name|width
argument_list|()
condition|;
operator|++
name|i
control|)
name|testColor
index|[
name|i
index|]
operator|=
name|QColor
argument_list|(
name|i
argument_list|,
literal|10
operator|+
name|i
argument_list|,
literal|20
operator|+
name|i
operator|*
literal|2
argument_list|,
literal|30
operator|+
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|!=
name|QImage
operator|::
name|Format_Indexed8
condition|)
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|image
argument_list|)
decl_stmt|;
name|p
operator|.
name|setCompositionMode
argument_list|(
name|QPainter
operator|::
name|CompositionMode_Source
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|image
operator|.
name|width
argument_list|()
condition|;
operator|++
name|i
control|)
name|p
operator|.
name|fillRect
argument_list|(
name|QRect
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|testColor
index|[
name|i
index|]
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|image
operator|.
name|setColorCount
argument_list|(
name|image
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|image
operator|.
name|width
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|image
operator|.
name|setColor
argument_list|(
literal|0
argument_list|,
name|testColor
index|[
name|i
index|]
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|image
operator|.
name|setPixel
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|QImage
name|imageSwapped
init|=
name|image
operator|.
name|rgbSwapped
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|image
operator|.
name|width
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QColor
name|referenceColor
init|=
name|QColor
argument_list|(
name|image
operator|.
name|pixel
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|QColor
name|swappedColor
init|=
name|QColor
argument_list|(
name|imageSwapped
operator|.
name|pixel
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|swappedColor
operator|.
name|alpha
argument_list|()
argument_list|,
name|referenceColor
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|swappedColor
operator|.
name|red
argument_list|()
argument_list|,
name|referenceColor
operator|.
name|blue
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|swappedColor
operator|.
name|green
argument_list|()
argument_list|,
name|referenceColor
operator|.
name|green
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|swappedColor
operator|.
name|blue
argument_list|()
argument_list|,
name|referenceColor
operator|.
name|red
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QImage
name|imageSwappedTwice
init|=
name|imageSwapped
operator|.
name|rgbSwapped
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|image
argument_list|,
name|imageSwappedTwice
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|memcmp
argument_list|(
name|image
operator|.
name|constBits
argument_list|()
argument_list|,
name|imageSwappedTwice
operator|.
name|constBits
argument_list|()
argument_list|,
name|image
operator|.
name|byteCount
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mirrored_data
name|void
name|tst_QImage
operator|::
name|mirrored_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QImage
operator|::
name|Format
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"swap_vertical"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"swap_horizontal"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"width"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"height"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB32, vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB32
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|16
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_ARGB32, vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB32
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|16
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_ARGB32_Premultiplied, vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|16
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB16, vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB16
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|16
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_ARGB8565_Premultiplied, vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|16
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_ARGB6666_Premultiplied, vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB6666_Premultiplied
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|16
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_ARGB4444_Premultiplied, vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB4444_Premultiplied
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|16
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB666, vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB666
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|16
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB555, vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB555
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|16
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_ARGB8555_Premultiplied, vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB8555_Premultiplied
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|16
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB888, vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB888
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|16
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB444, vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB444
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|16
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGBX8888, vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGBX8888
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|16
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGBA8888_Premultiplied, vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGBA8888_Premultiplied
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|16
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_A2BGR30_Premultiplied, vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_A2BGR30_Premultiplied
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|16
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB30, vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB30
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|16
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_Indexed8, vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_Indexed8
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|16
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_Mono, vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_Mono
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|16
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_MonoLSB, vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_MonoLSB
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|16
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_ARGB32_Premultiplied, horizontal"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
operator|<<
literal|false
operator|<<
literal|true
operator|<<
literal|16
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB888, horizontal"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB888
operator|<<
literal|false
operator|<<
literal|true
operator|<<
literal|16
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB16, horizontal"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB16
operator|<<
literal|false
operator|<<
literal|true
operator|<<
literal|16
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_Indexed8, horizontal"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_Indexed8
operator|<<
literal|false
operator|<<
literal|true
operator|<<
literal|16
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_Mono, horizontal"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_Mono
operator|<<
literal|false
operator|<<
literal|true
operator|<<
literal|16
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_MonoLSB, horizontal"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_MonoLSB
operator|<<
literal|false
operator|<<
literal|true
operator|<<
literal|16
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_ARGB32_Premultiplied, horizontal+vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
operator|<<
literal|true
operator|<<
literal|true
operator|<<
literal|16
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB888, horizontal+vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB888
operator|<<
literal|true
operator|<<
literal|true
operator|<<
literal|16
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB16, horizontal+vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB16
operator|<<
literal|true
operator|<<
literal|true
operator|<<
literal|16
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_Indexed8, horizontal+vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_Indexed8
operator|<<
literal|true
operator|<<
literal|true
operator|<<
literal|16
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_Mono, horizontal+vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_Mono
operator|<<
literal|true
operator|<<
literal|true
operator|<<
literal|16
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_MonoLSB, horizontal+vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_MonoLSB
operator|<<
literal|true
operator|<<
literal|true
operator|<<
literal|16
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB32, vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB32
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|8
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_ARGB32, vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB32
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|16
operator|<<
literal|8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_Mono, vertical, non-aligned"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_Mono
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|19
operator|<<
literal|25
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_MonoLSB, vertical, non-aligned"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_MonoLSB
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|19
operator|<<
literal|25
expr_stmt|;
comment|// Non-aligned horizontal 1-bit needs special handling so test this.
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_Mono, horizontal, non-aligned"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_Mono
operator|<<
literal|false
operator|<<
literal|true
operator|<<
literal|13
operator|<<
literal|17
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_Mono, horizontal, non-aligned"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_Mono
operator|<<
literal|false
operator|<<
literal|true
operator|<<
literal|19
operator|<<
literal|25
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_Mono, horizontal+vertical, non-aligned"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_Mono
operator|<<
literal|true
operator|<<
literal|true
operator|<<
literal|25
operator|<<
literal|47
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_Mono, horizontal+vertical, non-aligned"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_Mono
operator|<<
literal|true
operator|<<
literal|true
operator|<<
literal|21
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_MonoLSB, horizontal, non-aligned"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_MonoLSB
operator|<<
literal|false
operator|<<
literal|true
operator|<<
literal|13
operator|<<
literal|17
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_MonoLSB, horizontal, non-aligned"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_MonoLSB
operator|<<
literal|false
operator|<<
literal|true
operator|<<
literal|19
operator|<<
literal|25
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_MonoLSB, horizontal+vertical, non-aligned"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_MonoLSB
operator|<<
literal|true
operator|<<
literal|true
operator|<<
literal|25
operator|<<
literal|47
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_MonoLSB, horizontal+vertical, non-aligned"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_MonoLSB
operator|<<
literal|true
operator|<<
literal|true
operator|<<
literal|21
operator|<<
literal|16
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mirrored
name|void
name|tst_QImage
operator|::
name|mirrored
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QImage
operator|::
name|Format
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|swap_vertical
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|swap_horizontal
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|width
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|QImage
name|image
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|QImage
operator|::
name|Format_Mono
case|:
case|case
name|QImage
operator|::
name|Format_MonoLSB
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|image
operator|.
name|height
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|ushort
modifier|*
name|scanLine
init|=
operator|(
name|ushort
operator|*
operator|)
name|image
operator|.
name|scanLine
argument_list|(
name|i
argument_list|)
decl_stmt|;
operator|*
name|scanLine
operator|=
operator|(
name|i
operator|%
literal|2
operator|)
condition|?
literal|0x5555U
else|:
literal|0xCCCCU
expr_stmt|;
block|}
break|break;
case|case
name|QImage
operator|::
name|Format_Indexed8
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|image
operator|.
name|height
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|image
operator|.
name|width
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|image
operator|.
name|setColor
argument_list|(
name|i
operator|*
literal|16
operator|+
name|j
argument_list|,
name|qRgb
argument_list|(
name|j
operator|*
literal|16
argument_list|,
name|i
operator|*
literal|16
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|image
operator|.
name|setPixel
argument_list|(
name|j
argument_list|,
name|i
argument_list|,
name|i
operator|*
literal|16
operator|+
name|j
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|image
operator|.
name|height
argument_list|()
condition|;
operator|++
name|i
control|)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|image
operator|.
name|width
argument_list|()
condition|;
operator|++
name|j
control|)
name|image
operator|.
name|setPixel
argument_list|(
name|j
argument_list|,
name|i
argument_list|,
name|qRgb
argument_list|(
name|j
operator|*
literal|16
argument_list|,
name|i
operator|*
literal|16
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
name|QImage
name|imageMirrored
init|=
name|image
operator|.
name|mirrored
argument_list|(
name|swap_horizontal
argument_list|,
name|swap_vertical
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|image
operator|.
name|height
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|int
name|mirroredI
init|=
name|swap_vertical
condition|?
operator|(
name|image
operator|.
name|height
argument_list|()
operator|-
name|i
operator|-
literal|1
operator|)
else|:
name|i
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|image
operator|.
name|width
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|QRgb
name|referenceColor
init|=
name|image
operator|.
name|pixel
argument_list|(
name|j
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|int
name|mirroredJ
init|=
name|swap_horizontal
condition|?
operator|(
name|image
operator|.
name|width
argument_list|()
operator|-
name|j
operator|-
literal|1
operator|)
else|:
name|j
decl_stmt|;
name|QRgb
name|mirroredColor
init|=
name|imageMirrored
operator|.
name|pixel
argument_list|(
name|mirroredJ
argument_list|,
name|mirroredI
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mirroredColor
argument_list|,
name|referenceColor
argument_list|)
expr_stmt|;
block|}
block|}
name|QImage
name|imageMirroredTwice
init|=
name|imageMirrored
operator|.
name|mirrored
argument_list|(
name|swap_horizontal
argument_list|,
name|swap_vertical
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|image
argument_list|,
name|imageMirroredTwice
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|!=
name|QImage
operator|::
name|Format_Mono
operator|&&
name|format
operator|!=
name|QImage
operator|::
name|Format_MonoLSB
condition|)
name|QCOMPARE
argument_list|(
name|memcmp
argument_list|(
name|image
operator|.
name|constBits
argument_list|()
argument_list|,
name|imageMirroredTwice
operator|.
name|constBits
argument_list|()
argument_list|,
name|image
operator|.
name|byteCount
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|image
operator|.
name|height
argument_list|()
condition|;
operator|++
name|i
control|)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|image
operator|.
name|width
argument_list|()
condition|;
operator|++
name|j
control|)
name|QCOMPARE
argument_list|(
name|image
operator|.
name|pixel
argument_list|(
name|j
argument_list|,
name|i
argument_list|)
argument_list|,
name|imageMirroredTwice
operator|.
name|pixel
argument_list|(
name|j
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|inplaceRgbSwapped_data
name|void
name|tst_QImage
operator|::
name|inplaceRgbSwapped_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QImage
operator|::
name|Format
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_ARGB32_Premultiplied"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGBA8888"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGBA8888
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_A2RGB30_Premultiplied"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_A2RGB30_Premultiplied
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB888"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB888
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB16"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_Indexed8"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_Indexed8
expr_stmt|;
block|}
end_function
begin_function
DECL|function|inplaceRgbSwapped
name|void
name|tst_QImage
operator|::
name|inplaceRgbSwapped
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_COMPILER_REF_QUALIFIERS
argument_list|)
name|QFETCH
argument_list|(
name|QImage
operator|::
name|Format
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QImage
name|image
argument_list|(
literal|64
argument_list|,
literal|1
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|image
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QRgb
argument_list|>
name|testColor
argument_list|(
name|image
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|image
operator|.
name|width
argument_list|()
condition|;
operator|++
name|i
control|)
name|testColor
index|[
name|i
index|]
operator|=
name|qRgb
argument_list|(
name|i
operator|*
literal|2
argument_list|,
name|i
operator|*
literal|3
argument_list|,
literal|255
operator|-
name|i
operator|*
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|==
name|QImage
operator|::
name|Format_Indexed8
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|image
operator|.
name|width
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|image
operator|.
name|setColor
argument_list|(
name|i
argument_list|,
name|testColor
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|image
operator|.
name|setPixel
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|image
operator|.
name|width
argument_list|()
condition|;
operator|++
name|i
control|)
name|image
operator|.
name|setPixel
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
name|testColor
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
specifier|const
name|uchar
modifier|*
name|orginalPtr
init|=
name|image
operator|.
name|constScanLine
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QImage
name|imageSwapped
init|=
name|std
operator|::
name|move
argument_list|(
name|image
argument_list|)
operator|.
name|rgbSwapped
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|imageSwapped
operator|.
name|width
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QRgb
name|referenceColor
init|=
name|testColor
index|[
name|i
index|]
decl_stmt|;
name|QRgb
name|swappedColor
init|=
name|imageSwapped
operator|.
name|pixel
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|qRed
argument_list|(
name|swappedColor
argument_list|)
operator|&
literal|0xf8
argument_list|,
name|qBlue
argument_list|(
name|referenceColor
argument_list|)
operator|&
literal|0xf8
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qGreen
argument_list|(
name|swappedColor
argument_list|)
operator|&
literal|0xf8
argument_list|,
name|qGreen
argument_list|(
name|referenceColor
argument_list|)
operator|&
literal|0xf8
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qBlue
argument_list|(
name|swappedColor
argument_list|)
operator|&
literal|0xf8
argument_list|,
name|qRed
argument_list|(
name|referenceColor
argument_list|)
operator|&
literal|0xf8
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|imageSwapped
operator|.
name|constScanLine
argument_list|(
literal|0
argument_list|)
argument_list|,
name|orginalPtr
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|inplaceMirrored_data
name|void
name|tst_QImage
operator|::
name|inplaceMirrored_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QImage
operator|::
name|Format
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"swap_vertical"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"swap_horizontal"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_ARGB32, vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB32
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB888, vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB888
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB16, vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB16
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_Indexed8, vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_Indexed8
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_Mono, vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_Mono
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_ARGB32, horizontal"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB32
operator|<<
literal|false
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB888, horizontal"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB888
operator|<<
literal|false
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB16, horizontal"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB16
operator|<<
literal|false
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_Indexed8, horizontal"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_Indexed8
operator|<<
literal|false
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_Mono, horizontal"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_Mono
operator|<<
literal|false
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_ARGB32, horizontal+vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB32
operator|<<
literal|true
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB888, horizontal+vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB888
operator|<<
literal|true
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB16, horizontal+vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB16
operator|<<
literal|true
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_Indexed8, horizontal+vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_Indexed8
operator|<<
literal|true
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_Mono, horizontal+vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_Mono
operator|<<
literal|true
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|inplaceMirrored
name|void
name|tst_QImage
operator|::
name|inplaceMirrored
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_COMPILER_REF_QUALIFIERS
argument_list|)
name|QFETCH
argument_list|(
name|QImage
operator|::
name|Format
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|swap_vertical
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|swap_horizontal
argument_list|)
expr_stmt|;
name|QImage
name|image
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|,
name|format
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|QImage
operator|::
name|Format_Mono
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|image
operator|.
name|height
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|ushort
modifier|*
name|scanLine
init|=
operator|(
name|ushort
operator|*
operator|)
name|image
operator|.
name|scanLine
argument_list|(
name|i
argument_list|)
decl_stmt|;
operator|*
name|scanLine
operator|=
operator|(
name|i
operator|%
literal|2
operator|)
condition|?
literal|0x0fffU
else|:
literal|0xf000U
expr_stmt|;
block|}
break|break;
case|case
name|QImage
operator|::
name|Format_Indexed8
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|image
operator|.
name|height
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|image
operator|.
name|width
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|image
operator|.
name|setColor
argument_list|(
name|i
operator|*
literal|16
operator|+
name|j
argument_list|,
name|qRgb
argument_list|(
name|j
operator|*
literal|16
argument_list|,
name|i
operator|*
literal|16
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|image
operator|.
name|setPixel
argument_list|(
name|j
argument_list|,
name|i
argument_list|,
name|i
operator|*
literal|16
operator|+
name|j
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|image
operator|.
name|height
argument_list|()
condition|;
operator|++
name|i
control|)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|image
operator|.
name|width
argument_list|()
condition|;
operator|++
name|j
control|)
name|image
operator|.
name|setPixel
argument_list|(
name|j
argument_list|,
name|i
argument_list|,
name|qRgb
argument_list|(
name|j
operator|*
literal|16
argument_list|,
name|i
operator|*
literal|16
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|const
name|uchar
modifier|*
name|originalPtr
init|=
name|image
operator|.
name|constScanLine
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QImage
name|imageMirrored
init|=
name|std
operator|::
name|move
argument_list|(
name|image
argument_list|)
operator|.
name|mirrored
argument_list|(
name|swap_horizontal
argument_list|,
name|swap_vertical
argument_list|)
decl_stmt|;
if|if
condition|(
name|format
operator|!=
name|QImage
operator|::
name|Format_Mono
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|imageMirrored
operator|.
name|height
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|int
name|mirroredI
init|=
name|swap_vertical
condition|?
operator|(
name|imageMirrored
operator|.
name|height
argument_list|()
operator|-
name|i
operator|-
literal|1
operator|)
else|:
name|i
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|imageMirrored
operator|.
name|width
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|int
name|mirroredJ
init|=
name|swap_horizontal
condition|?
operator|(
name|imageMirrored
operator|.
name|width
argument_list|()
operator|-
name|j
operator|-
literal|1
operator|)
else|:
name|j
decl_stmt|;
name|QRgb
name|mirroredColor
init|=
name|imageMirrored
operator|.
name|pixel
argument_list|(
name|mirroredJ
argument_list|,
name|mirroredI
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|qRed
argument_list|(
name|mirroredColor
argument_list|)
operator|&
literal|0xF8
argument_list|,
name|j
operator|*
literal|16
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qGreen
argument_list|(
name|mirroredColor
argument_list|)
operator|&
literal|0xF8
argument_list|,
name|i
operator|*
literal|16
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|imageMirrored
operator|.
name|height
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|ushort
modifier|*
name|scanLine
init|=
operator|(
name|ushort
operator|*
operator|)
name|imageMirrored
operator|.
name|scanLine
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ushort
name|expect
decl_stmt|;
if|if
condition|(
name|swap_vertical
operator|&&
name|swap_horizontal
condition|)
name|expect
operator|=
operator|(
name|i
operator|%
literal|2
operator|)
condition|?
literal|0x000fU
else|:
literal|0xfff0U
expr_stmt|;
elseif|else
if|if
condition|(
name|swap_vertical
condition|)
name|expect
operator|=
operator|(
name|i
operator|%
literal|2
operator|)
condition|?
literal|0xf000U
else|:
literal|0x0fffU
expr_stmt|;
else|else
name|expect
operator|=
operator|(
name|i
operator|%
literal|2
operator|)
condition|?
literal|0xfff0U
else|:
literal|0x000fU
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|scanLine
argument_list|,
name|expect
argument_list|)
expr_stmt|;
block|}
block|}
name|QCOMPARE
argument_list|(
name|imageMirrored
operator|.
name|constScanLine
argument_list|(
literal|0
argument_list|)
argument_list|,
name|originalPtr
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|inplaceMirroredOdd_data
name|void
name|tst_QImage
operator|::
name|inplaceMirroredOdd_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QImage
operator|::
name|Format
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"swap_vertical"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"swap_horizontal"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_ARGB32, vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB32
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB888, vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB888
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB16, vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB16
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_ARGB32, horizontal"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB32
operator|<<
literal|false
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB888, horizontal"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB888
operator|<<
literal|false
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB16, horizontal"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB16
operator|<<
literal|false
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_ARGB32, horizontal+vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB32
operator|<<
literal|true
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB888, horizontal+vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB888
operator|<<
literal|true
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB16, horizontal+vertical"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB16
operator|<<
literal|true
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|inplaceMirroredOdd
name|void
name|tst_QImage
operator|::
name|inplaceMirroredOdd
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_COMPILER_REF_QUALIFIERS
argument_list|)
name|QFETCH
argument_list|(
name|QImage
operator|::
name|Format
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|swap_vertical
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|swap_horizontal
argument_list|)
expr_stmt|;
name|QImage
name|image
argument_list|(
literal|15
argument_list|,
literal|15
argument_list|,
name|format
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|image
operator|.
name|height
argument_list|()
condition|;
operator|++
name|i
control|)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|image
operator|.
name|width
argument_list|()
condition|;
operator|++
name|j
control|)
name|image
operator|.
name|setPixel
argument_list|(
name|j
argument_list|,
name|i
argument_list|,
name|qRgb
argument_list|(
name|j
operator|*
literal|16
argument_list|,
name|i
operator|*
literal|16
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|uchar
modifier|*
name|originalPtr
init|=
name|image
operator|.
name|constScanLine
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QImage
name|imageMirrored
init|=
name|std
operator|::
name|move
argument_list|(
name|image
argument_list|)
operator|.
name|mirrored
argument_list|(
name|swap_horizontal
argument_list|,
name|swap_vertical
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|imageMirrored
operator|.
name|height
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|int
name|mirroredI
init|=
name|swap_vertical
condition|?
operator|(
name|imageMirrored
operator|.
name|height
argument_list|()
operator|-
name|i
operator|-
literal|1
operator|)
else|:
name|i
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|imageMirrored
operator|.
name|width
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|int
name|mirroredJ
init|=
name|swap_horizontal
condition|?
operator|(
name|imageMirrored
operator|.
name|width
argument_list|()
operator|-
name|j
operator|-
literal|1
operator|)
else|:
name|j
decl_stmt|;
name|QRgb
name|mirroredColor
init|=
name|imageMirrored
operator|.
name|pixel
argument_list|(
name|mirroredJ
argument_list|,
name|mirroredI
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|qRed
argument_list|(
name|mirroredColor
argument_list|)
operator|&
literal|0xF8
argument_list|,
name|j
operator|*
literal|16
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qGreen
argument_list|(
name|mirroredColor
argument_list|)
operator|&
literal|0xF8
argument_list|,
name|i
operator|*
literal|16
argument_list|)
expr_stmt|;
block|}
block|}
name|QCOMPARE
argument_list|(
name|imageMirrored
operator|.
name|constScanLine
argument_list|(
literal|0
argument_list|)
argument_list|,
name|originalPtr
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|inplaceRgbMirrored
name|void
name|tst_QImage
operator|::
name|inplaceRgbMirrored
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_COMPILER_REF_QUALIFIERS
argument_list|)
name|QImage
name|image1
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|QImage
name|image2
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|image1
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|image2
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
specifier|const
name|uchar
modifier|*
name|originalPtr1
init|=
name|image1
operator|.
name|constScanLine
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|originalPtr2
init|=
name|image2
operator|.
name|constScanLine
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|image1
argument_list|)
operator|.
name|rgbSwapped
argument_list|()
operator|.
name|mirrored
argument_list|()
operator|.
name|constScanLine
argument_list|(
literal|0
argument_list|)
argument_list|,
name|originalPtr1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|image2
argument_list|)
operator|.
name|mirrored
argument_list|()
operator|.
name|rgbSwapped
argument_list|()
operator|.
name|constScanLine
argument_list|(
literal|0
argument_list|)
argument_list|,
name|originalPtr2
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|inplaceConversion_data
name|void
name|tst_QImage
operator|::
name|inplaceConversion_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QImage
operator|::
name|Format
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QImage
operator|::
name|Format
argument_list|>
argument_list|(
literal|"dest_format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB32 -> RGB16"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB32
operator|<<
name|QImage
operator|::
name|Format_RGB16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_ARGB32 -> Format_RGBA8888"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB32
operator|<<
name|QImage
operator|::
name|Format_RGBA8888
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB888 -> Format_ARGB6666_Premultiplied"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB888
operator|<<
name|QImage
operator|::
name|Format_ARGB6666_Premultiplied
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB16 -> Format_RGB555"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB16
operator|<<
name|QImage
operator|::
name|Format_RGB555
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB666 -> Format_RGB888"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB666
operator|<<
name|QImage
operator|::
name|Format_RGB888
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_ARGB8565_Premultiplied, Format_ARGB8555_Premultiplied"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
operator|<<
name|QImage
operator|::
name|Format_ARGB8555_Premultiplied
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_ARGB4444_Premultiplied, Format_RGB444"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB4444_Premultiplied
operator|<<
name|QImage
operator|::
name|Format_RGB444
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGBA8888 -> RGB16"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGBA8888
operator|<<
name|QImage
operator|::
name|Format_RGB16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGBA8888_Premultiplied -> RGB16"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGBA8888_Premultiplied
operator|<<
name|QImage
operator|::
name|Format_RGB16
expr_stmt|;
block|}
end_function
begin_function
DECL|function|inplaceConversion
name|void
name|tst_QImage
operator|::
name|inplaceConversion
parameter_list|()
block|{
comment|// Test that conversions between RGB formats of the same bitwidth can be done inplace.
if|#
directive|if
name|defined
argument_list|(
name|Q_COMPILER_REF_QUALIFIERS
argument_list|)
name|QFETCH
argument_list|(
name|QImage
operator|::
name|Format
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QImage
operator|::
name|Format
argument_list|,
name|dest_format
argument_list|)
expr_stmt|;
name|QImage
name|image
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|,
name|format
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|image
operator|.
name|height
argument_list|()
condition|;
operator|++
name|i
control|)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|image
operator|.
name|width
argument_list|()
condition|;
operator|++
name|j
control|)
name|image
operator|.
name|setPixel
argument_list|(
name|j
argument_list|,
name|i
argument_list|,
name|qRgb
argument_list|(
name|j
operator|*
literal|16
argument_list|,
name|i
operator|*
literal|16
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|uchar
modifier|*
name|originalPtr
init|=
name|image
operator|.
name|constScanLine
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QImage
name|imageConverted
init|=
name|std
operator|::
name|move
argument_list|(
name|image
argument_list|)
operator|.
name|convertToFormat
argument_list|(
name|dest_format
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|imageConverted
operator|.
name|format
argument_list|()
argument_list|,
name|dest_format
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|imageConverted
operator|.
name|height
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|imageConverted
operator|.
name|width
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|QRgb
name|convertedColor
init|=
name|imageConverted
operator|.
name|pixel
argument_list|(
name|j
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|qRed
argument_list|(
name|convertedColor
argument_list|)
operator|&
literal|0xF0
argument_list|,
name|j
operator|*
literal|16
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qGreen
argument_list|(
name|convertedColor
argument_list|)
operator|&
literal|0xF0
argument_list|,
name|i
operator|*
literal|16
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|image
operator|.
name|depth
argument_list|()
operator|==
name|imageConverted
operator|.
name|depth
argument_list|()
condition|)
name|QCOMPARE
argument_list|(
name|imageConverted
operator|.
name|constScanLine
argument_list|(
literal|0
argument_list|)
argument_list|,
name|originalPtr
argument_list|)
expr_stmt|;
block|{
comment|// Test attempted inplace conversion of images created on existing buffer
specifier|static
specifier|const
name|quint32
name|readOnlyData
index|[]
init|=
block|{
literal|0x00010203U
block|,
literal|0x04050607U
block|,
literal|0x08091011U
block|,
literal|0x12131415U
block|}
decl_stmt|;
name|quint32
name|readWriteData
index|[]
init|=
block|{
literal|0x00010203U
block|,
literal|0x04050607U
block|,
literal|0x08091011U
block|,
literal|0x12131415U
block|}
decl_stmt|;
name|QImage
name|roImage
argument_list|(
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|readOnlyData
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|QImage
name|roInplaceConverted
init|=
name|std
operator|::
name|move
argument_list|(
name|roImage
argument_list|)
operator|.
name|convertToFormat
argument_list|(
name|dest_format
argument_list|)
decl_stmt|;
name|QImage
name|rwImage
argument_list|(
operator|(
name|uchar
operator|*
operator|)
name|readWriteData
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|QImage
name|rwInplaceConverted
init|=
name|std
operator|::
name|move
argument_list|(
name|rwImage
argument_list|)
operator|.
name|convertToFormat
argument_list|(
name|dest_format
argument_list|)
decl_stmt|;
name|QImage
name|roImage2
argument_list|(
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|readOnlyData
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|QImage
name|normalConverted
init|=
name|roImage2
operator|.
name|convertToFormat
argument_list|(
name|dest_format
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|normalConverted
argument_list|,
name|roInplaceConverted
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|normalConverted
argument_list|,
name|rwInplaceConverted
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|deepCopyWhenPaintingActive
name|void
name|tst_QImage
operator|::
name|deepCopyWhenPaintingActive
parameter_list|()
block|{
name|QImage
name|image
argument_list|(
literal|64
argument_list|,
literal|64
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|image
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QPainter
name|painter
argument_list|(
operator|&
name|image
argument_list|)
decl_stmt|;
name|QImage
name|copy
init|=
name|image
decl_stmt|;
name|painter
operator|.
name|setBrush
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawEllipse
argument_list|(
name|image
operator|.
name|rect
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|copy
operator|!=
name|image
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|scaled_QTBUG19157
name|void
name|tst_QImage
operator|::
name|scaled_QTBUG19157
parameter_list|()
block|{
name|QImage
name|foo
argument_list|(
literal|5000
argument_list|,
literal|1
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|foo
operator|=
name|foo
operator|.
name|scaled
argument_list|(
literal|1024
argument_list|,
literal|1024
argument_list|,
name|Qt
operator|::
name|KeepAspectRatio
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|foo
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|convertOverUnPreMul
name|void
name|tst_QImage
operator|::
name|convertOverUnPreMul
parameter_list|()
block|{
name|QImage
name|image
argument_list|(
literal|256
argument_list|,
literal|256
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|256
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|j
condition|;
name|i
operator|++
control|)
block|{
name|image
operator|.
name|setPixel
argument_list|(
name|i
argument_list|,
name|j
argument_list|,
name|qRgba
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|QImage
name|image2
init|=
name|image
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|256
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|j
condition|;
name|i
operator|++
control|)
block|{
name|QCOMPARE
argument_list|(
name|qAlpha
argument_list|(
name|image2
operator|.
name|pixel
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
argument_list|,
name|qAlpha
argument_list|(
name|image
operator|.
name|pixel
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qGray
argument_list|(
name|image2
operator|.
name|pixel
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
argument_list|,
name|qGray
argument_list|(
name|image
operator|.
name|pixel
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|scaled_QTBUG35972
name|void
name|tst_QImage
operator|::
name|scaled_QTBUG35972
parameter_list|()
block|{
name|QImage
name|src
argument_list|(
literal|532
argument_list|,
literal|519
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|src
operator|.
name|fill
argument_list|(
name|QColor
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
argument_list|)
expr_stmt|;
name|QImage
name|dest
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|dest
operator|.
name|fill
argument_list|(
name|QColor
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
argument_list|)
expr_stmt|;
name|QPainter
name|painter1
argument_list|(
operator|&
name|dest
argument_list|)
decl_stmt|;
specifier|const
name|QTransform
name|trf
argument_list|(
literal|1.25
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1.25
argument_list|,
comment|/*dx */
literal|15.900000000000034
argument_list|,
comment|/* dy */
literal|72.749999999999986
argument_list|)
decl_stmt|;
name|painter1
operator|.
name|setTransform
argument_list|(
name|trf
argument_list|)
expr_stmt|;
name|painter1
operator|.
name|drawImage
argument_list|(
name|QRectF
argument_list|(
operator|-
literal|2.6
argument_list|,
operator|-
literal|2.6
argument_list|,
literal|425.6
argument_list|,
literal|415.20000000000005
argument_list|)
argument_list|,
name|src
argument_list|,
name|QRectF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|532
argument_list|,
literal|519
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|quint32
modifier|*
name|pixels
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint32
operator|*
argument_list|>
argument_list|(
name|dest
operator|.
name|constBits
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|dest
operator|.
name|width
argument_list|()
operator|*
name|dest
operator|.
name|height
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|pixels
index|[
name|i
index|]
argument_list|,
literal|0xffffffff
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|convertToPixelFormat
name|void
name|tst_QImage
operator|::
name|convertToPixelFormat
parameter_list|()
block|{
name|QPixelFormat
name|rgb565
init|=
name|qPixelFormatRgba
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
name|QPixelFormat
operator|::
name|IgnoresAlpha
argument_list|,
name|QPixelFormat
operator|::
name|AtBeginning
argument_list|,
name|QPixelFormat
operator|::
name|NotPremultiplied
argument_list|,
name|QPixelFormat
operator|::
name|UnsignedShort
argument_list|)
decl_stmt|;
name|QPixelFormat
name|rgb565ImageFormat
init|=
name|QImage
operator|::
name|toPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|rgb565
argument_list|,
name|rgb565ImageFormat
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|convertToImageFormat_data
name|void
name|tst_QImage
operator|::
name|convertToImageFormat_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QImage
operator|::
name|Format
argument_list|>
argument_list|(
literal|"image_format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Convert Format_Invalid"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_Invalid
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Convert Format_Mono"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_Mono
expr_stmt|;
comment|//This ends up being a QImage::Format_Mono since we cant specify LSB in QPixelFormat
comment|//QTest::newRow("Convert Format_MonoLSB")<< QImage::Format_MonoLSB;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Convert Format_Indexed8"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_Indexed8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Convert Format_RGB32"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB32
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Convert Format_ARGB32"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB32
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Convert Format_ARGB32_Premultiplied"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Convert Format_RGB16"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Convert Format_ARGB8565_Premultiplied"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Convert Format_RGB666"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB666
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Convert Format_ARGB6666_Premultiplied"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB6666_Premultiplied
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Convert Format_RGB555"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB555
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Convert Format_ARGB8555_Premultiplied"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB8555_Premultiplied
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Convert Format_RGB888"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB888
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Convert Format_RGB444"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB444
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Convert Format_ARGB4444_Premultiplied"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB4444_Premultiplied
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Convert Format_RGBX8888"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGBX8888
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Convert Format_RGBA8888"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGBA8888
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Convert Format_RGBA8888_Premultiplied"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGBA8888_Premultiplied
expr_stmt|;
block|}
end_function
begin_function
DECL|function|convertToImageFormat
name|void
name|tst_QImage
operator|::
name|convertToImageFormat
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QImage
operator|::
name|Format
argument_list|,
name|image_format
argument_list|)
expr_stmt|;
name|QPixelFormat
name|pixel_format
init|=
name|QImage
operator|::
name|toPixelFormat
argument_list|(
name|image_format
argument_list|)
decl_stmt|;
name|QImage
operator|::
name|Format
name|format
init|=
name|QImage
operator|::
name|toImageFormat
argument_list|(
name|pixel_format
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|format
argument_list|,
name|image_format
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invertPixelsRGB_data
name|void
name|tst_QImage
operator|::
name|invertPixelsRGB_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QImage
operator|::
name|Format
argument_list|>
argument_list|(
literal|"image_format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invertPixels RGB16"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invertPixels RGB32"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB32
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invertPixels BGR30"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_BGR30
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invertPixels RGB444"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB444
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invertPixels RGB555"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB555
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invertPixels RGB888"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB888
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invertPixels ARGB32"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB32
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invertPixels ARGB32pm"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invertPixels RGBA8888"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGBA8888
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invertPixels RGBA8888pm"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGBA8888_Premultiplied
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invertPixels RGBA4444pm"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB4444_Premultiplied
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invertPixelsRGB
name|void
name|tst_QImage
operator|::
name|invertPixelsRGB
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QImage
operator|::
name|Format
argument_list|,
name|image_format
argument_list|)
expr_stmt|;
name|QImage
name|image
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|image_format
argument_list|)
decl_stmt|;
name|image
operator|.
name|fill
argument_list|(
name|QColor
operator|::
name|fromRgb
argument_list|(
literal|32
argument_list|,
literal|64
argument_list|,
literal|96
argument_list|)
argument_list|)
expr_stmt|;
name|image
operator|.
name|invertPixels
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|image
operator|.
name|format
argument_list|()
argument_list|,
name|image_format
argument_list|)
expr_stmt|;
name|uint
name|pixel
init|=
name|image
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|qRed
argument_list|(
name|pixel
argument_list|)
operator|>>
literal|4
argument_list|,
operator|(
literal|255
operator|-
literal|32
operator|)
operator|>>
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qGreen
argument_list|(
name|pixel
argument_list|)
operator|>>
literal|4
argument_list|,
operator|(
literal|255
operator|-
literal|64
operator|)
operator|>>
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qBlue
argument_list|(
name|pixel
argument_list|)
operator|>>
literal|4
argument_list|,
operator|(
literal|255
operator|-
literal|96
operator|)
operator|>>
literal|4
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|exifOrientation_data
name|void
name|tst_QImage
operator|::
name|exifOrientation_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Orientation 1, Intel format"
argument_list|)
operator|<<
name|m_prefix
operator|+
literal|"jpeg_exif_orientation_value_1.jpg"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Orientation 2, Intel format"
argument_list|)
operator|<<
name|m_prefix
operator|+
literal|"jpeg_exif_orientation_value_2.jpg"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Orientation 3, Intel format"
argument_list|)
operator|<<
name|m_prefix
operator|+
literal|"jpeg_exif_orientation_value_3.jpg"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Orientation 4, Intel format"
argument_list|)
operator|<<
name|m_prefix
operator|+
literal|"jpeg_exif_orientation_value_4.jpg"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Orientation 5, Intel format"
argument_list|)
operator|<<
name|m_prefix
operator|+
literal|"jpeg_exif_orientation_value_5.jpg"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Orientation 6, Intel format"
argument_list|)
operator|<<
name|m_prefix
operator|+
literal|"jpeg_exif_orientation_value_6.jpg"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Orientation 6, Motorola format"
argument_list|)
operator|<<
name|m_prefix
operator|+
literal|"jpeg_exif_orientation_value_6_motorola.jpg"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Orientation 7, Intel format"
argument_list|)
operator|<<
name|m_prefix
operator|+
literal|"jpeg_exif_orientation_value_7.jpg"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Orientation 8, Intel format"
argument_list|)
operator|<<
name|m_prefix
operator|+
literal|"jpeg_exif_orientation_value_8.jpg"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|exifOrientation
name|void
name|tst_QImage
operator|::
name|exifOrientation
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|QImage
name|img
decl_stmt|;
name|QRgb
name|px
decl_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|load
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
name|px
operator|=
name|img
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qRed
argument_list|(
name|px
argument_list|)
operator|>
literal|250
operator|&&
name|qGreen
argument_list|(
name|px
argument_list|)
operator|<
literal|5
operator|&&
name|qBlue
argument_list|(
name|px
argument_list|)
operator|<
literal|5
argument_list|)
expr_stmt|;
name|px
operator|=
name|img
operator|.
name|pixel
argument_list|(
name|img
operator|.
name|width
argument_list|()
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qRed
argument_list|(
name|px
argument_list|)
operator|<
literal|5
operator|&&
name|qGreen
argument_list|(
name|px
argument_list|)
operator|<
literal|5
operator|&&
name|qBlue
argument_list|(
name|px
argument_list|)
operator|>
literal|250
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupFunction
specifier|static
name|void
name|cleanupFunction
parameter_list|(
name|void
modifier|*
name|info
parameter_list|)
block|{
name|bool
modifier|*
name|called
init|=
cast|static_cast
argument_list|<
name|bool
operator|*
argument_list|>
argument_list|(
name|info
argument_list|)
decl_stmt|;
operator|*
name|called
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupFunctions
name|void
name|tst_QImage
operator|::
name|cleanupFunctions
parameter_list|()
block|{
name|QImage
name|bufferImage
argument_list|(
literal|64
argument_list|,
literal|64
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|bufferImage
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|bool
name|called
decl_stmt|;
block|{
name|called
operator|=
literal|false
expr_stmt|;
block|{
name|QImage
name|image
argument_list|(
name|bufferImage
operator|.
name|bits
argument_list|()
argument_list|,
name|bufferImage
operator|.
name|width
argument_list|()
argument_list|,
name|bufferImage
operator|.
name|height
argument_list|()
argument_list|,
name|bufferImage
operator|.
name|format
argument_list|()
argument_list|,
name|cleanupFunction
argument_list|,
operator|&
name|called
argument_list|)
decl_stmt|;
block|}
name|QVERIFY
argument_list|(
name|called
argument_list|)
expr_stmt|;
block|}
block|{
name|called
operator|=
literal|false
expr_stmt|;
name|QImage
modifier|*
name|copy
init|=
literal|0
decl_stmt|;
block|{
name|QImage
name|image
argument_list|(
name|bufferImage
operator|.
name|bits
argument_list|()
argument_list|,
name|bufferImage
operator|.
name|width
argument_list|()
argument_list|,
name|bufferImage
operator|.
name|height
argument_list|()
argument_list|,
name|bufferImage
operator|.
name|format
argument_list|()
argument_list|,
name|cleanupFunction
argument_list|,
operator|&
name|called
argument_list|)
decl_stmt|;
name|copy
operator|=
operator|new
name|QImage
argument_list|(
name|image
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|called
argument_list|)
expr_stmt|;
operator|delete
name|copy
expr_stmt|;
name|QVERIFY
argument_list|(
name|called
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// test image devicePixelRatio setting and detaching
end_comment
begin_function
DECL|function|devicePixelRatio
name|void
name|tst_QImage
operator|::
name|devicePixelRatio
parameter_list|()
block|{
comment|// create image
name|QImage
name|a
argument_list|(
literal|64
argument_list|,
literal|64
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|a
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|devicePixelRatio
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|1.0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|isDetached
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// copy image
name|QImage
name|b
init|=
name|a
decl_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|devicePixelRatio
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|1.0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|isDetached
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|isDetached
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// set devicePixelRatio to the current value: does not detach
name|a
operator|.
name|setDevicePixelRatio
argument_list|(
name|qreal
argument_list|(
literal|1.0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|isDetached
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|isDetached
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// set devicePixelRatio to a new value: may detach (currently
comment|// does, but we may want to avoid the data copy the future)
name|a
operator|.
name|setDevicePixelRatio
argument_list|(
name|qreal
argument_list|(
literal|2.0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|devicePixelRatio
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|2.0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|devicePixelRatio
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|1.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_GUILESS_MAIN
argument_list|(
argument|tst_QImage
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qimage.moc"
end_include
end_unit
