begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_include
include|#
directive|include
file|<QImage>
end_include
begin_include
include|#
directive|include
file|<QImageReader>
end_include
begin_include
include|#
directive|include
file|<QImageWriter>
end_include
begin_include
include|#
directive|include
file|<QPainter>
end_include
begin_include
include|#
directive|include
file|<QSet>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_UNIX
end_ifdef
begin_comment
comment|// for geteuid()
end_comment
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_typedef
DECL|typedef|QStringMap
typedef|typedef
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|QStringMap
typedef|;
end_typedef
begin_typedef
DECL|typedef|QIntList
typedef|typedef
name|QList
argument_list|<
name|int
argument_list|>
name|QIntList
typedef|;
end_typedef
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QImage
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QStringMap
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QIntList
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QImageWriter::ImageWriterError
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QIODevice *
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QImage::Format
argument_list|)
end_macro
begin_class
DECL|class|tst_QImageWriter
class|class
name|tst_QImageWriter
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QImageWriter
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QImageWriter
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|writeImage_data
parameter_list|()
function_decl|;
name|void
name|writeImage
parameter_list|()
function_decl|;
name|void
name|writeImage2_data
parameter_list|()
function_decl|;
name|void
name|writeImage2
parameter_list|()
function_decl|;
name|void
name|supportedFormats
parameter_list|()
function_decl|;
name|void
name|writeToInvalidDevice
parameter_list|()
function_decl|;
name|void
name|supportsOption_data
parameter_list|()
function_decl|;
name|void
name|supportsOption
parameter_list|()
function_decl|;
name|void
name|saveWithNoFormat_data
parameter_list|()
function_decl|;
name|void
name|saveWithNoFormat
parameter_list|()
function_decl|;
name|void
name|saveToTemporaryFile
parameter_list|()
function_decl|;
private|private:
DECL|member|prefix
name|QString
name|prefix
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|// helper to skip an autotest when the given image format is not supported
end_comment
begin_define
DECL|macro|SKIP_IF_UNSUPPORTED
define|#
directive|define
name|SKIP_IF_UNSUPPORTED
parameter_list|(
name|format
parameter_list|)
value|do {                                                          \     if (!QByteArray(format).isEmpty()&& !QImageReader::supportedImageFormats().contains(format)) \         QSKIP("\"" + QByteArray(format) + "\" images are not supported");             \ } while (0)
end_define
begin_function
DECL|function|initializePadding
specifier|static
name|void
name|initializePadding
parameter_list|(
name|QImage
modifier|*
name|image
parameter_list|)
block|{
name|int
name|effectiveBytesPerLine
init|=
operator|(
name|image
operator|->
name|width
argument_list|()
operator|*
name|image
operator|->
name|depth
argument_list|()
operator|+
literal|7
operator|)
operator|/
literal|8
decl_stmt|;
name|int
name|paddingBytes
init|=
name|image
operator|->
name|bytesPerLine
argument_list|()
operator|-
name|effectiveBytesPerLine
decl_stmt|;
if|if
condition|(
name|paddingBytes
operator|==
literal|0
condition|)
return|return;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|image
operator|->
name|height
argument_list|()
condition|;
operator|++
name|y
control|)
block|{
name|memset
argument_list|(
name|image
operator|->
name|scanLine
argument_list|(
name|y
argument_list|)
operator|+
name|effectiveBytesPerLine
argument_list|,
literal|0
argument_list|,
name|paddingBytes
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|initTestCase
name|void
name|tst_QImageWriter
operator|::
name|initTestCase
parameter_list|()
block|{
name|prefix
operator|=
name|QFINDTESTDATA
argument_list|(
literal|"images/"
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefix
operator|.
name|isEmpty
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Can't find images directory!"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QImageWriter
operator|::
name|getSetCheck
parameter_list|()
block|{
name|QImageWriter
name|obj1
decl_stmt|;
comment|// QIODevice * QImageWriter::device()
comment|// void QImageWriter::setDevice(QIODevice *)
name|QFile
modifier|*
name|var1
init|=
operator|new
name|QFile
decl_stmt|;
name|obj1
operator|.
name|setDevice
argument_list|(
name|var1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|QIODevice
operator|*
operator|)
name|var1
argument_list|,
name|obj1
operator|.
name|device
argument_list|()
argument_list|)
expr_stmt|;
comment|// The class should possibly handle a 0-pointer as a device, since
comment|// there is a default contructor, so it's "handling" a 0 device by default.
comment|// For example: QMovie::setDevice(0) works just fine
name|obj1
operator|.
name|setDevice
argument_list|(
operator|(
name|QIODevice
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|QIODevice
operator|*
operator|)
literal|0
argument_list|,
name|obj1
operator|.
name|device
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|var1
expr_stmt|;
comment|// int QImageWriter::quality()
comment|// void QImageWriter::setQuality(int)
name|obj1
operator|.
name|setQuality
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|quality
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setQuality
argument_list|(
name|INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MIN
argument_list|,
name|obj1
operator|.
name|quality
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setQuality
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MAX
argument_list|,
name|obj1
operator|.
name|quality
argument_list|()
argument_list|)
expr_stmt|;
comment|// int QImageWriter::compression()
comment|// void QImageWriter::setCompression(int)
name|obj1
operator|.
name|setCompression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|compression
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setCompression
argument_list|(
name|INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MIN
argument_list|,
name|obj1
operator|.
name|compression
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setCompression
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MAX
argument_list|,
name|obj1
operator|.
name|compression
argument_list|()
argument_list|)
expr_stmt|;
comment|// float QImageWriter::gamma()
comment|// void QImageWriter::setGamma(float)
name|obj1
operator|.
name|setGamma
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0.0f
argument_list|,
name|obj1
operator|.
name|gamma
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setGamma
argument_list|(
literal|1.1f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|1.1f
argument_list|,
name|obj1
operator|.
name|gamma
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|tst_QImageWriter
name|tst_QImageWriter
operator|::
name|tst_QImageWriter
parameter_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~tst_QImageWriter
name|tst_QImageWriter
operator|::
name|~
name|tst_QImageWriter
parameter_list|()
block|{
name|QDir
name|dir
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
name|QStringList
name|filesToDelete
init|=
name|dir
operator|.
name|entryList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"gen-*"
argument_list|,
name|QDir
operator|::
name|NoDotAndDotDot
operator||
name|QDir
operator|::
name|Files
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|QString
name|file
decl|,
name|filesToDelete
control|)
block|{
name|QFile
operator|::
name|remove
argument_list|(
name|dir
operator|.
name|absoluteFilePath
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_destructor
begin_function
DECL|function|init
name|void
name|tst_QImageWriter
operator|::
name|init
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QImageWriter
operator|::
name|cleanup
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|writeImage_data
name|void
name|tst_QImageWriter
operator|::
name|writeImage_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"lossy"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BMP: colorful"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"colorful.bmp"
argument_list|)
operator|<<
literal|false
operator|<<
name|QByteArray
argument_list|(
literal|"bmp"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BMP: font"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"font.bmp"
argument_list|)
operator|<<
literal|false
operator|<<
name|QByteArray
argument_list|(
literal|"bmp"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"XPM: marble"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"marble.xpm"
argument_list|)
operator|<<
literal|false
operator|<<
name|QByteArray
argument_list|(
literal|"xpm"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"PNG: kollada"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"kollada.png"
argument_list|)
operator|<<
literal|false
operator|<<
name|QByteArray
argument_list|(
literal|"png"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"PPM: teapot"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"teapot.ppm"
argument_list|)
operator|<<
literal|false
operator|<<
name|QByteArray
argument_list|(
literal|"ppm"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"PBM: ship63"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ship63.pbm"
argument_list|)
operator|<<
literal|true
operator|<<
name|QByteArray
argument_list|(
literal|"pbm"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"XBM: gnus"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"gnus.xbm"
argument_list|)
operator|<<
literal|false
operator|<<
name|QByteArray
argument_list|(
literal|"xbm"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"JPEG: beavis"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"beavis.jpg"
argument_list|)
operator|<<
literal|true
operator|<<
name|QByteArray
argument_list|(
literal|"jpeg"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeImage
name|void
name|tst_QImageWriter
operator|::
name|writeImage
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|lossy
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|SKIP_IF_UNSUPPORTED
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|QImage
name|image
decl_stmt|;
block|{
name|QImageReader
name|reader
argument_list|(
name|prefix
operator|+
name|fileName
argument_list|)
decl_stmt|;
name|image
operator|=
name|reader
operator|.
name|read
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|image
operator|.
name|isNull
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|reader
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QImageWriter
name|writer
argument_list|(
name|prefix
operator|+
literal|"gen-"
operator|+
name|fileName
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|writer
operator|.
name|write
argument_list|(
name|image
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|bool
name|skip
init|=
literal|false
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
if|if
condition|(
operator|::
name|geteuid
argument_list|()
operator|==
literal|0
condition|)
name|skip
operator|=
literal|true
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|skip
condition|)
block|{
comment|// Shouldn't be able to write to read-only file
name|QFile
name|sourceFile
argument_list|(
name|prefix
operator|+
literal|"gen-"
operator|+
name|fileName
argument_list|)
decl_stmt|;
name|QFile
operator|::
name|Permissions
name|permissions
init|=
name|sourceFile
operator|.
name|permissions
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|sourceFile
operator|.
name|setPermissions
argument_list|(
name|QFile
operator|::
name|ReadOwner
operator||
name|QFile
operator|::
name|ReadUser
operator||
name|QFile
operator|::
name|ReadGroup
operator||
name|QFile
operator|::
name|ReadOther
argument_list|)
argument_list|)
expr_stmt|;
name|QImageWriter
name|writer
argument_list|(
name|prefix
operator|+
literal|"gen-"
operator|+
name|fileName
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|writer
operator|.
name|write
argument_list|(
name|image
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sourceFile
operator|.
name|setPermissions
argument_list|(
name|permissions
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|QImage
name|image2
decl_stmt|;
block|{
name|QImageReader
name|reader
argument_list|(
name|prefix
operator|+
literal|"gen-"
operator|+
name|fileName
argument_list|)
decl_stmt|;
name|image2
operator|=
name|reader
operator|.
name|read
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|image2
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|lossy
condition|)
block|{
name|QCOMPARE
argument_list|(
name|image
argument_list|,
name|image2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|image
operator|.
name|format
argument_list|()
argument_list|,
name|image2
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|image
operator|.
name|depth
argument_list|()
argument_list|,
name|image2
operator|.
name|depth
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|writeImage2_data
name|void
name|tst_QImageWriter
operator|::
name|writeImage2_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QImage
argument_list|>
argument_list|(
literal|"image"
argument_list|)
expr_stmt|;
specifier|const
name|QStringList
name|formats
init|=
name|QStringList
argument_list|()
operator|<<
literal|"bmp"
operator|<<
literal|"xpm"
operator|<<
literal|"png"
operator|<<
literal|"ppm"
decl_stmt|;
comment|//<< "jpeg";
name|QImage
name|image0
argument_list|(
literal|70
argument_list|,
literal|70
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|image0
operator|.
name|fill
argument_list|(
name|QColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QImage
operator|::
name|Format
name|imgFormat
init|=
name|QImage
operator|::
name|Format_Mono
decl_stmt|;
while|while
condition|(
name|imgFormat
operator|!=
name|QImage
operator|::
name|NImageFormats
condition|)
block|{
name|QImage
name|image
init|=
name|image0
operator|.
name|convertToFormat
argument_list|(
name|imgFormat
argument_list|)
decl_stmt|;
name|initializePadding
argument_list|(
operator|&
name|image
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
name|format
decl|,
name|formats
control|)
block|{
specifier|const
name|QString
name|fileName
init|=
name|QString
argument_list|(
literal|"solidcolor_%1.%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|imgFormat
argument_list|)
operator|.
name|arg
argument_list|(
name|format
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|fileName
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|fileName
operator|<<
name|format
operator|.
name|toLatin1
argument_list|()
operator|<<
name|image
expr_stmt|;
block|}
name|imgFormat
operator|=
name|QImage
operator|::
name|Format
argument_list|(
name|int
argument_list|(
name|imgFormat
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*     Workaround for the equality operator for indexed formats     (which fails if the colortables are different).      Images must have the same format and size. */
end_comment
begin_function
DECL|function|equalImageContents
specifier|static
name|bool
name|equalImageContents
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image1
parameter_list|,
specifier|const
name|QImage
modifier|&
name|image2
parameter_list|)
block|{
switch|switch
condition|(
name|image1
operator|.
name|format
argument_list|()
condition|)
block|{
case|case
name|QImage
operator|::
name|Format_Mono
case|:
case|case
name|QImage
operator|::
name|Format_Indexed8
case|:
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|image1
operator|.
name|height
argument_list|()
condition|;
operator|++
name|y
control|)
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|image1
operator|.
name|width
argument_list|()
condition|;
operator|++
name|x
control|)
if|if
condition|(
name|image1
operator|.
name|pixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|!=
name|image2
operator|.
name|pixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
default|default:
return|return
operator|(
name|image1
operator|==
name|image2
operator|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|writeImage2
name|void
name|tst_QImageWriter
operator|::
name|writeImage2
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QImage
argument_list|,
name|image
argument_list|)
expr_stmt|;
comment|//we reduce the scope of writer so that it closes the associated file
comment|// and QFile::remove can actually work
block|{
name|QImageWriter
name|writer
argument_list|(
name|fileName
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|writer
operator|.
name|write
argument_list|(
name|image
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QImage
name|written
decl_stmt|;
comment|//we reduce the scope of reader so that it closes the associated file
comment|// and QFile::remove can actually work
block|{
name|QImageReader
name|reader
argument_list|(
name|fileName
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|reader
operator|.
name|read
argument_list|(
operator|&
name|written
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|written
operator|=
name|written
operator|.
name|convertToFormat
argument_list|(
name|image
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|equalImageContents
argument_list|(
name|written
argument_list|,
name|image
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"image"
operator|<<
name|image
operator|.
name|format
argument_list|()
operator|<<
name|image
operator|.
name|width
argument_list|()
operator|<<
name|image
operator|.
name|height
argument_list|()
operator|<<
name|image
operator|.
name|depth
argument_list|()
operator|<<
name|hex
operator|<<
name|image
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"written"
operator|<<
name|written
operator|.
name|format
argument_list|()
operator|<<
name|written
operator|.
name|width
argument_list|()
operator|<<
name|written
operator|.
name|height
argument_list|()
operator|<<
name|written
operator|.
name|depth
argument_list|()
operator|<<
name|hex
operator|<<
name|written
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|equalImageContents
argument_list|(
name|written
argument_list|,
name|image
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|remove
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|supportedFormats
name|void
name|tst_QImageWriter
operator|::
name|supportedFormats
parameter_list|()
block|{
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|formats
init|=
name|QImageWriter
operator|::
name|supportedImageFormats
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|sortedFormats
init|=
name|formats
decl_stmt|;
name|qSort
argument_list|(
name|sortedFormats
argument_list|)
expr_stmt|;
comment|// check that the list is sorted
name|QCOMPARE
argument_list|(
name|formats
argument_list|,
name|sortedFormats
argument_list|)
expr_stmt|;
name|QSet
argument_list|<
name|QByteArray
argument_list|>
name|formatSet
decl_stmt|;
foreach|foreach
control|(
name|QByteArray
name|format
decl|,
name|formats
control|)
name|formatSet
operator|<<
name|format
expr_stmt|;
comment|// check that the list does not contain duplicates
name|QCOMPARE
argument_list|(
name|formatSet
operator|.
name|size
argument_list|()
argument_list|,
name|formats
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeToInvalidDevice
name|void
name|tst_QImageWriter
operator|::
name|writeToInvalidDevice
parameter_list|()
block|{
name|QLatin1String
name|fileName
argument_list|(
literal|"/these/directories/do/not/exist/001.png"
argument_list|)
decl_stmt|;
block|{
name|QImageWriter
name|writer
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|writer
operator|.
name|canWrite
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|writer
operator|.
name|error
argument_list|()
argument_list|,
name|QImageWriter
operator|::
name|DeviceError
argument_list|)
expr_stmt|;
block|}
block|{
name|QImageWriter
name|writer
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|writer
operator|.
name|setFormat
argument_list|(
literal|"png"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|writer
operator|.
name|canWrite
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|writer
operator|.
name|error
argument_list|()
argument_list|,
name|QImageWriter
operator|::
name|DeviceError
argument_list|)
expr_stmt|;
block|}
block|{
name|QImageWriter
name|writer
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QImage
name|im
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|writer
operator|.
name|write
argument_list|(
name|im
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|writer
operator|.
name|error
argument_list|()
argument_list|,
name|QImageWriter
operator|::
name|DeviceError
argument_list|)
expr_stmt|;
block|}
block|{
name|QImageWriter
name|writer
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|writer
operator|.
name|setFormat
argument_list|(
literal|"png"
argument_list|)
expr_stmt|;
name|QImage
name|im
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|writer
operator|.
name|write
argument_list|(
name|im
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|writer
operator|.
name|error
argument_list|()
argument_list|,
name|QImageWriter
operator|::
name|DeviceError
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|supportsOption_data
name|void
name|tst_QImageWriter
operator|::
name|supportsOption_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QIntList
argument_list|>
argument_list|(
literal|"options"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"png"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"gen-black.png"
argument_list|)
operator|<<
operator|(
name|QIntList
argument_list|()
operator|<<
name|QImageIOHandler
operator|::
name|Gamma
operator|<<
name|QImageIOHandler
operator|::
name|Description
operator|<<
name|QImageIOHandler
operator|::
name|Quality
operator|<<
name|QImageIOHandler
operator|::
name|Size
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|supportsOption
name|void
name|tst_QImageWriter
operator|::
name|supportsOption
parameter_list|()
block|{
name|SKIP_IF_UNSUPPORTED
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QIntList
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|QSet
argument_list|<
name|QImageIOHandler
operator|::
name|ImageOption
argument_list|>
name|allOptions
decl_stmt|;
name|allOptions
operator|<<
name|QImageIOHandler
operator|::
name|Size
operator|<<
name|QImageIOHandler
operator|::
name|ClipRect
operator|<<
name|QImageIOHandler
operator|::
name|Description
operator|<<
name|QImageIOHandler
operator|::
name|ScaledClipRect
operator|<<
name|QImageIOHandler
operator|::
name|ScaledSize
operator|<<
name|QImageIOHandler
operator|::
name|CompressionRatio
operator|<<
name|QImageIOHandler
operator|::
name|Gamma
operator|<<
name|QImageIOHandler
operator|::
name|Quality
operator|<<
name|QImageIOHandler
operator|::
name|Name
operator|<<
name|QImageIOHandler
operator|::
name|SubType
operator|<<
name|QImageIOHandler
operator|::
name|IncrementalReading
operator|<<
name|QImageIOHandler
operator|::
name|Endianness
operator|<<
name|QImageIOHandler
operator|::
name|Animation
operator|<<
name|QImageIOHandler
operator|::
name|BackgroundColor
expr_stmt|;
name|QImageWriter
name|writer
argument_list|(
name|prefix
operator|+
name|fileName
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|options
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|writer
operator|.
name|supportsOption
argument_list|(
name|QImageIOHandler
operator|::
name|ImageOption
argument_list|(
name|options
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|allOptions
operator|.
name|remove
argument_list|(
name|QImageIOHandler
operator|::
name|ImageOption
argument_list|(
name|options
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
foreach|foreach
control|(
name|QImageIOHandler
operator|::
name|ImageOption
name|option
decl|,
name|allOptions
control|)
name|QVERIFY
argument_list|(
operator|!
name|writer
operator|.
name|supportsOption
argument_list|(
name|option
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|saveWithNoFormat_data
name|void
name|tst_QImageWriter
operator|::
name|saveWithNoFormat_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QImageWriter
operator|::
name|ImageWriterError
argument_list|>
argument_list|(
literal|"error"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"garble"
argument_list|)
operator|<<
name|prefix
operator|+
name|QString
argument_list|(
literal|"gen-out.garble"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"jpeg"
argument_list|)
operator|<<
name|QImageWriter
operator|::
name|UnsupportedFormatError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bmp"
argument_list|)
operator|<<
name|prefix
operator|+
name|QString
argument_list|(
literal|"gen-out.bmp"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"bmp"
argument_list|)
operator|<<
name|QImageWriter
operator|::
name|ImageWriterError
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"xbm"
argument_list|)
operator|<<
name|prefix
operator|+
name|QString
argument_list|(
literal|"gen-out.xbm"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"xbm"
argument_list|)
operator|<<
name|QImageWriter
operator|::
name|ImageWriterError
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"xpm"
argument_list|)
operator|<<
name|prefix
operator|+
name|QString
argument_list|(
literal|"gen-out.xpm"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"xpm"
argument_list|)
operator|<<
name|QImageWriter
operator|::
name|ImageWriterError
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"png"
argument_list|)
operator|<<
name|prefix
operator|+
name|QString
argument_list|(
literal|"gen-out.png"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"png"
argument_list|)
operator|<<
name|QImageWriter
operator|::
name|ImageWriterError
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ppm"
argument_list|)
operator|<<
name|prefix
operator|+
name|QString
argument_list|(
literal|"gen-out.ppm"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ppm"
argument_list|)
operator|<<
name|QImageWriter
operator|::
name|ImageWriterError
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pbm"
argument_list|)
operator|<<
name|prefix
operator|+
name|QString
argument_list|(
literal|"gen-out.pbm"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"pbm"
argument_list|)
operator|<<
name|QImageWriter
operator|::
name|ImageWriterError
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|saveWithNoFormat
name|void
name|tst_QImageWriter
operator|::
name|saveWithNoFormat
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QImageWriter
operator|::
name|ImageWriterError
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|SKIP_IF_UNSUPPORTED
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|QImage
name|niceImage
argument_list|(
literal|64
argument_list|,
literal|64
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|memset
argument_list|(
name|niceImage
operator|.
name|bits
argument_list|()
argument_list|,
literal|0
argument_list|,
name|niceImage
operator|.
name|byteCount
argument_list|()
argument_list|)
expr_stmt|;
name|QImageWriter
name|writer
argument_list|(
name|fileName
comment|/* , 0 - no format! */
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|!=
literal|0
condition|)
block|{
name|QVERIFY
argument_list|(
operator|!
name|writer
operator|.
name|write
argument_list|(
name|niceImage
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|writer
operator|.
name|error
argument_list|()
argument_list|,
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
name|QVERIFY2
argument_list|(
name|writer
operator|.
name|write
argument_list|(
name|niceImage
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|writer
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QImageReader
name|reader
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|reader
operator|.
name|format
argument_list|()
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|reader
operator|.
name|canRead
argument_list|()
argument_list|)
expr_stmt|;
name|QImage
name|outImage
init|=
name|reader
operator|.
name|read
argument_list|()
decl_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|outImage
operator|.
name|isNull
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|reader
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|saveToTemporaryFile
name|void
name|tst_QImageWriter
operator|::
name|saveToTemporaryFile
parameter_list|()
block|{
name|QImage
name|image
argument_list|(
name|prefix
operator|+
literal|"kollada.png"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|image
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|{
comment|// 1) Via QImageWriter's API, with a standard temp file name
name|QTemporaryFile
name|file
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|()
argument_list|)
expr_stmt|;
name|QImageWriter
name|writer
argument_list|(
operator|&
name|file
argument_list|,
literal|"PNG"
argument_list|)
decl_stmt|;
if|if
condition|(
name|writer
operator|.
name|canWrite
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|writer
operator|.
name|write
argument_list|(
name|image
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|qWarning
argument_list|()
operator|<<
name|file
operator|.
name|errorString
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|file
operator|.
name|reset
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|QImage
argument_list|(
name|writer
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|,
name|image
argument_list|)
expr_stmt|;
block|}
block|{
comment|// 2) Via QImage's API, with a standard temp file name
name|QTemporaryFile
name|file
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|image
operator|.
name|save
argument_list|(
operator|&
name|file
argument_list|,
literal|"PNG"
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|reset
argument_list|()
expr_stmt|;
name|QImage
name|tmp
decl_stmt|;
name|QVERIFY
argument_list|(
name|tmp
operator|.
name|load
argument_list|(
operator|&
name|file
argument_list|,
literal|"PNG"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tmp
argument_list|,
name|image
argument_list|)
expr_stmt|;
block|}
block|{
comment|// 3) Via QImageWriter's API, with a named temp file
name|QTemporaryFile
name|file
argument_list|(
literal|"tempXXXXXX"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|()
argument_list|)
expr_stmt|;
name|QImageWriter
name|writer
argument_list|(
operator|&
name|file
argument_list|,
literal|"PNG"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|writer
operator|.
name|write
argument_list|(
name|image
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|file
operator|.
name|reset
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|QImage
argument_list|(
name|writer
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|,
name|image
argument_list|)
expr_stmt|;
block|}
block|{
comment|// 4) Via QImage's API, with a named temp file
name|QTemporaryFile
name|file
argument_list|(
literal|"tempXXXXXX"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|image
operator|.
name|save
argument_list|(
operator|&
name|file
argument_list|,
literal|"PNG"
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|reset
argument_list|()
expr_stmt|;
name|QImage
name|tmp
decl_stmt|;
name|QVERIFY
argument_list|(
name|tmp
operator|.
name|load
argument_list|(
operator|&
name|file
argument_list|,
literal|"PNG"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tmp
argument_list|,
name|image
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QImageWriter
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qimagewriter.moc"
end_include
end_unit
