begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtGui/qpainter.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qpaintengine.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qvolatileimage_p.h>
end_include
begin_class
DECL|class|tst_QVolatileImage
class|class
name|tst_QVolatileImage
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|tst_QVolatileImage
name|tst_QVolatileImage
parameter_list|()
block|{ }
private|private
name|slots
private|:
name|void
name|create
parameter_list|()
function_decl|;
name|void
name|ensureFormat
parameter_list|()
function_decl|;
name|void
name|dataAccess
parameter_list|()
function_decl|;
name|void
name|sharing
parameter_list|()
function_decl|;
name|void
name|fill
parameter_list|()
function_decl|;
name|void
name|copy
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|create
name|void
name|tst_QVolatileImage
operator|::
name|create
parameter_list|()
block|{
name|QVolatileImage
name|nullImg
decl_stmt|;
name|QVERIFY
argument_list|(
name|nullImg
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVolatileImage
name|img
argument_list|(
literal|100
argument_list|,
literal|200
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|img
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|width
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|height
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|format
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|byteCount
argument_list|()
argument_list|,
name|img
operator|.
name|bytesPerLine
argument_list|()
operator|*
name|img
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|hasAlphaChannel
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|depth
argument_list|()
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|QImage
name|source
argument_list|(
literal|12
argument_list|,
literal|23
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|img
operator|=
name|QVolatileImage
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|img
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|width
argument_list|()
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|height
argument_list|()
argument_list|,
literal|23
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|format
argument_list|()
argument_list|,
name|source
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|byteCount
argument_list|()
argument_list|,
name|img
operator|.
name|bytesPerLine
argument_list|()
operator|*
name|img
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|imageRef
argument_list|()
operator|==
name|source
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|toImage
argument_list|()
operator|==
name|source
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|hasAlphaChannel
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|hasAlphaChannel
argument_list|()
argument_list|,
name|img
operator|.
name|imageRef
argument_list|()
operator|.
name|hasAlphaChannel
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|hasAlphaChannel
argument_list|()
argument_list|,
name|img
operator|.
name|toImage
argument_list|()
operator|.
name|hasAlphaChannel
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|depth
argument_list|()
argument_list|,
literal|32
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ensureFormat
name|void
name|tst_QVolatileImage
operator|::
name|ensureFormat
parameter_list|()
block|{
name|QImage
name|source
argument_list|(
literal|12
argument_list|,
literal|23
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|QVolatileImage
name|img
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|img
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|imageRef
argument_list|()
operator|==
name|source
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|toImage
argument_list|()
operator|==
name|source
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|ensureFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
argument_list|)
expr_stmt|;
comment|// no-op
name|QVERIFY
argument_list|(
name|img
operator|.
name|imageRef
argument_list|()
operator|==
name|source
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|toImage
argument_list|()
operator|==
name|source
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|format
argument_list|()
operator|==
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|ensureFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
argument_list|)
expr_stmt|;
comment|// new data under-the-hood
name|QVERIFY
argument_list|(
name|img
operator|.
name|imageRef
argument_list|()
operator|!=
name|source
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|toImage
argument_list|()
operator|!=
name|source
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|format
argument_list|()
operator|==
name|QImage
operator|::
name|Format_RGB32
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dataAccess
name|void
name|tst_QVolatileImage
operator|::
name|dataAccess
parameter_list|()
block|{
name|QImage
name|source
argument_list|(
literal|12
argument_list|,
literal|23
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|QVolatileImage
name|img
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|img
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|img
operator|.
name|beginDataAccess
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|constBits
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|imageRef
argument_list|()
operator|.
name|constBits
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|bits
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|imageRef
argument_list|()
operator|.
name|bits
argument_list|()
argument_list|)
expr_stmt|;
name|img
operator|.
name|endDataAccess
argument_list|()
expr_stmt|;
name|img
operator|=
name|QVolatileImage
argument_list|(
literal|12
argument_list|,
literal|23
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
expr_stmt|;
name|img
operator|.
name|beginDataAccess
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|constBits
argument_list|()
operator|&&
name|img
operator|.
name|bits
argument_list|()
argument_list|)
expr_stmt|;
name|img
operator|.
name|endDataAccess
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sharing
name|void
name|tst_QVolatileImage
operator|::
name|sharing
parameter_list|()
block|{
name|QVolatileImage
name|img1
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|QVolatileImage
name|img2
init|=
name|img1
decl_stmt|;
name|img1
operator|.
name|beginDataAccess
argument_list|()
expr_stmt|;
name|img2
operator|.
name|beginDataAccess
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|img1
operator|.
name|constBits
argument_list|()
operator|==
name|img2
operator|.
name|constBits
argument_list|()
argument_list|)
expr_stmt|;
name|img2
operator|.
name|endDataAccess
argument_list|()
expr_stmt|;
name|img1
operator|.
name|endDataAccess
argument_list|()
expr_stmt|;
name|img1
operator|.
name|imageRef
argument_list|()
expr_stmt|;
comment|// non-const call, should detach
name|img1
operator|.
name|beginDataAccess
argument_list|()
expr_stmt|;
name|img2
operator|.
name|beginDataAccess
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|img1
operator|.
name|constBits
argument_list|()
operator|!=
name|img2
operator|.
name|constBits
argument_list|()
argument_list|)
expr_stmt|;
name|img2
operator|.
name|endDataAccess
argument_list|()
expr_stmt|;
name|img1
operator|.
name|endDataAccess
argument_list|()
expr_stmt|;
comment|// toImage() should return a copy of the internal QImage.
comment|// imageRef() is a reference to the internal QImage.
name|QVERIFY
argument_list|(
name|img1
operator|.
name|imageRef
argument_list|()
operator|.
name|constBits
argument_list|()
operator|!=
name|img1
operator|.
name|toImage
argument_list|()
operator|.
name|constBits
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fuzzyCompareImages
name|bool
name|fuzzyCompareImages
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image1
parameter_list|,
specifier|const
name|QImage
modifier|&
name|image2
parameter_list|,
name|int
name|tolerance
parameter_list|)
block|{
if|if
condition|(
name|image1
operator|.
name|bytesPerLine
argument_list|()
operator|!=
name|image2
operator|.
name|bytesPerLine
argument_list|()
operator|||
name|image1
operator|.
name|width
argument_list|()
operator|!=
name|image2
operator|.
name|width
argument_list|()
operator|||
name|image1
operator|.
name|height
argument_list|()
operator|!=
name|image2
operator|.
name|height
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|image1
operator|.
name|height
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|uchar
modifier|*
name|line1
init|=
name|image1
operator|.
name|scanLine
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|line2
init|=
name|image2
operator|.
name|scanLine
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|bytes
init|=
name|image1
operator|.
name|bytesPerLine
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|bytes
condition|;
name|j
operator|++
control|)
block|{
name|int
name|delta
init|=
name|line1
index|[
name|j
index|]
operator|-
name|line2
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|qAbs
argument_list|(
name|delta
argument_list|)
operator|>
name|tolerance
condition|)
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|fill
name|void
name|tst_QVolatileImage
operator|::
name|fill
parameter_list|()
block|{
name|QVolatileImage
name|img
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|QColor
name|col
init|=
name|QColor
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|,
literal|30
argument_list|)
decl_stmt|;
name|img
operator|.
name|fill
argument_list|(
name|col
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|imageRef
argument_list|()
operator|.
name|pixel
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|==
name|col
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|toImage
argument_list|()
operator|.
name|pixel
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|==
name|col
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|copy
name|void
name|tst_QVolatileImage
operator|::
name|copy
parameter_list|()
block|{
name|QVolatileImage
name|img
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|img
operator|.
name|beginDataAccess
argument_list|()
expr_stmt|;
name|img
operator|.
name|imageRef
argument_list|()
operator|.
name|fill
argument_list|(
name|QColor
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|img
operator|.
name|imageRef
argument_list|()
argument_list|)
decl_stmt|;
name|p
operator|.
name|drawRect
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|50
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|img
operator|.
name|endDataAccess
argument_list|()
expr_stmt|;
name|QVolatileImage
name|img2
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|img2
operator|.
name|copyFrom
argument_list|(
operator|&
name|img
argument_list|,
name|QRect
argument_list|()
argument_list|)
expr_stmt|;
name|QImage
name|imgA
init|=
name|img
operator|.
name|toImage
argument_list|()
decl_stmt|;
name|QImage
name|imgB
init|=
name|img2
operator|.
name|toImage
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|imgA
operator|.
name|size
argument_list|()
argument_list|,
name|imgB
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fuzzyCompareImages
argument_list|(
name|imgA
argument_list|,
name|imgB
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|img2
operator|=
name|QVolatileImage
argument_list|(
literal|20
argument_list|,
literal|20
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
expr_stmt|;
name|img2
operator|.
name|copyFrom
argument_list|(
operator|&
name|img
argument_list|,
name|QRect
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|imgA
operator|=
name|img
operator|.
name|toImage
argument_list|()
operator|.
name|copy
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|imgB
operator|=
name|img2
operator|.
name|toImage
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|imgA
operator|.
name|size
argument_list|()
argument_list|,
name|imgB
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fuzzyCompareImages
argument_list|(
name|imgA
argument_list|,
name|imgB
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QVolatileImage
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qvolatileimage.moc"
end_include
end_unit
