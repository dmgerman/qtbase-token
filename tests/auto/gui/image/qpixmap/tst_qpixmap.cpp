begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qpixmap.h>
end_include
begin_include
include|#
directive|include
file|<qbitmap.h>
end_include
begin_include
include|#
directive|include
file|<qimage.h>
end_include
begin_include
include|#
directive|include
file|<qimagereader.h>
end_include
begin_include
include|#
directive|include
file|<qmatrix.h>
end_include
begin_include
include|#
directive|include
file|<qdesktopwidget.h>
end_include
begin_include
include|#
directive|include
file|<qpaintengine.h>
end_include
begin_include
include|#
directive|include
file|<qtreewidget.h>
end_include
begin_include
include|#
directive|include
file|<qsplashscreen.h>
end_include
begin_include
include|#
directive|include
file|<qplatformpixmap_qpa.h>
end_include
begin_include
include|#
directive|include
file|<private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qdrawhelper_p.h>
end_include
begin_include
include|#
directive|include
file|<QSet>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_WIN
end_ifdef
begin_include
include|#
directive|include
file|<windows.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_QWS
end_ifdef
begin_include
include|#
directive|include
file|<qscreen_qws.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QImage::Format
argument_list|)
end_macro
begin_class
DECL|class|tst_QPixmap
class|class
name|tst_QPixmap
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QPixmap
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QPixmap
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|swap
parameter_list|()
function_decl|;
name|void
name|fromImage_data
parameter_list|()
function_decl|;
name|void
name|fromImage
parameter_list|()
function_decl|;
name|void
name|fromUninitializedImage_data
parameter_list|()
function_decl|;
name|void
name|fromUninitializedImage
parameter_list|()
function_decl|;
name|void
name|convertFromImage_data
parameter_list|()
function_decl|;
name|void
name|convertFromImage
parameter_list|()
function_decl|;
name|void
name|testMetrics
parameter_list|()
function_decl|;
name|void
name|scroll_data
parameter_list|()
function_decl|;
name|void
name|scroll
parameter_list|()
function_decl|;
name|void
name|fill_data
parameter_list|()
function_decl|;
name|void
name|fill
parameter_list|()
function_decl|;
name|void
name|fill_transparent
parameter_list|()
function_decl|;
name|void
name|createMaskFromColor
parameter_list|()
function_decl|;
name|void
name|mask
parameter_list|()
function_decl|;
name|void
name|bitmapMask
parameter_list|()
function_decl|;
name|void
name|setGetMask_data
parameter_list|()
function_decl|;
name|void
name|setGetMask
parameter_list|()
function_decl|;
name|void
name|cacheKey
parameter_list|()
function_decl|;
name|void
name|drawBitmap
parameter_list|()
function_decl|;
name|void
name|grabWidget
parameter_list|()
function_decl|;
name|void
name|grabWindow
parameter_list|()
function_decl|;
name|void
name|isNull
parameter_list|()
function_decl|;
name|void
name|task_246446
parameter_list|()
function_decl|;
name|void
name|convertFromImageNoDetach
parameter_list|()
function_decl|;
name|void
name|convertFromImageDetach
parameter_list|()
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
name|void
name|toWinHBITMAP_data
parameter_list|()
function_decl|;
name|void
name|toWinHBITMAP
parameter_list|()
function_decl|;
name|void
name|fromWinHBITMAP_data
parameter_list|()
function_decl|;
name|void
name|fromWinHBITMAP
parameter_list|()
function_decl|;
name|void
name|toWinHICON_data
parameter_list|()
function_decl|;
name|void
name|toWinHICON
parameter_list|()
function_decl|;
name|void
name|fromWinHICON_data
parameter_list|()
function_decl|;
name|void
name|fromWinHICON
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|onlyNullPixmapsOutsideGuiThread
parameter_list|()
function_decl|;
name|void
name|refUnref
parameter_list|()
function_decl|;
name|void
name|copy
parameter_list|()
function_decl|;
name|void
name|depthOfNullObjects
parameter_list|()
function_decl|;
name|void
name|transformed
parameter_list|()
function_decl|;
name|void
name|transformed2
parameter_list|()
function_decl|;
name|void
name|fromImage_crash
parameter_list|()
function_decl|;
name|void
name|fromData
parameter_list|()
function_decl|;
name|void
name|loadFromDataNullValues
parameter_list|()
function_decl|;
name|void
name|loadFromDataImage_data
parameter_list|()
function_decl|;
name|void
name|loadFromDataImage
parameter_list|()
function_decl|;
name|void
name|fromImageReader_data
parameter_list|()
function_decl|;
name|void
name|fromImageReader
parameter_list|()
function_decl|;
name|void
name|fromImageReaderAnimatedGif_data
parameter_list|()
function_decl|;
name|void
name|fromImageReaderAnimatedGif
parameter_list|()
function_decl|;
name|void
name|preserveDepth
parameter_list|()
function_decl|;
name|void
name|splash_crash
parameter_list|()
function_decl|;
name|void
name|toImageDeepCopy
parameter_list|()
function_decl|;
name|void
name|loadAsBitmapOrPixmap
parameter_list|()
function_decl|;
name|void
name|scaled_QTBUG19157
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|lenientCompare
specifier|static
name|bool
name|lenientCompare
parameter_list|(
specifier|const
name|QPixmap
modifier|&
name|actual
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|expected
parameter_list|)
block|{
name|QImage
name|expectedImage
init|=
name|expected
operator|.
name|toImage
argument_list|()
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|QImage
name|actualImage
init|=
name|actual
operator|.
name|toImage
argument_list|()
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedImage
operator|.
name|size
argument_list|()
operator|!=
name|actualImage
operator|.
name|size
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"Image size comparison failed: expected: %dx%d, got %dx%d"
argument_list|,
name|expectedImage
operator|.
name|size
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|expectedImage
operator|.
name|size
argument_list|()
operator|.
name|height
argument_list|()
argument_list|,
name|actualImage
operator|.
name|size
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|actualImage
operator|.
name|size
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|const
name|int
name|size
init|=
name|actual
operator|.
name|width
argument_list|()
operator|*
name|actual
operator|.
name|height
argument_list|()
decl_stmt|;
specifier|const
name|int
name|threshold
init|=
name|QPixmap
operator|::
name|defaultDepth
argument_list|()
operator|==
literal|16
condition|?
literal|10
else|:
literal|2
decl_stmt|;
name|QRgb
modifier|*
name|a
init|=
operator|(
name|QRgb
operator|*
operator|)
name|actualImage
operator|.
name|bits
argument_list|()
decl_stmt|;
name|QRgb
modifier|*
name|e
init|=
operator|(
name|QRgb
operator|*
operator|)
name|expectedImage
operator|.
name|bits
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QColor
name|ca
argument_list|(
name|a
index|[
name|i
index|]
argument_list|)
decl_stmt|;
specifier|const
name|QColor
name|ce
argument_list|(
name|e
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|qAbs
argument_list|(
name|ca
operator|.
name|red
argument_list|()
operator|-
name|ce
operator|.
name|red
argument_list|()
argument_list|)
operator|>
name|threshold
operator|||
name|qAbs
argument_list|(
name|ca
operator|.
name|green
argument_list|()
operator|-
name|ce
operator|.
name|green
argument_list|()
argument_list|)
operator|>
name|threshold
operator|||
name|qAbs
argument_list|(
name|ca
operator|.
name|blue
argument_list|()
operator|-
name|ce
operator|.
name|blue
argument_list|()
argument_list|)
operator|>
name|threshold
condition|)
block|{
name|qWarning
argument_list|(
literal|"Color mismatch at pixel #%d: Expected: %d,%d,%d, got %d,%d,%d"
argument_list|,
name|i
argument_list|,
name|ce
operator|.
name|red
argument_list|()
argument_list|,
name|ce
operator|.
name|green
argument_list|()
argument_list|,
name|ce
operator|.
name|blue
argument_list|()
argument_list|,
name|ca
operator|.
name|red
argument_list|()
argument_list|,
name|ca
operator|.
name|green
argument_list|()
argument_list|,
name|ca
operator|.
name|blue
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QImage
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QPixmap
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QMatrix
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QBitmap
argument_list|)
end_macro
begin_constructor
DECL|function|tst_QPixmap
name|tst_QPixmap
operator|::
name|tst_QPixmap
parameter_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~tst_QPixmap
name|tst_QPixmap
operator|::
name|~
name|tst_QPixmap
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|init
name|void
name|tst_QPixmap
operator|::
name|init
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QPixmap
operator|::
name|cleanup
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|swap
name|void
name|tst_QPixmap
operator|::
name|swap
parameter_list|()
block|{
name|QPixmap
name|p1
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|)
decl_stmt|,
name|p2
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|)
decl_stmt|;
name|p1
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|p2
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
specifier|const
name|qint64
name|p1k
init|=
name|p1
operator|.
name|cacheKey
argument_list|()
decl_stmt|;
specifier|const
name|qint64
name|p2k
init|=
name|p2
operator|.
name|cacheKey
argument_list|()
decl_stmt|;
name|p1
operator|.
name|swap
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p1
operator|.
name|cacheKey
argument_list|()
argument_list|,
name|p2k
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p1
operator|.
name|size
argument_list|()
argument_list|,
name|QSize
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p2
operator|.
name|cacheKey
argument_list|()
argument_list|,
name|p1k
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p2
operator|.
name|size
argument_list|()
argument_list|,
name|QSize
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromImage_data
name|void
name|tst_QPixmap
operator|::
name|fromImage_data
parameter_list|()
block|{
name|bool
name|is16bit
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|QPixmap
operator|::
name|defaultDepth
argument_list|()
operator|==
literal|16
condition|)
name|is16bit
operator|=
literal|true
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QImage
operator|::
name|Format
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_Mono"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_Mono
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_MonoLSB"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_MonoLSB
expr_stmt|;
comment|//    QTest::newRow("Format_Indexed8")<< QImage::Format_Indexed8;
if|if
condition|(
operator|!
name|is16bit
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB32"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB32
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_ARGB32"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB32
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_ARGB32_Premultiplied"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
expr_stmt|;
if|if
condition|(
operator|!
name|is16bit
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB16"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB16
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromImage
name|void
name|tst_QPixmap
operator|::
name|fromImage
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QImage
operator|::
name|Format
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QImage
name|image
argument_list|(
literal|37
argument_list|,
literal|16
argument_list|,
name|format
argument_list|)
decl_stmt|;
if|if
condition|(
name|image
operator|.
name|colorCount
argument_list|()
operator|==
literal|2
condition|)
block|{
name|image
operator|.
name|setColor
argument_list|(
literal|0
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|color0
argument_list|)
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|image
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|color1
argument_list|)
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|image
operator|.
name|fill
argument_list|(
literal|0x7f7f7f7f
argument_list|)
expr_stmt|;
specifier|const
name|QPixmap
name|pixmap
init|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|image
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
if|if
condition|(
name|pixmap
operator|.
name|handle
argument_list|()
operator|->
name|classId
argument_list|()
operator|==
name|QPlatformPixmap
operator|::
name|X11Class
operator|&&
operator|!
name|pixmap
operator|.
name|x11PictureHandle
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"Requires XRender support"
argument_list|)
expr_stmt|;
endif|#
directive|endif
specifier|const
name|QImage
name|result
init|=
name|pixmap
operator|.
name|toImage
argument_list|()
decl_stmt|;
name|image
operator|=
name|image
operator|.
name|convertToFormat
argument_list|(
name|result
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|image
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromUninitializedImage_data
name|void
name|tst_QPixmap
operator|::
name|fromUninitializedImage_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QImage
operator|::
name|Format
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_Mono"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_Mono
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_MonoLSB"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_MonoLSB
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_Indexed8"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_Indexed8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB32"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB32
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_ARGB32"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB32
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_ARGB32_Premultiplied"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Format_RGB16"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB16
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromUninitializedImage
name|void
name|tst_QPixmap
operator|::
name|fromUninitializedImage
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QImage
operator|::
name|Format
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QImage
name|image
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|QPixmap
name|pix
init|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|image
argument_list|)
decl_stmt|;
comment|// it simply shouldn't crash...
name|QVERIFY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|convertFromImage_data
name|void
name|tst_QPixmap
operator|::
name|convertFromImage_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QImage
argument_list|>
argument_list|(
literal|"img1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QImage
argument_list|>
argument_list|(
literal|"img2"
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|prefix
init|=
name|QLatin1String
argument_list|(
name|SRCDIR
argument_list|)
operator|+
literal|"/convertFromImage"
decl_stmt|;
block|{
name|QImage
name|img1
decl_stmt|;
name|QImage
name|img2
decl_stmt|;
name|QVERIFY
argument_list|(
name|img1
operator|.
name|load
argument_list|(
name|prefix
operator|+
literal|"/task31722_0/img1.png"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|img2
operator|.
name|load
argument_list|(
name|prefix
operator|+
literal|"/task31722_0/img2.png"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|img1
operator|.
name|load
argument_list|(
name|prefix
operator|+
literal|"/task31722_0/img1.png"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|img2
operator|.
name|load
argument_list|(
name|prefix
operator|+
literal|"/task31722_0/img2.png"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Task 31722 0"
argument_list|)
operator|<<
name|img1
operator|<<
name|img2
expr_stmt|;
block|}
block|{
name|QImage
name|img1
decl_stmt|;
name|QImage
name|img2
decl_stmt|;
name|QVERIFY
argument_list|(
name|img1
operator|.
name|load
argument_list|(
name|prefix
operator|+
literal|"/task31722_1/img1.png"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|img2
operator|.
name|load
argument_list|(
name|prefix
operator|+
literal|"/task31722_1/img2.png"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Task 31722 1"
argument_list|)
operator|<<
name|img1
operator|<<
name|img2
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|convertFromImage
name|void
name|tst_QPixmap
operator|::
name|convertFromImage
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QImage
argument_list|,
name|img1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QImage
argument_list|,
name|img2
argument_list|)
expr_stmt|;
name|QPixmap
name|pix
init|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|img1
argument_list|)
decl_stmt|;
name|pix
operator|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|img2
argument_list|)
expr_stmt|;
name|QPixmap
name|res
init|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|img2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|pixmapsAreEqual
argument_list|(
operator|&
name|pix
argument_list|,
operator|&
name|res
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|scroll_data
name|void
name|tst_QPixmap
operator|::
name|scroll_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QImage
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"dx"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"dy"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QRect
argument_list|>
argument_list|(
literal|"rect"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QRegion
argument_list|>
argument_list|(
literal|"exposed"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"newPix"
argument_list|)
expr_stmt|;
name|QImage
name|input
argument_list|(
literal|":/images/designer.png"
argument_list|)
decl_stmt|;
comment|// Noop tests
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
name|QImage
argument_list|()
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QRect
argument_list|()
operator|<<
name|QRegion
argument_list|()
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dx_0_dy_0_null"
argument_list|)
operator|<<
name|input
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QRect
argument_list|()
operator|<<
name|QRegion
argument_list|()
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dx_1_dy_0_null"
argument_list|)
operator|<<
name|input
operator|<<
literal|1
operator|<<
literal|0
operator|<<
name|QRect
argument_list|()
operator|<<
name|QRegion
argument_list|()
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dx_0_dy_1_null"
argument_list|)
operator|<<
name|input
operator|<<
literal|0
operator|<<
literal|1
operator|<<
name|QRect
argument_list|()
operator|<<
name|QRegion
argument_list|()
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dx_0_dy_0_x_y_w_h"
argument_list|)
operator|<<
name|input
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|input
operator|.
name|rect
argument_list|()
operator|<<
name|QRegion
argument_list|()
operator|<<
literal|false
expr_stmt|;
name|QRegion
name|r
decl_stmt|;
comment|// Scroll whole pixmap
name|r
operator|=
name|QRegion
argument_list|()
expr_stmt|;
name|r
operator|+=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|128
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dx_0_dy_10_x_y_w_h"
argument_list|)
operator|<<
name|input
operator|<<
literal|0
operator|<<
literal|10
operator|<<
name|input
operator|.
name|rect
argument_list|()
operator|<<
name|r
operator|<<
literal|true
expr_stmt|;
name|r
operator|=
name|QRegion
argument_list|()
expr_stmt|;
name|r
operator|+=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|128
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dx_10_dy_0_x_y_w_h"
argument_list|)
operator|<<
name|input
operator|<<
literal|10
operator|<<
literal|0
operator|<<
name|input
operator|.
name|rect
argument_list|()
operator|<<
name|r
operator|<<
literal|true
expr_stmt|;
name|r
operator|=
name|QRegion
argument_list|()
expr_stmt|;
name|r
operator|+=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|128
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|r
operator|+=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|118
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dx_10_dy_10_x_y_w_h"
argument_list|)
operator|<<
name|input
operator|<<
literal|10
operator|<<
literal|10
operator|<<
name|input
operator|.
name|rect
argument_list|()
operator|<<
name|r
operator|<<
literal|true
expr_stmt|;
name|r
operator|=
name|QRegion
argument_list|()
expr_stmt|;
name|r
operator|+=
name|QRect
argument_list|(
literal|118
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|128
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dx_-10_dy_0_x_y_w_h"
argument_list|)
operator|<<
name|input
operator|<<
operator|-
literal|10
operator|<<
literal|0
operator|<<
name|input
operator|.
name|rect
argument_list|()
operator|<<
name|r
operator|<<
literal|true
expr_stmt|;
name|r
operator|=
name|QRegion
argument_list|()
expr_stmt|;
name|r
operator|+=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|118
argument_list|,
literal|128
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dx_0_dy_-10_x_y_w_h"
argument_list|)
operator|<<
name|input
operator|<<
literal|0
operator|<<
operator|-
literal|10
operator|<<
name|input
operator|.
name|rect
argument_list|()
operator|<<
name|r
operator|<<
literal|true
expr_stmt|;
name|r
operator|=
name|QRegion
argument_list|()
expr_stmt|;
name|r
operator|+=
name|QRect
argument_list|(
literal|118
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|118
argument_list|)
expr_stmt|;
name|r
operator|+=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|118
argument_list|,
literal|128
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dx_-10_dy_-10_x_y_w_h"
argument_list|)
operator|<<
name|input
operator|<<
operator|-
literal|10
operator|<<
operator|-
literal|10
operator|<<
name|input
operator|.
name|rect
argument_list|()
operator|<<
name|r
operator|<<
literal|true
expr_stmt|;
comment|// Scroll part of pixmap
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dx_0_dy_0_50_50_100_100"
argument_list|)
operator|<<
name|input
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QRect
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
operator|<<
name|QRegion
argument_list|()
operator|<<
literal|false
expr_stmt|;
name|r
operator|=
name|QRegion
argument_list|()
expr_stmt|;
name|r
operator|+=
name|QRect
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|,
literal|10
argument_list|,
literal|78
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dx_10_dy_0_50_50_100_100"
argument_list|)
operator|<<
name|input
operator|<<
literal|10
operator|<<
literal|0
operator|<<
name|QRect
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
operator|<<
name|r
operator|<<
literal|true
expr_stmt|;
name|r
operator|=
name|QRegion
argument_list|()
expr_stmt|;
name|r
operator|+=
name|QRect
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|,
literal|78
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dx_0_dy_10_50_50_100_100"
argument_list|)
operator|<<
name|input
operator|<<
literal|0
operator|<<
literal|10
operator|<<
name|QRect
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
operator|<<
name|r
operator|<<
literal|true
expr_stmt|;
name|r
operator|=
name|QRegion
argument_list|()
expr_stmt|;
name|r
operator|+=
name|QRect
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|,
literal|78
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|r
operator|+=
name|QRect
argument_list|(
literal|50
argument_list|,
literal|60
argument_list|,
literal|10
argument_list|,
literal|68
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dx_10_dy_10_50_50_100_100"
argument_list|)
operator|<<
name|input
operator|<<
literal|10
operator|<<
literal|10
operator|<<
name|QRect
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
operator|<<
name|r
operator|<<
literal|true
expr_stmt|;
name|r
operator|=
name|QRegion
argument_list|()
expr_stmt|;
name|r
operator|+=
name|QRect
argument_list|(
literal|118
argument_list|,
literal|50
argument_list|,
literal|10
argument_list|,
literal|78
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dx_-10_dy_0_50_50_100_100"
argument_list|)
operator|<<
name|input
operator|<<
operator|-
literal|10
operator|<<
literal|0
operator|<<
name|QRect
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
operator|<<
name|r
operator|<<
literal|true
expr_stmt|;
name|r
operator|=
name|QRegion
argument_list|()
expr_stmt|;
name|r
operator|+=
name|QRect
argument_list|(
literal|50
argument_list|,
literal|118
argument_list|,
literal|78
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dx_0_dy_-10_50_50_100_100"
argument_list|)
operator|<<
name|input
operator|<<
literal|0
operator|<<
operator|-
literal|10
operator|<<
name|QRect
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
operator|<<
name|r
operator|<<
literal|true
expr_stmt|;
name|r
operator|=
name|QRegion
argument_list|()
expr_stmt|;
name|r
operator|+=
name|QRect
argument_list|(
literal|118
argument_list|,
literal|50
argument_list|,
literal|10
argument_list|,
literal|68
argument_list|)
expr_stmt|;
name|r
operator|+=
name|QRect
argument_list|(
literal|50
argument_list|,
literal|118
argument_list|,
literal|78
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dx_-10_dy_-10_50_50_100_100"
argument_list|)
operator|<<
name|input
operator|<<
operator|-
literal|10
operator|<<
operator|-
literal|10
operator|<<
name|QRect
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
operator|<<
name|r
operator|<<
literal|true
expr_stmt|;
comment|// Scroll away the whole pixmap
name|r
operator|=
name|input
operator|.
name|rect
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dx_128_dy_0_x_y_w_h"
argument_list|)
operator|<<
name|input
operator|<<
literal|128
operator|<<
literal|0
operator|<<
name|input
operator|.
name|rect
argument_list|()
operator|<<
name|r
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dx_0_dy_128_x_y_w_h"
argument_list|)
operator|<<
name|input
operator|<<
literal|0
operator|<<
literal|128
operator|<<
name|input
operator|.
name|rect
argument_list|()
operator|<<
name|r
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dx_128_dy_128_x_y_w_h"
argument_list|)
operator|<<
name|input
operator|<<
literal|128
operator|<<
literal|128
operator|<<
name|input
operator|.
name|rect
argument_list|()
operator|<<
name|r
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dx_-128_dy_0_x_y_w_h"
argument_list|)
operator|<<
name|input
operator|<<
operator|-
literal|128
operator|<<
literal|0
operator|<<
name|input
operator|.
name|rect
argument_list|()
operator|<<
name|r
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dx_0_dy_-128_x_y_w_h"
argument_list|)
operator|<<
name|input
operator|<<
literal|0
operator|<<
operator|-
literal|128
operator|<<
name|input
operator|.
name|rect
argument_list|()
operator|<<
name|r
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dx_-128_dy_-128_x_y_w_h"
argument_list|)
operator|<<
name|input
operator|<<
operator|-
literal|128
operator|<<
operator|-
literal|128
operator|<<
name|input
operator|.
name|rect
argument_list|()
operator|<<
name|r
operator|<<
literal|false
expr_stmt|;
comment|// Scroll away part of the pixmap
name|r
operator|=
name|QRegion
argument_list|()
expr_stmt|;
name|r
operator|+=
name|QRect
argument_list|(
literal|64
argument_list|,
literal|64
argument_list|,
literal|64
argument_list|,
literal|64
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dx_128_dy_128_64_64_128_128"
argument_list|)
operator|<<
name|input
operator|<<
literal|128
operator|<<
literal|128
operator|<<
name|QRect
argument_list|(
literal|64
argument_list|,
literal|64
argument_list|,
literal|128
argument_list|,
literal|128
argument_list|)
operator|<<
name|r
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|scroll
name|void
name|tst_QPixmap
operator|::
name|scroll
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QImage
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|dx
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|dy
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QRect
argument_list|,
name|rect
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QRegion
argument_list|,
name|exposed
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|newPix
argument_list|)
expr_stmt|;
name|QPixmap
name|pixmap
init|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|QRegion
name|exp
decl_stmt|;
name|qint64
name|oldKey
init|=
name|pixmap
operator|.
name|cacheKey
argument_list|()
decl_stmt|;
name|pixmap
operator|.
name|scroll
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|,
name|rect
argument_list|,
operator|&
name|exp
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|newPix
condition|)
name|QCOMPARE
argument_list|(
name|pixmap
operator|.
name|cacheKey
argument_list|()
argument_list|,
name|oldKey
argument_list|)
expr_stmt|;
else|else
name|QVERIFY
argument_list|(
name|pixmap
operator|.
name|cacheKey
argument_list|()
operator|!=
name|oldKey
argument_list|)
expr_stmt|;
name|QString
name|fileName
init|=
name|QString
argument_list|(
literal|":/images/%1.png"
argument_list|)
operator|.
name|arg
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
decl_stmt|;
name|QPixmap
name|output
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|input
operator|.
name|isNull
argument_list|()
operator|==
name|output
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|lenientCompare
argument_list|(
name|pixmap
argument_list|,
name|output
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|exp
argument_list|,
name|exposed
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fill_data
name|void
name|tst_QPixmap
operator|::
name|fill_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|uint
argument_list|>
argument_list|(
literal|"pixel"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"syscolor"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"bitmap"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|color
init|=
name|Qt
operator|::
name|black
init|;
name|color
operator|<
name|Qt
operator|::
name|darkYellow
condition|;
operator|++
name|color
control|)
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"syscolor_%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|color
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|uint
argument_list|(
name|color
argument_list|)
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_QWS
if|if
condition|(
name|QScreen
operator|::
name|instance
argument_list|()
operator|->
name|depth
argument_list|()
operator|>=
literal|24
condition|)
block|{
elif|#
directive|elif
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
name|QPixmap
name|pm
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|pm
operator|.
name|x11PictureHandle
argument_list|()
condition|)
block|{
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QPixmap
name|pixmap
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|QPixmap
operator|::
name|grabWidget
argument_list|(
name|QApplication
operator|::
name|desktop
argument_list|()
argument_list|)
operator|.
name|depth
argument_list|()
operator|>=
literal|24
condition|)
block|{
else|#
directive|else
name|QPixmap
name|pixmap
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
block|{
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"alpha_7f_red"
argument_list|)
operator|<<
literal|0x7fff0000u
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"alpha_3f_blue"
argument_list|)
operator|<<
literal|0x3f0000ffu
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"alpha_b7_green"
argument_list|)
operator|<<
literal|0xbf00ff00u
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"alpha_7f_white"
argument_list|)
operator|<<
literal|0x7fffffffu
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"alpha_3f_white"
argument_list|)
operator|<<
literal|0x3fffffffu
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"alpha_b7_white"
argument_list|)
operator|<<
literal|0xb7ffffffu
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"alpha_7f_black"
argument_list|)
operator|<<
literal|0x7f000000u
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"alpha_3f_black"
argument_list|)
operator|<<
literal|0x3f000000u
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"alpha_b7_black"
argument_list|)
operator|<<
literal|0xbf000000u
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bitmap_color0"
argument_list|)
operator|<<
name|uint
argument_list|(
name|Qt
operator|::
name|color0
argument_list|)
operator|<<
literal|true
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bitmap_color1"
argument_list|)
operator|<<
name|uint
argument_list|(
name|Qt
operator|::
name|color1
argument_list|)
operator|<<
literal|true
operator|<<
literal|true
expr_stmt|;
block|}
DECL|function|fill
name|void
name|tst_QPixmap
operator|::
name|fill
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|uint
argument_list|,
name|pixel
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|syscolor
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|bitmap
argument_list|)
expr_stmt|;
name|QColor
name|color
decl_stmt|;
if|if
condition|(
name|syscolor
condition|)
name|color
operator|=
name|QColor
argument_list|(
name|Qt
operator|::
name|GlobalColor
argument_list|(
name|pixel
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|color
operator|=
name|QColor
argument_list|(
name|qRed
argument_list|(
name|pixel
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|pixel
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|pixel
argument_list|)
argument_list|,
name|qAlpha
argument_list|(
name|pixel
argument_list|)
argument_list|)
expr_stmt|;
name|QColor
name|compareColor
init|=
name|color
decl_stmt|;
if|if
condition|(
name|bitmap
operator|&&
name|syscolor
condition|)
block|{
comment|// special case color0 and color1 for bitmaps.
if|if
condition|(
name|pixel
operator|==
name|Qt
operator|::
name|color0
condition|)
name|compareColor
operator|.
name|setRgb
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|255
argument_list|)
expr_stmt|;
else|else
name|compareColor
operator|.
name|setRgb
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|QPixmap
name|pm
decl_stmt|;
if|if
condition|(
name|bitmap
condition|)
name|pm
operator|=
name|QBitmap
argument_list|(
literal|400
argument_list|,
literal|400
argument_list|)
expr_stmt|;
else|else
name|pm
operator|=
name|QPixmap
argument_list|(
literal|400
argument_list|,
literal|400
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
if|if
condition|(
operator|!
name|bitmap
operator|&&
name|pm
operator|.
name|handle
argument_list|()
operator|->
name|classId
argument_list|()
operator|==
name|QPlatformPixmap
operator|::
name|X11Class
operator|&&
operator|!
name|pm
operator|.
name|x11PictureHandle
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"Requires XRender support"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|pm
operator|.
name|fill
argument_list|(
name|color
argument_list|)
expr_stmt|;
if|if
condition|(
name|syscolor
operator|&&
operator|!
name|bitmap
operator|&&
name|pm
operator|.
name|depth
argument_list|()
operator|<
literal|24
condition|)
block|{
name|QSKIP
argument_list|(
literal|"Test does not work on displays without true color"
argument_list|)
expr_stmt|;
block|}
name|QImage
name|image
init|=
name|pm
operator|.
name|toImage
argument_list|()
decl_stmt|;
if|if
condition|(
name|bitmap
operator|&&
name|syscolor
condition|)
block|{
name|int
name|pixelindex
init|=
operator|(
name|pixel
operator|==
name|Qt
operator|::
name|color0
operator|)
condition|?
literal|0
else|:
literal|1
decl_stmt|;
name|QCOMPARE
argument_list|(
name|image
operator|.
name|pixelIndex
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|pixelindex
argument_list|)
expr_stmt|;
block|}
name|QImage
operator|::
name|Format
name|format
init|=
name|compareColor
operator|.
name|alpha
argument_list|()
operator|!=
literal|255
condition|?
name|QImage
operator|::
name|Format_ARGB32
else|:
name|QImage
operator|::
name|Format_RGB32
decl_stmt|;
name|image
operator|=
name|image
operator|.
name|convertToFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|QImage
name|shouldBe
argument_list|(
literal|400
argument_list|,
literal|400
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|shouldBe
operator|.
name|fill
argument_list|(
name|compareColor
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|image
argument_list|,
name|shouldBe
argument_list|)
expr_stmt|;
block|}
DECL|function|fill_transparent
name|void
name|tst_QPixmap
operator|::
name|fill_transparent
parameter_list|()
block|{
name|QPixmap
name|pixmap
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
if|if
condition|(
name|pixmap
operator|.
name|handle
argument_list|()
operator|->
name|classId
argument_list|()
operator|==
name|QPlatformPixmap
operator|::
name|X11Class
operator|&&
operator|!
name|pixmap
operator|.
name|x11PictureHandle
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"Requires XRender support"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|pixmap
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|pixmap
operator|.
name|hasAlphaChannel
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|mask
name|void
name|tst_QPixmap
operator|::
name|mask
parameter_list|()
block|{
name|QPixmap
name|pm
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|QBitmap
name|bm
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|pm
operator|.
name|fill
argument_list|()
expr_stmt|;
name|bm
operator|.
name|fill
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|pm
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|bm
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pm
operator|.
name|hasAlphaChannel
argument_list|()
condition|)
block|{
comment|// This would fail if the default pixmap format is
comment|// argb32_premultiplied. The mask will be all 1's.
comment|// Therefore this is skipped when the alpha channel is present.
name|QVERIFY
argument_list|(
name|pm
operator|.
name|mask
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QImage
name|img
init|=
name|bm
operator|.
name|toImage
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|format
argument_list|()
operator|==
name|QImage
operator|::
name|Format_MonoLSB
operator|||
name|img
operator|.
name|format
argument_list|()
operator|==
name|QImage
operator|::
name|Format_Mono
argument_list|)
expr_stmt|;
name|pm
operator|.
name|setMask
argument_list|(
name|bm
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|pm
operator|.
name|mask
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|bm
operator|=
name|QBitmap
argument_list|()
expr_stmt|;
comment|// Invalid format here, since isNull() == true
name|QVERIFY
argument_list|(
name|bm
operator|.
name|toImage
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bm
operator|.
name|toImage
argument_list|()
operator|.
name|format
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_Invalid
argument_list|)
expr_stmt|;
name|pm
operator|.
name|setMask
argument_list|(
name|bm
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|pm
operator|.
name|mask
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|bm
operator|=
name|QBitmap
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|bm
operator|.
name|fill
argument_list|()
expr_stmt|;
name|pm
operator|.
name|setMask
argument_list|(
name|bm
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|pm
operator|.
name|mask
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|bitmapMask
name|void
name|tst_QPixmap
operator|::
name|bitmapMask
parameter_list|()
block|{
name|QImage
name|image
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
name|QImage
operator|::
name|Format_Mono
argument_list|)
decl_stmt|;
name|image
operator|.
name|setColor
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|color0
argument_list|)
expr_stmt|;
name|image
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
name|Qt
operator|::
name|color1
argument_list|)
expr_stmt|;
name|image
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|color0
argument_list|)
expr_stmt|;
name|image
operator|.
name|setPixel
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|Qt
operator|::
name|color1
argument_list|)
expr_stmt|;
name|image
operator|.
name|setPixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|color1
argument_list|)
expr_stmt|;
name|QImage
name|image_mask
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
name|QImage
operator|::
name|Format_Mono
argument_list|)
decl_stmt|;
name|image_mask
operator|.
name|setColor
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|color0
argument_list|)
expr_stmt|;
name|image_mask
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
name|Qt
operator|::
name|color1
argument_list|)
expr_stmt|;
name|image_mask
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|color0
argument_list|)
expr_stmt|;
name|image_mask
operator|.
name|setPixel
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|Qt
operator|::
name|color1
argument_list|)
expr_stmt|;
name|image_mask
operator|.
name|setPixel
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|color1
argument_list|)
expr_stmt|;
name|QBitmap
name|pm
init|=
name|QBitmap
operator|::
name|fromImage
argument_list|(
name|image
argument_list|)
decl_stmt|;
name|QBitmap
name|pm_mask
init|=
name|QBitmap
operator|::
name|fromImage
argument_list|(
name|image_mask
argument_list|)
decl_stmt|;
name|pm
operator|.
name|setMask
argument_list|(
name|pm_mask
argument_list|)
expr_stmt|;
name|image
operator|=
name|pm
operator|.
name|toImage
argument_list|()
expr_stmt|;
name|image
operator|.
name|setColor
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|color0
argument_list|)
expr_stmt|;
name|image
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
name|Qt
operator|::
name|color1
argument_list|)
expr_stmt|;
name|image_mask
operator|=
name|pm_mask
operator|.
name|toImage
argument_list|()
expr_stmt|;
name|image_mask
operator|.
name|setColor
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|color0
argument_list|)
expr_stmt|;
name|image_mask
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
name|Qt
operator|::
name|color1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|image
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|image
operator|.
name|pixel
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|image
operator|.
name|pixel
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|setGetMask_data
name|void
name|tst_QPixmap
operator|::
name|setGetMask_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
literal|"pixmap"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QBitmap
argument_list|>
argument_list|(
literal|"mask"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QBitmap
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QPixmap
name|pixmap
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|QBitmap
name|mask
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|QPainter
name|p
decl_stmt|;
name|p
operator|.
name|begin
argument_list|(
operator|&
name|pixmap
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nullmask 0"
argument_list|)
operator|<<
name|QPixmap
argument_list|()
operator|<<
name|QBitmap
argument_list|()
operator|<<
name|QBitmap
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nullmask 1"
argument_list|)
operator|<<
name|pixmap
operator|<<
name|QBitmap
argument_list|()
operator|<<
name|QBitmap
argument_list|()
expr_stmt|;
name|mask
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nullmask 2"
argument_list|)
operator|<<
name|pixmap
operator|<<
name|mask
operator|<<
name|mask
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nullmask 3"
argument_list|)
operator|<<
name|QPixmap
argument_list|(
name|QBitmap
argument_list|()
argument_list|)
operator|<<
name|QBitmap
argument_list|()
operator|<<
name|QBitmap
argument_list|()
expr_stmt|;
name|p
operator|.
name|begin
argument_list|(
operator|&
name|mask
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|color1
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"simple mask 0"
argument_list|)
operator|<<
name|pixmap
operator|<<
name|mask
operator|<<
name|mask
expr_stmt|;
block|}
DECL|function|setGetMask
name|void
name|tst_QPixmap
operator|::
name|setGetMask
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QPixmap
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QBitmap
argument_list|,
name|mask
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QBitmap
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|pixmap
operator|.
name|setMask
argument_list|(
name|mask
argument_list|)
expr_stmt|;
name|QBitmap
name|result
init|=
name|pixmap
operator|.
name|mask
argument_list|()
decl_stmt|;
name|QImage
name|resultImage
init|=
name|result
operator|.
name|toImage
argument_list|()
decl_stmt|;
name|QImage
name|expectedImage
init|=
name|expected
operator|.
name|toImage
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|resultImage
operator|.
name|convertToFormat
argument_list|(
name|expectedImage
operator|.
name|format
argument_list|()
argument_list|)
argument_list|,
name|expectedImage
argument_list|)
expr_stmt|;
block|}
DECL|function|testMetrics
name|void
name|tst_QPixmap
operator|::
name|testMetrics
parameter_list|()
block|{
name|QPixmap
name|pixmap
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|pixmap
operator|.
name|width
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pixmap
operator|.
name|height
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|pixmap
operator|.
name|depth
argument_list|()
operator|>=
name|QPixmap
operator|::
name|defaultDepth
argument_list|()
argument_list|)
expr_stmt|;
name|QBitmap
name|bitmap
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|bitmap
operator|.
name|width
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bitmap
operator|.
name|height
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bitmap
operator|.
name|depth
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QPixmap
name|null
decl_stmt|;
name|QCOMPARE
argument_list|(
name|null
operator|.
name|size
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|null
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|null
operator|.
name|size
argument_list|()
operator|.
name|height
argument_list|()
argument_list|,
name|null
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|createMaskFromColor
name|void
name|tst_QPixmap
operator|::
name|createMaskFromColor
parameter_list|()
block|{
name|QImage
name|image
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
decl_stmt|;
name|image
operator|.
name|setColorCount
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|image
operator|.
name|setColor
argument_list|(
literal|0
argument_list|,
literal|0xffffffff
argument_list|)
expr_stmt|;
name|image
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
literal|0xff000000
argument_list|)
expr_stmt|;
name|image
operator|.
name|setColor
argument_list|(
literal|2
argument_list|,
literal|0xffff0000
argument_list|)
expr_stmt|;
name|image
operator|.
name|setColor
argument_list|(
literal|3
argument_list|,
literal|0xff0000ff
argument_list|)
expr_stmt|;
name|image
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|image
operator|.
name|setPixel
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|image
operator|.
name|setPixel
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|image
operator|.
name|setPixel
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QImage
name|im_mask
init|=
name|image
operator|.
name|createMaskFromColor
argument_list|(
literal|0xffff0000
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|uint
operator|)
name|im_mask
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|color0
argument_list|)
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|uint
operator|)
name|im_mask
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|color0
argument_list|)
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|QPixmap
name|pixmap
init|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|image
argument_list|)
decl_stmt|;
name|QBitmap
name|mask
init|=
name|pixmap
operator|.
name|createMaskFromColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
decl_stmt|;
name|QBitmap
name|inv_mask
init|=
name|pixmap
operator|.
name|createMaskFromColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|,
name|Qt
operator|::
name|MaskOutColor
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|uint
operator|)
name|mask
operator|.
name|toImage
argument_list|()
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|color0
argument_list|)
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|uint
operator|)
name|inv_mask
operator|.
name|toImage
argument_list|()
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|color1
argument_list|)
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|cacheKey
name|void
name|tst_QPixmap
operator|::
name|cacheKey
parameter_list|()
block|{
name|QPixmap
name|pixmap1
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QPixmap
name|pixmap2
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|qint64
name|pixmap1_key
init|=
name|pixmap1
operator|.
name|cacheKey
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|pixmap1
operator|.
name|cacheKey
argument_list|()
operator|!=
name|pixmap2
operator|.
name|cacheKey
argument_list|()
argument_list|)
expr_stmt|;
name|pixmap2
operator|=
name|pixmap1
expr_stmt|;
name|QVERIFY
argument_list|(
name|pixmap2
operator|.
name|cacheKey
argument_list|()
operator|==
name|pixmap1
operator|.
name|cacheKey
argument_list|()
argument_list|)
expr_stmt|;
name|pixmap2
operator|.
name|detach
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|pixmap2
operator|.
name|cacheKey
argument_list|()
operator|!=
name|pixmap1
operator|.
name|cacheKey
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|pixmap1
operator|.
name|cacheKey
argument_list|()
operator|==
name|pixmap1_key
argument_list|)
expr_stmt|;
block|}
comment|// Test drawing a bitmap on a pixmap.
DECL|function|drawBitmap
name|void
name|tst_QPixmap
operator|::
name|drawBitmap
parameter_list|()
block|{
name|QBitmap
name|bitmap
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|bitmap
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|color1
argument_list|)
expr_stmt|;
name|QPixmap
name|pixmap
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|QPainter
name|painter2
argument_list|(
operator|&
name|pixmap
argument_list|)
decl_stmt|;
name|painter2
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
name|QBrush
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
argument_list|)
expr_stmt|;
name|painter2
operator|.
name|setPen
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|painter2
operator|.
name|drawPixmap
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
name|bitmap
argument_list|)
expr_stmt|;
name|painter2
operator|.
name|end
argument_list|()
expr_stmt|;
name|QPixmap
name|expected
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|expected
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|lenientCompare
argument_list|(
name|pixmap
argument_list|,
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|grabWidget
name|void
name|tst_QPixmap
operator|::
name|grabWidget
parameter_list|()
block|{
for|for
control|(
name|int
name|opaque
init|=
literal|0
init|;
name|opaque
operator|<
literal|2
condition|;
operator|++
name|opaque
control|)
block|{
name|QWidget
name|widget
decl_stmt|;
name|QImage
name|image
argument_list|(
literal|128
argument_list|,
literal|128
argument_list|,
name|opaque
condition|?
name|QImage
operator|::
name|Format_RGB32
else|:
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|image
operator|.
name|height
argument_list|()
condition|;
operator|++
name|row
control|)
block|{
name|QRgb
modifier|*
name|line
init|=
cast|reinterpret_cast
argument_list|<
name|QRgb
operator|*
argument_list|>
argument_list|(
name|image
operator|.
name|scanLine
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|image
operator|.
name|width
argument_list|()
condition|;
operator|++
name|col
control|)
name|line
index|[
name|col
index|]
operator|=
name|qRgba
argument_list|(
name|rand
argument_list|()
operator|&
literal|255
argument_list|,
name|row
argument_list|,
name|col
argument_list|,
name|opaque
condition|?
literal|255
else|:
literal|127
argument_list|)
expr_stmt|;
block|}
name|QPalette
name|pal
init|=
name|widget
operator|.
name|palette
argument_list|()
decl_stmt|;
name|pal
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|,
name|QBrush
argument_list|(
name|image
argument_list|)
argument_list|)
expr_stmt|;
name|widget
operator|.
name|setPalette
argument_list|(
name|pal
argument_list|)
expr_stmt|;
name|widget
operator|.
name|resize
argument_list|(
literal|128
argument_list|,
literal|128
argument_list|)
expr_stmt|;
name|QPixmap
name|expected
argument_list|(
literal|64
argument_list|,
literal|64
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|opaque
condition|)
name|expected
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|expected
argument_list|)
decl_stmt|;
name|p
operator|.
name|translate
argument_list|(
operator|-
literal|64
argument_list|,
operator|-
literal|64
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawTiledPixmap
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|128
argument_list|,
literal|128
argument_list|,
name|pal
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|)
operator|.
name|texture
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|QPixmap
name|actual
init|=
name|QPixmap
operator|::
name|grabWidget
argument_list|(
operator|&
name|widget
argument_list|,
name|QRect
argument_list|(
literal|64
argument_list|,
literal|64
argument_list|,
literal|64
argument_list|,
literal|64
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|lenientCompare
argument_list|(
name|actual
argument_list|,
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|actual
operator|=
name|QPixmap
operator|::
name|grabWidget
argument_list|(
operator|&
name|widget
argument_list|,
literal|64
argument_list|,
literal|64
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|lenientCompare
argument_list|(
name|actual
argument_list|,
name|expected
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure a widget that is not yet shown is grabbed correctly.
name|QTreeWidget
name|widget2
decl_stmt|;
name|actual
operator|=
name|QPixmap
operator|::
name|grabWidget
argument_list|(
operator|&
name|widget2
argument_list|)
expr_stmt|;
name|widget2
operator|.
name|show
argument_list|()
expr_stmt|;
name|expected
operator|=
name|QPixmap
operator|::
name|grabWidget
argument_list|(
operator|&
name|widget2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|lenientCompare
argument_list|(
name|actual
argument_list|,
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|grabWindow
name|void
name|tst_QPixmap
operator|::
name|grabWindow
parameter_list|()
block|{
comment|//  ### fixme: Check platforms
name|QSKIP
argument_list|(
literal|"QTBUG-20863 grabWindow is broken on most qpa backends"
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINCE
comment|// We get out of memory, if the desktop itself is too big.
if|if
condition|(
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|width
argument_list|()
operator|<=
literal|480
condition|)
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|QPixmap
operator|::
name|grabWindow
argument_list|(
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|winId
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
name|QWidget
name|w
decl_stmt|;
name|w
operator|.
name|resize
argument_list|(
literal|640
argument_list|,
literal|480
argument_list|)
expr_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
name|qt_x11_wait_for_window_manager
argument_list|(
operator|&
name|w
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|QPixmap
operator|::
name|grabWindow
argument_list|(
name|w
operator|.
name|winId
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
name|QWidget
name|child
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
name|child
operator|.
name|setGeometry
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|child
operator|.
name|setPalette
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|child
operator|.
name|setAutoFillBackground
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|child
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
name|qt_x11_wait_for_window_manager
argument_list|(
operator|&
name|child
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QPixmap
name|grabWindowPixmap
init|=
name|QPixmap
operator|::
name|grabWindow
argument_list|(
name|child
operator|.
name|winId
argument_list|()
argument_list|)
decl_stmt|;
name|QPixmap
name|grabWidgetPixmap
init|=
name|QPixmap
operator|::
name|grabWidget
argument_list|(
operator|&
name|child
argument_list|)
decl_stmt|;
name|lenientCompare
argument_list|(
name|grabWindowPixmap
argument_list|,
name|grabWidgetPixmap
argument_list|)
expr_stmt|;
block|}
DECL|function|isNull
name|void
name|tst_QPixmap
operator|::
name|isNull
parameter_list|()
block|{
block|{
name|QPixmap
name|pixmap
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|pixmap
operator|.
name|isNull
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
block|}
block|{
name|QPixmap
name|pixmap
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|pixmap
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QPixmap
name|pixmap
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|pixmap
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QPixmap
name|pixmap
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|pixmap
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QPixmap
name|pixmap
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|pixmap
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QPixmap
name|pixmap
argument_list|(
operator|-
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|pixmap
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|convertFromImageNoDetach
name|void
name|tst_QPixmap
operator|::
name|convertFromImageNoDetach
parameter_list|()
block|{
name|QPixmap
name|randomPixmap
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomPixmap
operator|.
name|handle
argument_list|()
operator|->
name|classId
argument_list|()
operator|!=
name|QPlatformPixmap
operator|::
name|RasterClass
condition|)
name|QSKIP
argument_list|(
literal|"Test only valid for raster pixmaps"
argument_list|)
expr_stmt|;
comment|//first get the screen format
name|QImage
operator|::
name|Format
name|screenFormat
init|=
name|randomPixmap
operator|.
name|toImage
argument_list|()
operator|.
name|format
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|screenFormat
operator|!=
name|QImage
operator|::
name|Format_Invalid
argument_list|)
expr_stmt|;
name|QImage
name|orig
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
name|screenFormat
argument_list|)
decl_stmt|;
name|QPixmap
name|pix
init|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|orig
argument_list|)
decl_stmt|;
name|QImage
name|copy
init|=
name|pix
operator|.
name|toImage
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|copy
operator|.
name|format
argument_list|()
operator|==
name|screenFormat
argument_list|)
expr_stmt|;
specifier|const
name|QImage
name|constOrig
init|=
name|orig
decl_stmt|;
specifier|const
name|QImage
name|constCopy
init|=
name|copy
decl_stmt|;
name|QVERIFY
argument_list|(
name|constOrig
operator|.
name|bits
argument_list|()
operator|==
name|constCopy
operator|.
name|bits
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|convertFromImageDetach
name|void
name|tst_QPixmap
operator|::
name|convertFromImageDetach
parameter_list|()
block|{
name|QImage
name|img
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|img
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|img
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QPixmap
name|p
init|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|img
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|p
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QPixmap
name|copy
init|=
name|p
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|copy
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|p
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|img
operator|.
name|fill
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|p
operator|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|img
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|copy
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
DECL|function|toWinHBITMAP_data
name|void
name|tst_QPixmap
operator|::
name|toWinHBITMAP_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"red"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"green"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"blue"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"red"
argument_list|)
operator|<<
literal|255
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"green"
argument_list|)
operator|<<
literal|0
operator|<<
literal|255
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blue"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|255
expr_stmt|;
block|}
DECL|function|toWinHBITMAP
name|void
name|tst_QPixmap
operator|::
name|toWinHBITMAP
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|red
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|green
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|blue
argument_list|)
expr_stmt|;
name|QPixmap
name|pm
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|pm
operator|.
name|fill
argument_list|(
name|QColor
argument_list|(
name|red
argument_list|,
name|green
argument_list|,
name|blue
argument_list|)
argument_list|)
expr_stmt|;
name|HBITMAP
name|bitmap
init|=
name|pm
operator|.
name|toWinHBITMAP
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|bitmap
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|// Verify size
name|BITMAP
name|bitmap_info
decl_stmt|;
name|memset
argument_list|(
operator|&
name|bitmap_info
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|BITMAP
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|res
init|=
name|GetObject
argument_list|(
name|bitmap
argument_list|,
sizeof|sizeof
argument_list|(
name|BITMAP
argument_list|)
argument_list|,
operator|&
name|bitmap_info
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|100
argument_list|,
operator|(
name|int
operator|)
name|bitmap_info
operator|.
name|bmWidth
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|100
argument_list|,
operator|(
name|int
operator|)
name|bitmap_info
operator|.
name|bmHeight
argument_list|)
expr_stmt|;
name|HDC
name|display_dc
init|=
name|GetDC
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|HDC
name|bitmap_dc
init|=
name|CreateCompatibleDC
argument_list|(
name|display_dc
argument_list|)
decl_stmt|;
name|HBITMAP
name|null_bitmap
init|=
operator|(
name|HBITMAP
operator|)
name|SelectObject
argument_list|(
name|bitmap_dc
argument_list|,
name|bitmap
argument_list|)
decl_stmt|;
name|COLORREF
name|pixel
init|=
name|GetPixel
argument_list|(
name|bitmap_dc
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|GetRValue
argument_list|(
name|pixel
argument_list|)
argument_list|,
name|red
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|GetGValue
argument_list|(
name|pixel
argument_list|)
argument_list|,
name|green
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|GetBValue
argument_list|(
name|pixel
argument_list|)
argument_list|,
name|blue
argument_list|)
expr_stmt|;
comment|// Clean up
name|SelectObject
argument_list|(
name|bitmap_dc
argument_list|,
name|null_bitmap
argument_list|)
expr_stmt|;
name|DeleteObject
argument_list|(
name|bitmap
argument_list|)
expr_stmt|;
name|DeleteDC
argument_list|(
name|bitmap_dc
argument_list|)
expr_stmt|;
name|ReleaseDC
argument_list|(
literal|0
argument_list|,
name|display_dc
argument_list|)
expr_stmt|;
block|}
DECL|function|fromWinHBITMAP_data
name|void
name|tst_QPixmap
operator|::
name|fromWinHBITMAP_data
parameter_list|()
block|{
name|toWinHBITMAP_data
argument_list|()
expr_stmt|;
block|}
DECL|function|fromWinHBITMAP
name|void
name|tst_QPixmap
operator|::
name|fromWinHBITMAP
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|red
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|green
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|blue
argument_list|)
expr_stmt|;
name|HDC
name|display_dc
init|=
name|GetDC
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|HDC
name|bitmap_dc
init|=
name|CreateCompatibleDC
argument_list|(
name|display_dc
argument_list|)
decl_stmt|;
name|HBITMAP
name|bitmap
init|=
name|CreateCompatibleBitmap
argument_list|(
name|display_dc
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|SelectObject
argument_list|(
name|bitmap_dc
argument_list|,
name|bitmap
argument_list|)
expr_stmt|;
name|SelectObject
argument_list|(
name|bitmap_dc
argument_list|,
name|GetStockObject
argument_list|(
name|NULL_PEN
argument_list|)
argument_list|)
expr_stmt|;
name|HGDIOBJ
name|old_brush
init|=
name|SelectObject
argument_list|(
name|bitmap_dc
argument_list|,
name|CreateSolidBrush
argument_list|(
name|RGB
argument_list|(
name|red
argument_list|,
name|green
argument_list|,
name|blue
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Rectangle
argument_list|(
name|bitmap_dc
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINCE
comment|//the device context has to be deleted before QPixmap::fromWinHBITMAP()
name|DeleteDC
argument_list|(
name|bitmap_dc
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QPixmap
name|pixmap
init|=
name|QPixmap
operator|::
name|fromWinHBITMAP
argument_list|(
name|bitmap
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|pixmap
operator|.
name|width
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pixmap
operator|.
name|height
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|QImage
name|image
init|=
name|pixmap
operator|.
name|toImage
argument_list|()
decl_stmt|;
name|QRgb
name|pixel
init|=
name|image
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|qRed
argument_list|(
name|pixel
argument_list|)
argument_list|,
name|red
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qGreen
argument_list|(
name|pixel
argument_list|)
argument_list|,
name|green
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qBlue
argument_list|(
name|pixel
argument_list|)
argument_list|,
name|blue
argument_list|)
expr_stmt|;
name|DeleteObject
argument_list|(
name|SelectObject
argument_list|(
name|bitmap_dc
argument_list|,
name|old_brush
argument_list|)
argument_list|)
expr_stmt|;
name|DeleteObject
argument_list|(
name|SelectObject
argument_list|(
name|bitmap_dc
argument_list|,
name|bitmap
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|DeleteDC
argument_list|(
name|bitmap_dc
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|ReleaseDC
argument_list|(
literal|0
argument_list|,
name|display_dc
argument_list|)
expr_stmt|;
block|}
DECL|function|compareImages
specifier|static
name|void
name|compareImages
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image1
parameter_list|,
specifier|const
name|QImage
modifier|&
name|image2
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|image1
operator|.
name|width
argument_list|()
argument_list|,
name|image2
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|image1
operator|.
name|height
argument_list|()
argument_list|,
name|image2
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|image1
operator|.
name|format
argument_list|()
argument_list|,
name|image2
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|int
name|fuzz
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|image1
operator|.
name|height
argument_list|()
condition|;
name|y
operator|++
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|image2
operator|.
name|width
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|QRgb
name|p1
init|=
name|image1
operator|.
name|pixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|QRgb
name|p2
init|=
name|image2
operator|.
name|pixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|bool
name|pixelMatches
init|=
name|qAbs
argument_list|(
name|qRed
argument_list|(
name|p1
argument_list|)
operator|-
name|qRed
argument_list|(
name|p2
argument_list|)
argument_list|)
operator|<=
name|fuzz
operator|&&
name|qAbs
argument_list|(
name|qGreen
argument_list|(
name|p1
argument_list|)
operator|-
name|qGreen
argument_list|(
name|p2
argument_list|)
argument_list|)
operator|<=
name|fuzz
operator|&&
name|qAbs
argument_list|(
name|qBlue
argument_list|(
name|p1
argument_list|)
operator|-
name|qBlue
argument_list|(
name|p2
argument_list|)
argument_list|)
operator|<=
name|fuzz
operator|&&
name|qAbs
argument_list|(
name|qAlpha
argument_list|(
name|p1
argument_list|)
operator|-
name|qAlpha
argument_list|(
name|p2
argument_list|)
argument_list|)
operator|<=
name|fuzz
decl_stmt|;
name|QVERIFY
argument_list|(
name|pixelMatches
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|toWinHICON_data
name|void
name|tst_QPixmap
operator|::
name|toWinHICON_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"image"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"width"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"height"
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|prefix
init|=
name|QLatin1String
argument_list|(
name|SRCDIR
argument_list|)
operator|+
literal|"/convertFromToHICON"
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"32bpp_16x16"
argument_list|)
operator|<<
name|prefix
operator|+
name|QLatin1String
argument_list|(
literal|"/icon_32bpp"
argument_list|)
operator|<<
literal|16
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"32bpp_32x32"
argument_list|)
operator|<<
name|prefix
operator|+
name|QLatin1String
argument_list|(
literal|"/icon_32bpp"
argument_list|)
operator|<<
literal|32
operator|<<
literal|32
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"32bpp_48x48"
argument_list|)
operator|<<
name|prefix
operator|+
name|QLatin1String
argument_list|(
literal|"/icon_32bpp"
argument_list|)
operator|<<
literal|48
operator|<<
literal|48
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"32bpp_256x256"
argument_list|)
operator|<<
name|prefix
operator|+
name|QLatin1String
argument_list|(
literal|"/icon_32bpp"
argument_list|)
operator|<<
literal|256
operator|<<
literal|256
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8bpp_16x16"
argument_list|)
operator|<<
name|prefix
operator|+
name|QLatin1String
argument_list|(
literal|"/icon_8bpp"
argument_list|)
operator|<<
literal|16
operator|<<
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8bpp_32x32"
argument_list|)
operator|<<
name|prefix
operator|+
name|QLatin1String
argument_list|(
literal|"/icon_8bpp"
argument_list|)
operator|<<
literal|32
operator|<<
literal|32
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8bpp_48x48"
argument_list|)
operator|<<
name|prefix
operator|+
name|QLatin1String
argument_list|(
literal|"/icon_8bpp"
argument_list|)
operator|<<
literal|48
operator|<<
literal|48
expr_stmt|;
block|}
DECL|function|toWinHICON
name|void
name|tst_QPixmap
operator|::
name|toWinHICON
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|QSKIP
argument_list|(
literal|"Test shall be enabled for Windows CE shortly."
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QFETCH
argument_list|(
name|int
argument_list|,
name|width
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|image
argument_list|)
expr_stmt|;
name|QPixmap
name|empty
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
decl_stmt|;
name|empty
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|HDC
name|display_dc
init|=
name|GetDC
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|HDC
name|bitmap_dc
init|=
name|CreateCompatibleDC
argument_list|(
name|display_dc
argument_list|)
decl_stmt|;
name|HBITMAP
name|bitmap
init|=
name|empty
operator|.
name|toWinHBITMAP
argument_list|(
name|QPixmap
operator|::
name|Alpha
argument_list|)
decl_stmt|;
name|SelectObject
argument_list|(
name|bitmap_dc
argument_list|,
name|bitmap
argument_list|)
expr_stmt|;
name|QImage
name|imageFromFile
argument_list|(
name|image
operator|+
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|"_%1x%2.png"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|width
argument_list|)
operator|.
name|arg
argument_list|(
name|height
argument_list|)
argument_list|)
decl_stmt|;
name|imageFromFile
operator|=
name|imageFromFile
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
name|HICON
name|icon
init|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|imageFromFile
argument_list|)
operator|.
name|toWinHICON
argument_list|()
decl_stmt|;
name|DrawIconEx
argument_list|(
name|bitmap_dc
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|icon
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|DI_NORMAL
argument_list|)
expr_stmt|;
name|DestroyIcon
argument_list|(
name|icon
argument_list|)
expr_stmt|;
name|DeleteDC
argument_list|(
name|bitmap_dc
argument_list|)
expr_stmt|;
name|QImage
name|imageFromHICON
init|=
name|QPixmap
operator|::
name|fromWinHBITMAP
argument_list|(
name|bitmap
argument_list|,
name|QPixmap
operator|::
name|Alpha
argument_list|)
operator|.
name|toImage
argument_list|()
decl_stmt|;
name|ReleaseDC
argument_list|(
literal|0
argument_list|,
name|display_dc
argument_list|)
expr_stmt|;
comment|// fuzzy comparison must be used, as the pixel values change slightly during conversion
comment|// between QImage::Format_ARGB32 and QImage::Format_ARGB32_Premultiplied, or elsewhere
comment|// QVERIFY(imageFromHICON == imageFromFile);
name|compareImages
argument_list|(
name|imageFromHICON
argument_list|,
name|imageFromFile
argument_list|)
expr_stmt|;
block|}
DECL|function|fromWinHICON_data
name|void
name|tst_QPixmap
operator|::
name|fromWinHICON_data
parameter_list|()
block|{
name|toWinHICON_data
argument_list|()
expr_stmt|;
block|}
DECL|function|fromWinHICON
name|void
name|tst_QPixmap
operator|::
name|fromWinHICON
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|QSKIP
argument_list|(
literal|"Test shall be enabled for Windows CE shortly."
argument_list|)
expr_stmt|;
else|#
directive|else
name|QFETCH
argument_list|(
name|int
argument_list|,
name|width
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|image
argument_list|)
expr_stmt|;
name|HICON
name|icon
init|=
operator|(
name|HICON
operator|)
name|LoadImage
argument_list|(
literal|0
argument_list|,
operator|(
name|wchar_t
operator|*
operator|)
operator|(
name|image
operator|+
name|QLatin1String
argument_list|(
literal|".ico"
argument_list|)
operator|)
operator|.
name|utf16
argument_list|()
argument_list|,
name|IMAGE_ICON
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|LR_LOADFROMFILE
argument_list|)
decl_stmt|;
name|QImage
name|imageFromHICON
init|=
name|QPixmap
operator|::
name|fromWinHICON
argument_list|(
name|icon
argument_list|)
operator|.
name|toImage
argument_list|()
decl_stmt|;
name|DestroyIcon
argument_list|(
name|icon
argument_list|)
expr_stmt|;
name|QImage
name|imageFromFile
argument_list|(
name|image
operator|+
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|"_%1x%2.png"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|width
argument_list|)
operator|.
name|arg
argument_list|(
name|height
argument_list|)
argument_list|)
decl_stmt|;
name|imageFromFile
operator|=
name|imageFromFile
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
comment|// fuzzy comparison must be used, as the pixel values change slightly during conversion
comment|// between QImage::Format_ARGB32 and QImage::Format_ARGB32_Premultiplied, or elsewhere
comment|// QVERIFY(imageFromHICON == imageFromFile);
name|compareImages
argument_list|(
name|imageFromHICON
argument_list|,
name|imageFromFile
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
endif|#
directive|endif
comment|// Q_WS_WIN
DECL|function|onlyNullPixmapsOutsideGuiThread
name|void
name|tst_QPixmap
operator|::
name|onlyNullPixmapsOutsideGuiThread
parameter_list|()
block|{
class|class
name|Thread
super|:
specifier|public
name|QThread
block|{
public|public:
name|void
name|run
parameter_list|()
block|{
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QPixmap: It is not safe to use pixmaps outside the GUI thread"
argument_list|)
expr_stmt|;
name|QPixmap
name|pixmap
decl_stmt|;
name|QVERIFY
argument_list|(
name|pixmap
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QPixmap: It is not safe to use pixmaps outside the GUI thread"
argument_list|)
expr_stmt|;
name|QPixmap
name|pixmap1
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|pixmap1
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QPixmap: It is not safe to use pixmaps outside the GUI thread"
argument_list|)
expr_stmt|;
name|QPixmap
name|pixmap2
argument_list|(
name|pixmap1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|pixmap2
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
class|;
if|if
condition|(
name|QGuiApplicationPrivate
operator|::
name|platform_integration
operator|->
name|hasCapability
argument_list|(
name|QPlatformIntegration
operator|::
name|ThreadedPixmaps
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"This platform supports threaded pixmaps."
argument_list|)
expr_stmt|;
name|Thread
name|thread
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|thread
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
DECL|function|refUnref
name|void
name|tst_QPixmap
operator|::
name|refUnref
parameter_list|()
block|{
comment|// Simple ref/unref
block|{
name|QPixmap
name|p
decl_stmt|;
block|}
block|{
name|QBitmap
name|b
decl_stmt|;
block|}
comment|// Get a copy of a pixmap that goes out of scope
block|{
name|QPixmap
name|b
decl_stmt|;
block|{
name|QPixmap
name|a
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|a
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|color0
argument_list|)
expr_stmt|;
name|b
operator|=
name|a
expr_stmt|;
block|}
block|}
block|{
name|QBitmap
name|mask
decl_stmt|;
block|{
name|QBitmap
name|bitmap
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|bitmap
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|color1
argument_list|)
expr_stmt|;
name|mask
operator|=
name|bitmap
operator|.
name|mask
argument_list|()
expr_stmt|;
block|}
name|mask
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|color0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|copy
name|void
name|tst_QPixmap
operator|::
name|copy
parameter_list|()
block|{
name|QPixmap
name|src
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|)
decl_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|src
argument_list|)
decl_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
block|}
name|QPixmap
name|dest
init|=
name|src
operator|.
name|copy
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|QPixmap
name|expected
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|expected
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|lenientCompare
argument_list|(
name|dest
argument_list|,
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|QPixmap
name|trans
decl_stmt|;
name|trans
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|QPixmap
name|transCopy
init|=
name|trans
operator|.
name|copy
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|pixmapsAreEqual
argument_list|(
operator|&
name|trans
argument_list|,
operator|&
name|transCopy
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|depthOfNullObjects
name|void
name|tst_QPixmap
operator|::
name|depthOfNullObjects
parameter_list|()
block|{
name|QBitmap
name|b1
decl_stmt|;
name|QVERIFY
argument_list|(
name|b1
operator|.
name|depth
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QPixmap
name|p4
decl_stmt|;
name|QVERIFY
argument_list|(
name|p4
operator|.
name|depth
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|function|transformed
name|void
name|tst_QPixmap
operator|::
name|transformed
parameter_list|()
block|{
name|QPixmap
name|p1
argument_list|(
literal|20
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|p1
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|p1
argument_list|)
decl_stmt|;
name|p
operator|.
name|drawRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|p1
operator|.
name|width
argument_list|()
operator|-
literal|1
argument_list|,
name|p1
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|QPixmap
name|p2
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
decl_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|p2
argument_list|)
decl_stmt|;
name|p
operator|.
name|rotate
argument_list|(
literal|90
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
literal|0
argument_list|,
operator|-
name|p1
operator|.
name|height
argument_list|()
argument_list|,
name|p1
argument_list|)
expr_stmt|;
block|}
name|QPixmap
name|p3
argument_list|(
literal|20
argument_list|,
literal|10
argument_list|)
decl_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|p3
argument_list|)
decl_stmt|;
name|p
operator|.
name|rotate
argument_list|(
literal|180
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
operator|-
name|p1
operator|.
name|width
argument_list|()
argument_list|,
operator|-
name|p1
operator|.
name|height
argument_list|()
argument_list|,
name|p1
argument_list|)
expr_stmt|;
block|}
name|QPixmap
name|p4
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
decl_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|p4
argument_list|)
decl_stmt|;
name|p
operator|.
name|rotate
argument_list|(
literal|270
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
operator|-
name|p1
operator|.
name|width
argument_list|()
argument_list|,
literal|0
argument_list|,
name|p1
argument_list|)
expr_stmt|;
block|}
name|QPixmap
name|p1_90
init|=
name|p1
operator|.
name|transformed
argument_list|(
name|QTransform
argument_list|()
operator|.
name|rotate
argument_list|(
literal|90
argument_list|)
argument_list|)
decl_stmt|;
name|QPixmap
name|p1_180
init|=
name|p1
operator|.
name|transformed
argument_list|(
name|QTransform
argument_list|()
operator|.
name|rotate
argument_list|(
literal|180
argument_list|)
argument_list|)
decl_stmt|;
name|QPixmap
name|p1_270
init|=
name|p1
operator|.
name|transformed
argument_list|(
name|QTransform
argument_list|()
operator|.
name|rotate
argument_list|(
literal|270
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|lenientCompare
argument_list|(
name|p1_90
argument_list|,
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|lenientCompare
argument_list|(
name|p1_180
argument_list|,
name|p3
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|lenientCompare
argument_list|(
name|p1_270
argument_list|,
name|p4
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|transformed2
name|void
name|tst_QPixmap
operator|::
name|transformed2
parameter_list|()
block|{
name|QPixmap
name|pm
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|pm
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|pm
argument_list|)
decl_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
name|QBrush
argument_list|(
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|QTransform
name|transform
decl_stmt|;
name|transform
operator|.
name|rotate
argument_list|(
operator|-
literal|90
argument_list|)
expr_stmt|;
name|transform
operator|.
name|scale
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QPixmap
name|actual
init|=
name|pm
operator|.
name|transformed
argument_list|(
name|transform
argument_list|)
decl_stmt|;
name|QPixmap
name|expected
argument_list|(
literal|9
argument_list|,
literal|9
argument_list|)
decl_stmt|;
name|expected
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|p
operator|.
name|begin
argument_list|(
operator|&
name|expected
argument_list|)
expr_stmt|;
name|p
operator|.
name|setBrush
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawRect
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawRect
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawRect
argument_list|(
literal|6
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawRect
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|lenientCompare
argument_list|(
name|actual
argument_list|,
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|fromImage_crash
name|void
name|tst_QPixmap
operator|::
name|fromImage_crash
parameter_list|()
block|{
name|QImage
modifier|*
name|img
init|=
operator|new
name|QImage
argument_list|(
literal|64
argument_list|,
literal|64
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|QPixmap
name|pm
init|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
operator|*
name|img
argument_list|)
decl_stmt|;
name|QPainter
name|painter
argument_list|(
operator|&
name|pm
argument_list|)
decl_stmt|;
operator|delete
name|img
expr_stmt|;
block|}
comment|//This is testing QPlatformPixmap::createCompatiblePlatformPixmap - see QTBUG-5977
DECL|function|splash_crash
name|void
name|tst_QPixmap
operator|::
name|splash_crash
parameter_list|()
block|{
name|QPixmap
name|pix
decl_stmt|;
name|pix
operator|=
name|QPixmap
argument_list|(
literal|":/images/designer.png"
argument_list|)
expr_stmt|;
name|QSplashScreen
name|splash
argument_list|(
name|pix
argument_list|)
decl_stmt|;
name|splash
operator|.
name|show
argument_list|()
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|splash
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|function|fromData
name|void
name|tst_QPixmap
operator|::
name|fromData
parameter_list|()
block|{
name|unsigned
name|char
name|bits
index|[]
init|=
block|{
literal|0xaa
block|,
literal|0x55
block|}
decl_stmt|;
name|QBitmap
name|bm
init|=
name|QBitmap
operator|::
name|fromData
argument_list|(
name|QSize
argument_list|(
literal|8
argument_list|,
literal|2
argument_list|)
argument_list|,
name|bits
argument_list|)
decl_stmt|;
name|QImage
name|img
init|=
name|bm
operator|.
name|toImage
argument_list|()
decl_stmt|;
name|QSet
argument_list|<
name|QRgb
argument_list|>
name|colors
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|img
operator|.
name|height
argument_list|()
condition|;
operator|++
name|y
control|)
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|img
operator|.
name|width
argument_list|()
condition|;
operator|++
name|x
control|)
name|colors
operator|<<
name|img
operator|.
name|pixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|colors
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QRgb
argument_list|(
literal|0xffffffff
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QRgb
argument_list|(
literal|0xff000000
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|loadFromDataNullValues
name|void
name|tst_QPixmap
operator|::
name|loadFromDataNullValues
parameter_list|()
block|{
block|{
name|QPixmap
name|pixmap
decl_stmt|;
name|pixmap
operator|.
name|loadFromData
argument_list|(
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|pixmap
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QPixmap
name|pixmap
decl_stmt|;
name|pixmap
operator|.
name|loadFromData
argument_list|(
literal|0
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|pixmap
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QPixmap
name|pixmap
decl_stmt|;
specifier|const
name|uchar
name|bla
index|[]
init|=
literal|"bla"
decl_stmt|;
name|pixmap
operator|.
name|loadFromData
argument_list|(
name|bla
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|pixmap
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|loadFromDataImage_data
name|void
name|tst_QPixmap
operator|::
name|loadFromDataImage_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"imagePath"
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|prefix
init|=
name|QLatin1String
argument_list|(
name|SRCDIR
argument_list|)
operator|+
literal|"/loadFromData"
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"designer_argb32.png"
argument_list|)
operator|<<
name|prefix
operator|+
literal|"/designer_argb32.png"
expr_stmt|;
comment|// When no extension is provided we try all extensions that has been registered by image providers
name|QTest
operator|::
name|newRow
argument_list|(
literal|"designer_argb32"
argument_list|)
operator|<<
name|prefix
operator|+
literal|"/designer_argb32.png"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"designer_indexed8_no_alpha.png"
argument_list|)
operator|<<
name|prefix
operator|+
literal|"/designer_indexed8_no_alpha.png"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"designer_indexed8_with_alpha.png"
argument_list|)
operator|<<
name|prefix
operator|+
literal|"/designer_indexed8_with_alpha.png"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"designer_rgb32.png"
argument_list|)
operator|<<
name|prefix
operator|+
literal|"/designer_rgb32.png"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"designer_indexed8_no_alpha.gif"
argument_list|)
operator|<<
name|prefix
operator|+
literal|"/designer_indexed8_no_alpha.gif"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"designer_indexed8_with_alpha.gif"
argument_list|)
operator|<<
name|prefix
operator|+
literal|"/designer_indexed8_with_alpha.gif"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"designer_rgb32.jpg"
argument_list|)
operator|<<
name|prefix
operator|+
literal|"/designer_rgb32.jpg"
expr_stmt|;
block|}
DECL|function|loadFromDataImage
name|void
name|tst_QPixmap
operator|::
name|loadFromDataImage
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|imagePath
argument_list|)
expr_stmt|;
name|QImage
name|imageRef
argument_list|(
name|imagePath
argument_list|)
decl_stmt|;
name|QPixmap
name|pixmapWithCopy
init|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|imageRef
argument_list|)
decl_stmt|;
name|QFile
name|file
argument_list|(
name|imagePath
argument_list|)
decl_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QByteArray
name|rawData
init|=
name|file
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|QPixmap
name|directLoadingPixmap
decl_stmt|;
name|directLoadingPixmap
operator|.
name|loadFromData
argument_list|(
name|rawData
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|pixmapsAreEqual
argument_list|(
operator|&
name|pixmapWithCopy
argument_list|,
operator|&
name|directLoadingPixmap
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|fromImageReader_data
name|void
name|tst_QPixmap
operator|::
name|fromImageReader_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"imagePath"
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|prefix
init|=
name|QLatin1String
argument_list|(
name|SRCDIR
argument_list|)
operator|+
literal|"/loadFromData"
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"designer_argb32.png"
argument_list|)
operator|<<
name|prefix
operator|+
literal|"/designer_argb32.png"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"designer_indexed8_no_alpha.png"
argument_list|)
operator|<<
name|prefix
operator|+
literal|"/designer_indexed8_no_alpha.png"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"designer_indexed8_with_alpha.png"
argument_list|)
operator|<<
name|prefix
operator|+
literal|"/designer_indexed8_with_alpha.png"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"designer_rgb32.png"
argument_list|)
operator|<<
name|prefix
operator|+
literal|"/designer_rgb32.png"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"designer_indexed8_no_alpha.gif"
argument_list|)
operator|<<
name|prefix
operator|+
literal|"/designer_indexed8_no_alpha.gif"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"designer_indexed8_with_alpha.gif"
argument_list|)
operator|<<
name|prefix
operator|+
literal|"/designer_indexed8_with_alpha.gif"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"designer_rgb32.jpg"
argument_list|)
operator|<<
name|prefix
operator|+
literal|"/designer_rgb32.jpg"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"designer_indexed8_with_alpha_animated"
argument_list|)
operator|<<
name|prefix
operator|+
literal|"/designer_indexed8_with_alpha_animated.gif"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"designer_indexed8_with_alpha_animated"
argument_list|)
operator|<<
name|prefix
operator|+
literal|"/designer_indexed8_no_alpha_animated.gif"
expr_stmt|;
block|}
DECL|function|fromImageReader
name|void
name|tst_QPixmap
operator|::
name|fromImageReader
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|imagePath
argument_list|)
expr_stmt|;
name|QImage
name|imageRef
argument_list|(
name|imagePath
argument_list|)
decl_stmt|;
name|QPixmap
name|pixmapWithCopy
init|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|imageRef
argument_list|)
decl_stmt|;
name|QImageReader
name|imageReader
argument_list|(
name|imagePath
argument_list|)
decl_stmt|;
name|QPixmap
name|directLoadingPixmap
init|=
name|QPixmap
operator|::
name|fromImageReader
argument_list|(
operator|&
name|imageReader
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|pixmapsAreEqual
argument_list|(
operator|&
name|pixmapWithCopy
argument_list|,
operator|&
name|directLoadingPixmap
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|fromImageReaderAnimatedGif_data
name|void
name|tst_QPixmap
operator|::
name|fromImageReaderAnimatedGif_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"imagePath"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gif with alpha"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/designer_indexed8_with_alpha_animated.gif"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gif without alpha"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/designer_indexed8_no_alpha_animated.gif"
argument_list|)
expr_stmt|;
block|}
DECL|function|fromImageReaderAnimatedGif
name|void
name|tst_QPixmap
operator|::
name|fromImageReaderAnimatedGif
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|imagePath
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|prefix
init|=
name|QLatin1String
argument_list|(
name|SRCDIR
argument_list|)
operator|+
literal|"/loadFromData"
decl_stmt|;
specifier|const
name|QString
name|path
init|=
name|prefix
operator|+
name|imagePath
decl_stmt|;
name|QImageReader
name|referenceReader
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|QImageReader
name|pixmapReader
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|referenceReader
operator|.
name|canRead
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|referenceReader
operator|.
name|imageCount
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|referenceReader
operator|.
name|imageCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QImage
name|refImage
init|=
name|referenceReader
operator|.
name|read
argument_list|()
decl_stmt|;
name|QPixmap
name|refPixmap
init|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|refImage
argument_list|)
decl_stmt|;
name|QPixmap
name|directLoadingPixmap
init|=
name|QPixmap
operator|::
name|fromImageReader
argument_list|(
operator|&
name|pixmapReader
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|pixmapsAreEqual
argument_list|(
operator|&
name|refPixmap
argument_list|,
operator|&
name|directLoadingPixmap
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|task_246446
name|void
name|tst_QPixmap
operator|::
name|task_246446
parameter_list|()
block|{
comment|// This crashed without the bugfix in 246446
name|QPixmap
name|pm
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|pm
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
comment|// force 32-bit depth
name|QBitmap
name|bm
decl_stmt|;
name|pm
operator|.
name|setMask
argument_list|(
name|bm
argument_list|)
expr_stmt|;
block|{
name|QPixmap
name|pm2
argument_list|(
name|pm
argument_list|)
decl_stmt|;
block|}
name|QVERIFY
argument_list|(
name|pm
operator|.
name|width
argument_list|()
operator|==
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|pm
operator|.
name|mask
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|preserveDepth
name|void
name|tst_QPixmap
operator|::
name|preserveDepth
parameter_list|()
block|{
name|QPixmap
name|target
argument_list|(
literal|64
argument_list|,
literal|64
argument_list|)
decl_stmt|;
name|target
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|QPixmap
name|source
argument_list|(
literal|64
argument_list|,
literal|64
argument_list|)
decl_stmt|;
name|source
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|int
name|depth
init|=
name|source
operator|.
name|depth
argument_list|()
decl_stmt|;
name|QPainter
name|painter
argument_list|(
operator|&
name|target
argument_list|)
decl_stmt|;
name|painter
operator|.
name|setBrush
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawRect
argument_list|(
name|target
operator|.
name|rect
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|.
name|end
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|depth
argument_list|,
name|source
operator|.
name|depth
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|loadAsBitmapOrPixmap
name|void
name|tst_QPixmap
operator|::
name|loadAsBitmapOrPixmap
parameter_list|()
block|{
name|QImage
name|tmp
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|tmp
operator|.
name|save
argument_list|(
literal|"temp_image.png"
argument_list|)
expr_stmt|;
name|bool
name|ok
decl_stmt|;
comment|// Check that we can load the pixmap as a pixmap and that it then turns into a pixmap
name|QPixmap
name|pixmap
argument_list|(
literal|"temp_image.png"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|pixmap
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|pixmap
operator|.
name|depth
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|pixmap
operator|.
name|isQBitmap
argument_list|()
argument_list|)
expr_stmt|;
name|pixmap
operator|=
name|QPixmap
argument_list|()
expr_stmt|;
name|ok
operator|=
name|pixmap
operator|.
name|load
argument_list|(
literal|"temp_image.png"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|pixmap
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|pixmap
operator|.
name|depth
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|pixmap
operator|.
name|isQBitmap
argument_list|()
argument_list|)
expr_stmt|;
comment|//now we can try to load it without an extension
name|pixmap
operator|=
name|QPixmap
argument_list|()
expr_stmt|;
name|ok
operator|=
name|pixmap
operator|.
name|load
argument_list|(
literal|"temp_image"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|pixmap
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|pixmap
operator|.
name|depth
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|pixmap
operator|.
name|isQBitmap
argument_list|()
argument_list|)
expr_stmt|;
comment|// The do the same check for bitmaps..
name|QBitmap
name|bitmap
argument_list|(
literal|"temp_image.png"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|bitmap
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|bitmap
operator|.
name|depth
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|bitmap
operator|.
name|isQBitmap
argument_list|()
argument_list|)
expr_stmt|;
name|bitmap
operator|=
name|QBitmap
argument_list|()
expr_stmt|;
name|ok
operator|=
name|bitmap
operator|.
name|load
argument_list|(
literal|"temp_image.png"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|bitmap
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|bitmap
operator|.
name|depth
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|bitmap
operator|.
name|isQBitmap
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|toImageDeepCopy
name|void
name|tst_QPixmap
operator|::
name|toImageDeepCopy
parameter_list|()
block|{
name|QPixmap
name|pixmap
argument_list|(
literal|64
argument_list|,
literal|64
argument_list|)
decl_stmt|;
name|pixmap
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|QPainter
name|painter
argument_list|(
operator|&
name|pixmap
argument_list|)
decl_stmt|;
name|QImage
name|first
init|=
name|pixmap
operator|.
name|toImage
argument_list|()
decl_stmt|;
name|painter
operator|.
name|setBrush
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawEllipse
argument_list|(
name|pixmap
operator|.
name|rect
argument_list|()
argument_list|)
expr_stmt|;
name|QImage
name|second
init|=
name|pixmap
operator|.
name|toImage
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|first
operator|!=
name|second
argument_list|)
expr_stmt|;
block|}
DECL|function|scaled_QTBUG19157
name|void
name|tst_QPixmap
operator|::
name|scaled_QTBUG19157
parameter_list|()
block|{
name|QPixmap
name|foo
argument_list|(
literal|5000
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|foo
operator|=
name|foo
operator|.
name|scaled
argument_list|(
literal|1024
argument_list|,
literal|1024
argument_list|,
name|Qt
operator|::
name|KeepAspectRatio
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|foo
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QTEST_MAIN
argument_list|(
argument|tst_QPixmap
argument_list|)
end_function
begin_include
include|#
directive|include
file|"tst_qpixmap.moc"
end_include
end_unit
