begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qtextdocument.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qtextcursor.h>
end_include
begin_include
include|#
directive|include
file|<qtextdocumentfragment.h>
end_include
begin_include
include|#
directive|include
file|<qtextformat.h>
end_include
begin_include
include|#
directive|include
file|<qtextobject.h>
end_include
begin_include
include|#
directive|include
file|<qtexttable.h>
end_include
begin_include
include|#
directive|include
file|<qabstracttextdocumentlayout.h>
end_include
begin_include
include|#
directive|include
file|<qtextlist.h>
end_include
begin_include
include|#
directive|include
file|<qtextcodec.h>
end_include
begin_include
include|#
directive|include
file|<qguiapplication.h>
end_include
begin_include
include|#
directive|include
file|<qurl.h>
end_include
begin_include
include|#
directive|include
file|<qpainter.h>
end_include
begin_include
include|#
directive|include
file|<qfontmetrics.h>
end_include
begin_include
include|#
directive|include
file|<qimage.h>
end_include
begin_include
include|#
directive|include
file|<qtextlayout.h>
end_include
begin_include
include|#
directive|include
file|<QDomDocument>
end_include
begin_include
include|#
directive|include
file|"common.h"
end_include
begin_macro
name|QT_FORWARD_DECLARE_CLASS
argument_list|(
argument|QTextDocument
argument_list|)
end_macro
begin_class
DECL|class|tst_QTextDocument
class|class
name|tst_QTextDocument
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QTextDocument
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QTextDocument
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|isEmpty
parameter_list|()
function_decl|;
name|void
name|find_data
parameter_list|()
function_decl|;
name|void
name|find
parameter_list|()
function_decl|;
name|void
name|find2
parameter_list|()
function_decl|;
name|void
name|findWithRegExp_data
parameter_list|()
function_decl|;
name|void
name|findWithRegExp
parameter_list|()
function_decl|;
name|void
name|findMultiple
parameter_list|()
function_decl|;
name|void
name|basicIsModifiedChecks
parameter_list|()
function_decl|;
name|void
name|moreIsModified
parameter_list|()
function_decl|;
name|void
name|isModified2
parameter_list|()
function_decl|;
name|void
name|isModified3
parameter_list|()
function_decl|;
name|void
name|isModified4
parameter_list|()
function_decl|;
name|void
name|noundo_basicIsModifiedChecks
parameter_list|()
function_decl|;
name|void
name|noundo_moreIsModified
parameter_list|()
function_decl|;
name|void
name|noundo_isModified2
parameter_list|()
function_decl|;
name|void
name|noundo_isModified3
parameter_list|()
function_decl|;
name|void
name|mightBeRichText
parameter_list|()
function_decl|;
name|void
name|mightBeRichText_data
parameter_list|()
function_decl|;
name|void
name|task240325
parameter_list|()
function_decl|;
name|void
name|stylesheetFont_data
parameter_list|()
function_decl|;
name|void
name|stylesheetFont
parameter_list|()
function_decl|;
name|void
name|toHtml_data
parameter_list|()
function_decl|;
name|void
name|toHtml
parameter_list|()
function_decl|;
name|void
name|toHtml2
parameter_list|()
function_decl|;
name|void
name|setFragmentMarkersInHtmlExport
parameter_list|()
function_decl|;
name|void
name|toHtmlBodyBgColor
parameter_list|()
function_decl|;
name|void
name|toHtmlBodyBgColorRgba
parameter_list|()
function_decl|;
name|void
name|toHtmlBodyBgColorTransparent
parameter_list|()
function_decl|;
name|void
name|toHtmlRootFrameProperties
parameter_list|()
function_decl|;
name|void
name|toHtmlLineHeightProperties
parameter_list|()
function_decl|;
name|void
name|capitalizationHtmlInExport
parameter_list|()
function_decl|;
name|void
name|wordspacingHtmlExport
parameter_list|()
function_decl|;
name|void
name|cursorPositionChanged
parameter_list|()
function_decl|;
name|void
name|cursorPositionChangedOnSetText
parameter_list|()
function_decl|;
name|void
name|textFrameIterator
parameter_list|()
function_decl|;
name|void
name|codecForHtml
parameter_list|()
function_decl|;
name|void
name|markContentsDirty
parameter_list|()
function_decl|;
name|void
name|clonePreservesMetaInformation
parameter_list|()
function_decl|;
name|void
name|clonePreservesPageSize
parameter_list|()
function_decl|;
name|void
name|clonePreservesPageBreakPolicies
parameter_list|()
function_decl|;
name|void
name|clonePreservesDefaultFont
parameter_list|()
function_decl|;
name|void
name|clonePreservesRootFrameFormat
parameter_list|()
function_decl|;
name|void
name|clonePreservesResources
parameter_list|()
function_decl|;
name|void
name|clonePreservesUserStates
parameter_list|()
function_decl|;
name|void
name|clonePreservesIndentWidth
parameter_list|()
function_decl|;
name|void
name|blockCount
parameter_list|()
function_decl|;
name|void
name|defaultStyleSheet
parameter_list|()
function_decl|;
name|void
name|resolvedFontInEmptyFormat
parameter_list|()
function_decl|;
name|void
name|defaultRootFrameMargin
parameter_list|()
function_decl|;
name|void
name|clearResources
parameter_list|()
function_decl|;
name|void
name|setPlainText
parameter_list|()
function_decl|;
name|void
name|toPlainText
parameter_list|()
function_decl|;
name|void
name|deleteTextObjectsOnClear
parameter_list|()
function_decl|;
name|void
name|maximumBlockCount
parameter_list|()
function_decl|;
name|void
name|adjustSize
parameter_list|()
function_decl|;
name|void
name|initialUserData
parameter_list|()
function_decl|;
name|void
name|html_defaultFont
parameter_list|()
function_decl|;
name|void
name|blockCountChanged
parameter_list|()
function_decl|;
name|void
name|nonZeroDocumentLengthOnClear
parameter_list|()
function_decl|;
name|void
name|setTextPreservesUndoRedoEnabled
parameter_list|()
function_decl|;
name|void
name|firstLast
parameter_list|()
function_decl|;
name|void
name|backgroundImage_toHtml
parameter_list|()
function_decl|;
name|void
name|backgroundImage_toHtml2
parameter_list|()
function_decl|;
name|void
name|backgroundImage_clone
parameter_list|()
function_decl|;
name|void
name|backgroundImage_copy
parameter_list|()
function_decl|;
name|void
name|documentCleanup
parameter_list|()
function_decl|;
name|void
name|characterAt
parameter_list|()
function_decl|;
name|void
name|revisions
parameter_list|()
function_decl|;
name|void
name|revisionWithUndoCompressionAndUndo
parameter_list|()
function_decl|;
name|void
name|testUndoCommandAdded
parameter_list|()
function_decl|;
name|void
name|testUndoBlocks
parameter_list|()
function_decl|;
name|void
name|receiveCursorPositionChangedAfterContentsChange
parameter_list|()
function_decl|;
name|void
name|copiedFontSize
parameter_list|()
function_decl|;
name|void
name|QTBUG25778_pixelSizeFromHtml
parameter_list|()
function_decl|;
name|void
name|htmlExportImportBlockCount
parameter_list|()
function_decl|;
name|void
name|QTBUG27354_spaceAndSoftSpace
parameter_list|()
function_decl|;
name|void
name|baseUrl_data
parameter_list|()
function_decl|;
name|void
name|baseUrl
parameter_list|()
function_decl|;
name|void
name|QTBUG28998_linkColor
parameter_list|()
function_decl|;
private|private:
name|void
name|backgroundImage_checkExpectedHtml
parameter_list|(
specifier|const
name|QTextDocument
modifier|&
name|doc
parameter_list|)
function_decl|;
DECL|member|doc
name|QTextDocument
modifier|*
name|doc
decl_stmt|;
DECL|member|cursor
name|QTextCursor
name|cursor
decl_stmt|;
DECL|member|defaultFont
name|QFont
name|defaultFont
decl_stmt|;
DECL|member|htmlHead
name|QString
name|htmlHead
decl_stmt|;
DECL|member|htmlTail
name|QString
name|htmlTail
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|MyAbstractTextDocumentLayout
class|class
name|MyAbstractTextDocumentLayout
super|:
specifier|public
name|QAbstractTextDocumentLayout
block|{
public|public:
DECL|function|MyAbstractTextDocumentLayout
name|MyAbstractTextDocumentLayout
parameter_list|(
name|QTextDocument
modifier|*
name|doc
parameter_list|)
member_init_list|:
name|QAbstractTextDocumentLayout
argument_list|(
name|doc
argument_list|)
block|{}
DECL|function|draw
name|void
name|draw
parameter_list|(
name|QPainter
modifier|*
parameter_list|,
specifier|const
name|PaintContext
modifier|&
parameter_list|)
block|{}
DECL|function|hitTest
name|int
name|hitTest
parameter_list|(
specifier|const
name|QPointF
modifier|&
parameter_list|,
name|Qt
operator|::
name|HitTestAccuracy
parameter_list|)
specifier|const
block|{
return|return
literal|0
return|;
block|}
DECL|function|pageCount
name|int
name|pageCount
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
DECL|function|documentSize
name|QSizeF
name|documentSize
parameter_list|()
specifier|const
block|{
return|return
name|QSizeF
argument_list|()
return|;
block|}
DECL|function|frameBoundingRect
name|QRectF
name|frameBoundingRect
parameter_list|(
name|QTextFrame
modifier|*
parameter_list|)
specifier|const
block|{
return|return
name|QRectF
argument_list|()
return|;
block|}
DECL|function|blockBoundingRect
name|QRectF
name|blockBoundingRect
parameter_list|(
specifier|const
name|QTextBlock
modifier|&
parameter_list|)
specifier|const
block|{
return|return
name|QRectF
argument_list|()
return|;
block|}
DECL|function|documentChanged
name|void
name|documentChanged
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
block|{}
block|}
class|;
end_class
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QTextDocument
operator|::
name|getSetCheck
parameter_list|()
block|{
name|QTextDocument
name|obj1
decl_stmt|;
comment|// QAbstractTextDocumentLayout * QTextDocument::documentLayout()
comment|// void QTextDocument::setDocumentLayout(QAbstractTextDocumentLayout *)
name|QPointer
argument_list|<
name|MyAbstractTextDocumentLayout
argument_list|>
name|var1
init|=
operator|new
name|MyAbstractTextDocumentLayout
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|obj1
operator|.
name|setDocumentLayout
argument_list|(
name|var1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
name|QAbstractTextDocumentLayout
operator|*
argument_list|>
argument_list|(
name|var1
argument_list|)
argument_list|,
name|obj1
operator|.
name|documentLayout
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setDocumentLayout
argument_list|(
operator|(
name|QAbstractTextDocumentLayout
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|var1
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|obj1
operator|.
name|documentLayout
argument_list|()
argument_list|)
expr_stmt|;
comment|// bool QTextDocument::useDesignMetrics()
comment|// void QTextDocument::setUseDesignMetrics(bool)
name|obj1
operator|.
name|setUseDesignMetrics
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|useDesignMetrics
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setUseDesignMetrics
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|useDesignMetrics
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|tst_QTextDocument
name|tst_QTextDocument
operator|::
name|tst_QTextDocument
parameter_list|()
block|{
name|QImage
name|img
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|img
operator|.
name|save
argument_list|(
literal|"foo.png"
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~tst_QTextDocument
name|tst_QTextDocument
operator|::
name|~
name|tst_QTextDocument
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|init
name|void
name|tst_QTextDocument
operator|::
name|init
parameter_list|()
block|{
name|doc
operator|=
operator|new
name|QTextDocument
expr_stmt|;
name|cursor
operator|=
name|QTextCursor
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|defaultFont
operator|=
name|QFont
argument_list|()
expr_stmt|;
name|htmlHead
operator|=
name|QString
argument_list|(
literal|"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" "
literal|"\"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
literal|"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
literal|"p, li { white-space: pre-wrap; }\n"
literal|"</style></head>"
literal|"<body style=\" font-family:'%1'; font-size:%2pt; font-weight:%3; font-style:%4;\">\n"
argument_list|)
expr_stmt|;
name|htmlHead
operator|=
name|htmlHead
operator|.
name|arg
argument_list|(
name|defaultFont
operator|.
name|family
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|defaultFont
operator|.
name|pointSizeF
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|defaultFont
operator|.
name|weight
argument_list|()
operator|*
literal|8
argument_list|)
operator|.
name|arg
argument_list|(
operator|(
name|defaultFont
operator|.
name|italic
argument_list|()
condition|?
literal|"italic"
else|:
literal|"normal"
operator|)
argument_list|)
expr_stmt|;
name|htmlTail
operator|=
name|QString
argument_list|(
literal|"</body></html>"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QTextDocument
operator|::
name|cleanup
parameter_list|()
block|{
name|cursor
operator|=
name|QTextCursor
argument_list|()
expr_stmt|;
operator|delete
name|doc
expr_stmt|;
name|doc
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QTextDocument
operator|::
name|cleanupTestCase
parameter_list|()
block|{
name|QFile
operator|::
name|remove
argument_list|(
name|QLatin1String
argument_list|(
literal|"foo.png"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isEmpty
name|void
name|tst_QTextDocument
operator|::
name|isEmpty
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|doc
operator|->
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|find_data
name|void
name|tst_QTextDocument
operator|::
name|find_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"haystack"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"needle"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"flags"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"from"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"anchor"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"position"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
literal|"Hello World"
operator|<<
literal|"World"
operator|<<
name|int
argument_list|(
name|QTextDocument
operator|::
name|FindCaseSensitively
argument_list|)
operator|<<
literal|0
operator|<<
literal|6
operator|<<
literal|11
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Hello"
argument_list|)
operator|+
name|QString
argument_list|(
name|QChar
operator|::
name|ParagraphSeparator
argument_list|)
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"World"
argument_list|)
operator|<<
literal|"World"
operator|<<
name|int
argument_list|(
name|QTextDocument
operator|::
name|FindCaseSensitively
argument_list|)
operator|<<
literal|1
operator|<<
literal|6
operator|<<
literal|11
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Hello"
argument_list|)
operator|+
name|QString
argument_list|(
name|QChar
operator|::
name|ParagraphSeparator
argument_list|)
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"World"
argument_list|)
operator|<<
literal|"Hello"
operator|<<
name|int
argument_list|(
name|QTextDocument
operator|::
name|FindCaseSensitively
operator||
name|QTextDocument
operator|::
name|FindBackward
argument_list|)
operator|<<
literal|10
operator|<<
literal|0
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4wholewords"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Hello Blah World"
argument_list|)
operator|<<
literal|"Blah"
operator|<<
name|int
argument_list|(
name|QTextDocument
operator|::
name|FindWholeWords
argument_list|)
operator|<<
literal|0
operator|<<
literal|6
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5wholewords"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"HelloBlahWorld"
argument_list|)
operator|<<
literal|"Blah"
operator|<<
name|int
argument_list|(
name|QTextDocument
operator|::
name|FindWholeWords
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6wholewords"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"HelloBlahWorld Blah Hah"
argument_list|)
operator|<<
literal|"Blah"
operator|<<
name|int
argument_list|(
name|QTextDocument
operator|::
name|FindWholeWords
argument_list|)
operator|<<
literal|0
operator|<<
literal|15
operator|<<
literal|19
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"7wholewords"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"HelloBlahWorld Blah Hah"
argument_list|)
operator|<<
literal|"Blah"
operator|<<
name|int
argument_list|(
name|QTextDocument
operator|::
name|FindWholeWords
operator||
name|QTextDocument
operator|::
name|FindBackward
argument_list|)
operator|<<
literal|23
operator|<<
literal|15
operator|<<
literal|19
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8wholewords"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Hello: World\n"
argument_list|)
operator|<<
literal|"orld"
operator|<<
name|int
argument_list|(
name|QTextDocument
operator|::
name|FindWholeWords
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"across-paragraphs"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"First Parag\nSecond Parag with a lot more text"
argument_list|)
operator|<<
literal|"Parag"
operator|<<
name|int
argument_list|(
name|QTextDocument
operator|::
name|FindBackward
argument_list|)
operator|<<
literal|15
operator|<<
literal|6
operator|<<
literal|11
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nbsp"
argument_list|)
operator|<<
literal|"Hello"
operator|+
name|QString
argument_list|(
name|QChar
argument_list|(
name|QChar
operator|::
name|Nbsp
argument_list|)
argument_list|)
operator|+
literal|"World"
operator|<<
literal|" "
operator|<<
name|int
argument_list|(
name|QTextDocument
operator|::
name|FindCaseSensitively
argument_list|)
operator|<<
literal|0
operator|<<
literal|5
operator|<<
literal|6
expr_stmt|;
block|}
end_function
begin_function
DECL|function|find
name|void
name|tst_QTextDocument
operator|::
name|find
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|haystack
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|needle
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|from
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|anchor
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|haystack
argument_list|)
expr_stmt|;
name|cursor
operator|=
name|doc
operator|->
name|find
argument_list|(
name|needle
argument_list|,
name|from
argument_list|,
name|QTextDocument
operator|::
name|FindFlags
argument_list|(
name|flags
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|anchor
operator|!=
operator|-
literal|1
condition|)
block|{
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|anchor
argument_list|()
argument_list|,
name|anchor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
name|position
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//search using a regular expression
name|QRegExp
name|expr
argument_list|(
name|needle
argument_list|)
decl_stmt|;
name|expr
operator|.
name|setPatternSyntax
argument_list|(
name|QRegExp
operator|::
name|FixedString
argument_list|)
expr_stmt|;
name|QTextDocument
operator|::
name|FindFlags
name|flg
argument_list|(
name|flags
argument_list|)
decl_stmt|;
name|expr
operator|.
name|setCaseSensitivity
argument_list|(
operator|(
name|flg
operator|&
name|QTextDocument
operator|::
name|FindCaseSensitively
operator|)
condition|?
name|Qt
operator|::
name|CaseSensitive
else|:
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|cursor
operator|=
name|doc
operator|->
name|find
argument_list|(
name|expr
argument_list|,
name|from
argument_list|,
name|flg
argument_list|)
expr_stmt|;
if|if
condition|(
name|anchor
operator|!=
operator|-
literal|1
condition|)
block|{
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|anchor
argument_list|()
argument_list|,
name|anchor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
name|position
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|findWithRegExp_data
name|void
name|tst_QTextDocument
operator|::
name|findWithRegExp_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"haystack"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"needle"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"flags"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"from"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"anchor"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"position"
argument_list|)
expr_stmt|;
comment|// match integers 0 to 99
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
literal|"23"
operator|<<
literal|"^\\d\\d?$"
operator|<<
name|int
argument_list|(
name|QTextDocument
operator|::
name|FindCaseSensitively
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|2
expr_stmt|;
comment|// match ampersands but not&amp;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
literal|"His&amp; hers& theirs"
operator|<<
literal|"&(?!amp;)"
operator|<<
name|int
argument_list|(
name|QTextDocument
operator|::
name|FindCaseSensitively
argument_list|)
operator|<<
literal|0
operator|<<
literal|15
operator|<<
literal|16
expr_stmt|;
comment|//backward search
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"HelloBlahWorld Blah Hah"
argument_list|)
operator|<<
literal|"h"
operator|<<
name|int
argument_list|(
name|QTextDocument
operator|::
name|FindBackward
argument_list|)
operator|<<
literal|18
operator|<<
literal|8
operator|<<
literal|9
expr_stmt|;
block|}
end_function
begin_function
DECL|function|findWithRegExp
name|void
name|tst_QTextDocument
operator|::
name|findWithRegExp
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|haystack
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|needle
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|from
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|anchor
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|haystack
argument_list|)
expr_stmt|;
comment|//search using a regular expression
name|QRegExp
name|expr
argument_list|(
name|needle
argument_list|)
decl_stmt|;
name|QTextDocument
operator|::
name|FindFlags
name|flg
argument_list|(
name|flags
argument_list|)
decl_stmt|;
name|expr
operator|.
name|setCaseSensitivity
argument_list|(
operator|(
name|flg
operator|&
name|QTextDocument
operator|::
name|FindCaseSensitively
operator|)
condition|?
name|Qt
operator|::
name|CaseSensitive
else|:
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|cursor
operator|=
name|doc
operator|->
name|find
argument_list|(
name|expr
argument_list|,
name|from
argument_list|,
name|flg
argument_list|)
expr_stmt|;
if|if
condition|(
name|anchor
operator|!=
operator|-
literal|1
condition|)
block|{
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|anchor
argument_list|()
argument_list|,
name|anchor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
name|position
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|find2
name|void
name|tst_QTextDocument
operator|::
name|find2
parameter_list|()
block|{
name|doc
operator|->
name|setPlainText
argument_list|(
literal|"aaa"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|QTextCursor
name|hit
init|=
name|doc
operator|->
name|find
argument_list|(
literal|"a"
argument_list|,
name|cursor
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|hit
operator|.
name|position
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hit
operator|.
name|anchor
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|findMultiple
name|void
name|tst_QTextDocument
operator|::
name|findMultiple
parameter_list|()
block|{
specifier|const
name|QString
name|text
argument_list|(
literal|"foo bar baz foo bar baz"
argument_list|)
decl_stmt|;
name|doc
operator|->
name|setPlainText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|=
name|doc
operator|->
name|find
argument_list|(
literal|"bar"
argument_list|,
name|cursor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionStart
argument_list|()
argument_list|,
name|text
operator|.
name|indexOf
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionEnd
argument_list|()
argument_list|,
name|cursor
operator|.
name|selectionStart
argument_list|()
operator|+
literal|3
argument_list|)
expr_stmt|;
name|cursor
operator|=
name|doc
operator|->
name|find
argument_list|(
literal|"bar"
argument_list|,
name|cursor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionStart
argument_list|()
argument_list|,
name|text
operator|.
name|lastIndexOf
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionEnd
argument_list|()
argument_list|,
name|cursor
operator|.
name|selectionStart
argument_list|()
operator|+
literal|3
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|cursor
operator|=
name|doc
operator|->
name|find
argument_list|(
literal|"bar"
argument_list|,
name|cursor
argument_list|,
name|QTextDocument
operator|::
name|FindBackward
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionStart
argument_list|()
argument_list|,
name|text
operator|.
name|lastIndexOf
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionEnd
argument_list|()
argument_list|,
name|cursor
operator|.
name|selectionStart
argument_list|()
operator|+
literal|3
argument_list|)
expr_stmt|;
name|cursor
operator|=
name|doc
operator|->
name|find
argument_list|(
literal|"bar"
argument_list|,
name|cursor
argument_list|,
name|QTextDocument
operator|::
name|FindBackward
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionStart
argument_list|()
argument_list|,
name|text
operator|.
name|indexOf
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionEnd
argument_list|()
argument_list|,
name|cursor
operator|.
name|selectionStart
argument_list|()
operator|+
literal|3
argument_list|)
expr_stmt|;
name|QRegExp
name|expr
argument_list|(
literal|"bar"
argument_list|)
decl_stmt|;
name|expr
operator|.
name|setPatternSyntax
argument_list|(
name|QRegExp
operator|::
name|FixedString
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|cursor
operator|=
name|doc
operator|->
name|find
argument_list|(
name|expr
argument_list|,
name|cursor
argument_list|,
name|QTextDocument
operator|::
name|FindBackward
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionStart
argument_list|()
argument_list|,
name|text
operator|.
name|lastIndexOf
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionEnd
argument_list|()
argument_list|,
name|cursor
operator|.
name|selectionStart
argument_list|()
operator|+
literal|3
argument_list|)
expr_stmt|;
name|cursor
operator|=
name|doc
operator|->
name|find
argument_list|(
name|expr
argument_list|,
name|cursor
argument_list|,
name|QTextDocument
operator|::
name|FindBackward
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionStart
argument_list|()
argument_list|,
name|text
operator|.
name|indexOf
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionEnd
argument_list|()
argument_list|,
name|cursor
operator|.
name|selectionStart
argument_list|()
operator|+
literal|3
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|=
name|doc
operator|->
name|find
argument_list|(
name|expr
argument_list|,
name|cursor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionStart
argument_list|()
argument_list|,
name|text
operator|.
name|indexOf
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionEnd
argument_list|()
argument_list|,
name|cursor
operator|.
name|selectionStart
argument_list|()
operator|+
literal|3
argument_list|)
expr_stmt|;
name|cursor
operator|=
name|doc
operator|->
name|find
argument_list|(
name|expr
argument_list|,
name|cursor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionStart
argument_list|()
argument_list|,
name|text
operator|.
name|lastIndexOf
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionEnd
argument_list|()
argument_list|,
name|cursor
operator|.
name|selectionStart
argument_list|()
operator|+
literal|3
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|basicIsModifiedChecks
name|void
name|tst_QTextDocument
operator|::
name|basicIsModifiedChecks
parameter_list|()
block|{
name|QSignalSpy
name|spy
argument_list|(
name|doc
argument_list|,
name|SIGNAL
argument_list|(
name|modificationChanged
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|takeFirst
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|spy
operator|.
name|takeFirst
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|->
name|redo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|takeFirst
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|moreIsModified
name|void
name|tst_QTextDocument
operator|::
name|moreIsModified
parameter_list|()
block|{
name|QVERIFY
argument_list|(
operator|!
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isModified2
name|void
name|tst_QTextDocument
operator|::
name|isModified2
parameter_list|()
block|{
comment|// reported on qt4-preview-feedback
name|QVERIFY
argument_list|(
operator|!
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setModified
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isModified3
name|void
name|tst_QTextDocument
operator|::
name|isModified3
parameter_list|()
block|{
name|QVERIFY
argument_list|(
operator|!
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setUndoRedoEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setUndoRedoEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isModified4
name|void
name|tst_QTextDocument
operator|::
name|isModified4
parameter_list|()
block|{
name|QVERIFY
argument_list|(
operator|!
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"World"
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setModified
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Again"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|->
name|redo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|->
name|redo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
comment|//task 197769
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|noundo_basicIsModifiedChecks
name|void
name|tst_QTextDocument
operator|::
name|noundo_basicIsModifiedChecks
parameter_list|()
block|{
name|doc
operator|->
name|setUndoRedoEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
name|doc
argument_list|,
name|SIGNAL
argument_list|(
name|modificationChanged
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|takeFirst
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|doc
operator|->
name|redo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task240325
name|void
name|tst_QTextDocument
operator|::
name|task240325
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<html><img width=\"100\" height=\"100\" align=\"right\"/>Foobar Foobar Foobar Foobar</html>"
argument_list|)
expr_stmt|;
name|QImage
name|img
argument_list|(
literal|1000
argument_list|,
literal|7000
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|img
argument_list|)
decl_stmt|;
name|QFontMetrics
name|fm
argument_list|(
name|p
operator|.
name|font
argument_list|()
argument_list|)
decl_stmt|;
comment|// Set page size to contain image and one "Foobar"
name|doc
operator|->
name|setPageSize
argument_list|(
name|QSize
argument_list|(
literal|100
operator|+
name|fm
operator|.
name|width
argument_list|(
literal|"Foobar"
argument_list|)
operator|*
literal|2
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
comment|// Force layout
name|doc
operator|->
name|drawContents
argument_list|(
operator|&
name|p
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|QTextBlock
name|block
init|=
name|doc
operator|->
name|begin
argument_list|()
init|;
name|block
operator|!=
name|doc
operator|->
name|end
argument_list|()
condition|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
control|)
block|{
name|QTextLayout
modifier|*
name|layout
init|=
name|block
operator|.
name|layout
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|layout
operator|->
name|lineCount
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|lineIdx
init|=
literal|0
init|;
name|lineIdx
operator|<
name|layout
operator|->
name|lineCount
argument_list|()
condition|;
operator|++
name|lineIdx
control|)
block|{
name|QTextLine
name|line
init|=
name|layout
operator|->
name|lineAt
argument_list|(
name|lineIdx
argument_list|)
decl_stmt|;
name|QString
name|text
init|=
name|block
operator|.
name|text
argument_list|()
operator|.
name|mid
argument_list|(
name|line
operator|.
name|textStart
argument_list|()
argument_list|,
name|line
operator|.
name|textLength
argument_list|()
argument_list|)
operator|.
name|trimmed
argument_list|()
decl_stmt|;
comment|// Remove start token
if|if
condition|(
name|lineIdx
operator|==
literal|0
condition|)
name|text
operator|=
name|text
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|text
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Foobar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|stylesheetFont_data
name|void
name|tst_QTextDocument
operator|::
name|stylesheetFont_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"stylesheet"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QFont
argument_list|>
argument_list|(
literal|"font"
argument_list|)
expr_stmt|;
block|{
name|QFont
name|font
decl_stmt|;
name|font
operator|.
name|setBold
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|font
operator|.
name|setPixelSize
argument_list|(
literal|64
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Regular font specification"
argument_list|)
operator|<<
literal|"font-size: 64px; font-weight: bold;"
operator|<<
name|font
expr_stmt|;
block|}
block|{
name|QFont
name|font
decl_stmt|;
name|font
operator|.
name|setBold
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|font
operator|.
name|setPixelSize
argument_list|(
literal|64
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Shorthand font specification"
argument_list|)
operator|<<
literal|"font: normal bold 64px Arial;"
operator|<<
name|font
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|stylesheetFont
name|void
name|tst_QTextDocument
operator|::
name|stylesheetFont
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|stylesheet
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QFont
argument_list|,
name|font
argument_list|)
expr_stmt|;
name|QString
name|html
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"<html>"
literal|"<body>"
literal|"<div style=\"%1\">"
literal|"Foobar"
literal|"</div>"
literal|"</body>"
literal|"</html>"
argument_list|)
operator|.
name|arg
argument_list|(
name|stylesheet
argument_list|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
name|html
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// First and only block
name|QTextBlock
name|block
init|=
name|doc
operator|->
name|firstBlock
argument_list|()
decl_stmt|;
name|QString
name|text
init|=
name|block
operator|.
name|text
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|text
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Foobar"
argument_list|)
argument_list|)
expr_stmt|;
name|QFont
name|actualFont
init|=
name|block
operator|.
name|charFormat
argument_list|()
operator|.
name|font
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|actualFont
operator|.
name|bold
argument_list|()
argument_list|,
name|font
operator|.
name|bold
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|actualFont
operator|.
name|pixelSize
argument_list|()
argument_list|,
name|font
operator|.
name|pixelSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|noundo_moreIsModified
name|void
name|tst_QTextDocument
operator|::
name|noundo_moreIsModified
parameter_list|()
block|{
name|doc
operator|->
name|setUndoRedoEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|noundo_isModified2
name|void
name|tst_QTextDocument
operator|::
name|noundo_isModified2
parameter_list|()
block|{
comment|// reported on qt4-preview-feedback
name|QVERIFY
argument_list|(
operator|!
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setModified
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|noundo_isModified3
name|void
name|tst_QTextDocument
operator|::
name|noundo_isModified3
parameter_list|()
block|{
name|doc
operator|->
name|setUndoRedoEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mightBeRichText_data
name|void
name|tst_QTextDocument
operator|::
name|mightBeRichText_data
parameter_list|()
block|{
specifier|const
name|char
name|qtDocuHeader
index|[]
init|=
literal|"<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n"
literal|"<!DOCTYPE html\n"
literal|"    PUBLIC "
literal|"-//W3C//DTD XHTML 1.0 Strict//EN\" \"DTD/xhtml1-strict.dtd\">\n"
literal|"<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">"
decl_stmt|;
name|QVERIFY
argument_list|(
name|Qt
operator|::
name|mightBeRichText
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|qtDocuHeader
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"documentation-header"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n"
literal|"<!DOCTYPE html\n"
literal|"    PUBLIC "
literal|"-//W3C//DTD XHTML 1.0 Strict//EN\" \"DTD/xhtml1-strict.dtd\">\n"
literal|"<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"br-nospace"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Test<br/> new line"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"br-space"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Test<br /> new line"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"br-invalidspace"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Test<br/> new line"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid closing tag"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Test<br/ line"
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mightBeRichText
name|void
name|tst_QTextDocument
operator|::
name|mightBeRichText
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|result
operator|==
name|Qt
operator|::
name|mightBeRichText
argument_list|(
name|input
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QTextDocumentFragment
argument_list|)
end_macro
begin_define
DECL|macro|CREATE_DOC_AND_CURSOR
define|#
directive|define
name|CREATE_DOC_AND_CURSOR
parameter_list|()
define|\
value|QTextDocument doc; \         doc.setDefaultFont(defaultFont); \         QTextCursor cursor(&doc);
end_define
begin_function
DECL|function|toHtml_data
name|void
name|tst_QTextDocument
operator|::
name|toHtml_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QTextDocumentFragment
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedOutput"
argument_list|)
expr_stmt|;
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"simple"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p DEFAULTBLOCKSTYLE>Blah</p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"&<>"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"entities"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p DEFAULTBLOCKSTYLE>&amp;&lt;&gt;</p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setFontFamily
argument_list|(
literal|"Times"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"font-family"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p DEFAULTBLOCKSTYLE><span style=\" font-family:'Times';\">Blah</span></p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setFontFamily
argument_list|(
literal|"Foo's Family"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"font-family-with-quotes1"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p DEFAULTBLOCKSTYLE><span style=\" font-family:&quot;Foo's Family&quot;;\">Blah</span></p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setFontFamily
argument_list|(
literal|"Foo\"s Family"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"font-family-with-quotes2"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p DEFAULTBLOCKSTYLE><span style=\" font-family:'Foo&quot;s Family';\">Blah</span></p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextBlockFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setNonBreakableLines
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pre"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"EMPTYBLOCK"
argument_list|)
operator|+
name|QString
argument_list|(
literal|"<pre DEFAULTBLOCKSTYLE>Blah</pre>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setFontPointSize
argument_list|(
literal|40
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"font-size"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p DEFAULTBLOCKSTYLE><span style=\" font-size:40pt;\">Blah</span></p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setProperty
argument_list|(
name|QTextFormat
operator|::
name|FontSizeIncrement
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"logical-font-size"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p DEFAULTBLOCKSTYLE><span style=\" font-size:x-large;\">Blah</span></p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Foo"
argument_list|)
expr_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setFontPointSize
argument_list|(
literal|40
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|(
name|QTextBlockFormat
argument_list|()
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|clearProperty
argument_list|(
name|QTextFormat
operator|::
name|FontPointSize
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blub"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-font-size"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p DEFAULTBLOCKSTYLE>Foo</p>\n<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Blub</p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextBlockFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setLayoutDirection
argument_list|(
name|Qt
operator|::
name|RightToLeft
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rtl"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"EMPTYBLOCK"
argument_list|)
operator|+
name|QString
argument_list|(
literal|"<p dir='rtl' DEFAULTBLOCKSTYLE>Blah</p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextBlockFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignJustify
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blockalign"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"EMPTYBLOCK"
argument_list|)
operator|+
name|QString
argument_list|(
literal|"<p align=\"justify\" DEFAULTBLOCKSTYLE>Blah</p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextBlockFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignCenter
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blockalign2"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"EMPTYBLOCK"
argument_list|)
operator|+
name|QString
argument_list|(
literal|"<p align=\"center\" DEFAULTBLOCKSTYLE>Blah</p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextBlockFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignRight
operator||
name|Qt
operator|::
name|AlignAbsolute
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blockalign3"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"EMPTYBLOCK"
argument_list|)
operator|+
name|QString
argument_list|(
literal|"<p align=\"right\" DEFAULTBLOCKSTYLE>Blah</p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextBlockFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setBackground
argument_list|(
name|QColor
argument_list|(
literal|"#0000ff"
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bgcolor"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"EMPTYBLOCK"
argument_list|)
operator|+
name|QString
argument_list|(
literal|"<p OPENDEFAULTBLOCKSTYLE background-color:#0000ff;\">Blah</p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextBlockFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setBackground
argument_list|(
name|QColor
argument_list|(
literal|255
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|51
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bgcolor-rgba"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"EMPTYBLOCK"
argument_list|)
operator|+
name|QString
argument_list|(
literal|"<p OPENDEFAULTBLOCKSTYLE background-color:rgba(255,0,0,0.2);\">Blah</p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextBlockFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setBackground
argument_list|(
name|QColor
argument_list|(
literal|255
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bgcolor-transparent"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"EMPTYBLOCK"
argument_list|)
operator|+
name|QString
argument_list|(
literal|"<p OPENDEFAULTBLOCKSTYLE background-color:transparent;\">Blah</p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setFontWeight
argument_list|(
literal|40
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"font-weight"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p DEFAULTBLOCKSTYLE><span style=\" font-weight:320;\">Blah</span></p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setFontItalic
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"font-italic"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p DEFAULTBLOCKSTYLE><span style=\" font-style:italic;\">Blah</span></p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setFontUnderline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setFontOverline
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"text-decoration-1"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p DEFAULTBLOCKSTYLE><span style=\" text-decoration: underline;\">Blah</span></p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|QColor
argument_list|(
literal|"#00ff00"
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"color"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p DEFAULTBLOCKSTYLE><span style=\" color:#00ff00;\">Blah</span></p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|QColor
argument_list|(
literal|0
argument_list|,
literal|255
argument_list|,
literal|0
argument_list|,
literal|51
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"color-rgba"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p DEFAULTBLOCKSTYLE><span style=\" color:rgba(0,255,0,0.2);\">Blah</span></p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|QColor
argument_list|(
literal|0
argument_list|,
literal|255
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"color-transparent"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p DEFAULTBLOCKSTYLE><span style=\" color:transparent;\">Blah</span></p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setBackground
argument_list|(
name|QColor
argument_list|(
literal|"#00ff00"
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"span-bgcolor"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p DEFAULTBLOCKSTYLE><span style=\" background-color:#00ff00;\">Blah</span></p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setBackground
argument_list|(
name|QColor
argument_list|(
literal|0
argument_list|,
literal|255
argument_list|,
literal|0
argument_list|,
literal|51
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"span-bgcolor-rgba"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p DEFAULTBLOCKSTYLE><span style=\" background-color:rgba(0,255,0,0.2);\">Blah</span></p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setBackground
argument_list|(
name|QColor
argument_list|(
literal|0
argument_list|,
literal|255
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"span-bgcolor-transparent"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p DEFAULTBLOCKSTYLE><span style=\" background-color:transparent;\">Blah</span></p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setVerticalAlignment
argument_list|(
name|QTextCharFormat
operator|::
name|AlignSubScript
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"valign-sub"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p DEFAULTBLOCKSTYLE><span style=\" vertical-align:sub;\">Blah</span></p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setVerticalAlignment
argument_list|(
name|QTextCharFormat
operator|::
name|AlignSuperScript
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"valign-super"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p DEFAULTBLOCKSTYLE><span style=\" vertical-align:super;\">Blah</span></p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setAnchor
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setAnchorName
argument_list|(
literal|"blub"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"named anchor"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p DEFAULTBLOCKSTYLE><a name=\"blub\"></a>Blah</p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setAnchor
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setAnchorHref
argument_list|(
literal|"http://www.kde.org/"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"href anchor"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p DEFAULTBLOCKSTYLE><a href=\"http://www.kde.org/\">Blah</a></p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setAnchor
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setAnchorHref
argument_list|(
literal|"http://www.kde.org/?a=1&b=2"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"href anchor with&"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p DEFAULTBLOCKSTYLE><a href=\"http://www.kde.org/?a=1&amp;b=2\">Blah</a></p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setAnchor
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setAnchorHref
argument_list|(
literal|"http://www.kde.org/?a='&b=\""
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"href anchor with ' and \""
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p DEFAULTBLOCKSTYLE><a href=\"http://www.kde.org/?a='&amp;b=&quot;\">Blah</a></p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertTable
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"simpletable"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<table border=\"1\" cellspacing=\"2\">"
literal|"\n<tr>\n<td></td>\n<td></td></tr>"
literal|"\n<tr>\n<td></td>\n<td></td></tr>"
literal|"</table>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|insertTable
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|table
operator|->
name|mergeCells
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|table
operator|->
name|mergeCells
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"tablespans"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<table border=\"1\" cellspacing=\"2\">"
literal|"\n<tr>\n<td colspan=\"2\"></td>\n<td colspan=\"2\"></td></tr>"
literal|"</table>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextTableFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setBorder
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setCellSpacing
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setCellPadding
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setBackground
argument_list|(
name|QColor
argument_list|(
literal|"#ff00ff"
argument_list|)
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setWidth
argument_list|(
name|QTextLength
argument_list|(
name|QTextLength
operator|::
name|PercentageLength
argument_list|,
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignHCenter
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setPosition
argument_list|(
name|QTextFrameFormat
operator|::
name|FloatRight
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertTable
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"tableattrs"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<table border=\"1\" style=\" float: right;\" align=\"center\" width=\"50%\" cellspacing=\"3\" cellpadding=\"3\" bgcolor=\"#ff00ff\">"
literal|"\n<tr>\n<td></td>\n<td></td></tr>"
literal|"\n<tr>\n<td></td>\n<td></td></tr>"
literal|"</table>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextTableFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setBorder
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setCellSpacing
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setCellPadding
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setBackground
argument_list|(
name|QColor
argument_list|(
literal|"#ff00ff"
argument_list|)
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setWidth
argument_list|(
name|QTextLength
argument_list|(
name|QTextLength
operator|::
name|PercentageLength
argument_list|,
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignHCenter
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setPosition
argument_list|(
name|QTextFrameFormat
operator|::
name|FloatRight
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setLeftMargin
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setBottomMargin
argument_list|(
literal|35
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertTable
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"tableattrs2"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<table border=\"1\" style=\" float: right; margin-top:0px; margin-bottom:35px; margin-left:25px; margin-right:0px;\" align=\"center\" width=\"50%\" cellspacing=\"3\" cellpadding=\"3\" bgcolor=\"#ff00ff\">"
literal|"\n<tr>\n<td></td>\n<td></td></tr>"
literal|"\n<tr>\n<td></td>\n<td></td></tr>"
literal|"</table>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextTableFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setHeaderRowCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertTable
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"tableheader"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<table border=\"1\" cellspacing=\"2\">"
literal|"<thead>\n<tr>\n<td></td>\n<td></td></tr>"
literal|"\n<tr>\n<td></td>\n<td></td></tr></thead>"
literal|"\n<tr>\n<td></td>\n<td></td></tr>"
literal|"\n<tr>\n<td></td>\n<td></td></tr>"
literal|"</table>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|insertTable
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|QTextTable
modifier|*
name|subTable
init|=
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|insertTable
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|subTable
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|insertText
argument_list|(
literal|"Hey"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nestedtable"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<table border=\"1\" cellspacing=\"2\">"
literal|"\n<tr>\n<td></td>\n<td>\n<table border=\"1\" cellspacing=\"2\">\n<tr>\n<td>\n<p DEFAULTBLOCKSTYLE>Hey</p></td></tr></table></td></tr>"
literal|"\n<tr>\n<td></td>\n<td></td></tr>"
literal|"</table>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextTableFormat
name|fmt
decl_stmt|;
name|QVector
argument_list|<
name|QTextLength
argument_list|>
name|widths
decl_stmt|;
name|widths
operator|.
name|append
argument_list|(
name|QTextLength
argument_list|()
argument_list|)
expr_stmt|;
name|widths
operator|.
name|append
argument_list|(
name|QTextLength
argument_list|(
name|QTextLength
operator|::
name|PercentageLength
argument_list|,
literal|30
argument_list|)
argument_list|)
expr_stmt|;
name|widths
operator|.
name|append
argument_list|(
name|QTextLength
argument_list|(
name|QTextLength
operator|::
name|FixedLength
argument_list|,
literal|40
argument_list|)
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setColumnWidthConstraints
argument_list|(
name|widths
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertTable
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"colwidths"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<table border=\"1\" cellspacing=\"2\">"
literal|"\n<tr>\n<td></td>\n<td width=\"30%\"></td>\n<td width=\"40\"></td></tr>"
literal|"</table>"
argument_list|)
expr_stmt|;
block|}
comment|// ### rowspan/colspan tests, once texttable api for that is back again
comment|//
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|insertTable
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QTextCursor
name|cellCurs
init|=
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
decl_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setBackground
argument_list|(
name|QColor
argument_list|(
literal|"#ffffff"
argument_list|)
argument_list|)
expr_stmt|;
name|cellCurs
operator|.
name|mergeBlockCharFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"cellproperties"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<table border=\"1\" cellspacing=\"2\">"
literal|"\n<tr>\n<td bgcolor=\"#ffffff\"></td></tr>"
literal|"</table>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
comment|// ### fixme: use programmatic api as soon as we can create floats through it
specifier|const
name|char
name|html
index|[]
init|=
literal|"<html><body>Blah<img src=\"image.png\" width=\"10\" height=\"20\" style=\"float: right;\" />Blubb</body></html>"
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"image"
argument_list|)
operator|<<
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Blah<img src=\"image.png\" width=\"10\" height=\"20\" style=\"float: right;\" />Blubb</p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextImageFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setName
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setVerticalAlignment
argument_list|(
name|QTextCharFormat
operator|::
name|AlignMiddle
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertImage
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"image-align-middle"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p DEFAULTBLOCKSTYLE><img src=\"foo\" style=\"vertical-align: middle;\" /></p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextImageFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setName
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setVerticalAlignment
argument_list|(
name|QTextCharFormat
operator|::
name|AlignTop
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertImage
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"image-align-top"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p DEFAULTBLOCKSTYLE><img src=\"foo\" style=\"vertical-align: top;\" /></p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextImageFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setName
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertImage
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertImage
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2images"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p DEFAULTBLOCKSTYLE><img src=\"foo\" /><img src=\"foo\" /></p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QString
name|txt
init|=
name|QLatin1String
argument_list|(
literal|"Blah"
argument_list|)
decl_stmt|;
name|txt
operator|+=
name|QChar
operator|::
name|LineSeparator
expr_stmt|;
name|txt
operator|+=
name|QLatin1String
argument_list|(
literal|"Bar"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|txt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"linebreaks"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p DEFAULTBLOCKSTYLE>Blah<br />Bar</p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextBlockFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setTopMargin
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setBottomMargin
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setLeftMargin
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setRightMargin
argument_list|(
literal|40
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blockmargins"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"EMPTYBLOCK"
argument_list|)
operator|+
name|QString
argument_list|(
literal|"<p style=\" margin-top:10px; margin-bottom:20px; margin-left:30px; margin-right:40px; -qt-block-indent:0; text-indent:0px;\">Blah</p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextList
modifier|*
name|list
init|=
name|cursor
operator|.
name|insertList
argument_list|(
name|QTextListFormat
operator|::
name|ListDisc
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blubb"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|->
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"lists"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"EMPTYBLOCK"
argument_list|)
operator|+
name|QString
argument_list|(
literal|"<ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li DEFAULTBLOCKSTYLE>Blubb</li>\n<li DEFAULTBLOCKSTYLE>Blah</li></ul>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextList
modifier|*
name|list
init|=
name|cursor
operator|.
name|insertList
argument_list|(
name|QTextListFormat
operator|::
name|ListDisc
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blubb"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|QTextCharFormat
name|blockCharFmt
decl_stmt|;
name|blockCharFmt
operator|.
name|setForeground
argument_list|(
name|QColor
argument_list|(
literal|"#0000ff"
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|mergeBlockCharFormat
argument_list|(
name|blockCharFmt
argument_list|)
expr_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|QColor
argument_list|(
literal|"#ff0000"
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|->
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"charfmt-for-list-item"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"EMPTYBLOCK"
argument_list|)
operator|+
name|QString
argument_list|(
literal|"<ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li DEFAULTBLOCKSTYLE>Blubb</li>\n<li style=\" color:#0000ff;\" DEFAULTBLOCKSTYLE><span style=\" color:#ff0000;\">Blah</span></li></ul>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextBlockFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setIndent
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setTextIndent
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"block-indent"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"EMPTYBLOCK"
argument_list|)
operator|+
name|QString
argument_list|(
literal|"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:3; text-indent:30px;\">Test</p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextListFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setStyle
argument_list|(
name|QTextListFormat
operator|::
name|ListDisc
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setIndent
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertList
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"list-indent"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"EMPTYBLOCK"
argument_list|)
operator|+
name|QString
argument_list|(
literal|"<ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 4;\"><li DEFAULTBLOCKSTYLE>Blah</li></ul>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptyblock"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
comment|// after insertBlock() we /do/ have two blocks in the document, so also expect
comment|// these in the html output
operator|<<
name|QString
argument_list|(
literal|"EMPTYBLOCK"
argument_list|)
operator|+
name|QString
argument_list|(
literal|"EMPTYBLOCK"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
comment|// if you press enter twice in an empty textedit and then insert 'Test'
comment|// you actually get three visible paragraphs, two empty leading ones and
comment|// a third with the actual text. the corresponding html representation
comment|// therefore should also contain three paragraphs.
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|QColor
argument_list|(
literal|"#00ff00"
argument_list|)
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setProperty
argument_list|(
name|QTextFormat
operator|::
name|FontSizeIncrement
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|mergeBlockCharFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setProperty
argument_list|(
name|QTextFormat
operator|::
name|FontSizeIncrement
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Test"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blockcharfmt"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"EMPTYBLOCK<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:x-large; color:#00ff00;\">Test</span></p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|QColor
argument_list|(
literal|"#00ff00"
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setBlockCharFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|QColor
argument_list|(
literal|"#0000ff"
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Test"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blockcharfmt2"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" color:#0000ff;\">Test</span></p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"horizontal-ruler"
argument_list|)
operator|<<
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
literal|"<hr />"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"EMPTYBLOCK"
argument_list|)
operator|+
name|QString
argument_list|(
literal|"<hr />"
argument_list|)
expr_stmt|;
block|}
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"horizontal-ruler-with-width"
argument_list|)
operator|<<
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
literal|"<hr width=\"50%\"/>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"EMPTYBLOCK"
argument_list|)
operator|+
name|QString
argument_list|(
literal|"<hr width=\"50%\"/>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextFrame
modifier|*
name|mainFrame
init|=
name|cursor
operator|.
name|currentFrame
argument_list|()
decl_stmt|;
name|QTextFrameFormat
name|ffmt
decl_stmt|;
name|ffmt
operator|.
name|setBorder
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ffmt
operator|.
name|setPosition
argument_list|(
name|QTextFrameFormat
operator|::
name|FloatRight
argument_list|)
expr_stmt|;
name|ffmt
operator|.
name|setMargin
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|ffmt
operator|.
name|setWidth
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|ffmt
operator|.
name|setHeight
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|ffmt
operator|.
name|setBackground
argument_list|(
name|QColor
argument_list|(
literal|"#00ff00"
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertFrame
argument_list|(
name|ffmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|cursor
operator|=
name|mainFrame
operator|->
name|lastCursorPosition
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"frame"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<table border=\"1\" style=\"-qt-table-type: frame; float: right; margin-top:2px; margin-bottom:2px; margin-left:2px; margin-right:2px;\" width=\"100\" height=\"50\" bgcolor=\"#00ff00\">\n<tr>\n<td style=\"border: none;\">\n<p DEFAULTBLOCKSTYLE>Hello World</p></td></tr></table>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|QColor
argument_list|(
literal|"#00ff00"
argument_list|)
argument_list|)
expr_stmt|;
comment|//        fmt.setBackground(QColor("#0000ff"));
name|cursor
operator|.
name|setBlockCharFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|QBrush
argument_list|()
argument_list|)
expr_stmt|;
comment|//        fmt.setBackground(QBrush());
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Test"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
comment|//        QTest::newRow("nostylebrush")<< QTextDocumentFragment(&doc)<< QString("<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; color:#00ff00; -qt-blockcharfmt-background-color:#0000ff;\">Test</p>");
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nostylebrush"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Test</p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|insertTable
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|table
operator|->
name|mergeCells
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QTextTableFormat
name|fmt
init|=
name|table
operator|->
name|format
argument_list|()
decl_stmt|;
name|QVector
argument_list|<
name|QTextLength
argument_list|>
name|widths
decl_stmt|;
name|widths
operator|.
name|append
argument_list|(
name|QTextLength
argument_list|(
name|QTextLength
operator|::
name|FixedLength
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|widths
operator|.
name|append
argument_list|(
name|QTextLength
argument_list|(
name|QTextLength
operator|::
name|FixedLength
argument_list|,
literal|40
argument_list|)
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setColumnWidthConstraints
argument_list|(
name|widths
argument_list|)
expr_stmt|;
name|table
operator|->
name|setFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mergedtablecolwidths"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<table border=\"1\" cellspacing=\"2\">"
literal|"\n<tr>\n<td colspan=\"2\"></td></tr>"
literal|"\n<tr>\n<td width=\"20\"></td>\n<td width=\"40\"></td></tr>"
literal|"</table>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah\nGreen yellow green"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
literal|23
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setBackground
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|mergeCharFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
literal|11
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
literal|17
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setBackground
argument_list|(
name|Qt
operator|::
name|yellow
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|mergeCharFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"multiparagraph-bgcolor"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p DEFAULTBLOCKSTYLE><span style=\" background-color:#00ff00;\">Blah</span></p>\n"
literal|"<p DEFAULTBLOCKSTYLE><span style=\" background-color:#00ff00;\">Green</span>"
literal|"<span style=\" background-color:#ffff00;\">yellow</span>"
literal|"<span style=\" background-color:#00ff00;\"> green</span></p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextBlockFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setBackground
argument_list|(
name|QColor
argument_list|(
literal|"#0000ff"
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|QTextCharFormat
name|charfmt
decl_stmt|;
name|charfmt
operator|.
name|setBackground
argument_list|(
name|QColor
argument_list|(
literal|"#0000ff"
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|,
name|charfmt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nospan-bgcolor"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"EMPTYBLOCK"
argument_list|)
operator|+
name|QString
argument_list|(
literal|"<p OPENDEFAULTBLOCKSTYLE background-color:#0000ff;\"><span style=\" background-color:#0000ff;\">Blah</span></p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|insertTable
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|QTextCharFormat
name|fmt
init|=
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|format
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|setVerticalAlignment
argument_list|(
name|QTextCharFormat
operator|::
name|AlignMiddle
argument_list|)
expr_stmt|;
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|setFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|fmt
operator|=
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|format
argument_list|()
expr_stmt|;
name|fmt
operator|.
name|setVerticalAlignment
argument_list|(
name|QTextCharFormat
operator|::
name|AlignTop
argument_list|)
expr_stmt|;
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|setFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|fmt
operator|=
name|table
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
operator|.
name|format
argument_list|()
expr_stmt|;
name|fmt
operator|.
name|setVerticalAlignment
argument_list|(
name|QTextCharFormat
operator|::
name|AlignBottom
argument_list|)
expr_stmt|;
name|table
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
operator|.
name|setFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"table-vertical-alignment"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<table border=\"1\" cellspacing=\"2\">"
literal|"\n<tr>\n<td style=\" vertical-align:middle;\">\n"
literal|"<p DEFAULTBLOCKSTYLE>Blah</p></td>"
literal|"\n<td style=\" vertical-align:top;\"></td></tr>"
literal|"\n<tr>\n<td style=\" vertical-align:bottom;\"></td>"
literal|"\n<td></td></tr>"
literal|"</table>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|insertTable
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|QTextTableCellFormat
name|fmt
init|=
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|format
argument_list|()
operator|.
name|toTableCellFormat
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|setLeftPadding
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|setFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|fmt
operator|=
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|format
argument_list|()
operator|.
name|toTableCellFormat
argument_list|()
expr_stmt|;
name|fmt
operator|.
name|setRightPadding
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|setFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|fmt
operator|=
name|table
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
operator|.
name|format
argument_list|()
operator|.
name|toTableCellFormat
argument_list|()
expr_stmt|;
name|fmt
operator|.
name|setTopPadding
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|table
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
operator|.
name|setFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|fmt
operator|=
name|table
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|format
argument_list|()
operator|.
name|toTableCellFormat
argument_list|()
expr_stmt|;
name|fmt
operator|.
name|setBottomPadding
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|table
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|setFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"table-cell-paddings"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<table border=\"1\" cellspacing=\"2\">"
literal|"\n<tr>\n<td style=\" padding-left:1;\">\n"
literal|"<p DEFAULTBLOCKSTYLE>Blah</p></td>"
literal|"\n<td style=\" padding-right:1;\"></td></tr>"
literal|"\n<tr>\n<td style=\" padding-top:1;\"></td>"
literal|"\n<td style=\" padding-bottom:1;\"></td></tr>"
literal|"</table>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextTableFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setBorderBrush
argument_list|(
name|QColor
argument_list|(
literal|"#0000ff"
argument_list|)
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setBorderStyle
argument_list|(
name|QTextFrameFormat
operator|::
name|BorderStyle_Solid
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertTable
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"tableborder"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<table border=\"1\" style=\" border-color:#0000ff; border-style:solid;\" cellspacing=\"2\">"
literal|"\n<tr>\n<td></td>\n<td></td></tr>"
literal|"\n<tr>\n<td></td>\n<td></td></tr>"
literal|"</table>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Foo"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|setUserState
argument_list|(
literal|42
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"userstate"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"EMPTYBLOCK"
argument_list|)
operator|+
name|QString
argument_list|(
literal|"<p OPENDEFAULTBLOCKSTYLE -qt-user-state:42;\">Foo</p>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextBlockFormat
name|blockFmt
decl_stmt|;
name|blockFmt
operator|.
name|setPageBreakPolicy
argument_list|(
name|QTextFormat
operator|::
name|PageBreak_AlwaysBefore
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|(
name|blockFmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Foo"
argument_list|)
expr_stmt|;
name|blockFmt
operator|.
name|setPageBreakPolicy
argument_list|(
name|QTextFormat
operator|::
name|PageBreak_AlwaysBefore
operator||
name|QTextFormat
operator|::
name|PageBreak_AlwaysAfter
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|(
name|blockFmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Bar"
argument_list|)
expr_stmt|;
name|QTextTableFormat
name|tableFmt
decl_stmt|;
name|tableFmt
operator|.
name|setPageBreakPolicy
argument_list|(
name|QTextFormat
operator|::
name|PageBreak_AlwaysAfter
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertTable
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|tableFmt
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pagebreak"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"EMPTYBLOCK"
argument_list|)
operator|+
name|QString
argument_list|(
literal|"<p OPENDEFAULTBLOCKSTYLE page-break-before:always;\">Foo</p>"
literal|"\n<p OPENDEFAULTBLOCKSTYLE page-break-before:always; page-break-after:always;\">Bar</p>"
literal|"\n<table border=\"1\" style=\" page-break-after:always;\" cellspacing=\"2\">\n<tr>\n<td></td></tr></table>"
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextListFormat
name|listFmt
decl_stmt|;
name|listFmt
operator|.
name|setStyle
argument_list|(
name|QTextListFormat
operator|::
name|ListDisc
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertList
argument_list|(
name|listFmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"list-ul-margin"
argument_list|)
operator|<<
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"EMPTYBLOCK"
argument_list|)
operator|+
name|QString
argument_list|(
literal|"<ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li DEFAULTBLOCKSTYLE>Blah</li></ul>"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|toHtml
name|void
name|tst_QTextDocument
operator|::
name|toHtml
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QTextDocumentFragment
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedOutput
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|prepend
argument_list|(
name|htmlHead
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|replace
argument_list|(
literal|"OPENDEFAULTBLOCKSTYLE"
argument_list|,
literal|"style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|replace
argument_list|(
literal|"DEFAULTBLOCKSTYLE"
argument_list|,
literal|"style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\""
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|replace
argument_list|(
literal|"EMPTYBLOCK"
argument_list|,
literal|"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedOutput
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
condition|)
name|expectedOutput
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
name|htmlTail
argument_list|)
expr_stmt|;
name|QString
name|output
init|=
name|doc
operator|->
name|toHtml
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|output
argument_list|,
name|expectedOutput
argument_list|)
expr_stmt|;
name|QDomDocument
name|document
decl_stmt|;
name|QVERIFY2
argument_list|(
name|document
operator|.
name|setContent
argument_list|(
name|output
argument_list|)
argument_list|,
literal|"Output was not valid XML"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toHtml2
name|void
name|tst_QTextDocument
operator|::
name|toHtml2
parameter_list|()
block|{
name|QTextDocument
name|doc
decl_stmt|;
name|doc
operator|.
name|setHtml
argument_list|(
literal|"<p>text<img src=\"\">    text</p>"
argument_list|)
expr_stmt|;
comment|// 4 spaces before the second 'text'
name|QTextBlock
name|block
init|=
name|doc
operator|.
name|firstBlock
argument_list|()
decl_stmt|;
name|QTextBlock
operator|::
name|Iterator
name|iter
init|=
name|block
operator|.
name|begin
argument_list|()
decl_stmt|;
name|QTextFragment
name|f
init|=
name|iter
operator|.
name|fragment
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|position
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|length
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|//qDebug()<< block.text().mid(f.position(), f.length());
name|iter
operator|++
expr_stmt|;
name|f
operator|=
name|iter
operator|.
name|fragment
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|position
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|length
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//qDebug()<< block.text().mid(f.position(), f.length());
name|iter
operator|++
expr_stmt|;
name|f
operator|=
name|iter
operator|.
name|fragment
argument_list|()
expr_stmt|;
comment|//qDebug()<< block.text().mid(f.position(), f.length());
name|QVERIFY
argument_list|(
name|f
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|position
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|length
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// 1 space should be preserved.
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
operator|.
name|mid
argument_list|(
name|f
operator|.
name|position
argument_list|()
argument_list|,
name|f
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|" text"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setHtml
argument_list|(
literal|"<table><tr><td>   foo</td></tr></table>    text"
argument_list|)
expr_stmt|;
comment|// 4 spaces before the second 'text'
name|block
operator|=
name|doc
operator|.
name|firstBlock
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
comment|//qDebug()<< block.text();
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
comment|//qDebug()<< block.text();
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setFragmentMarkersInHtmlExport
name|void
name|tst_QTextDocument
operator|::
name|setFragmentMarkersInHtmlExport
parameter_list|()
block|{
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Leadin"
argument_list|)
expr_stmt|;
specifier|const
name|int
name|startPos
init|=
name|cursor
operator|.
name|position
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|QColor
argument_list|(
literal|"#00ff00"
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
specifier|const
name|int
name|endPos
init|=
name|cursor
operator|.
name|position
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Leadout"
argument_list|,
name|QTextCharFormat
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|startPos
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|endPos
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|QTextDocumentFragment
name|fragment
argument_list|(
name|cursor
argument_list|)
decl_stmt|;
name|QString
name|expected
init|=
name|htmlHead
decl_stmt|;
name|expected
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|"<body.*>"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"<body>"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|+=
name|QString
argument_list|(
literal|"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><!--StartFragment-->Test<span style=\" color:#00ff00;\">Blah</span><!--EndFragment--></p>"
argument_list|)
operator|+
name|htmlTail
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fragment
operator|.
name|toHtml
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Leadin"
argument_list|)
expr_stmt|;
specifier|const
name|int
name|startPos
init|=
name|cursor
operator|.
name|position
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
specifier|const
name|int
name|endPos
init|=
name|cursor
operator|.
name|position
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Leadout"
argument_list|,
name|QTextCharFormat
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|startPos
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|endPos
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|QTextDocumentFragment
name|fragment
argument_list|(
name|cursor
argument_list|)
decl_stmt|;
name|QString
name|expected
init|=
name|htmlHead
decl_stmt|;
name|expected
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|"<body.*>"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"<body>"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|+=
name|QString
argument_list|(
literal|"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><!--StartFragment-->Test<!--EndFragment--></p>"
argument_list|)
operator|+
name|htmlTail
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fragment
operator|.
name|toHtml
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|toHtmlBodyBgColor
name|void
name|tst_QTextDocument
operator|::
name|toHtmlBodyBgColor
parameter_list|()
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|QTextFrameFormat
name|fmt
init|=
name|doc
operator|.
name|rootFrame
argument_list|()
operator|->
name|frameFormat
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|setBackground
argument_list|(
name|QColor
argument_list|(
literal|"#0000ff"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|rootFrame
argument_list|()
operator|->
name|setFrameFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|QString
name|expectedHtml
argument_list|(
literal|"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" "
literal|"\"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
literal|"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
literal|"p, li { white-space: pre-wrap; }\n"
literal|"</style></head>"
literal|"<body style=\" font-family:'%1'; font-size:%2pt; font-weight:%3; font-style:%4;\""
literal|" bgcolor=\"#0000ff\">\n"
literal|"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Blah</p>"
literal|"</body></html>"
argument_list|)
decl_stmt|;
name|expectedHtml
operator|=
name|expectedHtml
operator|.
name|arg
argument_list|(
name|defaultFont
operator|.
name|family
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|defaultFont
operator|.
name|pointSizeF
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|defaultFont
operator|.
name|weight
argument_list|()
operator|*
literal|8
argument_list|)
operator|.
name|arg
argument_list|(
operator|(
name|defaultFont
operator|.
name|italic
argument_list|()
condition|?
literal|"italic"
else|:
literal|"normal"
operator|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|toHtml
argument_list|()
argument_list|,
name|expectedHtml
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toHtmlBodyBgColorRgba
name|void
name|tst_QTextDocument
operator|::
name|toHtmlBodyBgColorRgba
parameter_list|()
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|QTextFrameFormat
name|fmt
init|=
name|doc
operator|.
name|rootFrame
argument_list|()
operator|->
name|frameFormat
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|setBackground
argument_list|(
name|QColor
argument_list|(
literal|255
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|51
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|rootFrame
argument_list|()
operator|->
name|setFrameFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|QString
name|expectedHtml
argument_list|(
literal|"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" "
literal|"\"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
literal|"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
literal|"p, li { white-space: pre-wrap; }\n"
literal|"</style></head>"
literal|"<body style=\" font-family:'%1'; font-size:%2pt; font-weight:%3; font-style:%4;\""
literal|" bgcolor=\"rgba(255,0,0,0.2)\">\n"
literal|"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Blah</p>"
literal|"</body></html>"
argument_list|)
decl_stmt|;
name|expectedHtml
operator|=
name|expectedHtml
operator|.
name|arg
argument_list|(
name|defaultFont
operator|.
name|family
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|defaultFont
operator|.
name|pointSizeF
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|defaultFont
operator|.
name|weight
argument_list|()
operator|*
literal|8
argument_list|)
operator|.
name|arg
argument_list|(
operator|(
name|defaultFont
operator|.
name|italic
argument_list|()
condition|?
literal|"italic"
else|:
literal|"normal"
operator|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|toHtml
argument_list|()
argument_list|,
name|expectedHtml
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toHtmlBodyBgColorTransparent
name|void
name|tst_QTextDocument
operator|::
name|toHtmlBodyBgColorTransparent
parameter_list|()
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|QTextFrameFormat
name|fmt
init|=
name|doc
operator|.
name|rootFrame
argument_list|()
operator|->
name|frameFormat
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|setBackground
argument_list|(
name|QColor
argument_list|(
literal|255
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|rootFrame
argument_list|()
operator|->
name|setFrameFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|QString
name|expectedHtml
argument_list|(
literal|"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" "
literal|"\"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
literal|"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
literal|"p, li { white-space: pre-wrap; }\n"
literal|"</style></head>"
literal|"<body style=\" font-family:'%1'; font-size:%2pt; font-weight:%3; font-style:%4;\""
literal|" bgcolor=\"transparent\">\n"
literal|"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Blah</p>"
literal|"</body></html>"
argument_list|)
decl_stmt|;
name|expectedHtml
operator|=
name|expectedHtml
operator|.
name|arg
argument_list|(
name|defaultFont
operator|.
name|family
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|defaultFont
operator|.
name|pointSizeF
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|defaultFont
operator|.
name|weight
argument_list|()
operator|*
literal|8
argument_list|)
operator|.
name|arg
argument_list|(
operator|(
name|defaultFont
operator|.
name|italic
argument_list|()
condition|?
literal|"italic"
else|:
literal|"normal"
operator|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|toHtml
argument_list|()
argument_list|,
name|expectedHtml
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toHtmlRootFrameProperties
name|void
name|tst_QTextDocument
operator|::
name|toHtmlRootFrameProperties
parameter_list|()
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextFrameFormat
name|fmt
init|=
name|doc
operator|.
name|rootFrame
argument_list|()
operator|->
name|frameFormat
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|setTopMargin
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setLeftMargin
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setBorder
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|doc
operator|.
name|rootFrame
argument_list|()
operator|->
name|setFrameFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|QString
name|expectedOutput
argument_list|(
literal|"<table border=\"2\" style=\"-qt-table-type: root; margin-top:10px; "
literal|"margin-bottom:4px; margin-left:10px; margin-right:4px;\">\n"
literal|"<tr>\n<td style=\"border: none;\">\n"
literal|"<p DEFAULTBLOCKSTYLE>Blah</p></td></tr></table>"
argument_list|)
decl_stmt|;
name|expectedOutput
operator|.
name|prepend
argument_list|(
name|htmlHead
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|replace
argument_list|(
literal|"DEFAULTBLOCKSTYLE"
argument_list|,
literal|"style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\""
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
name|htmlTail
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|toHtml
argument_list|()
argument_list|,
name|expectedOutput
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toHtmlLineHeightProperties
name|void
name|tst_QTextDocument
operator|::
name|toHtmlLineHeightProperties
parameter_list|()
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|QTextBlock
name|block
init|=
name|doc
operator|.
name|firstBlock
argument_list|()
decl_stmt|;
name|QTextBlockFormat
name|blockFormat
init|=
name|block
operator|.
name|blockFormat
argument_list|()
decl_stmt|;
name|blockFormat
operator|.
name|setLineHeight
argument_list|(
literal|200
argument_list|,
name|QTextBlockFormat
operator|::
name|ProportionalHeight
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setBlockFormat
argument_list|(
name|blockFormat
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|QString
name|expectedOutput
argument_list|(
literal|"<p DEFAULTBLOCKSTYLE line-height:200%;\">Blah</p>"
argument_list|)
decl_stmt|;
name|expectedOutput
operator|.
name|prepend
argument_list|(
name|htmlHead
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|replace
argument_list|(
literal|"DEFAULTBLOCKSTYLE"
argument_list|,
literal|"style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|append
argument_list|(
name|htmlTail
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|toHtml
argument_list|()
argument_list|,
name|expectedOutput
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|capitalizationHtmlInExport
name|void
name|tst_QTextDocument
operator|::
name|capitalizationHtmlInExport
parameter_list|()
block|{
name|doc
operator|->
name|setPlainText
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|QRegExp
name|re
argument_list|(
literal|".*span style=\"(.*)\">Test.*"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|re
operator|.
name|exactMatch
argument_list|(
name|doc
operator|->
name|toHtml
argument_list|()
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
comment|// no span
name|QTextCursor
name|cursor
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
literal|4
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|QTextCharFormat
name|cf
decl_stmt|;
name|cf
operator|.
name|setFontCapitalization
argument_list|(
name|QFont
operator|::
name|SmallCaps
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|mergeCharFormat
argument_list|(
name|cf
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|smallcaps
init|=
name|doc
operator|->
name|toHtml
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|re
operator|.
name|exactMatch
argument_list|(
name|doc
operator|->
name|toHtml
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|captureCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|trimmed
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"font-variant:small-caps;"
argument_list|)
argument_list|)
expr_stmt|;
name|cf
operator|.
name|setFontCapitalization
argument_list|(
name|QFont
operator|::
name|AllUppercase
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|mergeCharFormat
argument_list|(
name|cf
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|uppercase
init|=
name|doc
operator|->
name|toHtml
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|re
operator|.
name|exactMatch
argument_list|(
name|doc
operator|->
name|toHtml
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|captureCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|trimmed
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"text-transform:uppercase;"
argument_list|)
argument_list|)
expr_stmt|;
name|cf
operator|.
name|setFontCapitalization
argument_list|(
name|QFont
operator|::
name|AllLowercase
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|mergeCharFormat
argument_list|(
name|cf
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|lowercase
init|=
name|doc
operator|->
name|toHtml
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|re
operator|.
name|exactMatch
argument_list|(
name|doc
operator|->
name|toHtml
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|captureCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|trimmed
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"text-transform:lowercase;"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
name|smallcaps
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|fontCapitalization
argument_list|()
argument_list|,
name|QFont
operator|::
name|SmallCaps
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
name|uppercase
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|fontCapitalization
argument_list|()
argument_list|,
name|QFont
operator|::
name|AllUppercase
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
name|lowercase
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|fontCapitalization
argument_list|()
argument_list|,
name|QFont
operator|::
name|AllLowercase
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|wordspacingHtmlExport
name|void
name|tst_QTextDocument
operator|::
name|wordspacingHtmlExport
parameter_list|()
block|{
name|doc
operator|->
name|setPlainText
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|QRegExp
name|re
argument_list|(
literal|".*span style=\"(.*)\">Test.*"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|re
operator|.
name|exactMatch
argument_list|(
name|doc
operator|->
name|toHtml
argument_list|()
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
comment|// no span
name|QTextCursor
name|cursor
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
literal|4
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|QTextCharFormat
name|cf
decl_stmt|;
name|cf
operator|.
name|setFontWordSpacing
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|mergeCharFormat
argument_list|(
name|cf
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|re
operator|.
name|exactMatch
argument_list|(
name|doc
operator|->
name|toHtml
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|captureCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|trimmed
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"word-spacing:4px;"
argument_list|)
argument_list|)
expr_stmt|;
name|cf
operator|.
name|setFontWordSpacing
argument_list|(
operator|-
literal|8.5
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|mergeCharFormat
argument_list|(
name|cf
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|re
operator|.
name|exactMatch
argument_list|(
name|doc
operator|->
name|toHtml
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|captureCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|trimmed
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"word-spacing:-8.5px;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|CursorPosSignalSpy
class|class
name|CursorPosSignalSpy
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|CursorPosSignalSpy
name|CursorPosSignalSpy
parameter_list|(
name|QTextDocument
modifier|*
name|doc
parameter_list|)
block|{
name|calls
operator|=
literal|0
expr_stmt|;
name|connect
argument_list|(
name|doc
argument_list|,
name|SIGNAL
argument_list|(
name|cursorPositionChanged
argument_list|(
name|QTextCursor
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|cursorPositionChanged
argument_list|(
name|QTextCursor
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|member|calls
name|int
name|calls
decl_stmt|;
private|private
name|slots
private|:
DECL|function|cursorPositionChanged
name|void
name|cursorPositionChanged
parameter_list|(
specifier|const
name|QTextCursor
modifier|&
parameter_list|)
block|{
operator|++
name|calls
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|cursorPositionChanged
name|void
name|tst_QTextDocument
operator|::
name|cursorPositionChanged
parameter_list|()
block|{
name|CursorPosSignalSpy
name|spy
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|calls
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|calls
operator|=
literal|0
expr_stmt|;
name|QTextCursor
name|unrelatedCursor
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|unrelatedCursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|calls
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|spy
operator|.
name|calls
operator|=
literal|0
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|calls
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|calls
operator|=
literal|0
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousCharacter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|calls
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cursorPositionChangedOnSetText
name|void
name|tst_QTextDocument
operator|::
name|cursorPositionChangedOnSetText
parameter_list|()
block|{
name|CursorPosSignalSpy
name|spy
argument_list|(
name|doc
argument_list|)
decl_stmt|;
comment|// doc has one QTextCursor stored in the
comment|// cursor member variable, thus the signal
comment|// gets emitted once.
name|doc
operator|->
name|setPlainText
argument_list|(
literal|"Foo\nBar\nBaz\nBlub\nBlah"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|calls
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|calls
operator|=
literal|0
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<p>Foo<p>Bar<p>Baz<p>Blah"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|calls
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|textFrameIterator
name|void
name|tst_QTextDocument
operator|::
name|textFrameIterator
parameter_list|()
block|{
name|cursor
operator|.
name|insertTable
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|int
name|blockCount
init|=
literal|0
decl_stmt|;
name|int
name|frameCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|QTextFrame
operator|::
name|Iterator
name|frameIt
init|=
name|doc
operator|->
name|rootFrame
argument_list|()
operator|->
name|begin
argument_list|()
init|;
operator|!
name|frameIt
operator|.
name|atEnd
argument_list|()
condition|;
operator|++
name|frameIt
control|)
block|{
if|if
condition|(
name|frameIt
operator|.
name|currentFrame
argument_list|()
condition|)
operator|++
name|frameCount
expr_stmt|;
elseif|else
if|if
condition|(
name|frameIt
operator|.
name|currentBlock
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
operator|++
name|blockCount
expr_stmt|;
block|}
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"This is currently worked around in the html export but needs fixing!"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|blockCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|frameCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|codecForHtml
name|void
name|tst_QTextDocument
operator|::
name|codecForHtml
parameter_list|()
block|{
specifier|const
name|QByteArray
name|header
argument_list|(
literal|"<META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html;charset=utf-16\">"
argument_list|)
decl_stmt|;
name|QTextCodec
modifier|*
name|c
init|=
name|Qt
operator|::
name|codecForHtml
argument_list|(
name|header
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|->
name|name
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"UTF-16"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|TestSyntaxHighlighter
class|class
name|TestSyntaxHighlighter
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|TestSyntaxHighlighter
specifier|inline
name|TestSyntaxHighlighter
parameter_list|(
name|QTextDocument
modifier|*
name|doc
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|doc
argument_list|)
member_init_list|,
name|ok
argument_list|(
literal|false
argument_list|)
block|{}
DECL|member|ok
name|bool
name|ok
decl_stmt|;
private|private
name|slots
private|:
DECL|function|markBlockDirty
specifier|inline
name|void
name|markBlockDirty
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|charsRemoved
parameter_list|,
name|int
name|charsAdded
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|charsRemoved
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|charsAdded
argument_list|)
expr_stmt|;
name|QTextDocument
modifier|*
name|doc
init|=
cast|static_cast
argument_list|<
name|QTextDocument
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|()
argument_list|)
decl_stmt|;
name|QTextBlock
name|block
init|=
name|doc
operator|->
name|findBlock
argument_list|(
name|from
argument_list|)
decl_stmt|;
name|QTestDocumentLayout
modifier|*
name|lout
init|=
name|qobject_cast
argument_list|<
name|QTestDocumentLayout
operator|*
argument_list|>
argument_list|(
name|doc
operator|->
name|documentLayout
argument_list|()
argument_list|)
decl_stmt|;
name|lout
operator|->
name|called
operator|=
literal|false
expr_stmt|;
name|doc
operator|->
name|markContentsDirty
argument_list|(
name|block
operator|.
name|position
argument_list|()
argument_list|,
name|block
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|ok
operator|=
operator|(
name|lout
operator|->
name|called
operator|==
literal|false
operator|)
expr_stmt|;
block|}
DECL|function|modifyBlockAgain
specifier|inline
name|void
name|modifyBlockAgain
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|charsRemoved
parameter_list|,
name|int
name|charsAdded
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|charsRemoved
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|charsAdded
argument_list|)
expr_stmt|;
name|QTextDocument
modifier|*
name|doc
init|=
cast|static_cast
argument_list|<
name|QTextDocument
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|()
argument_list|)
decl_stmt|;
name|QTextBlock
name|block
init|=
name|doc
operator|->
name|findBlock
argument_list|(
name|from
argument_list|)
decl_stmt|;
name|QTextCursor
name|cursor
argument_list|(
name|block
argument_list|)
decl_stmt|;
name|QTestDocumentLayout
modifier|*
name|lout
init|=
name|qobject_cast
argument_list|<
name|QTestDocumentLayout
operator|*
argument_list|>
argument_list|(
name|doc
operator|->
name|documentLayout
argument_list|()
argument_list|)
decl_stmt|;
name|lout
operator|->
name|called
operator|=
literal|false
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Foo"
argument_list|)
expr_stmt|;
name|ok
operator|=
operator|(
name|lout
operator|->
name|called
operator|==
literal|true
operator|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|markContentsDirty
name|void
name|tst_QTextDocument
operator|::
name|markContentsDirty
parameter_list|()
block|{
name|QTestDocumentLayout
modifier|*
name|lout
init|=
operator|new
name|QTestDocumentLayout
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|doc
operator|->
name|setDocumentLayout
argument_list|(
name|lout
argument_list|)
expr_stmt|;
name|TestSyntaxHighlighter
modifier|*
name|highlighter
init|=
operator|new
name|TestSyntaxHighlighter
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|doc
argument_list|,
name|SIGNAL
argument_list|(
name|contentsChange
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|highlighter
argument_list|,
name|SLOT
argument_list|(
name|markBlockDirty
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|highlighter
operator|->
name|ok
operator|=
literal|false
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Some dummy text blah blah"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|highlighter
operator|->
name|ok
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|doc
argument_list|,
name|SIGNAL
argument_list|(
name|contentsChange
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|highlighter
argument_list|,
name|SLOT
argument_list|(
name|markBlockDirty
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|doc
argument_list|,
name|SIGNAL
argument_list|(
name|contentsChange
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|highlighter
argument_list|,
name|SLOT
argument_list|(
name|modifyBlockAgain
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|highlighter
operator|->
name|ok
operator|=
literal|false
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"FooBar"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|highlighter
operator|->
name|ok
argument_list|)
expr_stmt|;
name|lout
operator|->
name|called
operator|=
literal|false
expr_stmt|;
name|doc
operator|->
name|markContentsDirty
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|lout
operator|->
name|called
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clonePreservesMetaInformation
name|void
name|tst_QTextDocument
operator|::
name|clonePreservesMetaInformation
parameter_list|()
block|{
specifier|const
name|QString
name|title
argument_list|(
literal|"Foobar"
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|url
argument_list|(
literal|"about:blank"
argument_list|)
decl_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<html><head><title>"
operator|+
name|title
operator|+
literal|"</title></head><body>Hrm</body></html>"
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setMetaInformation
argument_list|(
name|QTextDocument
operator|::
name|DocumentUrl
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|metaInformation
argument_list|(
name|QTextDocument
operator|::
name|DocumentTitle
argument_list|)
argument_list|,
name|title
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|metaInformation
argument_list|(
name|QTextDocument
operator|::
name|DocumentUrl
argument_list|)
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|QTextDocument
modifier|*
name|clone
init|=
name|doc
operator|->
name|clone
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|clone
operator|->
name|metaInformation
argument_list|(
name|QTextDocument
operator|::
name|DocumentTitle
argument_list|)
argument_list|,
name|title
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|clone
operator|->
name|metaInformation
argument_list|(
name|QTextDocument
operator|::
name|DocumentUrl
argument_list|)
argument_list|,
name|url
argument_list|)
expr_stmt|;
operator|delete
name|clone
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clonePreservesPageSize
name|void
name|tst_QTextDocument
operator|::
name|clonePreservesPageSize
parameter_list|()
block|{
name|QSizeF
name|sz
argument_list|(
literal|100.
argument_list|,
literal|100.
argument_list|)
decl_stmt|;
name|doc
operator|->
name|setPageSize
argument_list|(
name|sz
argument_list|)
expr_stmt|;
name|QTextDocument
modifier|*
name|clone
init|=
name|doc
operator|->
name|clone
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|clone
operator|->
name|pageSize
argument_list|()
argument_list|,
name|sz
argument_list|)
expr_stmt|;
operator|delete
name|clone
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clonePreservesPageBreakPolicies
name|void
name|tst_QTextDocument
operator|::
name|clonePreservesPageBreakPolicies
parameter_list|()
block|{
name|QTextTableFormat
name|tableFmt
decl_stmt|;
name|tableFmt
operator|.
name|setPageBreakPolicy
argument_list|(
name|QTextFormat
operator|::
name|PageBreak_AlwaysAfter
argument_list|)
expr_stmt|;
name|QTextBlockFormat
name|blockFmt
decl_stmt|;
name|blockFmt
operator|.
name|setPageBreakPolicy
argument_list|(
name|QTextFormat
operator|::
name|PageBreak_AlwaysBefore
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursor
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|setBlockFormat
argument_list|(
name|blockFmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertTable
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
name|tableFmt
argument_list|)
expr_stmt|;
name|QTextDocument
modifier|*
name|clone
init|=
name|doc
operator|->
name|clone
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|clone
operator|->
name|begin
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|pageBreakPolicy
argument_list|()
argument_list|,
name|QTextFormat
operator|::
name|PageBreak_AlwaysBefore
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|clone
operator|->
name|rootFrame
argument_list|()
operator|->
name|childFrames
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|clone
operator|->
name|rootFrame
argument_list|()
operator|->
name|childFrames
argument_list|()
operator|.
name|first
argument_list|()
operator|->
name|frameFormat
argument_list|()
operator|.
name|pageBreakPolicy
argument_list|()
argument_list|,
name|QTextFormat
operator|::
name|PageBreak_AlwaysAfter
argument_list|)
expr_stmt|;
operator|delete
name|clone
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clonePreservesDefaultFont
name|void
name|tst_QTextDocument
operator|::
name|clonePreservesDefaultFont
parameter_list|()
block|{
name|QFont
name|f
init|=
name|doc
operator|->
name|defaultFont
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|pointSize
argument_list|()
operator|!=
literal|100
argument_list|)
expr_stmt|;
name|f
operator|.
name|setPointSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setDefaultFont
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|QTextDocument
modifier|*
name|clone
init|=
name|doc
operator|->
name|clone
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|clone
operator|->
name|defaultFont
argument_list|()
argument_list|,
name|f
argument_list|)
expr_stmt|;
operator|delete
name|clone
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clonePreservesResources
name|void
name|tst_QTextDocument
operator|::
name|clonePreservesResources
parameter_list|()
block|{
name|QUrl
name|testUrl
argument_list|(
literal|":/foobar"
argument_list|)
decl_stmt|;
name|QVariant
name|testResource
argument_list|(
literal|"hello world"
argument_list|)
decl_stmt|;
name|doc
operator|->
name|addResource
argument_list|(
name|QTextDocument
operator|::
name|ImageResource
argument_list|,
name|testUrl
argument_list|,
name|testResource
argument_list|)
expr_stmt|;
name|QTextDocument
modifier|*
name|clone
init|=
name|doc
operator|->
name|clone
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|clone
operator|->
name|resource
argument_list|(
name|QTextDocument
operator|::
name|ImageResource
argument_list|,
name|testUrl
argument_list|)
operator|==
name|testResource
argument_list|)
expr_stmt|;
operator|delete
name|clone
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clonePreservesUserStates
name|void
name|tst_QTextDocument
operator|::
name|clonePreservesUserStates
parameter_list|()
block|{
name|QTextCursor
name|cursor
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"bla bla bla"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|setUserState
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"foo bar"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|setUserState
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"no user state"
argument_list|)
expr_stmt|;
name|QTextDocument
modifier|*
name|clone
init|=
name|doc
operator|->
name|clone
argument_list|()
decl_stmt|;
name|QTextBlock
name|b1
init|=
name|doc
operator|->
name|begin
argument_list|()
decl_stmt|,
name|b2
init|=
name|clone
operator|->
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|b1
operator|!=
name|doc
operator|->
name|end
argument_list|()
condition|)
block|{
name|b1
operator|=
name|b1
operator|.
name|next
argument_list|()
expr_stmt|;
name|b2
operator|=
name|b2
operator|.
name|next
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b1
operator|.
name|userState
argument_list|()
argument_list|,
name|b2
operator|.
name|userState
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|b2
operator|==
name|clone
operator|->
name|end
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|clone
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clonePreservesRootFrameFormat
name|void
name|tst_QTextDocument
operator|::
name|clonePreservesRootFrameFormat
parameter_list|()
block|{
name|doc
operator|->
name|setPlainText
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|QTextFrameFormat
name|fmt
init|=
name|doc
operator|->
name|rootFrame
argument_list|()
operator|->
name|frameFormat
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|setMargin
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|doc
operator|->
name|rootFrame
argument_list|()
operator|->
name|setFrameFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|rootFrame
argument_list|()
operator|->
name|frameFormat
argument_list|()
operator|.
name|margin
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|QTextDocument
modifier|*
name|copy
init|=
name|doc
operator|->
name|clone
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|copy
operator|->
name|rootFrame
argument_list|()
operator|->
name|frameFormat
argument_list|()
operator|.
name|margin
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|200
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|copy
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clonePreservesIndentWidth
name|void
name|tst_QTextDocument
operator|::
name|clonePreservesIndentWidth
parameter_list|()
block|{
name|doc
operator|->
name|setIndentWidth
argument_list|(
literal|42
argument_list|)
expr_stmt|;
name|QTextDocument
modifier|*
name|clone
init|=
name|doc
operator|->
name|clone
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|clone
operator|->
name|indentWidth
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|clone
expr_stmt|;
block|}
end_function
begin_function
DECL|function|blockCount
name|void
name|tst_QTextDocument
operator|::
name|blockCount
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"blah blah"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resolvedFontInEmptyFormat
name|void
name|tst_QTextDocument
operator|::
name|resolvedFontInEmptyFormat
parameter_list|()
block|{
name|QFont
name|font
decl_stmt|;
name|font
operator|.
name|setPointSize
argument_list|(
literal|42
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setDefaultFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|QTextCharFormat
name|fmt
init|=
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|charFormat
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|fmt
operator|.
name|properties
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fmt
operator|.
name|font
argument_list|()
operator|==
name|font
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|defaultRootFrameMargin
name|void
name|tst_QTextDocument
operator|::
name|defaultRootFrameMargin
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|rootFrame
argument_list|()
operator|->
name|frameFormat
argument_list|()
operator|.
name|margin
argument_list|()
argument_list|,
literal|4.0
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|TestDocument
class|class
name|TestDocument
super|:
specifier|public
name|QTextDocument
block|{
public|public:
DECL|function|TestDocument
specifier|inline
name|TestDocument
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|testUrl
parameter_list|,
specifier|const
name|QString
modifier|&
name|testString
parameter_list|)
member_init_list|:
name|url
argument_list|(
name|testUrl
argument_list|)
member_init_list|,
name|string
argument_list|(
name|testString
argument_list|)
member_init_list|,
name|resourceLoaded
argument_list|(
literal|false
argument_list|)
block|{}
name|bool
name|hasResourceCached
parameter_list|()
function_decl|;
protected|protected:
specifier|virtual
name|QVariant
name|loadResource
parameter_list|(
name|int
name|type
parameter_list|,
specifier|const
name|QUrl
modifier|&
name|name
parameter_list|)
function_decl|;
private|private:
DECL|member|url
name|QUrl
name|url
decl_stmt|;
DECL|member|string
name|QString
name|string
decl_stmt|;
DECL|member|resourceLoaded
name|bool
name|resourceLoaded
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|hasResourceCached
name|bool
name|TestDocument
operator|::
name|hasResourceCached
parameter_list|()
block|{
name|resourceLoaded
operator|=
literal|false
expr_stmt|;
name|resource
argument_list|(
name|QTextDocument
operator|::
name|ImageResource
argument_list|,
name|url
argument_list|)
expr_stmt|;
return|return
operator|!
name|resourceLoaded
return|;
block|}
end_function
begin_function
DECL|function|loadResource
name|QVariant
name|TestDocument
operator|::
name|loadResource
parameter_list|(
name|int
name|type
parameter_list|,
specifier|const
name|QUrl
modifier|&
name|name
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|QTextDocument
operator|::
name|ImageResource
operator|&&
name|name
operator|==
name|url
condition|)
block|{
name|resourceLoaded
operator|=
literal|true
expr_stmt|;
return|return
name|string
return|;
block|}
return|return
name|QTextDocument
operator|::
name|loadResource
argument_list|(
name|type
argument_list|,
name|name
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|clearResources
name|void
name|tst_QTextDocument
operator|::
name|clearResources
parameter_list|()
block|{
comment|// regular resource for QTextDocument
name|QUrl
name|testUrl
argument_list|(
literal|":/foobar"
argument_list|)
decl_stmt|;
name|QVariant
name|testResource
argument_list|(
literal|"hello world"
argument_list|)
decl_stmt|;
comment|// implicitly cached resource, initially loaded through TestDocument::loadResource()
name|QUrl
name|cacheUrl
argument_list|(
literal|":/blub"
argument_list|)
decl_stmt|;
name|QString
name|cacheResource
argument_list|(
literal|"mah"
argument_list|)
decl_stmt|;
name|TestDocument
name|doc
argument_list|(
name|cacheUrl
argument_list|,
name|cacheResource
argument_list|)
decl_stmt|;
name|doc
operator|.
name|addResource
argument_list|(
name|QTextDocument
operator|::
name|ImageResource
argument_list|,
name|testUrl
argument_list|,
name|testResource
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|.
name|resource
argument_list|(
name|QTextDocument
operator|::
name|ImageResource
argument_list|,
name|testUrl
argument_list|)
operator|==
name|testResource
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setPlainText
argument_list|(
literal|"Hah"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|.
name|resource
argument_list|(
name|QTextDocument
operator|::
name|ImageResource
argument_list|,
name|testUrl
argument_list|)
operator|==
name|testResource
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setHtml
argument_list|(
literal|"<b>Mooo</b><img src=\":/blub\"/>"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|.
name|resource
argument_list|(
name|QTextDocument
operator|::
name|ImageResource
argument_list|,
name|testUrl
argument_list|)
operator|==
name|testResource
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|.
name|resource
argument_list|(
name|QTextDocument
operator|::
name|ImageResource
argument_list|,
name|cacheUrl
argument_list|)
operator|==
name|cacheResource
argument_list|)
expr_stmt|;
name|doc
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|doc
operator|.
name|resource
argument_list|(
name|QTextDocument
operator|::
name|ImageResource
argument_list|,
name|testUrl
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|doc
operator|.
name|hasResourceCached
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|clear
argument_list|()
expr_stmt|;
name|doc
operator|.
name|setHtml
argument_list|(
literal|"<b>Mooo</b><img src=\":/blub\"/>"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|.
name|resource
argument_list|(
name|QTextDocument
operator|::
name|ImageResource
argument_list|,
name|cacheUrl
argument_list|)
operator|==
name|cacheResource
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setPlainText
argument_list|(
literal|"Foob"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|doc
operator|.
name|hasResourceCached
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setPlainText
name|void
name|tst_QTextDocument
operator|::
name|setPlainText
parameter_list|()
block|{
name|doc
operator|->
name|setPlainText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|QString
name|s
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|doc
operator|->
name|setPlainText
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toPlainText
name|void
name|tst_QTextDocument
operator|::
name|toPlainText
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
literal|"Hello&nbsp;World"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"Hello World"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|deleteTextObjectsOnClear
name|void
name|tst_QTextDocument
operator|::
name|deleteTextObjectsOnClear
parameter_list|()
block|{
name|QPointer
argument_list|<
name|QTextTable
argument_list|>
name|table
init|=
name|cursor
operator|.
name|insertTable
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|table
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|defaultStyleSheet
name|void
name|tst_QTextDocument
operator|::
name|defaultStyleSheet
parameter_list|()
block|{
specifier|const
name|QString
name|sheet
argument_list|(
literal|"p { background-color: green; }"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|defaultStyleSheet
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setDefaultStyleSheet
argument_list|(
name|sheet
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|defaultStyleSheet
argument_list|()
argument_list|,
name|sheet
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertHtml
argument_list|(
literal|"<p>test"
argument_list|)
expr_stmt|;
name|QTextBlockFormat
name|fmt
init|=
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|blockFormat
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|fmt
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|QColor
argument_list|(
literal|"green"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|->
name|clear
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertHtml
argument_list|(
literal|"<p>test"
argument_list|)
expr_stmt|;
name|fmt
operator|=
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|blockFormat
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|fmt
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|QColor
argument_list|(
literal|"green"
argument_list|)
argument_list|)
expr_stmt|;
name|QTextDocument
modifier|*
name|clone
init|=
name|doc
operator|->
name|clone
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|clone
operator|->
name|defaultStyleSheet
argument_list|()
argument_list|,
name|sheet
argument_list|)
expr_stmt|;
name|cursor
operator|=
name|QTextCursor
argument_list|(
name|clone
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertHtml
argument_list|(
literal|"<p>test"
argument_list|)
expr_stmt|;
name|fmt
operator|=
name|clone
operator|->
name|begin
argument_list|()
operator|.
name|blockFormat
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|fmt
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|QColor
argument_list|(
literal|"green"
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|clone
expr_stmt|;
name|cursor
operator|=
name|QTextCursor
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertHtml
argument_list|(
literal|"<p>test"
argument_list|)
expr_stmt|;
name|fmt
operator|=
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|blockFormat
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|fmt
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|QColor
argument_list|(
literal|"green"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|->
name|clear
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertHtml
argument_list|(
literal|"<style>p { background-color: red; }</style><p>test"
argument_list|)
expr_stmt|;
name|fmt
operator|=
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|blockFormat
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|fmt
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|QColor
argument_list|(
literal|"red"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|->
name|clear
argument_list|()
expr_stmt|;
name|doc
operator|->
name|setDefaultStyleSheet
argument_list|(
literal|"invalid style sheet...."
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertHtml
argument_list|(
literal|"<p>test"
argument_list|)
expr_stmt|;
name|fmt
operator|=
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|blockFormat
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|fmt
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
operator|!=
name|QColor
argument_list|(
literal|"green"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|maximumBlockCount
name|void
name|tst_QTextDocument
operator|::
name|maximumBlockCount
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|maximumBlockCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|isUndoRedoEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Foo"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"\nBlah\nFoo"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setMaximumBlockCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|doc
operator|->
name|isUndoRedoEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setMaximumBlockCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setMaximumBlockCount
argument_list|(
literal|100
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
operator|++
name|i
control|)
block|{
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah)"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
operator|<=
literal|100
argument_list|)
expr_stmt|;
block|}
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|blockNumber
argument_list|()
argument_list|,
literal|99
argument_list|)
expr_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setFontItalic
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setBlockCharFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cursor
operator|.
name|blockCharFormat
argument_list|()
operator|.
name|fontItalic
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setMaximumBlockCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|blockCharFormat
argument_list|()
operator|.
name|fontItalic
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertTable
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|adjustSize
name|void
name|tst_QTextDocument
operator|::
name|adjustSize
parameter_list|()
block|{
comment|// avoid ugly tooltips like in task 125583
name|QString
name|text
argument_list|(
literal|"Test Text"
argument_list|)
decl_stmt|;
name|doc
operator|->
name|setPlainText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|doc
operator|->
name|rootFrame
argument_list|()
operator|->
name|setFrameFormat
argument_list|(
name|QTextFrameFormat
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|->
name|adjustSize
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|size
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|doc
operator|->
name|idealWidth
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initialUserData
name|void
name|tst_QTextDocument
operator|::
name|initialUserData
parameter_list|()
block|{
name|doc
operator|->
name|setPlainText
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|QTextBlock
name|block
init|=
name|doc
operator|->
name|begin
argument_list|()
decl_stmt|;
name|block
operator|.
name|setUserData
argument_list|(
operator|new
name|QTextBlockUserData
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|userData
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|->
name|documentLayout
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|userData
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setDocumentLayout
argument_list|(
operator|new
name|QTestDocumentLayout
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|block
operator|.
name|userData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_defaultFont
name|void
name|tst_QTextDocument
operator|::
name|html_defaultFont
parameter_list|()
block|{
name|QFont
name|f
decl_stmt|;
name|f
operator|.
name|setItalic
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|setWeight
argument_list|(
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setDefaultFont
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setPlainText
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|QString
name|bodyPart
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"<body style=\" font-family:'%1'; font-size:%2pt; font-weight:%3; font-style:italic;\">"
argument_list|)
operator|.
name|arg
argument_list|(
name|f
operator|.
name|family
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|f
operator|.
name|pointSizeF
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|f
operator|.
name|weight
argument_list|()
operator|*
literal|8
argument_list|)
decl_stmt|;
name|QString
name|html
init|=
name|doc
operator|->
name|toHtml
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|html
operator|.
name|contains
argument_list|(
name|bodyPart
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"html:"
operator|<<
name|html
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"expected body:"
operator|<<
name|bodyPart
expr_stmt|;
name|QVERIFY
argument_list|(
name|html
operator|.
name|contains
argument_list|(
name|bodyPart
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|html
operator|.
name|contains
argument_list|(
literal|"span"
argument_list|)
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"html:"
operator|<<
name|html
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|html
operator|.
name|contains
argument_list|(
literal|"<span style"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|blockCountChanged
name|void
name|tst_QTextDocument
operator|::
name|blockCountChanged
parameter_list|()
block|{
name|QSignalSpy
name|spy
argument_list|(
name|doc
argument_list|,
name|SIGNAL
argument_list|(
name|blockCountChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|doc
operator|->
name|setPlainText
argument_list|(
literal|"Foo"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|doc
operator|->
name|setPlainText
argument_list|(
literal|"Foo\nBar"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blahblah"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nonZeroDocumentLengthOnClear
name|void
name|tst_QTextDocument
operator|::
name|nonZeroDocumentLengthOnClear
parameter_list|()
block|{
name|QTestDocumentLayout
modifier|*
name|lout
init|=
operator|new
name|QTestDocumentLayout
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|doc
operator|->
name|setDocumentLayout
argument_list|(
name|lout
argument_list|)
expr_stmt|;
name|doc
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|lout
operator|->
name|called
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|lout
operator|->
name|lastDocumentLengths
operator|.
name|contains
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setTextPreservesUndoRedoEnabled
name|void
name|tst_QTextDocument
operator|::
name|setTextPreservesUndoRedoEnabled
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|doc
operator|->
name|isUndoRedoEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setPlainText
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|isUndoRedoEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setUndoRedoEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|doc
operator|->
name|isUndoRedoEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setPlainText
argument_list|(
literal|"Test2"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|doc
operator|->
name|isUndoRedoEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<p>hello"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|doc
operator|->
name|isUndoRedoEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|firstLast
name|void
name|tst_QTextDocument
operator|::
name|firstLast
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|firstBlock
argument_list|()
operator|==
name|doc
operator|->
name|lastBlock
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setPlainText
argument_list|(
literal|"Hello\nTest\nWorld"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|firstBlock
argument_list|()
operator|!=
name|doc
operator|->
name|lastBlock
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|firstBlock
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|lastBlock
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"World"
argument_list|)
argument_list|)
expr_stmt|;
comment|// manual forward loop
name|QTextBlock
name|block
init|=
name|doc
operator|->
name|firstBlock
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Test"
argument_list|)
argument_list|)
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"World"
argument_list|)
argument_list|)
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|block
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// manual backward loop
name|block
operator|=
name|doc
operator|->
name|lastBlock
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"World"
argument_list|)
argument_list|)
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|previous
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Test"
argument_list|)
argument_list|)
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|previous
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|previous
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|block
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
specifier|const
name|QString
name|backgroundImage_html
argument_list|(
literal|"<body><table><tr><td background=\"foo.png\">Blah</td></tr></table></body>"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|backgroundImage_checkExpectedHtml
name|void
name|tst_QTextDocument
operator|::
name|backgroundImage_checkExpectedHtml
parameter_list|(
specifier|const
name|QTextDocument
modifier|&
name|doc
parameter_list|)
block|{
name|QString
name|expectedHtml
argument_list|(
literal|"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" "
literal|"\"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
literal|"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
literal|"p, li { white-space: pre-wrap; }\n"
literal|"</style></head>"
literal|"<body style=\" font-family:'%1'; font-size:%2pt; font-weight:%3; font-style:%4;\">\n"
literal|"<table border=\"0\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px;\" cellspacing=\"2\" cellpadding=\"0\">"
literal|"\n<tr>\n<td background=\"foo.png\">"
literal|"\n<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Blah</p>"
literal|"</td></tr></table></body></html>"
argument_list|)
decl_stmt|;
name|expectedHtml
operator|=
name|expectedHtml
operator|.
name|arg
argument_list|(
name|defaultFont
operator|.
name|family
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|defaultFont
operator|.
name|pointSizeF
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|defaultFont
operator|.
name|weight
argument_list|()
operator|*
literal|8
argument_list|)
operator|.
name|arg
argument_list|(
operator|(
name|defaultFont
operator|.
name|italic
argument_list|()
condition|?
literal|"italic"
else|:
literal|"normal"
operator|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|toHtml
argument_list|()
argument_list|,
name|expectedHtml
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|backgroundImage_toHtml
name|void
name|tst_QTextDocument
operator|::
name|backgroundImage_toHtml
parameter_list|()
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|doc
operator|.
name|setHtml
argument_list|(
name|backgroundImage_html
argument_list|)
expr_stmt|;
name|backgroundImage_checkExpectedHtml
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|backgroundImage_toHtml2
name|void
name|tst_QTextDocument
operator|::
name|backgroundImage_toHtml2
parameter_list|()
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertHtml
argument_list|(
name|backgroundImage_html
argument_list|)
expr_stmt|;
name|backgroundImage_checkExpectedHtml
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|backgroundImage_clone
name|void
name|tst_QTextDocument
operator|::
name|backgroundImage_clone
parameter_list|()
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|doc
operator|.
name|setHtml
argument_list|(
name|backgroundImage_html
argument_list|)
expr_stmt|;
name|QTextDocument
modifier|*
name|clone
init|=
name|doc
operator|.
name|clone
argument_list|()
decl_stmt|;
name|backgroundImage_checkExpectedHtml
argument_list|(
operator|*
name|clone
argument_list|)
expr_stmt|;
operator|delete
name|clone
expr_stmt|;
block|}
end_function
begin_function
DECL|function|backgroundImage_copy
name|void
name|tst_QTextDocument
operator|::
name|backgroundImage_copy
parameter_list|()
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|doc
operator|.
name|setHtml
argument_list|(
name|backgroundImage_html
argument_list|)
expr_stmt|;
name|QTextDocumentFragment
name|fragment
argument_list|(
operator|&
name|doc
argument_list|)
decl_stmt|;
block|{
name|CREATE_DOC_AND_CURSOR
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|fragment
argument_list|)
expr_stmt|;
name|backgroundImage_checkExpectedHtml
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|documentCleanup
name|void
name|tst_QTextDocument
operator|::
name|documentCleanup
parameter_list|()
block|{
name|QTextDocument
name|doc
decl_stmt|;
name|QTextCursor
name|cursor
argument_list|(
operator|&
name|doc
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"d\nfoo\nbar\n"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|documentLayout
argument_list|()
expr_stmt|;
comment|// forces relayout
comment|// remove char 1
name|cursor
operator|.
name|setPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QSizeF
name|size
init|=
name|doc
operator|.
name|documentLayout
argument_list|()
operator|->
name|documentSize
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|deleteChar
argument_list|()
expr_stmt|;
comment|// the size should be unchanged.
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|documentLayout
argument_list|()
operator|->
name|documentSize
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|characterAt
name|void
name|tst_QTextDocument
operator|::
name|characterAt
parameter_list|()
block|{
name|QTextDocument
name|doc
decl_stmt|;
name|QTextCursor
name|cursor
argument_list|(
operator|&
name|doc
argument_list|)
decl_stmt|;
name|QString
name|text
argument_list|(
literal|"12345\n67890"
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|int
name|length
init|=
name|doc
operator|.
name|characterCount
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|length
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|characterAt
argument_list|(
name|length
operator|-
literal|1
argument_list|)
argument_list|,
name|QChar
argument_list|(
name|QChar
operator|::
name|ParagraphSeparator
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|characterAt
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|QChar
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|characterAt
argument_list|(
name|length
argument_list|)
argument_list|,
name|QChar
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|characterAt
argument_list|(
name|length
operator|+
literal|1
argument_list|)
argument_list|,
name|QChar
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|text
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QChar
name|c
init|=
name|text
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
condition|)
name|c
operator|=
name|QChar
argument_list|(
name|QChar
operator|::
name|ParagraphSeparator
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|characterAt
argument_list|(
name|i
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|revisions
name|void
name|tst_QTextDocument
operator|::
name|revisions
parameter_list|()
block|{
name|QTextDocument
name|doc
decl_stmt|;
name|QTextCursor
name|cursor
argument_list|(
operator|&
name|doc
argument_list|)
decl_stmt|;
name|QString
name|text
argument_list|(
literal|"Hello World"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|firstBlock
argument_list|()
operator|.
name|revision
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|firstBlock
argument_list|()
operator|.
name|revision
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|previous
argument_list|()
operator|.
name|revision
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|revision
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"candle"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|revision
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|EndOfBlock
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
comment|// we are at the block end
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|previous
argument_list|()
operator|.
name|revision
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|revision
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"lightbulb"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|revision
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|StartOfBlock
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
comment|// we are the block start
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|previous
argument_list|()
operator|.
name|revision
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|revision
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|revisionWithUndoCompressionAndUndo
name|void
name|tst_QTextDocument
operator|::
name|revisionWithUndoCompressionAndUndo
parameter_list|()
block|{
name|QTextDocument
name|doc
decl_stmt|;
name|QTextCursor
name|cursor
argument_list|(
operator|&
name|doc
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"This is the beginning of it all."
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|firstBlock
argument_list|()
operator|.
name|revision
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|revision
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|revision
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"this"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|revision
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"is"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|revision
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"compressed"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|revision
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|doc
operator|.
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|revision
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"This is the beginning of it all.\n"
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|firstBlock
argument_list|()
operator|.
name|revision
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Very beginnig"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|firstBlock
argument_list|()
operator|.
name|revision
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|doc
operator|.
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|revision
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|firstBlock
argument_list|()
operator|.
name|revision
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|beginEditBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"world"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|endEditBlock
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|revision
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|doc
operator|.
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|revision
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testUndoCommandAdded
name|void
name|tst_QTextDocument
operator|::
name|testUndoCommandAdded
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
name|doc
argument_list|,
name|SIGNAL
argument_list|(
name|undoCommandAdded
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
comment|// should be merged
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
comment|// should be merged
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|->
name|clear
argument_list|()
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"aaa"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"aaaa\nbcd"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|beginEditBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"aa"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"bbb\n"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setCharFormat
argument_list|(
name|QTextCharFormat
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"\nccc"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|endEditBlock
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setCharFormat
argument_list|(
name|QTextCharFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
literal|10
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QTextCharFormat
name|cf
decl_stmt|;
name|cf
operator|.
name|setFontItalic
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|mergeCharFormat
argument_list|(
name|cf
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|doc
operator|->
name|redo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|doc
operator|->
name|redo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testUndoBlocks
name|void
name|tst_QTextDocument
operator|::
name|testUndoBlocks
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"period"
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"One\nTwo\nThree"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hello WorldOne\nTwo\nThree"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hello World"
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"One\nTwo\nThree"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Trailing text"
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hello WorldOne\nTwo\nThree"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hello World"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"quod"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|beginEditBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|" erat"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|endEditBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|" demonstrandum"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"quod erat demonstrandum"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"quod erat"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"quod"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|Receiver
class|class
name|Receiver
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|member|first
name|QString
name|first
decl_stmt|;
public|public
name|slots
public|:
DECL|function|cursorPositionChanged
name|void
name|cursorPositionChanged
parameter_list|()
block|{
if|if
condition|(
name|first
operator|.
name|isEmpty
argument_list|()
condition|)
name|first
operator|=
name|QLatin1String
argument_list|(
literal|"cursorPositionChanged"
argument_list|)
expr_stmt|;
block|}
DECL|function|contentsChange
name|void
name|contentsChange
parameter_list|()
block|{
if|if
condition|(
name|first
operator|.
name|isEmpty
argument_list|()
condition|)
name|first
operator|=
name|QLatin1String
argument_list|(
literal|"contentsChanged"
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|receiveCursorPositionChangedAfterContentsChange
name|void
name|tst_QTextDocument
operator|::
name|receiveCursorPositionChangedAfterContentsChange
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setDocumentLayout
argument_list|(
operator|new
name|MyAbstractTextDocumentLayout
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|Receiver
name|rec
decl_stmt|;
name|connect
argument_list|(
name|doc
argument_list|,
name|SIGNAL
argument_list|(
name|cursorPositionChanged
argument_list|(
name|QTextCursor
argument_list|)
argument_list|)
argument_list|,
operator|&
name|rec
argument_list|,
name|SLOT
argument_list|(
name|cursorPositionChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|doc
argument_list|,
name|SIGNAL
argument_list|(
name|contentsChange
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|rec
argument_list|,
name|SLOT
argument_list|(
name|contentsChange
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|first
argument_list|,
name|QString
argument_list|(
literal|"contentsChanged"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|QTBUG25778_pixelSizeFromHtml
name|void
name|tst_QTextDocument
operator|::
name|QTBUG25778_pixelSizeFromHtml
parameter_list|()
block|{
name|QTextDocument
name|document1
decl_stmt|;
name|QTextDocument
name|document2
decl_stmt|;
name|document1
operator|.
name|setHtml
argument_list|(
literal|"<span style=\"font-size: 24px\">Foobar</span>"
argument_list|)
expr_stmt|;
name|document2
operator|.
name|setHtml
argument_list|(
name|document1
operator|.
name|toHtml
argument_list|()
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursor
argument_list|(
operator|&
name|document2
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|font
argument_list|()
operator|.
name|pixelSize
argument_list|()
argument_list|,
literal|24
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|copiedFontSize
name|void
name|tst_QTextDocument
operator|::
name|copiedFontSize
parameter_list|()
block|{
name|QTextDocument
name|documentInput
decl_stmt|;
name|QTextDocument
name|documentOutput
decl_stmt|;
name|QFont
name|fontInput
decl_stmt|;
name|fontInput
operator|.
name|setPixelSize
argument_list|(
literal|24
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursorInput
argument_list|(
operator|&
name|documentInput
argument_list|)
decl_stmt|;
name|QTextCharFormat
name|formatInput
init|=
name|cursorInput
operator|.
name|charFormat
argument_list|()
decl_stmt|;
name|formatInput
operator|.
name|setFont
argument_list|(
name|fontInput
argument_list|)
expr_stmt|;
name|cursorInput
operator|.
name|insertText
argument_list|(
literal|"Should be the same font"
argument_list|,
name|formatInput
argument_list|)
expr_stmt|;
name|cursorInput
operator|.
name|select
argument_list|(
name|QTextCursor
operator|::
name|Document
argument_list|)
expr_stmt|;
name|QTextDocumentFragment
name|fragmentInput
argument_list|(
name|cursorInput
argument_list|)
decl_stmt|;
name|QString
name|html
init|=
name|fragmentInput
operator|.
name|toHtml
argument_list|()
decl_stmt|;
name|QTextCursor
name|cursorOutput
argument_list|(
operator|&
name|documentOutput
argument_list|)
decl_stmt|;
name|QTextDocumentFragment
name|fragmentOutput
init|=
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|html
argument_list|)
decl_stmt|;
name|cursorOutput
operator|.
name|insertFragment
argument_list|(
name|fragmentOutput
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursorOutput
operator|.
name|charFormat
argument_list|()
operator|.
name|font
argument_list|()
operator|.
name|pixelSize
argument_list|()
argument_list|,
literal|24
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|htmlExportImportBlockCount
name|void
name|tst_QTextDocument
operator|::
name|htmlExportImportBlockCount
parameter_list|()
block|{
name|QTextDocument
name|document
decl_stmt|;
block|{
name|QTextCursor
name|cursor
argument_list|(
operator|&
name|document
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Foo"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Bar"
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|document
operator|.
name|blockCount
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QString
name|html
init|=
name|document
operator|.
name|toHtml
argument_list|()
decl_stmt|;
name|document
operator|.
name|clear
argument_list|()
expr_stmt|;
name|document
operator|.
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|document
operator|.
name|blockCount
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|QTBUG27354_spaceAndSoftSpace
name|void
name|tst_QTextDocument
operator|::
name|QTBUG27354_spaceAndSoftSpace
parameter_list|()
block|{
name|QTextDocument
name|document
decl_stmt|;
block|{
name|QTextCursor
name|cursor
argument_list|(
operator|&
name|document
argument_list|)
decl_stmt|;
name|QTextBlockFormat
name|blockFormat
decl_stmt|;
name|blockFormat
operator|.
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignJustify
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|mergeBlockFormat
argument_list|(
name|blockFormat
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"ac"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|QChar
argument_list|(
literal|0x2028
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Trigger justification of text
name|QImage
name|image
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|image
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|image
argument_list|)
decl_stmt|;
name|document
operator|.
name|drawContents
argument_list|(
operator|&
name|p
argument_list|,
name|image
operator|.
name|rect
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|BaseDocument
class|class
name|BaseDocument
super|:
specifier|public
name|QTextDocument
block|{
public|public:
DECL|function|loadedResource
name|QUrl
name|loadedResource
parameter_list|()
specifier|const
block|{
return|return
name|resourceUrl
return|;
block|}
DECL|function|loadResource
name|QVariant
name|loadResource
parameter_list|(
name|int
name|type
parameter_list|,
specifier|const
name|QUrl
modifier|&
name|name
parameter_list|)
block|{
name|resourceUrl
operator|=
name|name
expr_stmt|;
return|return
name|QTextDocument
operator|::
name|loadResource
argument_list|(
name|type
argument_list|,
name|name
argument_list|)
return|;
block|}
private|private:
DECL|member|resourceUrl
name|QUrl
name|resourceUrl
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|baseUrl_data
name|void
name|tst_QTextDocument
operator|::
name|baseUrl_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QUrl
argument_list|>
argument_list|(
literal|"base"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QUrl
argument_list|>
argument_list|(
literal|"resource"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QUrl
argument_list|>
argument_list|(
literal|"loaded"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|QUrl
argument_list|()
operator|<<
name|QUrl
argument_list|(
literal|"images/logo.png"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"images/logo.png"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"file:///path/to/content"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"images/logo.png"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"file:///path/to/images/logo.png"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"file:///path/to/content/"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"images/logo.png"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"file:///path/to/content/images/logo.png"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"file:///path/to/content/images"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"images/logo.png"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"file:///path/to/content/images/logo.png"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"file:///path/to/content/images/"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"images/logo.png"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"file:///path/to/content/images/images/logo.png"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"file:///path/to/content/images"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"../images/logo.png"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"file:///path/to/images/logo.png"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"7"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"file:///path/to/content/images/"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"../images/logo.png"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"file:///path/to/content/images/logo.png"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"file:///path/to/content/index.html"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"images/logo.png"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"file:///path/to/content/images/logo.png"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|baseUrl
name|void
name|tst_QTextDocument
operator|::
name|baseUrl
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QUrl
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QUrl
argument_list|,
name|resource
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QUrl
argument_list|,
name|loaded
argument_list|)
expr_stmt|;
name|BaseDocument
name|document
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|document
operator|.
name|baseUrl
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|document
operator|.
name|setBaseUrl
argument_list|(
name|base
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|document
operator|.
name|baseUrl
argument_list|()
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|document
operator|.
name|setHtml
argument_list|(
name|QString
argument_list|(
literal|"<img src='%1'/>"
argument_list|)
operator|.
name|arg
argument_list|(
name|resource
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|document
operator|.
name|resource
argument_list|(
name|QTextDocument
operator|::
name|ImageResource
argument_list|,
name|resource
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|document
operator|.
name|loadedResource
argument_list|()
argument_list|,
name|loaded
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|QTBUG28998_linkColor
name|void
name|tst_QTextDocument
operator|::
name|QTBUG28998_linkColor
parameter_list|()
block|{
name|QPalette
name|pal
decl_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Link
argument_list|,
name|QColor
argument_list|(
literal|"tomato"
argument_list|)
argument_list|)
expr_stmt|;
name|QGuiApplication
operator|::
name|setPalette
argument_list|(
name|pal
argument_list|)
expr_stmt|;
name|QTextDocument
name|doc
decl_stmt|;
name|doc
operator|.
name|setHtml
argument_list|(
literal|"<a href=\"http://www.qt-project.org\">Qt</a>"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|blockCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTextBlock
name|block
init|=
name|doc
operator|.
name|firstBlock
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QTextFragment
name|fragment
init|=
name|block
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|fragment
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QTextCharFormat
name|format
init|=
name|fragment
operator|.
name|charFormat
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|format
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format
operator|.
name|isAnchor
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|format
operator|.
name|anchorHref
argument_list|()
argument_list|,
name|QStringLiteral
argument_list|(
literal|"http://www.qt-project.org"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|format
operator|.
name|foreground
argument_list|()
argument_list|,
name|pal
operator|.
name|link
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QTextDocument
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qtextdocument.moc"
end_include
end_unit
