begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QAbstractTextDocumentLayout>
end_include
begin_include
include|#
directive|include
file|<private/qtextdocument_p.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|COMMON_H
end_ifndef
begin_define
DECL|macro|COMMON_H
define|#
directive|define
name|COMMON_H
end_define
begin_decl_stmt
name|class
name|QTestDocumentLayout
range|:
name|public
name|QAbstractTextDocumentLayout
block|{
name|Q_OBJECT
name|public
operator|:
name|QTestDocumentLayout
argument_list|(
name|QTextDocument
operator|*
name|doc
argument_list|)
operator|:
name|QAbstractTextDocumentLayout
argument_list|(
name|doc
argument_list|)
block|,
name|f
argument_list|(
operator|-
literal|1
argument_list|)
block|,
name|called
argument_list|(
argument|false
argument_list|)
block|{}
name|virtual
name|void
name|draw
argument_list|(
argument|QPainter *
argument_list|,
argument|const PaintContext&
argument_list|)
block|{}
name|virtual
name|int
name|hitTest
argument_list|(
argument|const QPointF&
argument_list|,
argument|Qt::HitTestAccuracy
argument_list|)
specifier|const
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|void
name|documentChanged
argument_list|(
argument|int from
argument_list|,
argument|int oldLength
argument_list|,
argument|int length
argument_list|)
block|{
name|called
operator|=
name|true
block|;
name|lastDocumentLengths
operator|.
name|append
argument_list|(
name|document
argument_list|()
operator|->
name|docHandle
argument_list|()
operator|->
name|length
argument_list|()
argument_list|)
block|;
if|if
condition|(
name|f
operator|<
literal|0
condition|)
return|return;
if|if
condition|(
name|from
operator|!=
name|f
operator|||
name|o
operator|!=
name|oldLength
operator|||
name|l
operator|!=
name|length
condition|)
block|{
name|qDebug
argument_list|(
literal|"checkDocumentChanged: got %d %d %d, expected %d %d %d"
argument_list|,
name|from
argument_list|,
name|oldLength
argument_list|,
name|length
argument_list|,
name|f
argument_list|,
name|o
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|error
operator|=
name|true
expr_stmt|;
block|}
block|}
name|virtual
name|int
name|pageCount
argument_list|()
specifier|const
block|{
return|return
literal|1
return|;
block|}
end_decl_stmt
begin_expr_stmt
name|virtual
name|QSizeF
name|documentSize
argument_list|()
specifier|const
block|{
return|return
name|QSizeF
argument_list|()
return|;
block|}
end_expr_stmt
begin_decl_stmt
name|virtual
name|QRectF
name|frameBoundingRect
argument_list|(
name|QTextFrame
operator|*
argument_list|)
decl|const
block|{
return|return
name|QRectF
argument_list|()
return|;
block|}
end_decl_stmt
begin_decl_stmt
name|virtual
name|QRectF
name|blockBoundingRect
argument_list|(
specifier|const
name|QTextBlock
operator|&
argument_list|)
decl|const
block|{
return|return
name|QRectF
argument_list|()
return|;
block|}
end_decl_stmt
begin_decl_stmt
name|int
name|f
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|o
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|l
decl_stmt|;
end_decl_stmt
begin_function
name|void
name|expect
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|oldLength
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|f
operator|=
name|from
expr_stmt|;
name|o
operator|=
name|oldLength
expr_stmt|;
name|l
operator|=
name|length
expr_stmt|;
name|error
operator|=
name|false
expr_stmt|;
name|called
operator|=
name|false
expr_stmt|;
block|}
end_function
begin_decl_stmt
name|bool
name|error
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|bool
name|called
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QList
operator|<
name|int
operator|>
name|lastDocumentLengths
expr_stmt|;
end_expr_stmt
begin_endif
unit|};
endif|#
directive|endif
end_endif
end_unit
