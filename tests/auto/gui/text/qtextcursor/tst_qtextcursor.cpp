begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qtextdocument.h>
end_include
begin_include
include|#
directive|include
file|<qtexttable.h>
end_include
begin_include
include|#
directive|include
file|<qvariant.h>
end_include
begin_include
include|#
directive|include
file|<qtextdocumentfragment.h>
end_include
begin_include
include|#
directive|include
file|<qabstracttextdocumentlayout.h>
end_include
begin_include
include|#
directive|include
file|<qtextlayout.h>
end_include
begin_include
include|#
directive|include
file|<qtextcursor.h>
end_include
begin_include
include|#
directive|include
file|<qtextobject.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<private/qtextcursor_p.h>
end_include
begin_macro
name|QT_FORWARD_DECLARE_CLASS
argument_list|(
argument|QTextDocument
argument_list|)
end_macro
begin_class
DECL|class|tst_QTextCursor
class|class
name|tst_QTextCursor
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QTextCursor
parameter_list|()
constructor_decl|;
public|public
name|slots
public|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|navigation1
parameter_list|()
function_decl|;
name|void
name|navigation2_data
parameter_list|()
function_decl|;
name|void
name|navigation2
parameter_list|()
function_decl|;
name|void
name|navigation3
parameter_list|()
function_decl|;
name|void
name|navigation4
parameter_list|()
function_decl|;
name|void
name|navigation5
parameter_list|()
function_decl|;
name|void
name|navigation6
parameter_list|()
function_decl|;
name|void
name|navigation7
parameter_list|()
function_decl|;
name|void
name|navigation8
parameter_list|()
function_decl|;
name|void
name|navigation9
parameter_list|()
function_decl|;
name|void
name|navigation10
parameter_list|()
function_decl|;
name|void
name|movePositionEndOfLine
parameter_list|()
function_decl|;
name|void
name|insertBlock
parameter_list|()
function_decl|;
name|void
name|insertWithBlockSeparator1
parameter_list|()
function_decl|;
name|void
name|insertWithBlockSeparator2
parameter_list|()
function_decl|;
name|void
name|insertWithBlockSeparator3
parameter_list|()
function_decl|;
name|void
name|insertWithBlockSeparator4
parameter_list|()
function_decl|;
name|void
name|clearObjectType1
parameter_list|()
function_decl|;
name|void
name|clearObjectType2
parameter_list|()
function_decl|;
name|void
name|clearObjectType3
parameter_list|()
function_decl|;
name|void
name|comparisonOperators1
parameter_list|()
function_decl|;
name|void
name|comparisonOperators2
parameter_list|()
function_decl|;
name|void
name|selection1
parameter_list|()
function_decl|;
name|void
name|dontCopyTableAttributes
parameter_list|()
function_decl|;
name|void
name|checkFrame1
parameter_list|()
function_decl|;
name|void
name|checkFrame2
parameter_list|()
function_decl|;
name|void
name|tableMovement
parameter_list|()
function_decl|;
name|void
name|selectionsInTable
parameter_list|()
function_decl|;
name|void
name|insertBlockToUseCharFormat
parameter_list|()
function_decl|;
name|void
name|selectedText
parameter_list|()
function_decl|;
name|void
name|insertBlockShouldRemoveSelection
parameter_list|()
function_decl|;
name|void
name|insertBlockShouldRemoveSelection2
parameter_list|()
function_decl|;
name|void
name|mergeCellShouldUpdateSelection
parameter_list|()
function_decl|;
name|void
name|joinPreviousEditBlock
parameter_list|()
function_decl|;
name|void
name|setBlockFormatInTable
parameter_list|()
function_decl|;
name|void
name|blockCharFormat
parameter_list|()
function_decl|;
name|void
name|blockCharFormat2
parameter_list|()
function_decl|;
name|void
name|blockCharFormat3
parameter_list|()
function_decl|;
name|void
name|blockCharFormatOnSelection
parameter_list|()
function_decl|;
name|void
name|anchorInitialized1
parameter_list|()
function_decl|;
name|void
name|anchorInitialized2
parameter_list|()
function_decl|;
name|void
name|anchorInitialized3
parameter_list|()
function_decl|;
name|void
name|selectWord
parameter_list|()
function_decl|;
name|void
name|selectWordWithSeparators_data
parameter_list|()
function_decl|;
name|void
name|selectWordWithSeparators
parameter_list|()
function_decl|;
name|void
name|startOfWord
parameter_list|()
function_decl|;
name|void
name|selectBlock
parameter_list|()
function_decl|;
name|void
name|selectVisually
parameter_list|()
function_decl|;
name|void
name|insertText
parameter_list|()
function_decl|;
name|void
name|insertFragmentShouldUseCurrentCharFormat
parameter_list|()
function_decl|;
name|void
name|endOfLine
parameter_list|()
function_decl|;
name|void
name|editBlocksDuringRemove
parameter_list|()
function_decl|;
name|void
name|selectAllDuringRemove
parameter_list|()
function_decl|;
name|void
name|update_data
parameter_list|()
function_decl|;
name|void
name|update
parameter_list|()
function_decl|;
name|void
name|disallowSettingObjectIndicesOnCharFormats
parameter_list|()
function_decl|;
name|void
name|blockAndColumnNumber
parameter_list|()
function_decl|;
name|void
name|clearCells
parameter_list|()
function_decl|;
name|void
name|task244408_wordUnderCursor_data
parameter_list|()
function_decl|;
name|void
name|task244408_wordUnderCursor
parameter_list|()
function_decl|;
name|void
name|adjustCursorsOnInsert
parameter_list|()
function_decl|;
name|void
name|cursorPositionWithBlockUndoAndRedo
parameter_list|()
function_decl|;
name|void
name|cursorPositionWithBlockUndoAndRedo2
parameter_list|()
function_decl|;
name|void
name|cursorPositionWithBlockUndoAndRedo3
parameter_list|()
function_decl|;
name|void
name|joinNonEmptyRemovedBlockUserState
parameter_list|()
function_decl|;
private|private:
name|int
name|blockCount
parameter_list|()
function_decl|;
DECL|member|doc
name|QTextDocument
modifier|*
name|doc
decl_stmt|;
DECL|member|cursor
name|QTextCursor
name|cursor
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QTextCursor
name|tst_QTextCursor
operator|::
name|tst_QTextCursor
parameter_list|()
block|{}
end_constructor
begin_function
DECL|function|init
name|void
name|tst_QTextCursor
operator|::
name|init
parameter_list|()
block|{
name|doc
operator|=
operator|new
name|QTextDocument
expr_stmt|;
name|cursor
operator|=
name|QTextCursor
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QTextCursor
operator|::
name|cleanup
parameter_list|()
block|{
name|cursor
operator|=
name|QTextCursor
argument_list|()
expr_stmt|;
operator|delete
name|doc
expr_stmt|;
name|doc
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|navigation1
name|void
name|tst_QTextCursor
operator|::
name|navigation1
parameter_list|()
block|{
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
operator|==
literal|"Hello World"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|deletePreviousChar
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|deletePreviousChar
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|deletePreviousChar
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|deletePreviousChar
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|deletePreviousChar
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|deletePreviousChar
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
name|QTextCursor
name|otherCursor
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|otherCursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|otherCursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Right
argument_list|)
expr_stmt|;
name|cursor
operator|=
name|otherCursor
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Right
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|!=
name|otherCursor
argument_list|)
expr_stmt|;
name|otherCursor
operator|.
name|insertText
argument_list|(
literal|"Hey"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|doc
operator|->
name|redo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
operator|==
literal|"Hello World"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Right
argument_list|,
name|QTextCursor
operator|::
name|MoveAnchor
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|otherCursor
operator|=
name|cursor
expr_stmt|;
name|otherCursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Right
argument_list|,
name|QTextCursor
operator|::
name|MoveAnchor
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|otherCursor
operator|.
name|deletePreviousChar
argument_list|()
expr_stmt|;
name|otherCursor
operator|.
name|deletePreviousChar
argument_list|()
expr_stmt|;
name|otherCursor
operator|.
name|deletePreviousChar
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
block|{
name|int
name|oldPos
init|=
name|cursor
operator|.
name|position
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
name|oldPos
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|atBlockStart
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Test"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fmt
argument_list|,
name|cursor
operator|.
name|charFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|13
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|navigation2_data
name|void
name|tst_QTextCursor
operator|::
name|navigation2_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"sl"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|>
argument_list|(
literal|"movement"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"finalPos"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"startBlock1"
argument_list|)
operator|<<
name|QStringList
argument_list|(
literal|"Happy happy happy joy joy joy"
argument_list|)
operator|<<
operator|(
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|()
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|StartOfBlock
argument_list|)
operator|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"endBlock1"
argument_list|)
operator|<<
name|QStringList
argument_list|(
literal|"Happy happy happy joy joy joy"
argument_list|)
operator|<<
operator|(
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|()
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|StartOfBlock
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|EndOfBlock
argument_list|)
operator|)
operator|<<
literal|29
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"startBlock2"
argument_list|)
operator|<<
name|QStringList
argument_list|(
literal|"Happy happy happy joy joy joy"
argument_list|)
operator|<<
operator|(
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|()
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|StartOfBlock
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|EndOfBlock
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|StartOfBlock
argument_list|)
operator|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"endBlock2"
argument_list|)
operator|<<
name|QStringList
argument_list|(
literal|"Happy happy happy joy joy joy"
argument_list|)
operator|<<
operator|(
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|()
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|StartOfBlock
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|EndOfBlock
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|StartOfBlock
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|EndOfBlock
argument_list|)
operator|)
operator|<<
literal|29
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"multiBlock1"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Happy happy happy"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Joy Joy Joy"
argument_list|)
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|()
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|StartOfBlock
argument_list|)
operator|)
operator|<<
literal|18
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"multiBlock2"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Happy happy happy"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Joy Joy Joy"
argument_list|)
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|()
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|StartOfBlock
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|EndOfBlock
argument_list|)
operator|)
operator|<<
literal|29
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"multiBlock3"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Happy happy happy"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Joy Joy Joy"
argument_list|)
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|()
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|StartOfBlock
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|StartOfBlock
argument_list|)
operator|)
operator|<<
literal|18
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"multiBlock4"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Happy happy happy"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Joy Joy Joy"
argument_list|)
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|()
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|EndOfBlock
argument_list|)
operator|)
operator|<<
literal|17
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"multiBlock5"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Happy happy happy"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Joy Joy Joy"
argument_list|)
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|()
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|EndOfBlock
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|EndOfBlock
argument_list|)
operator|)
operator|<<
literal|17
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"multiBlock6"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Happy happy happy"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Joy Joy Joy"
argument_list|)
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|()
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|StartOfBlock
argument_list|)
operator|)
operator|<<
literal|18
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"multiBlock7"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Happy happy happy"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Joy Joy Joy"
argument_list|)
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|()
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|PreviousBlock
argument_list|)
operator|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"multiBlock8"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Happy happy happy"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Joy Joy Joy"
argument_list|)
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|()
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|PreviousBlock
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|EndOfBlock
argument_list|)
operator|)
operator|<<
literal|17
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"multiBlock9"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Happy happy happy"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Joy Joy Joy"
argument_list|)
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|()
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|PreviousBlock
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
operator|)
operator|<<
literal|18
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"multiBlock10"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Happy happy happy"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Joy Joy Joy"
argument_list|)
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|()
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|PreviousBlock
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
operator|)
operator|<<
literal|18
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"multiBlock11"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Happy happy happy"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Joy Joy Joy"
argument_list|)
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|()
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|PreviousBlock
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|EndOfBlock
argument_list|)
operator|)
operator|<<
literal|29
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"PreviousWord1"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Happy happy happy Joy Joy Joy"
argument_list|)
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|()
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|PreviousWord
argument_list|)
operator|)
operator|<<
literal|26
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"PreviousWord2"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Happy happy happy Joy Joy Joy"
argument_list|)
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|()
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|PreviousWord
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|PreviousWord
argument_list|)
operator|)
operator|<<
literal|22
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"EndWord1"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Happy happy happy Joy Joy Joy"
argument_list|)
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|()
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|PreviousWord
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|PreviousWord
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|EndOfWord
argument_list|)
operator|)
operator|<<
literal|25
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"NextWord1"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Happy happy happy Joy Joy Joy"
argument_list|)
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|()
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|PreviousWord
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|PreviousWord
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|NextWord
argument_list|)
operator|)
operator|<<
literal|26
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"NextWord2"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Happy happy happy Joy Joy Joy"
argument_list|)
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|()
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|NextWord
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|EndOfWord
argument_list|)
operator|)
operator|<<
literal|11
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"StartWord1"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Happy happy happy Joy Joy Joy"
argument_list|)
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|()
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|PreviousWord
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|PreviousWord
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|StartOfWord
argument_list|)
operator|)
operator|<<
literal|22
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"StartWord3"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Happy happy happy Joy Joy Joy"
argument_list|)
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|()
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|NextWord
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|EndOfWord
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|StartOfWord
argument_list|)
operator|)
operator|<<
literal|6
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"PreviousCharacter"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Happy happy Joy Joy"
argument_list|)
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|()
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|PreviousCharacter
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QTextCursor
operator|::
name|PreviousCharacter
argument_list|)
operator|)
operator|<<
literal|17
expr_stmt|;
block|}
end_function
begin_function
DECL|function|navigation2
name|void
name|tst_QTextCursor
operator|::
name|navigation2
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|sl
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|,
name|movement
argument_list|)
expr_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|sl
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|cursor
operator|.
name|insertText
argument_list|(
name|sl
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|sl
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|movement
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|MoveOperation
argument_list|(
name|movement
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|"finalPos"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|navigation3
name|void
name|tst_QTextCursor
operator|::
name|navigation3
parameter_list|()
block|{
name|cursor
operator|.
name|insertText
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|deletePreviousChar
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|navigation4
name|void
name|tst_QTextCursor
operator|::
name|navigation4
parameter_list|()
block|{
name|cursor
operator|.
name|insertText
argument_list|(
literal|"  Test  "
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|EndOfWord
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|navigation5
name|void
name|tst_QTextCursor
operator|::
name|navigation5
parameter_list|()
block|{
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|EndOfBlock
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|navigation6
name|void
name|tst_QTextCursor
operator|::
name|navigation6
parameter_list|()
block|{
comment|// triger creation of document layout, so that QTextLines are there
name|doc
operator|->
name|documentLayout
argument_list|()
expr_stmt|;
name|doc
operator|->
name|setTextWidth
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Test    "
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|EndOfLine
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|navigation7
name|void
name|tst_QTextCursor
operator|::
name|navigation7
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|doc
operator|->
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|QTextCursor
operator|::
name|Start
init|;
name|i
operator|<=
name|QTextCursor
operator|::
name|WordRight
condition|;
operator|++
name|i
control|)
name|QVERIFY
argument_list|(
operator|!
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|MoveOperation
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setPlainText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
do|do
block|{     }
do|while
condition|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
condition|)
do|;
name|QVERIFY
argument_list|(
literal|true
comment|/*reached*/
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|navigation8
name|void
name|tst_QTextCursor
operator|::
name|navigation8
parameter_list|()
block|{
name|cursor
operator|.
name|insertList
argument_list|(
name|QTextListFormat
operator|::
name|ListDecimal
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertList
argument_list|(
name|QTextListFormat
operator|::
name|ListCircle
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"something"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousCharacter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|navigation9
name|void
name|tst_QTextCursor
operator|::
name|navigation9
parameter_list|()
block|{
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello&-=+\t   World"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousWord
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousWord
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousWord
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextWord
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextWord
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|15
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|navigation10
name|void
name|tst_QTextCursor
operator|::
name|navigation10
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<html><p>just a simple paragraph.</p>"
literal|"<table>"
literal|"<tr><td>Cell number 1</td><td>another cell</td><td></td><td>previous</br>is</br>empty</td></tr>"
literal|"<tr><td>row 2</td><td colspan=\"2\">foo bar</td><td>last cell</td></tr>"
literal|"<tr><td colspan=\"3\">row 3</td><td>a</td></tr>"
literal|"</table></html"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|101
argument_list|)
expr_stmt|;
comment|// end of document
name|cursor
operator|.
name|setPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|bool
name|ok
init|=
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|EndOfLine
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|24
argument_list|)
expr_stmt|;
name|ok
operator|=
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|25
argument_list|)
expr_stmt|;
comment|// cell 1
name|ok
operator|=
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCell
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|39
argument_list|)
expr_stmt|;
comment|// another..
name|ok
operator|=
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCell
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|52
argument_list|)
expr_stmt|;
comment|// empty
name|ok
operator|=
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCell
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|53
argument_list|)
expr_stmt|;
comment|// last on row 1
name|ok
operator|=
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCell
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|69
argument_list|)
expr_stmt|;
comment|// row 2
name|ok
operator|=
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCell
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|75
argument_list|)
expr_stmt|;
name|ok
operator|=
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCell
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|83
argument_list|)
expr_stmt|;
name|ok
operator|=
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCell
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|93
argument_list|)
expr_stmt|;
comment|// row 3
name|ok
operator|=
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCell
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|99
argument_list|)
expr_stmt|;
name|ok
operator|=
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCell
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|99
argument_list|)
expr_stmt|;
comment|// didn't move.
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentTable
argument_list|()
argument_list|)
expr_stmt|;
comment|// same thing in reverse...
name|ok
operator|=
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousCell
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|93
argument_list|)
expr_stmt|;
name|ok
operator|=
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousCell
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|83
argument_list|)
expr_stmt|;
name|ok
operator|=
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousCell
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|75
argument_list|)
expr_stmt|;
name|ok
operator|=
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousCell
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|69
argument_list|)
expr_stmt|;
name|ok
operator|=
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousCell
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|53
argument_list|)
expr_stmt|;
name|ok
operator|=
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousCell
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|52
argument_list|)
expr_stmt|;
name|ok
operator|=
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousCell
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|39
argument_list|)
expr_stmt|;
name|ok
operator|=
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousCell
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|ok
operator|=
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousCell
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|25
argument_list|)
expr_stmt|;
comment|// can't leave the table
name|ok
operator|=
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextRow
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|69
argument_list|)
expr_stmt|;
name|ok
operator|=
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextRow
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|93
argument_list|)
expr_stmt|;
name|ok
operator|=
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextRow
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|93
argument_list|)
expr_stmt|;
comment|// didn't move
name|ok
operator|=
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousRow
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|83
argument_list|)
expr_stmt|;
comment|// last col in row 2
name|ok
operator|=
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousRow
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|53
argument_list|)
expr_stmt|;
comment|// last col in row 1
name|ok
operator|=
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousRow
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|53
argument_list|)
expr_stmt|;
comment|// test usecase of jumping over a cell
name|doc
operator|->
name|clear
argument_list|()
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<html><table>tr><td rowspan=\"2\">a</td><td>b</td></tr><tr><td>c</td></tr></table></html>"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// a
name|ok
operator|=
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCell
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// b
name|ok
operator|=
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCell
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// c
name|ok
operator|=
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousCell
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// b
name|ok
operator|=
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousCell
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// a
block|}
end_function
begin_function
DECL|function|insertBlock
name|void
name|tst_QTextCursor
operator|::
name|insertBlock
parameter_list|()
block|{
name|QTextBlockFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setTopMargin
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|blockFormat
argument_list|()
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertWithBlockSeparator1
name|void
name|tst_QTextCursor
operator|::
name|insertWithBlockSeparator1
parameter_list|()
block|{
name|QString
name|text
init|=
literal|"Hello"
operator|+
name|QString
argument_list|(
name|QChar
operator|::
name|ParagraphSeparator
argument_list|)
operator|+
literal|"World"
decl_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousBlock
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertWithBlockSeparator2
name|void
name|tst_QTextCursor
operator|::
name|insertWithBlockSeparator2
parameter_list|()
block|{
name|cursor
operator|.
name|insertText
argument_list|(
name|QString
argument_list|(
name|QChar
operator|::
name|ParagraphSeparator
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertWithBlockSeparator3
name|void
name|tst_QTextCursor
operator|::
name|insertWithBlockSeparator3
parameter_list|()
block|{
name|cursor
operator|.
name|insertText
argument_list|(
name|QString
argument_list|(
name|QChar
operator|::
name|ParagraphSeparator
argument_list|)
operator|+
literal|"Hi"
operator|+
name|QString
argument_list|(
name|QChar
operator|::
name|ParagraphSeparator
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertWithBlockSeparator4
name|void
name|tst_QTextCursor
operator|::
name|insertWithBlockSeparator4
parameter_list|()
block|{
name|cursor
operator|.
name|insertText
argument_list|(
name|QString
argument_list|(
name|QChar
operator|::
name|ParagraphSeparator
argument_list|)
operator|+
name|QString
argument_list|(
name|QChar
operator|::
name|ParagraphSeparator
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearObjectType1
name|void
name|tst_QTextCursor
operator|::
name|clearObjectType1
parameter_list|()
block|{
name|cursor
operator|.
name|insertImage
argument_list|(
literal|"test.png"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|isImageFormat
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hey"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|isImageFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearObjectType2
name|void
name|tst_QTextCursor
operator|::
name|clearObjectType2
parameter_list|()
block|{
name|cursor
operator|.
name|insertImage
argument_list|(
literal|"test.png"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|isImageFormat
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|isImageFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearObjectType3
name|void
name|tst_QTextCursor
operator|::
name|clearObjectType3
parameter_list|()
block|{
comment|// like clearObjectType2 but tests different insertBlock overload
name|cursor
operator|.
name|insertImage
argument_list|(
literal|"test.png"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|isImageFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QTextBlockFormat
name|bfmt
decl_stmt|;
name|bfmt
operator|.
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignRight
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|(
name|bfmt
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|isImageFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|comparisonOperators1
name|void
name|tst_QTextCursor
operator|::
name|comparisonOperators1
parameter_list|()
block|{
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousWord
argument_list|)
expr_stmt|;
name|QTextCursor
name|startCursor
init|=
name|cursor
decl_stmt|;
name|startCursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|startCursor
operator|<
name|cursor
argument_list|)
expr_stmt|;
name|QTextCursor
name|midCursor
init|=
name|startCursor
decl_stmt|;
name|midCursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextWord
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|midCursor
operator|<=
name|cursor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|midCursor
argument_list|,
name|cursor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|midCursor
operator|>=
name|cursor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|midCursor
operator|>
name|startCursor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|midCursor
operator|!=
name|startCursor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|midCursor
operator|==
name|startCursor
operator|)
argument_list|)
expr_stmt|;
name|QTextCursor
name|nullCursor
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|startCursor
operator|<
name|nullCursor
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|nullCursor
operator|<
name|nullCursor
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullCursor
operator|<
name|startCursor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullCursor
operator|<=
name|startCursor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|startCursor
operator|<=
name|nullCursor
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|nullCursor
operator|>=
name|startCursor
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|startCursor
operator|>=
name|nullCursor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|nullCursor
operator|>
name|startCursor
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|nullCursor
operator|>
name|nullCursor
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|startCursor
operator|>
name|nullCursor
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|comparisonOperators2
name|void
name|tst_QTextCursor
operator|::
name|comparisonOperators2
parameter_list|()
block|{
name|QTextDocument
name|doc1
decl_stmt|;
name|QTextDocument
name|doc2
decl_stmt|;
name|QTextCursor
name|cursor1
argument_list|(
operator|&
name|doc1
argument_list|)
decl_stmt|;
name|QTextCursor
name|cursor2
argument_list|(
operator|&
name|doc2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|cursor1
operator|!=
name|cursor2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor1
argument_list|,
name|QTextCursor
argument_list|(
operator|&
name|doc1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|selection1
name|void
name|tst_QTextCursor
operator|::
name|selection1
parameter_list|()
block|{
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
literal|4
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionStart
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionEnd
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dontCopyTableAttributes
name|void
name|tst_QTextCursor
operator|::
name|dontCopyTableAttributes
parameter_list|()
block|{
comment|/* when pressing 'enter' inside a cell it shouldn't      * enlarge the table by adding another cell but just      * extend the cell */
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|insertTable
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|==
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|columns
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|checkFrame1
name|void
name|tst_QTextCursor
operator|::
name|checkFrame1
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QPointer
argument_list|<
name|QTextFrame
argument_list|>
name|frame
init|=
name|cursor
operator|.
name|insertFrame
argument_list|(
name|QTextFrameFormat
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|frame
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QTextFrame
modifier|*
name|root
init|=
name|frame
operator|->
name|parentFrame
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|root
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|frame
operator|->
name|firstPosition
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|frame
operator|->
name|lastPosition
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|frame
operator|->
name|parentFrame
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|root
operator|->
name|childFrames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionStart
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionEnd
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|frame
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|root
operator|->
name|childFrames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionStart
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionEnd
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|doc
operator|->
name|redo
argument_list|()
expr_stmt|;
name|frame
operator|=
name|doc
operator|->
name|frameAt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|frame
operator|->
name|firstPosition
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|frame
operator|->
name|lastPosition
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|frame
operator|->
name|parentFrame
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|root
operator|->
name|childFrames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionStart
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionEnd
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//     cursor.movePosition(QTextCursor::Right, QTextCursor::KeepAnchor);
comment|//     QCOMPARE(cursor.position(), 2);
comment|//     QCOMPARE(cursor.selectionStart(), 0);
comment|//     QCOMPARE(cursor.selectionEnd(), 2);
block|}
end_function
begin_function
DECL|function|checkFrame2
name|void
name|tst_QTextCursor
operator|::
name|checkFrame2
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|QPointer
argument_list|<
name|QTextFrame
argument_list|>
name|frame
init|=
name|cursor
operator|.
name|insertFrame
argument_list|(
name|QTextFrameFormat
argument_list|()
argument_list|)
decl_stmt|;
name|QTextFrame
modifier|*
name|root
init|=
name|frame
operator|->
name|parentFrame
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|frame
operator|->
name|firstPosition
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|frame
operator|->
name|lastPosition
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|frame
operator|->
name|parentFrame
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|root
operator|->
name|childFrames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionStart
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionEnd
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|frame
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|root
operator|->
name|childFrames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionStart
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionEnd
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doc
operator|->
name|redo
argument_list|()
expr_stmt|;
name|frame
operator|=
name|doc
operator|->
name|frameAt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|frame
operator|->
name|firstPosition
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|frame
operator|->
name|lastPosition
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|frame
operator|->
name|parentFrame
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|root
operator|->
name|childFrames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionStart
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionEnd
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Left
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionStart
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionEnd
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertBlockToUseCharFormat
name|void
name|tst_QTextCursor
operator|::
name|insertBlockToUseCharFormat
parameter_list|()
block|{
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello\nWorld"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
argument_list|)
expr_stmt|;
comment|// ### we might want a testcase for createTable, too, as it calls insertBlock, too,
comment|// and we might want to have the char format copied (the one that gets inserted
comment|// as table separators, that are undeletable)
block|}
end_function
begin_function
DECL|function|tableMovement
name|void
name|tst_QTextCursor
operator|::
name|tableMovement
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"AA"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Left
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertTable
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Down
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Right
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Up
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Right
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Right
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Up
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Up
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|selectionsInTable
name|void
name|tst_QTextCursor
operator|::
name|selectionsInTable
parameter_list|()
block|{
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|insertTable
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|insertText
argument_list|(
literal|"A a"
argument_list|)
expr_stmt|;
comment|// first = 1
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|insertText
argument_list|(
literal|"B b"
argument_list|)
expr_stmt|;
comment|// first = 5
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|insertText
argument_list|(
literal|"C c"
argument_list|)
expr_stmt|;
comment|// first = 9
name|table
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|insertText
argument_list|(
literal|"D d"
argument_list|)
expr_stmt|;
comment|// first = 13
name|table
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|insertText
argument_list|(
literal|"E e"
argument_list|)
expr_stmt|;
comment|// first = 17
name|table
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|insertText
argument_list|(
literal|"F f"
argument_list|)
expr_stmt|;
comment|// first = 21
name|table
operator|->
name|cellAt
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|insertText
argument_list|(
literal|"G g"
argument_list|)
expr_stmt|;
comment|// first = 25
name|table
operator|->
name|cellAt
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|insertText
argument_list|(
literal|"H h"
argument_list|)
expr_stmt|;
comment|// first = 29
name|table
operator|->
name|cellAt
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|insertText
argument_list|(
literal|"I i"
argument_list|)
expr_stmt|;
comment|// first = 33
name|cursor
operator|=
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|lastCursorPosition
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousWord
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousWord
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousWord
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|=
name|table
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
operator|.
name|lastCursorPosition
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousWord
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousWord
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousWord
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|cursor
operator|=
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextWord
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextWord
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextWord
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
name|cursor
operator|=
name|table
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextWord
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextWord
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextWord
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
comment|// Next let's test selecting entire cells one at a time
name|cursor
operator|=
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCell
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCell
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCell
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCell
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|17
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCell
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|21
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCell
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCell
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|29
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCell
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|33
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCell
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
comment|// And now lets walk all the way back
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousCell
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|29
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousCell
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousCell
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|21
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousCell
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|17
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousCell
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousCell
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousCell
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousCell
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousCell
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
name|QTextCursor
operator|::
name|MoveOperation
name|leftMovements
index|[
literal|5
index|]
init|=
block|{
name|QTextCursor
operator|::
name|PreviousBlock
block|,
name|QTextCursor
operator|::
name|PreviousCharacter
block|,
name|QTextCursor
operator|::
name|PreviousWord
block|,
name|QTextCursor
operator|::
name|Left
block|,
name|QTextCursor
operator|::
name|WordLeft
block|}
decl_stmt|;
name|QTextCursor
operator|::
name|MoveOperation
name|rightMovements
index|[
literal|5
index|]
init|=
block|{
name|QTextCursor
operator|::
name|NextBlock
block|,
name|QTextCursor
operator|::
name|NextCharacter
block|,
name|QTextCursor
operator|::
name|NextWord
block|,
name|QTextCursor
operator|::
name|Right
block|,
name|QTextCursor
operator|::
name|WordRight
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
name|QTextCursor
operator|::
name|MoveOperation
name|left
init|=
name|leftMovements
index|[
name|i
index|]
decl_stmt|;
name|QTextCursor
operator|::
name|MoveOperation
name|right
init|=
name|rightMovements
index|[
name|i
index|]
decl_stmt|;
comment|// Lets walk circle around anchor placed at 1,1 using up, down, left and right
name|cursor
operator|=
name|table
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|17
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Right
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|18
argument_list|)
expr_stmt|;
comment|// First right should not jump more than one char
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCell
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|21
argument_list|)
expr_stmt|;
comment|// Lets jump to the next cell
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Down
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|33
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|left
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|29
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|left
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Up
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Up
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|right
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|right
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Down
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|21
argument_list|)
expr_stmt|;
comment|// Lets walk to the side 2 cells and back, first right
name|cursor
operator|=
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCell
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// Lets jump to the next cell
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|right
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|left
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|left
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
operator|<
literal|5
argument_list|)
expr_stmt|;
comment|// Then left
name|cursor
operator|=
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|left
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// A single left should do
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|left
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|right
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|right
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|selectedText
name|void
name|tst_QTextCursor
operator|::
name|selectedText
parameter_list|()
block|{
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectedText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hello World"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertBlockShouldRemoveSelection
name|void
name|tst_QTextCursor
operator|::
name|insertBlockShouldRemoveSelection
parameter_list|()
block|{
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|EndOfWord
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|hasSelection
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectedText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cursor
operator|.
name|hasSelection
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"Hello"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertBlockShouldRemoveSelection2
name|void
name|tst_QTextCursor
operator|::
name|insertBlockShouldRemoveSelection2
parameter_list|()
block|{
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|EndOfWord
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|hasSelection
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectedText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
name|QTextBlockFormat
name|fmt
init|=
name|cursor
operator|.
name|blockFormat
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cursor
operator|.
name|hasSelection
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"Hello"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mergeCellShouldUpdateSelection
name|void
name|tst_QTextCursor
operator|::
name|mergeCellShouldUpdateSelection
parameter_list|()
block|{
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|insertTable
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstPosition
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|)
operator|.
name|firstPosition
argument_list|()
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
comment|// aka bottom left
name|int
name|firstRow
decl_stmt|,
name|numRows
decl_stmt|,
name|firstColumn
decl_stmt|,
name|numColumns
decl_stmt|;
name|cursor
operator|.
name|selectedTableCells
argument_list|(
operator|&
name|firstRow
argument_list|,
operator|&
name|numRows
argument_list|,
operator|&
name|firstColumn
argument_list|,
operator|&
name|numColumns
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|firstRow
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|numRows
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|firstColumn
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|numColumns
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|table
operator|->
name|removeColumns
argument_list|(
name|firstColumn
argument_list|,
name|numColumns
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|anchor
argument_list|()
argument_list|,
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstPosition
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstPosition
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
name|cursor
operator|.
name|anchor
argument_list|()
argument_list|)
expr_stmt|;
comment|// empty. I don't really care where it ends up.
comment|// prepare for another test with multiple cursors.
comment|// note we have a 4 rows, 3 cols table now.
name|cursor
operator|.
name|setPosition
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstPosition
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
operator|.
name|firstPosition
argument_list|()
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
comment|// now create a selection of a whole row.
name|QTextCursor
name|c2
init|=
name|table
operator|->
name|cellAt
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
decl_stmt|;
name|c2
operator|.
name|setPosition
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
operator|.
name|firstPosition
argument_list|()
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
comment|// just for good measure, another one for a block of cells.
name|QTextCursor
name|c3
init|=
name|table
operator|->
name|cellAt
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
decl_stmt|;
name|c3
operator|.
name|setPosition
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
operator|.
name|firstPosition
argument_list|()
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|table
operator|->
name|removeRows
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|anchor
argument_list|()
argument_list|,
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstPosition
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
operator|.
name|firstPosition
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c2
operator|.
name|position
argument_list|()
argument_list|,
name|c2
operator|.
name|anchor
argument_list|()
argument_list|)
expr_stmt|;
comment|// empty. I don't really care where it ends up.
name|QCOMPARE
argument_list|(
name|c3
operator|.
name|anchor
argument_list|()
argument_list|,
name|table
operator|->
name|cellAt
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|firstPosition
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c3
operator|.
name|position
argument_list|()
argument_list|,
name|table
operator|->
name|cellAt
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
operator|.
name|firstPosition
argument_list|()
argument_list|)
expr_stmt|;
comment|// prepare for another test where we remove a column
comment|// note we have a 3 rows, 3 cols table now.
name|cursor
operator|.
name|setPosition
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstPosition
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|firstPosition
argument_list|()
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|c2
operator|.
name|setPosition
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|firstPosition
argument_list|()
argument_list|)
expr_stmt|;
name|c2
operator|.
name|setPosition
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
operator|.
name|firstPosition
argument_list|()
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|table
operator|->
name|removeColumns
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|anchor
argument_list|()
argument_list|,
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstPosition
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
name|table
operator|->
name|cellAt
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
operator|.
name|firstPosition
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c2
operator|.
name|anchor
argument_list|()
argument_list|,
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|firstPosition
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c2
operator|.
name|position
argument_list|()
argument_list|,
name|table
operator|->
name|cellAt
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|firstPosition
argument_list|()
argument_list|)
expr_stmt|;
comment|// test for illegal cursor positions.
comment|// note we have a 3 rows, 2 cols table now.
name|cursor
operator|.
name|setPosition
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
operator|.
name|firstPosition
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|firstPosition
argument_list|()
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|c2
operator|.
name|setPosition
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstPosition
argument_list|()
argument_list|)
expr_stmt|;
name|c2
operator|.
name|setPosition
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|firstPosition
argument_list|()
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|c3
operator|.
name|setPosition
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|firstPosition
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|->
name|removeRows
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|anchor
argument_list|()
argument_list|,
name|table
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|lastPosition
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
name|cursor
operator|.
name|anchor
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c2
operator|.
name|anchor
argument_list|()
argument_list|,
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstPosition
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c2
operator|.
name|position
argument_list|()
argument_list|,
name|table
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|firstPosition
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c3
operator|.
name|anchor
argument_list|()
argument_list|,
name|table
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|firstPosition
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c3
operator|.
name|position
argument_list|()
argument_list|,
name|table
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|firstPosition
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|joinPreviousEditBlock
name|void
name|tst_QTextCursor
operator|::
name|joinPreviousEditBlock
parameter_list|()
block|{
name|cursor
operator|.
name|beginEditBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"World"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|endEditBlock
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"HelloWorld"
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|joinPreviousEditBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hey"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|endEditBlock
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"HelloWorldHey"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|doc
operator|->
name|toPlainText
argument_list|()
operator|.
name|contains
argument_list|(
literal|"HelloWorldHey"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setBlockFormatInTable
name|void
name|tst_QTextCursor
operator|::
name|setBlockFormatInTable
parameter_list|()
block|{
comment|// someone reported this on qt4-preview-feedback
name|QTextBlockFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setBackground
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setBlockFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|insertTable
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|cursor
operator|=
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
expr_stmt|;
name|fmt
operator|.
name|setBackground
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setBlockFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|blockFormat
argument_list|()
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|blockCharFormat2
name|void
name|tst_QTextCursor
operator|::
name|blockCharFormat2
parameter_list|()
block|{
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|mergeBlockCharFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Test"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Red"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousCharacter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|blockCharFormat3
name|void
name|tst_QTextCursor
operator|::
name|blockCharFormat3
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|atBlockStart
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|atBlockEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|atStart
argument_list|()
argument_list|)
expr_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setBlockCharFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
specifier|const
name|QColor
name|red
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
decl_stmt|;
specifier|const
name|QColor
name|green
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|green
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|green
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setBlockCharFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|blockCharFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|red
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|green
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|green
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|select
argument_list|(
name|QTextCursor
operator|::
name|Document
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|removeSelectedText
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|atBlockStart
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|atBlockEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|atStart
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|red
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|blockCharFormat
name|void
name|tst_QTextCursor
operator|::
name|blockCharFormat
parameter_list|()
block|{
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|(
name|QTextBlockFormat
argument_list|()
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hm"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|blockCharFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setBlockCharFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|blockCharFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|blockCharFormatOnSelection
name|void
name|tst_QTextCursor
operator|::
name|blockCharFormatOnSelection
parameter_list|()
block|{
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|(
name|QTextBlockFormat
argument_list|()
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hm"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|(
name|QTextBlockFormat
argument_list|()
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Ah"
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|(
name|QTextBlockFormat
argument_list|()
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"bleh"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|blockCharFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|blockCharFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|blockCharFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|Qt
operator|::
name|cyan
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setBlockCharFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|blockCharFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|cyan
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Right
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Right
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|blockCharFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|cyan
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|blockCharFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|anchorInitialized1
name|void
name|tst_QTextCursor
operator|::
name|anchorInitialized1
parameter_list|()
block|{
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|cursor
operator|=
name|QTextCursor
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|anchor
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionStart
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionEnd
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|anchorInitialized2
name|void
name|tst_QTextCursor
operator|::
name|anchorInitialized2
parameter_list|()
block|{
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|cursor
operator|=
name|QTextCursorPrivate
operator|::
name|fromPosition
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|docHandle
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|anchor
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionStart
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionEnd
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|anchorInitialized3
name|void
name|tst_QTextCursor
operator|::
name|anchorInitialized3
parameter_list|()
block|{
name|QTextFrame
modifier|*
name|frame
init|=
name|cursor
operator|.
name|insertFrame
argument_list|(
name|QTextFrameFormat
argument_list|()
argument_list|)
decl_stmt|;
name|cursor
operator|=
name|QTextCursor
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|anchor
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionStart
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionEnd
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|selectWord
name|void
name|tst_QTextCursor
operator|::
name|selectWord
parameter_list|()
block|{
name|cursor
operator|.
name|insertText
argument_list|(
literal|"first second     third"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"words in second paragraph"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|select
argument_list|(
name|QTextCursor
operator|::
name|WordUnderCursor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|hasSelection
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionStart
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionEnd
argument_list|()
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|select
argument_list|(
name|QTextCursor
operator|::
name|WordUnderCursor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|hasSelection
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionStart
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionEnd
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|select
argument_list|(
name|QTextCursor
operator|::
name|WordUnderCursor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|hasSelection
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionStart
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionEnd
argument_list|()
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
literal|14
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|select
argument_list|(
name|QTextCursor
operator|::
name|WordUnderCursor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|hasSelection
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionStart
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionEnd
argument_list|()
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|select
argument_list|(
name|QTextCursor
operator|::
name|WordUnderCursor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|hasSelection
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionStart
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionEnd
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|EndOfBlock
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|select
argument_list|(
name|QTextCursor
operator|::
name|WordUnderCursor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|hasSelection
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionStart
argument_list|()
argument_list|,
literal|17
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectionEnd
argument_list|()
argument_list|,
literal|22
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|selectWordWithSeparators_data
name|void
name|tst_QTextCursor
operator|::
name|selectWordWithSeparators_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"text"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"initialPosition"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedSelectedText"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dereference"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"foo->bar()"
argument_list|)
operator|<<
literal|1
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"funcsignature"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"bar(int x);"
argument_list|)
operator|<<
literal|1
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"def"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"foo *f;"
argument_list|)
operator|<<
literal|1
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|selectWordWithSeparators
name|void
name|tst_QTextCursor
operator|::
name|selectWordWithSeparators
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|initialPosition
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedSelectedText
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|initialPosition
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|select
argument_list|(
name|QTextCursor
operator|::
name|WordUnderCursor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectedText
argument_list|()
argument_list|,
name|expectedSelectedText
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|startOfWord
name|void
name|tst_QTextCursor
operator|::
name|startOfWord
parameter_list|()
block|{
name|cursor
operator|.
name|insertText
argument_list|(
literal|"first     second"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|StartOfWord
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|selectBlock
name|void
name|tst_QTextCursor
operator|::
name|selectBlock
parameter_list|()
block|{
name|cursor
operator|.
name|insertText
argument_list|(
literal|"foobar"
argument_list|)
expr_stmt|;
name|QTextBlockFormat
name|blockFmt
decl_stmt|;
name|blockFmt
operator|.
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignHCenter
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|(
name|blockFmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"blah"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|(
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousBlock
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"blah"
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|select
argument_list|(
name|QTextCursor
operator|::
name|BlockUnderCursor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|hasSelection
argument_list|()
argument_list|)
expr_stmt|;
name|QTextDocumentFragment
name|fragment
argument_list|(
name|cursor
argument_list|)
decl_stmt|;
name|doc
operator|->
name|clear
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|fragment
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|blockCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|blockFormat
argument_list|()
operator|.
name|alignment
argument_list|()
argument_list|,
name|Qt
operator|::
name|AlignHCenter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"blah"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|selectVisually
name|void
name|tst_QTextCursor
operator|::
name|selectVisually
parameter_list|()
block|{
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Foo\nlong line which is probably going to be cut in two when shown in a widget\nparagraph 3\n"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
literal|6
argument_list|)
expr_stmt|;
comment|// somewhere in the long paragraph.
name|cursor
operator|.
name|select
argument_list|(
name|QTextCursor
operator|::
name|LineUnderCursor
argument_list|)
expr_stmt|;
comment|// since we are not yet laid-out, we expect the whole paragraph to be selected.
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|77
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|anchor
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertText
name|void
name|tst_QTextCursor
operator|::
name|insertText
parameter_list|()
block|{
name|QString
name|txt
init|=
literal|"Foo\nBar\r\nMeep"
decl_stmt|;
name|txt
operator|+=
name|QChar
operator|::
name|LineSeparator
expr_stmt|;
name|txt
operator|+=
literal|"Baz"
expr_stmt|;
name|txt
operator|+=
name|QChar
operator|::
name|ParagraphSeparator
expr_stmt|;
name|txt
operator|+=
literal|"yoyodyne"
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|txt
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|blockCount
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Bar"
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
name|QString
argument_list|(
literal|"Meep"
argument_list|)
operator|+
name|QChar
argument_list|(
name|QChar
operator|::
name|LineSeparator
argument_list|)
operator|+
name|QString
argument_list|(
literal|"Baz"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"yoyodyne"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertFragmentShouldUseCurrentCharFormat
name|void
name|tst_QTextCursor
operator|::
name|insertFragmentShouldUseCurrentCharFormat
parameter_list|()
block|{
name|QTextDocumentFragment
name|fragment
init|=
name|QTextDocumentFragment
operator|::
name|fromPlainText
argument_list|(
literal|"Hello World"
argument_list|)
decl_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setFontUnderline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|setCharFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|fragment
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|blockCount
name|int
name|tst_QTextCursor
operator|::
name|blockCount
parameter_list|()
block|{
name|int
name|cnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|QTextBlock
name|blk
init|=
name|doc
operator|->
name|begin
argument_list|()
init|;
name|blk
operator|.
name|isValid
argument_list|()
condition|;
name|blk
operator|=
name|blk
operator|.
name|next
argument_list|()
control|)
operator|++
name|cnt
expr_stmt|;
return|return
name|cnt
return|;
block|}
end_function
begin_function
DECL|function|endOfLine
name|void
name|tst_QTextCursor
operator|::
name|endOfLine
parameter_list|()
block|{
name|doc
operator|->
name|setPageSize
argument_list|(
name|QSizeF
argument_list|(
literal|100000
argument_list|,
name|INT_MAX
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|text
argument_list|(
literal|"First Line    \nSecond Line  "
argument_list|)
decl_stmt|;
name|text
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|,
name|QChar
argument_list|(
name|QChar
operator|::
name|LineSeparator
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|text
argument_list|)
expr_stmt|;
comment|// ensure layouted
name|doc
operator|->
name|documentLayout
argument_list|()
operator|->
name|documentSize
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|layout
argument_list|()
operator|->
name|lineCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|EndOfLine
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|EndOfLine
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|28
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|CursorListener
class|class
name|CursorListener
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|CursorListener
name|CursorListener
parameter_list|(
name|QTextCursor
modifier|*
name|_cursor
parameter_list|)
member_init_list|:
name|lastRecordedPosition
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|lastRecordedAnchor
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|recordingCount
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|cursor
argument_list|(
name|_cursor
argument_list|)
block|{}
DECL|member|lastRecordedPosition
name|int
name|lastRecordedPosition
decl_stmt|;
DECL|member|lastRecordedAnchor
name|int
name|lastRecordedAnchor
decl_stmt|;
DECL|member|recordingCount
name|int
name|recordingCount
decl_stmt|;
public|public
name|slots
public|:
DECL|function|recordCursorPosition
name|void
name|recordCursorPosition
parameter_list|()
block|{
name|lastRecordedPosition
operator|=
name|cursor
operator|->
name|position
argument_list|()
expr_stmt|;
name|lastRecordedAnchor
operator|=
name|cursor
operator|->
name|anchor
argument_list|()
expr_stmt|;
operator|++
name|recordingCount
expr_stmt|;
block|}
DECL|function|selectAllContents
name|void
name|selectAllContents
parameter_list|()
block|{
comment|// Only test the first time
if|if
condition|(
operator|!
name|recordingCount
condition|)
block|{
name|recordingCount
operator|++
expr_stmt|;
name|cursor
operator|->
name|select
argument_list|(
name|QTextCursor
operator|::
name|Document
argument_list|)
expr_stmt|;
name|lastRecordedPosition
operator|=
name|cursor
operator|->
name|position
argument_list|()
expr_stmt|;
name|lastRecordedAnchor
operator|=
name|cursor
operator|->
name|anchor
argument_list|()
expr_stmt|;
block|}
block|}
private|private:
DECL|member|cursor
name|QTextCursor
modifier|*
name|cursor
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|editBlocksDuringRemove
name|void
name|tst_QTextCursor
operator|::
name|editBlocksDuringRemove
parameter_list|()
block|{
name|CursorListener
name|listener
argument_list|(
operator|&
name|cursor
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectedText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hello World"
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|doc
argument_list|,
name|SIGNAL
argument_list|(
name|contentsChanged
argument_list|()
argument_list|)
argument_list|,
operator|&
name|listener
argument_list|,
name|SLOT
argument_list|(
name|recordCursorPosition
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|listener
operator|.
name|recordingCount
operator|=
literal|0
expr_stmt|;
name|cursor
operator|.
name|deleteChar
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|listener
operator|.
name|recordingCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|listener
operator|.
name|lastRecordedPosition
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|listener
operator|.
name|lastRecordedAnchor
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|selectAllDuringRemove
name|void
name|tst_QTextCursor
operator|::
name|selectAllDuringRemove
parameter_list|()
block|{
name|CursorListener
name|listener
argument_list|(
operator|&
name|cursor
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|doc
argument_list|,
name|SIGNAL
argument_list|(
name|contentsChanged
argument_list|()
argument_list|)
argument_list|,
operator|&
name|listener
argument_list|,
name|SLOT
argument_list|(
name|selectAllContents
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|listener
operator|.
name|recordingCount
operator|=
literal|0
expr_stmt|;
name|QTextCursor
name|localCursor
init|=
name|cursor
decl_stmt|;
name|localCursor
operator|.
name|deletePreviousChar
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|listener
operator|.
name|lastRecordedPosition
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|listener
operator|.
name|lastRecordedAnchor
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|update_data
name|void
name|tst_QTextCursor
operator|::
name|update_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"text"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"position"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"anchor"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"modifyPosition"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"modifyAnchor"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"insertText"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedPosition"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedAnchor"
argument_list|)
expr_stmt|;
name|QString
name|text
argument_list|(
literal|"Hello big world"
argument_list|)
decl_stmt|;
name|int
name|charsToDelete
init|=
literal|3
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"removeInsideSelection"
argument_list|)
operator|<<
name|text
operator|<<
comment|/*position*/
literal|0
operator|<<
comment|/*anchor*/
name|text
operator|.
name|length
argument_list|()
comment|// delete 'big'
operator|<<
literal|6
operator|<<
literal|6
operator|+
name|charsToDelete
operator|<<
name|QString
argument_list|()
comment|// don't insert anything, just remove
operator|<<
comment|/*expectedPosition*/
literal|0
operator|<<
comment|/*expectedAnchor*/
name|text
operator|.
name|length
argument_list|()
operator|-
name|charsToDelete
expr_stmt|;
name|text
operator|=
literal|"Hello big world"
expr_stmt|;
name|charsToDelete
operator|=
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"removeInsideSelectionWithSwappedAnchorAndPosition"
argument_list|)
operator|<<
name|text
operator|<<
comment|/*position*/
name|text
operator|.
name|length
argument_list|()
operator|<<
comment|/*anchor*/
literal|0
comment|// delete 'big'
operator|<<
literal|6
operator|<<
literal|6
operator|+
name|charsToDelete
operator|<<
name|QString
argument_list|()
comment|// don't insert anything, just remove
operator|<<
comment|/*expectedPosition*/
name|text
operator|.
name|length
argument_list|()
operator|-
name|charsToDelete
operator|<<
comment|/*expectedAnchor*/
literal|0
expr_stmt|;
name|text
operator|=
literal|"Hello big world"
expr_stmt|;
name|charsToDelete
operator|=
literal|3
expr_stmt|;
name|QString
name|textToInsert
argument_list|(
literal|"small"
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"replaceInsideSelection"
argument_list|)
operator|<<
name|text
operator|<<
comment|/*position*/
literal|0
operator|<<
comment|/*anchor*/
name|text
operator|.
name|length
argument_list|()
comment|// delete 'big' ...
operator|<<
literal|6
operator|<<
literal|6
operator|+
name|charsToDelete
operator|<<
name|textToInsert
comment|// ... and replace 'big' with 'small'
operator|<<
comment|/*expectedPosition*/
literal|0
operator|<<
comment|/*expectedAnchor*/
name|text
operator|.
name|length
argument_list|()
operator|-
name|charsToDelete
operator|+
name|textToInsert
operator|.
name|length
argument_list|()
expr_stmt|;
name|text
operator|=
literal|"Hello big world"
expr_stmt|;
name|charsToDelete
operator|=
literal|3
expr_stmt|;
name|textToInsert
operator|=
literal|"small"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"replaceInsideSelectionWithSwappedAnchorAndPosition"
argument_list|)
operator|<<
name|text
operator|<<
comment|/*position*/
name|text
operator|.
name|length
argument_list|()
operator|<<
comment|/*anchor*/
literal|0
comment|// delete 'big' ...
operator|<<
literal|6
operator|<<
literal|6
operator|+
name|charsToDelete
operator|<<
name|textToInsert
comment|// ... and replace 'big' with 'small'
operator|<<
comment|/*expectedPosition*/
name|text
operator|.
name|length
argument_list|()
operator|-
name|charsToDelete
operator|+
name|textToInsert
operator|.
name|length
argument_list|()
operator|<<
comment|/*expectedAnchor*/
literal|0
expr_stmt|;
name|text
operator|=
literal|"Hello big world"
expr_stmt|;
name|charsToDelete
operator|=
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"removeBeforeSelection"
argument_list|)
operator|<<
name|text
operator|<<
comment|/*position*/
name|text
operator|.
name|length
argument_list|()
operator|-
literal|5
operator|<<
comment|/*anchor*/
name|text
operator|.
name|length
argument_list|()
comment|// delete 'big'
operator|<<
literal|6
operator|<<
literal|6
operator|+
name|charsToDelete
operator|<<
name|QString
argument_list|()
comment|// don't insert anything, just remove
operator|<<
comment|/*expectedPosition*/
name|text
operator|.
name|length
argument_list|()
operator|-
literal|5
operator|-
name|charsToDelete
operator|<<
comment|/*expectedAnchor*/
name|text
operator|.
name|length
argument_list|()
operator|-
name|charsToDelete
expr_stmt|;
name|text
operator|=
literal|"Hello big world"
expr_stmt|;
name|charsToDelete
operator|=
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"removeAfterSelection"
argument_list|)
operator|<<
name|text
operator|<<
comment|/*position*/
literal|0
operator|<<
comment|/*anchor*/
literal|4
comment|// delete 'big'
operator|<<
literal|6
operator|<<
literal|6
operator|+
name|charsToDelete
operator|<<
name|QString
argument_list|()
comment|// don't insert anything, just remove
operator|<<
comment|/*expectedPosition*/
literal|0
operator|<<
comment|/*expectedAnchor*/
literal|4
expr_stmt|;
block|}
end_function
begin_function
DECL|function|update
name|void
name|tst_QTextCursor
operator|::
name|update
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setPlainText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|anchor
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|anchor
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|position
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|anchor
argument_list|()
argument_list|,
name|anchor
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|modifyPosition
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|modifyAnchor
argument_list|)
expr_stmt|;
name|QTextCursor
name|modifyCursor
init|=
name|cursor
decl_stmt|;
name|modifyCursor
operator|.
name|setPosition
argument_list|(
name|modifyAnchor
argument_list|)
expr_stmt|;
name|modifyCursor
operator|.
name|setPosition
argument_list|(
name|modifyPosition
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|modifyCursor
operator|.
name|position
argument_list|()
argument_list|,
name|modifyPosition
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|modifyCursor
operator|.
name|anchor
argument_list|()
argument_list|,
name|modifyAnchor
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|insertText
argument_list|)
expr_stmt|;
name|modifyCursor
operator|.
name|insertText
argument_list|(
name|insertText
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedPosition
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedAnchor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
name|expectedPosition
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|anchor
argument_list|()
argument_list|,
name|expectedAnchor
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|disallowSettingObjectIndicesOnCharFormats
name|void
name|tst_QTextCursor
operator|::
name|disallowSettingObjectIndicesOnCharFormats
parameter_list|()
block|{
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setObjectIndex
argument_list|(
literal|42
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hey"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|objectIndex
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|select
argument_list|(
name|QTextCursor
operator|::
name|Document
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|mergeCharFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|objectIndex
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|select
argument_list|(
name|QTextCursor
operator|::
name|Document
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setCharFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|objectIndex
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setBlockCharFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|blockCharFormat
argument_list|()
operator|.
name|objectIndex
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|(
name|QTextBlockFormat
argument_list|()
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|blockCharFormat
argument_list|()
operator|.
name|objectIndex
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|doc
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|insertTable
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|select
argument_list|(
name|QTextCursor
operator|::
name|Document
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setCharFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|cursor
operator|=
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cursor
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|blockCharFormat
argument_list|()
operator|.
name|objectIndex
argument_list|()
argument_list|,
name|table
operator|->
name|objectIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|blockAndColumnNumber
name|void
name|tst_QTextCursor
operator|::
name|blockAndColumnNumber
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|QTextCursor
argument_list|()
operator|.
name|columnNumber
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTextCursor
argument_list|()
operator|.
name|blockNumber
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|columnNumber
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|blockNumber
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|columnNumber
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|blockNumber
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|columnNumber
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|blockNumber
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|blockNumber
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// trigger a layout
name|doc
operator|->
name|documentLayout
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|columnNumber
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|blockNumber
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|columnNumber
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|blockNumber
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|QString
argument_list|(
name|QChar
argument_list|(
name|QChar
operator|::
name|LineSeparator
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|columnNumber
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|blockNumber
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|columnNumber
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|blockNumber
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|movePositionEndOfLine
name|void
name|tst_QTextCursor
operator|::
name|movePositionEndOfLine
parameter_list|()
block|{
name|cursor
operator|.
name|insertText
argument_list|(
literal|"blah\nblah\n"
argument_list|)
expr_stmt|;
comment|// Select part of the second line ("la")
name|cursor
operator|.
name|setPosition
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectedText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"la"
argument_list|)
argument_list|)
expr_stmt|;
comment|// trigger a layout
name|doc
operator|->
name|documentLayout
argument_list|()
expr_stmt|;
comment|// Remove "la" and append "something" to the end in one undo operation
name|cursor
operator|.
name|beginEditBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|removeSelectedText
argument_list|()
expr_stmt|;
name|QTextCursor
name|c2
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|c2
operator|.
name|setPosition
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|c2
operator|.
name|insertText
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
comment|// append to doc without touching the cursor.
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|EndOfLine
argument_list|)
expr_stmt|;
comment|// in an edit block visual movement is moved to the end of the paragraph
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|endEditBlock
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearCells
name|void
name|tst_QTextCursor
operator|::
name|clearCells
parameter_list|()
block|{
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|insertTable
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstPosition
argument_list|()
argument_list|)
expr_stmt|;
comment|// select cell 1 and cell 2
name|cursor
operator|.
name|setPosition
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|firstPosition
argument_list|()
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|deleteChar
argument_list|()
expr_stmt|;
comment|// should clear the cells, and not crash ;)
block|}
end_function
begin_function
DECL|function|task244408_wordUnderCursor_data
name|void
name|tst_QTextCursor
operator|::
name|task244408_wordUnderCursor_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"trailingSpace"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"foo "
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"noTrailingSpace"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task244408_wordUnderCursor
name|void
name|tst_QTextCursor
operator|::
name|task244408_wordUnderCursor
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|select
argument_list|(
name|QTextCursor
operator|::
name|WordUnderCursor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectedText
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|adjustCursorsOnInsert
name|void
name|tst_QTextCursor
operator|::
name|adjustCursorsOnInsert
parameter_list|()
block|{
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Some text before "
argument_list|)
expr_stmt|;
name|int
name|posBefore
init|=
name|cursor
operator|.
name|position
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"selected text"
argument_list|)
expr_stmt|;
name|int
name|posAfter
init|=
name|cursor
operator|.
name|position
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|" some text afterwards"
argument_list|)
expr_stmt|;
name|QTextCursor
name|selection
init|=
name|cursor
decl_stmt|;
name|selection
operator|.
name|setPosition
argument_list|(
name|posBefore
argument_list|)
expr_stmt|;
name|selection
operator|.
name|setPosition
argument_list|(
name|posAfter
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|posBefore
operator|-
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|QLatin1String
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selection
operator|.
name|anchor
argument_list|()
argument_list|,
name|posBefore
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selection
operator|.
name|position
argument_list|()
argument_list|,
name|posAfter
operator|+
literal|1
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|posBefore
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|QLatin1String
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selection
operator|.
name|anchor
argument_list|()
argument_list|,
name|posBefore
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selection
operator|.
name|position
argument_list|()
argument_list|,
name|posAfter
operator|+
literal|1
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|posBefore
operator|+
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|QLatin1String
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selection
operator|.
name|anchor
argument_list|()
argument_list|,
name|posBefore
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selection
operator|.
name|position
argument_list|()
argument_list|,
name|posAfter
operator|+
literal|1
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|posAfter
operator|-
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|QLatin1String
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selection
operator|.
name|anchor
argument_list|()
argument_list|,
name|posBefore
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selection
operator|.
name|position
argument_list|()
argument_list|,
name|posAfter
operator|+
literal|1
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|selection
operator|.
name|setKeepPositionOnInsert
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|posAfter
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|QLatin1String
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|selection
operator|.
name|setKeepPositionOnInsert
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selection
operator|.
name|anchor
argument_list|()
argument_list|,
name|posBefore
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selection
operator|.
name|position
argument_list|()
argument_list|,
name|posAfter
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|posAfter
operator|+
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|QLatin1String
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selection
operator|.
name|anchor
argument_list|()
argument_list|,
name|posBefore
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selection
operator|.
name|position
argument_list|()
argument_list|,
name|posAfter
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|selection
operator|.
name|setPosition
argument_list|(
name|posAfter
argument_list|)
expr_stmt|;
name|selection
operator|.
name|setPosition
argument_list|(
name|posBefore
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|posBefore
operator|-
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|QLatin1String
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selection
operator|.
name|position
argument_list|()
argument_list|,
name|posBefore
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selection
operator|.
name|anchor
argument_list|()
argument_list|,
name|posAfter
operator|+
literal|1
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|posBefore
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|QLatin1String
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selection
operator|.
name|position
argument_list|()
argument_list|,
name|posBefore
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selection
operator|.
name|anchor
argument_list|()
argument_list|,
name|posAfter
operator|+
literal|1
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|posBefore
operator|+
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|QLatin1String
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selection
operator|.
name|position
argument_list|()
argument_list|,
name|posBefore
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selection
operator|.
name|anchor
argument_list|()
argument_list|,
name|posAfter
operator|+
literal|1
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|posAfter
operator|-
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|QLatin1String
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selection
operator|.
name|position
argument_list|()
argument_list|,
name|posBefore
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selection
operator|.
name|anchor
argument_list|()
argument_list|,
name|posAfter
operator|+
literal|1
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|posAfter
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|QLatin1String
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selection
operator|.
name|position
argument_list|()
argument_list|,
name|posBefore
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selection
operator|.
name|anchor
argument_list|()
argument_list|,
name|posAfter
operator|+
literal|1
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|posAfter
operator|+
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|QLatin1String
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selection
operator|.
name|position
argument_list|()
argument_list|,
name|posBefore
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selection
operator|.
name|anchor
argument_list|()
argument_list|,
name|posAfter
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cursorPositionWithBlockUndoAndRedo
name|void
name|tst_QTextCursor
operator|::
name|cursorPositionWithBlockUndoAndRedo
parameter_list|()
block|{
name|cursor
operator|.
name|insertText
argument_list|(
literal|"AAAABBBBCCCCDDDD"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|int
name|cursorPositionBefore
init|=
name|cursor
operator|.
name|position
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|beginEditBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|int
name|cursorPositionAfter
init|=
name|cursor
operator|.
name|position
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|endEditBlock
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"*AAAA*BBBB*CCCC*DDDD"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|12
argument_list|,
name|cursorPositionBefore
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|1
argument_list|,
name|cursorPositionAfter
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|(
operator|&
name|cursor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"AAAABBBBCCCCDDDD"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
name|cursorPositionBefore
argument_list|)
expr_stmt|;
name|doc
operator|->
name|redo
argument_list|(
operator|&
name|cursor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"*AAAA*BBBB*CCCC*DDDD"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
name|cursorPositionAfter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cursorPositionWithBlockUndoAndRedo2
name|void
name|tst_QTextCursor
operator|::
name|cursorPositionWithBlockUndoAndRedo2
parameter_list|()
block|{
name|cursor
operator|.
name|insertText
argument_list|(
literal|"AAAABBBB"
argument_list|)
expr_stmt|;
name|int
name|cursorPositionBefore
init|=
name|cursor
operator|.
name|position
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
literal|0
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|beginEditBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|removeSelectedText
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"AAAABBBBCCCCDDDD"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|endEditBlock
argument_list|()
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|(
operator|&
name|cursor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"AAAABBBB"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
name|cursorPositionBefore
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"CCCC"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"AAAABBBBCCCC"
argument_list|)
argument_list|)
expr_stmt|;
name|cursorPositionBefore
operator|=
name|cursor
operator|.
name|position
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
literal|0
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|beginEditBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|removeSelectedText
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"AAAABBBBCCCCDDDD"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|endEditBlock
argument_list|()
expr_stmt|;
comment|/* this undo now implicitely reinserts two segments, first "CCCCC", then        "AAAABBBB". The test ensures that the two are combined in order to        reconstruct the correct cursor position */
name|doc
operator|->
name|undo
argument_list|(
operator|&
name|cursor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"AAAABBBBCCCC"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
name|cursorPositionBefore
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cursorPositionWithBlockUndoAndRedo3
name|void
name|tst_QTextCursor
operator|::
name|cursorPositionWithBlockUndoAndRedo3
parameter_list|()
block|{
comment|// verify that it's the position of the beginEditBlock that counts, and not the last edit position
name|cursor
operator|.
name|insertText
argument_list|(
literal|"AAAABBBB"
argument_list|)
expr_stmt|;
name|int
name|cursorPositionBefore
init|=
name|cursor
operator|.
name|position
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|beginEditBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
operator|!=
name|cursorPositionBefore
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|endEditBlock
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undo
argument_list|(
operator|&
name|cursor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
name|cursorPositionBefore
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|joinNonEmptyRemovedBlockUserState
name|void
name|tst_QTextCursor
operator|::
name|joinNonEmptyRemovedBlockUserState
parameter_list|()
block|{
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"World"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|setUserState
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|EndOfBlock
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousBlock
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|EndOfBlock
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|removeSelectedText
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|userState
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QTextCursor
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qtextcursor.moc"
end_include
end_unit
