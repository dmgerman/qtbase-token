begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_define
DECL|macro|protected
define|#
directive|define
name|protected
value|public
end_define
begin_include
include|#
directive|include
file|<qtextdocument.h>
end_include
begin_undef
DECL|macro|protected
undef|#
directive|undef
name|protected
end_undef
begin_include
include|#
directive|include
file|<private/qtextdocument_p.h>
end_include
begin_include
include|#
directive|include
file|<qabstracttextdocumentlayout.h>
end_include
begin_include
include|#
directive|include
file|<qtextobject.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<qtextcursor.h>
end_include
begin_include
include|#
directive|include
file|"../qtextdocument/common.h"
end_include
begin_class
DECL|class|tst_QTextPieceTable
class|class
name|tst_QTextPieceTable
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QTextPieceTable
parameter_list|()
constructor_decl|;
public|public
name|slots
public|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|insertion1
parameter_list|()
function_decl|;
name|void
name|insertion2
parameter_list|()
function_decl|;
name|void
name|insertion3
parameter_list|()
function_decl|;
name|void
name|insertion4
parameter_list|()
function_decl|;
name|void
name|insertion5
parameter_list|()
function_decl|;
name|void
name|removal1
parameter_list|()
function_decl|;
name|void
name|removal2
parameter_list|()
function_decl|;
name|void
name|removal3
parameter_list|()
function_decl|;
name|void
name|removal4
parameter_list|()
function_decl|;
name|void
name|undoRedo1
parameter_list|()
function_decl|;
name|void
name|undoRedo2
parameter_list|()
function_decl|;
name|void
name|undoRedo3
parameter_list|()
function_decl|;
name|void
name|undoRedo4
parameter_list|()
function_decl|;
name|void
name|undoRedo5
parameter_list|()
function_decl|;
name|void
name|undoRedo6
parameter_list|()
function_decl|;
name|void
name|undoRedo7
parameter_list|()
function_decl|;
name|void
name|undoRedo8
parameter_list|()
function_decl|;
name|void
name|undoRedo9
parameter_list|()
function_decl|;
name|void
name|undoRedo10
parameter_list|()
function_decl|;
name|void
name|undoRedo11
parameter_list|()
function_decl|;
name|void
name|checkDocumentChanged
parameter_list|()
function_decl|;
name|void
name|checkDocumentChanged2
parameter_list|()
function_decl|;
name|void
name|setBlockFormat
parameter_list|()
function_decl|;
name|void
name|blockInsertion
parameter_list|()
function_decl|;
name|void
name|blockInsertion2
parameter_list|()
function_decl|;
name|void
name|blockRemoval1
parameter_list|()
function_decl|;
name|void
name|blockRemoval2
parameter_list|()
function_decl|;
name|void
name|blockRemoval3
parameter_list|()
function_decl|;
name|void
name|blockRemoval4
parameter_list|()
function_decl|;
name|void
name|blockRemoval5
parameter_list|()
function_decl|;
name|void
name|checkBlockSeparation
parameter_list|()
function_decl|;
name|void
name|checkFrames1
parameter_list|()
function_decl|;
name|void
name|removeFrameDirect
parameter_list|()
function_decl|;
name|void
name|removeWithChildFrame
parameter_list|()
function_decl|;
name|void
name|clearWithFrames
parameter_list|()
function_decl|;
private|private:
DECL|member|doc
name|QTextDocument
modifier|*
name|doc
decl_stmt|;
DECL|member|table
name|QTextDocumentPrivate
modifier|*
name|table
decl_stmt|;
DECL|member|blockFormatIndex
name|int
name|blockFormatIndex
decl_stmt|;
DECL|member|charFormatIndex
name|int
name|charFormatIndex
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QTextPieceTable
name|tst_QTextPieceTable
operator|::
name|tst_QTextPieceTable
parameter_list|()
block|{
name|doc
operator|=
literal|0
expr_stmt|;
name|table
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|init
name|void
name|tst_QTextPieceTable
operator|::
name|init
parameter_list|()
block|{
name|doc
operator|=
operator|new
name|QTextDocument
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|table
operator|=
name|doc
operator|->
name|docHandle
argument_list|()
expr_stmt|;
name|blockFormatIndex
operator|=
name|table
operator|->
name|formatCollection
argument_list|()
operator|->
name|indexForFormat
argument_list|(
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|charFormatIndex
operator|=
name|table
operator|->
name|formatCollection
argument_list|()
operator|->
name|indexForFormat
argument_list|(
name|QTextCharFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QTextPieceTable
operator|::
name|cleanup
parameter_list|()
block|{
operator|delete
name|doc
expr_stmt|;
name|doc
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertion1
name|void
name|tst_QTextPieceTable
operator|::
name|insertion1
parameter_list|()
block|{
name|table
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
literal|"aacc"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"aacc"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|2
argument_list|,
literal|"bb"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"aabbcc"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|1
argument_list|,
literal|"1"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"a1abbcc"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|6
argument_list|,
literal|"d"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"a1abbcdc"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|8
argument_list|,
literal|"z"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"a1abbcdcz"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertion2
name|void
name|tst_QTextPieceTable
operator|::
name|insertion2
parameter_list|()
block|{
name|table
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
literal|"bb"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"bb"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertion3
name|void
name|tst_QTextPieceTable
operator|::
name|insertion3
parameter_list|()
block|{
name|QString
name|compare
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20000
condition|;
operator|++
name|i
control|)
block|{
name|int
name|pos
init|=
name|rand
argument_list|()
operator|%
operator|(
name|i
operator|+
literal|1
operator|)
decl_stmt|;
name|QChar
name|c
argument_list|(
call|(
name|unsigned
name|short
call|)
argument_list|(
name|i
operator|&
literal|0xff
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|QString
name|str
decl_stmt|;
name|str
operator|+=
name|c
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
name|pos
argument_list|,
name|str
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|compare
operator|.
name|insert
argument_list|(
name|pos
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
operator|==
name|compare
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertion4
name|void
name|tst_QTextPieceTable
operator|::
name|insertion4
parameter_list|()
block|{
name|QString
name|compare
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20000
condition|;
operator|++
name|i
control|)
block|{
name|int
name|pos
init|=
name|rand
argument_list|()
operator|%
operator|(
name|i
operator|+
literal|1
operator|)
decl_stmt|;
name|QChar
name|c
argument_list|(
call|(
name|unsigned
name|short
call|)
argument_list|(
operator|(
name|i
operator|%
literal|26
operator|)
operator|+
operator|(
name|i
operator|>
literal|25
condition|?
literal|'A'
else|:
literal|'a'
operator|)
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|str
decl_stmt|;
name|str
operator|+=
name|c
expr_stmt|;
name|str
operator|+=
name|c
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
name|pos
argument_list|,
name|str
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|compare
operator|.
name|insert
argument_list|(
name|pos
argument_list|,
name|str
argument_list|)
expr_stmt|;
comment|//        if (table->text() != compare) {
comment|//            qDebug("compare failed: i=%d (current char=%c) insert at %d\nexpected '%s'\ngot      '%s'", i, (i % 26) + (i>25?'A':'a'), pos, compare.latin1(), table->text().latin1());
comment|//            exit(12);
comment|//        }
block|}
name|QVERIFY
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
operator|==
name|compare
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertion5
name|void
name|tst_QTextPieceTable
operator|::
name|insertion5
parameter_list|()
block|{
name|QString
name|compare
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20000
condition|;
operator|++
name|i
control|)
block|{
name|int
name|pos
init|=
name|rand
argument_list|()
operator|%
operator|(
name|i
operator|+
literal|1
operator|)
decl_stmt|;
name|QChar
name|c
argument_list|(
call|(
name|unsigned
name|short
call|)
argument_list|(
operator|(
name|i
operator|%
literal|26
operator|)
operator|+
operator|(
name|i
operator|>
literal|25
condition|?
literal|'A'
else|:
literal|'a'
operator|)
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|str
decl_stmt|;
name|str
operator|+=
name|c
expr_stmt|;
name|str
operator|+=
name|c
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|'a'
condition|)
block|{
name|table
operator|->
name|insertBlock
argument_list|(
name|pos
argument_list|,
name|blockFormatIndex
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|str
operator|=
name|QChar
argument_list|(
name|QChar
operator|::
name|ParagraphSeparator
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|table
operator|->
name|insert
argument_list|(
name|pos
argument_list|,
name|str
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
block|}
name|compare
operator|.
name|insert
argument_list|(
name|pos
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
operator|==
name|compare
argument_list|)
expr_stmt|;
for|for
control|(
name|QTextBlock
name|it
init|=
name|table
operator|->
name|blocksBegin
argument_list|()
init|;
name|it
operator|!=
name|table
operator|->
name|blocksEnd
argument_list|()
condition|;
name|it
operator|=
name|it
operator|.
name|next
argument_list|()
control|)
block|{
name|QTextDocumentPrivate
operator|::
name|FragmentIterator
name|fit
init|=
name|table
operator|->
name|find
argument_list|(
name|it
operator|.
name|position
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fit
operator|.
name|position
argument_list|()
operator|==
name|it
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|removal1
name|void
name|tst_QTextPieceTable
operator|::
name|removal1
parameter_list|()
block|{
name|table
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
literal|"abbccc"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"abbccc"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"accc"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|1
argument_list|,
literal|"1"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"a1ccc"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"a1cc"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|4
argument_list|,
literal|"z"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"a1ccz"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removal2
name|void
name|tst_QTextPieceTable
operator|::
name|removal2
parameter_list|()
block|{
name|table
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
literal|"bb"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"bb"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|insertBlock
argument_list|(
literal|0
argument_list|,
name|blockFormatIndex
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
name|QChar
argument_list|(
name|QChar
operator|::
name|ParagraphSeparator
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
literal|"bb"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"bb"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|insertBlock
argument_list|(
literal|1
argument_list|,
name|blockFormatIndex
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|+
name|QString
argument_list|(
name|QChar
argument_list|(
name|QChar
operator|::
name|ParagraphSeparator
argument_list|)
argument_list|)
operator|+
name|QString
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"bb"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removal3
name|void
name|tst_QTextPieceTable
operator|::
name|removal3
parameter_list|()
block|{
name|QString
name|compare
decl_stmt|;
name|int
name|l
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20000
condition|;
operator|++
name|i
control|)
block|{
name|bool
name|remove
init|=
name|l
operator|&&
operator|(
name|rand
argument_list|()
operator|%
literal|2
operator|)
decl_stmt|;
name|int
name|pos
init|=
name|rand
argument_list|()
operator|%
operator|(
name|remove
condition|?
name|l
else|:
operator|(
name|l
operator|+
literal|1
operator|)
operator|)
decl_stmt|;
name|QChar
name|c
argument_list|(
call|(
name|unsigned
name|short
call|)
argument_list|(
operator|(
name|i
operator|%
literal|26
operator|)
operator|+
operator|(
name|i
operator|>
literal|25
condition|?
literal|'A'
else|:
literal|'a'
operator|)
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|str
decl_stmt|;
name|str
operator|+=
name|c
expr_stmt|;
name|str
operator|+=
name|c
expr_stmt|;
if|if
condition|(
name|remove
operator|&&
name|pos
operator|<
name|table
operator|->
name|length
argument_list|()
condition|)
block|{
name|compare
operator|.
name|remove
argument_list|(
name|pos
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
name|pos
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|compare
operator|.
name|insert
argument_list|(
name|pos
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
name|pos
argument_list|,
name|str
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
block|}
name|l
operator|+=
name|remove
condition|?
operator|-
literal|1
else|:
literal|2
expr_stmt|;
comment|//        if (table->text() != compare) {
comment|//            qDebug("compare failed: i=%d (current char=%c) insert at %d\nexpected '%s'\ngot      '%s'", i, (i % 26) + (i>25?'A':'a'), pos, compare.latin1(), table->text().latin1());
comment|//            exit(12);
comment|//        }
block|}
name|QVERIFY
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
operator|==
name|compare
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removal4
name|void
name|tst_QTextPieceTable
operator|::
name|removal4
parameter_list|()
block|{
name|QString
name|compare
decl_stmt|;
name|int
name|l
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20000
condition|;
operator|++
name|i
control|)
block|{
name|bool
name|remove
init|=
name|l
operator|&&
operator|(
name|rand
argument_list|()
operator|%
literal|2
operator|)
decl_stmt|;
name|int
name|pos
init|=
operator|(
name|l
operator|>
literal|1
operator|)
condition|?
name|rand
argument_list|()
operator|%
operator|(
name|remove
condition|?
name|l
operator|-
literal|1
else|:
name|l
operator|)
else|:
literal|0
decl_stmt|;
name|QChar
name|c
argument_list|(
call|(
name|unsigned
name|short
call|)
argument_list|(
operator|(
name|i
operator|%
literal|26
operator|)
operator|+
operator|(
name|i
operator|>
literal|25
condition|?
literal|'A'
else|:
literal|'a'
operator|)
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|str
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|'a'
condition|)
block|{
name|str
operator|+=
name|c
expr_stmt|;
name|str
operator|+=
name|c
expr_stmt|;
block|}
else|else
block|{
name|str
operator|=
name|QChar
argument_list|(
name|QChar
operator|::
name|ParagraphSeparator
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|remove
operator|&&
name|pos
operator|<
name|table
operator|->
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
name|compare
operator|.
name|remove
argument_list|(
name|pos
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
name|pos
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|str
index|[
literal|0
index|]
operator|==
name|QChar
argument_list|(
name|QChar
operator|::
name|ParagraphSeparator
argument_list|)
condition|)
name|table
operator|->
name|insertBlock
argument_list|(
name|pos
argument_list|,
name|blockFormatIndex
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
else|else
name|table
operator|->
name|insert
argument_list|(
name|pos
argument_list|,
name|str
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|compare
operator|.
name|insert
argument_list|(
name|pos
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
name|l
operator|+=
name|remove
condition|?
operator|-
literal|1
else|:
literal|2
expr_stmt|;
comment|//        if (table->plainText() != compare) {
comment|//            qDebug("compare failed: i=%d (current char=%c) insert at %d\nexpected '%s'\ngot      '%s'", i, (i % 26) + (i>25?'A':'a'), pos, compare.latin1(), table->plainText().latin1());
comment|//            exit(12);
comment|//        }
block|}
name|QVERIFY
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
operator|==
name|compare
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|undoRedo1
name|void
name|tst_QTextPieceTable
operator|::
name|undoRedo1
parameter_list|()
block|{
name|table
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
literal|"01234567"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
literal|"a"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|1
argument_list|,
literal|"b"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"ab01234567"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"01234567"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|redo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"ab01234567"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|undo
argument_list|()
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|1
argument_list|,
literal|"c"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"0c1234567"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"01234567"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|undoRedo2
name|void
name|tst_QTextPieceTable
operator|::
name|undoRedo2
parameter_list|()
block|{
name|table
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
literal|"01"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|1
argument_list|,
literal|"a"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"0a1"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"01"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|redo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"01"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|redo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"0a1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|undoRedo3
name|void
name|tst_QTextPieceTable
operator|::
name|undoRedo3
parameter_list|()
block|{
name|table
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
literal|"01"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|2
argument_list|,
literal|"ab"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"01b"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"01ab"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|->
name|redo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"01ab"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|redo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"01b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|undoRedo4
name|void
name|tst_QTextPieceTable
operator|::
name|undoRedo4
parameter_list|()
block|{
name|table
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
literal|"01"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
literal|"ab"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"b01"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"ab01"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"01"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|redo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"01"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|redo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"ab01"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|redo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"b01"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|undoRedo5
name|void
name|tst_QTextPieceTable
operator|::
name|undoRedo5
parameter_list|()
block|{
name|table
operator|->
name|beginEditBlock
argument_list|()
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
literal|"01"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|table
operator|->
name|endEditBlock
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|undoRedo6
name|void
name|tst_QTextPieceTable
operator|::
name|undoRedo6
parameter_list|()
block|{
comment|// this is essentially a test for the undoStack[undoPosition - 1].block = false in PieceTable::endUndoBlock()
name|QTextDocument
name|doc
decl_stmt|;
name|QTextCursor
name|cursor
argument_list|(
operator|&
name|doc
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello World2"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|QTextBlockFormat
name|bfmt
decl_stmt|;
name|bfmt
operator|.
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignHCenter
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setBlockFormat
argument_list|(
name|bfmt
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|blockFormat
argument_list|()
operator|.
name|alignment
argument_list|()
operator|==
name|Qt
operator|::
name|AlignHCenter
argument_list|)
expr_stmt|;
name|QTextCursor
name|range
init|=
name|cursor
decl_stmt|;
name|range
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
name|range
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|range
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|QTextCharFormat
name|modifier
decl_stmt|;
name|modifier
operator|.
name|setFontItalic
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|range
operator|.
name|mergeCharFormat
argument_list|(
name|modifier
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|blockFormat
argument_list|()
operator|.
name|alignment
argument_list|()
operator|==
name|Qt
operator|::
name|AlignHCenter
argument_list|)
expr_stmt|;
name|doc
operator|.
name|undo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|blockFormat
argument_list|()
operator|.
name|alignment
argument_list|()
operator|==
name|Qt
operator|::
name|AlignHCenter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|undoRedo7
name|void
name|tst_QTextPieceTable
operator|::
name|undoRedo7
parameter_list|()
block|{
name|table
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
literal|"a"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|1
argument_list|,
literal|"b"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"ab"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|undoRedo8
name|void
name|tst_QTextPieceTable
operator|::
name|undoRedo8
parameter_list|()
block|{
name|table
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
literal|"a"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|1
argument_list|,
literal|"b"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"ab"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"ab"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|undoRedo9
name|void
name|tst_QTextPieceTable
operator|::
name|undoRedo9
parameter_list|()
block|{
name|table
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
literal|"a"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|1
argument_list|,
literal|"b"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"ab"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"ab"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|undoRedo10
name|void
name|tst_QTextPieceTable
operator|::
name|undoRedo10
parameter_list|()
block|{
comment|// testcase for the beginUndoBlock/endUndoBlock calls being surrounded by an if (undoEnabled)
name|QTextCharFormat
name|cf
decl_stmt|;
name|cf
operator|.
name|setForeground
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|int
name|cfIdx
init|=
name|table
operator|->
name|formatCollection
argument_list|()
operator|->
name|indexForFormat
argument_list|(
name|cf
argument_list|)
decl_stmt|;
name|QTextBlockFormat
name|f
decl_stmt|;
name|int
name|idx
init|=
name|table
operator|->
name|formatCollection
argument_list|()
operator|->
name|indexForFormat
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
literal|"a"
argument_list|,
name|cfIdx
argument_list|)
expr_stmt|;
name|table
operator|->
name|insertBlock
argument_list|(
literal|1
argument_list|,
name|idx
argument_list|,
name|cfIdx
argument_list|)
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|1
argument_list|,
literal|"b"
argument_list|,
name|cfIdx
argument_list|)
expr_stmt|;
name|cf
operator|.
name|setForeground
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|int
name|newCfIdx
init|=
name|table
operator|->
name|formatCollection
argument_list|()
operator|->
name|indexForFormat
argument_list|(
name|cf
argument_list|)
decl_stmt|;
name|table
operator|->
name|setCharFormat
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
name|cf
argument_list|,
name|QTextDocumentPrivate
operator|::
name|MergeFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|find
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|()
operator|->
name|format
argument_list|,
name|newCfIdx
argument_list|)
expr_stmt|;
name|table
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|find
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|()
operator|->
name|format
argument_list|,
name|cfIdx
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|undoRedo11
name|void
name|tst_QTextPieceTable
operator|::
name|undoRedo11
parameter_list|()
block|{
name|srand
argument_list|(
literal|3
argument_list|)
expr_stmt|;
specifier|const
name|int
name|loops
init|=
literal|20
decl_stmt|;
name|QString
name|compare
decl_stmt|;
name|int
name|l
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|loops
condition|;
operator|++
name|i
control|)
block|{
name|bool
name|remove
init|=
name|l
operator|&&
operator|(
name|rand
argument_list|()
operator|%
literal|2
operator|)
decl_stmt|;
name|int
name|pos
init|=
operator|(
name|l
operator|>
literal|1
operator|)
condition|?
name|rand
argument_list|()
operator|%
operator|(
name|remove
condition|?
name|l
operator|-
literal|1
else|:
name|l
operator|)
else|:
literal|0
decl_stmt|;
name|QChar
name|c
argument_list|(
call|(
name|unsigned
name|short
call|)
argument_list|(
operator|(
name|i
operator|%
literal|26
operator|)
operator|+
operator|(
name|i
operator|>
literal|25
condition|?
literal|'A'
else|:
literal|'a'
operator|)
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|str
decl_stmt|;
name|str
operator|+=
name|c
expr_stmt|;
name|str
operator|+=
name|c
expr_stmt|;
if|if
condition|(
name|remove
condition|)
block|{
name|compare
operator|.
name|remove
argument_list|(
name|pos
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
name|pos
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|compare
operator|.
name|insert
argument_list|(
name|pos
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
name|pos
argument_list|,
name|str
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
block|}
name|l
operator|+=
name|remove
condition|?
operator|-
literal|1
else|:
literal|2
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
operator|==
name|compare
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|loops
condition|;
operator|++
name|i
control|)
name|table
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
operator|==
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|loops
condition|;
operator|++
name|i
control|)
name|table
operator|->
name|redo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|plainText
argument_list|()
operator|==
name|compare
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|checkDocumentChanged
name|void
name|tst_QTextPieceTable
operator|::
name|checkDocumentChanged
parameter_list|()
block|{
name|table
operator|->
name|enableUndoRedo
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QTestDocumentLayout
modifier|*
name|layout
init|=
operator|new
name|QTestDocumentLayout
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|doc
operator|->
name|setDocumentLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
comment|// single insert
name|layout
operator|->
name|expect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
literal|"012345678901234"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|layout
operator|->
name|error
argument_list|)
expr_stmt|;
comment|// single remove
name|layout
operator|->
name|expect
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|layout
operator|->
name|error
argument_list|)
expr_stmt|;
comment|// symmetric insert/remove
name|layout
operator|->
name|expect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|table
operator|->
name|beginEditBlock
argument_list|()
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
literal|"01234"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|table
operator|->
name|endEditBlock
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|layout
operator|->
name|error
argument_list|)
expr_stmt|;
name|layout
operator|->
name|expect
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|table
operator|->
name|beginEditBlock
argument_list|()
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
literal|"01234"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|endEditBlock
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|layout
operator|->
name|error
argument_list|)
expr_stmt|;
comment|// replace
name|layout
operator|->
name|expect
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|table
operator|->
name|beginEditBlock
argument_list|()
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
literal|"01234"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|endEditBlock
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|layout
operator|->
name|error
argument_list|)
expr_stmt|;
name|layout
operator|->
name|expect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|table
operator|->
name|beginEditBlock
argument_list|()
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
literal|"01234"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|table
operator|->
name|endEditBlock
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|layout
operator|->
name|error
argument_list|)
expr_stmt|;
comment|// insert + remove inside insert block
name|layout
operator|->
name|expect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|table
operator|->
name|beginEditBlock
argument_list|()
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
literal|"01234"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|table
operator|->
name|endEditBlock
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|layout
operator|->
name|error
argument_list|)
expr_stmt|;
name|layout
operator|->
name|expect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|table
operator|->
name|beginEditBlock
argument_list|()
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
literal|"01234"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|table
operator|->
name|endEditBlock
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|layout
operator|->
name|error
argument_list|)
expr_stmt|;
comment|// insert + remove partly outside
name|layout
operator|->
name|expect
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|table
operator|->
name|beginEditBlock
argument_list|()
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|1
argument_list|,
literal|"0"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|table
operator|->
name|endEditBlock
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|layout
operator|->
name|error
argument_list|)
expr_stmt|;
name|layout
operator|->
name|expect
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|table
operator|->
name|beginEditBlock
argument_list|()
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|1
argument_list|,
literal|"01"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|table
operator|->
name|endEditBlock
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|layout
operator|->
name|error
argument_list|)
expr_stmt|;
name|layout
operator|->
name|expect
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|table
operator|->
name|beginEditBlock
argument_list|()
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|1
argument_list|,
literal|"012"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|table
operator|->
name|endEditBlock
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|layout
operator|->
name|error
argument_list|)
expr_stmt|;
name|layout
operator|->
name|expect
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|table
operator|->
name|beginEditBlock
argument_list|()
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|1
argument_list|,
literal|"0"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|table
operator|->
name|endEditBlock
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|layout
operator|->
name|error
argument_list|)
expr_stmt|;
name|layout
operator|->
name|expect
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|table
operator|->
name|beginEditBlock
argument_list|()
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|1
argument_list|,
literal|"01"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|table
operator|->
name|endEditBlock
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|layout
operator|->
name|error
argument_list|)
expr_stmt|;
name|layout
operator|->
name|expect
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|table
operator|->
name|beginEditBlock
argument_list|()
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|1
argument_list|,
literal|"012"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|table
operator|->
name|endEditBlock
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|layout
operator|->
name|error
argument_list|)
expr_stmt|;
comment|// insert + remove non overlapping
name|layout
operator|->
name|expect
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|table
operator|->
name|beginEditBlock
argument_list|()
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|1
argument_list|,
literal|"0"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|table
operator|->
name|endEditBlock
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|layout
operator|->
name|error
argument_list|)
expr_stmt|;
name|layout
operator|->
name|expect
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|table
operator|->
name|beginEditBlock
argument_list|()
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|2
argument_list|,
literal|"1"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|table
operator|->
name|endEditBlock
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|layout
operator|->
name|error
argument_list|)
expr_stmt|;
name|layout
operator|->
name|expect
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|table
operator|->
name|beginEditBlock
argument_list|()
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|1
argument_list|,
literal|"0"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|endEditBlock
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|layout
operator|->
name|error
argument_list|)
expr_stmt|;
name|layout
operator|->
name|expect
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|table
operator|->
name|beginEditBlock
argument_list|()
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|2
argument_list|,
literal|"1"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|endEditBlock
argument_list|()
expr_stmt|;
name|layout
operator|->
name|expect
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|table
operator|->
name|beginEditBlock
argument_list|()
expr_stmt|;
name|table
operator|->
name|setCharFormat
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|table
operator|->
name|setCharFormat
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|table
operator|->
name|endEditBlock
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|layout
operator|->
name|error
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|checkDocumentChanged2
name|void
name|tst_QTextPieceTable
operator|::
name|checkDocumentChanged2
parameter_list|()
block|{
name|QTestDocumentLayout
modifier|*
name|layout
init|=
operator|new
name|QTestDocumentLayout
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|doc
operator|->
name|setDocumentLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|int
name|anotherCharFormatIndex
init|=
name|table
operator|->
name|formatCollection
argument_list|()
operator|->
name|indexForFormat
argument_list|(
name|fmt
argument_list|)
decl_stmt|;
name|layout
operator|->
name|expect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|table
operator|->
name|beginEditBlock
argument_list|()
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
literal|"0123"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|4
argument_list|,
literal|"4567"
argument_list|,
name|anotherCharFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|8
argument_list|,
literal|"8901"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|endEditBlock
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|layout
operator|->
name|error
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setFontItalic
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|layout
operator|->
name|expect
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|table
operator|->
name|beginEditBlock
argument_list|()
expr_stmt|;
name|table
operator|->
name|setCharFormat
argument_list|(
literal|8
argument_list|,
literal|3
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|table
operator|->
name|setCharFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|table
operator|->
name|setCharFormat
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|table
operator|->
name|endEditBlock
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|layout
operator|->
name|error
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setBlockFormat
name|void
name|tst_QTextPieceTable
operator|::
name|setBlockFormat
parameter_list|()
block|{
name|QTextBlockFormat
name|bfmt
decl_stmt|;
name|int
name|index
init|=
name|table
operator|->
name|formatCollection
argument_list|()
operator|->
name|indexForFormat
argument_list|(
name|bfmt
argument_list|)
decl_stmt|;
name|table
operator|->
name|insertBlock
argument_list|(
literal|0
argument_list|,
name|index
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|insertBlock
argument_list|(
literal|0
argument_list|,
name|index
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|insertBlock
argument_list|(
literal|0
argument_list|,
name|index
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|QTextBlockFormat
name|newbfmt
init|=
name|bfmt
decl_stmt|;
name|newbfmt
operator|.
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignRight
argument_list|)
expr_stmt|;
name|index
operator|=
name|table
operator|->
name|formatCollection
argument_list|()
operator|->
name|indexForFormat
argument_list|(
name|bfmt
argument_list|)
expr_stmt|;
name|QTextBlock
name|b
init|=
name|table
operator|->
name|blocksFind
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|table
operator|->
name|setBlockFormat
argument_list|(
name|b
argument_list|,
name|b
argument_list|,
name|newbfmt
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|0
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|bfmt
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|1
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|newbfmt
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|2
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|bfmt
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|blockInsertion
name|void
name|tst_QTextPieceTable
operator|::
name|blockInsertion
parameter_list|()
block|{
name|QTextBlockFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setTopMargin
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
name|table
operator|->
name|formatCollection
argument_list|()
operator|->
name|indexForFormat
argument_list|(
name|fmt
argument_list|)
decl_stmt|;
name|int
name|charFormat
init|=
name|table
operator|->
name|formatCollection
argument_list|()
operator|->
name|indexForFormat
argument_list|(
name|QTextCharFormat
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|0
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|->
name|insertBlock
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|,
name|charFormat
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|0
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|1
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|fmt
argument_list|)
expr_stmt|;
name|table
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blockMap
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|0
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|->
name|redo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|0
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|1
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|fmt
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|blockInsertion2
name|void
name|tst_QTextPieceTable
operator|::
name|blockInsertion2
parameter_list|()
block|{
comment|// caused evil failing assertion in fragmentmap
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|table
operator|->
name|insertBlock
argument_list|(
name|pos
argument_list|,
name|blockFormatIndex
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|pos
operator|+=
literal|1
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
name|pos
argument_list|,
literal|"a"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|pos
operator|+=
literal|1
expr_stmt|;
name|pos
operator|-=
literal|1
expr_stmt|;
name|table
operator|->
name|insertBlock
argument_list|(
name|pos
argument_list|,
name|blockFormatIndex
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|0
argument_list|)
operator|.
name|position
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|1
argument_list|)
operator|.
name|position
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|2
argument_list|)
operator|.
name|position
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*   Tests correct removal behaviour when deleting over block boundaries or complete blocks. */
end_comment
begin_function
DECL|function|blockRemoval1
name|void
name|tst_QTextPieceTable
operator|::
name|blockRemoval1
parameter_list|()
block|{
name|QTextBlockFormat
name|fmt1
decl_stmt|;
name|fmt1
operator|.
name|setTopMargin
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QTextBlockFormat
name|fmt2
decl_stmt|;
name|fmt2
operator|.
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignRight
argument_list|)
expr_stmt|;
name|int
name|idx1
init|=
name|table
operator|->
name|formatCollection
argument_list|()
operator|->
name|indexForFormat
argument_list|(
name|fmt1
argument_list|)
decl_stmt|;
name|int
name|idx2
init|=
name|table
operator|->
name|formatCollection
argument_list|()
operator|->
name|indexForFormat
argument_list|(
name|fmt2
argument_list|)
decl_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
literal|"0123"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|insertBlock
argument_list|(
literal|4
argument_list|,
name|idx1
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|5
argument_list|,
literal|"5678"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|insertBlock
argument_list|(
literal|9
argument_list|,
name|idx2
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|10
argument_list|,
literal|"0123"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|0
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|4
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|5
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|fmt1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|10
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|fmt2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|1
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|6
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|11
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|10
argument_list|)
expr_stmt|;
name|table
operator|->
name|beginEditBlock
argument_list|()
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|table
operator|->
name|endEditBlock
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|4
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|5
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|fmt2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|4
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|5
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
name|table
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|0
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|4
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|5
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|fmt1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|10
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|fmt2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|1
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|6
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|11
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|10
argument_list|)
expr_stmt|;
name|table
operator|->
name|redo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|4
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|5
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|fmt2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|4
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|5
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|blockRemoval2
name|void
name|tst_QTextPieceTable
operator|::
name|blockRemoval2
parameter_list|()
block|{
name|QTextBlockFormat
name|fmt1
decl_stmt|;
name|fmt1
operator|.
name|setTopMargin
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QTextBlockFormat
name|fmt2
decl_stmt|;
name|fmt2
operator|.
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignRight
argument_list|)
expr_stmt|;
name|int
name|idx1
init|=
name|table
operator|->
name|formatCollection
argument_list|()
operator|->
name|indexForFormat
argument_list|(
name|fmt1
argument_list|)
decl_stmt|;
name|int
name|idx2
init|=
name|table
operator|->
name|formatCollection
argument_list|()
operator|->
name|indexForFormat
argument_list|(
name|fmt2
argument_list|)
decl_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
literal|"0123"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|insertBlock
argument_list|(
literal|4
argument_list|,
name|idx1
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|5
argument_list|,
literal|"5678"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|insertBlock
argument_list|(
literal|9
argument_list|,
name|idx2
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|10
argument_list|,
literal|"0123"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|0
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|4
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|5
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|fmt1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|10
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|fmt2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|1
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|6
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|11
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|10
argument_list|)
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|4
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|6
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|4
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|6
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|table
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|0
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|4
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|5
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|fmt1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|10
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|fmt2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|1
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|6
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|11
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|10
argument_list|)
expr_stmt|;
name|table
operator|->
name|redo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|4
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|6
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|4
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|6
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|blockRemoval3
name|void
name|tst_QTextPieceTable
operator|::
name|blockRemoval3
parameter_list|()
block|{
name|QTextBlockFormat
name|fmt1
decl_stmt|;
name|fmt1
operator|.
name|setTopMargin
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QTextBlockFormat
name|fmt2
decl_stmt|;
name|fmt2
operator|.
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignRight
argument_list|)
expr_stmt|;
name|int
name|idx1
init|=
name|table
operator|->
name|formatCollection
argument_list|()
operator|->
name|indexForFormat
argument_list|(
name|fmt1
argument_list|)
decl_stmt|;
name|int
name|idx2
init|=
name|table
operator|->
name|formatCollection
argument_list|()
operator|->
name|indexForFormat
argument_list|(
name|fmt2
argument_list|)
decl_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
literal|"0123"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|insertBlock
argument_list|(
literal|4
argument_list|,
name|idx1
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|5
argument_list|,
literal|"5678"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|insertBlock
argument_list|(
literal|9
argument_list|,
name|idx2
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|10
argument_list|,
literal|"0123"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|0
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|4
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|5
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|fmt1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|10
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|fmt2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|1
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|6
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|11
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|10
argument_list|)
expr_stmt|;
name|table
operator|->
name|beginEditBlock
argument_list|()
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|table
operator|->
name|endEditBlock
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|1
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|5
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|1
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|5
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|table
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|0
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|4
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|5
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|fmt1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|10
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|fmt2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|1
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|6
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|11
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|10
argument_list|)
expr_stmt|;
name|table
operator|->
name|redo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|1
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|5
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|1
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|5
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|blockRemoval4
name|void
name|tst_QTextPieceTable
operator|::
name|blockRemoval4
parameter_list|()
block|{
if|#
directive|if
literal|0
block|QTextBlockFormat fmt1;     fmt1.setTopMargin(100);     QTextBlockFormat fmt2;     fmt2.setAlignment(Qt::AlignRight);     int idx1 = table->formatCollection()->indexForFormat(fmt1);     int idx2 = table->formatCollection()->indexForFormat(fmt2);      table->insert(0, "0123", charFormatIndex);     table->insertBlock(4, idx1, charFormatIndex);     table->insert(5, "5678", charFormatIndex);     table->insertBlock(9, idx2, charFormatIndex);     table->insert(10, "0123", charFormatIndex);      QVERIFY(table->blocksFind(0).blockFormat() == QTextBlockFormat());     QVERIFY(table->blocksFind(4).blockFormat() == QTextBlockFormat());     QVERIFY(table->blocksFind(5).blockFormat() == fmt1);     QVERIFY(table->blocksFind(10).blockFormat() == fmt2);     QVERIFY(table->blocksFind(1).position() == 0);     QVERIFY(table->blocksFind(6).position() == 5);     QVERIFY(table->blocksFind(11).position() == 10);      table->remove(3, 7);     QVERIFY(table->blocksFind(1).position() == 0);     QVERIFY(table->blocksFind(5).position() == 0);     QVERIFY(table->blocksFind(1).blockFormat() == QTextBlockFormat());     QVERIFY(table->blocksFind(5).blockFormat() == QTextBlockFormat());      table->undo();      QVERIFY(table->blocksFind(0).blockFormat() == QTextBlockFormat());     QVERIFY(table->blocksFind(4).blockFormat() == QTextBlockFormat());     QVERIFY(table->blocksFind(5).blockFormat() == fmt1);     QVERIFY(table->blocksFind(10).blockFormat() == fmt2);     QVERIFY(table->blocksFind(1).position() == 0);     QVERIFY(table->blocksFind(6).position() == 5);     QVERIFY(table->blocksFind(11).position() == 10);      table->redo();     QVERIFY(table->blocksFind(1).position() == 0);     QVERIFY(table->blocksFind(5).position() == 0);     QVERIFY(table->blocksFind(1).blockFormat() == QTextBlockFormat());     QVERIFY(table->blocksFind(5).blockFormat() == QTextBlockFormat());
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|blockRemoval5
name|void
name|tst_QTextPieceTable
operator|::
name|blockRemoval5
parameter_list|()
block|{
name|QTextBlockFormat
name|fmt1
decl_stmt|;
name|fmt1
operator|.
name|setTopMargin
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QTextBlockFormat
name|fmt2
decl_stmt|;
name|fmt2
operator|.
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignRight
argument_list|)
expr_stmt|;
name|int
name|idx1
init|=
name|table
operator|->
name|formatCollection
argument_list|()
operator|->
name|indexForFormat
argument_list|(
name|fmt1
argument_list|)
decl_stmt|;
name|int
name|idx2
init|=
name|table
operator|->
name|formatCollection
argument_list|()
operator|->
name|indexForFormat
argument_list|(
name|fmt2
argument_list|)
decl_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
literal|"0123"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|insertBlock
argument_list|(
literal|4
argument_list|,
name|idx1
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|5
argument_list|,
literal|"5678"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|insertBlock
argument_list|(
literal|9
argument_list|,
name|idx2
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|10
argument_list|,
literal|"0123"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|0
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|4
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|5
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|fmt1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|10
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|fmt2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|1
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|6
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|11
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|10
argument_list|)
expr_stmt|;
name|table
operator|->
name|beginEditBlock
argument_list|()
expr_stmt|;
name|table
operator|->
name|remove
argument_list|(
literal|3
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|table
operator|->
name|endEditBlock
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|0
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|5
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|1
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|5
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|table
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|0
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|4
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|5
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|fmt1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|10
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|fmt2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|1
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|6
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|11
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|10
argument_list|)
expr_stmt|;
name|table
operator|->
name|redo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|0
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|5
argument_list|)
operator|.
name|blockFormat
argument_list|()
operator|==
name|QTextBlockFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|1
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|blocksFind
argument_list|(
literal|5
argument_list|)
operator|.
name|position
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|checkBlockSeparation
name|void
name|tst_QTextPieceTable
operator|::
name|checkBlockSeparation
parameter_list|()
block|{
name|table
operator|->
name|insertBlock
argument_list|(
literal|0
argument_list|,
name|blockFormatIndex
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|insertBlock
argument_list|(
literal|1
argument_list|,
name|blockFormatIndex
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|find
argument_list|(
literal|0
argument_list|)
operator|!=
name|table
operator|->
name|find
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|checkFrames1
name|void
name|tst_QTextPieceTable
operator|::
name|checkFrames1
parameter_list|()
block|{
name|QTextFrameFormat
name|ffmt
decl_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
literal|"Hello"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|QPointer
argument_list|<
name|QTextFrame
argument_list|>
name|frame
init|=
name|table
operator|->
name|insertFrame
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
name|ffmt
argument_list|)
decl_stmt|;
name|QTextFrame
modifier|*
name|root
init|=
name|table
operator|->
name|rootFrame
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|root
operator|==
name|frame
operator|->
name|parentFrame
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|root
operator|->
name|parentFrame
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|root
operator|->
name|childFrames
argument_list|()
operator|.
name|count
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|frame
operator|->
name|format
argument_list|()
operator|==
name|ffmt
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|frame
operator|->
name|firstPosition
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|frame
operator|->
name|lastPosition
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|QPointer
argument_list|<
name|QTextFrame
argument_list|>
name|frame2
init|=
name|table
operator|->
name|insertFrame
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
name|ffmt
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|root
operator|->
name|childFrames
argument_list|()
operator|.
name|count
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|root
operator|->
name|childFrames
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|frame
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|frame
operator|->
name|childFrames
argument_list|()
operator|.
name|count
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|frame2
operator|->
name|childFrames
argument_list|()
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|frame2
operator|->
name|parentFrame
argument_list|()
operator|==
name|frame
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|frame2
operator|->
name|firstPosition
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|frame2
operator|->
name|lastPosition
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|frame
operator|->
name|format
argument_list|()
operator|==
name|ffmt
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|frame
operator|->
name|firstPosition
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|frame
operator|->
name|lastPosition
argument_list|()
operator|==
literal|6
argument_list|)
expr_stmt|;
name|table
operator|->
name|removeFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|root
operator|->
name|childFrames
argument_list|()
operator|.
name|count
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|root
operator|->
name|childFrames
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|frame2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|frame
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|frame2
operator|->
name|childFrames
argument_list|()
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|frame2
operator|->
name|parentFrame
argument_list|()
operator|==
name|root
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|frame2
operator|->
name|firstPosition
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|frame2
operator|->
name|lastPosition
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|table
operator|->
name|undo
argument_list|()
expr_stmt|;
name|frame
operator|=
name|table
operator|->
name|frameAt
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|root
operator|->
name|childFrames
argument_list|()
operator|.
name|count
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|root
operator|->
name|childFrames
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|frame
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|frame
operator|->
name|childFrames
argument_list|()
operator|.
name|count
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|frame
operator|->
name|childFrames
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|frame2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|frame2
operator|->
name|childFrames
argument_list|()
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|frame2
operator|->
name|parentFrame
argument_list|()
operator|==
name|frame
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|frame2
operator|->
name|firstPosition
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|frame2
operator|->
name|lastPosition
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|frame
operator|->
name|firstPosition
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|frame
operator|->
name|lastPosition
argument_list|()
operator|==
literal|6
argument_list|)
expr_stmt|;
name|table
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|root
operator|->
name|childFrames
argument_list|()
operator|.
name|count
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|root
operator|->
name|childFrames
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|frame
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|frame
operator|->
name|childFrames
argument_list|()
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|frame2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|frame
operator|->
name|firstPosition
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|frame
operator|->
name|lastPosition
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeFrameDirect
name|void
name|tst_QTextPieceTable
operator|::
name|removeFrameDirect
parameter_list|()
block|{
name|QTextFrameFormat
name|ffmt
decl_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
literal|"Hello"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|QTextFrame
modifier|*
name|frame
init|=
name|table
operator|->
name|insertFrame
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|,
name|ffmt
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|frame
operator|->
name|parentFrame
argument_list|()
operator|==
name|table
operator|->
name|rootFrame
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|int
name|start
init|=
name|frame
operator|->
name|firstPosition
argument_list|()
operator|-
literal|1
decl_stmt|;
specifier|const
name|int
name|end
init|=
name|frame
operator|->
name|lastPosition
argument_list|()
decl_stmt|;
specifier|const
name|int
name|length
init|=
name|end
operator|-
name|start
operator|+
literal|1
decl_stmt|;
name|table
operator|->
name|remove
argument_list|(
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeWithChildFrame
name|void
name|tst_QTextPieceTable
operator|::
name|removeWithChildFrame
parameter_list|()
block|{
comment|/*        The piecetable layout is:         ...        1 BeginningOfFrame(first frame)        2 text        3 BeginningOfFrame(second frame)        4 text        5 text        6 EndOfFrame(second frame)        7 text        8 text        9 EndOfFrame(first frame)        ...         The idea is to remove from [2] until [6], basically some trailing text and the second frame.        In this case frameAt(2) != frameAt(6), so the assertion in remove() needed an adjustement.      */
name|QTextFrameFormat
name|ffmt
decl_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
literal|"Hello World"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|QTextFrame
modifier|*
name|frame
init|=
name|table
operator|->
name|insertFrame
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|,
name|ffmt
argument_list|)
decl_stmt|;
name|QTextFrame
modifier|*
name|childFrame
init|=
name|table
operator|->
name|insertFrame
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|,
name|ffmt
argument_list|)
decl_stmt|;
name|Q_UNUSED
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|childFrame
argument_list|)
expr_stmt|;
comment|// used to give a failing assertion
name|table
operator|->
name|remove
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearWithFrames
name|void
name|tst_QTextPieceTable
operator|::
name|clearWithFrames
parameter_list|()
block|{
comment|/*        The piecetable layout is:         ...        1 BeginningOfFrame(first frame)        2 text        3 EndOfFrame(first frame)        4 BeginningOfFrame(second frame)        5 text        6 text        7 EndOfFrame(second frame)        ...         The idea is to remove from [1] until [7].      */
name|QTextFrameFormat
name|ffmt
decl_stmt|;
name|table
operator|->
name|insert
argument_list|(
literal|0
argument_list|,
literal|"Hello World"
argument_list|,
name|charFormatIndex
argument_list|)
expr_stmt|;
name|QTextFrame
modifier|*
name|firstFrame
init|=
name|table
operator|->
name|insertFrame
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
name|ffmt
argument_list|)
decl_stmt|;
name|QTextFrame
modifier|*
name|secondFrame
init|=
name|table
operator|->
name|insertFrame
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|,
name|ffmt
argument_list|)
decl_stmt|;
specifier|const
name|int
name|start
init|=
name|firstFrame
operator|->
name|firstPosition
argument_list|()
operator|-
literal|1
decl_stmt|;
specifier|const
name|int
name|end
init|=
name|secondFrame
operator|->
name|lastPosition
argument_list|()
decl_stmt|;
specifier|const
name|int
name|length
init|=
name|end
operator|-
name|start
operator|+
literal|1
decl_stmt|;
comment|// used to give a failing assertion
name|table
operator|->
name|remove
argument_list|(
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QTextPieceTable
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qtextpiecetable.moc"
end_include
end_unit
