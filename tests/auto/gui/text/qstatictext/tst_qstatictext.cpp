begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QtGui/QPainter>
end_include
begin_include
include|#
directive|include
file|<QtGui/QImage>
end_include
begin_include
include|#
directive|include
file|<qstatictext.h>
end_include
begin_include
include|#
directive|include
file|<qpaintengine.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_include
include|#
directive|include
file|<private/qstatictext_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// #define DEBUG_SAVE_IMAGE
end_comment
begin_function
DECL|function|blankSquare
specifier|static
specifier|inline
name|QImage
name|blankSquare
parameter_list|()
block|{
comment|// a "blank" square; we compare against in our testfunctions to verify
comment|// that we have actually painted something
name|QPixmap
name|pm
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|pm
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
return|return
name|pm
operator|.
name|toImage
argument_list|()
return|;
block|}
end_function
begin_class
DECL|class|tst_QStaticText
class|class
name|tst_QStaticText
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|tst_QStaticText
name|tst_QStaticText
parameter_list|()
member_init_list|:
name|m_whiteSquare
argument_list|(
name|blankSquare
argument_list|()
argument_list|)
block|{}
private|private
name|slots
private|:
name|void
name|constructionAndDestruction
parameter_list|()
function_decl|;
name|void
name|drawToPoint_data
parameter_list|()
function_decl|;
name|void
name|drawToPoint
parameter_list|()
function_decl|;
name|void
name|drawToRect_data
parameter_list|()
function_decl|;
name|void
name|drawToRect
parameter_list|()
function_decl|;
name|void
name|setFont
parameter_list|()
function_decl|;
name|void
name|setTextWidth
parameter_list|()
function_decl|;
name|void
name|prepareToCorrectData
parameter_list|()
function_decl|;
name|void
name|prepareToWrongData
parameter_list|()
function_decl|;
name|void
name|copyConstructor
parameter_list|()
function_decl|;
name|void
name|translatedPainter
parameter_list|()
function_decl|;
name|void
name|rotatedPainter
parameter_list|()
function_decl|;
name|void
name|scaledPainter
parameter_list|()
function_decl|;
name|void
name|projectedPainter
parameter_list|()
function_decl|;
if|#
directive|if
literal|0
private|void rotatedScaledAndTranslatedPainter_data();     void rotatedScaledAndTranslatedPainter();
endif|#
directive|endif
name|void
name|transformationChanged
parameter_list|()
function_decl|;
name|void
name|plainTextVsRichText
parameter_list|()
function_decl|;
name|void
name|setPenPlainText_data
parameter_list|()
function_decl|;
name|void
name|setPenPlainText
parameter_list|()
function_decl|;
name|void
name|setPenRichText
parameter_list|()
function_decl|;
name|void
name|richTextOverridesPen
parameter_list|()
function_decl|;
name|void
name|drawStruckOutText
parameter_list|()
function_decl|;
name|void
name|drawOverlinedText
parameter_list|()
function_decl|;
name|void
name|drawUnderlinedText
parameter_list|()
function_decl|;
name|void
name|unprintableCharacter_qtbug12614
parameter_list|()
function_decl|;
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|void
name|underlinedColor_qtbug20159
parameter_list|()
function_decl|;
name|void
name|textDocumentColor
parameter_list|()
function_decl|;
endif|#
directive|endif
private|private:
name|bool
name|supportsTransformations
parameter_list|()
specifier|const
function_decl|;
DECL|member|m_whiteSquare
specifier|const
name|QImage
name|m_whiteSquare
decl_stmt|;
block|}
class|;
end_class
begin_expr_stmt
DECL|variable|Format
name|Q_DECLARE_METATYPE
argument_list|(
name|QImage
operator|::
name|Format
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|constructionAndDestruction
name|void
name|tst_QStaticText
operator|::
name|constructionAndDestruction
parameter_list|()
block|{
name|QStaticText
name|text
argument_list|(
literal|"My text"
argument_list|)
decl_stmt|;
block|}
end_function
begin_function
DECL|function|copyConstructor
name|void
name|tst_QStaticText
operator|::
name|copyConstructor
parameter_list|()
block|{
name|QStaticText
name|text
argument_list|(
name|QLatin1String
argument_list|(
literal|"My text"
argument_list|)
argument_list|)
decl_stmt|;
name|QTextOption
name|textOption
argument_list|(
name|Qt
operator|::
name|AlignRight
argument_list|)
decl_stmt|;
name|text
operator|.
name|setTextOption
argument_list|(
name|textOption
argument_list|)
expr_stmt|;
name|text
operator|.
name|setPerformanceHint
argument_list|(
name|QStaticText
operator|::
name|AggressiveCaching
argument_list|)
expr_stmt|;
name|text
operator|.
name|setTextWidth
argument_list|(
literal|123.456
argument_list|)
expr_stmt|;
name|text
operator|.
name|setTextFormat
argument_list|(
name|Qt
operator|::
name|PlainText
argument_list|)
expr_stmt|;
name|QStaticText
name|copiedText
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|copiedText
operator|.
name|setText
argument_list|(
name|QLatin1String
argument_list|(
literal|"Other text"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|copiedText
operator|.
name|textOption
argument_list|()
operator|.
name|alignment
argument_list|()
argument_list|,
name|Qt
operator|::
name|AlignRight
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|copiedText
operator|.
name|performanceHint
argument_list|()
argument_list|,
name|QStaticText
operator|::
name|AggressiveCaching
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|copiedText
operator|.
name|textWidth
argument_list|()
argument_list|,
literal|123.456
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|copiedText
operator|.
name|textFormat
argument_list|()
argument_list|,
name|Qt
operator|::
name|PlainText
argument_list|)
expr_stmt|;
name|QStaticText
name|otherCopiedText
argument_list|(
name|copiedText
argument_list|)
decl_stmt|;
name|otherCopiedText
operator|.
name|setTextWidth
argument_list|(
literal|789
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|otherCopiedText
operator|.
name|text
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Other text"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QStaticText::PerformanceHint
argument_list|)
end_macro
begin_function
DECL|function|drawToPoint_data
name|void
name|tst_QStaticText
operator|::
name|drawToPoint_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStaticText
operator|::
name|PerformanceHint
argument_list|>
argument_list|(
literal|"performanceHint"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Moderate caching"
argument_list|)
operator|<<
name|QStaticText
operator|::
name|ModerateCaching
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Aggressive caching"
argument_list|)
operator|<<
name|QStaticText
operator|::
name|AggressiveCaching
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawToPoint
name|void
name|tst_QStaticText
operator|::
name|drawToPoint
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStaticText
operator|::
name|PerformanceHint
argument_list|,
name|performanceHint
argument_list|)
expr_stmt|;
name|QPixmap
name|imageDrawText
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|imageDrawText
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|imageDrawText
argument_list|)
decl_stmt|;
name|p
operator|.
name|drawText
argument_list|(
literal|11
argument_list|,
literal|12
argument_list|,
literal|"Lorem ipsum dolor sit amet, consectetur adipiscing elit."
argument_list|)
expr_stmt|;
block|}
name|QPixmap
name|imageDrawStaticText
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|imageDrawStaticText
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|imageDrawStaticText
argument_list|)
decl_stmt|;
name|QStaticText
name|text
argument_list|(
literal|"Lorem ipsum dolor sit amet, consectetur adipiscing elit."
argument_list|)
decl_stmt|;
name|text
operator|.
name|setTextFormat
argument_list|(
name|Qt
operator|::
name|PlainText
argument_list|)
expr_stmt|;
name|text
operator|.
name|setPerformanceHint
argument_list|(
name|performanceHint
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawStaticText
argument_list|(
name|QPointF
argument_list|(
literal|11
argument_list|,
literal|12
operator|-
name|QFontMetricsF
argument_list|(
name|p
operator|.
name|font
argument_list|()
argument_list|)
operator|.
name|ascent
argument_list|()
argument_list|)
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|imageDrawText
operator|.
name|toImage
argument_list|()
operator|!=
name|m_whiteSquare
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|imageDrawStaticText
argument_list|,
name|imageDrawText
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawToRect_data
name|void
name|tst_QStaticText
operator|::
name|drawToRect_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStaticText
operator|::
name|PerformanceHint
argument_list|>
argument_list|(
literal|"performanceHint"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Moderate caching"
argument_list|)
operator|<<
name|QStaticText
operator|::
name|ModerateCaching
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Aggressive caching"
argument_list|)
operator|<<
name|QStaticText
operator|::
name|AggressiveCaching
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawToRect
name|void
name|tst_QStaticText
operator|::
name|drawToRect
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStaticText
operator|::
name|PerformanceHint
argument_list|,
name|performanceHint
argument_list|)
expr_stmt|;
name|QPixmap
name|imageDrawText
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|imageDrawText
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|imageDrawText
argument_list|)
decl_stmt|;
name|p
operator|.
name|drawText
argument_list|(
name|QRectF
argument_list|(
literal|11
argument_list|,
literal|12
argument_list|,
literal|10
argument_list|,
literal|500
argument_list|)
argument_list|,
literal|"Lorem ipsum dolor sit amet, consectetur adipiscing elit."
argument_list|)
expr_stmt|;
block|}
name|QPixmap
name|imageDrawStaticText
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|imageDrawStaticText
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|imageDrawStaticText
argument_list|)
decl_stmt|;
name|QStaticText
name|text
argument_list|(
literal|"Lorem ipsum dolor sit amet, consectetur adipiscing elit."
argument_list|)
decl_stmt|;
name|text
operator|.
name|setTextWidth
argument_list|(
literal|10
argument_list|)
operator|,
name|p
operator|.
name|setClipRect
argument_list|(
name|QRectF
argument_list|(
literal|11
argument_list|,
literal|12
argument_list|,
literal|10
argument_list|,
literal|500
argument_list|)
argument_list|)
expr_stmt|;
name|text
operator|.
name|setPerformanceHint
argument_list|(
name|performanceHint
argument_list|)
expr_stmt|;
name|text
operator|.
name|setTextFormat
argument_list|(
name|Qt
operator|::
name|PlainText
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawStaticText
argument_list|(
name|QPointF
argument_list|(
literal|11
argument_list|,
literal|12
argument_list|)
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_SAVE_IMAGE
argument_list|)
name|imageDrawText
operator|.
name|save
argument_list|(
literal|"drawToRect_imageDrawText.png"
argument_list|)
expr_stmt|;
name|imageDrawStaticText
operator|.
name|save
argument_list|(
literal|"drawToRect_imageDrawStaticText.png"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|imageDrawText
operator|.
name|toImage
argument_list|()
operator|!=
name|m_whiteSquare
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|imageDrawStaticText
argument_list|,
name|imageDrawText
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|prepareToCorrectData
name|void
name|tst_QStaticText
operator|::
name|prepareToCorrectData
parameter_list|()
block|{
name|QTransform
name|transform
decl_stmt|;
name|transform
operator|.
name|scale
argument_list|(
literal|2.0
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
name|transform
operator|.
name|translate
argument_list|(
literal|100
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|transform
operator|.
name|rotate
argument_list|(
literal|90
argument_list|,
name|Qt
operator|::
name|ZAxis
argument_list|)
expr_stmt|;
name|QPixmap
name|imageDrawText
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|imageDrawText
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|imageDrawText
argument_list|)
decl_stmt|;
name|p
operator|.
name|setTransform
argument_list|(
name|transform
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawText
argument_list|(
literal|11
argument_list|,
literal|12
argument_list|,
literal|"Lorem ipsum dolor sit amet, consectetur adipiscing elit."
argument_list|)
expr_stmt|;
block|}
name|QPixmap
name|imageDrawStaticText
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|imageDrawStaticText
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|imageDrawStaticText
argument_list|)
decl_stmt|;
name|p
operator|.
name|setTransform
argument_list|(
name|transform
argument_list|)
expr_stmt|;
name|QStaticText
name|text
argument_list|(
literal|"Lorem ipsum dolor sit amet, consectetur adipiscing elit."
argument_list|)
decl_stmt|;
name|text
operator|.
name|prepare
argument_list|(
name|transform
argument_list|,
name|p
operator|.
name|font
argument_list|()
argument_list|)
expr_stmt|;
name|text
operator|.
name|setTextFormat
argument_list|(
name|Qt
operator|::
name|PlainText
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawStaticText
argument_list|(
name|QPointF
argument_list|(
literal|11
argument_list|,
literal|12
operator|-
name|QFontMetricsF
argument_list|(
name|p
operator|.
name|font
argument_list|()
argument_list|)
operator|.
name|ascent
argument_list|()
argument_list|)
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_SAVE_IMAGE
argument_list|)
name|imageDrawText
operator|.
name|save
argument_list|(
literal|"prepareToCorrectData_imageDrawText.png"
argument_list|)
expr_stmt|;
name|imageDrawStaticText
operator|.
name|save
argument_list|(
literal|"prepareToCorrectData_imageDrawStaticText.png"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|imageDrawText
operator|.
name|toImage
argument_list|()
operator|!=
name|m_whiteSquare
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|supportsTransformations
argument_list|()
condition|)
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"Graphics system does not support transformed text on this platform"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|imageDrawStaticText
argument_list|,
name|imageDrawText
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|prepareToWrongData
name|void
name|tst_QStaticText
operator|::
name|prepareToWrongData
parameter_list|()
block|{
name|QTransform
name|transform
decl_stmt|;
name|transform
operator|.
name|scale
argument_list|(
literal|2.0
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
name|transform
operator|.
name|rotate
argument_list|(
literal|90
argument_list|,
name|Qt
operator|::
name|ZAxis
argument_list|)
expr_stmt|;
name|QPixmap
name|imageDrawText
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|imageDrawText
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|imageDrawText
argument_list|)
decl_stmt|;
name|p
operator|.
name|drawText
argument_list|(
literal|11
argument_list|,
literal|12
argument_list|,
literal|"Lorem ipsum dolor sit amet, consectetur adipiscing elit."
argument_list|)
expr_stmt|;
block|}
name|QPixmap
name|imageDrawStaticText
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|imageDrawStaticText
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|imageDrawStaticText
argument_list|)
decl_stmt|;
name|QStaticText
name|text
argument_list|(
literal|"Lorem ipsum dolor sit amet, consectetur adipiscing elit."
argument_list|)
decl_stmt|;
name|text
operator|.
name|prepare
argument_list|(
name|transform
argument_list|,
name|p
operator|.
name|font
argument_list|()
argument_list|)
expr_stmt|;
name|text
operator|.
name|setTextFormat
argument_list|(
name|Qt
operator|::
name|PlainText
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawStaticText
argument_list|(
name|QPointF
argument_list|(
literal|11
argument_list|,
literal|12
operator|-
name|QFontMetricsF
argument_list|(
name|p
operator|.
name|font
argument_list|()
argument_list|)
operator|.
name|ascent
argument_list|()
argument_list|)
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|imageDrawText
operator|.
name|toImage
argument_list|()
operator|!=
name|m_whiteSquare
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|imageDrawStaticText
argument_list|,
name|imageDrawText
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setFont
name|void
name|tst_QStaticText
operator|::
name|setFont
parameter_list|()
block|{
name|QFont
name|font
init|=
name|QGuiApplication
operator|::
name|font
argument_list|()
decl_stmt|;
name|font
operator|.
name|setBold
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|font
operator|.
name|setPointSize
argument_list|(
literal|28
argument_list|)
expr_stmt|;
name|QPixmap
name|imageDrawText
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|imageDrawText
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|imageDrawText
argument_list|)
decl_stmt|;
name|p
operator|.
name|drawText
argument_list|(
name|QRectF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|1000
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|"Lorem ipsum dolor sit amet, consectetur adipiscing elit."
argument_list|)
expr_stmt|;
name|p
operator|.
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawText
argument_list|(
name|QRectF
argument_list|(
literal|11
argument_list|,
literal|120
argument_list|,
literal|1000
argument_list|,
literal|1000
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|"Lorem ipsum dolor sit amet, consectetur adipiscing elit."
argument_list|)
expr_stmt|;
block|}
name|QPixmap
name|imageDrawStaticText
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|imageDrawStaticText
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|imageDrawStaticText
argument_list|)
decl_stmt|;
name|QStaticText
name|text
decl_stmt|;
name|text
operator|.
name|setText
argument_list|(
literal|"Lorem ipsum dolor sit amet, consectetur adipiscing elit."
argument_list|)
expr_stmt|;
name|text
operator|.
name|setTextFormat
argument_list|(
name|Qt
operator|::
name|PlainText
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawStaticText
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|p
operator|.
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawStaticText
argument_list|(
literal|11
argument_list|,
literal|120
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_SAVE_IMAGE
argument_list|)
name|imageDrawText
operator|.
name|save
argument_list|(
literal|"setFont_imageDrawText.png"
argument_list|)
expr_stmt|;
name|imageDrawStaticText
operator|.
name|save
argument_list|(
literal|"setFont_imageDrawStaticText.png"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|imageDrawText
operator|.
name|toImage
argument_list|()
operator|!=
name|m_whiteSquare
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|imageDrawStaticText
argument_list|,
name|imageDrawText
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setTextWidth
name|void
name|tst_QStaticText
operator|::
name|setTextWidth
parameter_list|()
block|{
name|QPixmap
name|imageDrawText
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|imageDrawText
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|imageDrawText
argument_list|)
decl_stmt|;
name|p
operator|.
name|drawText
argument_list|(
name|QRectF
argument_list|(
literal|11
argument_list|,
literal|12
argument_list|,
literal|10
argument_list|,
literal|500
argument_list|)
argument_list|,
literal|"Lorem ipsum dolor sit amet, consectetur adipiscing elit."
argument_list|)
expr_stmt|;
block|}
name|QPixmap
name|imageDrawStaticText
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|imageDrawStaticText
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|imageDrawStaticText
argument_list|)
decl_stmt|;
name|QStaticText
name|text
argument_list|(
literal|"Lorem ipsum dolor sit amet, consectetur adipiscing elit."
argument_list|)
decl_stmt|;
name|text
operator|.
name|setTextWidth
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|p
operator|.
name|setClipRect
argument_list|(
name|QRectF
argument_list|(
literal|11
argument_list|,
literal|12
argument_list|,
literal|10
argument_list|,
literal|500
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawStaticText
argument_list|(
name|QPointF
argument_list|(
literal|11
argument_list|,
literal|12
argument_list|)
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|imageDrawText
operator|.
name|toImage
argument_list|()
operator|!=
name|m_whiteSquare
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|imageDrawStaticText
argument_list|,
name|imageDrawText
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|translatedPainter
name|void
name|tst_QStaticText
operator|::
name|translatedPainter
parameter_list|()
block|{
name|QPixmap
name|imageDrawText
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|imageDrawText
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|imageDrawText
argument_list|)
decl_stmt|;
name|p
operator|.
name|translate
argument_list|(
literal|100
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawText
argument_list|(
literal|11
argument_list|,
literal|12
argument_list|,
literal|"Lorem ipsum dolor sit amet, consectetur adipiscing elit."
argument_list|)
expr_stmt|;
block|}
name|QPixmap
name|imageDrawStaticText
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|imageDrawStaticText
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|imageDrawStaticText
argument_list|)
decl_stmt|;
name|p
operator|.
name|translate
argument_list|(
literal|100
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|QStaticText
name|text
argument_list|(
literal|"Lorem ipsum dolor sit amet, consectetur adipiscing elit."
argument_list|)
decl_stmt|;
name|text
operator|.
name|setTextFormat
argument_list|(
name|Qt
operator|::
name|PlainText
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawStaticText
argument_list|(
name|QPointF
argument_list|(
literal|11
argument_list|,
literal|12
operator|-
name|QFontMetricsF
argument_list|(
name|p
operator|.
name|font
argument_list|()
argument_list|)
operator|.
name|ascent
argument_list|()
argument_list|)
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|imageDrawText
operator|.
name|toImage
argument_list|()
operator|!=
name|m_whiteSquare
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|imageDrawStaticText
argument_list|,
name|imageDrawText
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|supportsTransformations
name|bool
name|tst_QStaticText
operator|::
name|supportsTransformations
parameter_list|()
specifier|const
block|{
name|QPixmap
name|pm
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|pm
argument_list|)
decl_stmt|;
return|return
name|p
operator|.
name|paintEngine
argument_list|()
operator|->
name|type
argument_list|()
operator|!=
name|QPaintEngine
operator|::
name|OpenGL
return|;
block|}
end_function
begin_function
DECL|function|rotatedPainter
name|void
name|tst_QStaticText
operator|::
name|rotatedPainter
parameter_list|()
block|{
name|QPixmap
name|imageDrawText
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|imageDrawText
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|imageDrawText
argument_list|)
decl_stmt|;
name|p
operator|.
name|rotate
argument_list|(
literal|30.0
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawText
argument_list|(
name|QRectF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|100
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|"Lorem ipsum dolor sit amet, consectetur adipiscing elit."
argument_list|)
expr_stmt|;
block|}
name|QPixmap
name|imageDrawStaticText
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|imageDrawStaticText
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
block|{
name|QStaticText
name|text
argument_list|(
literal|"Lorem ipsum dolor sit amet, consectetur adipiscing elit."
argument_list|)
decl_stmt|;
name|text
operator|.
name|setTextFormat
argument_list|(
name|Qt
operator|::
name|PlainText
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|imageDrawStaticText
argument_list|)
decl_stmt|;
name|p
operator|.
name|rotate
argument_list|(
literal|30.0
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawStaticText
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_SAVE_IMAGE
argument_list|)
name|imageDrawText
operator|.
name|save
argument_list|(
literal|"rotatedPainter_imageDrawText.png"
argument_list|)
expr_stmt|;
name|imageDrawStaticText
operator|.
name|save
argument_list|(
literal|"rotatedPainter_imageDrawStaticText.png"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|imageDrawText
operator|.
name|toImage
argument_list|()
operator|!=
name|m_whiteSquare
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|supportsTransformations
argument_list|()
condition|)
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"Graphics system does not support transformed text on this platform"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|imageDrawStaticText
argument_list|,
name|imageDrawText
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|scaledPainter
name|void
name|tst_QStaticText
operator|::
name|scaledPainter
parameter_list|()
block|{
name|QPixmap
name|imageDrawText
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|imageDrawText
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|imageDrawText
argument_list|)
decl_stmt|;
name|p
operator|.
name|scale
argument_list|(
literal|2.0
argument_list|,
literal|0.2
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawText
argument_list|(
literal|11
argument_list|,
literal|12
argument_list|,
literal|"Lorem ipsum dolor sit amet, consectetur adipiscing elit."
argument_list|)
expr_stmt|;
block|}
name|QPixmap
name|imageDrawStaticText
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|imageDrawStaticText
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|imageDrawStaticText
argument_list|)
decl_stmt|;
name|p
operator|.
name|scale
argument_list|(
literal|2.0
argument_list|,
literal|0.2
argument_list|)
expr_stmt|;
name|QStaticText
name|text
argument_list|(
literal|"Lorem ipsum dolor sit amet, consectetur adipiscing elit."
argument_list|)
decl_stmt|;
name|text
operator|.
name|setTextFormat
argument_list|(
name|Qt
operator|::
name|PlainText
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawStaticText
argument_list|(
name|QPointF
argument_list|(
literal|11
argument_list|,
literal|12
operator|-
name|QFontMetricsF
argument_list|(
name|p
operator|.
name|font
argument_list|()
argument_list|)
operator|.
name|ascent
argument_list|()
argument_list|)
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|imageDrawText
operator|.
name|toImage
argument_list|()
operator|!=
name|m_whiteSquare
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|supportsTransformations
argument_list|()
condition|)
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"Graphics system does not support transformed text on this platform"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|imageDrawStaticText
argument_list|,
name|imageDrawText
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|projectedPainter
name|void
name|tst_QStaticText
operator|::
name|projectedPainter
parameter_list|()
block|{
name|QTransform
name|transform
decl_stmt|;
name|transform
operator|.
name|rotate
argument_list|(
literal|90
argument_list|,
name|Qt
operator|::
name|XAxis
argument_list|)
expr_stmt|;
name|QPixmap
name|imageDrawText
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|imageDrawText
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|imageDrawText
argument_list|)
decl_stmt|;
name|p
operator|.
name|setTransform
argument_list|(
name|transform
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawText
argument_list|(
literal|11
argument_list|,
literal|12
argument_list|,
literal|"Lorem ipsum dolor sit amet, consectetur adipiscing elit."
argument_list|)
expr_stmt|;
block|}
name|QPixmap
name|imageDrawStaticText
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|imageDrawStaticText
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|imageDrawStaticText
argument_list|)
decl_stmt|;
name|p
operator|.
name|setTransform
argument_list|(
name|transform
argument_list|)
expr_stmt|;
name|QStaticText
name|text
argument_list|(
literal|"Lorem ipsum dolor sit amet, consectetur adipiscing elit."
argument_list|)
decl_stmt|;
name|text
operator|.
name|setTextFormat
argument_list|(
name|Qt
operator|::
name|PlainText
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawStaticText
argument_list|(
name|QPointF
argument_list|(
literal|11
argument_list|,
literal|12
operator|-
name|QFontMetricsF
argument_list|(
name|p
operator|.
name|font
argument_list|()
argument_list|)
operator|.
name|ascent
argument_list|()
argument_list|)
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|imageDrawStaticText
argument_list|,
name|imageDrawText
argument_list|)
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
literal|0
end_if
begin_if
unit|void tst_QStaticText::rotatedScaledAndTranslatedPainter_data() {     QTest::addColumn<qreal>("offset");      for (int i=0; i<100; ++i) {         qreal offset = 300 + i / 100.;         QTest::newRow(QByteArray::number(offset).constData())<< offset;     } }  void tst_QStaticText::rotatedScaledAndTranslatedPainter() {     QFETCH(qreal, offset);      QPixmap imageDrawText(1000, 1000);     imageDrawText.fill(Qt::white);     {         QPainter p(&imageDrawText);         p.translate(offset, 0);         p.rotate(45.0);         p.scale(2.0, 2.0);         p.translate(100, 200);          p.drawText(11, 12, "Lorem ipsum dolor sit amet, consectetur adipiscing elit.");     }      QPixmap imageDrawStaticText(1000, 1000);     imageDrawStaticText.fill(Qt::white);     {         QPainter p(&imageDrawStaticText);         p.translate(offset, 0);         p.rotate(45.0);         p.scale(2.0, 2.0);         p.translate(100, 200);          QStaticText text("Lorem ipsum dolor sit amet, consectetur adipiscing elit.");         text.setTextFormat(Qt::PlainText);          p.drawStaticText(QPointF(11, 12 - QFontMetricsF(p.font()).ascent()), text);     }
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_SAVE_IMAGE
argument_list|)
end_if
begin_endif
unit|imageDrawText.save("rotatedScaledAndPainter_imageDrawText.png");     imageDrawStaticText.save("rotatedScaledAndPainter_imageDrawStaticText.png");
endif|#
directive|endif
end_endif
begin_endif
unit|QVERIFY(imageDrawText.toImage() != m_whiteSquare);      if (!supportsTransformations())       QEXPECT_FAIL("", "Graphics system does not support transformed text on this platform", Abort);     QCOMPARE(imageDrawStaticText, imageDrawText); }
endif|#
directive|endif
end_endif
begin_function
DECL|function|transformationChanged
name|void
name|tst_QStaticText
operator|::
name|transformationChanged
parameter_list|()
block|{
name|QPixmap
name|imageDrawText
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|imageDrawText
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|imageDrawText
argument_list|)
decl_stmt|;
name|p
operator|.
name|rotate
argument_list|(
literal|33.0
argument_list|)
expr_stmt|;
name|p
operator|.
name|scale
argument_list|(
literal|0.5
argument_list|,
literal|0.7
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawText
argument_list|(
name|QRectF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|1000
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|"Lorem ipsum dolor sit amet, consectetur adipiscing elit."
argument_list|)
expr_stmt|;
name|p
operator|.
name|scale
argument_list|(
literal|2.0
argument_list|,
literal|2.5
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawText
argument_list|(
name|QRectF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|1000
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|"Lorem ipsum dolor sit amet, consectetur adipiscing elit."
argument_list|)
expr_stmt|;
block|}
name|QPixmap
name|imageDrawStaticText
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|imageDrawStaticText
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|imageDrawStaticText
argument_list|)
decl_stmt|;
name|p
operator|.
name|rotate
argument_list|(
literal|33.0
argument_list|)
expr_stmt|;
name|p
operator|.
name|scale
argument_list|(
literal|0.5
argument_list|,
literal|0.7
argument_list|)
expr_stmt|;
name|QStaticText
name|text
argument_list|(
literal|"Lorem ipsum dolor sit amet, consectetur adipiscing elit."
argument_list|)
decl_stmt|;
name|text
operator|.
name|setTextFormat
argument_list|(
name|Qt
operator|::
name|PlainText
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawStaticText
argument_list|(
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|p
operator|.
name|scale
argument_list|(
literal|2.0
argument_list|,
literal|2.5
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawStaticText
argument_list|(
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_SAVE_IMAGE
argument_list|)
name|imageDrawText
operator|.
name|save
argument_list|(
literal|"transformationChanged_imageDrawText.png"
argument_list|)
expr_stmt|;
name|imageDrawStaticText
operator|.
name|save
argument_list|(
literal|"transformationChanged_imageDrawStaticText.png"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|imageDrawText
operator|.
name|toImage
argument_list|()
operator|!=
name|m_whiteSquare
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|supportsTransformations
argument_list|()
condition|)
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"Graphics system does not support transformed text on this platform"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|imageDrawStaticText
argument_list|,
name|imageDrawText
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|plainTextVsRichText
name|void
name|tst_QStaticText
operator|::
name|plainTextVsRichText
parameter_list|()
block|{
name|QPixmap
name|imagePlainText
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|imagePlainText
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|imagePlainText
argument_list|)
decl_stmt|;
name|QStaticText
name|staticText
decl_stmt|;
name|staticText
operator|.
name|setText
argument_list|(
literal|"FOObar"
argument_list|)
expr_stmt|;
name|staticText
operator|.
name|setTextFormat
argument_list|(
name|Qt
operator|::
name|PlainText
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawStaticText
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
name|staticText
argument_list|)
expr_stmt|;
block|}
name|QPixmap
name|imageRichText
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|imageRichText
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|imageRichText
argument_list|)
decl_stmt|;
name|QStaticText
name|staticText
decl_stmt|;
name|staticText
operator|.
name|setText
argument_list|(
literal|"<html><body>FOObar</body></html>"
argument_list|)
expr_stmt|;
name|staticText
operator|.
name|setTextFormat
argument_list|(
name|Qt
operator|::
name|RichText
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawStaticText
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
name|staticText
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_SAVE_IMAGE
argument_list|)
name|imagePlainText
operator|.
name|save
argument_list|(
literal|"plainTextVsRichText_imagePlainText.png"
argument_list|)
expr_stmt|;
name|imageRichText
operator|.
name|save
argument_list|(
literal|"plainTextVsRichText_imageRichText.png"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|imagePlainText
operator|.
name|toImage
argument_list|()
operator|!=
name|m_whiteSquare
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|imagePlainText
argument_list|,
name|imageRichText
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|checkPixels
specifier|static
name|bool
name|checkPixels
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
name|Qt
operator|::
name|GlobalColor
name|expectedColor1
parameter_list|,
name|Qt
operator|::
name|GlobalColor
name|expectedColor2
parameter_list|,
name|QByteArray
modifier|*
name|errorMessage
parameter_list|)
block|{
specifier|const
name|QRgb
name|expectedRgb1
init|=
name|QColor
argument_list|(
name|expectedColor1
argument_list|)
operator|.
name|rgba
argument_list|()
decl_stmt|;
specifier|const
name|QRgb
name|expectedRgb2
init|=
name|QColor
argument_list|(
name|expectedColor2
argument_list|)
operator|.
name|rgba
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|,
name|w
init|=
name|image
operator|.
name|width
argument_list|()
init|;
name|x
operator|<
name|w
condition|;
operator|++
name|x
control|)
block|{
for|for
control|(
name|int
name|y
init|=
literal|0
init|,
name|h
init|=
name|image
operator|.
name|height
argument_list|()
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
specifier|const
name|QRgb
name|pixel
init|=
name|image
operator|.
name|pixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
if|if
condition|(
name|pixel
operator|!=
name|expectedRgb1
operator|&&
name|pixel
operator|!=
name|expectedRgb2
condition|)
block|{
name|QString
name|message
decl_stmt|;
name|QDebug
argument_list|(
operator|&
name|message
argument_list|)
operator|<<
literal|"Color mismatch in image"
operator|<<
name|image
operator|<<
literal|"at"
operator|<<
name|x
operator|<<
literal|','
operator|<<
name|y
operator|<<
literal|':'
operator|<<
name|showbase
operator|<<
name|hex
operator|<<
name|pixel
operator|<<
literal|"(expected: "
operator|<<
name|expectedRgb1
operator|<<
literal|','
operator|<<
name|expectedRgb2
operator|<<
literal|')'
expr_stmt|;
operator|*
name|errorMessage
operator|=
name|message
operator|.
name|toLocal8Bit
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|setPenPlainText_data
name|void
name|tst_QStaticText
operator|::
name|setPenPlainText_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QImage
operator|::
name|Format
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"argb32pm"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rgb32"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGB32
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rgba8888pm"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGBA8888_Premultiplied
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rgbx8888"
argument_list|)
operator|<<
name|QImage
operator|::
name|Format_RGBX8888
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setPenPlainText
name|void
name|tst_QStaticText
operator|::
name|setPenPlainText
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QImage
operator|::
name|Format
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QFont
name|font
init|=
name|QGuiApplication
operator|::
name|font
argument_list|()
decl_stmt|;
name|font
operator|.
name|setStyleStrategy
argument_list|(
name|QFont
operator|::
name|NoAntialias
argument_list|)
expr_stmt|;
name|QFontMetricsF
name|fm
argument_list|(
name|font
argument_list|)
decl_stmt|;
name|QImage
name|image
argument_list|(
name|qCeil
argument_list|(
name|fm
operator|.
name|width
argument_list|(
literal|"XXXXX"
argument_list|)
argument_list|)
argument_list|,
name|qCeil
argument_list|(
name|fm
operator|.
name|height
argument_list|()
argument_list|)
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|image
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|image
argument_list|)
decl_stmt|;
name|p
operator|.
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPen
argument_list|(
name|Qt
operator|::
name|yellow
argument_list|)
expr_stmt|;
name|QStaticText
name|staticText
argument_list|(
literal|"XXXXX"
argument_list|)
decl_stmt|;
name|staticText
operator|.
name|setTextFormat
argument_list|(
name|Qt
operator|::
name|PlainText
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawStaticText
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|staticText
argument_list|)
expr_stmt|;
block|}
name|QByteArray
name|errorMessage
decl_stmt|;
name|QVERIFY2
argument_list|(
name|checkPixels
argument_list|(
name|image
argument_list|,
name|Qt
operator|::
name|yellow
argument_list|,
name|Qt
operator|::
name|white
argument_list|,
operator|&
name|errorMessage
argument_list|)
argument_list|,
name|errorMessage
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setPenRichText
name|void
name|tst_QStaticText
operator|::
name|setPenRichText
parameter_list|()
block|{
name|QFont
name|font
init|=
name|QGuiApplication
operator|::
name|font
argument_list|()
decl_stmt|;
name|font
operator|.
name|setStyleStrategy
argument_list|(
name|QFont
operator|::
name|NoAntialias
argument_list|)
expr_stmt|;
name|QFontMetricsF
name|fm
argument_list|(
name|font
argument_list|)
decl_stmt|;
name|QPixmap
name|image
argument_list|(
name|qCeil
argument_list|(
name|fm
operator|.
name|width
argument_list|(
literal|"XXXXX"
argument_list|)
argument_list|)
argument_list|,
name|qCeil
argument_list|(
name|fm
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|image
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|image
argument_list|)
decl_stmt|;
name|p
operator|.
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPen
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
name|QStaticText
name|staticText
decl_stmt|;
name|staticText
operator|.
name|setText
argument_list|(
literal|"<html><body>XXXXX</body></html>"
argument_list|)
expr_stmt|;
name|staticText
operator|.
name|setTextFormat
argument_list|(
name|Qt
operator|::
name|RichText
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawStaticText
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|staticText
argument_list|)
expr_stmt|;
block|}
name|QByteArray
name|errorMessage
decl_stmt|;
name|QVERIFY2
argument_list|(
name|checkPixels
argument_list|(
name|image
operator|.
name|toImage
argument_list|()
argument_list|,
name|Qt
operator|::
name|green
argument_list|,
name|Qt
operator|::
name|white
argument_list|,
operator|&
name|errorMessage
argument_list|)
argument_list|,
name|errorMessage
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|richTextOverridesPen
name|void
name|tst_QStaticText
operator|::
name|richTextOverridesPen
parameter_list|()
block|{
name|QFont
name|font
init|=
name|QGuiApplication
operator|::
name|font
argument_list|()
decl_stmt|;
name|font
operator|.
name|setStyleStrategy
argument_list|(
name|QFont
operator|::
name|NoAntialias
argument_list|)
expr_stmt|;
name|QFontMetricsF
name|fm
argument_list|(
name|font
argument_list|)
decl_stmt|;
name|QPixmap
name|image
argument_list|(
name|qCeil
argument_list|(
name|fm
operator|.
name|width
argument_list|(
literal|"XXXXX"
argument_list|)
argument_list|)
argument_list|,
name|qCeil
argument_list|(
name|fm
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|image
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|image
argument_list|)
decl_stmt|;
name|p
operator|.
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPen
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
name|QStaticText
name|staticText
decl_stmt|;
name|staticText
operator|.
name|setText
argument_list|(
literal|"<html><body><font color=\"#ff0000\">XXXXX</font></body></html>"
argument_list|)
expr_stmt|;
name|staticText
operator|.
name|setTextFormat
argument_list|(
name|Qt
operator|::
name|RichText
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawStaticText
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|staticText
argument_list|)
expr_stmt|;
block|}
name|QByteArray
name|errorMessage
decl_stmt|;
name|QVERIFY2
argument_list|(
name|checkPixels
argument_list|(
name|image
operator|.
name|toImage
argument_list|()
argument_list|,
name|Qt
operator|::
name|red
argument_list|,
name|Qt
operator|::
name|white
argument_list|,
operator|&
name|errorMessage
argument_list|)
argument_list|,
name|errorMessage
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawStruckOutText
name|void
name|tst_QStaticText
operator|::
name|drawStruckOutText
parameter_list|()
block|{
name|QPixmap
name|imageDrawText
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|QPixmap
name|imageDrawStaticText
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|imageDrawText
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|imageDrawStaticText
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|QString
name|s
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Foobar"
argument_list|)
decl_stmt|;
name|QFont
name|font
decl_stmt|;
name|font
operator|.
name|setStrikeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|imageDrawText
argument_list|)
decl_stmt|;
name|p
operator|.
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawText
argument_list|(
name|QPointF
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|)
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|imageDrawStaticText
argument_list|)
decl_stmt|;
name|QStaticText
name|text
init|=
name|QStaticText
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|p
operator|.
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawStaticText
argument_list|(
name|QPointF
argument_list|(
literal|50
argument_list|,
literal|50
operator|-
name|QFontMetricsF
argument_list|(
name|p
operator|.
name|font
argument_list|()
argument_list|)
operator|.
name|ascent
argument_list|()
argument_list|)
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_SAVE_IMAGE
argument_list|)
name|imageDrawText
operator|.
name|save
argument_list|(
literal|"drawStruckOutText_imageDrawText.png"
argument_list|)
expr_stmt|;
name|imageDrawStaticText
operator|.
name|save
argument_list|(
literal|"drawStruckOutText_imageDrawStaticText.png"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|imageDrawText
operator|.
name|toImage
argument_list|()
operator|!=
name|m_whiteSquare
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|imageDrawText
argument_list|,
name|imageDrawStaticText
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawOverlinedText
name|void
name|tst_QStaticText
operator|::
name|drawOverlinedText
parameter_list|()
block|{
name|QPixmap
name|imageDrawText
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|QPixmap
name|imageDrawStaticText
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|imageDrawText
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|imageDrawStaticText
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|QString
name|s
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Foobar"
argument_list|)
decl_stmt|;
name|QFont
name|font
decl_stmt|;
name|font
operator|.
name|setOverline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|imageDrawText
argument_list|)
decl_stmt|;
name|p
operator|.
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawText
argument_list|(
name|QPointF
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|)
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|imageDrawStaticText
argument_list|)
decl_stmt|;
name|QStaticText
name|text
init|=
name|QStaticText
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|p
operator|.
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawStaticText
argument_list|(
name|QPointF
argument_list|(
literal|50
argument_list|,
literal|50
operator|-
name|QFontMetricsF
argument_list|(
name|p
operator|.
name|font
argument_list|()
argument_list|)
operator|.
name|ascent
argument_list|()
argument_list|)
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_SAVE_IMAGE
argument_list|)
name|imageDrawText
operator|.
name|save
argument_list|(
literal|"drawOverlinedText_imageDrawText.png"
argument_list|)
expr_stmt|;
name|imageDrawStaticText
operator|.
name|save
argument_list|(
literal|"drawOverlinedText_imageDrawStaticText.png"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|imageDrawText
operator|.
name|toImage
argument_list|()
operator|!=
name|m_whiteSquare
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|imageDrawText
argument_list|,
name|imageDrawStaticText
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawUnderlinedText
name|void
name|tst_QStaticText
operator|::
name|drawUnderlinedText
parameter_list|()
block|{
name|QPixmap
name|imageDrawText
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|QPixmap
name|imageDrawStaticText
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|imageDrawText
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|imageDrawStaticText
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|QString
name|s
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Foobar"
argument_list|)
decl_stmt|;
name|QFont
name|font
decl_stmt|;
name|font
operator|.
name|setUnderline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|imageDrawText
argument_list|)
decl_stmt|;
name|p
operator|.
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawText
argument_list|(
name|QPointF
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|)
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|imageDrawStaticText
argument_list|)
decl_stmt|;
name|QStaticText
name|text
init|=
name|QStaticText
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|p
operator|.
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawStaticText
argument_list|(
name|QPointF
argument_list|(
literal|50
argument_list|,
literal|50
operator|-
name|QFontMetricsF
argument_list|(
name|p
operator|.
name|font
argument_list|()
argument_list|)
operator|.
name|ascent
argument_list|()
argument_list|)
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_SAVE_IMAGE
argument_list|)
name|imageDrawText
operator|.
name|save
argument_list|(
literal|"drawUnderlinedText_imageDrawText.png"
argument_list|)
expr_stmt|;
name|imageDrawStaticText
operator|.
name|save
argument_list|(
literal|"drawUnderlinedText_imageDrawStaticText.png"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|imageDrawText
argument_list|,
name|imageDrawStaticText
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unprintableCharacter_qtbug12614
name|void
name|tst_QStaticText
operator|::
name|unprintableCharacter_qtbug12614
parameter_list|()
block|{
name|QString
name|s
argument_list|(
name|QChar
argument_list|(
literal|0x200B
argument_list|)
argument_list|)
decl_stmt|;
comment|// U+200B, ZERO WIDTH SPACE
name|QStaticText
name|staticText
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|staticText
operator|.
name|size
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// Force layout. Should not crash.
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_function
DECL|function|underlinedColor_qtbug20159
name|void
name|tst_QStaticText
operator|::
name|underlinedColor_qtbug20159
parameter_list|()
block|{
name|QString
name|multiScriptText
decl_stmt|;
name|multiScriptText
operator|+=
name|QChar
argument_list|(
literal|0x0410
argument_list|)
expr_stmt|;
comment|// Cyrillic 'A'
name|multiScriptText
operator|+=
name|QLatin1Char
argument_list|(
literal|'A'
argument_list|)
expr_stmt|;
name|QStaticText
name|staticText
argument_list|(
name|multiScriptText
argument_list|)
decl_stmt|;
name|QFont
name|font
decl_stmt|;
name|font
operator|.
name|setUnderline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|staticText
operator|.
name|prepare
argument_list|(
name|QTransform
argument_list|()
argument_list|,
name|font
argument_list|)
expr_stmt|;
name|QStaticTextPrivate
modifier|*
name|d
init|=
name|QStaticTextPrivate
operator|::
name|get
argument_list|(
operator|&
name|staticText
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|d
operator|->
name|itemCount
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// The pen should not be marked as dirty when drawing the underline
name|QVERIFY
argument_list|(
operator|!
name|d
operator|->
name|items
index|[
literal|0
index|]
operator|.
name|color
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|d
operator|->
name|items
index|[
literal|1
index|]
operator|.
name|color
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|textDocumentColor
name|void
name|tst_QStaticText
operator|::
name|textDocumentColor
parameter_list|()
block|{
name|QStaticText
name|staticText
argument_list|(
literal|"A<font color=\"red\">B</font>"
argument_list|)
decl_stmt|;
name|staticText
operator|.
name|setTextFormat
argument_list|(
name|Qt
operator|::
name|RichText
argument_list|)
expr_stmt|;
name|staticText
operator|.
name|prepare
argument_list|()
expr_stmt|;
name|QStaticTextPrivate
modifier|*
name|d
init|=
name|QStaticTextPrivate
operator|::
name|get
argument_list|(
operator|&
name|staticText
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|d
operator|->
name|itemCount
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// The pen should not be marked as dirty when drawing the underline
name|QVERIFY
argument_list|(
operator|!
name|d
operator|->
name|items
index|[
literal|0
index|]
operator|.
name|color
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|d
operator|->
name|items
index|[
literal|1
index|]
operator|.
name|color
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d
operator|->
name|items
index|[
literal|1
index|]
operator|.
name|color
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QStaticText
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qstatictext.moc"
end_include
end_unit
