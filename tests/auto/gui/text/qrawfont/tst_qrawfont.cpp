begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtGui/QFontDatabase>
end_include
begin_include
include|#
directive|include
file|<qrawfont.h>
end_include
begin_include
include|#
directive|include
file|<private/qrawfont_p.h>
end_include
begin_class
DECL|class|tst_QRawFont
class|class
name|tst_QRawFont
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_RAWFONT
argument_list|)
private|private
name|slots
private|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|invalidRawFont
parameter_list|()
function_decl|;
name|void
name|explicitRawFontNotLoadedInDatabase_data
parameter_list|()
function_decl|;
name|void
name|explicitRawFontNotLoadedInDatabase
parameter_list|()
function_decl|;
name|void
name|explicitRawFontNotAvailableInSystem_data
parameter_list|()
function_decl|;
name|void
name|explicitRawFontNotAvailableInSystem
parameter_list|()
function_decl|;
name|void
name|correctFontData_data
parameter_list|()
function_decl|;
name|void
name|correctFontData
parameter_list|()
function_decl|;
name|void
name|glyphIndices
parameter_list|()
function_decl|;
name|void
name|advances_data
parameter_list|()
function_decl|;
name|void
name|advances
parameter_list|()
function_decl|;
name|void
name|textLayout
parameter_list|()
function_decl|;
name|void
name|fontTable_data
parameter_list|()
function_decl|;
name|void
name|fontTable
parameter_list|()
function_decl|;
name|void
name|supportedWritingSystems_data
parameter_list|()
function_decl|;
name|void
name|supportedWritingSystems
parameter_list|()
function_decl|;
name|void
name|supportsCharacter_data
parameter_list|()
function_decl|;
name|void
name|supportsCharacter
parameter_list|()
function_decl|;
name|void
name|supportsUcs4Character_data
parameter_list|()
function_decl|;
name|void
name|supportsUcs4Character
parameter_list|()
function_decl|;
name|void
name|fromFont_data
parameter_list|()
function_decl|;
name|void
name|fromFont
parameter_list|()
function_decl|;
name|void
name|copyConstructor_data
parameter_list|()
function_decl|;
name|void
name|copyConstructor
parameter_list|()
function_decl|;
name|void
name|detach_data
parameter_list|()
function_decl|;
name|void
name|detach
parameter_list|()
function_decl|;
name|void
name|unsupportedWritingSystem_data
parameter_list|()
function_decl|;
name|void
name|unsupportedWritingSystem
parameter_list|()
function_decl|;
name|void
name|rawFontSetPixelSize_data
parameter_list|()
function_decl|;
name|void
name|rawFontSetPixelSize
parameter_list|()
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
name|void
name|multipleRawFontsFromData
parameter_list|()
function_decl|;
endif|#
directive|endif
private|private:
DECL|member|testFont
name|QString
name|testFont
decl_stmt|;
DECL|member|testFontBoldItalic
name|QString
name|testFontBoldItalic
decl_stmt|;
endif|#
directive|endif
comment|// QT_NO_RAWFONT
block|}
class|;
end_class
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_RAWFONT
argument_list|)
end_if
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QFont::HintingPreference
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QFont::Style
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QFont::Weight
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QFontDatabase::WritingSystem
argument_list|)
end_macro
begin_function
DECL|function|init
name|void
name|tst_QRawFont
operator|::
name|init
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|initTestCase
name|void
name|tst_QRawFont
operator|::
name|initTestCase
parameter_list|()
block|{
name|testFont
operator|=
name|QFINDTESTDATA
argument_list|(
literal|"testfont.ttf"
argument_list|)
expr_stmt|;
name|testFontBoldItalic
operator|=
name|QFINDTESTDATA
argument_list|(
literal|"testfont_bold_italic.ttf"
argument_list|)
expr_stmt|;
if|if
condition|(
name|testFont
operator|.
name|isEmpty
argument_list|()
operator|||
name|testFontBoldItalic
operator|.
name|isEmpty
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"qrawfont unittest font files not found!"
argument_list|)
expr_stmt|;
name|QFontDatabase
name|database
decl_stmt|;
if|if
condition|(
name|database
operator|.
name|families
argument_list|()
operator|.
name|count
argument_list|()
operator|==
literal|0
condition|)
name|QSKIP
argument_list|(
literal|"No fonts available!!!"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invalidRawFont
name|void
name|tst_QRawFont
operator|::
name|invalidRawFont
parameter_list|()
block|{
name|QRawFont
name|font
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|font
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|font
operator|.
name|pixelSize
argument_list|()
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|font
operator|.
name|familyName
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|font
operator|.
name|style
argument_list|()
argument_list|,
name|QFont
operator|::
name|StyleNormal
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|font
operator|.
name|weight
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|font
operator|.
name|ascent
argument_list|()
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|font
operator|.
name|descent
argument_list|()
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|font
operator|.
name|glyphIndexesForString
argument_list|(
name|QLatin1String
argument_list|(
literal|"Test"
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|explicitRawFontNotLoadedInDatabase_data
name|void
name|tst_QRawFont
operator|::
name|explicitRawFontNotLoadedInDatabase_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QFont
operator|::
name|HintingPreference
argument_list|>
argument_list|(
literal|"hintingPreference"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Default hinting preference"
argument_list|)
operator|<<
name|QFont
operator|::
name|PreferDefaultHinting
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"No hinting"
argument_list|)
operator|<<
name|QFont
operator|::
name|PreferNoHinting
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Vertical hinting"
argument_list|)
operator|<<
name|QFont
operator|::
name|PreferVerticalHinting
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Full hinting"
argument_list|)
operator|<<
name|QFont
operator|::
name|PreferFullHinting
expr_stmt|;
block|}
end_function
begin_function
DECL|function|explicitRawFontNotLoadedInDatabase
name|void
name|tst_QRawFont
operator|::
name|explicitRawFontNotLoadedInDatabase
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QFont
operator|::
name|HintingPreference
argument_list|,
name|hintingPreference
argument_list|)
expr_stmt|;
name|QRawFont
name|font
argument_list|(
name|testFont
argument_list|,
literal|10
argument_list|,
name|hintingPreference
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|font
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QFontDatabase
argument_list|()
operator|.
name|families
argument_list|()
operator|.
name|contains
argument_list|(
name|font
operator|.
name|familyName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|explicitRawFontNotAvailableInSystem_data
name|void
name|tst_QRawFont
operator|::
name|explicitRawFontNotAvailableInSystem_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QFont
operator|::
name|HintingPreference
argument_list|>
argument_list|(
literal|"hintingPreference"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Default hinting preference"
argument_list|)
operator|<<
name|QFont
operator|::
name|PreferDefaultHinting
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"No hinting"
argument_list|)
operator|<<
name|QFont
operator|::
name|PreferNoHinting
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Vertical hinting"
argument_list|)
operator|<<
name|QFont
operator|::
name|PreferVerticalHinting
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Full hinting"
argument_list|)
operator|<<
name|QFont
operator|::
name|PreferFullHinting
expr_stmt|;
block|}
end_function
begin_function
DECL|function|explicitRawFontNotAvailableInSystem
name|void
name|tst_QRawFont
operator|::
name|explicitRawFontNotAvailableInSystem
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QFont
operator|::
name|HintingPreference
argument_list|,
name|hintingPreference
argument_list|)
expr_stmt|;
name|QRawFont
name|rawfont
argument_list|(
name|testFont
argument_list|,
literal|10
argument_list|,
name|hintingPreference
argument_list|)
decl_stmt|;
block|{
name|QFont
name|font
argument_list|(
name|rawfont
operator|.
name|familyName
argument_list|()
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|font
operator|.
name|exactMatch
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|font
operator|.
name|family
argument_list|()
operator|!=
name|QFontInfo
argument_list|(
name|font
argument_list|)
operator|.
name|family
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|correctFontData_data
name|void
name|tst_QRawFont
operator|::
name|correctFontData_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedFamilyName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QFont
operator|::
name|Style
argument_list|>
argument_list|(
literal|"style"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QFont
operator|::
name|Weight
argument_list|>
argument_list|(
literal|"weight"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QFont
operator|::
name|HintingPreference
argument_list|>
argument_list|(
literal|"hintingPreference"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qreal
argument_list|>
argument_list|(
literal|"unitsPerEm"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qreal
argument_list|>
argument_list|(
literal|"pixelSize"
argument_list|)
expr_stmt|;
name|int
name|hintingPreferences
index|[]
init|=
block|{
name|int
argument_list|(
name|QFont
operator|::
name|PreferDefaultHinting
argument_list|)
block|,
name|int
argument_list|(
name|QFont
operator|::
name|PreferNoHinting
argument_list|)
block|,
name|int
argument_list|(
name|QFont
operator|::
name|PreferVerticalHinting
argument_list|)
block|,
name|int
argument_list|(
name|QFont
operator|::
name|PreferFullHinting
argument_list|)
block|,
operator|-
literal|1
block|}
decl_stmt|;
name|int
modifier|*
name|hintingPreference
init|=
name|hintingPreferences
decl_stmt|;
while|while
condition|(
operator|*
name|hintingPreference
operator|>=
literal|0
condition|)
block|{
name|QString
name|fileName
init|=
name|testFont
decl_stmt|;
name|QString
name|title
init|=
name|fileName
operator|+
name|QLatin1String
argument_list|(
literal|": hintingPreference="
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
operator|*
name|hintingPreference
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|title
argument_list|)
argument_list|)
operator|<<
name|fileName
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QtBidiTestFont"
argument_list|)
operator|<<
name|QFont
operator|::
name|StyleNormal
operator|<<
name|QFont
operator|::
name|Normal
operator|<<
name|QFont
operator|::
name|HintingPreference
argument_list|(
operator|*
name|hintingPreference
argument_list|)
operator|<<
literal|1000.0
operator|<<
literal|10.0
expr_stmt|;
name|fileName
operator|=
name|testFontBoldItalic
expr_stmt|;
name|title
operator|=
name|fileName
operator|+
name|QLatin1String
argument_list|(
literal|": hintingPreference="
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
operator|*
name|hintingPreference
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|title
argument_list|)
argument_list|)
operator|<<
name|fileName
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QtBidiTestFont"
argument_list|)
operator|<<
name|QFont
operator|::
name|StyleItalic
operator|<<
name|QFont
operator|::
name|Bold
operator|<<
name|QFont
operator|::
name|HintingPreference
argument_list|(
operator|*
name|hintingPreference
argument_list|)
operator|<<
literal|1000.0
operator|<<
literal|10.0
expr_stmt|;
operator|++
name|hintingPreference
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|correctFontData
name|void
name|tst_QRawFont
operator|::
name|correctFontData
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedFamilyName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QFont
operator|::
name|Style
argument_list|,
name|style
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QFont
operator|::
name|Weight
argument_list|,
name|weight
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QFont
operator|::
name|HintingPreference
argument_list|,
name|hintingPreference
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qreal
argument_list|,
name|unitsPerEm
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qreal
argument_list|,
name|pixelSize
argument_list|)
expr_stmt|;
name|QRawFont
name|font
argument_list|(
name|fileName
argument_list|,
literal|10
argument_list|,
name|hintingPreference
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|font
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|font
operator|.
name|familyName
argument_list|()
argument_list|,
name|expectedFamilyName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|font
operator|.
name|style
argument_list|()
argument_list|,
name|style
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|font
operator|.
name|weight
argument_list|()
argument_list|,
name|int
argument_list|(
name|weight
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|font
operator|.
name|hintingPreference
argument_list|()
argument_list|,
name|hintingPreference
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|font
operator|.
name|unitsPerEm
argument_list|()
argument_list|,
name|unitsPerEm
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|font
operator|.
name|pixelSize
argument_list|()
argument_list|,
name|pixelSize
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|glyphIndices
name|void
name|tst_QRawFont
operator|::
name|glyphIndices
parameter_list|()
block|{
name|QRawFont
name|font
argument_list|(
name|testFont
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|font
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|quint32
argument_list|>
name|glyphIndices
init|=
name|font
operator|.
name|glyphIndexesForString
argument_list|(
name|QLatin1String
argument_list|(
literal|"Foobar"
argument_list|)
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|quint32
argument_list|>
name|expectedGlyphIndices
decl_stmt|;
name|expectedGlyphIndices
operator|<<
literal|44
operator|<<
literal|83
operator|<<
literal|83
operator|<<
literal|70
operator|<<
literal|69
operator|<<
literal|86
expr_stmt|;
name|QCOMPARE
argument_list|(
name|glyphIndices
argument_list|,
name|expectedGlyphIndices
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|advances_data
name|void
name|tst_QRawFont
operator|::
name|advances_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QFont
operator|::
name|HintingPreference
argument_list|>
argument_list|(
literal|"hintingPreference"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Default hinting preference"
argument_list|)
operator|<<
name|QFont
operator|::
name|PreferDefaultHinting
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"No hinting"
argument_list|)
operator|<<
name|QFont
operator|::
name|PreferNoHinting
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Vertical hinting"
argument_list|)
operator|<<
name|QFont
operator|::
name|PreferVerticalHinting
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Full hinting"
argument_list|)
operator|<<
name|QFont
operator|::
name|PreferFullHinting
expr_stmt|;
block|}
end_function
begin_function
DECL|function|advances
name|void
name|tst_QRawFont
operator|::
name|advances
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QFont
operator|::
name|HintingPreference
argument_list|,
name|hintingPreference
argument_list|)
expr_stmt|;
name|QRawFont
name|font
argument_list|(
name|testFont
argument_list|,
literal|10
argument_list|,
name|hintingPreference
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|font
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QRawFontPrivate
modifier|*
name|font_d
init|=
name|QRawFontPrivate
operator|::
name|get
argument_list|(
name|font
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|font_d
operator|->
name|fontEngine
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|quint32
argument_list|>
name|glyphIndices
decl_stmt|;
name|glyphIndices
operator|<<
literal|44
operator|<<
literal|83
operator|<<
literal|83
operator|<<
literal|70
operator|<<
literal|69
operator|<<
literal|86
expr_stmt|;
comment|// "Foobar"
name|bool
name|supportsSubPixelPositions
init|=
name|font_d
operator|->
name|fontEngine
operator|->
name|supportsSubPixelPositions
argument_list|()
decl_stmt|;
name|QVector
argument_list|<
name|QPointF
argument_list|>
name|advances
init|=
name|font
operator|.
name|advancesForGlyphIndexes
argument_list|(
name|glyphIndices
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glyphIndices
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|qRound
argument_list|(
name|advances
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
literal|8.0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|supportsSubPixelPositions
condition|)
name|QVERIFY
argument_list|(
name|advances
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|x
argument_list|()
operator|>
literal|8.0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyIsNull
argument_list|(
name|advances
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|textLayout
name|void
name|tst_QRawFont
operator|::
name|textLayout
parameter_list|()
block|{
name|QFontDatabase
name|fontDatabase
decl_stmt|;
name|int
name|id
init|=
name|fontDatabase
operator|.
name|addApplicationFont
argument_list|(
name|testFont
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|id
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|QString
name|familyName
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QtBidiTestFont"
argument_list|)
decl_stmt|;
name|QFont
name|font
argument_list|(
name|familyName
argument_list|)
decl_stmt|;
name|font
operator|.
name|setPixelSize
argument_list|(
literal|18.0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFontInfo
argument_list|(
name|font
argument_list|)
operator|.
name|family
argument_list|()
argument_list|,
name|familyName
argument_list|)
expr_stmt|;
name|QTextLayout
name|layout
argument_list|(
name|QLatin1String
argument_list|(
literal|"Foobar"
argument_list|)
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|layout
operator|.
name|createLine
argument_list|()
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|QList
argument_list|<
name|QGlyphRun
argument_list|>
name|glyphRuns
init|=
name|layout
operator|.
name|glyphRuns
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|glyphRuns
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QGlyphRun
name|glyphs
init|=
name|glyphRuns
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QRawFont
name|rawFont
init|=
name|glyphs
operator|.
name|rawFont
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|rawFont
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rawFont
operator|.
name|familyName
argument_list|()
argument_list|,
name|familyName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rawFont
operator|.
name|pixelSize
argument_list|()
argument_list|,
literal|18.0
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|quint32
argument_list|>
name|expectedGlyphIndices
decl_stmt|;
name|expectedGlyphIndices
operator|<<
literal|44
operator|<<
literal|83
operator|<<
literal|83
operator|<<
literal|70
operator|<<
literal|69
operator|<<
literal|86
expr_stmt|;
name|QCOMPARE
argument_list|(
name|glyphs
operator|.
name|glyphIndexes
argument_list|()
argument_list|,
name|expectedGlyphIndices
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fontDatabase
operator|.
name|removeApplicationFont
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fontTable_data
name|void
name|tst_QRawFont
operator|::
name|fontTable_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"tagName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QFont
operator|::
name|HintingPreference
argument_list|>
argument_list|(
literal|"hintingPreference"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"offset"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|quint32
argument_list|>
argument_list|(
literal|"expectedValue"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Head table, magic number, default hinting"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"head"
argument_list|)
operator|<<
name|QFont
operator|::
name|PreferDefaultHinting
operator|<<
literal|12
operator|<<
operator|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|?
literal|0x5F0F3CF5
else|:
literal|0xF53C0F5F
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Head table, magic number, no hinting"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"head"
argument_list|)
operator|<<
name|QFont
operator|::
name|PreferNoHinting
operator|<<
literal|12
operator|<<
operator|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|?
literal|0x5F0F3CF5
else|:
literal|0xF53C0F5F
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Head table, magic number, vertical hinting"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"head"
argument_list|)
operator|<<
name|QFont
operator|::
name|PreferVerticalHinting
operator|<<
literal|12
operator|<<
operator|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|?
literal|0x5F0F3CF5
else|:
literal|0xF53C0F5F
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Head table, magic number, full hinting"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"head"
argument_list|)
operator|<<
name|QFont
operator|::
name|PreferFullHinting
operator|<<
literal|12
operator|<<
operator|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|?
literal|0x5F0F3CF5
else|:
literal|0xF53C0F5F
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fontTable
name|void
name|tst_QRawFont
operator|::
name|fontTable
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|tagName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QFont
operator|::
name|HintingPreference
argument_list|,
name|hintingPreference
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|quint32
argument_list|,
name|expectedValue
argument_list|)
expr_stmt|;
name|QRawFont
name|font
argument_list|(
name|testFont
argument_list|,
literal|10
argument_list|,
name|hintingPreference
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|font
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QByteArray
name|table
init|=
name|font
operator|.
name|fontTable
argument_list|(
name|tagName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|table
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|quint32
modifier|*
name|value
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint32
operator|*
argument_list|>
argument_list|(
name|table
operator|.
name|constData
argument_list|()
operator|+
name|offset
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|value
argument_list|,
name|expectedValue
argument_list|)
expr_stmt|;
block|}
end_function
begin_typedef
DECL|typedef|WritingSystemList
typedef|typedef
name|QList
argument_list|<
name|QFontDatabase
operator|::
name|WritingSystem
argument_list|>
name|WritingSystemList
typedef|;
end_typedef
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|WritingSystemList
argument_list|)
end_macro
begin_function
DECL|function|supportedWritingSystems_data
name|void
name|tst_QRawFont
operator|::
name|supportedWritingSystems_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|WritingSystemList
argument_list|>
argument_list|(
literal|"writingSystems"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QFont
operator|::
name|HintingPreference
argument_list|>
argument_list|(
literal|"hintingPreference"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|hintingPreference
init|=
name|QFont
operator|::
name|PreferDefaultHinting
init|;
name|hintingPreference
operator|<=
name|QFont
operator|::
name|PreferFullHinting
condition|;
operator|++
name|hintingPreference
control|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"testfont.ttf, hintingPreference=%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|hintingPreference
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|testFont
operator|<<
operator|(
name|QList
argument_list|<
name|QFontDatabase
operator|::
name|WritingSystem
argument_list|>
argument_list|()
operator|<<
name|QFontDatabase
operator|::
name|Latin
operator|<<
name|QFontDatabase
operator|::
name|Hebrew
operator|<<
name|QFontDatabase
operator|::
name|Vietnamese
operator|)
comment|// Vietnamese uses same unicode bits as Latin
operator|<<
name|QFont
operator|::
name|HintingPreference
argument_list|(
name|hintingPreference
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"testfont_bold_italic.ttf, hintingPreference=%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|hintingPreference
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|testFontBoldItalic
operator|<<
operator|(
name|QList
argument_list|<
name|QFontDatabase
operator|::
name|WritingSystem
argument_list|>
argument_list|()
operator|<<
name|QFontDatabase
operator|::
name|Latin
operator|<<
name|QFontDatabase
operator|::
name|Hebrew
operator|<<
name|QFontDatabase
operator|::
name|Devanagari
operator|<<
name|QFontDatabase
operator|::
name|Vietnamese
operator|)
comment|// Vietnamese uses same unicode bits as Latin
operator|<<
name|QFont
operator|::
name|HintingPreference
argument_list|(
name|hintingPreference
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|supportedWritingSystems
name|void
name|tst_QRawFont
operator|::
name|supportedWritingSystems
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|WritingSystemList
argument_list|,
name|writingSystems
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QFont
operator|::
name|HintingPreference
argument_list|,
name|hintingPreference
argument_list|)
expr_stmt|;
name|QRawFont
name|font
argument_list|(
name|fileName
argument_list|,
literal|10
argument_list|,
name|hintingPreference
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|font
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|WritingSystemList
name|actualWritingSystems
init|=
name|font
operator|.
name|supportedWritingSystems
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|actualWritingSystems
operator|.
name|size
argument_list|()
argument_list|,
name|writingSystems
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QFontDatabase
operator|::
name|WritingSystem
name|writingSystem
decl|,
name|writingSystems
control|)
name|QVERIFY
argument_list|(
name|actualWritingSystems
operator|.
name|contains
argument_list|(
name|writingSystem
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|supportsCharacter_data
name|void
name|tst_QRawFont
operator|::
name|supportsCharacter_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QFont
operator|::
name|HintingPreference
argument_list|>
argument_list|(
literal|"hintingPreference"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QChar
argument_list|>
argument_list|(
literal|"character"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"shouldBeSupported"
argument_list|)
expr_stmt|;
specifier|const
name|char
modifier|*
name|fileNames
index|[
literal|2
index|]
init|=
block|{
literal|"testfont.ttf"
block|,
literal|"testfont_bold_italic.ttf"
block|}
decl_stmt|;
for|for
control|(
name|int
name|hintingPreference
init|=
name|QFont
operator|::
name|PreferDefaultHinting
init|;
name|hintingPreference
operator|<=
name|QFont
operator|::
name|PreferFullHinting
condition|;
operator|++
name|hintingPreference
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|fileName
init|=
name|QFINDTESTDATA
argument_list|(
name|fileNames
index|[
name|i
index|]
argument_list|)
decl_stmt|;
comment|// Latin text
for|for
control|(
name|char
name|ch
init|=
literal|'!'
init|;
name|ch
operator|<=
literal|'~'
condition|;
operator|++
name|ch
control|)
block|{
name|QString
name|title
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1, character=0x%2, hintingPreference=%3"
argument_list|)
operator|.
name|arg
argument_list|(
name|fileName
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|ch
argument_list|,
literal|16
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|hintingPreference
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|title
argument_list|)
argument_list|)
operator|<<
name|fileName
operator|<<
name|QFont
operator|::
name|HintingPreference
argument_list|(
name|hintingPreference
argument_list|)
operator|<<
name|QChar
operator|::
name|fromLatin1
argument_list|(
name|ch
argument_list|)
operator|<<
literal|true
expr_stmt|;
block|}
comment|// Hebrew text
for|for
control|(
name|quint16
name|ch
init|=
literal|0x05D0
init|;
name|ch
operator|<=
literal|0x05EA
condition|;
operator|++
name|ch
control|)
block|{
name|QString
name|title
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1, character=0x%2, hintingPreference=%3"
argument_list|)
operator|.
name|arg
argument_list|(
name|fileName
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|ch
argument_list|,
literal|16
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|hintingPreference
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|title
argument_list|)
argument_list|)
operator|<<
name|fileName
operator|<<
name|QFont
operator|::
name|HintingPreference
argument_list|(
name|hintingPreference
argument_list|)
operator|<<
name|QChar
argument_list|(
name|ch
argument_list|)
operator|<<
literal|true
expr_stmt|;
block|}
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Missing character, %1, hintingPreference=%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|fileName
argument_list|)
operator|.
name|arg
argument_list|(
name|hintingPreference
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|fileName
operator|<<
name|QFont
operator|::
name|HintingPreference
argument_list|(
name|hintingPreference
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|0xD8
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|supportsCharacter
name|void
name|tst_QRawFont
operator|::
name|supportsCharacter
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QFont
operator|::
name|HintingPreference
argument_list|,
name|hintingPreference
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QChar
argument_list|,
name|character
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|shouldBeSupported
argument_list|)
expr_stmt|;
name|QRawFont
name|font
argument_list|(
name|fileName
argument_list|,
literal|10
argument_list|,
name|hintingPreference
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|font
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|font
operator|.
name|supportsCharacter
argument_list|(
name|character
argument_list|)
argument_list|,
name|shouldBeSupported
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|supportsUcs4Character_data
name|void
name|tst_QRawFont
operator|::
name|supportsUcs4Character_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QFont
operator|::
name|HintingPreference
argument_list|>
argument_list|(
literal|"hintingPreference"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|quint32
argument_list|>
argument_list|(
literal|"ucs4"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"shouldBeSupported"
argument_list|)
expr_stmt|;
comment|// Gothic text
for|for
control|(
name|int
name|hintingPreference
init|=
name|QFont
operator|::
name|PreferDefaultHinting
init|;
name|hintingPreference
operator|<=
name|QFont
operator|::
name|PreferFullHinting
condition|;
operator|++
name|hintingPreference
control|)
block|{
for|for
control|(
name|quint32
name|ch
init|=
literal|0x10330
init|;
name|ch
operator|<=
literal|0x1034A
condition|;
operator|++
name|ch
control|)
block|{
block|{
name|QString
name|fileName
init|=
name|testFont
decl_stmt|;
name|QString
name|title
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1, character=0x%2, hintingPreference=%3"
argument_list|)
operator|.
name|arg
argument_list|(
name|fileName
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|ch
argument_list|,
literal|16
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|hintingPreference
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|title
argument_list|)
argument_list|)
operator|<<
name|fileName
operator|<<
name|QFont
operator|::
name|HintingPreference
argument_list|(
name|hintingPreference
argument_list|)
operator|<<
name|ch
operator|<<
literal|true
expr_stmt|;
block|}
block|{
name|QString
name|fileName
init|=
name|testFontBoldItalic
decl_stmt|;
name|QString
name|title
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1, character=0x%2, hintingPreference=%3"
argument_list|)
operator|.
name|arg
argument_list|(
name|fileName
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|ch
argument_list|,
literal|16
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|hintingPreference
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|title
argument_list|)
argument_list|)
operator|<<
name|fileName
operator|<<
name|QFont
operator|::
name|HintingPreference
argument_list|(
name|hintingPreference
argument_list|)
operator|<<
name|ch
operator|<<
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|supportsUcs4Character
name|void
name|tst_QRawFont
operator|::
name|supportsUcs4Character
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QFont
operator|::
name|HintingPreference
argument_list|,
name|hintingPreference
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|quint32
argument_list|,
name|ucs4
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|shouldBeSupported
argument_list|)
expr_stmt|;
name|QRawFont
name|font
argument_list|(
name|fileName
argument_list|,
literal|10
argument_list|,
name|hintingPreference
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|font
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|font
operator|.
name|supportsCharacter
argument_list|(
name|ucs4
argument_list|)
argument_list|,
name|shouldBeSupported
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromFont_data
name|void
name|tst_QRawFont
operator|::
name|fromFont_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QFont
operator|::
name|HintingPreference
argument_list|>
argument_list|(
literal|"hintingPreference"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"familyName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QFontDatabase
operator|::
name|WritingSystem
argument_list|>
argument_list|(
literal|"writingSystem"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|QFont
operator|::
name|PreferDefaultHinting
init|;
name|i
operator|<=
name|QFont
operator|::
name|PreferFullHinting
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|titleBase
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%2, hintingPreference=%1, writingSystem=%3"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
decl_stmt|;
block|{
name|QString
name|fileName
init|=
name|testFont
decl_stmt|;
name|QFontDatabase
operator|::
name|WritingSystem
name|writingSystem
init|=
name|QFontDatabase
operator|::
name|Any
decl_stmt|;
name|QString
name|title
init|=
name|titleBase
operator|.
name|arg
argument_list|(
name|fileName
argument_list|)
operator|.
name|arg
argument_list|(
name|writingSystem
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|title
argument_list|)
argument_list|)
operator|<<
name|fileName
operator|<<
name|QFont
operator|::
name|HintingPreference
argument_list|(
name|i
argument_list|)
operator|<<
literal|"QtBidiTestFont"
operator|<<
name|writingSystem
expr_stmt|;
block|}
block|{
name|QString
name|fileName
init|=
name|testFont
decl_stmt|;
name|QFontDatabase
operator|::
name|WritingSystem
name|writingSystem
init|=
name|QFontDatabase
operator|::
name|Hebrew
decl_stmt|;
name|QString
name|title
init|=
name|titleBase
operator|.
name|arg
argument_list|(
name|fileName
argument_list|)
operator|.
name|arg
argument_list|(
name|writingSystem
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|title
argument_list|)
argument_list|)
operator|<<
name|fileName
operator|<<
name|QFont
operator|::
name|HintingPreference
argument_list|(
name|i
argument_list|)
operator|<<
literal|"QtBidiTestFont"
operator|<<
name|writingSystem
expr_stmt|;
block|}
block|{
name|QString
name|fileName
init|=
name|testFont
decl_stmt|;
name|QFontDatabase
operator|::
name|WritingSystem
name|writingSystem
init|=
name|QFontDatabase
operator|::
name|Latin
decl_stmt|;
name|QString
name|title
init|=
name|titleBase
operator|.
name|arg
argument_list|(
name|fileName
argument_list|)
operator|.
name|arg
argument_list|(
name|writingSystem
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|title
argument_list|)
argument_list|)
operator|<<
name|fileName
operator|<<
name|QFont
operator|::
name|HintingPreference
argument_list|(
name|i
argument_list|)
operator|<<
literal|"QtBidiTestFont"
operator|<<
name|writingSystem
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|fromFont
name|void
name|tst_QRawFont
operator|::
name|fromFont
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QFont
operator|::
name|HintingPreference
argument_list|,
name|hintingPreference
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|familyName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QFontDatabase
operator|::
name|WritingSystem
argument_list|,
name|writingSystem
argument_list|)
expr_stmt|;
name|QFontDatabase
name|fontDatabase
decl_stmt|;
name|int
name|id
init|=
name|fontDatabase
operator|.
name|addApplicationFont
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|id
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|QFont
name|font
argument_list|(
name|familyName
argument_list|)
decl_stmt|;
name|font
operator|.
name|setHintingPreference
argument_list|(
name|hintingPreference
argument_list|)
expr_stmt|;
name|font
operator|.
name|setPixelSize
argument_list|(
literal|26.0
argument_list|)
expr_stmt|;
name|QRawFont
name|rawFont
init|=
name|QRawFont
operator|::
name|fromFont
argument_list|(
name|font
argument_list|,
name|writingSystem
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|rawFont
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rawFont
operator|.
name|familyName
argument_list|()
argument_list|,
name|familyName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rawFont
operator|.
name|pixelSize
argument_list|()
argument_list|,
literal|26.0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fontDatabase
operator|.
name|removeApplicationFont
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|copyConstructor_data
name|void
name|tst_QRawFont
operator|::
name|copyConstructor_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QFont
operator|::
name|HintingPreference
argument_list|>
argument_list|(
literal|"hintingPreference"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Default hinting preference"
argument_list|)
operator|<<
name|QFont
operator|::
name|PreferDefaultHinting
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"No hinting preference"
argument_list|)
operator|<<
name|QFont
operator|::
name|PreferNoHinting
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Vertical hinting preference"
argument_list|)
operator|<<
name|QFont
operator|::
name|PreferVerticalHinting
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Full hinting preference"
argument_list|)
operator|<<
name|QFont
operator|::
name|PreferFullHinting
expr_stmt|;
block|}
end_function
begin_function
DECL|function|copyConstructor
name|void
name|tst_QRawFont
operator|::
name|copyConstructor
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QFont
operator|::
name|HintingPreference
argument_list|,
name|hintingPreference
argument_list|)
expr_stmt|;
block|{
name|QString
name|rawFontFamilyName
decl_stmt|;
name|qreal
name|rawFontPixelSize
decl_stmt|;
name|qreal
name|rawFontAscent
decl_stmt|;
name|qreal
name|rawFontDescent
decl_stmt|;
name|int
name|rawFontTableSize
decl_stmt|;
name|QRawFont
name|outerRawFont
decl_stmt|;
block|{
name|QRawFont
name|rawFont
argument_list|(
name|testFont
argument_list|,
literal|11
argument_list|,
name|hintingPreference
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|rawFont
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|rawFontFamilyName
operator|=
name|rawFont
operator|.
name|familyName
argument_list|()
expr_stmt|;
name|rawFontPixelSize
operator|=
name|rawFont
operator|.
name|pixelSize
argument_list|()
expr_stmt|;
name|rawFontAscent
operator|=
name|rawFont
operator|.
name|ascent
argument_list|()
expr_stmt|;
name|rawFontDescent
operator|=
name|rawFont
operator|.
name|descent
argument_list|()
expr_stmt|;
name|rawFontTableSize
operator|=
name|rawFont
operator|.
name|fontTable
argument_list|(
literal|"glyf"
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|rawFontTableSize
operator|>
literal|0
argument_list|)
expr_stmt|;
block|{
name|QRawFont
name|otherRawFont
argument_list|(
name|rawFont
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|otherRawFont
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|otherRawFont
operator|.
name|pixelSize
argument_list|()
argument_list|,
name|rawFontPixelSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|otherRawFont
operator|.
name|familyName
argument_list|()
argument_list|,
name|rawFontFamilyName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|otherRawFont
operator|.
name|hintingPreference
argument_list|()
argument_list|,
name|hintingPreference
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|otherRawFont
operator|.
name|ascent
argument_list|()
argument_list|,
name|rawFontAscent
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|otherRawFont
operator|.
name|descent
argument_list|()
argument_list|,
name|rawFontDescent
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|otherRawFont
operator|.
name|fontTable
argument_list|(
literal|"glyf"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|rawFontTableSize
argument_list|)
expr_stmt|;
block|}
block|{
name|QRawFont
name|otherRawFont
init|=
name|rawFont
decl_stmt|;
name|QVERIFY
argument_list|(
name|otherRawFont
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|otherRawFont
operator|.
name|pixelSize
argument_list|()
argument_list|,
name|rawFontPixelSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|otherRawFont
operator|.
name|familyName
argument_list|()
argument_list|,
name|rawFontFamilyName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|otherRawFont
operator|.
name|hintingPreference
argument_list|()
argument_list|,
name|hintingPreference
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|otherRawFont
operator|.
name|ascent
argument_list|()
argument_list|,
name|rawFontAscent
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|otherRawFont
operator|.
name|descent
argument_list|()
argument_list|,
name|rawFontDescent
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|otherRawFont
operator|.
name|fontTable
argument_list|(
literal|"glyf"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|rawFontTableSize
argument_list|)
expr_stmt|;
block|}
name|outerRawFont
operator|=
name|rawFont
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|outerRawFont
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|outerRawFont
operator|.
name|pixelSize
argument_list|()
argument_list|,
name|rawFontPixelSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|outerRawFont
operator|.
name|familyName
argument_list|()
argument_list|,
name|rawFontFamilyName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|outerRawFont
operator|.
name|hintingPreference
argument_list|()
argument_list|,
name|hintingPreference
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|outerRawFont
operator|.
name|ascent
argument_list|()
argument_list|,
name|rawFontAscent
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|outerRawFont
operator|.
name|descent
argument_list|()
argument_list|,
name|rawFontDescent
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|outerRawFont
operator|.
name|fontTable
argument_list|(
literal|"glyf"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|rawFontTableSize
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|detach_data
name|void
name|tst_QRawFont
operator|::
name|detach_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QFont
operator|::
name|HintingPreference
argument_list|>
argument_list|(
literal|"hintingPreference"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Default hinting preference"
argument_list|)
operator|<<
name|QFont
operator|::
name|PreferDefaultHinting
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"No hinting preference"
argument_list|)
operator|<<
name|QFont
operator|::
name|PreferNoHinting
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Vertical hinting preference"
argument_list|)
operator|<<
name|QFont
operator|::
name|PreferVerticalHinting
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Full hinting preference"
argument_list|)
operator|<<
name|QFont
operator|::
name|PreferFullHinting
expr_stmt|;
block|}
end_function
begin_function
DECL|function|detach
name|void
name|tst_QRawFont
operator|::
name|detach
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QFont
operator|::
name|HintingPreference
argument_list|,
name|hintingPreference
argument_list|)
expr_stmt|;
block|{
name|QString
name|rawFontFamilyName
decl_stmt|;
name|qreal
name|rawFontPixelSize
decl_stmt|;
name|qreal
name|rawFontAscent
decl_stmt|;
name|qreal
name|rawFontDescent
decl_stmt|;
name|int
name|rawFontTableSize
decl_stmt|;
name|QRawFont
name|outerRawFont
decl_stmt|;
block|{
name|QRawFont
name|rawFont
argument_list|(
name|testFont
argument_list|,
literal|11
argument_list|,
name|hintingPreference
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|rawFont
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|rawFontFamilyName
operator|=
name|rawFont
operator|.
name|familyName
argument_list|()
expr_stmt|;
name|rawFontPixelSize
operator|=
name|rawFont
operator|.
name|pixelSize
argument_list|()
expr_stmt|;
name|rawFontAscent
operator|=
name|rawFont
operator|.
name|ascent
argument_list|()
expr_stmt|;
name|rawFontDescent
operator|=
name|rawFont
operator|.
name|descent
argument_list|()
expr_stmt|;
name|rawFontTableSize
operator|=
name|rawFont
operator|.
name|fontTable
argument_list|(
literal|"glyf"
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|rawFontTableSize
operator|>
literal|0
argument_list|)
expr_stmt|;
block|{
name|QRawFont
name|otherRawFont
argument_list|(
name|rawFont
argument_list|)
decl_stmt|;
name|otherRawFont
operator|.
name|loadFromFile
argument_list|(
name|testFont
argument_list|,
name|rawFontPixelSize
argument_list|,
name|hintingPreference
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|otherRawFont
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|otherRawFont
operator|.
name|pixelSize
argument_list|()
argument_list|,
name|rawFontPixelSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|otherRawFont
operator|.
name|familyName
argument_list|()
argument_list|,
name|rawFontFamilyName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|otherRawFont
operator|.
name|hintingPreference
argument_list|()
argument_list|,
name|hintingPreference
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|otherRawFont
operator|.
name|ascent
argument_list|()
argument_list|,
name|rawFontAscent
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|otherRawFont
operator|.
name|descent
argument_list|()
argument_list|,
name|rawFontDescent
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|otherRawFont
operator|.
name|fontTable
argument_list|(
literal|"glyf"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|rawFontTableSize
argument_list|)
expr_stmt|;
block|}
block|{
name|QRawFont
name|otherRawFont
init|=
name|rawFont
decl_stmt|;
name|otherRawFont
operator|.
name|loadFromFile
argument_list|(
name|testFont
argument_list|,
name|rawFontPixelSize
argument_list|,
name|hintingPreference
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|otherRawFont
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|otherRawFont
operator|.
name|pixelSize
argument_list|()
argument_list|,
name|rawFontPixelSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|otherRawFont
operator|.
name|familyName
argument_list|()
argument_list|,
name|rawFontFamilyName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|otherRawFont
operator|.
name|hintingPreference
argument_list|()
argument_list|,
name|hintingPreference
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|otherRawFont
operator|.
name|ascent
argument_list|()
argument_list|,
name|rawFontAscent
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|otherRawFont
operator|.
name|descent
argument_list|()
argument_list|,
name|rawFontDescent
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|otherRawFont
operator|.
name|fontTable
argument_list|(
literal|"glyf"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|rawFontTableSize
argument_list|)
expr_stmt|;
block|}
name|outerRawFont
operator|=
name|rawFont
expr_stmt|;
name|rawFont
operator|.
name|loadFromFile
argument_list|(
name|testFont
argument_list|,
name|rawFontPixelSize
argument_list|,
name|hintingPreference
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|outerRawFont
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|outerRawFont
operator|.
name|pixelSize
argument_list|()
argument_list|,
name|rawFontPixelSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|outerRawFont
operator|.
name|familyName
argument_list|()
argument_list|,
name|rawFontFamilyName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|outerRawFont
operator|.
name|hintingPreference
argument_list|()
argument_list|,
name|hintingPreference
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|outerRawFont
operator|.
name|ascent
argument_list|()
argument_list|,
name|rawFontAscent
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|outerRawFont
operator|.
name|descent
argument_list|()
argument_list|,
name|rawFontDescent
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|outerRawFont
operator|.
name|fontTable
argument_list|(
literal|"glyf"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|rawFontTableSize
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|unsupportedWritingSystem_data
name|void
name|tst_QRawFont
operator|::
name|unsupportedWritingSystem_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QFont
operator|::
name|HintingPreference
argument_list|>
argument_list|(
literal|"hintingPreference"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Default hinting preference"
argument_list|)
operator|<<
name|QFont
operator|::
name|PreferDefaultHinting
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"No hinting preference"
argument_list|)
operator|<<
name|QFont
operator|::
name|PreferNoHinting
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Vertical hinting preference"
argument_list|)
operator|<<
name|QFont
operator|::
name|PreferVerticalHinting
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Full hinting preference"
argument_list|)
operator|<<
name|QFont
operator|::
name|PreferFullHinting
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unsupportedWritingSystem
name|void
name|tst_QRawFont
operator|::
name|unsupportedWritingSystem
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QFont
operator|::
name|HintingPreference
argument_list|,
name|hintingPreference
argument_list|)
expr_stmt|;
name|QFontDatabase
name|fontDatabase
decl_stmt|;
name|int
name|id
init|=
name|fontDatabase
operator|.
name|addApplicationFont
argument_list|(
name|testFont
argument_list|)
decl_stmt|;
name|QFont
name|font
argument_list|(
literal|"QtBidiTestFont"
argument_list|)
decl_stmt|;
name|font
operator|.
name|setHintingPreference
argument_list|(
name|hintingPreference
argument_list|)
expr_stmt|;
name|font
operator|.
name|setPixelSize
argument_list|(
literal|12.0
argument_list|)
expr_stmt|;
name|QRawFont
name|rawFont
init|=
name|QRawFont
operator|::
name|fromFont
argument_list|(
name|font
argument_list|,
name|QFontDatabase
operator|::
name|Any
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|rawFont
operator|.
name|familyName
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QtBidiTestFont"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rawFont
operator|.
name|pixelSize
argument_list|()
argument_list|,
literal|12.0
argument_list|)
expr_stmt|;
name|rawFont
operator|=
name|QRawFont
operator|::
name|fromFont
argument_list|(
name|font
argument_list|,
name|QFontDatabase
operator|::
name|Hebrew
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rawFont
operator|.
name|familyName
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QtBidiTestFont"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rawFont
operator|.
name|pixelSize
argument_list|()
argument_list|,
literal|12.0
argument_list|)
expr_stmt|;
name|QString
name|arabicText
init|=
name|QFontDatabase
operator|::
name|writingSystemSample
argument_list|(
name|QFontDatabase
operator|::
name|Arabic
argument_list|)
decl_stmt|;
name|QTextLayout
name|layout
decl_stmt|;
name|layout
operator|.
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|layout
operator|.
name|setText
argument_list|(
name|arabicText
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|layout
operator|.
name|createLine
argument_list|()
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|QList
argument_list|<
name|QGlyphRun
argument_list|>
name|glyphRuns
init|=
name|layout
operator|.
name|glyphRuns
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|glyphRuns
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QGlyphRun
name|glyphs
init|=
name|glyphRuns
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QRawFont
name|layoutFont
init|=
name|glyphs
operator|.
name|rawFont
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|layoutFont
operator|.
name|familyName
argument_list|()
operator|!=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QtBidiTestFont"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|layoutFont
operator|.
name|pixelSize
argument_list|()
argument_list|,
literal|12.0
argument_list|)
expr_stmt|;
name|rawFont
operator|=
name|QRawFont
operator|::
name|fromFont
argument_list|(
name|font
argument_list|,
name|QFontDatabase
operator|::
name|Arabic
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rawFont
operator|.
name|familyName
argument_list|()
argument_list|,
name|layoutFont
operator|.
name|familyName
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rawFont
operator|.
name|pixelSize
argument_list|()
argument_list|,
literal|12.0
argument_list|)
expr_stmt|;
name|fontDatabase
operator|.
name|removeApplicationFont
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rawFontSetPixelSize_data
name|void
name|tst_QRawFont
operator|::
name|rawFontSetPixelSize_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QFont
operator|::
name|HintingPreference
argument_list|>
argument_list|(
literal|"hintingPreference"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Default hinting preference"
argument_list|)
operator|<<
name|QFont
operator|::
name|PreferDefaultHinting
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"No hinting preference"
argument_list|)
operator|<<
name|QFont
operator|::
name|PreferNoHinting
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Vertical hinting preference"
argument_list|)
operator|<<
name|QFont
operator|::
name|PreferVerticalHinting
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Full hinting preference"
argument_list|)
operator|<<
name|QFont
operator|::
name|PreferFullHinting
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rawFontSetPixelSize
name|void
name|tst_QRawFont
operator|::
name|rawFontSetPixelSize
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QFont
operator|::
name|HintingPreference
argument_list|,
name|hintingPreference
argument_list|)
expr_stmt|;
name|QTextLayout
name|layout
argument_list|(
literal|"Foobar"
argument_list|)
decl_stmt|;
name|QFont
name|font
init|=
name|layout
operator|.
name|font
argument_list|()
decl_stmt|;
name|font
operator|.
name|setHintingPreference
argument_list|(
name|hintingPreference
argument_list|)
expr_stmt|;
name|font
operator|.
name|setPixelSize
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|layout
operator|.
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|layout
operator|.
name|createLine
argument_list|()
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|QGlyphRun
name|glyphs
init|=
name|layout
operator|.
name|glyphRuns
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QRawFont
name|rawFont
init|=
name|glyphs
operator|.
name|rawFont
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|rawFont
operator|.
name|pixelSize
argument_list|()
argument_list|,
literal|12.0
argument_list|)
expr_stmt|;
name|rawFont
operator|.
name|setPixelSize
argument_list|(
literal|24
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rawFont
operator|.
name|pixelSize
argument_list|()
argument_list|,
literal|24.0
argument_list|)
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
end_if
begin_function
DECL|function|multipleRawFontsFromData
name|void
name|tst_QRawFont
operator|::
name|multipleRawFontsFromData
parameter_list|()
block|{
name|QFile
name|file
argument_list|(
name|testFont
argument_list|)
decl_stmt|;
name|QRawFont
name|testFont
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|testFont
operator|.
name|loadFromData
argument_list|(
name|file
operator|.
name|readAll
argument_list|()
argument_list|,
literal|11
argument_list|,
name|QFont
operator|::
name|PreferDefaultHinting
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|file
operator|.
name|setFileName
argument_list|(
name|testFontBoldItalic
argument_list|)
expr_stmt|;
name|QRawFont
name|testFontBoldItalic
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
name|testFontBoldItalic
operator|.
name|loadFromData
argument_list|(
name|file
operator|.
name|readAll
argument_list|()
argument_list|,
literal|11
argument_list|,
name|QFont
operator|::
name|PreferDefaultHinting
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testFont
operator|.
name|familyName
argument_list|()
operator|!=
operator|(
name|testFontBoldItalic
operator|.
name|familyName
argument_list|()
operator|)
operator|||
name|testFont
operator|.
name|styleName
argument_list|()
operator|!=
operator|(
name|testFontBoldItalic
operator|.
name|styleName
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_RAWFONT
end_comment
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QRawFont
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qrawfont.moc"
end_include
end_unit
