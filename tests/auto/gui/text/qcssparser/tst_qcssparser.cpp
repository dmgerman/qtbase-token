begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtXml/QtXml>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_include
include|#
directive|include
file|<QtGui/QFontDatabase>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QtGui/QFontInfo>
end_include
begin_include
include|#
directive|include
file|<QtGui/QFontMetrics>
end_include
begin_include
include|#
directive|include
file|"private/qcssparser_p.h"
end_include
begin_class
DECL|class|tst_QCssParser
class|class
name|tst_QCssParser
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|scanner_data
parameter_list|()
function_decl|;
name|void
name|scanner
parameter_list|()
function_decl|;
name|void
name|term_data
parameter_list|()
function_decl|;
name|void
name|term
parameter_list|()
function_decl|;
name|void
name|expr_data
parameter_list|()
function_decl|;
name|void
name|expr
parameter_list|()
function_decl|;
name|void
name|import
parameter_list|()
function_decl|;
name|void
name|media
parameter_list|()
function_decl|;
name|void
name|page
parameter_list|()
function_decl|;
name|void
name|ruleset
parameter_list|()
function_decl|;
name|void
name|selector_data
parameter_list|()
function_decl|;
name|void
name|selector
parameter_list|()
function_decl|;
name|void
name|prio
parameter_list|()
function_decl|;
name|void
name|escapes
parameter_list|()
function_decl|;
name|void
name|malformedDeclarations_data
parameter_list|()
function_decl|;
name|void
name|malformedDeclarations
parameter_list|()
function_decl|;
name|void
name|invalidAtKeywords
parameter_list|()
function_decl|;
name|void
name|marginValue
parameter_list|()
function_decl|;
name|void
name|marginValue_data
parameter_list|()
function_decl|;
name|void
name|colorValue_data
parameter_list|()
function_decl|;
name|void
name|colorValue
parameter_list|()
function_decl|;
name|void
name|styleSelector_data
parameter_list|()
function_decl|;
name|void
name|styleSelector
parameter_list|()
function_decl|;
name|void
name|specificity_data
parameter_list|()
function_decl|;
name|void
name|specificity
parameter_list|()
function_decl|;
name|void
name|specificitySort_data
parameter_list|()
function_decl|;
name|void
name|specificitySort
parameter_list|()
function_decl|;
name|void
name|rulesForNode_data
parameter_list|()
function_decl|;
name|void
name|rulesForNode
parameter_list|()
function_decl|;
name|void
name|shorthandBackgroundProperty_data
parameter_list|()
function_decl|;
name|void
name|shorthandBackgroundProperty
parameter_list|()
function_decl|;
name|void
name|pseudoElement_data
parameter_list|()
function_decl|;
name|void
name|pseudoElement
parameter_list|()
function_decl|;
name|void
name|gradient_data
parameter_list|()
function_decl|;
name|void
name|gradient
parameter_list|()
function_decl|;
name|void
name|extractFontFamily_data
parameter_list|()
function_decl|;
name|void
name|extractFontFamily
parameter_list|()
function_decl|;
name|void
name|extractBorder_data
parameter_list|()
function_decl|;
name|void
name|extractBorder
parameter_list|()
function_decl|;
name|void
name|noTextDecoration
parameter_list|()
function_decl|;
name|void
name|quotedAndUnquotedIdentifiers
parameter_list|()
function_decl|;
private|private:
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
DECL|member|m_timesFontId
name|int
name|m_timesFontId
decl_stmt|;
endif|#
directive|endif
block|}
class|;
end_class
begin_function
DECL|function|initTestCase
name|void
name|tst_QCssParser
operator|::
name|initTestCase
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QFontDatabase
name|fontDB
decl_stmt|;
name|m_timesFontId
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
operator|!
name|fontDB
operator|.
name|families
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Times New Roman"
argument_list|)
condition|)
block|{
name|m_timesFontId
operator|=
name|QFontDatabase
operator|::
name|addApplicationFont
argument_list|(
literal|"times.ttf"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m_timesFontId
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QCssParser
operator|::
name|cleanupTestCase
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
if|if
condition|(
name|m_timesFontId
operator|!=
operator|-
literal|1
condition|)
name|QFontDatabase
operator|::
name|removeApplicationFont
argument_list|(
name|m_timesFontId
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|scanner_data
name|void
name|tst_QCssParser
operator|::
name|scanner_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"output"
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_IRIX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QDir
name|d
argument_list|(
name|SRCDIR
argument_list|)
decl_stmt|;
else|#
directive|else
name|QDir
name|d
argument_list|(
name|QDir
operator|::
name|current
argument_list|()
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|d
operator|.
name|cd
argument_list|(
literal|"testdata"
argument_list|)
expr_stmt|;
name|d
operator|.
name|cd
argument_list|(
literal|"scanner"
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QFileInfo
name|test
decl|,
name|d
operator|.
name|entryInfoList
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
control|)
block|{
name|QString
name|dir
init|=
name|test
operator|.
name|absoluteFilePath
argument_list|()
operator|+
name|QDir
operator|::
name|separator
argument_list|()
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|test
operator|.
name|baseName
argument_list|()
argument_list|)
argument_list|)
operator|<<
name|dir
operator|+
literal|"input"
operator|<<
name|dir
operator|+
literal|"output"
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|tokenName
specifier|static
specifier|const
name|char
modifier|*
name|tokenName
parameter_list|(
name|QCss
operator|::
name|TokenType
name|t
parameter_list|)
block|{
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|QCss
operator|::
name|NONE
case|:
return|return
literal|"NONE"
return|;
case|case
name|QCss
operator|::
name|S
case|:
return|return
literal|"S"
return|;
case|case
name|QCss
operator|::
name|CDO
case|:
return|return
literal|"CDO"
return|;
case|case
name|QCss
operator|::
name|CDC
case|:
return|return
literal|"CDC"
return|;
case|case
name|QCss
operator|::
name|INCLUDES
case|:
return|return
literal|"INCLUDES"
return|;
case|case
name|QCss
operator|::
name|DASHMATCH
case|:
return|return
literal|"DASHMATCH"
return|;
case|case
name|QCss
operator|::
name|LBRACE
case|:
return|return
literal|"LBRACE"
return|;
case|case
name|QCss
operator|::
name|PLUS
case|:
return|return
literal|"PLUS"
return|;
case|case
name|QCss
operator|::
name|GREATER
case|:
return|return
literal|"GREATER"
return|;
case|case
name|QCss
operator|::
name|COMMA
case|:
return|return
literal|"COMMA"
return|;
case|case
name|QCss
operator|::
name|STRING
case|:
return|return
literal|"STRING"
return|;
case|case
name|QCss
operator|::
name|INVALID
case|:
return|return
literal|"INVALID"
return|;
case|case
name|QCss
operator|::
name|IDENT
case|:
return|return
literal|"IDENT"
return|;
case|case
name|QCss
operator|::
name|HASH
case|:
return|return
literal|"HASH"
return|;
case|case
name|QCss
operator|::
name|ATKEYWORD_SYM
case|:
return|return
literal|"ATKEYWORD_SYM"
return|;
case|case
name|QCss
operator|::
name|EXCLAMATION_SYM
case|:
return|return
literal|"EXCLAMATION_SYM"
return|;
case|case
name|QCss
operator|::
name|LENGTH
case|:
return|return
literal|"LENGTH"
return|;
case|case
name|QCss
operator|::
name|PERCENTAGE
case|:
return|return
literal|"PERCENTAGE"
return|;
case|case
name|QCss
operator|::
name|NUMBER
case|:
return|return
literal|"NUMBER"
return|;
case|case
name|QCss
operator|::
name|FUNCTION
case|:
return|return
literal|"FUNCTION"
return|;
case|case
name|QCss
operator|::
name|COLON
case|:
return|return
literal|"COLON"
return|;
case|case
name|QCss
operator|::
name|SEMICOLON
case|:
return|return
literal|"SEMICOLON"
return|;
case|case
name|QCss
operator|::
name|RBRACE
case|:
return|return
literal|"RBRACE"
return|;
case|case
name|QCss
operator|::
name|SLASH
case|:
return|return
literal|"SLASH"
return|;
case|case
name|QCss
operator|::
name|MINUS
case|:
return|return
literal|"MINUS"
return|;
case|case
name|QCss
operator|::
name|DOT
case|:
return|return
literal|"DOT"
return|;
case|case
name|QCss
operator|::
name|STAR
case|:
return|return
literal|"STAR"
return|;
case|case
name|QCss
operator|::
name|LBRACKET
case|:
return|return
literal|"LBRACKET"
return|;
case|case
name|QCss
operator|::
name|RBRACKET
case|:
return|return
literal|"RBRACKET"
return|;
case|case
name|QCss
operator|::
name|EQUAL
case|:
return|return
literal|"EQUAL"
return|;
case|case
name|QCss
operator|::
name|LPAREN
case|:
return|return
literal|"LPAREN"
return|;
case|case
name|QCss
operator|::
name|RPAREN
case|:
return|return
literal|"RPAREN"
return|;
case|case
name|QCss
operator|::
name|OR
case|:
return|return
literal|"OR"
return|;
block|}
return|return
literal|""
return|;
block|}
end_function
begin_function
DECL|function|debug
specifier|static
name|void
name|debug
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|QCss
operator|::
name|Symbol
argument_list|>
modifier|&
name|symbols
parameter_list|,
name|int
name|index
init|=
operator|-
literal|1
parameter_list|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"all symbols:"
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|symbols
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|qDebug
argument_list|()
operator|<<
literal|"("
operator|<<
name|i
operator|<<
literal|"); Token:"
operator|<<
name|tokenName
argument_list|(
name|symbols
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|token
argument_list|)
operator|<<
literal|"; Lexem:"
operator|<<
name|symbols
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|lexem
argument_list|()
expr_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"failure at index"
operator|<<
name|index
expr_stmt|;
block|}
end_function
begin_comment
comment|//static void debug(const QCss::Parser&p) { debug(p.symbols); }
end_comment
begin_function
DECL|function|scanner
name|void
name|tst_QCssParser
operator|::
name|scanner
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|QFile
name|inputFile
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|inputFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QCss
operator|::
name|Symbol
argument_list|>
name|symbols
decl_stmt|;
name|QCss
operator|::
name|Scanner
operator|::
name|scan
argument_list|(
name|QCss
operator|::
name|Scanner
operator|::
name|preprocess
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|inputFile
operator|.
name|readAll
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|&
name|symbols
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|symbols
operator|.
name|count
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|symbols
operator|.
name|last
argument_list|()
operator|.
name|token
operator|==
name|QCss
operator|::
name|S
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|symbols
operator|.
name|last
argument_list|()
operator|.
name|lexem
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
name|symbols
operator|.
name|remove
argument_list|(
name|symbols
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QFile
name|outputFile
argument_list|(
name|output
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|outputFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|QStringList
name|lines
decl_stmt|;
while|while
condition|(
operator|!
name|outputFile
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|QString
name|line
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|outputFile
operator|.
name|readLine
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
condition|)
name|line
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|lines
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lines
operator|.
name|count
argument_list|()
operator|!=
name|symbols
operator|.
name|count
argument_list|()
condition|)
block|{
name|debug
argument_list|(
name|symbols
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lines
operator|.
name|count
argument_list|()
argument_list|,
name|symbols
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lines
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QStringList
name|l
init|=
name|lines
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|split
argument_list|(
name|QChar
operator|::
name|fromLatin1
argument_list|(
literal|'|'
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|expectedToken
init|=
name|l
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|expectedLexem
init|=
name|l
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QString
name|actualToken
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|tokenName
argument_list|(
name|symbols
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|token
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|actualToken
operator|!=
name|expectedToken
condition|)
block|{
name|debug
argument_list|(
name|symbols
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|actualToken
argument_list|,
name|expectedToken
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|symbols
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|lexem
argument_list|()
operator|!=
name|expectedLexem
condition|)
block|{
name|debug
argument_list|(
name|symbols
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|symbols
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|lexem
argument_list|()
argument_list|,
name|expectedLexem
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QCss::Value
argument_list|)
end_macro
begin_function
DECL|function|term_data
name|void
name|tst_QCssParser
operator|::
name|term_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"parseSuccess"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"css"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QCss
operator|::
name|Value
argument_list|>
argument_list|(
literal|"expectedValue"
argument_list|)
expr_stmt|;
name|QCss
operator|::
name|Value
name|val
decl_stmt|;
name|val
operator|.
name|type
operator|=
name|QCss
operator|::
name|Value
operator|::
name|Percentage
expr_stmt|;
name|val
operator|.
name|variant
operator|=
name|QVariant
argument_list|(
name|double
argument_list|(
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"percentage"
argument_list|)
operator|<<
literal|true
operator|<<
literal|"200%"
operator|<<
name|val
expr_stmt|;
name|val
operator|.
name|type
operator|=
name|QCss
operator|::
name|Value
operator|::
name|Length
expr_stmt|;
name|val
operator|.
name|variant
operator|=
name|QString
argument_list|(
literal|"10px"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"px"
argument_list|)
operator|<<
literal|true
operator|<<
literal|"10px"
operator|<<
name|val
expr_stmt|;
name|val
operator|.
name|type
operator|=
name|QCss
operator|::
name|Value
operator|::
name|Length
expr_stmt|;
name|val
operator|.
name|variant
operator|=
name|QString
argument_list|(
literal|"10cm"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"cm"
argument_list|)
operator|<<
literal|true
operator|<<
literal|"10cm"
operator|<<
name|val
expr_stmt|;
name|val
operator|.
name|type
operator|=
name|QCss
operator|::
name|Value
operator|::
name|Length
expr_stmt|;
name|val
operator|.
name|variant
operator|=
name|QString
argument_list|(
literal|"10mm"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mm"
argument_list|)
operator|<<
literal|true
operator|<<
literal|"10mm"
operator|<<
name|val
expr_stmt|;
name|val
operator|.
name|type
operator|=
name|QCss
operator|::
name|Value
operator|::
name|Length
expr_stmt|;
name|val
operator|.
name|variant
operator|=
name|QString
argument_list|(
literal|"10pt"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pt"
argument_list|)
operator|<<
literal|true
operator|<<
literal|"10pt"
operator|<<
name|val
expr_stmt|;
name|val
operator|.
name|type
operator|=
name|QCss
operator|::
name|Value
operator|::
name|Length
expr_stmt|;
name|val
operator|.
name|variant
operator|=
name|QString
argument_list|(
literal|"10pc"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pc"
argument_list|)
operator|<<
literal|true
operator|<<
literal|"10pc"
operator|<<
name|val
expr_stmt|;
name|val
operator|.
name|type
operator|=
name|QCss
operator|::
name|Value
operator|::
name|Length
expr_stmt|;
name|val
operator|.
name|variant
operator|=
name|QString
argument_list|(
literal|"42in"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"inch"
argument_list|)
operator|<<
literal|true
operator|<<
literal|"42in"
operator|<<
name|val
expr_stmt|;
name|val
operator|.
name|type
operator|=
name|QCss
operator|::
name|Value
operator|::
name|Length
expr_stmt|;
name|val
operator|.
name|variant
operator|=
name|QString
argument_list|(
literal|"10deg"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"deg"
argument_list|)
operator|<<
literal|true
operator|<<
literal|"10deg"
operator|<<
name|val
expr_stmt|;
name|val
operator|.
name|type
operator|=
name|QCss
operator|::
name|Value
operator|::
name|Length
expr_stmt|;
name|val
operator|.
name|variant
operator|=
name|QString
argument_list|(
literal|"10rad"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rad"
argument_list|)
operator|<<
literal|true
operator|<<
literal|"10rad"
operator|<<
name|val
expr_stmt|;
name|val
operator|.
name|type
operator|=
name|QCss
operator|::
name|Value
operator|::
name|Length
expr_stmt|;
name|val
operator|.
name|variant
operator|=
name|QString
argument_list|(
literal|"10grad"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"grad"
argument_list|)
operator|<<
literal|true
operator|<<
literal|"10grad"
operator|<<
name|val
expr_stmt|;
name|val
operator|.
name|type
operator|=
name|QCss
operator|::
name|Value
operator|::
name|Length
expr_stmt|;
name|val
operator|.
name|variant
operator|=
name|QString
argument_list|(
literal|"10ms"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"time"
argument_list|)
operator|<<
literal|true
operator|<<
literal|"10ms"
operator|<<
name|val
expr_stmt|;
name|val
operator|.
name|type
operator|=
name|QCss
operator|::
name|Value
operator|::
name|Length
expr_stmt|;
name|val
operator|.
name|variant
operator|=
name|QString
argument_list|(
literal|"10s"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"times"
argument_list|)
operator|<<
literal|true
operator|<<
literal|"10s"
operator|<<
name|val
expr_stmt|;
name|val
operator|.
name|type
operator|=
name|QCss
operator|::
name|Value
operator|::
name|Length
expr_stmt|;
name|val
operator|.
name|variant
operator|=
name|QString
argument_list|(
literal|"10hz"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hz"
argument_list|)
operator|<<
literal|true
operator|<<
literal|"10hz"
operator|<<
name|val
expr_stmt|;
name|val
operator|.
name|type
operator|=
name|QCss
operator|::
name|Value
operator|::
name|Length
expr_stmt|;
name|val
operator|.
name|variant
operator|=
name|QString
argument_list|(
literal|"10khz"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"khz"
argument_list|)
operator|<<
literal|true
operator|<<
literal|"10khz"
operator|<<
name|val
expr_stmt|;
name|val
operator|.
name|type
operator|=
name|QCss
operator|::
name|Value
operator|::
name|Length
expr_stmt|;
name|val
operator|.
name|variant
operator|=
name|QString
argument_list|(
literal|"10myunit"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dimension"
argument_list|)
operator|<<
literal|true
operator|<<
literal|"10myunit"
operator|<<
name|val
expr_stmt|;
name|val
operator|.
name|type
operator|=
name|QCss
operator|::
name|Value
operator|::
name|Percentage
expr_stmt|;
name|val
operator|.
name|type
operator|=
name|QCss
operator|::
name|Value
operator|::
name|Percentage
expr_stmt|;
name|val
operator|.
name|variant
operator|=
name|QVariant
argument_list|(
name|double
argument_list|(
operator|-
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"minuspercentage"
argument_list|)
operator|<<
literal|true
operator|<<
literal|"-200%"
operator|<<
name|val
expr_stmt|;
name|val
operator|.
name|type
operator|=
name|QCss
operator|::
name|Value
operator|::
name|Length
expr_stmt|;
name|val
operator|.
name|variant
operator|=
name|QString
argument_list|(
literal|"10em"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ems"
argument_list|)
operator|<<
literal|true
operator|<<
literal|"10em"
operator|<<
name|val
expr_stmt|;
name|val
operator|.
name|type
operator|=
name|QCss
operator|::
name|Value
operator|::
name|String
expr_stmt|;
name|val
operator|.
name|variant
operator|=
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"string"
argument_list|)
operator|<<
literal|true
operator|<<
literal|"\"foo\""
operator|<<
name|val
expr_stmt|;
name|val
operator|.
name|type
operator|=
name|QCss
operator|::
name|Value
operator|::
name|Function
expr_stmt|;
name|val
operator|.
name|variant
operator|=
name|QVariant
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"myFunc"
operator|<<
literal|"23, (nested text)"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"function"
argument_list|)
operator|<<
literal|true
operator|<<
literal|"myFunc(23, (nested text))"
operator|<<
name|val
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"function_failure"
argument_list|)
operator|<<
literal|false
operator|<<
literal|"myFunction((blah)"
operator|<<
name|val
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"function_failure2"
argument_list|)
operator|<<
literal|false
operator|<<
literal|"+myFunc(23, (nested text))"
operator|<<
name|val
expr_stmt|;
name|val
operator|.
name|type
operator|=
name|QCss
operator|::
name|Value
operator|::
name|Color
expr_stmt|;
name|val
operator|.
name|variant
operator|=
name|QVariant
argument_list|(
name|QColor
argument_list|(
literal|"#12ff34"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hexcolor"
argument_list|)
operator|<<
literal|true
operator|<<
literal|"#12ff34"
operator|<<
name|val
expr_stmt|;
name|val
operator|.
name|type
operator|=
name|QCss
operator|::
name|Value
operator|::
name|Color
expr_stmt|;
name|val
operator|.
name|variant
operator|=
name|QVariant
argument_list|(
name|QColor
argument_list|(
literal|"#ffbb00"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hexcolor2"
argument_list|)
operator|<<
literal|true
operator|<<
literal|"#fb0"
operator|<<
name|val
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QCssParser::parseHexColor: Unknown color name '#cafebabe'"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hexcolor_failure"
argument_list|)
operator|<<
literal|false
operator|<<
literal|"#cafebabe"
operator|<<
name|val
expr_stmt|;
name|val
operator|.
name|type
operator|=
name|QCss
operator|::
name|Value
operator|::
name|Uri
expr_stmt|;
name|val
operator|.
name|variant
operator|=
name|QString
argument_list|(
literal|"www.kde.org"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"uri1"
argument_list|)
operator|<<
literal|true
operator|<<
literal|"url(\"www.kde.org\")"
operator|<<
name|val
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"uri2"
argument_list|)
operator|<<
literal|true
operator|<<
literal|"url(www.kde.org)"
operator|<<
name|val
expr_stmt|;
name|val
operator|.
name|type
operator|=
name|QCss
operator|::
name|Value
operator|::
name|KnownIdentifier
expr_stmt|;
name|val
operator|.
name|variant
operator|=
name|int
argument_list|(
name|QCss
operator|::
name|Value_Italic
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"italic"
argument_list|)
operator|<<
literal|true
operator|<<
literal|"italic"
operator|<<
name|val
expr_stmt|;
name|val
operator|.
name|type
operator|=
name|QCss
operator|::
name|Value
operator|::
name|KnownIdentifier
expr_stmt|;
name|val
operator|.
name|variant
operator|=
name|int
argument_list|(
name|QCss
operator|::
name|Value_Italic
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ItaLIc"
argument_list|)
operator|<<
literal|true
operator|<<
literal|"ItaLIc"
operator|<<
name|val
expr_stmt|;
block|}
end_function
begin_function
DECL|function|term
name|void
name|tst_QCssParser
operator|::
name|term
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|parseSuccess
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|css
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QCss
operator|::
name|Value
argument_list|,
name|expectedValue
argument_list|)
expr_stmt|;
name|QCss
operator|::
name|Parser
name|parser
argument_list|(
name|css
argument_list|)
decl_stmt|;
name|QCss
operator|::
name|Value
name|val
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|testTerm
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|parseTerm
argument_list|(
operator|&
name|val
argument_list|)
argument_list|,
name|parseSuccess
argument_list|)
expr_stmt|;
if|if
condition|(
name|parseSuccess
condition|)
block|{
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|val
operator|.
name|type
argument_list|)
argument_list|,
name|int
argument_list|(
name|expectedValue
operator|.
name|type
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|val
operator|.
name|variant
operator|!=
name|expectedValue
operator|.
name|variant
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"val.variant:"
operator|<<
name|val
operator|.
name|variant
operator|<<
literal|"expectedValue.variant:"
operator|<<
name|expectedValue
operator|.
name|variant
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|variant
argument_list|,
name|expectedValue
operator|.
name|variant
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QVector<QCss::Value>
argument_list|)
end_macro
begin_function
DECL|function|expr_data
name|void
name|tst_QCssParser
operator|::
name|expr_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"parseSuccess"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"css"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVector
argument_list|<
name|QCss
operator|::
name|Value
argument_list|>
argument_list|>
argument_list|(
literal|"expectedValues"
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QCss
operator|::
name|Value
argument_list|>
name|values
decl_stmt|;
name|QCss
operator|::
name|Value
name|val
decl_stmt|;
name|QCss
operator|::
name|Value
name|comma
decl_stmt|;
name|comma
operator|.
name|type
operator|=
name|QCss
operator|::
name|Value
operator|::
name|TermOperatorComma
expr_stmt|;
name|val
operator|.
name|type
operator|=
name|QCss
operator|::
name|Value
operator|::
name|Identifier
expr_stmt|;
name|val
operator|.
name|variant
operator|=
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|values
operator|<<
name|val
expr_stmt|;
name|values
operator|<<
name|comma
expr_stmt|;
name|val
operator|.
name|variant
operator|=
name|QLatin1String
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|values
operator|<<
name|val
expr_stmt|;
name|values
operator|<<
name|comma
expr_stmt|;
name|val
operator|.
name|variant
operator|=
name|QLatin1String
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
name|values
operator|<<
name|val
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"list"
argument_list|)
operator|<<
literal|true
operator|<<
literal|"foo, bar, baz"
operator|<<
name|values
expr_stmt|;
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|expr
name|void
name|tst_QCssParser
operator|::
name|expr
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|parseSuccess
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|css
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QVector
argument_list|<
name|QCss
operator|::
name|Value
argument_list|>
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|QCss
operator|::
name|Parser
name|parser
argument_list|(
name|css
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|QCss
operator|::
name|Value
argument_list|>
name|values
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|testExpr
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|parseExpr
argument_list|(
operator|&
name|values
argument_list|)
argument_list|,
name|parseSuccess
argument_list|)
expr_stmt|;
if|if
condition|(
name|parseSuccess
condition|)
block|{
name|QCOMPARE
argument_list|(
name|values
operator|.
name|count
argument_list|()
argument_list|,
name|expectedValues
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|type
argument_list|)
argument_list|,
name|int
argument_list|(
name|expectedValues
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|variant
argument_list|,
name|expectedValues
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|variant
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|import
name|void
name|tst_QCssParser
operator|::
name|import
parameter_list|()
block|{
name|QCss
operator|::
name|Parser
name|parser
argument_list|(
literal|"@import \"plainstring\";"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|testImport
argument_list|()
argument_list|)
expr_stmt|;
name|QCss
operator|::
name|ImportRule
name|rule
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parseImport
argument_list|(
operator|&
name|rule
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|href
argument_list|,
name|QString
argument_list|(
literal|"plainstring"
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|=
name|QCss
operator|::
name|Parser
argument_list|(
literal|"@import url(\"www.kde.org\") print/*comment*/,screen;"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|testImport
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parseImport
argument_list|(
operator|&
name|rule
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|href
argument_list|,
name|QString
argument_list|(
literal|"www.kde.org"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|media
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|media
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"print"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|media
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"screen"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|media
name|void
name|tst_QCssParser
operator|::
name|media
parameter_list|()
block|{
name|QCss
operator|::
name|Parser
name|parser
argument_list|(
literal|"@media print/*comment*/,screen /*comment to ignore*/{ }"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|testMedia
argument_list|()
argument_list|)
expr_stmt|;
name|QCss
operator|::
name|MediaRule
name|rule
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parseMedia
argument_list|(
operator|&
name|rule
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|media
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|media
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"print"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|media
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"screen"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rule
operator|.
name|styleRules
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|page
name|void
name|tst_QCssParser
operator|::
name|page
parameter_list|()
block|{
name|QCss
operator|::
name|Parser
name|parser
argument_list|(
literal|"@page :first/*comment to ignore*/{ }"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|testPage
argument_list|()
argument_list|)
expr_stmt|;
name|QCss
operator|::
name|PageRule
name|rule
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parsePage
argument_list|(
operator|&
name|rule
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|selector
argument_list|,
name|QString
argument_list|(
literal|"first"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rule
operator|.
name|declarations
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ruleset
name|void
name|tst_QCssParser
operator|::
name|ruleset
parameter_list|()
block|{
block|{
name|QCss
operator|::
name|Parser
name|parser
argument_list|(
literal|"p/*foo*/{ }"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|testRuleset
argument_list|()
argument_list|)
expr_stmt|;
name|QCss
operator|::
name|StyleRule
name|rule
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parseRuleset
argument_list|(
operator|&
name|rule
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|selectors
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|selectors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|basicSelectors
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|selectors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|basicSelectors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|elementName
argument_list|,
name|QString
argument_list|(
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rule
operator|.
name|declarations
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QCss
operator|::
name|Parser
name|parser
argument_list|(
literal|"p/*comment*/,div{ }"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|testRuleset
argument_list|()
argument_list|)
expr_stmt|;
name|QCss
operator|::
name|StyleRule
name|rule
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parseRuleset
argument_list|(
operator|&
name|rule
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|selectors
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|selectors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|basicSelectors
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|selectors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|basicSelectors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|elementName
argument_list|,
name|QString
argument_list|(
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|selectors
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|basicSelectors
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|selectors
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|basicSelectors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|elementName
argument_list|,
name|QString
argument_list|(
literal|"div"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rule
operator|.
name|declarations
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QCss
operator|::
name|Parser
name|parser
argument_list|(
literal|":before, :after { }"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|testRuleset
argument_list|()
argument_list|)
expr_stmt|;
name|QCss
operator|::
name|StyleRule
name|rule
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parseRuleset
argument_list|(
operator|&
name|rule
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|selectors
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|selectors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|basicSelectors
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|selectors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|basicSelectors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|pseudos
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|selectors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|basicSelectors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|pseudos
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|,
name|QString
argument_list|(
literal|"before"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|selectors
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|basicSelectors
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|selectors
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|basicSelectors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|pseudos
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|selectors
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|basicSelectors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|pseudos
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|,
name|QString
argument_list|(
literal|"after"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rule
operator|.
name|declarations
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QCss::Selector
argument_list|)
end_macro
begin_function
DECL|function|selector_data
name|void
name|tst_QCssParser
operator|::
name|selector_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"css"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QCss
operator|::
name|Selector
argument_list|>
argument_list|(
literal|"expectedSelector"
argument_list|)
expr_stmt|;
block|{
name|QCss
operator|::
name|Selector
name|sel
decl_stmt|;
name|QCss
operator|::
name|BasicSelector
name|basic
decl_stmt|;
name|basic
operator|.
name|elementName
operator|=
literal|"p"
expr_stmt|;
name|basic
operator|.
name|relationToNext
operator|=
name|QCss
operator|::
name|BasicSelector
operator|::
name|MatchNextSelectorIfPreceeds
expr_stmt|;
name|sel
operator|.
name|basicSelectors
operator|<<
name|basic
expr_stmt|;
name|basic
operator|=
name|QCss
operator|::
name|BasicSelector
argument_list|()
expr_stmt|;
name|basic
operator|.
name|elementName
operator|=
literal|"div"
expr_stmt|;
name|sel
operator|.
name|basicSelectors
operator|<<
name|basic
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"comment"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"p/* */+ div"
argument_list|)
operator|<<
name|sel
expr_stmt|;
block|}
block|{
name|QCss
operator|::
name|Selector
name|sel
decl_stmt|;
name|QCss
operator|::
name|BasicSelector
name|basic
decl_stmt|;
name|basic
operator|.
name|elementName
operator|=
name|QString
argument_list|()
expr_stmt|;
name|sel
operator|.
name|basicSelectors
operator|<<
name|basic
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"any"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|sel
expr_stmt|;
block|}
block|{
name|QCss
operator|::
name|Selector
name|sel
decl_stmt|;
name|QCss
operator|::
name|BasicSelector
name|basic
decl_stmt|;
name|basic
operator|.
name|elementName
operator|=
literal|"e"
expr_stmt|;
name|sel
operator|.
name|basicSelectors
operator|<<
name|basic
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"element"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"e"
argument_list|)
operator|<<
name|sel
expr_stmt|;
block|}
block|{
name|QCss
operator|::
name|Selector
name|sel
decl_stmt|;
name|QCss
operator|::
name|BasicSelector
name|basic
decl_stmt|;
name|basic
operator|.
name|elementName
operator|=
literal|"e"
expr_stmt|;
name|basic
operator|.
name|relationToNext
operator|=
name|QCss
operator|::
name|BasicSelector
operator|::
name|MatchNextSelectorIfAncestor
expr_stmt|;
name|sel
operator|.
name|basicSelectors
operator|<<
name|basic
expr_stmt|;
name|basic
operator|.
name|elementName
operator|=
literal|"f"
expr_stmt|;
name|basic
operator|.
name|relationToNext
operator|=
name|QCss
operator|::
name|BasicSelector
operator|::
name|NoRelation
expr_stmt|;
name|sel
operator|.
name|basicSelectors
operator|<<
name|basic
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"descendant"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"e f"
argument_list|)
operator|<<
name|sel
expr_stmt|;
block|}
block|{
name|QCss
operator|::
name|Selector
name|sel
decl_stmt|;
name|QCss
operator|::
name|BasicSelector
name|basic
decl_stmt|;
name|basic
operator|.
name|elementName
operator|=
literal|"e"
expr_stmt|;
name|basic
operator|.
name|relationToNext
operator|=
name|QCss
operator|::
name|BasicSelector
operator|::
name|MatchNextSelectorIfParent
expr_stmt|;
name|sel
operator|.
name|basicSelectors
operator|<<
name|basic
expr_stmt|;
name|basic
operator|.
name|elementName
operator|=
literal|"f"
expr_stmt|;
name|basic
operator|.
name|relationToNext
operator|=
name|QCss
operator|::
name|BasicSelector
operator|::
name|NoRelation
expr_stmt|;
name|sel
operator|.
name|basicSelectors
operator|<<
name|basic
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"parent"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"e> f"
argument_list|)
operator|<<
name|sel
expr_stmt|;
block|}
block|{
name|QCss
operator|::
name|Selector
name|sel
decl_stmt|;
name|QCss
operator|::
name|BasicSelector
name|basic
decl_stmt|;
name|basic
operator|.
name|elementName
operator|=
literal|"e"
expr_stmt|;
name|QCss
operator|::
name|Pseudo
name|pseudo
decl_stmt|;
name|pseudo
operator|.
name|name
operator|=
literal|"first-child"
expr_stmt|;
name|basic
operator|.
name|pseudos
operator|.
name|append
argument_list|(
name|pseudo
argument_list|)
expr_stmt|;
name|sel
operator|.
name|basicSelectors
operator|<<
name|basic
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"first-child"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"e:first-child"
argument_list|)
operator|<<
name|sel
expr_stmt|;
block|}
block|{
name|QCss
operator|::
name|Selector
name|sel
decl_stmt|;
name|QCss
operator|::
name|BasicSelector
name|basic
decl_stmt|;
name|basic
operator|.
name|elementName
operator|=
literal|"e"
expr_stmt|;
name|QCss
operator|::
name|Pseudo
name|pseudo
decl_stmt|;
name|pseudo
operator|.
name|name
operator|=
literal|"c"
expr_stmt|;
name|pseudo
operator|.
name|function
operator|=
literal|"lang"
expr_stmt|;
name|basic
operator|.
name|pseudos
operator|.
name|append
argument_list|(
name|pseudo
argument_list|)
expr_stmt|;
name|sel
operator|.
name|basicSelectors
operator|<<
name|basic
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"lang"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"e:lang(c)"
argument_list|)
operator|<<
name|sel
expr_stmt|;
block|}
block|{
name|QCss
operator|::
name|Selector
name|sel
decl_stmt|;
name|QCss
operator|::
name|BasicSelector
name|basic
decl_stmt|;
name|basic
operator|.
name|elementName
operator|=
literal|"e"
expr_stmt|;
name|basic
operator|.
name|relationToNext
operator|=
name|QCss
operator|::
name|BasicSelector
operator|::
name|MatchNextSelectorIfPreceeds
expr_stmt|;
name|sel
operator|.
name|basicSelectors
operator|<<
name|basic
expr_stmt|;
name|basic
operator|.
name|elementName
operator|=
literal|"f"
expr_stmt|;
name|basic
operator|.
name|relationToNext
operator|=
name|QCss
operator|::
name|BasicSelector
operator|::
name|NoRelation
expr_stmt|;
name|sel
operator|.
name|basicSelectors
operator|<<
name|basic
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"precede"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"e + f"
argument_list|)
operator|<<
name|sel
expr_stmt|;
block|}
block|{
name|QCss
operator|::
name|Selector
name|sel
decl_stmt|;
name|QCss
operator|::
name|BasicSelector
name|basic
decl_stmt|;
name|basic
operator|.
name|elementName
operator|=
literal|"e"
expr_stmt|;
name|QCss
operator|::
name|AttributeSelector
name|attrSel
decl_stmt|;
name|attrSel
operator|.
name|name
operator|=
literal|"foo"
expr_stmt|;
name|basic
operator|.
name|attributeSelectors
operator|<<
name|attrSel
expr_stmt|;
name|sel
operator|.
name|basicSelectors
operator|<<
name|basic
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"attr"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"e[foo]"
argument_list|)
operator|<<
name|sel
expr_stmt|;
block|}
block|{
name|QCss
operator|::
name|Selector
name|sel
decl_stmt|;
name|QCss
operator|::
name|BasicSelector
name|basic
decl_stmt|;
name|basic
operator|.
name|elementName
operator|=
literal|"e"
expr_stmt|;
name|QCss
operator|::
name|AttributeSelector
name|attrSel
decl_stmt|;
name|attrSel
operator|.
name|name
operator|=
literal|"foo"
expr_stmt|;
name|attrSel
operator|.
name|value
operator|=
literal|"warning"
expr_stmt|;
name|attrSel
operator|.
name|valueMatchCriterium
operator|=
name|QCss
operator|::
name|AttributeSelector
operator|::
name|MatchEqual
expr_stmt|;
name|basic
operator|.
name|attributeSelectors
operator|<<
name|attrSel
expr_stmt|;
name|sel
operator|.
name|basicSelectors
operator|<<
name|basic
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"attr-equal"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"e[foo=\"warning\"]"
argument_list|)
operator|<<
name|sel
expr_stmt|;
block|}
block|{
name|QCss
operator|::
name|Selector
name|sel
decl_stmt|;
name|QCss
operator|::
name|BasicSelector
name|basic
decl_stmt|;
name|basic
operator|.
name|elementName
operator|=
literal|"e"
expr_stmt|;
name|QCss
operator|::
name|AttributeSelector
name|attrSel
decl_stmt|;
name|attrSel
operator|.
name|name
operator|=
literal|"foo"
expr_stmt|;
name|attrSel
operator|.
name|value
operator|=
literal|"warning"
expr_stmt|;
name|attrSel
operator|.
name|valueMatchCriterium
operator|=
name|QCss
operator|::
name|AttributeSelector
operator|::
name|MatchContains
expr_stmt|;
name|basic
operator|.
name|attributeSelectors
operator|<<
name|attrSel
expr_stmt|;
name|sel
operator|.
name|basicSelectors
operator|<<
name|basic
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"attr-contains"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"e[foo~=\"warning\"]"
argument_list|)
operator|<<
name|sel
expr_stmt|;
block|}
block|{
name|QCss
operator|::
name|Selector
name|sel
decl_stmt|;
name|QCss
operator|::
name|BasicSelector
name|basic
decl_stmt|;
name|basic
operator|.
name|elementName
operator|=
literal|"e"
expr_stmt|;
name|QCss
operator|::
name|AttributeSelector
name|attrSel
decl_stmt|;
name|attrSel
operator|.
name|name
operator|=
literal|"lang"
expr_stmt|;
name|attrSel
operator|.
name|value
operator|=
literal|"en"
expr_stmt|;
name|attrSel
operator|.
name|valueMatchCriterium
operator|=
name|QCss
operator|::
name|AttributeSelector
operator|::
name|MatchBeginsWith
expr_stmt|;
name|basic
operator|.
name|attributeSelectors
operator|<<
name|attrSel
expr_stmt|;
name|sel
operator|.
name|basicSelectors
operator|<<
name|basic
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"attr-contains"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"e[lang|=\"en\"]"
argument_list|)
operator|<<
name|sel
expr_stmt|;
block|}
block|{
name|QCss
operator|::
name|Selector
name|sel
decl_stmt|;
name|QCss
operator|::
name|BasicSelector
name|basic
decl_stmt|;
name|basic
operator|.
name|elementName
operator|=
literal|"div"
expr_stmt|;
name|QCss
operator|::
name|AttributeSelector
name|attrSel
decl_stmt|;
name|attrSel
operator|.
name|name
operator|=
literal|"class"
expr_stmt|;
name|attrSel
operator|.
name|valueMatchCriterium
operator|=
name|QCss
operator|::
name|AttributeSelector
operator|::
name|MatchContains
expr_stmt|;
name|attrSel
operator|.
name|value
operator|=
literal|"warning"
expr_stmt|;
name|basic
operator|.
name|attributeSelectors
operator|.
name|append
argument_list|(
name|attrSel
argument_list|)
expr_stmt|;
name|attrSel
operator|.
name|value
operator|=
literal|"foo"
expr_stmt|;
name|basic
operator|.
name|attributeSelectors
operator|.
name|append
argument_list|(
name|attrSel
argument_list|)
expr_stmt|;
name|sel
operator|.
name|basicSelectors
operator|<<
name|basic
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"class"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"div.warning.foo"
argument_list|)
operator|<<
name|sel
expr_stmt|;
block|}
block|{
name|QCss
operator|::
name|Selector
name|sel
decl_stmt|;
name|QCss
operator|::
name|BasicSelector
name|basic
decl_stmt|;
name|basic
operator|.
name|elementName
operator|=
literal|"e"
expr_stmt|;
name|basic
operator|.
name|ids
operator|<<
literal|"myid"
expr_stmt|;
name|sel
operator|.
name|basicSelectors
operator|<<
name|basic
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"id"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"e#myid"
argument_list|)
operator|<<
name|sel
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|selector
name|void
name|tst_QCssParser
operator|::
name|selector
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|css
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QCss
operator|::
name|Selector
argument_list|,
name|expectedSelector
argument_list|)
expr_stmt|;
name|QCss
operator|::
name|Parser
name|parser
argument_list|(
name|css
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|testSelector
argument_list|()
argument_list|)
expr_stmt|;
name|QCss
operator|::
name|Selector
name|selector
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parseSelector
argument_list|(
operator|&
name|selector
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selector
operator|.
name|basicSelectors
operator|.
name|count
argument_list|()
argument_list|,
name|expectedSelector
operator|.
name|basicSelectors
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|selector
operator|.
name|basicSelectors
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QCss
operator|::
name|BasicSelector
name|sel
init|=
name|selector
operator|.
name|basicSelectors
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|QCss
operator|::
name|BasicSelector
name|expectedSel
init|=
name|expectedSelector
operator|.
name|basicSelectors
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|sel
operator|.
name|elementName
argument_list|,
name|expectedSel
operator|.
name|elementName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|sel
operator|.
name|relationToNext
argument_list|)
argument_list|,
name|int
argument_list|(
name|expectedSel
operator|.
name|relationToNext
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sel
operator|.
name|pseudos
operator|.
name|count
argument_list|()
argument_list|,
name|expectedSel
operator|.
name|pseudos
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sel
operator|.
name|pseudos
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|sel
operator|.
name|pseudos
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|name
argument_list|,
name|expectedSel
operator|.
name|pseudos
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sel
operator|.
name|pseudos
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|function
argument_list|,
name|expectedSel
operator|.
name|pseudos
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|function
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|sel
operator|.
name|attributeSelectors
operator|.
name|count
argument_list|()
argument_list|,
name|expectedSel
operator|.
name|attributeSelectors
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sel
operator|.
name|attributeSelectors
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|sel
operator|.
name|attributeSelectors
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|name
argument_list|,
name|expectedSel
operator|.
name|attributeSelectors
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sel
operator|.
name|attributeSelectors
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
argument_list|,
name|expectedSel
operator|.
name|attributeSelectors
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|sel
operator|.
name|attributeSelectors
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|valueMatchCriterium
argument_list|)
argument_list|,
name|int
argument_list|(
name|expectedSel
operator|.
name|attributeSelectors
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|valueMatchCriterium
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|prio
name|void
name|tst_QCssParser
operator|::
name|prio
parameter_list|()
block|{
block|{
name|QCss
operator|::
name|Parser
name|parser
argument_list|(
literal|"!important"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|testPrio
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QCss
operator|::
name|Parser
name|parser
argument_list|(
literal|"!impOrTAnt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|testPrio
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QCss
operator|::
name|Parser
name|parser
argument_list|(
literal|"!\"important\""
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|parser
operator|.
name|testPrio
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|index
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|{
name|QCss
operator|::
name|Parser
name|parser
argument_list|(
literal|"!importbleh"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|parser
operator|.
name|testPrio
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|index
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|escapes
name|void
name|tst_QCssParser
operator|::
name|escapes
parameter_list|()
block|{
name|QCss
operator|::
name|Parser
name|parser
argument_list|(
literal|"\\hello"
argument_list|)
decl_stmt|;
name|parser
operator|.
name|test
argument_list|(
name|QCss
operator|::
name|IDENT
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|lexem
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|malformedDeclarations_data
name|void
name|tst_QCssParser
operator|::
name|malformedDeclarations_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"css"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"p { color:green }"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"p { color:green; color }  /* malformed declaration missing ':', value */"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"p { color:red;   color; color:green }  /* same with expected recovery */"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"p { color:green; color: } /* malformed declaration missing value */"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"p { color:red;   color:; color:green } /* same with expected recovery */"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"p { color:green; color{;color:maroon} } /* unexpected tokens { } */"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"7"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"p { color:red;   color{;color:maroon}; color:green } /* same with recovery */"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|malformedDeclarations
name|void
name|tst_QCssParser
operator|::
name|malformedDeclarations
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|css
argument_list|)
expr_stmt|;
name|QCss
operator|::
name|Parser
name|parser
argument_list|(
name|css
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|testRuleset
argument_list|()
argument_list|)
expr_stmt|;
name|QCss
operator|::
name|StyleRule
name|rule
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parseRuleset
argument_list|(
operator|&
name|rule
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|selectors
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|selectors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|basicSelectors
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|selectors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|basicSelectors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|elementName
argument_list|,
name|QString
argument_list|(
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rule
operator|.
name|declarations
operator|.
name|count
argument_list|()
operator|>=
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|rule
operator|.
name|declarations
operator|.
name|last
argument_list|()
operator|.
name|d
operator|->
name|propertyId
argument_list|)
argument_list|,
name|int
argument_list|(
name|QCss
operator|::
name|Color
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|declarations
operator|.
name|last
argument_list|()
operator|.
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|rule
operator|.
name|declarations
operator|.
name|last
argument_list|()
operator|.
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|)
argument_list|,
name|int
argument_list|(
name|QCss
operator|::
name|Value
operator|::
name|Identifier
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|declarations
operator|.
name|last
argument_list|()
operator|.
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|variant
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"green"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invalidAtKeywords
name|void
name|tst_QCssParser
operator|::
name|invalidAtKeywords
parameter_list|()
block|{
name|QCss
operator|::
name|Parser
name|parser
argument_list|(
literal|""
literal|"@three-dee {"
literal|"  @background-lighting {"
literal|"    azimuth: 30deg;"
literal|"    elevation: 190deg;"
literal|"  }"
literal|"  h1 { color: red }"
literal|"}"
literal|"h1 { color: blue }"
argument_list|)
decl_stmt|;
name|QCss
operator|::
name|StyleSheet
name|sheet
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
operator|&
name|sheet
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sheet
operator|.
name|styleRules
operator|.
name|count
argument_list|()
operator|+
name|sheet
operator|.
name|nameIndex
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCss
operator|::
name|StyleRule
name|rule
init|=
operator|(
operator|!
name|sheet
operator|.
name|styleRules
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|sheet
operator|.
name|styleRules
operator|.
name|at
argument_list|(
literal|0
argument_list|)
else|:
operator|*
name|sheet
operator|.
name|nameIndex
operator|.
name|begin
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|selectors
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|selectors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|basicSelectors
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|selectors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|basicSelectors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|elementName
argument_list|,
name|QString
argument_list|(
literal|"h1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|declarations
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|rule
operator|.
name|declarations
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|d
operator|->
name|propertyId
argument_list|)
argument_list|,
name|int
argument_list|(
name|QCss
operator|::
name|Color
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|declarations
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|rule
operator|.
name|declarations
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|)
argument_list|,
name|int
argument_list|(
name|QCss
operator|::
name|Value
operator|::
name|Identifier
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|declarations
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|variant
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"blue"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QColor
argument_list|)
end_macro
begin_function
DECL|function|colorValue_data
name|void
name|tst_QCssParser
operator|::
name|colorValue_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"css"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QColor
argument_list|>
argument_list|(
literal|"expectedColor"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"identifier"
argument_list|)
operator|<<
literal|"color: black"
operator|<<
name|QColor
argument_list|(
literal|"black"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"string"
argument_list|)
operator|<<
literal|"color: \"green\""
operator|<<
name|QColor
argument_list|(
literal|"green"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hexcolor"
argument_list|)
operator|<<
literal|"color: #12af0e"
operator|<<
name|QColor
argument_list|(
literal|0x12
argument_list|,
literal|0xaf
argument_list|,
literal|0x0e
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"functional1"
argument_list|)
operator|<<
literal|"color: rgb(21, 45, 73)"
operator|<<
name|QColor
argument_list|(
literal|21
argument_list|,
literal|45
argument_list|,
literal|73
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"functional2"
argument_list|)
operator|<<
literal|"color: rgb(100%, 0%, 100%)"
operator|<<
name|QColor
argument_list|(
literal|0xff
argument_list|,
literal|0
argument_list|,
literal|0xff
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rgba"
argument_list|)
operator|<<
literal|"color: rgba(10, 20, 30, 40)"
operator|<<
name|QColor
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|,
literal|30
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rgb"
argument_list|)
operator|<<
literal|"color: rgb(10, 20, 30, 40)"
operator|<<
name|QColor
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|,
literal|30
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hsl"
argument_list|)
operator|<<
literal|"color: hsv(10, 20, 30)"
operator|<<
name|QColor
operator|::
name|fromHsv
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|,
literal|30
argument_list|,
literal|255
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hsla"
argument_list|)
operator|<<
literal|"color: hsva(10, 20, 30, 40)"
operator|<<
name|QColor
operator|::
name|fromHsv
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|,
literal|30
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid1"
argument_list|)
operator|<<
literal|"color: rgb(why, does, it, always, rain, on, me)"
operator|<<
name|QColor
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid2"
argument_list|)
operator|<<
literal|"color: rgba(i, meant, norway)"
operator|<<
name|QColor
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"role"
argument_list|)
operator|<<
literal|"color: palette(base)"
operator|<<
name|qApp
operator|->
name|palette
argument_list|()
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"role2"
argument_list|)
operator|<<
literal|"color: palette( window-text ) "
operator|<<
name|qApp
operator|->
name|palette
argument_list|()
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|WindowText
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"transparent"
argument_list|)
operator|<<
literal|"color: transparent"
operator|<<
name|QColor
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|colorValue
name|void
name|tst_QCssParser
operator|::
name|colorValue
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|css
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QColor
argument_list|,
name|expectedColor
argument_list|)
expr_stmt|;
name|QCss
operator|::
name|Parser
name|parser
argument_list|(
name|css
argument_list|)
decl_stmt|;
name|QCss
operator|::
name|Declaration
name|decl
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parseNextDeclaration
argument_list|(
operator|&
name|decl
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QColor
name|col
init|=
name|decl
operator|.
name|colorValue
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|expectedColor
operator|.
name|isValid
argument_list|()
operator|==
name|col
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|col
argument_list|,
name|expectedColor
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|DomStyleSelector
class|class
name|DomStyleSelector
super|:
specifier|public
name|QCss
operator|::
name|StyleSelector
block|{
public|public:
DECL|function|DomStyleSelector
specifier|inline
name|DomStyleSelector
parameter_list|(
specifier|const
name|QDomDocument
modifier|&
name|doc
parameter_list|,
specifier|const
name|QCss
operator|::
name|StyleSheet
modifier|&
name|sheet
parameter_list|)
member_init_list|:
name|doc
argument_list|(
name|doc
argument_list|)
block|{
name|styleSheets
operator|.
name|append
argument_list|(
name|sheet
argument_list|)
expr_stmt|;
block|}
DECL|function|nodeNames
specifier|virtual
name|QStringList
name|nodeNames
parameter_list|(
name|NodePtr
name|node
parameter_list|)
specifier|const
block|{
return|return
name|QStringList
argument_list|(
cast|reinterpret_cast
argument_list|<
name|QDomElement
operator|*
argument_list|>
argument_list|(
name|node
operator|.
name|ptr
argument_list|)
operator|->
name|tagName
argument_list|()
argument_list|)
return|;
block|}
DECL|function|attribute
specifier|virtual
name|QString
name|attribute
parameter_list|(
name|NodePtr
name|node
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
specifier|const
block|{
return|return
cast|reinterpret_cast
argument_list|<
name|QDomElement
operator|*
argument_list|>
argument_list|(
name|node
operator|.
name|ptr
argument_list|)
operator|->
name|attribute
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|function|hasAttribute
specifier|virtual
name|bool
name|hasAttribute
parameter_list|(
name|NodePtr
name|node
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
specifier|const
block|{
return|return
cast|reinterpret_cast
argument_list|<
name|QDomElement
operator|*
argument_list|>
argument_list|(
name|node
operator|.
name|ptr
argument_list|)
operator|->
name|hasAttribute
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|function|hasAttributes
specifier|virtual
name|bool
name|hasAttributes
parameter_list|(
name|NodePtr
name|node
parameter_list|)
specifier|const
block|{
return|return
cast|reinterpret_cast
argument_list|<
name|QDomElement
operator|*
argument_list|>
argument_list|(
name|node
operator|.
name|ptr
argument_list|)
operator|->
name|hasAttributes
argument_list|()
return|;
block|}
DECL|function|isNullNode
specifier|virtual
name|bool
name|isNullNode
parameter_list|(
name|NodePtr
name|node
parameter_list|)
specifier|const
block|{
return|return
cast|reinterpret_cast
argument_list|<
name|QDomElement
operator|*
argument_list|>
argument_list|(
name|node
operator|.
name|ptr
argument_list|)
operator|->
name|isNull
argument_list|()
return|;
block|}
DECL|function|parentNode
specifier|virtual
name|NodePtr
name|parentNode
parameter_list|(
name|NodePtr
name|node
parameter_list|)
specifier|const
block|{
name|NodePtr
name|parent
decl_stmt|;
name|parent
operator|.
name|ptr
operator|=
operator|new
name|QDomElement
argument_list|(
cast|reinterpret_cast
argument_list|<
name|QDomElement
operator|*
argument_list|>
argument_list|(
name|node
operator|.
name|ptr
argument_list|)
operator|->
name|parentNode
argument_list|()
operator|.
name|toElement
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|parent
return|;
block|}
DECL|function|duplicateNode
specifier|virtual
name|NodePtr
name|duplicateNode
parameter_list|(
name|NodePtr
name|node
parameter_list|)
specifier|const
block|{
name|NodePtr
name|n
decl_stmt|;
name|n
operator|.
name|ptr
operator|=
operator|new
name|QDomElement
argument_list|(
operator|*
cast|reinterpret_cast
argument_list|<
name|QDomElement
operator|*
argument_list|>
argument_list|(
name|node
operator|.
name|ptr
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|n
return|;
block|}
DECL|function|previousSiblingNode
specifier|virtual
name|NodePtr
name|previousSiblingNode
parameter_list|(
name|NodePtr
name|node
parameter_list|)
specifier|const
block|{
name|NodePtr
name|sibling
decl_stmt|;
name|sibling
operator|.
name|ptr
operator|=
operator|new
name|QDomElement
argument_list|(
cast|reinterpret_cast
argument_list|<
name|QDomElement
operator|*
argument_list|>
argument_list|(
name|node
operator|.
name|ptr
argument_list|)
operator|->
name|previousSiblingElement
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sibling
return|;
block|}
DECL|function|freeNode
specifier|virtual
name|void
name|freeNode
parameter_list|(
name|NodePtr
name|node
parameter_list|)
specifier|const
block|{
operator|delete
cast|reinterpret_cast
argument_list|<
name|QDomElement
operator|*
argument_list|>
argument_list|(
name|node
operator|.
name|ptr
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|member|doc
name|QDomDocument
name|doc
decl_stmt|;
block|}
class|;
end_class
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QDomDocument
argument_list|)
end_macro
begin_function
DECL|function|marginValue_data
name|void
name|tst_QCssParser
operator|::
name|marginValue_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"css"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedMargin"
argument_list|)
expr_stmt|;
name|QFont
name|f
decl_stmt|;
name|int
name|ex
init|=
name|QFontMetrics
argument_list|(
name|f
argument_list|)
operator|.
name|xHeight
argument_list|()
decl_stmt|;
name|int
name|em
init|=
name|QFontMetrics
argument_list|(
name|f
argument_list|)
operator|.
name|height
argument_list|()
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one value"
argument_list|)
operator|<<
literal|"margin: 1px"
operator|<<
literal|"1 1 1 1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"two values"
argument_list|)
operator|<<
literal|"margin: 1px 2px"
operator|<<
literal|"1 2 1 2"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"three value"
argument_list|)
operator|<<
literal|"margin: 1px 2px 3px"
operator|<<
literal|"1 2 3 2"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"four values"
argument_list|)
operator|<<
literal|"margin: 1px 2px 3px 4px"
operator|<<
literal|"1 2 3 4"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"default px"
argument_list|)
operator|<<
literal|"margin: 1 2 3 4"
operator|<<
literal|"1 2 3 4"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no unit"
argument_list|)
operator|<<
literal|"margin: 1 2 3 4"
operator|<<
literal|"1 2 3 4"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"em"
argument_list|)
operator|<<
literal|"margin: 1ex 2ex 3ex 4ex"
operator|<<
name|QString
argument_list|(
literal|"%1 %2 %3 %4"
argument_list|)
operator|.
name|arg
argument_list|(
name|ex
argument_list|)
operator|.
name|arg
argument_list|(
literal|2
operator|*
name|ex
argument_list|)
operator|.
name|arg
argument_list|(
literal|3
operator|*
name|ex
argument_list|)
operator|.
name|arg
argument_list|(
literal|4
operator|*
name|ex
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ex"
argument_list|)
operator|<<
literal|"margin: 1 2em 3px 4ex"
operator|<<
name|QString
argument_list|(
literal|"%1 %2 %3 %4"
argument_list|)
operator|.
name|arg
argument_list|(
literal|1
argument_list|)
operator|.
name|arg
argument_list|(
literal|2
operator|*
name|em
argument_list|)
operator|.
name|arg
argument_list|(
literal|3
argument_list|)
operator|.
name|arg
argument_list|(
literal|4
operator|*
name|ex
argument_list|)
expr_stmt|;
name|f
operator|.
name|setPointSize
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|f
operator|.
name|setBold
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ex
operator|=
name|QFontMetrics
argument_list|(
name|f
argument_list|)
operator|.
name|xHeight
argument_list|()
expr_stmt|;
name|em
operator|=
name|QFontMetrics
argument_list|(
name|f
argument_list|)
operator|.
name|height
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"em2"
argument_list|)
operator|<<
literal|"font: bold 20pt; margin: 1ex 2ex 3ex 4ex"
operator|<<
name|QString
argument_list|(
literal|"%1 %2 %3 %4"
argument_list|)
operator|.
name|arg
argument_list|(
name|ex
argument_list|)
operator|.
name|arg
argument_list|(
literal|2
operator|*
name|ex
argument_list|)
operator|.
name|arg
argument_list|(
literal|3
operator|*
name|ex
argument_list|)
operator|.
name|arg
argument_list|(
literal|4
operator|*
name|ex
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ex2"
argument_list|)
operator|<<
literal|"margin: 1 2em 3px 4ex; font-size: 20pt; font-weight: bold;"
operator|<<
name|QString
argument_list|(
literal|"%1 %2 %3 %4"
argument_list|)
operator|.
name|arg
argument_list|(
literal|1
argument_list|)
operator|.
name|arg
argument_list|(
literal|2
operator|*
name|em
argument_list|)
operator|.
name|arg
argument_list|(
literal|3
argument_list|)
operator|.
name|arg
argument_list|(
literal|4
operator|*
name|ex
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"crap"
argument_list|)
operator|<<
literal|"margin: crap"
operator|<<
literal|"0 0 0 0"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|marginValue
name|void
name|tst_QCssParser
operator|::
name|marginValue
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|css
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedMargin
argument_list|)
expr_stmt|;
name|QDomDocument
name|doc
decl_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|.
name|setContent
argument_list|(
name|QLatin1String
argument_list|(
literal|"<!DOCTYPE test><test><dummy/></test>"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|css
operator|.
name|prepend
argument_list|(
literal|"dummy {"
argument_list|)
expr_stmt|;
name|css
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|QCss
operator|::
name|Parser
name|parser
argument_list|(
name|css
argument_list|)
decl_stmt|;
name|QCss
operator|::
name|StyleSheet
name|sheet
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
operator|&
name|sheet
argument_list|)
argument_list|)
expr_stmt|;
name|DomStyleSelector
name|testSelector
argument_list|(
name|doc
argument_list|,
name|sheet
argument_list|)
decl_stmt|;
name|QDomElement
name|e
init|=
name|doc
operator|.
name|documentElement
argument_list|()
operator|.
name|firstChildElement
argument_list|()
decl_stmt|;
name|QCss
operator|::
name|StyleSelector
operator|::
name|NodePtr
name|n
decl_stmt|;
name|n
operator|.
name|ptr
operator|=
operator|&
name|e
expr_stmt|;
name|QVector
argument_list|<
name|QCss
operator|::
name|StyleRule
argument_list|>
name|rules
init|=
name|testSelector
operator|.
name|styleRulesForNode
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|QCss
operator|::
name|Declaration
argument_list|>
name|decls
init|=
name|rules
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|declarations
decl_stmt|;
name|QCss
operator|::
name|ValueExtractor
name|v
argument_list|(
name|decls
argument_list|)
decl_stmt|;
block|{
name|int
name|m
index|[
literal|4
index|]
decl_stmt|;
name|int
name|p
index|[
literal|4
index|]
decl_stmt|;
name|int
name|spacing
decl_stmt|;
name|v
operator|.
name|extractBox
argument_list|(
name|m
argument_list|,
name|p
argument_list|,
operator|&
name|spacing
argument_list|)
expr_stmt|;
name|QString
name|str
init|=
name|QString
argument_list|(
literal|"%1 %2 %3 %4"
argument_list|)
operator|.
name|arg
argument_list|(
name|m
index|[
literal|0
index|]
argument_list|)
operator|.
name|arg
argument_list|(
name|m
index|[
literal|1
index|]
argument_list|)
operator|.
name|arg
argument_list|(
name|m
index|[
literal|2
index|]
argument_list|)
operator|.
name|arg
argument_list|(
name|m
index|[
literal|3
index|]
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|str
argument_list|,
name|expectedMargin
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|styleSelector_data
name|void
name|tst_QCssParser
operator|::
name|styleSelector_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"match"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"selector"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"xml"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"elementToCheck"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"plain"
argument_list|)
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|"p"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p />"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"noplain"
argument_list|)
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"bar"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p />"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"class"
argument_list|)
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|".foo"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p class=\"foo\" />"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"noclass"
argument_list|)
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|".bar"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p class=\"foo\" />"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"attrset"
argument_list|)
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|"[justset]"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p justset=\"bar\" />"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"notattrset"
argument_list|)
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"[justset]"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p otherattribute=\"blub\" />"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"attrmatch"
argument_list|)
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|"[foo=bar]"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p foo=\"bar\" />"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"noattrmatch"
argument_list|)
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"[foo=bar]"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p foo=\"xyz\" />"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"contains"
argument_list|)
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|"[foo~=bar]"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p foo=\"baz bleh bar\" />"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"notcontains"
argument_list|)
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"[foo~=bar]"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p foo=\"test\" />"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"beingswith"
argument_list|)
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|"[foo|=bar]"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p foo=\"bar-bleh\" />"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"notbeingswith"
argument_list|)
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"[foo|=bar]"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p foo=\"bleh-bar\" />"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"attr2"
argument_list|)
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|"[bar=foo]"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p bleh=\"bar\" bar=\"foo\" />"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"universal1"
argument_list|)
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p />"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"universal3"
argument_list|)
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"*[foo=bar]"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p foo=\"bleh\" />"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"universal4"
argument_list|)
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|"*[foo=bar]"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p foo=\"bar\" />"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"universal5"
argument_list|)
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"[foo=bar]"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p foo=\"bleh\" />"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"universal6"
argument_list|)
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|"[foo=bar]"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p foo=\"bar\" />"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"universal7"
argument_list|)
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|".charfmt1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p class=\"charfmt1\" />"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"id"
argument_list|)
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|"#blub"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p id=\"blub\" />"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"noid"
argument_list|)
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"#blub"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p id=\"other\" />"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"childselector"
argument_list|)
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|"parent> child"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<parent><child /></parent>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"parent/child"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nochildselector2"
argument_list|)
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"parent> child"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<child><parent /></child>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"child/parent"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nochildselector3"
argument_list|)
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"parent> child"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<parent><intermediate><child /></intermediate></parent>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"parent/intermediate/child"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"childselector2"
argument_list|)
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|"parent[foo=bar]> child"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<parent foo=\"bar\"><child /></parent>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"parent/child"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nochildselector4"
argument_list|)
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"parent[foo=bar]> child"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<parent><child /></parent>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"parent/child"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nochildselector5"
argument_list|)
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"parent[foo=bar]> child"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<parent foo=\"bar\"><parent><child /></parent></parent>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"parent/parent/child"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"childselectors"
argument_list|)
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|"grandparent> parent> child"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<grandparent><parent><child /></parent></grandparent>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"grandparent/parent/child"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"descendant"
argument_list|)
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|"grandparent child"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<grandparent><parent><child /></parent></grandparent>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"grandparent/parent/child"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nodescendant"
argument_list|)
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"grandparent child"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<other><parent><child /></parent></other>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"other/parent/child"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"descendant2"
argument_list|)
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|"grandgrandparent grandparent child"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<grandgrandparent><inbetween><grandparent><parent><child /></parent></grandparent></inbetween></grandgrandparent>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"grandgrandparent/inbetween/grandparent/parent/child"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"combined"
argument_list|)
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|"grandparent parent> child"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<grandparent><inbetween><parent><child /></parent></inbetween></grandparent>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"grandparent/inbetween/parent/child"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"combined2"
argument_list|)
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|"grandparent> parent child"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<grandparent><parent><inbetween><child /></inbetween></parent></grandparent>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"grandparent/parent/inbetween/child"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"combined3"
argument_list|)
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|"grandparent> parent child"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<grandparent><parent><inbetween><child /></inbetween></parent></grandparent>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"grandparent/parent/inbetween/child"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nocombined"
argument_list|)
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"grandparent parent> child"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<inbetween><parent><child /></parent></inbetween>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"inbetween/parent/child"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nocombined2"
argument_list|)
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"grandparent parent> child"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<parent><child /></parent>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"parent/child"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"previoussibling"
argument_list|)
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|"p1 + p2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p1 /><p2 />"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"p2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"noprevioussibling"
argument_list|)
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"p2 + p1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p1 /><p2 />"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"p2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ancestry_firstmismatch"
argument_list|)
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"parent child[foo=bar]"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<parent><child /></parent>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"parent/child"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unknown-pseudo"
argument_list|)
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"p:enabled:foobar"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p/>"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|styleSelector
name|void
name|tst_QCssParser
operator|::
name|styleSelector
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|match
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|selector
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|elementToCheck
argument_list|)
expr_stmt|;
name|QString
name|css
init|=
name|QString
argument_list|(
literal|"%1 { background-color: green }"
argument_list|)
operator|.
name|arg
argument_list|(
name|selector
argument_list|)
decl_stmt|;
name|QCss
operator|::
name|Parser
name|parser
argument_list|(
name|css
argument_list|)
decl_stmt|;
name|QCss
operator|::
name|StyleSheet
name|sheet
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
operator|&
name|sheet
argument_list|)
argument_list|)
expr_stmt|;
name|QDomDocument
name|doc
decl_stmt|;
name|xml
operator|.
name|prepend
argument_list|(
literal|"<!DOCTYPE test><test>"
argument_list|)
expr_stmt|;
name|xml
operator|.
name|append
argument_list|(
literal|"</test>"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|.
name|setContent
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|DomStyleSelector
name|testSelector
argument_list|(
name|doc
argument_list|,
name|sheet
argument_list|)
decl_stmt|;
name|QDomElement
name|e
init|=
name|doc
operator|.
name|documentElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|elementToCheck
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|e
operator|=
name|e
operator|.
name|firstChildElement
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QStringList
name|path
init|=
name|elementToCheck
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
decl_stmt|;
do|do
block|{
name|e
operator|=
name|e
operator|.
name|namedItem
argument_list|(
name|path
operator|.
name|takeFirst
argument_list|()
argument_list|)
operator|.
name|toElement
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
do|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|e
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCss
operator|::
name|StyleSelector
operator|::
name|NodePtr
name|n
decl_stmt|;
name|n
operator|.
name|ptr
operator|=
operator|&
name|e
expr_stmt|;
name|QVector
argument_list|<
name|QCss
operator|::
name|Declaration
argument_list|>
name|decls
init|=
name|testSelector
operator|.
name|declarationsForNode
argument_list|(
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|match
condition|)
block|{
name|QCOMPARE
argument_list|(
name|decls
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|decls
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|d
operator|->
name|propertyId
argument_list|)
argument_list|,
name|int
argument_list|(
name|QCss
operator|::
name|BackgroundColor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|decls
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|decls
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|)
argument_list|,
name|int
argument_list|(
name|QCss
operator|::
name|Value
operator|::
name|Identifier
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|decls
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|variant
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"green"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|decls
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|specificity_data
name|void
name|tst_QCssParser
operator|::
name|specificity_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"selector"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"specificity"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"universal"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"*"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"elements+pseudos1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"elements+pseudos2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo *[blah]"
argument_list|)
operator|<<
literal|1
operator|+
operator|(
literal|1
operator|*
literal|0x10
operator|)
expr_stmt|;
comment|// should strictly speaking be '2', but we don't support pseudo-elements yet,
comment|// only pseudo-classes
name|QTest
operator|::
name|newRow
argument_list|(
literal|"elements+pseudos3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"li:first-line"
argument_list|)
operator|<<
literal|1
operator|+
operator|(
literal|1
operator|*
literal|0x10
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"elements+pseudos4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ul li"
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"elements+pseudos5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ul ol+li"
argument_list|)
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"elements+pseudos6"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"h1 + *[rel=up]"
argument_list|)
operator|<<
literal|1
operator|+
operator|(
literal|1
operator|*
literal|0x10
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"elements+pseudos7"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ul ol li.red"
argument_list|)
operator|<<
literal|3
operator|+
operator|(
literal|1
operator|*
literal|0x10
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"elements+pseudos8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"li.red.level"
argument_list|)
operator|<<
literal|1
operator|+
operator|(
literal|2
operator|*
literal|0x10
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"id"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"#x34y"
argument_list|)
operator|<<
literal|1
operator|*
literal|0x100
expr_stmt|;
block|}
end_function
begin_function
DECL|function|specificity
name|void
name|tst_QCssParser
operator|::
name|specificity
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|selector
argument_list|)
expr_stmt|;
name|QString
name|css
init|=
name|QString
argument_list|(
literal|"%1 { }"
argument_list|)
operator|.
name|arg
argument_list|(
name|selector
argument_list|)
decl_stmt|;
name|QCss
operator|::
name|Parser
name|parser
argument_list|(
name|css
argument_list|)
decl_stmt|;
name|QCss
operator|::
name|StyleSheet
name|sheet
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
operator|&
name|sheet
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sheet
operator|.
name|styleRules
operator|.
name|count
argument_list|()
operator|+
name|sheet
operator|.
name|nameIndex
operator|.
name|count
argument_list|()
operator|+
name|sheet
operator|.
name|idIndex
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCss
operator|::
name|StyleRule
name|rule
init|=
operator|(
operator|!
name|sheet
operator|.
name|styleRules
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|sheet
operator|.
name|styleRules
operator|.
name|at
argument_list|(
literal|0
argument_list|)
else|:
operator|(
operator|!
name|sheet
operator|.
name|nameIndex
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
operator|*
name|sheet
operator|.
name|nameIndex
operator|.
name|begin
argument_list|()
else|:
operator|*
name|sheet
operator|.
name|idIndex
operator|.
name|begin
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|rule
operator|.
name|selectors
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|rule
operator|.
name|selectors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|specificity
argument_list|()
argument_list|,
literal|"specificity"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|specificitySort_data
name|void
name|tst_QCssParser
operator|::
name|specificitySort_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"firstSelector"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"secondSelector"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"xml"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"universal1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"p"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p />"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"attr"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"p"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"p[foo=bar]"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p foo=\"bar\" />"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"id"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"p"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"#hey"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p id=\"hey\" />"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"id2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"[id=hey]"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"#hey"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p id=\"hey\" />"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"class"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"p"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".hey"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p class=\"hey\" />"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|specificitySort
name|void
name|tst_QCssParser
operator|::
name|specificitySort
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|firstSelector
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|secondSelector
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|firstSelector
operator|.
name|append
argument_list|(
literal|" { color: green; }"
argument_list|)
expr_stmt|;
name|secondSelector
operator|.
name|append
argument_list|(
literal|" { color: red; }"
argument_list|)
expr_stmt|;
name|QDomDocument
name|doc
decl_stmt|;
name|xml
operator|.
name|prepend
argument_list|(
literal|"<!DOCTYPE test><test>"
argument_list|)
expr_stmt|;
name|xml
operator|.
name|append
argument_list|(
literal|"</test>"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|.
name|setContent
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|css
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
name|css
operator|=
name|firstSelector
operator|+
name|secondSelector
expr_stmt|;
else|else
name|css
operator|=
name|secondSelector
operator|+
name|firstSelector
expr_stmt|;
name|QCss
operator|::
name|Parser
name|parser
argument_list|(
name|css
argument_list|)
decl_stmt|;
name|QCss
operator|::
name|StyleSheet
name|sheet
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
operator|&
name|sheet
argument_list|)
argument_list|)
expr_stmt|;
name|DomStyleSelector
name|testSelector
argument_list|(
name|doc
argument_list|,
name|sheet
argument_list|)
decl_stmt|;
name|QDomElement
name|e
init|=
name|doc
operator|.
name|documentElement
argument_list|()
operator|.
name|firstChildElement
argument_list|()
decl_stmt|;
name|QCss
operator|::
name|StyleSelector
operator|::
name|NodePtr
name|n
decl_stmt|;
name|n
operator|.
name|ptr
operator|=
operator|&
name|e
expr_stmt|;
name|QVector
argument_list|<
name|QCss
operator|::
name|Declaration
argument_list|>
name|decls
init|=
name|testSelector
operator|.
name|declarationsForNode
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|decls
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|decls
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|d
operator|->
name|propertyId
argument_list|)
argument_list|,
name|int
argument_list|(
name|QCss
operator|::
name|Color
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|decls
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|decls
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|)
argument_list|,
name|int
argument_list|(
name|QCss
operator|::
name|Value
operator|::
name|Identifier
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|decls
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|variant
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"green"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|decls
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|d
operator|->
name|propertyId
argument_list|)
argument_list|,
name|int
argument_list|(
name|QCss
operator|::
name|Color
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|decls
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|d
operator|->
name|values
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|decls
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|)
argument_list|,
name|int
argument_list|(
name|QCss
operator|::
name|Value
operator|::
name|Identifier
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|decls
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|variant
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"red"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rulesForNode_data
name|void
name|tst_QCssParser
operator|::
name|rulesForNode_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"xml"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"css"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|quint64
argument_list|>
argument_list|(
literal|"pseudoClass"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"declCount"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"value0"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"value1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"universal1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p/>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"* { color: red }"
argument_list|)
operator|<<
operator|(
name|quint64
operator|)
name|QCss
operator|::
name|PseudoClass_Unspecified
operator|<<
literal|1
operator|<<
literal|"red"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"basic"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p/>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"p:enabled { color: red; bg:blue; }"
argument_list|)
operator|<<
operator|(
name|quint64
operator|)
name|QCss
operator|::
name|PseudoClass_Enabled
operator|<<
literal|2
operator|<<
literal|"red"
operator|<<
literal|"blue"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"single"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p/>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"p:enabled { color: red; } *:hover { color: white }"
argument_list|)
operator|<<
operator|(
name|quint64
operator|)
name|QCss
operator|::
name|PseudoClass_Hover
operator|<<
literal|1
operator|<<
literal|"white"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"multisel"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p/>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"p:enabled { color: red; } p:hover { color: gray } *:hover { color: white } "
argument_list|)
operator|<<
operator|(
name|quint64
operator|)
name|QCss
operator|::
name|PseudoClass_Hover
operator|<<
literal|2
operator|<<
literal|"white"
operator|<<
literal|"gray"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"multisel2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p/>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"p:enabled { color: red; } p:hover:focus { color: gray } *:hover { color: white } "
argument_list|)
operator|<<
name|quint64
argument_list|(
name|QCss
operator|::
name|PseudoClass_Hover
operator||
name|QCss
operator|::
name|PseudoClass_Focus
argument_list|)
operator|<<
literal|2
operator|<<
literal|"white"
operator|<<
literal|"gray"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"multisel3-diffspec"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p/>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"p:enabled { color: red; } p:hover:focus { color: gray } *:hover { color: white } "
argument_list|)
operator|<<
name|quint64
argument_list|(
name|QCss
operator|::
name|PseudoClass_Hover
argument_list|)
operator|<<
literal|1
operator|<<
literal|"white"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"!-1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p/>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"p:checked:!hover { color: red; } p:checked:hover { color: gray } p:checked { color: white }"
argument_list|)
operator|<<
name|quint64
argument_list|(
name|QCss
operator|::
name|PseudoClass_Hover
operator||
name|QCss
operator|::
name|PseudoClass_Checked
argument_list|)
operator|<<
literal|2
operator|<<
literal|"white"
operator|<<
literal|"gray"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"!-2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p/>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"p:checked:!hover:!pressed { color: red; } p:!checked:hover { color: gray } p:!focus { color: blue }"
argument_list|)
operator|<<
name|quint64
argument_list|(
name|QCss
operator|::
name|PseudoClass_Focus
argument_list|)
operator|<<
literal|0
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"!-3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p/>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"p:checked:!hover:!pressed { color: red; } p:!checked:hover { color: gray } p:!focus { color: blue; }"
argument_list|)
operator|<<
name|quint64
argument_list|(
name|QCss
operator|::
name|PseudoClass_Pressed
argument_list|)
operator|<<
literal|1
operator|<<
literal|"blue"
operator|<<
literal|""
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rulesForNode
name|void
name|tst_QCssParser
operator|::
name|rulesForNode
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|css
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|quint64
argument_list|,
name|pseudoClass
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|declCount
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|value0
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|QDomDocument
name|doc
decl_stmt|;
name|xml
operator|.
name|prepend
argument_list|(
literal|"<!DOCTYPE test><test>"
argument_list|)
expr_stmt|;
name|xml
operator|.
name|append
argument_list|(
literal|"</test>"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|.
name|setContent
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|QCss
operator|::
name|Parser
name|parser
argument_list|(
name|css
argument_list|)
decl_stmt|;
name|QCss
operator|::
name|StyleSheet
name|sheet
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
operator|&
name|sheet
argument_list|)
argument_list|)
expr_stmt|;
name|DomStyleSelector
name|testSelector
argument_list|(
name|doc
argument_list|,
name|sheet
argument_list|)
decl_stmt|;
name|QDomElement
name|e
init|=
name|doc
operator|.
name|documentElement
argument_list|()
operator|.
name|firstChildElement
argument_list|()
decl_stmt|;
name|QCss
operator|::
name|StyleSelector
operator|::
name|NodePtr
name|n
decl_stmt|;
name|n
operator|.
name|ptr
operator|=
operator|&
name|e
expr_stmt|;
name|QVector
argument_list|<
name|QCss
operator|::
name|StyleRule
argument_list|>
name|rules
init|=
name|testSelector
operator|.
name|styleRulesForNode
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|QCss
operator|::
name|Declaration
argument_list|>
name|decls
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rules
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|QCss
operator|::
name|Selector
modifier|&
name|selector
init|=
name|rules
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|selectors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|quint64
name|negated
init|=
literal|0
decl_stmt|;
name|quint64
name|cssClass
init|=
name|selector
operator|.
name|pseudoClass
argument_list|(
operator|&
name|negated
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|cssClass
operator|==
name|QCss
operator|::
name|PseudoClass_Unspecified
operator|)
operator|||
operator|(
operator|(
operator|(
operator|(
name|cssClass
operator|&
name|pseudoClass
operator|)
operator|==
name|cssClass
operator|)
operator|)
operator|&&
operator|(
operator|(
name|negated
operator|&
name|pseudoClass
operator|)
operator|==
literal|0
operator|)
operator|)
condition|)
name|decls
operator|+=
name|rules
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|declarations
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|decls
operator|.
name|count
argument_list|()
operator|==
name|declCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|declCount
operator|>
literal|0
condition|)
name|QCOMPARE
argument_list|(
name|decls
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|variant
operator|.
name|toString
argument_list|()
argument_list|,
name|value0
argument_list|)
expr_stmt|;
if|if
condition|(
name|declCount
operator|>
literal|1
condition|)
name|QCOMPARE
argument_list|(
name|decls
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|d
operator|->
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|variant
operator|.
name|toString
argument_list|()
argument_list|,
name|value1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|shorthandBackgroundProperty_data
name|void
name|tst_QCssParser
operator|::
name|shorthandBackgroundProperty_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"css"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QBrush
argument_list|>
argument_list|(
literal|"expectedBrush"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedImage"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedRepeatValue"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedAlignment"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"simple color"
argument_list|)
operator|<<
literal|"background: red"
operator|<<
name|QBrush
argument_list|(
name|QColor
argument_list|(
literal|"red"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|int
argument_list|(
name|QCss
operator|::
name|Repeat_XY
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignTop
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"plain color"
argument_list|)
operator|<<
literal|"background-color: red"
operator|<<
name|QBrush
argument_list|(
name|QColor
argument_list|(
literal|"red"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|int
argument_list|(
name|QCss
operator|::
name|Repeat_XY
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignTop
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"palette color"
argument_list|)
operator|<<
literal|"background-color: palette(mid)"
operator|<<
name|qApp
operator|->
name|palette
argument_list|()
operator|.
name|mid
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|int
argument_list|(
name|QCss
operator|::
name|Repeat_XY
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignTop
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"multiple"
argument_list|)
operator|<<
literal|"background: url(chess.png) blue repeat-y"
operator|<<
name|QBrush
argument_list|(
name|QColor
argument_list|(
literal|"blue"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"chess.png"
argument_list|)
operator|<<
name|int
argument_list|(
name|QCss
operator|::
name|Repeat_Y
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignTop
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"plain alignment"
argument_list|)
operator|<<
literal|"background-position: center"
operator|<<
name|QBrush
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|int
argument_list|(
name|QCss
operator|::
name|Repeat_XY
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|AlignCenter
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"plain alignment2"
argument_list|)
operator|<<
literal|"background-position: left top"
operator|<<
name|QBrush
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|int
argument_list|(
name|QCss
operator|::
name|Repeat_XY
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignTop
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"plain alignment3"
argument_list|)
operator|<<
literal|"background-position: left"
operator|<<
name|QBrush
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|int
argument_list|(
name|QCss
operator|::
name|Repeat_XY
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignVCenter
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"multi"
argument_list|)
operator|<<
literal|"background: left url(blah.png) repeat-x"
operator|<<
name|QBrush
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"blah.png"
argument_list|)
operator|<<
name|int
argument_list|(
name|QCss
operator|::
name|Repeat_X
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignVCenter
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"multi2"
argument_list|)
operator|<<
literal|"background: url(blah.png) repeat-x top"
operator|<<
name|QBrush
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"blah.png"
argument_list|)
operator|<<
name|int
argument_list|(
name|QCss
operator|::
name|Repeat_X
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|AlignTop
operator||
name|Qt
operator|::
name|AlignHCenter
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"multi3"
argument_list|)
operator|<<
literal|"background: url(blah.png) top right"
operator|<<
name|QBrush
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"blah.png"
argument_list|)
operator|<<
name|int
argument_list|(
name|QCss
operator|::
name|Repeat_XY
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|AlignTop
operator||
name|Qt
operator|::
name|AlignRight
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|shorthandBackgroundProperty
name|void
name|tst_QCssParser
operator|::
name|shorthandBackgroundProperty
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|css
argument_list|)
expr_stmt|;
name|QDomDocument
name|doc
decl_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|.
name|setContent
argument_list|(
name|QLatin1String
argument_list|(
literal|"<!DOCTYPE test><test><dummy/></test>"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|css
operator|.
name|prepend
argument_list|(
literal|"dummy {"
argument_list|)
expr_stmt|;
name|css
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|QCss
operator|::
name|Parser
name|parser
argument_list|(
name|css
argument_list|)
decl_stmt|;
name|QCss
operator|::
name|StyleSheet
name|sheet
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
operator|&
name|sheet
argument_list|)
argument_list|)
expr_stmt|;
name|DomStyleSelector
name|testSelector
argument_list|(
name|doc
argument_list|,
name|sheet
argument_list|)
decl_stmt|;
name|QDomElement
name|e
init|=
name|doc
operator|.
name|documentElement
argument_list|()
operator|.
name|firstChildElement
argument_list|()
decl_stmt|;
name|QCss
operator|::
name|StyleSelector
operator|::
name|NodePtr
name|n
decl_stmt|;
name|n
operator|.
name|ptr
operator|=
operator|&
name|e
expr_stmt|;
name|QVector
argument_list|<
name|QCss
operator|::
name|StyleRule
argument_list|>
name|rules
init|=
name|testSelector
operator|.
name|styleRulesForNode
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|QCss
operator|::
name|Declaration
argument_list|>
name|decls
init|=
name|rules
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|declarations
decl_stmt|;
name|QCss
operator|::
name|ValueExtractor
name|v
argument_list|(
name|decls
argument_list|)
decl_stmt|;
name|QBrush
name|brush
decl_stmt|;
name|QString
name|image
decl_stmt|;
name|QCss
operator|::
name|Repeat
name|repeat
init|=
name|QCss
operator|::
name|Repeat_XY
decl_stmt|;
name|Qt
operator|::
name|Alignment
name|alignment
init|=
name|Qt
operator|::
name|AlignTop
operator||
name|Qt
operator|::
name|AlignLeft
decl_stmt|;
name|QCss
operator|::
name|Origin
name|origin
init|=
name|QCss
operator|::
name|Origin_Padding
decl_stmt|;
name|QCss
operator|::
name|Attachment
name|attachment
decl_stmt|;
name|QCss
operator|::
name|Origin
name|ignoredOrigin
decl_stmt|;
name|v
operator|.
name|extractBackground
argument_list|(
operator|&
name|brush
argument_list|,
operator|&
name|image
argument_list|,
operator|&
name|repeat
argument_list|,
operator|&
name|alignment
argument_list|,
operator|&
name|origin
argument_list|,
operator|&
name|attachment
argument_list|,
operator|&
name|ignoredOrigin
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QBrush
argument_list|,
name|expectedBrush
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|expectedBrush
operator|.
name|color
argument_list|()
operator|==
name|brush
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|image
argument_list|,
literal|"expectedImage"
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|int
argument_list|(
name|repeat
argument_list|)
argument_list|,
literal|"expectedRepeatValue"
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|int
argument_list|(
name|alignment
argument_list|)
argument_list|,
literal|"expectedAlignment"
argument_list|)
expr_stmt|;
comment|//QTBUG-9674  : a second evaluation should give the same results
name|QVERIFY
argument_list|(
name|v
operator|.
name|extractBackground
argument_list|(
operator|&
name|brush
argument_list|,
operator|&
name|image
argument_list|,
operator|&
name|repeat
argument_list|,
operator|&
name|alignment
argument_list|,
operator|&
name|origin
argument_list|,
operator|&
name|attachment
argument_list|,
operator|&
name|ignoredOrigin
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|expectedBrush
operator|.
name|color
argument_list|()
operator|==
name|brush
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|image
argument_list|,
literal|"expectedImage"
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|int
argument_list|(
name|repeat
argument_list|)
argument_list|,
literal|"expectedRepeatValue"
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|int
argument_list|(
name|alignment
argument_list|)
argument_list|,
literal|"expectedAlignment"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pseudoElement_data
name|void
name|tst_QCssParser
operator|::
name|pseudoElement_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"css"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"pseudoElement"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"declCount"
argument_list|)
expr_stmt|;
comment|// QComboBox::dropDown { border-image: blah; }
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no pseudo-elements"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"dummy:hover { color: red }"
argument_list|)
operator|<<
literal|""
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no pseudo-elements"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"dummy:hover { color: red }"
argument_list|)
operator|<<
literal|"pe"
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1 pseudo-element (1)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"dummy::pe:hover { color: red }"
argument_list|)
operator|<<
literal|"pe"
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1 pseudo-element (2)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"dummy::pe:hover { color: red }"
argument_list|)
operator|<<
literal|"x"
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1 pseudo-element (2)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"whatever::pe:hover { color: red }"
argument_list|)
operator|<<
literal|"pe"
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1 pseudo-element (3)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"dummy { color: white; } dummy::pe:hover { color: red }"
argument_list|)
operator|<<
literal|"x"
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1 pseudo-element (4)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"dummy { color: white; } dummy::pe:hover { color: red } dummy { x:y }"
argument_list|)
operator|<<
literal|""
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1 pseudo-element (5)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"dummy { color: white; } dummy::pe:hover { color: red }"
argument_list|)
operator|<<
literal|"pe"
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1 pseudo-element (6)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"dummy { color: white; } dummy::pe:hover { color: red } dummy::pe:checked { x: y} "
argument_list|)
operator|<<
literal|"pe"
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2 pseudo-elements (1)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"dummy { color: white; } dummy::pe1:hover { color: red } dummy::pe2:checked { x: y} "
argument_list|)
operator|<<
literal|""
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2 pseudo-elements (1)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"dummy { color: white; } dummy::pe1:hover { color: red } dummy::pe2:checked { x: y} "
argument_list|)
operator|<<
literal|"pe1"
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2 pseudo-elements (2)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"dummy { color: white; } dummy::pe1:hover { color: red } dummy::pe2:checked { x: y} "
argument_list|)
operator|<<
literal|"pe2"
operator|<<
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pseudoElement
name|void
name|tst_QCssParser
operator|::
name|pseudoElement
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|css
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|pseudoElement
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|declCount
argument_list|)
expr_stmt|;
name|QDomDocument
name|doc
decl_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|.
name|setContent
argument_list|(
name|QLatin1String
argument_list|(
literal|"<!DOCTYPE test><test><dummy/></test>"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCss
operator|::
name|Parser
name|parser
argument_list|(
name|css
argument_list|)
decl_stmt|;
name|QCss
operator|::
name|StyleSheet
name|sheet
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
operator|&
name|sheet
argument_list|)
argument_list|)
expr_stmt|;
name|DomStyleSelector
name|testSelector
argument_list|(
name|doc
argument_list|,
name|sheet
argument_list|)
decl_stmt|;
name|QDomElement
name|e
init|=
name|doc
operator|.
name|documentElement
argument_list|()
operator|.
name|firstChildElement
argument_list|()
decl_stmt|;
name|QCss
operator|::
name|StyleSelector
operator|::
name|NodePtr
name|n
decl_stmt|;
name|n
operator|.
name|ptr
operator|=
operator|&
name|e
expr_stmt|;
name|QVector
argument_list|<
name|QCss
operator|::
name|StyleRule
argument_list|>
name|rules
init|=
name|testSelector
operator|.
name|styleRulesForNode
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|QCss
operator|::
name|Declaration
argument_list|>
name|decls
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rules
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|QCss
operator|::
name|Selector
modifier|&
name|selector
init|=
name|rules
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|selectors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|pseudoElement
operator|.
name|compare
argument_list|(
name|selector
operator|.
name|pseudoElement
argument_list|()
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|!=
literal|0
condition|)
continue|continue;
name|decls
operator|+=
name|rules
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|declarations
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|decls
operator|.
name|count
argument_list|()
operator|==
name|declCount
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|gradient_data
name|void
name|tst_QCssParser
operator|::
name|gradient_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"css"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QPointF
argument_list|>
argument_list|(
literal|"start"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QPointF
argument_list|>
argument_list|(
literal|"finalStop"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"spread"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qreal
argument_list|>
argument_list|(
literal|"stop0"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QColor
argument_list|>
argument_list|(
literal|"color0"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qreal
argument_list|>
argument_list|(
literal|"stop1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QColor
argument_list|>
argument_list|(
literal|"color1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"color-string"
argument_list|)
operator|<<
literal|"selection-background-color: qlineargradient(x1:1, y1:2, x2:3, y2:4, "
literal|"stop:0.2 red, stop:0.5 green)"
operator|<<
literal|"linear"
operator|<<
name|QPointF
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
operator|<<
name|QPointF
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
operator|<<
literal|0
operator|<<
name|qreal
argument_list|(
literal|0.2
argument_list|)
operator|<<
name|QColor
argument_list|(
literal|"red"
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|<<
name|QColor
argument_list|(
literal|"green"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"color-#"
argument_list|)
operator|<<
literal|"selection-background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1, "
literal|"spread: reflect, stop:0.2 #123, stop:0.5 #456)"
operator|<<
literal|"linear"
operator|<<
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|<<
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|<<
literal|1
operator|<<
name|qreal
argument_list|(
literal|0.2
argument_list|)
operator|<<
name|QColor
argument_list|(
literal|"#123"
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|<<
name|QColor
argument_list|(
literal|"#456"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"color-rgb"
argument_list|)
operator|<<
literal|"selection-background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1, "
literal|"spread: reflect, stop:0.2 rgb(1, 2, 3), stop:0.5 rgba(1, 2, 3, 4))"
operator|<<
literal|"linear"
operator|<<
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|<<
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|<<
literal|1
operator|<<
name|qreal
argument_list|(
literal|0.2
argument_list|)
operator|<<
name|QColor
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|<<
name|QColor
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"color-spaces"
argument_list|)
operator|<<
literal|"selection-background-color: qlineargradient(x1: 0, y1 :0,x2:0, y2 : 1 , "
literal|"spread: reflect, stop:0.2 rgb(1, 2, 3), stop: 0.5   rgba(1, 2, 3, 4))"
operator|<<
literal|"linear"
operator|<<
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|<<
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|<<
literal|1
operator|<<
name|qreal
argument_list|(
literal|0.2
argument_list|)
operator|<<
name|QColor
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|<<
name|QColor
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"conical gradient"
argument_list|)
operator|<<
literal|"selection-background-color: qconicalgradient(cx: 4, cy : 2, angle: 23, "
literal|"spread: repeat, stop:0.2 rgb(1, 2, 3), stop:0.5 rgba(1, 2, 3, 4))"
operator|<<
literal|"conical"
operator|<<
name|QPointF
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|)
operator|<<
name|QPointF
argument_list|()
operator|<<
literal|2
operator|<<
name|qreal
argument_list|(
literal|0.2
argument_list|)
operator|<<
name|QColor
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|0.5
argument_list|)
operator|<<
name|QColor
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|/* wont pass: stop values are expected to be sorted      QTest::newRow("unsorted-stop")<<      "selection-background: lineargradient(x1:0, y1:0, x2:0, y2:1, "          "stop:0.5 green, stop:0.2 red)"<< QPointF(0, 0)<< QPointF(0, 1)          0<< 0.2<< QColor("red")<< 0.5<< QColor("green");     */
block|}
end_function
begin_function
DECL|function|gradient
name|void
name|tst_QCssParser
operator|::
name|gradient
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|css
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QPointF
argument_list|,
name|finalStop
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QPointF
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|spread
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qreal
argument_list|,
name|stop0
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QColor
argument_list|,
name|color0
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qreal
argument_list|,
name|stop1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QColor
argument_list|,
name|color1
argument_list|)
expr_stmt|;
name|QDomDocument
name|doc
decl_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|.
name|setContent
argument_list|(
name|QLatin1String
argument_list|(
literal|"<!DOCTYPE test><test><dummy/></test>"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|css
operator|.
name|prepend
argument_list|(
literal|"dummy {"
argument_list|)
expr_stmt|;
name|css
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|QCss
operator|::
name|Parser
name|parser
argument_list|(
name|css
argument_list|)
decl_stmt|;
name|QCss
operator|::
name|StyleSheet
name|sheet
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
operator|&
name|sheet
argument_list|)
argument_list|)
expr_stmt|;
name|DomStyleSelector
name|testSelector
argument_list|(
name|doc
argument_list|,
name|sheet
argument_list|)
decl_stmt|;
name|QDomElement
name|e
init|=
name|doc
operator|.
name|documentElement
argument_list|()
operator|.
name|firstChildElement
argument_list|()
decl_stmt|;
name|QCss
operator|::
name|StyleSelector
operator|::
name|NodePtr
name|n
decl_stmt|;
name|n
operator|.
name|ptr
operator|=
operator|&
name|e
expr_stmt|;
name|QVector
argument_list|<
name|QCss
operator|::
name|StyleRule
argument_list|>
name|rules
init|=
name|testSelector
operator|.
name|styleRulesForNode
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|QCss
operator|::
name|Declaration
argument_list|>
name|decls
init|=
name|rules
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|declarations
decl_stmt|;
name|QCss
operator|::
name|ValueExtractor
name|ve
argument_list|(
name|decls
argument_list|)
decl_stmt|;
name|QBrush
name|fg
decl_stmt|,
name|sfg
decl_stmt|;
name|QBrush
name|sbg
decl_stmt|,
name|abg
decl_stmt|;
name|QVERIFY
argument_list|(
name|ve
operator|.
name|extractPalette
argument_list|(
operator|&
name|fg
argument_list|,
operator|&
name|sfg
argument_list|,
operator|&
name|sbg
argument_list|,
operator|&
name|abg
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
literal|"linear"
condition|)
block|{
name|QVERIFY
argument_list|(
name|sbg
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|LinearGradientPattern
argument_list|)
expr_stmt|;
specifier|const
name|QLinearGradient
modifier|*
name|lg
init|=
cast|static_cast
argument_list|<
specifier|const
name|QLinearGradient
operator|*
argument_list|>
argument_list|(
name|sbg
operator|.
name|gradient
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|lg
operator|->
name|start
argument_list|()
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lg
operator|->
name|finalStop
argument_list|()
argument_list|,
name|finalStop
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|"conical"
condition|)
block|{
name|QVERIFY
argument_list|(
name|sbg
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|ConicalGradientPattern
argument_list|)
expr_stmt|;
specifier|const
name|QConicalGradient
modifier|*
name|cg
init|=
cast|static_cast
argument_list|<
specifier|const
name|QConicalGradient
operator|*
argument_list|>
argument_list|(
name|sbg
operator|.
name|gradient
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|cg
operator|->
name|center
argument_list|()
argument_list|,
name|start
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QGradient
modifier|*
name|g
init|=
name|sbg
operator|.
name|gradient
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|g
operator|->
name|spread
argument_list|()
argument_list|,
name|QGradient
operator|::
name|Spread
argument_list|(
name|spread
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|g
operator|->
name|stops
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|first
operator|==
name|stop0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|g
operator|->
name|stops
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|second
operator|==
name|color0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|g
operator|->
name|stops
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|first
operator|==
name|stop1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|g
operator|->
name|stops
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|second
operator|==
name|color1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|extractFontFamily_data
name|void
name|tst_QCssParser
operator|::
name|extractFontFamily_data
parameter_list|()
block|{
if|if
condition|(
name|QFontInfo
argument_list|(
name|QFont
argument_list|(
literal|"Times New Roman"
argument_list|)
argument_list|)
operator|.
name|family
argument_list|()
operator|!=
literal|"Times New Roman"
condition|)
name|QSKIP
argument_list|(
literal|"'Times New Roman' font not found"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"css"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedFamily"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"quoted-family-name"
argument_list|)
operator|<<
literal|"font-family: 'Times New Roman'"
operator|<<
name|QString
argument_list|(
literal|"Times New Roman"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unquoted-family-name"
argument_list|)
operator|<<
literal|"font-family: Times New Roman"
operator|<<
name|QString
argument_list|(
literal|"Times New Roman"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unquoted-family-name2"
argument_list|)
operator|<<
literal|"font-family: Times        New     Roman"
operator|<<
name|QString
argument_list|(
literal|"Times New Roman"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"multiple"
argument_list|)
operator|<<
literal|"font-family: Times New Roman  , foobar, 'baz'"
operator|<<
name|QString
argument_list|(
literal|"Times New Roman"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"multiple2"
argument_list|)
operator|<<
literal|"font-family: invalid,  Times New   Roman "
operator|<<
name|QString
argument_list|(
literal|"Times New Roman"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid"
argument_list|)
operator|<<
literal|"font-family: invalid"
operator|<<
name|QFontInfo
argument_list|(
name|QFont
argument_list|(
literal|"invalid font"
argument_list|)
argument_list|)
operator|.
name|family
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"shorthand"
argument_list|)
operator|<<
literal|"font: 12pt Times New Roman"
operator|<<
name|QString
argument_list|(
literal|"Times New Roman"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"shorthand multiple quote"
argument_list|)
operator|<<
literal|"font: 12pt invalid, \"Times New Roman\" "
operator|<<
name|QString
argument_list|(
literal|"Times New Roman"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"shorthand multiple"
argument_list|)
operator|<<
literal|"font: 12pt invalid, Times New Roman "
operator|<<
name|QString
argument_list|(
literal|"Times New Roman"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid spaces"
argument_list|)
operator|<<
literal|"font-family: invalid spaces, Times New Roman "
operator|<<
name|QString
argument_list|(
literal|"Times New Roman"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid spaces quotes"
argument_list|)
operator|<<
literal|"font-family: 'invalid spaces', 'Times New Roman' "
operator|<<
name|QString
argument_list|(
literal|"Times New Roman"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|extractFontFamily
name|void
name|tst_QCssParser
operator|::
name|extractFontFamily
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|css
argument_list|)
expr_stmt|;
name|css
operator|.
name|prepend
argument_list|(
literal|"dummy {"
argument_list|)
expr_stmt|;
name|css
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|QCss
operator|::
name|Parser
name|parser
argument_list|(
name|css
argument_list|)
decl_stmt|;
name|QCss
operator|::
name|StyleSheet
name|sheet
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
operator|&
name|sheet
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sheet
operator|.
name|styleRules
operator|.
name|count
argument_list|()
operator|+
name|sheet
operator|.
name|nameIndex
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCss
operator|::
name|StyleRule
name|rule
init|=
operator|(
operator|!
name|sheet
operator|.
name|styleRules
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|sheet
operator|.
name|styleRules
operator|.
name|at
argument_list|(
literal|0
argument_list|)
else|:
operator|*
name|sheet
operator|.
name|nameIndex
operator|.
name|begin
argument_list|()
decl_stmt|;
specifier|const
name|QVector
argument_list|<
name|QCss
operator|::
name|Declaration
argument_list|>
name|decls
init|=
name|rule
operator|.
name|declarations
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|decls
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCss
operator|::
name|ValueExtractor
name|extractor
argument_list|(
name|decls
argument_list|)
decl_stmt|;
name|int
name|adjustment
init|=
literal|0
decl_stmt|;
name|QFont
name|fnt
decl_stmt|;
name|extractor
operator|.
name|extractFont
argument_list|(
operator|&
name|fnt
argument_list|,
operator|&
name|adjustment
argument_list|)
expr_stmt|;
name|QFontInfo
name|info
argument_list|(
name|fnt
argument_list|)
decl_stmt|;
comment|// Note, we have to QSKIP rather than QEXPECT_FAIL because font lookup is broken
comment|// such that it may work or not work depending on the order in which fonts were
comment|// loaded from disk: ### fixme: Check platforms
name|QSKIP
argument_list|(
literal|"QTBUG-20986 may fail on qpa"
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|info
operator|.
name|family
argument_list|()
argument_list|,
literal|"expectedFamily"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|extractBorder_data
name|void
name|tst_QCssParser
operator|::
name|extractBorder_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"css"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedTopWidth"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedTopStyle"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QColor
argument_list|>
argument_list|(
literal|"expectedTopColor"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"all values"
argument_list|)
operator|<<
literal|"border: 2px solid green"
operator|<<
literal|2
operator|<<
operator|(
name|int
operator|)
name|QCss
operator|::
name|BorderStyle_Solid
operator|<<
name|QColor
argument_list|(
literal|"green"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"palette"
argument_list|)
operator|<<
literal|"border: 2px solid palette(highlight)"
operator|<<
literal|2
operator|<<
operator|(
name|int
operator|)
name|QCss
operator|::
name|BorderStyle_Solid
operator|<<
name|qApp
operator|->
name|palette
argument_list|()
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"just width"
argument_list|)
operator|<<
literal|"border: 2px"
operator|<<
literal|2
operator|<<
operator|(
name|int
operator|)
name|QCss
operator|::
name|BorderStyle_None
operator|<<
name|QColor
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"just style"
argument_list|)
operator|<<
literal|"border: solid"
operator|<<
literal|0
operator|<<
operator|(
name|int
operator|)
name|QCss
operator|::
name|BorderStyle_Solid
operator|<<
name|QColor
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"just color"
argument_list|)
operator|<<
literal|"border: green"
operator|<<
literal|0
operator|<<
operator|(
name|int
operator|)
name|QCss
operator|::
name|BorderStyle_None
operator|<<
name|QColor
argument_list|(
literal|"green"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"width+style"
argument_list|)
operator|<<
literal|"border: 2px solid"
operator|<<
literal|2
operator|<<
operator|(
name|int
operator|)
name|QCss
operator|::
name|BorderStyle_Solid
operator|<<
name|QColor
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"style+color"
argument_list|)
operator|<<
literal|"border: solid green"
operator|<<
literal|0
operator|<<
operator|(
name|int
operator|)
name|QCss
operator|::
name|BorderStyle_Solid
operator|<<
name|QColor
argument_list|(
literal|"green"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"width+color"
argument_list|)
operator|<<
literal|"border: 3px green"
operator|<<
literal|3
operator|<<
operator|(
name|int
operator|)
name|QCss
operator|::
name|BorderStyle_None
operator|<<
name|QColor
argument_list|(
literal|"green"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"groove style"
argument_list|)
operator|<<
literal|"border: groove"
operator|<<
literal|0
operator|<<
operator|(
name|int
operator|)
name|QCss
operator|::
name|BorderStyle_Groove
operator|<<
name|QColor
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ridge style"
argument_list|)
operator|<<
literal|"border: ridge"
operator|<<
literal|0
operator|<<
operator|(
name|int
operator|)
name|QCss
operator|::
name|BorderStyle_Ridge
operator|<<
name|QColor
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"double style"
argument_list|)
operator|<<
literal|"border: double"
operator|<<
literal|0
operator|<<
operator|(
name|int
operator|)
name|QCss
operator|::
name|BorderStyle_Double
operator|<<
name|QColor
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"inset style"
argument_list|)
operator|<<
literal|"border: inset"
operator|<<
literal|0
operator|<<
operator|(
name|int
operator|)
name|QCss
operator|::
name|BorderStyle_Inset
operator|<<
name|QColor
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"outset style"
argument_list|)
operator|<<
literal|"border: outset"
operator|<<
literal|0
operator|<<
operator|(
name|int
operator|)
name|QCss
operator|::
name|BorderStyle_Outset
operator|<<
name|QColor
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dashed style"
argument_list|)
operator|<<
literal|"border: dashed"
operator|<<
literal|0
operator|<<
operator|(
name|int
operator|)
name|QCss
operator|::
name|BorderStyle_Dashed
operator|<<
name|QColor
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dotted style"
argument_list|)
operator|<<
literal|"border: dotted"
operator|<<
literal|0
operator|<<
operator|(
name|int
operator|)
name|QCss
operator|::
name|BorderStyle_Dotted
operator|<<
name|QColor
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dot-dash style"
argument_list|)
operator|<<
literal|"border: dot-dash"
operator|<<
literal|0
operator|<<
operator|(
name|int
operator|)
name|QCss
operator|::
name|BorderStyle_DotDash
operator|<<
name|QColor
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dot-dot-dash style"
argument_list|)
operator|<<
literal|"border: dot-dot-dash"
operator|<<
literal|0
operator|<<
operator|(
name|int
operator|)
name|QCss
operator|::
name|BorderStyle_DotDotDash
operator|<<
name|QColor
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"top-width+color"
argument_list|)
operator|<<
literal|"border-top: 3px green"
operator|<<
literal|3
operator|<<
operator|(
name|int
operator|)
name|QCss
operator|::
name|BorderStyle_None
operator|<<
name|QColor
argument_list|(
literal|"green"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|extractBorder
name|void
name|tst_QCssParser
operator|::
name|extractBorder
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|css
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedTopWidth
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedTopStyle
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QColor
argument_list|,
name|expectedTopColor
argument_list|)
expr_stmt|;
name|css
operator|.
name|prepend
argument_list|(
literal|"dummy {"
argument_list|)
expr_stmt|;
name|css
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|QCss
operator|::
name|Parser
name|parser
argument_list|(
name|css
argument_list|)
decl_stmt|;
name|QCss
operator|::
name|StyleSheet
name|sheet
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
operator|&
name|sheet
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sheet
operator|.
name|styleRules
operator|.
name|count
argument_list|()
operator|+
name|sheet
operator|.
name|nameIndex
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCss
operator|::
name|StyleRule
name|rule
init|=
operator|(
operator|!
name|sheet
operator|.
name|styleRules
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|sheet
operator|.
name|styleRules
operator|.
name|at
argument_list|(
literal|0
argument_list|)
else|:
operator|*
name|sheet
operator|.
name|nameIndex
operator|.
name|begin
argument_list|()
decl_stmt|;
specifier|const
name|QVector
argument_list|<
name|QCss
operator|::
name|Declaration
argument_list|>
name|decls
init|=
name|rule
operator|.
name|declarations
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|decls
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCss
operator|::
name|ValueExtractor
name|extractor
argument_list|(
name|decls
argument_list|)
decl_stmt|;
name|int
name|widths
index|[
literal|4
index|]
decl_stmt|;
name|QBrush
name|colors
index|[
literal|4
index|]
decl_stmt|;
name|QCss
operator|::
name|BorderStyle
name|styles
index|[
literal|4
index|]
decl_stmt|;
name|QSize
name|radii
index|[
literal|4
index|]
decl_stmt|;
name|extractor
operator|.
name|extractBorder
argument_list|(
name|widths
argument_list|,
name|colors
argument_list|,
name|styles
argument_list|,
name|radii
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|widths
index|[
name|QCss
operator|::
name|TopEdge
index|]
operator|==
name|expectedTopWidth
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|styles
index|[
name|QCss
operator|::
name|TopEdge
index|]
operator|==
name|expectedTopStyle
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|colors
index|[
name|QCss
operator|::
name|TopEdge
index|]
operator|==
name|expectedTopColor
argument_list|)
expr_stmt|;
comment|//QTBUG-9674  : a second evaluation should give the same results
name|QVERIFY
argument_list|(
name|extractor
operator|.
name|extractBorder
argument_list|(
name|widths
argument_list|,
name|colors
argument_list|,
name|styles
argument_list|,
name|radii
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|widths
index|[
name|QCss
operator|::
name|TopEdge
index|]
operator|==
name|expectedTopWidth
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|styles
index|[
name|QCss
operator|::
name|TopEdge
index|]
operator|==
name|expectedTopStyle
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|colors
index|[
name|QCss
operator|::
name|TopEdge
index|]
operator|==
name|expectedTopColor
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|noTextDecoration
name|void
name|tst_QCssParser
operator|::
name|noTextDecoration
parameter_list|()
block|{
name|QCss
operator|::
name|Parser
name|parser
argument_list|(
literal|"dummy { text-decoration: none; }"
argument_list|)
decl_stmt|;
name|QCss
operator|::
name|StyleSheet
name|sheet
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
operator|&
name|sheet
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sheet
operator|.
name|styleRules
operator|.
name|count
argument_list|()
operator|+
name|sheet
operator|.
name|nameIndex
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCss
operator|::
name|StyleRule
name|rule
init|=
operator|(
operator|!
name|sheet
operator|.
name|styleRules
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|sheet
operator|.
name|styleRules
operator|.
name|at
argument_list|(
literal|0
argument_list|)
else|:
operator|*
name|sheet
operator|.
name|nameIndex
operator|.
name|begin
argument_list|()
decl_stmt|;
specifier|const
name|QVector
argument_list|<
name|QCss
operator|::
name|Declaration
argument_list|>
name|decls
init|=
name|rule
operator|.
name|declarations
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|decls
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCss
operator|::
name|ValueExtractor
name|extractor
argument_list|(
name|decls
argument_list|)
decl_stmt|;
name|int
name|adjustment
init|=
literal|0
decl_stmt|;
name|QFont
name|f
decl_stmt|;
name|f
operator|.
name|setUnderline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|setOverline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|setStrikeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|extractor
operator|.
name|extractFont
argument_list|(
operator|&
name|f
argument_list|,
operator|&
name|adjustment
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|f
operator|.
name|underline
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|f
operator|.
name|overline
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|f
operator|.
name|strikeOut
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|quotedAndUnquotedIdentifiers
name|void
name|tst_QCssParser
operator|::
name|quotedAndUnquotedIdentifiers
parameter_list|()
block|{
name|QCss
operator|::
name|Parser
name|parser
argument_list|(
literal|"foo { font-style: \"italic\"; font-weight: bold }"
argument_list|)
decl_stmt|;
name|QCss
operator|::
name|StyleSheet
name|sheet
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
operator|&
name|sheet
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sheet
operator|.
name|styleRules
operator|.
name|count
argument_list|()
operator|+
name|sheet
operator|.
name|nameIndex
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCss
operator|::
name|StyleRule
name|rule
init|=
operator|(
operator|!
name|sheet
operator|.
name|styleRules
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|sheet
operator|.
name|styleRules
operator|.
name|at
argument_list|(
literal|0
argument_list|)
else|:
operator|*
name|sheet
operator|.
name|nameIndex
operator|.
name|begin
argument_list|()
decl_stmt|;
specifier|const
name|QVector
argument_list|<
name|QCss
operator|::
name|Declaration
argument_list|>
name|decls
init|=
name|rule
operator|.
name|declarations
decl_stmt|;
name|QCOMPARE
argument_list|(
name|decls
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|decls
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|d
operator|->
name|values
operator|.
name|first
argument_list|()
operator|.
name|type
argument_list|,
name|QCss
operator|::
name|Value
operator|::
name|String
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|decls
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|d
operator|->
name|property
argument_list|,
name|QLatin1String
argument_list|(
literal|"font-style"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|decls
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|d
operator|->
name|values
operator|.
name|first
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"italic"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|decls
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|d
operator|->
name|values
operator|.
name|first
argument_list|()
operator|.
name|type
argument_list|,
name|QCss
operator|::
name|Value
operator|::
name|KnownIdentifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|decls
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|d
operator|->
name|property
argument_list|,
name|QLatin1String
argument_list|(
literal|"font-weight"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|decls
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|d
operator|->
name|values
operator|.
name|first
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"bold"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QCssParser
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qcssparser.moc"
end_include
end_unit
