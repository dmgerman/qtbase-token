begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QTextDocument>
end_include
begin_include
include|#
directive|include
file|<QTextCursor>
end_include
begin_include
include|#
directive|include
file|<QTextBlock>
end_include
begin_include
include|#
directive|include
file|<QTextList>
end_include
begin_include
include|#
directive|include
file|<QTextTable>
end_include
begin_include
include|#
directive|include
file|<QBuffer>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<private/qtextodfwriter_p.h>
end_include
begin_class
DECL|class|tst_QTextOdfWriter
class|class
name|tst_QTextOdfWriter
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|testWriteParagraph_data
parameter_list|()
function_decl|;
name|void
name|testWriteParagraph
parameter_list|()
function_decl|;
name|void
name|testWriteStyle1_data
parameter_list|()
function_decl|;
name|void
name|testWriteStyle1
parameter_list|()
function_decl|;
name|void
name|testWriteStyle2
parameter_list|()
function_decl|;
name|void
name|testWriteList
parameter_list|()
function_decl|;
name|void
name|testWriteList2
parameter_list|()
function_decl|;
name|void
name|createArchive
parameter_list|()
function_decl|;
name|void
name|testWriteAll
parameter_list|()
function_decl|;
name|void
name|testWriteSection
parameter_list|()
function_decl|;
name|void
name|testWriteTable
parameter_list|()
function_decl|;
private|private:
comment|/// closes the document and returns the part of the XML stream that the test wrote
name|QString
name|getContentFromXml
parameter_list|()
function_decl|;
private|private:
DECL|member|document
name|QTextDocument
modifier|*
name|document
decl_stmt|;
DECL|member|xmlWriter
name|QXmlStreamWriter
modifier|*
name|xmlWriter
decl_stmt|;
DECL|member|odfWriter
name|QTextOdfWriter
modifier|*
name|odfWriter
decl_stmt|;
DECL|member|buffer
name|QBuffer
modifier|*
name|buffer
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|init
name|void
name|tst_QTextOdfWriter
operator|::
name|init
parameter_list|()
block|{
name|document
operator|=
operator|new
name|QTextDocument
argument_list|()
expr_stmt|;
name|odfWriter
operator|=
operator|new
name|QTextOdfWriter
argument_list|(
operator|*
name|document
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|buffer
operator|=
operator|new
name|QBuffer
argument_list|()
expr_stmt|;
name|buffer
operator|->
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|xmlWriter
operator|=
operator|new
name|QXmlStreamWriter
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|xmlWriter
operator|->
name|writeNamespace
argument_list|(
name|odfWriter
operator|->
name|officeNS
argument_list|,
literal|"office"
argument_list|)
expr_stmt|;
name|xmlWriter
operator|->
name|writeNamespace
argument_list|(
name|odfWriter
operator|->
name|textNS
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|xmlWriter
operator|->
name|writeNamespace
argument_list|(
name|odfWriter
operator|->
name|styleNS
argument_list|,
literal|"style"
argument_list|)
expr_stmt|;
name|xmlWriter
operator|->
name|writeNamespace
argument_list|(
name|odfWriter
operator|->
name|foNS
argument_list|,
literal|"fo"
argument_list|)
expr_stmt|;
name|xmlWriter
operator|->
name|writeNamespace
argument_list|(
name|odfWriter
operator|->
name|tableNS
argument_list|,
literal|"table"
argument_list|)
expr_stmt|;
name|xmlWriter
operator|->
name|writeStartDocument
argument_list|()
expr_stmt|;
name|xmlWriter
operator|->
name|writeStartElement
argument_list|(
literal|"dummy"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QTextOdfWriter
operator|::
name|cleanup
parameter_list|()
block|{
operator|delete
name|document
expr_stmt|;
operator|delete
name|odfWriter
expr_stmt|;
operator|delete
name|xmlWriter
expr_stmt|;
operator|delete
name|buffer
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getContentFromXml
name|QString
name|tst_QTextOdfWriter
operator|::
name|getContentFromXml
parameter_list|()
block|{
name|xmlWriter
operator|->
name|writeEndDocument
argument_list|()
expr_stmt|;
name|buffer
operator|->
name|close
argument_list|()
expr_stmt|;
name|QString
name|stringContent
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|buffer
operator|->
name|data
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|ret
decl_stmt|;
name|int
name|index
init|=
name|stringContent
operator|.
name|indexOf
argument_list|(
literal|"<dummy"
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|index
operator|=
name|stringContent
operator|.
name|indexOf
argument_list|(
literal|'>'
argument_list|,
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|>
literal|0
condition|)
name|ret
operator|=
name|stringContent
operator|.
name|mid
argument_list|(
name|index
operator|+
literal|1
argument_list|,
name|stringContent
operator|.
name|length
argument_list|()
operator|-
name|index
operator|-
literal|10
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|testWriteParagraph_data
name|void
name|tst_QTextOdfWriter
operator|::
name|testWriteParagraph_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"xml"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
literal|""
operator|<<
literal|"<text:p text:style-name=\"p1\"/>"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"spaces"
argument_list|)
operator|<<
literal|"foobar   word"
operator|<<
literal|"<text:p text:style-name=\"p1\"><text:span text:style-name=\"c0\">foobar<text:s text:c=\"2\"/>word</text:span></text:p>"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"starting spaces"
argument_list|)
operator|<<
literal|"  starting spaces"
operator|<<
literal|"<text:p text:style-name=\"p1\"><text:span text:style-name=\"c0\"><text:s text:c=\"2\"/>starting spaces</text:span></text:p>"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"trailing spaces"
argument_list|)
operator|<<
literal|"trailing spaces  "
operator|<<
literal|"<text:p text:style-name=\"p1\"><text:span text:style-name=\"c0\">trailing spaces<text:s/></text:span></text:p>"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"tab"
argument_list|)
operator|<<
literal|"word\ttab x"
operator|<<
literal|"<text:p text:style-name=\"p1\"><text:span text:style-name=\"c0\">word<text:tab/>tab x</text:span></text:p>"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"tab2"
argument_list|)
operator|<<
literal|"word\t\ttab\tx"
operator|<<
literal|"<text:p text:style-name=\"p1\"><text:span text:style-name=\"c0\">word<text:tab/><text:tab/>tab<text:tab/>x</text:span></text:p>"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"misc"
argument_list|)
operator|<<
literal|"foobar   word\ttab x"
operator|<<
literal|"<text:p text:style-name=\"p1\"><text:span text:style-name=\"c0\">foobar<text:s text:c=\"2\"/>word<text:tab/>tab x</text:span></text:p>"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"misc2"
argument_list|)
operator|<<
literal|"\t     \tFoo"
operator|<<
literal|"<text:p text:style-name=\"p1\"><text:span text:style-name=\"c0\"><text:tab/><text:s text:c=\"4\"/><text:tab/>Foo</text:span></text:p>"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"linefeed"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"line1%1line2"
argument_list|)
operator|.
name|arg
argument_list|(
name|QChar
argument_list|(
literal|0x2028
argument_list|)
argument_list|)
operator|<<
literal|"<text:p text:style-name=\"p1\"><text:span text:style-name=\"c0\">line1<text:line-break/>line2</text:span></text:p>"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"spaces"
argument_list|)
operator|<<
literal|"The quick brown fox jumped over the lazy dog"
operator|<<
literal|"<text:p text:style-name=\"p1\"><text:span text:style-name=\"c0\">The quick brown fox jumped over the lazy dog</text:span></text:p>"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testWriteParagraph
name|void
name|tst_QTextOdfWriter
operator|::
name|testWriteParagraph
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursor
argument_list|(
name|document
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|odfWriter
operator|->
name|writeBlock
argument_list|(
operator|*
name|xmlWriter
argument_list|,
name|document
operator|->
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|getContentFromXml
argument_list|()
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testWriteStyle1_data
name|void
name|tst_QTextOdfWriter
operator|::
name|testWriteStyle1_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"htmlInput"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"cursorPosition"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"xml"
argument_list|)
expr_stmt|;
name|QString
name|text1
init|=
literal|"Normal<b>bold</b><i>italic</i><b><i>Bold/Italic</i></b>"
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"normal"
argument_list|)
operator|<<
name|text1
operator|<<
literal|2
operator|<<
literal|"<style:style style:name=\"c4\" style:family=\"text\"><style:text-properties fo:font-family=\"Sans\"/></style:style>"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bold"
argument_list|)
operator|<<
name|text1
operator|<<
literal|10
operator|<<
literal|"<style:style style:name=\"c4\" style:family=\"text\"><style:text-properties fo:font-weight=\"bold\" fo:font-family=\"Sans\"/></style:style>"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"italic"
argument_list|)
operator|<<
name|text1
operator|<<
literal|14
operator|<<
literal|"<style:style style:name=\"c4\" style:family=\"text\"><style:text-properties fo:font-style=\"italic\" fo:font-family=\"Sans\"/></style:style>"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bold+italic"
argument_list|)
operator|<<
name|text1
operator|<<
literal|25
operator|<<
literal|"<style:style style:name=\"c4\" style:family=\"text\"><style:text-properties fo:font-style=\"italic\" fo:font-weight=\"bold\" fo:font-family=\"Sans\"/></style:style>"
expr_stmt|;
name|QString
name|colorText
init|=
literal|"<span style=\"color: #00FF00; background-color: #FF0000;\"> Color Text</span>"
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"green/red"
argument_list|)
operator|<<
name|colorText
operator|<<
literal|3
operator|<<
literal|"<style:style style:name=\"c4\" style:family=\"text\"><style:text-properties fo:font-family=\"Sans\" fo:color=\"#00ff00\" fo:background-color=\"#ff0000\"/></style:style>"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testWriteStyle1
name|void
name|tst_QTextOdfWriter
operator|::
name|testWriteStyle1
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|htmlInput
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|cursorPosition
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|document
operator|->
name|setHtml
argument_list|(
name|htmlInput
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursor
argument_list|(
name|document
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|cursorPosition
argument_list|)
expr_stmt|;
name|odfWriter
operator|->
name|writeCharacterFormat
argument_list|(
operator|*
name|xmlWriter
argument_list|,
name|cursor
operator|.
name|charFormat
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|getContentFromXml
argument_list|()
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testWriteStyle2
name|void
name|tst_QTextOdfWriter
operator|::
name|testWriteStyle2
parameter_list|()
block|{
name|QTextBlockFormat
name|bf
decl_stmt|;
comment|// = cursor.blockFormat();
name|QList
argument_list|<
name|QTextOption
operator|::
name|Tab
argument_list|>
name|tabs
decl_stmt|;
name|QTextOption
operator|::
name|Tab
name|tab1
argument_list|(
literal|40
argument_list|,
name|QTextOption
operator|::
name|RightTab
argument_list|)
decl_stmt|;
name|tabs
operator|<<
name|tab1
expr_stmt|;
name|QTextOption
operator|::
name|Tab
name|tab2
argument_list|(
literal|80
argument_list|,
name|QTextOption
operator|::
name|DelimiterTab
argument_list|,
literal|'o'
argument_list|)
decl_stmt|;
name|tabs
operator|<<
name|tab2
expr_stmt|;
name|bf
operator|.
name|setTabPositions
argument_list|(
name|tabs
argument_list|)
expr_stmt|;
name|odfWriter
operator|->
name|writeBlockFormat
argument_list|(
operator|*
name|xmlWriter
argument_list|,
name|bf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QString
name|xml
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"<style:style style:name=\"p1\" style:family=\"paragraph\">"
literal|"<style:paragraph-properties>"
literal|"<style:tab-stops>"
literal|"<style:tab-stop style:position=\"30pt\" style:type=\"right\"/>"
literal|"<style:tab-stop style:position=\"60pt\" style:type=\"char\" style:char=\"o\"/>"
literal|"</style:tab-stops>"
literal|"</style:paragraph-properties>"
literal|"</style:style>"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|getContentFromXml
argument_list|()
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testWriteList
name|void
name|tst_QTextOdfWriter
operator|::
name|testWriteList
parameter_list|()
block|{
name|QTextCursor
name|cursor
argument_list|(
name|document
argument_list|)
decl_stmt|;
name|QTextList
modifier|*
name|list
init|=
name|cursor
operator|.
name|createList
argument_list|(
name|QTextListFormat
operator|::
name|ListDisc
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"ListItem 1"
argument_list|)
expr_stmt|;
name|list
operator|->
name|add
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"ListItem 2"
argument_list|)
expr_stmt|;
name|list
operator|->
name|add
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
argument_list|)
expr_stmt|;
name|odfWriter
operator|->
name|writeBlock
argument_list|(
operator|*
name|xmlWriter
argument_list|,
name|cursor
operator|.
name|block
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|xml
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"<text:list text:style-name=\"L2\">"
literal|"<text:list-item>"
comment|//"<text:numbered-paragraph text:style-name=\"L2\" text:level=\"1\">"
comment|//"<text:number>")+ QChar(0x25cf) + QString::fromLatin1("</text:number>" // 0x25cf is a bullet
literal|"<text:p text:style-name=\"p3\"><text:span text:style-name=\"c0\">ListItem 2</text:span></text:p>"
literal|"</text:list-item>"
literal|"</text:list>"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|getContentFromXml
argument_list|()
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testWriteList2
name|void
name|tst_QTextOdfWriter
operator|::
name|testWriteList2
parameter_list|()
block|{
name|QTextCursor
name|cursor
argument_list|(
name|document
argument_list|)
decl_stmt|;
name|QTextList
modifier|*
name|list
init|=
name|cursor
operator|.
name|createList
argument_list|(
name|QTextListFormat
operator|::
name|ListDisc
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Cars"
argument_list|)
expr_stmt|;
name|list
operator|->
name|add
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|QTextListFormat
name|level2
decl_stmt|;
name|level2
operator|.
name|setStyle
argument_list|(
name|QTextListFormat
operator|::
name|ListSquare
argument_list|)
expr_stmt|;
name|level2
operator|.
name|setIndent
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QTextList
modifier|*
name|list2
init|=
name|cursor
operator|.
name|createList
argument_list|(
name|level2
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Model T"
argument_list|)
expr_stmt|;
name|list2
operator|->
name|add
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Kitt"
argument_list|)
expr_stmt|;
name|list2
operator|->
name|add
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Animals"
argument_list|)
expr_stmt|;
name|list
operator|->
name|add
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|(
name|QTextBlockFormat
argument_list|()
argument_list|,
name|QTextCharFormat
argument_list|()
argument_list|)
expr_stmt|;
comment|// start a new completely unrelated list.
name|QTextList
modifier|*
name|list3
init|=
name|cursor
operator|.
name|createList
argument_list|(
name|QTextListFormat
operator|::
name|ListDecimal
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Foo"
argument_list|)
expr_stmt|;
name|list3
operator|->
name|add
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
argument_list|)
expr_stmt|;
comment|// and another block thats NOT in a list.
name|cursor
operator|.
name|insertBlock
argument_list|(
name|QTextBlockFormat
argument_list|()
argument_list|,
name|QTextCharFormat
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Bar"
argument_list|)
expr_stmt|;
name|odfWriter
operator|->
name|writeFrame
argument_list|(
operator|*
name|xmlWriter
argument_list|,
name|document
operator|->
name|rootFrame
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|xml
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"<text:list text:style-name=\"L2\">"
literal|"<text:list-item>"
comment|//"<text:numbered-paragraph text:style-name=\"L2\" text:level=\"1\">"
comment|//"<text:number>")+ QChar(0x25cf) + QString::fromLatin1("</text:number>" // 0x25cf is a bullet
literal|"<text:p text:style-name=\"p3\"><text:span text:style-name=\"c0\">Cars</text:span></text:p>"
literal|"</text:list-item>"
literal|"<text:list-item>"
literal|"<text:list text:style-name=\"L4\">"
literal|"<text:list-item>"
literal|"<text:p text:style-name=\"p5\"><text:span text:style-name=\"c0\">Model T</text:span></text:p>"
literal|"</text:list-item>"
literal|"<text:list-item>"
literal|"<text:p text:style-name=\"p5\"><text:span text:style-name=\"c0\">Kitt</text:span></text:p>"
literal|"</text:list-item>"
literal|"</text:list>"
literal|"</text:list-item>"
literal|"<text:list-item>"
literal|"<text:p text:style-name=\"p3\"><text:span text:style-name=\"c0\">Animals</text:span></text:p>"
literal|"</text:list-item>"
literal|"</text:list>"
literal|"<text:list text:style-name=\"L6\">"
literal|"<text:list-item>"
literal|"<text:p text:style-name=\"p7\"><text:span text:style-name=\"c0\">Foo</text:span></text:p>"
literal|"</text:list-item>"
literal|"</text:list>"
literal|"<text:p text:style-name=\"p1\"><text:span text:style-name=\"c0\">Bar</text:span></text:p>"
argument_list|)
decl_stmt|;
comment|// QString x = getContentFromXml();
comment|// for (int i=0; i< x.length(); i+=150) qDebug()<< x.mid(i, 150);
name|QCOMPARE
argument_list|(
name|getContentFromXml
argument_list|()
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createArchive
name|void
name|tst_QTextOdfWriter
operator|::
name|createArchive
parameter_list|()
block|{
name|document
operator|->
name|setPlainText
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
comment|// simple doc is enough ;)
name|QTextOdfWriter
name|writer
argument_list|(
operator|*
name|document
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|writer
operator|.
name|createArchive
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// default
name|writer
operator|.
name|writeAll
argument_list|()
expr_stmt|;
comment|/* QFile file("createArchive-odt"); file.open(QIODevice::WriteOnly); file.write(buffer->data()); file.close(); */
name|QVERIFY
argument_list|(
name|buffer
operator|->
name|data
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|80
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buffer
operator|->
name|data
argument_list|()
index|[
literal|0
index|]
argument_list|,
literal|'P'
argument_list|)
expr_stmt|;
comment|// its a zip :)
name|QCOMPARE
argument_list|(
name|buffer
operator|->
name|data
argument_list|()
index|[
literal|1
index|]
argument_list|,
literal|'K'
argument_list|)
expr_stmt|;
name|QString
name|mimetype
argument_list|(
name|buffer
operator|->
name|data
argument_list|()
operator|.
name|mid
argument_list|(
literal|38
argument_list|,
literal|39
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mimetype
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"application/vnd.oasis.opendocument.text"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testWriteAll
name|void
name|tst_QTextOdfWriter
operator|::
name|testWriteAll
parameter_list|()
block|{
name|document
operator|->
name|setPlainText
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
comment|// simple doc is enough ;)
name|QTextOdfWriter
name|writer
argument_list|(
operator|*
name|document
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|writer
operator|.
name|createArchive
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setCreateArchive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAll
argument_list|()
expr_stmt|;
name|QString
name|result
init|=
name|QString
argument_list|(
name|buffer
operator|->
name|data
argument_list|()
argument_list|)
decl_stmt|;
comment|// details we check elsewhere, all we have to do is check availability.
name|QVERIFY
argument_list|(
name|result
operator|.
name|indexOf
argument_list|(
literal|"office:automatic-styles"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|result
operator|.
name|indexOf
argument_list|(
literal|"<style:style style:name=\"p1\""
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|result
operator|.
name|indexOf
argument_list|(
literal|"<style:style style:name=\"c0\""
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|result
operator|.
name|indexOf
argument_list|(
literal|"office:body"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|result
operator|.
name|indexOf
argument_list|(
literal|"office:text"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|result
operator|.
name|indexOf
argument_list|(
literal|"style:style"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testWriteSection
name|void
name|tst_QTextOdfWriter
operator|::
name|testWriteSection
parameter_list|()
block|{
name|QTextCursor
name|cursor
argument_list|(
name|document
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"foo\nBar"
argument_list|)
expr_stmt|;
name|QTextFrameFormat
name|ff
decl_stmt|;
name|cursor
operator|.
name|insertFrame
argument_list|(
name|ff
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
name|odfWriter
operator|->
name|writeFrame
argument_list|(
operator|*
name|xmlWriter
argument_list|,
name|document
operator|->
name|rootFrame
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|xml
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"<text:p text:style-name=\"p1\"><text:span text:style-name=\"c0\">foo</text:span></text:p>"
literal|"<text:p text:style-name=\"p1\"><text:span text:style-name=\"c0\">Bar</text:span></text:p>"
literal|"<text:section>"
literal|"<text:p text:style-name=\"p1\"><text:span text:style-name=\"c0\">baz</text:span></text:p>"
literal|"</text:section>"
literal|"<text:p text:style-name=\"p1\"/>"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|getContentFromXml
argument_list|()
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testWriteTable
name|void
name|tst_QTextOdfWriter
operator|::
name|testWriteTable
parameter_list|()
block|{
comment|// create table with merged cells
name|QTextCursor
name|cursor
argument_list|(
name|document
argument_list|)
decl_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|insertTable
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|table
operator|->
name|mergeCells
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|table
operator|->
name|mergeCells
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cursor
operator|=
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCell
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCell
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCell
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCell
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
comment|/*       +-+---+       |a|b  |       +-+-+-+       |c  |d|       +   +-+       |   |e|       +-+-+-+     */
name|odfWriter
operator|->
name|writeFrame
argument_list|(
operator|*
name|xmlWriter
argument_list|,
name|document
operator|->
name|rootFrame
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|xml
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"<text:p text:style-name=\"p1\"/>"
literal|"<table:table>"
literal|"<table:table-column table:number-columns-repeated=\"3\"/>"
literal|"<table:table-row>"
literal|"<table:table-cell table:style-name=\"T3\">"
literal|"<text:p text:style-name=\"p1\"><text:span text:style-name=\"c0\">a</text:span></text:p>"
literal|"</table:table-cell>"
literal|"<table:table-cell table:number-columns-spanned=\"2\" table:style-name=\"T6\">"
literal|"<text:p text:style-name=\"p1\"><text:span text:style-name=\"c7\">b</text:span></text:p>"
literal|"</table:table-cell>"
literal|"</table:table-row>"
literal|"<table:table-row>"
literal|"<table:table-cell table:number-columns-spanned=\"2\" table:number-rows-spanned=\"2\" table:style-name=\"T5\">"
literal|"<text:p text:style-name=\"p1\"><text:span text:style-name=\"c8\">c</text:span></text:p>"
literal|"</table:table-cell>"
literal|"<table:table-cell table:style-name=\"T3\">"
literal|"<text:p text:style-name=\"p1\"><text:span text:style-name=\"c0\">d</text:span></text:p>"
literal|"</table:table-cell>"
literal|"</table:table-row>"
literal|"<table:table-row>"
literal|"<table:table-cell table:style-name=\"T3\">"
literal|"<text:p text:style-name=\"p1\"><text:span text:style-name=\"c0\">e</text:span></text:p>"
literal|"</table:table-cell>"
literal|"</table:table-row>"
literal|"</table:table>"
literal|"<text:p text:style-name=\"p1\"/>"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|getContentFromXml
argument_list|()
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QTextOdfWriter
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qtextodfwriter.moc"
end_include
end_unit
