begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QTextEdit>
end_include
begin_include
include|#
directive|include
file|<QLineEdit>
end_include
begin_include
include|#
directive|include
file|<QVBoxLayout>
end_include
begin_include
include|#
directive|include
file|<QFontDialog>
end_include
begin_include
include|#
directive|include
file|<QPushButton>
end_include
begin_define
DECL|macro|private
define|#
directive|define
name|private
value|public
end_define
begin_include
include|#
directive|include
file|<qfont.h>
end_include
begin_include
include|#
directive|include
file|<private/qtextengine_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qfontengine_p.h>
end_include
begin_include
include|#
directive|include
file|<qtextlayout.h>
end_include
begin_undef
DECL|macro|private
undef|#
directive|undef
name|private
end_undef
begin_class
DECL|class|MyEdit
class|class
name|MyEdit
super|:
specifier|public
name|QTextEdit
block|{
name|Q_OBJECT
public|public:
DECL|function|MyEdit
name|MyEdit
parameter_list|(
name|QWidget
modifier|*
name|p
parameter_list|)
member_init_list|:
name|QTextEdit
argument_list|(
name|p
argument_list|)
block|{
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
public|public
name|slots
public|:
name|void
name|setText
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
function_decl|;
name|void
name|changeFont
parameter_list|()
function_decl|;
public|public:
DECL|member|lineEdit
name|QLineEdit
modifier|*
name|lineEdit
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|setText
name|void
name|MyEdit
operator|::
name|setText
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
block|{
if|if
condition|(
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|clear
argument_list|()
expr_stmt|;
return|return;
block|}
name|QTextLayout
name|layout
argument_list|(
name|str
argument_list|,
name|lineEdit
operator|->
name|font
argument_list|()
argument_list|)
decl_stmt|;
name|QTextEngine
modifier|*
name|e
init|=
name|layout
operator|.
name|d
decl_stmt|;
name|e
operator|->
name|itemize
argument_list|()
expr_stmt|;
name|e
operator|->
name|shape
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QString
name|result
decl_stmt|;
name|result
operator|=
literal|"Using font '"
operator|+
name|e
operator|->
name|fontEngine
argument_list|(
name|e
operator|->
name|layoutData
operator|->
name|items
index|[
literal|0
index|]
argument_list|)
operator|->
name|fontDef
operator|.
name|family
operator|+
literal|"'\n\n"
expr_stmt|;
name|result
operator|+=
literal|"{ { "
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|str
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
name|result
operator|+=
literal|"0x"
operator|+
name|QString
operator|::
name|number
argument_list|(
name|str
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|unicode
argument_list|()
argument_list|,
literal|16
argument_list|)
operator|+
literal|", "
expr_stmt|;
name|result
operator|+=
literal|"0x0 },\n  { "
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|e
operator|->
name|layoutData
operator|->
name|items
index|[
literal|0
index|]
operator|.
name|num_glyphs
condition|;
operator|++
name|i
control|)
name|result
operator|+=
literal|"0x"
operator|+
name|QString
operator|::
name|number
argument_list|(
name|e
operator|->
name|layoutData
operator|->
name|glyphLayout
operator|.
name|glyphs
index|[
name|i
index|]
argument_list|,
literal|16
argument_list|)
operator|+
literal|", "
expr_stmt|;
name|result
operator|+=
literal|"0x0 } }"
expr_stmt|;
name|setPlainText
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|changeFont
name|void
name|MyEdit
operator|::
name|changeFont
parameter_list|()
block|{
name|bool
name|ok
decl_stmt|;
name|QFont
name|f
init|=
name|QFontDialog
operator|::
name|getFont
argument_list|(
operator|&
name|ok
argument_list|,
name|lineEdit
operator|->
name|font
argument_list|()
argument_list|,
name|topLevelWidget
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
name|lineEdit
operator|->
name|setFont
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
name|QApplication
name|a
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|mw
init|=
operator|new
name|QWidget
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QVBoxLayout
modifier|*
name|l
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|mw
argument_list|)
decl_stmt|;
name|QLineEdit
modifier|*
name|le
init|=
operator|new
name|QLineEdit
argument_list|(
name|mw
argument_list|)
decl_stmt|;
name|l
operator|->
name|addWidget
argument_list|(
name|le
argument_list|)
expr_stmt|;
name|MyEdit
modifier|*
name|view
init|=
operator|new
name|MyEdit
argument_list|(
name|mw
argument_list|)
decl_stmt|;
name|view
operator|->
name|lineEdit
operator|=
name|le
expr_stmt|;
name|l
operator|->
name|addWidget
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|QPushButton
modifier|*
name|button
init|=
operator|new
name|QPushButton
argument_list|(
literal|"Change Font"
argument_list|,
name|mw
argument_list|)
decl_stmt|;
name|l
operator|->
name|addWidget
argument_list|(
name|button
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|le
argument_list|,
name|SIGNAL
argument_list|(
name|textChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|view
argument_list|,
name|SLOT
argument_list|(
name|setText
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|button
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|view
argument_list|,
name|SLOT
argument_list|(
name|changeFont
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mw
operator|->
name|resize
argument_list|(
literal|500
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|mw
operator|->
name|show
argument_list|()
expr_stmt|;
return|return
name|a
operator|.
name|exec
argument_list|()
return|;
block|}
end_function
begin_include
include|#
directive|include
file|<main.moc>
end_include
end_unit
