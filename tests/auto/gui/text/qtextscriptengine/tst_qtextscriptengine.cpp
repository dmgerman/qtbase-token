begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_X11
end_ifdef
begin_define
DECL|macro|private
define|#
directive|define
name|private
value|public
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// cannot do private -> public on windows since it seems to mess up some stl headers
end_comment
begin_include
include|#
directive|include
file|<qfont.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_X11
end_ifdef
begin_undef
DECL|macro|private
undef|#
directive|undef
name|private
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
end_if
begin_define
DECL|macro|private
define|#
directive|define
name|private
value|public
end_define
begin_include
include|#
directive|include
file|<private/qtextengine_p.h>
end_include
begin_include
include|#
directive|include
file|<qtextlayout.h>
end_include
begin_undef
DECL|macro|private
undef|#
directive|undef
name|private
end_undef
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|<private/qtextengine_p.h>
end_include
begin_include
include|#
directive|include
file|<qtextlayout.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<qfontdatabase.h>
end_include
begin_include
include|#
directive|include
file|<qfontinfo.h>
end_include
begin_comment
comment|//TESTED_CLASS=
end_comment
begin_comment
comment|//TESTED_FILES= gui/text/qscriptengine.cpp
end_comment
begin_class
DECL|class|tst_QTextScriptEngine
class|class
name|tst_QTextScriptEngine
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QTextScriptEngine
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QTextScriptEngine
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
ifdef|#
directive|ifdef
name|Q_WS_X11
name|void
name|devanagari
parameter_list|()
function_decl|;
name|void
name|bengali
parameter_list|()
function_decl|;
name|void
name|gurmukhi
parameter_list|()
function_decl|;
comment|// gujarati missing
name|void
name|oriya
parameter_list|()
function_decl|;
name|void
name|tamil
parameter_list|()
function_decl|;
name|void
name|telugu
parameter_list|()
function_decl|;
name|void
name|kannada
parameter_list|()
function_decl|;
name|void
name|malayalam
parameter_list|()
function_decl|;
name|void
name|sinhala
parameter_list|()
function_decl|;
name|void
name|greek
parameter_list|()
function_decl|;
name|void
name|khmer
parameter_list|()
function_decl|;
name|void
name|linearB
parameter_list|()
function_decl|;
name|void
name|controlInSyllable_qtbug14204
parameter_list|()
function_decl|;
endif|#
directive|endif
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
operator|&&
name|defined
argument_list|(
name|QT_MAC_USE_COCOA
argument_list|)
operator|)
operator|||
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
name|void
name|combiningMarks_qtbug15675
parameter_list|()
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|Q_WS_MAC
name|void
name|mirroredChars_data
parameter_list|()
function_decl|;
name|void
name|mirroredChars
parameter_list|()
function_decl|;
endif|#
directive|endif
private|private:
DECL|member|haveTestFonts
name|bool
name|haveTestFonts
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QTextScriptEngine
name|tst_QTextScriptEngine
operator|::
name|tst_QTextScriptEngine
parameter_list|()
member_init_list|:
name|haveTestFonts
argument_list|(
name|qgetenv
argument_list|(
literal|"QT_HAVE_TEST_FONTS"
argument_list|)
operator|==
name|QByteArray
argument_list|(
literal|"1"
argument_list|)
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~tst_QTextScriptEngine
name|tst_QTextScriptEngine
operator|::
name|~
name|tst_QTextScriptEngine
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|initTestCase
name|void
name|tst_QTextScriptEngine
operator|::
name|initTestCase
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
if|if
condition|(
operator|!
name|haveTestFonts
condition|)
block|{
name|qWarning
argument_list|(
literal|"Some of these tests depend on the internals of some test fonts which are not freely "
literal|"distributable.\n"
literal|"These tests will be skipped.\n"
literal|"If you have the fonts available, set QT_HAVE_TEST_FONTS=1 in your environment and "
literal|"run the test again."
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_QTextScriptEngine
operator|::
name|init
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QTextScriptEngine
operator|::
name|cleanup
parameter_list|()
block|{ }
end_function
begin_struct
DECL|struct|ShapeTable
struct|struct
name|ShapeTable
block|{
DECL|member|unicode
name|unsigned
name|short
name|unicode
index|[
literal|16
index|]
decl_stmt|;
DECL|member|glyphs
name|unsigned
name|short
name|glyphs
index|[
literal|16
index|]
decl_stmt|;
block|}
struct|;
end_struct
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
end_if
begin_function
DECL|function|shaping
specifier|static
name|bool
name|shaping
parameter_list|(
specifier|const
name|QFont
modifier|&
name|f
parameter_list|,
specifier|const
name|ShapeTable
modifier|*
name|s
parameter_list|)
block|{
name|QString
name|str
init|=
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s
operator|->
name|unicode
argument_list|)
decl_stmt|;
name|QTextLayout
name|layout
argument_list|(
name|str
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|QTextEngine
modifier|*
name|e
init|=
name|layout
operator|.
name|d
decl_stmt|;
name|e
operator|->
name|itemize
argument_list|()
expr_stmt|;
name|e
operator|->
name|shape
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|int
name|nglyphs
init|=
literal|0
decl_stmt|;
specifier|const
name|unsigned
name|short
modifier|*
name|g
init|=
name|s
operator|->
name|glyphs
decl_stmt|;
while|while
condition|(
operator|*
name|g
condition|)
block|{
name|nglyphs
operator|++
expr_stmt|;
name|g
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|nglyphs
operator|!=
name|e
operator|->
name|layoutData
operator|->
name|items
index|[
literal|0
index|]
operator|.
name|num_glyphs
condition|)
goto|goto
name|error
goto|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nglyphs
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|(
name|e
operator|->
name|layoutData
operator|->
name|glyphLayout
operator|.
name|glyphs
index|[
name|i
index|]
operator|&
literal|0xffffff
operator|)
operator|!=
name|s
operator|->
name|glyphs
index|[
name|i
index|]
condition|)
goto|goto
name|error
goto|;
block|}
return|return
literal|true
return|;
name|error
label|:
name|str
operator|=
literal|""
expr_stmt|;
specifier|const
name|unsigned
name|short
modifier|*
name|uc
init|=
name|s
operator|->
name|unicode
decl_stmt|;
while|while
condition|(
operator|*
name|uc
condition|)
block|{
name|str
operator|+=
name|QString
argument_list|(
literal|"%1 "
argument_list|)
operator|.
name|arg
argument_list|(
operator|*
name|uc
argument_list|,
literal|4
argument_list|,
literal|16
argument_list|)
expr_stmt|;
operator|++
name|uc
expr_stmt|;
block|}
name|qDebug
argument_list|(
literal|"%s: shaping of string %s failed, nglyphs=%d, expected %d"
argument_list|,
name|f
operator|.
name|family
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|str
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|e
operator|->
name|layoutData
operator|->
name|items
index|[
literal|0
index|]
operator|.
name|num_glyphs
argument_list|,
name|nglyphs
argument_list|)
expr_stmt|;
name|str
operator|=
literal|""
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|e
operator|->
name|layoutData
operator|->
name|items
index|[
literal|0
index|]
operator|.
name|num_glyphs
condition|)
block|{
name|str
operator|+=
name|QString
argument_list|(
literal|"%1 "
argument_list|)
operator|.
name|arg
argument_list|(
name|e
operator|->
name|layoutData
operator|->
name|glyphLayout
operator|.
name|glyphs
index|[
name|i
index|]
argument_list|,
literal|4
argument_list|,
literal|16
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
name|qDebug
argument_list|(
literal|"    glyph result = %s"
argument_list|,
name|str
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_X11
end_ifdef
begin_function
DECL|function|devanagari
name|void
name|tst_QTextScriptEngine
operator|::
name|devanagari
parameter_list|()
block|{
if|if
condition|(
operator|!
name|haveTestFonts
condition|)
block|{
name|QSKIP
argument_list|(
literal|"Test fonts are not available"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
name|QFontDatabase
argument_list|()
operator|.
name|families
argument_list|(
name|QFontDatabase
operator|::
name|Devanagari
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Raghindi"
argument_list|)
condition|)
block|{
name|QFont
name|f
argument_list|(
literal|"Raghindi"
argument_list|)
decl_stmt|;
specifier|const
name|ShapeTable
name|shape_table
index|[]
init|=
block|{
comment|// Ka
block|{
block|{
literal|0x0915
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0080
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant
block|{
block|{
literal|0x0915
block|,
literal|0x094d
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0080
block|,
literal|0x0051
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant Ka
block|{
block|{
literal|0x0915
block|,
literal|0x094d
block|,
literal|0x0915
block|,
literal|0x0
block|}
block|,
block|{
literal|0x00c8
block|,
literal|0x0080
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka MatraI
block|{
block|{
literal|0x0915
block|,
literal|0x093f
block|,
literal|0x0
block|}
block|,
block|{
literal|0x01d1
block|,
literal|0x0080
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ra Halant Ka
block|{
block|{
literal|0x0930
block|,
literal|0x094d
block|,
literal|0x0915
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0080
block|,
literal|0x005b
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ra Halant Ka MatraI
block|{
block|{
literal|0x0930
block|,
literal|0x094d
block|,
literal|0x0915
block|,
literal|0x093f
block|,
literal|0x0
block|}
block|,
block|{
literal|0x01d1
block|,
literal|0x0080
block|,
literal|0x005b
block|,
literal|0x0
block|}
block|}
block|,
comment|// MatraI
block|{
block|{
literal|0x093f
block|,
literal|0x0
block|}
block|,
block|{
literal|0x01d4
block|,
literal|0x029c
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Nukta
block|{
block|{
literal|0x0915
block|,
literal|0x093c
block|,
literal|0x0
block|}
block|,
block|{
literal|0x00a4
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant Ra
block|{
block|{
literal|0x0915
block|,
literal|0x094d
block|,
literal|0x0930
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0110
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant Ra Halant Ka
block|{
block|{
literal|0x0915
block|,
literal|0x094d
block|,
literal|0x0930
block|,
literal|0x094d
block|,
literal|0x0915
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0158
block|,
literal|0x0080
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0930
block|,
literal|0x094d
block|,
literal|0x200d
block|,
literal|0x0
block|}
block|,
block|{
literal|0x00e2
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0915
block|,
literal|0x094d
block|,
literal|0x0930
block|,
literal|0x094d
block|,
literal|0x200d
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0158
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0
block|}
block|,
block|{
literal|0
block|}
block|}
block|}
decl_stmt|;
specifier|const
name|ShapeTable
modifier|*
name|s
init|=
name|shape_table
decl_stmt|;
while|while
condition|(
name|s
operator|->
name|unicode
index|[
literal|0
index|]
condition|)
block|{
name|QVERIFY
argument_list|(
name|shaping
argument_list|(
name|f
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couldn't find Raghindi"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
block|{
if|if
condition|(
name|QFontDatabase
argument_list|()
operator|.
name|families
argument_list|(
name|QFontDatabase
operator|::
name|Devanagari
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Mangal"
argument_list|)
condition|)
block|{
name|QFont
name|f
argument_list|(
literal|"Mangal"
argument_list|)
decl_stmt|;
specifier|const
name|ShapeTable
name|shape_table
index|[]
init|=
block|{
comment|// Ka
block|{
block|{
literal|0x0915
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0080
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant
block|{
block|{
literal|0x0915
block|,
literal|0x094d
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0080
block|,
literal|0x0051
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant Ka
block|{
block|{
literal|0x0915
block|,
literal|0x094d
block|,
literal|0x0915
block|,
literal|0x0
block|}
block|,
block|{
literal|0x00c8
block|,
literal|0x0080
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka MatraI
block|{
block|{
literal|0x0915
block|,
literal|0x093f
block|,
literal|0x0
block|}
block|,
block|{
literal|0x01d1
block|,
literal|0x0080
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ra Halant Ka
block|{
block|{
literal|0x0930
block|,
literal|0x094d
block|,
literal|0x0915
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0080
block|,
literal|0x005b
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ra Halant Ka MatraI
block|{
block|{
literal|0x0930
block|,
literal|0x094d
block|,
literal|0x0915
block|,
literal|0x093f
block|,
literal|0x0
block|}
block|,
block|{
literal|0x01d1
block|,
literal|0x0080
block|,
literal|0x005b
block|,
literal|0x0
block|}
block|}
block|,
comment|// MatraI
block|{
block|{
literal|0x093f
block|,
literal|0x0
block|}
block|,
block|{
literal|0x01d4
block|,
literal|0x029c
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Nukta
block|{
block|{
literal|0x0915
block|,
literal|0x093c
block|,
literal|0x0
block|}
block|,
block|{
literal|0x00a4
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant Ra
block|{
block|{
literal|0x0915
block|,
literal|0x094d
block|,
literal|0x0930
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0110
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant Ra Halant Ka
block|{
block|{
literal|0x0915
block|,
literal|0x094d
block|,
literal|0x0930
block|,
literal|0x094d
block|,
literal|0x0915
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0158
block|,
literal|0x0080
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x92b
block|,
literal|0x94d
block|,
literal|0x930
block|,
literal|0x0
block|}
block|,
block|{
literal|0x125
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x92b
block|,
literal|0x93c
block|,
literal|0x94d
block|,
literal|0x930
block|,
literal|0x0
block|}
block|,
block|{
literal|0x149
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0
block|}
block|,
block|{
literal|0
block|}
block|}
block|}
decl_stmt|;
specifier|const
name|ShapeTable
modifier|*
name|s
init|=
name|shape_table
decl_stmt|;
while|while
condition|(
name|s
operator|->
name|unicode
index|[
literal|0
index|]
condition|)
block|{
name|QVERIFY
argument_list|(
name|shaping
argument_list|(
name|f
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couldn't find mangal"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_X11
end_ifdef
begin_function
DECL|function|bengali
name|void
name|tst_QTextScriptEngine
operator|::
name|bengali
parameter_list|()
block|{
if|if
condition|(
operator|!
name|haveTestFonts
condition|)
block|{
name|QSKIP
argument_list|(
literal|"Test fonts are not available"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
name|QFontDatabase
argument_list|()
operator|.
name|families
argument_list|(
name|QFontDatabase
operator|::
name|Bengali
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Akaash"
argument_list|)
condition|)
block|{
name|QFont
name|f
argument_list|(
literal|"Akaash"
argument_list|)
decl_stmt|;
specifier|const
name|ShapeTable
name|shape_table
index|[]
init|=
block|{
comment|// Ka
block|{
block|{
literal|0x0995
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0151
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant
block|{
block|{
literal|0x0995
block|,
literal|0x09cd
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0151
block|,
literal|0x017d
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant Ka
block|{
block|{
literal|0x0995
block|,
literal|0x09cd
block|,
literal|0x0995
block|,
literal|0x0
block|}
block|,
block|{
literal|0x019b
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka MatraI
block|{
block|{
literal|0x0995
block|,
literal|0x09bf
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0173
block|,
literal|0x0151
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ra Halant Ka
block|{
block|{
literal|0x09b0
block|,
literal|0x09cd
block|,
literal|0x0995
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0151
block|,
literal|0x0276
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ra Halant Ka MatraI
block|{
block|{
literal|0x09b0
block|,
literal|0x09cd
block|,
literal|0x0995
block|,
literal|0x09bf
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0173
block|,
literal|0x0151
block|,
literal|0x0276
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Nukta
block|{
block|{
literal|0x0995
block|,
literal|0x09bc
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0151
block|,
literal|0x0171
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant Ra
block|{
block|{
literal|0x0995
block|,
literal|0x09cd
block|,
literal|0x09b0
block|,
literal|0x0
block|}
block|,
block|{
literal|0x01f4
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant Ra Halant Ka
block|{
block|{
literal|0x0995
block|,
literal|0x09cd
block|,
literal|0x09b0
block|,
literal|0x09cd
block|,
literal|0x0995
block|,
literal|0x0
block|}
block|,
block|{
literal|0x025c
block|,
literal|0x0276
block|,
literal|0x0151
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ya + Halant
block|{
block|{
literal|0x09af
block|,
literal|0x09cd
block|,
literal|0x0
block|}
block|,
block|{
literal|0x016a
block|,
literal|0x017d
block|,
literal|0x0
block|}
block|}
block|,
comment|// Da Halant Ya -> Da Ya-Phala
block|{
block|{
literal|0x09a6
block|,
literal|0x09cd
block|,
literal|0x09af
block|,
literal|0x0
block|}
block|,
block|{
literal|0x01e5
block|,
literal|0x0
block|}
block|}
block|,
comment|// A Halant Ya -> A Ya-phala
block|{
block|{
literal|0x0985
block|,
literal|0x09cd
block|,
literal|0x09af
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0145
block|,
literal|0x01cf
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant Ka
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x0995
block|,
literal|0x0
block|}
block|,
block|{
literal|0x026f
block|,
literal|0x0151
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant ZWNJ Ka
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x200c
block|,
literal|0x0995
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0164
block|,
literal|0x017d
block|,
literal|0x0151
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant ZWJ Ka
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x200d
block|,
literal|0x0995
block|,
literal|0x0
block|}
block|,
block|{
literal|0x026f
block|,
literal|0x0151
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant ZWNJ Ka
block|{
block|{
literal|0x0995
block|,
literal|0x09cd
block|,
literal|0x200c
block|,
literal|0x0995
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0151
block|,
literal|0x017d
block|,
literal|0x0151
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant ZWJ Ka
block|{
block|{
literal|0x0995
block|,
literal|0x09cd
block|,
literal|0x200d
block|,
literal|0x0995
block|,
literal|0x0
block|}
block|,
block|{
literal|0x025c
block|,
literal|0x0151
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant Ra
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x09b0
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0207
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant ZWNJ Ra
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x200c
block|,
literal|0x09b0
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0164
block|,
literal|0x017d
block|,
literal|0x016b
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant ZWJ Ra
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x200d
block|,
literal|0x09b0
block|,
literal|0x0
block|}
block|,
block|{
literal|0x026f
block|,
literal|0x016b
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant Ba
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x09ac
block|,
literal|0x0
block|}
block|,
block|{
literal|0x022f
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant ZWNJ Ba
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x200c
block|,
literal|0x09ac
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0164
block|,
literal|0x017d
block|,
literal|0x0167
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant ZWJ Ba
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x200d
block|,
literal|0x09ac
block|,
literal|0x0
block|}
block|,
block|{
literal|0x026f
block|,
literal|0x0167
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant Dha
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x09a7
block|,
literal|0x0
block|}
block|,
block|{
literal|0x01d3
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant ZWNJ Dha
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x200c
block|,
literal|0x09a7
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0164
block|,
literal|0x017d
block|,
literal|0x0163
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant ZWJ Dha
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x200d
block|,
literal|0x09a7
block|,
literal|0x0
block|}
block|,
block|{
literal|0x026f
block|,
literal|0x0163
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ra Halant Ka MatraAU
block|{
block|{
literal|0x09b0
block|,
literal|0x09cd
block|,
literal|0x0995
block|,
literal|0x09cc
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0179
block|,
literal|0x0151
block|,
literal|0x0276
block|,
literal|0x017e
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ra Halant Ba Halant Ba
block|{
block|{
literal|0x09b0
block|,
literal|0x09cd
block|,
literal|0x09ac
block|,
literal|0x09cd
block|,
literal|0x09ac
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0232
block|,
literal|0x0276
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x9b0
block|,
literal|0x9cd
block|,
literal|0x995
block|,
literal|0x9be
block|,
literal|0x982
block|,
literal|0x0
block|}
block|,
block|{
literal|0x151
block|,
literal|0x276
block|,
literal|0x172
block|,
literal|0x143
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x9b0
block|,
literal|0x9cd
block|,
literal|0x995
block|,
literal|0x9be
block|,
literal|0x983
block|,
literal|0x0
block|}
block|,
block|{
literal|0x151
block|,
literal|0x276
block|,
literal|0x172
block|,
literal|0x144
block|,
literal|0x0
block|}
block|}
block|,
comment|// test decomposed two parts matras
block|{
block|{
literal|0x995
block|,
literal|0x9c7
block|,
literal|0x9be
block|,
literal|0x0
block|}
block|,
block|{
literal|0x179
block|,
literal|0x151
block|,
literal|0x172
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x995
block|,
literal|0x9c7
block|,
literal|0x9d7
block|,
literal|0x0
block|}
block|,
block|{
literal|0x179
block|,
literal|0x151
block|,
literal|0x17e
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0
block|}
block|,
block|{
literal|0
block|}
block|}
block|}
decl_stmt|;
specifier|const
name|ShapeTable
modifier|*
name|s
init|=
name|shape_table
decl_stmt|;
while|while
condition|(
name|s
operator|->
name|unicode
index|[
literal|0
index|]
condition|)
block|{
name|QVERIFY
argument_list|(
name|shaping
argument_list|(
name|f
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couldn't find Akaash"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
block|{
if|if
condition|(
name|QFontDatabase
argument_list|()
operator|.
name|families
argument_list|(
name|QFontDatabase
operator|::
name|Bengali
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Mukti Narrow"
argument_list|)
condition|)
block|{
name|QFont
name|f
argument_list|(
literal|"Mukti Narrow"
argument_list|)
decl_stmt|;
specifier|const
name|ShapeTable
name|shape_table
index|[]
init|=
block|{
comment|// Ka
block|{
block|{
literal|0x0995
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0073
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant
block|{
block|{
literal|0x0995
block|,
literal|0x09cd
block|,
literal|0x0
block|}
block|,
block|{
literal|0x00b9
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant Ka
block|{
block|{
literal|0x0995
block|,
literal|0x09cd
block|,
literal|0x0995
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0109
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka MatraI
block|{
block|{
literal|0x0995
block|,
literal|0x09bf
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0095
block|,
literal|0x0073
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ra Halant Ka
block|{
block|{
literal|0x09b0
block|,
literal|0x09cd
block|,
literal|0x0995
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0073
block|,
literal|0x00e1
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ra Halant Ka MatraI
block|{
block|{
literal|0x09b0
block|,
literal|0x09cd
block|,
literal|0x0995
block|,
literal|0x09bf
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0095
block|,
literal|0x0073
block|,
literal|0x00e1
block|,
literal|0x0
block|}
block|}
block|,
comment|// MatraI
block|{
block|{
literal|0x09bf
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0095
block|,
literal|0x01c8
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Nukta
block|{
block|{
literal|0x0995
block|,
literal|0x09bc
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0073
block|,
literal|0x0093
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant Ra
block|{
block|{
literal|0x0995
block|,
literal|0x09cd
block|,
literal|0x09b0
block|,
literal|0x0
block|}
block|,
block|{
literal|0x00e5
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant Ra Halant Ka
block|{
block|{
literal|0x995
block|,
literal|0x9cd
block|,
literal|0x9b0
block|,
literal|0x9cd
block|,
literal|0x995
block|,
literal|0x0
block|}
block|,
block|{
literal|0x234
block|,
literal|0x24e
block|,
literal|0x73
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ya + Halant
block|{
block|{
literal|0x09af
block|,
literal|0x09cd
block|,
literal|0x0
block|}
block|,
block|{
literal|0x00d2
block|,
literal|0x0
block|}
block|}
block|,
comment|// Da Halant Ya -> Da Ya-Phala
block|{
block|{
literal|0x09a6
block|,
literal|0x09cd
block|,
literal|0x09af
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0084
block|,
literal|0x00e2
block|,
literal|0x0
block|}
block|}
block|,
comment|// A Halant Ya -> A Ya-phala
block|{
block|{
literal|0x0985
block|,
literal|0x09cd
block|,
literal|0x09af
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0067
block|,
literal|0x00e2
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant Ka
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x0995
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0188
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant ZWNJ Ka
block|{
block|{
literal|0x9a8
block|,
literal|0x9cd
block|,
literal|0x200c
block|,
literal|0x995
block|,
literal|0x0
block|}
block|,
block|{
literal|0xcc
block|,
literal|0x73
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant ZWJ Ka
block|{
block|{
literal|0x9a8
block|,
literal|0x9cd
block|,
literal|0x200d
block|,
literal|0x995
block|,
literal|0x0
block|}
block|,
block|{
literal|0x247
block|,
literal|0x73
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant ZWNJ Ka
block|{
block|{
literal|0x9a8
block|,
literal|0x9cd
block|,
literal|0x200d
block|,
literal|0x995
block|,
literal|0x0
block|}
block|,
block|{
literal|0x247
block|,
literal|0x73
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ka Halant ZWJ Ka
block|{
block|{
literal|0x9a8
block|,
literal|0x9cd
block|,
literal|0x200d
block|,
literal|0x995
block|,
literal|0x0
block|}
block|,
block|{
literal|0x247
block|,
literal|0x73
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant Ra
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x09b0
block|,
literal|0x0
block|}
block|,
block|{
literal|0x00f8
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant ZWNJ Ra
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x200c
block|,
literal|0x09b0
block|,
literal|0x0
block|}
block|,
block|{
literal|0xcc
block|,
literal|0x8d
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant ZWJ Ra
block|{
block|{
literal|0x9a8
block|,
literal|0x9cd
block|,
literal|0x200d
block|,
literal|0x9b0
block|,
literal|0x0
block|}
block|,
block|{
literal|0x247
block|,
literal|0x8d
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant Ba
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x09ac
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0139
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant ZWNJ Ba
block|{
block|{
literal|0x9a8
block|,
literal|0x9cd
block|,
literal|0x200c
block|,
literal|0x9ac
block|,
literal|0x0
block|}
block|,
block|{
literal|0xcc
block|,
literal|0x89
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant ZWJ Ba
block|{
block|{
literal|0x9a8
block|,
literal|0x9cd
block|,
literal|0x200d
block|,
literal|0x9ac
block|,
literal|0x0
block|}
block|,
block|{
literal|0x247
block|,
literal|0x89
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant Dha
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x09a7
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0145
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant ZWNJ Dha
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x200c
block|,
literal|0x09a7
block|,
literal|0x0
block|}
block|,
block|{
literal|0xcc
block|,
literal|0x85
block|,
literal|0x0
block|}
block|}
block|,
comment|// Na Halant ZWJ Dha
block|{
block|{
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x200d
block|,
literal|0x09a7
block|,
literal|0x0
block|}
block|,
block|{
literal|0x247
block|,
literal|0x85
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ra Halant Ka MatraAU
block|{
block|{
literal|0x9b0
block|,
literal|0x9cd
block|,
literal|0x995
block|,
literal|0x9cc
block|,
literal|0x0
block|}
block|,
block|{
literal|0x232
block|,
literal|0x73
block|,
literal|0xe1
block|,
literal|0xa0
block|,
literal|0x0
block|}
block|}
block|,
comment|// Ra Halant Ba Halant Ba
block|{
block|{
literal|0x09b0
block|,
literal|0x09cd
block|,
literal|0x09ac
block|,
literal|0x09cd
block|,
literal|0x09ac
block|,
literal|0x0
block|}
block|,
block|{
literal|0x013b
block|,
literal|0x00e1
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0
block|}
block|,
block|{
literal|0
block|}
block|}
block|}
decl_stmt|;
specifier|const
name|ShapeTable
modifier|*
name|s
init|=
name|shape_table
decl_stmt|;
while|while
condition|(
name|s
operator|->
name|unicode
index|[
literal|0
index|]
condition|)
block|{
name|QVERIFY
argument_list|(
name|shaping
argument_list|(
name|f
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couldn't find Mukti"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
block|{
if|if
condition|(
name|QFontDatabase
argument_list|()
operator|.
name|families
argument_list|(
name|QFontDatabase
operator|::
name|Bengali
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Likhan"
argument_list|)
condition|)
block|{
name|QFont
name|f
argument_list|(
literal|"Likhan"
argument_list|)
decl_stmt|;
specifier|const
name|ShapeTable
name|shape_table
index|[]
init|=
block|{
block|{
block|{
literal|0x9a8
block|,
literal|0x9cd
block|,
literal|0x9af
block|,
literal|0x0
block|}
block|,
block|{
literal|0x1ca
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x09b8
block|,
literal|0x09cd
block|,
literal|0x09af
block|,
literal|0x0
block|}
block|,
block|{
literal|0x020e
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x09b6
block|,
literal|0x09cd
block|,
literal|0x09af
block|,
literal|0x0
block|}
block|,
block|{
literal|0x01f4
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x09b7
block|,
literal|0x09cd
block|,
literal|0x09af
block|,
literal|0x0
block|}
block|,
block|{
literal|0x01fe
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x09b0
block|,
literal|0x09cd
block|,
literal|0x09a8
block|,
literal|0x09cd
block|,
literal|0x200d
block|,
literal|0x0
block|}
block|,
block|{
literal|0x10b
block|,
literal|0x167
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0
block|}
block|,
block|{
literal|0
block|}
block|}
block|}
decl_stmt|;
specifier|const
name|ShapeTable
modifier|*
name|s
init|=
name|shape_table
decl_stmt|;
while|while
condition|(
name|s
operator|->
name|unicode
index|[
literal|0
index|]
condition|)
block|{
name|QVERIFY
argument_list|(
name|shaping
argument_list|(
name|f
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couldn't find Likhan"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_X11
end_ifdef
begin_function
DECL|function|gurmukhi
name|void
name|tst_QTextScriptEngine
operator|::
name|gurmukhi
parameter_list|()
block|{
if|if
condition|(
operator|!
name|haveTestFonts
condition|)
block|{
name|QSKIP
argument_list|(
literal|"Test fonts are not available"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
name|QFontDatabase
argument_list|()
operator|.
name|families
argument_list|(
name|QFontDatabase
operator|::
name|Gurmukhi
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Lohit Punjabi"
argument_list|)
condition|)
block|{
name|QFont
name|f
argument_list|(
literal|"Lohit Punjabi"
argument_list|)
decl_stmt|;
specifier|const
name|ShapeTable
name|shape_table
index|[]
init|=
block|{
block|{
block|{
literal|0xA15
block|,
literal|0xA4D
block|,
literal|0xa39
block|,
literal|0x0
block|}
block|,
block|{
literal|0x3b
block|,
literal|0x8b
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0
block|}
block|,
block|{
literal|0
block|}
block|}
block|}
decl_stmt|;
specifier|const
name|ShapeTable
modifier|*
name|s
init|=
name|shape_table
decl_stmt|;
while|while
condition|(
name|s
operator|->
name|unicode
index|[
literal|0
index|]
condition|)
block|{
name|QVERIFY
argument_list|(
name|shaping
argument_list|(
name|f
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couldn't find Lohit Punjabi"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_X11
end_ifdef
begin_function
DECL|function|oriya
name|void
name|tst_QTextScriptEngine
operator|::
name|oriya
parameter_list|()
block|{
if|if
condition|(
operator|!
name|haveTestFonts
condition|)
block|{
name|QSKIP
argument_list|(
literal|"Test fonts are not available"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
name|QFontDatabase
argument_list|()
operator|.
name|families
argument_list|(
name|QFontDatabase
operator|::
name|Oriya
argument_list|)
operator|.
name|contains
argument_list|(
literal|"utkal"
argument_list|)
condition|)
block|{
name|QFont
name|f
argument_list|(
literal|"utkal"
argument_list|)
decl_stmt|;
specifier|const
name|ShapeTable
name|shape_table
index|[]
init|=
block|{
block|{
block|{
literal|0xb15
block|,
literal|0xb4d
block|,
literal|0xb24
block|,
literal|0xb4d
block|,
literal|0xb30
block|,
literal|0x0
block|}
block|,
block|{
literal|0x150
block|,
literal|0x125
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xb24
block|,
literal|0xb4d
block|,
literal|0xb24
block|,
literal|0xb4d
block|,
literal|0xb2c
block|,
literal|0x0
block|}
block|,
block|{
literal|0x151
block|,
literal|0x120
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xb28
block|,
literal|0xb4d
block|,
literal|0xb24
block|,
literal|0xb4d
block|,
literal|0xb2c
block|,
literal|0x0
block|}
block|,
block|{
literal|0x152
block|,
literal|0x120
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xb28
block|,
literal|0xb4d
block|,
literal|0xb24
block|,
literal|0xb4d
block|,
literal|0xb2c
block|,
literal|0x0
block|}
block|,
block|{
literal|0x152
block|,
literal|0x120
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xb28
block|,
literal|0xb4d
block|,
literal|0xb24
block|,
literal|0xb4d
block|,
literal|0xb30
block|,
literal|0x0
block|}
block|,
block|{
literal|0x176
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xb38
block|,
literal|0xb4d
block|,
literal|0xb24
block|,
literal|0xb4d
block|,
literal|0xb30
block|,
literal|0x0
block|}
block|,
block|{
literal|0x177
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xb28
block|,
literal|0xb4d
block|,
literal|0xb24
block|,
literal|0xb4d
block|,
literal|0xb30
block|,
literal|0xb4d
block|,
literal|0xb2f
block|,
literal|0x0
block|}
block|,
block|{
literal|0x176
block|,
literal|0x124
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0
block|}
block|,
block|{
literal|0
block|}
block|}
block|}
decl_stmt|;
specifier|const
name|ShapeTable
modifier|*
name|s
init|=
name|shape_table
decl_stmt|;
while|while
condition|(
name|s
operator|->
name|unicode
index|[
literal|0
index|]
condition|)
block|{
name|QVERIFY
argument_list|(
name|shaping
argument_list|(
name|f
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couldn't find utkal"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_X11
end_ifdef
begin_function
DECL|function|tamil
name|void
name|tst_QTextScriptEngine
operator|::
name|tamil
parameter_list|()
block|{
if|if
condition|(
operator|!
name|haveTestFonts
condition|)
block|{
name|QSKIP
argument_list|(
literal|"Test fonts are not available"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
name|QFontDatabase
argument_list|()
operator|.
name|families
argument_list|(
name|QFontDatabase
operator|::
name|Tamil
argument_list|)
operator|.
name|contains
argument_list|(
literal|"AkrutiTml1"
argument_list|)
condition|)
block|{
name|QFont
name|f
argument_list|(
literal|"AkrutiTml1"
argument_list|)
decl_stmt|;
specifier|const
name|ShapeTable
name|shape_table
index|[]
init|=
block|{
block|{
block|{
literal|0x0b95
block|,
literal|0x0bc2
block|,
literal|0x0
block|}
block|,
block|{
literal|0x004e
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0bae
block|,
literal|0x0bc2
block|,
literal|0x0
block|}
block|,
block|{
literal|0x009e
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0b9a
block|,
literal|0x0bc2
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0058
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0b99
block|,
literal|0x0bc2
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0053
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0bb0
block|,
literal|0x0bc2
block|,
literal|0x0
block|}
block|,
block|{
literal|0x00a8
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0ba4
block|,
literal|0x0bc2
block|,
literal|0x0
block|}
block|,
block|{
literal|0x008e
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0b9f
block|,
literal|0x0bc2
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0062
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0b95
block|,
literal|0x0bc6
block|,
literal|0x0
block|}
block|,
block|{
literal|0x000a
block|,
literal|0x0031
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0b95
block|,
literal|0x0bca
block|,
literal|0x0
block|}
block|,
block|{
literal|0x000a
block|,
literal|0x0031
block|,
literal|0x0007
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0b95
block|,
literal|0x0bc6
block|,
literal|0x0bbe
block|,
literal|0x0
block|}
block|,
block|{
literal|0x000a
block|,
literal|0x0031
block|,
literal|0x007
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0b95
block|,
literal|0x0bcd
block|,
literal|0x0bb7
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0049
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0b95
block|,
literal|0x0bcd
block|,
literal|0x0bb7
block|,
literal|0x0bca
block|,
literal|0x0
block|}
block|,
block|{
literal|0x000a
block|,
literal|0x0049
block|,
literal|0x007
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0b95
block|,
literal|0x0bcd
block|,
literal|0x0bb7
block|,
literal|0x0bc6
block|,
literal|0x0bbe
block|,
literal|0x0
block|}
block|,
block|{
literal|0x000a
block|,
literal|0x0049
block|,
literal|0x007
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0b9f
block|,
literal|0x0bbf
block|,
literal|0x0
block|}
block|,
block|{
literal|0x005f
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0b9f
block|,
literal|0x0bc0
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0060
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0bb2
block|,
literal|0x0bc0
block|,
literal|0x0
block|}
block|,
block|{
literal|0x00ab
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0bb2
block|,
literal|0x0bbf
block|,
literal|0x0
block|}
block|,
block|{
literal|0x00aa
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0bb0
block|,
literal|0x0bcd
block|,
literal|0x0
block|}
block|,
block|{
literal|0x00a4
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0bb0
block|,
literal|0x0bbf
block|,
literal|0x0
block|}
block|,
block|{
literal|0x00a5
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0bb0
block|,
literal|0x0bc0
block|,
literal|0x0
block|}
block|,
block|{
literal|0x00a6
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0b83
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0025
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0b83
block|,
literal|0x0b95
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0025
block|,
literal|0x0031
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xb95
block|,
literal|0xbc6
block|,
literal|0xbbe
block|,
literal|0x0
block|}
block|,
block|{
literal|0xa
block|,
literal|0x31
block|,
literal|0x7
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xb95
block|,
literal|0xbc7
block|,
literal|0xbbe
block|,
literal|0x0
block|}
block|,
block|{
literal|0xb
block|,
literal|0x31
block|,
literal|0x7
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xb95
block|,
literal|0xbc6
block|,
literal|0xbd7
block|,
literal|0x0
block|}
block|,
block|{
literal|0xa
block|,
literal|0x31
block|,
literal|0x40
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0
block|}
block|,
block|{
literal|0
block|}
block|}
block|}
decl_stmt|;
specifier|const
name|ShapeTable
modifier|*
name|s
init|=
name|shape_table
decl_stmt|;
while|while
condition|(
name|s
operator|->
name|unicode
index|[
literal|0
index|]
condition|)
block|{
name|QVERIFY
argument_list|(
name|shaping
argument_list|(
name|f
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couldn't find AkrutiTml1"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_X11
end_ifdef
begin_function
DECL|function|telugu
name|void
name|tst_QTextScriptEngine
operator|::
name|telugu
parameter_list|()
block|{
if|if
condition|(
operator|!
name|haveTestFonts
condition|)
block|{
name|QSKIP
argument_list|(
literal|"Test fonts are not available"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
name|QFontDatabase
argument_list|()
operator|.
name|families
argument_list|(
name|QFontDatabase
operator|::
name|Telugu
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Pothana2000"
argument_list|)
condition|)
block|{
name|QFont
name|f
argument_list|(
literal|"Pothana2000"
argument_list|)
decl_stmt|;
specifier|const
name|ShapeTable
name|shape_table
index|[]
init|=
block|{
block|{
block|{
literal|0xc15
block|,
literal|0xc4d
block|,
literal|0x0
block|}
block|,
block|{
literal|0xbb
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xc15
block|,
literal|0xc4d
block|,
literal|0xc37
block|,
literal|0x0
block|}
block|,
block|{
literal|0x4b
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xc15
block|,
literal|0xc4d
block|,
literal|0xc37
block|,
literal|0xc4d
block|,
literal|0x0
block|}
block|,
block|{
literal|0xe0
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xc15
block|,
literal|0xc4d
block|,
literal|0xc37
block|,
literal|0xc4d
block|,
literal|0xc23
block|,
literal|0x0
block|}
block|,
block|{
literal|0x4b
block|,
literal|0x91
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xc15
block|,
literal|0xc4d
block|,
literal|0xc30
block|,
literal|0x0
block|}
block|,
block|{
literal|0x5a
block|,
literal|0xb2
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xc15
block|,
literal|0xc4d
block|,
literal|0xc30
block|,
literal|0xc4d
block|,
literal|0x0
block|}
block|,
block|{
literal|0xbb
block|,
literal|0xb2
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xc15
block|,
literal|0xc4d
block|,
literal|0xc30
block|,
literal|0xc4d
block|,
literal|0xc15
block|,
literal|0x0
block|}
block|,
block|{
literal|0x5a
block|,
literal|0xb2
block|,
literal|0x83
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xc15
block|,
literal|0xc4d
block|,
literal|0xc30
block|,
literal|0xc3f
block|,
literal|0x0
block|}
block|,
block|{
literal|0xe2
block|,
literal|0xb2
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xc15
block|,
literal|0xc4d
block|,
literal|0xc15
block|,
literal|0xc48
block|,
literal|0x0
block|}
block|,
block|{
literal|0xe6
block|,
literal|0xb3
block|,
literal|0x83
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xc15
block|,
literal|0xc4d
block|,
literal|0xc30
block|,
literal|0xc48
block|,
literal|0x0
block|}
block|,
block|{
literal|0xe6
block|,
literal|0xb3
block|,
literal|0x9f
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xc15
block|,
literal|0xc46
block|,
literal|0xc56
block|,
literal|0x0
block|}
block|,
block|{
literal|0xe6
block|,
literal|0xb3
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0
block|}
block|,
block|{
literal|0
block|}
block|}
block|}
decl_stmt|;
specifier|const
name|ShapeTable
modifier|*
name|s
init|=
name|shape_table
decl_stmt|;
while|while
condition|(
name|s
operator|->
name|unicode
index|[
literal|0
index|]
condition|)
block|{
name|QVERIFY
argument_list|(
name|shaping
argument_list|(
name|f
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couldn't find Pothana2000"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_X11
end_ifdef
begin_function
DECL|function|kannada
name|void
name|tst_QTextScriptEngine
operator|::
name|kannada
parameter_list|()
block|{
block|{
if|if
condition|(
name|QFontDatabase
argument_list|()
operator|.
name|families
argument_list|(
name|QFontDatabase
operator|::
name|Kannada
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Sampige"
argument_list|)
condition|)
block|{
name|QFont
name|f
argument_list|(
literal|"Sampige"
argument_list|)
decl_stmt|;
specifier|const
name|ShapeTable
name|shape_table
index|[]
init|=
block|{
block|{
block|{
literal|0x0ca8
block|,
literal|0x0ccd
block|,
literal|0x0ca8
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0049
block|,
literal|0x00ba
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0ca8
block|,
literal|0x0ccd
block|,
literal|0x0ca1
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0049
block|,
literal|0x00b3
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0caf
block|,
literal|0x0cc2
block|,
literal|0x0
block|}
block|,
block|{
literal|0x004f
block|,
literal|0x005d
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0ce0
block|,
literal|0x0
block|}
block|,
block|{
literal|0x006a
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0ce6
block|,
literal|0x0ce7
block|,
literal|0x0ce8
block|,
literal|0x0
block|}
block|,
block|{
literal|0x006b
block|,
literal|0x006c
block|,
literal|0x006d
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0cb5
block|,
literal|0x0ccb
block|,
literal|0x0
block|}
block|,
block|{
literal|0x015f
block|,
literal|0x0067
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0cb0
block|,
literal|0x0ccd
block|,
literal|0x0cae
block|,
literal|0x0
block|}
block|,
block|{
literal|0x004e
block|,
literal|0x0082
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0cb0
block|,
literal|0x0ccd
block|,
literal|0x0c95
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0036
block|,
literal|0x0082
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0c95
block|,
literal|0x0ccd
block|,
literal|0x0cb0
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0036
block|,
literal|0x00c1
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0cb0
block|,
literal|0x0ccd
block|,
literal|0x200d
block|,
literal|0x0c95
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0050
block|,
literal|0x00a7
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0
block|}
block|,
block|{
literal|0
block|}
block|}
block|}
decl_stmt|;
specifier|const
name|ShapeTable
modifier|*
name|s
init|=
name|shape_table
decl_stmt|;
while|while
condition|(
name|s
operator|->
name|unicode
index|[
literal|0
index|]
condition|)
block|{
name|QVERIFY
argument_list|(
name|shaping
argument_list|(
name|f
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couldn't find Sampige"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
block|{
if|if
condition|(
name|QFontDatabase
argument_list|()
operator|.
name|families
argument_list|(
name|QFontDatabase
operator|::
name|Kannada
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Tunga"
argument_list|)
condition|)
block|{
name|QFont
name|f
argument_list|(
literal|"Tunga"
argument_list|)
decl_stmt|;
specifier|const
name|ShapeTable
name|shape_table
index|[]
init|=
block|{
block|{
block|{
literal|0x0cb7
block|,
literal|0x0cc6
block|,
literal|0x0
block|}
block|,
block|{
literal|0x00b0
block|,
literal|0x006c
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0cb7
block|,
literal|0x0ccd
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0163
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xc95
block|,
literal|0xcbf
block|,
literal|0xcd5
block|,
literal|0x0
block|}
block|,
block|{
literal|0x114
block|,
literal|0x73
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xc95
block|,
literal|0xcc6
block|,
literal|0xcd5
block|,
literal|0x0
block|}
block|,
block|{
literal|0x90
block|,
literal|0x6c
block|,
literal|0x73
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xc95
block|,
literal|0xcc6
block|,
literal|0xcd6
block|,
literal|0x0
block|}
block|,
block|{
literal|0x90
block|,
literal|0x6c
block|,
literal|0x74
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xc95
block|,
literal|0xcc6
block|,
literal|0xcc2
block|,
literal|0x0
block|}
block|,
block|{
literal|0x90
block|,
literal|0x6c
block|,
literal|0x69
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xc95
block|,
literal|0xcca
block|,
literal|0xcd5
block|,
literal|0x0
block|}
block|,
block|{
literal|0x90
block|,
literal|0x6c
block|,
literal|0x69
block|,
literal|0x73
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0
block|}
block|,
block|{
literal|0
block|}
block|}
block|}
decl_stmt|;
specifier|const
name|ShapeTable
modifier|*
name|s
init|=
name|shape_table
decl_stmt|;
while|while
condition|(
name|s
operator|->
name|unicode
index|[
literal|0
index|]
condition|)
block|{
name|QVERIFY
argument_list|(
name|shaping
argument_list|(
name|f
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couldn't find Tunga"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_X11
end_ifdef
begin_function
DECL|function|malayalam
name|void
name|tst_QTextScriptEngine
operator|::
name|malayalam
parameter_list|()
block|{
if|if
condition|(
operator|!
name|haveTestFonts
condition|)
block|{
name|QSKIP
argument_list|(
literal|"Test fonts are not available"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
name|QFontDatabase
argument_list|()
operator|.
name|families
argument_list|(
name|QFontDatabase
operator|::
name|Malayalam
argument_list|)
operator|.
name|contains
argument_list|(
literal|"AkrutiMal2"
argument_list|)
condition|)
block|{
name|QFont
name|f
argument_list|(
literal|"AkrutiMal2"
argument_list|)
decl_stmt|;
specifier|const
name|ShapeTable
name|shape_table
index|[]
init|=
block|{
block|{
block|{
literal|0x0d15
block|,
literal|0x0d46
block|,
literal|0x0
block|}
block|,
block|{
literal|0x005e
block|,
literal|0x0034
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0d15
block|,
literal|0x0d47
block|,
literal|0x0
block|}
block|,
block|{
literal|0x005f
block|,
literal|0x0034
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0d15
block|,
literal|0x0d4b
block|,
literal|0x0
block|}
block|,
block|{
literal|0x005f
block|,
literal|0x0034
block|,
literal|0x0058
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0d15
block|,
literal|0x0d48
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0060
block|,
literal|0x0034
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0d15
block|,
literal|0x0d4a
block|,
literal|0x0
block|}
block|,
block|{
literal|0x005e
block|,
literal|0x0034
block|,
literal|0x0058
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0d30
block|,
literal|0x0d4d
block|,
literal|0x0d15
block|,
literal|0x0
block|}
block|,
block|{
literal|0x009e
block|,
literal|0x0034
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0d15
block|,
literal|0x0d4d
block|,
literal|0x0d35
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0034
block|,
literal|0x007a
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0d15
block|,
literal|0x0d4d
block|,
literal|0x0d2f
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0034
block|,
literal|0x00a2
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0d1f
block|,
literal|0x0d4d
block|,
literal|0x0d1f
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0069
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0d26
block|,
literal|0x0d4d
block|,
literal|0x0d26
block|,
literal|0x0
block|}
block|,
block|{
literal|0x0074
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0d30
block|,
literal|0x0d4d
block|,
literal|0x0
block|}
block|,
block|{
literal|0x009e
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0d30
block|,
literal|0x0d4d
block|,
literal|0x200c
block|,
literal|0x0
block|}
block|,
block|{
literal|0x009e
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x0d30
block|,
literal|0x0d4d
block|,
literal|0x200d
block|,
literal|0x0
block|}
block|,
block|{
literal|0x009e
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xd15
block|,
literal|0xd46
block|,
literal|0xd3e
block|,
literal|0x0
block|}
block|,
block|{
literal|0x5e
block|,
literal|0x34
block|,
literal|0x58
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xd15
block|,
literal|0xd47
block|,
literal|0xd3e
block|,
literal|0x0
block|}
block|,
block|{
literal|0x5f
block|,
literal|0x34
block|,
literal|0x58
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xd15
block|,
literal|0xd46
block|,
literal|0xd57
block|,
literal|0x0
block|}
block|,
block|{
literal|0x5e
block|,
literal|0x34
block|,
literal|0x65
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xd15
block|,
literal|0xd57
block|,
literal|0x0
block|}
block|,
block|{
literal|0x34
block|,
literal|0x65
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0
block|}
block|,
block|{
literal|0
block|}
block|}
block|}
decl_stmt|;
specifier|const
name|ShapeTable
modifier|*
name|s
init|=
name|shape_table
decl_stmt|;
while|while
condition|(
name|s
operator|->
name|unicode
index|[
literal|0
index|]
condition|)
block|{
name|QVERIFY
argument_list|(
name|shaping
argument_list|(
name|f
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couldn't find AkrutiMal2"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
block|{
if|if
condition|(
name|QFontDatabase
argument_list|()
operator|.
name|families
argument_list|(
name|QFontDatabase
operator|::
name|Malayalam
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Rachana"
argument_list|)
condition|)
block|{
name|QFont
name|f
argument_list|(
literal|"Rachana"
argument_list|)
decl_stmt|;
specifier|const
name|ShapeTable
name|shape_table
index|[]
init|=
block|{
block|{
block|{
literal|0xd37
block|,
literal|0xd4d
block|,
literal|0xd1f
block|,
literal|0xd4d
block|,
literal|0xd30
block|,
literal|0xd40
block|,
literal|0x0
block|}
block|,
block|{
literal|0x385
block|,
literal|0xa3
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xd2f
block|,
literal|0xd4d
block|,
literal|0xd15
block|,
literal|0xd4d
block|,
literal|0xd15
block|,
literal|0xd41
block|,
literal|0x0
block|}
block|,
block|{
literal|0x2ff
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xd33
block|,
literal|0xd4d
block|,
literal|0xd33
block|,
literal|0x0
block|}
block|,
block|{
literal|0x3f8
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xd2f
block|,
literal|0xd4d
block|,
literal|0xd15
block|,
literal|0xd4d
block|,
literal|0xd15
block|,
literal|0xd41
block|,
literal|0x0
block|}
block|,
block|{
literal|0x2ff
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xd30
block|,
literal|0xd4d
block|,
literal|0x200d
block|,
literal|0xd35
block|,
literal|0xd4d
block|,
literal|0xd35
block|,
literal|0x0
block|}
block|,
block|{
literal|0xf3
block|,
literal|0x350
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0
block|}
block|,
block|{
literal|0
block|}
block|}
block|}
decl_stmt|;
specifier|const
name|ShapeTable
modifier|*
name|s
init|=
name|shape_table
decl_stmt|;
while|while
condition|(
name|s
operator|->
name|unicode
index|[
literal|0
index|]
condition|)
block|{
name|QVERIFY
argument_list|(
name|shaping
argument_list|(
name|f
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couldn't find Rachana"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_X11
end_ifdef
begin_function
DECL|function|sinhala
name|void
name|tst_QTextScriptEngine
operator|::
name|sinhala
parameter_list|()
block|{
if|if
condition|(
operator|!
name|haveTestFonts
condition|)
block|{
name|QSKIP
argument_list|(
literal|"Test fonts are not available"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
name|QFontDatabase
argument_list|()
operator|.
name|families
argument_list|(
name|QFontDatabase
operator|::
name|Sinhala
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Malithi Web"
argument_list|)
condition|)
block|{
name|QFont
name|f
argument_list|(
literal|"Malithi Web"
argument_list|)
decl_stmt|;
specifier|const
name|ShapeTable
name|shape_table
index|[]
init|=
block|{
block|{
block|{
literal|0xd9a
block|,
literal|0xdd9
block|,
literal|0xdcf
block|,
literal|0x0
block|}
block|,
block|{
literal|0x4a
block|,
literal|0x61
block|,
literal|0x42
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xd9a
block|,
literal|0xdd9
block|,
literal|0xddf
block|,
literal|0x0
block|}
block|,
block|{
literal|0x4a
block|,
literal|0x61
block|,
literal|0x50
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xd9a
block|,
literal|0xdd9
block|,
literal|0xdca
block|,
literal|0x0
block|}
block|,
block|{
literal|0x4a
block|,
literal|0x62
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xd9a
block|,
literal|0xddc
block|,
literal|0xdca
block|,
literal|0x0
block|}
block|,
block|{
literal|0x4a
block|,
literal|0x61
block|,
literal|0x42
block|,
literal|0x41
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xd9a
block|,
literal|0xdda
block|,
literal|0x0
block|}
block|,
block|{
literal|0x4a
block|,
literal|0x62
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0xd9a
block|,
literal|0xddd
block|,
literal|0x0
block|}
block|,
block|{
literal|0x4a
block|,
literal|0x61
block|,
literal|0x42
block|,
literal|0x41
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0
block|}
block|,
block|{
literal|0
block|}
block|}
block|}
decl_stmt|;
specifier|const
name|ShapeTable
modifier|*
name|s
init|=
name|shape_table
decl_stmt|;
while|while
condition|(
name|s
operator|->
name|unicode
index|[
literal|0
index|]
condition|)
block|{
name|QVERIFY
argument_list|(
name|shaping
argument_list|(
name|f
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couldn't find Malithi Web"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_X11
end_ifdef
begin_function
DECL|function|khmer
name|void
name|tst_QTextScriptEngine
operator|::
name|khmer
parameter_list|()
block|{
if|if
condition|(
operator|!
name|haveTestFonts
condition|)
block|{
name|QSKIP
argument_list|(
literal|"Test fonts are not available"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
name|QFontDatabase
argument_list|()
operator|.
name|families
argument_list|(
name|QFontDatabase
operator|::
name|Khmer
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Khmer OS"
argument_list|)
condition|)
block|{
name|QFont
name|f
argument_list|(
literal|"Khmer OS"
argument_list|)
decl_stmt|;
specifier|const
name|ShapeTable
name|shape_table
index|[]
init|=
block|{
block|{
block|{
literal|0x179a
block|,
literal|0x17cd
block|,
literal|0x0
block|}
block|,
block|{
literal|0x24c
block|,
literal|0x27f
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x179f
block|,
literal|0x17c5
block|,
literal|0x0
block|}
block|,
block|{
literal|0x273
block|,
literal|0x203
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x1790
block|,
literal|0x17d2
block|,
literal|0x1784
block|,
literal|0x17c3
block|,
literal|0x0
block|}
block|,
block|{
literal|0x275
block|,
literal|0x242
block|,
literal|0x182
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x179a
block|,
literal|0x0
block|}
block|,
block|{
literal|0x24c
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x1781
block|,
literal|0x17d2
block|,
literal|0x1798
block|,
literal|0x17c2
block|,
literal|0x0
block|}
block|,
block|{
literal|0x274
block|,
literal|0x233
block|,
literal|0x197
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x1798
block|,
literal|0x17b6
block|,
literal|0x0
block|}
block|,
block|{
literal|0x1cb
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x179a
block|,
literal|0x17b8
block|,
literal|0x0
block|}
block|,
block|{
literal|0x24c
block|,
literal|0x26a
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x1787
block|,
literal|0x17b6
block|,
literal|0x0
block|}
block|,
block|{
literal|0x1ba
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x1798
block|,
literal|0x17d2
block|,
literal|0x1796
block|,
literal|0x17bb
block|,
literal|0x0
block|}
block|,
block|{
literal|0x24a
block|,
literal|0x195
block|,
literal|0x26d
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0
block|}
block|,
block|{
literal|0
block|}
block|}
block|}
decl_stmt|;
specifier|const
name|ShapeTable
modifier|*
name|s
init|=
name|shape_table
decl_stmt|;
while|while
condition|(
name|s
operator|->
name|unicode
index|[
literal|0
index|]
condition|)
block|{
name|QVERIFY
argument_list|(
name|shaping
argument_list|(
name|f
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couldn't find Khmer OS"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_X11
end_ifdef
begin_function
DECL|function|linearB
name|void
name|tst_QTextScriptEngine
operator|::
name|linearB
parameter_list|()
block|{
if|if
condition|(
operator|!
name|haveTestFonts
condition|)
block|{
name|QSKIP
argument_list|(
literal|"Test fonts are not available"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
name|QFontDatabase
argument_list|()
operator|.
name|families
argument_list|(
name|QFontDatabase
operator|::
name|Any
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Penuturesu"
argument_list|)
condition|)
block|{
name|QFont
name|f
argument_list|(
literal|"Penuturesu"
argument_list|)
decl_stmt|;
specifier|const
name|ShapeTable
name|shape_table
index|[]
init|=
block|{
block|{
block|{
literal|0xd800
block|,
literal|0xdc01
block|,
literal|0xd800
block|,
literal|0xdc02
block|,
literal|0xd800
block|,
literal|0xdc03
block|,
literal|0
block|}
block|,
block|{
literal|0x5
block|,
literal|0x6
block|,
literal|0x7
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|0
block|}
block|,
block|{
literal|0
block|}
block|}
block|}
decl_stmt|;
specifier|const
name|ShapeTable
modifier|*
name|s
init|=
name|shape_table
decl_stmt|;
while|while
condition|(
name|s
operator|->
name|unicode
index|[
literal|0
index|]
condition|)
block|{
name|QVERIFY
argument_list|(
name|shaping
argument_list|(
name|f
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couldn't find Penuturesu"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
end_if
begin_function
DECL|function|decomposedShaping
specifier|static
name|bool
name|decomposedShaping
parameter_list|(
specifier|const
name|QFont
modifier|&
name|f
parameter_list|,
specifier|const
name|QChar
modifier|&
name|ch
parameter_list|)
block|{
name|QString
name|str
init|=
name|QString
argument_list|()
operator|.
name|append
argument_list|(
name|ch
argument_list|)
decl_stmt|;
name|QTextLayout
name|layout
argument_list|(
name|str
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|QTextEngine
modifier|*
name|e
init|=
name|layout
operator|.
name|d
decl_stmt|;
name|e
operator|->
name|itemize
argument_list|()
expr_stmt|;
name|e
operator|->
name|shape
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTextLayout
name|decomposed
argument_list|(
name|str
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_D
argument_list|)
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|QTextEngine
modifier|*
name|de
init|=
name|decomposed
operator|.
name|d
decl_stmt|;
name|de
operator|->
name|itemize
argument_list|()
expr_stmt|;
name|de
operator|->
name|shape
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|layoutData
operator|->
name|items
index|[
literal|0
index|]
operator|.
name|num_glyphs
operator|!=
name|de
operator|->
name|layoutData
operator|->
name|items
index|[
literal|0
index|]
operator|.
name|num_glyphs
condition|)
goto|goto
name|error
goto|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|e
operator|->
name|layoutData
operator|->
name|items
index|[
literal|0
index|]
operator|.
name|num_glyphs
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|(
name|e
operator|->
name|layoutData
operator|->
name|glyphLayout
operator|.
name|glyphs
index|[
name|i
index|]
operator|&
literal|0xffffff
operator|)
operator|!=
operator|(
name|de
operator|->
name|layoutData
operator|->
name|glyphLayout
operator|.
name|glyphs
index|[
name|i
index|]
operator|&
literal|0xffffff
operator|)
condition|)
goto|goto
name|error
goto|;
block|}
return|return
literal|true
return|;
name|error
label|:
name|qDebug
argument_list|(
literal|"%s: decomposedShaping of char %4x failed, nglyphs=%d, decomposed nglyphs %d"
argument_list|,
name|f
operator|.
name|family
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|ch
operator|.
name|unicode
argument_list|()
argument_list|,
name|e
operator|->
name|layoutData
operator|->
name|items
index|[
literal|0
index|]
operator|.
name|num_glyphs
argument_list|,
name|de
operator|->
name|layoutData
operator|->
name|items
index|[
literal|0
index|]
operator|.
name|num_glyphs
argument_list|)
expr_stmt|;
name|str
operator|=
literal|""
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|e
operator|->
name|layoutData
operator|->
name|items
index|[
literal|0
index|]
operator|.
name|num_glyphs
condition|)
block|{
name|str
operator|+=
name|QString
argument_list|(
literal|"%1 "
argument_list|)
operator|.
name|arg
argument_list|(
name|e
operator|->
name|layoutData
operator|->
name|glyphLayout
operator|.
name|glyphs
index|[
name|i
index|]
argument_list|,
literal|4
argument_list|,
literal|16
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
name|qDebug
argument_list|(
literal|"    composed glyph result   = %s"
argument_list|,
name|str
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|str
operator|=
literal|""
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|i
operator|<
name|de
operator|->
name|layoutData
operator|->
name|items
index|[
literal|0
index|]
operator|.
name|num_glyphs
condition|)
block|{
name|str
operator|+=
name|QString
argument_list|(
literal|"%1 "
argument_list|)
operator|.
name|arg
argument_list|(
name|de
operator|->
name|layoutData
operator|->
name|glyphLayout
operator|.
name|glyphs
index|[
name|i
index|]
argument_list|,
literal|4
argument_list|,
literal|16
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
name|qDebug
argument_list|(
literal|"    decomposed glyph result = %s"
argument_list|,
name|str
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_X11
end_ifdef
begin_function
DECL|function|greek
name|void
name|tst_QTextScriptEngine
operator|::
name|greek
parameter_list|()
block|{
if|if
condition|(
operator|!
name|haveTestFonts
condition|)
block|{
name|QSKIP
argument_list|(
literal|"Test fonts are not available"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
name|QFontDatabase
argument_list|()
operator|.
name|families
argument_list|(
name|QFontDatabase
operator|::
name|Any
argument_list|)
operator|.
name|contains
argument_list|(
literal|"DejaVu Sans"
argument_list|)
condition|)
block|{
name|QFont
name|f
argument_list|(
literal|"DejaVu Sans"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|uc
init|=
literal|0x1f00
init|;
name|uc
operator|<=
literal|0x1fff
condition|;
operator|++
name|uc
control|)
block|{
name|QString
name|str
decl_stmt|;
name|str
operator|.
name|append
argument_list|(
name|uc
argument_list|)
expr_stmt|;
if|if
condition|(
name|str
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_D
argument_list|)
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_C
argument_list|)
operator|!=
name|str
condition|)
block|{
comment|//qDebug()<< "skipping"<< hex<< uc;
continue|continue;
block|}
if|if
condition|(
name|uc
operator|==
literal|0x1fc1
operator|||
name|uc
operator|==
literal|0x1fed
condition|)
continue|continue;
name|QVERIFY
argument_list|(
name|decomposedShaping
argument_list|(
name|f
argument_list|,
name|QChar
argument_list|(
name|uc
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couldn't find DejaVu Sans"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
block|{
if|if
condition|(
name|QFontDatabase
argument_list|()
operator|.
name|families
argument_list|(
name|QFontDatabase
operator|::
name|Any
argument_list|)
operator|.
name|contains
argument_list|(
literal|"SBL Greek"
argument_list|)
condition|)
block|{
name|QFont
name|f
argument_list|(
literal|"SBL Greek"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|uc
init|=
literal|0x1f00
init|;
name|uc
operator|<=
literal|0x1fff
condition|;
operator|++
name|uc
control|)
block|{
name|QString
name|str
decl_stmt|;
name|str
operator|.
name|append
argument_list|(
name|uc
argument_list|)
expr_stmt|;
if|if
condition|(
name|str
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_D
argument_list|)
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_C
argument_list|)
operator|!=
name|str
condition|)
block|{
comment|//qDebug()<< "skipping"<< hex<< uc;
continue|continue;
block|}
if|if
condition|(
name|uc
operator|==
literal|0x1fc1
operator|||
name|uc
operator|==
literal|0x1fed
condition|)
continue|continue;
name|QVERIFY
argument_list|(
name|decomposedShaping
argument_list|(
name|f
argument_list|,
name|QChar
argument_list|(
name|uc
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|const
name|ShapeTable
name|shape_table
index|[]
init|=
block|{
block|{
block|{
literal|0x3b1
block|,
literal|0x300
block|,
literal|0x313
block|,
literal|0x0
block|}
block|,
block|{
literal|0xb8
block|,
literal|0x3d3
block|,
literal|0x3c7
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0x3b1
block|,
literal|0x313
block|,
literal|0x300
block|,
literal|0x0
block|}
block|,
block|{
literal|0xd4
block|,
literal|0x0
block|}
block|}
block|,
block|{
block|{
literal|0
block|}
block|,
block|{
literal|0
block|}
block|}
block|}
decl_stmt|;
specifier|const
name|ShapeTable
modifier|*
name|s
init|=
name|shape_table
decl_stmt|;
while|while
condition|(
name|s
operator|->
name|unicode
index|[
literal|0
index|]
condition|)
block|{
name|QVERIFY
argument_list|(
name|shaping
argument_list|(
name|f
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"couldn't find SBL_grk"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
end_if
begin_function
DECL|function|controlInSyllable_qtbug14204
name|void
name|tst_QTextScriptEngine
operator|::
name|controlInSyllable_qtbug14204
parameter_list|()
block|{
name|QString
name|s
decl_stmt|;
name|s
operator|.
name|append
argument_list|(
name|QChar
argument_list|(
literal|0x0915
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|QChar
argument_list|(
literal|0x094d
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|QChar
argument_list|(
literal|0x200d
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|QChar
argument_list|(
literal|0x0915
argument_list|)
argument_list|)
expr_stmt|;
name|QTextLayout
name|layout
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|QTextEngine
modifier|*
name|e
init|=
name|layout
operator|.
name|d
decl_stmt|;
name|e
operator|->
name|itemize
argument_list|()
expr_stmt|;
name|e
operator|->
name|shape
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|e
operator|->
name|layoutData
operator|->
name|items
index|[
literal|0
index|]
operator|.
name|num_glyphs
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|e
operator|->
name|layoutData
operator|->
name|glyphLayout
operator|.
name|advances_x
index|[
literal|1
index|]
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
operator|&&
name|defined
argument_list|(
name|QT_MAC_USE_COCOA
argument_list|)
operator|)
operator|||
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
end_if
begin_function
DECL|function|combiningMarks_qtbug15675
name|void
name|tst_QTextScriptEngine
operator|::
name|combiningMarks_qtbug15675
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
operator|&&
name|defined
argument_list|(
name|QT_MAC_USE_COCOA
argument_list|)
name|QString
name|s
decl_stmt|;
name|s
operator|.
name|append
argument_list|(
name|QChar
argument_list|(
literal|0x0061
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|QChar
argument_list|(
literal|0x0062
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|QChar
argument_list|(
literal|0x0300
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|QChar
argument_list|(
literal|0x0063
argument_list|)
argument_list|)
expr_stmt|;
name|QFont
name|font
argument_list|(
literal|"Monaco"
argument_list|)
decl_stmt|;
name|QTextLayout
name|layout
argument_list|(
name|s
argument_list|,
name|font
argument_list|)
decl_stmt|;
name|QTextEngine
modifier|*
name|e
init|=
name|layout
operator|.
name|d
decl_stmt|;
name|e
operator|->
name|itemize
argument_list|()
expr_stmt|;
name|e
operator|->
name|shape
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|e
operator|->
name|layoutData
operator|->
name|items
index|[
literal|0
index|]
operator|.
name|num_glyphs
operator|==
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|e
operator|->
name|layoutData
operator|->
name|glyphLayout
operator|.
name|advances_y
index|[
literal|2
index|]
operator|>
literal|0
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
name|QFontDatabase
name|db
decl_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|families
argument_list|()
operator|.
name|contains
argument_list|(
literal|"DejaVu Sans Mono"
argument_list|)
condition|)
block|{
name|QSKIP
argument_list|(
literal|"Required font (DejaVu Sans Mono) doesn't exist, skip test."
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
return|return;
block|}
name|QString
name|s
decl_stmt|;
name|s
operator|.
name|append
argument_list|(
name|QChar
argument_list|(
literal|0x0062
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|QChar
argument_list|(
literal|0x0332
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|QChar
argument_list|(
literal|0x0063
argument_list|)
argument_list|)
expr_stmt|;
name|QTextLayout
name|layout
argument_list|(
name|s
argument_list|,
name|QFont
argument_list|(
literal|"DejaVu Sans Mono"
argument_list|)
argument_list|)
decl_stmt|;
name|QTextEngine
modifier|*
name|e
init|=
name|layout
operator|.
name|d
decl_stmt|;
name|e
operator|->
name|itemize
argument_list|()
expr_stmt|;
name|e
operator|->
name|shape
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|e
operator|->
name|layoutData
operator|->
name|items
index|[
literal|0
index|]
operator|.
name|num_glyphs
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|e
operator|->
name|layoutData
operator|->
name|glyphLayout
operator|.
name|advances_x
index|[
literal|1
index|]
operator|==
literal|0
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|Q_WS_MAC
end_ifndef
begin_function
DECL|function|mirroredChars_data
name|void
name|tst_QTextScriptEngine
operator|::
name|mirroredChars_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"hintingPreference"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Default hinting"
argument_list|)
operator|<<
name|int
argument_list|(
name|QFont
operator|::
name|PreferDefaultHinting
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"No hinting"
argument_list|)
operator|<<
name|int
argument_list|(
name|QFont
operator|::
name|PreferNoHinting
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Vertical hinting"
argument_list|)
operator|<<
name|int
argument_list|(
name|QFont
operator|::
name|PreferVerticalHinting
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Full hinting"
argument_list|)
operator|<<
name|int
argument_list|(
name|QFont
operator|::
name|PreferFullHinting
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mirroredChars
name|void
name|tst_QTextScriptEngine
operator|::
name|mirroredChars
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|hintingPreference
argument_list|)
expr_stmt|;
name|QFont
name|font
decl_stmt|;
name|font
operator|.
name|setHintingPreference
argument_list|(
name|QFont
operator|::
name|HintingPreference
argument_list|(
name|hintingPreference
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|s
decl_stmt|;
name|s
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'('
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|')'
argument_list|)
argument_list|)
expr_stmt|;
name|HB_Glyph
name|leftParenthesis
decl_stmt|;
name|HB_Glyph
name|rightParenthesis
decl_stmt|;
block|{
name|QTextLayout
name|layout
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|layout
operator|.
name|createLine
argument_list|()
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|QTextEngine
modifier|*
name|e
init|=
name|layout
operator|.
name|engine
argument_list|()
decl_stmt|;
name|e
operator|->
name|itemize
argument_list|()
expr_stmt|;
name|e
operator|->
name|shape
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|e
operator|->
name|layoutData
operator|->
name|items
index|[
literal|0
index|]
operator|.
name|num_glyphs
argument_list|,
name|ushort
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QGlyphLayout
modifier|&
name|glyphLayout
init|=
name|e
operator|->
name|layoutData
operator|->
name|glyphLayout
decl_stmt|;
name|leftParenthesis
operator|=
name|glyphLayout
operator|.
name|glyphs
index|[
literal|0
index|]
expr_stmt|;
name|rightParenthesis
operator|=
name|glyphLayout
operator|.
name|glyphs
index|[
literal|1
index|]
expr_stmt|;
block|}
block|{
name|QTextLayout
name|layout
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setFlags
argument_list|(
name|Qt
operator|::
name|TextForceRightToLeft
argument_list|)
expr_stmt|;
name|QTextEngine
modifier|*
name|e
init|=
name|layout
operator|.
name|engine
argument_list|()
decl_stmt|;
name|e
operator|->
name|itemize
argument_list|()
expr_stmt|;
name|e
operator|->
name|shape
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|e
operator|->
name|layoutData
operator|->
name|items
index|[
literal|0
index|]
operator|.
name|num_glyphs
argument_list|,
name|ushort
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QGlyphLayout
modifier|&
name|glyphLayout
init|=
name|e
operator|->
name|layoutData
operator|->
name|glyphLayout
decl_stmt|;
name|QCOMPARE
argument_list|(
name|glyphLayout
operator|.
name|glyphs
index|[
literal|0
index|]
argument_list|,
name|rightParenthesis
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|glyphLayout
operator|.
name|glyphs
index|[
literal|1
index|]
argument_list|,
name|leftParenthesis
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QTextScriptEngine
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qtextscriptengine.moc"
end_include
end_unit
