begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<private/qzipwriter_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qzipreader_p.h>
end_include
begin_class
DECL|class|tst_QZip
class|class
name|tst_QZip
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|basicUnpack
parameter_list|()
function_decl|;
name|void
name|symlinks
parameter_list|()
function_decl|;
name|void
name|readTest
parameter_list|()
function_decl|;
name|void
name|createArchive
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|init
name|void
name|tst_QZip
operator|::
name|init
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QZip
operator|::
name|cleanup
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|basicUnpack
name|void
name|tst_QZip
operator|::
name|basicUnpack
parameter_list|()
block|{
name|QZipReader
name|zip
argument_list|(
name|QString
argument_list|(
name|SRCDIR
argument_list|)
operator|+
literal|"/testdata/test.zip"
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QZipReader
operator|::
name|FileInfo
argument_list|>
name|files
init|=
name|zip
operator|.
name|fileInfoList
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|files
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QZipReader
operator|::
name|FileInfo
name|fi
init|=
name|files
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fi
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|filePath
argument_list|,
name|QString
argument_list|(
literal|"test/"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|uint
argument_list|(
name|fi
operator|.
name|isDir
argument_list|)
argument_list|,
operator|(
name|uint
operator|)
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|uint
argument_list|(
name|fi
operator|.
name|isFile
argument_list|)
argument_list|,
operator|(
name|uint
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|uint
argument_list|(
name|fi
operator|.
name|isSymLink
argument_list|)
argument_list|,
operator|(
name|uint
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|permissions
argument_list|,
name|QFile
operator|::
name|Permissions
argument_list|(
name|QFile
operator|::
name|ReadOwner
operator||
name|QFile
operator|::
name|WriteOwner
operator||
name|QFile
operator|::
name|ExeOwner
operator||
name|QFile
operator|::
name|ReadUser
operator||
name|QFile
operator|::
name|WriteUser
operator||
name|QFile
operator|::
name|ExeUser
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|lastModified
argument_list|,
name|QDateTime
operator|::
name|fromString
argument_list|(
literal|"2005.11.11 13:08:02"
argument_list|,
literal|"yyyy.MM.dd HH:mm:ss"
argument_list|)
argument_list|)
expr_stmt|;
name|fi
operator|=
name|files
operator|.
name|at
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fi
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|filePath
argument_list|,
name|QString
argument_list|(
literal|"test/test.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|uint
argument_list|(
name|fi
operator|.
name|isDir
argument_list|)
argument_list|,
operator|(
name|uint
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|uint
argument_list|(
name|fi
operator|.
name|isFile
argument_list|)
argument_list|,
operator|(
name|uint
operator|)
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|uint
argument_list|(
name|fi
operator|.
name|isSymLink
argument_list|)
argument_list|,
operator|(
name|uint
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fi
operator|.
name|permissions
operator|==
name|QFile
operator|::
name|Permissions
argument_list|(
name|QFile
operator|::
name|ReadOwner
operator||
name|QFile
operator|::
name|WriteOwner
operator||
name|QFile
operator|::
name|ReadUser
operator||
name|QFile
operator|::
name|WriteUser
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|lastModified
argument_list|,
name|QDateTime
operator|::
name|fromString
argument_list|(
literal|"2005.11.11 13:08:02"
argument_list|,
literal|"yyyy.MM.dd HH:mm:ss"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|zip
operator|.
name|fileData
argument_list|(
literal|"test/test.txt"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"content\n"
argument_list|)
argument_list|)
expr_stmt|;
name|fi
operator|=
name|files
operator|.
name|at
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|fi
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|symlinks
name|void
name|tst_QZip
operator|::
name|symlinks
parameter_list|()
block|{
name|QZipReader
name|zip
argument_list|(
name|QString
argument_list|(
name|SRCDIR
argument_list|)
operator|+
literal|"/testdata/symlink.zip"
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QZipReader
operator|::
name|FileInfo
argument_list|>
name|files
init|=
name|zip
operator|.
name|fileInfoList
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|files
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QZipReader
operator|::
name|FileInfo
name|fi
init|=
name|files
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fi
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|filePath
argument_list|,
name|QString
argument_list|(
literal|"symlink"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|fi
operator|.
name|isDir
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|fi
operator|.
name|isFile
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fi
operator|.
name|isSymLink
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|zip
operator|.
name|fileData
argument_list|(
literal|"symlink"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"destination"
argument_list|)
argument_list|)
expr_stmt|;
name|fi
operator|=
name|files
operator|.
name|at
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fi
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|filePath
argument_list|,
name|QString
argument_list|(
literal|"destination"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|fi
operator|.
name|isDir
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fi
operator|.
name|isFile
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|fi
operator|.
name|isSymLink
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readTest
name|void
name|tst_QZip
operator|::
name|readTest
parameter_list|()
block|{
name|QZipReader
name|zip
argument_list|(
literal|"foobar.zip"
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
comment|// non existing file.
name|QList
argument_list|<
name|QZipReader
operator|::
name|FileInfo
argument_list|>
name|files
init|=
name|zip
operator|.
name|fileInfoList
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|files
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QByteArray
name|b
init|=
name|zip
operator|.
name|fileData
argument_list|(
literal|"foobar"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createArchive
name|void
name|tst_QZip
operator|::
name|createArchive
parameter_list|()
block|{
name|QBuffer
name|buffer
decl_stmt|;
name|QZipWriter
name|zip
argument_list|(
operator|&
name|buffer
argument_list|)
decl_stmt|;
name|QByteArray
name|fileContents
argument_list|(
literal|"simple file contents\nline2\n"
argument_list|)
decl_stmt|;
name|zip
operator|.
name|addFile
argument_list|(
literal|"My Filename"
argument_list|,
name|fileContents
argument_list|)
expr_stmt|;
name|zip
operator|.
name|close
argument_list|()
expr_stmt|;
name|QByteArray
name|zipFile
init|=
name|buffer
operator|.
name|buffer
argument_list|()
decl_stmt|;
comment|// QFile f("createArchiveTest.zip"); f.open(QIODevice::WriteOnly); f.write(zipFile); f.close();
name|QBuffer
name|buffer2
argument_list|(
operator|&
name|zipFile
argument_list|)
decl_stmt|;
name|QZipReader
name|zip2
argument_list|(
operator|&
name|buffer2
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QZipReader
operator|::
name|FileInfo
argument_list|>
name|files
init|=
name|zip2
operator|.
name|fileInfoList
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|files
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QZipReader
operator|::
name|FileInfo
name|file
init|=
name|files
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|filePath
argument_list|,
name|QString
argument_list|(
literal|"My Filename"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|uint
argument_list|(
name|file
operator|.
name|isDir
argument_list|)
argument_list|,
operator|(
name|uint
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|uint
argument_list|(
name|file
operator|.
name|isFile
argument_list|)
argument_list|,
operator|(
name|uint
operator|)
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|uint
argument_list|(
name|file
operator|.
name|isSymLink
argument_list|)
argument_list|,
operator|(
name|uint
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|permissions
argument_list|,
name|QFile
operator|::
name|Permissions
argument_list|(
name|QFile
operator|::
name|ReadOwner
operator||
name|QFile
operator|::
name|WriteOwner
operator||
name|QFile
operator|::
name|ReadUser
operator||
name|QFile
operator|::
name|WriteUser
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|,
operator|(
name|long
name|long
operator|)
literal|27
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|zip2
operator|.
name|fileData
argument_list|(
literal|"My Filename"
argument_list|)
argument_list|,
name|fileContents
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QZip
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qzip.moc"
end_include
end_unit
