begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qfont.h>
end_include
begin_include
include|#
directive|include
file|<qfontdatabase.h>
end_include
begin_include
include|#
directive|include
file|<qfontinfo.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qwidget.h>
end_include
begin_include
include|#
directive|include
file|<qlist.h>
end_include
begin_class
DECL|class|tst_QFont
class|class
name|tst_QFont
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QFont
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QFont
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|exactMatch
parameter_list|()
function_decl|;
name|void
name|compare
parameter_list|()
function_decl|;
name|void
name|resolve
parameter_list|()
function_decl|;
name|void
name|resetFont
parameter_list|()
function_decl|;
name|void
name|isCopyOf
parameter_list|()
function_decl|;
name|void
name|setFontRaw
parameter_list|()
function_decl|;
name|void
name|italicOblique
parameter_list|()
function_decl|;
name|void
name|insertAndRemoveSubstitutions
parameter_list|()
function_decl|;
name|void
name|serializeSpacing
parameter_list|()
function_decl|;
name|void
name|lastResortFont
parameter_list|()
function_decl|;
name|void
name|styleName
parameter_list|()
function_decl|;
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|void
name|defaultFamily_data
parameter_list|()
function_decl|;
name|void
name|defaultFamily
parameter_list|()
function_decl|;
endif|#
directive|endif
block|}
class|;
end_class
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QFont
operator|::
name|getSetCheck
parameter_list|()
block|{
name|QFont
name|obj1
decl_stmt|;
comment|// Style QFont::style()
comment|// void QFont::setStyle(Style)
name|obj1
operator|.
name|setStyle
argument_list|(
name|QFont
operator|::
name|Style
argument_list|(
name|QFont
operator|::
name|StyleNormal
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFont
operator|::
name|Style
argument_list|(
name|QFont
operator|::
name|StyleNormal
argument_list|)
argument_list|,
name|obj1
operator|.
name|style
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setStyle
argument_list|(
name|QFont
operator|::
name|Style
argument_list|(
name|QFont
operator|::
name|StyleItalic
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFont
operator|::
name|Style
argument_list|(
name|QFont
operator|::
name|StyleItalic
argument_list|)
argument_list|,
name|obj1
operator|.
name|style
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setStyle
argument_list|(
name|QFont
operator|::
name|Style
argument_list|(
name|QFont
operator|::
name|StyleOblique
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFont
operator|::
name|Style
argument_list|(
name|QFont
operator|::
name|StyleOblique
argument_list|)
argument_list|,
name|obj1
operator|.
name|style
argument_list|()
argument_list|)
expr_stmt|;
comment|// StyleStrategy QFont::styleStrategy()
comment|// void QFont::setStyleStrategy(StyleStrategy)
name|obj1
operator|.
name|setStyleStrategy
argument_list|(
name|QFont
operator|::
name|StyleStrategy
argument_list|(
name|QFont
operator|::
name|PreferDefault
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFont
operator|::
name|StyleStrategy
argument_list|(
name|QFont
operator|::
name|PreferDefault
argument_list|)
argument_list|,
name|obj1
operator|.
name|styleStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setStyleStrategy
argument_list|(
name|QFont
operator|::
name|StyleStrategy
argument_list|(
name|QFont
operator|::
name|PreferBitmap
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFont
operator|::
name|StyleStrategy
argument_list|(
name|QFont
operator|::
name|PreferBitmap
argument_list|)
argument_list|,
name|obj1
operator|.
name|styleStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setStyleStrategy
argument_list|(
name|QFont
operator|::
name|StyleStrategy
argument_list|(
name|QFont
operator|::
name|PreferDevice
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFont
operator|::
name|StyleStrategy
argument_list|(
name|QFont
operator|::
name|PreferDevice
argument_list|)
argument_list|,
name|obj1
operator|.
name|styleStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setStyleStrategy
argument_list|(
name|QFont
operator|::
name|StyleStrategy
argument_list|(
name|QFont
operator|::
name|PreferOutline
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFont
operator|::
name|StyleStrategy
argument_list|(
name|QFont
operator|::
name|PreferOutline
argument_list|)
argument_list|,
name|obj1
operator|.
name|styleStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setStyleStrategy
argument_list|(
name|QFont
operator|::
name|StyleStrategy
argument_list|(
name|QFont
operator|::
name|ForceOutline
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFont
operator|::
name|StyleStrategy
argument_list|(
name|QFont
operator|::
name|ForceOutline
argument_list|)
argument_list|,
name|obj1
operator|.
name|styleStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setStyleStrategy
argument_list|(
name|QFont
operator|::
name|StyleStrategy
argument_list|(
name|QFont
operator|::
name|PreferMatch
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFont
operator|::
name|StyleStrategy
argument_list|(
name|QFont
operator|::
name|PreferMatch
argument_list|)
argument_list|,
name|obj1
operator|.
name|styleStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setStyleStrategy
argument_list|(
name|QFont
operator|::
name|StyleStrategy
argument_list|(
name|QFont
operator|::
name|PreferQuality
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFont
operator|::
name|StyleStrategy
argument_list|(
name|QFont
operator|::
name|PreferQuality
argument_list|)
argument_list|,
name|obj1
operator|.
name|styleStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setStyleStrategy
argument_list|(
name|QFont
operator|::
name|StyleStrategy
argument_list|(
name|QFont
operator|::
name|PreferAntialias
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFont
operator|::
name|StyleStrategy
argument_list|(
name|QFont
operator|::
name|PreferAntialias
argument_list|)
argument_list|,
name|obj1
operator|.
name|styleStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setStyleStrategy
argument_list|(
name|QFont
operator|::
name|StyleStrategy
argument_list|(
name|QFont
operator|::
name|NoAntialias
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFont
operator|::
name|StyleStrategy
argument_list|(
name|QFont
operator|::
name|NoAntialias
argument_list|)
argument_list|,
name|obj1
operator|.
name|styleStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setStyleStrategy
argument_list|(
name|QFont
operator|::
name|StyleStrategy
argument_list|(
name|QFont
operator|::
name|OpenGLCompatible
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFont
operator|::
name|StyleStrategy
argument_list|(
name|QFont
operator|::
name|OpenGLCompatible
argument_list|)
argument_list|,
name|obj1
operator|.
name|styleStrategy
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|tst_QFont
name|tst_QFont
operator|::
name|tst_QFont
parameter_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~tst_QFont
name|tst_QFont
operator|::
name|~
name|tst_QFont
parameter_list|()
block|{  }
end_destructor
begin_function
DECL|function|init
name|void
name|tst_QFont
operator|::
name|init
parameter_list|()
block|{
comment|// TODO: Add initialization code here.
comment|// This will be executed immediately before each test is run.
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QFont
operator|::
name|cleanup
parameter_list|()
block|{
comment|// TODO: Add cleanup code here.
comment|// This will be executed immediately after each test is run.
block|}
end_function
begin_function
DECL|function|exactMatch
name|void
name|tst_QFont
operator|::
name|exactMatch
parameter_list|()
block|{
name|QFont
name|font
decl_stmt|;
comment|// Check if a non-existing font hasn't an exact match
name|font
operator|=
name|QFont
argument_list|(
literal|"BogusFont"
argument_list|,
literal|33
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|font
operator|.
name|exactMatch
argument_list|()
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_WIN
name|QSKIP
argument_list|(
literal|"Exact matching on windows misses a lot because of the sample chars"
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_WS_X11
name|QVERIFY
argument_list|(
name|QFont
argument_list|(
literal|"sans"
argument_list|)
operator|.
name|exactMatch
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFont
argument_list|(
literal|"sans-serif"
argument_list|)
operator|.
name|exactMatch
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFont
argument_list|(
literal|"serif"
argument_list|)
operator|.
name|exactMatch
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFont
argument_list|(
literal|"monospace"
argument_list|)
operator|.
name|exactMatch
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QSKIP
argument_list|(
literal|"This test is bogus on Unix with support for font aliases in fontconfig"
argument_list|)
expr_stmt|;
name|QFontDatabase
name|fdb
decl_stmt|;
name|QList
argument_list|<
name|QFontDatabase
operator|::
name|WritingSystem
argument_list|>
name|systems
init|=
name|fdb
operator|.
name|writingSystems
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|system
init|=
literal|0
init|;
name|system
operator|<
name|systems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|system
control|)
block|{
name|QStringList
name|families
init|=
name|fdb
operator|.
name|families
argument_list|(
name|systems
index|[
name|system
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|families
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|QStringList
operator|::
name|ConstIterator
name|f_it
decl_stmt|,
name|f_end
init|=
name|families
operator|.
name|end
argument_list|()
decl_stmt|;
for|for
control|(
name|f_it
operator|=
name|families
operator|.
name|begin
argument_list|()
init|;
name|f_it
operator|!=
name|f_end
condition|;
operator|++
name|f_it
control|)
block|{
specifier|const
name|QString
modifier|&
name|family
init|=
operator|*
name|f_it
decl_stmt|;
if|if
condition|(
name|family
operator|.
name|contains
argument_list|(
literal|'['
argument_list|)
condition|)
continue|continue;
name|QStringList
name|styles
init|=
name|fdb
operator|.
name|styles
argument_list|(
name|family
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|styles
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QStringList
operator|::
name|ConstIterator
name|s_it
decl_stmt|,
name|s_end
init|=
name|styles
operator|.
name|end
argument_list|()
decl_stmt|;
for|for
control|(
name|s_it
operator|=
name|styles
operator|.
name|begin
argument_list|()
init|;
name|s_it
operator|!=
name|s_end
condition|;
operator|++
name|s_it
control|)
block|{
specifier|const
name|QString
modifier|&
name|style
init|=
operator|*
name|s_it
decl_stmt|;
if|if
condition|(
name|fdb
operator|.
name|isSmoothlyScalable
argument_list|(
name|family
argument_list|,
name|style
argument_list|)
condition|)
block|{
comment|// smoothly scalable font... don't need to load every pointsize
name|font
operator|=
name|fdb
operator|.
name|font
argument_list|(
name|family
argument_list|,
name|style
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|QFontInfo
name|fontinfo
argument_list|(
name|font
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fontinfo
operator|.
name|exactMatch
argument_list|()
condition|)
block|{
comment|// Unfortunately, this can fail, since
comment|// QFontDatabase does not fill in all font
comment|// properties.  Check to make sure that the
comment|// test didn't fail for obvious reasons
if|if
condition|(
name|fontinfo
operator|.
name|family
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|fontinfo
operator|.
name|pointSize
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// this is a box rendering engine... this can happen from
comment|// time to time, especially on X11 with iso10646-1 or
comment|// unknown font encodings
continue|continue;
block|}
ifdef|#
directive|ifdef
name|Q_WS_WIN32
if|if
condition|(
name|font
operator|.
name|family
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"MS "
argument_list|)
operator|||
name|fontinfo
operator|.
name|family
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"MS "
argument_list|)
condition|)
block|{
comment|/* qDebug("Family matching skipped for MS-Alias font: %s, fontinfo: %s",                                font.family().latin1(), fontinfo.family().latin1());                                */
block|}
else|else
endif|#
directive|endif
block|{
if|if
condition|(
operator|!
operator|(
name|font
operator|.
name|family
argument_list|()
operator|==
name|fontinfo
operator|.
name|family
argument_list|()
operator|||
name|fontinfo
operator|.
name|family
argument_list|()
operator|.
name|contains
argument_list|(
name|font
operator|.
name|family
argument_list|()
argument_list|)
operator|||
name|fontinfo
operator|.
name|family
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|qDebug
argument_list|(
literal|"Test about to fail for font: %s, fontinfo: %s"
argument_list|,
name|font
operator|.
name|family
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|fontinfo
operator|.
name|family
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|font
operator|.
name|family
argument_list|()
operator|==
name|fontinfo
operator|.
name|family
argument_list|()
operator|||
name|fontinfo
operator|.
name|family
argument_list|()
operator|.
name|contains
argument_list|(
name|font
operator|.
name|family
argument_list|()
argument_list|)
operator|||
name|fontinfo
operator|.
name|family
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|font
operator|.
name|pointSize
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|QVERIFY
argument_list|(
name|font
operator|.
name|pointSize
argument_list|()
operator|==
name|fontinfo
operator|.
name|pointSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|font
operator|.
name|pixelSize
argument_list|()
operator|==
name|fontinfo
operator|.
name|pixelSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|font
operator|.
name|italic
argument_list|()
operator|==
name|fontinfo
operator|.
name|italic
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|font
operator|.
name|weight
argument_list|()
operator|!=
name|fontinfo
operator|.
name|weight
argument_list|()
condition|)
block|{
name|qDebug
argument_list|(
literal|"font is %s"
argument_list|,
name|font
operator|.
name|toString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|font
operator|.
name|weight
argument_list|()
operator|==
name|fontinfo
operator|.
name|weight
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|font
operator|.
name|setFixedPitch
argument_list|(
operator|!
name|fontinfo
operator|.
name|fixedPitch
argument_list|()
argument_list|)
expr_stmt|;
name|QFontInfo
name|fontinfo1
argument_list|(
name|font
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|fontinfo1
operator|.
name|exactMatch
argument_list|()
argument_list|)
expr_stmt|;
name|font
operator|.
name|setFixedPitch
argument_list|(
name|fontinfo
operator|.
name|fixedPitch
argument_list|()
argument_list|)
expr_stmt|;
name|QFontInfo
name|fontinfo2
argument_list|(
name|font
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fontinfo2
operator|.
name|exactMatch
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|#
directive|if
literal|0
comment|// ############## can only work if we have float point sizes in QFD
block|else {                     QList<int> sizes = fdb.pointSizes(family, style);                     QVERIFY(!sizes.isEmpty());                     QList<int>::ConstIterator z_it, z_end = sizes.end();                     for (z_it = sizes.begin(); z_it != z_end; ++z_it) {                         const int size = *z_it;
comment|// Initialize the font, and check if it is an exact match
block|font = fdb.font(family, style, size);                         QFontInfo fontinfo(font, (QFont::Script) script);                          if (! fontinfo.exactMatch()) {
comment|// Unfortunately, this can fail, since
comment|// QFontDatabase does not fill in all font
comment|// properties.  Check to make sure that the
comment|// test didn't fail for obvious reasons
block|if (fontinfo.family().isEmpty()&& fontinfo.pointSize() == 0) {
comment|// this is a box rendering engine... this can happen from
comment|// time to time, especially on X11 with iso10646-1 or
comment|// unknown font encodings
block|continue;                             }
comment|// no need to skip MS-fonts here it seems
block|if (!(font.family() == fontinfo.family()                                         || fontinfo.family().contains(font.family())                                         || fontinfo.family().isEmpty())) {                                 qDebug("Test about to fail for font: %s, fontinfo: %s",                                         font.family().latin1(), fontinfo.family().latin1());                             }                             QVERIFY(font.family() == fontinfo.family()                                     || fontinfo.family().contains(font.family())                                     || fontinfo.family().isEmpty());                             if (font.pointSize() != -1) {                                 QVERIFY(font.pointSize() == fontinfo.pointSize());                             } else {                                 QVERIFY(font.pixelSize() == fontinfo.pixelSize());                             }                             QVERIFY(font.italic() == fontinfo.italic());                             QVERIFY(font.weight() == fontinfo.weight());                         } else {                             font.setFixedPitch(!fontinfo.fixedPitch());                             QFontInfo fontinfo1(font, (QFont::Script) script);                             QVERIFY( !fontinfo1.exactMatch() );                              font.setFixedPitch(fontinfo.fixedPitch());                             QFontInfo fontinfo2(font, (QFont::Script) script);                             QVERIFY( fontinfo2.exactMatch() );                         }                     }                 }
endif|#
directive|endif
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|italicOblique
name|void
name|tst_QFont
operator|::
name|italicOblique
parameter_list|()
block|{
name|QFontDatabase
name|fdb
decl_stmt|;
name|QStringList
name|families
init|=
name|fdb
operator|.
name|families
argument_list|()
decl_stmt|;
if|if
condition|(
name|families
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|QStringList
operator|::
name|ConstIterator
name|f_it
decl_stmt|,
name|f_end
init|=
name|families
operator|.
name|end
argument_list|()
decl_stmt|;
for|for
control|(
name|f_it
operator|=
name|families
operator|.
name|begin
argument_list|()
init|;
name|f_it
operator|!=
name|f_end
condition|;
operator|++
name|f_it
control|)
block|{
name|QString
name|family
init|=
operator|*
name|f_it
decl_stmt|;
name|QStringList
name|styles
init|=
name|fdb
operator|.
name|styles
argument_list|(
name|family
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|styles
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QStringList
operator|::
name|ConstIterator
name|s_it
decl_stmt|,
name|s_end
init|=
name|styles
operator|.
name|end
argument_list|()
decl_stmt|;
for|for
control|(
name|s_it
operator|=
name|styles
operator|.
name|begin
argument_list|()
init|;
name|s_it
operator|!=
name|s_end
condition|;
operator|++
name|s_it
control|)
block|{
name|QString
name|style
init|=
operator|*
name|s_it
decl_stmt|;
if|if
condition|(
name|fdb
operator|.
name|isSmoothlyScalable
argument_list|(
name|family
argument_list|,
name|style
argument_list|)
condition|)
block|{
if|if
condition|(
name|style
operator|.
name|contains
argument_list|(
literal|"Oblique"
argument_list|)
condition|)
block|{
name|style
operator|.
name|replace
argument_list|(
literal|"Oblique"
argument_list|,
literal|"Italic"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|style
operator|.
name|contains
argument_list|(
literal|"Italic"
argument_list|)
condition|)
block|{
name|style
operator|.
name|replace
argument_list|(
literal|"Italic"
argument_list|,
literal|"Oblique"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
name|QFont
name|f
init|=
name|fdb
operator|.
name|font
argument_list|(
name|family
argument_list|,
name|style
argument_list|,
literal|12
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|italic
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|compare
name|void
name|tst_QFont
operator|::
name|compare
parameter_list|()
block|{
name|QFont
name|font
decl_stmt|;
block|{
name|QFont
name|font2
init|=
name|font
decl_stmt|;
name|font2
operator|.
name|setPointSize
argument_list|(
literal|24
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|font
operator|!=
name|font2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|font
operator|<
name|font2
argument_list|,
operator|!
operator|(
name|font2
operator|<
name|font
operator|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QFont
name|font2
init|=
name|font
decl_stmt|;
name|font2
operator|.
name|setPixelSize
argument_list|(
literal|24
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|font
operator|!=
name|font2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|font
operator|<
name|font2
argument_list|,
operator|!
operator|(
name|font2
operator|<
name|font
operator|)
argument_list|)
expr_stmt|;
block|}
name|font
operator|.
name|setPointSize
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|font
operator|.
name|setItalic
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|font
operator|.
name|setWeight
argument_list|(
name|QFont
operator|::
name|Normal
argument_list|)
expr_stmt|;
name|font
operator|.
name|setUnderline
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|font
operator|.
name|setStrikeOut
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|font
operator|.
name|setOverline
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|{
name|QFont
name|font2
init|=
name|font
decl_stmt|;
name|font2
operator|.
name|setPointSize
argument_list|(
literal|24
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|font
operator|!=
name|font2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|font
operator|<
name|font2
argument_list|,
operator|!
operator|(
name|font2
operator|<
name|font
operator|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QFont
name|font2
init|=
name|font
decl_stmt|;
name|font2
operator|.
name|setPixelSize
argument_list|(
literal|24
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|font
operator|!=
name|font2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|font
operator|<
name|font2
argument_list|,
operator|!
operator|(
name|font2
operator|<
name|font
operator|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QFont
name|font2
init|=
name|font
decl_stmt|;
name|font2
operator|.
name|setItalic
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|font
operator|!=
name|font2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|font
operator|<
name|font2
argument_list|,
operator|!
operator|(
name|font2
operator|<
name|font
operator|)
argument_list|)
expr_stmt|;
name|font2
operator|.
name|setItalic
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|font
operator|==
name|font2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|font
operator|<
name|font2
operator|)
argument_list|)
expr_stmt|;
name|font2
operator|.
name|setWeight
argument_list|(
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|font
operator|!=
name|font2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|font
operator|<
name|font2
argument_list|,
operator|!
operator|(
name|font2
operator|<
name|font
operator|)
argument_list|)
expr_stmt|;
name|font2
operator|.
name|setWeight
argument_list|(
name|QFont
operator|::
name|Normal
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|font
operator|==
name|font2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|font
operator|<
name|font2
operator|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|setUnderline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|font
operator|!=
name|font2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|font
operator|<
name|font2
argument_list|,
operator|!
operator|(
name|font2
operator|<
name|font
operator|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|setUnderline
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|font
operator|==
name|font2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|font
operator|<
name|font2
operator|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|setStrikeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|font
operator|!=
name|font2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|font
operator|<
name|font2
argument_list|,
operator|!
operator|(
name|font2
operator|<
name|font
operator|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|setStrikeOut
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|font
operator|==
name|font2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|font
operator|<
name|font2
operator|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|setOverline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|font
operator|!=
name|font2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|font
operator|<
name|font2
argument_list|,
operator|!
operator|(
name|font2
operator|<
name|font
operator|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|setOverline
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|font
operator|==
name|font2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|font
operator|<
name|font2
operator|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|setCapitalization
argument_list|(
name|QFont
operator|::
name|SmallCaps
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|font
operator|!=
name|font2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|font
operator|<
name|font2
argument_list|,
operator|!
operator|(
name|font2
operator|<
name|font
operator|)
argument_list|)
expr_stmt|;
name|font
operator|.
name|setCapitalization
argument_list|(
name|QFont
operator|::
name|MixedCase
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|font
operator|==
name|font2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|font
operator|<
name|font2
operator|)
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
block|{
name|QFont
name|font1
decl_stmt|,
name|font2
decl_stmt|;
name|font1
operator|.
name|setRawName
argument_list|(
literal|"-Adobe-Helvetica-medium-r-normal--12-120-75-75-p-67-iso8859-1"
argument_list|)
expr_stmt|;
name|font2
operator|.
name|setRawName
argument_list|(
literal|"-Adobe-Helvetica-medium-r-normal--24-240-75-75-p-130-iso8859-1"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|font1
operator|!=
name|font2
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|resolve
name|void
name|tst_QFont
operator|::
name|resolve
parameter_list|()
block|{
name|QFont
name|font
decl_stmt|;
name|font
operator|.
name|setPointSize
argument_list|(
name|font
operator|.
name|pointSize
argument_list|()
operator|*
literal|2
argument_list|)
expr_stmt|;
name|font
operator|.
name|setItalic
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|font
operator|.
name|setWeight
argument_list|(
name|QFont
operator|::
name|Normal
argument_list|)
expr_stmt|;
name|font
operator|.
name|setUnderline
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|font
operator|.
name|setStrikeOut
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|font
operator|.
name|setOverline
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|font
operator|.
name|setStretch
argument_list|(
name|QFont
operator|::
name|Unstretched
argument_list|)
expr_stmt|;
name|QFont
name|font1
decl_stmt|;
name|font1
operator|.
name|setWeight
argument_list|(
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
name|QFont
name|font2
init|=
name|font1
operator|.
name|resolve
argument_list|(
name|font
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|font2
operator|.
name|weight
argument_list|()
operator|==
name|font1
operator|.
name|weight
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|font2
operator|.
name|pointSize
argument_list|()
operator|==
name|font
operator|.
name|pointSize
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|font2
operator|.
name|italic
argument_list|()
operator|==
name|font
operator|.
name|italic
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|font2
operator|.
name|underline
argument_list|()
operator|==
name|font
operator|.
name|underline
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|font2
operator|.
name|overline
argument_list|()
operator|==
name|font
operator|.
name|overline
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|font2
operator|.
name|strikeOut
argument_list|()
operator|==
name|font
operator|.
name|strikeOut
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|font2
operator|.
name|stretch
argument_list|()
operator|==
name|font
operator|.
name|stretch
argument_list|()
argument_list|)
expr_stmt|;
name|QFont
name|font3
decl_stmt|;
name|font3
operator|.
name|setStretch
argument_list|(
name|QFont
operator|::
name|UltraCondensed
argument_list|)
expr_stmt|;
name|QFont
name|font4
init|=
name|font3
operator|.
name|resolve
argument_list|(
name|font1
argument_list|)
operator|.
name|resolve
argument_list|(
name|font
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|font4
operator|.
name|stretch
argument_list|()
operator|==
name|font3
operator|.
name|stretch
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|font4
operator|.
name|weight
argument_list|()
operator|==
name|font
operator|.
name|weight
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|font4
operator|.
name|pointSize
argument_list|()
operator|==
name|font
operator|.
name|pointSize
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|font4
operator|.
name|italic
argument_list|()
operator|==
name|font
operator|.
name|italic
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|font4
operator|.
name|underline
argument_list|()
operator|==
name|font
operator|.
name|underline
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|font4
operator|.
name|overline
argument_list|()
operator|==
name|font
operator|.
name|overline
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|font4
operator|.
name|strikeOut
argument_list|()
operator|==
name|font
operator|.
name|strikeOut
argument_list|()
argument_list|)
expr_stmt|;
name|QFont
name|f1
decl_stmt|,
name|f2
decl_stmt|,
name|f3
decl_stmt|;
name|f2
operator|.
name|setPointSize
argument_list|(
literal|45
argument_list|)
expr_stmt|;
name|f3
operator|.
name|setPointSize
argument_list|(
literal|55
argument_list|)
expr_stmt|;
name|QFont
name|f4
init|=
name|f1
operator|.
name|resolve
argument_list|(
name|f2
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|f4
operator|.
name|pointSize
argument_list|()
argument_list|,
literal|45
argument_list|)
expr_stmt|;
name|f4
operator|=
name|f4
operator|.
name|resolve
argument_list|(
name|f3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f4
operator|.
name|pointSize
argument_list|()
argument_list|,
literal|55
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resetFont
name|void
name|tst_QFont
operator|::
name|resetFont
parameter_list|()
block|{
name|QWidget
name|parent
decl_stmt|;
name|QFont
name|parentFont
init|=
name|parent
operator|.
name|font
argument_list|()
decl_stmt|;
name|parentFont
operator|.
name|setPointSize
argument_list|(
name|parentFont
operator|.
name|pointSize
argument_list|()
operator|+
literal|2
argument_list|)
expr_stmt|;
name|parent
operator|.
name|setFont
argument_list|(
name|parentFont
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|child
init|=
operator|new
name|QWidget
argument_list|(
operator|&
name|parent
argument_list|)
decl_stmt|;
name|QFont
name|childFont
init|=
name|child
operator|->
name|font
argument_list|()
decl_stmt|;
name|childFont
operator|.
name|setBold
argument_list|(
operator|!
name|childFont
operator|.
name|bold
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|->
name|setFont
argument_list|(
name|childFont
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parentFont
operator|.
name|resolve
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|childFont
operator|.
name|resolve
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|childFont
operator|!=
name|parentFont
argument_list|)
expr_stmt|;
name|child
operator|->
name|setFont
argument_list|(
name|QFont
argument_list|()
argument_list|)
expr_stmt|;
comment|// reset font
name|QVERIFY
argument_list|(
name|child
operator|->
name|font
argument_list|()
operator|.
name|resolve
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|child
operator|->
name|font
argument_list|()
operator|.
name|pointSize
argument_list|()
operator|==
name|parent
operator|.
name|font
argument_list|()
operator|.
name|pointSize
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parent
operator|.
name|font
argument_list|()
operator|.
name|resolve
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isCopyOf
name|void
name|tst_QFont
operator|::
name|isCopyOf
parameter_list|()
block|{
name|QFont
name|font
decl_stmt|;
name|QVERIFY
argument_list|(
name|font
operator|.
name|isCopyOf
argument_list|(
name|QApplication
operator|::
name|font
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QFont
name|font2
argument_list|(
literal|"bogusfont"
argument_list|,
literal|23
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|font2
operator|.
name|isCopyOf
argument_list|(
name|QApplication
operator|::
name|font
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QFont
name|font3
init|=
name|font
decl_stmt|;
name|QVERIFY
argument_list|(
name|font3
operator|.
name|isCopyOf
argument_list|(
name|font
argument_list|)
argument_list|)
expr_stmt|;
name|font3
operator|.
name|setPointSize
argument_list|(
literal|256
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|font3
operator|.
name|isCopyOf
argument_list|(
name|font
argument_list|)
argument_list|)
expr_stmt|;
name|font3
operator|.
name|setPointSize
argument_list|(
name|font
operator|.
name|pointSize
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|font3
operator|.
name|isCopyOf
argument_list|(
name|font
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setFontRaw
name|void
name|tst_QFont
operator|::
name|setFontRaw
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|Q_WS_X11
name|QSKIP
argument_list|(
literal|"Only tested on X11"
argument_list|)
expr_stmt|;
else|#
directive|else
name|QFont
name|f
decl_stmt|;
name|f
operator|.
name|setRawName
argument_list|(
literal|"-*-fixed-bold-r-normal--0-0-*-*-*-0-iso8859-1"
argument_list|)
expr_stmt|;
comment|//     qDebug("font family: %s", f.family().utf8());
name|QFontDatabase
name|fdb
decl_stmt|;
name|QStringList
name|families
init|=
name|fdb
operator|.
name|families
argument_list|()
decl_stmt|;
name|bool
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|families
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|str
init|=
name|families
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|str
operator|.
name|contains
argument_list|(
literal|'['
argument_list|)
condition|)
name|str
operator|=
name|str
operator|.
name|left
argument_list|(
name|str
operator|.
name|indexOf
argument_list|(
literal|'['
argument_list|)
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|str
operator|.
name|toLower
argument_list|()
operator|==
literal|"fixed"
condition|)
name|found
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|found
condition|)
name|QSKIP
argument_list|(
literal|"Fixed font not available."
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFontInfo
argument_list|(
name|f
argument_list|)
operator|.
name|family
argument_list|()
operator|.
name|left
argument_list|(
literal|5
argument_list|)
operator|.
name|toLower
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"fixed"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|insertAndRemoveSubstitutions
name|void
name|tst_QFont
operator|::
name|insertAndRemoveSubstitutions
parameter_list|()
block|{
name|QFont
operator|::
name|removeSubstitution
argument_list|(
literal|"BogusFontFamily"
argument_list|)
expr_stmt|;
comment|// make sure it is empty before we start
name|QVERIFY
argument_list|(
name|QFont
operator|::
name|substitutes
argument_list|(
literal|"BogusFontFamily"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFont
operator|::
name|substitutes
argument_list|(
literal|"bogusfontfamily"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// inserting Foo
name|QFont
operator|::
name|insertSubstitution
argument_list|(
literal|"BogusFontFamily"
argument_list|,
literal|"Foo"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFont
operator|::
name|substitutes
argument_list|(
literal|"BogusFontFamily"
argument_list|)
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFont
operator|::
name|substitutes
argument_list|(
literal|"bogusfontfamily"
argument_list|)
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// inserting Bar and Baz
name|QStringList
name|moreFonts
decl_stmt|;
name|moreFonts
operator|<<
literal|"Bar"
operator|<<
literal|"Baz"
expr_stmt|;
name|QFont
operator|::
name|insertSubstitutions
argument_list|(
literal|"BogusFontFamily"
argument_list|,
name|moreFonts
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFont
operator|::
name|substitutes
argument_list|(
literal|"BogusFontFamily"
argument_list|)
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFont
operator|::
name|substitutes
argument_list|(
literal|"bogusfontfamily"
argument_list|)
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QFont
operator|::
name|removeSubstitution
argument_list|(
literal|"BogusFontFamily"
argument_list|)
expr_stmt|;
comment|// make sure it is empty again
name|QVERIFY
argument_list|(
name|QFont
operator|::
name|substitutes
argument_list|(
literal|"BogusFontFamily"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFont
operator|::
name|substitutes
argument_list|(
literal|"bogusfontfamily"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|copyFont
specifier|static
name|QFont
name|copyFont
parameter_list|(
specifier|const
name|QFont
modifier|&
name|font1
parameter_list|)
comment|// copy using a QDataStream
block|{
name|QBuffer
name|buffer
decl_stmt|;
name|buffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|QDataStream
name|ds
argument_list|(
operator|&
name|buffer
argument_list|)
decl_stmt|;
name|ds
operator|<<
name|font1
expr_stmt|;
name|buffer
operator|.
name|close
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QFont
name|font2
decl_stmt|;
name|ds
operator|>>
name|font2
expr_stmt|;
return|return
name|font2
return|;
block|}
end_function
begin_function
DECL|function|serializeSpacing
name|void
name|tst_QFont
operator|::
name|serializeSpacing
parameter_list|()
block|{
name|QFont
name|font
decl_stmt|;
name|QCOMPARE
argument_list|(
name|font
operator|.
name|letterSpacing
argument_list|()
argument_list|,
literal|0.
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|font
operator|.
name|wordSpacing
argument_list|()
argument_list|,
literal|0.
argument_list|)
expr_stmt|;
name|font
operator|.
name|setLetterSpacing
argument_list|(
name|QFont
operator|::
name|AbsoluteSpacing
argument_list|,
literal|105
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|font
operator|.
name|letterSpacing
argument_list|()
argument_list|,
literal|105.
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|font
operator|.
name|letterSpacingType
argument_list|()
argument_list|,
name|QFont
operator|::
name|AbsoluteSpacing
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|font
operator|.
name|wordSpacing
argument_list|()
argument_list|,
literal|0.
argument_list|)
expr_stmt|;
name|QFont
name|font2
init|=
name|copyFont
argument_list|(
name|font
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|font2
operator|.
name|letterSpacing
argument_list|()
argument_list|,
literal|105.
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|font2
operator|.
name|letterSpacingType
argument_list|()
argument_list|,
name|QFont
operator|::
name|AbsoluteSpacing
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|font2
operator|.
name|wordSpacing
argument_list|()
argument_list|,
literal|0.
argument_list|)
expr_stmt|;
name|font
operator|.
name|setWordSpacing
argument_list|(
literal|50.0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|font
operator|.
name|letterSpacing
argument_list|()
argument_list|,
literal|105.
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|font
operator|.
name|wordSpacing
argument_list|()
argument_list|,
literal|50.
argument_list|)
expr_stmt|;
name|QFont
name|font3
init|=
name|copyFont
argument_list|(
name|font
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|font3
operator|.
name|letterSpacing
argument_list|()
argument_list|,
literal|105.
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|font3
operator|.
name|letterSpacingType
argument_list|()
argument_list|,
name|QFont
operator|::
name|AbsoluteSpacing
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|font3
operator|.
name|wordSpacing
argument_list|()
argument_list|,
literal|50.
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// QFont::lastResortFont() may abort with qFatal() on QWS/QPA
end_comment
begin_comment
comment|// if absolutely no font is found. Just as ducumented for QFont::lastResortFont().
end_comment
begin_comment
comment|// This happens on our CI machines which run QWS autotests.
end_comment
begin_comment
comment|// ### fixme: Check platforms
end_comment
begin_function
DECL|function|lastResortFont
name|void
name|tst_QFont
operator|::
name|lastResortFont
parameter_list|()
block|{
name|QSKIP
argument_list|(
literal|"QFont::lastResortFont() may abort with qFatal() on QPA, QTBUG-22325"
argument_list|)
expr_stmt|;
name|QFont
name|font
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|font
operator|.
name|lastResortFont
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|styleName
name|void
name|tst_QFont
operator|::
name|styleName
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
name|QSKIP
argument_list|(
literal|"Only tested on Mac"
argument_list|)
expr_stmt|;
else|#
directive|else
name|QFont
name|font
argument_list|(
literal|"Helvetica Neue"
argument_list|)
decl_stmt|;
name|font
operator|.
name|setStyleName
argument_list|(
literal|"UltraLight"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFontInfo
argument_list|(
name|font
argument_list|)
operator|.
name|styleName
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"UltraLight"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QFont::StyleHint
argument_list|)
end_macro
begin_function
DECL|function|defaultFamily_data
name|void
name|tst_QFont
operator|::
name|defaultFamily_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QFont
operator|::
name|StyleHint
argument_list|>
argument_list|(
literal|"styleHint"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"defaultFamily"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"serif"
argument_list|)
operator|<<
name|QFont
operator|::
name|Times
operator|<<
literal|"serif"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"monospace"
argument_list|)
operator|<<
name|QFont
operator|::
name|Monospace
operator|<<
literal|"monospace"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"sans-serif"
argument_list|)
operator|<<
name|QFont
operator|::
name|SansSerif
operator|<<
literal|"sans-serif"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"cursive"
argument_list|)
operator|<<
name|QFont
operator|::
name|Cursive
operator|<<
literal|"cursive"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"fantasy"
argument_list|)
operator|<<
name|QFont
operator|::
name|Fantasy
operator|<<
literal|"fantasy"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"old english"
argument_list|)
operator|<<
name|QFont
operator|::
name|OldEnglish
operator|<<
literal|"Old English"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|defaultFamily
name|void
name|tst_QFont
operator|::
name|defaultFamily
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QFont
operator|::
name|StyleHint
argument_list|,
name|styleHint
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|defaultFamily
argument_list|)
expr_stmt|;
name|QFontDatabase
name|db
decl_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|hasFamily
argument_list|(
name|defaultFamily
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"Font family is not available on the system"
argument_list|)
expr_stmt|;
name|QFont
name|f
decl_stmt|;
name|f
operator|.
name|setStyleHint
argument_list|(
name|styleHint
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFontDatabase
operator|::
name|resolveFontFamilyAlias
argument_list|(
name|f
operator|.
name|defaultFamily
argument_list|()
argument_list|)
argument_list|,
name|QFontDatabase
operator|::
name|resolveFontFamilyAlias
argument_list|(
name|defaultFamily
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_BUILD_INTERNAL
end_comment
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QFont
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qfont.moc"
end_include
end_unit
