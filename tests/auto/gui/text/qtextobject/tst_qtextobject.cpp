begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qtextobject.h>
end_include
begin_include
include|#
directive|include
file|<qtextdocument.h>
end_include
begin_include
include|#
directive|include
file|<qtextedit.h>
end_include
begin_include
include|#
directive|include
file|<qtextcursor.h>
end_include
begin_class
DECL|class|tst_QTextObject
class|class
name|tst_QTextObject
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QTextObject
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QTextObject
parameter_list|()
destructor_decl|;
private|private
name|slots
private|:
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|testStandAloneTextObject
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QTextObject
name|tst_QTextObject
operator|::
name|tst_QTextObject
parameter_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~tst_QTextObject
name|tst_QTextObject
operator|::
name|~
name|tst_QTextObject
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QTextObject
operator|::
name|getSetCheck
parameter_list|()
block|{
name|QTextEdit
name|edit
decl_stmt|;
name|QTextFrame
name|obj1
argument_list|(
name|edit
operator|.
name|document
argument_list|()
argument_list|)
decl_stmt|;
comment|// QTextFrameLayoutData * QTextFrame::layoutData()
comment|// void QTextFrame::setLayoutData(QTextFrameLayoutData *)
name|QTextFrameLayoutData
modifier|*
name|var1
init|=
operator|new
name|QTextFrameLayoutData
decl_stmt|;
name|obj1
operator|.
name|setLayoutData
argument_list|(
name|var1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|var1
argument_list|,
name|obj1
operator|.
name|layoutData
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setLayoutData
argument_list|(
operator|(
name|QTextFrameLayoutData
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|QTextFrameLayoutData
operator|*
operator|)
literal|0
argument_list|,
name|obj1
operator|.
name|layoutData
argument_list|()
argument_list|)
expr_stmt|;
comment|// delete var1; // No delete, since QTextFrame takes ownership
name|QTextBlock
name|obj2
init|=
name|edit
operator|.
name|textCursor
argument_list|()
operator|.
name|block
argument_list|()
decl_stmt|;
comment|// QTextBlockUserData * QTextBlock::userData()
comment|// void QTextBlock::setUserData(QTextBlockUserData *)
name|QTextBlockUserData
modifier|*
name|var2
init|=
operator|new
name|QTextBlockUserData
decl_stmt|;
name|obj2
operator|.
name|setUserData
argument_list|(
name|var2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|var2
argument_list|,
name|obj2
operator|.
name|userData
argument_list|()
argument_list|)
expr_stmt|;
name|obj2
operator|.
name|setUserData
argument_list|(
operator|(
name|QTextBlockUserData
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|QTextBlockUserData
operator|*
operator|)
literal|0
argument_list|,
name|obj2
operator|.
name|userData
argument_list|()
argument_list|)
expr_stmt|;
comment|// int QTextBlock::userState()
comment|// void QTextBlock::setUserState(int)
name|obj2
operator|.
name|setUserState
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj2
operator|.
name|userState
argument_list|()
argument_list|)
expr_stmt|;
name|obj2
operator|.
name|setUserState
argument_list|(
name|INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MIN
argument_list|,
name|obj2
operator|.
name|userState
argument_list|()
argument_list|)
expr_stmt|;
name|obj2
operator|.
name|setUserState
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MAX
argument_list|,
name|obj2
operator|.
name|userState
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|TestTextObject
class|class
name|TestTextObject
super|:
specifier|public
name|QTextObject
block|{
public|public:
DECL|function|TestTextObject
name|TestTextObject
parameter_list|(
name|QTextDocument
modifier|*
name|document
parameter_list|)
member_init_list|:
name|QTextObject
argument_list|(
name|document
argument_list|)
block|{}
block|}
class|;
end_class
begin_function
DECL|function|testStandAloneTextObject
name|void
name|tst_QTextObject
operator|::
name|testStandAloneTextObject
parameter_list|()
block|{
name|QTextDocument
name|document
decl_stmt|;
name|TestTextObject
name|textObject
argument_list|(
operator|&
name|document
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|textObject
operator|.
name|document
argument_list|()
argument_list|,
operator|&
name|document
argument_list|)
expr_stmt|;
comment|// don't crash
name|textObject
operator|.
name|format
argument_list|()
expr_stmt|;
name|textObject
operator|.
name|formatIndex
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|textObject
operator|.
name|objectIndex
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QTextObject
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qtextobject.moc"
end_include
end_unit
