begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/*     !!!!!! Warning !!!!!     Please don't save this file in emacs. It contains utf8 text sequences emacs will     silently convert to a series of question marks.  */
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<private/qtextengine_p.h>
end_include
begin_include
include|#
directive|include
file|<qtextlayout.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_define
DECL|macro|TESTFONT_SIZE
define|#
directive|define
name|TESTFONT_SIZE
value|12
end_define
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QTextOption::WrapMode
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|Qt::LayoutDirection
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|Qt::AlignmentFlag
argument_list|)
end_macro
begin_class
DECL|class|tst_QTextLayout
class|class
name|tst_QTextLayout
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QTextLayout
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QTextLayout
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|lineBreaking
parameter_list|()
function_decl|;
name|void
name|simpleBoundingRect
parameter_list|()
function_decl|;
name|void
name|threeLineBoundingRect
parameter_list|()
function_decl|;
name|void
name|boundingRectWithLongLineAndNoWrap
parameter_list|()
function_decl|;
name|void
name|forcedBreaks
parameter_list|()
function_decl|;
name|void
name|breakAny
parameter_list|()
function_decl|;
name|void
name|noWrap
parameter_list|()
function_decl|;
name|void
name|cursorToXForInlineObjects
parameter_list|()
function_decl|;
name|void
name|cursorToXForSetColumns
parameter_list|()
function_decl|;
name|void
name|cursorToXForTrailingSpaces_data
parameter_list|()
function_decl|;
name|void
name|cursorToXForTrailingSpaces
parameter_list|()
function_decl|;
name|void
name|horizontalAlignment_data
parameter_list|()
function_decl|;
name|void
name|horizontalAlignment
parameter_list|()
function_decl|;
name|void
name|horizontalAlignmentMultiline_data
parameter_list|()
function_decl|;
name|void
name|horizontalAlignmentMultiline
parameter_list|()
function_decl|;
name|void
name|defaultWordSeparators_data
parameter_list|()
function_decl|;
name|void
name|defaultWordSeparators
parameter_list|()
function_decl|;
name|void
name|cursorMovementFromInvalidPositions
parameter_list|()
function_decl|;
name|void
name|cursorMovementInsideSpaces
parameter_list|()
function_decl|;
name|void
name|charWordStopOnLineSeparator
parameter_list|()
function_decl|;
name|void
name|xToCursorAtEndOfLine
parameter_list|()
function_decl|;
name|void
name|boundingRectTopLeft
parameter_list|()
function_decl|;
name|void
name|graphemeBoundaryForSurrogatePairs
parameter_list|()
function_decl|;
name|void
name|tabStops
parameter_list|()
function_decl|;
name|void
name|integerOverflow
parameter_list|()
function_decl|;
name|void
name|testDefaultTabs
parameter_list|()
function_decl|;
name|void
name|testTabs
parameter_list|()
function_decl|;
name|void
name|testMultilineTab
parameter_list|()
function_decl|;
name|void
name|testRightTab
parameter_list|()
function_decl|;
name|void
name|testTabsInAlignedParag
parameter_list|()
function_decl|;
name|void
name|testCenteredTab
parameter_list|()
function_decl|;
name|void
name|testDelimiterTab
parameter_list|()
function_decl|;
name|void
name|testMultiTab
parameter_list|()
function_decl|;
name|void
name|testTabDPIScale
parameter_list|()
function_decl|;
name|void
name|tabsForRtl
parameter_list|()
function_decl|;
name|void
name|tabHeight
parameter_list|()
function_decl|;
name|void
name|capitalization_allUpperCase
parameter_list|()
function_decl|;
name|void
name|capitalization_allUpperCase_newline
parameter_list|()
function_decl|;
name|void
name|capitalization_allLowerCase
parameter_list|()
function_decl|;
name|void
name|capitalization_smallCaps
parameter_list|()
function_decl|;
name|void
name|capitalization_capitalize
parameter_list|()
function_decl|;
name|void
name|longText
parameter_list|()
function_decl|;
name|void
name|widthOfTabs
parameter_list|()
function_decl|;
name|void
name|columnWrapWithTabs
parameter_list|()
function_decl|;
name|void
name|boundingRectForUnsetLineWidth
parameter_list|()
function_decl|;
name|void
name|boundingRectForSetLineWidth
parameter_list|()
function_decl|;
name|void
name|glyphLessItems
parameter_list|()
function_decl|;
comment|// QTextLine stuff
name|void
name|setNumColumnsWrapAtWordBoundaryOrAnywhere
parameter_list|()
function_decl|;
name|void
name|setNumColumnsWordWrap
parameter_list|()
function_decl|;
name|void
name|smallTextLengthNoWrap
parameter_list|()
function_decl|;
name|void
name|smallTextLengthWordWrap
parameter_list|()
function_decl|;
name|void
name|smallTextLengthWrapAtWordBoundaryOrAnywhere
parameter_list|()
function_decl|;
name|void
name|testLineBreakingAllSpaces
parameter_list|()
function_decl|;
name|void
name|lineWidthFromBOM
parameter_list|()
function_decl|;
name|void
name|textWidthVsWIdth
parameter_list|()
function_decl|;
name|void
name|textWithSurrogates_qtbug15679
parameter_list|()
function_decl|;
name|void
name|textWidthWithStackedTextEngine
parameter_list|()
function_decl|;
name|void
name|textWidthWithLineSeparator
parameter_list|()
function_decl|;
name|void
name|cursorInLigatureWithMultipleLines
parameter_list|()
function_decl|;
name|void
name|xToCursorForLigatures
parameter_list|()
function_decl|;
name|void
name|cursorInNonStopChars
parameter_list|()
function_decl|;
private|private:
DECL|member|testFont
name|QFont
name|testFont
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QTextLayout
operator|::
name|getSetCheck
parameter_list|()
block|{
name|QString
name|str
argument_list|(
literal|"Bogus text"
argument_list|)
decl_stmt|;
name|QTextLayout
name|layout
argument_list|(
name|str
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextEngine
modifier|*
name|engine
init|=
name|layout
operator|.
name|engine
argument_list|()
decl_stmt|;
name|QTextInlineObject
name|obj1
argument_list|(
literal|0
argument_list|,
name|engine
argument_list|)
decl_stmt|;
comment|// qreal QTextInlineObject::width()
comment|// void QTextInlineObject::setWidth(qreal)
name|obj1
operator|.
name|setWidth
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0.0
argument_list|,
name|obj1
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setWidth
argument_list|(
literal|1.2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|1.0
operator|<
name|obj1
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
comment|// qreal QTextInlineObject::ascent()
comment|// void QTextInlineObject::setAscent(qreal)
name|obj1
operator|.
name|setAscent
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0.0
argument_list|,
name|obj1
operator|.
name|ascent
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setAscent
argument_list|(
literal|1.2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|1.0
operator|<
name|obj1
operator|.
name|ascent
argument_list|()
argument_list|)
expr_stmt|;
comment|// qreal QTextInlineObject::descent()
comment|// void QTextInlineObject::setDescent(qreal)
name|obj1
operator|.
name|setDescent
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0.0
argument_list|,
name|obj1
operator|.
name|descent
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setDescent
argument_list|(
literal|1.2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|1.0
operator|<
name|obj1
operator|.
name|descent
argument_list|()
argument_list|)
expr_stmt|;
name|QTextLayout
name|obj2
decl_stmt|;
comment|// bool QTextLayout::cacheEnabled()
comment|// void QTextLayout::setCacheEnabled(bool)
name|obj2
operator|.
name|setCacheEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj2
operator|.
name|cacheEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|obj2
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj2
operator|.
name|cacheEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function_decl
name|QT_BEGIN_NAMESPACE
specifier|extern
name|void
name|qt_setQtEnableTestFont
parameter_list|(
name|bool
name|value
parameter_list|)
function_decl|;
end_function_decl
begin_function
name|QT_END_NAMESPACE
DECL|function|tst_QTextLayout
name|tst_QTextLayout
operator|::
name|tst_QTextLayout
parameter_list|()
block|{
name|qt_setQtEnableTestFont
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_destructor
DECL|function|~tst_QTextLayout
name|tst_QTextLayout
operator|::
name|~
name|tst_QTextLayout
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|init
name|void
name|tst_QTextLayout
operator|::
name|init
parameter_list|()
block|{
name|testFont
operator|=
name|QFont
argument_list|()
expr_stmt|;
name|testFont
operator|.
name|setFamily
argument_list|(
literal|"__Qt__Box__Engine__"
argument_list|)
expr_stmt|;
name|testFont
operator|.
name|setPixelSize
argument_list|(
name|TESTFONT_SIZE
argument_list|)
expr_stmt|;
name|testFont
operator|.
name|setWeight
argument_list|(
name|QFont
operator|::
name|Normal
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFontMetrics
argument_list|(
name|testFont
argument_list|)
operator|.
name|width
argument_list|(
literal|'a'
argument_list|)
argument_list|,
name|testFont
operator|.
name|pixelSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QTextLayout
operator|::
name|cleanup
parameter_list|()
block|{
name|testFont
operator|=
name|QFont
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lineBreaking
name|void
name|tst_QTextLayout
operator|::
name|lineBreaking
parameter_list|()
block|{
if|#
directive|if
literal|0
block|struct Breaks { 	const char *utf8; 	uchar breaks[32];     };     Breaks brks[] = { 	{ "11", { false, 0xff } }, 	{ "aa", { false, 0xff } }, 	{ "++", { false, 0xff } }, 	{ "--", { false, 0xff } }, 	{ "((", { false, 0xff } }, 	{ "))", { false, 0xff } }, 	{ "..", { false, 0xff } }, 	{ "\"\"", { false, 0xff } }, 	{ "$$", { false, 0xff } }, 	{ "!!", { false, 0xff } }, 	{ "??", { false, 0xff } }, 	{ ",,", { false, 0xff } },  	{ ")()", { true, false, 0xff } }, 	{ "?!?", { false, false, 0xff } }, 	{ ".,.", { false, false, 0xff } }, 	{ "+-+", { false, false, 0xff } }, 	{ "+=+", { false, false, 0xff } }, 	{ "+(+", { false, false, 0xff } }, 	{ "+)+", { false, false, 0xff } },  	{ "a b", { false, true, 0xff } }, 	{ "a(b", { false, false, 0xff } }, 	{ "a)b", { false, false, 0xff } }, 	{ "a-b", { false, true, 0xff } }, 	{ "a.b", { false, false, 0xff } }, 	{ "a+b", { false, false, 0xff } }, 	{ "a?b", { false, false, 0xff } }, 	{ "a!b", { false, false, 0xff } }, 	{ "a$b", { false, false, 0xff } }, 	{ "a,b", { false, false, 0xff } }, 	{ "a/b", { false, false, 0xff } }, 	{ "1/2", { false, false, 0xff } }, 	{ "./.", { false, false, 0xff } }, 	{ ",/,", { false, false, 0xff } }, 	{ "!/!", { false, false, 0xff } }, 	{ "\\/\\", { false, false, 0xff } }, 	{ "1 2", { false, true, 0xff } }, 	{ "1(2", { false, false, 0xff } }, 	{ "1)2", { false, false, 0xff } }, 	{ "1-2", { false, false, 0xff } }, 	{ "1.2", { false, false, 0xff } }, 	{ "1+2", { false, false, 0xff } }, 	{ "1?2", { false, true, 0xff } }, 	{ "1!2", { false, true, 0xff } }, 	{ "1$2", { false, false, 0xff } }, 	{ "1,2", { false, false, 0xff } }, 	{ "1/2", { false, false, 0xff } }, 	{ "\330\260\331\216\331\204\331\220\331\203\331\216", { false, false, false, false, false, 0xff } }, 	{ "\330\247\331\204\331\205 \330\247\331\204\331\205", { false, false, false, true, false, false, 0xff } }, 	{ "1#2", { false, false, 0xff } }, 	{ "!#!", { false, false, 0xff } }, 	{ 0, {} }     };     Breaks *b = brks;     while (b->utf8) {         QString str = QString::fromUtf8(b->utf8);         QTextEngine engine(str, QFont());         const QCharAttributes *attrs = engine.attributes();         QVERIFY(!attrs[0].lineBreak);         int i;         for (i = 0; i< (int)str.length() - 1; ++i) {             QVERIFY(b->breaks[i] != 0xff);             if ( attrs[i + 1].lineBreak != (bool)b->breaks[i] ) {                 qDebug("test case \"%s\" failed at char %d; break type: %d", b->utf8, i, attrs[i + 1].lineBreak);                 QCOMPARE( attrs[i + 1].lineBreak, (bool)b->breaks[i] );             }         }         QCOMPARE(b->breaks[i], (uchar)0xff);         ++b;     }
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|simpleBoundingRect
name|void
name|tst_QTextLayout
operator|::
name|simpleBoundingRect
parameter_list|()
block|{
comment|/* just check if boundingRect() gives sane values. The text is not broken. */
name|QString
name|hello
argument_list|(
literal|"hello world"
argument_list|)
decl_stmt|;
specifier|const
name|int
name|width
init|=
name|hello
operator|.
name|length
argument_list|()
operator|*
name|testFont
operator|.
name|pixelSize
argument_list|()
decl_stmt|;
name|QTextLayout
name|layout
argument_list|(
name|hello
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
name|width
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|textLength
argument_list|()
argument_list|,
name|hello
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|layout
operator|.
name|boundingRect
argument_list|()
argument_list|,
name|QRectF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|QFontMetrics
argument_list|(
name|testFont
argument_list|)
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|threeLineBoundingRect
name|void
name|tst_QTextLayout
operator|::
name|threeLineBoundingRect
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
name|QSKIP
argument_list|(
literal|"QTestFontEngine on the mac does not support logclusters at the moment"
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* stricter check. break text into three lines */
name|QString
name|firstWord
argument_list|(
literal|"hello"
argument_list|)
decl_stmt|;
name|QString
name|secondWord
argument_list|(
literal|"world"
argument_list|)
decl_stmt|;
name|QString
name|thirdWord
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|QString
name|text
argument_list|(
name|firstWord
operator|+
literal|' '
operator|+
name|secondWord
operator|+
literal|' '
operator|+
name|thirdWord
argument_list|)
decl_stmt|;
specifier|const
name|int
name|firstLineWidth
init|=
name|firstWord
operator|.
name|length
argument_list|()
operator|*
name|testFont
operator|.
name|pixelSize
argument_list|()
decl_stmt|;
specifier|const
name|int
name|secondLineWidth
init|=
name|secondWord
operator|.
name|length
argument_list|()
operator|*
name|testFont
operator|.
name|pixelSize
argument_list|()
decl_stmt|;
specifier|const
name|int
name|thirdLineWidth
init|=
name|thirdWord
operator|.
name|length
argument_list|()
operator|*
name|testFont
operator|.
name|pixelSize
argument_list|()
decl_stmt|;
specifier|const
name|int
name|longestLine
init|=
name|qMax
argument_list|(
name|firstLineWidth
argument_list|,
name|qMax
argument_list|(
name|secondLineWidth
argument_list|,
name|thirdLineWidth
argument_list|)
argument_list|)
decl_stmt|;
name|QTextLayout
name|layout
argument_list|(
name|text
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|int
name|y
init|=
literal|0
decl_stmt|;
name|QTextLine
name|line
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
name|firstLineWidth
argument_list|)
expr_stmt|;
name|line
operator|.
name|setPosition
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|textStart
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
comment|// + 1 for trailing space
name|QCOMPARE
argument_list|(
name|line
operator|.
name|textLength
argument_list|()
argument_list|,
name|firstWord
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qRound
argument_list|(
name|line
operator|.
name|naturalTextWidth
argument_list|()
argument_list|)
argument_list|,
name|firstLineWidth
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|line
operator|.
name|textLength
argument_list|()
expr_stmt|;
name|y
operator|+=
name|qRound
argument_list|(
name|line
operator|.
name|ascent
argument_list|()
operator|+
name|line
operator|.
name|descent
argument_list|()
argument_list|)
expr_stmt|;
name|line
operator|=
name|layout
operator|.
name|createLine
argument_list|()
expr_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
name|secondLineWidth
argument_list|)
expr_stmt|;
name|line
operator|.
name|setPosition
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
comment|// + 1 for trailing space
name|QCOMPARE
argument_list|(
name|line
operator|.
name|textStart
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|textLength
argument_list|()
argument_list|,
name|secondWord
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qRound
argument_list|(
name|line
operator|.
name|naturalTextWidth
argument_list|()
argument_list|)
argument_list|,
name|secondLineWidth
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|line
operator|.
name|textLength
argument_list|()
expr_stmt|;
name|y
operator|+=
name|qRound
argument_list|(
name|line
operator|.
name|ascent
argument_list|()
operator|+
name|line
operator|.
name|descent
argument_list|()
argument_list|)
expr_stmt|;
name|line
operator|=
name|layout
operator|.
name|createLine
argument_list|()
expr_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
name|secondLineWidth
argument_list|)
expr_stmt|;
name|line
operator|.
name|setPosition
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
comment|// no trailing space here!
name|QCOMPARE
argument_list|(
name|line
operator|.
name|textStart
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|textLength
argument_list|()
argument_list|,
name|thirdWord
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qRound
argument_list|(
name|line
operator|.
name|naturalTextWidth
argument_list|()
argument_list|)
argument_list|,
name|thirdLineWidth
argument_list|)
expr_stmt|;
name|y
operator|+=
name|qRound
argument_list|(
name|line
operator|.
name|ascent
argument_list|()
operator|+
name|line
operator|.
name|descent
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|layout
operator|.
name|boundingRect
argument_list|()
argument_list|,
name|QRectF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|longestLine
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|boundingRectWithLongLineAndNoWrap
name|void
name|tst_QTextLayout
operator|::
name|boundingRectWithLongLineAndNoWrap
parameter_list|()
block|{
name|QString
name|longString
argument_list|(
literal|"thisisaverylongstringthatcannotbewrappedatallitjustgoesonandonlikeonebigword"
argument_list|)
decl_stmt|;
specifier|const
name|int
name|width
init|=
name|longString
operator|.
name|length
argument_list|()
operator|*
name|testFont
operator|.
name|pixelSize
argument_list|()
operator|/
literal|20
decl_stmt|;
comment|// very small widthx
name|QTextLayout
name|layout
argument_list|(
name|longString
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
name|width
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|layout
operator|.
name|boundingRect
argument_list|()
operator|.
name|width
argument_list|()
operator|>=
name|line
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|layout
operator|.
name|boundingRect
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|line
operator|.
name|naturalTextWidth
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|forcedBreaks
name|void
name|tst_QTextLayout
operator|::
name|forcedBreaks
parameter_list|()
block|{
name|QString
name|text
init|=
literal|"A\n\nB\nC"
decl_stmt|;
name|text
operator|.
name|replace
argument_list|(
literal|'\n'
argument_list|,
name|QChar
operator|::
name|LineSeparator
argument_list|)
expr_stmt|;
name|QTextLayout
name|layout
argument_list|(
name|text
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|QTextLine
name|line
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
literal|0x10000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|textStart
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|textLength
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qRound
argument_list|(
name|line
operator|.
name|naturalTextWidth
argument_list|()
argument_list|)
argument_list|,
name|testFont
operator|.
name|pixelSize
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|line
operator|.
name|height
argument_list|()
argument_list|,
name|testFont
operator|.
name|pixelSize
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|xToCursor
argument_list|(
literal|0
argument_list|)
argument_list|,
name|line
operator|.
name|textStart
argument_list|()
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|line
operator|.
name|textLength
argument_list|()
expr_stmt|;
name|line
operator|=
name|layout
operator|.
name|createLine
argument_list|()
expr_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
literal|0x10000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|textStart
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|textLength
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qRound
argument_list|(
name|line
operator|.
name|naturalTextWidth
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|line
operator|.
name|height
argument_list|()
argument_list|,
name|testFont
operator|.
name|pixelSize
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|xToCursor
argument_list|(
literal|0
argument_list|)
argument_list|,
name|line
operator|.
name|textStart
argument_list|()
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|line
operator|.
name|textLength
argument_list|()
expr_stmt|;
name|line
operator|=
name|layout
operator|.
name|createLine
argument_list|()
expr_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
literal|0x10000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|textStart
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|textLength
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qRound
argument_list|(
name|line
operator|.
name|naturalTextWidth
argument_list|()
argument_list|)
argument_list|,
name|testFont
operator|.
name|pixelSize
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qRound
argument_list|(
name|line
operator|.
name|height
argument_list|()
argument_list|)
argument_list|,
name|testFont
operator|.
name|pixelSize
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|xToCursor
argument_list|(
literal|0
argument_list|)
argument_list|,
name|line
operator|.
name|textStart
argument_list|()
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|line
operator|.
name|textLength
argument_list|()
expr_stmt|;
name|line
operator|=
name|layout
operator|.
name|createLine
argument_list|()
expr_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
literal|0x10000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|textStart
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|textLength
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qRound
argument_list|(
name|line
operator|.
name|naturalTextWidth
argument_list|()
argument_list|)
argument_list|,
name|testFont
operator|.
name|pixelSize
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|line
operator|.
name|height
argument_list|()
argument_list|,
name|testFont
operator|.
name|pixelSize
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|xToCursor
argument_list|(
literal|0
argument_list|)
argument_list|,
name|line
operator|.
name|textStart
argument_list|()
argument_list|)
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|breakAny
name|void
name|tst_QTextLayout
operator|::
name|breakAny
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
name|QSKIP
argument_list|(
literal|"QTestFontEngine on the mac does not support logclusters at the moment"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QString
name|text
init|=
literal|"ABCD"
decl_stmt|;
name|QTextLayout
name|layout
argument_list|(
name|text
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QTextLine
name|line
decl_stmt|;
name|QTextOption
name|opt
decl_stmt|;
name|opt
operator|.
name|setWrapMode
argument_list|(
name|QTextOption
operator|::
name|WrapAnywhere
argument_list|)
expr_stmt|;
name|layout
operator|.
name|setTextOption
argument_list|(
name|opt
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|line
operator|=
name|layout
operator|.
name|createLine
argument_list|()
expr_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
name|testFont
operator|.
name|pixelSize
argument_list|()
operator|*
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|textStart
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|textLength
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|line
operator|=
name|layout
operator|.
name|createLine
argument_list|()
expr_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
name|testFont
operator|.
name|pixelSize
argument_list|()
operator|*
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|textStart
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|textLength
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|line
operator|=
name|layout
operator|.
name|createLine
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|line
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|text
operator|=
literal|"ABCD EFGH"
expr_stmt|;
name|layout
operator|.
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|line
operator|=
name|layout
operator|.
name|createLine
argument_list|()
expr_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
name|testFont
operator|.
name|pixelSize
argument_list|()
operator|*
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|textStart
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|textLength
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|noWrap
name|void
name|tst_QTextLayout
operator|::
name|noWrap
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
name|QSKIP
argument_list|(
literal|"QTestFontEngine on the mac does not support logclusters at the moment"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QString
name|text
init|=
literal|"AB CD"
decl_stmt|;
name|QTextLayout
name|layout
argument_list|(
name|text
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|QTextLine
name|line
decl_stmt|;
name|QTextOption
name|opt
decl_stmt|;
name|opt
operator|.
name|setWrapMode
argument_list|(
name|QTextOption
operator|::
name|NoWrap
argument_list|)
expr_stmt|;
name|layout
operator|.
name|setTextOption
argument_list|(
name|opt
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|line
operator|=
name|layout
operator|.
name|createLine
argument_list|()
expr_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
name|testFont
operator|.
name|pixelSize
argument_list|()
operator|*
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|textStart
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|textLength
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|line
operator|=
name|layout
operator|.
name|createLine
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|line
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cursorToXForInlineObjects
name|void
name|tst_QTextLayout
operator|::
name|cursorToXForInlineObjects
parameter_list|()
block|{
name|QChar
name|ch
argument_list|(
name|QChar
operator|::
name|ObjectReplacementCharacter
argument_list|)
decl_stmt|;
name|QString
name|text
argument_list|(
name|ch
argument_list|)
decl_stmt|;
name|QTextLayout
name|layout
argument_list|(
name|text
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextEngine
modifier|*
name|engine
init|=
name|layout
operator|.
name|engine
argument_list|()
decl_stmt|;
specifier|const
name|int
name|item
init|=
name|engine
operator|->
name|findItem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|engine
operator|->
name|layoutData
operator|->
name|items
index|[
name|item
index|]
operator|.
name|width
operator|=
literal|32
expr_stmt|;
name|QTextLine
name|line
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
literal|0x10000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|0
argument_list|)
argument_list|,
name|qreal
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|1
argument_list|)
argument_list|,
name|qreal
argument_list|(
literal|32
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cursorToXForSetColumns
name|void
name|tst_QTextLayout
operator|::
name|cursorToXForSetColumns
parameter_list|()
block|{
name|QTextLayout
name|lay
argument_list|(
literal|"abc"
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|lay
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QTextOption
name|o
init|=
name|lay
operator|.
name|textOption
argument_list|()
decl_stmt|;
name|o
operator|.
name|setWrapMode
argument_list|(
name|QTextOption
operator|::
name|WrapAnywhere
argument_list|)
expr_stmt|;
comment|// enable/disable this line for full effect ;)
name|o
operator|.
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignHCenter
argument_list|)
expr_stmt|;
name|lay
operator|.
name|setTextOption
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|lay
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line
init|=
name|lay
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|line
operator|.
name|setNumColumns
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|lay
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0.
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|(
name|qreal
operator|)
name|TESTFONT_SIZE
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cursorToXForTrailingSpaces_data
name|void
name|tst_QTextLayout
operator|::
name|cursorToXForTrailingSpaces_data
parameter_list|()
block|{
name|qreal
name|width
init|=
name|TESTFONT_SIZE
operator|*
literal|4
decl_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QTextOption
operator|::
name|WrapMode
argument_list|>
argument_list|(
literal|"wrapMode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|Qt
operator|::
name|LayoutDirection
argument_list|>
argument_list|(
literal|"textDirection"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|Qt
operator|::
name|AlignmentFlag
argument_list|>
argument_list|(
literal|"alignment"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qreal
argument_list|>
argument_list|(
literal|"cursorAt0"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qreal
argument_list|>
argument_list|(
literal|"cursorAt4"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qreal
argument_list|>
argument_list|(
literal|"cursorAt6"
argument_list|)
expr_stmt|;
comment|// Aligned left from start of visible characters.
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ltr nowrap lalign"
argument_list|)
operator|<<
name|QTextOption
operator|::
name|NoWrap
operator|<<
name|Qt
operator|::
name|LeftToRight
operator|<<
name|Qt
operator|::
name|AlignLeft
operator|<<
name|qreal
argument_list|(
literal|0
argument_list|)
operator|<<
name|width
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|6
argument_list|)
expr_stmt|;
comment|// Aligned left from start of visible characters.
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ltr wrap lalign"
argument_list|)
operator|<<
name|QTextOption
operator|::
name|WrapAnywhere
operator|<<
name|Qt
operator|::
name|LeftToRight
operator|<<
name|Qt
operator|::
name|AlignLeft
operator|<<
name|qreal
argument_list|(
literal|0
argument_list|)
operator|<<
name|width
operator|<<
name|width
expr_stmt|;
comment|// Aligned right from end of whitespace characters.
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ltr nowrap ralign"
argument_list|)
operator|<<
name|QTextOption
operator|::
name|NoWrap
operator|<<
name|Qt
operator|::
name|LeftToRight
operator|<<
name|Qt
operator|::
name|AlignRight
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
operator|-
literal|2
argument_list|)
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|2
argument_list|)
operator|<<
name|width
expr_stmt|;
comment|// Aligned right from end of visible characters.
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ltr wrap ralign"
argument_list|)
operator|<<
name|QTextOption
operator|::
name|WrapAnywhere
operator|<<
name|Qt
operator|::
name|LeftToRight
operator|<<
name|Qt
operator|::
name|AlignRight
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
argument_list|)
operator|<<
name|width
operator|<<
name|width
expr_stmt|;
comment|// Aligned center of all characters
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ltr nowrap calign"
argument_list|)
operator|<<
name|QTextOption
operator|::
name|NoWrap
operator|<<
name|Qt
operator|::
name|LeftToRight
operator|<<
name|Qt
operator|::
name|AlignHCenter
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
operator|-
literal|1
argument_list|)
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|3
argument_list|)
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|5
argument_list|)
expr_stmt|;
comment|// Aligned center of visible characters
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ltr wrap calign"
argument_list|)
operator|<<
name|QTextOption
operator|::
name|WrapAnywhere
operator|<<
name|Qt
operator|::
name|LeftToRight
operator|<<
name|Qt
operator|::
name|AlignHCenter
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|0.5
argument_list|)
operator|<<
name|qreal
argument_list|(
name|width
argument_list|)
operator|<<
name|qreal
argument_list|(
name|width
argument_list|)
expr_stmt|;
comment|// Aligned right from start of visible characters
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rtl nowrap ralign"
argument_list|)
operator|<<
name|QTextOption
operator|::
name|NoWrap
operator|<<
name|Qt
operator|::
name|RightToLeft
operator|<<
name|Qt
operator|::
name|AlignRight
operator|<<
name|width
operator|<<
name|qreal
argument_list|(
literal|0
argument_list|)
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
operator|-
literal|2
argument_list|)
expr_stmt|;
comment|// Aligned right from start of visible characters
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rtl wrap ralign"
argument_list|)
operator|<<
name|QTextOption
operator|::
name|WrapAnywhere
operator|<<
name|Qt
operator|::
name|RightToLeft
operator|<<
name|Qt
operator|::
name|AlignRight
operator|<<
name|width
operator|<<
name|qreal
argument_list|(
literal|0
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Aligned left from end of whitespace characters
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rtl nowrap lalign"
argument_list|)
operator|<<
name|QTextOption
operator|::
name|NoWrap
operator|<<
name|Qt
operator|::
name|RightToLeft
operator|<<
name|Qt
operator|::
name|AlignLeft
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|6
argument_list|)
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|2
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Aligned left from end of visible characters
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rtl wrap lalign"
argument_list|)
operator|<<
name|QTextOption
operator|::
name|WrapAnywhere
operator|<<
name|Qt
operator|::
name|RightToLeft
operator|<<
name|Qt
operator|::
name|AlignLeft
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|3
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|0
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Aligned center of all characters
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rtl nowrap calign"
argument_list|)
operator|<<
name|QTextOption
operator|::
name|NoWrap
operator|<<
name|Qt
operator|::
name|RightToLeft
operator|<<
name|Qt
operator|::
name|AlignHCenter
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|5
argument_list|)
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|1
argument_list|)
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Aligned center of visible characters
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rtl wrap calign"
argument_list|)
operator|<<
name|QTextOption
operator|::
name|WrapAnywhere
operator|<<
name|Qt
operator|::
name|RightToLeft
operator|<<
name|Qt
operator|::
name|AlignHCenter
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|3.5
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|0
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cursorToXForTrailingSpaces
name|void
name|tst_QTextLayout
operator|::
name|cursorToXForTrailingSpaces
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QTextOption
operator|::
name|WrapMode
argument_list|,
name|wrapMode
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|Qt
operator|::
name|LayoutDirection
argument_list|,
name|textDirection
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|Qt
operator|::
name|AlignmentFlag
argument_list|,
name|alignment
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qreal
argument_list|,
name|cursorAt0
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qreal
argument_list|,
name|cursorAt4
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qreal
argument_list|,
name|cursorAt6
argument_list|)
expr_stmt|;
name|QTextLayout
name|layout
argument_list|(
literal|"%^&   "
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|QTextOption
name|o
init|=
name|layout
operator|.
name|textOption
argument_list|()
decl_stmt|;
name|o
operator|.
name|setTextDirection
argument_list|(
name|textDirection
argument_list|)
expr_stmt|;
name|o
operator|.
name|setAlignment
argument_list|(
name|alignment
argument_list|)
expr_stmt|;
name|o
operator|.
name|setWrapMode
argument_list|(
name|wrapMode
argument_list|)
expr_stmt|;
name|layout
operator|.
name|setTextOption
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|4
argument_list|)
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|0
argument_list|)
argument_list|,
name|cursorAt0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|4
argument_list|)
argument_list|,
name|cursorAt4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|6
argument_list|)
argument_list|,
name|cursorAt6
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|horizontalAlignment_data
name|void
name|tst_QTextLayout
operator|::
name|horizontalAlignment_data
parameter_list|()
block|{
name|qreal
name|width
init|=
name|TESTFONT_SIZE
operator|*
literal|4
decl_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QTextOption
operator|::
name|WrapMode
argument_list|>
argument_list|(
literal|"wrapMode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|Qt
operator|::
name|LayoutDirection
argument_list|>
argument_list|(
literal|"textDirection"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|Qt
operator|::
name|AlignmentFlag
argument_list|>
argument_list|(
literal|"alignment"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qreal
argument_list|>
argument_list|(
literal|"naturalLeft"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qreal
argument_list|>
argument_list|(
literal|"naturalRight"
argument_list|)
expr_stmt|;
comment|// Aligned left from start of visible characters.
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ltr nowrap lalign"
argument_list|)
operator|<<
name|QTextOption
operator|::
name|NoWrap
operator|<<
name|Qt
operator|::
name|LeftToRight
operator|<<
name|Qt
operator|::
name|AlignLeft
operator|<<
name|qreal
argument_list|(
literal|0
argument_list|)
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|6
argument_list|)
expr_stmt|;
comment|// Aligned left from start of visible characters.
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ltr wrap lalign"
argument_list|)
operator|<<
name|QTextOption
operator|::
name|WrapAnywhere
operator|<<
name|Qt
operator|::
name|LeftToRight
operator|<<
name|Qt
operator|::
name|AlignLeft
operator|<<
name|qreal
argument_list|(
literal|0
argument_list|)
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|3
argument_list|)
expr_stmt|;
comment|// Aligned right from end of whitespace characters.
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ltr nowrap ralign"
argument_list|)
operator|<<
name|QTextOption
operator|::
name|NoWrap
operator|<<
name|Qt
operator|::
name|LeftToRight
operator|<<
name|Qt
operator|::
name|AlignRight
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
operator|-
literal|2
argument_list|)
operator|<<
name|width
expr_stmt|;
comment|// Aligned right from end of visible characters.
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ltr wrap ralign"
argument_list|)
operator|<<
name|QTextOption
operator|::
name|WrapAnywhere
operator|<<
name|Qt
operator|::
name|LeftToRight
operator|<<
name|Qt
operator|::
name|AlignRight
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
argument_list|)
operator|<<
name|width
expr_stmt|;
comment|// Aligned center of all characters
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ltr nowrap calign"
argument_list|)
operator|<<
name|QTextOption
operator|::
name|NoWrap
operator|<<
name|Qt
operator|::
name|LeftToRight
operator|<<
name|Qt
operator|::
name|AlignHCenter
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
operator|-
literal|1
argument_list|)
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|5
argument_list|)
expr_stmt|;
comment|// Aligned center of visible characters
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ltr wrap calign"
argument_list|)
operator|<<
name|QTextOption
operator|::
name|WrapAnywhere
operator|<<
name|Qt
operator|::
name|LeftToRight
operator|<<
name|Qt
operator|::
name|AlignHCenter
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|0.5
argument_list|)
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|3.5
argument_list|)
expr_stmt|;
comment|// Aligned right from start of visible characters
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rtl nowrap ralign"
argument_list|)
operator|<<
name|QTextOption
operator|::
name|NoWrap
operator|<<
name|Qt
operator|::
name|RightToLeft
operator|<<
name|Qt
operator|::
name|AlignRight
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
operator|-
literal|2
argument_list|)
operator|<<
name|width
expr_stmt|;
comment|// Aligned right from start of visible characters
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rtl wrap ralign"
argument_list|)
operator|<<
name|QTextOption
operator|::
name|WrapAnywhere
operator|<<
name|Qt
operator|::
name|RightToLeft
operator|<<
name|Qt
operator|::
name|AlignRight
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|1
argument_list|)
operator|<<
name|width
expr_stmt|;
comment|// Aligned left from end of whitespace characters
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rtl nowrap lalign"
argument_list|)
operator|<<
name|QTextOption
operator|::
name|NoWrap
operator|<<
name|Qt
operator|::
name|RightToLeft
operator|<<
name|Qt
operator|::
name|AlignLeft
operator|<<
name|qreal
argument_list|(
literal|0
argument_list|)
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|6
argument_list|)
expr_stmt|;
comment|// Aligned left from end of visible characters
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rtl wrap lalign"
argument_list|)
operator|<<
name|QTextOption
operator|::
name|WrapAnywhere
operator|<<
name|Qt
operator|::
name|RightToLeft
operator|<<
name|Qt
operator|::
name|AlignLeft
operator|<<
name|qreal
argument_list|(
literal|0
argument_list|)
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|3
argument_list|)
expr_stmt|;
comment|// Aligned center of all characters
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rtl nowrap calign"
argument_list|)
operator|<<
name|QTextOption
operator|::
name|NoWrap
operator|<<
name|Qt
operator|::
name|RightToLeft
operator|<<
name|Qt
operator|::
name|AlignHCenter
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
operator|-
literal|1
argument_list|)
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|5
argument_list|)
expr_stmt|;
comment|// Aligned center of visible characters
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rtl wrap calign"
argument_list|)
operator|<<
name|QTextOption
operator|::
name|WrapAnywhere
operator|<<
name|Qt
operator|::
name|RightToLeft
operator|<<
name|Qt
operator|::
name|AlignHCenter
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|0.5
argument_list|)
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|3.5
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|horizontalAlignment
name|void
name|tst_QTextLayout
operator|::
name|horizontalAlignment
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QTextOption
operator|::
name|WrapMode
argument_list|,
name|wrapMode
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|Qt
operator|::
name|LayoutDirection
argument_list|,
name|textDirection
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|Qt
operator|::
name|AlignmentFlag
argument_list|,
name|alignment
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qreal
argument_list|,
name|naturalLeft
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qreal
argument_list|,
name|naturalRight
argument_list|)
expr_stmt|;
name|QTextLayout
name|layout
argument_list|(
literal|"%^&   "
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|QTextOption
name|o
init|=
name|layout
operator|.
name|textOption
argument_list|()
decl_stmt|;
name|o
operator|.
name|setTextDirection
argument_list|(
name|textDirection
argument_list|)
expr_stmt|;
name|o
operator|.
name|setAlignment
argument_list|(
name|alignment
argument_list|)
expr_stmt|;
name|o
operator|.
name|setWrapMode
argument_list|(
name|wrapMode
argument_list|)
expr_stmt|;
name|layout
operator|.
name|setTextOption
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|4
argument_list|)
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|QRectF
name|naturalRect
init|=
name|line
operator|.
name|naturalTextRect
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|naturalRect
operator|.
name|left
argument_list|()
argument_list|,
name|naturalLeft
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|naturalRect
operator|.
name|right
argument_list|()
argument_list|,
name|naturalRight
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|horizontalAlignmentMultiline_data
name|void
name|tst_QTextLayout
operator|::
name|horizontalAlignmentMultiline_data
parameter_list|()
block|{
name|qreal
name|width
init|=
name|TESTFONT_SIZE
operator|*
literal|8
decl_stmt|;
specifier|const
name|QString
name|linebreakText
init|=
name|QStringLiteral
argument_list|(
literal|"^%$&"
argument_list|)
operator|+
name|QChar
argument_list|(
literal|0x2028
argument_list|)
operator|+
name|QStringLiteral
argument_list|(
literal|"^%&*^$"
argument_list|)
decl_stmt|;
name|QString
name|wrappingText
argument_list|(
literal|"^%$&^%&*^$"
argument_list|)
decl_stmt|;
name|QString
name|wrappingWhitespaceText
argument_list|(
literal|"^%$&        ^%&*^$"
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"text"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|Qt
operator|::
name|LayoutDirection
argument_list|>
argument_list|(
literal|"textDirection"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|Qt
operator|::
name|AlignmentFlag
argument_list|>
argument_list|(
literal|"alignment"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qreal
argument_list|>
argument_list|(
literal|"firstLeft"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qreal
argument_list|>
argument_list|(
literal|"firstRight"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qreal
argument_list|>
argument_list|(
literal|"lastLeft"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qreal
argument_list|>
argument_list|(
literal|"lastRight"
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|LayoutDirection
name|textDirection
index|[]
init|=
block|{
name|Qt
operator|::
name|LeftToRight
block|,
name|Qt
operator|::
name|RightToLeft
block|}
decl_stmt|;
name|QByteArray
name|textDirectionText
index|[]
init|=
block|{
literal|"ltr "
block|,
literal|"rtl "
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
comment|// Aligned left from start of visible characters.
name|QTest
operator|::
name|newRow
argument_list|(
name|textDirectionText
index|[
name|i
index|]
operator|+
literal|"linebreak lalign"
argument_list|)
operator|<<
name|linebreakText
operator|<<
name|textDirection
index|[
name|i
index|]
operator|<<
name|Qt
operator|::
name|AlignLeft
operator|<<
name|qreal
argument_list|(
literal|0
argument_list|)
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|4
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|0
argument_list|)
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|6
argument_list|)
expr_stmt|;
comment|// Aligned left from start of visible characters.
name|QTest
operator|::
name|newRow
argument_list|(
name|textDirectionText
index|[
name|i
index|]
operator|+
literal|"wrap-text lalign"
argument_list|)
operator|<<
name|wrappingText
operator|<<
name|textDirection
index|[
name|i
index|]
operator|<<
name|Qt
operator|::
name|AlignLeft
operator|<<
name|qreal
argument_list|(
literal|0
argument_list|)
operator|<<
name|width
operator|<<
name|qreal
argument_list|(
literal|0
argument_list|)
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|2
argument_list|)
expr_stmt|;
comment|// Aligned left from start of visible characters.
name|QTest
operator|::
name|newRow
argument_list|(
name|textDirectionText
index|[
name|i
index|]
operator|+
literal|"wrap-ws lalign"
argument_list|)
operator|<<
name|wrappingWhitespaceText
operator|<<
name|textDirection
index|[
name|i
index|]
operator|<<
name|Qt
operator|::
name|AlignLeft
operator|<<
name|qreal
argument_list|(
literal|0
argument_list|)
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|4
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|0
argument_list|)
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|6
argument_list|)
expr_stmt|;
comment|// Aligned right from start of visible characters.
name|QTest
operator|::
name|newRow
argument_list|(
name|textDirectionText
index|[
name|i
index|]
operator|+
literal|"linebreak ralign"
argument_list|)
operator|<<
name|linebreakText
operator|<<
name|textDirection
index|[
name|i
index|]
operator|<<
name|Qt
operator|::
name|AlignRight
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|4
argument_list|)
operator|<<
name|width
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|2
argument_list|)
operator|<<
name|width
expr_stmt|;
comment|// Aligned right from start of visible characters.
name|QTest
operator|::
name|newRow
argument_list|(
name|textDirectionText
index|[
name|i
index|]
operator|+
literal|"wrap-text ralign"
argument_list|)
operator|<<
name|wrappingText
operator|<<
name|textDirection
index|[
name|i
index|]
operator|<<
name|Qt
operator|::
name|AlignRight
operator|<<
name|qreal
argument_list|(
literal|0
argument_list|)
operator|<<
name|width
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|6
argument_list|)
operator|<<
name|width
expr_stmt|;
comment|// Aligned left from start of visible characters.
name|QTest
operator|::
name|newRow
argument_list|(
name|textDirectionText
index|[
name|i
index|]
operator|+
literal|"wrap-ws ralign"
argument_list|)
operator|<<
name|wrappingWhitespaceText
operator|<<
name|textDirection
index|[
name|i
index|]
operator|<<
name|Qt
operator|::
name|AlignRight
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|4
argument_list|)
operator|<<
name|width
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|2
argument_list|)
operator|<<
name|width
expr_stmt|;
comment|// Aligned center from start of visible characters.
name|QTest
operator|::
name|newRow
argument_list|(
name|textDirectionText
index|[
name|i
index|]
operator|+
literal|"linebreak calign"
argument_list|)
operator|<<
name|linebreakText
operator|<<
name|textDirection
index|[
name|i
index|]
operator|<<
name|Qt
operator|::
name|AlignCenter
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|2
argument_list|)
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|6
argument_list|)
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|1
argument_list|)
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|7
argument_list|)
expr_stmt|;
comment|// Aligned center from start of visible characters.
name|QTest
operator|::
name|newRow
argument_list|(
name|textDirectionText
index|[
name|i
index|]
operator|+
literal|"wrap-text calign"
argument_list|)
operator|<<
name|wrappingText
operator|<<
name|textDirection
index|[
name|i
index|]
operator|<<
name|Qt
operator|::
name|AlignCenter
operator|<<
name|qreal
argument_list|(
literal|0
argument_list|)
operator|<<
name|width
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|3
argument_list|)
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|5
argument_list|)
expr_stmt|;
comment|// Aligned center from start of visible characters.
name|QTest
operator|::
name|newRow
argument_list|(
name|textDirectionText
index|[
name|i
index|]
operator|+
literal|"wrap-ws calign"
argument_list|)
operator|<<
name|wrappingWhitespaceText
operator|<<
name|textDirection
index|[
name|i
index|]
operator|<<
name|Qt
operator|::
name|AlignCenter
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|2
argument_list|)
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|6
argument_list|)
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|1
argument_list|)
operator|<<
name|qreal
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|7
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|horizontalAlignmentMultiline
name|void
name|tst_QTextLayout
operator|::
name|horizontalAlignmentMultiline
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|Qt
operator|::
name|LayoutDirection
argument_list|,
name|textDirection
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|Qt
operator|::
name|AlignmentFlag
argument_list|,
name|alignment
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qreal
argument_list|,
name|firstLeft
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qreal
argument_list|,
name|firstRight
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qreal
argument_list|,
name|lastLeft
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qreal
argument_list|,
name|lastRight
argument_list|)
expr_stmt|;
name|QTextLayout
name|layout
argument_list|(
name|text
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|QTextOption
name|o
init|=
name|layout
operator|.
name|textOption
argument_list|()
decl_stmt|;
name|o
operator|.
name|setTextDirection
argument_list|(
name|textDirection
argument_list|)
expr_stmt|;
name|o
operator|.
name|setAlignment
argument_list|(
name|alignment
argument_list|)
expr_stmt|;
name|o
operator|.
name|setWrapMode
argument_list|(
name|QTextOption
operator|::
name|WrapAnywhere
argument_list|)
expr_stmt|;
name|layout
operator|.
name|setTextOption
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|firstLine
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|QTextLine
name|lastLine
decl_stmt|;
for|for
control|(
name|QTextLine
name|line
init|=
name|firstLine
init|;
name|line
operator|.
name|isValid
argument_list|()
condition|;
name|line
operator|=
name|layout
operator|.
name|createLine
argument_list|()
control|)
block|{
name|line
operator|.
name|setLineWidth
argument_list|(
name|TESTFONT_SIZE
operator|*
literal|8
argument_list|)
expr_stmt|;
name|lastLine
operator|=
name|line
expr_stmt|;
block|}
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
name|firstLine
operator|.
name|textLength
argument_list|()
operator|<<
name|firstLine
operator|.
name|naturalTextRect
argument_list|()
operator|<<
name|lastLine
operator|.
name|naturalTextRect
argument_list|()
expr_stmt|;
name|QRectF
name|rect
init|=
name|firstLine
operator|.
name|naturalTextRect
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|firstLeft
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rect
operator|.
name|right
argument_list|()
argument_list|,
name|firstRight
argument_list|)
expr_stmt|;
name|rect
operator|=
name|lastLine
operator|.
name|naturalTextRect
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|lastLeft
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rect
operator|.
name|right
argument_list|()
argument_list|,
name|lastRight
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|defaultWordSeparators_data
name|void
name|tst_QTextLayout
operator|::
name|defaultWordSeparators_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"text"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"startPos"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"endPos"
argument_list|)
expr_stmt|;
name|QString
name|separators
argument_list|(
literal|".,:;-<>[](){}=/+%&^*"
argument_list|)
decl_stmt|;
name|separators
operator|+=
name|QLatin1String
argument_list|(
literal|"!?"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|separators
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"abcd"
argument_list|)
operator|+
name|separators
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"efgh"
argument_list|)
operator|<<
literal|0
operator|<<
literal|4
expr_stmt|;
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nbsp"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"abcd"
argument_list|)
operator|+
name|QString
argument_list|(
name|QChar
operator|::
name|Nbsp
argument_list|)
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"efgh"
argument_list|)
operator|<<
literal|0
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"tab"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"abcd"
argument_list|)
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\t"
argument_list|)
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"efgh"
argument_list|)
operator|<<
literal|0
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"lineseparator"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"abcd"
argument_list|)
operator|+
name|QString
argument_list|(
name|QChar
operator|::
name|LineSeparator
argument_list|)
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"efgh"
argument_list|)
operator|<<
literal|0
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|defaultWordSeparators
name|void
name|tst_QTextLayout
operator|::
name|defaultWordSeparators
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|startPos
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|endPos
argument_list|)
expr_stmt|;
name|QTextLayout
name|layout
argument_list|(
name|text
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|layout
operator|.
name|nextCursorPosition
argument_list|(
name|startPos
argument_list|,
name|QTextLayout
operator|::
name|SkipWords
argument_list|)
argument_list|,
name|endPos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|layout
operator|.
name|previousCursorPosition
argument_list|(
name|endPos
argument_list|,
name|QTextLayout
operator|::
name|SkipWords
argument_list|)
argument_list|,
name|startPos
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cursorMovementFromInvalidPositions
name|void
name|tst_QTextLayout
operator|::
name|cursorMovementFromInvalidPositions
parameter_list|()
block|{
name|int
name|badpos
init|=
literal|10000
decl_stmt|;
name|QTextLayout
name|layout
argument_list|(
literal|"ABC"
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|layout
operator|.
name|previousCursorPosition
argument_list|(
operator|-
name|badpos
argument_list|,
name|QTextLayout
operator|::
name|SkipCharacters
argument_list|)
argument_list|,
operator|-
name|badpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|layout
operator|.
name|nextCursorPosition
argument_list|(
operator|-
name|badpos
argument_list|,
name|QTextLayout
operator|::
name|SkipCharacters
argument_list|)
argument_list|,
operator|-
name|badpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|layout
operator|.
name|previousCursorPosition
argument_list|(
name|badpos
argument_list|,
name|QTextLayout
operator|::
name|SkipCharacters
argument_list|)
argument_list|,
name|badpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|layout
operator|.
name|nextCursorPosition
argument_list|(
name|badpos
argument_list|,
name|QTextLayout
operator|::
name|SkipCharacters
argument_list|)
argument_list|,
name|badpos
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cursorMovementInsideSpaces
name|void
name|tst_QTextLayout
operator|::
name|cursorMovementInsideSpaces
parameter_list|()
block|{
name|QTextLayout
name|layout
argument_list|(
literal|"ABC            DEF"
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|layout
operator|.
name|previousCursorPosition
argument_list|(
literal|6
argument_list|,
name|QTextLayout
operator|::
name|SkipWords
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|layout
operator|.
name|nextCursorPosition
argument_list|(
literal|6
argument_list|,
name|QTextLayout
operator|::
name|SkipWords
argument_list|)
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|QTextLayout
name|layout2
argument_list|(
literal|"ABC\t\t\t\t\t\t\t\t\t\t\t\tDEF"
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|layout2
operator|.
name|previousCursorPosition
argument_list|(
literal|6
argument_list|,
name|QTextLayout
operator|::
name|SkipWords
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|layout2
operator|.
name|nextCursorPosition
argument_list|(
literal|6
argument_list|,
name|QTextLayout
operator|::
name|SkipWords
argument_list|)
argument_list|,
literal|15
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|charWordStopOnLineSeparator
name|void
name|tst_QTextLayout
operator|::
name|charWordStopOnLineSeparator
parameter_list|()
block|{
specifier|const
name|QChar
name|lineSeparator
argument_list|(
name|QChar
operator|::
name|LineSeparator
argument_list|)
decl_stmt|;
name|QString
name|txt
decl_stmt|;
name|txt
operator|.
name|append
argument_list|(
name|lineSeparator
argument_list|)
expr_stmt|;
name|txt
operator|.
name|append
argument_list|(
name|lineSeparator
argument_list|)
expr_stmt|;
name|QTextLayout
name|layout
argument_list|(
name|txt
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|QTextEngine
modifier|*
name|engine
init|=
name|layout
operator|.
name|engine
argument_list|()
decl_stmt|;
specifier|const
name|QCharAttributes
modifier|*
name|attrs
init|=
name|engine
operator|->
name|attributes
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|attrs
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attrs
index|[
literal|1
index|]
operator|.
name|graphemeBoundary
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|xToCursorAtEndOfLine
name|void
name|tst_QTextLayout
operator|::
name|xToCursorAtEndOfLine
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
name|QSKIP
argument_list|(
literal|"QTestFontEngine on the mac does not support logclusters at the moment"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QString
name|text
init|=
literal|"FirstLine SecondLine"
decl_stmt|;
name|text
operator|.
name|replace
argument_list|(
literal|'\n'
argument_list|,
name|QChar
operator|::
name|LineSeparator
argument_list|)
expr_stmt|;
specifier|const
name|qreal
name|firstLineWidth
init|=
name|QString
argument_list|(
literal|"FirstLine"
argument_list|)
operator|.
name|length
argument_list|()
operator|*
name|testFont
operator|.
name|pixelSize
argument_list|()
decl_stmt|;
name|QTextLayout
name|layout
argument_list|(
name|text
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|line
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
name|firstLineWidth
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|layout
operator|.
name|createLine
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|layout
operator|.
name|createLine
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|line
operator|=
name|layout
operator|.
name|lineAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|xToCursor
argument_list|(
literal|100000
argument_list|)
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|line
operator|=
name|layout
operator|.
name|lineAt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|xToCursor
argument_list|(
literal|100000
argument_list|)
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|boundingRectTopLeft
name|void
name|tst_QTextLayout
operator|::
name|boundingRectTopLeft
parameter_list|()
block|{
name|QString
name|text
init|=
literal|"FirstLine\nSecondLine"
decl_stmt|;
name|text
operator|.
name|replace
argument_list|(
literal|'\n'
argument_list|,
name|QChar
operator|::
name|LineSeparator
argument_list|)
expr_stmt|;
name|QTextLayout
name|layout
argument_list|(
name|text
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|firstLine
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|firstLine
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|firstLine
operator|.
name|setPosition
argument_list|(
name|QPointF
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|QTextLine
name|secondLine
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|secondLine
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|secondLine
operator|.
name|setPosition
argument_list|(
name|QPointF
argument_list|(
literal|20
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|layout
operator|.
name|boundingRect
argument_list|()
operator|.
name|topLeft
argument_list|()
argument_list|,
name|firstLine
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|graphemeBoundaryForSurrogatePairs
name|void
name|tst_QTextLayout
operator|::
name|graphemeBoundaryForSurrogatePairs
parameter_list|()
block|{
name|QString
name|txt
decl_stmt|;
name|txt
operator|.
name|append
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|txt
operator|.
name|append
argument_list|(
literal|0xd87e
argument_list|)
expr_stmt|;
name|txt
operator|.
name|append
argument_list|(
literal|0xdc25
argument_list|)
expr_stmt|;
name|txt
operator|.
name|append
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|QTextLayout
name|layout
argument_list|(
name|txt
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|QTextEngine
modifier|*
name|engine
init|=
name|layout
operator|.
name|engine
argument_list|()
decl_stmt|;
specifier|const
name|QCharAttributes
modifier|*
name|attrs
init|=
name|engine
operator|->
name|attributes
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|attrs
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attrs
index|[
literal|0
index|]
operator|.
name|graphemeBoundary
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attrs
index|[
literal|1
index|]
operator|.
name|graphemeBoundary
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|attrs
index|[
literal|2
index|]
operator|.
name|graphemeBoundary
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attrs
index|[
literal|3
index|]
operator|.
name|graphemeBoundary
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tabStops
name|void
name|tst_QTextLayout
operator|::
name|tabStops
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
name|QSKIP
argument_list|(
literal|"QTestFontEngine on the mac does not support logclusters at the moment"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QString
name|txt
argument_list|(
literal|"Hello there\tworld"
argument_list|)
decl_stmt|;
name|QTextLayout
name|layout
argument_list|(
name|txt
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|line
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|line
operator|.
name|setNumColumns
argument_list|(
literal|11
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|textLength
argument_list|()
argument_list|,
name|TESTFONT_SIZE
argument_list|)
expr_stmt|;
name|line
operator|=
name|layout
operator|.
name|createLine
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|line
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|line
operator|.
name|setNumColumns
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|textLength
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|integerOverflow
name|void
name|tst_QTextLayout
operator|::
name|integerOverflow
parameter_list|()
block|{
name|QString
name|txt
argument_list|(
literal|"Hello world... "
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|8
condition|;
operator|++
name|i
control|)
name|txt
operator|+=
name|txt
expr_stmt|;
name|QTextLayout
name|layout
argument_list|(
name|txt
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|line
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|textLength
argument_list|()
argument_list|,
name|txt
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|layout
operator|.
name|createLine
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setNumColumnsWrapAtWordBoundaryOrAnywhere
name|void
name|tst_QTextLayout
operator|::
name|setNumColumnsWrapAtWordBoundaryOrAnywhere
parameter_list|()
block|{
name|QString
name|txt
argument_list|(
literal|"This is a small test text"
argument_list|)
decl_stmt|;
name|QTextLayout
name|layout
argument_list|(
name|txt
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QTextOption
name|option
init|=
name|layout
operator|.
name|textOption
argument_list|()
decl_stmt|;
name|option
operator|.
name|setWrapMode
argument_list|(
name|QTextOption
operator|::
name|WrapAtWordBoundaryOrAnywhere
argument_list|)
expr_stmt|;
name|layout
operator|.
name|setTextOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line1
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|line1
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|line1
operator|.
name|setNumColumns
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// qDebug()<< line1.naturalTextWidth();
name|QCOMPARE
argument_list|(
name|line1
operator|.
name|textLength
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|line1
operator|.
name|naturalTextWidth
argument_list|()
operator|==
name|testFont
operator|.
name|pixelSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// contains only one character
name|QTextLine
name|line2
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|line2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setNumColumnsWordWrap
name|void
name|tst_QTextLayout
operator|::
name|setNumColumnsWordWrap
parameter_list|()
block|{
name|QString
name|txt
argument_list|(
literal|"This is a small test text"
argument_list|)
decl_stmt|;
name|QTextLayout
name|layout
argument_list|(
name|txt
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QTextOption
name|option
init|=
name|layout
operator|.
name|textOption
argument_list|()
decl_stmt|;
name|option
operator|.
name|setWrapMode
argument_list|(
name|QTextOption
operator|::
name|WordWrap
argument_list|)
expr_stmt|;
name|layout
operator|.
name|setTextOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line1
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|line1
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|line1
operator|.
name|setNumColumns
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// qDebug()<< line1.naturalTextWidth();
name|QCOMPARE
argument_list|(
name|line1
operator|.
name|textLength
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|line1
operator|.
name|naturalTextWidth
argument_list|()
operator|>
literal|20.0
argument_list|)
expr_stmt|;
comment|// contains the whole first word.
name|QTextLine
name|line2
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|line2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|smallTextLengthNoWrap
name|void
name|tst_QTextLayout
operator|::
name|smallTextLengthNoWrap
parameter_list|()
block|{
name|QString
name|txt
argument_list|(
literal|"This is a small test text"
argument_list|)
decl_stmt|;
name|QTextLayout
name|layout
argument_list|(
name|txt
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QTextOption
name|option
init|=
name|layout
operator|.
name|textOption
argument_list|()
decl_stmt|;
name|option
operator|.
name|setWrapMode
argument_list|(
name|QTextOption
operator|::
name|NoWrap
argument_list|)
expr_stmt|;
name|layout
operator|.
name|setTextOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
comment|/// NoWrap
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line1
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|line1
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|line1
operator|.
name|setLineWidth
argument_list|(
literal|5
argument_list|)
expr_stmt|;
comment|// most certainly too short for the word 'This' to fit.
name|QCOMPARE
argument_list|(
name|line1
operator|.
name|width
argument_list|()
argument_list|,
literal|5.0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|line1
operator|.
name|naturalTextWidth
argument_list|()
operator|>
literal|70
argument_list|)
expr_stmt|;
comment|// contains all the text.
name|QTextLine
name|line2
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|line2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|smallTextLengthWordWrap
name|void
name|tst_QTextLayout
operator|::
name|smallTextLengthWordWrap
parameter_list|()
block|{
name|QString
name|txt
argument_list|(
literal|"This is a small test text"
argument_list|)
decl_stmt|;
name|QTextLayout
name|layout
argument_list|(
name|txt
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QTextOption
name|option
init|=
name|layout
operator|.
name|textOption
argument_list|()
decl_stmt|;
name|option
operator|.
name|setWrapMode
argument_list|(
name|QTextOption
operator|::
name|WordWrap
argument_list|)
expr_stmt|;
name|layout
operator|.
name|setTextOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
comment|/// WordWrap
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line1
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|line1
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|line1
operator|.
name|setLineWidth
argument_list|(
literal|5
argument_list|)
expr_stmt|;
comment|// most certainly too short for the word 'This' to fit.
name|QCOMPARE
argument_list|(
name|line1
operator|.
name|width
argument_list|()
argument_list|,
literal|5.0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|line1
operator|.
name|naturalTextWidth
argument_list|()
operator|>
literal|20.0
argument_list|)
expr_stmt|;
comment|// contains the whole first word.
name|QCOMPARE
argument_list|(
name|line1
operator|.
name|textLength
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QTextLine
name|line2
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|line2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|smallTextLengthWrapAtWordBoundaryOrAnywhere
name|void
name|tst_QTextLayout
operator|::
name|smallTextLengthWrapAtWordBoundaryOrAnywhere
parameter_list|()
block|{
name|QString
name|txt
argument_list|(
literal|"This is a small test text"
argument_list|)
decl_stmt|;
name|QTextLayout
name|layout
argument_list|(
name|txt
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QTextOption
name|option
init|=
name|layout
operator|.
name|textOption
argument_list|()
decl_stmt|;
name|option
operator|.
name|setWrapMode
argument_list|(
name|QTextOption
operator|::
name|WrapAtWordBoundaryOrAnywhere
argument_list|)
expr_stmt|;
name|layout
operator|.
name|setTextOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line1
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|line1
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|line1
operator|.
name|setLineWidth
argument_list|(
literal|5
argument_list|)
expr_stmt|;
comment|// most certainly too short for the word 'This' to fit.
name|QCOMPARE
argument_list|(
name|line1
operator|.
name|width
argument_list|()
argument_list|,
literal|5.0
argument_list|)
expr_stmt|;
comment|// qDebug()<< line1.naturalTextWidth();
name|QCOMPARE
argument_list|(
name|line1
operator|.
name|textLength
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|line1
operator|.
name|naturalTextWidth
argument_list|()
operator|==
name|testFont
operator|.
name|pixelSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// contains just the characters that fit.
name|QTextLine
name|line2
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|line2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testDefaultTabs
name|void
name|tst_QTextLayout
operator|::
name|testDefaultTabs
parameter_list|()
block|{
name|QTextLayout
name|layout
argument_list|(
literal|"Foo\tBar\ta slightly longer text\tend."
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
comment|//qDebug()<< "After the tab: "<< line.cursorToX(4);
name|QCOMPARE
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|80.
argument_list|)
expr_stmt|;
comment|// default tab is 80
name|QCOMPARE
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|8
argument_list|)
argument_list|,
literal|160.
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|31
argument_list|)
argument_list|,
literal|480.
argument_list|)
expr_stmt|;
name|QTextOption
name|option
init|=
name|layout
operator|.
name|textOption
argument_list|()
decl_stmt|;
name|option
operator|.
name|setTabStop
argument_list|(
literal|90
argument_list|)
expr_stmt|;
name|layout
operator|.
name|setTextOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|line
operator|=
name|layout
operator|.
name|createLine
argument_list|()
expr_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|90.
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|8
argument_list|)
argument_list|,
literal|180.
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|31
argument_list|)
argument_list|,
literal|450.
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QTextOption
operator|::
name|Tab
argument_list|>
name|tabs
decl_stmt|;
name|QTextOption
operator|::
name|Tab
name|tab
decl_stmt|;
name|tab
operator|.
name|position
operator|=
literal|110
expr_stmt|;
comment|// set one tab to 110, but since the rest is unset they will be at the normal interval again.
name|tabs
operator|.
name|append
argument_list|(
name|tab
argument_list|)
expr_stmt|;
name|option
operator|.
name|setTabs
argument_list|(
name|tabs
argument_list|)
expr_stmt|;
name|layout
operator|.
name|setTextOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|line
operator|=
name|layout
operator|.
name|createLine
argument_list|()
expr_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|110.
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|8
argument_list|)
argument_list|,
literal|180.
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|31
argument_list|)
argument_list|,
literal|450.
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testTabs
name|void
name|tst_QTextLayout
operator|::
name|testTabs
parameter_list|()
block|{
name|QTextLayout
name|layout
argument_list|(
literal|"Foo\tBar."
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QTextOption
name|option
init|=
name|layout
operator|.
name|textOption
argument_list|()
decl_stmt|;
name|option
operator|.
name|setTabStop
argument_list|(
literal|150
argument_list|)
expr_stmt|;
name|layout
operator|.
name|setTextOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
literal|200.
argument_list|)
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|line
operator|.
name|naturalTextWidth
argument_list|()
operator|>
literal|150
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|150.
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testMultilineTab
name|void
name|tst_QTextLayout
operator|::
name|testMultilineTab
parameter_list|()
block|{
name|QTextLayout
name|layout
argument_list|(
literal|"Lorem ipsum dolor sit\tBar."
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// test if this works on the second line.
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
literal|220.
argument_list|)
expr_stmt|;
comment|// moves 'sit' to next line.
name|line
operator|=
name|layout
operator|.
name|createLine
argument_list|()
expr_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
literal|220.
argument_list|)
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|22
argument_list|)
argument_list|,
literal|80.
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testMultiTab
name|void
name|tst_QTextLayout
operator|::
name|testMultiTab
parameter_list|()
block|{
name|QTextLayout
name|layout
argument_list|(
literal|"Foo\t\t\tBar."
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
literal|1000.
argument_list|)
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|6
argument_list|)
argument_list|,
literal|80.
operator|*
literal|3
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testTabsInAlignedParag
name|void
name|tst_QTextLayout
operator|::
name|testTabsInAlignedParag
parameter_list|()
block|{
name|QTextLayout
name|layout
argument_list|(
literal|"Foo\tsome more words"
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QTextOption
name|option
init|=
name|layout
operator|.
name|textOption
argument_list|()
decl_stmt|;
comment|// right
name|option
operator|.
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignRight
argument_list|)
expr_stmt|;
name|layout
operator|.
name|setTextOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
literal|300.
argument_list|)
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
specifier|const
name|qreal
name|textWidth
init|=
literal|80
operator|+
literal|15
operator|*
name|TESTFONT_SIZE
decl_stmt|;
comment|// 15 chars right of the tab
name|QCOMPARE
argument_list|(
name|line
operator|.
name|naturalTextWidth
argument_list|()
argument_list|,
name|textWidth
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|300.
operator|-
name|textWidth
argument_list|)
expr_stmt|;
comment|// centered
name|option
operator|.
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignCenter
argument_list|)
expr_stmt|;
name|layout
operator|.
name|setTextOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|line
operator|=
name|layout
operator|.
name|createLine
argument_list|()
expr_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
literal|300.
argument_list|)
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|naturalTextWidth
argument_list|()
argument_list|,
name|textWidth
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|(
literal|300.
operator|-
name|textWidth
operator|)
operator|/
literal|2.
argument_list|)
expr_stmt|;
comment|// justified
name|option
operator|.
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignJustify
argument_list|)
expr_stmt|;
name|layout
operator|.
name|setTextOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|line
operator|=
name|layout
operator|.
name|createLine
argument_list|()
expr_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
name|textWidth
operator|-
literal|10
argument_list|)
expr_stmt|;
comment|// make the last word slip to the next line so justification actually happens.
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0.
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|80.
argument_list|)
expr_stmt|;
comment|//QTextLayout layout2("Foo\tUt wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis", testFont); // means it will be more then one line long.
block|}
end_function
begin_function
DECL|function|testRightTab
name|void
name|tst_QTextLayout
operator|::
name|testRightTab
parameter_list|()
block|{
name|QTextLayout
name|layout
argument_list|(
literal|"Foo\tLorem ipsum te sit\tBar baz\tText\tEnd"
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
comment|/*                     ^ a                 ^ b      ^ c   ^ d      a = 4, b = 22, c = 30, d = 35 (position)       I expect the output to be:         Foo Lorem ipsum te         sit      Bar Baz         Text         End       a) tab replaced with a single space due to the text not fitting before the tab.      b) tab takes space so the text until the 3th tab fits to the tab pos.      c) tab is after last tab (both auto and defined) and thus moves text to start of next line.      d) tab takes space so text until enter fits to tab pos.     */
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QTextOption
name|option
init|=
name|layout
operator|.
name|textOption
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QTextOption
operator|::
name|Tab
argument_list|>
name|tabs
decl_stmt|;
name|QTextOption
operator|::
name|Tab
name|tab
decl_stmt|;
name|tab
operator|.
name|type
operator|=
name|QTextOption
operator|::
name|RightTab
expr_stmt|;
name|tab
operator|.
name|position
operator|=
literal|190
expr_stmt|;
comment|// which means only 15(.8) chars of our test font fit left of it.
name|tabs
operator|.
name|append
argument_list|(
name|tab
argument_list|)
expr_stmt|;
name|option
operator|.
name|setTabs
argument_list|(
name|tabs
argument_list|)
expr_stmt|;
name|layout
operator|.
name|setTextOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line1
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|line1
operator|.
name|setLineWidth
argument_list|(
literal|220.
argument_list|)
expr_stmt|;
comment|// qDebug()<< "=====line 2";
name|QTextLine
name|line2
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|line2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|line2
operator|.
name|setLineWidth
argument_list|(
literal|220.
argument_list|)
expr_stmt|;
comment|// qDebug()<< "=====line 3";
name|QTextLine
name|line3
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|line3
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|line3
operator|.
name|setLineWidth
argument_list|(
literal|220.
argument_list|)
expr_stmt|;
comment|// qDebug()<< "=====line 4";
name|QTextLine
name|line4
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|line4
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
comment|// qDebug()<< "--------";
name|QCOMPARE
argument_list|(
name|line1
operator|.
name|cursorToX
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|3.
operator|*
name|TESTFONT_SIZE
argument_list|)
expr_stmt|;
comment|// a
name|QCOMPARE
argument_list|(
name|line1
operator|.
name|textLength
argument_list|()
argument_list|,
literal|19
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line2
operator|.
name|cursorToX
argument_list|(
literal|23
argument_list|)
argument_list|,
literal|190.
operator|-
literal|7.
operator|*
name|TESTFONT_SIZE
argument_list|)
expr_stmt|;
comment|// b
name|QCOMPARE
argument_list|(
name|line2
operator|.
name|textLength
argument_list|()
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line3
operator|.
name|cursorToX
argument_list|(
literal|31
argument_list|)
argument_list|,
literal|0.
argument_list|)
expr_stmt|;
comment|// c
name|QCOMPARE
argument_list|(
name|line3
operator|.
name|cursorToX
argument_list|(
literal|36
argument_list|)
argument_list|,
literal|190
operator|-
literal|3.
operator|*
name|TESTFONT_SIZE
argument_list|)
expr_stmt|;
comment|// d
block|}
end_function
begin_function
DECL|function|testCenteredTab
name|void
name|tst_QTextLayout
operator|::
name|testCenteredTab
parameter_list|()
block|{
name|QTextLayout
name|layout
argument_list|(
literal|"Foo\tBar"
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// test if centering the tab works.  We expect the center of 'Bar.' to be at the tab point.
name|QTextOption
name|option
init|=
name|layout
operator|.
name|textOption
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QTextOption
operator|::
name|Tab
argument_list|>
name|tabs
decl_stmt|;
name|QTextOption
operator|::
name|Tab
name|tab
argument_list|(
literal|150
argument_list|,
name|QTextOption
operator|::
name|CenterTab
argument_list|)
decl_stmt|;
name|tabs
operator|.
name|append
argument_list|(
name|tab
argument_list|)
expr_stmt|;
name|option
operator|.
name|setTabs
argument_list|(
name|tabs
argument_list|)
expr_stmt|;
name|layout
operator|.
name|setTextOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
literal|200.
argument_list|)
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
specifier|const
name|qreal
name|wordLength
init|=
literal|3
operator|*
name|TESTFONT_SIZE
decl_stmt|;
comment|// the length of 'Bar'
name|QCOMPARE
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|150
operator|-
name|wordLength
operator|/
literal|2.
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testDelimiterTab
name|void
name|tst_QTextLayout
operator|::
name|testDelimiterTab
parameter_list|()
block|{
name|QTextLayout
name|layout
argument_list|(
literal|"Foo\tBar. Barrabas"
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// try the different delimiter characters to see if the alignment works there.
name|QTextOption
name|option
init|=
name|layout
operator|.
name|textOption
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QTextOption
operator|::
name|Tab
argument_list|>
name|tabs
decl_stmt|;
name|QTextOption
operator|::
name|Tab
name|tab
argument_list|(
literal|100
argument_list|,
name|QTextOption
operator|::
name|DelimiterTab
argument_list|,
name|QChar
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
name|tabs
operator|.
name|append
argument_list|(
name|tab
argument_list|)
expr_stmt|;
name|option
operator|.
name|setTabs
argument_list|(
name|tabs
argument_list|)
expr_stmt|;
name|layout
operator|.
name|setTextOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
literal|200.
argument_list|)
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
specifier|const
name|qreal
name|distanceBeforeTab
init|=
literal|3.5
operator|*
name|TESTFONT_SIZE
decl_stmt|;
comment|// the length of 'bar' and half the width of the dot.
name|QCOMPARE
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|100
operator|-
name|distanceBeforeTab
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testLineBreakingAllSpaces
name|void
name|tst_QTextLayout
operator|::
name|testLineBreakingAllSpaces
parameter_list|()
block|{
name|QTextLayout
name|layout
argument_list|(
literal|"                    123"
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
comment|// thats 20 spaces
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|const
name|qreal
name|firstLineWidth
init|=
literal|17
operator|*
name|TESTFONT_SIZE
decl_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line1
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|line1
operator|.
name|setLineWidth
argument_list|(
name|firstLineWidth
argument_list|)
expr_stmt|;
name|QTextLine
name|line2
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|line2
operator|.
name|setLineWidth
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// the rest
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line1
operator|.
name|width
argument_list|()
argument_list|,
name|firstLineWidth
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line1
operator|.
name|naturalTextWidth
argument_list|()
argument_list|,
literal|0.
argument_list|)
expr_stmt|;
comment|// spaces don't take space
name|QCOMPARE
argument_list|(
name|line1
operator|.
name|textLength
argument_list|()
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line2
operator|.
name|textLength
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line2
operator|.
name|naturalTextWidth
argument_list|()
argument_list|,
literal|3.
operator|*
name|TESTFONT_SIZE
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tabsForRtl
name|void
name|tst_QTextLayout
operator|::
name|tabsForRtl
parameter_list|()
block|{
name|QString
name|word
argument_list|(
name|QChar
argument_list|(
literal|0x5e9
argument_list|)
argument_list|)
decl_stmt|;
comment|// a hebrew character
name|word
operator|=
name|word
operator|+
name|word
operator|+
name|word
expr_stmt|;
comment|// 3 hebrew characters ;)
name|QTextLayout
name|layout
argument_list|(
name|word
operator|+
literal|'\t'
operator|+
name|word
operator|+
literal|'\t'
operator|+
name|word
operator|+
literal|'\t'
operator|+
name|word
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
comment|//QTextLayout layout(word +' '+ word +' '+ word +' '+ word, testFont);// tester ;)
comment|/*                             ^ a         ^ b         ^ c      a = 4, b = 8, c = 12, d = 16 (position)       a) Left tab in RTL is a righ tab; so a is at width - 80      b) Like a      c) right tab on RTL is a left tab; so its at width - 240      d) center tab is still a centered tab.     */
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QTextOption
name|option
init|=
name|layout
operator|.
name|textOption
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QTextOption
operator|::
name|Tab
argument_list|>
name|tabs
decl_stmt|;
name|QTextOption
operator|::
name|Tab
name|tab
decl_stmt|;
name|tab
operator|.
name|position
operator|=
literal|80
expr_stmt|;
name|tabs
operator|.
name|append
argument_list|(
name|tab
argument_list|)
expr_stmt|;
name|tab
operator|.
name|position
operator|=
literal|160
expr_stmt|;
name|tabs
operator|.
name|append
argument_list|(
name|tab
argument_list|)
expr_stmt|;
name|tab
operator|.
name|position
operator|=
literal|240
expr_stmt|;
name|tab
operator|.
name|type
operator|=
name|QTextOption
operator|::
name|RightTab
expr_stmt|;
name|tabs
operator|.
name|append
argument_list|(
name|tab
argument_list|)
expr_stmt|;
name|option
operator|.
name|setTabs
argument_list|(
name|tabs
argument_list|)
expr_stmt|;
name|option
operator|.
name|setTextDirection
argument_list|(
name|Qt
operator|::
name|RightToLeft
argument_list|)
expr_stmt|;
name|option
operator|.
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignRight
argument_list|)
expr_stmt|;
name|layout
operator|.
name|setTextOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
specifier|const
name|qreal
name|WIDTH
init|=
literal|400.
decl_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
name|WIDTH
argument_list|)
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
comment|//qDebug()<< "layout ended --------------";
name|QCOMPARE
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|0
argument_list|)
argument_list|,
name|WIDTH
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|1
argument_list|)
argument_list|,
name|WIDTH
operator|-
name|TESTFONT_SIZE
argument_list|)
expr_stmt|;
comment|// check its right-aligned
name|QCOMPARE
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|4
argument_list|)
argument_list|,
name|WIDTH
operator|-
literal|80
operator|+
literal|3
operator|*
name|TESTFONT_SIZE
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|8
argument_list|)
argument_list|,
name|WIDTH
operator|-
literal|160
operator|+
literal|3
operator|*
name|TESTFONT_SIZE
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|12
argument_list|)
argument_list|,
name|WIDTH
operator|-
literal|240
argument_list|)
expr_stmt|;
block|}
end_function
begin_function_decl
name|QT_BEGIN_NAMESPACE
name|Q_GUI_EXPORT
name|int
name|qt_defaultDpiY
parameter_list|()
function_decl|;
end_function_decl
begin_function
name|QT_END_NAMESPACE
DECL|function|testTabDPIScale
name|void
name|tst_QTextLayout
operator|::
name|testTabDPIScale
parameter_list|()
block|{
class|class
name|MyPaintDevice
super|:
specifier|public
name|QPaintDevice
block|{
name|QPaintEngine
modifier|*
name|paintEngine
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
name|int
name|metric
parameter_list|(
name|QPaintDevice
operator|::
name|PaintDeviceMetric
name|metric
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|metric
condition|)
block|{
case|case
name|QPaintDevice
operator|::
name|PdmWidth
case|:
case|case
name|QPaintDevice
operator|::
name|PdmHeight
case|:
case|case
name|QPaintDevice
operator|::
name|PdmWidthMM
case|:
case|case
name|QPaintDevice
operator|::
name|PdmHeightMM
case|:
case|case
name|QPaintDevice
operator|::
name|PdmNumColors
case|:
return|return
name|INT_MAX
return|;
case|case
name|QPaintDevice
operator|::
name|PdmDepth
case|:
return|return
literal|32
return|;
case|case
name|QPaintDevice
operator|::
name|PdmDpiX
case|:
case|case
name|QPaintDevice
operator|::
name|PdmDpiY
case|:
case|case
name|QPaintDevice
operator|::
name|PdmPhysicalDpiX
case|:
case|case
name|QPaintDevice
operator|::
name|PdmPhysicalDpiY
case|:
return|return
literal|72
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
class|;
name|MyPaintDevice
name|pd
decl_stmt|;
name|QTextLayout
name|layout
argument_list|(
literal|"text1\ttext2\ttext3\tend"
argument_list|,
name|testFont
argument_list|,
operator|&
name|pd
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QTextOption
name|option
init|=
name|layout
operator|.
name|textOption
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QTextOption
operator|::
name|Tab
argument_list|>
name|tabs
decl_stmt|;
name|QTextOption
operator|::
name|Tab
name|tab
decl_stmt|;
name|tab
operator|.
name|position
operator|=
literal|300
expr_stmt|;
name|tabs
operator|.
name|append
argument_list|(
name|tab
argument_list|)
expr_stmt|;
name|tab
operator|.
name|position
operator|=
literal|600
expr_stmt|;
name|tab
operator|.
name|type
operator|=
name|QTextOption
operator|::
name|RightTab
expr_stmt|;
name|tabs
operator|.
name|append
argument_list|(
name|tab
argument_list|)
expr_stmt|;
name|tab
operator|.
name|position
operator|=
literal|800
expr_stmt|;
name|tab
operator|.
name|type
operator|=
name|QTextOption
operator|::
name|CenterTab
expr_stmt|;
name|tabs
operator|.
name|append
argument_list|(
name|tab
argument_list|)
expr_stmt|;
name|option
operator|.
name|setTabs
argument_list|(
name|tabs
argument_list|)
expr_stmt|;
name|layout
operator|.
name|setTextOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
literal|1500.
argument_list|)
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0.
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|(
name|double
operator|)
name|TESTFONT_SIZE
argument_list|)
expr_stmt|;
comment|// check that the font does not resize
name|qreal
name|scale
init|=
literal|72
operator|/
operator|(
name|qreal
operator|)
name|qt_defaultDpiY
argument_list|()
decl_stmt|;
comment|// lets do the transformation of deminishing resolution that QFixed has as effect.
name|int
name|fixedScale
init|=
call|(
name|int
call|)
argument_list|(
name|scale
operator|*
name|qreal
argument_list|(
literal|64
argument_list|)
argument_list|)
decl_stmt|;
comment|// into a QFixed
name|scale
operator|=
operator|(
operator|(
name|qreal
operator|)
name|fixedScale
operator|)
operator|/
operator|(
name|qreal
operator|)
literal|64
expr_stmt|;
comment|// and out of a QFixed
name|QCOMPARE
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|6
argument_list|)
argument_list|,
name|tabs
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|position
operator|*
name|scale
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|12
argument_list|)
argument_list|,
name|tabs
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|position
operator|*
name|scale
operator|-
name|TESTFONT_SIZE
operator|*
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|18
argument_list|)
argument_list|,
name|tabs
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|position
operator|*
name|scale
operator|-
name|TESTFONT_SIZE
operator|*
literal|3
operator|/
literal|2.0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tabHeight
name|void
name|tst_QTextLayout
operator|::
name|tabHeight
parameter_list|()
block|{
name|QTextLayout
name|layout
argument_list|(
literal|"\t"
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qRound
argument_list|(
name|line
operator|.
name|ascent
argument_list|()
argument_list|)
argument_list|,
name|QFontMetrics
argument_list|(
name|testFont
argument_list|)
operator|.
name|ascent
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qRound
argument_list|(
name|line
operator|.
name|descent
argument_list|()
argument_list|)
argument_list|,
name|QFontMetrics
argument_list|(
name|testFont
argument_list|)
operator|.
name|descent
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|capitalization_allUpperCase
name|void
name|tst_QTextLayout
operator|::
name|capitalization_allUpperCase
parameter_list|()
block|{
name|QFont
name|font
argument_list|(
name|testFont
argument_list|)
decl_stmt|;
name|font
operator|.
name|setCapitalization
argument_list|(
name|QFont
operator|::
name|AllUppercase
argument_list|)
expr_stmt|;
name|QTextLayout
name|layout
argument_list|(
literal|"Test"
argument_list|,
name|font
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|layout
operator|.
name|createLine
argument_list|()
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|QTextEngine
modifier|*
name|engine
init|=
name|layout
operator|.
name|engine
argument_list|()
decl_stmt|;
name|engine
operator|->
name|itemize
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|engine
operator|->
name|layoutData
operator|->
name|items
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|engine
operator|->
name|layoutData
operator|->
name|items
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|analysis
operator|.
name|flags
operator|==
name|QScriptAnalysis
operator|::
name|Uppercase
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|capitalization_allUpperCase_newline
name|void
name|tst_QTextLayout
operator|::
name|capitalization_allUpperCase_newline
parameter_list|()
block|{
name|QFont
name|font
argument_list|(
name|testFont
argument_list|)
decl_stmt|;
name|font
operator|.
name|setCapitalization
argument_list|(
name|QFont
operator|::
name|AllUppercase
argument_list|)
expr_stmt|;
name|QString
name|tmp
init|=
literal|"hello\nworld!"
decl_stmt|;
name|tmp
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|,
name|QChar
operator|::
name|LineSeparator
argument_list|)
expr_stmt|;
name|QTextLayout
name|layout
argument_list|(
name|tmp
argument_list|,
name|font
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|layout
operator|.
name|createLine
argument_list|()
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|QTextEngine
modifier|*
name|engine
init|=
name|layout
operator|.
name|engine
argument_list|()
decl_stmt|;
name|engine
operator|->
name|itemize
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|engine
operator|->
name|layoutData
operator|->
name|items
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|engine
operator|->
name|layoutData
operator|->
name|items
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|analysis
operator|.
name|flags
operator|==
name|QScriptAnalysis
operator|::
name|Uppercase
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|engine
operator|->
name|layoutData
operator|->
name|items
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|analysis
operator|.
name|flags
operator|==
name|QScriptAnalysis
operator|::
name|LineOrParagraphSeparator
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|engine
operator|->
name|layoutData
operator|->
name|items
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|analysis
operator|.
name|flags
operator|==
name|QScriptAnalysis
operator|::
name|Uppercase
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|capitalization_allLowerCase
name|void
name|tst_QTextLayout
operator|::
name|capitalization_allLowerCase
parameter_list|()
block|{
name|QFont
name|font
argument_list|(
name|testFont
argument_list|)
decl_stmt|;
name|font
operator|.
name|setCapitalization
argument_list|(
name|QFont
operator|::
name|AllLowercase
argument_list|)
expr_stmt|;
name|QTextLayout
name|layout
argument_list|(
literal|"Test"
argument_list|,
name|font
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|layout
operator|.
name|createLine
argument_list|()
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|QTextEngine
modifier|*
name|engine
init|=
name|layout
operator|.
name|engine
argument_list|()
decl_stmt|;
name|engine
operator|->
name|itemize
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|engine
operator|->
name|layoutData
operator|->
name|items
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|engine
operator|->
name|layoutData
operator|->
name|items
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|analysis
operator|.
name|flags
operator|==
name|QScriptAnalysis
operator|::
name|Lowercase
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|capitalization_smallCaps
name|void
name|tst_QTextLayout
operator|::
name|capitalization_smallCaps
parameter_list|()
block|{
name|QFont
name|font
argument_list|(
name|testFont
argument_list|)
decl_stmt|;
name|font
operator|.
name|setCapitalization
argument_list|(
name|QFont
operator|::
name|SmallCaps
argument_list|)
expr_stmt|;
name|QTextLayout
name|layout
argument_list|(
literal|"Test"
argument_list|,
name|font
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|layout
operator|.
name|createLine
argument_list|()
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|QTextEngine
modifier|*
name|engine
init|=
name|layout
operator|.
name|engine
argument_list|()
decl_stmt|;
name|engine
operator|->
name|itemize
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|engine
operator|->
name|layoutData
operator|->
name|items
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|engine
operator|->
name|layoutData
operator|->
name|items
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|analysis
operator|.
name|flags
operator|==
name|QScriptAnalysis
operator|::
name|None
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|engine
operator|->
name|layoutData
operator|->
name|items
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|analysis
operator|.
name|flags
operator|==
name|QScriptAnalysis
operator|::
name|SmallCaps
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|capitalization_capitalize
name|void
name|tst_QTextLayout
operator|::
name|capitalization_capitalize
parameter_list|()
block|{
name|QFont
name|font
argument_list|(
name|testFont
argument_list|)
decl_stmt|;
name|font
operator|.
name|setCapitalization
argument_list|(
name|QFont
operator|::
name|Capitalize
argument_list|)
expr_stmt|;
name|QTextLayout
name|layout
argument_list|(
literal|"hello\tworld"
argument_list|,
name|font
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|layout
operator|.
name|createLine
argument_list|()
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|QTextEngine
modifier|*
name|engine
init|=
name|layout
operator|.
name|engine
argument_list|()
decl_stmt|;
name|engine
operator|->
name|itemize
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|engine
operator|->
name|layoutData
operator|->
name|items
operator|.
name|count
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|engine
operator|->
name|layoutData
operator|->
name|items
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|analysis
operator|.
name|flags
operator|==
name|QScriptAnalysis
operator|::
name|Uppercase
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|engine
operator|->
name|layoutData
operator|->
name|items
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|analysis
operator|.
name|flags
operator|==
name|QScriptAnalysis
operator|::
name|None
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|engine
operator|->
name|layoutData
operator|->
name|items
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|analysis
operator|.
name|flags
operator|==
name|QScriptAnalysis
operator|::
name|Tab
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|engine
operator|->
name|layoutData
operator|->
name|items
operator|.
name|at
argument_list|(
literal|3
argument_list|)
operator|.
name|analysis
operator|.
name|flags
operator|==
name|QScriptAnalysis
operator|::
name|Uppercase
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|engine
operator|->
name|layoutData
operator|->
name|items
operator|.
name|at
argument_list|(
literal|4
argument_list|)
operator|.
name|analysis
operator|.
name|flags
operator|==
name|QScriptAnalysis
operator|::
name|None
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|longText
name|void
name|tst_QTextLayout
operator|::
name|longText
parameter_list|()
block|{
name|QString
name|longText
argument_list|(
literal|128000
argument_list|,
literal|'a'
argument_list|)
decl_stmt|;
block|{
name|QTextLayout
name|layout
argument_list|(
name|longText
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|line
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
name|line
operator|.
name|textLength
argument_list|()
operator|-
literal|1
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|cap
init|=
name|QFont
operator|::
name|MixedCase
init|;
name|cap
operator|<
name|QFont
operator|::
name|Capitalize
operator|+
literal|1
condition|;
operator|++
name|cap
control|)
block|{
name|QFont
name|f
argument_list|(
name|testFont
argument_list|)
decl_stmt|;
name|f
operator|.
name|setCapitalization
argument_list|(
name|QFont
operator|::
name|Capitalization
argument_list|(
name|cap
argument_list|)
argument_list|)
expr_stmt|;
name|QTextLayout
name|layout
argument_list|(
name|longText
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|line
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
name|line
operator|.
name|textLength
argument_list|()
operator|-
literal|1
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|{
name|QTextLayout
name|layout
argument_list|(
name|longText
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|layout
operator|.
name|setFlags
argument_list|(
name|Qt
operator|::
name|TextForceLeftToRight
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|line
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
name|line
operator|.
name|textLength
argument_list|()
operator|-
literal|1
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|{
name|QTextLayout
name|layout
argument_list|(
name|longText
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|layout
operator|.
name|setFlags
argument_list|(
name|Qt
operator|::
name|TextForceRightToLeft
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|line
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
name|line
operator|.
name|textLength
argument_list|()
operator|-
literal|1
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|widthOfTabs
name|void
name|tst_QTextLayout
operator|::
name|widthOfTabs
parameter_list|()
block|{
name|QTextEngine
name|engine
argument_list|(
literal|"ddd\t\t"
argument_list|,
name|testFont
argument_list|)
decl_stmt|;
name|engine
operator|.
name|ignoreBidi
operator|=
literal|true
expr_stmt|;
name|engine
operator|.
name|itemize
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qRound
argument_list|(
name|engine
operator|.
name|width
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|engine
operator|.
name|boundingBox
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
operator|.
name|width
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|columnWrapWithTabs
name|void
name|tst_QTextLayout
operator|::
name|columnWrapWithTabs
parameter_list|()
block|{
name|QTextLayout
name|textLayout
decl_stmt|;
block|{
name|QTextOption
name|textOption
decl_stmt|;
name|textOption
operator|.
name|setWrapMode
argument_list|(
name|QTextOption
operator|::
name|WordWrap
argument_list|)
expr_stmt|;
name|textLayout
operator|.
name|setTextOption
argument_list|(
name|textOption
argument_list|)
expr_stmt|;
block|}
comment|// Make sure string with spaces does not break
block|{
name|QString
name|text
init|=
literal|"Foo bar foo bar foo bar"
decl_stmt|;
name|textLayout
operator|.
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|textLayout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line
init|=
name|textLayout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|line
operator|.
name|setNumColumns
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|textLength
argument_list|()
argument_list|,
name|text
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|textLayout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
block|}
comment|// Make sure string with tabs breaks
block|{
name|QString
name|text
init|=
literal|"Foo\tbar\tfoo\tbar\tfoo\tbar"
decl_stmt|;
name|textLayout
operator|.
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|textLayout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line
init|=
name|textLayout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|line
operator|.
name|setNumColumns
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|line
operator|.
name|textLength
argument_list|()
operator|<
name|text
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|textLayout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|boundingRectForUnsetLineWidth
name|void
name|tst_QTextLayout
operator|::
name|boundingRectForUnsetLineWidth
parameter_list|()
block|{
name|QTextLayout
name|layout
argument_list|(
literal|"FOOBAR"
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|layout
operator|.
name|boundingRect
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|line
operator|.
name|naturalTextWidth
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|boundingRectForSetLineWidth
name|void
name|tst_QTextLayout
operator|::
name|boundingRectForSetLineWidth
parameter_list|()
block|{
name|QTextLayout
name|layout
argument_list|(
literal|"FOOBAR"
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
name|QFIXED_MAX
operator|-
literal|1
argument_list|)
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|layout
operator|.
name|boundingRect
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|qreal
argument_list|(
name|QFIXED_MAX
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lineWidthFromBOM
name|void
name|tst_QTextLayout
operator|::
name|lineWidthFromBOM
parameter_list|()
block|{
specifier|const
name|QString
name|string
argument_list|(
name|QChar
argument_list|(
literal|0xfeff
argument_list|)
argument_list|)
decl_stmt|;
comment|// BYTE ORDER MARK
name|QTextLayout
name|layout
argument_list|(
name|string
argument_list|)
decl_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
name|INT_MAX
operator|/
literal|256
argument_list|)
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
comment|// Don't spin into an infinite loop
block|}
end_function
begin_function
DECL|function|glyphLessItems
name|void
name|tst_QTextLayout
operator|::
name|glyphLessItems
parameter_list|()
block|{
block|{
name|QTextLayout
name|layout
decl_stmt|;
name|layout
operator|.
name|setText
argument_list|(
literal|"\t\t"
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|layout
operator|.
name|createLine
argument_list|()
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
block|}
block|{
name|QTextLayout
name|layout
decl_stmt|;
name|layout
operator|.
name|setText
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"AA"
argument_list|)
operator|+
name|QChar
argument_list|(
name|QChar
operator|::
name|LineSeparator
argument_list|)
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|layout
operator|.
name|createLine
argument_list|()
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|textWidthVsWIdth
name|void
name|tst_QTextLayout
operator|::
name|textWidthVsWIdth
parameter_list|()
block|{
name|QTextLayout
name|layout
decl_stmt|;
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QTextOption
name|opt
decl_stmt|;
name|opt
operator|.
name|setWrapMode
argument_list|(
name|QTextOption
operator|::
name|WrapAnywhere
argument_list|)
expr_stmt|;
name|layout
operator|.
name|setTextOption
argument_list|(
name|opt
argument_list|)
expr_stmt|;
name|layout
operator|.
name|setText
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"g++ -c -m64 -pipe -g -fvisibility=hidden -fvisibility-inlines-hidden -Wall -W -D_REENTRANT -fPIC -DCORE_LIBRARY -DIDE_LIBRARY_BASENAME=\"lib\" -DWITH_TESTS "
literal|"-DQT_NO_CAST_TO_ASCII -DQT_USE_FAST_OPERATOR_PLUS -DQT_USE_FAST_CONCATENATION -DQT_PLUGIN -DQT_TESTLIB_LIB -DQT_SCRIPT_LIB -DQT_SVG_LIB -DQT_SQL_LIB -DQT_XM"
literal|"L_LIB -DQT_GUI_LIB -DQT_NETWORK_LIB -DQT_CORE_LIB -DQT_SHARED -I../../../../qt-qml/mkspecs/linux-g++-64 -I. -I../../../../qt-qml/include/QtCore -I../../../."
literal|"./qt-qml/include/QtNetwork -I../../../../qt-qml/include/QtGui -I../../../../qt-qml/include/QtXml -I../../../../qt-qml/include/QtSql -I../../../../qt-qml/inc"
literal|"lude/QtSvg -I../../../../qt-qml/include/QtScript -I../../../../qt-qml/include/QtTest -I../../../../qt-qml/include -I../../../../qt-qml/include/QtHelp -I../."
literal|"./libs -I/home/ettrich/dev/creator/tools -I../../plugins -I../../shared/scriptwrapper -I../../libs/3rdparty/botan/build -Idialogs -Iactionmanager -Ieditorma"
literal|"nager -Iprogressmanager -Iscriptmanager -I.moc/debug-shared -I.uic -o .obj/debug-shared/sidebar.o sidebar.cpp"
argument_list|)
argument_list|)
expr_stmt|;
comment|// textWidth includes right bearing, but it should never be LARGER than width if there is space for at least one character
for|for
control|(
name|int
name|width
init|=
literal|100
init|;
name|width
operator|<
literal|1000
condition|;
operator|++
name|width
control|)
block|{
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
name|width
argument_list|)
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|qreal
name|textWidthIsLargerBy
init|=
name|qMax
argument_list|(
name|qreal
argument_list|(
literal|0
argument_list|)
argument_list|,
name|line
operator|.
name|naturalTextWidth
argument_list|()
operator|-
name|line
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
name|qreal
name|thisMustBeZero
init|=
literal|0
decl_stmt|;
name|QCOMPARE
argument_list|(
name|textWidthIsLargerBy
argument_list|,
name|thisMustBeZero
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|textWithSurrogates_qtbug15679
name|void
name|tst_QTextLayout
operator|::
name|textWithSurrogates_qtbug15679
parameter_list|()
block|{
name|QString
name|str
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"ðað"
argument_list|)
decl_stmt|;
name|QTextLayout
name|layout
argument_list|(
name|str
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|qreal
name|x
index|[
literal|6
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
name|x
index|[
name|i
index|]
operator|=
name|line
operator|.
name|cursorToX
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|// If the first and third character are using the same
comment|// font, they must have the same advance (since they
comment|// are surrogate pairs, we need to add two for each
comment|// character)
name|QCOMPARE
argument_list|(
name|x
index|[
literal|2
index|]
operator|-
name|x
index|[
literal|0
index|]
argument_list|,
name|x
index|[
literal|5
index|]
operator|-
name|x
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|textWidthWithStackedTextEngine
name|void
name|tst_QTextLayout
operator|::
name|textWidthWithStackedTextEngine
parameter_list|()
block|{
name|QString
name|text
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"à¸à¸¥à¸´à¸ à¸à¸±à¸à¹à¸ à¹à¸à¸·à¹à¸­à¸à¸³à¹à¸à¸´à¸à¸à¸²à¸£à¸à¹à¸­"
argument_list|)
decl_stmt|;
name|QTextLayout
name|layout
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|QFontMetricsF
name|fm
argument_list|(
name|layout
operator|.
name|font
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|line
operator|.
name|naturalTextWidth
argument_list|()
argument_list|,
name|fm
operator|.
name|width
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|textWidthWithLineSeparator
name|void
name|tst_QTextLayout
operator|::
name|textWidthWithLineSeparator
parameter_list|()
block|{
name|QString
name|s1
argument_list|(
literal|"Save Project"
argument_list|)
decl_stmt|,
name|s2
argument_list|(
literal|"Save Project\ntest"
argument_list|)
decl_stmt|;
name|s2
operator|.
name|replace
argument_list|(
literal|'\n'
argument_list|,
name|QChar
operator|::
name|LineSeparator
argument_list|)
expr_stmt|;
name|QTextLayout
name|layout1
argument_list|(
name|s1
argument_list|)
decl_stmt|,
name|layout2
argument_list|(
name|s2
argument_list|)
decl_stmt|;
name|layout1
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|layout2
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line1
init|=
name|layout1
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|QTextLine
name|line2
init|=
name|layout2
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|line1
operator|.
name|setLineWidth
argument_list|(
literal|0x1000
argument_list|)
expr_stmt|;
name|line2
operator|.
name|setLineWidth
argument_list|(
literal|0x1000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|line1
operator|.
name|naturalTextWidth
argument_list|()
argument_list|,
name|line2
operator|.
name|naturalTextWidth
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cursorInLigatureWithMultipleLines
name|void
name|tst_QTextLayout
operator|::
name|cursorInLigatureWithMultipleLines
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
name|QSKIP
argument_list|(
literal|"This test can only be run on Mac"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTextLayout
name|layout
argument_list|(
literal|"first line finish"
argument_list|,
name|QFont
argument_list|(
literal|"Times"
argument_list|,
literal|20
argument_list|)
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
literal|70
argument_list|)
expr_stmt|;
name|line
operator|=
name|layout
operator|.
name|createLine
argument_list|()
expr_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
comment|// The second line will be "finish", with "fi" as a ligature
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"QTBUG-26403"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|0
argument_list|)
operator|!=
name|line
operator|.
name|cursorToX
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|xToCursorForLigatures
name|void
name|tst_QTextLayout
operator|::
name|xToCursorForLigatures
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
name|QSKIP
argument_list|(
literal|"This test can only be run on Mac"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTextLayout
name|layout
argument_list|(
literal|"fi"
argument_list|,
name|QFont
argument_list|(
literal|"Times"
argument_list|,
literal|20
argument_list|)
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|line
operator|.
name|xToCursor
argument_list|(
literal|0
argument_list|)
operator|!=
name|line
operator|.
name|xToCursor
argument_list|(
name|line
operator|.
name|naturalTextWidth
argument_list|()
operator|/
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// U+0061 U+0308
name|QTextLayout
name|layout2
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\x61\xCC\x88"
argument_list|)
argument_list|,
name|QFont
argument_list|(
literal|"Times"
argument_list|,
literal|20
argument_list|)
argument_list|)
decl_stmt|;
name|layout2
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|layout2
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|line
operator|=
name|layout2
operator|.
name|createLine
argument_list|()
expr_stmt|;
name|layout2
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|qreal
name|width
init|=
name|line
operator|.
name|naturalTextWidth
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|line
operator|.
name|xToCursor
argument_list|(
literal|0
argument_list|)
operator|==
name|line
operator|.
name|xToCursor
argument_list|(
name|width
operator|/
literal|2
argument_list|)
operator|||
name|line
operator|.
name|xToCursor
argument_list|(
name|width
argument_list|)
operator|==
name|line
operator|.
name|xToCursor
argument_list|(
name|width
operator|/
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cursorInNonStopChars
name|void
name|tst_QTextLayout
operator|::
name|cursorInNonStopChars
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
name|QSKIP
argument_list|(
literal|"This test can not be run on Mac"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTextLayout
name|layout
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xE0\xA4\xA4\xE0\xA5\x8D\xE0\xA4\xA8"
argument_list|)
argument_list|)
decl_stmt|;
name|layout
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|QTextLine
name|line
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
name|layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|1
argument_list|)
operator|==
name|line
operator|.
name|cursorToX
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|line
operator|.
name|cursorToX
argument_list|(
literal|2
argument_list|)
operator|==
name|line
operator|.
name|cursorToX
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QTextLayout
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qtextlayout.moc"
end_include
end_unit
