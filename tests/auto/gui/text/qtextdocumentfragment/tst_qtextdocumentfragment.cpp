begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qtextdocument.h>
end_include
begin_include
include|#
directive|include
file|<qtextdocumentfragment.h>
end_include
begin_include
include|#
directive|include
file|<qtexttable.h>
end_include
begin_include
include|#
directive|include
file|<qtextlist.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<private/qtextdocument_p.h>
end_include
begin_include
include|#
directive|include
file|<qtextcursor.h>
end_include
begin_macro
name|QT_FORWARD_DECLARE_CLASS
argument_list|(
argument|QTextDocument
argument_list|)
end_macro
begin_class
DECL|class|tst_QTextDocumentFragment
class|class
name|tst_QTextDocumentFragment
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QTextDocumentFragment
parameter_list|()
constructor_decl|;
name|~
name|tst_QTextDocumentFragment
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|listCopying
parameter_list|()
function_decl|;
name|void
name|listZeroCopying
parameter_list|()
function_decl|;
name|void
name|listCopying2
parameter_list|()
function_decl|;
name|void
name|tableCopying
parameter_list|()
function_decl|;
name|void
name|tableCopyingWithColSpans
parameter_list|()
function_decl|;
name|void
name|tableColSpanAndWidth
parameter_list|()
function_decl|;
name|void
name|tableImport
parameter_list|()
function_decl|;
name|void
name|tableImport2
parameter_list|()
function_decl|;
name|void
name|tableImport3
parameter_list|()
function_decl|;
name|void
name|tableImport4
parameter_list|()
function_decl|;
name|void
name|tableImport5
parameter_list|()
function_decl|;
name|void
name|textCopy
parameter_list|()
function_decl|;
name|void
name|copyWholeDocument
parameter_list|()
function_decl|;
name|void
name|title
parameter_list|()
function_decl|;
name|void
name|html_listIndents1
parameter_list|()
function_decl|;
name|void
name|html_listIndents2
parameter_list|()
function_decl|;
name|void
name|html_listIndents3
parameter_list|()
function_decl|;
name|void
name|html_listIndents4
parameter_list|()
function_decl|;
name|void
name|html_listIndents5
parameter_list|()
function_decl|;
name|void
name|html_listIndents6
parameter_list|()
function_decl|;
name|void
name|html_listIndents7
parameter_list|()
function_decl|;
name|void
name|blockCharFormat
parameter_list|()
function_decl|;
name|void
name|blockCharFormatCopied
parameter_list|()
function_decl|;
name|void
name|initialBlock
parameter_list|()
function_decl|;
name|void
name|clone
parameter_list|()
function_decl|;
name|void
name|dontRemoveInitialBlockIfItHoldsObjectIndexedCharFormat
parameter_list|()
function_decl|;
name|void
name|dosLineFeed
parameter_list|()
function_decl|;
name|void
name|unorderedListEnumeration
parameter_list|()
function_decl|;
name|void
name|resetHasBlockAfterClosedBlockTags
parameter_list|()
function_decl|;
name|void
name|ignoreStyleTags
parameter_list|()
function_decl|;
name|void
name|hrefAnchor
parameter_list|()
function_decl|;
name|void
name|namedAnchorFragments
parameter_list|()
function_decl|;
name|void
name|namedAnchorFragments2
parameter_list|()
function_decl|;
name|void
name|namedAnchorFragments3
parameter_list|()
function_decl|;
name|void
name|dontInheritAlignmentInTables
parameter_list|()
function_decl|;
name|void
name|cellBlockCount
parameter_list|()
function_decl|;
name|void
name|cellBlockCount2
parameter_list|()
function_decl|;
name|void
name|emptyTable
parameter_list|()
function_decl|;
name|void
name|emptyTable2
parameter_list|()
function_decl|;
name|void
name|emptyTable3
parameter_list|()
function_decl|;
name|void
name|doubleRowClose
parameter_list|()
function_decl|;
name|void
name|mayNotHaveChildren
parameter_list|()
function_decl|;
name|void
name|inheritAlignment
parameter_list|()
function_decl|;
name|void
name|dontEmitEmptyNodeWhenEmptyTagIsFollowedByCloseTag
parameter_list|()
function_decl|;
name|void
name|toPlainText
parameter_list|()
function_decl|;
name|void
name|copyTableRow
parameter_list|()
function_decl|;
name|void
name|copyTableColumn
parameter_list|()
function_decl|;
name|void
name|copySubTable
parameter_list|()
function_decl|;
name|void
name|html_textDecoration
parameter_list|()
function_decl|;
name|void
name|html_infiniteLoop
parameter_list|()
function_decl|;
name|void
name|html_blockIndent
parameter_list|()
function_decl|;
name|void
name|html_listIndent
parameter_list|()
function_decl|;
name|void
name|html_whitespace
parameter_list|()
function_decl|;
name|void
name|html_whitespace_data
parameter_list|()
function_decl|;
name|void
name|html_qt3Whitespace
parameter_list|()
function_decl|;
name|void
name|html_qt3WhitespaceWithFragments
parameter_list|()
function_decl|;
name|void
name|html_qt3WhitespaceAfterTags
parameter_list|()
function_decl|;
name|void
name|html_listStart1
parameter_list|()
function_decl|;
name|void
name|html_listStart2
parameter_list|()
function_decl|;
name|void
name|html_cssMargin
parameter_list|()
function_decl|;
name|void
name|html_hexEntities
parameter_list|()
function_decl|;
name|void
name|html_decEntities
parameter_list|()
function_decl|;
name|void
name|html_thCentered
parameter_list|()
function_decl|;
name|void
name|orderedListNumbering
parameter_list|()
function_decl|;
name|void
name|html_blockAfterList
parameter_list|()
function_decl|;
name|void
name|html_subAndSuperScript
parameter_list|()
function_decl|;
name|void
name|html_cssColors
parameter_list|()
function_decl|;
name|void
name|obeyFragmentMarkersInImport
parameter_list|()
function_decl|;
name|void
name|whitespaceWithFragmentMarkers
parameter_list|()
function_decl|;
name|void
name|html_emptyParapgraphs1
parameter_list|()
function_decl|;
name|void
name|html_emptyParapgraphs2
parameter_list|()
function_decl|;
name|void
name|html_emptyParagraphs3
parameter_list|()
function_decl|;
name|void
name|html_emptyParagraphs4
parameter_list|()
function_decl|;
name|void
name|html_font
parameter_list|()
function_decl|;
name|void
name|html_fontSize
parameter_list|()
function_decl|;
name|void
name|html_fontSizeAdjustment
parameter_list|()
function_decl|;
name|void
name|html_cssFontSize
parameter_list|()
function_decl|;
name|void
name|html_cssShorthandFont
parameter_list|()
function_decl|;
name|void
name|html_bodyBgColor
parameter_list|()
function_decl|;
name|void
name|html_qtBgColor
parameter_list|()
function_decl|;
name|void
name|html_blockLevelDiv
parameter_list|()
function_decl|;
name|void
name|html_spanNesting
parameter_list|()
function_decl|;
name|void
name|html_nestedLists
parameter_list|()
function_decl|;
name|void
name|noSpecialCharactersInPlainText
parameter_list|()
function_decl|;
name|void
name|html_doNotInheritBackground
parameter_list|()
function_decl|;
name|void
name|html_inheritBackgroundToInlineElements
parameter_list|()
function_decl|;
name|void
name|html_doNotInheritBackgroundFromBlockElements
parameter_list|()
function_decl|;
name|void
name|html_nobr
parameter_list|()
function_decl|;
name|void
name|fromPlainText
parameter_list|()
function_decl|;
name|void
name|fromPlainText2
parameter_list|()
function_decl|;
name|void
name|html_closingImageTag
parameter_list|()
function_decl|;
name|void
name|html_emptyDocument
parameter_list|()
function_decl|;
name|void
name|html_closingTag
parameter_list|()
function_decl|;
name|void
name|html_anchorAroundImage
parameter_list|()
function_decl|;
name|void
name|html_floatBorder
parameter_list|()
function_decl|;
name|void
name|html_frameImport
parameter_list|()
function_decl|;
name|void
name|html_frameImport2
parameter_list|()
function_decl|;
name|void
name|html_dontAddMarginsAcrossTableCells
parameter_list|()
function_decl|;
name|void
name|html_dontMergeCenterBlocks
parameter_list|()
function_decl|;
name|void
name|html_tableCellBgColor
parameter_list|()
function_decl|;
name|void
name|html_tableCellBgColor2
parameter_list|()
function_decl|;
name|void
name|html_cellSkip
parameter_list|()
function_decl|;
name|void
name|nonZeroMarginOnImport
parameter_list|()
function_decl|;
name|void
name|html_charFormatPropertiesUnset
parameter_list|()
function_decl|;
name|void
name|html_headings
parameter_list|()
function_decl|;
name|void
name|html_quotedFontFamily
parameter_list|()
function_decl|;
name|void
name|html_spanBackgroundColor
parameter_list|()
function_decl|;
name|void
name|defaultFont
parameter_list|()
function_decl|;
name|void
name|html_brokenTitle_data
parameter_list|()
function_decl|;
name|void
name|html_brokenTitle
parameter_list|()
function_decl|;
name|void
name|html_blockVsInline
parameter_list|()
function_decl|;
name|void
name|html_tbody
parameter_list|()
function_decl|;
name|void
name|html_nestedTables
parameter_list|()
function_decl|;
name|void
name|html_rowSpans
parameter_list|()
function_decl|;
name|void
name|html_rowSpans2
parameter_list|()
function_decl|;
name|void
name|html_implicitParagraphs
parameter_list|()
function_decl|;
name|void
name|html_missingCloseTag
parameter_list|()
function_decl|;
name|void
name|html_anchorColor
parameter_list|()
function_decl|;
name|void
name|html_lastParagraphClosing
parameter_list|()
function_decl|;
name|void
name|html_tableHeaderBodyFootParent
parameter_list|()
function_decl|;
name|void
name|html_columnWidths
parameter_list|()
function_decl|;
name|void
name|html_bodyBackground
parameter_list|()
function_decl|;
name|void
name|html_tableCellBackground
parameter_list|()
function_decl|;
name|void
name|css_bodyBackground
parameter_list|()
function_decl|;
name|void
name|css_tableCellBackground
parameter_list|()
function_decl|;
name|void
name|css_fontWeight
parameter_list|()
function_decl|;
name|void
name|css_float
parameter_list|()
function_decl|;
name|void
name|css_textIndent
parameter_list|()
function_decl|;
name|void
name|css_inline
parameter_list|()
function_decl|;
name|void
name|css_external
parameter_list|()
function_decl|;
name|void
name|css_import
parameter_list|()
function_decl|;
name|void
name|css_selectors_data
parameter_list|()
function_decl|;
name|void
name|css_selectors
parameter_list|()
function_decl|;
name|void
name|css_nodeNameCaseInsensitivity
parameter_list|()
function_decl|;
name|void
name|css_textUnderlineStyle_data
parameter_list|()
function_decl|;
name|void
name|css_textUnderlineStyle
parameter_list|()
function_decl|;
name|void
name|css_textUnderlineStyleAndDecoration
parameter_list|()
function_decl|;
name|void
name|css_listStyleType
parameter_list|()
function_decl|;
name|void
name|css_linkPseudo
parameter_list|()
function_decl|;
name|void
name|css_pageBreaks
parameter_list|()
function_decl|;
name|void
name|css_cellPaddings
parameter_list|()
function_decl|;
name|void
name|universalSelectors_data
parameter_list|()
function_decl|;
name|void
name|universalSelectors
parameter_list|()
function_decl|;
name|void
name|screenMedia
parameter_list|()
function_decl|;
name|void
name|htmlResourceLoading
parameter_list|()
function_decl|;
name|void
name|someCaseInsensitiveAttributeValues
parameter_list|()
function_decl|;
name|void
name|backgroundImage
parameter_list|()
function_decl|;
name|void
name|dontMergePreAndNonPre
parameter_list|()
function_decl|;
name|void
name|leftMarginInsideHtml
parameter_list|()
function_decl|;
name|void
name|html_margins
parameter_list|()
function_decl|;
name|void
name|newlineInsidePreShouldBecomeNewParagraph
parameter_list|()
function_decl|;
name|void
name|invalidColspan
parameter_list|()
function_decl|;
name|void
name|html_brokenTableWithJustTr
parameter_list|()
function_decl|;
name|void
name|html_brokenTableWithJustTd
parameter_list|()
function_decl|;
name|void
name|html_preNewlineHandling_data
parameter_list|()
function_decl|;
name|void
name|html_preNewlineHandling
parameter_list|()
function_decl|;
name|void
name|html_br
parameter_list|()
function_decl|;
name|void
name|html_dl
parameter_list|()
function_decl|;
name|void
name|html_tableStrangeNewline
parameter_list|()
function_decl|;
name|void
name|html_tableStrangeNewline2
parameter_list|()
function_decl|;
name|void
name|html_tableStrangeNewline3
parameter_list|()
function_decl|;
name|void
name|html_caption
parameter_list|()
function_decl|;
name|void
name|html_windowsEntities
parameter_list|()
function_decl|;
name|void
name|html_eatenText
parameter_list|()
function_decl|;
name|void
name|html_hr
parameter_list|()
function_decl|;
name|void
name|html_hrMargins
parameter_list|()
function_decl|;
name|void
name|html_blockQuoteMargins
parameter_list|()
function_decl|;
name|void
name|html_definitionListMargins
parameter_list|()
function_decl|;
name|void
name|html_listMargins
parameter_list|()
function_decl|;
name|void
name|html_titleAttribute
parameter_list|()
function_decl|;
name|void
name|html_compressDivs
parameter_list|()
function_decl|;
name|void
name|completeToPlainText
parameter_list|()
function_decl|;
name|void
name|copyContents
parameter_list|()
function_decl|;
name|void
name|html_textAfterHr
parameter_list|()
function_decl|;
name|void
name|blockTagClosing
parameter_list|()
function_decl|;
name|void
name|isEmpty
parameter_list|()
function_decl|;
name|void
name|html_alignmentInheritance
parameter_list|()
function_decl|;
name|void
name|html_ignoreEmptyDivs
parameter_list|()
function_decl|;
name|void
name|html_dontInheritAlignmentForFloatingImages
parameter_list|()
function_decl|;
name|void
name|html_verticalImageAlignment
parameter_list|()
function_decl|;
name|void
name|html_verticalCellAlignment
parameter_list|()
function_decl|;
name|void
name|html_borderColor
parameter_list|()
function_decl|;
name|void
name|html_borderStyle
parameter_list|()
function_decl|;
name|void
name|html_borderWidth
parameter_list|()
function_decl|;
name|void
name|html_userState
parameter_list|()
function_decl|;
name|void
name|html_rootFrameProperties
parameter_list|()
function_decl|;
name|void
name|html_alignmentPropertySet
parameter_list|()
function_decl|;
name|void
name|html_appendList
parameter_list|()
function_decl|;
name|void
name|html_appendList2
parameter_list|()
function_decl|;
name|void
name|html_qt3RichtextWhitespaceMode
parameter_list|()
function_decl|;
name|void
name|html_brAfterHr
parameter_list|()
function_decl|;
name|void
name|html_unclosedHead
parameter_list|()
function_decl|;
name|void
name|html_entities
parameter_list|()
function_decl|;
name|void
name|html_entities_data
parameter_list|()
function_decl|;
name|void
name|html_ignore_script
parameter_list|()
function_decl|;
name|void
name|html_directionWithHtml
parameter_list|()
function_decl|;
name|void
name|html_directionWithRichText
parameter_list|()
function_decl|;
name|void
name|html_metaInBody
parameter_list|()
function_decl|;
name|void
name|html_importImageWithoutAspectRatio
parameter_list|()
function_decl|;
name|void
name|html_fromFirefox
parameter_list|()
function_decl|;
name|void
name|html_emptyInlineInsideBlock
parameter_list|()
function_decl|;
private|private:
DECL|function|setHtml
specifier|inline
name|void
name|setHtml
parameter_list|(
specifier|const
name|QString
modifier|&
name|html
parameter_list|)
comment|// don't take the shortcut in QTextDocument::setHtml
block|{
name|doc
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QTextCursor
argument_list|(
name|doc
argument_list|)
operator|.
name|insertFragment
argument_list|(
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|appendHtml
specifier|inline
name|void
name|appendHtml
parameter_list|(
specifier|const
name|QString
modifier|&
name|html
parameter_list|)
block|{
name|QTextCursor
name|cursor
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
block|}
DECL|member|doc
name|QTextDocument
modifier|*
name|doc
decl_stmt|;
DECL|member|cursor
name|QTextCursor
name|cursor
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QTextDocumentFragment
name|tst_QTextDocumentFragment
operator|::
name|tst_QTextDocumentFragment
parameter_list|()
block|{
name|QImage
name|img
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|img
operator|.
name|save
argument_list|(
literal|"foo.png"
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~tst_QTextDocumentFragment
name|tst_QTextDocumentFragment
operator|::
name|~
name|tst_QTextDocumentFragment
parameter_list|()
block|{
name|QFile
operator|::
name|remove
argument_list|(
name|QLatin1String
argument_list|(
literal|"foo.png"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|init
name|void
name|tst_QTextDocumentFragment
operator|::
name|init
parameter_list|()
block|{
name|doc
operator|=
operator|new
name|QTextDocument
expr_stmt|;
name|cursor
operator|=
name|QTextCursor
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QTextDocumentFragment
operator|::
name|cleanup
parameter_list|()
block|{
name|cursor
operator|=
name|QTextCursor
argument_list|()
expr_stmt|;
operator|delete
name|doc
expr_stmt|;
name|doc
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|listCopying
name|void
name|tst_QTextDocumentFragment
operator|::
name|listCopying
parameter_list|()
block|{
name|cursor
operator|.
name|insertList
argument_list|(
name|QTextListFormat
operator|::
name|ListDecimal
argument_list|)
expr_stmt|;
name|QTextFormat
name|originalBlockFormat
init|=
name|cursor
operator|.
name|blockFormat
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|originalBlockFormat
operator|.
name|objectIndex
argument_list|()
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|originalListItemIdx
init|=
name|cursor
operator|.
name|blockFormat
argument_list|()
operator|.
name|objectIndex
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|QTextDocumentFragment
name|fragment
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|fragment
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentList
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|blockFormat
argument_list|()
operator|!=
name|originalBlockFormat
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|blockFormat
argument_list|()
operator|.
name|objectIndex
argument_list|()
operator|!=
name|originalListItemIdx
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|listZeroCopying
name|void
name|tst_QTextDocumentFragment
operator|::
name|listZeroCopying
parameter_list|()
block|{
comment|// same testcase as above but using the zero-copying
name|cursor
operator|.
name|insertList
argument_list|(
name|QTextListFormat
operator|::
name|ListDecimal
argument_list|)
expr_stmt|;
name|QTextFormat
name|originalBlockFormat
init|=
name|cursor
operator|.
name|blockFormat
argument_list|()
decl_stmt|;
name|int
name|originalListItemIdx
init|=
name|cursor
operator|.
name|blockFormat
argument_list|()
operator|.
name|objectIndex
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|QTextDocumentFragment
name|fragment
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|fragment
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentList
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|blockFormat
argument_list|()
operator|!=
name|originalBlockFormat
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|blockFormat
argument_list|()
operator|.
name|objectIndex
argument_list|()
operator|!=
name|originalListItemIdx
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|listCopying2
name|void
name|tst_QTextDocumentFragment
operator|::
name|listCopying2
parameter_list|()
block|{
name|cursor
operator|.
name|insertList
argument_list|(
name|QTextListFormat
operator|::
name|ListDecimal
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertList
argument_list|(
name|QTextListFormat
operator|::
name|ListDisc
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|QTextDocumentFragment
name|fragment
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|fragment
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|int
name|listItemCount
init|=
literal|0
decl_stmt|;
do|do
block|{
if|if
condition|(
name|cursor
operator|.
name|currentList
argument_list|()
condition|)
name|listItemCount
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
condition|)
do|;
name|QCOMPARE
argument_list|(
name|listItemCount
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// we call this here because it used to cause a failing assertion in the
comment|// list manager.
name|doc
operator|->
name|undo
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tableCopying
name|void
name|tst_QTextDocumentFragment
operator|::
name|tableCopying
parameter_list|()
block|{
comment|// this tests both, the fragment to use the direction insertion instead of using the
comment|// cursor, which might adjuts its position when inserting a table step by step, as well
comment|// as the pasiveness of the tablemanager.
name|QTextDocumentFragment
name|fragment
decl_stmt|;
block|{
name|QTextDocument
name|doc
decl_stmt|;
name|QTextCursor
name|cursor
argument_list|(
operator|&
name|doc
argument_list|)
decl_stmt|;
name|QTextTableFormat
name|fmt
decl_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|insertTable
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
name|fmt
argument_list|)
decl_stmt|;
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|insertText
argument_list|(
literal|"First Cell"
argument_list|)
expr_stmt|;
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|insertText
argument_list|(
literal|"Second Cell"
argument_list|)
expr_stmt|;
name|table
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|insertText
argument_list|(
literal|"Third Cell"
argument_list|)
expr_stmt|;
name|table
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|insertText
argument_list|(
literal|"Fourth Cell"
argument_list|)
expr_stmt|;
name|fragment
operator|=
name|QTextDocumentFragment
argument_list|(
operator|&
name|doc
argument_list|)
expr_stmt|;
block|}
block|{
name|QTextDocument
name|doc
decl_stmt|;
name|QTextCursor
name|cursor
argument_list|(
operator|&
name|doc
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"FooBar"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Left
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|fragment
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|rows
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|columns
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|tableCopyingWithColSpans
name|void
name|tst_QTextDocumentFragment
operator|::
name|tableCopyingWithColSpans
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|""
literal|"<table border>"
literal|"<tr>"
literal|"<td>First Cell"
literal|"<td>Second Cell"
literal|"</tr>"
literal|"<tr>"
literal|"<td colspan=\"2\">Third Cell"
literal|"</tr>"
literal|"<tr>"
literal|"<td>Fourth Cell"
literal|"<td>Fifth Cell"
literal|"</tr>"
literal|"</table>"
decl_stmt|;
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|columns
argument_list|()
operator|==
literal|2
operator|&&
name|table
operator|->
name|rows
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|cursor
operator|=
name|table
operator|->
name|cellAt
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
operator|.
name|lastCursorPosition
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstPosition
argument_list|()
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|hasComplexSelection
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|firstRow
init|=
literal|0
decl_stmt|,
name|numRows
init|=
literal|0
decl_stmt|,
name|firstCol
init|=
literal|0
decl_stmt|,
name|numCols
init|=
literal|0
decl_stmt|;
name|cursor
operator|.
name|selectedTableCells
argument_list|(
operator|&
name|firstRow
argument_list|,
operator|&
name|numRows
argument_list|,
operator|&
name|firstCol
argument_list|,
operator|&
name|numCols
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|firstRow
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|numRows
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|firstCol
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|numCols
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTextDocumentFragment
name|frag
init|=
name|cursor
operator|.
name|selection
argument_list|()
decl_stmt|;
name|cleanup
argument_list|()
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|frag
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|table
operator|=
name|cursor
operator|.
name|currentTable
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|columns
argument_list|()
operator|==
literal|1
operator|&&
name|table
operator|->
name|rows
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tableColSpanAndWidth
name|void
name|tst_QTextDocumentFragment
operator|::
name|tableColSpanAndWidth
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|""
literal|"<table border=\"0\">"
literal|"<tr>"
literal|"<td colspan=\"4\" width=\"400\">First Cell</td>"
literal|"</tr>"
literal|"</table>"
decl_stmt|;
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|columns
argument_list|()
operator|==
literal|4
operator|&&
name|table
operator|->
name|rows
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// make sure its approx 400 and not a multiple due to the colspan
name|QVERIFY
argument_list|(
name|doc
operator|->
name|size
argument_list|()
operator|.
name|width
argument_list|()
operator|>
literal|398.
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|size
argument_list|()
operator|.
name|width
argument_list|()
operator|<
literal|420.
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tableImport
name|void
name|tst_QTextDocumentFragment
operator|::
name|tableImport
parameter_list|()
block|{
comment|// used to cause a failing assertion, as HTMLImporter::closeTag was
comment|// called twice with the last node.
name|QTextDocumentFragment
name|fragment
init|=
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"<table><tr><td>Hey</td><td>Blah"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|fragment
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tableImport2
name|void
name|tst_QTextDocumentFragment
operator|::
name|tableImport2
parameter_list|()
block|{
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|""
literal|"<table>"
literal|"<tr><td>First Cell</td><td>Second Cell</td></tr>"
literal|"<tr><td>Third Cell</td><td>Fourth Cell</td></tr>"
literal|"</table>"
decl_stmt|;
name|QTextDocument
name|doc
decl_stmt|;
name|QTextCursor
name|cursor
argument_list|(
operator|&
name|doc
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|QByteArray
operator|::
name|fromRawData
argument_list|(
name|html
argument_list|,
sizeof|sizeof
argument_list|(
name|html
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|html
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|columns
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|rows
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|""
literal|"<table>"
literal|"<tr><td>First Cell</td><td>Second Cell</td></tr>"
literal|"<tr><td>Third Cell</td><td>"
literal|"<table>"
literal|"<tr><td>First Nested Cell</td><td>Second Nested Cell</td></tr>"
literal|"<tr><td>Third Nested Cell</td><td>Fourth Nested Cell</td></tr>"
literal|"<tr><td>Fifth Nested Cell</td><td>Sixth Nested Cell</td></tr>"
literal|"</table></td></tr>"
literal|"</table>"
decl_stmt|;
name|QTextDocument
name|doc
decl_stmt|;
name|QTextCursor
name|cursor
argument_list|(
operator|&
name|doc
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|QByteArray
operator|::
name|fromRawData
argument_list|(
name|html
argument_list|,
sizeof|sizeof
argument_list|(
name|html
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|html
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|columns
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|rows
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|/*         QTextCursor fourthCell = table->cellAt(1, 1).firstCursorPosition();         fourthCell.movePosition(QTextCursor::NextBlock);         table = fourthCell.currentTable();         QVERIFY(table);         QVERIFY(table != cursor.currentTable());         QCOMPARE(table->columns(), 2);         QCOMPARE(table->rows(), 3);         */
block|}
block|{
specifier|const
name|char
name|buggyHtml
index|[]
init|=
literal|""
literal|"<table>"
literal|"<tr><td>First Cell<td>Second Cell"
literal|"<tr><td>Third Cell<td>Fourth Cell"
literal|"</table>"
decl_stmt|;
name|QTextDocument
name|doc
decl_stmt|;
name|QTextCursor
name|cursor
argument_list|(
operator|&
name|doc
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|QByteArray
operator|::
name|fromRawData
argument_list|(
name|buggyHtml
argument_list|,
sizeof|sizeof
argument_list|(
name|buggyHtml
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|buggyHtml
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|columns
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|rows
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|char
name|buggyHtml
index|[]
init|=
literal|""
literal|"<table>"
literal|"<tr><th>First Cell<th>Second Cell"
literal|"<tr><td>Third Cell<td>Fourth Cell"
literal|"</table>"
decl_stmt|;
name|QTextDocument
name|doc
decl_stmt|;
name|QTextCursor
name|cursor
argument_list|(
operator|&
name|doc
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|QByteArray
operator|::
name|fromRawData
argument_list|(
name|buggyHtml
argument_list|,
sizeof|sizeof
argument_list|(
name|buggyHtml
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|buggyHtml
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|columns
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|rows
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|tableImport3
name|void
name|tst_QTextDocumentFragment
operator|::
name|tableImport3
parameter_list|()
block|{
comment|// ### would be better to have tree tests for QTextHtmlParser
comment|// make sure the p is a child of the td. If not the following td
comment|// ends up outside the table, causing an assertion
specifier|const
name|char
name|html
index|[]
init|=
literal|"<table><tr><td><p></p></td><td></td></tr></table>"
decl_stmt|;
name|QTextDocumentFragment
name|fragment
init|=
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|fragment
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tableImport4
name|void
name|tst_QTextDocumentFragment
operator|::
name|tableImport4
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<table>"
literal|"<tr><td>blah</td></tr>"
literal|"<tr><td>blah</td><td>blah</td></tr>"
literal|"</table>"
decl_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentTable
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|currentTable
argument_list|()
operator|->
name|columns
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tableImport5
name|void
name|tst_QTextDocumentFragment
operator|::
name|tableImport5
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<table>"
literal|"<tr>"
literal|"<td>Foo</td>"
literal|"<td>Bar</td>"
literal|"<td>Bleh</td>"
literal|"<td>Blub</td>"
literal|"</tr>"
literal|"<tr>"
literal|"<td>Ahh</td>"
literal|"<td colspan=5>Gah</td>"
literal|"</tr>"
literal|"</table>"
decl_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentTable
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|currentTable
argument_list|()
operator|->
name|rows
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|currentTable
argument_list|()
operator|->
name|columns
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|textCopy
name|void
name|tst_QTextDocumentFragment
operator|::
name|textCopy
parameter_list|()
block|{
comment|/* this test used to cause failing assertions in QTextDocumentFragment */
comment|/* copy&paste 'lo\bwor' */
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"World"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|,
name|QTextCursor
operator|::
name|MoveAnchor
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QTextDocumentFragment
name|fragment
argument_list|(
name|cursor
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|fragment
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|fragment
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|copyWholeDocument
name|void
name|tst_QTextDocumentFragment
operator|::
name|copyWholeDocument
parameter_list|()
block|{
comment|// used to cause the famous currentBlock.position() == pos + 1 failing assertion
name|cursor
operator|.
name|insertText
argument_list|(
literal|"\nHey\nBlah\n"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|QTextFrameFormat
name|fmt
init|=
name|doc
operator|->
name|rootFrame
argument_list|()
operator|->
name|frameFormat
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|setBackground
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|doc
operator|->
name|rootFrame
argument_list|()
operator|->
name|setFrameFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|QTextDocumentFragment
name|fragment
argument_list|(
name|cursor
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// good if we reach this point :)
name|cleanup
argument_list|()
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
name|fmt
operator|.
name|setBackground
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|doc
operator|->
name|rootFrame
argument_list|()
operator|->
name|setFrameFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|fragment
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|rootFrame
argument_list|()
operator|->
name|frameFormat
argument_list|()
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|title
name|void
name|tst_QTextDocumentFragment
operator|::
name|title
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"<html><head><title>Test</title></head><body>Blah</body></html>"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|metaInformation
argument_list|(
name|QTextDocument
operator|::
name|DocumentTitle
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_listIndents1
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_listIndents1
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<ul><li>Hey</li><li>Hah</li></ul>"
decl_stmt|;
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextList
modifier|*
name|list
init|=
name|cursor
operator|.
name|currentList
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|->
name|format
argument_list|()
operator|.
name|indent
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|indent
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_listIndents2
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_listIndents2
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<ul><li>Hey<p>Hah</ul>"
decl_stmt|;
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|QTextList
modifier|*
name|list
init|=
name|cursor
operator|.
name|currentList
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|->
name|format
argument_list|()
operator|.
name|indent
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|indent
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|indent
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_listIndents3
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_listIndents3
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<ul><li><p>Hah</ul>"
decl_stmt|;
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|QTextList
modifier|*
name|list
init|=
name|cursor
operator|.
name|currentList
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|->
name|format
argument_list|()
operator|.
name|indent
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|indent
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_listIndents4
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_listIndents4
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<ul><li>Foo</ul><p>This should not have the same indent as Foo"
decl_stmt|;
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|QTextList
modifier|*
name|list
init|=
name|cursor
operator|.
name|currentList
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|->
name|format
argument_list|()
operator|.
name|indent
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cursor
operator|.
name|currentList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|blockFormat
argument_list|()
operator|.
name|indent
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_listIndents5
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_listIndents5
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<ul><li>Foo<p><li>Bar</li></ul>"
decl_stmt|;
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|QTextList
modifier|*
name|list
init|=
name|cursor
operator|.
name|currentList
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|->
name|format
argument_list|()
operator|.
name|indent
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentList
argument_list|()
operator|==
name|list
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|blockFormat
argument_list|()
operator|.
name|indent
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_listIndents6
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_listIndents6
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<ul><li>Outer List<div class=\"testclass\"><ul><li>Nested Item 1</li></ul></div></li></ul>"
decl_stmt|;
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|QTextList
modifier|*
name|list
init|=
name|cursor
operator|.
name|currentList
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|->
name|format
argument_list|()
operator|.
name|indent
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentList
argument_list|()
operator|!=
name|list
argument_list|)
expr_stmt|;
name|list
operator|=
name|cursor
operator|.
name|currentList
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|->
name|format
argument_list|()
operator|.
name|indent
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|blockFormat
argument_list|()
operator|.
name|indent
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_listIndents7
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_listIndents7
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<ul><li style=\"-qt-block-indent:1;\">Hey</ul>"
decl_stmt|;
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextList
modifier|*
name|list
init|=
name|cursor
operator|.
name|currentList
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|->
name|format
argument_list|()
operator|.
name|indent
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|indent
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|blockCharFormat
name|void
name|tst_QTextDocumentFragment
operator|::
name|blockCharFormat
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<p style=\"font-style:italic\"><span style=\"font-style:normal\">Test</span></p>"
decl_stmt|;
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|fontItalic
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|blockCharFormatCopied
name|void
name|tst_QTextDocumentFragment
operator|::
name|blockCharFormatCopied
parameter_list|()
block|{
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setBlockCharFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Test"
argument_list|,
name|QTextCharFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QTextDocumentFragment
name|frag
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|cleanup
argument_list|()
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|frag
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|blockCharFormat
argument_list|()
operator|==
name|fmt
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initialBlock
name|void
name|tst_QTextDocumentFragment
operator|::
name|initialBlock
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<p>Test</p>"
decl_stmt|;
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clone
name|void
name|tst_QTextDocumentFragment
operator|::
name|clone
parameter_list|()
block|{
name|QTextBlockFormat
name|mod
decl_stmt|;
name|mod
operator|.
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignCenter
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|mergeBlockFormat
argument_list|(
name|mod
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|blockFormat
argument_list|()
operator|.
name|alignment
argument_list|()
operator|==
name|Qt
operator|::
name|AlignCenter
argument_list|)
expr_stmt|;
name|QTextDocumentFragment
name|frag
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|cleanup
argument_list|()
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|frag
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|blockFormat
argument_list|()
operator|.
name|alignment
argument_list|()
operator|==
name|Qt
operator|::
name|AlignCenter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dontRemoveInitialBlockIfItHoldsObjectIndexedCharFormat
name|void
name|tst_QTextDocumentFragment
operator|::
name|dontRemoveInitialBlockIfItHoldsObjectIndexedCharFormat
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<table><tr><td>cell one<td>cell two</tr><tr><td>cell three<td>cell four</tr></table>"
decl_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|objectIndex
argument_list|()
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
name|int
name|objectIndexOfLast
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|QTextBlock
name|blk
init|=
name|doc
operator|->
name|begin
argument_list|()
init|;
name|blk
operator|.
name|isValid
argument_list|()
condition|;
name|blk
operator|=
name|blk
operator|.
name|next
argument_list|()
control|)
block|{
operator|++
name|cnt
expr_stmt|;
name|objectIndexOfLast
operator|=
name|blk
operator|.
name|charFormat
argument_list|()
operator|.
name|objectIndex
argument_list|()
expr_stmt|;
block|}
comment|//   beginning of frame for first cell
comment|// + beginning of frame for second cell
comment|// + beginning of frame for third cell
comment|// + beginning of frame for fourth cell
comment|// + end of frame
comment|// + initial block
comment|// ==> 6
name|QCOMPARE
argument_list|(
name|cnt
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|objectIndexOfLast
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|objectIndex
argument_list|()
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dosLineFeed
name|void
name|tst_QTextDocumentFragment
operator|::
name|dosLineFeed
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<pre>Test\r\n</pre>Bar"
decl_stmt|;
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|doc
operator|->
name|toPlainText
argument_list|()
operator|.
name|contains
argument_list|(
literal|'\r'
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Test\nBar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unorderedListEnumeration
name|void
name|tst_QTextDocumentFragment
operator|::
name|unorderedListEnumeration
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<ul><ul><ul><li>Blah</li></ul></ul>"
decl_stmt|;
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentList
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentList
argument_list|()
operator|->
name|format
argument_list|()
operator|.
name|style
argument_list|()
operator|==
name|QTextListFormat
operator|::
name|ListDisc
argument_list|)
expr_stmt|;
specifier|const
name|char
name|html2
index|[]
init|=
literal|"<ul><ul><ul type=circle><li>Blah</li></ul></ul>"
decl_stmt|;
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html2
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentList
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentList
argument_list|()
operator|->
name|format
argument_list|()
operator|.
name|style
argument_list|()
operator|==
name|QTextListFormat
operator|::
name|ListCircle
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resetHasBlockAfterClosedBlockTags
name|void
name|tst_QTextDocumentFragment
operator|::
name|resetHasBlockAfterClosedBlockTags
parameter_list|()
block|{
comment|// when closing tags we have to make sure hasBlock in import() gets reset
specifier|const
name|char
name|html
index|[]
init|=
literal|"<body><table><tr><td><td><p></table><p></body>"
decl_stmt|;
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|doc
operator|->
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ignoreStyleTags
name|void
name|tst_QTextDocumentFragment
operator|::
name|ignoreStyleTags
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<body><style>Blah</style>Hello</body>"
decl_stmt|;
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hrefAnchor
name|void
name|tst_QTextDocumentFragment
operator|::
name|hrefAnchor
parameter_list|()
block|{
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<a href=\"test\">blah</a>"
decl_stmt|;
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|isAnchor
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|anchorHref
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|fontUnderline
argument_list|()
operator|==
literal|true
argument_list|)
expr_stmt|;
block|}
block|{
comment|// only hyperlinks should have special formatting
specifier|const
name|char
name|html
index|[]
init|=
literal|"<a>blah</a>"
decl_stmt|;
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|isAnchor
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|fontUnderline
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|namedAnchorFragments
name|void
name|tst_QTextDocumentFragment
operator|::
name|namedAnchorFragments
parameter_list|()
block|{
comment|// named anchors should be 'invisible', but the fragment right after it should
comment|// hold the attribute
specifier|const
name|char
name|html
index|[]
init|=
literal|"a<a name=\"test\" />blah"
decl_stmt|;
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|QTextBlock
name|firstBlock
init|=
name|doc
operator|->
name|begin
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|firstBlock
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QTextBlock
operator|::
name|Iterator
name|it
init|=
name|firstBlock
operator|.
name|begin
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|it
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
comment|// the 'a'
name|QVERIFY
argument_list|(
name|it
operator|.
name|fragment
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|it
operator|.
name|fragment
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|isAnchor
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
comment|// the 'b' of 'blah' as separate fragment with the anchor attribute
operator|++
name|it
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|fragment
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|it
operator|.
name|fragment
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|isAnchor
argument_list|()
argument_list|)
expr_stmt|;
comment|// the 'lah' of 'blah' as remainder
operator|++
name|it
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|fragment
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|fragment
argument_list|()
operator|.
name|text
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"lah"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|isAnchor
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|namedAnchorFragments2
name|void
name|tst_QTextDocumentFragment
operator|::
name|namedAnchorFragments2
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<p><a name=\"foo\"> Hello"
decl_stmt|;
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
name|QTextBlock
operator|::
name|Iterator
name|it
init|=
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|begin
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|it
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|it
operator|.
name|fragment
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"H"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|isAnchor
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
name|QCOMPARE
argument_list|(
name|it
operator|.
name|fragment
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"ello"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|it
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|isAnchor
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|namedAnchorFragments3
name|void
name|tst_QTextDocumentFragment
operator|::
name|namedAnchorFragments3
parameter_list|()
block|{
name|setHtml
argument_list|(
literal|"<a name=\"target\" /><a name=\"target2\"/><span>Text</span>"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Text"
argument_list|)
argument_list|)
expr_stmt|;
name|QTextBlock
operator|::
name|Iterator
name|it
init|=
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|begin
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|it
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|it
operator|.
name|fragment
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"T"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|isAnchor
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|it
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|anchorName
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"target"
argument_list|)
argument_list|)
expr_stmt|;
name|QStringList
name|targets
decl_stmt|;
name|targets
operator|<<
literal|"target"
operator|<<
literal|"target2"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|it
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|anchorNames
argument_list|()
argument_list|,
name|targets
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
name|QCOMPARE
argument_list|(
name|it
operator|.
name|fragment
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"ext"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|it
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|isAnchor
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dontInheritAlignmentInTables
name|void
name|tst_QTextDocumentFragment
operator|::
name|dontInheritAlignmentInTables
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<table align=center><tr><td>Hey</td></tr></table>"
decl_stmt|;
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentTable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentTable
argument_list|()
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentTable
argument_list|()
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|alignment
argument_list|()
operator|!=
name|Qt
operator|::
name|AlignHCenter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cellBlockCount
name|void
name|tst_QTextDocumentFragment
operator|::
name|cellBlockCount
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<table><tr><td>Hey</td></tr></table>"
decl_stmt|;
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentTable
argument_list|()
argument_list|)
expr_stmt|;
name|QTextTableCell
name|cell
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|cell
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|blockCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|QTextFrame
operator|::
name|iterator
name|it
init|=
name|cell
operator|.
name|begin
argument_list|()
init|;
operator|!
name|it
operator|.
name|atEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QVERIFY
argument_list|(
name|it
operator|.
name|currentFrame
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|currentBlock
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|blockCount
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|blockCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cellBlockCount2
name|void
name|tst_QTextDocumentFragment
operator|::
name|cellBlockCount2
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<table><tr><td><p>Hey</p></td></tr></table>"
decl_stmt|;
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentTable
argument_list|()
argument_list|)
expr_stmt|;
name|QTextTableCell
name|cell
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|cell
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|blockCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|QTextFrame
operator|::
name|iterator
name|it
init|=
name|cell
operator|.
name|begin
argument_list|()
init|;
operator|!
name|it
operator|.
name|atEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QVERIFY
argument_list|(
name|it
operator|.
name|currentFrame
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|currentBlock
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|blockCount
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|blockCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|emptyTable
name|void
name|tst_QTextDocumentFragment
operator|::
name|emptyTable
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<table></table>"
decl_stmt|;
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// don't crash with a failing assertion
block|}
end_function
begin_function
DECL|function|emptyTable2
name|void
name|tst_QTextDocumentFragment
operator|::
name|emptyTable2
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<table></td></tr></table><p>blah</p>"
decl_stmt|;
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// don't crash with a failing assertion
block|}
end_function
begin_function
DECL|function|emptyTable3
name|void
name|tst_QTextDocumentFragment
operator|::
name|emptyTable3
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<table><tr><td><table></table></td><td>Foobar</td></tr></table>"
decl_stmt|;
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|rows
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|columns
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QTextTableCell
name|cell
init|=
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|cell
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cell
operator|.
name|firstPosition
argument_list|()
operator|==
name|cell
operator|.
name|lastPosition
argument_list|()
argument_list|)
expr_stmt|;
name|cell
operator|=
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursor
init|=
name|cell
operator|.
name|firstCursorPosition
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|cell
operator|.
name|lastPosition
argument_list|()
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectedText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Foobar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|doubleRowClose
name|void
name|tst_QTextDocumentFragment
operator|::
name|doubleRowClose
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<table><tr><td>Blah</td></tr></tr><tr><td>Hm</td></tr></table>"
decl_stmt|;
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// don't crash with a failing assertion
block|}
end_function
begin_function
DECL|function|mayNotHaveChildren
name|void
name|tst_QTextDocumentFragment
operator|::
name|mayNotHaveChildren
parameter_list|()
block|{
comment|// make sure the Hey does not end up as tag text for the img tag
specifier|const
name|char
name|html
index|[]
init|=
literal|"<img />Hey"
decl_stmt|;
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Hey"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|inheritAlignment
name|void
name|tst_QTextDocumentFragment
operator|::
name|inheritAlignment
parameter_list|()
block|{
comment|// make sure attributes from the body tag get inherited
specifier|const
name|char
name|html
index|[]
init|=
literal|"<body align=right><p>Hey"
decl_stmt|;
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
comment|// html alignment is absolute
name|QVERIFY
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|alignment
argument_list|()
operator|==
name|Qt
operator|::
name|Alignment
argument_list|(
name|Qt
operator|::
name|AlignRight
operator||
name|Qt
operator|::
name|AlignAbsolute
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dontEmitEmptyNodeWhenEmptyTagIsFollowedByCloseTag
name|void
name|tst_QTextDocumentFragment
operator|::
name|dontEmitEmptyNodeWhenEmptyTagIsFollowedByCloseTag
parameter_list|()
block|{
comment|// make sure the Hey does not end up as tag text for the img tag
specifier|const
name|char
name|html
index|[]
init|=
literal|"<body align=right><p align=left>Blah<img></img><p>Hey"
decl_stmt|;
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|alignment
argument_list|()
operator|==
name|Qt
operator|::
name|Alignment
argument_list|(
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignAbsolute
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|alignment
argument_list|()
operator|==
name|Qt
operator|::
name|Alignment
argument_list|(
name|Qt
operator|::
name|AlignRight
operator||
name|Qt
operator|::
name|AlignAbsolute
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toPlainText
name|void
name|tst_QTextDocumentFragment
operator|::
name|toPlainText
parameter_list|()
block|{
name|QString
name|input
init|=
literal|"Hello\nWorld"
decl_stmt|;
name|input
operator|+=
name|QChar
operator|::
name|ParagraphSeparator
expr_stmt|;
name|input
operator|+=
literal|"Blah"
expr_stmt|;
name|doc
operator|->
name|setPlainText
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|copyTableRow
name|void
name|tst_QTextDocumentFragment
operator|::
name|copyTableRow
parameter_list|()
block|{
name|QTextDocumentFragment
name|frag
decl_stmt|;
block|{
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|insertTable
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|insertText
argument_list|(
literal|"Foo"
argument_list|)
expr_stmt|;
name|table
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|insertText
argument_list|(
literal|"Bar"
argument_list|)
expr_stmt|;
name|table
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|insertText
argument_list|(
literal|"Hah"
argument_list|)
expr_stmt|;
comment|// select second row
name|cursor
operator|=
name|table
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousBlock
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|)
operator|.
name|row
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
name|cursor
operator|.
name|anchor
argument_list|()
argument_list|)
operator|.
name|row
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
name|cursor
operator|.
name|anchor
argument_list|()
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|frag
operator|=
name|QTextDocumentFragment
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
block|}
block|{
name|QTextDocument
name|doc2
decl_stmt|;
name|cursor
operator|=
name|QTextCursor
argument_list|(
operator|&
name|doc2
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|frag
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|columns
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|rows
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hah"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|copyTableColumn
name|void
name|tst_QTextDocumentFragment
operator|::
name|copyTableColumn
parameter_list|()
block|{
name|QTextDocumentFragment
name|frag
decl_stmt|;
block|{
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|insertTable
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|insertText
argument_list|(
literal|"Foo"
argument_list|)
expr_stmt|;
name|table
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|insertText
argument_list|(
literal|"Bar"
argument_list|)
expr_stmt|;
name|table
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|insertText
argument_list|(
literal|"Hah"
argument_list|)
expr_stmt|;
comment|// select second column
name|cursor
operator|=
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Down
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
name|cursor
operator|.
name|anchor
argument_list|()
argument_list|)
operator|.
name|row
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
name|cursor
operator|.
name|anchor
argument_list|()
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|)
operator|.
name|row
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|frag
operator|=
name|QTextDocumentFragment
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
block|}
block|{
name|QTextDocument
name|doc2
decl_stmt|;
name|cursor
operator|=
name|QTextCursor
argument_list|(
operator|&
name|doc2
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|frag
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|columns
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|rows
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hah"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|copySubTable
name|void
name|tst_QTextDocumentFragment
operator|::
name|copySubTable
parameter_list|()
block|{
name|QTextDocumentFragment
name|frag
decl_stmt|;
block|{
name|QTextTableFormat
name|fmt
decl_stmt|;
name|QVector
argument_list|<
name|QTextLength
argument_list|>
name|constraints
decl_stmt|;
name|constraints
operator|<<
name|QTextLength
argument_list|(
name|QTextLength
operator|::
name|PercentageLength
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|constraints
operator|<<
name|QTextLength
argument_list|(
name|QTextLength
operator|::
name|PercentageLength
argument_list|,
literal|28
argument_list|)
expr_stmt|;
name|constraints
operator|<<
name|QTextLength
argument_list|(
name|QTextLength
operator|::
name|PercentageLength
argument_list|,
literal|28
argument_list|)
expr_stmt|;
name|constraints
operator|<<
name|QTextLength
argument_list|(
name|QTextLength
operator|::
name|PercentageLength
argument_list|,
literal|28
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setColumnWidthConstraints
argument_list|(
name|constraints
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|insertTable
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
name|fmt
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
literal|4
condition|;
operator|++
name|row
control|)
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
literal|4
condition|;
operator|++
name|col
control|)
name|table
operator|->
name|cellAt
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|insertText
argument_list|(
name|QString
argument_list|(
literal|"%1/%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|row
argument_list|)
operator|.
name|arg
argument_list|(
name|col
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|format
argument_list|()
operator|.
name|columnWidthConstraints
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
name|table
operator|->
name|columns
argument_list|()
argument_list|)
expr_stmt|;
comment|// select 2x2 subtable
name|cursor
operator|=
name|table
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Down
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Right
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
name|cursor
operator|.
name|anchor
argument_list|()
argument_list|)
operator|.
name|row
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
name|cursor
operator|.
name|anchor
argument_list|()
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|)
operator|.
name|row
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|frag
operator|=
name|QTextDocumentFragment
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
block|}
block|{
name|QTextDocument
name|doc2
decl_stmt|;
name|cursor
operator|=
name|QTextCursor
argument_list|(
operator|&
name|doc2
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|frag
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|format
argument_list|()
operator|.
name|columnWidthConstraints
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|columns
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|rows
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"1/1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"1/2"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"2/1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"2/2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|html_textDecoration
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_textDecoration
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<span style='text-decoration: overline line-through underline'>Blah</span>"
decl_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|QByteArray
operator|::
name|fromRawData
argument_list|(
name|html
argument_list|,
sizeof|sizeof
argument_list|(
name|html
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|html
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|fontUnderline
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|fontOverline
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|fontStrikeOut
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_infiniteLoop
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_infiniteLoop
parameter_list|()
block|{
block|{
comment|// used to cause an infinite loop due to the lack of a space after the
comment|// tag name
specifier|const
name|char
name|html
index|[]
init|=
literal|"<ahref=\"argl\">Link</a>"
decl_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<a href=\"\"a<"
decl_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|html_blockIndent
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_blockIndent
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<p style=\"-qt-block-indent:3;\">Test</p>"
decl_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|blockFormat
argument_list|()
operator|.
name|indent
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_listIndent
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_listIndent
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<ul style=\"-qt-list-indent:4;\"><li>Blah</ul>"
decl_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|currentList
argument_list|()
operator|->
name|format
argument_list|()
operator|.
name|indent
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_whitespace_data
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_whitespace_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"html"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedPlainText"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<span>This is some test</span><span> with spaces between words</span>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"This is some test with spaces between words"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<span></span><span>nowhitespacehereplease</span>"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"nowhitespacehereplease"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<span style=\"white-space: pre;\">  white  space  here</span>"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"  white  space  here  "
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<span style=\"white-space: pre-wrap;\">  white  space  here</span>"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"  white  space  here  "
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<a href=\"One.html\">One</a><a href=\"Two.html\">Two</a><b>Three</b>\n"
literal|"<b>Four</b>"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"One Two Three Four"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p>Testing:<b><i><u>BoldItalic</u></i></b><i>Italic</i></p>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Testing: BoldItalic Italic"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"7"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<table><tr><td>Blah</td></tr></table><table border><tr><td>Foo</td></tr></table>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\nBlah\n\nFoo\n"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<table><tr><td><i>Blah</i></td></tr></table><i>Blub</i>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\nBlah\nBlub"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"task116492"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p>a<font=\"Times\"> b</font>c</p>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a b c"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"task121653"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc<b> def</b>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc def"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"task122650"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p>Foo</p>    Bar"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Foo\nBar"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"task122650-2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<p>Foo</p><p>  Bar"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Foo \nBar"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"task122650-3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<html>Before<pre>\nTest</pre>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Before\nTest"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"br-with-whitespace"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Foo<br>\nBlah"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Foo\nBlah"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"collapse-p-with-newline"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Foo<p>\n<p>\n<p>\n<p>\n<p>\n<p>\nBar"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Foo\nBar"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"table"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<table><tr><td>Blah</td></tr></table>\nTest"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\nBlah\nTest"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"table2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<table><tr><td><pre>\nTest\n</pre></td>\n</tr></table>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\nTest\n"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"table3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<table><tr><td><pre>\nTest\n</pre> \n \n</td></tr></table>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\nTest \n"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_whitespace
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_whitespace
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|html
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedPlainText
argument_list|)
expr_stmt|;
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|expectedPlainText
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_qt3Whitespace
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_qt3Whitespace
parameter_list|()
block|{
name|QString
name|text
init|=
literal|"This     text       has         some   whitespace"
literal|"\n and \nnewlines that \n should be ignored\n\n"
decl_stmt|;
specifier|const
name|QString
name|html
init|=
name|QString
argument_list|(
literal|"<html><head><meta name=\"qrichtext\" content=\"1\" /></head><body>"
argument_list|)
operator|+
name|text
operator|+
name|QString
argument_list|(
literal|"</body></html>"
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|text
operator|.
name|remove
argument_list|(
name|QChar
operator|::
name|fromLatin1
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_qt3WhitespaceWithFragments
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_qt3WhitespaceWithFragments
parameter_list|()
block|{
name|QString
name|text
init|=
literal|"This     text       has         some   whitespace"
literal|"\n and \nnewlines that \n should be ignored\n\n"
decl_stmt|;
specifier|const
name|QString
name|html
init|=
name|QString
argument_list|(
literal|"<html><head><meta name=\"qrichtext\" content=\"1\" /></head><body>"
literal|"blah blah<!--StartFragment--><span>"
argument_list|)
operator|+
name|text
operator|+
name|QString
argument_list|(
literal|"</span><!--EndFragment--></body></html>"
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|text
operator|.
name|remove
argument_list|(
name|QChar
operator|::
name|fromLatin1
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_qt3WhitespaceAfterTags
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_qt3WhitespaceAfterTags
parameter_list|()
block|{
name|QString
name|text
init|=
literal|"    This     text       has         some   whitespace   "
decl_stmt|;
specifier|const
name|QString
name|html
init|=
name|QString
argument_list|(
literal|"<html><head><meta name=\"qrichtext\" content=\"1\" /></head><body><span>"
argument_list|)
operator|+
name|text
operator|+
name|QString
argument_list|(
literal|"</span></body></html>"
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_listStart1
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_listStart1
parameter_list|()
block|{
comment|// don't create a block for the<ul> element, even if there's some whitespace between
comment|// it and the<li>
specifier|const
name|QString
name|html
init|=
name|QStringLiteral
argument_list|(
literal|"<ul><li>list item</li><ul>"
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_listStart2
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_listStart2
parameter_list|()
block|{
comment|// unlike with html_listStart1 we want a block showing the 'buggy' text here
specifier|const
name|QString
name|html
init|=
name|QStringLiteral
argument_list|(
literal|"<ul>buggy, but text should appear<li>list item</li><ul>"
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_cssMargin
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_cssMargin
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<p style=\"margin-top: 1px; margin-bottom: 2px; margin-left: 3px; margin-right: 4px\">Test</p>"
decl_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QTextBlockFormat
name|fmt
init|=
name|cursor
operator|.
name|blockFormat
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fmt
operator|.
name|topMargin
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fmt
operator|.
name|bottomMargin
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fmt
operator|.
name|leftMargin
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fmt
operator|.
name|rightMargin
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_hexEntities
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_hexEntities
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"&#x00040;"
decl_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"@"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_decEntities
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_decEntities
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"&#64;"
decl_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"@"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_thCentered
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_thCentered
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<table><tr><th>This should be centered</th></tr></table>"
decl_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousBlock
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|begin
argument_list|()
operator|.
name|currentBlock
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|alignment
argument_list|()
operator|==
name|Qt
operator|::
name|AlignCenter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|orderedListNumbering
name|void
name|tst_QTextDocumentFragment
operator|::
name|orderedListNumbering
parameter_list|()
block|{
comment|// Supporter issue 45941 - make sure _two_ separate lists
comment|// are imported, which have their own numbering
specifier|const
name|char
name|html
index|[]
init|=
literal|"<html><body>"
literal|"<ol><li>elem 1</li></ol>"
literal|"<ol><li>elem 1</li></ol>"
literal|"</body></html>"
decl_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|numberOfLists
init|=
literal|0
decl_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|QTextList
modifier|*
name|lastList
init|=
literal|0
decl_stmt|;
do|do
block|{
name|QTextList
modifier|*
name|list
init|=
name|cursor
operator|.
name|currentList
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|&&
name|list
operator|!=
name|lastList
condition|)
block|{
name|lastList
operator|=
name|list
expr_stmt|;
operator|++
name|numberOfLists
expr_stmt|;
block|}
block|}
do|while
condition|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
condition|)
do|;
name|QCOMPARE
argument_list|(
name|numberOfLists
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_blockAfterList
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_blockAfterList
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<ul><li>Foo</ul>This should be a separate paragraph and not be indented at the same level as Foo"
decl_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|currentList
argument_list|()
operator|->
name|format
argument_list|()
operator|.
name|indent
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cursor
operator|.
name|currentList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|blockFormat
argument_list|()
operator|.
name|indent
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_subAndSuperScript
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_subAndSuperScript
parameter_list|()
block|{
specifier|const
name|char
name|subHtml
index|[]
init|=
literal|"<sub>Subby</sub>"
decl_stmt|;
specifier|const
name|char
name|superHtml
index|[]
init|=
literal|"<sup>Super</sup>"
decl_stmt|;
specifier|const
name|char
name|subHtmlCss
index|[]
init|=
literal|"<span style=\"vertical-align: sub\">Subby</span>"
decl_stmt|;
specifier|const
name|char
name|superHtmlCss
index|[]
init|=
literal|"<span style=\"vertical-align: super\">Super</span>"
decl_stmt|;
specifier|const
name|char
name|alignmentInherited
index|[]
init|=
literal|"<sub><font face=\"Verdana\">Subby</font></sub>"
decl_stmt|;
name|setHtml
argument_list|(
name|subHtml
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|verticalAlignment
argument_list|()
operator|==
name|QTextCharFormat
operator|::
name|AlignSubScript
argument_list|)
expr_stmt|;
name|setHtml
argument_list|(
name|subHtmlCss
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|verticalAlignment
argument_list|()
operator|==
name|QTextCharFormat
operator|::
name|AlignSubScript
argument_list|)
expr_stmt|;
name|setHtml
argument_list|(
name|superHtml
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|verticalAlignment
argument_list|()
operator|==
name|QTextCharFormat
operator|::
name|AlignSuperScript
argument_list|)
expr_stmt|;
name|setHtml
argument_list|(
name|superHtmlCss
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|verticalAlignment
argument_list|()
operator|==
name|QTextCharFormat
operator|::
name|AlignSuperScript
argument_list|)
expr_stmt|;
name|setHtml
argument_list|(
name|alignmentInherited
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|verticalAlignment
argument_list|()
operator|==
name|QTextCharFormat
operator|::
name|AlignSubScript
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_cssColors
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_cssColors
parameter_list|()
block|{
specifier|const
name|char
name|color
index|[]
init|=
literal|"<span style=\"color:red\"><span style=\"color:blue\">Blue</span></span>"
decl_stmt|;
name|setHtml
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
specifier|const
name|char
name|rgbColor
index|[]
init|=
literal|"<span style=\"color:red\"><span style=\"color:rgb(0, 0, 255)\">Blue</span></span>"
decl_stmt|;
name|setHtml
argument_list|(
name|rgbColor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|obeyFragmentMarkersInImport
name|void
name|tst_QTextDocumentFragment
operator|::
name|obeyFragmentMarkersInImport
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"This leading text should not appear<!--StartFragment--><span>Text</span><!--EndFragment-->This text at the end should not appear"
decl_stmt|;
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Text"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|whitespaceWithFragmentMarkers
name|void
name|tst_QTextDocumentFragment
operator|::
name|whitespaceWithFragmentMarkers
parameter_list|()
block|{
name|QString
name|text
argument_list|(
literal|"    text with leading and trailing whitespace    "
argument_list|)
decl_stmt|;
specifier|const
name|char
name|html
index|[]
init|=
literal|"This leading text should not appear<!--StartFragment-->%1<!--EndFragment-->This text at the end should not appear"
decl_stmt|;
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
operator|.
name|arg
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|expected
argument_list|(
literal|"text with leading and trailing whitespace "
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_emptyParapgraphs1
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_emptyParapgraphs1
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<p style=\"-qt-paragraph-type:empty;\">&nbsp;</p><p>Two paragraphs</p>"
decl_stmt|;
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Two paragraphs"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_emptyParapgraphs2
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_emptyParapgraphs2
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<p style=\"margin-left:80px\"></p><p>One paragraph</p>"
decl_stmt|;
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|blockFormat
argument_list|()
operator|.
name|leftMargin
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|char
name|html2
index|[]
init|=
literal|"<p style=\"margin-left:80px\"></p>One paragraph"
decl_stmt|;
name|setHtml
argument_list|(
name|html2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|blockFormat
argument_list|()
operator|.
name|leftMargin
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|char
name|html3
index|[]
init|=
literal|"<p style=\"margin-left:80px\">Foo</p><p></p>Two paragraphs"
decl_stmt|;
name|setHtml
argument_list|(
name|html3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cursor
operator|=
name|QTextCursor
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|blockFormat
argument_list|()
operator|.
name|leftMargin
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|80
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|leftMargin
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_emptyParagraphs3
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_emptyParagraphs3
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<ul><p>Foo</p><p></p></ul><h4>Bar</h4>"
decl_stmt|;
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cursor
operator|=
name|QTextCursor
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|indent
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_emptyParagraphs4
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_emptyParagraphs4
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<p>foo</p><p style=\"page-break-before: always\"></p><p>bar</p>"
decl_stmt|;
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|QTextBlock
name|block
init|=
name|doc
operator|->
name|begin
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QTextBlockFormat
name|bf
init|=
name|block
operator|.
name|blockFormat
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|bf
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|PageBreakPolicy
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bf
operator|.
name|pageBreakPolicy
argument_list|()
argument_list|,
name|QTextFormat
operator|::
name|PageBreak_AlwaysBefore
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|char
name|html2
index|[]
init|=
literal|"<p>foo</p><p style=\"page-break-after: always\"></p><p>bar</p>"
decl_stmt|;
name|setHtml
argument_list|(
name|html2
argument_list|)
expr_stmt|;
name|block
operator|=
name|doc
operator|->
name|begin
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|bf
operator|=
name|block
operator|.
name|blockFormat
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|bf
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|PageBreakPolicy
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bf
operator|.
name|pageBreakPolicy
argument_list|()
argument_list|,
name|QTextFormat
operator|::
name|PageBreak_AlwaysBefore
argument_list|)
expr_stmt|;
comment|// after the empty line means it should appear for 'bar'
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_font
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_font
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<font color=\"blue\"><p>Hah</p></font>"
decl_stmt|;
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|blockCharFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_fontSize
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_fontSize
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<font size=\"2\">Hah</font>"
decl_stmt|;
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|property
argument_list|(
name|QTextFormat
operator|::
name|FontSizeAdjustment
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_fontSizeAdjustment
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_fontSizeAdjustment
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<font size=\"7\"><b>Hah</b></font>"
decl_stmt|;
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|property
argument_list|(
name|QTextFormat
operator|::
name|FontSizeAdjustment
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|fontWeight
argument_list|()
argument_list|,
name|int
argument_list|(
name|QFont
operator|::
name|Bold
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_cssFontSize
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_cssFontSize
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<span style=\"font-size: 50pt\">Foo</span>"
decl_stmt|;
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|property
argument_list|(
name|QTextFormat
operator|::
name|FontPointSize
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|50
argument_list|)
expr_stmt|;
specifier|const
name|char
name|html2
index|[]
init|=
literal|"<span style=\"font-size: 50px\">Foo</span>"
decl_stmt|;
name|setHtml
argument_list|(
name|html2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|property
argument_list|(
name|QTextFormat
operator|::
name|FontPixelSize
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|50
argument_list|)
expr_stmt|;
specifier|const
name|char
name|html3
index|[]
init|=
literal|"<span style=\"font-size: large\">Foo</span>"
decl_stmt|;
name|setHtml
argument_list|(
name|html3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|property
argument_list|(
name|QTextFormat
operator|::
name|FontSizeAdjustment
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_cssShorthandFont
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_cssShorthandFont
parameter_list|()
block|{
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<span style=\"font: 50px sans-serif\">Foo</span>"
decl_stmt|;
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|property
argument_list|(
name|QTextFormat
operator|::
name|FontPixelSize
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|property
argument_list|(
name|QTextFormat
operator|::
name|FontFamily
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"sans-serif"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<span style=\"font: 50pt sans-serif\">Foo</span>"
decl_stmt|;
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|property
argument_list|(
name|QTextFormat
operator|::
name|FontPointSize
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|property
argument_list|(
name|QTextFormat
operator|::
name|FontFamily
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"sans-serif"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<span style='font:7.0pt \"Times New Roman\"'>Foo</span>"
decl_stmt|;
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|property
argument_list|(
name|QTextFormat
operator|::
name|FontPointSize
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|property
argument_list|(
name|QTextFormat
operator|::
name|FontFamily
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Times New Roman"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<span style='font:bold 7.0pt'>Foo</span>"
decl_stmt|;
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|property
argument_list|(
name|QTextFormat
operator|::
name|FontWeight
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|int
argument_list|(
name|QFont
operator|::
name|Bold
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|property
argument_list|(
name|QTextFormat
operator|::
name|FontPointSize
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<span style='font:bold italic 7.0pt'>Foo</span>"
decl_stmt|;
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|property
argument_list|(
name|QTextFormat
operator|::
name|FontWeight
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|int
argument_list|(
name|QFont
operator|::
name|Bold
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|property
argument_list|(
name|QTextFormat
operator|::
name|FontItalic
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|html_bodyBgColor
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_bodyBgColor
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<body bgcolor=\"blue\">Foo</body>"
decl_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|rootFrame
argument_list|()
operator|->
name|frameFormat
argument_list|()
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_qtBgColor
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_qtBgColor
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<qt bgcolor=\"blue\">Foo</qt>"
decl_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|rootFrame
argument_list|()
operator|->
name|frameFormat
argument_list|()
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_bodyBackground
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_bodyBackground
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<body background=\"foo.png\">Foo</body>"
decl_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|rootFrame
argument_list|()
operator|->
name|frameFormat
argument_list|()
operator|.
name|background
argument_list|()
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|TexturePattern
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_tableCellBackground
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_tableCellBackground
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<body><table><tr><td background=\"foo.png\">Foo</td></tr></table></body>"
decl_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QTextTableCell
name|cell
init|=
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|cell
operator|.
name|format
argument_list|()
operator|.
name|background
argument_list|()
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|TexturePattern
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|css_bodyBackground
name|void
name|tst_QTextDocumentFragment
operator|::
name|css_bodyBackground
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<body style=\"background-image:url('foo.png')\">Foo</body>"
decl_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|rootFrame
argument_list|()
operator|->
name|frameFormat
argument_list|()
operator|.
name|background
argument_list|()
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|TexturePattern
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|css_tableCellBackground
name|void
name|tst_QTextDocumentFragment
operator|::
name|css_tableCellBackground
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<body><table><tr><td style=\"background-image:url('foo.png')\">Foo</td></tr></table></body>"
decl_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QTextTableCell
name|cell
init|=
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|cell
operator|.
name|format
argument_list|()
operator|.
name|background
argument_list|()
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|TexturePattern
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|css_cellPaddings
name|void
name|tst_QTextDocumentFragment
operator|::
name|css_cellPaddings
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<body><table><tr><td style=\"padding-left:1\">Foo</td>"
literal|"<td style=\"padding-right:1\"></td><td style=\"padding-top:10\"></td>"
literal|"<td style=\"padding-bottom:5\"></td><td style=\"padding:15\"></td></tr></table></body>"
decl_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QTextTableCell
name|cell
init|=
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|cell
operator|.
name|format
argument_list|()
operator|.
name|toTableCellFormat
argument_list|()
operator|.
name|leftPadding
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|cell
operator|=
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cell
operator|.
name|format
argument_list|()
operator|.
name|toTableCellFormat
argument_list|()
operator|.
name|rightPadding
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|cell
operator|=
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cell
operator|.
name|format
argument_list|()
operator|.
name|toTableCellFormat
argument_list|()
operator|.
name|topPadding
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|cell
operator|=
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cell
operator|.
name|format
argument_list|()
operator|.
name|toTableCellFormat
argument_list|()
operator|.
name|bottomPadding
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|cell
operator|=
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cell
operator|.
name|format
argument_list|()
operator|.
name|toTableCellFormat
argument_list|()
operator|.
name|leftPadding
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cell
operator|.
name|format
argument_list|()
operator|.
name|toTableCellFormat
argument_list|()
operator|.
name|rightPadding
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cell
operator|.
name|format
argument_list|()
operator|.
name|toTableCellFormat
argument_list|()
operator|.
name|topPadding
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cell
operator|.
name|format
argument_list|()
operator|.
name|toTableCellFormat
argument_list|()
operator|.
name|bottomPadding
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_blockLevelDiv
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_blockLevelDiv
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<div align=right><b>Hello World"
decl_stmt|;
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|alignment
argument_list|()
argument_list|,
name|Qt
operator|::
name|AlignRight
operator||
name|Qt
operator|::
name|AlignAbsolute
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|next
argument_list|()
operator|==
name|doc
operator|->
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_spanNesting
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_spanNesting
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<span style=\"color:black\">a<span style=\"color:red\">b<span style=\"color:black\">c</span></span>d</span>"
decl_stmt|;
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|==
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|==
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|==
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|==
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_nestedLists
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_nestedLists
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<p><ul><li>Foo<ul><li>In nested list</li></ul></li><li>Last item</li></ul></p>"
decl_stmt|;
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|QTextList
modifier|*
name|firstList
init|=
name|cursor
operator|.
name|currentList
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|firstList
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|firstList
operator|->
name|format
argument_list|()
operator|.
name|indent
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextList
modifier|*
name|secondList
init|=
name|cursor
operator|.
name|currentList
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|secondList
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|secondList
operator|!=
name|firstList
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|currentList
argument_list|()
operator|->
name|format
argument_list|()
operator|.
name|indent
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextList
modifier|*
name|thirdList
init|=
name|cursor
operator|.
name|currentList
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|thirdList
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|thirdList
operator|==
name|firstList
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|noSpecialCharactersInPlainText
name|void
name|tst_QTextDocumentFragment
operator|::
name|noSpecialCharactersInPlainText
parameter_list|()
block|{
name|cursor
operator|.
name|insertTable
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|QString
argument_list|(
name|QChar
operator|::
name|LineSeparator
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|QString
argument_list|(
name|QChar
operator|::
name|Nbsp
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|plain
init|=
name|doc
operator|->
name|toPlainText
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|plain
operator|.
name|contains
argument_list|(
name|QChar
operator|::
name|ParagraphSeparator
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|plain
operator|.
name|contains
argument_list|(
name|QChar
operator|::
name|Nbsp
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|plain
operator|.
name|contains
argument_list|(
name|QTextBeginningOfFrame
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|plain
operator|.
name|contains
argument_list|(
name|QTextEndOfFrame
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|plain
operator|.
name|contains
argument_list|(
name|QChar
operator|::
name|LineSeparator
argument_list|)
argument_list|)
expr_stmt|;
name|plain
operator|=
name|QTextDocumentFragment
argument_list|(
name|doc
argument_list|)
operator|.
name|toPlainText
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|plain
operator|.
name|contains
argument_list|(
name|QChar
operator|::
name|ParagraphSeparator
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|plain
operator|.
name|contains
argument_list|(
name|QChar
operator|::
name|Nbsp
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|plain
operator|.
name|contains
argument_list|(
name|QTextBeginningOfFrame
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|plain
operator|.
name|contains
argument_list|(
name|QTextEndOfFrame
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|plain
operator|.
name|contains
argument_list|(
name|QChar
operator|::
name|LineSeparator
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_doNotInheritBackground
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_doNotInheritBackground
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<html><body bgcolor=\"blue\"><p>Blah</p></body></html>"
decl_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
for|for
control|(
name|QTextBlock
name|block
init|=
name|doc
operator|->
name|begin
argument_list|()
init|;
name|block
operator|.
name|isValid
argument_list|()
condition|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
control|)
block|{
name|QVERIFY
argument_list|(
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|BackgroundBrush
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|doc
operator|->
name|rootFrame
argument_list|()
operator|->
name|frameFormat
argument_list|()
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|BackgroundBrush
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|rootFrame
argument_list|()
operator|->
name|frameFormat
argument_list|()
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_inheritBackgroundToInlineElements
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_inheritBackgroundToInlineElements
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<span style=\"background: blue\">Foo<span>Bar</span></span>"
decl_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|int
name|fragmentCount
init|=
literal|0
decl_stmt|;
name|QTextBlock
name|block
init|=
name|doc
operator|->
name|begin
argument_list|()
decl_stmt|;
for|for
control|(
name|QTextBlock
operator|::
name|Iterator
name|it
init|=
name|block
operator|.
name|begin
argument_list|()
init|;
operator|!
name|it
operator|.
name|atEnd
argument_list|()
condition|;
operator|++
name|it
operator|,
operator|++
name|fragmentCount
control|)
block|{
specifier|const
name|QTextFragment
name|fragment
init|=
name|it
operator|.
name|fragment
argument_list|()
decl_stmt|;
if|if
condition|(
name|fragmentCount
operator|==
literal|0
condition|)
block|{
name|QCOMPARE
argument_list|(
name|fragment
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"FooBar"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fragment
operator|.
name|charFormat
argument_list|()
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
block|}
block|}
name|QCOMPARE
argument_list|(
name|fragmentCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_doNotInheritBackgroundFromBlockElements
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_doNotInheritBackgroundFromBlockElements
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<p style=\"background: blue\"><span>Foo</span></span>"
decl_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|int
name|fragmentCount
init|=
literal|0
decl_stmt|;
name|QTextBlock
name|block
init|=
name|doc
operator|->
name|begin
argument_list|()
decl_stmt|;
for|for
control|(
name|QTextBlock
operator|::
name|Iterator
name|it
init|=
name|block
operator|.
name|begin
argument_list|()
init|;
operator|!
name|it
operator|.
name|atEnd
argument_list|()
condition|;
operator|++
name|it
operator|,
operator|++
name|fragmentCount
control|)
block|{
specifier|const
name|QTextFragment
name|fragment
init|=
name|it
operator|.
name|fragment
argument_list|()
decl_stmt|;
if|if
condition|(
name|fragmentCount
operator|==
literal|0
condition|)
block|{
name|QCOMPARE
argument_list|(
name|fragment
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|fragment
operator|.
name|charFormat
argument_list|()
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|BackgroundBrush
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|QCOMPARE
argument_list|(
name|fragmentCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_nobr
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_nobr
parameter_list|()
block|{
specifier|const
name|QString
name|input
init|=
literal|"Blah Foo    Bar"
decl_stmt|;
specifier|const
name|QString
name|html
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"<html><body><p><nobr>"
argument_list|)
operator|+
name|input
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"</nobr></p></body></html>"
argument_list|)
decl_stmt|;
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|QString
name|text
init|=
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|text
argument_list|()
decl_stmt|;
name|QString
name|expectedText
init|=
name|input
decl_stmt|;
name|expectedText
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|"\\s+"
argument_list|)
argument_list|,
name|QString
argument_list|(
name|QChar
operator|::
name|Nbsp
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|text
argument_list|,
name|expectedText
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromPlainText
name|void
name|tst_QTextDocumentFragment
operator|::
name|fromPlainText
parameter_list|()
block|{
name|QString
name|plainText
decl_stmt|;
name|plainText
operator|=
literal|"Hello\nWorld\r\nBlub"
expr_stmt|;
name|plainText
operator|+=
name|QChar
operator|::
name|ParagraphSeparator
expr_stmt|;
comment|// TextEdit on OS 10 gives us OS 9 style linefeeds
comment|// when copy& pasteing multi-line plaintext.
name|plainText
operator|+=
literal|"OS9IsOldSchool\r"
expr_stmt|;
name|plainText
operator|+=
literal|"Last Parag"
expr_stmt|;
name|doc
operator|->
name|setPlainText
argument_list|(
name|plainText
argument_list|)
expr_stmt|;
name|int
name|blockCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|QTextBlock
name|block
init|=
name|doc
operator|->
name|begin
argument_list|()
init|;
name|block
operator|.
name|isValid
argument_list|()
condition|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
control|)
block|{
name|QVERIFY
argument_list|(
operator|!
name|block
operator|.
name|text
argument_list|()
operator|.
name|contains
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|block
operator|.
name|text
argument_list|()
operator|.
name|contains
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\r'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|block
operator|.
name|text
argument_list|()
operator|.
name|contains
argument_list|(
name|QChar
operator|::
name|ParagraphSeparator
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|blockCount
operator|==
literal|0
condition|)
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|blockCount
operator|==
literal|1
condition|)
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"World"
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|blockCount
operator|==
literal|2
condition|)
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Blub"
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|blockCount
operator|==
literal|3
condition|)
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"OS9IsOldSchool"
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|blockCount
operator|==
literal|4
condition|)
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Last Parag"
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|blockCount
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|blockCount
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromPlainText2
name|void
name|tst_QTextDocumentFragment
operator|::
name|fromPlainText2
parameter_list|()
block|{
name|doc
operator|->
name|setPlainText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTextDocumentFragment
argument_list|(
name|doc
argument_list|)
operator|.
name|toPlainText
argument_list|()
argument_list|,
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_closingImageTag
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_closingImageTag
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<span style=\"font-size: 10pt\"><span style=\"font-size: 40pt\">Blah<img src=\"blah\"></img>Foo</span></span>"
decl_stmt|;
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|int
name|fragmentCount
init|=
literal|0
decl_stmt|;
name|QTextBlock
name|block
init|=
name|doc
operator|->
name|begin
argument_list|()
decl_stmt|;
for|for
control|(
name|QTextBlock
operator|::
name|Iterator
name|it
init|=
name|block
operator|.
name|begin
argument_list|()
init|;
operator|!
name|it
operator|.
name|atEnd
argument_list|()
condition|;
operator|++
name|it
operator|,
operator|++
name|fragmentCount
control|)
block|{
specifier|const
name|QTextFragment
name|fragment
init|=
name|it
operator|.
name|fragment
argument_list|()
decl_stmt|;
if|if
condition|(
name|fragmentCount
operator|==
literal|0
condition|)
block|{
name|QCOMPARE
argument_list|(
name|fragment
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Blah"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fragment
operator|.
name|charFormat
argument_list|()
operator|.
name|fontPointSize
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|40
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fragmentCount
operator|==
literal|1
condition|)
block|{
name|QCOMPARE
argument_list|(
name|fragment
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
name|QChar
operator|::
name|ObjectReplacementCharacter
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fragmentCount
operator|==
literal|2
condition|)
block|{
name|QCOMPARE
argument_list|(
name|fragment
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fragment
operator|.
name|charFormat
argument_list|()
operator|.
name|fontPointSize
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|40
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|QCOMPARE
argument_list|(
name|fragmentCount
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_emptyDocument
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_emptyDocument
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<html><body><p style=\"-qt-paragraph-type:empty;\"></p></body></html>"
decl_stmt|;
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_closingTag
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_closingTag
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<i />text"
decl_stmt|;
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|fontItalic
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_anchorAroundImage
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_anchorAroundImage
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<a href=\"http://www.troll.no\"><img src=test.png></a>"
decl_stmt|;
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QTextImageFormat
name|fmt
init|=
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|toImageFormat
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fmt
operator|.
name|name
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"test.png"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fmt
operator|.
name|isAnchor
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fmt
operator|.
name|anchorHref
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"http://www.troll.no"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_floatBorder
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_floatBorder
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<table border=1.2><tr><td>Foo"
decl_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentTable
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|currentTable
argument_list|()
operator|->
name|format
argument_list|()
operator|.
name|border
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|1.2
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_frameImport
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_frameImport
parameter_list|()
block|{
name|QTextFrameFormat
name|ffmt
decl_stmt|;
name|ffmt
operator|.
name|setBorder
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ffmt
operator|.
name|setPosition
argument_list|(
name|QTextFrameFormat
operator|::
name|FloatRight
argument_list|)
expr_stmt|;
name|ffmt
operator|.
name|setMargin
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|ffmt
operator|.
name|setWidth
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|ffmt
operator|.
name|setHeight
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|ffmt
operator|.
name|setBackground
argument_list|(
name|QColor
argument_list|(
literal|"#00ff00"
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertFrame
argument_list|(
name|ffmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|QTextDocumentFragment
name|frag
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|cleanup
argument_list|()
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
name|frag
operator|=
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|frag
operator|.
name|toHtml
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|frag
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QTextFrame
modifier|*
argument_list|>
name|childFrames
init|=
name|doc
operator|->
name|rootFrame
argument_list|()
operator|->
name|childFrames
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|childFrames
operator|.
name|count
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QTextFrame
modifier|*
name|frame
init|=
name|childFrames
operator|.
name|first
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|frame
operator|->
name|frameFormat
argument_list|()
operator|.
name|margin
argument_list|()
argument_list|,
name|ffmt
operator|.
name|margin
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|frame
operator|->
name|frameFormat
argument_list|()
operator|.
name|border
argument_list|()
argument_list|,
name|ffmt
operator|.
name|border
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_frameImport2
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_frameImport2
parameter_list|()
block|{
name|QTextFrameFormat
name|ffmt
decl_stmt|;
name|ffmt
operator|.
name|setBorder
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ffmt
operator|.
name|setPosition
argument_list|(
name|QTextFrameFormat
operator|::
name|FloatRight
argument_list|)
expr_stmt|;
name|ffmt
operator|.
name|setLeftMargin
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|ffmt
operator|.
name|setTopMargin
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|ffmt
operator|.
name|setBottomMargin
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|ffmt
operator|.
name|setRightMargin
argument_list|(
literal|250
argument_list|)
expr_stmt|;
name|ffmt
operator|.
name|setWidth
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|ffmt
operator|.
name|setHeight
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|ffmt
operator|.
name|setBackground
argument_list|(
name|QColor
argument_list|(
literal|"#00ff00"
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertFrame
argument_list|(
name|ffmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|QTextDocumentFragment
name|frag
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|cleanup
argument_list|()
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
name|frag
operator|=
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|frag
operator|.
name|toHtml
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|frag
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QTextFrame
modifier|*
argument_list|>
name|childFrames
init|=
name|doc
operator|->
name|rootFrame
argument_list|()
operator|->
name|childFrames
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|childFrames
operator|.
name|count
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QTextFrame
modifier|*
name|frame
init|=
name|childFrames
operator|.
name|first
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|frame
operator|->
name|frameFormat
argument_list|()
operator|.
name|topMargin
argument_list|()
argument_list|,
name|ffmt
operator|.
name|topMargin
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|frame
operator|->
name|frameFormat
argument_list|()
operator|.
name|bottomMargin
argument_list|()
argument_list|,
name|ffmt
operator|.
name|bottomMargin
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|frame
operator|->
name|frameFormat
argument_list|()
operator|.
name|leftMargin
argument_list|()
argument_list|,
name|ffmt
operator|.
name|leftMargin
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|frame
operator|->
name|frameFormat
argument_list|()
operator|.
name|rightMargin
argument_list|()
argument_list|,
name|ffmt
operator|.
name|rightMargin
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|frame
operator|->
name|frameFormat
argument_list|()
operator|.
name|border
argument_list|()
argument_list|,
name|ffmt
operator|.
name|border
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_dontAddMarginsAcrossTableCells
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_dontAddMarginsAcrossTableCells
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<table style=\"margin-left: 100px;\"><tr><td><p style=\"margin-left:50px;\">Foo</p></td></tr></table>"
decl_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QTextFrame
modifier|*
argument_list|>
name|childFrames
init|=
name|doc
operator|->
name|rootFrame
argument_list|()
operator|->
name|childFrames
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|childFrames
operator|.
name|count
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QTextFrame
modifier|*
name|frame
init|=
name|childFrames
operator|.
name|first
argument_list|()
decl_stmt|;
name|cursor
operator|=
name|frame
operator|->
name|firstCursorPosition
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|blockFormat
argument_list|()
operator|.
name|leftMargin
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|50.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_dontMergeCenterBlocks
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_dontMergeCenterBlocks
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<center>This should be centered</center>And this should not be centered anymore"
decl_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QTextBlock
name|blk
init|=
name|doc
operator|->
name|begin
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|blk
operator|.
name|blockFormat
argument_list|()
operator|.
name|alignment
argument_list|()
operator|==
name|Qt
operator|::
name|AlignCenter
argument_list|)
expr_stmt|;
name|blk
operator|=
name|blk
operator|.
name|next
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|blk
operator|.
name|blockFormat
argument_list|()
operator|.
name|alignment
argument_list|()
operator|!=
name|Qt
operator|::
name|AlignCenter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_tableCellBgColor
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_tableCellBgColor
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<table><tr><td bgcolor=\"blue\">Test<p>Second Parag</p></td></tr></table>"
decl_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QTextTableCell
name|cell
init|=
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|cell
operator|.
name|format
argument_list|()
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_tableCellBgColor2
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_tableCellBgColor2
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<table><tr><td bgcolor=\"blue\"><table><tr><td>Blah</td></tr></table></td></tr></table>"
decl_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QTextTableCell
name|cell
init|=
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|cell
operator|.
name|format
argument_list|()
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|QTextFrame
operator|::
name|Iterator
name|it
init|=
name|cell
operator|.
name|begin
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|it
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|currentFrame
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|currentBlock
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|it
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|currentFrame
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|it
operator|.
name|currentBlock
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|it
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|currentFrame
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|currentBlock
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|currentBlock
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|background
argument_list|()
operator|==
name|QBrush
argument_list|(
name|Qt
operator|::
name|NoBrush
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_cellSkip
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_cellSkip
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|""
literal|"<table border>"
literal|"<tr>"
literal|"<td>First Cell</td>"
literal|"</tr>"
literal|"<tr>"
literal|"<td>Second Cell</td>"
literal|"<td>Third Cell</td>"
literal|"</tr>"
literal|"</table>"
decl_stmt|;
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|columns
argument_list|()
operator|==
literal|2
operator|&&
name|table
operator|->
name|rows
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"First Cell"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Second Cell"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Third Cell"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nonZeroMarginOnImport
name|void
name|tst_QTextDocumentFragment
operator|::
name|nonZeroMarginOnImport
parameter_list|()
block|{
comment|// specify bgcolor so that the html import creates a root frame format
name|setHtml
argument_list|(
literal|"<html><body bgcolor=\"#00ff00\"><b>Hello World</b></body></html>"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|rootFrame
argument_list|()
operator|->
name|frameFormat
argument_list|()
operator|.
name|margin
argument_list|()
operator|>
literal|0.0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_charFormatPropertiesUnset
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_charFormatPropertiesUnset
parameter_list|()
block|{
name|setHtml
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|properties
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_headings
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_headings
parameter_list|()
block|{
name|setHtml
argument_list|(
literal|"<h1>foo</h1>bar"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_quotedFontFamily
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_quotedFontFamily
parameter_list|()
block|{
name|setHtml
argument_list|(
literal|"<div style=\"font-family: 'Foo Bar';\">Test</div>"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|fontFamily
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Foo Bar"
argument_list|)
argument_list|)
expr_stmt|;
name|setHtml
argument_list|(
literal|"<div style='font-family: \"Foo Bar\";'>Test</div>"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|fontFamily
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Foo Bar"
argument_list|)
argument_list|)
expr_stmt|;
name|setHtml
argument_list|(
literal|"<div style='font-family: \"Foo  Bar\";'>Test</div>"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|fontFamily
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Foo  Bar"
argument_list|)
argument_list|)
expr_stmt|;
name|setHtml
argument_list|(
literal|"<div style='font-family: Foo\n  Bar;'>Test</div>"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|fontFamily
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Foo Bar"
argument_list|)
argument_list|)
expr_stmt|;
name|setHtml
argument_list|(
literal|"<div style='font-family: Foo\n  Bar, serif, \"bar foo\";'>Test</div>"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|fontFamily
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Foo Bar,serif,bar foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|defaultFont
name|void
name|tst_QTextDocumentFragment
operator|::
name|defaultFont
parameter_list|()
block|{
name|QFont
name|f
decl_stmt|;
name|f
operator|.
name|setFamily
argument_list|(
literal|"Courier New"
argument_list|)
expr_stmt|;
name|f
operator|.
name|setBold
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|setItalic
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|setStrikeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// set here but deliberately ignored for the html export
name|f
operator|.
name|setPointSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setDefaultFont
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setPlainText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|html
init|=
name|doc
operator|->
name|toHtml
argument_list|()
decl_stmt|;
name|QLatin1String
name|str
argument_list|(
literal|"<body style=\" font-family:'Courier New'; font-size:100pt; font-weight:600; font-style:italic;\">"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|html
operator|.
name|contains
argument_list|(
name|str
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_spanBackgroundColor
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_spanBackgroundColor
parameter_list|()
block|{
name|setHtml
argument_list|(
literal|"<span style=\"background-color: blue\">Foo</span>"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|QColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_brokenTitle_data
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_brokenTitle_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"html"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedBody"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedTitle"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"brokentitle"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<html><head><title>Foo<b>bar</b></title></head><body>Blah</body></html>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Blah"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Foo"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"brokentitle2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<html><head><title>Foo<font color=red>i</font>t<font color=red>i</font>Blub</title></head><body>Blah</body></html>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Blah"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Foo"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"entities"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<html><head><title>Foo&lt;bar</title></head><body>Blah</body></html>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Blah"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Foo<bar"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unclosedtitle"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<html><head><title>Foo</head><body>Blah</body></html>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Blah"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Foo"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_brokenTitle
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_brokenTitle
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|html
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedBody
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedTitle
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|expectedBody
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|metaInformation
argument_list|(
name|QTextDocument
operator|::
name|DocumentTitle
argument_list|)
argument_list|,
name|expectedTitle
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_blockVsInline
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_blockVsInline
parameter_list|()
block|{
block|{
name|setHtml
argument_list|(
literal|"<html><body><div><b>Foo<div>Bar"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|fontWeight
argument_list|()
operator|==
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|blockCharFormat
argument_list|()
operator|.
name|fontWeight
argument_list|()
operator|==
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
block|}
block|{
name|setHtml
argument_list|(
literal|"<html><body><p><b>Foo<p>Bar"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|fontWeight
argument_list|()
operator|!=
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|blockCharFormat
argument_list|()
operator|.
name|fontWeight
argument_list|()
operator|!=
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
block|}
block|{
name|setHtml
argument_list|(
literal|"<html><body><b><center>Foo</center></b>"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|fontWeight
argument_list|()
operator|==
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|blockCharFormat
argument_list|()
operator|.
name|fontWeight
argument_list|()
operator|==
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
block|}
block|{
name|setHtml
argument_list|(
literal|"<html><body><b><p>Foo"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|fontWeight
argument_list|()
operator|==
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|blockCharFormat
argument_list|()
operator|.
name|fontWeight
argument_list|()
operator|==
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
block|}
block|{
name|setHtml
argument_list|(
literal|"<html><body><b><p>Foo<p>Bar"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|fontWeight
argument_list|()
operator|==
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|blockCharFormat
argument_list|()
operator|.
name|fontWeight
argument_list|()
operator|==
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
block|}
block|{
name|setHtml
argument_list|(
literal|"<div><b>Foo<div>Bar"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|fontWeight
argument_list|()
operator|==
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|blockCharFormat
argument_list|()
operator|.
name|fontWeight
argument_list|()
operator|==
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
block|}
block|{
name|setHtml
argument_list|(
literal|"<p><b>Foo<p>Bar"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|fontWeight
argument_list|()
operator|!=
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|blockCharFormat
argument_list|()
operator|.
name|fontWeight
argument_list|()
operator|!=
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
block|}
block|{
name|setHtml
argument_list|(
literal|"<b><center>Foo</center></b>"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|fontWeight
argument_list|()
operator|==
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|blockCharFormat
argument_list|()
operator|.
name|fontWeight
argument_list|()
operator|==
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
block|}
block|{
name|setHtml
argument_list|(
literal|"<b><p>Foo"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|fontWeight
argument_list|()
operator|==
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|blockCharFormat
argument_list|()
operator|.
name|fontWeight
argument_list|()
operator|==
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
block|}
block|{
name|setHtml
argument_list|(
literal|"<b><p>Foo<p>Bar"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|fontWeight
argument_list|()
operator|==
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|blockCharFormat
argument_list|()
operator|.
name|fontWeight
argument_list|()
operator|==
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|html_tbody
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_tbody
parameter_list|()
block|{
name|setHtml
argument_list|(
literal|"<table><thead><tr><td>First Cell</td></tr></thead><tbody><tr><td>Second Cell</td></tr></tbody></table>"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|columns
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|rows
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|format
argument_list|()
operator|.
name|headerRowCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"First Cell"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Second Cell"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_nestedTables
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_nestedTables
parameter_list|()
block|{
name|setHtml
argument_list|(
literal|"<table>"
literal|"<tr><td>"
literal|""
literal|"<table>"
literal|"<tr><td>Hello</td></tr>"
literal|"</table>"
literal|""
literal|"<table>"
literal|"<tr><td>World</td></tr>"
literal|"</table>"
literal|""
literal|"</td></tr>"
literal|"</table>"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|rows
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|columns
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|=
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|firstNestedTable
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|firstNestedTable
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|firstNestedTable
operator|->
name|parentFrame
argument_list|()
operator|==
name|table
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|firstNestedTable
operator|->
name|rows
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|firstNestedTable
operator|->
name|columns
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|firstNestedTable
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|cursor
operator|.
name|currentTable
argument_list|()
operator|==
name|firstNestedTable
operator|&&
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
condition|)
empty_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cursor
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentTable
argument_list|()
operator|==
name|table
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|secondNestedTable
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|secondNestedTable
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|secondNestedTable
operator|->
name|parentFrame
argument_list|()
operator|==
name|table
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|secondNestedTable
operator|->
name|rows
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|secondNestedTable
operator|->
name|columns
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|secondNestedTable
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"World"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_rowSpans
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_rowSpans
parameter_list|()
block|{
name|setHtml
argument_list|(
literal|""
literal|"<table border=\"1\" width=\"100%\">"
literal|"<tr>"
literal|"<td rowspan=\"2\">blah</td>"
literal|"<td rowspan=\"2\">foo</td>"
literal|"</tr>"
literal|"<tr></tr>"
literal|"<tr>"
literal|"<td rowspan=\"2\">blubb</td>"
literal|"<td rowspan=\"2\">baz</td>"
literal|"</tr>"
literal|"<tr></tr>"
literal|"</table>"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|rows
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|columns
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"blah"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"blah"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"blubb"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"blubb"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_rowSpans2
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_rowSpans2
parameter_list|()
block|{
name|setHtml
argument_list|(
literal|""
literal|"<html><body>"
literal|"<table border=\"1\">"
literal|"<tr>"
literal|"<td>Row 1 col 1</td>"
literal|"</tr>"
literal|"<tr>"
literal|"<td rowspan=\"3\">Row 2 col 1, rowspan 3</td>"
literal|"<td>Row 2 col 2</td>"
literal|"</tr>"
literal|"<tr>"
literal|"<td rowspan=\"2\">Row 3 col 2, rowspan 2</td>"
literal|"</tr>"
literal|"<tr>"
literal|"</tr>"
literal|"</table>"
literal|"</body></html>"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|rows
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|columns
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|rowSpan
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
operator|.
name|rowSpan
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|rowSpan
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_implicitParagraphs
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_implicitParagraphs
parameter_list|()
block|{
name|setHtml
argument_list|(
literal|"<p>foo</p>bar"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_missingCloseTag
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_missingCloseTag
parameter_list|()
block|{
name|setHtml
argument_list|(
literal|"<font color=\"red\"><span style=\"color:blue\">blue</span></span>&nbsp;red</font>"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextWord
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_anchorColor
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_anchorColor
parameter_list|()
block|{
name|setHtml
argument_list|(
literal|"<span style=\"color: red;\">Red</span>"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|setHtml
argument_list|(
literal|"<span style=\"color: red;\"><a href=\"http://www.kde.org/\">Blue</a></span>"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|QGuiApplication
operator|::
name|palette
argument_list|()
operator|.
name|link
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|setHtml
argument_list|(
literal|"<span style=\"color: red;\"><a href=\"http://www.kde.org/\" style=\"color: yellow;\">Green</a></span>"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|Qt
operator|::
name|yellow
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_lastParagraphClosing
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_lastParagraphClosing
parameter_list|()
block|{
name|setHtml
argument_list|(
literal|"<p>Foo<b>Bar</b>Baz"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_tableHeaderBodyFootParent
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_tableHeaderBodyFootParent
parameter_list|()
block|{
comment|// don't get confused by strange tags, keep tbody/thead/tfoot children of
comment|// the table tag
name|setHtml
argument_list|(
literal|"<table><col><col><col><tbody><tr><td>Hey</td></tr></tbody></table>"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|columns
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|rows
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hey"
argument_list|)
argument_list|)
expr_stmt|;
name|setHtml
argument_list|(
literal|"<table><col><col><col><thead><tr><td>Hey</td></tr></thead></table>"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|table
operator|=
name|cursor
operator|.
name|currentTable
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|columns
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|rows
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hey"
argument_list|)
argument_list|)
expr_stmt|;
name|setHtml
argument_list|(
literal|"<table><col><col><col><tfoot><tr><td>Hey</td></tr></tfoot></table>"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|table
operator|=
name|cursor
operator|.
name|currentTable
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|columns
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|rows
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hey"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_columnWidths
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_columnWidths
parameter_list|()
block|{
name|setHtml
argument_list|(
literal|"<table>"
literal|"<tr>"
literal|"<td colspan=\"2\">Foo</td>"
literal|"</tr>"
literal|"<tr>"
literal|"<td>Bar</td>"
literal|"<td width=\"1%\">Baz</td>"
literal|"</tr>"
literal|"</table>"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|columns
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|rows
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QTextTableFormat
name|fmt
init|=
name|table
operator|->
name|format
argument_list|()
decl_stmt|;
specifier|const
name|QVector
argument_list|<
name|QTextLength
argument_list|>
name|columnWidths
init|=
name|fmt
operator|.
name|columnWidthConstraints
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|columnWidths
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|columnWidths
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
operator|==
name|QTextLength
operator|::
name|VariableLength
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|columnWidths
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|type
argument_list|()
operator|==
name|QTextLength
operator|::
name|PercentageLength
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|columnWidths
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|rawValue
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|css_fontWeight
name|void
name|tst_QTextDocumentFragment
operator|::
name|css_fontWeight
parameter_list|()
block|{
name|setHtml
argument_list|(
literal|"<p style=\"font-weight:bold\">blah</p>"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|fontWeight
argument_list|()
operator|==
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
name|setHtml
argument_list|(
literal|"<p style=\"font-weight:600\">blah</p>"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|fontWeight
argument_list|()
operator|==
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|css_float
name|void
name|tst_QTextDocumentFragment
operator|::
name|css_float
parameter_list|()
block|{
name|setHtml
argument_list|(
literal|"<img src=\"foo\" style=\"float: right\">"
argument_list|)
expr_stmt|;
name|QTextCharFormat
name|fmt
init|=
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|fmt
operator|.
name|isImageFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QTextObject
modifier|*
name|o
init|=
name|doc
operator|->
name|objectForFormat
argument_list|(
name|fmt
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|QTextFormat
name|f
init|=
name|o
operator|->
name|format
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|isFrameFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|toFrameFormat
argument_list|()
operator|.
name|position
argument_list|()
operator|==
name|QTextFrameFormat
operator|::
name|FloatRight
argument_list|)
expr_stmt|;
name|setHtml
argument_list|(
literal|"<img src=\"foo\" align=right>"
argument_list|)
expr_stmt|;
name|fmt
operator|=
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|fmt
operator|.
name|isImageFormat
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|=
name|doc
operator|->
name|objectForFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|f
operator|=
name|o
operator|->
name|format
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|isFrameFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|toFrameFormat
argument_list|()
operator|.
name|position
argument_list|()
operator|==
name|QTextFrameFormat
operator|::
name|FloatRight
argument_list|)
expr_stmt|;
name|setHtml
argument_list|(
literal|"<img src=\"foo\" align=left>"
argument_list|)
expr_stmt|;
name|fmt
operator|=
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|fmt
operator|.
name|isImageFormat
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|=
name|doc
operator|->
name|objectForFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|f
operator|=
name|o
operator|->
name|format
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|isFrameFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|toFrameFormat
argument_list|()
operator|.
name|position
argument_list|()
operator|==
name|QTextFrameFormat
operator|::
name|FloatLeft
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|css_textIndent
name|void
name|tst_QTextDocumentFragment
operator|::
name|css_textIndent
parameter_list|()
block|{
name|setHtml
argument_list|(
literal|"<p style=\"text-indent: 42px\">foo</p>"
argument_list|)
expr_stmt|;
name|QTextBlockFormat
name|fmt
init|=
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|blockFormat
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fmt
operator|.
name|textIndent
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|css_inline
name|void
name|tst_QTextDocumentFragment
operator|::
name|css_inline
parameter_list|()
block|{
name|setHtml
argument_list|(
literal|""
literal|"<style>"
literal|" p { background-color: green;}"
literal|"</style>"
literal|"<p>test</p>"
argument_list|)
expr_stmt|;
name|QTextBlockFormat
name|fmt
init|=
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|blockFormat
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|fmt
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|QColor
argument_list|(
literal|"green"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|css_external
name|void
name|tst_QTextDocumentFragment
operator|::
name|css_external
parameter_list|()
block|{
name|doc
operator|->
name|addResource
argument_list|(
name|QTextDocument
operator|::
name|StyleSheetResource
argument_list|,
name|QUrl
argument_list|(
literal|"test.css"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"p { background-color: green; }"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
literal|""
literal|"<link href=\"test.css\" type=\"text/css\" />"
literal|"<p>test</p>"
argument_list|)
expr_stmt|;
name|QTextBlockFormat
name|fmt
init|=
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|blockFormat
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|fmt
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|QColor
argument_list|(
literal|"green"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|css_import
name|void
name|tst_QTextDocumentFragment
operator|::
name|css_import
parameter_list|()
block|{
name|doc
operator|->
name|addResource
argument_list|(
name|QTextDocument
operator|::
name|StyleSheetResource
argument_list|,
name|QUrl
argument_list|(
literal|"test.css"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"@import \"other.css\";"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|->
name|addResource
argument_list|(
name|QTextDocument
operator|::
name|StyleSheetResource
argument_list|,
name|QUrl
argument_list|(
literal|"other.css"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"@import url(\"other2.css\");"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|->
name|addResource
argument_list|(
name|QTextDocument
operator|::
name|StyleSheetResource
argument_list|,
name|QUrl
argument_list|(
literal|"other2.css"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"p { background-color: green; }"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
literal|""
literal|"<link href=\"test.css\" type=\"text/css\" />"
literal|"<p>test</p>"
argument_list|)
expr_stmt|;
name|QTextBlockFormat
name|fmt
init|=
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|blockFormat
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|fmt
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|QColor
argument_list|(
literal|"green"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
literal|""
literal|"<style>@import \"test.css\" screen;</style>"
literal|"<p>test</p>"
argument_list|)
expr_stmt|;
name|fmt
operator|=
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|blockFormat
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|fmt
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|QColor
argument_list|(
literal|"green"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|css_selectors_data
name|void
name|tst_QTextDocumentFragment
operator|::
name|css_selectors_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"match"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"selector"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"attributes"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"plain"
argument_list|)
operator|<<
literal|true
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"class"
argument_list|)
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|".foo"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"class=foo"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"notclass"
argument_list|)
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|".foo"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"class=bar"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"attrset"
argument_list|)
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|"[justset]"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"justset"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"notattrset"
argument_list|)
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"[justset]"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"otherattribute"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"attrmatch"
argument_list|)
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|"[foo=bar]"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo=bar"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"noattrmatch"
argument_list|)
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"[foo=bar]"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo=xyz"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"contains"
argument_list|)
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|"[foo~=bar]"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo=\"baz bleh bar\""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"notcontains"
argument_list|)
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"[foo~=bar]"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo=\"test\""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"beingswith"
argument_list|)
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|"[foo|=bar]"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo=\"bar-bleh\""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"notbeingswith"
argument_list|)
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"[foo|=bar]"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo=\"bleh-bar\""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"attr2"
argument_list|)
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|"[bar=foo]"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bleh=bar bar=foo"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|css_selectors
name|void
name|tst_QTextDocumentFragment
operator|::
name|css_selectors
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|match
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|selector
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|QString
name|html
init|=
name|QString
argument_list|(
literal|""
literal|"<style>"
literal|" p { background-color: green }"
literal|" p%1 { background-color: red }"
literal|"</style>"
literal|"<p %2>test</p>"
argument_list|)
operator|.
name|arg
argument_list|(
name|selector
argument_list|)
operator|.
name|arg
argument_list|(
name|attributes
argument_list|)
decl_stmt|;
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|QTextBlockFormat
name|fmt
init|=
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|blockFormat
argument_list|()
decl_stmt|;
if|if
condition|(
name|match
condition|)
name|QVERIFY
argument_list|(
name|fmt
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|QColor
argument_list|(
literal|"red"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|QVERIFY
argument_list|(
name|fmt
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|QColor
argument_list|(
literal|"green"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|css_nodeNameCaseInsensitivity
name|void
name|tst_QTextDocumentFragment
operator|::
name|css_nodeNameCaseInsensitivity
parameter_list|()
block|{
name|setHtml
argument_list|(
literal|"<style>"
literal|"P { background-color: green }"
literal|"</style>"
literal|"<p>test</p>"
argument_list|)
expr_stmt|;
name|QTextBlockFormat
name|fmt
init|=
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|blockFormat
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|fmt
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|QColor
argument_list|(
literal|"green"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|css_textUnderlineStyle_data
name|void
name|tst_QTextDocumentFragment
operator|::
name|css_textUnderlineStyle_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"styleName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedStyle"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"none"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"none"
argument_list|)
operator|<<
name|int
argument_list|(
name|QTextCharFormat
operator|::
name|NoUnderline
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"solid"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"solid"
argument_list|)
operator|<<
name|int
argument_list|(
name|QTextCharFormat
operator|::
name|SingleUnderline
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dash"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"dashed"
argument_list|)
operator|<<
name|int
argument_list|(
name|QTextCharFormat
operator|::
name|DashUnderline
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dot"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"dotted"
argument_list|)
operator|<<
name|int
argument_list|(
name|QTextCharFormat
operator|::
name|DotLine
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dashdot"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"dot-dash"
argument_list|)
operator|<<
name|int
argument_list|(
name|QTextCharFormat
operator|::
name|DashDotLine
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dashdotdot"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"dot-dot-dash"
argument_list|)
operator|<<
name|int
argument_list|(
name|QTextCharFormat
operator|::
name|DashDotDotLine
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"wave"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"wave"
argument_list|)
operator|<<
name|int
argument_list|(
name|QTextCharFormat
operator|::
name|WaveUnderline
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|css_textUnderlineStyle
name|void
name|tst_QTextDocumentFragment
operator|::
name|css_textUnderlineStyle
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|styleName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedStyle
argument_list|)
expr_stmt|;
name|QString
name|html
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"<span style=\"text-underline-style: %1\">Blah</span>"
argument_list|)
operator|.
name|arg
argument_list|(
name|styleName
argument_list|)
decl_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|QTextFragment
name|fragment
init|=
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|fragment
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|fragment
operator|.
name|charFormat
argument_list|()
operator|.
name|underlineStyle
argument_list|()
argument_list|)
argument_list|,
name|expectedStyle
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|css_textUnderlineStyleAndDecoration
name|void
name|tst_QTextDocumentFragment
operator|::
name|css_textUnderlineStyleAndDecoration
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<span style=\"text-decoration: overline; text-underline-style: solid\">Test</span>"
argument_list|)
expr_stmt|;
name|QTextFragment
name|fragment
init|=
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|fragment
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fragment
operator|.
name|charFormat
argument_list|()
operator|.
name|underlineStyle
argument_list|()
operator|==
name|QTextCharFormat
operator|::
name|SingleUnderline
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fragment
operator|.
name|charFormat
argument_list|()
operator|.
name|fontOverline
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<span style=\"text-underline-style: solid; text-decoration: overline\">Test</span>"
argument_list|)
expr_stmt|;
name|fragment
operator|=
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|fragment
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fragment
operator|.
name|charFormat
argument_list|()
operator|.
name|underlineStyle
argument_list|()
operator|==
name|QTextCharFormat
operator|::
name|SingleUnderline
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fragment
operator|.
name|charFormat
argument_list|()
operator|.
name|fontOverline
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|css_listStyleType
name|void
name|tst_QTextDocumentFragment
operator|::
name|css_listStyleType
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<ol style=\"list-style-type: disc\"><li>Blah</li></ol>"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentList
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentList
argument_list|()
operator|->
name|format
argument_list|()
operator|.
name|style
argument_list|()
operator|==
name|QTextListFormat
operator|::
name|ListDisc
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<ul style=\"list-style-type: square\"><li>Blah</li></ul>"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentList
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentList
argument_list|()
operator|->
name|format
argument_list|()
operator|.
name|style
argument_list|()
operator|==
name|QTextListFormat
operator|::
name|ListSquare
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<ul style=\"list-style-type: circle\"><li>Blah</li></ul>"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentList
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentList
argument_list|()
operator|->
name|format
argument_list|()
operator|.
name|style
argument_list|()
operator|==
name|QTextListFormat
operator|::
name|ListCircle
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<ul style=\"list-style-type: decimal\"><li>Blah</li></ul>"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentList
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentList
argument_list|()
operator|->
name|format
argument_list|()
operator|.
name|style
argument_list|()
operator|==
name|QTextListFormat
operator|::
name|ListDecimal
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<ul style=\"list-style-type: lower-alpha\"><li>Blah</li></ul>"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentList
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentList
argument_list|()
operator|->
name|format
argument_list|()
operator|.
name|style
argument_list|()
operator|==
name|QTextListFormat
operator|::
name|ListLowerAlpha
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<ul style=\"list-style-type: upper-alpha\"><li>Blah</li></ul>"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentList
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentList
argument_list|()
operator|->
name|format
argument_list|()
operator|.
name|style
argument_list|()
operator|==
name|QTextListFormat
operator|::
name|ListUpperAlpha
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<ul style=\"list-style-type: upper-roman\"><li>Blah</li></ul>"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentList
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentList
argument_list|()
operator|->
name|format
argument_list|()
operator|.
name|style
argument_list|()
operator|==
name|QTextListFormat
operator|::
name|ListUpperRoman
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<ul style=\"list-style-type: lower-roman\"><li>Blah</li></ul>"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentList
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentList
argument_list|()
operator|->
name|format
argument_list|()
operator|.
name|style
argument_list|()
operator|==
name|QTextListFormat
operator|::
name|ListLowerRoman
argument_list|)
expr_stmt|;
comment|// ignore the unsupported list-style-position inside the list-style shorthand property
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<ul style=\"list-style: outside decimal\"><li>Blah</li></ul>"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentList
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentList
argument_list|()
operator|->
name|format
argument_list|()
operator|.
name|style
argument_list|()
operator|==
name|QTextListFormat
operator|::
name|ListDecimal
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|css_linkPseudo
name|void
name|tst_QTextDocumentFragment
operator|::
name|css_linkPseudo
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<a href=\"foobar\">Blah</a>"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|fontUnderline
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<style>a { text-decoration: none; }</style><a href=\"foobar\">Blah</a>"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|fontUnderline
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<style>a:link { text-decoration: none; }</style><a href=\"foobar\">Blah</a>"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|fontUnderline
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|css_pageBreaks
name|void
name|tst_QTextDocumentFragment
operator|::
name|css_pageBreaks
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<p>Foo</p>"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|pageBreakPolicy
argument_list|()
operator|==
name|QTextFormat
operator|::
name|PageBreak_Auto
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<p style=\" page-break-before:always;\">Foo</p>"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|pageBreakPolicy
argument_list|()
operator|==
name|QTextFormat
operator|::
name|PageBreak_AlwaysBefore
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<p style=\" page-break-after:always;\">Foo</p>"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|pageBreakPolicy
argument_list|()
operator|==
name|QTextFormat
operator|::
name|PageBreak_AlwaysAfter
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<p style=\" page-break-before:always; page-break-after:always;\">Foo</p>"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|pageBreakPolicy
argument_list|()
operator|==
operator|(
name|QTextFormat
operator|::
name|PageBreak_AlwaysAfter
operator||
name|QTextFormat
operator|::
name|PageBreak_AlwaysBefore
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|universalSelectors_data
name|void
name|tst_QTextDocumentFragment
operator|::
name|universalSelectors_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"match"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"selector"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"attributes"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
literal|false
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
comment|// invalid totally empty selector
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"*[foo=bar]"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo=bleh"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|"*[foo=bar]"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo=bar"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"[foo=bar]"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo=bleh"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6"
argument_list|)
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|"[foo=bar]"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo=bar"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"7"
argument_list|)
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|".charfmt1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"class=charfmt1"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|universalSelectors
name|void
name|tst_QTextDocumentFragment
operator|::
name|universalSelectors
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|match
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|selector
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|QString
name|html
init|=
name|QString
argument_list|(
literal|""
literal|"<style>"
literal|"%1 { background-color: green }"
literal|"</style>"
literal|"<p %2>test</p>"
argument_list|)
operator|.
name|arg
argument_list|(
name|selector
argument_list|)
operator|.
name|arg
argument_list|(
name|attributes
argument_list|)
decl_stmt|;
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|QTextBlockFormat
name|fmt
init|=
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|blockFormat
argument_list|()
decl_stmt|;
if|if
condition|(
name|match
condition|)
name|QVERIFY
argument_list|(
name|fmt
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|QColor
argument_list|(
literal|"green"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|QVERIFY
argument_list|(
operator|!
name|fmt
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|BackgroundBrush
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|screenMedia
name|void
name|tst_QTextDocumentFragment
operator|::
name|screenMedia
parameter_list|()
block|{
name|setHtml
argument_list|(
literal|"<style>"
literal|"@media screen {"
literal|"p { background-color: green }"
literal|"}"
literal|"</style>"
literal|"<p>test</p>"
literal|""
argument_list|)
expr_stmt|;
name|QTextBlockFormat
name|fmt
init|=
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|blockFormat
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|fmt
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|QColor
argument_list|(
literal|"green"
argument_list|)
argument_list|)
expr_stmt|;
name|setHtml
argument_list|(
literal|"<style>"
literal|"@media foobar {"
literal|"p { background-color: green }"
literal|"}"
literal|"</style>"
literal|"<p>test</p>"
literal|""
argument_list|)
expr_stmt|;
name|fmt
operator|=
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|blockFormat
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|fmt
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
operator|!=
name|QColor
argument_list|(
literal|"green"
argument_list|)
argument_list|)
expr_stmt|;
name|setHtml
argument_list|(
literal|"<style>"
literal|"@media sCrEeN {"
literal|"p { background-color: green }"
literal|"}"
literal|"</style>"
literal|"<p>test</p>"
literal|""
argument_list|)
expr_stmt|;
name|fmt
operator|=
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|blockFormat
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|fmt
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|QColor
argument_list|(
literal|"green"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|htmlResourceLoading
name|void
name|tst_QTextDocumentFragment
operator|::
name|htmlResourceLoading
parameter_list|()
block|{
specifier|const
name|QString
name|html
argument_list|(
literal|"<link href=\"test.css\" type=\"text/css\" />"
literal|"<p>test</p>"
argument_list|)
decl_stmt|;
name|QTextDocument
name|tmp
decl_stmt|;
name|tmp
operator|.
name|addResource
argument_list|(
name|QTextDocument
operator|::
name|StyleSheetResource
argument_list|,
name|QUrl
argument_list|(
literal|"test.css"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"p { background-color: green; }"
argument_list|)
argument_list|)
expr_stmt|;
name|QTextDocumentFragment
name|frag
init|=
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|html
argument_list|,
operator|&
name|tmp
argument_list|)
decl_stmt|;
name|doc
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QTextCursor
argument_list|(
name|doc
argument_list|)
operator|.
name|insertFragment
argument_list|(
name|frag
argument_list|)
expr_stmt|;
name|QTextBlockFormat
name|fmt
init|=
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|blockFormat
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|fmt
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|QColor
argument_list|(
literal|"green"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|someCaseInsensitiveAttributeValues
name|void
name|tst_QTextDocumentFragment
operator|::
name|someCaseInsensitiveAttributeValues
parameter_list|()
block|{
specifier|const
name|char
name|html1
index|[]
init|=
literal|"<ul type=sQUarE><li>Blah</li></ul>"
decl_stmt|;
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html1
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentList
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentList
argument_list|()
operator|->
name|format
argument_list|()
operator|.
name|style
argument_list|()
operator|==
name|QTextListFormat
operator|::
name|ListSquare
argument_list|)
expr_stmt|;
specifier|const
name|char
name|html2
index|[]
init|=
literal|"<div align=ceNTeR><b>Hello World"
decl_stmt|;
name|setHtml
argument_list|(
name|html2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|alignment
argument_list|()
argument_list|,
name|Qt
operator|::
name|AlignHCenter
argument_list|)
expr_stmt|;
specifier|const
name|char
name|html3
index|[]
init|=
literal|"<p dir=rTL><b>Hello World"
decl_stmt|;
name|setHtml
argument_list|(
name|html3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|layoutDirection
argument_list|()
argument_list|,
name|Qt
operator|::
name|RightToLeft
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|TestDocument
class|class
name|TestDocument
super|:
specifier|public
name|QTextDocument
block|{
public|public:
DECL|function|TestDocument
specifier|inline
name|TestDocument
parameter_list|()
block|{}
DECL|member|testPixmap
name|QPixmap
name|testPixmap
decl_stmt|;
DECL|function|loadResource
specifier|virtual
name|QVariant
name|loadResource
parameter_list|(
name|int
name|type
parameter_list|,
specifier|const
name|QUrl
modifier|&
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|toString
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"testPixmap"
argument_list|)
condition|)
block|{
return|return
name|testPixmap
return|;
block|}
return|return
name|QTextDocument
operator|::
name|loadResource
argument_list|(
name|type
argument_list|,
name|name
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|backgroundImage
name|void
name|tst_QTextDocumentFragment
operator|::
name|backgroundImage
parameter_list|()
block|{
name|TestDocument
name|doc
decl_stmt|;
name|doc
operator|.
name|testPixmap
operator|=
name|QPixmap
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|doc
operator|.
name|testPixmap
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setHtml
argument_list|(
literal|"<p style=\"background-image: url(testPixmap)\">Hello</p>"
argument_list|)
expr_stmt|;
name|QBrush
name|bg
init|=
name|doc
operator|.
name|begin
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|background
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|bg
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|TexturePattern
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bg
operator|.
name|texture
argument_list|()
operator|.
name|cacheKey
argument_list|()
argument_list|,
name|doc
operator|.
name|testPixmap
operator|.
name|cacheKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dontMergePreAndNonPre
name|void
name|tst_QTextDocumentFragment
operator|::
name|dontMergePreAndNonPre
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<pre>Pre text</pre>Text that should be wrapped"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Pre text"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Text that should be wrapped"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|leftMarginInsideHtml
name|void
name|tst_QTextDocumentFragment
operator|::
name|leftMarginInsideHtml
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<html><dl><dd>Blah"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|leftMargin
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_margins
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_margins
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<p style=\"margin-left: 42px\">Test"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|topMargin
argument_list|()
argument_list|,
literal|12.
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|bottomMargin
argument_list|()
argument_list|,
literal|12.
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|leftMargin
argument_list|()
argument_list|,
literal|42.
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|newlineInsidePreShouldBecomeNewParagraph
name|void
name|tst_QTextDocumentFragment
operator|::
name|newlineInsidePreShouldBecomeNewParagraph
parameter_list|()
block|{
comment|// rationale: we used to map newlines inside<pre> to QChar::LineSeparator, but
comment|// if you display a lot of text inside pre it all ended up inside one single paragraph,
comment|// which doesn't scale very well with our text engine. Paragraphs spanning thousands of
comment|// lines are not a common use-case otherwise.
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<pre>Foo\nBar</pre>"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QTextBlock
name|block
init|=
name|doc
operator|->
name|begin
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|topMargin
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsNull
argument_list|(
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|bottomMargin
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsNull
argument_list|(
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|topMargin
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|bottomMargin
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<pre style=\"margin-top: 32px; margin-bottom: 45px; margin-left: 50px\">Foo\nBar</pre>"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|block
operator|=
name|doc
operator|->
name|begin
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|topMargin
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsNull
argument_list|(
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|bottomMargin
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|leftMargin
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsNull
argument_list|(
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|topMargin
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|bottomMargin
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|45
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|leftMargin
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invalidColspan
name|void
name|tst_QTextDocumentFragment
operator|::
name|invalidColspan
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<table><tr rowspan=-1><td colspan=-1>Blah</td></tr></table>"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|columns
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|rows
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_brokenTableWithJustTr
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_brokenTableWithJustTr
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<tr><td>First Cell</td><tr><td>Second Cell"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|rows
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|columns
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"First Cell"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Second Cell"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
literal|""
literal|"<col width=286 style='mso-width-source:userset;mso-width-alt:10459;width:215pt'>"
literal|"<col width=64 span=3 style='width:48pt'>"
literal|"<tr height=17 style='height:12.75pt'>"
literal|"<td height=17 width=286 style='height:12.75pt;width:215pt'>1a</td>"
literal|"<td width=64 style='width:48pt'>1b</td>"
literal|"<td width=64 style='width:48pt'>1c</td>"
literal|"<td width=64 style='width:48pt'>1d</td>"
literal|"</tr>"
literal|"<tr height=17 style='height:12.75pt'>"
literal|"<td height=17 style='height:12.75pt'>|2a</td>"
literal|"<td>2b</td>"
literal|"<td>2c</td>"
literal|"<td>2d</td>"
literal|"</tr>"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|table
operator|=
name|cursor
operator|.
name|currentTable
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|rows
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|columns
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_brokenTableWithJustTd
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_brokenTableWithJustTd
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<td>First Cell</td><td>Second Cell"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|rows
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|columns
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"First Cell"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Second Cell"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<td height=17 width=286 style='height:12.75pt;width:215pt'>1a</td>"
literal|"<td width=64 style='width:48pt'>1b</td>"
literal|"<td width=64 style='width:48pt'>1c</td>"
literal|"<td width=64 style='width:48pt'>1d</td>"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|table
operator|=
name|cursor
operator|.
name|currentTable
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|rows
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|columns
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_preNewlineHandling_data
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_preNewlineHandling_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"html"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedPlainText"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pre1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Foo<pre>Bar"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Foo\nBar"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pre2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Foo<pre>\nBar"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Foo\nBar"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pre3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Foo<pre>\n\nBar"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Foo\n\nBar"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pre4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<html>Foo<pre>\nBar"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Foo\nBar"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pre5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<pre>Foo\n</pre>\nBar"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Foo\nBar"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pre6"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<pre>Foo<b>Bar</b>Blah\n</pre>\nMooh"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"FooBarBlah\nMooh"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pre7"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<pre>\nPara1\n</pre>\n<pre>\nPara2\n</pre>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Para1\nPara2"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_preNewlineHandling
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_preNewlineHandling
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|html
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
literal|"expectedPlainText"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_br
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_br
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
literal|"Foo<br><br><br>Blah"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Foo\n\n\nBlah"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_dl
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_dl
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<dl><dt>term<dd>data</dl>Text afterwards"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"term\ndata\nText afterwards"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_tableStrangeNewline
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_tableStrangeNewline
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<table><tr><td>Foo</td></tr>\n</table>"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|rows
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|columns
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|const
name|QTextTableCell
name|cell
init|=
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|cell
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cell
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|==
name|cell
operator|.
name|lastCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_tableStrangeNewline2
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_tableStrangeNewline2
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<table><tr><td>Foo</td></tr><tr>\n<td/></tr></table>"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|rows
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|columns
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|const
name|QTextTableCell
name|cell
init|=
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|cell
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cell
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|==
name|cell
operator|.
name|lastCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_tableStrangeNewline3
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_tableStrangeNewline3
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<table border>"
literal|"<tr>"
literal|"<td>"
literal|"<ul>"
literal|"<li>Meh</li>"
literal|"</ul>"
literal|"</td>"
literal|"<td>\n"
literal|"<ul>"
literal|"<li>Foo</li>"
literal|"</ul>"
literal|"</td>"
literal|"</tr>"
literal|"</table>"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|rows
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|columns
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QTextTableCell
name|cell
init|=
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|cell
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Meh"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cell
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|==
name|cell
operator|.
name|lastCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
argument_list|)
expr_stmt|;
name|cell
operator|=
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cell
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cell
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|==
name|cell
operator|.
name|lastCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_caption
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_caption
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<table border align=center>"
literal|"<caption>This<b>   is a</b> Caption!</caption>"
literal|"<tr><td>Blah</td></tr>"
literal|"</table>"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"This is a Caption!"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|blockFormat
argument_list|()
operator|.
name|alignment
argument_list|()
operator|==
name|Qt
operator|::
name|AlignHCenter
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|rows
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|columns
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTextTableCell
name|cell
init|=
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|cell
operator|.
name|firstCursorPosition
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Blah"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|windowsLatin1ExtendedCharacters
specifier|static
specifier|const
name|uint
name|windowsLatin1ExtendedCharacters
index|[
literal|0xA0
operator|-
literal|0x80
index|]
init|=
block|{
literal|0x20ac
block|,
comment|// 0x80
literal|0x0081
block|,
comment|// 0x81 direct mapping
literal|0x201a
block|,
comment|// 0x82
literal|0x0192
block|,
comment|// 0x83
literal|0x201e
block|,
comment|// 0x84
literal|0x2026
block|,
comment|// 0x85
literal|0x2020
block|,
comment|// 0x86
literal|0x2021
block|,
comment|// 0x87
literal|0x02C6
block|,
comment|// 0x88
literal|0x2030
block|,
comment|// 0x89
literal|0x0160
block|,
comment|// 0x8A
literal|0x2039
block|,
comment|// 0x8B
literal|0x0152
block|,
comment|// 0x8C
literal|0x008D
block|,
comment|// 0x8D direct mapping
literal|0x017D
block|,
comment|// 0x8E
literal|0x008F
block|,
comment|// 0x8F directmapping
literal|0x0090
block|,
comment|// 0x90 directmapping
literal|0x2018
block|,
comment|// 0x91
literal|0x2019
block|,
comment|// 0x92
literal|0x201C
block|,
comment|// 0x93
literal|0X201D
block|,
comment|// 0x94
literal|0x2022
block|,
comment|// 0x95
literal|0x2013
block|,
comment|// 0x96
literal|0x2014
block|,
comment|// 0x97
literal|0x02DC
block|,
comment|// 0x98
literal|0x2122
block|,
comment|// 0x99
literal|0x0161
block|,
comment|// 0x9A
literal|0x203A
block|,
comment|// 0x9B
literal|0x0153
block|,
comment|// 0x9C
literal|0x009D
block|,
comment|// 0x9D direct mapping
literal|0x017E
block|,
comment|// 0x9E
literal|0x0178
comment|// 0x9F
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|html_windowsEntities
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_windowsEntities
parameter_list|()
block|{
for|for
control|(
name|uint
name|i
init|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|windowsLatin1ExtendedCharacters
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|windowsLatin1ExtendedCharacters
index|[
literal|0
index|]
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|html
init|=
name|QString
operator|::
name|number
argument_list|(
name|i
operator|+
literal|0x80
argument_list|)
decl_stmt|;
name|html
operator|.
name|prepend
argument_list|(
literal|"<p>&#"
argument_list|)
expr_stmt|;
name|html
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
name|QChar
argument_list|(
name|windowsLatin1ExtendedCharacters
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|html_eatenText
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_eatenText
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<h1>Test1</h1>\nTest2<h1>Test3</h1>"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Test1"
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Test2"
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Test3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_hr
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_hr
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<hr />"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|BlockTrailingHorizontalRulerWidth
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_hrMargins
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_hrMargins
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<p>Test<hr/>Blah"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|QTextBlock
name|block
init|=
name|cursor
operator|.
name|block
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Test"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|bottomMargin
argument_list|()
operator|<=
name|qreal
argument_list|(
literal|12.
argument_list|)
argument_list|)
expr_stmt|;
name|QTextBlock
name|first
init|=
name|block
decl_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|block
operator|=
name|cursor
operator|.
name|block
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|qMax
argument_list|(
name|first
operator|.
name|blockFormat
argument_list|()
operator|.
name|bottomMargin
argument_list|()
argument_list|,
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|topMargin
argument_list|()
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|block
operator|=
name|cursor
operator|.
name|block
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Blah"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_blockQuoteMargins
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_blockQuoteMargins
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<blockquote>Bar</blockquote>"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|QTextBlock
name|block
init|=
name|cursor
operator|.
name|block
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|leftMargin
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|40.
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|rightMargin
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|40.
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|topMargin
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|12.
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|bottomMargin
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|12.
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_definitionListMargins
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_definitionListMargins
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
literal|"Foo<dl><dt>tag<dd>data</dl>Bar"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|QTextBlock
name|block
init|=
name|cursor
operator|.
name|block
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"tag"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|topMargin
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|8.
argument_list|)
argument_list|)
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"data"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|bottomMargin
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|8.
argument_list|)
argument_list|)
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_listMargins
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_listMargins
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
literal|"Foo<ol><li>First<li>Second</ol>Bar"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|QTextBlock
name|block
init|=
name|cursor
operator|.
name|block
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"First"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|topMargin
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|12.
argument_list|)
argument_list|)
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Second"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|bottomMargin
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|12.
argument_list|)
argument_list|)
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_titleAttribute
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_titleAttribute
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<span title=\"this is my title\">Test</span>"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|toolTip
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"this is my title"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_compressDivs
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_compressDivs
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<p/><div/><div/><div/><div/>Test"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|completeToPlainText
name|void
name|tst_QTextDocumentFragment
operator|::
name|completeToPlainText
parameter_list|()
block|{
name|doc
operator|->
name|setPlainText
argument_list|(
literal|"Hello\nWorld"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hello\nWorld"
argument_list|)
argument_list|)
expr_stmt|;
name|QTextDocumentFragment
name|fragment
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fragment
operator|.
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hello\nWorld"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|copyContents
name|void
name|tst_QTextDocumentFragment
operator|::
name|copyContents
parameter_list|()
block|{
name|doc
operator|->
name|setPlainText
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|QFont
name|f
decl_stmt|;
name|doc
operator|->
name|setDefaultFont
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|QTextFragment
name|fragment
init|=
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fragment
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fragment
operator|.
name|charFormat
argument_list|()
operator|.
name|font
argument_list|()
operator|.
name|pointSize
argument_list|()
argument_list|,
name|f
operator|.
name|pointSize
argument_list|()
argument_list|)
expr_stmt|;
name|QTextDocumentFragment
name|frag
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|doc
operator|->
name|clear
argument_list|()
expr_stmt|;
name|f
operator|.
name|setPointSize
argument_list|(
literal|48
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setDefaultFont
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|QTextCursor
argument_list|(
name|doc
argument_list|)
operator|.
name|insertFragment
argument_list|(
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|frag
operator|.
name|toHtml
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fragment
operator|=
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fragment
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fragment
operator|.
name|charFormat
argument_list|()
operator|.
name|font
argument_list|()
operator|.
name|pointSize
argument_list|()
argument_list|,
name|f
operator|.
name|pointSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_textAfterHr
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_textAfterHr
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<hr><nobr><b>After the centered text</b></nobr>"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QTextBlock
name|block
init|=
name|doc
operator|->
name|begin
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|BlockTrailingHorizontalRulerWidth
argument_list|)
argument_list|)
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|QString
name|txt
argument_list|(
literal|"After the centered text"
argument_list|)
decl_stmt|;
name|txt
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|,
name|QChar
operator|::
name|Nbsp
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|txt
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|BlockTrailingHorizontalRulerWidth
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|blockTagClosing
name|void
name|tst_QTextDocumentFragment
operator|::
name|blockTagClosing
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<p>foo<p>bar<span>baz</span>"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QTextBlock
name|block
init|=
name|doc
operator|->
name|begin
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"barbaz"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isEmpty
name|void
name|tst_QTextDocumentFragment
operator|::
name|isEmpty
parameter_list|()
block|{
name|QTextDocumentFragment
name|frag
decl_stmt|;
name|QVERIFY
argument_list|(
name|frag
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|frag
operator|=
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|frag
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|frag
operator|=
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
literal|"<hr />"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|frag
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_alignmentInheritance
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_alignmentInheritance
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<center>Centered text<hr></center><b>After the centered text</b>"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QTextBlock
name|block
init|=
name|doc
operator|->
name|begin
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|alignment
argument_list|()
operator|&
name|Qt
operator|::
name|AlignHCenter
argument_list|)
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|alignment
argument_list|()
operator|&
name|Qt
operator|::
name|AlignHCenter
argument_list|)
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|alignment
argument_list|()
operator|&
name|Qt
operator|::
name|AlignHCenter
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_ignoreEmptyDivs
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_ignoreEmptyDivs
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<p><div/><b>Foo</b>"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_dontInheritAlignmentForFloatingImages
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_dontInheritAlignmentForFloatingImages
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<p align=right><img align=unknownignored src=\"foo\" /></p>"
argument_list|)
expr_stmt|;
name|QTextCharFormat
name|fmt
init|=
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|fmt
operator|.
name|isImageFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QTextObject
modifier|*
name|o
init|=
name|doc
operator|->
name|objectForFormat
argument_list|(
name|fmt
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|QTextFormat
name|f
init|=
name|o
operator|->
name|format
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|isFrameFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|toFrameFormat
argument_list|()
operator|.
name|position
argument_list|()
operator|==
name|QTextFrameFormat
operator|::
name|InFlow
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_verticalImageAlignment
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_verticalImageAlignment
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<img src=\"foo\"/>"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|isImageFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QTextImageFormat
name|fmt
init|=
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|toImageFormat
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|fmt
operator|.
name|verticalAlignment
argument_list|()
operator|==
name|QTextCharFormat
operator|::
name|AlignNormal
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<img src=\"foo\" align=middle />"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|isImageFormat
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|=
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|toImageFormat
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|fmt
operator|.
name|verticalAlignment
argument_list|()
operator|==
name|QTextCharFormat
operator|::
name|AlignMiddle
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<img src=\"foo\" style=\"vertical-align: middle\" />"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|isImageFormat
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|=
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|toImageFormat
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|fmt
operator|.
name|verticalAlignment
argument_list|()
operator|==
name|QTextCharFormat
operator|::
name|AlignMiddle
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<img src=\"foo\" align=top />"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|isImageFormat
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|=
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|toImageFormat
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|fmt
operator|.
name|verticalAlignment
argument_list|()
operator|==
name|QTextCharFormat
operator|::
name|AlignTop
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<img src=\"foo\" style=\"vertical-align: top\" />"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|isImageFormat
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|=
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|toImageFormat
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|fmt
operator|.
name|verticalAlignment
argument_list|()
operator|==
name|QTextCharFormat
operator|::
name|AlignTop
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_verticalCellAlignment
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_verticalCellAlignment
parameter_list|()
block|{
specifier|const
name|char
modifier|*
name|alt
index|[]
init|=
block|{
comment|// vertical-align property
literal|"<table>"
literal|"<tr>"
literal|"<td style=\"vertical-align: middle\"></td>"
literal|"<td style=\"vertical-align: top\"></td>"
literal|"<td style=\"vertical-align: bottom\"></td>"
literal|"</tr>"
literal|"</table>"
block|,
comment|// valign property
literal|"<table>"
literal|"<tr>"
literal|"<td valign=\"middle\"></td>"
literal|"<td valign=\"top\"></td>"
literal|"<td valign=\"bottom\"></td>"
literal|"</tr>"
literal|"</table>"
block|,
comment|// test td override of tr property
literal|"<table>"
literal|"<tr valign=\"bottom\">"
literal|"<td valign=\"middle\"></td>"
literal|"<td valign=\"top\"></td>"
literal|"<td></td>"
literal|"</tr>"
literal|"</table>"
block|}
decl_stmt|;
specifier|const
name|int
name|numTestCases
init|=
sizeof|sizeof
argument_list|(
name|alt
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
operator|*
name|alt
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTestCases
condition|;
operator|++
name|i
control|)
block|{
name|doc
operator|->
name|setHtml
argument_list|(
name|alt
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|qobject_cast
argument_list|<
name|QTextTable
operator|*
argument_list|>
argument_list|(
name|doc
operator|->
name|rootFrame
argument_list|()
operator|->
name|childFrames
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|format
argument_list|()
operator|.
name|verticalAlignment
argument_list|()
argument_list|,
name|QTextCharFormat
operator|::
name|AlignMiddle
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|format
argument_list|()
operator|.
name|verticalAlignment
argument_list|()
argument_list|,
name|QTextCharFormat
operator|::
name|AlignTop
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
operator|.
name|format
argument_list|()
operator|.
name|verticalAlignment
argument_list|()
argument_list|,
name|QTextCharFormat
operator|::
name|AlignBottom
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|html_borderColor
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_borderColor
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<table border=1 style=\"border-color:#0000ff;\"><tr><td>Foo</td></tr></table>"
decl_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentTable
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|currentTable
argument_list|()
operator|->
name|format
argument_list|()
operator|.
name|borderStyle
argument_list|()
argument_list|,
name|QTextFrameFormat
operator|::
name|BorderStyle_Outset
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|currentTable
argument_list|()
operator|->
name|format
argument_list|()
operator|.
name|borderBrush
argument_list|()
argument_list|,
name|QBrush
argument_list|(
name|QColor
argument_list|(
literal|"#0000ff"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_borderStyle
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_borderStyle
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<table border=1 style=\"border-style:solid;\"><tr><td>Foo</td></tr></table>"
decl_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentTable
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|currentTable
argument_list|()
operator|->
name|format
argument_list|()
operator|.
name|borderStyle
argument_list|()
argument_list|,
name|QTextFrameFormat
operator|::
name|BorderStyle_Solid
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|currentTable
argument_list|()
operator|->
name|format
argument_list|()
operator|.
name|borderBrush
argument_list|()
argument_list|,
name|QBrush
argument_list|(
name|Qt
operator|::
name|darkGray
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_borderWidth
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_borderWidth
parameter_list|()
block|{
specifier|const
name|char
modifier|*
name|html
index|[
literal|2
index|]
init|=
block|{
literal|"<table style=\"border-width:2;\"><tr><td>Foo</td></tr></table>"
block|,
literal|"<table style=\"border-width:2px;\"><tr><td>Foo</td></tr></table>"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|cursor
operator|.
name|insertFragment
argument_list|(
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|currentTable
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|currentTable
argument_list|()
operator|->
name|format
argument_list|()
operator|.
name|border
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|html_userState
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_userState
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<p style=\"-qt-user-state:42;\">A</p><p style=\"-qt-user-state:0;\">B</p><p>C</p>"
decl_stmt|;
name|cursor
operator|.
name|insertFragment
argument_list|(
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QTextBlock
name|block
init|=
name|doc
operator|->
name|begin
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|userState
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|next
argument_list|()
operator|.
name|userState
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|next
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|userState
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_rootFrameProperties
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_rootFrameProperties
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<table border=1 style=\"-qt-table-type:root; margin-top:10px;\"><tr><td>Foo</tr></td>"
decl_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|rootFrame
argument_list|()
operator|->
name|childFrames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTextFrameFormat
name|fmt
init|=
name|doc
operator|->
name|rootFrame
argument_list|()
operator|->
name|frameFormat
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fmt
operator|.
name|topMargin
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fmt
operator|.
name|bottomMargin
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fmt
operator|.
name|leftMargin
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fmt
operator|.
name|rightMargin
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fmt
operator|.
name|border
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|normalFrameHtml
init|=
name|QLatin1String
argument_list|(
name|html
argument_list|)
decl_stmt|;
name|normalFrameHtml
operator|.
name|replace
argument_list|(
name|QLatin1String
argument_list|(
literal|"root"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"frame"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
name|normalFrameHtml
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|rootFrame
argument_list|()
operator|->
name|childFrames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_appendList
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_appendList
parameter_list|()
block|{
name|appendHtml
argument_list|(
literal|"<p>foo</p>"
argument_list|)
expr_stmt|;
name|appendHtml
argument_list|(
literal|"<ul><li>Line 1</li><li>Line 2</li></ul>"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|textList
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_appendList2
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_appendList2
parameter_list|()
block|{
name|appendHtml
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|appendHtml
argument_list|(
literal|"<ul><li><img src=\"/foo/bar\" /></li></ul>"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|textList
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_alignmentPropertySet
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_alignmentPropertySet
parameter_list|()
block|{
specifier|const
name|char
name|html
index|[]
init|=
literal|"<p>Test</p>"
decl_stmt|;
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|BlockAlignment
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_qt3RichtextWhitespaceMode
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_qt3RichtextWhitespaceMode
parameter_list|()
block|{
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"<html><head><meta name=\"qrichtext\" content=\"1\" /></head><p>   line with whitespace</p><p>    another line with whitespace</p></body></html>"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QTextBlock
name|block
init|=
name|doc
operator|->
name|begin
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|text
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"   "
argument_list|)
argument_list|)
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|text
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"   "
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_brAfterHr
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_brAfterHr
parameter_list|()
block|{
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Text A<br><hr><br>Text B<hr>"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QTextBlock
name|block
init|=
name|doc
operator|->
name|begin
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Text A"
argument_list|)
operator|+
name|QChar
argument_list|(
name|QChar
operator|::
name|LineSeparator
argument_list|)
argument_list|)
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QChar
argument_list|(
name|QChar
operator|::
name|LineSeparator
argument_list|)
operator|+
name|QString
argument_list|(
literal|"Text B"
argument_list|)
argument_list|)
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_unclosedHead
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_unclosedHead
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"<html><head><title>Test</title><body>Blah</body></html>"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|metaInformation
argument_list|(
name|QTextDocument
operator|::
name|DocumentTitle
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Test"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Blah"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// duplicated from qtexthtmlparser.cpp
end_comment
begin_define
DECL|macro|MAX_ENTITY
define|#
directive|define
name|MAX_ENTITY
value|258
end_define
begin_struct
DECL|member|name
DECL|member|code
DECL|variable|entities
specifier|static
specifier|const
struct|struct
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|quint16
name|code
decl_stmt|;
block|}
name|entities
index|[
name|MAX_ENTITY
index|]
init|=
block|{
block|{
literal|"AElig"
block|,
literal|0x00c6
block|}
block|,
block|{
literal|"Aacute"
block|,
literal|0x00c1
block|}
block|,
block|{
literal|"Acirc"
block|,
literal|0x00c2
block|}
block|,
block|{
literal|"Agrave"
block|,
literal|0x00c0
block|}
block|,
block|{
literal|"Alpha"
block|,
literal|0x0391
block|}
block|,
block|{
literal|"AMP"
block|,
literal|38
block|}
block|,
block|{
literal|"Aring"
block|,
literal|0x00c5
block|}
block|,
block|{
literal|"Atilde"
block|,
literal|0x00c3
block|}
block|,
block|{
literal|"Auml"
block|,
literal|0x00c4
block|}
block|,
block|{
literal|"Beta"
block|,
literal|0x0392
block|}
block|,
block|{
literal|"Ccedil"
block|,
literal|0x00c7
block|}
block|,
block|{
literal|"Chi"
block|,
literal|0x03a7
block|}
block|,
block|{
literal|"Dagger"
block|,
literal|0x2021
block|}
block|,
block|{
literal|"Delta"
block|,
literal|0x0394
block|}
block|,
block|{
literal|"ETH"
block|,
literal|0x00d0
block|}
block|,
block|{
literal|"Eacute"
block|,
literal|0x00c9
block|}
block|,
block|{
literal|"Ecirc"
block|,
literal|0x00ca
block|}
block|,
block|{
literal|"Egrave"
block|,
literal|0x00c8
block|}
block|,
block|{
literal|"Epsilon"
block|,
literal|0x0395
block|}
block|,
block|{
literal|"Eta"
block|,
literal|0x0397
block|}
block|,
block|{
literal|"Euml"
block|,
literal|0x00cb
block|}
block|,
block|{
literal|"Gamma"
block|,
literal|0x0393
block|}
block|,
block|{
literal|"GT"
block|,
literal|62
block|}
block|,
block|{
literal|"Iacute"
block|,
literal|0x00cd
block|}
block|,
block|{
literal|"Icirc"
block|,
literal|0x00ce
block|}
block|,
block|{
literal|"Igrave"
block|,
literal|0x00cc
block|}
block|,
block|{
literal|"Iota"
block|,
literal|0x0399
block|}
block|,
block|{
literal|"Iuml"
block|,
literal|0x00cf
block|}
block|,
block|{
literal|"Kappa"
block|,
literal|0x039a
block|}
block|,
block|{
literal|"Lambda"
block|,
literal|0x039b
block|}
block|,
block|{
literal|"LT"
block|,
literal|60
block|}
block|,
block|{
literal|"Mu"
block|,
literal|0x039c
block|}
block|,
block|{
literal|"Ntilde"
block|,
literal|0x00d1
block|}
block|,
block|{
literal|"Nu"
block|,
literal|0x039d
block|}
block|,
block|{
literal|"OElig"
block|,
literal|0x0152
block|}
block|,
block|{
literal|"Oacute"
block|,
literal|0x00d3
block|}
block|,
block|{
literal|"Ocirc"
block|,
literal|0x00d4
block|}
block|,
block|{
literal|"Ograve"
block|,
literal|0x00d2
block|}
block|,
block|{
literal|"Omega"
block|,
literal|0x03a9
block|}
block|,
block|{
literal|"Omicron"
block|,
literal|0x039f
block|}
block|,
block|{
literal|"Oslash"
block|,
literal|0x00d8
block|}
block|,
block|{
literal|"Otilde"
block|,
literal|0x00d5
block|}
block|,
block|{
literal|"Ouml"
block|,
literal|0x00d6
block|}
block|,
block|{
literal|"Phi"
block|,
literal|0x03a6
block|}
block|,
block|{
literal|"Pi"
block|,
literal|0x03a0
block|}
block|,
block|{
literal|"Prime"
block|,
literal|0x2033
block|}
block|,
block|{
literal|"Psi"
block|,
literal|0x03a8
block|}
block|,
block|{
literal|"QUOT"
block|,
literal|34
block|}
block|,
block|{
literal|"Rho"
block|,
literal|0x03a1
block|}
block|,
block|{
literal|"Scaron"
block|,
literal|0x0160
block|}
block|,
block|{
literal|"Sigma"
block|,
literal|0x03a3
block|}
block|,
block|{
literal|"THORN"
block|,
literal|0x00de
block|}
block|,
block|{
literal|"Tau"
block|,
literal|0x03a4
block|}
block|,
block|{
literal|"Theta"
block|,
literal|0x0398
block|}
block|,
block|{
literal|"Uacute"
block|,
literal|0x00da
block|}
block|,
block|{
literal|"Ucirc"
block|,
literal|0x00db
block|}
block|,
block|{
literal|"Ugrave"
block|,
literal|0x00d9
block|}
block|,
block|{
literal|"Upsilon"
block|,
literal|0x03a5
block|}
block|,
block|{
literal|"Uuml"
block|,
literal|0x00dc
block|}
block|,
block|{
literal|"Xi"
block|,
literal|0x039e
block|}
block|,
block|{
literal|"Yacute"
block|,
literal|0x00dd
block|}
block|,
block|{
literal|"Yuml"
block|,
literal|0x0178
block|}
block|,
block|{
literal|"Zeta"
block|,
literal|0x0396
block|}
block|,
block|{
literal|"aacute"
block|,
literal|0x00e1
block|}
block|,
block|{
literal|"acirc"
block|,
literal|0x00e2
block|}
block|,
block|{
literal|"acute"
block|,
literal|0x00b4
block|}
block|,
block|{
literal|"aelig"
block|,
literal|0x00e6
block|}
block|,
block|{
literal|"agrave"
block|,
literal|0x00e0
block|}
block|,
block|{
literal|"alefsym"
block|,
literal|0x2135
block|}
block|,
block|{
literal|"alpha"
block|,
literal|0x03b1
block|}
block|,
block|{
literal|"amp"
block|,
literal|38
block|}
block|,
block|{
literal|"and"
block|,
literal|0x22a5
block|}
block|,
block|{
literal|"ang"
block|,
literal|0x2220
block|}
block|,
block|{
literal|"apos"
block|,
literal|0x0027
block|}
block|,
block|{
literal|"aring"
block|,
literal|0x00e5
block|}
block|,
block|{
literal|"asymp"
block|,
literal|0x2248
block|}
block|,
block|{
literal|"atilde"
block|,
literal|0x00e3
block|}
block|,
block|{
literal|"auml"
block|,
literal|0x00e4
block|}
block|,
block|{
literal|"bdquo"
block|,
literal|0x201e
block|}
block|,
block|{
literal|"beta"
block|,
literal|0x03b2
block|}
block|,
block|{
literal|"brvbar"
block|,
literal|0x00a6
block|}
block|,
block|{
literal|"bull"
block|,
literal|0x2022
block|}
block|,
block|{
literal|"cap"
block|,
literal|0x2229
block|}
block|,
block|{
literal|"ccedil"
block|,
literal|0x00e7
block|}
block|,
block|{
literal|"cedil"
block|,
literal|0x00b8
block|}
block|,
block|{
literal|"cent"
block|,
literal|0x00a2
block|}
block|,
block|{
literal|"chi"
block|,
literal|0x03c7
block|}
block|,
block|{
literal|"circ"
block|,
literal|0x02c6
block|}
block|,
block|{
literal|"clubs"
block|,
literal|0x2663
block|}
block|,
block|{
literal|"cong"
block|,
literal|0x2245
block|}
block|,
block|{
literal|"copy"
block|,
literal|0x00a9
block|}
block|,
block|{
literal|"crarr"
block|,
literal|0x21b5
block|}
block|,
block|{
literal|"cup"
block|,
literal|0x222a
block|}
block|,
block|{
literal|"curren"
block|,
literal|0x00a4
block|}
block|,
block|{
literal|"dArr"
block|,
literal|0x21d3
block|}
block|,
block|{
literal|"dagger"
block|,
literal|0x2020
block|}
block|,
block|{
literal|"darr"
block|,
literal|0x2193
block|}
block|,
block|{
literal|"deg"
block|,
literal|0x00b0
block|}
block|,
block|{
literal|"delta"
block|,
literal|0x03b4
block|}
block|,
block|{
literal|"diams"
block|,
literal|0x2666
block|}
block|,
block|{
literal|"divide"
block|,
literal|0x00f7
block|}
block|,
block|{
literal|"eacute"
block|,
literal|0x00e9
block|}
block|,
block|{
literal|"ecirc"
block|,
literal|0x00ea
block|}
block|,
block|{
literal|"egrave"
block|,
literal|0x00e8
block|}
block|,
block|{
literal|"empty"
block|,
literal|0x2205
block|}
block|,
block|{
literal|"emsp"
block|,
literal|0x2003
block|}
block|,
block|{
literal|"ensp"
block|,
literal|0x2002
block|}
block|,
block|{
literal|"epsilon"
block|,
literal|0x03b5
block|}
block|,
block|{
literal|"equiv"
block|,
literal|0x2261
block|}
block|,
block|{
literal|"eta"
block|,
literal|0x03b7
block|}
block|,
block|{
literal|"eth"
block|,
literal|0x00f0
block|}
block|,
block|{
literal|"euml"
block|,
literal|0x00eb
block|}
block|,
block|{
literal|"euro"
block|,
literal|0x20ac
block|}
block|,
block|{
literal|"exist"
block|,
literal|0x2203
block|}
block|,
block|{
literal|"fnof"
block|,
literal|0x0192
block|}
block|,
block|{
literal|"forall"
block|,
literal|0x2200
block|}
block|,
block|{
literal|"frac12"
block|,
literal|0x00bd
block|}
block|,
block|{
literal|"frac14"
block|,
literal|0x00bc
block|}
block|,
block|{
literal|"frac34"
block|,
literal|0x00be
block|}
block|,
block|{
literal|"frasl"
block|,
literal|0x2044
block|}
block|,
block|{
literal|"gamma"
block|,
literal|0x03b3
block|}
block|,
block|{
literal|"ge"
block|,
literal|0x2265
block|}
block|,
block|{
literal|"gt"
block|,
literal|62
block|}
block|,
block|{
literal|"hArr"
block|,
literal|0x21d4
block|}
block|,
block|{
literal|"harr"
block|,
literal|0x2194
block|}
block|,
block|{
literal|"hearts"
block|,
literal|0x2665
block|}
block|,
block|{
literal|"hellip"
block|,
literal|0x2026
block|}
block|,
block|{
literal|"iacute"
block|,
literal|0x00ed
block|}
block|,
block|{
literal|"icirc"
block|,
literal|0x00ee
block|}
block|,
block|{
literal|"iexcl"
block|,
literal|0x00a1
block|}
block|,
block|{
literal|"igrave"
block|,
literal|0x00ec
block|}
block|,
block|{
literal|"image"
block|,
literal|0x2111
block|}
block|,
block|{
literal|"infin"
block|,
literal|0x221e
block|}
block|,
block|{
literal|"int"
block|,
literal|0x222b
block|}
block|,
block|{
literal|"iota"
block|,
literal|0x03b9
block|}
block|,
block|{
literal|"iquest"
block|,
literal|0x00bf
block|}
block|,
block|{
literal|"isin"
block|,
literal|0x2208
block|}
block|,
block|{
literal|"iuml"
block|,
literal|0x00ef
block|}
block|,
block|{
literal|"kappa"
block|,
literal|0x03ba
block|}
block|,
block|{
literal|"lArr"
block|,
literal|0x21d0
block|}
block|,
block|{
literal|"lambda"
block|,
literal|0x03bb
block|}
block|,
block|{
literal|"lang"
block|,
literal|0x2329
block|}
block|,
block|{
literal|"laquo"
block|,
literal|0x00ab
block|}
block|,
block|{
literal|"larr"
block|,
literal|0x2190
block|}
block|,
block|{
literal|"lceil"
block|,
literal|0x2308
block|}
block|,
block|{
literal|"ldquo"
block|,
literal|0x201c
block|}
block|,
block|{
literal|"le"
block|,
literal|0x2264
block|}
block|,
block|{
literal|"lfloor"
block|,
literal|0x230a
block|}
block|,
block|{
literal|"lowast"
block|,
literal|0x2217
block|}
block|,
block|{
literal|"loz"
block|,
literal|0x25ca
block|}
block|,
block|{
literal|"lrm"
block|,
literal|0x200e
block|}
block|,
block|{
literal|"lsaquo"
block|,
literal|0x2039
block|}
block|,
block|{
literal|"lsquo"
block|,
literal|0x2018
block|}
block|,
block|{
literal|"lt"
block|,
literal|60
block|}
block|,
block|{
literal|"macr"
block|,
literal|0x00af
block|}
block|,
block|{
literal|"mdash"
block|,
literal|0x2014
block|}
block|,
block|{
literal|"micro"
block|,
literal|0x00b5
block|}
block|,
block|{
literal|"middot"
block|,
literal|0x00b7
block|}
block|,
block|{
literal|"minus"
block|,
literal|0x2212
block|}
block|,
block|{
literal|"mu"
block|,
literal|0x03bc
block|}
block|,
block|{
literal|"nabla"
block|,
literal|0x2207
block|}
block|,
block|{
literal|"nbsp"
block|,
literal|0x00a0
block|}
block|,
block|{
literal|"ndash"
block|,
literal|0x2013
block|}
block|,
block|{
literal|"ne"
block|,
literal|0x2260
block|}
block|,
block|{
literal|"ni"
block|,
literal|0x220b
block|}
block|,
block|{
literal|"not"
block|,
literal|0x00ac
block|}
block|,
block|{
literal|"notin"
block|,
literal|0x2209
block|}
block|,
block|{
literal|"nsub"
block|,
literal|0x2284
block|}
block|,
block|{
literal|"ntilde"
block|,
literal|0x00f1
block|}
block|,
block|{
literal|"nu"
block|,
literal|0x03bd
block|}
block|,
block|{
literal|"oacute"
block|,
literal|0x00f3
block|}
block|,
block|{
literal|"ocirc"
block|,
literal|0x00f4
block|}
block|,
block|{
literal|"oelig"
block|,
literal|0x0153
block|}
block|,
block|{
literal|"ograve"
block|,
literal|0x00f2
block|}
block|,
block|{
literal|"oline"
block|,
literal|0x203e
block|}
block|,
block|{
literal|"omega"
block|,
literal|0x03c9
block|}
block|,
block|{
literal|"omicron"
block|,
literal|0x03bf
block|}
block|,
block|{
literal|"oplus"
block|,
literal|0x2295
block|}
block|,
block|{
literal|"or"
block|,
literal|0x22a6
block|}
block|,
block|{
literal|"ordf"
block|,
literal|0x00aa
block|}
block|,
block|{
literal|"ordm"
block|,
literal|0x00ba
block|}
block|,
block|{
literal|"oslash"
block|,
literal|0x00f8
block|}
block|,
block|{
literal|"otilde"
block|,
literal|0x00f5
block|}
block|,
block|{
literal|"otimes"
block|,
literal|0x2297
block|}
block|,
block|{
literal|"ouml"
block|,
literal|0x00f6
block|}
block|,
block|{
literal|"para"
block|,
literal|0x00b6
block|}
block|,
block|{
literal|"part"
block|,
literal|0x2202
block|}
block|,
block|{
literal|"percnt"
block|,
literal|0x0025
block|}
block|,
block|{
literal|"permil"
block|,
literal|0x2030
block|}
block|,
block|{
literal|"perp"
block|,
literal|0x22a5
block|}
block|,
block|{
literal|"phi"
block|,
literal|0x03c6
block|}
block|,
block|{
literal|"pi"
block|,
literal|0x03c0
block|}
block|,
block|{
literal|"piv"
block|,
literal|0x03d6
block|}
block|,
block|{
literal|"plusmn"
block|,
literal|0x00b1
block|}
block|,
block|{
literal|"pound"
block|,
literal|0x00a3
block|}
block|,
block|{
literal|"prime"
block|,
literal|0x2032
block|}
block|,
block|{
literal|"prod"
block|,
literal|0x220f
block|}
block|,
block|{
literal|"prop"
block|,
literal|0x221d
block|}
block|,
block|{
literal|"psi"
block|,
literal|0x03c8
block|}
block|,
block|{
literal|"quot"
block|,
literal|34
block|}
block|,
block|{
literal|"rArr"
block|,
literal|0x21d2
block|}
block|,
block|{
literal|"radic"
block|,
literal|0x221a
block|}
block|,
block|{
literal|"rang"
block|,
literal|0x232a
block|}
block|,
block|{
literal|"raquo"
block|,
literal|0x00bb
block|}
block|,
block|{
literal|"rarr"
block|,
literal|0x2192
block|}
block|,
block|{
literal|"rceil"
block|,
literal|0x2309
block|}
block|,
block|{
literal|"rdquo"
block|,
literal|0x201d
block|}
block|,
block|{
literal|"real"
block|,
literal|0x211c
block|}
block|,
block|{
literal|"reg"
block|,
literal|0x00ae
block|}
block|,
block|{
literal|"rfloor"
block|,
literal|0x230b
block|}
block|,
block|{
literal|"rho"
block|,
literal|0x03c1
block|}
block|,
block|{
literal|"rlm"
block|,
literal|0x200f
block|}
block|,
block|{
literal|"rsaquo"
block|,
literal|0x203a
block|}
block|,
block|{
literal|"rsquo"
block|,
literal|0x2019
block|}
block|,
block|{
literal|"sbquo"
block|,
literal|0x201a
block|}
block|,
block|{
literal|"scaron"
block|,
literal|0x0161
block|}
block|,
block|{
literal|"sdot"
block|,
literal|0x22c5
block|}
block|,
block|{
literal|"sect"
block|,
literal|0x00a7
block|}
block|,
block|{
literal|"shy"
block|,
literal|0x00ad
block|}
block|,
block|{
literal|"sigma"
block|,
literal|0x03c3
block|}
block|,
block|{
literal|"sigmaf"
block|,
literal|0x03c2
block|}
block|,
block|{
literal|"sim"
block|,
literal|0x223c
block|}
block|,
block|{
literal|"spades"
block|,
literal|0x2660
block|}
block|,
block|{
literal|"sub"
block|,
literal|0x2282
block|}
block|,
block|{
literal|"sube"
block|,
literal|0x2286
block|}
block|,
block|{
literal|"sum"
block|,
literal|0x2211
block|}
block|,
block|{
literal|"sup1"
block|,
literal|0x00b9
block|}
block|,
block|{
literal|"sup2"
block|,
literal|0x00b2
block|}
block|,
block|{
literal|"sup3"
block|,
literal|0x00b3
block|}
block|,
block|{
literal|"sup"
block|,
literal|0x2283
block|}
block|,
block|{
literal|"supe"
block|,
literal|0x2287
block|}
block|,
block|{
literal|"szlig"
block|,
literal|0x00df
block|}
block|,
block|{
literal|"tau"
block|,
literal|0x03c4
block|}
block|,
block|{
literal|"there4"
block|,
literal|0x2234
block|}
block|,
block|{
literal|"theta"
block|,
literal|0x03b8
block|}
block|,
block|{
literal|"thetasym"
block|,
literal|0x03d1
block|}
block|,
block|{
literal|"thinsp"
block|,
literal|0x2009
block|}
block|,
block|{
literal|"thorn"
block|,
literal|0x00fe
block|}
block|,
block|{
literal|"tilde"
block|,
literal|0x02dc
block|}
block|,
block|{
literal|"times"
block|,
literal|0x00d7
block|}
block|,
block|{
literal|"trade"
block|,
literal|0x2122
block|}
block|,
block|{
literal|"uArr"
block|,
literal|0x21d1
block|}
block|,
block|{
literal|"uacute"
block|,
literal|0x00fa
block|}
block|,
block|{
literal|"uarr"
block|,
literal|0x2191
block|}
block|,
block|{
literal|"ucirc"
block|,
literal|0x00fb
block|}
block|,
block|{
literal|"ugrave"
block|,
literal|0x00f9
block|}
block|,
block|{
literal|"uml"
block|,
literal|0x00a8
block|}
block|,
block|{
literal|"upsih"
block|,
literal|0x03d2
block|}
block|,
block|{
literal|"upsilon"
block|,
literal|0x03c5
block|}
block|,
block|{
literal|"uuml"
block|,
literal|0x00fc
block|}
block|,
block|{
literal|"weierp"
block|,
literal|0x2118
block|}
block|,
block|{
literal|"xi"
block|,
literal|0x03be
block|}
block|,
block|{
literal|"yacute"
block|,
literal|0x00fd
block|}
block|,
block|{
literal|"yen"
block|,
literal|0x00a5
block|}
block|,
block|{
literal|"yuml"
block|,
literal|0x00ff
block|}
block|,
block|{
literal|"zeta"
block|,
literal|0x03b6
block|}
block|,
block|{
literal|"zwj"
block|,
literal|0x200d
block|}
block|,
block|{
literal|"zwnj"
block|,
literal|0x200c
block|}
block|}
struct|;
end_struct
begin_function
DECL|function|html_entities_data
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_entities_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"html"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|quint16
argument_list|>
argument_list|(
literal|"code"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_ENTITY
condition|;
operator|++
name|i
control|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
name|entities
index|[
name|i
index|]
operator|.
name|name
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<pre>&"
argument_list|)
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
name|entities
index|[
name|i
index|]
operator|.
name|name
argument_list|)
operator|+
name|QString
argument_list|(
literal|";</pre>"
argument_list|)
operator|<<
name|entities
index|[
name|i
index|]
operator|.
name|code
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|html_entities
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_entities
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|html
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|quint16
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|setHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QString
name|txt
init|=
name|doc
operator|->
name|begin
argument_list|()
operator|.
name|text
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|txt
operator|.
name|length
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|txt
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|unicode
argument_list|()
argument_list|,
name|code
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_ignore_script
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_ignore_script
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"<html><script>Test</script><body>Blah</body></html>"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Blah"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_directionWithHtml
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_directionWithHtml
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"<html><body><p>Test<p dir=rtl>RTL<p dir=ltr>LTR"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QTextBlock
name|block
init|=
name|doc
operator|->
name|firstBlock
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|LayoutDirection
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|layoutDirection
argument_list|()
operator|==
name|Qt
operator|::
name|LeftToRight
argument_list|)
expr_stmt|;
comment|// HTML default
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|LayoutDirection
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|layoutDirection
argument_list|()
operator|==
name|Qt
operator|::
name|RightToLeft
argument_list|)
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|LayoutDirection
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|layoutDirection
argument_list|()
operator|==
name|Qt
operator|::
name|LeftToRight
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_directionWithRichText
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_directionWithRichText
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"<p>Test<p dir=rtl>RTL<p dir=ltr>LTR"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QTextBlock
name|block
init|=
name|doc
operator|->
name|firstBlock
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|LayoutDirection
argument_list|)
argument_list|)
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|LayoutDirection
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|layoutDirection
argument_list|()
operator|==
name|Qt
operator|::
name|RightToLeft
argument_list|)
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|LayoutDirection
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|blockFormat
argument_list|()
operator|.
name|layoutDirection
argument_list|()
operator|==
name|Qt
operator|::
name|LeftToRight
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_metaInBody
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_metaInBody
parameter_list|()
block|{
name|setHtml
argument_list|(
literal|"<body>Hello<meta>World</body>"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"HelloWorld"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_importImageWithoutAspectRatio
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_importImageWithoutAspectRatio
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<img src=\"foo\" width=\"100%\" height=\"43\">"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|isImageFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QTextImageFormat
name|fmt
init|=
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|toImageFormat
argument_list|()
decl_stmt|;
comment|// qDebug()<< fmt.width()<< fmt.height();
name|QVERIFY
argument_list|(
name|fmt
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|ImageWidth
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fmt
operator|.
name|height
argument_list|()
argument_list|,
literal|43.
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<img src=\"foo\" height=\"43\">"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|isImageFormat
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|=
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|toImageFormat
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|fmt
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|ImageWidth
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fmt
operator|.
name|height
argument_list|()
argument_list|,
literal|43.
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setHtml
argument_list|(
literal|"<img src=\"foo\" width=\"200\">"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|isImageFormat
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|=
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|toImageFormat
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|fmt
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|ImageHeight
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fmt
operator|.
name|width
argument_list|()
argument_list|,
literal|200.
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_fromFirefox
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_fromFirefox
parameter_list|()
block|{
comment|// if you have a html loaded in firefox like<html>Test\nText</html>  then selecting all and copying will
comment|// result in the following text on the clipboard (for text/html)
name|doc
operator|->
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"<!--StartFragment-->Test\nText\n\n<!--EndFragment-->"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Test Text "
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|html_emptyInlineInsideBlock
name|void
name|tst_QTextDocumentFragment
operator|::
name|html_emptyInlineInsideBlock
parameter_list|()
block|{
name|doc
operator|->
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"<!--StartFragment--><blockquote><span/>Foobar</blockquote><!--EndFragment-->"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|->
name|firstBlock
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|leftMargin
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QTextDocumentFragment
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qtextdocumentfragment.moc"
end_include
end_unit
