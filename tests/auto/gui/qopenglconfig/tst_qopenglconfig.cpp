begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtGui/QOpenGLFunctions>
end_include
begin_include
include|#
directive|include
file|<QtGui/QScreen>
end_include
begin_include
include|#
directive|include
file|<QtGui/QWindow>
end_include
begin_include
include|#
directive|include
file|<private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformintegration.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformnativeinterface.h>
end_include
begin_include
include|#
directive|include
file|<private/qopengl_p.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtCore/QSysInfo>
end_include
begin_include
include|#
directive|include
file|<QtCore/QLibraryInfo>
end_include
begin_include
include|#
directive|include
file|<QtCore/QScopedPointer>
end_include
begin_include
include|#
directive|include
file|<QtCore/QVariant>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtCore/QTextStream>
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_define
DECL|macro|DUMP_CAPABILITY
define|#
directive|define
name|DUMP_CAPABILITY
parameter_list|(
name|str
parameter_list|,
name|integration
parameter_list|,
name|capability
parameter_list|)
define|\
value|if (platformIntegration->hasCapability(QPlatformIntegration::capability)) \         str<< ' '<< #capability;
end_define
begin_function
DECL|function|operator <<
name|QTextStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QTextStream
modifier|&
name|str
parameter_list|,
specifier|const
name|QSize
modifier|&
name|s
parameter_list|)
block|{
name|str
operator|<<
name|s
operator|.
name|width
argument_list|()
operator|<<
literal|'x'
operator|<<
name|s
operator|.
name|height
argument_list|()
expr_stmt|;
return|return
name|str
return|;
block|}
end_function
begin_function
DECL|function|operator <<
name|QTextStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QTextStream
modifier|&
name|str
parameter_list|,
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
block|{
name|str
operator|<<
name|r
operator|.
name|size
argument_list|()
operator|<<
literal|'+'
operator|<<
name|r
operator|.
name|x
argument_list|()
operator|<<
literal|'+'
operator|<<
name|r
operator|.
name|y
argument_list|()
expr_stmt|;
return|return
name|str
return|;
block|}
end_function
begin_function
DECL|function|operator <<
name|QTextStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QTextStream
modifier|&
name|str
parameter_list|,
specifier|const
name|QSizeF
modifier|&
name|s
parameter_list|)
block|{
name|str
operator|<<
name|s
operator|.
name|width
argument_list|()
operator|<<
literal|'x'
operator|<<
name|s
operator|.
name|height
argument_list|()
expr_stmt|;
return|return
name|str
return|;
block|}
end_function
begin_function
DECL|function|operator <<
name|QTextStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QTextStream
modifier|&
name|str
parameter_list|,
specifier|const
name|QSurfaceFormat
modifier|&
name|format
parameter_list|)
block|{
name|str
operator|<<
literal|"Version: "
operator|<<
name|format
operator|.
name|majorVersion
argument_list|()
operator|<<
literal|'.'
operator|<<
name|format
operator|.
name|minorVersion
argument_list|()
operator|<<
literal|" Profile: "
operator|<<
name|format
operator|.
name|profile
argument_list|()
operator|<<
literal|" Swap behavior: "
operator|<<
name|format
operator|.
name|swapBehavior
argument_list|()
operator|<<
literal|" Buffer size (RGB"
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|hasAlpha
argument_list|()
condition|)
name|str
operator|<<
literal|'A'
expr_stmt|;
name|str
operator|<<
literal|"): "
operator|<<
name|format
operator|.
name|redBufferSize
argument_list|()
operator|<<
literal|','
operator|<<
name|format
operator|.
name|greenBufferSize
argument_list|()
operator|<<
literal|','
operator|<<
name|format
operator|.
name|blueBufferSize
argument_list|()
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|hasAlpha
argument_list|()
condition|)
name|str
operator|<<
literal|','
operator|<<
name|format
operator|.
name|alphaBufferSize
argument_list|()
expr_stmt|;
if|if
condition|(
specifier|const
name|int
name|dbs
init|=
name|format
operator|.
name|depthBufferSize
argument_list|()
condition|)
name|str
operator|<<
literal|" Depth buffer: "
operator|<<
name|dbs
expr_stmt|;
if|if
condition|(
specifier|const
name|int
name|sbs
init|=
name|format
operator|.
name|stencilBufferSize
argument_list|()
condition|)
name|str
operator|<<
literal|" Stencil buffer: "
operator|<<
name|sbs
expr_stmt|;
specifier|const
name|int
name|samples
init|=
name|format
operator|.
name|samples
argument_list|()
decl_stmt|;
if|if
condition|(
name|samples
operator|>
literal|0
condition|)
name|str
operator|<<
literal|" Samples: "
operator|<<
name|samples
expr_stmt|;
return|return
name|str
return|;
block|}
end_function
begin_comment
comment|/* This test contains code from the qtdiag tool. Its purpose is to output the  * graphics configuration to the CI log and to verify that Open GL can be  * initialized for platforms on which the qopengl test is marked as  * insignificant. */
end_comment
begin_class
DECL|class|tst_QOpenGlConfig
class|class
name|tst_QOpenGlConfig
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|testConfiguration
parameter_list|()
function_decl|;
name|void
name|testGlConfiguration
parameter_list|()
function_decl|;
name|void
name|testBugList
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|dumpConfiguration
specifier|static
name|void
name|dumpConfiguration
parameter_list|(
name|QTextStream
modifier|&
name|str
parameter_list|)
block|{
specifier|const
name|QPlatformIntegration
modifier|*
name|platformIntegration
init|=
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
decl_stmt|;
name|str
operator|<<
literal|"\nBuild        : "
operator|<<
name|QLibraryInfo
operator|::
name|build
argument_list|()
operator|<<
literal|"\nPlatform     : "
operator|<<
name|QGuiApplication
operator|::
name|platformName
argument_list|()
operator|<<
literal|"\nOS           : "
operator|<<
name|QSysInfo
operator|::
name|prettyProductName
argument_list|()
operator|<<
literal|" ["
operator|<<
name|QSysInfo
operator|::
name|kernelType
argument_list|()
operator|<<
literal|" version "
operator|<<
name|QSysInfo
operator|::
name|kernelVersion
argument_list|()
operator|<<
literal|']'
operator|<<
literal|"\nArchitecture : "
operator|<<
name|QSysInfo
operator|::
name|currentCpuArchitecture
argument_list|()
operator|<<
literal|"\nCapabilities :"
expr_stmt|;
name|DUMP_CAPABILITY
argument_list|(
argument|str
argument_list|,
argument|platformIntegration
argument_list|,
argument|ThreadedPixmaps
argument_list|)
name|DUMP_CAPABILITY
argument_list|(
argument|str
argument_list|,
argument|platformIntegration
argument_list|,
argument|OpenGL
argument_list|)
name|DUMP_CAPABILITY
argument_list|(
argument|str
argument_list|,
argument|platformIntegration
argument_list|,
argument|ThreadedOpenGL
argument_list|)
name|DUMP_CAPABILITY
argument_list|(
argument|str
argument_list|,
argument|platformIntegration
argument_list|,
argument|SharedGraphicsCache
argument_list|)
name|DUMP_CAPABILITY
argument_list|(
argument|str
argument_list|,
argument|platformIntegration
argument_list|,
argument|BufferQueueingOpenGL
argument_list|)
name|DUMP_CAPABILITY
argument_list|(
argument|str
argument_list|,
argument|platformIntegration
argument_list|,
argument|WindowMasks
argument_list|)
name|DUMP_CAPABILITY
argument_list|(
argument|str
argument_list|,
argument|platformIntegration
argument_list|,
argument|RasterGLSurface
argument_list|)
name|DUMP_CAPABILITY
argument_list|(
argument|str
argument_list|,
argument|platformIntegration
argument_list|,
argument|AllGLFunctionsQueryable
argument_list|)
name|str
operator|<<
literal|'\n'
expr_stmt|;
specifier|const
name|QList
argument_list|<
name|QScreen
modifier|*
argument_list|>
name|screens
init|=
name|QGuiApplication
operator|::
name|screens
argument_list|()
decl_stmt|;
specifier|const
name|int
name|screenCount
init|=
name|screens
operator|.
name|size
argument_list|()
decl_stmt|;
name|str
operator|<<
literal|"\nScreens: "
operator|<<
name|screenCount
operator|<<
literal|'\n'
expr_stmt|;
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
name|screenCount
condition|;
operator|++
name|s
control|)
block|{
specifier|const
name|QScreen
modifier|*
name|screen
init|=
name|screens
operator|.
name|at
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|str
operator|<<
literal|'#'
operator|<<
literal|' '
operator|<<
name|s
operator|<<
literal|" \""
operator|<<
name|screen
operator|->
name|name
argument_list|()
operator|<<
literal|'"'
operator|<<
literal|" Depth: "
operator|<<
name|screen
operator|->
name|depth
argument_list|()
operator|<<
literal|" Primary: "
operator|<<
operator|(
name|screen
operator|==
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
condition|?
literal|"yes"
else|:
literal|"no"
operator|)
operator|<<
literal|"\n  Geometry: "
operator|<<
name|screen
operator|->
name|geometry
argument_list|()
operator|<<
literal|" Available: "
operator|<<
name|screen
operator|->
name|availableGeometry
argument_list|()
expr_stmt|;
if|if
condition|(
name|screen
operator|->
name|geometry
argument_list|()
operator|!=
name|screen
operator|->
name|virtualGeometry
argument_list|()
condition|)
name|str
operator|<<
literal|"\n  Virtual geometry: "
operator|<<
name|screen
operator|->
name|virtualGeometry
argument_list|()
operator|<<
literal|" Available: "
operator|<<
name|screen
operator|->
name|availableVirtualGeometry
argument_list|()
expr_stmt|;
if|if
condition|(
name|screen
operator|->
name|virtualSiblings
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
name|str
operator|<<
literal|"\n  "
operator|<<
name|screen
operator|->
name|virtualSiblings
argument_list|()
operator|.
name|size
argument_list|()
operator|<<
literal|" virtual siblings"
expr_stmt|;
name|str
operator|<<
literal|"\n  Physical size: "
operator|<<
name|screen
operator|->
name|physicalSize
argument_list|()
operator|<<
literal|" mm"
operator|<<
literal|"  Refresh: "
operator|<<
name|screen
operator|->
name|refreshRate
argument_list|()
operator|<<
literal|" Hz"
operator|<<
literal|"\n  Physical DPI: "
operator|<<
name|screen
operator|->
name|physicalDotsPerInchX
argument_list|()
operator|<<
literal|','
operator|<<
name|screen
operator|->
name|physicalDotsPerInchY
argument_list|()
operator|<<
literal|" Logical DPI: "
operator|<<
name|screen
operator|->
name|logicalDotsPerInchX
argument_list|()
operator|<<
literal|','
operator|<<
name|screen
operator|->
name|logicalDotsPerInchY
argument_list|()
operator|<<
literal|"\n  DevicePixelRatio: "
operator|<<
name|screen
operator|->
name|devicePixelRatio
argument_list|()
operator|<<
literal|" Primary orientation: "
operator|<<
name|screen
operator|->
name|primaryOrientation
argument_list|()
operator|<<
literal|"\n  Orientation: "
operator|<<
name|screen
operator|->
name|orientation
argument_list|()
operator|<<
literal|" Native orientation: "
operator|<<
name|screen
operator|->
name|nativeOrientation
argument_list|()
operator|<<
literal|" OrientationUpdateMask: "
operator|<<
name|screen
operator|->
name|orientationUpdateMask
argument_list|()
operator|<<
literal|'\n'
expr_stmt|;
block|}
comment|// On Windows, this will provide addition GPU info similar to the output of dxdiag.
specifier|const
name|QVariant
name|gpuInfoV
init|=
name|QGuiApplication
operator|::
name|platformNativeInterface
argument_list|()
operator|->
name|property
argument_list|(
literal|"gpu"
argument_list|)
decl_stmt|;
if|if
condition|(
name|gpuInfoV
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Map
condition|)
block|{
specifier|const
name|QString
name|description
init|=
name|gpuInfoV
operator|.
name|toMap
argument_list|()
operator|.
name|value
argument_list|(
name|QStringLiteral
argument_list|(
literal|"printable"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|description
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|<<
literal|"\nGPU:\n"
operator|<<
name|description
operator|<<
literal|"\n\n"
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|testConfiguration
name|void
name|tst_QOpenGlConfig
operator|::
name|testConfiguration
parameter_list|()
block|{
name|QString
name|result
decl_stmt|;
name|QTextStream
name|str
argument_list|(
operator|&
name|result
argument_list|)
decl_stmt|;
name|dumpConfiguration
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|.
name|noquote
argument_list|()
operator|<<
literal|'\n'
operator|<<
name|result
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dumpGlConfiguration
specifier|static
name|void
name|dumpGlConfiguration
parameter_list|(
name|QOpenGLContext
modifier|&
name|context
parameter_list|,
name|QTextStream
modifier|&
name|str
parameter_list|)
block|{
name|str
operator|<<
literal|"Type             : "
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_DYNAMIC
name|str
operator|<<
literal|"Dynamic GL "
expr_stmt|;
endif|#
directive|endif
switch|switch
condition|(
name|context
operator|.
name|openGLModuleType
argument_list|()
condition|)
block|{
case|case
name|QOpenGLContext
operator|::
name|LibGL
case|:
name|str
operator|<<
literal|"LibGL"
expr_stmt|;
break|break;
case|case
name|QOpenGLContext
operator|::
name|LibGLES
case|:
name|str
operator|<<
literal|"LibGLES"
expr_stmt|;
break|break;
block|}
name|QOpenGLFunctions
name|functions
argument_list|(
operator|&
name|context
argument_list|)
decl_stmt|;
name|str
operator|<<
literal|"\nVendor           : "
operator|<<
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|functions
operator|.
name|glGetString
argument_list|(
name|GL_VENDOR
argument_list|)
argument_list|)
operator|<<
literal|"\nRenderer         : "
operator|<<
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|functions
operator|.
name|glGetString
argument_list|(
name|GL_RENDERER
argument_list|)
argument_list|)
operator|<<
literal|"\nVersion          : "
operator|<<
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|functions
operator|.
name|glGetString
argument_list|(
name|GL_VERSION
argument_list|)
argument_list|)
operator|<<
literal|"\nShading language : "
operator|<<
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|functions
operator|.
name|glGetString
argument_list|(
name|GL_SHADING_LANGUAGE_VERSION
argument_list|)
argument_list|)
operator|<<
literal|"\nFormat           : "
operator|<<
name|context
operator|.
name|format
argument_list|()
expr_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|extensionList
init|=
name|context
operator|.
name|extensions
argument_list|()
operator|.
name|toList
argument_list|()
decl_stmt|;
name|std
operator|::
name|sort
argument_list|(
name|extensionList
operator|.
name|begin
argument_list|()
argument_list|,
name|extensionList
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|int
name|extensionCount
init|=
name|extensionList
operator|.
name|size
argument_list|()
decl_stmt|;
name|str
operator|<<
literal|"\n\nFound "
operator|<<
name|extensionCount
operator|<<
literal|" extensions:\n"
expr_stmt|;
for|for
control|(
name|int
name|e
init|=
literal|0
init|;
name|e
operator|<
name|extensionCount
condition|;
operator|++
name|e
control|)
name|str
operator|<<
operator|(
operator|(
name|e
operator|%
literal|4
operator|)
condition|?
literal|' '
else|:
literal|'\n'
operator|)
operator|<<
name|extensionList
operator|.
name|at
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testGlConfiguration
name|void
name|tst_QOpenGlConfig
operator|::
name|testGlConfiguration
parameter_list|()
block|{
name|QString
name|result
decl_stmt|;
name|QTextStream
name|str
argument_list|(
operator|&
name|result
argument_list|)
decl_stmt|;
name|QWindow
name|window
decl_stmt|;
name|window
operator|.
name|setSurfaceType
argument_list|(
name|QSurface
operator|::
name|OpenGLSurface
argument_list|)
expr_stmt|;
name|window
operator|.
name|create
argument_list|()
expr_stmt|;
name|QOpenGLContext
name|context
decl_stmt|;
name|QVERIFY
argument_list|(
name|context
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|context
operator|.
name|makeCurrent
argument_list|(
operator|&
name|window
argument_list|)
argument_list|)
expr_stmt|;
name|dumpGlConfiguration
argument_list|(
name|context
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|context
operator|.
name|doneCurrent
argument_list|()
expr_stmt|;
name|qDebug
argument_list|()
operator|.
name|noquote
argument_list|()
operator|<<
literal|'\n'
operator|<<
name|result
expr_stmt|;
comment|// fromContext either uses the current context or creates a temporary dummy one.
name|QOpenGLConfig
operator|::
name|Gpu
name|gpu
init|=
name|QOpenGLConfig
operator|::
name|Gpu
operator|::
name|fromContext
argument_list|()
decl_stmt|;
name|qDebug
argument_list|()
operator|.
name|noquote
argument_list|()
operator|<<
literal|'\n'
operator|<<
literal|"GL_VENDOR queried by QOpenGLConfig::Gpu:"
operator|<<
name|gpu
operator|.
name|glVendor
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|gpu
operator|.
name|glVendor
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|msgSetMismatch
specifier|static
specifier|inline
name|QByteArray
name|msgSetMismatch
parameter_list|(
specifier|const
name|QSet
argument_list|<
name|QString
argument_list|>
modifier|&
name|expected
parameter_list|,
specifier|const
name|QSet
argument_list|<
name|QString
argument_list|>
modifier|&
name|actual
parameter_list|)
block|{
specifier|const
name|QString
name|result
init|=
name|QStringList
argument_list|(
name|expected
operator|.
name|toList
argument_list|()
argument_list|)
operator|.
name|join
argument_list|(
name|QLatin1Char
argument_list|(
literal|','
argument_list|)
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|" != "
argument_list|)
operator|+
name|QStringList
argument_list|(
name|actual
operator|.
name|toList
argument_list|()
argument_list|)
operator|.
name|join
argument_list|(
name|QLatin1Char
argument_list|(
literal|','
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|result
operator|.
name|toLatin1
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|testBugList
name|void
name|tst_QOpenGlConfig
operator|::
name|testBugList
parameter_list|()
block|{
comment|// Check bug list parsing for some arbitrary NVidia card
comment|// faking Windows OS.
specifier|const
name|QString
name|fileName
init|=
name|QFINDTESTDATA
argument_list|(
literal|"buglist.json"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|fileName
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|expectedFeatures
decl_stmt|;
name|expectedFeatures
operator|<<
literal|"feature1"
expr_stmt|;
comment|// adapter info
name|QVersionNumber
name|driverVersion
argument_list|(
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|9
operator|<<
literal|18
operator|<<
literal|13
operator|<<
literal|4460
argument_list|)
decl_stmt|;
name|QOpenGLConfig
operator|::
name|Gpu
name|gpu
init|=
name|QOpenGLConfig
operator|::
name|Gpu
operator|::
name|fromDevice
argument_list|(
literal|0x10DE
argument_list|,
literal|0x0DE9
argument_list|,
name|driverVersion
argument_list|,
name|QByteArrayLiteral
argument_list|(
literal|"Unknown"
argument_list|)
argument_list|)
decl_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|actualFeatures
init|=
name|QOpenGLConfig
operator|::
name|gpuFeatures
argument_list|(
name|gpu
argument_list|,
name|QStringLiteral
argument_list|(
literal|"win"
argument_list|)
argument_list|,
name|QVersionNumber
argument_list|(
literal|6
argument_list|,
literal|3
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"7"
argument_list|)
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|expectedFeatures
operator|==
name|actualFeatures
argument_list|,
name|msgSetMismatch
argument_list|(
name|expectedFeatures
argument_list|,
name|actualFeatures
argument_list|)
argument_list|)
expr_stmt|;
comment|// driver_description
name|gpu
operator|=
name|QOpenGLConfig
operator|::
name|Gpu
operator|::
name|fromDevice
argument_list|(
literal|0xDEAD
argument_list|,
literal|0xBEEF
argument_list|,
name|driverVersion
argument_list|,
name|QByteArrayLiteral
argument_list|(
literal|"Very Long And Special Driver Description"
argument_list|)
argument_list|)
expr_stmt|;
name|actualFeatures
operator|=
name|QOpenGLConfig
operator|::
name|gpuFeatures
argument_list|(
name|gpu
argument_list|,
name|QStringLiteral
argument_list|(
literal|"win"
argument_list|)
argument_list|,
name|QVersionNumber
argument_list|(
literal|6
argument_list|,
literal|3
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"8"
argument_list|)
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|expectedFeatures
operator|=
name|QSet
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"feature2"
expr_stmt|;
name|QVERIFY2
argument_list|(
name|expectedFeatures
operator|==
name|actualFeatures
argument_list|,
name|msgSetMismatch
argument_list|(
name|expectedFeatures
argument_list|,
name|actualFeatures
argument_list|)
argument_list|)
expr_stmt|;
comment|// os.release
name|gpu
operator|=
name|QOpenGLConfig
operator|::
name|Gpu
operator|::
name|fromDevice
argument_list|(
literal|0xDEAD
argument_list|,
literal|0xBEEF
argument_list|,
name|driverVersion
argument_list|,
name|QByteArrayLiteral
argument_list|(
literal|"WinVerTest"
argument_list|)
argument_list|)
expr_stmt|;
name|actualFeatures
operator|=
name|QOpenGLConfig
operator|::
name|gpuFeatures
argument_list|(
name|gpu
argument_list|,
name|QStringLiteral
argument_list|(
literal|"win"
argument_list|)
argument_list|,
name|QVersionNumber
argument_list|(
literal|12
argument_list|,
literal|34
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"10"
argument_list|)
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|expectedFeatures
operator|=
name|QSet
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"win10_feature"
expr_stmt|;
name|QVERIFY2
argument_list|(
name|expectedFeatures
operator|==
name|actualFeatures
argument_list|,
name|msgSetMismatch
argument_list|(
name|expectedFeatures
argument_list|,
name|actualFeatures
argument_list|)
argument_list|)
expr_stmt|;
comment|// gl_vendor
name|gpu
operator|=
name|QOpenGLConfig
operator|::
name|Gpu
operator|::
name|fromGLVendor
argument_list|(
name|QByteArrayLiteral
argument_list|(
literal|"Somebody Else"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedFeatures
operator|.
name|clear
argument_list|()
expr_stmt|;
name|actualFeatures
operator|=
name|QOpenGLConfig
operator|::
name|gpuFeatures
argument_list|(
name|gpu
argument_list|,
name|QStringLiteral
argument_list|(
literal|"linux"
argument_list|)
argument_list|,
name|QVersionNumber
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|expectedFeatures
operator|==
name|actualFeatures
argument_list|,
name|msgSetMismatch
argument_list|(
name|expectedFeatures
argument_list|,
name|actualFeatures
argument_list|)
argument_list|)
expr_stmt|;
name|gpu
operator|=
name|QOpenGLConfig
operator|::
name|Gpu
operator|::
name|fromGLVendor
argument_list|(
name|QByteArrayLiteral
argument_list|(
literal|"The Qt Company"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedFeatures
operator|=
name|QSet
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"cool_feature"
expr_stmt|;
name|actualFeatures
operator|=
name|QOpenGLConfig
operator|::
name|gpuFeatures
argument_list|(
name|gpu
argument_list|,
name|QStringLiteral
argument_list|(
literal|"linux"
argument_list|)
argument_list|,
name|QVersionNumber
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|expectedFeatures
operator|==
name|actualFeatures
argument_list|,
name|msgSetMismatch
argument_list|(
name|expectedFeatures
argument_list|,
name|actualFeatures
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QOpenGlConfig
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qopenglconfig.moc"
end_include
end_unit
