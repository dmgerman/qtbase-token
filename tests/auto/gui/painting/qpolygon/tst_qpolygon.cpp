begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qpolygon.h>
end_include
begin_include
include|#
directive|include
file|<qpainterpath.h>
end_include
begin_include
include|#
directive|include
file|<math.h>
end_include
begin_include
include|#
directive|include
file|<qpainter.h>
end_include
begin_class
DECL|class|tst_QPolygon
class|class
name|tst_QPolygon
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QPolygon
parameter_list|()
constructor_decl|;
private|private
name|slots
private|:
name|void
name|makeEllipse
parameter_list|()
function_decl|;
name|void
name|swap
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QPolygon
name|tst_QPolygon
operator|::
name|tst_QPolygon
parameter_list|()
block|{ }
end_constructor
begin_function
DECL|function|makeEllipse
name|void
name|tst_QPolygon
operator|::
name|makeEllipse
parameter_list|()
block|{
comment|// create an ellipse with R1 = R2 = R, i.e. a circle
name|QPolygon
name|pa
decl_stmt|;
specifier|const
name|int
name|R
init|=
literal|50
decl_stmt|;
comment|// radius
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|addEllipse
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
operator|*
name|R
argument_list|,
literal|2
operator|*
name|R
argument_list|)
expr_stmt|;
name|pa
operator|=
name|path
operator|.
name|toSubpathPolygons
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toPolygon
argument_list|()
expr_stmt|;
name|int
name|i
decl_stmt|;
comment|// make sure that all points are R+-1 away from the center
name|bool
name|err
init|=
literal|false
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|1
init|;
name|i
operator|<
name|pa
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QPoint
name|p
init|=
name|pa
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|double
name|r
init|=
name|sqrt
argument_list|(
name|pow
argument_list|(
name|double
argument_list|(
name|p
operator|.
name|x
argument_list|()
operator|-
name|R
argument_list|)
argument_list|,
literal|2.0
argument_list|)
operator|+
name|pow
argument_list|(
name|double
argument_list|(
name|p
operator|.
name|y
argument_list|()
operator|-
name|R
argument_list|)
argument_list|,
literal|2.0
argument_list|)
argument_list|)
decl_stmt|;
comment|// ### too strict ? at least from visual inspection it looks
comment|// quite odd around the main axes. 2.0 passes easily.
name|err
operator||=
operator|(
name|qAbs
argument_list|(
name|r
operator|-
name|double
argument_list|(
name|R
argument_list|)
argument_list|)
operator|>
literal|2.0
operator|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|err
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|swap
name|void
name|tst_QPolygon
operator|::
name|swap
parameter_list|()
block|{
name|QPolygon
name|p1
argument_list|(
name|QVector
argument_list|<
name|QPoint
argument_list|>
argument_list|()
operator|<<
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|<<
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
operator|<<
name|QPoint
argument_list|(
operator|-
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|QPolygon
name|p2
argument_list|(
name|QVector
argument_list|<
name|QPoint
argument_list|>
argument_list|()
operator|<<
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|<<
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
operator|<<
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
operator|<<
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|p1
operator|.
name|swap
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p1
operator|.
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p2
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QPolygon
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qpolygon.moc"
end_include
end_unit
