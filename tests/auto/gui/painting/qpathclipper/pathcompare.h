begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|PATHCOMPARE_H
end_ifndef
begin_define
DECL|macro|PATHCOMPARE_H
define|#
directive|define
name|PATHCOMPARE_H
end_define
begin_include
include|#
directive|include
file|<qmath.h>
end_include
begin_decl_stmt
name|namespace
name|QPathCompare
block|{
specifier|static
specifier|const
name|int
name|precision
init|=
literal|8
decl_stmt|;
specifier|static
specifier|const
name|qreal
name|epsilon
init|=
name|qPow
argument_list|(
literal|0.1
argument_list|,
name|precision
argument_list|)
decl_stmt|;
specifier|static
specifier|inline
name|bool
name|fuzzyIsZero
parameter_list|(
name|qreal
name|x
parameter_list|,
name|qreal
name|relative
parameter_list|)
block|{
if|if
condition|(
name|qAbs
argument_list|(
name|relative
argument_list|)
operator|<
name|epsilon
condition|)
return|return
name|qAbs
argument_list|(
name|x
argument_list|)
operator|<
name|epsilon
return|;
else|else
return|return
name|qAbs
argument_list|(
name|x
operator|/
name|relative
argument_list|)
operator|<
name|epsilon
return|;
block|}
specifier|static
name|bool
name|fuzzyCompare
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|a
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|b
parameter_list|)
block|{
specifier|const
name|QPointF
name|delta
init|=
name|a
operator|-
name|b
decl_stmt|;
specifier|const
name|qreal
name|x
init|=
name|qMax
argument_list|(
name|qAbs
argument_list|(
name|a
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
name|qAbs
argument_list|(
name|b
operator|.
name|x
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|y
init|=
name|qMax
argument_list|(
name|qAbs
argument_list|(
name|a
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
name|qAbs
argument_list|(
name|b
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|fuzzyIsZero
argument_list|(
name|delta
operator|.
name|x
argument_list|()
argument_list|,
name|x
argument_list|)
operator|&&
name|fuzzyIsZero
argument_list|(
name|delta
operator|.
name|y
argument_list|()
argument_list|,
name|y
argument_list|)
return|;
block|}
specifier|static
name|bool
name|isClosed
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|elementCount
argument_list|()
operator|==
literal|0
condition|)
return|return
name|false
return|;
name|QPointF
name|first
init|=
name|path
operator|.
name|elementAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QPointF
name|last
init|=
name|path
operator|.
name|elementAt
argument_list|(
name|path
operator|.
name|elementCount
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
return|return
name|fuzzyCompare
argument_list|(
name|first
argument_list|,
name|last
argument_list|)
return|;
block|}
comment|// rotation and direction independent path comparison
comment|// allows paths to be shifted or reversed relative to each other
specifier|static
name|bool
name|comparePaths
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|actual
parameter_list|,
specifier|const
name|QPainterPath
modifier|&
name|expected
parameter_list|)
block|{
specifier|const
name|int
name|endActual
init|=
name|isClosed
argument_list|(
name|actual
argument_list|)
condition|?
name|actual
operator|.
name|elementCount
argument_list|()
operator|-
literal|1
else|:
name|actual
operator|.
name|elementCount
argument_list|()
decl_stmt|;
specifier|const
name|int
name|endExpected
init|=
name|isClosed
argument_list|(
name|expected
argument_list|)
condition|?
name|expected
operator|.
name|elementCount
argument_list|()
operator|-
literal|1
else|:
name|expected
operator|.
name|elementCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|endActual
operator|!=
name|endExpected
condition|)
return|return
name|false
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|endActual
condition|;
operator|++
name|i
control|)
block|{
name|int
name|k
init|=
literal|0
decl_stmt|;
for|for
control|(
name|k
operator|=
literal|0
init|;
name|k
operator|<
name|endActual
condition|;
operator|++
name|k
control|)
block|{
name|int
name|i1
init|=
name|k
decl_stmt|;
name|int
name|i2
init|=
operator|(
name|i
operator|+
name|k
operator|)
operator|%
name|endActual
decl_stmt|;
name|QPointF
name|a
init|=
name|actual
operator|.
name|elementAt
argument_list|(
name|i1
argument_list|)
decl_stmt|;
name|QPointF
name|b
init|=
name|expected
operator|.
name|elementAt
argument_list|(
name|i2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fuzzyCompare
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
condition|)
break|break;
block|}
if|if
condition|(
name|k
operator|==
name|endActual
condition|)
return|return
name|true
return|;
for|for
control|(
name|k
operator|=
literal|0
init|;
name|k
operator|<
name|endActual
condition|;
operator|++
name|k
control|)
block|{
name|int
name|i1
init|=
name|k
decl_stmt|;
name|int
name|i2
init|=
operator|(
name|i
operator|+
name|endActual
operator|-
name|k
operator|)
operator|%
name|endActual
decl_stmt|;
name|QPointF
name|a
init|=
name|actual
operator|.
name|elementAt
argument_list|(
name|i1
argument_list|)
decl_stmt|;
name|QPointF
name|b
init|=
name|expected
operator|.
name|elementAt
argument_list|(
name|i2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fuzzyCompare
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
condition|)
break|break;
block|}
if|if
condition|(
name|k
operator|==
name|endActual
condition|)
return|return
name|true
return|;
block|}
return|return
name|false
return|;
block|}
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
end_unit
