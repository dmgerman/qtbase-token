begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtGui/private/qopenglcontext_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/QOpenGLFramebufferObject>
end_include
begin_include
include|#
directive|include
file|<QtGui/QOpenGLFunctions>
end_include
begin_include
include|#
directive|include
file|<QtGui/QOpenGLPaintDevice>
end_include
begin_include
include|#
directive|include
file|<QtGui/QPainter>
end_include
begin_include
include|#
directive|include
file|<QtGui/QScreen>
end_include
begin_include
include|#
directive|include
file|<QtGui/QWindow>
end_include
begin_include
include|#
directive|include
file|<QtGui/QOffscreenSurface>
end_include
begin_include
include|#
directive|include
file|<QtGui/QGenericMatrix>
end_include
begin_include
include|#
directive|include
file|<QtGui/QMatrix4x4>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qopengltextureblitter_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformintegration.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformnativeinterface.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QSignalSpy>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|USE_GLX
end_ifdef
begin_comment
comment|// Must be included last due to the X11 types
end_comment
begin_include
include|#
directive|include
file|<QtPlatformHeaders/QGLXNativeContext>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|tst_QOpenGL
class|class
name|tst_QOpenGL
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|sharedResourceCleanup_data
parameter_list|()
function_decl|;
name|void
name|sharedResourceCleanup
parameter_list|()
function_decl|;
name|void
name|multiGroupSharedResourceCleanup_data
parameter_list|()
function_decl|;
name|void
name|multiGroupSharedResourceCleanup
parameter_list|()
function_decl|;
name|void
name|multiGroupSharedResourceCleanupCustom_data
parameter_list|()
function_decl|;
name|void
name|multiGroupSharedResourceCleanupCustom
parameter_list|()
function_decl|;
name|void
name|fboSimpleRendering_data
parameter_list|()
function_decl|;
name|void
name|fboSimpleRendering
parameter_list|()
function_decl|;
name|void
name|fboTextureOwnership_data
parameter_list|()
function_decl|;
name|void
name|fboTextureOwnership
parameter_list|()
function_decl|;
name|void
name|fboRendering_data
parameter_list|()
function_decl|;
name|void
name|fboRendering
parameter_list|()
function_decl|;
name|void
name|fboHandleNulledAfterContextDestroyed
parameter_list|()
function_decl|;
name|void
name|openGLPaintDevice_data
parameter_list|()
function_decl|;
name|void
name|openGLPaintDevice
parameter_list|()
function_decl|;
name|void
name|aboutToBeDestroyed
parameter_list|()
function_decl|;
name|void
name|sizeLessWindow
parameter_list|()
function_decl|;
name|void
name|QTBUG15621_triangulatingStrokerDivZero
parameter_list|()
function_decl|;
name|void
name|textureblitterFullSourceRectTransform
parameter_list|()
function_decl|;
name|void
name|textureblitterPartOriginBottomLeftSourceRectTransform
parameter_list|()
function_decl|;
name|void
name|textureblitterPartOriginTopLeftSourceRectTransform
parameter_list|()
function_decl|;
name|void
name|textureblitterFullTargetRectTransform
parameter_list|()
function_decl|;
name|void
name|textureblitterPartTargetRectTransform
parameter_list|()
function_decl|;
ifdef|#
directive|ifdef
name|USE_GLX
name|void
name|glxContextWrap
parameter_list|()
function_decl|;
endif|#
directive|endif
block|}
class|;
end_class
begin_struct
DECL|struct|SharedResourceTracker
struct|struct
name|SharedResourceTracker
block|{
DECL|function|SharedResourceTracker
name|SharedResourceTracker
parameter_list|()
block|{
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|function|reset
name|void
name|reset
parameter_list|()
block|{
name|invalidateResourceCalls
operator|=
literal|0
expr_stmt|;
name|freeResourceCalls
operator|=
literal|0
expr_stmt|;
name|destructorCalls
operator|=
literal|0
expr_stmt|;
block|}
DECL|member|invalidateResourceCalls
name|int
name|invalidateResourceCalls
decl_stmt|;
DECL|member|freeResourceCalls
name|int
name|freeResourceCalls
decl_stmt|;
DECL|member|destructorCalls
name|int
name|destructorCalls
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|SharedResource
struct|struct
name|SharedResource
super|:
specifier|public
name|QOpenGLSharedResource
block|{
DECL|function|SharedResource
name|SharedResource
parameter_list|(
name|SharedResourceTracker
modifier|*
name|t
parameter_list|)
member_init_list|:
name|QOpenGLSharedResource
argument_list|(
name|QOpenGLContextGroup
operator|::
name|currentContextGroup
argument_list|()
argument_list|)
member_init_list|,
name|resource
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|tracker
argument_list|(
name|t
argument_list|)
block|{     }
DECL|function|SharedResource
name|SharedResource
parameter_list|(
name|QOpenGLContext
modifier|*
name|ctx
parameter_list|)
member_init_list|:
name|QOpenGLSharedResource
argument_list|(
name|ctx
operator|->
name|shareGroup
argument_list|()
argument_list|)
member_init_list|,
name|resource
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|tracker
argument_list|(
literal|0
argument_list|)
block|{     }
DECL|function|~SharedResource
name|~
name|SharedResource
parameter_list|()
block|{
if|if
condition|(
name|tracker
condition|)
name|tracker
operator|->
name|destructorCalls
operator|++
expr_stmt|;
block|}
DECL|function|invalidateResource
name|void
name|invalidateResource
parameter_list|()
block|{
name|resource
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|tracker
condition|)
name|tracker
operator|->
name|invalidateResourceCalls
operator|++
expr_stmt|;
block|}
DECL|function|freeResource
name|void
name|freeResource
parameter_list|(
name|QOpenGLContext
modifier|*
name|context
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|context
operator|==
name|QOpenGLContext
operator|::
name|currentContext
argument_list|()
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
argument|context
argument_list|)
name|resource
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|tracker
condition|)
name|tracker
operator|->
name|freeResourceCalls
operator|++
expr_stmt|;
block|}
DECL|member|resource
name|int
name|resource
decl_stmt|;
DECL|member|tracker
name|SharedResourceTracker
modifier|*
name|tracker
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|createSurface
specifier|static
name|QSurface
modifier|*
name|createSurface
parameter_list|(
name|int
name|surfaceClass
parameter_list|)
block|{
if|if
condition|(
name|surfaceClass
operator|==
name|int
argument_list|(
name|QSurface
operator|::
name|Window
argument_list|)
condition|)
block|{
name|QWindow
modifier|*
name|window
init|=
operator|new
name|QWindow
decl_stmt|;
name|window
operator|->
name|setSurfaceType
argument_list|(
name|QWindow
operator|::
name|OpenGLSurface
argument_list|)
expr_stmt|;
name|window
operator|->
name|setGeometry
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|window
operator|->
name|create
argument_list|()
expr_stmt|;
return|return
name|window
return|;
block|}
elseif|else
if|if
condition|(
name|surfaceClass
operator|==
name|int
argument_list|(
name|QSurface
operator|::
name|Offscreen
argument_list|)
condition|)
block|{
comment|// Create a window and get the format from that.  For example, if an EGL
comment|// implementation provides 565 and 888 configs for PBUFFER_BIT but only
comment|// 888 for WINDOW_BIT, we may end up with a pbuffer surface that is
comment|// incompatible with the context since it could choose the 565 while the
comment|// window and the context uses a config with 888.
specifier|static
name|QSurfaceFormat
name|format
decl_stmt|;
if|if
condition|(
name|format
operator|.
name|redBufferSize
argument_list|()
operator|==
operator|-
literal|1
condition|)
block|{
name|QWindow
modifier|*
name|window
init|=
operator|new
name|QWindow
decl_stmt|;
name|window
operator|->
name|setSurfaceType
argument_list|(
name|QWindow
operator|::
name|OpenGLSurface
argument_list|)
expr_stmt|;
name|window
operator|->
name|setGeometry
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|window
operator|->
name|create
argument_list|()
expr_stmt|;
name|format
operator|=
name|window
operator|->
name|format
argument_list|()
expr_stmt|;
operator|delete
name|window
expr_stmt|;
block|}
name|QOffscreenSurface
modifier|*
name|offscreenSurface
init|=
operator|new
name|QOffscreenSurface
decl_stmt|;
name|offscreenSurface
operator|->
name|setFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|offscreenSurface
operator|->
name|create
argument_list|()
expr_stmt|;
return|return
name|offscreenSurface
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|common_data
specifier|static
name|void
name|common_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"surfaceClass"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Using QWindow"
argument_list|)
operator|<<
name|int
argument_list|(
name|QSurface
operator|::
name|Window
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Using QOffscreenSurface"
argument_list|)
operator|<<
name|int
argument_list|(
name|QSurface
operator|::
name|Offscreen
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sharedResourceCleanup_data
name|void
name|tst_QOpenGL
operator|::
name|sharedResourceCleanup_data
parameter_list|()
block|{
name|common_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sharedResourceCleanup
name|void
name|tst_QOpenGL
operator|::
name|sharedResourceCleanup
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|surfaceClass
argument_list|)
expr_stmt|;
name|QScopedPointer
argument_list|<
name|QSurface
argument_list|>
name|surface
argument_list|(
name|createSurface
argument_list|(
name|surfaceClass
argument_list|)
argument_list|)
decl_stmt|;
name|QOpenGLContext
modifier|*
name|ctx
init|=
operator|new
name|QOpenGLContext
decl_stmt|;
name|QVERIFY
argument_list|(
name|ctx
operator|->
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ctx
operator|->
name|makeCurrent
argument_list|(
name|surface
operator|.
name|data
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|SharedResourceTracker
name|tracker
decl_stmt|;
name|SharedResource
modifier|*
name|resource
init|=
operator|new
name|SharedResource
argument_list|(
operator|&
name|tracker
argument_list|)
decl_stmt|;
name|resource
operator|->
name|free
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tracker
operator|.
name|invalidateResourceCalls
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tracker
operator|.
name|freeResourceCalls
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tracker
operator|.
name|destructorCalls
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|reset
argument_list|()
expr_stmt|;
name|resource
operator|=
operator|new
name|SharedResource
argument_list|(
operator|&
name|tracker
argument_list|)
expr_stmt|;
name|QOpenGLContext
modifier|*
name|ctx2
init|=
operator|new
name|QOpenGLContext
decl_stmt|;
name|ctx2
operator|->
name|setShareContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ctx2
operator|->
name|create
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|ctx
expr_stmt|;
name|resource
operator|->
name|free
argument_list|()
expr_stmt|;
comment|// no current context, freeResource() delayed
name|QCOMPARE
argument_list|(
name|tracker
operator|.
name|invalidateResourceCalls
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tracker
operator|.
name|freeResourceCalls
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tracker
operator|.
name|destructorCalls
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ctx2
operator|->
name|makeCurrent
argument_list|(
name|surface
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
comment|// freeResource() should now have been called
name|QCOMPARE
argument_list|(
name|tracker
operator|.
name|invalidateResourceCalls
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tracker
operator|.
name|freeResourceCalls
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tracker
operator|.
name|destructorCalls
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|reset
argument_list|()
expr_stmt|;
name|resource
operator|=
operator|new
name|SharedResource
argument_list|(
operator|&
name|tracker
argument_list|)
expr_stmt|;
comment|// this should cause invalidateResource() to be called
operator|delete
name|ctx2
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tracker
operator|.
name|invalidateResourceCalls
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tracker
operator|.
name|freeResourceCalls
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tracker
operator|.
name|destructorCalls
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// should have no effect other than destroying the resource,
comment|// as it has already been invalidated
name|resource
operator|->
name|free
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tracker
operator|.
name|invalidateResourceCalls
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tracker
operator|.
name|freeResourceCalls
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tracker
operator|.
name|destructorCalls
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multiGroupSharedResourceCleanup_data
name|void
name|tst_QOpenGL
operator|::
name|multiGroupSharedResourceCleanup_data
parameter_list|()
block|{
name|common_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multiGroupSharedResourceCleanup
name|void
name|tst_QOpenGL
operator|::
name|multiGroupSharedResourceCleanup
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|surfaceClass
argument_list|)
expr_stmt|;
name|QScopedPointer
argument_list|<
name|QSurface
argument_list|>
name|surface
argument_list|(
name|createSurface
argument_list|(
name|surfaceClass
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|QOpenGLContext
modifier|*
name|gl
init|=
operator|new
name|QOpenGLContext
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|gl
operator|->
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|gl
operator|->
name|makeCurrent
argument_list|(
name|surface
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|{
comment|// Cause QOpenGLMultiGroupSharedResource instantiation.
name|QOpenGLFunctions
name|func
argument_list|(
name|gl
argument_list|)
decl_stmt|;
block|}
operator|delete
name|gl
expr_stmt|;
comment|// Cause context group's deleteLater() to be processed.
name|QCoreApplication
operator|::
name|sendPostedEvents
argument_list|(
literal|0
argument_list|,
name|QEvent
operator|::
name|DeferredDelete
argument_list|)
expr_stmt|;
block|}
comment|// Shouldn't crash when application exits.
block|}
end_function
begin_function
DECL|function|multiGroupSharedResourceCleanupCustom_data
name|void
name|tst_QOpenGL
operator|::
name|multiGroupSharedResourceCleanupCustom_data
parameter_list|()
block|{
name|common_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multiGroupSharedResourceCleanupCustom
name|void
name|tst_QOpenGL
operator|::
name|multiGroupSharedResourceCleanupCustom
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|surfaceClass
argument_list|)
expr_stmt|;
name|QScopedPointer
argument_list|<
name|QSurface
argument_list|>
name|surface
argument_list|(
name|createSurface
argument_list|(
name|surfaceClass
argument_list|)
argument_list|)
decl_stmt|;
name|QOpenGLContext
modifier|*
name|ctx
init|=
operator|new
name|QOpenGLContext
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|ctx
operator|->
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ctx
operator|->
name|makeCurrent
argument_list|(
name|surface
operator|.
name|data
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QOpenGLMultiGroupSharedResource
name|multiGroupSharedResource
decl_stmt|;
name|SharedResource
modifier|*
name|resource
init|=
name|multiGroupSharedResource
operator|.
name|value
argument_list|<
name|SharedResource
argument_list|>
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|SharedResourceTracker
name|tracker
decl_stmt|;
name|resource
operator|->
name|tracker
operator|=
operator|&
name|tracker
expr_stmt|;
operator|delete
name|ctx
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tracker
operator|.
name|invalidateResourceCalls
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tracker
operator|.
name|freeResourceCalls
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tracker
operator|.
name|destructorCalls
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fuzzyComparePixels
specifier|static
name|bool
name|fuzzyComparePixels
parameter_list|(
specifier|const
name|QRgb
name|testPixel
parameter_list|,
specifier|const
name|QRgb
name|refPixel
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|,
name|int
name|x
init|=
operator|-
literal|1
parameter_list|,
name|int
name|y
init|=
operator|-
literal|1
parameter_list|)
block|{
specifier|static
name|int
name|maxFuzz
init|=
literal|1
decl_stmt|;
specifier|static
name|bool
name|maxFuzzSet
init|=
literal|false
decl_stmt|;
comment|// On 16 bpp systems, we need to allow for more fuzz:
if|if
condition|(
operator|!
name|maxFuzzSet
condition|)
block|{
name|maxFuzzSet
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
operator|->
name|depth
argument_list|()
operator|<
literal|24
condition|)
name|maxFuzz
operator|=
literal|32
expr_stmt|;
block|}
name|int
name|redFuzz
init|=
name|qAbs
argument_list|(
name|qRed
argument_list|(
name|testPixel
argument_list|)
operator|-
name|qRed
argument_list|(
name|refPixel
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|greenFuzz
init|=
name|qAbs
argument_list|(
name|qGreen
argument_list|(
name|testPixel
argument_list|)
operator|-
name|qGreen
argument_list|(
name|refPixel
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|blueFuzz
init|=
name|qAbs
argument_list|(
name|qBlue
argument_list|(
name|testPixel
argument_list|)
operator|-
name|qBlue
argument_list|(
name|refPixel
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|alphaFuzz
init|=
name|qAbs
argument_list|(
name|qAlpha
argument_list|(
name|testPixel
argument_list|)
operator|-
name|qAlpha
argument_list|(
name|refPixel
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|refPixel
operator|!=
literal|0
operator|&&
name|testPixel
operator|==
literal|0
condition|)
block|{
name|QString
name|msg
decl_stmt|;
if|if
condition|(
name|x
operator|>=
literal|0
condition|)
block|{
name|msg
operator|=
name|QString
argument_list|(
literal|"Test pixel [%1, %2] is null (black) when it should be (%3,%4,%5,%6)"
argument_list|)
operator|.
name|arg
argument_list|(
name|x
argument_list|)
operator|.
name|arg
argument_list|(
name|y
argument_list|)
operator|.
name|arg
argument_list|(
name|qRed
argument_list|(
name|refPixel
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|qGreen
argument_list|(
name|refPixel
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|qBlue
argument_list|(
name|refPixel
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|qAlpha
argument_list|(
name|refPixel
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|=
name|QString
argument_list|(
literal|"Test pixel is null (black) when it should be (%2,%3,%4,%5)"
argument_list|)
operator|.
name|arg
argument_list|(
name|qRed
argument_list|(
name|refPixel
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|qGreen
argument_list|(
name|refPixel
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|qBlue
argument_list|(
name|refPixel
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|qAlpha
argument_list|(
name|refPixel
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QTest
operator|::
name|qFail
argument_list|(
name|msg
operator|.
name|toLatin1
argument_list|()
argument_list|,
name|file
argument_list|,
name|line
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|redFuzz
operator|>
name|maxFuzz
operator|||
name|greenFuzz
operator|>
name|maxFuzz
operator|||
name|blueFuzz
operator|>
name|maxFuzz
operator|||
name|alphaFuzz
operator|>
name|maxFuzz
condition|)
block|{
name|QString
name|msg
decl_stmt|;
if|if
condition|(
name|x
operator|>=
literal|0
condition|)
name|msg
operator|=
name|QString
argument_list|(
literal|"Pixel [%1,%2]: "
argument_list|)
operator|.
name|arg
argument_list|(
name|x
argument_list|)
operator|.
name|arg
argument_list|(
name|y
argument_list|)
expr_stmt|;
else|else
name|msg
operator|=
name|QString
argument_list|(
literal|"Pixel "
argument_list|)
expr_stmt|;
name|msg
operator|+=
name|QString
argument_list|(
literal|"Max fuzz (%1) exceeded: (%2,%3,%4,%5) vs (%6,%7,%8,%9)"
argument_list|)
operator|.
name|arg
argument_list|(
name|maxFuzz
argument_list|)
operator|.
name|arg
argument_list|(
name|qRed
argument_list|(
name|testPixel
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|qGreen
argument_list|(
name|testPixel
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|qBlue
argument_list|(
name|testPixel
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|qAlpha
argument_list|(
name|testPixel
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|qRed
argument_list|(
name|refPixel
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|qGreen
argument_list|(
name|refPixel
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|qBlue
argument_list|(
name|refPixel
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|qAlpha
argument_list|(
name|refPixel
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qFail
argument_list|(
name|msg
operator|.
name|toLatin1
argument_list|()
argument_list|,
name|file
argument_list|,
name|line
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|fuzzyCompareImages
specifier|static
name|void
name|fuzzyCompareImages
parameter_list|(
specifier|const
name|QImage
modifier|&
name|testImage
parameter_list|,
specifier|const
name|QImage
modifier|&
name|referenceImage
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|testImage
operator|.
name|width
argument_list|()
argument_list|,
name|referenceImage
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testImage
operator|.
name|height
argument_list|()
argument_list|,
name|referenceImage
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|testImage
operator|.
name|height
argument_list|()
condition|;
name|y
operator|++
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|testImage
operator|.
name|width
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|fuzzyComparePixels
argument_list|(
name|testImage
operator|.
name|pixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|,
name|referenceImage
operator|.
name|pixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|,
name|file
argument_list|,
name|line
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
condition|)
block|{
comment|// Might as well save the images for easier debugging:
name|referenceImage
operator|.
name|save
argument_list|(
literal|"referenceImage.png"
argument_list|)
expr_stmt|;
name|testImage
operator|.
name|save
argument_list|(
literal|"testImage.png"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
end_function
begin_define
DECL|macro|QFUZZY_COMPARE_IMAGES
define|#
directive|define
name|QFUZZY_COMPARE_IMAGES
parameter_list|(
name|A
parameter_list|,
name|B
parameter_list|)
define|\
value|fuzzyCompareImages(A, B, __FILE__, __LINE__)
end_define
begin_define
DECL|macro|QFUZZY_COMPARE_PIXELS
define|#
directive|define
name|QFUZZY_COMPARE_PIXELS
parameter_list|(
name|A
parameter_list|,
name|B
parameter_list|)
define|\
value|fuzzyComparePixels(A, B, __FILE__, __LINE__)
end_define
begin_function
DECL|function|qt_opengl_draw_test_pattern
name|void
name|qt_opengl_draw_test_pattern
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
name|QPainterPath
name|intersectingPath
decl_stmt|;
name|intersectingPath
operator|.
name|moveTo
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|intersectingPath
operator|.
name|lineTo
argument_list|(
literal|100
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|intersectingPath
operator|.
name|lineTo
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|intersectingPath
operator|.
name|lineTo
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|intersectingPath
operator|.
name|closeSubpath
argument_list|()
expr_stmt|;
name|QPainterPath
name|trianglePath
decl_stmt|;
name|trianglePath
operator|.
name|moveTo
argument_list|(
literal|50
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|trianglePath
operator|.
name|lineTo
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|trianglePath
operator|.
name|lineTo
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|trianglePath
operator|.
name|closeSubpath
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setTransform
argument_list|(
name|QTransform
argument_list|()
argument_list|)
expr_stmt|;
comment|// reset xform
name|painter
operator|->
name|fillRect
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|width
operator|+
literal|2
argument_list|,
name|height
operator|+
literal|2
argument_list|,
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
comment|// Background
name|painter
operator|->
name|translate
argument_list|(
literal|14
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|painter
operator|->
name|fillPath
argument_list|(
name|intersectingPath
argument_list|,
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
comment|// Test stencil buffer works
name|painter
operator|->
name|translate
argument_list|(
literal|128
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setClipPath
argument_list|(
name|trianglePath
argument_list|)
expr_stmt|;
comment|// Test depth buffer works
name|painter
operator|->
name|setTransform
argument_list|(
name|QTransform
argument_list|()
argument_list|)
expr_stmt|;
comment|// reset xform ready for fill
name|painter
operator|->
name|fillRect
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|width
operator|+
literal|2
argument_list|,
name|height
operator|+
literal|2
argument_list|,
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_opengl_check_test_pattern
name|void
name|qt_opengl_check_test_pattern
parameter_list|(
specifier|const
name|QImage
modifier|&
name|img
parameter_list|)
block|{
comment|// As we're doing more than trivial painting, we can't just compare to
comment|// an image rendered with raster. Instead, we sample at well-defined
comment|// test-points:
name|QVERIFY
argument_list|(
operator|!
name|img
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|img
operator|.
name|width
argument_list|()
operator|>
literal|217
argument_list|,
name|QByteArray
operator|::
name|number
argument_list|(
name|img
operator|.
name|width
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|img
operator|.
name|height
argument_list|()
operator|>
literal|90
argument_list|,
name|QByteArray
operator|::
name|number
argument_list|(
name|img
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|img
operator|.
name|pixel
argument_list|(
literal|39
argument_list|,
literal|64
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|img
operator|.
name|pixel
argument_list|(
literal|89
argument_list|,
literal|64
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|img
operator|.
name|pixel
argument_list|(
literal|64
argument_list|,
literal|39
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|img
operator|.
name|pixel
argument_list|(
literal|64
argument_list|,
literal|89
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|img
operator|.
name|pixel
argument_list|(
literal|167
argument_list|,
literal|39
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|img
operator|.
name|pixel
argument_list|(
literal|217
argument_list|,
literal|39
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|img
operator|.
name|pixel
argument_list|(
literal|192
argument_list|,
literal|64
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fboSimpleRendering_data
name|void
name|tst_QOpenGL
operator|::
name|fboSimpleRendering_data
parameter_list|()
block|{
name|common_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fboSimpleRendering
name|void
name|tst_QOpenGL
operator|::
name|fboSimpleRendering
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|surfaceClass
argument_list|)
expr_stmt|;
name|QScopedPointer
argument_list|<
name|QSurface
argument_list|>
name|surface
argument_list|(
name|createSurface
argument_list|(
name|surfaceClass
argument_list|)
argument_list|)
decl_stmt|;
name|QOpenGLContext
name|ctx
decl_stmt|;
name|QVERIFY
argument_list|(
name|ctx
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ctx
operator|.
name|makeCurrent
argument_list|(
name|surface
operator|.
name|data
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QOpenGLFramebufferObject
operator|::
name|hasOpenGLFramebufferObjects
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"QOpenGLFramebufferObject not supported on this platform"
argument_list|)
expr_stmt|;
comment|// No multisample with combined depth/stencil attachment:
name|QOpenGLFramebufferObjectFormat
name|fboFormat
decl_stmt|;
name|fboFormat
operator|.
name|setAttachment
argument_list|(
name|QOpenGLFramebufferObject
operator|::
name|NoAttachment
argument_list|)
expr_stmt|;
specifier|const
name|QSize
name|size
argument_list|(
literal|200
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|QScopedPointer
argument_list|<
name|QOpenGLFramebufferObject
argument_list|>
name|fbo
argument_list|(
operator|new
name|QOpenGLFramebufferObject
argument_list|(
name|size
argument_list|,
name|fboFormat
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fbo
operator|->
name|bind
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|functions
argument_list|()
operator|->
name|glClearColor
argument_list|(
literal|1.0
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|functions
argument_list|()
operator|->
name|glClear
argument_list|(
name|GL_COLOR_BUFFER_BIT
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|functions
argument_list|()
operator|->
name|glFinish
argument_list|()
expr_stmt|;
specifier|const
name|QImage
name|fb
init|=
name|fbo
operator|->
name|toImage
argument_list|()
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fb
operator|.
name|size
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|QImage
name|reference
argument_list|(
name|size
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|reference
operator|.
name|fill
argument_list|(
literal|0xffff0000
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_IMAGES
argument_list|(
name|fb
argument_list|,
name|reference
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fboTextureOwnership_data
name|void
name|tst_QOpenGL
operator|::
name|fboTextureOwnership_data
parameter_list|()
block|{
name|common_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fboTextureOwnership
name|void
name|tst_QOpenGL
operator|::
name|fboTextureOwnership
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|surfaceClass
argument_list|)
expr_stmt|;
name|QScopedPointer
argument_list|<
name|QSurface
argument_list|>
name|surface
argument_list|(
name|createSurface
argument_list|(
name|surfaceClass
argument_list|)
argument_list|)
decl_stmt|;
name|QOpenGLContext
name|ctx
decl_stmt|;
name|QVERIFY
argument_list|(
name|ctx
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|makeCurrent
argument_list|(
name|surface
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QOpenGLFramebufferObject
operator|::
name|hasOpenGLFramebufferObjects
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"QOpenGLFramebufferObject not supported on this platform"
argument_list|)
expr_stmt|;
name|QOpenGLFramebufferObjectFormat
name|fboFormat
decl_stmt|;
name|fboFormat
operator|.
name|setAttachment
argument_list|(
name|QOpenGLFramebufferObject
operator|::
name|NoAttachment
argument_list|)
expr_stmt|;
name|QOpenGLFramebufferObject
modifier|*
name|fbo
init|=
operator|new
name|QOpenGLFramebufferObject
argument_list|(
literal|200
argument_list|,
literal|100
argument_list|,
name|fboFormat
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fbo
operator|->
name|texture
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|fbo
operator|->
name|bind
argument_list|()
expr_stmt|;
comment|// pull out the texture
name|GLuint
name|texture
init|=
name|fbo
operator|->
name|takeTexture
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|texture
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fbo
operator|->
name|texture
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// verify that the next bind() creates a new texture
name|fbo
operator|->
name|bind
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|fbo
operator|->
name|texture
argument_list|()
operator|!=
literal|0
operator|&&
name|fbo
operator|->
name|texture
argument_list|()
operator|!=
name|texture
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|functions
argument_list|()
operator|->
name|glClearColor
argument_list|(
literal|1.0
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|functions
argument_list|()
operator|->
name|glClear
argument_list|(
name|GL_COLOR_BUFFER_BIT
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|functions
argument_list|()
operator|->
name|glFinish
argument_list|()
expr_stmt|;
name|QImage
name|fb
init|=
name|fbo
operator|->
name|toImage
argument_list|()
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|QImage
name|reference
argument_list|(
name|fb
operator|.
name|size
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|reference
operator|.
name|fill
argument_list|(
literal|0xffff0000
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_IMAGES
argument_list|(
name|fb
argument_list|,
name|reference
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|functions
argument_list|()
operator|->
name|glDeleteTextures
argument_list|(
literal|1
argument_list|,
operator|&
name|texture
argument_list|)
expr_stmt|;
operator|delete
name|fbo
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fboRendering_data
name|void
name|tst_QOpenGL
operator|::
name|fboRendering_data
parameter_list|()
block|{
name|common_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|// NOTE: This tests that CombinedDepthStencil attachment works by assuming the
end_comment
begin_comment
comment|//       GL2 engine is being used and is implemented the same way as it was when
end_comment
begin_comment
comment|//       this autotest was written. If this is not the case, there may be some
end_comment
begin_comment
comment|//       false-positives: I.e. The test passes when either the depth or stencil
end_comment
begin_comment
comment|//       buffer is actually missing. But that's probably ok anyway.
end_comment
begin_function
DECL|function|fboRendering
name|void
name|tst_QOpenGL
operator|::
name|fboRendering
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__x86_64__
argument_list|)
name|QSKIP
argument_list|(
literal|"QTBUG-22617"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QFETCH
argument_list|(
name|int
argument_list|,
name|surfaceClass
argument_list|)
expr_stmt|;
name|QScopedPointer
argument_list|<
name|QSurface
argument_list|>
name|surface
argument_list|(
name|createSurface
argument_list|(
name|surfaceClass
argument_list|)
argument_list|)
decl_stmt|;
name|QOpenGLContext
name|ctx
decl_stmt|;
name|QVERIFY
argument_list|(
name|ctx
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ctx
operator|.
name|makeCurrent
argument_list|(
name|surface
operator|.
name|data
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QOpenGLFramebufferObject
operator|::
name|hasOpenGLFramebufferObjects
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"QOpenGLFramebufferObject not supported on this platform"
argument_list|)
expr_stmt|;
comment|// No multisample with combined depth/stencil attachment:
name|QOpenGLFramebufferObjectFormat
name|fboFormat
decl_stmt|;
name|fboFormat
operator|.
name|setAttachment
argument_list|(
name|QOpenGLFramebufferObject
operator|::
name|CombinedDepthStencil
argument_list|)
expr_stmt|;
comment|// Uncomplicate things by using NPOT:
specifier|const
name|QSize
name|size
argument_list|(
literal|256
argument_list|,
literal|128
argument_list|)
decl_stmt|;
name|QOpenGLFramebufferObject
name|fbo
argument_list|(
name|size
argument_list|,
name|fboFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|fbo
operator|.
name|attachment
argument_list|()
operator|!=
name|QOpenGLFramebufferObject
operator|::
name|CombinedDepthStencil
condition|)
name|QSKIP
argument_list|(
literal|"FBOs missing combined depth~stencil support"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fbo
operator|.
name|bind
argument_list|()
argument_list|)
expr_stmt|;
name|QPainter
name|fboPainter
decl_stmt|;
name|QOpenGLPaintDevice
name|device
argument_list|(
name|fbo
operator|.
name|width
argument_list|()
argument_list|,
name|fbo
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|bool
name|painterBegun
init|=
name|fboPainter
operator|.
name|begin
argument_list|(
operator|&
name|device
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|painterBegun
argument_list|)
expr_stmt|;
name|qt_opengl_draw_test_pattern
argument_list|(
operator|&
name|fboPainter
argument_list|,
name|fbo
operator|.
name|width
argument_list|()
argument_list|,
name|fbo
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|fboPainter
operator|.
name|end
argument_list|()
expr_stmt|;
specifier|const
name|QImage
name|fb
init|=
name|fbo
operator|.
name|toImage
argument_list|()
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fb
operator|.
name|size
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|qt_opengl_check_test_pattern
argument_list|(
name|fb
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fboHandleNulledAfterContextDestroyed
name|void
name|tst_QOpenGL
operator|::
name|fboHandleNulledAfterContextDestroyed
parameter_list|()
block|{
name|QWindow
name|window
decl_stmt|;
name|window
operator|.
name|setSurfaceType
argument_list|(
name|QWindow
operator|::
name|OpenGLSurface
argument_list|)
expr_stmt|;
name|window
operator|.
name|setGeometry
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|window
operator|.
name|create
argument_list|()
expr_stmt|;
name|QOpenGLFramebufferObject
modifier|*
name|fbo
init|=
literal|0
decl_stmt|;
block|{
name|QOpenGLContext
name|ctx
decl_stmt|;
name|QVERIFY
argument_list|(
name|ctx
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|makeCurrent
argument_list|(
operator|&
name|window
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QOpenGLFramebufferObject
operator|::
name|hasOpenGLFramebufferObjects
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"QOpenGLFramebufferObject not supported on this platform"
argument_list|)
expr_stmt|;
name|fbo
operator|=
operator|new
name|QOpenGLFramebufferObject
argument_list|(
literal|128
argument_list|,
literal|128
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fbo
operator|->
name|handle
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|fbo
operator|->
name|handle
argument_list|()
argument_list|,
literal|0U
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|openGLPaintDevice_data
name|void
name|tst_QOpenGL
operator|::
name|openGLPaintDevice_data
parameter_list|()
block|{
name|common_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|openGLPaintDevice
name|void
name|tst_QOpenGL
operator|::
name|openGLPaintDevice
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__x86_64__
argument_list|)
name|QSKIP
argument_list|(
literal|"QTBUG-22617"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QFETCH
argument_list|(
name|int
argument_list|,
name|surfaceClass
argument_list|)
expr_stmt|;
name|QScopedPointer
argument_list|<
name|QSurface
argument_list|>
name|surface
argument_list|(
name|createSurface
argument_list|(
name|surfaceClass
argument_list|)
argument_list|)
decl_stmt|;
name|QOpenGLContext
name|ctx
decl_stmt|;
name|QVERIFY
argument_list|(
name|ctx
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|QSurfaceFormat
name|format
init|=
name|ctx
operator|.
name|format
argument_list|()
decl_stmt|;
if|if
condition|(
name|format
operator|.
name|majorVersion
argument_list|()
operator|<
literal|2
condition|)
name|QSKIP
argument_list|(
literal|"This test requires at least OpenGL 2.0"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ctx
operator|.
name|makeCurrent
argument_list|(
name|surface
operator|.
name|data
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QSize
name|size
argument_list|(
literal|128
argument_list|,
literal|128
argument_list|)
decl_stmt|;
name|QImage
name|image
argument_list|(
name|size
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|image
argument_list|)
decl_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|image
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|image
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|,
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
name|image
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
literal|0
argument_list|,
name|image
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|image
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|,
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
name|image
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|image
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|,
name|image
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|image
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|,
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
name|image
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|,
name|image
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|image
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|QOpenGLFramebufferObject
name|fbo
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fbo
operator|.
name|bind
argument_list|()
argument_list|)
expr_stmt|;
name|QOpenGLPaintDevice
name|device
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|p
operator|.
name|begin
argument_list|(
operator|&
name|device
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|image
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|image
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|,
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
name|image
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
literal|0
argument_list|,
name|image
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|image
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|,
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
name|image
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|image
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|,
name|image
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|image
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|,
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
name|image
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|,
name|image
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|image
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|QImage
name|actual
init|=
name|fbo
operator|.
name|toImage
argument_list|()
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|image
operator|.
name|size
argument_list|()
argument_list|,
name|actual
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|image
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|p
operator|.
name|begin
argument_list|(
operator|&
name|device
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|image
operator|.
name|width
argument_list|()
argument_list|,
name|image
operator|.
name|height
argument_list|()
argument_list|,
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawImage
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|image
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|actual
operator|=
name|fbo
operator|.
name|toImage
argument_list|()
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|image
operator|.
name|size
argument_list|()
argument_list|,
name|actual
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|image
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|p
operator|.
name|begin
argument_list|(
operator|&
name|device
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|image
operator|.
name|width
argument_list|()
argument_list|,
name|image
operator|.
name|height
argument_list|()
argument_list|,
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|image
operator|.
name|width
argument_list|()
argument_list|,
name|image
operator|.
name|height
argument_list|()
argument_list|,
name|QBrush
argument_list|(
name|image
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|actual
operator|=
name|fbo
operator|.
name|toImage
argument_list|()
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|image
operator|.
name|size
argument_list|()
argument_list|,
name|actual
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|image
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|aboutToBeDestroyed
name|void
name|tst_QOpenGL
operator|::
name|aboutToBeDestroyed
parameter_list|()
block|{
name|QWindow
name|window
decl_stmt|;
name|window
operator|.
name|setSurfaceType
argument_list|(
name|QWindow
operator|::
name|OpenGLSurface
argument_list|)
expr_stmt|;
name|window
operator|.
name|setGeometry
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|128
argument_list|,
literal|128
argument_list|)
expr_stmt|;
name|window
operator|.
name|create
argument_list|()
expr_stmt|;
name|QOpenGLContext
modifier|*
name|context
init|=
operator|new
name|QOpenGLContext
decl_stmt|;
name|QSignalSpy
name|spy
argument_list|(
name|context
argument_list|,
name|SIGNAL
argument_list|(
name|aboutToBeDestroyed
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|context
operator|->
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|context
operator|->
name|makeCurrent
argument_list|(
operator|&
name|window
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|context
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Verify that QOpenGLContext works with QWindows that do
end_comment
begin_comment
comment|// not have an explicit size set.
end_comment
begin_function
DECL|function|sizeLessWindow
name|void
name|tst_QOpenGL
operator|::
name|sizeLessWindow
parameter_list|()
block|{
comment|// top-level window
block|{
name|QWindow
name|window
decl_stmt|;
name|window
operator|.
name|setSurfaceType
argument_list|(
name|QWindow
operator|::
name|OpenGLSurface
argument_list|)
expr_stmt|;
name|QOpenGLContext
name|context
decl_stmt|;
name|QVERIFY
argument_list|(
name|context
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|context
operator|.
name|makeCurrent
argument_list|(
operator|&
name|window
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QOpenGLContext
operator|::
name|currentContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|QOpenGLContext
operator|::
name|currentContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// child window
block|{
name|QWindow
name|parent
decl_stmt|;
name|QWindow
name|window
argument_list|(
operator|&
name|parent
argument_list|)
decl_stmt|;
name|window
operator|.
name|setSurfaceType
argument_list|(
name|QWindow
operator|::
name|OpenGLSurface
argument_list|)
expr_stmt|;
name|QOpenGLContext
name|context
decl_stmt|;
name|QVERIFY
argument_list|(
name|context
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|show
argument_list|()
expr_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|context
operator|.
name|makeCurrent
argument_list|(
operator|&
name|window
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QOpenGLContext
operator|::
name|currentContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|QOpenGLContext
operator|::
name|currentContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|QTBUG15621_triangulatingStrokerDivZero
name|void
name|tst_QOpenGL
operator|::
name|QTBUG15621_triangulatingStrokerDivZero
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__x86_64__
argument_list|)
name|QSKIP
argument_list|(
literal|"QTBUG-22617"
argument_list|)
expr_stmt|;
endif|#
directive|endif
specifier|const
name|QSize
name|size
argument_list|(
literal|128
argument_list|,
literal|128
argument_list|)
decl_stmt|;
name|QWindow
name|window
decl_stmt|;
name|window
operator|.
name|setSurfaceType
argument_list|(
name|QWindow
operator|::
name|OpenGLSurface
argument_list|)
expr_stmt|;
name|window
operator|.
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
name|window
operator|.
name|create
argument_list|()
expr_stmt|;
name|QOpenGLContext
name|ctx
decl_stmt|;
name|QVERIFY
argument_list|(
name|ctx
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ctx
operator|.
name|makeCurrent
argument_list|(
operator|&
name|window
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QOpenGLFramebufferObject
operator|::
name|hasOpenGLFramebufferObjects
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"QOpenGLFramebufferObject not supported on this platform"
argument_list|)
expr_stmt|;
name|QOpenGLFramebufferObject
name|fbo
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fbo
operator|.
name|bind
argument_list|()
argument_list|)
expr_stmt|;
name|QOpenGLPaintDevice
name|device
argument_list|(
name|size
argument_list|)
decl_stmt|;
comment|// QTBUG-15621 is only a problem when qreal is double, but do the test anyway.
name|qreal
name|delta
init|=
sizeof|sizeof
argument_list|(
name|qreal
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|float
argument_list|)
condition|?
literal|1e-4
else|:
literal|1e-8
decl_stmt|;
name|QVERIFY
argument_list|(
literal|128
operator|!=
literal|128
operator|+
name|delta
argument_list|)
expr_stmt|;
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|moveTo
argument_list|(
literal|16
operator|+
name|delta
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|path
operator|.
name|moveTo
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
literal|16
operator|+
name|delta
argument_list|,
literal|16
argument_list|)
expr_stmt|;
comment|// Short lines to check for division by zero.
name|path
operator|.
name|lineTo
argument_list|(
literal|112
operator|-
name|delta
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
literal|112
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|path
operator|.
name|quadTo
argument_list|(
literal|112
argument_list|,
literal|16
argument_list|,
literal|112
argument_list|,
literal|16
operator|+
name|delta
argument_list|)
expr_stmt|;
name|path
operator|.
name|quadTo
argument_list|(
literal|112
argument_list|,
literal|64
argument_list|,
literal|112
argument_list|,
literal|112
operator|-
name|delta
argument_list|)
expr_stmt|;
name|path
operator|.
name|quadTo
argument_list|(
literal|112
argument_list|,
literal|112
argument_list|,
literal|112
argument_list|,
literal|112
argument_list|)
expr_stmt|;
name|path
operator|.
name|cubicTo
argument_list|(
literal|112
argument_list|,
literal|112
argument_list|,
literal|112
argument_list|,
literal|112
argument_list|,
literal|112
operator|-
name|delta
argument_list|,
literal|112
argument_list|)
expr_stmt|;
name|path
operator|.
name|cubicTo
argument_list|(
literal|80
argument_list|,
literal|112
argument_list|,
literal|48
argument_list|,
literal|112
argument_list|,
literal|16
operator|+
name|delta
argument_list|,
literal|112
argument_list|)
expr_stmt|;
name|path
operator|.
name|cubicTo
argument_list|(
literal|16
operator|+
name|delta
argument_list|,
literal|112
argument_list|,
literal|16
operator|+
name|delta
argument_list|,
literal|112
argument_list|,
literal|16
argument_list|,
literal|112
argument_list|)
expr_stmt|;
name|path
operator|.
name|closeSubpath
argument_list|()
expr_stmt|;
name|QPen
name|pen
argument_list|(
name|Qt
operator|::
name|red
argument_list|,
literal|28
argument_list|,
name|Qt
operator|::
name|SolidLine
argument_list|,
name|Qt
operator|::
name|FlatCap
argument_list|,
name|Qt
operator|::
name|MiterJoin
argument_list|)
decl_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|device
argument_list|)
decl_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|size
argument_list|)
argument_list|,
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|p
operator|.
name|strokePath
argument_list|(
name|path
argument_list|,
name|pen
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
specifier|const
name|QImage
name|image
init|=
name|fbo
operator|.
name|toImage
argument_list|()
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|image
operator|.
name|size
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
specifier|const
name|QRgb
name|red
init|=
literal|0xffff0000
decl_stmt|;
specifier|const
name|QRgb
name|blue
init|=
literal|0xff0000ff
decl_stmt|;
name|QCOMPARE
argument_list|(
name|image
operator|.
name|pixel
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|)
argument_list|,
name|red
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|image
operator|.
name|pixel
argument_list|(
literal|119
argument_list|,
literal|8
argument_list|)
argument_list|,
name|red
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|image
operator|.
name|pixel
argument_list|(
literal|8
argument_list|,
literal|119
argument_list|)
argument_list|,
name|red
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|image
operator|.
name|pixel
argument_list|(
literal|119
argument_list|,
literal|119
argument_list|)
argument_list|,
name|red
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|image
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|blue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|image
operator|.
name|pixel
argument_list|(
literal|127
argument_list|,
literal|0
argument_list|)
argument_list|,
name|blue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|image
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|127
argument_list|)
argument_list|,
name|blue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|image
operator|.
name|pixel
argument_list|(
literal|127
argument_list|,
literal|127
argument_list|)
argument_list|,
name|blue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|image
operator|.
name|pixel
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|)
argument_list|,
name|blue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|image
operator|.
name|pixel
argument_list|(
literal|95
argument_list|,
literal|32
argument_list|)
argument_list|,
name|blue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|image
operator|.
name|pixel
argument_list|(
literal|32
argument_list|,
literal|95
argument_list|)
argument_list|,
name|blue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|image
operator|.
name|pixel
argument_list|(
literal|95
argument_list|,
literal|95
argument_list|)
argument_list|,
name|blue
argument_list|)
expr_stmt|;
block|}
end_function
begin_typedef
DECL|typedef|TestVertex3D
typedef|typedef
name|QGenericMatrix
argument_list|<
literal|1
argument_list|,
literal|3
argument_list|,
name|float
argument_list|>
name|TestVertex3D
typedef|;
end_typedef
begin_decl_stmt
DECL|variable|uv_top_left
specifier|static
specifier|const
name|float
name|uv_top_left
index|[]
init|=
block|{
literal|0.f
block|,
literal|1.f
block|,
literal|1.f
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|uv_bottom_left
specifier|static
specifier|const
name|float
name|uv_bottom_left
index|[]
init|=
block|{
literal|0.f
block|,
literal|0.f
block|,
literal|1.f
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|uv_top_right
specifier|static
specifier|const
name|float
name|uv_top_right
index|[]
init|=
block|{
literal|1.f
block|,
literal|1.f
block|,
literal|1.f
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|uv_bottom_right
specifier|static
specifier|const
name|float
name|uv_bottom_right
index|[]
init|=
block|{
literal|1.f
block|,
literal|0.f
block|,
literal|1.f
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|q_fuzzy_compare
name|bool
name|q_fuzzy_compare
parameter_list|(
specifier|const
name|TestVertex3D
modifier|&
name|left
parameter_list|,
specifier|const
name|TestVertex3D
modifier|&
name|right
parameter_list|)
block|{
return|return
name|qFuzzyCompare
argument_list|(
name|left
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|right
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|&&
name|qFuzzyCompare
argument_list|(
name|left
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|right
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|&&
name|qFuzzyCompare
argument_list|(
name|left
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|,
name|right
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|textureblitterFullSourceRectTransform
name|void
name|tst_QOpenGL
operator|::
name|textureblitterFullSourceRectTransform
parameter_list|()
block|{
name|TestVertex3D
name|topLeft
argument_list|(
name|uv_top_left
argument_list|)
decl_stmt|;
name|TestVertex3D
name|bottomLeft
argument_list|(
name|uv_bottom_left
argument_list|)
decl_stmt|;
name|TestVertex3D
name|topRight
argument_list|(
name|uv_top_right
argument_list|)
decl_stmt|;
name|TestVertex3D
name|bottomRight
argument_list|(
name|uv_bottom_right
argument_list|)
decl_stmt|;
name|QRectF
name|rect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QMatrix3x3
name|flippedMatrix
init|=
name|QOpenGLTextureBlitter
operator|::
name|sourceTransform
argument_list|(
name|rect
argument_list|,
name|rect
operator|.
name|size
argument_list|()
operator|.
name|toSize
argument_list|()
argument_list|,
name|QOpenGLTextureBlitter
operator|::
name|OriginTopLeft
argument_list|)
decl_stmt|;
name|TestVertex3D
name|flippedTopLeft
init|=
name|flippedMatrix
operator|*
name|topLeft
decl_stmt|;
name|QCOMPARE
argument_list|(
name|flippedTopLeft
argument_list|,
name|bottomLeft
argument_list|)
expr_stmt|;
name|TestVertex3D
name|flippedBottomLeft
init|=
name|flippedMatrix
operator|*
name|bottomLeft
decl_stmt|;
name|QCOMPARE
argument_list|(
name|flippedBottomLeft
argument_list|,
name|topLeft
argument_list|)
expr_stmt|;
name|TestVertex3D
name|flippedTopRight
init|=
name|flippedMatrix
operator|*
name|topRight
decl_stmt|;
name|QCOMPARE
argument_list|(
name|flippedTopRight
argument_list|,
name|bottomRight
argument_list|)
expr_stmt|;
name|TestVertex3D
name|flippedBottomRight
init|=
name|flippedMatrix
operator|*
name|bottomRight
decl_stmt|;
name|QCOMPARE
argument_list|(
name|flippedBottomRight
argument_list|,
name|topRight
argument_list|)
expr_stmt|;
name|QMatrix3x3
name|identityMatrix
init|=
name|QOpenGLTextureBlitter
operator|::
name|sourceTransform
argument_list|(
name|rect
argument_list|,
name|rect
operator|.
name|size
argument_list|()
operator|.
name|toSize
argument_list|()
argument_list|,
name|QOpenGLTextureBlitter
operator|::
name|OriginBottomLeft
argument_list|)
decl_stmt|;
name|TestVertex3D
name|notFlippedTopLeft
init|=
name|identityMatrix
operator|*
name|topLeft
decl_stmt|;
name|QCOMPARE
argument_list|(
name|notFlippedTopLeft
argument_list|,
name|topLeft
argument_list|)
expr_stmt|;
name|TestVertex3D
name|notFlippedBottomLeft
init|=
name|identityMatrix
operator|*
name|bottomLeft
decl_stmt|;
name|QCOMPARE
argument_list|(
name|notFlippedBottomLeft
argument_list|,
name|bottomLeft
argument_list|)
expr_stmt|;
name|TestVertex3D
name|notFlippedTopRight
init|=
name|identityMatrix
operator|*
name|topRight
decl_stmt|;
name|QCOMPARE
argument_list|(
name|notFlippedTopRight
argument_list|,
name|topRight
argument_list|)
expr_stmt|;
name|TestVertex3D
name|notFlippedBottomRight
init|=
name|identityMatrix
operator|*
name|bottomRight
decl_stmt|;
name|QCOMPARE
argument_list|(
name|notFlippedBottomRight
argument_list|,
name|bottomRight
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|textureblitterPartOriginBottomLeftSourceRectTransform
name|void
name|tst_QOpenGL
operator|::
name|textureblitterPartOriginBottomLeftSourceRectTransform
parameter_list|()
block|{
name|TestVertex3D
name|topLeft
argument_list|(
name|uv_top_left
argument_list|)
decl_stmt|;
name|TestVertex3D
name|bottomLeft
argument_list|(
name|uv_bottom_left
argument_list|)
decl_stmt|;
name|TestVertex3D
name|topRight
argument_list|(
name|uv_top_right
argument_list|)
decl_stmt|;
name|TestVertex3D
name|bottomRight
argument_list|(
name|uv_bottom_right
argument_list|)
decl_stmt|;
name|QRectF
name|sourceRect
argument_list|(
literal|50
argument_list|,
literal|200
argument_list|,
literal|200
argument_list|,
literal|200
argument_list|)
decl_stmt|;
name|QSize
name|textureSize
argument_list|(
literal|400
argument_list|,
literal|400
argument_list|)
decl_stmt|;
name|QMatrix3x3
name|sourceMatrix
init|=
name|QOpenGLTextureBlitter
operator|::
name|sourceTransform
argument_list|(
name|sourceRect
argument_list|,
name|textureSize
argument_list|,
name|QOpenGLTextureBlitter
operator|::
name|OriginBottomLeft
argument_list|)
decl_stmt|;
specifier|const
name|float
name|x_point_ratio
init|=
name|sourceRect
operator|.
name|topLeft
argument_list|()
operator|.
name|x
argument_list|()
operator|/
name|textureSize
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|float
name|y_point_ratio
init|=
name|sourceRect
operator|.
name|topLeft
argument_list|()
operator|.
name|y
argument_list|()
operator|/
name|textureSize
operator|.
name|height
argument_list|()
decl_stmt|;
specifier|const
name|float
name|width_ratio
init|=
name|sourceRect
operator|.
name|width
argument_list|()
operator|/
name|textureSize
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|float
name|height_ratio
init|=
name|sourceRect
operator|.
name|height
argument_list|()
operator|/
name|textureSize
operator|.
name|height
argument_list|()
decl_stmt|;
name|TestVertex3D
name|uvTopLeft
init|=
name|sourceMatrix
operator|*
name|topLeft
decl_stmt|;
specifier|const
name|float
name|expected_top_left
index|[]
init|=
block|{
name|x_point_ratio
block|,
name|y_point_ratio
operator|+
name|height_ratio
block|,
literal|1
block|}
decl_stmt|;
name|TestVertex3D
name|expectedTopLeft
argument_list|(
name|expected_top_left
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|uvTopLeft
argument_list|,
name|expectedTopLeft
argument_list|)
expr_stmt|;
name|TestVertex3D
name|uvBottomLeft
init|=
name|sourceMatrix
operator|*
name|bottomLeft
decl_stmt|;
specifier|const
name|float
name|expected_bottom_left
index|[]
init|=
block|{
name|x_point_ratio
block|,
name|y_point_ratio
block|,
literal|1
block|}
decl_stmt|;
name|TestVertex3D
name|expectedBottomLeft
argument_list|(
name|expected_bottom_left
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|uvBottomLeft
argument_list|,
name|expectedBottomLeft
argument_list|)
expr_stmt|;
name|TestVertex3D
name|uvTopRight
init|=
name|sourceMatrix
operator|*
name|topRight
decl_stmt|;
specifier|const
name|float
name|expected_top_right
index|[]
init|=
block|{
name|x_point_ratio
operator|+
name|width_ratio
block|,
name|y_point_ratio
operator|+
name|height_ratio
block|,
literal|1
block|}
decl_stmt|;
name|TestVertex3D
name|expectedTopRight
argument_list|(
name|expected_top_right
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|uvTopRight
argument_list|,
name|expectedTopRight
argument_list|)
expr_stmt|;
name|TestVertex3D
name|uvBottomRight
init|=
name|sourceMatrix
operator|*
name|bottomRight
decl_stmt|;
specifier|const
name|float
name|expected_bottom_right
index|[]
init|=
block|{
name|x_point_ratio
operator|+
name|width_ratio
block|,
name|y_point_ratio
block|,
literal|1
block|}
decl_stmt|;
name|TestVertex3D
name|expectedBottomRight
argument_list|(
name|expected_bottom_right
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|uvBottomRight
argument_list|,
name|expectedBottomRight
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|textureblitterPartOriginTopLeftSourceRectTransform
name|void
name|tst_QOpenGL
operator|::
name|textureblitterPartOriginTopLeftSourceRectTransform
parameter_list|()
block|{
name|TestVertex3D
name|topLeft
argument_list|(
name|uv_top_left
argument_list|)
decl_stmt|;
name|TestVertex3D
name|bottomLeft
argument_list|(
name|uv_bottom_left
argument_list|)
decl_stmt|;
name|TestVertex3D
name|topRight
argument_list|(
name|uv_top_right
argument_list|)
decl_stmt|;
name|TestVertex3D
name|bottomRight
argument_list|(
name|uv_bottom_right
argument_list|)
decl_stmt|;
name|QRectF
name|sourceRect
argument_list|(
literal|50
argument_list|,
literal|190
argument_list|,
literal|170
argument_list|,
literal|170
argument_list|)
decl_stmt|;
name|QSize
name|textureSize
argument_list|(
literal|400
argument_list|,
literal|400
argument_list|)
decl_stmt|;
name|QMatrix3x3
name|sourceMatrix
init|=
name|QOpenGLTextureBlitter
operator|::
name|sourceTransform
argument_list|(
name|sourceRect
argument_list|,
name|textureSize
argument_list|,
name|QOpenGLTextureBlitter
operator|::
name|OriginTopLeft
argument_list|)
decl_stmt|;
specifier|const
name|float
name|x_point_ratio
init|=
name|sourceRect
operator|.
name|topLeft
argument_list|()
operator|.
name|x
argument_list|()
operator|/
name|textureSize
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|float
name|y_point_ratio
init|=
name|sourceRect
operator|.
name|topLeft
argument_list|()
operator|.
name|y
argument_list|()
operator|/
name|textureSize
operator|.
name|height
argument_list|()
decl_stmt|;
specifier|const
name|float
name|width_ratio
init|=
name|sourceRect
operator|.
name|width
argument_list|()
operator|/
name|textureSize
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|float
name|height_ratio
init|=
name|sourceRect
operator|.
name|height
argument_list|()
operator|/
name|textureSize
operator|.
name|height
argument_list|()
decl_stmt|;
name|TestVertex3D
name|uvTopLeft
init|=
name|sourceMatrix
operator|*
name|topLeft
decl_stmt|;
specifier|const
name|float
name|expected_top_left
index|[]
init|=
block|{
name|x_point_ratio
block|,
literal|1
operator|-
name|y_point_ratio
operator|-
name|height_ratio
block|,
literal|1
block|}
decl_stmt|;
name|TestVertex3D
name|expectedTopLeft
argument_list|(
name|expected_top_left
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|q_fuzzy_compare
argument_list|(
name|uvTopLeft
argument_list|,
name|expectedTopLeft
argument_list|)
argument_list|)
expr_stmt|;
name|TestVertex3D
name|uvBottomLeft
init|=
name|sourceMatrix
operator|*
name|bottomLeft
decl_stmt|;
specifier|const
name|float
name|expected_bottom_left
index|[]
init|=
block|{
name|x_point_ratio
block|,
literal|1
operator|-
name|y_point_ratio
block|,
literal|1
block|}
decl_stmt|;
name|TestVertex3D
name|expectedBottomLeft
argument_list|(
name|expected_bottom_left
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|q_fuzzy_compare
argument_list|(
name|uvBottomLeft
argument_list|,
name|expectedBottomLeft
argument_list|)
argument_list|)
expr_stmt|;
name|TestVertex3D
name|uvTopRight
init|=
name|sourceMatrix
operator|*
name|topRight
decl_stmt|;
specifier|const
name|float
name|expected_top_right
index|[]
init|=
block|{
name|x_point_ratio
operator|+
name|width_ratio
block|,
literal|1
operator|-
name|y_point_ratio
operator|-
name|height_ratio
block|,
literal|1
block|}
decl_stmt|;
name|TestVertex3D
name|expectedTopRight
argument_list|(
name|expected_top_right
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|q_fuzzy_compare
argument_list|(
name|uvTopRight
argument_list|,
name|expectedTopRight
argument_list|)
argument_list|)
expr_stmt|;
name|TestVertex3D
name|uvBottomRight
init|=
name|sourceMatrix
operator|*
name|bottomRight
decl_stmt|;
specifier|const
name|float
name|expected_bottom_right
index|[]
init|=
block|{
name|x_point_ratio
operator|+
name|width_ratio
block|,
literal|1
operator|-
name|y_point_ratio
block|,
literal|1
block|}
decl_stmt|;
name|TestVertex3D
name|expectedBottomRight
argument_list|(
name|expected_bottom_right
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|q_fuzzy_compare
argument_list|(
name|uvBottomRight
argument_list|,
name|expectedBottomRight
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|textureblitterFullTargetRectTransform
name|void
name|tst_QOpenGL
operator|::
name|textureblitterFullTargetRectTransform
parameter_list|()
block|{
name|QVector4D
name|topLeft
argument_list|(
operator|-
literal|1.f
argument_list|,
literal|1.f
argument_list|,
literal|0.f
argument_list|,
literal|1.f
argument_list|)
decl_stmt|;
name|QVector4D
name|bottomLeft
argument_list|(
operator|-
literal|1.f
argument_list|,
operator|-
literal|1.f
argument_list|,
literal|0.f
argument_list|,
literal|1.f
argument_list|)
decl_stmt|;
name|QVector4D
name|topRight
argument_list|(
literal|1.f
argument_list|,
literal|1.f
argument_list|,
literal|0.f
argument_list|,
literal|1.f
argument_list|)
decl_stmt|;
name|QVector4D
name|bottomRight
argument_list|(
literal|1.f
argument_list|,
operator|-
literal|1.f
argument_list|,
literal|0.f
argument_list|,
literal|1.f
argument_list|)
decl_stmt|;
name|QRectF
name|rect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|200
argument_list|,
literal|200
argument_list|)
decl_stmt|;
name|QMatrix4x4
name|targetMatrix
init|=
name|QOpenGLTextureBlitter
operator|::
name|targetTransform
argument_list|(
name|rect
argument_list|,
name|rect
operator|.
name|toRect
argument_list|()
argument_list|)
decl_stmt|;
name|QVector4D
name|translatedTopLeft
init|=
name|targetMatrix
operator|*
name|topLeft
decl_stmt|;
name|QCOMPARE
argument_list|(
name|translatedTopLeft
argument_list|,
name|topLeft
argument_list|)
expr_stmt|;
name|QVector4D
name|translatedBottomLeft
init|=
name|targetMatrix
operator|*
name|bottomLeft
decl_stmt|;
name|QCOMPARE
argument_list|(
name|translatedBottomLeft
argument_list|,
name|bottomLeft
argument_list|)
expr_stmt|;
name|QVector4D
name|translatedTopRight
init|=
name|targetMatrix
operator|*
name|topRight
decl_stmt|;
name|QCOMPARE
argument_list|(
name|translatedTopRight
argument_list|,
name|topRight
argument_list|)
expr_stmt|;
name|QVector4D
name|translatedBottomRight
init|=
name|targetMatrix
operator|*
name|bottomRight
decl_stmt|;
name|QCOMPARE
argument_list|(
name|translatedBottomRight
argument_list|,
name|bottomRight
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|textureblitterPartTargetRectTransform
name|void
name|tst_QOpenGL
operator|::
name|textureblitterPartTargetRectTransform
parameter_list|()
block|{
name|QVector4D
name|topLeft
argument_list|(
operator|-
literal|1.f
argument_list|,
literal|1.f
argument_list|,
literal|0.f
argument_list|,
literal|1.f
argument_list|)
decl_stmt|;
name|QVector4D
name|bottomLeft
argument_list|(
operator|-
literal|1.f
argument_list|,
operator|-
literal|1.f
argument_list|,
literal|0.f
argument_list|,
literal|1.f
argument_list|)
decl_stmt|;
name|QVector4D
name|topRight
argument_list|(
literal|1.f
argument_list|,
literal|1.f
argument_list|,
literal|0.f
argument_list|,
literal|1.f
argument_list|)
decl_stmt|;
name|QVector4D
name|bottomRight
argument_list|(
literal|1.f
argument_list|,
operator|-
literal|1.f
argument_list|,
literal|0.f
argument_list|,
literal|1.f
argument_list|)
decl_stmt|;
name|QRectF
name|targetRect
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|,
literal|200
argument_list|,
literal|200
argument_list|)
decl_stmt|;
name|QRect
name|viewport
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|400
argument_list|,
literal|400
argument_list|)
decl_stmt|;
comment|//multiply by 2 since coordinate system goes from -1 -> 1;
name|qreal
name|x_point_ratio
init|=
operator|(
literal|50.
operator|/
literal|400.
operator|)
operator|*
literal|2
decl_stmt|;
name|qreal
name|y_point_ratio
init|=
operator|(
literal|50.
operator|/
literal|400.
operator|)
operator|*
literal|2
decl_stmt|;
name|qreal
name|width_ratio
init|=
operator|(
literal|200.
operator|/
literal|400.
operator|)
operator|*
literal|2
decl_stmt|;
name|qreal
name|height_ratio
init|=
operator|(
literal|200.
operator|/
literal|400.
operator|)
operator|*
literal|2
decl_stmt|;
name|QMatrix4x4
name|targetMatrix
init|=
name|QOpenGLTextureBlitter
operator|::
name|targetTransform
argument_list|(
name|targetRect
argument_list|,
name|viewport
argument_list|)
decl_stmt|;
name|QVector4D
name|targetTopLeft
init|=
name|targetMatrix
operator|*
name|topLeft
decl_stmt|;
name|QVector4D
name|expectedTopLeft
argument_list|(
operator|-
literal|1
operator|+
name|x_point_ratio
argument_list|,
literal|1
operator|-
name|y_point_ratio
argument_list|,
literal|.0
argument_list|,
literal|1.0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|targetTopLeft
argument_list|,
name|expectedTopLeft
argument_list|)
expr_stmt|;
name|QVector4D
name|targetBottomLeft
init|=
name|targetMatrix
operator|*
name|bottomLeft
decl_stmt|;
name|QVector4D
name|expectedBottomLeft
argument_list|(
operator|-
literal|1
operator|+
name|x_point_ratio
argument_list|,
literal|1
operator|-
name|y_point_ratio
operator|-
name|height_ratio
argument_list|,
literal|0.0
argument_list|,
literal|1.0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|targetBottomLeft
argument_list|,
name|expectedBottomLeft
argument_list|)
expr_stmt|;
name|QVector4D
name|targetTopRight
init|=
name|targetMatrix
operator|*
name|topRight
decl_stmt|;
name|QVector4D
name|expectedTopRight
argument_list|(
operator|-
literal|1
operator|+
name|x_point_ratio
operator|+
name|width_ratio
argument_list|,
literal|1
operator|-
name|y_point_ratio
argument_list|,
literal|0.0
argument_list|,
literal|1.0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|targetTopRight
argument_list|,
name|expectedTopRight
argument_list|)
expr_stmt|;
name|QVector4D
name|targetBottomRight
init|=
name|targetMatrix
operator|*
name|bottomRight
decl_stmt|;
name|QVector4D
name|expectedBottomRight
argument_list|(
operator|-
literal|1
operator|+
name|x_point_ratio
operator|+
name|width_ratio
argument_list|,
literal|1
operator|-
name|y_point_ratio
operator|-
name|height_ratio
argument_list|,
literal|0.0
argument_list|,
literal|1.0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|targetBottomRight
argument_list|,
name|expectedBottomRight
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|USE_GLX
end_ifdef
begin_function
DECL|function|glxContextWrap
name|void
name|tst_QOpenGL
operator|::
name|glxContextWrap
parameter_list|()
block|{
name|QWindow
modifier|*
name|window
init|=
operator|new
name|QWindow
decl_stmt|;
name|window
operator|->
name|setSurfaceType
argument_list|(
name|QWindow
operator|::
name|OpenGLSurface
argument_list|)
expr_stmt|;
name|window
operator|->
name|setGeometry
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|window
operator|->
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|QPlatformNativeInterface
modifier|*
name|nativeIf
init|=
name|QGuiApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|platformIntegration
argument_list|()
operator|->
name|nativeInterface
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|nativeIf
argument_list|)
expr_stmt|;
comment|// Fetch a GLXContext.
name|QOpenGLContext
modifier|*
name|ctx0
init|=
operator|new
name|QOpenGLContext
decl_stmt|;
name|ctx0
operator|->
name|setFormat
argument_list|(
name|window
operator|->
name|format
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ctx0
operator|->
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|QVariant
name|v
init|=
name|ctx0
operator|->
name|nativeHandle
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|canConvert
argument_list|<
name|QGLXNativeContext
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|GLXContext
name|context
init|=
name|v
operator|.
name|value
argument_list|<
name|QGLXNativeContext
argument_list|>
argument_list|()
operator|.
name|context
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// Then create another QOpenGLContext wrapping it.
name|QOpenGLContext
modifier|*
name|ctx
init|=
operator|new
name|QOpenGLContext
decl_stmt|;
name|ctx
operator|->
name|setNativeHandle
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|<
name|QGLXNativeContext
argument_list|>
argument_list|(
name|QGLXNativeContext
argument_list|(
name|context
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ctx
operator|->
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ctx
operator|->
name|nativeHandle
argument_list|()
operator|.
name|value
argument_list|<
name|QGLXNativeContext
argument_list|>
argument_list|()
operator|.
name|context
argument_list|()
operator|==
name|context
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nativeIf
operator|->
name|nativeResourceForContext
argument_list|(
name|QByteArrayLiteral
argument_list|(
literal|"glxcontext"
argument_list|)
argument_list|,
name|ctx
argument_list|)
operator|==
operator|(
name|void
operator|*
operator|)
name|context
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ctx
operator|->
name|makeCurrent
argument_list|(
name|window
argument_list|)
argument_list|)
expr_stmt|;
name|ctx
operator|->
name|doneCurrent
argument_list|()
expr_stmt|;
operator|delete
name|ctx
expr_stmt|;
operator|delete
name|ctx0
expr_stmt|;
operator|delete
name|window
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// USE_GLX
end_comment
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QOpenGL
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qopengl.moc"
end_include
end_unit
