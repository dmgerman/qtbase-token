begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmath.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qvector2d.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qvector3d.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qvector4d.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qmatrix4x4.h>
end_include
begin_class
DECL|class|tst_QVectorND
class|class
name|tst_QVectorND
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|tst_QVectorND
name|tst_QVectorND
parameter_list|()
block|{}
DECL|function|~tst_QVectorND
name|~
name|tst_QVectorND
parameter_list|()
block|{}
private|private
name|slots
private|:
name|void
name|create2
parameter_list|()
function_decl|;
name|void
name|create3
parameter_list|()
function_decl|;
name|void
name|create4
parameter_list|()
function_decl|;
name|void
name|modify2
parameter_list|()
function_decl|;
name|void
name|modify3
parameter_list|()
function_decl|;
name|void
name|modify4
parameter_list|()
function_decl|;
name|void
name|length2_data
parameter_list|()
function_decl|;
name|void
name|length2
parameter_list|()
function_decl|;
name|void
name|length3_data
parameter_list|()
function_decl|;
name|void
name|length3
parameter_list|()
function_decl|;
name|void
name|length4_data
parameter_list|()
function_decl|;
name|void
name|length4
parameter_list|()
function_decl|;
name|void
name|normalized2_data
parameter_list|()
function_decl|;
name|void
name|normalized2
parameter_list|()
function_decl|;
name|void
name|normalized3_data
parameter_list|()
function_decl|;
name|void
name|normalized3
parameter_list|()
function_decl|;
name|void
name|normalized4_data
parameter_list|()
function_decl|;
name|void
name|normalized4
parameter_list|()
function_decl|;
name|void
name|normalize2_data
parameter_list|()
function_decl|;
name|void
name|normalize2
parameter_list|()
function_decl|;
name|void
name|normalize3_data
parameter_list|()
function_decl|;
name|void
name|normalize3
parameter_list|()
function_decl|;
name|void
name|normalize4_data
parameter_list|()
function_decl|;
name|void
name|normalize4
parameter_list|()
function_decl|;
name|void
name|compare2
parameter_list|()
function_decl|;
name|void
name|compare3
parameter_list|()
function_decl|;
name|void
name|compare4
parameter_list|()
function_decl|;
name|void
name|add2_data
parameter_list|()
function_decl|;
name|void
name|add2
parameter_list|()
function_decl|;
name|void
name|add3_data
parameter_list|()
function_decl|;
name|void
name|add3
parameter_list|()
function_decl|;
name|void
name|add4_data
parameter_list|()
function_decl|;
name|void
name|add4
parameter_list|()
function_decl|;
name|void
name|subtract2_data
parameter_list|()
function_decl|;
name|void
name|subtract2
parameter_list|()
function_decl|;
name|void
name|subtract3_data
parameter_list|()
function_decl|;
name|void
name|subtract3
parameter_list|()
function_decl|;
name|void
name|subtract4_data
parameter_list|()
function_decl|;
name|void
name|subtract4
parameter_list|()
function_decl|;
name|void
name|multiply2_data
parameter_list|()
function_decl|;
name|void
name|multiply2
parameter_list|()
function_decl|;
name|void
name|multiply3_data
parameter_list|()
function_decl|;
name|void
name|multiply3
parameter_list|()
function_decl|;
name|void
name|multiply4_data
parameter_list|()
function_decl|;
name|void
name|multiply4
parameter_list|()
function_decl|;
name|void
name|multiplyFactor2_data
parameter_list|()
function_decl|;
name|void
name|multiplyFactor2
parameter_list|()
function_decl|;
name|void
name|multiplyFactor3_data
parameter_list|()
function_decl|;
name|void
name|multiplyFactor3
parameter_list|()
function_decl|;
name|void
name|multiplyFactor4_data
parameter_list|()
function_decl|;
name|void
name|multiplyFactor4
parameter_list|()
function_decl|;
name|void
name|divide2_data
parameter_list|()
function_decl|;
name|void
name|divide2
parameter_list|()
function_decl|;
name|void
name|divide3_data
parameter_list|()
function_decl|;
name|void
name|divide3
parameter_list|()
function_decl|;
name|void
name|divide4_data
parameter_list|()
function_decl|;
name|void
name|divide4
parameter_list|()
function_decl|;
name|void
name|negate2_data
parameter_list|()
function_decl|;
name|void
name|negate2
parameter_list|()
function_decl|;
name|void
name|negate3_data
parameter_list|()
function_decl|;
name|void
name|negate3
parameter_list|()
function_decl|;
name|void
name|negate4_data
parameter_list|()
function_decl|;
name|void
name|negate4
parameter_list|()
function_decl|;
name|void
name|crossProduct_data
parameter_list|()
function_decl|;
name|void
name|crossProduct
parameter_list|()
function_decl|;
name|void
name|normal_data
parameter_list|()
function_decl|;
name|void
name|normal
parameter_list|()
function_decl|;
name|void
name|distanceToPoint2_data
parameter_list|()
function_decl|;
name|void
name|distanceToPoint2
parameter_list|()
function_decl|;
name|void
name|distanceToPoint3_data
parameter_list|()
function_decl|;
name|void
name|distanceToPoint3
parameter_list|()
function_decl|;
name|void
name|distanceToPlane_data
parameter_list|()
function_decl|;
name|void
name|distanceToPlane
parameter_list|()
function_decl|;
name|void
name|distanceToLine2_data
parameter_list|()
function_decl|;
name|void
name|distanceToLine2
parameter_list|()
function_decl|;
name|void
name|distanceToLine3_data
parameter_list|()
function_decl|;
name|void
name|distanceToLine3
parameter_list|()
function_decl|;
name|void
name|dotProduct2_data
parameter_list|()
function_decl|;
name|void
name|dotProduct2
parameter_list|()
function_decl|;
name|void
name|dotProduct3_data
parameter_list|()
function_decl|;
name|void
name|dotProduct3
parameter_list|()
function_decl|;
name|void
name|dotProduct4_data
parameter_list|()
function_decl|;
name|void
name|dotProduct4
parameter_list|()
function_decl|;
name|void
name|project_data
parameter_list|()
function_decl|;
name|void
name|project
parameter_list|()
function_decl|;
name|void
name|unproject_data
parameter_list|()
function_decl|;
name|void
name|unproject
parameter_list|()
function_decl|;
name|void
name|properties
parameter_list|()
function_decl|;
name|void
name|metaTypes
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_comment
comment|// Test the creation of QVector2D objects in various ways:
end_comment
begin_comment
comment|// construct, copy, and modify.
end_comment
begin_function
DECL|function|create2
name|void
name|tst_QVectorND
operator|::
name|create2
parameter_list|()
block|{
name|QVector2D
name|null
decl_stmt|;
name|QCOMPARE
argument_list|(
name|null
operator|.
name|x
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|null
operator|.
name|y
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|null
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector2D
name|nullNegativeZero
argument_list|(
operator|-
literal|0.0f
argument_list|,
operator|-
literal|0.0f
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|nullNegativeZero
operator|.
name|x
argument_list|()
argument_list|,
operator|-
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nullNegativeZero
operator|.
name|y
argument_list|()
argument_list|,
operator|-
literal|0.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullNegativeZero
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector2D
name|v1
argument_list|(
literal|1.0f
argument_list|,
literal|2.5f
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector2D
name|v1i
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v1i
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1i
operator|.
name|y
argument_list|()
argument_list|,
literal|2.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1i
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector2D
name|v2
argument_list|(
name|v1
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v2
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector2D
name|v4
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|x
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|y
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v4
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|v4
operator|=
name|v1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v4
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector2D
name|v5
argument_list|(
name|QPoint
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v5
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v5
operator|.
name|y
argument_list|()
argument_list|,
literal|2.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v5
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector2D
name|v6
argument_list|(
name|QPointF
argument_list|(
literal|1
argument_list|,
literal|2.5
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v6
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v6
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v6
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector2D
name|v7
argument_list|(
name|QVector3D
argument_list|(
literal|1.0f
argument_list|,
literal|2.5f
argument_list|,
literal|54.25f
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v7
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v7
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v6
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector2D
name|v8
argument_list|(
name|QVector4D
argument_list|(
literal|1.0f
argument_list|,
literal|2.5f
argument_list|,
literal|54.25f
argument_list|,
literal|34.0f
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v8
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v8
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v6
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setX
argument_list|(
literal|3.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|x
argument_list|()
argument_list|,
literal|3.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setY
argument_list|(
literal|10.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|x
argument_list|()
argument_list|,
literal|3.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|y
argument_list|()
argument_list|,
literal|10.5f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setX
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setY
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|x
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|y
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QPoint
name|p1
init|=
name|v8
operator|.
name|toPoint
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|p1
operator|.
name|x
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p1
operator|.
name|y
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QPointF
name|p2
init|=
name|v8
operator|.
name|toPointF
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|p2
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p2
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QVector3D
name|v9
init|=
name|v8
operator|.
name|toVector3D
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v9
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v9
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v9
operator|.
name|z
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QVector4D
name|v10
init|=
name|v8
operator|.
name|toVector4D
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v10
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v10
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v10
operator|.
name|z
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v10
operator|.
name|w
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test the creation of QVector3D objects in various ways:
end_comment
begin_comment
comment|// construct, copy, and modify.
end_comment
begin_function
DECL|function|create3
name|void
name|tst_QVectorND
operator|::
name|create3
parameter_list|()
block|{
name|QVector3D
name|null
decl_stmt|;
name|QCOMPARE
argument_list|(
name|null
operator|.
name|x
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|null
operator|.
name|y
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|null
operator|.
name|z
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|null
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector3D
name|nullNegativeZero
argument_list|(
operator|-
literal|0.0f
argument_list|,
operator|-
literal|0.0f
argument_list|,
operator|-
literal|0.0f
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|nullNegativeZero
operator|.
name|x
argument_list|()
argument_list|,
operator|-
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nullNegativeZero
operator|.
name|y
argument_list|()
argument_list|,
operator|-
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nullNegativeZero
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|0.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullNegativeZero
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector3D
name|v1
argument_list|(
literal|1.0f
argument_list|,
literal|2.5f
argument_list|,
operator|-
literal|89.25f
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|89.25f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector3D
name|v1i
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
operator|-
literal|89
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v1i
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1i
operator|.
name|y
argument_list|()
argument_list|,
literal|2.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1i
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|89.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1i
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector3D
name|v2
argument_list|(
name|v1
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|89.25f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v2
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector3D
name|v3
argument_list|(
literal|1.0f
argument_list|,
literal|2.5f
argument_list|,
literal|0.0f
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|z
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v3
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector3D
name|v3i
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v3i
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3i
operator|.
name|y
argument_list|()
argument_list|,
literal|2.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3i
operator|.
name|z
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v3i
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector3D
name|v4
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|x
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|y
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|z
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v4
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|v4
operator|=
name|v1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|89.25f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v4
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector3D
name|v5
argument_list|(
name|QPoint
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v5
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v5
operator|.
name|y
argument_list|()
argument_list|,
literal|2.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v5
operator|.
name|z
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v5
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector3D
name|v6
argument_list|(
name|QPointF
argument_list|(
literal|1
argument_list|,
literal|2.5
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v6
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v6
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v6
operator|.
name|z
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v6
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector3D
name|v7
argument_list|(
name|QVector2D
argument_list|(
literal|1.0f
argument_list|,
literal|2.5f
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v7
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v7
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v7
operator|.
name|z
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v7
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector3D
name|v8
argument_list|(
name|QVector2D
argument_list|(
literal|1.0f
argument_list|,
literal|2.5f
argument_list|)
argument_list|,
literal|54.25f
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v8
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v8
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v8
operator|.
name|z
argument_list|()
argument_list|,
literal|54.25f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v8
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector3D
name|v9
argument_list|(
name|QVector4D
argument_list|(
literal|1.0f
argument_list|,
literal|2.5f
argument_list|,
literal|54.25f
argument_list|,
literal|34.0f
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v9
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v9
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v9
operator|.
name|z
argument_list|()
argument_list|,
literal|54.25f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v9
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setX
argument_list|(
literal|3.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|x
argument_list|()
argument_list|,
literal|3.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|89.25f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setY
argument_list|(
literal|10.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|x
argument_list|()
argument_list|,
literal|3.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|y
argument_list|()
argument_list|,
literal|10.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|89.25f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setZ
argument_list|(
literal|15.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|x
argument_list|()
argument_list|,
literal|3.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|y
argument_list|()
argument_list|,
literal|10.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|z
argument_list|()
argument_list|,
literal|15.5f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setX
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setY
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setZ
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|x
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|y
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|z
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QPoint
name|p1
init|=
name|v8
operator|.
name|toPoint
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|p1
operator|.
name|x
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p1
operator|.
name|y
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QPointF
name|p2
init|=
name|v8
operator|.
name|toPointF
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|p2
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p2
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QVector2D
name|v10
init|=
name|v8
operator|.
name|toVector2D
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v10
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v10
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QVector4D
name|v11
init|=
name|v8
operator|.
name|toVector4D
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v11
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v11
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v11
operator|.
name|z
argument_list|()
argument_list|,
literal|54.25f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v11
operator|.
name|w
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test the creation of QVector4D objects in various ways:
end_comment
begin_comment
comment|// construct, copy, and modify.
end_comment
begin_function
DECL|function|create4
name|void
name|tst_QVectorND
operator|::
name|create4
parameter_list|()
block|{
name|QVector4D
name|null
decl_stmt|;
name|QCOMPARE
argument_list|(
name|null
operator|.
name|x
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|null
operator|.
name|y
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|null
operator|.
name|z
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|null
operator|.
name|w
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|null
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector4D
name|nullNegativeZero
argument_list|(
operator|-
literal|0.0f
argument_list|,
operator|-
literal|0.0f
argument_list|,
operator|-
literal|0.0f
argument_list|,
operator|-
literal|0.0f
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|nullNegativeZero
operator|.
name|x
argument_list|()
argument_list|,
operator|-
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nullNegativeZero
operator|.
name|y
argument_list|()
argument_list|,
operator|-
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nullNegativeZero
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nullNegativeZero
operator|.
name|w
argument_list|()
argument_list|,
operator|-
literal|0.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullNegativeZero
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector4D
name|v1
argument_list|(
literal|1.0f
argument_list|,
literal|2.5f
argument_list|,
operator|-
literal|89.25f
argument_list|,
literal|34.0f
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|89.25f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|w
argument_list|()
argument_list|,
literal|34.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector4D
name|v1i
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
operator|-
literal|89
argument_list|,
literal|34
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v1i
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1i
operator|.
name|y
argument_list|()
argument_list|,
literal|2.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1i
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|89.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1i
operator|.
name|w
argument_list|()
argument_list|,
literal|34.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1i
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector4D
name|v2
argument_list|(
name|v1
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|89.25f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|w
argument_list|()
argument_list|,
literal|34.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v2
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector4D
name|v3
argument_list|(
literal|1.0f
argument_list|,
literal|2.5f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|z
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|w
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v3
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector4D
name|v3i
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v3i
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3i
operator|.
name|y
argument_list|()
argument_list|,
literal|2.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3i
operator|.
name|z
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3i
operator|.
name|w
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v3i
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector4D
name|v3b
argument_list|(
literal|1.0f
argument_list|,
literal|2.5f
argument_list|,
operator|-
literal|89.25f
argument_list|,
literal|0.0f
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v3b
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3b
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3b
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|89.25f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3b
operator|.
name|w
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v3b
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector4D
name|v3bi
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
operator|-
literal|89
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v3bi
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3bi
operator|.
name|y
argument_list|()
argument_list|,
literal|2.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3bi
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|89.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3bi
operator|.
name|w
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v3bi
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector4D
name|v4
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|x
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|y
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|z
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|w
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v4
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|v4
operator|=
name|v1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|89.25f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|w
argument_list|()
argument_list|,
literal|34.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v4
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector4D
name|v5
argument_list|(
name|QPoint
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v5
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v5
operator|.
name|y
argument_list|()
argument_list|,
literal|2.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v5
operator|.
name|z
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v5
operator|.
name|w
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v5
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector4D
name|v6
argument_list|(
name|QPointF
argument_list|(
literal|1
argument_list|,
literal|2.5
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v6
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v6
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v6
operator|.
name|z
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v6
operator|.
name|w
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v6
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector4D
name|v7
argument_list|(
name|QVector2D
argument_list|(
literal|1.0f
argument_list|,
literal|2.5f
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v7
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v7
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v7
operator|.
name|z
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v7
operator|.
name|w
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v7
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector4D
name|v8
argument_list|(
name|QVector3D
argument_list|(
literal|1.0f
argument_list|,
literal|2.5f
argument_list|,
operator|-
literal|89.25f
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v8
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v8
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v8
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|89.25f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v8
operator|.
name|w
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v8
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector4D
name|v9
argument_list|(
name|QVector3D
argument_list|(
literal|1.0f
argument_list|,
literal|2.5f
argument_list|,
operator|-
literal|89.25f
argument_list|)
argument_list|,
literal|34
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v9
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v9
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v9
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|89.25f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v9
operator|.
name|w
argument_list|()
argument_list|,
literal|34.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v9
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector4D
name|v10
argument_list|(
name|QVector2D
argument_list|(
literal|1.0f
argument_list|,
literal|2.5f
argument_list|)
argument_list|,
literal|23.5f
argument_list|,
operator|-
literal|8
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v10
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v10
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v10
operator|.
name|z
argument_list|()
argument_list|,
literal|23.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v10
operator|.
name|w
argument_list|()
argument_list|,
operator|-
literal|8.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v10
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setX
argument_list|(
literal|3.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|x
argument_list|()
argument_list|,
literal|3.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|89.25f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|w
argument_list|()
argument_list|,
literal|34.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setY
argument_list|(
literal|10.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|x
argument_list|()
argument_list|,
literal|3.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|y
argument_list|()
argument_list|,
literal|10.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|89.25f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|w
argument_list|()
argument_list|,
literal|34.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setZ
argument_list|(
literal|15.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|x
argument_list|()
argument_list|,
literal|3.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|y
argument_list|()
argument_list|,
literal|10.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|z
argument_list|()
argument_list|,
literal|15.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|w
argument_list|()
argument_list|,
literal|34.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setW
argument_list|(
literal|6.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|x
argument_list|()
argument_list|,
literal|3.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|y
argument_list|()
argument_list|,
literal|10.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|z
argument_list|()
argument_list|,
literal|15.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|w
argument_list|()
argument_list|,
literal|6.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setX
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setY
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setZ
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setW
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|x
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|y
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|z
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|w
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QPoint
name|p1
init|=
name|v8
operator|.
name|toPoint
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|p1
operator|.
name|x
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p1
operator|.
name|y
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QPointF
name|p2
init|=
name|v8
operator|.
name|toPointF
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|p2
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p2
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QVector2D
name|v11
init|=
name|v8
operator|.
name|toVector2D
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v11
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v11
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QVector3D
name|v12
init|=
name|v8
operator|.
name|toVector3D
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v12
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v12
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v12
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|89.25f
argument_list|)
expr_stmt|;
name|QVector2D
name|v13
init|=
name|v9
operator|.
name|toVector2DAffine
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|v13
operator|.
name|x
argument_list|()
argument_list|,
operator|(
literal|1.0f
operator|/
literal|34.0f
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|v13
operator|.
name|y
argument_list|()
argument_list|,
operator|(
literal|2.5f
operator|/
literal|34.0f
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVector4D
name|zerow
argument_list|(
literal|1.0f
argument_list|,
literal|2.0f
argument_list|,
literal|3.0f
argument_list|,
literal|0.0f
argument_list|)
decl_stmt|;
name|v13
operator|=
name|zerow
operator|.
name|toVector2DAffine
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|v13
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector3D
name|v14
init|=
name|v9
operator|.
name|toVector3DAffine
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|v14
operator|.
name|x
argument_list|()
argument_list|,
operator|(
literal|1.0f
operator|/
literal|34.0f
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|v14
operator|.
name|y
argument_list|()
argument_list|,
operator|(
literal|2.5f
operator|/
literal|34.0f
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|v14
operator|.
name|z
argument_list|()
argument_list|,
operator|(
operator|-
literal|89.25f
operator|/
literal|34.0f
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|v14
operator|=
name|zerow
operator|.
name|toVector3DAffine
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|v14
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test modifying vectors in various ways
end_comment
begin_function
DECL|function|modify2
name|void
name|tst_QVectorND
operator|::
name|modify2
parameter_list|()
block|{
specifier|const
name|float
name|e
init|=
literal|2.7182818f
decl_stmt|;
specifier|const
name|float
name|pi
init|=
literal|3.14159f
decl_stmt|;
specifier|const
name|QVector2D
name|p
argument_list|(
name|e
argument_list|,
name|pi
argument_list|)
decl_stmt|;
name|QVector2D
name|p1
decl_stmt|;
name|p1
operator|.
name|setX
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setY
argument_list|(
name|pi
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p
argument_list|,
name|p1
argument_list|)
argument_list|)
expr_stmt|;
name|QVector2D
name|p2
decl_stmt|;
name|p2
index|[
literal|0
index|]
operator|=
name|e
expr_stmt|;
name|p2
index|[
literal|1
index|]
operator|=
name|pi
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p
argument_list|,
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|QVector2D
name|p3
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
name|p3
index|[
name|i
index|]
operator|=
name|p
index|[
name|i
index|]
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p
argument_list|,
name|p3
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|modify3
name|void
name|tst_QVectorND
operator|::
name|modify3
parameter_list|()
block|{
specifier|const
name|float
name|one
init|=
literal|1.0f
decl_stmt|;
specifier|const
name|float
name|e
init|=
literal|2.7182818f
decl_stmt|;
specifier|const
name|float
name|pi
init|=
literal|3.14159f
decl_stmt|;
specifier|const
name|QVector3D
name|p
argument_list|(
name|one
argument_list|,
name|e
argument_list|,
name|pi
argument_list|)
decl_stmt|;
name|QVector3D
name|p1
decl_stmt|;
name|p1
operator|.
name|setX
argument_list|(
name|one
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setY
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setZ
argument_list|(
name|pi
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p
argument_list|,
name|p1
argument_list|)
argument_list|)
expr_stmt|;
name|QVector3D
name|p2
decl_stmt|;
name|p2
index|[
literal|0
index|]
operator|=
name|one
expr_stmt|;
name|p2
index|[
literal|1
index|]
operator|=
name|e
expr_stmt|;
name|p2
index|[
literal|2
index|]
operator|=
name|pi
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p
argument_list|,
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|QVector3D
name|p3
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
name|p3
index|[
name|i
index|]
operator|=
name|p
index|[
name|i
index|]
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p
argument_list|,
name|p3
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|modify4
name|void
name|tst_QVectorND
operator|::
name|modify4
parameter_list|()
block|{
specifier|const
name|float
name|one
init|=
literal|1.0f
decl_stmt|;
specifier|const
name|float
name|e
init|=
literal|2.7182818f
decl_stmt|;
specifier|const
name|float
name|pi
init|=
literal|3.14159f
decl_stmt|;
specifier|const
name|float
name|big
init|=
literal|1.0e6f
decl_stmt|;
specifier|const
name|QVector4D
name|p
argument_list|(
name|one
argument_list|,
name|e
argument_list|,
name|pi
argument_list|,
name|big
argument_list|)
decl_stmt|;
name|QVector4D
name|p1
decl_stmt|;
name|p1
operator|.
name|setX
argument_list|(
name|one
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setY
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setZ
argument_list|(
name|pi
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setW
argument_list|(
name|big
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p
argument_list|,
name|p1
argument_list|)
argument_list|)
expr_stmt|;
name|QVector4D
name|p2
decl_stmt|;
name|p2
index|[
literal|0
index|]
operator|=
name|one
expr_stmt|;
name|p2
index|[
literal|1
index|]
operator|=
name|e
expr_stmt|;
name|p2
index|[
literal|2
index|]
operator|=
name|pi
expr_stmt|;
name|p2
index|[
literal|3
index|]
operator|=
name|big
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p
argument_list|,
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|QVector4D
name|p3
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
name|p3
index|[
name|i
index|]
operator|=
name|p
index|[
name|i
index|]
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p
argument_list|,
name|p3
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test vector length computation for 2D vectors.
end_comment
begin_function
DECL|function|length2_data
name|void
name|tst_QVectorND
operator|::
name|length2_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"len"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1x"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1y"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|1.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1x"
argument_list|)
operator|<<
operator|-
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1y"
argument_list|)
operator|<<
literal|0.0f
operator|<<
operator|-
literal|1.0f
operator|<<
literal|1.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"two"
argument_list|)
operator|<<
literal|2.0f
operator|<<
operator|-
literal|2.0f
operator|<<
name|sqrtf
argument_list|(
literal|8.0f
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|length2
name|void
name|tst_QVectorND
operator|::
name|length2
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|QVector2D
name|v
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|length
argument_list|()
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|lengthSquared
argument_list|()
argument_list|,
name|x
operator|*
name|x
operator|+
name|y
operator|*
name|y
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test vector length computation for 3D vectors.
end_comment
begin_function
DECL|function|length3_data
name|void
name|tst_QVectorND
operator|::
name|length3_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"len"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1x"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1y"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1z"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|1.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1x"
argument_list|)
operator|<<
operator|-
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1y"
argument_list|)
operator|<<
literal|0.0f
operator|<<
operator|-
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1z"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
operator|-
literal|1.0f
operator|<<
literal|1.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"two"
argument_list|)
operator|<<
literal|2.0f
operator|<<
operator|-
literal|2.0f
operator|<<
literal|2.0f
operator|<<
name|sqrtf
argument_list|(
literal|12.0f
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|length3
name|void
name|tst_QVectorND
operator|::
name|length3
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|QVector3D
name|v
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|length
argument_list|()
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|lengthSquared
argument_list|()
argument_list|,
name|x
operator|*
name|x
operator|+
name|y
operator|*
name|y
operator|+
name|z
operator|*
name|z
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test vector length computation for 4D vectors.
end_comment
begin_function
DECL|function|length4_data
name|void
name|tst_QVectorND
operator|::
name|length4_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"w"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"len"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1x"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1y"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1z"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1w"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|1.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1x"
argument_list|)
operator|<<
operator|-
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1y"
argument_list|)
operator|<<
literal|0.0f
operator|<<
operator|-
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1z"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
operator|-
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1w"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
operator|-
literal|1.0f
operator|<<
literal|1.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"two"
argument_list|)
operator|<<
literal|2.0f
operator|<<
operator|-
literal|2.0f
operator|<<
literal|2.0f
operator|<<
literal|2.0f
operator|<<
name|sqrtf
argument_list|(
literal|16.0f
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|length4
name|void
name|tst_QVectorND
operator|::
name|length4
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|QVector4D
name|v
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|w
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|length
argument_list|()
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|lengthSquared
argument_list|()
argument_list|,
name|x
operator|*
name|x
operator|+
name|y
operator|*
name|y
operator|+
name|z
operator|*
name|z
operator|+
name|w
operator|*
name|w
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test the unit vector conversion for 2D vectors.
end_comment
begin_function
DECL|function|normalized2_data
name|void
name|tst_QVectorND
operator|::
name|normalized2_data
parameter_list|()
block|{
comment|// Use the same test data as the length test.
name|length2_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|normalized2
name|void
name|tst_QVectorND
operator|::
name|normalized2
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|QVector2D
name|v
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|QVector2D
name|u
init|=
name|v
operator|.
name|normalized
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|isNull
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|u
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|u
operator|.
name|length
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|u
operator|.
name|x
argument_list|()
operator|*
name|len
argument_list|,
name|v
operator|.
name|x
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|u
operator|.
name|y
argument_list|()
operator|*
name|len
argument_list|,
name|v
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test the unit vector conversion for 3D vectors.
end_comment
begin_function
DECL|function|normalized3_data
name|void
name|tst_QVectorND
operator|::
name|normalized3_data
parameter_list|()
block|{
comment|// Use the same test data as the length test.
name|length3_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|normalized3
name|void
name|tst_QVectorND
operator|::
name|normalized3
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|QVector3D
name|v
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
decl_stmt|;
name|QVector3D
name|u
init|=
name|v
operator|.
name|normalized
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|isNull
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|u
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|u
operator|.
name|length
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|u
operator|.
name|x
argument_list|()
operator|*
name|len
argument_list|,
name|v
operator|.
name|x
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|u
operator|.
name|y
argument_list|()
operator|*
name|len
argument_list|,
name|v
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|u
operator|.
name|z
argument_list|()
operator|*
name|len
argument_list|,
name|v
operator|.
name|z
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test the unit vector conversion for 4D vectors.
end_comment
begin_function
DECL|function|normalized4_data
name|void
name|tst_QVectorND
operator|::
name|normalized4_data
parameter_list|()
block|{
comment|// Use the same test data as the length test.
name|length4_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|normalized4
name|void
name|tst_QVectorND
operator|::
name|normalized4
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|QVector4D
name|v
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|w
argument_list|)
decl_stmt|;
name|QVector4D
name|u
init|=
name|v
operator|.
name|normalized
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|isNull
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|u
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|u
operator|.
name|length
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|u
operator|.
name|x
argument_list|()
operator|*
name|len
argument_list|,
name|v
operator|.
name|x
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|u
operator|.
name|y
argument_list|()
operator|*
name|len
argument_list|,
name|v
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|u
operator|.
name|z
argument_list|()
operator|*
name|len
argument_list|,
name|v
operator|.
name|z
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|u
operator|.
name|w
argument_list|()
operator|*
name|len
argument_list|,
name|v
operator|.
name|w
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test the unit vector conversion for 2D vectors.
end_comment
begin_function
DECL|function|normalize2_data
name|void
name|tst_QVectorND
operator|::
name|normalize2_data
parameter_list|()
block|{
comment|// Use the same test data as the length test.
name|length2_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|normalize2
name|void
name|tst_QVectorND
operator|::
name|normalize2
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|QVector2D
name|v
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|bool
name|isNull
init|=
name|v
operator|.
name|isNull
argument_list|()
decl_stmt|;
name|v
operator|.
name|normalize
argument_list|()
expr_stmt|;
if|if
condition|(
name|isNull
condition|)
name|QVERIFY
argument_list|(
name|v
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|v
operator|.
name|length
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test the unit vector conversion for 3D vectors.
end_comment
begin_function
DECL|function|normalize3_data
name|void
name|tst_QVectorND
operator|::
name|normalize3_data
parameter_list|()
block|{
comment|// Use the same test data as the length test.
name|length3_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|normalize3
name|void
name|tst_QVectorND
operator|::
name|normalize3
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|QVector3D
name|v
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
decl_stmt|;
name|bool
name|isNull
init|=
name|v
operator|.
name|isNull
argument_list|()
decl_stmt|;
name|v
operator|.
name|normalize
argument_list|()
expr_stmt|;
if|if
condition|(
name|isNull
condition|)
name|QVERIFY
argument_list|(
name|v
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|v
operator|.
name|length
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test the unit vector conversion for 4D vectors.
end_comment
begin_function
DECL|function|normalize4_data
name|void
name|tst_QVectorND
operator|::
name|normalize4_data
parameter_list|()
block|{
comment|// Use the same test data as the length test.
name|length4_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|normalize4
name|void
name|tst_QVectorND
operator|::
name|normalize4
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|QVector4D
name|v
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|w
argument_list|)
decl_stmt|;
name|bool
name|isNull
init|=
name|v
operator|.
name|isNull
argument_list|()
decl_stmt|;
name|v
operator|.
name|normalize
argument_list|()
expr_stmt|;
if|if
condition|(
name|isNull
condition|)
name|QVERIFY
argument_list|(
name|v
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|v
operator|.
name|length
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test the comparison operators for 2D vectors.
end_comment
begin_function
DECL|function|compare2
name|void
name|tst_QVectorND
operator|::
name|compare2
parameter_list|()
block|{
name|QVector2D
name|v1
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|QVector2D
name|v2
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|QVector2D
name|v3
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|QVector2D
name|v4
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|==
name|v2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|!=
name|v3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|!=
name|v4
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test the comparison operators for 3D vectors.
end_comment
begin_function
DECL|function|compare3
name|void
name|tst_QVectorND
operator|::
name|compare3
parameter_list|()
block|{
name|QVector3D
name|v1
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|QVector3D
name|v2
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|QVector3D
name|v3
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|QVector3D
name|v4
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|QVector3D
name|v5
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|==
name|v2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|!=
name|v3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|!=
name|v4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|!=
name|v5
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test the comparison operators for 4D vectors.
end_comment
begin_function
DECL|function|compare4
name|void
name|tst_QVectorND
operator|::
name|compare4
parameter_list|()
block|{
name|QVector4D
name|v1
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|QVector4D
name|v2
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|QVector4D
name|v3
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|QVector4D
name|v4
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|QVector4D
name|v5
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|QVector4D
name|v6
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|==
name|v2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|!=
name|v3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|!=
name|v4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|!=
name|v5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|!=
name|v6
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test vector addition for 2D vectors.
end_comment
begin_function
DECL|function|add2_data
name|void
name|tst_QVectorND
operator|::
name|add2_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"xonly"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|3.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yonly"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|3.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"all"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
literal|4.0f
operator|<<
literal|5.0f
operator|<<
literal|5.0f
operator|<<
literal|7.0f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|add2
name|void
name|tst_QVectorND
operator|::
name|add2
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y3
argument_list|)
expr_stmt|;
name|QVector2D
name|v1
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|)
decl_stmt|;
name|QVector2D
name|v2
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|)
decl_stmt|;
name|QVector2D
name|v3
argument_list|(
name|x3
argument_list|,
name|y3
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|v1
operator|+
name|v2
operator|)
operator|==
name|v3
argument_list|)
expr_stmt|;
name|QVector2D
name|v4
argument_list|(
name|v1
argument_list|)
decl_stmt|;
name|v4
operator|+=
name|v2
expr_stmt|;
name|QVERIFY
argument_list|(
name|v4
operator|==
name|v3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|x
argument_list|()
argument_list|,
name|v1
operator|.
name|x
argument_list|()
operator|+
name|v2
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|y
argument_list|()
argument_list|,
name|v1
operator|.
name|y
argument_list|()
operator|+
name|v2
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test vector addition for 3D vectors.
end_comment
begin_function
DECL|function|add3_data
name|void
name|tst_QVectorND
operator|::
name|add3_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"xonly"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|3.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yonly"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|3.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"zonly"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|3.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"all"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
literal|3.0f
operator|<<
literal|4.0f
operator|<<
literal|5.0f
operator|<<
operator|-
literal|6.0f
operator|<<
literal|5.0f
operator|<<
literal|7.0f
operator|<<
operator|-
literal|3.0f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|add3
name|void
name|tst_QVectorND
operator|::
name|add3
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z3
argument_list|)
expr_stmt|;
name|QVector3D
name|v1
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|z1
argument_list|)
decl_stmt|;
name|QVector3D
name|v2
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
name|z2
argument_list|)
decl_stmt|;
name|QVector3D
name|v3
argument_list|(
name|x3
argument_list|,
name|y3
argument_list|,
name|z3
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|v1
operator|+
name|v2
operator|)
operator|==
name|v3
argument_list|)
expr_stmt|;
name|QVector3D
name|v4
argument_list|(
name|v1
argument_list|)
decl_stmt|;
name|v4
operator|+=
name|v2
expr_stmt|;
name|QVERIFY
argument_list|(
name|v4
operator|==
name|v3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|x
argument_list|()
argument_list|,
name|v1
operator|.
name|x
argument_list|()
operator|+
name|v2
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|y
argument_list|()
argument_list|,
name|v1
operator|.
name|y
argument_list|()
operator|+
name|v2
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|z
argument_list|()
argument_list|,
name|v1
operator|.
name|z
argument_list|()
operator|+
name|v2
operator|.
name|z
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test vector addition for 4D vectors.
end_comment
begin_function
DECL|function|add4_data
name|void
name|tst_QVectorND
operator|::
name|add4_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"w1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"w2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"w3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"xonly"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|3.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yonly"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|3.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"zonly"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|3.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"wonly"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|3.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"all"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
literal|3.0f
operator|<<
literal|8.0f
operator|<<
literal|4.0f
operator|<<
literal|5.0f
operator|<<
operator|-
literal|6.0f
operator|<<
literal|9.0f
operator|<<
literal|5.0f
operator|<<
literal|7.0f
operator|<<
operator|-
literal|3.0f
operator|<<
literal|17.0f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|add4
name|void
name|tst_QVectorND
operator|::
name|add4
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w3
argument_list|)
expr_stmt|;
name|QVector4D
name|v1
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|z1
argument_list|,
name|w1
argument_list|)
decl_stmt|;
name|QVector4D
name|v2
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
name|z2
argument_list|,
name|w2
argument_list|)
decl_stmt|;
name|QVector4D
name|v3
argument_list|(
name|x3
argument_list|,
name|y3
argument_list|,
name|z3
argument_list|,
name|w3
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|v1
operator|+
name|v2
operator|)
operator|==
name|v3
argument_list|)
expr_stmt|;
name|QVector4D
name|v4
argument_list|(
name|v1
argument_list|)
decl_stmt|;
name|v4
operator|+=
name|v2
expr_stmt|;
name|QVERIFY
argument_list|(
name|v4
operator|==
name|v3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|x
argument_list|()
argument_list|,
name|v1
operator|.
name|x
argument_list|()
operator|+
name|v2
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|y
argument_list|()
argument_list|,
name|v1
operator|.
name|y
argument_list|()
operator|+
name|v2
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|z
argument_list|()
argument_list|,
name|v1
operator|.
name|z
argument_list|()
operator|+
name|v2
operator|.
name|z
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|w
argument_list|()
argument_list|,
name|v1
operator|.
name|w
argument_list|()
operator|+
name|v2
operator|.
name|w
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test vector subtraction for 2D vectors.
end_comment
begin_function
DECL|function|subtract2_data
name|void
name|tst_QVectorND
operator|::
name|subtract2_data
parameter_list|()
block|{
comment|// Use the same test data as the add test.
name|add2_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|subtract2
name|void
name|tst_QVectorND
operator|::
name|subtract2
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y3
argument_list|)
expr_stmt|;
name|QVector2D
name|v1
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|)
decl_stmt|;
name|QVector2D
name|v2
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|)
decl_stmt|;
name|QVector2D
name|v3
argument_list|(
name|x3
argument_list|,
name|y3
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|v3
operator|-
name|v1
operator|)
operator|==
name|v2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|v3
operator|-
name|v2
operator|)
operator|==
name|v1
argument_list|)
expr_stmt|;
name|QVector2D
name|v4
argument_list|(
name|v3
argument_list|)
decl_stmt|;
name|v4
operator|-=
name|v1
expr_stmt|;
name|QVERIFY
argument_list|(
name|v4
operator|==
name|v2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|x
argument_list|()
argument_list|,
name|v3
operator|.
name|x
argument_list|()
operator|-
name|v1
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|y
argument_list|()
argument_list|,
name|v3
operator|.
name|y
argument_list|()
operator|-
name|v1
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|QVector2D
name|v5
argument_list|(
name|v3
argument_list|)
decl_stmt|;
name|v5
operator|-=
name|v2
expr_stmt|;
name|QVERIFY
argument_list|(
name|v5
operator|==
name|v1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v5
operator|.
name|x
argument_list|()
argument_list|,
name|v3
operator|.
name|x
argument_list|()
operator|-
name|v2
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v5
operator|.
name|y
argument_list|()
argument_list|,
name|v3
operator|.
name|y
argument_list|()
operator|-
name|v2
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test vector subtraction for 3D vectors.
end_comment
begin_function
DECL|function|subtract3_data
name|void
name|tst_QVectorND
operator|::
name|subtract3_data
parameter_list|()
block|{
comment|// Use the same test data as the add test.
name|add3_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|subtract3
name|void
name|tst_QVectorND
operator|::
name|subtract3
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z3
argument_list|)
expr_stmt|;
name|QVector3D
name|v1
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|z1
argument_list|)
decl_stmt|;
name|QVector3D
name|v2
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
name|z2
argument_list|)
decl_stmt|;
name|QVector3D
name|v3
argument_list|(
name|x3
argument_list|,
name|y3
argument_list|,
name|z3
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|v3
operator|-
name|v1
operator|)
operator|==
name|v2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|v3
operator|-
name|v2
operator|)
operator|==
name|v1
argument_list|)
expr_stmt|;
name|QVector3D
name|v4
argument_list|(
name|v3
argument_list|)
decl_stmt|;
name|v4
operator|-=
name|v1
expr_stmt|;
name|QVERIFY
argument_list|(
name|v4
operator|==
name|v2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|x
argument_list|()
argument_list|,
name|v3
operator|.
name|x
argument_list|()
operator|-
name|v1
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|y
argument_list|()
argument_list|,
name|v3
operator|.
name|y
argument_list|()
operator|-
name|v1
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|z
argument_list|()
argument_list|,
name|v3
operator|.
name|z
argument_list|()
operator|-
name|v1
operator|.
name|z
argument_list|()
argument_list|)
expr_stmt|;
name|QVector3D
name|v5
argument_list|(
name|v3
argument_list|)
decl_stmt|;
name|v5
operator|-=
name|v2
expr_stmt|;
name|QVERIFY
argument_list|(
name|v5
operator|==
name|v1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v5
operator|.
name|x
argument_list|()
argument_list|,
name|v3
operator|.
name|x
argument_list|()
operator|-
name|v2
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v5
operator|.
name|y
argument_list|()
argument_list|,
name|v3
operator|.
name|y
argument_list|()
operator|-
name|v2
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v5
operator|.
name|z
argument_list|()
argument_list|,
name|v3
operator|.
name|z
argument_list|()
operator|-
name|v2
operator|.
name|z
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test vector subtraction for 4D vectors.
end_comment
begin_function
DECL|function|subtract4_data
name|void
name|tst_QVectorND
operator|::
name|subtract4_data
parameter_list|()
block|{
comment|// Use the same test data as the add test.
name|add4_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|subtract4
name|void
name|tst_QVectorND
operator|::
name|subtract4
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w3
argument_list|)
expr_stmt|;
name|QVector4D
name|v1
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|z1
argument_list|,
name|w1
argument_list|)
decl_stmt|;
name|QVector4D
name|v2
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
name|z2
argument_list|,
name|w2
argument_list|)
decl_stmt|;
name|QVector4D
name|v3
argument_list|(
name|x3
argument_list|,
name|y3
argument_list|,
name|z3
argument_list|,
name|w3
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|v3
operator|-
name|v1
operator|)
operator|==
name|v2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|v3
operator|-
name|v2
operator|)
operator|==
name|v1
argument_list|)
expr_stmt|;
name|QVector4D
name|v4
argument_list|(
name|v3
argument_list|)
decl_stmt|;
name|v4
operator|-=
name|v1
expr_stmt|;
name|QVERIFY
argument_list|(
name|v4
operator|==
name|v2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|x
argument_list|()
argument_list|,
name|v3
operator|.
name|x
argument_list|()
operator|-
name|v1
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|y
argument_list|()
argument_list|,
name|v3
operator|.
name|y
argument_list|()
operator|-
name|v1
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|z
argument_list|()
argument_list|,
name|v3
operator|.
name|z
argument_list|()
operator|-
name|v1
operator|.
name|z
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|w
argument_list|()
argument_list|,
name|v3
operator|.
name|w
argument_list|()
operator|-
name|v1
operator|.
name|w
argument_list|()
argument_list|)
expr_stmt|;
name|QVector4D
name|v5
argument_list|(
name|v3
argument_list|)
decl_stmt|;
name|v5
operator|-=
name|v2
expr_stmt|;
name|QVERIFY
argument_list|(
name|v5
operator|==
name|v1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v5
operator|.
name|x
argument_list|()
argument_list|,
name|v3
operator|.
name|x
argument_list|()
operator|-
name|v2
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v5
operator|.
name|y
argument_list|()
argument_list|,
name|v3
operator|.
name|y
argument_list|()
operator|-
name|v2
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v5
operator|.
name|z
argument_list|()
argument_list|,
name|v3
operator|.
name|z
argument_list|()
operator|-
name|v2
operator|.
name|z
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v5
operator|.
name|w
argument_list|()
argument_list|,
name|v3
operator|.
name|w
argument_list|()
operator|-
name|v2
operator|.
name|w
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test component-wise vector multiplication for 2D vectors.
end_comment
begin_function
DECL|function|multiply2_data
name|void
name|tst_QVectorND
operator|::
name|multiply2_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"xonly"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yonly"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"all"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
literal|4.0f
operator|<<
literal|5.0f
operator|<<
literal|4.0f
operator|<<
literal|10.0f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multiply2
name|void
name|tst_QVectorND
operator|::
name|multiply2
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y3
argument_list|)
expr_stmt|;
name|QVector2D
name|v1
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|)
decl_stmt|;
name|QVector2D
name|v2
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|)
decl_stmt|;
name|QVector2D
name|v3
argument_list|(
name|x3
argument_list|,
name|y3
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|v1
operator|*
name|v2
operator|)
operator|==
name|v3
argument_list|)
expr_stmt|;
name|QVector2D
name|v4
argument_list|(
name|v1
argument_list|)
decl_stmt|;
name|v4
operator|*=
name|v2
expr_stmt|;
name|QVERIFY
argument_list|(
name|v4
operator|==
name|v3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|x
argument_list|()
argument_list|,
name|v1
operator|.
name|x
argument_list|()
operator|*
name|v2
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|y
argument_list|()
argument_list|,
name|v1
operator|.
name|y
argument_list|()
operator|*
name|v2
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test component-wise vector multiplication for 3D vectors.
end_comment
begin_function
DECL|function|multiply3_data
name|void
name|tst_QVectorND
operator|::
name|multiply3_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"xonly"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yonly"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"zonly"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"all"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
literal|3.0f
operator|<<
literal|4.0f
operator|<<
literal|5.0f
operator|<<
operator|-
literal|6.0f
operator|<<
literal|4.0f
operator|<<
literal|10.0f
operator|<<
operator|-
literal|18.0f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multiply3
name|void
name|tst_QVectorND
operator|::
name|multiply3
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z3
argument_list|)
expr_stmt|;
name|QVector3D
name|v1
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|z1
argument_list|)
decl_stmt|;
name|QVector3D
name|v2
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
name|z2
argument_list|)
decl_stmt|;
name|QVector3D
name|v3
argument_list|(
name|x3
argument_list|,
name|y3
argument_list|,
name|z3
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|v1
operator|*
name|v2
operator|)
operator|==
name|v3
argument_list|)
expr_stmt|;
name|QVector3D
name|v4
argument_list|(
name|v1
argument_list|)
decl_stmt|;
name|v4
operator|*=
name|v2
expr_stmt|;
name|QVERIFY
argument_list|(
name|v4
operator|==
name|v3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|x
argument_list|()
argument_list|,
name|v1
operator|.
name|x
argument_list|()
operator|*
name|v2
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|y
argument_list|()
argument_list|,
name|v1
operator|.
name|y
argument_list|()
operator|*
name|v2
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|z
argument_list|()
argument_list|,
name|v1
operator|.
name|z
argument_list|()
operator|*
name|v2
operator|.
name|z
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test component-wise vector multiplication for 4D vectors.
end_comment
begin_function
DECL|function|multiply4_data
name|void
name|tst_QVectorND
operator|::
name|multiply4_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"w1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"w2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"w3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"xonly"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yonly"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"zonly"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"wonly"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"all"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
literal|3.0f
operator|<<
literal|8.0f
operator|<<
literal|4.0f
operator|<<
literal|5.0f
operator|<<
operator|-
literal|6.0f
operator|<<
literal|9.0f
operator|<<
literal|4.0f
operator|<<
literal|10.0f
operator|<<
operator|-
literal|18.0f
operator|<<
literal|72.0f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multiply4
name|void
name|tst_QVectorND
operator|::
name|multiply4
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w3
argument_list|)
expr_stmt|;
name|QVector4D
name|v1
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|z1
argument_list|,
name|w1
argument_list|)
decl_stmt|;
name|QVector4D
name|v2
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
name|z2
argument_list|,
name|w2
argument_list|)
decl_stmt|;
name|QVector4D
name|v3
argument_list|(
name|x3
argument_list|,
name|y3
argument_list|,
name|z3
argument_list|,
name|w3
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|v1
operator|*
name|v2
operator|)
operator|==
name|v3
argument_list|)
expr_stmt|;
name|QVector4D
name|v4
argument_list|(
name|v1
argument_list|)
decl_stmt|;
name|v4
operator|*=
name|v2
expr_stmt|;
name|QVERIFY
argument_list|(
name|v4
operator|==
name|v3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|x
argument_list|()
argument_list|,
name|v1
operator|.
name|x
argument_list|()
operator|*
name|v2
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|y
argument_list|()
argument_list|,
name|v1
operator|.
name|y
argument_list|()
operator|*
name|v2
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|z
argument_list|()
argument_list|,
name|v1
operator|.
name|z
argument_list|()
operator|*
name|v2
operator|.
name|z
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|w
argument_list|()
argument_list|,
name|v1
operator|.
name|w
argument_list|()
operator|*
name|v2
operator|.
name|w
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test vector multiplication by a factor for 2D vectors.
end_comment
begin_function
DECL|function|multiplyFactor2_data
name|void
name|tst_QVectorND
operator|::
name|multiplyFactor2_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"factor"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|100.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"xonly"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yonly"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"all"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
literal|2.0f
operator|<<
literal|2.0f
operator|<<
literal|4.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"allzero"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multiplyFactor2
name|void
name|tst_QVectorND
operator|::
name|multiplyFactor2
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|factor
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|QVector2D
name|v1
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|)
decl_stmt|;
name|QVector2D
name|v2
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|v1
operator|*
name|factor
operator|)
operator|==
name|v2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|factor
operator|*
name|v1
operator|)
operator|==
name|v2
argument_list|)
expr_stmt|;
name|QVector2D
name|v3
argument_list|(
name|v1
argument_list|)
decl_stmt|;
name|v3
operator|*=
name|factor
expr_stmt|;
name|QVERIFY
argument_list|(
name|v3
operator|==
name|v2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|x
argument_list|()
argument_list|,
name|v1
operator|.
name|x
argument_list|()
operator|*
name|factor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|y
argument_list|()
argument_list|,
name|v1
operator|.
name|y
argument_list|()
operator|*
name|factor
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test vector multiplication by a factor for 3D vectors.
end_comment
begin_function
DECL|function|multiplyFactor3_data
name|void
name|tst_QVectorND
operator|::
name|multiplyFactor3_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"factor"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|100.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"xonly"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yonly"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"zonly"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"all"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
operator|-
literal|3.0f
operator|<<
literal|2.0f
operator|<<
literal|2.0f
operator|<<
literal|4.0f
operator|<<
operator|-
literal|6.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"allzero"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
operator|-
literal|3.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multiplyFactor3
name|void
name|tst_QVectorND
operator|::
name|multiplyFactor3
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|factor
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z2
argument_list|)
expr_stmt|;
name|QVector3D
name|v1
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|z1
argument_list|)
decl_stmt|;
name|QVector3D
name|v2
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
name|z2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|v1
operator|*
name|factor
operator|)
operator|==
name|v2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|factor
operator|*
name|v1
operator|)
operator|==
name|v2
argument_list|)
expr_stmt|;
name|QVector3D
name|v3
argument_list|(
name|v1
argument_list|)
decl_stmt|;
name|v3
operator|*=
name|factor
expr_stmt|;
name|QVERIFY
argument_list|(
name|v3
operator|==
name|v2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|x
argument_list|()
argument_list|,
name|v1
operator|.
name|x
argument_list|()
operator|*
name|factor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|y
argument_list|()
argument_list|,
name|v1
operator|.
name|y
argument_list|()
operator|*
name|factor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|z
argument_list|()
argument_list|,
name|v1
operator|.
name|z
argument_list|()
operator|*
name|factor
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test vector multiplication by a factor for 4D vectors.
end_comment
begin_function
DECL|function|multiplyFactor4_data
name|void
name|tst_QVectorND
operator|::
name|multiplyFactor4_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"w1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"factor"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"w2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|100.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"xonly"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yonly"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"zonly"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"wonly"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"all"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
operator|-
literal|3.0f
operator|<<
literal|4.0f
operator|<<
literal|2.0f
operator|<<
literal|2.0f
operator|<<
literal|4.0f
operator|<<
operator|-
literal|6.0f
operator|<<
literal|8.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"allzero"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
operator|-
literal|3.0f
operator|<<
literal|4.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multiplyFactor4
name|void
name|tst_QVectorND
operator|::
name|multiplyFactor4
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|factor
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w2
argument_list|)
expr_stmt|;
name|QVector4D
name|v1
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|z1
argument_list|,
name|w1
argument_list|)
decl_stmt|;
name|QVector4D
name|v2
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
name|z2
argument_list|,
name|w2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|v1
operator|*
name|factor
operator|)
operator|==
name|v2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|factor
operator|*
name|v1
operator|)
operator|==
name|v2
argument_list|)
expr_stmt|;
name|QVector4D
name|v3
argument_list|(
name|v1
argument_list|)
decl_stmt|;
name|v3
operator|*=
name|factor
expr_stmt|;
name|QVERIFY
argument_list|(
name|v3
operator|==
name|v2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|x
argument_list|()
argument_list|,
name|v1
operator|.
name|x
argument_list|()
operator|*
name|factor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|y
argument_list|()
argument_list|,
name|v1
operator|.
name|y
argument_list|()
operator|*
name|factor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|z
argument_list|()
argument_list|,
name|v1
operator|.
name|z
argument_list|()
operator|*
name|factor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|w
argument_list|()
argument_list|,
name|v1
operator|.
name|w
argument_list|()
operator|*
name|factor
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test vector division by a factor for 2D vectors.
end_comment
begin_function
DECL|function|divide2_data
name|void
name|tst_QVectorND
operator|::
name|divide2_data
parameter_list|()
block|{
comment|// Use the same test data as the multiply test.
name|multiplyFactor2_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|divide2
name|void
name|tst_QVectorND
operator|::
name|divide2
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|factor
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|QVector2D
name|v1
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|)
decl_stmt|;
name|QVector2D
name|v2
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|)
decl_stmt|;
if|if
condition|(
name|factor
operator|==
literal|0.0f
condition|)
return|return;
name|QVERIFY
argument_list|(
operator|(
name|v2
operator|/
name|factor
operator|)
operator|==
name|v1
argument_list|)
expr_stmt|;
name|QVector2D
name|v3
argument_list|(
name|v2
argument_list|)
decl_stmt|;
name|v3
operator|/=
name|factor
expr_stmt|;
name|QVERIFY
argument_list|(
name|v3
operator|==
name|v1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|x
argument_list|()
argument_list|,
name|v2
operator|.
name|x
argument_list|()
operator|/
name|factor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|y
argument_list|()
argument_list|,
name|v2
operator|.
name|y
argument_list|()
operator|/
name|factor
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test vector division by a factor for 3D vectors.
end_comment
begin_function
DECL|function|divide3_data
name|void
name|tst_QVectorND
operator|::
name|divide3_data
parameter_list|()
block|{
comment|// Use the same test data as the multiply test.
name|multiplyFactor3_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|divide3
name|void
name|tst_QVectorND
operator|::
name|divide3
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|factor
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z2
argument_list|)
expr_stmt|;
name|QVector3D
name|v1
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|z1
argument_list|)
decl_stmt|;
name|QVector3D
name|v2
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
name|z2
argument_list|)
decl_stmt|;
if|if
condition|(
name|factor
operator|==
literal|0.0f
condition|)
return|return;
name|QVERIFY
argument_list|(
operator|(
name|v2
operator|/
name|factor
operator|)
operator|==
name|v1
argument_list|)
expr_stmt|;
name|QVector3D
name|v3
argument_list|(
name|v2
argument_list|)
decl_stmt|;
name|v3
operator|/=
name|factor
expr_stmt|;
name|QVERIFY
argument_list|(
name|v3
operator|==
name|v1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|x
argument_list|()
argument_list|,
name|v2
operator|.
name|x
argument_list|()
operator|/
name|factor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|y
argument_list|()
argument_list|,
name|v2
operator|.
name|y
argument_list|()
operator|/
name|factor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|z
argument_list|()
argument_list|,
name|v2
operator|.
name|z
argument_list|()
operator|/
name|factor
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test vector division by a factor for 4D vectors.
end_comment
begin_function
DECL|function|divide4_data
name|void
name|tst_QVectorND
operator|::
name|divide4_data
parameter_list|()
block|{
comment|// Use the same test data as the multiply test.
name|multiplyFactor4_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|divide4
name|void
name|tst_QVectorND
operator|::
name|divide4
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|factor
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w2
argument_list|)
expr_stmt|;
name|QVector4D
name|v1
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|z1
argument_list|,
name|w1
argument_list|)
decl_stmt|;
name|QVector4D
name|v2
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
name|z2
argument_list|,
name|w2
argument_list|)
decl_stmt|;
if|if
condition|(
name|factor
operator|==
literal|0.0f
condition|)
return|return;
name|QVERIFY
argument_list|(
operator|(
name|v2
operator|/
name|factor
operator|)
operator|==
name|v1
argument_list|)
expr_stmt|;
name|QVector4D
name|v3
argument_list|(
name|v2
argument_list|)
decl_stmt|;
name|v3
operator|/=
name|factor
expr_stmt|;
name|QVERIFY
argument_list|(
name|v3
operator|==
name|v1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|x
argument_list|()
argument_list|,
name|v2
operator|.
name|x
argument_list|()
operator|/
name|factor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|y
argument_list|()
argument_list|,
name|v2
operator|.
name|y
argument_list|()
operator|/
name|factor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|z
argument_list|()
argument_list|,
name|v2
operator|.
name|z
argument_list|()
operator|/
name|factor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|w
argument_list|()
argument_list|,
name|v2
operator|.
name|w
argument_list|()
operator|/
name|factor
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test vector negation for 2D vectors.
end_comment
begin_function
DECL|function|negate2_data
name|void
name|tst_QVectorND
operator|::
name|negate2_data
parameter_list|()
block|{
comment|// Use the same test data as the add test.
name|add2_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|negate2
name|void
name|tst_QVectorND
operator|::
name|negate2
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QVector2D
name|v1
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|)
decl_stmt|;
name|QVector2D
name|v2
argument_list|(
operator|-
name|x1
argument_list|,
operator|-
name|y1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|-
name|v1
operator|==
name|v2
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test vector negation for 3D vectors.
end_comment
begin_function
DECL|function|negate3_data
name|void
name|tst_QVectorND
operator|::
name|negate3_data
parameter_list|()
block|{
comment|// Use the same test data as the add test.
name|add3_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|negate3
name|void
name|tst_QVectorND
operator|::
name|negate3
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z1
argument_list|)
expr_stmt|;
name|QVector3D
name|v1
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|z1
argument_list|)
decl_stmt|;
name|QVector3D
name|v2
argument_list|(
operator|-
name|x1
argument_list|,
operator|-
name|y1
argument_list|,
operator|-
name|z1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|-
name|v1
operator|==
name|v2
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test vector negation for 4D vectors.
end_comment
begin_function
DECL|function|negate4_data
name|void
name|tst_QVectorND
operator|::
name|negate4_data
parameter_list|()
block|{
comment|// Use the same test data as the add test.
name|add4_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|negate4
name|void
name|tst_QVectorND
operator|::
name|negate4
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w1
argument_list|)
expr_stmt|;
name|QVector4D
name|v1
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|z1
argument_list|,
name|w1
argument_list|)
decl_stmt|;
name|QVector4D
name|v2
argument_list|(
operator|-
name|x1
argument_list|,
operator|-
name|y1
argument_list|,
operator|-
name|z1
argument_list|,
operator|-
name|w1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|-
name|v1
operator|==
name|v2
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test the computation of vector cross-products.
end_comment
begin_function
DECL|function|crossProduct_data
name|void
name|tst_QVectorND
operator|::
name|crossProduct_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"dot"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unitvec"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"complex"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
literal|3.0f
operator|<<
literal|4.0f
operator|<<
literal|5.0f
operator|<<
literal|6.0f
operator|<<
operator|-
literal|3.0f
operator|<<
literal|6.0f
operator|<<
operator|-
literal|3.0f
operator|<<
literal|32.0f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|crossProduct
name|void
name|tst_QVectorND
operator|::
name|crossProduct
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z3
argument_list|)
expr_stmt|;
name|QVector3D
name|v1
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|z1
argument_list|)
decl_stmt|;
name|QVector3D
name|v2
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
name|z2
argument_list|)
decl_stmt|;
name|QVector3D
name|v3
argument_list|(
name|x3
argument_list|,
name|y3
argument_list|,
name|z3
argument_list|)
decl_stmt|;
name|QVector3D
name|v4
init|=
name|QVector3D
operator|::
name|crossProduct
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|v4
operator|==
name|v3
argument_list|)
expr_stmt|;
comment|// Compute the cross-product long-hand and check again.
name|float
name|xres
init|=
name|y1
operator|*
name|z2
operator|-
name|z1
operator|*
name|y2
decl_stmt|;
name|float
name|yres
init|=
name|z1
operator|*
name|x2
operator|-
name|x1
operator|*
name|z2
decl_stmt|;
name|float
name|zres
init|=
name|x1
operator|*
name|y2
operator|-
name|y1
operator|*
name|x2
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|x
argument_list|()
argument_list|,
name|xres
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|y
argument_list|()
argument_list|,
name|yres
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|z
argument_list|()
argument_list|,
name|zres
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test the computation of normals.
end_comment
begin_function
DECL|function|normal_data
name|void
name|tst_QVectorND
operator|::
name|normal_data
parameter_list|()
block|{
comment|// Use the same test data as the crossProduct test.
name|crossProduct_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|normal
name|void
name|tst_QVectorND
operator|::
name|normal
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z3
argument_list|)
expr_stmt|;
name|QVector3D
name|v1
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|z1
argument_list|)
decl_stmt|;
name|QVector3D
name|v2
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
name|z2
argument_list|)
decl_stmt|;
name|QVector3D
name|v3
argument_list|(
name|x3
argument_list|,
name|y3
argument_list|,
name|z3
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QVector3D
operator|::
name|normal
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
operator|==
name|v3
operator|.
name|normalized
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QVector3D
operator|::
name|normal
argument_list|(
name|QVector3D
argument_list|()
argument_list|,
name|v1
argument_list|,
name|v2
argument_list|)
operator|==
name|v3
operator|.
name|normalized
argument_list|()
argument_list|)
expr_stmt|;
name|QVector3D
name|point
argument_list|(
literal|1.0f
argument_list|,
literal|2.0f
argument_list|,
literal|3.0f
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QVector3D
operator|::
name|normal
argument_list|(
name|point
argument_list|,
name|v1
operator|+
name|point
argument_list|,
name|v2
operator|+
name|point
argument_list|)
operator|==
name|v3
operator|.
name|normalized
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test distance to point calculations.
end_comment
begin_function
DECL|function|distanceToPoint2_data
name|void
name|tst_QVectorND
operator|::
name|distanceToPoint2_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x1"
argument_list|)
expr_stmt|;
comment|// Point to test for distance
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x2"
argument_list|)
expr_stmt|;
comment|// Point to test against
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"distance"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|1.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"on point"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|1.0f
operator|<<
literal|1.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"off point"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|1.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"off point 2"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|2.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"minus point"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
operator|-
literal|2.0f
operator|<<
literal|2.0f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|distanceToPoint2
name|void
name|tst_QVectorND
operator|::
name|distanceToPoint2
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|distance
argument_list|)
expr_stmt|;
name|QVector2D
name|v1
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|)
decl_stmt|;
name|QVector2D
name|v2
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|distanceToPoint
argument_list|(
name|v2
argument_list|)
argument_list|,
name|distance
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test distance to point calculations.
end_comment
begin_function
DECL|function|distanceToPoint3_data
name|void
name|tst_QVectorND
operator|::
name|distanceToPoint3_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x1"
argument_list|)
expr_stmt|;
comment|// Point to test for distance
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x2"
argument_list|)
expr_stmt|;
comment|// Point to test against
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"distance"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|1.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"on point"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"off point"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|1.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"off point 2"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"minus point"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
operator|-
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|distanceToPoint3
name|void
name|tst_QVectorND
operator|::
name|distanceToPoint3
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|distance
argument_list|)
expr_stmt|;
name|QVector3D
name|v1
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|z1
argument_list|)
decl_stmt|;
name|QVector3D
name|v2
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
name|z2
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|distanceToPoint
argument_list|(
name|v2
argument_list|)
argument_list|,
name|distance
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test distance to plane calculations.
end_comment
begin_function
DECL|function|distanceToPlane_data
name|void
name|tst_QVectorND
operator|::
name|distanceToPlane_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x1"
argument_list|)
expr_stmt|;
comment|// Point on plane
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x2"
argument_list|)
expr_stmt|;
comment|// Normal to plane
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x3"
argument_list|)
expr_stmt|;
comment|// Point to test for distance
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x4"
argument_list|)
expr_stmt|;
comment|// Second point on plane
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y4"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z4"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x5"
argument_list|)
expr_stmt|;
comment|// Third point on plane
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y5"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z5"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"distance"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"above"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"below"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
operator|-
literal|1.0f
operator|<<
literal|1.0f
operator|<<
operator|-
literal|2.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
operator|-
literal|2.0f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|distanceToPlane
name|void
name|tst_QVectorND
operator|::
name|distanceToPlane
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x4
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y4
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z4
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x5
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y5
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z5
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|distance
argument_list|)
expr_stmt|;
name|QVector3D
name|v1
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|z1
argument_list|)
decl_stmt|;
name|QVector3D
name|v2
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
name|z2
argument_list|)
decl_stmt|;
name|QVector3D
name|v3
argument_list|(
name|x3
argument_list|,
name|y3
argument_list|,
name|z3
argument_list|)
decl_stmt|;
name|QVector3D
name|v4
argument_list|(
name|x4
argument_list|,
name|y4
argument_list|,
name|z4
argument_list|)
decl_stmt|;
name|QVector3D
name|v5
argument_list|(
name|x5
argument_list|,
name|y5
argument_list|,
name|z5
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|distanceToPlane
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
argument_list|,
name|distance
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|distanceToPlane
argument_list|(
name|v1
argument_list|,
name|v4
argument_list|,
name|v5
argument_list|)
argument_list|,
name|distance
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test distance to line calculations.
end_comment
begin_function
DECL|function|distanceToLine2_data
name|void
name|tst_QVectorND
operator|::
name|distanceToLine2_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x1"
argument_list|)
expr_stmt|;
comment|// Point on line
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x2"
argument_list|)
expr_stmt|;
comment|// Direction of the line
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x3"
argument_list|)
expr_stmt|;
comment|// Point to test for distance
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"distance"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.1f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"on line"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|5.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"off line"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"off line 2"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
operator|-
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"points"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|5.0f
operator|<<
literal|5.0f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|distanceToLine2
name|void
name|tst_QVectorND
operator|::
name|distanceToLine2
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|distance
argument_list|)
expr_stmt|;
name|QVector2D
name|v1
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|)
decl_stmt|;
name|QVector2D
name|v2
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|)
decl_stmt|;
name|QVector2D
name|v3
argument_list|(
name|x3
argument_list|,
name|y3
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|distanceToLine
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
argument_list|,
name|distance
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test distance to line calculations.
end_comment
begin_function
DECL|function|distanceToLine3_data
name|void
name|tst_QVectorND
operator|::
name|distanceToLine3_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x1"
argument_list|)
expr_stmt|;
comment|// Point on line
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x2"
argument_list|)
expr_stmt|;
comment|// Direction of the line
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x3"
argument_list|)
expr_stmt|;
comment|// Point to test for distance
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"distance"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"on line"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|5.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"off line"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"off line 2"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
operator|-
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"points"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|5.0f
operator|<<
literal|0.0f
operator|<<
literal|5.0f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|distanceToLine3
name|void
name|tst_QVectorND
operator|::
name|distanceToLine3
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|distance
argument_list|)
expr_stmt|;
name|QVector3D
name|v1
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|z1
argument_list|)
decl_stmt|;
name|QVector3D
name|v2
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
name|z2
argument_list|)
decl_stmt|;
name|QVector3D
name|v3
argument_list|(
name|x3
argument_list|,
name|y3
argument_list|,
name|z3
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|distanceToLine
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
argument_list|,
name|distance
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test the computation of dot products for 2D vectors.
end_comment
begin_function
DECL|function|dotProduct2_data
name|void
name|tst_QVectorND
operator|::
name|dotProduct2_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"dot"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unitvec"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"complex"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
literal|4.0f
operator|<<
literal|5.0f
operator|<<
literal|14.0f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dotProduct2
name|void
name|tst_QVectorND
operator|::
name|dotProduct2
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|dot
argument_list|)
expr_stmt|;
name|QVector2D
name|v1
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|)
decl_stmt|;
name|QVector2D
name|v2
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QVector2D
operator|::
name|dotProduct
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
operator|==
name|dot
argument_list|)
expr_stmt|;
comment|// Compute the dot-product long-hand and check again.
name|float
name|d
init|=
name|x1
operator|*
name|x2
operator|+
name|y1
operator|*
name|y2
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QVector2D
operator|::
name|dotProduct
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test the computation of dot products for 3D vectors.
end_comment
begin_function
DECL|function|dotProduct3_data
name|void
name|tst_QVectorND
operator|::
name|dotProduct3_data
parameter_list|()
block|{
comment|// Use the same test data as the crossProduct test.
name|crossProduct_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dotProduct3
name|void
name|tst_QVectorND
operator|::
name|dotProduct3
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|dot
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|x3
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|y3
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|z3
argument_list|)
expr_stmt|;
name|QVector3D
name|v1
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|z1
argument_list|)
decl_stmt|;
name|QVector3D
name|v2
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
name|z2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QVector3D
operator|::
name|dotProduct
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
operator|==
name|dot
argument_list|)
expr_stmt|;
comment|// Compute the dot-product long-hand and check again.
name|float
name|d
init|=
name|x1
operator|*
name|x2
operator|+
name|y1
operator|*
name|y2
operator|+
name|z1
operator|*
name|z2
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QVector3D
operator|::
name|dotProduct
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test the computation of dot products for 4D vectors.
end_comment
begin_function
DECL|function|dotProduct4_data
name|void
name|tst_QVectorND
operator|::
name|dotProduct4_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"w1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"w2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"dot"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unitvec"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"complex"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
literal|3.0f
operator|<<
literal|4.0f
operator|<<
literal|4.0f
operator|<<
literal|5.0f
operator|<<
literal|6.0f
operator|<<
literal|7.0f
operator|<<
literal|60.0f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dotProduct4
name|void
name|tst_QVectorND
operator|::
name|dotProduct4
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|dot
argument_list|)
expr_stmt|;
name|QVector4D
name|v1
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|z1
argument_list|,
name|w1
argument_list|)
decl_stmt|;
name|QVector4D
name|v2
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
name|z2
argument_list|,
name|w2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QVector4D
operator|::
name|dotProduct
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
operator|==
name|dot
argument_list|)
expr_stmt|;
comment|// Compute the dot-product long-hand and check again.
name|float
name|d
init|=
name|x1
operator|*
name|x2
operator|+
name|y1
operator|*
name|y2
operator|+
name|z1
operator|*
name|z2
operator|+
name|w1
operator|*
name|w2
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QVector4D
operator|::
name|dotProduct
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|project_data
name|void
name|tst_QVectorND
operator|::
name|project_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVector3D
argument_list|>
argument_list|(
literal|"point"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QRect
argument_list|>
argument_list|(
literal|"viewport"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QMatrix4x4
argument_list|>
argument_list|(
literal|"projection"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QMatrix4x4
argument_list|>
argument_list|(
literal|"view"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVector2D
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|projection
decl_stmt|;
name|projection
operator|.
name|ortho
argument_list|(
operator|-
literal|1.0f
argument_list|,
literal|1.0f
argument_list|,
operator|-
literal|1.0f
argument_list|,
literal|1.0f
argument_list|,
literal|0.1f
argument_list|,
literal|1000.0f
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|view
decl_stmt|;
comment|// Located at (0, 0, 10), looking at origin, y is up
name|view
operator|.
name|lookAt
argument_list|(
name|QVector3D
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|10.0f
argument_list|)
argument_list|,
name|QVector3D
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|)
argument_list|,
name|QVector3D
argument_list|(
literal|0.0f
argument_list|,
literal|1.0f
argument_list|,
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|nullMatrix
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"center"
argument_list|)
operator|<<
name|QVector3D
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|800.0f
argument_list|,
literal|600.0f
argument_list|)
operator|<<
name|projection
operator|<<
name|view
operator|<<
name|QVector2D
argument_list|(
literal|400.0f
argument_list|,
literal|300.0f
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"topLeft"
argument_list|)
operator|<<
name|QVector3D
argument_list|(
operator|-
literal|1.0f
argument_list|,
literal|1.0f
argument_list|,
literal|0.0f
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|800.0f
argument_list|,
literal|600.0f
argument_list|)
operator|<<
name|projection
operator|<<
name|view
operator|<<
name|QVector2D
argument_list|(
literal|0.0f
argument_list|,
literal|600.0f
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"topRight"
argument_list|)
operator|<<
name|QVector3D
argument_list|(
literal|1.0f
argument_list|,
literal|1.0f
argument_list|,
literal|0.0f
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|800.0f
argument_list|,
literal|600.0f
argument_list|)
operator|<<
name|projection
operator|<<
name|view
operator|<<
name|QVector2D
argument_list|(
literal|800.0f
argument_list|,
literal|600.0f
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bottomLeft"
argument_list|)
operator|<<
name|QVector3D
argument_list|(
operator|-
literal|1.0f
argument_list|,
operator|-
literal|1.0f
argument_list|,
literal|0.0f
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|800.0f
argument_list|,
literal|600.0f
argument_list|)
operator|<<
name|projection
operator|<<
name|view
operator|<<
name|QVector2D
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bottomRight"
argument_list|)
operator|<<
name|QVector3D
argument_list|(
literal|1.0f
argument_list|,
operator|-
literal|1.0f
argument_list|,
literal|0.0f
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|800.0f
argument_list|,
literal|600.0f
argument_list|)
operator|<<
name|projection
operator|<<
name|view
operator|<<
name|QVector2D
argument_list|(
literal|800.0f
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nullMatrix"
argument_list|)
operator|<<
name|QVector3D
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|800.0f
argument_list|,
literal|600.0f
argument_list|)
operator|<<
name|nullMatrix
operator|<<
name|nullMatrix
operator|<<
name|QVector2D
argument_list|(
literal|400.0f
argument_list|,
literal|300.0f
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|project
name|void
name|tst_QVectorND
operator|::
name|project
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVector3D
argument_list|,
name|point
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QRect
argument_list|,
name|viewport
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QMatrix4x4
argument_list|,
name|projection
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QMatrix4x4
argument_list|,
name|view
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QVector2D
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVector3D
name|project
init|=
name|point
operator|.
name|project
argument_list|(
name|view
argument_list|,
name|projection
argument_list|,
name|viewport
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|project
operator|.
name|toVector2D
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unproject_data
name|void
name|tst_QVectorND
operator|::
name|unproject_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVector3D
argument_list|>
argument_list|(
literal|"point"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QRect
argument_list|>
argument_list|(
literal|"viewport"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QMatrix4x4
argument_list|>
argument_list|(
literal|"projection"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QMatrix4x4
argument_list|>
argument_list|(
literal|"view"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVector3D
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|projection
decl_stmt|;
name|projection
operator|.
name|ortho
argument_list|(
operator|-
literal|1.0f
argument_list|,
literal|1.0f
argument_list|,
operator|-
literal|1.0f
argument_list|,
literal|1.0f
argument_list|,
literal|0.1f
argument_list|,
literal|1000.0f
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|view
decl_stmt|;
comment|// Located at (0, 0, 10), looking at origin, y is up
name|view
operator|.
name|lookAt
argument_list|(
name|QVector3D
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|10.0f
argument_list|)
argument_list|,
name|QVector3D
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|)
argument_list|,
name|QVector3D
argument_list|(
literal|0.0f
argument_list|,
literal|1.0f
argument_list|,
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|nullMatrix
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"center"
argument_list|)
operator|<<
name|QVector3D
argument_list|(
literal|400.0f
argument_list|,
literal|300.0f
argument_list|,
literal|0.0f
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|800.0f
argument_list|,
literal|600.0f
argument_list|)
operator|<<
name|projection
operator|<<
name|view
operator|<<
name|QVector3D
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|9.9f
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"topLeft"
argument_list|)
operator|<<
name|QVector3D
argument_list|(
literal|0.0f
argument_list|,
literal|600.0f
argument_list|,
literal|0.0f
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|800.0f
argument_list|,
literal|600.0f
argument_list|)
operator|<<
name|projection
operator|<<
name|view
operator|<<
name|QVector3D
argument_list|(
operator|-
literal|1.0f
argument_list|,
literal|1.0f
argument_list|,
literal|9.9f
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"topRight"
argument_list|)
operator|<<
name|QVector3D
argument_list|(
literal|800.0f
argument_list|,
literal|600.0f
argument_list|,
literal|0.0f
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|800.0f
argument_list|,
literal|600.0f
argument_list|)
operator|<<
name|projection
operator|<<
name|view
operator|<<
name|QVector3D
argument_list|(
literal|1.0f
argument_list|,
literal|1.0f
argument_list|,
literal|9.9f
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bottomLeft"
argument_list|)
operator|<<
name|QVector3D
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|800.0f
argument_list|,
literal|600.0f
argument_list|)
operator|<<
name|projection
operator|<<
name|view
operator|<<
name|QVector3D
argument_list|(
operator|-
literal|1.0
argument_list|,
operator|-
literal|1.0f
argument_list|,
literal|9.9f
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bottomRight"
argument_list|)
operator|<<
name|QVector3D
argument_list|(
literal|800.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|800.0f
argument_list|,
literal|600.0f
argument_list|)
operator|<<
name|projection
operator|<<
name|view
operator|<<
name|QVector3D
argument_list|(
literal|1.0f
argument_list|,
operator|-
literal|1.0f
argument_list|,
literal|9.9f
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nullMatrix"
argument_list|)
operator|<<
name|QVector3D
argument_list|(
literal|400.0f
argument_list|,
literal|300.0f
argument_list|,
literal|0.0f
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|800.0f
argument_list|,
literal|600.0f
argument_list|)
operator|<<
name|nullMatrix
operator|<<
name|nullMatrix
operator|<<
name|QVector3D
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
operator|-
literal|1.0f
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unproject
name|void
name|tst_QVectorND
operator|::
name|unproject
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVector3D
argument_list|,
name|point
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QRect
argument_list|,
name|viewport
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QMatrix4x4
argument_list|,
name|projection
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QMatrix4x4
argument_list|,
name|view
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QVector3D
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVector3D
name|unproject
init|=
name|point
operator|.
name|unproject
argument_list|(
name|view
argument_list|,
name|projection
argument_list|,
name|viewport
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|unproject
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|tst_QVectorNDProperties
class|class
name|tst_QVectorNDProperties
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
name|Q_PROPERTY
argument_list|(
name|QVector2D
name|vector2D
name|READ
name|vector2D
name|WRITE
name|setVector2D
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QVector3D
name|vector3D
name|READ
name|vector3D
name|WRITE
name|setVector3D
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QVector4D
name|vector4D
name|READ
name|vector4D
name|WRITE
name|setVector4D
argument_list|)
decl|public
range|:
DECL|function|tst_QVectorNDProperties
name|tst_QVectorNDProperties
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
operator|:
name|QObject
argument_list|(
argument|parent
argument_list|)
block|{}
DECL|function|vector2D
name|QVector2D
name|vector2D
argument_list|()
specifier|const
block|{
return|return
name|v2
return|;
block|}
DECL|function|setVector2D
name|void
name|setVector2D
parameter_list|(
specifier|const
name|QVector2D
modifier|&
name|value
parameter_list|)
block|{
name|v2
operator|=
name|value
expr_stmt|;
block|}
DECL|function|vector3D
name|QVector3D
name|vector3D
parameter_list|()
specifier|const
block|{
return|return
name|v3
return|;
block|}
DECL|function|setVector3D
name|void
name|setVector3D
parameter_list|(
specifier|const
name|QVector3D
modifier|&
name|value
parameter_list|)
block|{
name|v3
operator|=
name|value
expr_stmt|;
block|}
DECL|function|vector4D
name|QVector4D
name|vector4D
parameter_list|()
specifier|const
block|{
return|return
name|v4
return|;
block|}
DECL|function|setVector4D
name|void
name|setVector4D
parameter_list|(
specifier|const
name|QVector4D
modifier|&
name|value
parameter_list|)
block|{
name|v4
operator|=
name|value
expr_stmt|;
block|}
private|private:
DECL|member|v2
name|QVector2D
name|v2
decl_stmt|;
DECL|member|v3
name|QVector3D
name|v3
decl_stmt|;
DECL|member|v4
name|QVector4D
name|v4
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|// Test getting and setting vector properties via the metaobject system.
end_comment
begin_function
DECL|function|properties
name|void
name|tst_QVectorND
operator|::
name|properties
parameter_list|()
block|{
name|tst_QVectorNDProperties
name|obj
decl_stmt|;
name|obj
operator|.
name|setVector2D
argument_list|(
name|QVector2D
argument_list|(
literal|1.0f
argument_list|,
literal|2.0f
argument_list|)
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setVector3D
argument_list|(
name|QVector3D
argument_list|(
literal|3.0f
argument_list|,
literal|4.0f
argument_list|,
literal|5.0f
argument_list|)
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setVector4D
argument_list|(
name|QVector4D
argument_list|(
literal|6.0f
argument_list|,
literal|7.0f
argument_list|,
literal|8.0f
argument_list|,
literal|9.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVector2D
name|v2
init|=
name|qvariant_cast
argument_list|<
name|QVector2D
argument_list|>
argument_list|(
name|obj
operator|.
name|property
argument_list|(
literal|"vector2D"
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|y
argument_list|()
argument_list|,
literal|2.0f
argument_list|)
expr_stmt|;
name|QVector3D
name|v3
init|=
name|qvariant_cast
argument_list|<
name|QVector3D
argument_list|>
argument_list|(
name|obj
operator|.
name|property
argument_list|(
literal|"vector3D"
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|x
argument_list|()
argument_list|,
literal|3.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|y
argument_list|()
argument_list|,
literal|4.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|z
argument_list|()
argument_list|,
literal|5.0f
argument_list|)
expr_stmt|;
name|QVector4D
name|v4
init|=
name|qvariant_cast
argument_list|<
name|QVector4D
argument_list|>
argument_list|(
name|obj
operator|.
name|property
argument_list|(
literal|"vector4D"
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|x
argument_list|()
argument_list|,
literal|6.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|y
argument_list|()
argument_list|,
literal|7.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|z
argument_list|()
argument_list|,
literal|8.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|w
argument_list|()
argument_list|,
literal|9.0f
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setProperty
argument_list|(
literal|"vector2D"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QVector2D
argument_list|(
operator|-
literal|1.0f
argument_list|,
operator|-
literal|2.0f
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setProperty
argument_list|(
literal|"vector3D"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QVector3D
argument_list|(
operator|-
literal|3.0f
argument_list|,
operator|-
literal|4.0f
argument_list|,
operator|-
literal|5.0f
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setProperty
argument_list|(
literal|"vector4D"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QVector4D
argument_list|(
operator|-
literal|6.0f
argument_list|,
operator|-
literal|7.0f
argument_list|,
operator|-
literal|8.0f
argument_list|,
operator|-
literal|9.0f
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|v2
operator|=
name|qvariant_cast
argument_list|<
name|QVector2D
argument_list|>
argument_list|(
name|obj
operator|.
name|property
argument_list|(
literal|"vector2D"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|x
argument_list|()
argument_list|,
operator|-
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|y
argument_list|()
argument_list|,
operator|-
literal|2.0f
argument_list|)
expr_stmt|;
name|v3
operator|=
name|qvariant_cast
argument_list|<
name|QVector3D
argument_list|>
argument_list|(
name|obj
operator|.
name|property
argument_list|(
literal|"vector3D"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|x
argument_list|()
argument_list|,
operator|-
literal|3.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|y
argument_list|()
argument_list|,
operator|-
literal|4.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|5.0f
argument_list|)
expr_stmt|;
name|v4
operator|=
name|qvariant_cast
argument_list|<
name|QVector4D
argument_list|>
argument_list|(
name|obj
operator|.
name|property
argument_list|(
literal|"vector4D"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|x
argument_list|()
argument_list|,
operator|-
literal|6.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|y
argument_list|()
argument_list|,
operator|-
literal|7.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|8.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|w
argument_list|()
argument_list|,
operator|-
literal|9.0f
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|metaTypes
name|void
name|tst_QVectorND
operator|::
name|metaTypes
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
literal|"QVector2D"
argument_list|)
operator|==
name|QMetaType
operator|::
name|QVector2D
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
literal|"QVector3D"
argument_list|)
operator|==
name|QMetaType
operator|::
name|QVector3D
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
literal|"QVector4D"
argument_list|)
operator|==
name|QMetaType
operator|::
name|QVector4D
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QByteArray
argument_list|(
name|QMetaType
operator|::
name|typeName
argument_list|(
name|QMetaType
operator|::
name|QVector2D
argument_list|)
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"QVector2D"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QByteArray
argument_list|(
name|QMetaType
operator|::
name|typeName
argument_list|(
name|QMetaType
operator|::
name|QVector3D
argument_list|)
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"QVector3D"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QByteArray
argument_list|(
name|QMetaType
operator|::
name|typeName
argument_list|(
name|QMetaType
operator|::
name|QVector4D
argument_list|)
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"QVector4D"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QMetaType
operator|::
name|isRegistered
argument_list|(
name|QMetaType
operator|::
name|QVector2D
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QMetaType
operator|::
name|isRegistered
argument_list|(
name|QMetaType
operator|::
name|QVector3D
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QMetaType
operator|::
name|isRegistered
argument_list|(
name|QMetaType
operator|::
name|QVector4D
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qMetaTypeId
argument_list|<
name|QVector2D
argument_list|>
argument_list|()
operator|==
name|QMetaType
operator|::
name|QVector2D
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qMetaTypeId
argument_list|<
name|QVector3D
argument_list|>
argument_list|()
operator|==
name|QMetaType
operator|::
name|QVector3D
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qMetaTypeId
argument_list|<
name|QVector4D
argument_list|>
argument_list|()
operator|==
name|QMetaType
operator|::
name|QVector4D
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QVectorND
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qvectornd.moc"
end_include
end_unit
