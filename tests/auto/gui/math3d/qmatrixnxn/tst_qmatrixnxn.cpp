begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmath.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qmatrix4x4.h>
end_include
begin_class
DECL|class|tst_QMatrixNxN
class|class
name|tst_QMatrixNxN
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|tst_QMatrixNxN
name|tst_QMatrixNxN
parameter_list|()
block|{}
DECL|function|~tst_QMatrixNxN
name|~
name|tst_QMatrixNxN
parameter_list|()
block|{}
private|private
name|slots
private|:
name|void
name|create2x2
parameter_list|()
function_decl|;
name|void
name|create3x3
parameter_list|()
function_decl|;
name|void
name|create4x4
parameter_list|()
function_decl|;
name|void
name|create4x3
parameter_list|()
function_decl|;
name|void
name|isIdentity2x2
parameter_list|()
function_decl|;
name|void
name|isIdentity3x3
parameter_list|()
function_decl|;
name|void
name|isIdentity4x4
parameter_list|()
function_decl|;
name|void
name|isIdentity4x3
parameter_list|()
function_decl|;
name|void
name|compare2x2
parameter_list|()
function_decl|;
name|void
name|compare3x3
parameter_list|()
function_decl|;
name|void
name|compare4x4
parameter_list|()
function_decl|;
name|void
name|compare4x3
parameter_list|()
function_decl|;
name|void
name|transposed2x2
parameter_list|()
function_decl|;
name|void
name|transposed3x3
parameter_list|()
function_decl|;
name|void
name|transposed4x4
parameter_list|()
function_decl|;
name|void
name|transposed4x3
parameter_list|()
function_decl|;
name|void
name|add2x2_data
parameter_list|()
function_decl|;
name|void
name|add2x2
parameter_list|()
function_decl|;
name|void
name|add3x3_data
parameter_list|()
function_decl|;
name|void
name|add3x3
parameter_list|()
function_decl|;
name|void
name|add4x4_data
parameter_list|()
function_decl|;
name|void
name|add4x4
parameter_list|()
function_decl|;
name|void
name|add4x3_data
parameter_list|()
function_decl|;
name|void
name|add4x3
parameter_list|()
function_decl|;
name|void
name|subtract2x2_data
parameter_list|()
function_decl|;
name|void
name|subtract2x2
parameter_list|()
function_decl|;
name|void
name|subtract3x3_data
parameter_list|()
function_decl|;
name|void
name|subtract3x3
parameter_list|()
function_decl|;
name|void
name|subtract4x4_data
parameter_list|()
function_decl|;
name|void
name|subtract4x4
parameter_list|()
function_decl|;
name|void
name|subtract4x3_data
parameter_list|()
function_decl|;
name|void
name|subtract4x3
parameter_list|()
function_decl|;
name|void
name|multiply2x2_data
parameter_list|()
function_decl|;
name|void
name|multiply2x2
parameter_list|()
function_decl|;
name|void
name|multiply3x3_data
parameter_list|()
function_decl|;
name|void
name|multiply3x3
parameter_list|()
function_decl|;
name|void
name|multiply4x4_data
parameter_list|()
function_decl|;
name|void
name|multiply4x4
parameter_list|()
function_decl|;
name|void
name|multiply4x3_data
parameter_list|()
function_decl|;
name|void
name|multiply4x3
parameter_list|()
function_decl|;
name|void
name|multiplyFactor2x2_data
parameter_list|()
function_decl|;
name|void
name|multiplyFactor2x2
parameter_list|()
function_decl|;
name|void
name|multiplyFactor3x3_data
parameter_list|()
function_decl|;
name|void
name|multiplyFactor3x3
parameter_list|()
function_decl|;
name|void
name|multiplyFactor4x4_data
parameter_list|()
function_decl|;
name|void
name|multiplyFactor4x4
parameter_list|()
function_decl|;
name|void
name|multiplyFactor4x3_data
parameter_list|()
function_decl|;
name|void
name|multiplyFactor4x3
parameter_list|()
function_decl|;
name|void
name|divideFactor2x2_data
parameter_list|()
function_decl|;
name|void
name|divideFactor2x2
parameter_list|()
function_decl|;
name|void
name|divideFactor3x3_data
parameter_list|()
function_decl|;
name|void
name|divideFactor3x3
parameter_list|()
function_decl|;
name|void
name|divideFactor4x4_data
parameter_list|()
function_decl|;
name|void
name|divideFactor4x4
parameter_list|()
function_decl|;
name|void
name|divideFactor4x3_data
parameter_list|()
function_decl|;
name|void
name|divideFactor4x3
parameter_list|()
function_decl|;
name|void
name|negate2x2_data
parameter_list|()
function_decl|;
name|void
name|negate2x2
parameter_list|()
function_decl|;
name|void
name|negate3x3_data
parameter_list|()
function_decl|;
name|void
name|negate3x3
parameter_list|()
function_decl|;
name|void
name|negate4x4_data
parameter_list|()
function_decl|;
name|void
name|negate4x4
parameter_list|()
function_decl|;
name|void
name|negate4x3_data
parameter_list|()
function_decl|;
name|void
name|negate4x3
parameter_list|()
function_decl|;
name|void
name|inverted4x4_data
parameter_list|()
function_decl|;
name|void
name|inverted4x4
parameter_list|()
function_decl|;
name|void
name|orthonormalInverse4x4
parameter_list|()
function_decl|;
name|void
name|scale4x4_data
parameter_list|()
function_decl|;
name|void
name|scale4x4
parameter_list|()
function_decl|;
name|void
name|translate4x4_data
parameter_list|()
function_decl|;
name|void
name|translate4x4
parameter_list|()
function_decl|;
name|void
name|rotate4x4_data
parameter_list|()
function_decl|;
name|void
name|rotate4x4
parameter_list|()
function_decl|;
name|void
name|normalMatrix_data
parameter_list|()
function_decl|;
name|void
name|normalMatrix
parameter_list|()
function_decl|;
name|void
name|optimizedTransforms
parameter_list|()
function_decl|;
name|void
name|ortho
parameter_list|()
function_decl|;
name|void
name|frustum
parameter_list|()
function_decl|;
name|void
name|perspective
parameter_list|()
function_decl|;
name|void
name|flipCoordinates
parameter_list|()
function_decl|;
name|void
name|convertGeneric
parameter_list|()
function_decl|;
name|void
name|optimize_data
parameter_list|()
function_decl|;
name|void
name|optimize
parameter_list|()
function_decl|;
name|void
name|columnsAndRows
parameter_list|()
function_decl|;
name|void
name|convertQMatrix
parameter_list|()
function_decl|;
name|void
name|convertQTransform
parameter_list|()
function_decl|;
name|void
name|fill
parameter_list|()
function_decl|;
name|void
name|mapRect_data
parameter_list|()
function_decl|;
name|void
name|mapRect
parameter_list|()
function_decl|;
name|void
name|mapVector_data
parameter_list|()
function_decl|;
name|void
name|mapVector
parameter_list|()
function_decl|;
name|void
name|properties
parameter_list|()
function_decl|;
name|void
name|metaTypes
parameter_list|()
function_decl|;
private|private:
specifier|static
name|void
name|setMatrix
parameter_list|(
name|QMatrix2x2
modifier|&
name|m
parameter_list|,
specifier|const
name|float
modifier|*
name|values
parameter_list|)
function_decl|;
specifier|static
name|void
name|setMatrixDirect
parameter_list|(
name|QMatrix2x2
modifier|&
name|m
parameter_list|,
specifier|const
name|float
modifier|*
name|values
parameter_list|)
function_decl|;
specifier|static
name|bool
name|isSame
parameter_list|(
specifier|const
name|QMatrix2x2
modifier|&
name|m
parameter_list|,
specifier|const
name|float
modifier|*
name|values
parameter_list|)
function_decl|;
specifier|static
name|bool
name|isIdentity
parameter_list|(
specifier|const
name|QMatrix2x2
modifier|&
name|m
parameter_list|)
function_decl|;
specifier|static
name|void
name|setMatrix
parameter_list|(
name|QMatrix3x3
modifier|&
name|m
parameter_list|,
specifier|const
name|float
modifier|*
name|values
parameter_list|)
function_decl|;
specifier|static
name|void
name|setMatrixDirect
parameter_list|(
name|QMatrix3x3
modifier|&
name|m
parameter_list|,
specifier|const
name|float
modifier|*
name|values
parameter_list|)
function_decl|;
specifier|static
name|bool
name|isSame
parameter_list|(
specifier|const
name|QMatrix3x3
modifier|&
name|m
parameter_list|,
specifier|const
name|float
modifier|*
name|values
parameter_list|)
function_decl|;
specifier|static
name|bool
name|isIdentity
parameter_list|(
specifier|const
name|QMatrix3x3
modifier|&
name|m
parameter_list|)
function_decl|;
specifier|static
name|void
name|setMatrix
parameter_list|(
name|QMatrix4x4
modifier|&
name|m
parameter_list|,
specifier|const
name|float
modifier|*
name|values
parameter_list|)
function_decl|;
specifier|static
name|void
name|setMatrixDirect
parameter_list|(
name|QMatrix4x4
modifier|&
name|m
parameter_list|,
specifier|const
name|float
modifier|*
name|values
parameter_list|)
function_decl|;
specifier|static
name|bool
name|isSame
parameter_list|(
specifier|const
name|QMatrix4x4
modifier|&
name|m
parameter_list|,
specifier|const
name|float
modifier|*
name|values
parameter_list|)
function_decl|;
specifier|static
name|bool
name|isIdentity
parameter_list|(
specifier|const
name|QMatrix4x4
modifier|&
name|m
parameter_list|)
function_decl|;
specifier|static
name|void
name|setMatrix
parameter_list|(
name|QMatrix4x3
modifier|&
name|m
parameter_list|,
specifier|const
name|float
modifier|*
name|values
parameter_list|)
function_decl|;
specifier|static
name|void
name|setMatrixDirect
parameter_list|(
name|QMatrix4x3
modifier|&
name|m
parameter_list|,
specifier|const
name|float
modifier|*
name|values
parameter_list|)
function_decl|;
specifier|static
name|bool
name|isSame
parameter_list|(
specifier|const
name|QMatrix4x3
modifier|&
name|m
parameter_list|,
specifier|const
name|float
modifier|*
name|values
parameter_list|)
function_decl|;
specifier|static
name|bool
name|isIdentity
parameter_list|(
specifier|const
name|QMatrix4x3
modifier|&
name|m
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|nullValues2
specifier|static
specifier|const
name|float
name|nullValues2
index|[]
init|=
block|{
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|identityValues2
specifier|static
name|float
specifier|const
name|identityValues2
index|[
literal|16
index|]
init|=
block|{
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|doubleIdentity2
specifier|static
specifier|const
name|float
name|doubleIdentity2
index|[]
init|=
block|{
literal|2.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|2.0f
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|uniqueValues2
specifier|static
name|float
specifier|const
name|uniqueValues2
index|[
literal|16
index|]
init|=
block|{
literal|1.0f
block|,
literal|2.0f
block|,
literal|5.0f
block|,
literal|6.0f
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|transposedValues2
specifier|static
name|float
specifier|const
name|transposedValues2
index|[
literal|16
index|]
init|=
block|{
literal|1.0f
block|,
literal|5.0f
block|,
literal|2.0f
block|,
literal|6.0f
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|nullValues3
specifier|static
specifier|const
name|float
name|nullValues3
index|[]
init|=
block|{
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|identityValues3
specifier|static
name|float
specifier|const
name|identityValues3
index|[
literal|16
index|]
init|=
block|{
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|doubleIdentity3
specifier|static
specifier|const
name|float
name|doubleIdentity3
index|[]
init|=
block|{
literal|2.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|2.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|2.0f
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|uniqueValues3
specifier|static
name|float
specifier|const
name|uniqueValues3
index|[
literal|16
index|]
init|=
block|{
literal|1.0f
block|,
literal|2.0f
block|,
literal|3.0f
block|,
literal|5.0f
block|,
literal|6.0f
block|,
literal|7.0f
block|,
literal|9.0f
block|,
literal|10.0f
block|,
literal|11.0f
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|transposedValues3
specifier|static
name|float
specifier|const
name|transposedValues3
index|[
literal|16
index|]
init|=
block|{
literal|1.0f
block|,
literal|5.0f
block|,
literal|9.0f
block|,
literal|2.0f
block|,
literal|6.0f
block|,
literal|10.0f
block|,
literal|3.0f
block|,
literal|7.0f
block|,
literal|11.0f
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|nullValues4
specifier|static
specifier|const
name|float
name|nullValues4
index|[]
init|=
block|{
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|identityValues4
specifier|static
name|float
specifier|const
name|identityValues4
index|[
literal|16
index|]
init|=
block|{
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|doubleIdentity4
specifier|static
specifier|const
name|float
name|doubleIdentity4
index|[]
init|=
block|{
literal|2.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|2.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|2.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|2.0f
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|uniqueValues4
specifier|static
name|float
specifier|const
name|uniqueValues4
index|[
literal|16
index|]
init|=
block|{
literal|1.0f
block|,
literal|2.0f
block|,
literal|3.0f
block|,
literal|4.0f
block|,
literal|5.0f
block|,
literal|6.0f
block|,
literal|7.0f
block|,
literal|8.0f
block|,
literal|9.0f
block|,
literal|10.0f
block|,
literal|11.0f
block|,
literal|12.0f
block|,
literal|13.0f
block|,
literal|14.0f
block|,
literal|15.0f
block|,
literal|16.0f
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|transposedValues4
specifier|static
name|float
specifier|const
name|transposedValues4
index|[
literal|16
index|]
init|=
block|{
literal|1.0f
block|,
literal|5.0f
block|,
literal|9.0f
block|,
literal|13.0f
block|,
literal|2.0f
block|,
literal|6.0f
block|,
literal|10.0f
block|,
literal|14.0f
block|,
literal|3.0f
block|,
literal|7.0f
block|,
literal|11.0f
block|,
literal|15.0f
block|,
literal|4.0f
block|,
literal|8.0f
block|,
literal|12.0f
block|,
literal|16.0f
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|nullValues4x3
specifier|static
specifier|const
name|float
name|nullValues4x3
index|[]
init|=
block|{
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|identityValues4x3
specifier|static
name|float
specifier|const
name|identityValues4x3
index|[
literal|12
index|]
init|=
block|{
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|doubleIdentity4x3
specifier|static
name|float
specifier|const
name|doubleIdentity4x3
index|[
literal|12
index|]
init|=
block|{
literal|2.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|2.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|2.0f
block|,
literal|0.0f
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|uniqueValues4x3
specifier|static
name|float
specifier|const
name|uniqueValues4x3
index|[
literal|12
index|]
init|=
block|{
literal|1.0f
block|,
literal|2.0f
block|,
literal|3.0f
block|,
literal|4.0f
block|,
literal|5.0f
block|,
literal|6.0f
block|,
literal|7.0f
block|,
literal|8.0f
block|,
literal|9.0f
block|,
literal|10.0f
block|,
literal|11.0f
block|,
literal|12.0f
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|transposedValues3x4
specifier|static
name|float
specifier|const
name|transposedValues3x4
index|[
literal|12
index|]
init|=
block|{
literal|1.0f
block|,
literal|5.0f
block|,
literal|9.0f
block|,
literal|2.0f
block|,
literal|6.0f
block|,
literal|10.0f
block|,
literal|3.0f
block|,
literal|7.0f
block|,
literal|11.0f
block|,
literal|4.0f
block|,
literal|8.0f
block|,
literal|12.0f
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|// We use a slightly better implementation of qFuzzyCompare here that
end_comment
begin_comment
comment|// handles the case where one of the values is exactly 0
end_comment
begin_function
DECL|function|fuzzyCompare
specifier|static
specifier|inline
name|bool
name|fuzzyCompare
parameter_list|(
name|float
name|p1
parameter_list|,
name|float
name|p2
parameter_list|)
block|{
if|if
condition|(
name|qFuzzyIsNull
argument_list|(
name|p1
argument_list|)
condition|)
return|return
name|qFuzzyIsNull
argument_list|(
name|p2
argument_list|)
return|;
elseif|else
if|if
condition|(
name|qFuzzyIsNull
argument_list|(
name|p2
argument_list|)
condition|)
return|return
literal|false
return|;
else|else
return|return
name|qFuzzyCompare
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// Set a matrix to a specified array of values, which are assumed
end_comment
begin_comment
comment|// to be in row-major order.  This sets the values using floating-point.
end_comment
begin_function
DECL|function|setMatrix
name|void
name|tst_QMatrixNxN
operator|::
name|setMatrix
parameter_list|(
name|QMatrix2x2
modifier|&
name|m
parameter_list|,
specifier|const
name|float
modifier|*
name|values
parameter_list|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
literal|2
condition|;
operator|++
name|row
control|)
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
literal|2
condition|;
operator|++
name|col
control|)
name|m
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
operator|=
name|values
index|[
name|row
operator|*
literal|2
operator|+
name|col
index|]
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setMatrix
name|void
name|tst_QMatrixNxN
operator|::
name|setMatrix
parameter_list|(
name|QMatrix3x3
modifier|&
name|m
parameter_list|,
specifier|const
name|float
modifier|*
name|values
parameter_list|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
literal|3
condition|;
operator|++
name|row
control|)
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
literal|3
condition|;
operator|++
name|col
control|)
name|m
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
operator|=
name|values
index|[
name|row
operator|*
literal|3
operator|+
name|col
index|]
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setMatrix
name|void
name|tst_QMatrixNxN
operator|::
name|setMatrix
parameter_list|(
name|QMatrix4x4
modifier|&
name|m
parameter_list|,
specifier|const
name|float
modifier|*
name|values
parameter_list|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
literal|4
condition|;
operator|++
name|row
control|)
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
literal|4
condition|;
operator|++
name|col
control|)
name|m
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
operator|=
name|values
index|[
name|row
operator|*
literal|4
operator|+
name|col
index|]
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setMatrix
name|void
name|tst_QMatrixNxN
operator|::
name|setMatrix
parameter_list|(
name|QMatrix4x3
modifier|&
name|m
parameter_list|,
specifier|const
name|float
modifier|*
name|values
parameter_list|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
literal|3
condition|;
operator|++
name|row
control|)
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
literal|4
condition|;
operator|++
name|col
control|)
name|m
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
operator|=
name|values
index|[
name|row
operator|*
literal|4
operator|+
name|col
index|]
expr_stmt|;
block|}
end_function
begin_comment
comment|// Set a matrix to a specified array of values, which are assumed
end_comment
begin_comment
comment|// to be in row-major order.  This sets the values directly into
end_comment
begin_comment
comment|// the internal data() array.
end_comment
begin_function
DECL|function|setMatrixDirect
name|void
name|tst_QMatrixNxN
operator|::
name|setMatrixDirect
parameter_list|(
name|QMatrix2x2
modifier|&
name|m
parameter_list|,
specifier|const
name|float
modifier|*
name|values
parameter_list|)
block|{
name|float
modifier|*
name|data
init|=
name|m
operator|.
name|data
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
literal|2
condition|;
operator|++
name|row
control|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
literal|2
condition|;
operator|++
name|col
control|)
block|{
name|data
index|[
name|row
operator|+
name|col
operator|*
literal|2
index|]
operator|=
name|values
index|[
name|row
operator|*
literal|2
operator|+
name|col
index|]
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|setMatrixDirect
name|void
name|tst_QMatrixNxN
operator|::
name|setMatrixDirect
parameter_list|(
name|QMatrix3x3
modifier|&
name|m
parameter_list|,
specifier|const
name|float
modifier|*
name|values
parameter_list|)
block|{
name|float
modifier|*
name|data
init|=
name|m
operator|.
name|data
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
literal|3
condition|;
operator|++
name|row
control|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
literal|3
condition|;
operator|++
name|col
control|)
block|{
name|data
index|[
name|row
operator|+
name|col
operator|*
literal|3
index|]
operator|=
name|values
index|[
name|row
operator|*
literal|3
operator|+
name|col
index|]
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|setMatrixDirect
name|void
name|tst_QMatrixNxN
operator|::
name|setMatrixDirect
parameter_list|(
name|QMatrix4x4
modifier|&
name|m
parameter_list|,
specifier|const
name|float
modifier|*
name|values
parameter_list|)
block|{
name|float
modifier|*
name|data
init|=
name|m
operator|.
name|data
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
literal|4
condition|;
operator|++
name|row
control|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
literal|4
condition|;
operator|++
name|col
control|)
block|{
name|data
index|[
name|row
operator|+
name|col
operator|*
literal|4
index|]
operator|=
name|values
index|[
name|row
operator|*
literal|4
operator|+
name|col
index|]
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|setMatrixDirect
name|void
name|tst_QMatrixNxN
operator|::
name|setMatrixDirect
parameter_list|(
name|QMatrix4x3
modifier|&
name|m
parameter_list|,
specifier|const
name|float
modifier|*
name|values
parameter_list|)
block|{
name|float
modifier|*
name|data
init|=
name|m
operator|.
name|data
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
literal|3
condition|;
operator|++
name|row
control|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
literal|4
condition|;
operator|++
name|col
control|)
block|{
name|data
index|[
name|row
operator|+
name|col
operator|*
literal|3
index|]
operator|=
name|values
index|[
name|row
operator|*
literal|4
operator|+
name|col
index|]
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|// Determine if a matrix is the same as a specified array of values.
end_comment
begin_comment
comment|// The values are assumed to be specified in row-major order.
end_comment
begin_function
DECL|function|isSame
name|bool
name|tst_QMatrixNxN
operator|::
name|isSame
parameter_list|(
specifier|const
name|QMatrix2x2
modifier|&
name|m
parameter_list|,
specifier|const
name|float
modifier|*
name|values
parameter_list|)
block|{
specifier|const
name|float
modifier|*
name|mv
init|=
name|m
operator|.
name|constData
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
literal|2
condition|;
operator|++
name|row
control|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
literal|2
condition|;
operator|++
name|col
control|)
block|{
comment|// Check the values using the operator() function.
if|if
condition|(
operator|!
name|fuzzyCompare
argument_list|(
name|m
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
argument_list|,
name|values
index|[
name|row
operator|*
literal|2
operator|+
name|col
index|]
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"floating-point failure at"
operator|<<
name|row
operator|<<
name|col
operator|<<
literal|"actual ="
operator|<<
name|m
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
operator|<<
literal|"expected ="
operator|<<
name|values
index|[
name|row
operator|*
literal|2
operator|+
name|col
index|]
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Check the values using direct access, which verifies that the values
comment|// are stored internally in column-major order.
if|if
condition|(
operator|!
name|fuzzyCompare
argument_list|(
name|mv
index|[
name|col
operator|*
literal|2
operator|+
name|row
index|]
argument_list|,
name|values
index|[
name|row
operator|*
literal|2
operator|+
name|col
index|]
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"column floating-point failure at"
operator|<<
name|row
operator|<<
name|col
operator|<<
literal|"actual ="
operator|<<
name|mv
index|[
name|col
operator|*
literal|2
operator|+
name|row
index|]
operator|<<
literal|"expected ="
operator|<<
name|values
index|[
name|row
operator|*
literal|2
operator|+
name|col
index|]
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|isSame
name|bool
name|tst_QMatrixNxN
operator|::
name|isSame
parameter_list|(
specifier|const
name|QMatrix3x3
modifier|&
name|m
parameter_list|,
specifier|const
name|float
modifier|*
name|values
parameter_list|)
block|{
specifier|const
name|float
modifier|*
name|mv
init|=
name|m
operator|.
name|constData
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
literal|3
condition|;
operator|++
name|row
control|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
literal|3
condition|;
operator|++
name|col
control|)
block|{
comment|// Check the values using the operator() access function.
if|if
condition|(
operator|!
name|fuzzyCompare
argument_list|(
name|m
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
argument_list|,
name|values
index|[
name|row
operator|*
literal|3
operator|+
name|col
index|]
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"floating-point failure at"
operator|<<
name|row
operator|<<
name|col
operator|<<
literal|"actual ="
operator|<<
name|m
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
operator|<<
literal|"expected ="
operator|<<
name|values
index|[
name|row
operator|*
literal|3
operator|+
name|col
index|]
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Check the values using direct access, which verifies that the values
comment|// are stored internally in column-major order.
if|if
condition|(
operator|!
name|fuzzyCompare
argument_list|(
name|mv
index|[
name|col
operator|*
literal|3
operator|+
name|row
index|]
argument_list|,
name|values
index|[
name|row
operator|*
literal|3
operator|+
name|col
index|]
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"column floating-point failure at"
operator|<<
name|row
operator|<<
name|col
operator|<<
literal|"actual ="
operator|<<
name|mv
index|[
name|col
operator|*
literal|3
operator|+
name|row
index|]
operator|<<
literal|"expected ="
operator|<<
name|values
index|[
name|row
operator|*
literal|3
operator|+
name|col
index|]
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|isSame
name|bool
name|tst_QMatrixNxN
operator|::
name|isSame
parameter_list|(
specifier|const
name|QMatrix4x4
modifier|&
name|m
parameter_list|,
specifier|const
name|float
modifier|*
name|values
parameter_list|)
block|{
specifier|const
name|float
modifier|*
name|mv
init|=
name|m
operator|.
name|constData
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
literal|4
condition|;
operator|++
name|row
control|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
literal|4
condition|;
operator|++
name|col
control|)
block|{
comment|// Check the values using the operator() access function.
if|if
condition|(
operator|!
name|fuzzyCompare
argument_list|(
name|m
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
argument_list|,
name|values
index|[
name|row
operator|*
literal|4
operator|+
name|col
index|]
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"floating-point failure at"
operator|<<
name|row
operator|<<
name|col
operator|<<
literal|"actual ="
operator|<<
name|m
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
operator|<<
literal|"expected ="
operator|<<
name|values
index|[
name|row
operator|*
literal|4
operator|+
name|col
index|]
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Check the values using direct access, which verifies that the values
comment|// are stored internally in column-major order.
if|if
condition|(
operator|!
name|fuzzyCompare
argument_list|(
name|mv
index|[
name|col
operator|*
literal|4
operator|+
name|row
index|]
argument_list|,
name|values
index|[
name|row
operator|*
literal|4
operator|+
name|col
index|]
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"column floating-point failure at"
operator|<<
name|row
operator|<<
name|col
operator|<<
literal|"actual ="
operator|<<
name|mv
index|[
name|col
operator|*
literal|4
operator|+
name|row
index|]
operator|<<
literal|"expected ="
operator|<<
name|values
index|[
name|row
operator|*
literal|4
operator|+
name|col
index|]
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|isSame
name|bool
name|tst_QMatrixNxN
operator|::
name|isSame
parameter_list|(
specifier|const
name|QMatrix4x3
modifier|&
name|m
parameter_list|,
specifier|const
name|float
modifier|*
name|values
parameter_list|)
block|{
specifier|const
name|float
modifier|*
name|mv
init|=
name|m
operator|.
name|constData
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
literal|3
condition|;
operator|++
name|row
control|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
literal|4
condition|;
operator|++
name|col
control|)
block|{
comment|// Check the values using the operator() access function.
if|if
condition|(
operator|!
name|fuzzyCompare
argument_list|(
name|m
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
argument_list|,
name|values
index|[
name|row
operator|*
literal|4
operator|+
name|col
index|]
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"floating-point failure at"
operator|<<
name|row
operator|<<
name|col
operator|<<
literal|"actual ="
operator|<<
name|m
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
operator|<<
literal|"expected ="
operator|<<
name|values
index|[
name|row
operator|*
literal|4
operator|+
name|col
index|]
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Check the values using direct access, which verifies that the values
comment|// are stored internally in column-major order.
if|if
condition|(
operator|!
name|fuzzyCompare
argument_list|(
name|mv
index|[
name|col
operator|*
literal|3
operator|+
name|row
index|]
argument_list|,
name|values
index|[
name|row
operator|*
literal|4
operator|+
name|col
index|]
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"column floating-point failure at"
operator|<<
name|row
operator|<<
name|col
operator|<<
literal|"actual ="
operator|<<
name|mv
index|[
name|col
operator|*
literal|3
operator|+
name|row
index|]
operator|<<
literal|"expected ="
operator|<<
name|values
index|[
name|row
operator|*
literal|4
operator|+
name|col
index|]
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|// Determine if a matrix is the identity.
end_comment
begin_function
DECL|function|isIdentity
name|bool
name|tst_QMatrixNxN
operator|::
name|isIdentity
parameter_list|(
specifier|const
name|QMatrix2x2
modifier|&
name|m
parameter_list|)
block|{
return|return
name|isSame
argument_list|(
name|m
argument_list|,
name|identityValues2
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|isIdentity
name|bool
name|tst_QMatrixNxN
operator|::
name|isIdentity
parameter_list|(
specifier|const
name|QMatrix3x3
modifier|&
name|m
parameter_list|)
block|{
return|return
name|isSame
argument_list|(
name|m
argument_list|,
name|identityValues3
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|isIdentity
name|bool
name|tst_QMatrixNxN
operator|::
name|isIdentity
parameter_list|(
specifier|const
name|QMatrix4x4
modifier|&
name|m
parameter_list|)
block|{
return|return
name|isSame
argument_list|(
name|m
argument_list|,
name|identityValues4
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|isIdentity
name|bool
name|tst_QMatrixNxN
operator|::
name|isIdentity
parameter_list|(
specifier|const
name|QMatrix4x3
modifier|&
name|m
parameter_list|)
block|{
return|return
name|isSame
argument_list|(
name|m
argument_list|,
name|identityValues4x3
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// Test the creation of QMatrix2x2 objects in various ways:
end_comment
begin_comment
comment|// construct, copy, and modify.
end_comment
begin_function
DECL|function|create2x2
name|void
name|tst_QMatrixNxN
operator|::
name|create2x2
parameter_list|()
block|{
name|QMatrix2x2
name|m1
decl_stmt|;
name|QVERIFY
argument_list|(
name|isIdentity
argument_list|(
name|m1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
name|QMatrix2x2
name|m2
decl_stmt|;
name|setMatrix
argument_list|(
name|m2
argument_list|,
name|uniqueValues2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m2
argument_list|,
name|uniqueValues2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|m2
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
name|QMatrix2x2
name|m3
decl_stmt|;
name|setMatrixDirect
argument_list|(
name|m3
argument_list|,
name|uniqueValues2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m3
argument_list|,
name|uniqueValues2
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix2x2
name|m4
argument_list|(
name|m3
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m4
argument_list|,
name|uniqueValues2
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix2x2
name|m5
decl_stmt|;
name|m5
operator|=
name|m3
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m5
argument_list|,
name|uniqueValues2
argument_list|)
argument_list|)
expr_stmt|;
name|m5
operator|.
name|setToIdentity
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|isIdentity
argument_list|(
name|m5
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix2x2
name|m6
argument_list|(
name|uniqueValues2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m6
argument_list|,
name|uniqueValues2
argument_list|)
argument_list|)
expr_stmt|;
name|float
name|vals
index|[
literal|4
index|]
decl_stmt|;
name|m6
operator|.
name|copyDataTo
argument_list|(
name|vals
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
literal|4
condition|;
operator|++
name|index
control|)
name|QCOMPARE
argument_list|(
name|vals
index|[
name|index
index|]
argument_list|,
name|uniqueValues2
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test the creation of QMatrix3x3 objects in various ways:
end_comment
begin_comment
comment|// construct, copy, and modify.
end_comment
begin_function
DECL|function|create3x3
name|void
name|tst_QMatrixNxN
operator|::
name|create3x3
parameter_list|()
block|{
name|QMatrix3x3
name|m1
decl_stmt|;
name|QVERIFY
argument_list|(
name|isIdentity
argument_list|(
name|m1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
name|QMatrix3x3
name|m2
decl_stmt|;
name|setMatrix
argument_list|(
name|m2
argument_list|,
name|uniqueValues3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m2
argument_list|,
name|uniqueValues3
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|m2
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
name|QMatrix3x3
name|m3
decl_stmt|;
name|setMatrixDirect
argument_list|(
name|m3
argument_list|,
name|uniqueValues3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m3
argument_list|,
name|uniqueValues3
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix3x3
name|m4
argument_list|(
name|m3
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m4
argument_list|,
name|uniqueValues3
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix3x3
name|m5
decl_stmt|;
name|m5
operator|=
name|m3
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m5
argument_list|,
name|uniqueValues3
argument_list|)
argument_list|)
expr_stmt|;
name|m5
operator|.
name|setToIdentity
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|isIdentity
argument_list|(
name|m5
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix3x3
name|m6
argument_list|(
name|uniqueValues3
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m6
argument_list|,
name|uniqueValues3
argument_list|)
argument_list|)
expr_stmt|;
name|float
name|vals
index|[
literal|9
index|]
decl_stmt|;
name|m6
operator|.
name|copyDataTo
argument_list|(
name|vals
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
literal|9
condition|;
operator|++
name|index
control|)
name|QCOMPARE
argument_list|(
name|vals
index|[
name|index
index|]
argument_list|,
name|uniqueValues3
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test the creation of QMatrix4x4 objects in various ways:
end_comment
begin_comment
comment|// construct, copy, and modify.
end_comment
begin_function
DECL|function|create4x4
name|void
name|tst_QMatrixNxN
operator|::
name|create4x4
parameter_list|()
block|{
name|QMatrix4x4
name|m1
decl_stmt|;
name|QVERIFY
argument_list|(
name|isIdentity
argument_list|(
name|m1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m2
decl_stmt|;
name|setMatrix
argument_list|(
name|m2
argument_list|,
name|uniqueValues4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m2
argument_list|,
name|uniqueValues4
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|m2
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m3
decl_stmt|;
name|setMatrixDirect
argument_list|(
name|m3
argument_list|,
name|uniqueValues4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m3
argument_list|,
name|uniqueValues4
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m4
argument_list|(
name|m3
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m4
argument_list|,
name|uniqueValues4
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m5
decl_stmt|;
name|m5
operator|=
name|m3
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m5
argument_list|,
name|uniqueValues4
argument_list|)
argument_list|)
expr_stmt|;
name|m5
operator|.
name|setToIdentity
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|isIdentity
argument_list|(
name|m5
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m6
argument_list|(
name|uniqueValues4
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m6
argument_list|,
name|uniqueValues4
argument_list|)
argument_list|)
expr_stmt|;
name|float
name|vals
index|[
literal|16
index|]
decl_stmt|;
name|m6
operator|.
name|copyDataTo
argument_list|(
name|vals
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
literal|16
condition|;
operator|++
name|index
control|)
name|QCOMPARE
argument_list|(
name|vals
index|[
name|index
index|]
argument_list|,
name|uniqueValues4
index|[
name|index
index|]
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m8
argument_list|(
name|uniqueValues4
index|[
literal|0
index|]
argument_list|,
name|uniqueValues4
index|[
literal|1
index|]
argument_list|,
name|uniqueValues4
index|[
literal|2
index|]
argument_list|,
name|uniqueValues4
index|[
literal|3
index|]
argument_list|,
name|uniqueValues4
index|[
literal|4
index|]
argument_list|,
name|uniqueValues4
index|[
literal|5
index|]
argument_list|,
name|uniqueValues4
index|[
literal|6
index|]
argument_list|,
name|uniqueValues4
index|[
literal|7
index|]
argument_list|,
name|uniqueValues4
index|[
literal|8
index|]
argument_list|,
name|uniqueValues4
index|[
literal|9
index|]
argument_list|,
name|uniqueValues4
index|[
literal|10
index|]
argument_list|,
name|uniqueValues4
index|[
literal|11
index|]
argument_list|,
name|uniqueValues4
index|[
literal|12
index|]
argument_list|,
name|uniqueValues4
index|[
literal|13
index|]
argument_list|,
name|uniqueValues4
index|[
literal|14
index|]
argument_list|,
name|uniqueValues4
index|[
literal|15
index|]
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m8
argument_list|,
name|uniqueValues4
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test the creation of QMatrix4x3 objects in various ways:
end_comment
begin_comment
comment|// construct, copy, and modify.
end_comment
begin_function
DECL|function|create4x3
name|void
name|tst_QMatrixNxN
operator|::
name|create4x3
parameter_list|()
block|{
name|QMatrix4x3
name|m1
decl_stmt|;
name|QVERIFY
argument_list|(
name|isIdentity
argument_list|(
name|m1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
name|QMatrix4x3
name|m2
decl_stmt|;
name|setMatrix
argument_list|(
name|m2
argument_list|,
name|uniqueValues4x3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m2
argument_list|,
name|uniqueValues4x3
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|m2
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
name|QMatrix4x3
name|m3
decl_stmt|;
name|setMatrixDirect
argument_list|(
name|m3
argument_list|,
name|uniqueValues4x3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m3
argument_list|,
name|uniqueValues4x3
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x3
name|m4
argument_list|(
name|m3
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m4
argument_list|,
name|uniqueValues4x3
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x3
name|m5
decl_stmt|;
name|m5
operator|=
name|m3
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m5
argument_list|,
name|uniqueValues4x3
argument_list|)
argument_list|)
expr_stmt|;
name|m5
operator|.
name|setToIdentity
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|isIdentity
argument_list|(
name|m5
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x3
name|m6
argument_list|(
name|uniqueValues4x3
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m6
argument_list|,
name|uniqueValues4x3
argument_list|)
argument_list|)
expr_stmt|;
name|float
name|vals
index|[
literal|12
index|]
decl_stmt|;
name|m6
operator|.
name|copyDataTo
argument_list|(
name|vals
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
literal|12
condition|;
operator|++
name|index
control|)
name|QCOMPARE
argument_list|(
name|vals
index|[
name|index
index|]
argument_list|,
name|uniqueValues4x3
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test isIdentity() for 2x2 matrices.
end_comment
begin_function
DECL|function|isIdentity2x2
name|void
name|tst_QMatrixNxN
operator|::
name|isIdentity2x2
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
operator|*
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|QMatrix2x2
name|m
decl_stmt|;
name|QVERIFY
argument_list|(
name|m
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|data
argument_list|()
index|[
name|i
index|]
operator|=
literal|42.0f
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|m
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// Test isIdentity() for 3x3 matrices.
end_comment
begin_function
DECL|function|isIdentity3x3
name|void
name|tst_QMatrixNxN
operator|::
name|isIdentity3x3
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
operator|*
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|QMatrix3x3
name|m
decl_stmt|;
name|QVERIFY
argument_list|(
name|m
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|data
argument_list|()
index|[
name|i
index|]
operator|=
literal|42.0f
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|m
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// Test isIdentity() for 4x4 matrices.
end_comment
begin_function
DECL|function|isIdentity4x4
name|void
name|tst_QMatrixNxN
operator|::
name|isIdentity4x4
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
operator|*
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|QMatrix4x4
name|m
decl_stmt|;
name|QVERIFY
argument_list|(
name|m
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|data
argument_list|()
index|[
name|i
index|]
operator|=
literal|42.0f
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|m
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Force the "Identity" flag bit to be lost and check again.
name|QMatrix4x4
name|m2
decl_stmt|;
name|m2
operator|.
name|data
argument_list|()
index|[
literal|0
index|]
operator|=
literal|1.0f
expr_stmt|;
name|QVERIFY
argument_list|(
name|m2
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test isIdentity() for 4x3 matrices.
end_comment
begin_function
DECL|function|isIdentity4x3
name|void
name|tst_QMatrixNxN
operator|::
name|isIdentity4x3
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
operator|*
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|QMatrix4x3
name|m
decl_stmt|;
name|QVERIFY
argument_list|(
name|m
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|data
argument_list|()
index|[
name|i
index|]
operator|=
literal|42.0f
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|m
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// Test 2x2 matrix comparisons.
end_comment
begin_function
DECL|function|compare2x2
name|void
name|tst_QMatrixNxN
operator|::
name|compare2x2
parameter_list|()
block|{
name|QMatrix2x2
name|m1
argument_list|(
name|uniqueValues2
argument_list|)
decl_stmt|;
name|QMatrix2x2
name|m2
argument_list|(
name|uniqueValues2
argument_list|)
decl_stmt|;
name|QMatrix2x2
name|m3
argument_list|(
name|transposedValues2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|==
name|m2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|m1
operator|!=
name|m2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|!=
name|m3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|m1
operator|==
name|m3
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test 3x3 matrix comparisons.
end_comment
begin_function
DECL|function|compare3x3
name|void
name|tst_QMatrixNxN
operator|::
name|compare3x3
parameter_list|()
block|{
name|QMatrix3x3
name|m1
argument_list|(
name|uniqueValues3
argument_list|)
decl_stmt|;
name|QMatrix3x3
name|m2
argument_list|(
name|uniqueValues3
argument_list|)
decl_stmt|;
name|QMatrix3x3
name|m3
argument_list|(
name|transposedValues3
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|==
name|m2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|m1
operator|!=
name|m2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|!=
name|m3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|m1
operator|==
name|m3
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test 4x4 matrix comparisons.
end_comment
begin_function
DECL|function|compare4x4
name|void
name|tst_QMatrixNxN
operator|::
name|compare4x4
parameter_list|()
block|{
name|QMatrix4x4
name|m1
argument_list|(
name|uniqueValues4
argument_list|)
decl_stmt|;
name|QMatrix4x4
name|m2
argument_list|(
name|uniqueValues4
argument_list|)
decl_stmt|;
name|QMatrix4x4
name|m3
argument_list|(
name|transposedValues4
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|==
name|m2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|m1
operator|!=
name|m2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|!=
name|m3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|m1
operator|==
name|m3
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test 4x3 matrix comparisons.
end_comment
begin_function
DECL|function|compare4x3
name|void
name|tst_QMatrixNxN
operator|::
name|compare4x3
parameter_list|()
block|{
name|QMatrix4x3
name|m1
argument_list|(
name|uniqueValues4x3
argument_list|)
decl_stmt|;
name|QMatrix4x3
name|m2
argument_list|(
name|uniqueValues4x3
argument_list|)
decl_stmt|;
name|QMatrix4x3
name|m3
argument_list|(
name|transposedValues3x4
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|==
name|m2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|m1
operator|!=
name|m2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|!=
name|m3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|m1
operator|==
name|m3
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test matrix 2x2 transpose operations.
end_comment
begin_function
DECL|function|transposed2x2
name|void
name|tst_QMatrixNxN
operator|::
name|transposed2x2
parameter_list|()
block|{
comment|// Transposing the identity should result in the identity.
name|QMatrix2x2
name|m1
decl_stmt|;
name|QMatrix2x2
name|m2
init|=
name|m1
operator|.
name|transposed
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|isIdentity
argument_list|(
name|m2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Transpose a more interesting matrix that allows us to track
comment|// exactly where each source element ends up.
name|QMatrix2x2
name|m3
argument_list|(
name|uniqueValues2
argument_list|)
decl_stmt|;
name|QMatrix2x2
name|m4
init|=
name|m3
operator|.
name|transposed
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m4
argument_list|,
name|transposedValues2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Transpose in-place, just to check that the compiler is sane.
name|m3
operator|=
name|m3
operator|.
name|transposed
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m3
argument_list|,
name|transposedValues2
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test matrix 3x3 transpose operations.
end_comment
begin_function
DECL|function|transposed3x3
name|void
name|tst_QMatrixNxN
operator|::
name|transposed3x3
parameter_list|()
block|{
comment|// Transposing the identity should result in the identity.
name|QMatrix3x3
name|m1
decl_stmt|;
name|QMatrix3x3
name|m2
init|=
name|m1
operator|.
name|transposed
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|isIdentity
argument_list|(
name|m2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Transpose a more interesting matrix that allows us to track
comment|// exactly where each source element ends up.
name|QMatrix3x3
name|m3
argument_list|(
name|uniqueValues3
argument_list|)
decl_stmt|;
name|QMatrix3x3
name|m4
init|=
name|m3
operator|.
name|transposed
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m4
argument_list|,
name|transposedValues3
argument_list|)
argument_list|)
expr_stmt|;
comment|// Transpose in-place, just to check that the compiler is sane.
name|m3
operator|=
name|m3
operator|.
name|transposed
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m3
argument_list|,
name|transposedValues3
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test matrix 4x4 transpose operations.
end_comment
begin_function
DECL|function|transposed4x4
name|void
name|tst_QMatrixNxN
operator|::
name|transposed4x4
parameter_list|()
block|{
comment|// Transposing the identity should result in the identity.
name|QMatrix4x4
name|m1
decl_stmt|;
name|QMatrix4x4
name|m2
init|=
name|m1
operator|.
name|transposed
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|isIdentity
argument_list|(
name|m2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Transpose a more interesting matrix that allows us to track
comment|// exactly where each source element ends up.
name|QMatrix4x4
name|m3
argument_list|(
name|uniqueValues4
argument_list|)
decl_stmt|;
name|QMatrix4x4
name|m4
init|=
name|m3
operator|.
name|transposed
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m4
argument_list|,
name|transposedValues4
argument_list|)
argument_list|)
expr_stmt|;
comment|// Transpose in-place, just to check that the compiler is sane.
name|m3
operator|=
name|m3
operator|.
name|transposed
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m3
argument_list|,
name|transposedValues4
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test matrix 4x3 transpose operations.
end_comment
begin_function
DECL|function|transposed4x3
name|void
name|tst_QMatrixNxN
operator|::
name|transposed4x3
parameter_list|()
block|{
name|QMatrix4x3
name|m3
argument_list|(
name|uniqueValues4x3
argument_list|)
decl_stmt|;
name|QMatrix3x4
name|m4
init|=
name|m3
operator|.
name|transposed
argument_list|()
decl_stmt|;
name|float
name|values
index|[
literal|12
index|]
decl_stmt|;
name|m4
operator|.
name|copyDataTo
argument_list|(
name|values
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
literal|12
condition|;
operator|++
name|index
control|)
name|QCOMPARE
argument_list|(
name|values
index|[
name|index
index|]
argument_list|,
name|transposedValues3x4
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test matrix addition for 2x2 matrices.
end_comment
begin_function
DECL|function|add2x2_data
name|void
name|tst_QMatrixNxN
operator|::
name|add2x2_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"m1Values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"m2Values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"m3Values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues2
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues2
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"identity/null"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityValues2
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues2
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityValues2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"identity/identity"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityValues2
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityValues2
operator|<<
operator|(
name|void
operator|*
operator|)
name|doubleIdentity2
expr_stmt|;
specifier|static
name|float
specifier|const
name|sumValues
index|[
literal|16
index|]
init|=
block|{
literal|2.0f
block|,
literal|7.0f
block|,
literal|7.0f
block|,
literal|12.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unique"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueValues2
operator|<<
operator|(
name|void
operator|*
operator|)
name|transposedValues2
operator|<<
operator|(
name|void
operator|*
operator|)
name|sumValues
expr_stmt|;
block|}
end_function
begin_function
DECL|function|add2x2
name|void
name|tst_QMatrixNxN
operator|::
name|add2x2
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m1Values
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m2Values
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m3Values
argument_list|)
expr_stmt|;
name|QMatrix2x2
name|m1
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
argument_list|)
decl_stmt|;
name|QMatrix2x2
name|m2
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
decl_stmt|;
name|QMatrix2x2
name|m4
argument_list|(
name|m1
argument_list|)
decl_stmt|;
name|m4
operator|+=
name|m2
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m4
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m3Values
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix2x2
name|m5
decl_stmt|;
name|m5
operator|=
name|m1
operator|+
name|m2
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m5
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m3Values
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test matrix addition for 3x3 matrices.
end_comment
begin_function
DECL|function|add3x3_data
name|void
name|tst_QMatrixNxN
operator|::
name|add3x3_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"m1Values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"m2Values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"m3Values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues3
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues3
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"identity/null"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityValues3
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues3
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityValues3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"identity/identity"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityValues3
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityValues3
operator|<<
operator|(
name|void
operator|*
operator|)
name|doubleIdentity3
expr_stmt|;
specifier|static
name|float
specifier|const
name|sumValues
index|[
literal|16
index|]
init|=
block|{
literal|2.0f
block|,
literal|7.0f
block|,
literal|12.0f
block|,
literal|7.0f
block|,
literal|12.0f
block|,
literal|17.0f
block|,
literal|12.0f
block|,
literal|17.0f
block|,
literal|22.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unique"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueValues3
operator|<<
operator|(
name|void
operator|*
operator|)
name|transposedValues3
operator|<<
operator|(
name|void
operator|*
operator|)
name|sumValues
expr_stmt|;
block|}
end_function
begin_function
DECL|function|add3x3
name|void
name|tst_QMatrixNxN
operator|::
name|add3x3
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m1Values
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m2Values
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m3Values
argument_list|)
expr_stmt|;
name|QMatrix3x3
name|m1
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
argument_list|)
decl_stmt|;
name|QMatrix3x3
name|m2
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
decl_stmt|;
name|QMatrix3x3
name|m4
argument_list|(
name|m1
argument_list|)
decl_stmt|;
name|m4
operator|+=
name|m2
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m4
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m3Values
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix3x3
name|m5
decl_stmt|;
name|m5
operator|=
name|m1
operator|+
name|m2
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m5
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m3Values
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test matrix addition for 4x4 matrices.
end_comment
begin_function
DECL|function|add4x4_data
name|void
name|tst_QMatrixNxN
operator|::
name|add4x4_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"m1Values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"m2Values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"m3Values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues4
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues4
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"identity/null"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityValues4
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues4
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityValues4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"identity/identity"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityValues4
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityValues4
operator|<<
operator|(
name|void
operator|*
operator|)
name|doubleIdentity4
expr_stmt|;
specifier|static
name|float
specifier|const
name|sumValues
index|[
literal|16
index|]
init|=
block|{
literal|2.0f
block|,
literal|7.0f
block|,
literal|12.0f
block|,
literal|17.0f
block|,
literal|7.0f
block|,
literal|12.0f
block|,
literal|17.0f
block|,
literal|22.0f
block|,
literal|12.0f
block|,
literal|17.0f
block|,
literal|22.0f
block|,
literal|27.0f
block|,
literal|17.0f
block|,
literal|22.0f
block|,
literal|27.0f
block|,
literal|32.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unique"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueValues4
operator|<<
operator|(
name|void
operator|*
operator|)
name|transposedValues4
operator|<<
operator|(
name|void
operator|*
operator|)
name|sumValues
expr_stmt|;
block|}
end_function
begin_function
DECL|function|add4x4
name|void
name|tst_QMatrixNxN
operator|::
name|add4x4
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m1Values
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m2Values
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m3Values
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m1
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
argument_list|)
decl_stmt|;
name|QMatrix4x4
name|m2
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
decl_stmt|;
name|QMatrix4x4
name|m4
argument_list|(
name|m1
argument_list|)
decl_stmt|;
name|m4
operator|+=
name|m2
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m4
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m3Values
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m5
decl_stmt|;
name|m5
operator|=
name|m1
operator|+
name|m2
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m5
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m3Values
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test matrix addition for 4x3 matrices.
end_comment
begin_function
DECL|function|add4x3_data
name|void
name|tst_QMatrixNxN
operator|::
name|add4x3_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"m1Values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"m2Values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"m3Values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues4x3
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues4x3
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues4x3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"identity/null"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityValues4x3
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues4x3
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityValues4x3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"identity/identity"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityValues4x3
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityValues4x3
operator|<<
operator|(
name|void
operator|*
operator|)
name|doubleIdentity4x3
expr_stmt|;
specifier|static
name|float
specifier|const
name|sumValues
index|[
literal|16
index|]
init|=
block|{
literal|2.0f
block|,
literal|7.0f
block|,
literal|12.0f
block|,
literal|6.0f
block|,
literal|11.0f
block|,
literal|16.0f
block|,
literal|10.0f
block|,
literal|15.0f
block|,
literal|20.0f
block|,
literal|14.0f
block|,
literal|19.0f
block|,
literal|24.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unique"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueValues4x3
operator|<<
operator|(
name|void
operator|*
operator|)
name|transposedValues3x4
operator|<<
operator|(
name|void
operator|*
operator|)
name|sumValues
expr_stmt|;
block|}
end_function
begin_function
DECL|function|add4x3
name|void
name|tst_QMatrixNxN
operator|::
name|add4x3
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m1Values
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m2Values
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m3Values
argument_list|)
expr_stmt|;
name|QMatrix4x3
name|m1
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
argument_list|)
decl_stmt|;
name|QMatrix4x3
name|m2
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
decl_stmt|;
name|QMatrix4x3
name|m4
argument_list|(
name|m1
argument_list|)
decl_stmt|;
name|m4
operator|+=
name|m2
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m4
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m3Values
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x3
name|m5
decl_stmt|;
name|m5
operator|=
name|m1
operator|+
name|m2
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m5
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m3Values
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test matrix subtraction for 2x2 matrices.
end_comment
begin_function
DECL|function|subtract2x2_data
name|void
name|tst_QMatrixNxN
operator|::
name|subtract2x2_data
parameter_list|()
block|{
comment|// Use the same test cases as the add test.
name|add2x2_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|subtract2x2
name|void
name|tst_QMatrixNxN
operator|::
name|subtract2x2
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m1Values
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m2Values
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m3Values
argument_list|)
expr_stmt|;
name|QMatrix2x2
name|m1
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
argument_list|)
decl_stmt|;
name|QMatrix2x2
name|m2
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
decl_stmt|;
name|QMatrix2x2
name|m3
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m3Values
argument_list|)
decl_stmt|;
name|QMatrix2x2
name|m4
argument_list|(
name|m3
argument_list|)
decl_stmt|;
name|m4
operator|-=
name|m1
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m4
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix2x2
name|m5
decl_stmt|;
name|m5
operator|=
name|m3
operator|-
name|m1
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m5
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix2x2
name|m6
argument_list|(
name|m3
argument_list|)
decl_stmt|;
name|m6
operator|-=
name|m2
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m6
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix2x2
name|m7
decl_stmt|;
name|m7
operator|=
name|m3
operator|-
name|m2
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m7
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test matrix subtraction for 3x3 matrices.
end_comment
begin_function
DECL|function|subtract3x3_data
name|void
name|tst_QMatrixNxN
operator|::
name|subtract3x3_data
parameter_list|()
block|{
comment|// Use the same test cases as the add test.
name|add3x3_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|subtract3x3
name|void
name|tst_QMatrixNxN
operator|::
name|subtract3x3
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m1Values
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m2Values
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m3Values
argument_list|)
expr_stmt|;
name|QMatrix3x3
name|m1
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
argument_list|)
decl_stmt|;
name|QMatrix3x3
name|m2
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
decl_stmt|;
name|QMatrix3x3
name|m3
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m3Values
argument_list|)
decl_stmt|;
name|QMatrix3x3
name|m4
argument_list|(
name|m3
argument_list|)
decl_stmt|;
name|m4
operator|-=
name|m1
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m4
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix3x3
name|m5
decl_stmt|;
name|m5
operator|=
name|m3
operator|-
name|m1
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m5
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix3x3
name|m6
argument_list|(
name|m3
argument_list|)
decl_stmt|;
name|m6
operator|-=
name|m2
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m6
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix3x3
name|m7
decl_stmt|;
name|m7
operator|=
name|m3
operator|-
name|m2
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m7
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test matrix subtraction for 4x4 matrices.
end_comment
begin_function
DECL|function|subtract4x4_data
name|void
name|tst_QMatrixNxN
operator|::
name|subtract4x4_data
parameter_list|()
block|{
comment|// Use the same test cases as the add test.
name|add4x4_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|subtract4x4
name|void
name|tst_QMatrixNxN
operator|::
name|subtract4x4
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m1Values
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m2Values
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m3Values
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m1
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
argument_list|)
decl_stmt|;
name|QMatrix4x4
name|m2
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
decl_stmt|;
name|QMatrix4x4
name|m3
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m3Values
argument_list|)
decl_stmt|;
name|QMatrix4x4
name|m4
argument_list|(
name|m3
argument_list|)
decl_stmt|;
name|m4
operator|-=
name|m1
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m4
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m5
decl_stmt|;
name|m5
operator|=
name|m3
operator|-
name|m1
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m5
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m6
argument_list|(
name|m3
argument_list|)
decl_stmt|;
name|m6
operator|-=
name|m2
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m6
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m7
decl_stmt|;
name|m7
operator|=
name|m3
operator|-
name|m2
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m7
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test matrix subtraction for 4x3 matrices.
end_comment
begin_function
DECL|function|subtract4x3_data
name|void
name|tst_QMatrixNxN
operator|::
name|subtract4x3_data
parameter_list|()
block|{
comment|// Use the same test cases as the add test.
name|add4x3_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|subtract4x3
name|void
name|tst_QMatrixNxN
operator|::
name|subtract4x3
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m1Values
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m2Values
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m3Values
argument_list|)
expr_stmt|;
name|QMatrix4x3
name|m1
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
argument_list|)
decl_stmt|;
name|QMatrix4x3
name|m2
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
decl_stmt|;
name|QMatrix4x3
name|m3
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m3Values
argument_list|)
decl_stmt|;
name|QMatrix4x3
name|m4
argument_list|(
name|m3
argument_list|)
decl_stmt|;
name|m4
operator|-=
name|m1
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m4
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x3
name|m5
decl_stmt|;
name|m5
operator|=
name|m3
operator|-
name|m1
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m5
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x3
name|m6
argument_list|(
name|m3
argument_list|)
decl_stmt|;
name|m6
operator|-=
name|m2
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m6
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x3
name|m7
decl_stmt|;
name|m7
operator|=
name|m3
operator|-
name|m2
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m7
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test matrix multiplication for 2x2 matrices.
end_comment
begin_function
DECL|function|multiply2x2_data
name|void
name|tst_QMatrixNxN
operator|::
name|multiply2x2_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"m1Values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"m2Values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"m3Values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues2
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues2
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null/unique"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues2
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueValues2
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unique/null"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueValues2
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues2
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unique/identity"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueValues2
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityValues2
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueValues2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"identity/unique"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityValues2
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueValues2
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueValues2
expr_stmt|;
specifier|static
name|float
name|uniqueResult
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
literal|2
condition|;
operator|++
name|row
control|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
literal|2
condition|;
operator|++
name|col
control|)
block|{
name|float
name|sum
init|=
literal|0.0f
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|2
condition|;
operator|++
name|j
control|)
name|sum
operator|+=
name|uniqueValues2
index|[
name|row
operator|*
literal|2
operator|+
name|j
index|]
operator|*
name|transposedValues2
index|[
name|j
operator|*
literal|2
operator|+
name|col
index|]
expr_stmt|;
name|uniqueResult
index|[
name|row
operator|*
literal|2
operator|+
name|col
index|]
operator|=
name|sum
expr_stmt|;
block|}
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unique/transposed"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueValues2
operator|<<
operator|(
name|void
operator|*
operator|)
name|transposedValues2
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueResult
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multiply2x2
name|void
name|tst_QMatrixNxN
operator|::
name|multiply2x2
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m1Values
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m2Values
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m3Values
argument_list|)
expr_stmt|;
name|QMatrix2x2
name|m1
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
argument_list|)
decl_stmt|;
name|QMatrix2x2
name|m2
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
decl_stmt|;
name|QMatrix2x2
name|m5
decl_stmt|;
name|m5
operator|=
name|m1
operator|*
name|m2
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m5
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m3Values
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test matrix multiplication for 3x3 matrices.
end_comment
begin_function
DECL|function|multiply3x3_data
name|void
name|tst_QMatrixNxN
operator|::
name|multiply3x3_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"m1Values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"m2Values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"m3Values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues3
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues3
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null/unique"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues3
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueValues3
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unique/null"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueValues3
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues3
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unique/identity"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueValues3
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityValues3
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueValues3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"identity/unique"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityValues3
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueValues3
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueValues3
expr_stmt|;
specifier|static
name|float
name|uniqueResult
index|[
literal|9
index|]
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
literal|3
condition|;
operator|++
name|row
control|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
literal|3
condition|;
operator|++
name|col
control|)
block|{
name|float
name|sum
init|=
literal|0.0f
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|3
condition|;
operator|++
name|j
control|)
name|sum
operator|+=
name|uniqueValues3
index|[
name|row
operator|*
literal|3
operator|+
name|j
index|]
operator|*
name|transposedValues3
index|[
name|j
operator|*
literal|3
operator|+
name|col
index|]
expr_stmt|;
name|uniqueResult
index|[
name|row
operator|*
literal|3
operator|+
name|col
index|]
operator|=
name|sum
expr_stmt|;
block|}
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unique/transposed"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueValues3
operator|<<
operator|(
name|void
operator|*
operator|)
name|transposedValues3
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueResult
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multiply3x3
name|void
name|tst_QMatrixNxN
operator|::
name|multiply3x3
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m1Values
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m2Values
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m3Values
argument_list|)
expr_stmt|;
name|QMatrix3x3
name|m1
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
argument_list|)
decl_stmt|;
name|QMatrix3x3
name|m2
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
decl_stmt|;
name|QMatrix3x3
name|m5
decl_stmt|;
name|m5
operator|=
name|m1
operator|*
name|m2
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m5
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m3Values
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test matrix multiplication for 4x4 matrices.
end_comment
begin_function
DECL|function|multiply4x4_data
name|void
name|tst_QMatrixNxN
operator|::
name|multiply4x4_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"m1Values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"m2Values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"m3Values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues4
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues4
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null/unique"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues4
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueValues4
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unique/null"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueValues4
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues4
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unique/identity"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueValues4
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityValues4
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueValues4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"identity/unique"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityValues4
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueValues4
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueValues4
expr_stmt|;
specifier|static
name|float
name|uniqueResult
index|[
literal|16
index|]
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
literal|4
condition|;
operator|++
name|row
control|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
literal|4
condition|;
operator|++
name|col
control|)
block|{
name|float
name|sum
init|=
literal|0.0f
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|4
condition|;
operator|++
name|j
control|)
name|sum
operator|+=
name|uniqueValues4
index|[
name|row
operator|*
literal|4
operator|+
name|j
index|]
operator|*
name|transposedValues4
index|[
name|j
operator|*
literal|4
operator|+
name|col
index|]
expr_stmt|;
name|uniqueResult
index|[
name|row
operator|*
literal|4
operator|+
name|col
index|]
operator|=
name|sum
expr_stmt|;
block|}
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unique/transposed"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueValues4
operator|<<
operator|(
name|void
operator|*
operator|)
name|transposedValues4
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueResult
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multiply4x4
name|void
name|tst_QMatrixNxN
operator|::
name|multiply4x4
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m1Values
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m2Values
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m3Values
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m1
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
argument_list|)
decl_stmt|;
name|QMatrix4x4
name|m2
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
decl_stmt|;
name|QMatrix4x4
name|m4
decl_stmt|;
name|m4
operator|=
name|m1
expr_stmt|;
name|m4
operator|*=
name|m2
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m4
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m3Values
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m5
decl_stmt|;
name|m5
operator|=
name|m1
operator|*
name|m2
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m5
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m3Values
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test matrix multiplication for 4x3 matrices.
end_comment
begin_function
DECL|function|multiply4x3_data
name|void
name|tst_QMatrixNxN
operator|::
name|multiply4x3_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"m1Values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"m2Values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"m3Values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues4x3
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues4x3
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null/unique"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues4x3
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueValues4x3
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unique/null"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueValues4x3
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues4x3
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues3
expr_stmt|;
specifier|static
name|float
name|uniqueResult
index|[
literal|9
index|]
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
literal|3
condition|;
operator|++
name|row
control|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
literal|3
condition|;
operator|++
name|col
control|)
block|{
name|float
name|sum
init|=
literal|0.0f
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|4
condition|;
operator|++
name|j
control|)
name|sum
operator|+=
name|uniqueValues4x3
index|[
name|row
operator|*
literal|4
operator|+
name|j
index|]
operator|*
name|transposedValues3x4
index|[
name|j
operator|*
literal|3
operator|+
name|col
index|]
expr_stmt|;
name|uniqueResult
index|[
name|row
operator|*
literal|3
operator|+
name|col
index|]
operator|=
name|sum
expr_stmt|;
block|}
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unique/transposed"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueValues4x3
operator|<<
operator|(
name|void
operator|*
operator|)
name|transposedValues3x4
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueResult
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multiply4x3
name|void
name|tst_QMatrixNxN
operator|::
name|multiply4x3
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m1Values
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m2Values
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m3Values
argument_list|)
expr_stmt|;
name|QMatrix4x3
name|m1
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
argument_list|)
decl_stmt|;
name|QMatrix3x4
name|m2
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
decl_stmt|;
name|QGenericMatrix
argument_list|<
literal|3
argument_list|,
literal|3
argument_list|,
name|float
argument_list|>
name|m4
decl_stmt|;
name|m4
operator|=
name|m1
operator|*
name|m2
expr_stmt|;
name|float
name|values
index|[
literal|9
index|]
decl_stmt|;
name|m4
operator|.
name|copyDataTo
argument_list|(
name|values
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
literal|9
condition|;
operator|++
name|index
control|)
name|QCOMPARE
argument_list|(
name|values
index|[
name|index
index|]
argument_list|,
operator|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m3Values
operator|)
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test matrix multiplication by a factor for 2x2 matrices.
end_comment
begin_function
DECL|function|multiplyFactor2x2_data
name|void
name|tst_QMatrixNxN
operator|::
name|multiplyFactor2x2_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"m1Values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"factor"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"m2Values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues2
operator|<<
operator|(
name|float
operator|)
literal|1.0f
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"double identity"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityValues2
operator|<<
operator|(
name|float
operator|)
literal|2.0f
operator|<<
operator|(
name|void
operator|*
operator|)
name|doubleIdentity2
expr_stmt|;
specifier|static
name|float
specifier|const
name|values
index|[
literal|16
index|]
init|=
block|{
literal|1.0f
block|,
literal|2.0f
block|,
literal|5.0f
block|,
literal|6.0f
block|}
decl_stmt|;
specifier|static
name|float
specifier|const
name|doubleValues
index|[
literal|16
index|]
init|=
block|{
literal|2.0f
block|,
literal|4.0f
block|,
literal|10.0f
block|,
literal|12.0f
block|}
decl_stmt|;
specifier|static
name|float
specifier|const
name|negDoubleValues
index|[
literal|16
index|]
init|=
block|{
operator|-
literal|2.0f
block|,
operator|-
literal|4.0f
block|,
operator|-
literal|10.0f
block|,
operator|-
literal|12.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unique"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|values
operator|<<
operator|(
name|float
operator|)
literal|2.0f
operator|<<
operator|(
name|void
operator|*
operator|)
name|doubleValues
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"neg"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|values
operator|<<
operator|(
name|float
operator|)
operator|-
literal|2.0f
operator|<<
operator|(
name|void
operator|*
operator|)
name|negDoubleValues
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"zero"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|values
operator|<<
operator|(
name|float
operator|)
literal|0.0f
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues4
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multiplyFactor2x2
name|void
name|tst_QMatrixNxN
operator|::
name|multiplyFactor2x2
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m1Values
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|factor
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m2Values
argument_list|)
expr_stmt|;
name|QMatrix2x2
name|m1
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
argument_list|)
decl_stmt|;
name|QMatrix2x2
name|m3
decl_stmt|;
name|m3
operator|=
name|m1
expr_stmt|;
name|m3
operator|*=
name|factor
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m3
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix2x2
name|m4
decl_stmt|;
name|m4
operator|=
name|m1
operator|*
name|factor
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m4
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix2x2
name|m5
decl_stmt|;
name|m5
operator|=
name|factor
operator|*
name|m1
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m5
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test matrix multiplication by a factor for 3x3 matrices.
end_comment
begin_function
DECL|function|multiplyFactor3x3_data
name|void
name|tst_QMatrixNxN
operator|::
name|multiplyFactor3x3_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"m1Values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"factor"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"m2Values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues3
operator|<<
operator|(
name|float
operator|)
literal|1.0f
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"double identity"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityValues3
operator|<<
operator|(
name|float
operator|)
literal|2.0f
operator|<<
operator|(
name|void
operator|*
operator|)
name|doubleIdentity3
expr_stmt|;
specifier|static
name|float
specifier|const
name|values
index|[
literal|16
index|]
init|=
block|{
literal|1.0f
block|,
literal|2.0f
block|,
literal|3.0f
block|,
literal|5.0f
block|,
literal|6.0f
block|,
literal|7.0f
block|,
literal|9.0f
block|,
literal|10.0f
block|,
literal|11.0f
block|}
decl_stmt|;
specifier|static
name|float
specifier|const
name|doubleValues
index|[
literal|16
index|]
init|=
block|{
literal|2.0f
block|,
literal|4.0f
block|,
literal|6.0f
block|,
literal|10.0f
block|,
literal|12.0f
block|,
literal|14.0f
block|,
literal|18.0f
block|,
literal|20.0f
block|,
literal|22.0f
block|}
decl_stmt|;
specifier|static
name|float
specifier|const
name|negDoubleValues
index|[
literal|16
index|]
init|=
block|{
operator|-
literal|2.0f
block|,
operator|-
literal|4.0f
block|,
operator|-
literal|6.0f
block|,
operator|-
literal|10.0f
block|,
operator|-
literal|12.0f
block|,
operator|-
literal|14.0f
block|,
operator|-
literal|18.0f
block|,
operator|-
literal|20.0f
block|,
operator|-
literal|22.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unique"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|values
operator|<<
operator|(
name|float
operator|)
literal|2.0f
operator|<<
operator|(
name|void
operator|*
operator|)
name|doubleValues
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"neg"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|values
operator|<<
operator|(
name|float
operator|)
operator|-
literal|2.0f
operator|<<
operator|(
name|void
operator|*
operator|)
name|negDoubleValues
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"zero"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|values
operator|<<
operator|(
name|float
operator|)
literal|0.0f
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues4
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multiplyFactor3x3
name|void
name|tst_QMatrixNxN
operator|::
name|multiplyFactor3x3
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m1Values
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|factor
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m2Values
argument_list|)
expr_stmt|;
name|QMatrix3x3
name|m1
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
argument_list|)
decl_stmt|;
name|QMatrix3x3
name|m3
decl_stmt|;
name|m3
operator|=
name|m1
expr_stmt|;
name|m3
operator|*=
name|factor
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m3
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix3x3
name|m4
decl_stmt|;
name|m4
operator|=
name|m1
operator|*
name|factor
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m4
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix3x3
name|m5
decl_stmt|;
name|m5
operator|=
name|factor
operator|*
name|m1
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m5
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test matrix multiplication by a factor for 4x4 matrices.
end_comment
begin_function
DECL|function|multiplyFactor4x4_data
name|void
name|tst_QMatrixNxN
operator|::
name|multiplyFactor4x4_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"m1Values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"factor"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"m2Values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues4
operator|<<
operator|(
name|float
operator|)
literal|1.0f
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"double identity"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityValues4
operator|<<
operator|(
name|float
operator|)
literal|2.0f
operator|<<
operator|(
name|void
operator|*
operator|)
name|doubleIdentity4
expr_stmt|;
specifier|static
name|float
specifier|const
name|values
index|[
literal|16
index|]
init|=
block|{
literal|1.0f
block|,
literal|2.0f
block|,
literal|3.0f
block|,
literal|4.0f
block|,
literal|5.0f
block|,
literal|6.0f
block|,
literal|7.0f
block|,
literal|8.0f
block|,
literal|9.0f
block|,
literal|10.0f
block|,
literal|11.0f
block|,
literal|12.0f
block|,
literal|13.0f
block|,
literal|14.0f
block|,
literal|15.0f
block|,
literal|16.0f
block|}
decl_stmt|;
specifier|static
name|float
specifier|const
name|doubleValues
index|[
literal|16
index|]
init|=
block|{
literal|2.0f
block|,
literal|4.0f
block|,
literal|6.0f
block|,
literal|8.0f
block|,
literal|10.0f
block|,
literal|12.0f
block|,
literal|14.0f
block|,
literal|16.0f
block|,
literal|18.0f
block|,
literal|20.0f
block|,
literal|22.0f
block|,
literal|24.0f
block|,
literal|26.0f
block|,
literal|28.0f
block|,
literal|30.0f
block|,
literal|32.0f
block|}
decl_stmt|;
specifier|static
name|float
specifier|const
name|negDoubleValues
index|[
literal|16
index|]
init|=
block|{
operator|-
literal|2.0f
block|,
operator|-
literal|4.0f
block|,
operator|-
literal|6.0f
block|,
operator|-
literal|8.0f
block|,
operator|-
literal|10.0f
block|,
operator|-
literal|12.0f
block|,
operator|-
literal|14.0f
block|,
operator|-
literal|16.0f
block|,
operator|-
literal|18.0f
block|,
operator|-
literal|20.0f
block|,
operator|-
literal|22.0f
block|,
operator|-
literal|24.0f
block|,
operator|-
literal|26.0f
block|,
operator|-
literal|28.0f
block|,
operator|-
literal|30.0f
block|,
operator|-
literal|32.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unique"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|values
operator|<<
operator|(
name|float
operator|)
literal|2.0f
operator|<<
operator|(
name|void
operator|*
operator|)
name|doubleValues
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"neg"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|values
operator|<<
operator|(
name|float
operator|)
operator|-
literal|2.0f
operator|<<
operator|(
name|void
operator|*
operator|)
name|negDoubleValues
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"zero"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|values
operator|<<
operator|(
name|float
operator|)
literal|0.0f
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues4
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multiplyFactor4x4
name|void
name|tst_QMatrixNxN
operator|::
name|multiplyFactor4x4
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m1Values
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|factor
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m2Values
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m1
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
argument_list|)
decl_stmt|;
name|QMatrix4x4
name|m3
decl_stmt|;
name|m3
operator|=
name|m1
expr_stmt|;
name|m3
operator|*=
name|factor
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m3
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m4
decl_stmt|;
name|m4
operator|=
name|m1
operator|*
name|factor
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m4
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m5
decl_stmt|;
name|m5
operator|=
name|factor
operator|*
name|m1
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m5
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test matrix multiplication by a factor for 4x3 matrices.
end_comment
begin_function
DECL|function|multiplyFactor4x3_data
name|void
name|tst_QMatrixNxN
operator|::
name|multiplyFactor4x3_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"m1Values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"factor"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"m2Values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues4x3
operator|<<
operator|(
name|float
operator|)
literal|1.0f
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues4x3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"double identity"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityValues4x3
operator|<<
operator|(
name|float
operator|)
literal|2.0f
operator|<<
operator|(
name|void
operator|*
operator|)
name|doubleIdentity4x3
expr_stmt|;
specifier|static
name|float
specifier|const
name|values
index|[
literal|12
index|]
init|=
block|{
literal|1.0f
block|,
literal|2.0f
block|,
literal|3.0f
block|,
literal|4.0f
block|,
literal|5.0f
block|,
literal|6.0f
block|,
literal|7.0f
block|,
literal|8.0f
block|,
literal|9.0f
block|,
literal|10.0f
block|,
literal|11.0f
block|,
literal|12.0f
block|}
decl_stmt|;
specifier|static
name|float
specifier|const
name|doubleValues
index|[
literal|12
index|]
init|=
block|{
literal|2.0f
block|,
literal|4.0f
block|,
literal|6.0f
block|,
literal|8.0f
block|,
literal|10.0f
block|,
literal|12.0f
block|,
literal|14.0f
block|,
literal|16.0f
block|,
literal|18.0f
block|,
literal|20.0f
block|,
literal|22.0f
block|,
literal|24.0f
block|}
decl_stmt|;
specifier|static
name|float
specifier|const
name|negDoubleValues
index|[
literal|12
index|]
init|=
block|{
operator|-
literal|2.0f
block|,
operator|-
literal|4.0f
block|,
operator|-
literal|6.0f
block|,
operator|-
literal|8.0f
block|,
operator|-
literal|10.0f
block|,
operator|-
literal|12.0f
block|,
operator|-
literal|14.0f
block|,
operator|-
literal|16.0f
block|,
operator|-
literal|18.0f
block|,
operator|-
literal|20.0f
block|,
operator|-
literal|22.0f
block|,
operator|-
literal|24.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unique"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|values
operator|<<
operator|(
name|float
operator|)
literal|2.0f
operator|<<
operator|(
name|void
operator|*
operator|)
name|doubleValues
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"neg"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|values
operator|<<
operator|(
name|float
operator|)
operator|-
literal|2.0f
operator|<<
operator|(
name|void
operator|*
operator|)
name|negDoubleValues
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"zero"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|values
operator|<<
operator|(
name|float
operator|)
literal|0.0f
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues4x3
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multiplyFactor4x3
name|void
name|tst_QMatrixNxN
operator|::
name|multiplyFactor4x3
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m1Values
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|factor
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m2Values
argument_list|)
expr_stmt|;
name|QMatrix4x3
name|m1
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
argument_list|)
decl_stmt|;
name|QMatrix4x3
name|m3
decl_stmt|;
name|m3
operator|=
name|m1
expr_stmt|;
name|m3
operator|*=
name|factor
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m3
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x3
name|m4
decl_stmt|;
name|m4
operator|=
name|m1
operator|*
name|factor
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m4
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x3
name|m5
decl_stmt|;
name|m5
operator|=
name|factor
operator|*
name|m1
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m5
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test matrix division by a factor for 2x2 matrices.
end_comment
begin_function
DECL|function|divideFactor2x2_data
name|void
name|tst_QMatrixNxN
operator|::
name|divideFactor2x2_data
parameter_list|()
block|{
comment|// Use the same test cases as the multiplyFactor test.
name|multiplyFactor2x2_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|divideFactor2x2
name|void
name|tst_QMatrixNxN
operator|::
name|divideFactor2x2
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m1Values
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|factor
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m2Values
argument_list|)
expr_stmt|;
if|if
condition|(
name|factor
operator|==
literal|0.0f
condition|)
return|return;
name|QMatrix2x2
name|m2
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
decl_stmt|;
name|QMatrix2x2
name|m3
decl_stmt|;
name|m3
operator|=
name|m2
expr_stmt|;
name|m3
operator|/=
name|factor
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m3
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix2x2
name|m4
decl_stmt|;
name|m4
operator|=
name|m2
operator|/
name|factor
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m4
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test matrix division by a factor for 3x3 matrices.
end_comment
begin_function
DECL|function|divideFactor3x3_data
name|void
name|tst_QMatrixNxN
operator|::
name|divideFactor3x3_data
parameter_list|()
block|{
comment|// Use the same test cases as the multiplyFactor test.
name|multiplyFactor3x3_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|divideFactor3x3
name|void
name|tst_QMatrixNxN
operator|::
name|divideFactor3x3
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m1Values
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|factor
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m2Values
argument_list|)
expr_stmt|;
if|if
condition|(
name|factor
operator|==
literal|0.0f
condition|)
return|return;
name|QMatrix3x3
name|m2
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
decl_stmt|;
name|QMatrix3x3
name|m3
decl_stmt|;
name|m3
operator|=
name|m2
expr_stmt|;
name|m3
operator|/=
name|factor
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m3
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix3x3
name|m4
decl_stmt|;
name|m4
operator|=
name|m2
operator|/
name|factor
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m4
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test matrix division by a factor for 4x4 matrices.
end_comment
begin_function
DECL|function|divideFactor4x4_data
name|void
name|tst_QMatrixNxN
operator|::
name|divideFactor4x4_data
parameter_list|()
block|{
comment|// Use the same test cases as the multiplyFactor test.
name|multiplyFactor4x4_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|divideFactor4x4
name|void
name|tst_QMatrixNxN
operator|::
name|divideFactor4x4
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m1Values
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|factor
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m2Values
argument_list|)
expr_stmt|;
if|if
condition|(
name|factor
operator|==
literal|0.0f
condition|)
return|return;
name|QMatrix4x4
name|m2
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
decl_stmt|;
name|QMatrix4x4
name|m3
decl_stmt|;
name|m3
operator|=
name|m2
expr_stmt|;
name|m3
operator|/=
name|factor
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m3
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m4
decl_stmt|;
name|m4
operator|=
name|m2
operator|/
name|factor
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m4
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test matrix division by a factor for 4x3 matrices.
end_comment
begin_function
DECL|function|divideFactor4x3_data
name|void
name|tst_QMatrixNxN
operator|::
name|divideFactor4x3_data
parameter_list|()
block|{
comment|// Use the same test cases as the multiplyFactor test.
name|multiplyFactor4x3_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|divideFactor4x3
name|void
name|tst_QMatrixNxN
operator|::
name|divideFactor4x3
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m1Values
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|factor
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m2Values
argument_list|)
expr_stmt|;
if|if
condition|(
name|factor
operator|==
literal|0.0f
condition|)
return|return;
name|QMatrix4x3
name|m2
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
decl_stmt|;
name|QMatrix4x3
name|m3
decl_stmt|;
name|m3
operator|=
name|m2
expr_stmt|;
name|m3
operator|/=
name|factor
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m3
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x3
name|m4
decl_stmt|;
name|m4
operator|=
name|m2
operator|/
name|factor
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m4
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test matrix negation for 2x2 matrices.
end_comment
begin_function
DECL|function|negate2x2_data
name|void
name|tst_QMatrixNxN
operator|::
name|negate2x2_data
parameter_list|()
block|{
comment|// Use the same test cases as the multiplyFactor test.
name|multiplyFactor2x2_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|negate2x2
name|void
name|tst_QMatrixNxN
operator|::
name|negate2x2
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m1Values
argument_list|)
expr_stmt|;
specifier|const
name|float
modifier|*
name|values
init|=
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
decl_stmt|;
name|QMatrix2x2
name|m1
argument_list|(
name|values
argument_list|)
decl_stmt|;
name|float
name|negated
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
literal|4
condition|;
operator|++
name|index
control|)
name|negated
index|[
name|index
index|]
operator|=
operator|-
name|values
index|[
name|index
index|]
expr_stmt|;
name|QMatrix2x2
name|m2
decl_stmt|;
name|m2
operator|=
operator|-
name|m1
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m2
argument_list|,
name|negated
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test matrix negation for 3x3 matrices.
end_comment
begin_function
DECL|function|negate3x3_data
name|void
name|tst_QMatrixNxN
operator|::
name|negate3x3_data
parameter_list|()
block|{
comment|// Use the same test cases as the multiplyFactor test.
name|multiplyFactor3x3_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|negate3x3
name|void
name|tst_QMatrixNxN
operator|::
name|negate3x3
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m1Values
argument_list|)
expr_stmt|;
specifier|const
name|float
modifier|*
name|values
init|=
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
decl_stmt|;
name|QMatrix3x3
name|m1
argument_list|(
name|values
argument_list|)
decl_stmt|;
name|float
name|negated
index|[
literal|9
index|]
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
literal|9
condition|;
operator|++
name|index
control|)
name|negated
index|[
name|index
index|]
operator|=
operator|-
name|values
index|[
name|index
index|]
expr_stmt|;
name|QMatrix3x3
name|m2
decl_stmt|;
name|m2
operator|=
operator|-
name|m1
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m2
argument_list|,
name|negated
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test matrix negation for 4x4 matrices.
end_comment
begin_function
DECL|function|negate4x4_data
name|void
name|tst_QMatrixNxN
operator|::
name|negate4x4_data
parameter_list|()
block|{
comment|// Use the same test cases as the multiplyFactor test.
name|multiplyFactor4x4_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|negate4x4
name|void
name|tst_QMatrixNxN
operator|::
name|negate4x4
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m1Values
argument_list|)
expr_stmt|;
specifier|const
name|float
modifier|*
name|values
init|=
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
decl_stmt|;
name|QMatrix4x4
name|m1
argument_list|(
name|values
argument_list|)
decl_stmt|;
name|float
name|negated
index|[
literal|16
index|]
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
literal|16
condition|;
operator|++
name|index
control|)
name|negated
index|[
name|index
index|]
operator|=
operator|-
name|values
index|[
name|index
index|]
expr_stmt|;
name|QMatrix4x4
name|m2
decl_stmt|;
name|m2
operator|=
operator|-
name|m1
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m2
argument_list|,
name|negated
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test matrix negation for 4x3 matrices.
end_comment
begin_function
DECL|function|negate4x3_data
name|void
name|tst_QMatrixNxN
operator|::
name|negate4x3_data
parameter_list|()
block|{
comment|// Use the same test cases as the multiplyFactor test.
name|multiplyFactor4x3_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|negate4x3
name|void
name|tst_QMatrixNxN
operator|::
name|negate4x3
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m1Values
argument_list|)
expr_stmt|;
specifier|const
name|float
modifier|*
name|values
init|=
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
decl_stmt|;
name|QMatrix4x3
name|m1
argument_list|(
name|values
argument_list|)
decl_stmt|;
name|float
name|negated
index|[
literal|12
index|]
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
literal|12
condition|;
operator|++
name|index
control|)
name|negated
index|[
name|index
index|]
operator|=
operator|-
name|values
index|[
name|index
index|]
expr_stmt|;
name|QMatrix4x3
name|m2
decl_stmt|;
name|m2
operator|=
operator|-
name|m1
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m2
argument_list|,
name|negated
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Matrix inverted.  This is a more straight-forward implementation
end_comment
begin_comment
comment|// of the algorithm at http://www.j3d.org/matrix_faq/matrfaq_latest.html#Q24
end_comment
begin_comment
comment|// than the optimized version in the QMatrix4x4 code.  Hopefully it is
end_comment
begin_comment
comment|// easier to verify that this version is the same as the reference.
end_comment
begin_struct
DECL|struct|Matrix3
struct|struct
name|Matrix3
block|{
DECL|member|v
name|float
name|v
index|[
literal|9
index|]
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|Matrix4
struct|struct
name|Matrix4
block|{
DECL|member|v
name|float
name|v
index|[
literal|16
index|]
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|m3Determinant
specifier|static
name|float
name|m3Determinant
parameter_list|(
specifier|const
name|Matrix3
modifier|&
name|m
parameter_list|)
block|{
return|return
name|m
operator|.
name|v
index|[
literal|0
index|]
operator|*
operator|(
name|m
operator|.
name|v
index|[
literal|4
index|]
operator|*
name|m
operator|.
name|v
index|[
literal|8
index|]
operator|-
name|m
operator|.
name|v
index|[
literal|7
index|]
operator|*
name|m
operator|.
name|v
index|[
literal|5
index|]
operator|)
operator|-
name|m
operator|.
name|v
index|[
literal|1
index|]
operator|*
operator|(
name|m
operator|.
name|v
index|[
literal|3
index|]
operator|*
name|m
operator|.
name|v
index|[
literal|8
index|]
operator|-
name|m
operator|.
name|v
index|[
literal|6
index|]
operator|*
name|m
operator|.
name|v
index|[
literal|5
index|]
operator|)
operator|+
name|m
operator|.
name|v
index|[
literal|2
index|]
operator|*
operator|(
name|m
operator|.
name|v
index|[
literal|3
index|]
operator|*
name|m
operator|.
name|v
index|[
literal|7
index|]
operator|-
name|m
operator|.
name|v
index|[
literal|6
index|]
operator|*
name|m
operator|.
name|v
index|[
literal|4
index|]
operator|)
return|;
block|}
end_function
begin_function
DECL|function|m3Inverse
specifier|static
name|bool
name|m3Inverse
parameter_list|(
specifier|const
name|Matrix3
modifier|&
name|min
parameter_list|,
name|Matrix3
modifier|&
name|mout
parameter_list|)
block|{
name|float
name|det
init|=
name|m3Determinant
argument_list|(
name|min
argument_list|)
decl_stmt|;
if|if
condition|(
name|det
operator|==
literal|0.0f
condition|)
return|return
literal|false
return|;
name|mout
operator|.
name|v
index|[
literal|0
index|]
operator|=
operator|(
name|min
operator|.
name|v
index|[
literal|4
index|]
operator|*
name|min
operator|.
name|v
index|[
literal|8
index|]
operator|-
name|min
operator|.
name|v
index|[
literal|5
index|]
operator|*
name|min
operator|.
name|v
index|[
literal|7
index|]
operator|)
operator|/
name|det
expr_stmt|;
name|mout
operator|.
name|v
index|[
literal|1
index|]
operator|=
operator|-
operator|(
name|min
operator|.
name|v
index|[
literal|1
index|]
operator|*
name|min
operator|.
name|v
index|[
literal|8
index|]
operator|-
name|min
operator|.
name|v
index|[
literal|2
index|]
operator|*
name|min
operator|.
name|v
index|[
literal|7
index|]
operator|)
operator|/
name|det
expr_stmt|;
name|mout
operator|.
name|v
index|[
literal|2
index|]
operator|=
operator|(
name|min
operator|.
name|v
index|[
literal|1
index|]
operator|*
name|min
operator|.
name|v
index|[
literal|5
index|]
operator|-
name|min
operator|.
name|v
index|[
literal|4
index|]
operator|*
name|min
operator|.
name|v
index|[
literal|2
index|]
operator|)
operator|/
name|det
expr_stmt|;
name|mout
operator|.
name|v
index|[
literal|3
index|]
operator|=
operator|-
operator|(
name|min
operator|.
name|v
index|[
literal|3
index|]
operator|*
name|min
operator|.
name|v
index|[
literal|8
index|]
operator|-
name|min
operator|.
name|v
index|[
literal|5
index|]
operator|*
name|min
operator|.
name|v
index|[
literal|6
index|]
operator|)
operator|/
name|det
expr_stmt|;
name|mout
operator|.
name|v
index|[
literal|4
index|]
operator|=
operator|(
name|min
operator|.
name|v
index|[
literal|0
index|]
operator|*
name|min
operator|.
name|v
index|[
literal|8
index|]
operator|-
name|min
operator|.
name|v
index|[
literal|6
index|]
operator|*
name|min
operator|.
name|v
index|[
literal|2
index|]
operator|)
operator|/
name|det
expr_stmt|;
name|mout
operator|.
name|v
index|[
literal|5
index|]
operator|=
operator|-
operator|(
name|min
operator|.
name|v
index|[
literal|0
index|]
operator|*
name|min
operator|.
name|v
index|[
literal|5
index|]
operator|-
name|min
operator|.
name|v
index|[
literal|3
index|]
operator|*
name|min
operator|.
name|v
index|[
literal|2
index|]
operator|)
operator|/
name|det
expr_stmt|;
name|mout
operator|.
name|v
index|[
literal|6
index|]
operator|=
operator|(
name|min
operator|.
name|v
index|[
literal|3
index|]
operator|*
name|min
operator|.
name|v
index|[
literal|7
index|]
operator|-
name|min
operator|.
name|v
index|[
literal|6
index|]
operator|*
name|min
operator|.
name|v
index|[
literal|4
index|]
operator|)
operator|/
name|det
expr_stmt|;
name|mout
operator|.
name|v
index|[
literal|7
index|]
operator|=
operator|-
operator|(
name|min
operator|.
name|v
index|[
literal|0
index|]
operator|*
name|min
operator|.
name|v
index|[
literal|7
index|]
operator|-
name|min
operator|.
name|v
index|[
literal|6
index|]
operator|*
name|min
operator|.
name|v
index|[
literal|1
index|]
operator|)
operator|/
name|det
expr_stmt|;
name|mout
operator|.
name|v
index|[
literal|8
index|]
operator|=
operator|(
name|min
operator|.
name|v
index|[
literal|0
index|]
operator|*
name|min
operator|.
name|v
index|[
literal|4
index|]
operator|-
name|min
operator|.
name|v
index|[
literal|1
index|]
operator|*
name|min
operator|.
name|v
index|[
literal|3
index|]
operator|)
operator|/
name|det
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|m3Transpose
specifier|static
name|void
name|m3Transpose
parameter_list|(
name|Matrix3
modifier|&
name|m
parameter_list|)
block|{
name|qSwap
argument_list|(
name|m
operator|.
name|v
index|[
literal|1
index|]
argument_list|,
name|m
operator|.
name|v
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|qSwap
argument_list|(
name|m
operator|.
name|v
index|[
literal|2
index|]
argument_list|,
name|m
operator|.
name|v
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|qSwap
argument_list|(
name|m
operator|.
name|v
index|[
literal|5
index|]
argument_list|,
name|m
operator|.
name|v
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|m4Submatrix
specifier|static
name|void
name|m4Submatrix
parameter_list|(
specifier|const
name|Matrix4
modifier|&
name|min
parameter_list|,
name|Matrix3
modifier|&
name|mout
parameter_list|,
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
for|for
control|(
name|int
name|di
init|=
literal|0
init|;
name|di
operator|<
literal|3
condition|;
operator|++
name|di
control|)
block|{
for|for
control|(
name|int
name|dj
init|=
literal|0
init|;
name|dj
operator|<
literal|3
condition|;
operator|++
name|dj
control|)
block|{
name|int
name|si
init|=
name|di
operator|+
operator|(
operator|(
name|di
operator|>=
name|i
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|int
name|sj
init|=
name|dj
operator|+
operator|(
operator|(
name|dj
operator|>=
name|j
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|mout
operator|.
name|v
index|[
name|di
operator|*
literal|3
operator|+
name|dj
index|]
operator|=
name|min
operator|.
name|v
index|[
name|si
operator|*
literal|4
operator|+
name|sj
index|]
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|m4Determinant
specifier|static
name|float
name|m4Determinant
parameter_list|(
specifier|const
name|Matrix4
modifier|&
name|m
parameter_list|)
block|{
name|float
name|det
decl_stmt|;
name|float
name|result
init|=
literal|0.0f
decl_stmt|;
name|float
name|i
init|=
literal|1.0f
decl_stmt|;
name|Matrix3
name|msub
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
literal|4
condition|;
operator|++
name|n
operator|,
name|i
operator|*=
operator|-
literal|1.0f
control|)
block|{
name|m4Submatrix
argument_list|(
name|m
argument_list|,
name|msub
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|det
operator|=
name|m3Determinant
argument_list|(
name|msub
argument_list|)
expr_stmt|;
name|result
operator|+=
name|m
operator|.
name|v
index|[
name|n
index|]
operator|*
name|det
operator|*
name|i
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|m4Inverse
specifier|static
name|void
name|m4Inverse
parameter_list|(
specifier|const
name|Matrix4
modifier|&
name|min
parameter_list|,
name|Matrix4
modifier|&
name|mout
parameter_list|)
block|{
name|float
name|det
init|=
name|m4Determinant
argument_list|(
name|min
argument_list|)
decl_stmt|;
name|Matrix3
name|msub
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|4
condition|;
operator|++
name|j
control|)
block|{
name|float
name|sign
init|=
literal|1.0f
operator|-
operator|(
operator|(
name|i
operator|+
name|j
operator|)
operator|%
literal|2
operator|)
operator|*
literal|2.0f
decl_stmt|;
name|m4Submatrix
argument_list|(
name|min
argument_list|,
name|msub
argument_list|,
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|mout
operator|.
name|v
index|[
name|i
operator|+
name|j
operator|*
literal|4
index|]
operator|=
operator|(
name|m3Determinant
argument_list|(
name|msub
argument_list|)
operator|*
name|sign
operator|)
operator|/
name|det
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|// Test matrix inverted for 4x4 matrices.
end_comment
begin_function
DECL|function|inverted4x4_data
name|void
name|tst_QMatrixNxN
operator|::
name|inverted4x4_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"m1Values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"m2Values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"invertible"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues4
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityValues4
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"identity"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityValues4
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityValues4
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unique"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueValues4
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityValues4
operator|<<
literal|false
expr_stmt|;
specifier|static
name|Matrix4
specifier|const
name|invertible
init|=
block|{
block|{
literal|5.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|2.0f
block|,
literal|0.0f
block|,
literal|6.0f
block|,
literal|0.0f
block|,
literal|3.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|7.0f
block|,
literal|4.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
block|}
decl_stmt|;
specifier|static
name|Matrix4
name|inverted
decl_stmt|;
name|m4Inverse
argument_list|(
name|invertible
argument_list|,
name|inverted
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invertible"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|invertible
operator|.
name|v
operator|<<
operator|(
name|void
operator|*
operator|)
name|inverted
operator|.
name|v
operator|<<
literal|true
expr_stmt|;
specifier|static
name|Matrix4
specifier|const
name|invertible2
init|=
block|{
block|{
literal|1.0f
block|,
literal|2.0f
block|,
literal|4.0f
block|,
literal|2.0f
block|,
literal|8.0f
block|,
literal|3.0f
block|,
literal|5.0f
block|,
literal|3.0f
block|,
literal|6.0f
block|,
literal|7.0f
block|,
literal|9.0f
block|,
literal|4.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
block|}
decl_stmt|;
specifier|static
name|Matrix4
name|inverted2
decl_stmt|;
name|m4Inverse
argument_list|(
name|invertible2
argument_list|,
name|inverted2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invertible2"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|invertible2
operator|.
name|v
operator|<<
operator|(
name|void
operator|*
operator|)
name|inverted2
operator|.
name|v
operator|<<
literal|true
expr_stmt|;
specifier|static
name|Matrix4
specifier|const
name|translate
init|=
block|{
block|{
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|2.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|3.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|4.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
block|}
decl_stmt|;
specifier|static
name|Matrix4
specifier|const
name|inverseTranslate
init|=
block|{
block|{
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
operator|-
literal|2.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
operator|-
literal|3.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
operator|-
literal|4.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"translate"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|translate
operator|.
name|v
operator|<<
operator|(
name|void
operator|*
operator|)
name|inverseTranslate
operator|.
name|v
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|inverted4x4
name|void
name|tst_QMatrixNxN
operator|::
name|inverted4x4
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m1Values
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|m2Values
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|invertible
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m1
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
argument_list|)
decl_stmt|;
if|if
condition|(
name|invertible
condition|)
name|QVERIFY
argument_list|(
name|m1
operator|.
name|determinant
argument_list|()
operator|!=
literal|0.0f
argument_list|)
expr_stmt|;
else|else
name|QVERIFY
argument_list|(
name|m1
operator|.
name|determinant
argument_list|()
operator|==
literal|0.0f
argument_list|)
expr_stmt|;
name|Matrix4
name|m1alt
decl_stmt|;
name|memcpy
argument_list|(
name|m1alt
operator|.
name|v
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m1Values
argument_list|,
sizeof|sizeof
argument_list|(
name|m1alt
operator|.
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m1
operator|.
name|determinant
argument_list|()
argument_list|,
name|m4Determinant
argument_list|(
name|m1alt
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m2
decl_stmt|;
name|bool
name|inv
decl_stmt|;
name|m2
operator|=
name|m1
operator|.
name|inverted
argument_list|(
operator|&
name|inv
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m2
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|invertible
condition|)
block|{
name|QVERIFY
argument_list|(
name|inv
argument_list|)
expr_stmt|;
name|Matrix4
name|m2alt
decl_stmt|;
name|m4Inverse
argument_list|(
name|m1alt
argument_list|,
name|m2alt
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m2
argument_list|,
name|m2alt
operator|.
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m3
decl_stmt|;
name|m3
operator|=
name|m1
operator|*
name|m2
expr_stmt|;
name|QVERIFY
argument_list|(
name|isIdentity
argument_list|(
name|m3
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m4
decl_stmt|;
name|m4
operator|=
name|m2
operator|*
name|m1
expr_stmt|;
name|QVERIFY
argument_list|(
name|isIdentity
argument_list|(
name|m4
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
operator|!
name|inv
argument_list|)
expr_stmt|;
block|}
comment|// Test again, after inferring the special matrix type.
name|m1
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|m2
operator|=
name|m1
operator|.
name|inverted
argument_list|(
operator|&
name|inv
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m2
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|m2Values
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|inv
argument_list|,
name|invertible
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|orthonormalInverse4x4
name|void
name|tst_QMatrixNxN
operator|::
name|orthonormalInverse4x4
parameter_list|()
block|{
name|QMatrix4x4
name|m1
decl_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|m1
operator|.
name|inverted
argument_list|()
argument_list|,
name|m1
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m2
decl_stmt|;
name|m2
operator|.
name|rotate
argument_list|(
literal|45.0
argument_list|,
literal|1.0
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|m2
operator|.
name|translate
argument_list|(
literal|10.0
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
comment|// Use operator() to drop the internal flags that
comment|// mark the matrix as orthonormal.  This will force inverted()
comment|// to compute m3.inverted() the long way.  We can then compare
comment|// the result to what the faster algorithm produces on m2.
name|QMatrix4x4
name|m3
init|=
name|m2
decl_stmt|;
name|m3
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|bool
name|invertible
decl_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|m2
operator|.
name|inverted
argument_list|(
operator|&
name|invertible
argument_list|)
argument_list|,
name|m3
operator|.
name|inverted
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|invertible
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m4
decl_stmt|;
name|m4
operator|.
name|rotate
argument_list|(
literal|45.0
argument_list|,
literal|0.0
argument_list|,
literal|1.0
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m5
init|=
name|m4
decl_stmt|;
name|m5
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|m4
operator|.
name|inverted
argument_list|()
argument_list|,
name|m5
operator|.
name|inverted
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m6
decl_stmt|;
name|m1
operator|.
name|rotate
argument_list|(
literal|88
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
name|m1
operator|.
name|translate
argument_list|(
operator|-
literal|20.0
argument_list|,
literal|20.0
argument_list|,
literal|15.0
argument_list|)
expr_stmt|;
name|m1
operator|.
name|rotate
argument_list|(
literal|25
argument_list|,
literal|1.0
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m7
init|=
name|m6
decl_stmt|;
name|m7
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|m6
operator|.
name|inverted
argument_list|()
argument_list|,
name|m7
operator|.
name|inverted
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test the generation and use of 4x4 scale matrices.
end_comment
begin_function
DECL|function|scale4x4_data
name|void
name|tst_QMatrixNxN
operator|::
name|scale4x4_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"resultValues"
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|float
name|nullScale
index|[]
init|=
block|{
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
operator|(
name|float
operator|)
literal|0.0f
operator|<<
operator|(
name|float
operator|)
literal|0.0f
operator|<<
operator|(
name|float
operator|)
literal|0.0f
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullScale
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"identity"
argument_list|)
operator|<<
operator|(
name|float
operator|)
literal|1.0f
operator|<<
operator|(
name|float
operator|)
literal|1.0f
operator|<<
operator|(
name|float
operator|)
literal|1.0f
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityValues4
expr_stmt|;
specifier|static
specifier|const
name|float
name|doubleScale
index|[]
init|=
block|{
literal|2.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|2.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|2.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"double"
argument_list|)
operator|<<
operator|(
name|float
operator|)
literal|2.0f
operator|<<
operator|(
name|float
operator|)
literal|2.0f
operator|<<
operator|(
name|float
operator|)
literal|2.0f
operator|<<
operator|(
name|void
operator|*
operator|)
name|doubleScale
expr_stmt|;
specifier|static
specifier|const
name|float
name|complexScale
index|[]
init|=
block|{
literal|2.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|11.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
operator|-
literal|6.5f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"complex"
argument_list|)
operator|<<
operator|(
name|float
operator|)
literal|2.0f
operator|<<
operator|(
name|float
operator|)
literal|11.0f
operator|<<
operator|(
name|float
operator|)
operator|-
literal|6.5f
operator|<<
operator|(
name|void
operator|*
operator|)
name|complexScale
expr_stmt|;
specifier|static
specifier|const
name|float
name|complexScale2D
index|[]
init|=
block|{
literal|2.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
operator|-
literal|11.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"complex2D"
argument_list|)
operator|<<
operator|(
name|float
operator|)
literal|2.0f
operator|<<
operator|(
name|float
operator|)
operator|-
literal|11.0f
operator|<<
operator|(
name|float
operator|)
literal|1.0f
operator|<<
operator|(
name|void
operator|*
operator|)
name|complexScale2D
expr_stmt|;
block|}
end_function
begin_function
DECL|function|scale4x4
name|void
name|tst_QMatrixNxN
operator|::
name|scale4x4
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|resultValues
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|result
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|resultValues
argument_list|)
decl_stmt|;
name|QMatrix4x4
name|m1
decl_stmt|;
name|m1
operator|.
name|scale
argument_list|(
name|QVector3D
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m1
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|resultValues
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m2
decl_stmt|;
name|m2
operator|.
name|scale
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m2
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|resultValues
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|z
operator|==
literal|1.0f
condition|)
block|{
name|QMatrix4x4
name|m2b
decl_stmt|;
name|m2b
operator|.
name|scale
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m2b
operator|==
name|m2
argument_list|)
expr_stmt|;
block|}
name|QVector3D
name|v1
argument_list|(
literal|2.0f
argument_list|,
literal|3.0f
argument_list|,
operator|-
literal|4.0f
argument_list|)
decl_stmt|;
name|QVector3D
name|v2
init|=
name|m1
operator|*
name|v1
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|x
argument_list|()
argument_list|,
call|(
name|float
call|)
argument_list|(
literal|2.0f
operator|*
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|y
argument_list|()
argument_list|,
call|(
name|float
call|)
argument_list|(
literal|3.0f
operator|*
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|z
argument_list|()
argument_list|,
call|(
name|float
call|)
argument_list|(
operator|-
literal|4.0f
operator|*
name|z
argument_list|)
argument_list|)
expr_stmt|;
name|v2
operator|=
name|v1
operator|*
name|m1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|x
argument_list|()
argument_list|,
call|(
name|float
call|)
argument_list|(
literal|2.0f
operator|*
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|y
argument_list|()
argument_list|,
call|(
name|float
call|)
argument_list|(
literal|3.0f
operator|*
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|z
argument_list|()
argument_list|,
call|(
name|float
call|)
argument_list|(
operator|-
literal|4.0f
operator|*
name|z
argument_list|)
argument_list|)
expr_stmt|;
name|QVector4D
name|v3
argument_list|(
literal|2.0f
argument_list|,
literal|3.0f
argument_list|,
operator|-
literal|4.0f
argument_list|,
literal|34.0f
argument_list|)
decl_stmt|;
name|QVector4D
name|v4
init|=
name|m1
operator|*
name|v3
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|x
argument_list|()
argument_list|,
call|(
name|float
call|)
argument_list|(
literal|2.0f
operator|*
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|y
argument_list|()
argument_list|,
call|(
name|float
call|)
argument_list|(
literal|3.0f
operator|*
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|z
argument_list|()
argument_list|,
call|(
name|float
call|)
argument_list|(
operator|-
literal|4.0f
operator|*
name|z
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|w
argument_list|()
argument_list|,
operator|(
name|float
operator|)
literal|34.0f
argument_list|)
expr_stmt|;
name|v4
operator|=
name|v3
operator|*
name|m1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|x
argument_list|()
argument_list|,
call|(
name|float
call|)
argument_list|(
literal|2.0f
operator|*
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|y
argument_list|()
argument_list|,
call|(
name|float
call|)
argument_list|(
literal|3.0f
operator|*
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|z
argument_list|()
argument_list|,
call|(
name|float
call|)
argument_list|(
operator|-
literal|4.0f
operator|*
name|z
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|w
argument_list|()
argument_list|,
operator|(
name|float
operator|)
literal|34.0f
argument_list|)
expr_stmt|;
name|QPoint
name|p1
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|QPoint
name|p2
init|=
name|m1
operator|*
name|p1
decl_stmt|;
name|QCOMPARE
argument_list|(
name|p2
operator|.
name|x
argument_list|()
argument_list|,
call|(
name|int
call|)
argument_list|(
literal|2.0f
operator|*
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p2
operator|.
name|y
argument_list|()
argument_list|,
call|(
name|int
call|)
argument_list|(
literal|3.0f
operator|*
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|p2
operator|=
name|p1
operator|*
name|m1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p2
operator|.
name|x
argument_list|()
argument_list|,
call|(
name|int
call|)
argument_list|(
literal|2.0f
operator|*
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p2
operator|.
name|y
argument_list|()
argument_list|,
call|(
name|int
call|)
argument_list|(
literal|3.0f
operator|*
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|QPointF
name|p3
argument_list|(
literal|2.0f
argument_list|,
literal|3.0f
argument_list|)
decl_stmt|;
name|QPointF
name|p4
init|=
name|m1
operator|*
name|p3
decl_stmt|;
name|QCOMPARE
argument_list|(
name|p4
operator|.
name|x
argument_list|()
argument_list|,
call|(
name|float
call|)
argument_list|(
literal|2.0f
operator|*
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p4
operator|.
name|y
argument_list|()
argument_list|,
call|(
name|float
call|)
argument_list|(
literal|3.0f
operator|*
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|p4
operator|=
name|p3
operator|*
name|m1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p4
operator|.
name|x
argument_list|()
argument_list|,
call|(
name|float
call|)
argument_list|(
literal|2.0f
operator|*
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p4
operator|.
name|y
argument_list|()
argument_list|,
call|(
name|float
call|)
argument_list|(
literal|3.0f
operator|*
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m3
argument_list|(
name|uniqueValues4
argument_list|)
decl_stmt|;
name|QMatrix4x4
name|m4
argument_list|(
name|m3
argument_list|)
decl_stmt|;
name|m4
operator|.
name|scale
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m4
operator|==
name|m3
operator|*
name|m1
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|==
name|y
operator|&&
name|y
operator|==
name|z
condition|)
block|{
name|QMatrix4x4
name|m5
decl_stmt|;
name|m5
operator|.
name|scale
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m5
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|resultValues
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|z
operator|==
literal|1.0f
condition|)
block|{
name|QMatrix4x4
name|m4b
argument_list|(
name|m3
argument_list|)
decl_stmt|;
name|m4b
operator|.
name|scale
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m4b
operator|==
name|m4
argument_list|)
expr_stmt|;
block|}
comment|// Test coverage when the special matrix type is unknown.
name|QMatrix4x4
name|m6
decl_stmt|;
name|m6
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|=
literal|1.0f
expr_stmt|;
name|m6
operator|.
name|scale
argument_list|(
name|QVector3D
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m6
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|resultValues
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m7
decl_stmt|;
name|m7
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|=
literal|1.0f
expr_stmt|;
name|m7
operator|.
name|scale
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m7
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|resultValues
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|==
name|y
operator|&&
name|y
operator|==
name|z
condition|)
block|{
name|QMatrix4x4
name|m8
decl_stmt|;
name|m8
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|=
literal|1.0f
expr_stmt|;
name|m8
operator|.
name|scale
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m8
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|resultValues
argument_list|)
argument_list|)
expr_stmt|;
name|m8
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|m8
operator|.
name|scale
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m8
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|resultValues
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m9
decl_stmt|;
name|m9
operator|.
name|translate
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|m9
operator|.
name|scale
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m9
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|resultValues
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// Test the generation and use of 4x4 translation matrices.
end_comment
begin_function
DECL|function|translate4x4_data
name|void
name|tst_QMatrixNxN
operator|::
name|translate4x4_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"resultValues"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
operator|(
name|float
operator|)
literal|0.0f
operator|<<
operator|(
name|float
operator|)
literal|0.0f
operator|<<
operator|(
name|float
operator|)
literal|0.0f
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityValues4
expr_stmt|;
specifier|static
specifier|const
name|float
name|identityTranslate
index|[]
init|=
block|{
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"identity"
argument_list|)
operator|<<
operator|(
name|float
operator|)
literal|1.0f
operator|<<
operator|(
name|float
operator|)
literal|1.0f
operator|<<
operator|(
name|float
operator|)
literal|1.0f
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityTranslate
expr_stmt|;
specifier|static
specifier|const
name|float
name|complexTranslate
index|[]
init|=
block|{
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|2.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|11.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
operator|-
literal|6.5f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"complex"
argument_list|)
operator|<<
operator|(
name|float
operator|)
literal|2.0f
operator|<<
operator|(
name|float
operator|)
literal|11.0f
operator|<<
operator|(
name|float
operator|)
operator|-
literal|6.5f
operator|<<
operator|(
name|void
operator|*
operator|)
name|complexTranslate
expr_stmt|;
specifier|static
specifier|const
name|float
name|complexTranslate2D
index|[]
init|=
block|{
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|2.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
operator|-
literal|11.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"complex2D"
argument_list|)
operator|<<
operator|(
name|float
operator|)
literal|2.0f
operator|<<
operator|(
name|float
operator|)
operator|-
literal|11.0f
operator|<<
operator|(
name|float
operator|)
literal|0.0f
operator|<<
operator|(
name|void
operator|*
operator|)
name|complexTranslate2D
expr_stmt|;
block|}
end_function
begin_function
DECL|function|translate4x4
name|void
name|tst_QMatrixNxN
operator|::
name|translate4x4
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|resultValues
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|result
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|resultValues
argument_list|)
decl_stmt|;
name|QMatrix4x4
name|m1
decl_stmt|;
name|m1
operator|.
name|translate
argument_list|(
name|QVector3D
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m1
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|resultValues
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m2
decl_stmt|;
name|m2
operator|.
name|translate
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m2
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|resultValues
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|z
operator|==
literal|0.0f
condition|)
block|{
name|QMatrix4x4
name|m2b
decl_stmt|;
name|m2b
operator|.
name|translate
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m2b
operator|==
name|m2
argument_list|)
expr_stmt|;
block|}
name|QVector3D
name|v1
argument_list|(
literal|2.0f
argument_list|,
literal|3.0f
argument_list|,
operator|-
literal|4.0f
argument_list|)
decl_stmt|;
name|QVector3D
name|v2
init|=
name|m1
operator|*
name|v1
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|x
argument_list|()
argument_list|,
call|(
name|float
call|)
argument_list|(
literal|2.0f
operator|+
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|y
argument_list|()
argument_list|,
call|(
name|float
call|)
argument_list|(
literal|3.0f
operator|+
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|z
argument_list|()
argument_list|,
call|(
name|float
call|)
argument_list|(
operator|-
literal|4.0f
operator|+
name|z
argument_list|)
argument_list|)
expr_stmt|;
name|QVector4D
name|v3
argument_list|(
literal|2.0f
argument_list|,
literal|3.0f
argument_list|,
operator|-
literal|4.0f
argument_list|,
literal|1.0f
argument_list|)
decl_stmt|;
name|QVector4D
name|v4
init|=
name|m1
operator|*
name|v3
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|x
argument_list|()
argument_list|,
call|(
name|float
call|)
argument_list|(
literal|2.0f
operator|+
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|y
argument_list|()
argument_list|,
call|(
name|float
call|)
argument_list|(
literal|3.0f
operator|+
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|z
argument_list|()
argument_list|,
call|(
name|float
call|)
argument_list|(
operator|-
literal|4.0f
operator|+
name|z
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|w
argument_list|()
argument_list|,
operator|(
name|float
operator|)
literal|1.0f
argument_list|)
expr_stmt|;
name|QVector4D
name|v5
argument_list|(
literal|2.0f
argument_list|,
literal|3.0f
argument_list|,
operator|-
literal|4.0f
argument_list|,
literal|34.0f
argument_list|)
decl_stmt|;
name|QVector4D
name|v6
init|=
name|m1
operator|*
name|v5
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v6
operator|.
name|x
argument_list|()
argument_list|,
call|(
name|float
call|)
argument_list|(
literal|2.0f
operator|+
name|x
operator|*
literal|34.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v6
operator|.
name|y
argument_list|()
argument_list|,
call|(
name|float
call|)
argument_list|(
literal|3.0f
operator|+
name|y
operator|*
literal|34.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v6
operator|.
name|z
argument_list|()
argument_list|,
call|(
name|float
call|)
argument_list|(
operator|-
literal|4.0f
operator|+
name|z
operator|*
literal|34.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v6
operator|.
name|w
argument_list|()
argument_list|,
operator|(
name|float
operator|)
literal|34.0f
argument_list|)
expr_stmt|;
name|QPoint
name|p1
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|QPoint
name|p2
init|=
name|m1
operator|*
name|p1
decl_stmt|;
name|QCOMPARE
argument_list|(
name|p2
operator|.
name|x
argument_list|()
argument_list|,
call|(
name|int
call|)
argument_list|(
literal|2.0f
operator|+
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p2
operator|.
name|y
argument_list|()
argument_list|,
call|(
name|int
call|)
argument_list|(
literal|3.0f
operator|+
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|QPointF
name|p3
argument_list|(
literal|2.0f
argument_list|,
literal|3.0f
argument_list|)
decl_stmt|;
name|QPointF
name|p4
init|=
name|m1
operator|*
name|p3
decl_stmt|;
name|QCOMPARE
argument_list|(
name|p4
operator|.
name|x
argument_list|()
argument_list|,
call|(
name|float
call|)
argument_list|(
literal|2.0f
operator|+
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p4
operator|.
name|y
argument_list|()
argument_list|,
call|(
name|float
call|)
argument_list|(
literal|3.0f
operator|+
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m3
argument_list|(
name|uniqueValues4
argument_list|)
decl_stmt|;
name|QMatrix4x4
name|m4
argument_list|(
name|m3
argument_list|)
decl_stmt|;
name|m4
operator|.
name|translate
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m4
operator|==
name|m3
operator|*
name|m1
argument_list|)
expr_stmt|;
if|if
condition|(
name|z
operator|==
literal|0.0f
condition|)
block|{
name|QMatrix4x4
name|m4b
argument_list|(
name|m3
argument_list|)
decl_stmt|;
name|m4b
operator|.
name|translate
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m4b
operator|==
name|m4
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// Test the generation and use of 4x4 rotation matrices.
end_comment
begin_function
DECL|function|rotate4x4_data
name|void
name|tst_QMatrixNxN
operator|::
name|rotate4x4_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"angle"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"resultValues"
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|float
name|nullRotate
index|[]
init|=
block|{
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
operator|(
name|float
operator|)
literal|90.0f
operator|<<
operator|(
name|float
operator|)
literal|0.0f
operator|<<
operator|(
name|float
operator|)
literal|0.0f
operator|<<
operator|(
name|float
operator|)
literal|0.0f
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullRotate
expr_stmt|;
specifier|static
specifier|const
name|float
name|noRotate
index|[]
init|=
block|{
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"zerodegrees"
argument_list|)
operator|<<
operator|(
name|float
operator|)
literal|0.0f
operator|<<
operator|(
name|float
operator|)
literal|2.0f
operator|<<
operator|(
name|float
operator|)
literal|3.0f
operator|<<
operator|(
name|float
operator|)
operator|-
literal|4.0f
operator|<<
operator|(
name|void
operator|*
operator|)
name|noRotate
expr_stmt|;
specifier|static
specifier|const
name|float
name|xRotate
index|[]
init|=
block|{
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
operator|-
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"xrotate"
argument_list|)
operator|<<
operator|(
name|float
operator|)
literal|90.0f
operator|<<
operator|(
name|float
operator|)
literal|1.0f
operator|<<
operator|(
name|float
operator|)
literal|0.0f
operator|<<
operator|(
name|float
operator|)
literal|0.0f
operator|<<
operator|(
name|void
operator|*
operator|)
name|xRotate
expr_stmt|;
specifier|static
specifier|const
name|float
name|xRotateNeg
index|[]
init|=
block|{
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
operator|-
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-xrotate"
argument_list|)
operator|<<
operator|(
name|float
operator|)
literal|90.0f
operator|<<
operator|(
name|float
operator|)
operator|-
literal|1.0f
operator|<<
operator|(
name|float
operator|)
literal|0.0f
operator|<<
operator|(
name|float
operator|)
literal|0.0f
operator|<<
operator|(
name|void
operator|*
operator|)
name|xRotateNeg
expr_stmt|;
specifier|static
specifier|const
name|float
name|yRotate
index|[]
init|=
block|{
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
operator|-
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yrotate"
argument_list|)
operator|<<
operator|(
name|float
operator|)
literal|90.0f
operator|<<
operator|(
name|float
operator|)
literal|0.0f
operator|<<
operator|(
name|float
operator|)
literal|1.0f
operator|<<
operator|(
name|float
operator|)
literal|0.0f
operator|<<
operator|(
name|void
operator|*
operator|)
name|yRotate
expr_stmt|;
specifier|static
specifier|const
name|float
name|yRotateNeg
index|[]
init|=
block|{
literal|0.0f
block|,
literal|0.0f
block|,
operator|-
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-yrotate"
argument_list|)
operator|<<
operator|(
name|float
operator|)
literal|90.0f
operator|<<
operator|(
name|float
operator|)
literal|0.0f
operator|<<
operator|(
name|float
operator|)
operator|-
literal|1.0f
operator|<<
operator|(
name|float
operator|)
literal|0.0f
operator|<<
operator|(
name|void
operator|*
operator|)
name|yRotateNeg
expr_stmt|;
specifier|static
specifier|const
name|float
name|zRotate
index|[]
init|=
block|{
literal|0.0f
block|,
operator|-
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"zrotate"
argument_list|)
operator|<<
operator|(
name|float
operator|)
literal|90.0f
operator|<<
operator|(
name|float
operator|)
literal|0.0f
operator|<<
operator|(
name|float
operator|)
literal|0.0f
operator|<<
operator|(
name|float
operator|)
literal|1.0f
operator|<<
operator|(
name|void
operator|*
operator|)
name|zRotate
expr_stmt|;
specifier|static
specifier|const
name|float
name|zRotateNeg
index|[]
init|=
block|{
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
operator|-
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-zrotate"
argument_list|)
operator|<<
operator|(
name|float
operator|)
literal|90.0f
operator|<<
operator|(
name|float
operator|)
literal|0.0f
operator|<<
operator|(
name|float
operator|)
literal|0.0f
operator|<<
operator|(
name|float
operator|)
operator|-
literal|1.0f
operator|<<
operator|(
name|void
operator|*
operator|)
name|zRotateNeg
expr_stmt|;
comment|// Algorithm from http://en.wikipedia.org/wiki/Rotation_matrix.
comment|// Deliberately different from the one in the code for cross-checking.
specifier|static
name|float
name|complexRotate
index|[
literal|16
index|]
decl_stmt|;
name|float
name|x
init|=
literal|1.0f
decl_stmt|;
name|float
name|y
init|=
literal|2.0f
decl_stmt|;
name|float
name|z
init|=
operator|-
literal|6.0f
decl_stmt|;
name|float
name|angle
init|=
operator|-
literal|45.0f
decl_stmt|;
name|float
name|c
init|=
name|qCos
argument_list|(
name|angle
operator|*
name|M_PI
operator|/
literal|180.0f
argument_list|)
decl_stmt|;
name|float
name|s
init|=
name|qSin
argument_list|(
name|angle
operator|*
name|M_PI
operator|/
literal|180.0f
argument_list|)
decl_stmt|;
name|float
name|len
init|=
name|sqrtf
argument_list|(
name|x
operator|*
name|x
operator|+
name|y
operator|*
name|y
operator|+
name|z
operator|*
name|z
argument_list|)
decl_stmt|;
name|float
name|xu
init|=
name|x
operator|/
name|len
decl_stmt|;
name|float
name|yu
init|=
name|y
operator|/
name|len
decl_stmt|;
name|float
name|zu
init|=
name|z
operator|/
name|len
decl_stmt|;
name|complexRotate
index|[
literal|0
index|]
operator|=
call|(
name|float
call|)
argument_list|(
operator|(
literal|1
operator|-
name|xu
operator|*
name|xu
operator|)
operator|*
name|c
operator|+
name|xu
operator|*
name|xu
argument_list|)
expr_stmt|;
name|complexRotate
index|[
literal|1
index|]
operator|=
call|(
name|float
call|)
argument_list|(
operator|-
name|zu
operator|*
name|s
operator|-
name|xu
operator|*
name|yu
operator|*
name|c
operator|+
name|xu
operator|*
name|yu
argument_list|)
expr_stmt|;
name|complexRotate
index|[
literal|2
index|]
operator|=
call|(
name|float
call|)
argument_list|(
name|yu
operator|*
name|s
operator|-
name|xu
operator|*
name|zu
operator|*
name|c
operator|+
name|xu
operator|*
name|zu
argument_list|)
expr_stmt|;
name|complexRotate
index|[
literal|3
index|]
operator|=
literal|0
expr_stmt|;
name|complexRotate
index|[
literal|4
index|]
operator|=
call|(
name|float
call|)
argument_list|(
name|zu
operator|*
name|s
operator|-
name|xu
operator|*
name|yu
operator|*
name|c
operator|+
name|xu
operator|*
name|yu
argument_list|)
expr_stmt|;
name|complexRotate
index|[
literal|5
index|]
operator|=
call|(
name|float
call|)
argument_list|(
operator|(
literal|1
operator|-
name|yu
operator|*
name|yu
operator|)
operator|*
name|c
operator|+
name|yu
operator|*
name|yu
argument_list|)
expr_stmt|;
name|complexRotate
index|[
literal|6
index|]
operator|=
call|(
name|float
call|)
argument_list|(
operator|-
name|xu
operator|*
name|s
operator|-
name|yu
operator|*
name|zu
operator|*
name|c
operator|+
name|yu
operator|*
name|zu
argument_list|)
expr_stmt|;
name|complexRotate
index|[
literal|7
index|]
operator|=
literal|0
expr_stmt|;
name|complexRotate
index|[
literal|8
index|]
operator|=
call|(
name|float
call|)
argument_list|(
operator|-
name|yu
operator|*
name|s
operator|-
name|xu
operator|*
name|zu
operator|*
name|c
operator|+
name|xu
operator|*
name|zu
argument_list|)
expr_stmt|;
name|complexRotate
index|[
literal|9
index|]
operator|=
call|(
name|float
call|)
argument_list|(
name|xu
operator|*
name|s
operator|-
name|yu
operator|*
name|zu
operator|*
name|c
operator|+
name|yu
operator|*
name|zu
argument_list|)
expr_stmt|;
name|complexRotate
index|[
literal|10
index|]
operator|=
call|(
name|float
call|)
argument_list|(
operator|(
literal|1
operator|-
name|zu
operator|*
name|zu
operator|)
operator|*
name|c
operator|+
name|zu
operator|*
name|zu
argument_list|)
expr_stmt|;
name|complexRotate
index|[
literal|11
index|]
operator|=
literal|0
expr_stmt|;
name|complexRotate
index|[
literal|12
index|]
operator|=
literal|0
expr_stmt|;
name|complexRotate
index|[
literal|13
index|]
operator|=
literal|0
expr_stmt|;
name|complexRotate
index|[
literal|14
index|]
operator|=
literal|0
expr_stmt|;
name|complexRotate
index|[
literal|15
index|]
operator|=
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"complex"
argument_list|)
operator|<<
operator|(
name|float
operator|)
name|angle
operator|<<
operator|(
name|float
operator|)
name|x
operator|<<
operator|(
name|float
operator|)
name|y
operator|<<
operator|(
name|float
operator|)
name|z
operator|<<
operator|(
name|void
operator|*
operator|)
name|complexRotate
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rotate4x4
name|void
name|tst_QMatrixNxN
operator|::
name|rotate4x4
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|angle
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|resultValues
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m1
decl_stmt|;
name|m1
operator|.
name|rotate
argument_list|(
name|angle
argument_list|,
name|QVector3D
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m1
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|resultValues
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m2
decl_stmt|;
name|m2
operator|.
name|rotate
argument_list|(
name|angle
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m2
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|resultValues
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m3
argument_list|(
name|uniqueValues4
argument_list|)
decl_stmt|;
name|QMatrix4x4
name|m4
argument_list|(
name|m3
argument_list|)
decl_stmt|;
name|m4
operator|.
name|rotate
argument_list|(
name|angle
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|m4
argument_list|,
name|m3
operator|*
name|m1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Null vectors don't make sense for quaternion rotations.
if|if
condition|(
name|x
operator|!=
literal|0
operator|||
name|y
operator|!=
literal|0
operator|||
name|z
operator|!=
literal|0
condition|)
block|{
name|QMatrix4x4
name|m5
decl_stmt|;
name|m5
operator|.
name|rotate
argument_list|(
name|QQuaternion
operator|::
name|fromAxisAndAngle
argument_list|(
name|QVector3D
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
argument_list|,
name|angle
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m5
argument_list|,
operator|(
specifier|const
name|float
operator|*
operator|)
name|resultValues
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|macro|ROTATE4
define|#
directive|define
name|ROTATE4
parameter_list|(
name|xin
parameter_list|,
name|yin
parameter_list|,
name|zin
parameter_list|,
name|win
parameter_list|,
name|xout
parameter_list|,
name|yout
parameter_list|,
name|zout
parameter_list|,
name|wout
parameter_list|)
define|\
value|do { \         xout = ((const float *)resultValues)[0] * xin + \                ((const float *)resultValues)[1] * yin + \                ((const float *)resultValues)[2] * zin + \                ((const float *)resultValues)[3] * win; \         yout = ((const float *)resultValues)[4] * xin + \                ((const float *)resultValues)[5] * yin + \                ((const float *)resultValues)[6] * zin + \                ((const float *)resultValues)[7] * win; \         zout = ((const float *)resultValues)[8] * xin + \                ((const float *)resultValues)[9] * yin + \                ((const float *)resultValues)[10] * zin + \                ((const float *)resultValues)[11] * win; \         wout = ((const float *)resultValues)[12] * xin + \                ((const float *)resultValues)[13] * yin + \                ((const float *)resultValues)[14] * zin + \                ((const float *)resultValues)[15] * win; \     } while (0)
comment|// Rotate various test vectors using the straight-forward approach.
name|float
name|v1x
decl_stmt|,
name|v1y
decl_stmt|,
name|v1z
decl_stmt|,
name|v1w
decl_stmt|;
name|ROTATE4
argument_list|(
literal|2.0f
argument_list|,
literal|3.0f
argument_list|,
operator|-
literal|4.0f
argument_list|,
literal|1.0f
argument_list|,
name|v1x
argument_list|,
name|v1y
argument_list|,
name|v1z
argument_list|,
name|v1w
argument_list|)
expr_stmt|;
name|v1x
operator|/=
name|v1w
expr_stmt|;
name|v1y
operator|/=
name|v1w
expr_stmt|;
name|v1z
operator|/=
name|v1w
expr_stmt|;
name|float
name|v3x
decl_stmt|,
name|v3y
decl_stmt|,
name|v3z
decl_stmt|,
name|v3w
decl_stmt|;
name|ROTATE4
argument_list|(
literal|2.0f
argument_list|,
literal|3.0f
argument_list|,
operator|-
literal|4.0f
argument_list|,
literal|1.0f
argument_list|,
name|v3x
argument_list|,
name|v3y
argument_list|,
name|v3z
argument_list|,
name|v3w
argument_list|)
expr_stmt|;
name|float
name|v5x
decl_stmt|,
name|v5y
decl_stmt|,
name|v5z
decl_stmt|,
name|v5w
decl_stmt|;
name|ROTATE4
argument_list|(
literal|2.0f
argument_list|,
literal|3.0f
argument_list|,
operator|-
literal|4.0f
argument_list|,
literal|34.0f
argument_list|,
name|v5x
argument_list|,
name|v5y
argument_list|,
name|v5z
argument_list|,
name|v5w
argument_list|)
expr_stmt|;
name|float
name|p1x
decl_stmt|,
name|p1y
decl_stmt|,
name|p1z
decl_stmt|,
name|p1w
decl_stmt|;
name|ROTATE4
argument_list|(
literal|2.0f
argument_list|,
literal|3.0f
argument_list|,
literal|0.0f
argument_list|,
literal|1.0f
argument_list|,
name|p1x
argument_list|,
name|p1y
argument_list|,
name|p1z
argument_list|,
name|p1w
argument_list|)
expr_stmt|;
name|p1x
operator|/=
name|p1w
expr_stmt|;
name|p1y
operator|/=
name|p1w
expr_stmt|;
name|p1z
operator|/=
name|p1w
expr_stmt|;
name|QVector3D
name|v1
argument_list|(
literal|2.0f
argument_list|,
literal|3.0f
argument_list|,
operator|-
literal|4.0f
argument_list|)
decl_stmt|;
name|QVector3D
name|v2
init|=
name|m1
operator|*
name|v1
decl_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|v2
operator|.
name|x
argument_list|()
argument_list|,
name|v1x
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|v2
operator|.
name|y
argument_list|()
argument_list|,
name|v1y
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|v2
operator|.
name|z
argument_list|()
argument_list|,
name|v1z
argument_list|)
argument_list|)
expr_stmt|;
name|QVector4D
name|v3
argument_list|(
literal|2.0f
argument_list|,
literal|3.0f
argument_list|,
operator|-
literal|4.0f
argument_list|,
literal|1.0f
argument_list|)
decl_stmt|;
name|QVector4D
name|v4
init|=
name|m1
operator|*
name|v3
decl_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|v4
operator|.
name|x
argument_list|()
argument_list|,
name|v3x
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|v4
operator|.
name|y
argument_list|()
argument_list|,
name|v3y
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|v4
operator|.
name|z
argument_list|()
argument_list|,
name|v3z
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|v4
operator|.
name|w
argument_list|()
argument_list|,
name|v3w
argument_list|)
argument_list|)
expr_stmt|;
name|QVector4D
name|v5
argument_list|(
literal|2.0f
argument_list|,
literal|3.0f
argument_list|,
operator|-
literal|4.0f
argument_list|,
literal|34.0f
argument_list|)
decl_stmt|;
name|QVector4D
name|v6
init|=
name|m1
operator|*
name|v5
decl_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|v6
operator|.
name|x
argument_list|()
argument_list|,
name|v5x
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|v6
operator|.
name|y
argument_list|()
argument_list|,
name|v5y
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|v6
operator|.
name|z
argument_list|()
argument_list|,
name|v5z
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|v6
operator|.
name|w
argument_list|()
argument_list|,
name|v5w
argument_list|)
argument_list|)
expr_stmt|;
name|QPoint
name|p1
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|QPoint
name|p2
init|=
name|m1
operator|*
name|p1
decl_stmt|;
name|QCOMPARE
argument_list|(
name|p2
operator|.
name|x
argument_list|()
argument_list|,
name|qRound
argument_list|(
name|p1x
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p2
operator|.
name|y
argument_list|()
argument_list|,
name|qRound
argument_list|(
name|p1y
argument_list|)
argument_list|)
expr_stmt|;
name|QPointF
name|p3
argument_list|(
literal|2.0f
argument_list|,
literal|3.0f
argument_list|)
decl_stmt|;
name|QPointF
name|p4
init|=
name|m1
operator|*
name|p3
decl_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p4
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
name|p1x
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p4
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
name|p1y
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|!=
literal|0
operator|||
name|y
operator|!=
literal|0
operator|||
name|z
operator|!=
literal|0
condition|)
block|{
name|QQuaternion
name|q
init|=
name|QQuaternion
operator|::
name|fromAxisAndAngle
argument_list|(
name|QVector3D
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
argument_list|,
name|angle
argument_list|)
decl_stmt|;
name|QVector3D
name|vq
init|=
name|q
operator|.
name|rotatedVector
argument_list|(
name|v1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|vq
operator|.
name|x
argument_list|()
argument_list|,
name|v1x
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|vq
operator|.
name|y
argument_list|()
argument_list|,
name|v1y
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|vq
operator|.
name|z
argument_list|()
argument_list|,
name|v1z
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|isSame
specifier|static
name|bool
name|isSame
parameter_list|(
specifier|const
name|QMatrix3x3
modifier|&
name|m1
parameter_list|,
specifier|const
name|Matrix3
modifier|&
name|m2
parameter_list|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
literal|3
condition|;
operator|++
name|row
control|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
literal|3
condition|;
operator|++
name|col
control|)
block|{
if|if
condition|(
operator|!
name|qFuzzyCompare
argument_list|(
name|m1
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
argument_list|,
name|m2
operator|.
name|v
index|[
name|row
operator|*
literal|3
operator|+
name|col
index|]
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|// Test the computation of normal matrices from 4x4 transformation matrices.
end_comment
begin_function
DECL|function|normalMatrix_data
name|void
name|tst_QMatrixNxN
operator|::
name|normalMatrix_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"mValues"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"identity"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityValues4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unique"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueValues4
expr_stmt|;
comment|// Not invertible because determinant == 0.
specifier|static
name|float
specifier|const
name|translateValues
index|[
literal|16
index|]
init|=
block|{
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|4.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|5.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
operator|-
literal|3.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
specifier|static
name|float
specifier|const
name|scaleValues
index|[
literal|16
index|]
init|=
block|{
literal|2.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|7.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|9.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
specifier|static
name|float
specifier|const
name|bothValues
index|[
literal|16
index|]
init|=
block|{
literal|2.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|4.0f
block|,
literal|0.0f
block|,
literal|7.0f
block|,
literal|0.0f
block|,
literal|5.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|9.0f
block|,
operator|-
literal|3.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
specifier|static
name|float
specifier|const
name|rotateValues
index|[
literal|16
index|]
init|=
block|{
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
specifier|static
name|float
specifier|const
name|nullScaleValues1
index|[
literal|16
index|]
init|=
block|{
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|4.0f
block|,
literal|0.0f
block|,
literal|7.0f
block|,
literal|0.0f
block|,
literal|5.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|9.0f
block|,
operator|-
literal|3.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
specifier|static
name|float
specifier|const
name|nullScaleValues2
index|[
literal|16
index|]
init|=
block|{
literal|2.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|4.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|5.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|9.0f
block|,
operator|-
literal|3.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
specifier|static
name|float
specifier|const
name|nullScaleValues3
index|[
literal|16
index|]
init|=
block|{
literal|2.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|4.0f
block|,
literal|0.0f
block|,
literal|7.0f
block|,
literal|0.0f
block|,
literal|5.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
operator|-
literal|3.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"translate"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|translateValues
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"scale"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|scaleValues
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"both"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|bothValues
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rotate"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|rotateValues
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null scale 1"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullScaleValues1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null scale 2"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullScaleValues2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null scale 3"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullScaleValues3
expr_stmt|;
block|}
end_function
begin_function
DECL|function|normalMatrix
name|void
name|tst_QMatrixNxN
operator|::
name|normalMatrix
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|mValues
argument_list|)
expr_stmt|;
specifier|const
name|float
modifier|*
name|values
init|=
operator|(
specifier|const
name|float
operator|*
operator|)
name|mValues
decl_stmt|;
comment|// Compute the expected answer the long way.
name|Matrix3
name|min
decl_stmt|;
name|Matrix3
name|answer
decl_stmt|;
name|min
operator|.
name|v
index|[
literal|0
index|]
operator|=
name|values
index|[
literal|0
index|]
expr_stmt|;
name|min
operator|.
name|v
index|[
literal|1
index|]
operator|=
name|values
index|[
literal|1
index|]
expr_stmt|;
name|min
operator|.
name|v
index|[
literal|2
index|]
operator|=
name|values
index|[
literal|2
index|]
expr_stmt|;
name|min
operator|.
name|v
index|[
literal|3
index|]
operator|=
name|values
index|[
literal|4
index|]
expr_stmt|;
name|min
operator|.
name|v
index|[
literal|4
index|]
operator|=
name|values
index|[
literal|5
index|]
expr_stmt|;
name|min
operator|.
name|v
index|[
literal|5
index|]
operator|=
name|values
index|[
literal|6
index|]
expr_stmt|;
name|min
operator|.
name|v
index|[
literal|6
index|]
operator|=
name|values
index|[
literal|8
index|]
expr_stmt|;
name|min
operator|.
name|v
index|[
literal|7
index|]
operator|=
name|values
index|[
literal|9
index|]
expr_stmt|;
name|min
operator|.
name|v
index|[
literal|8
index|]
operator|=
name|values
index|[
literal|10
index|]
expr_stmt|;
name|bool
name|invertible
init|=
name|m3Inverse
argument_list|(
name|min
argument_list|,
name|answer
argument_list|)
decl_stmt|;
name|m3Transpose
argument_list|(
name|answer
argument_list|)
expr_stmt|;
comment|// Perform the test.
name|QMatrix4x4
name|m1
argument_list|(
name|values
argument_list|)
decl_stmt|;
name|QMatrix3x3
name|n1
init|=
name|m1
operator|.
name|normalMatrix
argument_list|()
decl_stmt|;
if|if
condition|(
name|invertible
condition|)
name|QVERIFY
argument_list|(
operator|::
name|isSame
argument_list|(
name|n1
argument_list|,
name|answer
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|QVERIFY
argument_list|(
name|isIdentity
argument_list|(
name|n1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Perform the test again, after inferring special matrix types.
comment|// This tests the optimized paths in the normalMatrix() function.
name|m1
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|n1
operator|=
name|m1
operator|.
name|normalMatrix
argument_list|()
expr_stmt|;
if|if
condition|(
name|invertible
condition|)
name|QVERIFY
argument_list|(
operator|::
name|isSame
argument_list|(
name|n1
argument_list|,
name|answer
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|QVERIFY
argument_list|(
name|isIdentity
argument_list|(
name|n1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test optimized transformations on 4x4 matrices.
end_comment
begin_function
DECL|function|optimizedTransforms
name|void
name|tst_QMatrixNxN
operator|::
name|optimizedTransforms
parameter_list|()
block|{
specifier|static
name|float
specifier|const
name|translateValues
index|[
literal|16
index|]
init|=
block|{
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|4.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|5.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
operator|-
literal|3.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
specifier|static
name|float
specifier|const
name|translateDoubleValues
index|[
literal|16
index|]
init|=
block|{
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|8.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|10.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
operator|-
literal|6.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
specifier|static
name|float
specifier|const
name|scaleValues
index|[
literal|16
index|]
init|=
block|{
literal|2.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|7.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|9.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
specifier|static
name|float
specifier|const
name|scaleDoubleValues
index|[
literal|16
index|]
init|=
block|{
literal|4.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|49.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|81.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
specifier|static
name|float
specifier|const
name|bothValues
index|[
literal|16
index|]
init|=
block|{
literal|2.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|4.0f
block|,
literal|0.0f
block|,
literal|7.0f
block|,
literal|0.0f
block|,
literal|5.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|9.0f
block|,
operator|-
literal|3.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
specifier|static
name|float
specifier|const
name|bothReverseValues
index|[
literal|16
index|]
init|=
block|{
literal|2.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|4.0f
operator|*
literal|2.0f
block|,
literal|0.0f
block|,
literal|7.0f
block|,
literal|0.0f
block|,
literal|5.0f
operator|*
literal|7.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|9.0f
block|,
operator|-
literal|3.0f
operator|*
literal|9.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
specifier|static
name|float
specifier|const
name|bothThenTranslateValues
index|[
literal|16
index|]
init|=
block|{
literal|2.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|4.0f
operator|+
literal|2.0f
operator|*
literal|4.0f
block|,
literal|0.0f
block|,
literal|7.0f
block|,
literal|0.0f
block|,
literal|5.0f
operator|+
literal|7.0f
operator|*
literal|5.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|9.0f
block|,
operator|-
literal|3.0f
operator|+
literal|9.0f
operator|*
operator|-
literal|3.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
specifier|static
name|float
specifier|const
name|bothThenScaleValues
index|[
literal|16
index|]
init|=
block|{
literal|4.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|4.0f
block|,
literal|0.0f
block|,
literal|49.0f
block|,
literal|0.0f
block|,
literal|5.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|81.0f
block|,
operator|-
literal|3.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
name|QMatrix4x4
name|translate
argument_list|(
name|translateValues
argument_list|)
decl_stmt|;
name|QMatrix4x4
name|scale
argument_list|(
name|scaleValues
argument_list|)
decl_stmt|;
name|QMatrix4x4
name|both
argument_list|(
name|bothValues
argument_list|)
decl_stmt|;
name|QMatrix4x4
name|m1
decl_stmt|;
name|m1
operator|.
name|translate
argument_list|(
literal|4.0f
argument_list|,
literal|5.0f
argument_list|,
operator|-
literal|3.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m1
argument_list|,
name|translateValues
argument_list|)
argument_list|)
expr_stmt|;
name|m1
operator|.
name|translate
argument_list|(
literal|4.0f
argument_list|,
literal|5.0f
argument_list|,
operator|-
literal|3.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m1
argument_list|,
name|translateDoubleValues
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m2
decl_stmt|;
name|m2
operator|.
name|translate
argument_list|(
name|QVector3D
argument_list|(
literal|4.0f
argument_list|,
literal|5.0f
argument_list|,
operator|-
literal|3.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m2
argument_list|,
name|translateValues
argument_list|)
argument_list|)
expr_stmt|;
name|m2
operator|.
name|translate
argument_list|(
name|QVector3D
argument_list|(
literal|4.0f
argument_list|,
literal|5.0f
argument_list|,
operator|-
literal|3.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m2
argument_list|,
name|translateDoubleValues
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m3
decl_stmt|;
name|m3
operator|.
name|scale
argument_list|(
literal|2.0f
argument_list|,
literal|7.0f
argument_list|,
literal|9.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m3
argument_list|,
name|scaleValues
argument_list|)
argument_list|)
expr_stmt|;
name|m3
operator|.
name|scale
argument_list|(
literal|2.0f
argument_list|,
literal|7.0f
argument_list|,
literal|9.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m3
argument_list|,
name|scaleDoubleValues
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m4
decl_stmt|;
name|m4
operator|.
name|scale
argument_list|(
name|QVector3D
argument_list|(
literal|2.0f
argument_list|,
literal|7.0f
argument_list|,
literal|9.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m4
argument_list|,
name|scaleValues
argument_list|)
argument_list|)
expr_stmt|;
name|m4
operator|.
name|scale
argument_list|(
name|QVector3D
argument_list|(
literal|2.0f
argument_list|,
literal|7.0f
argument_list|,
literal|9.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m4
argument_list|,
name|scaleDoubleValues
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m5
decl_stmt|;
name|m5
operator|.
name|translate
argument_list|(
literal|4.0f
argument_list|,
literal|5.0f
argument_list|,
operator|-
literal|3.0f
argument_list|)
expr_stmt|;
name|m5
operator|.
name|scale
argument_list|(
literal|2.0f
argument_list|,
literal|7.0f
argument_list|,
literal|9.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m5
argument_list|,
name|bothValues
argument_list|)
argument_list|)
expr_stmt|;
name|m5
operator|.
name|translate
argument_list|(
literal|4.0f
argument_list|,
literal|5.0f
argument_list|,
operator|-
literal|3.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m5
argument_list|,
name|bothThenTranslateValues
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m6
decl_stmt|;
name|m6
operator|.
name|translate
argument_list|(
name|QVector3D
argument_list|(
literal|4.0f
argument_list|,
literal|5.0f
argument_list|,
operator|-
literal|3.0f
argument_list|)
argument_list|)
expr_stmt|;
name|m6
operator|.
name|scale
argument_list|(
name|QVector3D
argument_list|(
literal|2.0f
argument_list|,
literal|7.0f
argument_list|,
literal|9.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m6
argument_list|,
name|bothValues
argument_list|)
argument_list|)
expr_stmt|;
name|m6
operator|.
name|translate
argument_list|(
name|QVector3D
argument_list|(
literal|4.0f
argument_list|,
literal|5.0f
argument_list|,
operator|-
literal|3.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m6
argument_list|,
name|bothThenTranslateValues
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m7
decl_stmt|;
name|m7
operator|.
name|scale
argument_list|(
literal|2.0f
argument_list|,
literal|7.0f
argument_list|,
literal|9.0f
argument_list|)
expr_stmt|;
name|m7
operator|.
name|translate
argument_list|(
literal|4.0f
argument_list|,
literal|5.0f
argument_list|,
operator|-
literal|3.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m7
argument_list|,
name|bothReverseValues
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m8
decl_stmt|;
name|m8
operator|.
name|scale
argument_list|(
name|QVector3D
argument_list|(
literal|2.0f
argument_list|,
literal|7.0f
argument_list|,
literal|9.0f
argument_list|)
argument_list|)
expr_stmt|;
name|m8
operator|.
name|translate
argument_list|(
name|QVector3D
argument_list|(
literal|4.0f
argument_list|,
literal|5.0f
argument_list|,
operator|-
literal|3.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m8
argument_list|,
name|bothReverseValues
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m9
decl_stmt|;
name|m9
operator|.
name|translate
argument_list|(
literal|4.0f
argument_list|,
literal|5.0f
argument_list|,
operator|-
literal|3.0f
argument_list|)
expr_stmt|;
name|m9
operator|.
name|scale
argument_list|(
literal|2.0f
argument_list|,
literal|7.0f
argument_list|,
literal|9.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m9
argument_list|,
name|bothValues
argument_list|)
argument_list|)
expr_stmt|;
name|m9
operator|.
name|scale
argument_list|(
literal|2.0f
argument_list|,
literal|7.0f
argument_list|,
literal|9.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m9
argument_list|,
name|bothThenScaleValues
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m10
decl_stmt|;
name|m10
operator|.
name|translate
argument_list|(
name|QVector3D
argument_list|(
literal|4.0f
argument_list|,
literal|5.0f
argument_list|,
operator|-
literal|3.0f
argument_list|)
argument_list|)
expr_stmt|;
name|m10
operator|.
name|scale
argument_list|(
name|QVector3D
argument_list|(
literal|2.0f
argument_list|,
literal|7.0f
argument_list|,
literal|9.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m10
argument_list|,
name|bothValues
argument_list|)
argument_list|)
expr_stmt|;
name|m10
operator|.
name|scale
argument_list|(
name|QVector3D
argument_list|(
literal|2.0f
argument_list|,
literal|7.0f
argument_list|,
literal|9.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m10
argument_list|,
name|bothThenScaleValues
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test orthographic projections.
end_comment
begin_function
DECL|function|ortho
name|void
name|tst_QMatrixNxN
operator|::
name|ortho
parameter_list|()
block|{
name|QMatrix4x4
name|m1
decl_stmt|;
name|m1
operator|.
name|ortho
argument_list|(
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|300
argument_list|,
literal|150
argument_list|)
argument_list|)
expr_stmt|;
name|QPointF
name|p1
init|=
name|m1
operator|*
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QPointF
name|p2
init|=
name|m1
operator|*
name|QPointF
argument_list|(
literal|300
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QPointF
name|p3
init|=
name|m1
operator|*
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|150
argument_list|)
decl_stmt|;
name|QPointF
name|p4
init|=
name|m1
operator|*
name|QPointF
argument_list|(
literal|300
argument_list|,
literal|150
argument_list|)
decl_stmt|;
name|QVector3D
name|p5
init|=
name|m1
operator|*
name|QVector3D
argument_list|(
literal|300
argument_list|,
literal|150
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p1
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p1
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p2
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p2
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p3
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p3
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p4
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p4
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p5
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p5
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p5
operator|.
name|z
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m2
decl_stmt|;
name|m2
operator|.
name|ortho
argument_list|(
name|QRectF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|300
argument_list|,
literal|150
argument_list|)
argument_list|)
expr_stmt|;
name|p1
operator|=
name|m2
operator|*
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|p2
operator|=
name|m2
operator|*
name|QPointF
argument_list|(
literal|300
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|p3
operator|=
name|m2
operator|*
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|150
argument_list|)
expr_stmt|;
name|p4
operator|=
name|m2
operator|*
name|QPointF
argument_list|(
literal|300
argument_list|,
literal|150
argument_list|)
expr_stmt|;
name|p5
operator|=
name|m2
operator|*
name|QVector3D
argument_list|(
literal|300
argument_list|,
literal|150
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p1
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p1
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p2
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p2
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p3
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p3
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p4
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p4
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p5
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p5
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p5
operator|.
name|z
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m3
decl_stmt|;
name|m3
operator|.
name|ortho
argument_list|(
literal|0
argument_list|,
literal|300
argument_list|,
literal|150
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|p1
operator|=
name|m3
operator|*
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|p2
operator|=
name|m3
operator|*
name|QPointF
argument_list|(
literal|300
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|p3
operator|=
name|m3
operator|*
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|150
argument_list|)
expr_stmt|;
name|p4
operator|=
name|m3
operator|*
name|QPointF
argument_list|(
literal|300
argument_list|,
literal|150
argument_list|)
expr_stmt|;
name|p5
operator|=
name|m3
operator|*
name|QVector3D
argument_list|(
literal|300
argument_list|,
literal|150
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p1
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p1
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p2
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p2
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p3
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p3
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p4
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p4
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p5
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p5
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p5
operator|.
name|z
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m4
decl_stmt|;
name|m4
operator|.
name|ortho
argument_list|(
literal|0
argument_list|,
literal|300
argument_list|,
literal|150
argument_list|,
literal|0
argument_list|,
operator|-
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|p1
operator|=
name|m4
operator|*
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|p2
operator|=
name|m4
operator|*
name|QPointF
argument_list|(
literal|300
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|p3
operator|=
name|m4
operator|*
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|150
argument_list|)
expr_stmt|;
name|p4
operator|=
name|m4
operator|*
name|QPointF
argument_list|(
literal|300
argument_list|,
literal|150
argument_list|)
expr_stmt|;
name|p5
operator|=
name|m4
operator|*
name|QVector3D
argument_list|(
literal|300
argument_list|,
literal|150
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p1
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p1
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p2
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p2
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p3
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p3
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p4
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p4
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p5
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p5
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p5
operator|.
name|z
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|0.6f
argument_list|)
argument_list|)
expr_stmt|;
comment|// An empty view volume should leave the matrix alone.
name|QMatrix4x4
name|m5
decl_stmt|;
name|m5
operator|.
name|ortho
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|150
argument_list|,
literal|0
argument_list|,
operator|-
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m5
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
name|m5
operator|.
name|ortho
argument_list|(
literal|0
argument_list|,
literal|300
argument_list|,
literal|150
argument_list|,
literal|150
argument_list|,
operator|-
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m5
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
name|m5
operator|.
name|ortho
argument_list|(
literal|0
argument_list|,
literal|300
argument_list|,
literal|150
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m5
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test perspective frustum projections.
end_comment
begin_function
DECL|function|frustum
name|void
name|tst_QMatrixNxN
operator|::
name|frustum
parameter_list|()
block|{
name|QMatrix4x4
name|m1
decl_stmt|;
name|m1
operator|.
name|frustum
argument_list|(
operator|-
literal|1.0f
argument_list|,
literal|1.0f
argument_list|,
operator|-
literal|1.0f
argument_list|,
literal|1.0f
argument_list|,
operator|-
literal|1.0f
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QVector3D
name|p1
init|=
name|m1
operator|*
name|QVector3D
argument_list|(
operator|-
literal|1.0f
argument_list|,
operator|-
literal|1.0f
argument_list|,
literal|1.0f
argument_list|)
decl_stmt|;
name|QVector3D
name|p2
init|=
name|m1
operator|*
name|QVector3D
argument_list|(
literal|1.0f
argument_list|,
operator|-
literal|1.0f
argument_list|,
literal|1.0f
argument_list|)
decl_stmt|;
name|QVector3D
name|p3
init|=
name|m1
operator|*
name|QVector3D
argument_list|(
operator|-
literal|1.0f
argument_list|,
literal|1.0f
argument_list|,
literal|1.0f
argument_list|)
decl_stmt|;
name|QVector3D
name|p4
init|=
name|m1
operator|*
name|QVector3D
argument_list|(
literal|1.0f
argument_list|,
literal|1.0f
argument_list|,
literal|1.0f
argument_list|)
decl_stmt|;
name|QVector3D
name|p5
init|=
name|m1
operator|*
name|QVector3D
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|2.0f
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p1
operator|.
name|x
argument_list|()
argument_list|,
operator|-
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p1
operator|.
name|y
argument_list|()
argument_list|,
operator|-
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p1
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p2
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p2
operator|.
name|y
argument_list|()
argument_list|,
operator|-
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p2
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p3
operator|.
name|x
argument_list|()
argument_list|,
operator|-
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p3
operator|.
name|y
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p3
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p4
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p4
operator|.
name|y
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p4
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p5
operator|.
name|x
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p5
operator|.
name|y
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p5
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|0.5f
argument_list|)
argument_list|)
expr_stmt|;
comment|// An empty view volume should leave the matrix alone.
name|QMatrix4x4
name|m5
decl_stmt|;
name|m5
operator|.
name|frustum
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|150
argument_list|,
literal|0
argument_list|,
operator|-
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m5
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
name|m5
operator|.
name|frustum
argument_list|(
literal|0
argument_list|,
literal|300
argument_list|,
literal|150
argument_list|,
literal|150
argument_list|,
operator|-
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m5
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
name|m5
operator|.
name|frustum
argument_list|(
literal|0
argument_list|,
literal|300
argument_list|,
literal|150
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m5
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test perspective field-of-view projections.
end_comment
begin_function
DECL|function|perspective
name|void
name|tst_QMatrixNxN
operator|::
name|perspective
parameter_list|()
block|{
name|QMatrix4x4
name|m1
decl_stmt|;
name|m1
operator|.
name|perspective
argument_list|(
literal|45.0f
argument_list|,
literal|1.0f
argument_list|,
operator|-
literal|1.0f
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QVector3D
name|p1
init|=
name|m1
operator|*
name|QVector3D
argument_list|(
operator|-
literal|1.0f
argument_list|,
operator|-
literal|1.0f
argument_list|,
literal|1.0f
argument_list|)
decl_stmt|;
name|QVector3D
name|p2
init|=
name|m1
operator|*
name|QVector3D
argument_list|(
literal|1.0f
argument_list|,
operator|-
literal|1.0f
argument_list|,
literal|1.0f
argument_list|)
decl_stmt|;
name|QVector3D
name|p3
init|=
name|m1
operator|*
name|QVector3D
argument_list|(
operator|-
literal|1.0f
argument_list|,
literal|1.0f
argument_list|,
literal|1.0f
argument_list|)
decl_stmt|;
name|QVector3D
name|p4
init|=
name|m1
operator|*
name|QVector3D
argument_list|(
literal|1.0f
argument_list|,
literal|1.0f
argument_list|,
literal|1.0f
argument_list|)
decl_stmt|;
name|QVector3D
name|p5
init|=
name|m1
operator|*
name|QVector3D
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|2.0f
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p1
operator|.
name|x
argument_list|()
argument_list|,
literal|2.41421f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p1
operator|.
name|y
argument_list|()
argument_list|,
literal|2.41421f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p1
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p2
operator|.
name|x
argument_list|()
argument_list|,
operator|-
literal|2.41421f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p2
operator|.
name|y
argument_list|()
argument_list|,
literal|2.41421f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p2
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p3
operator|.
name|x
argument_list|()
argument_list|,
literal|2.41421f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p3
operator|.
name|y
argument_list|()
argument_list|,
operator|-
literal|2.41421f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p3
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p4
operator|.
name|x
argument_list|()
argument_list|,
operator|-
literal|2.41421f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p4
operator|.
name|y
argument_list|()
argument_list|,
operator|-
literal|2.41421f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p4
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p5
operator|.
name|x
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p5
operator|.
name|y
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|p5
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|0.5f
argument_list|)
argument_list|)
expr_stmt|;
comment|// An empty view volume should leave the matrix alone.
name|QMatrix4x4
name|m5
decl_stmt|;
name|m5
operator|.
name|perspective
argument_list|(
literal|45.0f
argument_list|,
literal|1.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m5
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
name|m5
operator|.
name|perspective
argument_list|(
literal|45.0f
argument_list|,
literal|0.0f
argument_list|,
operator|-
literal|1.0f
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m5
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
name|m5
operator|.
name|perspective
argument_list|(
literal|0.0f
argument_list|,
literal|1.0f
argument_list|,
operator|-
literal|1.0f
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m5
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test left-handed vs right-handed coordinate flipping.
end_comment
begin_function
DECL|function|flipCoordinates
name|void
name|tst_QMatrixNxN
operator|::
name|flipCoordinates
parameter_list|()
block|{
name|QMatrix4x4
name|m1
decl_stmt|;
name|m1
operator|.
name|flipCoordinates
argument_list|()
expr_stmt|;
name|QVector3D
name|p1
init|=
name|m1
operator|*
name|QVector3D
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|p1
operator|==
name|QVector3D
argument_list|(
literal|2
argument_list|,
operator|-
literal|3
argument_list|,
operator|-
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m2
decl_stmt|;
name|m2
operator|.
name|scale
argument_list|(
literal|2.0f
argument_list|,
literal|3.0f
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|m2
operator|.
name|flipCoordinates
argument_list|()
expr_stmt|;
name|QVector3D
name|p2
init|=
name|m2
operator|*
name|QVector3D
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|p2
operator|==
name|QVector3D
argument_list|(
literal|4
argument_list|,
operator|-
literal|9
argument_list|,
operator|-
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m3
decl_stmt|;
name|m3
operator|.
name|translate
argument_list|(
literal|2.0f
argument_list|,
literal|3.0f
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|m3
operator|.
name|flipCoordinates
argument_list|()
expr_stmt|;
name|QVector3D
name|p3
init|=
name|m3
operator|*
name|QVector3D
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|p3
operator|==
name|QVector3D
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|,
operator|-
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m4
decl_stmt|;
name|m4
operator|.
name|rotate
argument_list|(
literal|90.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|m4
operator|.
name|flipCoordinates
argument_list|()
expr_stmt|;
name|QVector3D
name|p4
init|=
name|m4
operator|*
name|QVector3D
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|p4
operator|==
name|QVector3D
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
operator|-
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test conversion of generic matrices to and from the non-generic types.
end_comment
begin_function
DECL|function|convertGeneric
name|void
name|tst_QMatrixNxN
operator|::
name|convertGeneric
parameter_list|()
block|{
name|QMatrix4x3
name|m1
argument_list|(
name|uniqueValues4x3
argument_list|)
decl_stmt|;
specifier|static
name|float
specifier|const
name|unique4x4
index|[
literal|16
index|]
init|=
block|{
literal|1.0f
block|,
literal|2.0f
block|,
literal|3.0f
block|,
literal|4.0f
block|,
literal|5.0f
block|,
literal|6.0f
block|,
literal|7.0f
block|,
literal|8.0f
block|,
literal|9.0f
block|,
literal|10.0f
block|,
literal|11.0f
block|,
literal|12.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
name|QMatrix4x4
name|m4
argument_list|(
name|m1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m4
argument_list|,
name|unique4x4
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m5
init|=
name|qGenericMatrixToMatrix4x4
argument_list|(
name|m1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m5
argument_list|,
name|unique4x4
argument_list|)
argument_list|)
expr_stmt|;
specifier|static
name|float
specifier|const
name|conv4x4
index|[
literal|12
index|]
init|=
block|{
literal|1.0f
block|,
literal|2.0f
block|,
literal|3.0f
block|,
literal|4.0f
block|,
literal|5.0f
block|,
literal|6.0f
block|,
literal|7.0f
block|,
literal|8.0f
block|,
literal|9.0f
block|,
literal|10.0f
block|,
literal|11.0f
block|,
literal|12.0f
block|}
decl_stmt|;
name|QMatrix4x4
name|m9
argument_list|(
name|uniqueValues4
argument_list|)
decl_stmt|;
name|QMatrix4x3
name|m10
init|=
name|m9
operator|.
name|toGenericMatrix
argument_list|<
literal|4
argument_list|,
literal|3
argument_list|>
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m10
argument_list|,
name|conv4x4
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x3
name|m11
init|=
name|qGenericMatrixFromMatrix4x4
argument_list|<
literal|4
argument_list|,
literal|3
argument_list|>
argument_list|(
name|m9
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m11
argument_list|,
name|conv4x4
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Copy of "flagBits" in qmatrix4x4.h.
end_comment
begin_enum
enum|enum
block|{
DECL|enumerator|Identity
name|Identity
init|=
literal|0x0000
block|,
comment|// Identity matrix
DECL|enumerator|Translation
name|Translation
init|=
literal|0x0001
block|,
comment|// Contains a translation
DECL|enumerator|Scale
name|Scale
init|=
literal|0x0002
block|,
comment|// Contains a scale
DECL|enumerator|Rotation2D
name|Rotation2D
init|=
literal|0x0004
block|,
comment|// Contains a rotation about the Z axis
DECL|enumerator|Rotation
name|Rotation
init|=
literal|0x0008
block|,
comment|// Contains an arbitrary rotation
DECL|enumerator|Perspective
name|Perspective
init|=
literal|0x0010
block|,
comment|// Last row is different from (0, 0, 0, 1)
DECL|enumerator|General
name|General
init|=
literal|0x001f
comment|// General matrix, unknown contents
block|}
enum|;
end_enum
begin_comment
comment|// Structure that allows direct access to "flagBits" for testing.
end_comment
begin_struct
DECL|struct|Matrix4x4
struct|struct
name|Matrix4x4
block|{
DECL|member|m
name|float
name|m
index|[
literal|4
index|]
index|[
literal|4
index|]
decl_stmt|;
DECL|member|flagBits
name|int
name|flagBits
decl_stmt|;
block|}
struct|;
end_struct
begin_comment
comment|// Test the inferring of special matrix types.
end_comment
begin_function
DECL|function|optimize_data
name|void
name|tst_QMatrixNxN
operator|::
name|optimize_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"mValues"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"flagBits"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues4
operator|<<
operator|(
name|int
operator|)
name|General
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"identity"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityValues4
operator|<<
operator|(
name|int
operator|)
name|Identity
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unique"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueValues4
operator|<<
operator|(
name|int
operator|)
name|General
expr_stmt|;
specifier|static
name|float
name|scaleValues
index|[
literal|16
index|]
init|=
block|{
literal|2.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|3.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|4.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"scale"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|scaleValues
operator|<<
operator|(
name|int
operator|)
name|Scale
expr_stmt|;
specifier|static
name|float
name|translateValues
index|[
literal|16
index|]
init|=
block|{
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|2.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|3.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|4.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"translate"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|translateValues
operator|<<
operator|(
name|int
operator|)
name|Translation
expr_stmt|;
specifier|static
name|float
name|scaleTranslateValues
index|[
literal|16
index|]
init|=
block|{
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|2.0f
block|,
literal|0.0f
block|,
literal|2.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|4.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"scaleTranslate"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|scaleTranslateValues
operator|<<
call|(
name|int
call|)
argument_list|(
name|Scale
operator||
name|Translation
argument_list|)
expr_stmt|;
specifier|static
name|float
name|rotateValues
index|[
literal|16
index|]
init|=
block|{
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
operator|-
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rotate"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|rotateValues
operator|<<
operator|(
name|int
operator|)
name|Rotation2D
expr_stmt|;
comment|// Left-handed system, not a simple rotation.
specifier|static
name|float
name|scaleRotateValues
index|[
literal|16
index|]
init|=
block|{
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"scaleRotate"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|scaleRotateValues
operator|<<
call|(
name|int
call|)
argument_list|(
name|Scale
operator||
name|Rotation2D
argument_list|)
expr_stmt|;
specifier|static
name|float
name|matrix2x2Values
index|[
literal|16
index|]
init|=
block|{
literal|1.0f
block|,
literal|2.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|8.0f
block|,
literal|3.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|9.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"matrix2x2"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|matrix2x2Values
operator|<<
call|(
name|int
call|)
argument_list|(
name|Scale
operator||
name|Rotation2D
argument_list|)
expr_stmt|;
specifier|static
name|float
name|matrix3x3Values
index|[
literal|16
index|]
init|=
block|{
literal|1.0f
block|,
literal|2.0f
block|,
literal|4.0f
block|,
literal|0.0f
block|,
literal|8.0f
block|,
literal|3.0f
block|,
literal|5.0f
block|,
literal|0.0f
block|,
literal|6.0f
block|,
literal|7.0f
block|,
literal|9.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"matrix3x3"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|matrix3x3Values
operator|<<
call|(
name|int
call|)
argument_list|(
name|Scale
operator||
name|Rotation2D
operator||
name|Rotation
argument_list|)
expr_stmt|;
specifier|static
name|float
name|rotateTranslateValues
index|[
literal|16
index|]
init|=
block|{
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
operator|-
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|2.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|3.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rotateTranslate"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|rotateTranslateValues
operator|<<
call|(
name|int
call|)
argument_list|(
name|Translation
operator||
name|Rotation2D
argument_list|)
expr_stmt|;
comment|// Left-handed system, not a simple rotation.
specifier|static
name|float
name|scaleRotateTranslateValues
index|[
literal|16
index|]
init|=
block|{
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|2.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|3.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"scaleRotateTranslate"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|scaleRotateTranslateValues
operator|<<
call|(
name|int
call|)
argument_list|(
name|Translation
operator||
name|Scale
operator||
name|Rotation2D
argument_list|)
expr_stmt|;
specifier|static
name|float
name|belowValues
index|[
literal|16
index|]
init|=
block|{
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|4.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"below"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|belowValues
operator|<<
operator|(
name|int
operator|)
name|General
expr_stmt|;
block|}
end_function
begin_function
DECL|function|optimize
name|void
name|tst_QMatrixNxN
operator|::
name|optimize
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|mValues
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|flagBits
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|mValues
argument_list|)
decl_stmt|;
name|m
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
cast|reinterpret_cast
argument_list|<
name|Matrix4x4
operator|*
argument_list|>
argument_list|(
operator|&
name|m
argument_list|)
operator|->
name|flagBits
argument_list|,
name|flagBits
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|columnsAndRows
name|void
name|tst_QMatrixNxN
operator|::
name|columnsAndRows
parameter_list|()
block|{
name|QMatrix4x4
name|m1
argument_list|(
name|uniqueValues4
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|.
name|column
argument_list|(
literal|0
argument_list|)
operator|==
name|QVector4D
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|,
literal|9
argument_list|,
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|.
name|column
argument_list|(
literal|1
argument_list|)
operator|==
name|QVector4D
argument_list|(
literal|2
argument_list|,
literal|6
argument_list|,
literal|10
argument_list|,
literal|14
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|.
name|column
argument_list|(
literal|2
argument_list|)
operator|==
name|QVector4D
argument_list|(
literal|3
argument_list|,
literal|7
argument_list|,
literal|11
argument_list|,
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|.
name|column
argument_list|(
literal|3
argument_list|)
operator|==
name|QVector4D
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|,
literal|12
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|.
name|row
argument_list|(
literal|0
argument_list|)
operator|==
name|QVector4D
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|.
name|row
argument_list|(
literal|1
argument_list|)
operator|==
name|QVector4D
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|.
name|row
argument_list|(
literal|2
argument_list|)
operator|==
name|QVector4D
argument_list|(
literal|9
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|.
name|row
argument_list|(
literal|3
argument_list|)
operator|==
name|QVector4D
argument_list|(
literal|13
argument_list|,
literal|14
argument_list|,
literal|15
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|m1
operator|.
name|setColumn
argument_list|(
literal|0
argument_list|,
name|QVector4D
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|5
argument_list|,
operator|-
literal|9
argument_list|,
operator|-
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|m1
operator|.
name|setColumn
argument_list|(
literal|1
argument_list|,
name|QVector4D
argument_list|(
operator|-
literal|2
argument_list|,
operator|-
literal|6
argument_list|,
operator|-
literal|10
argument_list|,
operator|-
literal|14
argument_list|)
argument_list|)
expr_stmt|;
name|m1
operator|.
name|setColumn
argument_list|(
literal|2
argument_list|,
name|QVector4D
argument_list|(
operator|-
literal|3
argument_list|,
operator|-
literal|7
argument_list|,
operator|-
literal|11
argument_list|,
operator|-
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|m1
operator|.
name|setColumn
argument_list|(
literal|3
argument_list|,
name|QVector4D
argument_list|(
operator|-
literal|4
argument_list|,
operator|-
literal|8
argument_list|,
operator|-
literal|12
argument_list|,
operator|-
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|.
name|column
argument_list|(
literal|0
argument_list|)
operator|==
name|QVector4D
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|5
argument_list|,
operator|-
literal|9
argument_list|,
operator|-
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|.
name|column
argument_list|(
literal|1
argument_list|)
operator|==
name|QVector4D
argument_list|(
operator|-
literal|2
argument_list|,
operator|-
literal|6
argument_list|,
operator|-
literal|10
argument_list|,
operator|-
literal|14
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|.
name|column
argument_list|(
literal|2
argument_list|)
operator|==
name|QVector4D
argument_list|(
operator|-
literal|3
argument_list|,
operator|-
literal|7
argument_list|,
operator|-
literal|11
argument_list|,
operator|-
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|.
name|column
argument_list|(
literal|3
argument_list|)
operator|==
name|QVector4D
argument_list|(
operator|-
literal|4
argument_list|,
operator|-
literal|8
argument_list|,
operator|-
literal|12
argument_list|,
operator|-
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|.
name|row
argument_list|(
literal|0
argument_list|)
operator|==
name|QVector4D
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|3
argument_list|,
operator|-
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|.
name|row
argument_list|(
literal|1
argument_list|)
operator|==
name|QVector4D
argument_list|(
operator|-
literal|5
argument_list|,
operator|-
literal|6
argument_list|,
operator|-
literal|7
argument_list|,
operator|-
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|.
name|row
argument_list|(
literal|2
argument_list|)
operator|==
name|QVector4D
argument_list|(
operator|-
literal|9
argument_list|,
operator|-
literal|10
argument_list|,
operator|-
literal|11
argument_list|,
operator|-
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|.
name|row
argument_list|(
literal|3
argument_list|)
operator|==
name|QVector4D
argument_list|(
operator|-
literal|13
argument_list|,
operator|-
literal|14
argument_list|,
operator|-
literal|15
argument_list|,
operator|-
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|m1
operator|.
name|setRow
argument_list|(
literal|0
argument_list|,
name|QVector4D
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|,
literal|9
argument_list|,
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|m1
operator|.
name|setRow
argument_list|(
literal|1
argument_list|,
name|QVector4D
argument_list|(
literal|2
argument_list|,
literal|6
argument_list|,
literal|10
argument_list|,
literal|14
argument_list|)
argument_list|)
expr_stmt|;
name|m1
operator|.
name|setRow
argument_list|(
literal|2
argument_list|,
name|QVector4D
argument_list|(
literal|3
argument_list|,
literal|7
argument_list|,
literal|11
argument_list|,
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|m1
operator|.
name|setRow
argument_list|(
literal|3
argument_list|,
name|QVector4D
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|,
literal|12
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|.
name|column
argument_list|(
literal|0
argument_list|)
operator|==
name|QVector4D
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|.
name|column
argument_list|(
literal|1
argument_list|)
operator|==
name|QVector4D
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|.
name|column
argument_list|(
literal|2
argument_list|)
operator|==
name|QVector4D
argument_list|(
literal|9
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|.
name|column
argument_list|(
literal|3
argument_list|)
operator|==
name|QVector4D
argument_list|(
literal|13
argument_list|,
literal|14
argument_list|,
literal|15
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|.
name|row
argument_list|(
literal|0
argument_list|)
operator|==
name|QVector4D
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|,
literal|9
argument_list|,
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|.
name|row
argument_list|(
literal|1
argument_list|)
operator|==
name|QVector4D
argument_list|(
literal|2
argument_list|,
literal|6
argument_list|,
literal|10
argument_list|,
literal|14
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|.
name|row
argument_list|(
literal|2
argument_list|)
operator|==
name|QVector4D
argument_list|(
literal|3
argument_list|,
literal|7
argument_list|,
literal|11
argument_list|,
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|.
name|row
argument_list|(
literal|3
argument_list|)
operator|==
name|QVector4D
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|,
literal|12
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test converting QMatrix objects into QMatrix4x4 and then
end_comment
begin_comment
comment|// checking that transformations in the original perform the
end_comment
begin_comment
comment|// equivalent transformations in the new matrix.
end_comment
begin_function
DECL|function|convertQMatrix
name|void
name|tst_QMatrixNxN
operator|::
name|convertQMatrix
parameter_list|()
block|{
name|QMatrix
name|m1
decl_stmt|;
name|m1
operator|.
name|translate
argument_list|(
operator|-
literal|3.5
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
name|QPointF
name|p1
init|=
name|m1
operator|.
name|map
argument_list|(
name|QPointF
argument_list|(
literal|100.0
argument_list|,
literal|150.0
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|p1
operator|.
name|x
argument_list|()
argument_list|,
literal|100.0
operator|-
literal|3.5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p1
operator|.
name|y
argument_list|()
argument_list|,
literal|150.0
operator|+
literal|2.0
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m2
argument_list|(
name|m1
argument_list|)
decl_stmt|;
name|QPointF
name|p2
init|=
name|m2
operator|*
name|QPointF
argument_list|(
literal|100.0
argument_list|,
literal|150.0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|double
operator|)
name|p2
operator|.
name|x
argument_list|()
argument_list|,
literal|100.0
operator|-
literal|3.5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|double
operator|)
name|p2
operator|.
name|y
argument_list|()
argument_list|,
literal|150.0
operator|+
literal|2.0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|==
name|m2
operator|.
name|toAffine
argument_list|()
argument_list|)
expr_stmt|;
name|QMatrix
name|m3
decl_stmt|;
name|m3
operator|.
name|scale
argument_list|(
literal|1.5
argument_list|,
operator|-
literal|2.0
argument_list|)
expr_stmt|;
name|QPointF
name|p3
init|=
name|m3
operator|.
name|map
argument_list|(
name|QPointF
argument_list|(
literal|100.0
argument_list|,
literal|150.0
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|p3
operator|.
name|x
argument_list|()
argument_list|,
literal|1.5
operator|*
literal|100.0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p3
operator|.
name|y
argument_list|()
argument_list|,
operator|-
literal|2.0
operator|*
literal|150.0
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m4
argument_list|(
name|m3
argument_list|)
decl_stmt|;
name|QPointF
name|p4
init|=
name|m4
operator|*
name|QPointF
argument_list|(
literal|100.0
argument_list|,
literal|150.0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|double
operator|)
name|p4
operator|.
name|x
argument_list|()
argument_list|,
literal|1.5
operator|*
literal|100.0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|double
operator|)
name|p4
operator|.
name|y
argument_list|()
argument_list|,
operator|-
literal|2.0
operator|*
literal|150.0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m3
operator|==
name|m4
operator|.
name|toAffine
argument_list|()
argument_list|)
expr_stmt|;
name|QMatrix
name|m5
decl_stmt|;
name|m5
operator|.
name|rotate
argument_list|(
literal|45.0
argument_list|)
expr_stmt|;
name|QPointF
name|p5
init|=
name|m5
operator|.
name|map
argument_list|(
name|QPointF
argument_list|(
literal|100.0
argument_list|,
literal|150.0
argument_list|)
argument_list|)
decl_stmt|;
name|QMatrix4x4
name|m6
argument_list|(
name|m5
argument_list|)
decl_stmt|;
name|QPointF
name|p6
init|=
name|m6
operator|*
name|QPointF
argument_list|(
literal|100.0
argument_list|,
literal|150.0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p5
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
name|float
argument_list|(
name|p6
operator|.
name|x
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p5
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
name|float
argument_list|(
name|p6
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix
name|m7
init|=
name|m6
operator|.
name|toAffine
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|m5
operator|.
name|m11
argument_list|()
argument_list|)
argument_list|,
name|float
argument_list|(
name|m7
operator|.
name|m11
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|m5
operator|.
name|m12
argument_list|()
argument_list|)
argument_list|,
name|float
argument_list|(
name|m7
operator|.
name|m12
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|m5
operator|.
name|m21
argument_list|()
argument_list|)
argument_list|,
name|float
argument_list|(
name|m7
operator|.
name|m21
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|m5
operator|.
name|m22
argument_list|()
argument_list|)
argument_list|,
name|float
argument_list|(
name|m7
operator|.
name|m22
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|m5
operator|.
name|dx
argument_list|()
argument_list|)
argument_list|,
name|float
argument_list|(
name|m7
operator|.
name|dx
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|m5
operator|.
name|dy
argument_list|()
argument_list|)
argument_list|,
name|float
argument_list|(
name|m7
operator|.
name|dy
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test converting QTransform objects into QMatrix4x4 and then
end_comment
begin_comment
comment|// checking that transformations in the original perform the
end_comment
begin_comment
comment|// equivalent transformations in the new matrix.
end_comment
begin_function
DECL|function|convertQTransform
name|void
name|tst_QMatrixNxN
operator|::
name|convertQTransform
parameter_list|()
block|{
name|QTransform
name|m1
decl_stmt|;
name|m1
operator|.
name|translate
argument_list|(
operator|-
literal|3.5
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
name|QPointF
name|p1
init|=
name|m1
operator|.
name|map
argument_list|(
name|QPointF
argument_list|(
literal|100.0
argument_list|,
literal|150.0
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|p1
operator|.
name|x
argument_list|()
argument_list|,
literal|100.0
operator|-
literal|3.5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p1
operator|.
name|y
argument_list|()
argument_list|,
literal|150.0
operator|+
literal|2.0
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m2
argument_list|(
name|m1
argument_list|)
decl_stmt|;
name|QPointF
name|p2
init|=
name|m2
operator|*
name|QPointF
argument_list|(
literal|100.0
argument_list|,
literal|150.0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|double
operator|)
name|p2
operator|.
name|x
argument_list|()
argument_list|,
literal|100.0
operator|-
literal|3.5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|double
operator|)
name|p2
operator|.
name|y
argument_list|()
argument_list|,
literal|150.0
operator|+
literal|2.0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|==
name|m2
operator|.
name|toTransform
argument_list|()
argument_list|)
expr_stmt|;
name|QTransform
name|m3
decl_stmt|;
name|m3
operator|.
name|scale
argument_list|(
literal|1.5
argument_list|,
operator|-
literal|2.0
argument_list|)
expr_stmt|;
name|QPointF
name|p3
init|=
name|m3
operator|.
name|map
argument_list|(
name|QPointF
argument_list|(
literal|100.0
argument_list|,
literal|150.0
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|p3
operator|.
name|x
argument_list|()
argument_list|,
literal|1.5
operator|*
literal|100.0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p3
operator|.
name|y
argument_list|()
argument_list|,
operator|-
literal|2.0
operator|*
literal|150.0
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m4
argument_list|(
name|m3
argument_list|)
decl_stmt|;
name|QPointF
name|p4
init|=
name|m4
operator|*
name|QPointF
argument_list|(
literal|100.0
argument_list|,
literal|150.0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|double
operator|)
name|p4
operator|.
name|x
argument_list|()
argument_list|,
literal|1.5
operator|*
literal|100.0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|double
operator|)
name|p4
operator|.
name|y
argument_list|()
argument_list|,
operator|-
literal|2.0
operator|*
literal|150.0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m3
operator|==
name|m4
operator|.
name|toTransform
argument_list|()
argument_list|)
expr_stmt|;
name|QTransform
name|m5
decl_stmt|;
name|m5
operator|.
name|rotate
argument_list|(
literal|45.0
argument_list|)
expr_stmt|;
name|QPointF
name|p5
init|=
name|m5
operator|.
name|map
argument_list|(
name|QPointF
argument_list|(
literal|100.0
argument_list|,
literal|150.0
argument_list|)
argument_list|)
decl_stmt|;
name|QMatrix4x4
name|m6
argument_list|(
name|m5
argument_list|)
decl_stmt|;
name|QPointF
name|p6
init|=
name|m6
operator|*
name|QPointF
argument_list|(
literal|100.0
argument_list|,
literal|150.0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p5
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
name|float
argument_list|(
name|p6
operator|.
name|x
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|p5
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
name|float
argument_list|(
name|p6
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QTransform
name|m7
init|=
name|m6
operator|.
name|toTransform
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|m5
operator|.
name|m11
argument_list|()
argument_list|)
argument_list|,
name|float
argument_list|(
name|m7
operator|.
name|m11
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|m5
operator|.
name|m12
argument_list|()
argument_list|)
argument_list|,
name|float
argument_list|(
name|m7
operator|.
name|m12
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|m5
operator|.
name|m21
argument_list|()
argument_list|)
argument_list|,
name|float
argument_list|(
name|m7
operator|.
name|m21
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|m5
operator|.
name|m22
argument_list|()
argument_list|)
argument_list|,
name|float
argument_list|(
name|m7
operator|.
name|m22
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|m5
operator|.
name|dx
argument_list|()
argument_list|)
argument_list|,
name|float
argument_list|(
name|m7
operator|.
name|dx
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|m5
operator|.
name|dy
argument_list|()
argument_list|)
argument_list|,
name|float
argument_list|(
name|m7
operator|.
name|dy
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|m5
operator|.
name|m13
argument_list|()
argument_list|)
argument_list|,
name|float
argument_list|(
name|m7
operator|.
name|m13
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|m5
operator|.
name|m23
argument_list|()
argument_list|)
argument_list|,
name|float
argument_list|(
name|m7
operator|.
name|m23
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|m5
operator|.
name|m33
argument_list|()
argument_list|)
argument_list|,
name|float
argument_list|(
name|m7
operator|.
name|m33
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test filling matrices with specific values.
end_comment
begin_function
DECL|function|fill
name|void
name|tst_QMatrixNxN
operator|::
name|fill
parameter_list|()
block|{
name|QMatrix4x4
name|m1
decl_stmt|;
name|m1
operator|.
name|fill
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m1
argument_list|,
name|nullValues4
argument_list|)
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|float
name|fillValues4
index|[]
init|=
block|{
literal|2.5f
block|,
literal|2.5f
block|,
literal|2.5f
block|,
literal|2.5f
block|,
literal|2.5f
block|,
literal|2.5f
block|,
literal|2.5f
block|,
literal|2.5f
block|,
literal|2.5f
block|,
literal|2.5f
block|,
literal|2.5f
block|,
literal|2.5f
block|,
literal|2.5f
block|,
literal|2.5f
block|,
literal|2.5f
block|,
literal|2.5f
block|}
decl_stmt|;
name|m1
operator|.
name|fill
argument_list|(
literal|2.5f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m1
argument_list|,
name|fillValues4
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x3
name|m2
decl_stmt|;
name|m2
operator|.
name|fill
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m2
argument_list|,
name|nullValues4x3
argument_list|)
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|float
name|fillValues4x3
index|[]
init|=
block|{
literal|2.5f
block|,
literal|2.5f
block|,
literal|2.5f
block|,
literal|2.5f
block|,
literal|2.5f
block|,
literal|2.5f
block|,
literal|2.5f
block|,
literal|2.5f
block|,
literal|2.5f
block|,
literal|2.5f
block|,
literal|2.5f
block|,
literal|2.5f
block|}
decl_stmt|;
name|m2
operator|.
name|fill
argument_list|(
literal|2.5f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m2
argument_list|,
name|fillValues4x3
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test the mapRect() function for QRect and QRectF.
end_comment
begin_function
DECL|function|mapRect_data
name|void
name|tst_QMatrixNxN
operator|::
name|mapRect_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"width"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"height"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
operator|(
name|float
operator|)
literal|0.0f
operator|<<
operator|(
name|float
operator|)
literal|0.0f
operator|<<
operator|(
name|float
operator|)
literal|0.0f
operator|<<
operator|(
name|float
operator|)
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rect"
argument_list|)
operator|<<
operator|(
name|float
operator|)
literal|1.0f
operator|<<
operator|(
name|float
operator|)
operator|-
literal|20.5f
operator|<<
operator|(
name|float
operator|)
literal|100.0f
operator|<<
operator|(
name|float
operator|)
literal|63.75f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mapRect
name|void
name|tst_QMatrixNxN
operator|::
name|mapRect
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|width
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|QRectF
name|rect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
decl_stmt|;
name|QRect
name|recti
argument_list|(
name|qRound
argument_list|(
name|x
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|y
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|width
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|height
argument_list|)
argument_list|)
decl_stmt|;
name|QMatrix4x4
name|m1
decl_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|.
name|mapRect
argument_list|(
name|rect
argument_list|)
operator|==
name|rect
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m1
operator|.
name|mapRect
argument_list|(
name|recti
argument_list|)
operator|==
name|recti
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m2
decl_stmt|;
name|m2
operator|.
name|translate
argument_list|(
operator|-
literal|100.5f
argument_list|,
literal|64.0f
argument_list|)
expr_stmt|;
name|QRectF
name|translated
init|=
name|rect
operator|.
name|translated
argument_list|(
operator|-
literal|100.5f
argument_list|,
literal|64.0f
argument_list|)
decl_stmt|;
name|QRect
name|translatedi
init|=
name|QRect
argument_list|(
name|qRound
argument_list|(
name|recti
operator|.
name|x
argument_list|()
operator|-
literal|100.5f
argument_list|)
argument_list|,
name|recti
operator|.
name|y
argument_list|()
operator|+
literal|64
argument_list|,
name|recti
operator|.
name|width
argument_list|()
argument_list|,
name|recti
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|m2
operator|.
name|mapRect
argument_list|(
name|rect
argument_list|)
operator|==
name|translated
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m2
operator|.
name|mapRect
argument_list|(
name|recti
argument_list|)
operator|==
name|translatedi
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m3
decl_stmt|;
name|m3
operator|.
name|scale
argument_list|(
operator|-
literal|100.5f
argument_list|,
literal|64.0f
argument_list|)
expr_stmt|;
name|float
name|scalex
init|=
name|x
operator|*
operator|-
literal|100.5f
decl_stmt|;
name|float
name|scaley
init|=
name|y
operator|*
literal|64.0f
decl_stmt|;
name|float
name|scalewid
init|=
name|width
operator|*
operator|-
literal|100.5f
decl_stmt|;
name|float
name|scaleht
init|=
name|height
operator|*
literal|64.0f
decl_stmt|;
if|if
condition|(
name|scalewid
operator|<
literal|0.0f
condition|)
block|{
name|scalewid
operator|=
operator|-
name|scalewid
expr_stmt|;
name|scalex
operator|-=
name|scalewid
expr_stmt|;
block|}
if|if
condition|(
name|scaleht
operator|<
literal|0.0f
condition|)
block|{
name|scaleht
operator|=
operator|-
name|scaleht
expr_stmt|;
name|scaley
operator|-=
name|scaleht
expr_stmt|;
block|}
name|QRectF
name|scaled
argument_list|(
name|scalex
argument_list|,
name|scaley
argument_list|,
name|scalewid
argument_list|,
name|scaleht
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|m3
operator|.
name|mapRect
argument_list|(
name|rect
argument_list|)
operator|==
name|scaled
argument_list|)
expr_stmt|;
name|scalex
operator|=
name|recti
operator|.
name|x
argument_list|()
operator|*
operator|-
literal|100.5f
expr_stmt|;
name|scaley
operator|=
name|recti
operator|.
name|y
argument_list|()
operator|*
literal|64.0f
expr_stmt|;
name|scalewid
operator|=
name|recti
operator|.
name|width
argument_list|()
operator|*
operator|-
literal|100.5f
expr_stmt|;
name|scaleht
operator|=
name|recti
operator|.
name|height
argument_list|()
operator|*
literal|64.0f
expr_stmt|;
if|if
condition|(
name|scalewid
operator|<
literal|0.0f
condition|)
block|{
name|scalewid
operator|=
operator|-
name|scalewid
expr_stmt|;
name|scalex
operator|-=
name|scalewid
expr_stmt|;
block|}
if|if
condition|(
name|scaleht
operator|<
literal|0.0f
condition|)
block|{
name|scaleht
operator|=
operator|-
name|scaleht
expr_stmt|;
name|scaley
operator|-=
name|scaleht
expr_stmt|;
block|}
name|QRect
name|scaledi
argument_list|(
name|qRound
argument_list|(
name|scalex
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|scaley
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|scalewid
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|scaleht
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|m3
operator|.
name|mapRect
argument_list|(
name|recti
argument_list|)
operator|==
name|scaledi
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m4
decl_stmt|;
name|m4
operator|.
name|translate
argument_list|(
operator|-
literal|100.5f
argument_list|,
literal|64.0f
argument_list|)
expr_stmt|;
name|m4
operator|.
name|scale
argument_list|(
operator|-
literal|2.5f
argument_list|,
literal|4.0f
argument_list|)
expr_stmt|;
name|float
name|transx1
init|=
name|x
operator|*
operator|-
literal|2.5f
operator|-
literal|100.5f
decl_stmt|;
name|float
name|transy1
init|=
name|y
operator|*
literal|4.0f
operator|+
literal|64.0f
decl_stmt|;
name|float
name|transx2
init|=
operator|(
name|x
operator|+
name|width
operator|)
operator|*
operator|-
literal|2.5f
operator|-
literal|100.5f
decl_stmt|;
name|float
name|transy2
init|=
operator|(
name|y
operator|+
name|height
operator|)
operator|*
literal|4.0f
operator|+
literal|64.0f
decl_stmt|;
if|if
condition|(
name|transx1
operator|>
name|transx2
condition|)
name|qSwap
argument_list|(
name|transx1
argument_list|,
name|transx2
argument_list|)
expr_stmt|;
if|if
condition|(
name|transy1
operator|>
name|transy2
condition|)
name|qSwap
argument_list|(
name|transy1
argument_list|,
name|transy2
argument_list|)
expr_stmt|;
name|QRectF
name|trans
argument_list|(
name|transx1
argument_list|,
name|transy1
argument_list|,
name|transx2
operator|-
name|transx1
argument_list|,
name|transy2
operator|-
name|transy1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|m4
operator|.
name|mapRect
argument_list|(
name|rect
argument_list|)
operator|==
name|trans
argument_list|)
expr_stmt|;
name|transx1
operator|=
name|recti
operator|.
name|x
argument_list|()
operator|*
operator|-
literal|2.5f
operator|-
literal|100.5f
expr_stmt|;
name|transy1
operator|=
name|recti
operator|.
name|y
argument_list|()
operator|*
literal|4.0f
operator|+
literal|64.0f
expr_stmt|;
name|transx2
operator|=
operator|(
name|recti
operator|.
name|x
argument_list|()
operator|+
name|recti
operator|.
name|width
argument_list|()
operator|)
operator|*
operator|-
literal|2.5f
operator|-
literal|100.5f
expr_stmt|;
name|transy2
operator|=
operator|(
name|recti
operator|.
name|y
argument_list|()
operator|+
name|recti
operator|.
name|height
argument_list|()
operator|)
operator|*
literal|4.0f
operator|+
literal|64.0f
expr_stmt|;
if|if
condition|(
name|transx1
operator|>
name|transx2
condition|)
name|qSwap
argument_list|(
name|transx1
argument_list|,
name|transx2
argument_list|)
expr_stmt|;
if|if
condition|(
name|transy1
operator|>
name|transy2
condition|)
name|qSwap
argument_list|(
name|transy1
argument_list|,
name|transy2
argument_list|)
expr_stmt|;
name|QRect
name|transi
argument_list|(
name|qRound
argument_list|(
name|transx1
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|transy1
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|transx2
argument_list|)
operator|-
name|qRound
argument_list|(
name|transx1
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|transy2
argument_list|)
operator|-
name|qRound
argument_list|(
name|transy1
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|m4
operator|.
name|mapRect
argument_list|(
name|recti
argument_list|)
operator|==
name|transi
argument_list|)
expr_stmt|;
name|m4
operator|.
name|rotate
argument_list|(
literal|45.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QTransform
name|t4
decl_stmt|;
name|t4
operator|.
name|translate
argument_list|(
operator|-
literal|100.5f
argument_list|,
literal|64.0f
argument_list|)
expr_stmt|;
name|t4
operator|.
name|scale
argument_list|(
operator|-
literal|2.5f
argument_list|,
literal|4.0f
argument_list|)
expr_stmt|;
name|t4
operator|.
name|rotate
argument_list|(
literal|45.0f
argument_list|)
expr_stmt|;
name|QRectF
name|mr
init|=
name|m4
operator|.
name|mapRect
argument_list|(
name|rect
argument_list|)
decl_stmt|;
name|QRectF
name|tr
init|=
name|t4
operator|.
name|mapRect
argument_list|(
name|rect
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|mr
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
name|float
argument_list|(
name|tr
operator|.
name|x
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|mr
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
name|float
argument_list|(
name|tr
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|mr
operator|.
name|width
argument_list|()
argument_list|)
argument_list|,
name|float
argument_list|(
name|tr
operator|.
name|width
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|float
argument_list|(
name|mr
operator|.
name|height
argument_list|()
argument_list|)
argument_list|,
name|float
argument_list|(
name|tr
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QRect
name|mri
init|=
name|m4
operator|.
name|mapRect
argument_list|(
name|recti
argument_list|)
decl_stmt|;
name|QRect
name|tri
init|=
name|t4
operator|.
name|mapRect
argument_list|(
name|recti
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|mri
operator|==
name|tri
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mapVector_data
name|void
name|tst_QMatrixNxN
operator|::
name|mapVector_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|"mValues"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|nullValues4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"identity"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|identityValues4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unique"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|uniqueValues4
expr_stmt|;
specifier|static
specifier|const
name|float
name|scale
index|[]
init|=
block|{
literal|2.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|11.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
operator|-
literal|6.5f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"scale"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|scale
expr_stmt|;
specifier|static
specifier|const
name|float
name|scaleTranslate
index|[]
init|=
block|{
literal|2.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|11.0f
block|,
literal|0.0f
block|,
literal|2.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
operator|-
literal|6.5f
block|,
literal|3.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"scaleTranslate"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|scaleTranslate
expr_stmt|;
specifier|static
specifier|const
name|float
name|translate
index|[]
init|=
block|{
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|2.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|3.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"translate"
argument_list|)
operator|<<
operator|(
name|void
operator|*
operator|)
name|translate
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mapVector
name|void
name|tst_QMatrixNxN
operator|::
name|mapVector
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|void
operator|*
argument_list|,
name|mValues
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m1
argument_list|(
operator|(
specifier|const
name|float
operator|*
operator|)
name|mValues
argument_list|)
decl_stmt|;
name|QVector3D
name|v
argument_list|(
literal|3.5f
argument_list|,
operator|-
literal|1.0f
argument_list|,
literal|2.5f
argument_list|)
decl_stmt|;
name|QVector3D
name|expected
argument_list|(
name|v
operator|.
name|x
argument_list|()
operator|*
name|m1
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|+
name|v
operator|.
name|y
argument_list|()
operator|*
name|m1
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|+
name|v
operator|.
name|z
argument_list|()
operator|*
name|m1
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
name|v
operator|.
name|x
argument_list|()
operator|*
name|m1
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
operator|+
name|v
operator|.
name|y
argument_list|()
operator|*
name|m1
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|+
name|v
operator|.
name|z
argument_list|()
operator|*
name|m1
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|v
operator|.
name|x
argument_list|()
operator|*
name|m1
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
operator|+
name|v
operator|.
name|y
argument_list|()
operator|*
name|m1
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
operator|+
name|v
operator|.
name|z
argument_list|()
operator|*
name|m1
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|QVector3D
name|actual
init|=
name|m1
operator|.
name|mapVector
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|m1
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|QVector3D
name|actual2
init|=
name|m1
operator|.
name|mapVector
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|actual
operator|.
name|x
argument_list|()
argument_list|,
name|expected
operator|.
name|x
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|actual
operator|.
name|y
argument_list|()
argument_list|,
name|expected
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|actual
operator|.
name|z
argument_list|()
argument_list|,
name|expected
operator|.
name|z
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|actual2
operator|.
name|x
argument_list|()
argument_list|,
name|expected
operator|.
name|x
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|actual2
operator|.
name|y
argument_list|()
argument_list|,
name|expected
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|actual2
operator|.
name|z
argument_list|()
argument_list|,
name|expected
operator|.
name|z
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|tst_QMatrixNxN4x4Properties
class|class
name|tst_QMatrixNxN4x4Properties
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
name|Q_PROPERTY
parameter_list|(
name|QMatrix4x4
name|matrix
name|READ
name|matrix
name|WRITE
name|setMatrix
parameter_list|)
specifier|public
private|:
DECL|function|tst_QMatrixNxN4x4Properties
name|tst_QMatrixNxN4x4Properties
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|{}
DECL|function|matrix
name|QMatrix4x4
name|matrix
parameter_list|()
specifier|const
block|{
return|return
name|m
return|;
block|}
DECL|function|setMatrix
name|void
name|setMatrix
parameter_list|(
specifier|const
name|QMatrix4x4
modifier|&
name|value
parameter_list|)
block|{
name|m
operator|=
name|value
expr_stmt|;
block|}
private|private:
DECL|member|m
name|QMatrix4x4
name|m
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|// Test getting and setting matrix properties via the metaobject system.
end_comment
begin_function
DECL|function|properties
name|void
name|tst_QMatrixNxN
operator|::
name|properties
parameter_list|()
block|{
name|tst_QMatrixNxN4x4Properties
name|obj
decl_stmt|;
name|QMatrix4x4
name|m1
argument_list|(
name|uniqueValues4
argument_list|)
decl_stmt|;
name|obj
operator|.
name|setMatrix
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m2
init|=
name|qvariant_cast
argument_list|<
name|QMatrix4x4
argument_list|>
argument_list|(
name|obj
operator|.
name|property
argument_list|(
literal|"matrix"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m2
argument_list|,
name|uniqueValues4
argument_list|)
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m3
argument_list|(
name|transposedValues4
argument_list|)
decl_stmt|;
name|obj
operator|.
name|setProperty
argument_list|(
literal|"matrix"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|m3
argument_list|)
argument_list|)
expr_stmt|;
name|m2
operator|=
name|qvariant_cast
argument_list|<
name|QMatrix4x4
argument_list|>
argument_list|(
name|obj
operator|.
name|property
argument_list|(
literal|"matrix"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSame
argument_list|(
name|m2
argument_list|,
name|transposedValues4
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|metaTypes
name|void
name|tst_QMatrixNxN
operator|::
name|metaTypes
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
literal|"QMatrix4x4"
argument_list|)
operator|==
name|QMetaType
operator|::
name|QMatrix4x4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QByteArray
argument_list|(
name|QMetaType
operator|::
name|typeName
argument_list|(
name|QMetaType
operator|::
name|QMatrix4x4
argument_list|)
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"QMatrix4x4"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QMetaType
operator|::
name|isRegistered
argument_list|(
name|QMetaType
operator|::
name|QMatrix4x4
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qMetaTypeId
argument_list|<
name|QMatrix4x4
argument_list|>
argument_list|()
operator|==
name|QMetaType
operator|::
name|QMatrix4x4
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QMatrixNxN
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qmatrixnxn.moc"
end_include
end_unit
