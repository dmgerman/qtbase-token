begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmath.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qquaternion.h>
end_include
begin_class
DECL|class|tst_QQuaternion
class|class
name|tst_QQuaternion
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|tst_QQuaternion
name|tst_QQuaternion
parameter_list|()
block|{}
DECL|function|~tst_QQuaternion
name|~
name|tst_QQuaternion
parameter_list|()
block|{}
private|private
name|slots
private|:
name|void
name|create
parameter_list|()
function_decl|;
name|void
name|length_data
parameter_list|()
function_decl|;
name|void
name|length
parameter_list|()
function_decl|;
name|void
name|normalized_data
parameter_list|()
function_decl|;
name|void
name|normalized
parameter_list|()
function_decl|;
name|void
name|normalize_data
parameter_list|()
function_decl|;
name|void
name|normalize
parameter_list|()
function_decl|;
name|void
name|compare
parameter_list|()
function_decl|;
name|void
name|add_data
parameter_list|()
function_decl|;
name|void
name|add
parameter_list|()
function_decl|;
name|void
name|subtract_data
parameter_list|()
function_decl|;
name|void
name|subtract
parameter_list|()
function_decl|;
name|void
name|multiply_data
parameter_list|()
function_decl|;
name|void
name|multiply
parameter_list|()
function_decl|;
name|void
name|multiplyFactor_data
parameter_list|()
function_decl|;
name|void
name|multiplyFactor
parameter_list|()
function_decl|;
name|void
name|divide_data
parameter_list|()
function_decl|;
name|void
name|divide
parameter_list|()
function_decl|;
name|void
name|negate_data
parameter_list|()
function_decl|;
name|void
name|negate
parameter_list|()
function_decl|;
name|void
name|conjugate_data
parameter_list|()
function_decl|;
name|void
name|conjugate
parameter_list|()
function_decl|;
name|void
name|fromAxisAndAngle_data
parameter_list|()
function_decl|;
name|void
name|fromAxisAndAngle
parameter_list|()
function_decl|;
name|void
name|slerp_data
parameter_list|()
function_decl|;
name|void
name|slerp
parameter_list|()
function_decl|;
name|void
name|nlerp_data
parameter_list|()
function_decl|;
name|void
name|nlerp
parameter_list|()
function_decl|;
name|void
name|properties
parameter_list|()
function_decl|;
name|void
name|metaTypes
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_comment
comment|// Test the creation of QQuaternion objects in various ways:
end_comment
begin_comment
comment|// construct, copy, and modify.
end_comment
begin_function
DECL|function|create
name|void
name|tst_QQuaternion
operator|::
name|create
parameter_list|()
block|{
name|QQuaternion
name|identity
decl_stmt|;
name|QCOMPARE
argument_list|(
name|identity
operator|.
name|x
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|identity
operator|.
name|y
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|identity
operator|.
name|z
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|identity
operator|.
name|scalar
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|identity
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
name|QQuaternion
name|negativeZeroIdentity
argument_list|(
literal|1.0f
argument_list|,
operator|-
literal|0.0f
argument_list|,
operator|-
literal|0.0f
argument_list|,
operator|-
literal|0.0f
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|negativeZeroIdentity
operator|.
name|x
argument_list|()
argument_list|,
operator|-
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|negativeZeroIdentity
operator|.
name|y
argument_list|()
argument_list|,
operator|-
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|negativeZeroIdentity
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|negativeZeroIdentity
operator|.
name|scalar
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|negativeZeroIdentity
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
name|QQuaternion
name|v1
argument_list|(
literal|34.0f
argument_list|,
literal|1.0f
argument_list|,
literal|2.5f
argument_list|,
operator|-
literal|89.25f
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|89.25f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|scalar
argument_list|()
argument_list|,
literal|34.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QQuaternion
name|v1i
argument_list|(
literal|34
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
operator|-
literal|89
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v1i
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1i
operator|.
name|y
argument_list|()
argument_list|,
literal|2.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1i
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|89.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1i
operator|.
name|scalar
argument_list|()
argument_list|,
literal|34.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1i
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QQuaternion
name|v2
argument_list|(
name|v1
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|89.25f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|scalar
argument_list|()
argument_list|,
literal|34.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v2
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QQuaternion
name|v4
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|x
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|y
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|z
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|scalar
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v4
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
name|v4
operator|=
name|v1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|89.25f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|scalar
argument_list|()
argument_list|,
literal|34.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v4
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QQuaternion
name|v9
argument_list|(
literal|34
argument_list|,
name|QVector3D
argument_list|(
literal|1.0f
argument_list|,
literal|2.5f
argument_list|,
operator|-
literal|89.25f
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v9
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v9
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v9
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|89.25f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v9
operator|.
name|scalar
argument_list|()
argument_list|,
literal|34.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v9
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setX
argument_list|(
literal|3.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|x
argument_list|()
argument_list|,
literal|3.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|89.25f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|scalar
argument_list|()
argument_list|,
literal|34.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setY
argument_list|(
literal|10.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|x
argument_list|()
argument_list|,
literal|3.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|y
argument_list|()
argument_list|,
literal|10.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|89.25f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|scalar
argument_list|()
argument_list|,
literal|34.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setZ
argument_list|(
literal|15.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|x
argument_list|()
argument_list|,
literal|3.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|y
argument_list|()
argument_list|,
literal|10.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|z
argument_list|()
argument_list|,
literal|15.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|scalar
argument_list|()
argument_list|,
literal|34.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setScalar
argument_list|(
literal|6.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|x
argument_list|()
argument_list|,
literal|3.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|y
argument_list|()
argument_list|,
literal|10.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|z
argument_list|()
argument_list|,
literal|15.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|scalar
argument_list|()
argument_list|,
literal|6.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setVector
argument_list|(
literal|2.0f
argument_list|,
literal|6.5f
argument_list|,
operator|-
literal|1.25f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|x
argument_list|()
argument_list|,
literal|2.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|y
argument_list|()
argument_list|,
literal|6.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|1.25f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|scalar
argument_list|()
argument_list|,
literal|6.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|.
name|vector
argument_list|()
operator|==
name|QVector3D
argument_list|(
literal|2.0f
argument_list|,
literal|6.5f
argument_list|,
operator|-
literal|1.25f
argument_list|)
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setVector
argument_list|(
name|QVector3D
argument_list|(
operator|-
literal|2.0f
argument_list|,
operator|-
literal|6.5f
argument_list|,
literal|1.25f
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|x
argument_list|()
argument_list|,
operator|-
literal|2.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|y
argument_list|()
argument_list|,
operator|-
literal|6.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|z
argument_list|()
argument_list|,
literal|1.25f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|scalar
argument_list|()
argument_list|,
literal|6.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|.
name|vector
argument_list|()
operator|==
name|QVector3D
argument_list|(
operator|-
literal|2.0f
argument_list|,
operator|-
literal|6.5f
argument_list|,
literal|1.25f
argument_list|)
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setX
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setY
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setZ
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setScalar
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|x
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|y
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|z
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|scalar
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVector4D
name|v10
init|=
name|v9
operator|.
name|toVector4D
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v10
operator|.
name|x
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v10
operator|.
name|y
argument_list|()
argument_list|,
literal|2.5f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v10
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|89.25f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v10
operator|.
name|w
argument_list|()
argument_list|,
literal|34.0f
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test length computation for quaternions.
end_comment
begin_function
DECL|function|length_data
name|void
name|tst_QQuaternion
operator|::
name|length_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"w"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"len"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1x"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1y"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1z"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1w"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|1.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1x"
argument_list|)
operator|<<
operator|-
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1y"
argument_list|)
operator|<<
literal|0.0f
operator|<<
operator|-
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1z"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
operator|-
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1w"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
operator|-
literal|1.0f
operator|<<
literal|1.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"two"
argument_list|)
operator|<<
literal|2.0f
operator|<<
operator|-
literal|2.0f
operator|<<
literal|2.0f
operator|<<
literal|2.0f
operator|<<
name|sqrtf
argument_list|(
literal|16.0f
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|length
name|void
name|tst_QQuaternion
operator|::
name|length
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|QQuaternion
name|v
argument_list|(
name|w
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|length
argument_list|()
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|lengthSquared
argument_list|()
argument_list|,
name|x
operator|*
name|x
operator|+
name|y
operator|*
name|y
operator|+
name|z
operator|*
name|z
operator|+
name|w
operator|*
name|w
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test the unit vector conversion for quaternions.
end_comment
begin_function
DECL|function|normalized_data
name|void
name|tst_QQuaternion
operator|::
name|normalized_data
parameter_list|()
block|{
comment|// Use the same test data as the length test.
name|length_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|normalized
name|void
name|tst_QQuaternion
operator|::
name|normalized
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|QQuaternion
name|v
argument_list|(
name|w
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
decl_stmt|;
name|QQuaternion
name|u
init|=
name|v
operator|.
name|normalized
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|isNull
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|u
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|QCOMPARE
argument_list|(
name|u
operator|.
name|length
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|u
operator|.
name|x
argument_list|()
operator|*
name|len
argument_list|,
name|v
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|u
operator|.
name|y
argument_list|()
operator|*
name|len
argument_list|,
name|v
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|u
operator|.
name|z
argument_list|()
operator|*
name|len
argument_list|,
name|v
operator|.
name|z
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|u
operator|.
name|scalar
argument_list|()
operator|*
name|len
argument_list|,
name|v
operator|.
name|scalar
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test the unit vector conversion for quaternions.
end_comment
begin_function
DECL|function|normalize_data
name|void
name|tst_QQuaternion
operator|::
name|normalize_data
parameter_list|()
block|{
comment|// Use the same test data as the length test.
name|length_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|normalize
name|void
name|tst_QQuaternion
operator|::
name|normalize
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|QQuaternion
name|v
argument_list|(
name|w
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
decl_stmt|;
name|bool
name|isNull
init|=
name|v
operator|.
name|isNull
argument_list|()
decl_stmt|;
name|v
operator|.
name|normalize
argument_list|()
expr_stmt|;
if|if
condition|(
name|isNull
condition|)
name|QVERIFY
argument_list|(
name|v
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|QCOMPARE
argument_list|(
name|v
operator|.
name|length
argument_list|()
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test the comparison operators for quaternions.
end_comment
begin_function
DECL|function|compare
name|void
name|tst_QQuaternion
operator|::
name|compare
parameter_list|()
block|{
name|QQuaternion
name|v1
argument_list|(
literal|8
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|QQuaternion
name|v2
argument_list|(
literal|8
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|QQuaternion
name|v3
argument_list|(
literal|8
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|QQuaternion
name|v4
argument_list|(
literal|8
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|QQuaternion
name|v5
argument_list|(
literal|8
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|QQuaternion
name|v6
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|==
name|v2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|!=
name|v3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|!=
name|v4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|!=
name|v5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|!=
name|v6
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test addition for quaternions.
end_comment
begin_function
DECL|function|add_data
name|void
name|tst_QQuaternion
operator|::
name|add_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"w1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"w2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"w3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"xonly"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|3.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yonly"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|3.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"zonly"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|3.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"wonly"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|3.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"all"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
literal|3.0f
operator|<<
literal|8.0f
operator|<<
literal|4.0f
operator|<<
literal|5.0f
operator|<<
operator|-
literal|6.0f
operator|<<
literal|9.0f
operator|<<
literal|5.0f
operator|<<
literal|7.0f
operator|<<
operator|-
literal|3.0f
operator|<<
literal|17.0f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|add
name|void
name|tst_QQuaternion
operator|::
name|add
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w3
argument_list|)
expr_stmt|;
name|QQuaternion
name|v1
argument_list|(
name|w1
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|z1
argument_list|)
decl_stmt|;
name|QQuaternion
name|v2
argument_list|(
name|w2
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|z2
argument_list|)
decl_stmt|;
name|QQuaternion
name|v3
argument_list|(
name|w3
argument_list|,
name|x3
argument_list|,
name|y3
argument_list|,
name|z3
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|v1
operator|+
name|v2
operator|)
operator|==
name|v3
argument_list|)
expr_stmt|;
name|QQuaternion
name|v4
argument_list|(
name|v1
argument_list|)
decl_stmt|;
name|v4
operator|+=
name|v2
expr_stmt|;
name|QVERIFY
argument_list|(
name|v4
operator|==
name|v3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|x
argument_list|()
argument_list|,
name|v1
operator|.
name|x
argument_list|()
operator|+
name|v2
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|y
argument_list|()
argument_list|,
name|v1
operator|.
name|y
argument_list|()
operator|+
name|v2
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|z
argument_list|()
argument_list|,
name|v1
operator|.
name|z
argument_list|()
operator|+
name|v2
operator|.
name|z
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|scalar
argument_list|()
argument_list|,
name|v1
operator|.
name|scalar
argument_list|()
operator|+
name|v2
operator|.
name|scalar
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test subtraction for quaternions.
end_comment
begin_function
DECL|function|subtract_data
name|void
name|tst_QQuaternion
operator|::
name|subtract_data
parameter_list|()
block|{
comment|// Use the same test data as the add test.
name|add_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|subtract
name|void
name|tst_QQuaternion
operator|::
name|subtract
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w3
argument_list|)
expr_stmt|;
name|QQuaternion
name|v1
argument_list|(
name|w1
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|z1
argument_list|)
decl_stmt|;
name|QQuaternion
name|v2
argument_list|(
name|w2
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|z2
argument_list|)
decl_stmt|;
name|QQuaternion
name|v3
argument_list|(
name|w3
argument_list|,
name|x3
argument_list|,
name|y3
argument_list|,
name|z3
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|v3
operator|-
name|v1
operator|)
operator|==
name|v2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|v3
operator|-
name|v2
operator|)
operator|==
name|v1
argument_list|)
expr_stmt|;
name|QQuaternion
name|v4
argument_list|(
name|v3
argument_list|)
decl_stmt|;
name|v4
operator|-=
name|v1
expr_stmt|;
name|QVERIFY
argument_list|(
name|v4
operator|==
name|v2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|x
argument_list|()
argument_list|,
name|v3
operator|.
name|x
argument_list|()
operator|-
name|v1
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|y
argument_list|()
argument_list|,
name|v3
operator|.
name|y
argument_list|()
operator|-
name|v1
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|z
argument_list|()
argument_list|,
name|v3
operator|.
name|z
argument_list|()
operator|-
name|v1
operator|.
name|z
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|scalar
argument_list|()
argument_list|,
name|v3
operator|.
name|scalar
argument_list|()
operator|-
name|v1
operator|.
name|scalar
argument_list|()
argument_list|)
expr_stmt|;
name|QQuaternion
name|v5
argument_list|(
name|v3
argument_list|)
decl_stmt|;
name|v5
operator|-=
name|v2
expr_stmt|;
name|QVERIFY
argument_list|(
name|v5
operator|==
name|v1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v5
operator|.
name|x
argument_list|()
argument_list|,
name|v3
operator|.
name|x
argument_list|()
operator|-
name|v2
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v5
operator|.
name|y
argument_list|()
argument_list|,
name|v3
operator|.
name|y
argument_list|()
operator|-
name|v2
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v5
operator|.
name|z
argument_list|()
argument_list|,
name|v3
operator|.
name|z
argument_list|()
operator|-
name|v2
operator|.
name|z
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v5
operator|.
name|scalar
argument_list|()
argument_list|,
name|v3
operator|.
name|scalar
argument_list|()
operator|-
name|v2
operator|.
name|scalar
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test quaternion multiplication.
end_comment
begin_function
DECL|function|multiply_data
name|void
name|tst_QQuaternion
operator|::
name|multiply_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"w1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"w2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unitvec"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"complex"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
literal|3.0f
operator|<<
literal|7.0f
operator|<<
literal|4.0f
operator|<<
literal|5.0f
operator|<<
literal|6.0f
operator|<<
literal|8.0f
expr_stmt|;
for|for
control|(
name|float
name|w
init|=
operator|-
literal|1.0f
init|;
name|w
operator|<=
literal|1.0f
condition|;
name|w
operator|+=
literal|0.5f
control|)
for|for
control|(
name|float
name|x
init|=
operator|-
literal|1.0f
init|;
name|x
operator|<=
literal|1.0f
condition|;
name|x
operator|+=
literal|0.5f
control|)
for|for
control|(
name|float
name|y
init|=
operator|-
literal|1.0f
init|;
name|y
operator|<=
literal|1.0f
condition|;
name|y
operator|+=
literal|0.5f
control|)
for|for
control|(
name|float
name|z
init|=
operator|-
literal|1.0f
init|;
name|z
operator|<=
literal|1.0f
condition|;
name|z
operator|+=
literal|0.5f
control|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"exhaustive"
argument_list|)
operator|<<
name|x
operator|<<
name|y
operator|<<
name|z
operator|<<
name|w
operator|<<
name|z
operator|<<
name|w
operator|<<
name|y
operator|<<
name|x
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|multiply
name|void
name|tst_QQuaternion
operator|::
name|multiply
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w2
argument_list|)
expr_stmt|;
name|QQuaternion
name|q1
argument_list|(
name|w1
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|z1
argument_list|)
decl_stmt|;
name|QQuaternion
name|q2
argument_list|(
name|w2
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|z2
argument_list|)
decl_stmt|;
comment|// Use the simple algorithm at:
comment|// http://www.j3d.org/matrix_faq/matrfaq_latest.html#Q53
comment|// to calculate the answer we expect to get.
name|QVector3D
name|v1
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|z1
argument_list|)
decl_stmt|;
name|QVector3D
name|v2
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
name|z2
argument_list|)
decl_stmt|;
name|float
name|scalar
init|=
name|w1
operator|*
name|w2
operator|-
name|QVector3D
operator|::
name|dotProduct
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
decl_stmt|;
name|QVector3D
name|vector
init|=
name|w1
operator|*
name|v2
operator|+
name|w2
operator|*
name|v1
operator|+
name|QVector3D
operator|::
name|crossProduct
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
decl_stmt|;
name|QQuaternion
name|result
argument_list|(
name|scalar
argument_list|,
name|vector
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|q1
operator|*
name|q2
operator|)
operator|==
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test multiplication by a factor for quaternions.
end_comment
begin_function
DECL|function|multiplyFactor_data
name|void
name|tst_QQuaternion
operator|::
name|multiplyFactor_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"w1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"factor"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"w2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|100.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"xonly"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yonly"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"zonly"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"wonly"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|2.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"all"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
operator|-
literal|3.0f
operator|<<
literal|4.0f
operator|<<
literal|2.0f
operator|<<
literal|2.0f
operator|<<
literal|4.0f
operator|<<
operator|-
literal|6.0f
operator|<<
literal|8.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"allzero"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
operator|-
literal|3.0f
operator|<<
literal|4.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multiplyFactor
name|void
name|tst_QQuaternion
operator|::
name|multiplyFactor
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|factor
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w2
argument_list|)
expr_stmt|;
name|QQuaternion
name|v1
argument_list|(
name|w1
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|z1
argument_list|)
decl_stmt|;
name|QQuaternion
name|v2
argument_list|(
name|w2
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|z2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|v1
operator|*
name|factor
operator|)
operator|==
name|v2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|factor
operator|*
name|v1
operator|)
operator|==
name|v2
argument_list|)
expr_stmt|;
name|QQuaternion
name|v3
argument_list|(
name|v1
argument_list|)
decl_stmt|;
name|v3
operator|*=
name|factor
expr_stmt|;
name|QVERIFY
argument_list|(
name|v3
operator|==
name|v2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|x
argument_list|()
argument_list|,
name|v1
operator|.
name|x
argument_list|()
operator|*
name|factor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|y
argument_list|()
argument_list|,
name|v1
operator|.
name|y
argument_list|()
operator|*
name|factor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|z
argument_list|()
argument_list|,
name|v1
operator|.
name|z
argument_list|()
operator|*
name|factor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|scalar
argument_list|()
argument_list|,
name|v1
operator|.
name|scalar
argument_list|()
operator|*
name|factor
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test division by a factor for quaternions.
end_comment
begin_function
DECL|function|divide_data
name|void
name|tst_QQuaternion
operator|::
name|divide_data
parameter_list|()
block|{
comment|// Use the same test data as the multiply test.
name|multiplyFactor_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|divide
name|void
name|tst_QQuaternion
operator|::
name|divide
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|factor
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w2
argument_list|)
expr_stmt|;
name|QQuaternion
name|v1
argument_list|(
name|w1
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|z1
argument_list|)
decl_stmt|;
name|QQuaternion
name|v2
argument_list|(
name|w2
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|z2
argument_list|)
decl_stmt|;
if|if
condition|(
name|factor
operator|==
literal|0.0f
condition|)
return|return;
name|QVERIFY
argument_list|(
operator|(
name|v2
operator|/
name|factor
operator|)
operator|==
name|v1
argument_list|)
expr_stmt|;
name|QQuaternion
name|v3
argument_list|(
name|v2
argument_list|)
decl_stmt|;
name|v3
operator|/=
name|factor
expr_stmt|;
name|QVERIFY
argument_list|(
name|v3
operator|==
name|v1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|x
argument_list|()
argument_list|,
name|v2
operator|.
name|x
argument_list|()
operator|/
name|factor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|y
argument_list|()
argument_list|,
name|v2
operator|.
name|y
argument_list|()
operator|/
name|factor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|z
argument_list|()
argument_list|,
name|v2
operator|.
name|z
argument_list|()
operator|/
name|factor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|scalar
argument_list|()
argument_list|,
name|v2
operator|.
name|scalar
argument_list|()
operator|/
name|factor
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test negation for quaternions.
end_comment
begin_function
DECL|function|negate_data
name|void
name|tst_QQuaternion
operator|::
name|negate_data
parameter_list|()
block|{
comment|// Use the same test data as the add test.
name|add_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|negate
name|void
name|tst_QQuaternion
operator|::
name|negate
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w1
argument_list|)
expr_stmt|;
name|QQuaternion
name|v1
argument_list|(
name|w1
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|z1
argument_list|)
decl_stmt|;
name|QQuaternion
name|v2
argument_list|(
operator|-
name|w1
argument_list|,
operator|-
name|x1
argument_list|,
operator|-
name|y1
argument_list|,
operator|-
name|z1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|-
name|v1
operator|==
name|v2
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test quaternion conjugate calculations.
end_comment
begin_function
DECL|function|conjugate_data
name|void
name|tst_QQuaternion
operator|::
name|conjugate_data
parameter_list|()
block|{
comment|// Use the same test data as the add test.
name|add_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|conjugate
name|void
name|tst_QQuaternion
operator|::
name|conjugate
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|w1
argument_list|)
expr_stmt|;
name|QQuaternion
name|v1
argument_list|(
name|w1
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|z1
argument_list|)
decl_stmt|;
name|QQuaternion
name|v2
argument_list|(
name|w1
argument_list|,
operator|-
name|x1
argument_list|,
operator|-
name|y1
argument_list|,
operator|-
name|z1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|.
name|conjugate
argument_list|()
operator|==
name|v2
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test quaternion creation from an axis and an angle.
end_comment
begin_function
DECL|function|fromAxisAndAngle_data
name|void
name|tst_QQuaternion
operator|::
name|fromAxisAndAngle_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"angle"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"xonly"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|90.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yonly"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|0.0f
operator|<<
literal|180.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"zonly"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|270.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"complex"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
operator|-
literal|3.0f
operator|<<
literal|45.0f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromAxisAndAngle
name|void
name|tst_QQuaternion
operator|::
name|fromAxisAndAngle
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|angle
argument_list|)
expr_stmt|;
comment|// Use a straight-forward implementation of the algorithm at:
comment|// http://www.j3d.org/matrix_faq/matrfaq_latest.html#Q56
comment|// to calculate the answer we expect to get.
name|QVector3D
name|vector
init|=
name|QVector3D
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|z1
argument_list|)
operator|.
name|normalized
argument_list|()
decl_stmt|;
name|float
name|sin_a
init|=
name|sinf
argument_list|(
operator|(
name|angle
operator|*
name|M_PI
operator|/
literal|180.0
operator|)
operator|/
literal|2.0
argument_list|)
decl_stmt|;
name|float
name|cos_a
init|=
name|cosf
argument_list|(
operator|(
name|angle
operator|*
name|M_PI
operator|/
literal|180.0
operator|)
operator|/
literal|2.0
argument_list|)
decl_stmt|;
name|QQuaternion
name|result
argument_list|(
name|cos_a
argument_list|,
operator|(
name|vector
operator|.
name|x
argument_list|()
operator|*
name|sin_a
operator|)
argument_list|,
operator|(
name|vector
operator|.
name|y
argument_list|()
operator|*
name|sin_a
operator|)
argument_list|,
operator|(
name|vector
operator|.
name|z
argument_list|()
operator|*
name|sin_a
operator|)
argument_list|)
decl_stmt|;
name|result
operator|=
name|result
operator|.
name|normalized
argument_list|()
expr_stmt|;
name|QQuaternion
name|answer
init|=
name|QQuaternion
operator|::
name|fromAxisAndAngle
argument_list|(
name|QVector3D
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|z1
argument_list|)
argument_list|,
name|angle
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|answer
operator|.
name|x
argument_list|()
argument_list|,
name|result
operator|.
name|x
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|answer
operator|.
name|y
argument_list|()
argument_list|,
name|result
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|answer
operator|.
name|z
argument_list|()
argument_list|,
name|result
operator|.
name|z
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|answer
operator|.
name|scalar
argument_list|()
argument_list|,
name|result
operator|.
name|scalar
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|answer
operator|=
name|QQuaternion
operator|::
name|fromAxisAndAngle
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|z1
argument_list|,
name|angle
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|answer
operator|.
name|x
argument_list|()
argument_list|,
name|result
operator|.
name|x
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|answer
operator|.
name|y
argument_list|()
argument_list|,
name|result
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|answer
operator|.
name|z
argument_list|()
argument_list|,
name|result
operator|.
name|z
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|answer
operator|.
name|scalar
argument_list|()
argument_list|,
name|result
operator|.
name|scalar
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test spherical interpolation of quaternions.
end_comment
begin_function
DECL|function|slerp_data
name|void
name|tst_QQuaternion
operator|::
name|slerp_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"angle1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"angle2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"t"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"x3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"y3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"z3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"angle3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"first"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
operator|-
literal|3.0f
operator|<<
literal|90.0f
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
operator|-
literal|3.0f
operator|<<
literal|180.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
operator|-
literal|3.0f
operator|<<
literal|90.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"first2"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
operator|-
literal|3.0f
operator|<<
literal|90.0f
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
operator|-
literal|3.0f
operator|<<
literal|180.0f
operator|<<
operator|-
literal|0.5f
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
operator|-
literal|3.0f
operator|<<
literal|90.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"second"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
operator|-
literal|3.0f
operator|<<
literal|90.0f
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
operator|-
literal|3.0f
operator|<<
literal|180.0f
operator|<<
literal|1.0f
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
operator|-
literal|3.0f
operator|<<
literal|180.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"second2"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
operator|-
literal|3.0f
operator|<<
literal|90.0f
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
operator|-
literal|3.0f
operator|<<
literal|180.0f
operator|<<
literal|1.5f
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
operator|-
literal|3.0f
operator|<<
literal|180.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"middle"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
operator|-
literal|3.0f
operator|<<
literal|90.0f
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
operator|-
literal|3.0f
operator|<<
literal|180.0f
operator|<<
literal|0.5f
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
operator|-
literal|3.0f
operator|<<
literal|135.0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"wide angle"
argument_list|)
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
operator|-
literal|3.0f
operator|<<
literal|0.0f
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
operator|-
literal|3.0f
operator|<<
literal|270.0f
operator|<<
literal|0.5f
operator|<<
literal|1.0f
operator|<<
literal|2.0f
operator|<<
operator|-
literal|3.0f
operator|<<
operator|-
literal|45.0f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|slerp
name|void
name|tst_QQuaternion
operator|::
name|slerp
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|angle1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|angle2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|angle3
argument_list|)
expr_stmt|;
name|QQuaternion
name|q1
init|=
name|QQuaternion
operator|::
name|fromAxisAndAngle
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|z1
argument_list|,
name|angle1
argument_list|)
decl_stmt|;
name|QQuaternion
name|q2
init|=
name|QQuaternion
operator|::
name|fromAxisAndAngle
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
name|z2
argument_list|,
name|angle2
argument_list|)
decl_stmt|;
name|QQuaternion
name|q3
init|=
name|QQuaternion
operator|::
name|fromAxisAndAngle
argument_list|(
name|x3
argument_list|,
name|y3
argument_list|,
name|z3
argument_list|,
name|angle3
argument_list|)
decl_stmt|;
name|QQuaternion
name|result
init|=
name|QQuaternion
operator|::
name|slerp
argument_list|(
name|q1
argument_list|,
name|q2
argument_list|,
name|t
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|result
operator|.
name|x
argument_list|()
argument_list|,
name|q3
operator|.
name|x
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|result
operator|.
name|y
argument_list|()
argument_list|,
name|q3
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|result
operator|.
name|z
argument_list|()
argument_list|,
name|q3
operator|.
name|z
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|result
operator|.
name|scalar
argument_list|()
argument_list|,
name|q3
operator|.
name|scalar
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test normalized linear interpolation of quaternions.
end_comment
begin_function
DECL|function|nlerp_data
name|void
name|tst_QQuaternion
operator|::
name|nlerp_data
parameter_list|()
block|{
name|slerp_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nlerp
name|void
name|tst_QQuaternion
operator|::
name|nlerp
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|angle1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|z2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|angle2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|QQuaternion
name|q1
init|=
name|QQuaternion
operator|::
name|fromAxisAndAngle
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|z1
argument_list|,
name|angle1
argument_list|)
decl_stmt|;
name|QQuaternion
name|q2
init|=
name|QQuaternion
operator|::
name|fromAxisAndAngle
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
name|z2
argument_list|,
name|angle2
argument_list|)
decl_stmt|;
name|QQuaternion
name|result
init|=
name|QQuaternion
operator|::
name|nlerp
argument_list|(
name|q1
argument_list|,
name|q2
argument_list|,
name|t
argument_list|)
decl_stmt|;
name|float
name|resultx
decl_stmt|,
name|resulty
decl_stmt|,
name|resultz
decl_stmt|,
name|resultscalar
decl_stmt|;
if|if
condition|(
name|t
operator|<=
literal|0.0f
condition|)
block|{
name|resultx
operator|=
name|q1
operator|.
name|x
argument_list|()
expr_stmt|;
name|resulty
operator|=
name|q1
operator|.
name|y
argument_list|()
expr_stmt|;
name|resultz
operator|=
name|q1
operator|.
name|z
argument_list|()
expr_stmt|;
name|resultscalar
operator|=
name|q1
operator|.
name|scalar
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|t
operator|>=
literal|1.0f
condition|)
block|{
name|resultx
operator|=
name|q2
operator|.
name|x
argument_list|()
expr_stmt|;
name|resulty
operator|=
name|q2
operator|.
name|y
argument_list|()
expr_stmt|;
name|resultz
operator|=
name|q2
operator|.
name|z
argument_list|()
expr_stmt|;
name|resultscalar
operator|=
name|q2
operator|.
name|scalar
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qAbs
argument_list|(
name|angle1
operator|-
name|angle2
argument_list|)
operator|<=
literal|180.f
condition|)
block|{
name|resultx
operator|=
name|q1
operator|.
name|x
argument_list|()
operator|*
operator|(
literal|1
operator|-
name|t
operator|)
operator|+
name|q2
operator|.
name|x
argument_list|()
operator|*
name|t
expr_stmt|;
name|resulty
operator|=
name|q1
operator|.
name|y
argument_list|()
operator|*
operator|(
literal|1
operator|-
name|t
operator|)
operator|+
name|q2
operator|.
name|y
argument_list|()
operator|*
name|t
expr_stmt|;
name|resultz
operator|=
name|q1
operator|.
name|z
argument_list|()
operator|*
operator|(
literal|1
operator|-
name|t
operator|)
operator|+
name|q2
operator|.
name|z
argument_list|()
operator|*
name|t
expr_stmt|;
name|resultscalar
operator|=
name|q1
operator|.
name|scalar
argument_list|()
operator|*
operator|(
literal|1
operator|-
name|t
operator|)
operator|+
name|q2
operator|.
name|scalar
argument_list|()
operator|*
name|t
expr_stmt|;
block|}
else|else
block|{
comment|// Angle greater than 180 degrees: negate q2.
name|resultx
operator|=
name|q1
operator|.
name|x
argument_list|()
operator|*
operator|(
literal|1
operator|-
name|t
operator|)
operator|-
name|q2
operator|.
name|x
argument_list|()
operator|*
name|t
expr_stmt|;
name|resulty
operator|=
name|q1
operator|.
name|y
argument_list|()
operator|*
operator|(
literal|1
operator|-
name|t
operator|)
operator|-
name|q2
operator|.
name|y
argument_list|()
operator|*
name|t
expr_stmt|;
name|resultz
operator|=
name|q1
operator|.
name|z
argument_list|()
operator|*
operator|(
literal|1
operator|-
name|t
operator|)
operator|-
name|q2
operator|.
name|z
argument_list|()
operator|*
name|t
expr_stmt|;
name|resultscalar
operator|=
name|q1
operator|.
name|scalar
argument_list|()
operator|*
operator|(
literal|1
operator|-
name|t
operator|)
operator|-
name|q2
operator|.
name|scalar
argument_list|()
operator|*
name|t
expr_stmt|;
block|}
name|QQuaternion
name|q3
init|=
name|QQuaternion
argument_list|(
name|resultscalar
argument_list|,
name|resultx
argument_list|,
name|resulty
argument_list|,
name|resultz
argument_list|)
operator|.
name|normalized
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|result
operator|.
name|x
argument_list|()
argument_list|,
name|q3
operator|.
name|x
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|result
operator|.
name|y
argument_list|()
argument_list|,
name|q3
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|result
operator|.
name|z
argument_list|()
argument_list|,
name|q3
operator|.
name|z
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|result
operator|.
name|scalar
argument_list|()
argument_list|,
name|q3
operator|.
name|scalar
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|tst_QQuaternionProperties
class|class
name|tst_QQuaternionProperties
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
name|Q_PROPERTY
parameter_list|(
name|QQuaternion
name|quaternion
name|READ
name|quaternion
name|WRITE
name|setQuaternion
parameter_list|)
specifier|public
private|:
DECL|function|tst_QQuaternionProperties
name|tst_QQuaternionProperties
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|{}
DECL|function|quaternion
name|QQuaternion
name|quaternion
parameter_list|()
specifier|const
block|{
return|return
name|q
return|;
block|}
DECL|function|setQuaternion
name|void
name|setQuaternion
parameter_list|(
specifier|const
name|QQuaternion
modifier|&
name|value
parameter_list|)
block|{
name|q
operator|=
name|value
expr_stmt|;
block|}
private|private:
DECL|member|q
name|QQuaternion
name|q
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|// Test getting and setting quaternion properties via the metaobject system.
end_comment
begin_function
DECL|function|properties
name|void
name|tst_QQuaternion
operator|::
name|properties
parameter_list|()
block|{
name|tst_QQuaternionProperties
name|obj
decl_stmt|;
name|obj
operator|.
name|setQuaternion
argument_list|(
name|QQuaternion
argument_list|(
literal|6.0f
argument_list|,
literal|7.0f
argument_list|,
literal|8.0f
argument_list|,
literal|9.0f
argument_list|)
argument_list|)
expr_stmt|;
name|QQuaternion
name|q
init|=
name|qvariant_cast
argument_list|<
name|QQuaternion
argument_list|>
argument_list|(
name|obj
operator|.
name|property
argument_list|(
literal|"quaternion"
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|scalar
argument_list|()
argument_list|,
literal|6.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|x
argument_list|()
argument_list|,
literal|7.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|y
argument_list|()
argument_list|,
literal|8.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|z
argument_list|()
argument_list|,
literal|9.0f
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setProperty
argument_list|(
literal|"quaternion"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QQuaternion
argument_list|(
operator|-
literal|6.0f
argument_list|,
operator|-
literal|7.0f
argument_list|,
operator|-
literal|8.0f
argument_list|,
operator|-
literal|9.0f
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|=
name|qvariant_cast
argument_list|<
name|QQuaternion
argument_list|>
argument_list|(
name|obj
operator|.
name|property
argument_list|(
literal|"quaternion"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|scalar
argument_list|()
argument_list|,
operator|-
literal|6.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|x
argument_list|()
argument_list|,
operator|-
literal|7.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|y
argument_list|()
argument_list|,
operator|-
literal|8.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|z
argument_list|()
argument_list|,
operator|-
literal|9.0f
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|metaTypes
name|void
name|tst_QQuaternion
operator|::
name|metaTypes
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
literal|"QQuaternion"
argument_list|)
operator|==
name|QMetaType
operator|::
name|QQuaternion
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QByteArray
argument_list|(
name|QMetaType
operator|::
name|typeName
argument_list|(
name|QMetaType
operator|::
name|QQuaternion
argument_list|)
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"QQuaternion"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QMetaType
operator|::
name|isRegistered
argument_list|(
name|QMetaType
operator|::
name|QQuaternion
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qMetaTypeId
argument_list|<
name|QQuaternion
argument_list|>
argument_list|()
operator|==
name|QMetaType
operator|::
name|QQuaternion
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QQuaternion
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qquaternion.moc"
end_include
end_unit
