begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QBuffer>
end_include
begin_include
include|#
directive|include
file|<QByteArray>
end_include
begin_include
include|#
directive|include
file|<QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_include
include|#
directive|include
file|<QList>
end_include
begin_include
include|#
directive|include
file|<QRegExp>
end_include
begin_include
include|#
directive|include
file|<QTextStream>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtXml>
end_include
begin_include
include|#
directive|include
file|<QVariant>
end_include
begin_comment
comment|//TESTED_CLASS=
end_comment
begin_comment
comment|//TESTED_FILES=
end_comment
begin_macro
name|QT_FORWARD_DECLARE_CLASS
argument_list|(
argument|QDomDocument
argument_list|)
end_macro
begin_macro
name|QT_FORWARD_DECLARE_CLASS
argument_list|(
argument|QDomNode
argument_list|)
end_macro
begin_class
DECL|class|tst_QDom
class|class
name|tst_QDom
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|namespacedAttributes
parameter_list|()
specifier|const
function_decl|;
name|void
name|setContent_data
parameter_list|()
function_decl|;
name|void
name|setContent
parameter_list|()
function_decl|;
name|void
name|toString_01_data
parameter_list|()
function_decl|;
name|void
name|toString_01
parameter_list|()
function_decl|;
name|void
name|toString_02_data
parameter_list|()
function_decl|;
name|void
name|toString_02
parameter_list|()
function_decl|;
name|void
name|hasAttributes_data
parameter_list|()
function_decl|;
name|void
name|hasAttributes
parameter_list|()
function_decl|;
name|void
name|save_data
parameter_list|()
function_decl|;
name|void
name|save
parameter_list|()
function_decl|;
name|void
name|saveWithSerialization
parameter_list|()
specifier|const
function_decl|;
name|void
name|saveWithSerialization_data
parameter_list|()
specifier|const
function_decl|;
name|void
name|cloneNode_data
parameter_list|()
function_decl|;
name|void
name|cloneNode
parameter_list|()
function_decl|;
name|void
name|ownerDocument_data
parameter_list|()
function_decl|;
name|void
name|ownerDocument
parameter_list|()
function_decl|;
name|void
name|ownerDocumentTask27424_data
parameter_list|()
function_decl|;
name|void
name|ownerDocumentTask27424
parameter_list|()
function_decl|;
name|void
name|parentNode_data
parameter_list|()
function_decl|;
name|void
name|parentNode
parameter_list|()
function_decl|;
name|void
name|documentCreationTask27424_data
parameter_list|()
function_decl|;
name|void
name|documentCreationTask27424
parameter_list|()
function_decl|;
name|void
name|browseElements
parameter_list|()
function_decl|;
name|void
name|ownerElementTask45192_data
parameter_list|()
function_decl|;
name|void
name|ownerElementTask45192
parameter_list|()
function_decl|;
name|void
name|domNodeMapAndList
parameter_list|()
function_decl|;
name|void
name|nullDocument
parameter_list|()
function_decl|;
name|void
name|invalidName_data
parameter_list|()
function_decl|;
name|void
name|invalidName
parameter_list|()
function_decl|;
name|void
name|invalidQualifiedName_data
parameter_list|()
function_decl|;
name|void
name|invalidQualifiedName
parameter_list|()
function_decl|;
name|void
name|invalidCharData_data
parameter_list|()
function_decl|;
name|void
name|invalidCharData
parameter_list|()
function_decl|;
name|void
name|roundTripAttributes
parameter_list|()
specifier|const
function_decl|;
name|void
name|normalizeEndOfLine
parameter_list|()
specifier|const
function_decl|;
name|void
name|normalizeAttributes
parameter_list|()
specifier|const
function_decl|;
name|void
name|serializeWeirdEOL
parameter_list|()
specifier|const
function_decl|;
name|void
name|reparentAttribute
parameter_list|()
specifier|const
function_decl|;
name|void
name|serializeNamespaces
parameter_list|()
specifier|const
function_decl|;
name|void
name|flagInvalidNamespaces
parameter_list|()
specifier|const
function_decl|;
name|void
name|flagUndeclaredNamespace
parameter_list|()
specifier|const
function_decl|;
name|void
name|indentComments
parameter_list|()
specifier|const
function_decl|;
name|void
name|checkLiveness
parameter_list|()
specifier|const
function_decl|;
name|void
name|reportDuplicateAttributes
parameter_list|()
specifier|const
function_decl|;
name|void
name|appendChildFromToDocument
parameter_list|()
specifier|const
function_decl|;
name|void
name|iterateCDATA
parameter_list|()
specifier|const
function_decl|;
name|void
name|appendDocumentNode
parameter_list|()
specifier|const
function_decl|;
name|void
name|germanUmlautToByteArray
parameter_list|()
specifier|const
function_decl|;
name|void
name|germanUmlautToFile
parameter_list|()
specifier|const
function_decl|;
name|void
name|setInvalidDataPolicy
parameter_list|()
specifier|const
function_decl|;
name|void
name|crashInSetContent
parameter_list|()
specifier|const
function_decl|;
name|void
name|doubleNamespaceDeclarations
parameter_list|()
specifier|const
function_decl|;
name|void
name|setContentQXmlReaderOverload
parameter_list|()
specifier|const
function_decl|;
name|void
name|toStringWithoutNewlines
parameter_list|()
specifier|const
function_decl|;
name|void
name|checkIntOverflow
parameter_list|()
specifier|const
function_decl|;
name|void
name|setContentWhitespace
parameter_list|()
specifier|const
function_decl|;
name|void
name|setContentWhitespace_data
parameter_list|()
specifier|const
function_decl|;
name|void
name|taskQTBUG4595_dontAssertWhenDocumentSpecifiesUnknownEncoding
parameter_list|()
specifier|const
function_decl|;
name|void
name|cloneDTD_QTBUG8398
parameter_list|()
specifier|const
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
specifier|const
function_decl|;
private|private:
specifier|static
name|QDomDocument
name|generateRequest
parameter_list|()
function_decl|;
specifier|static
name|int
name|hasAttributesHelper
parameter_list|(
specifier|const
name|QDomNode
modifier|&
name|node
parameter_list|)
function_decl|;
specifier|static
name|bool
name|compareDocuments
parameter_list|(
specifier|const
name|QDomDocument
modifier|&
name|doc1
parameter_list|,
specifier|const
name|QDomDocument
modifier|&
name|doc2
parameter_list|)
function_decl|;
specifier|static
name|bool
name|compareNodes
parameter_list|(
specifier|const
name|QDomNode
modifier|&
name|node1
parameter_list|,
specifier|const
name|QDomNode
modifier|&
name|node2
parameter_list|,
name|bool
name|deep
parameter_list|)
function_decl|;
specifier|static
name|QDomNode
name|findDomNode
parameter_list|(
specifier|const
name|QDomDocument
modifier|&
name|doc
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QVariant
argument_list|>
modifier|&
name|pathToNode
parameter_list|)
function_decl|;
specifier|static
name|QString
name|onNullWarning
parameter_list|(
specifier|const
name|char
modifier|*
specifier|const
name|functionName
parameter_list|)
function_decl|;
specifier|static
name|bool
name|isDeepEqual
parameter_list|(
specifier|const
name|QDomNode
modifier|&
name|n1
parameter_list|,
specifier|const
name|QDomNode
modifier|&
name|n2
parameter_list|)
function_decl|;
specifier|static
name|bool
name|isFakeXMLDeclaration
parameter_list|(
specifier|const
name|QDomNode
modifier|&
name|node
parameter_list|)
function_decl|;
DECL|member|m_excludedCodecs
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|m_excludedCodecs
decl_stmt|;
block|}
class|;
end_class
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<QVariant>
argument_list|)
end_macro
begin_function
DECL|function|setContent_data
name|void
name|tst_QDom
operator|::
name|setContent_data
parameter_list|()
block|{
specifier|const
name|QString
name|doc01
argument_list|(
literal|"<!DOCTYPE a1 [<!ENTITY blubber 'and'> ]>\n"
literal|"<a1>\n"
literal|"<b1>\n"
literal|"<c1>foo</c1>\n"
literal|"<c2>bar</c2>\n"
literal|"<c3>foo&amp; bar</c3>\n"
literal|"<c4>foo&blubber; bar</c4>\n"
literal|"</b1>\n"
literal|"<b2></b2>\n"
literal|"<b3>\n"
literal|"<c1/>\n"
literal|"</b3>\n"
literal|"</a1>\n"
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"doc"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"featuresTrue"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"featuresFalse"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"res"
argument_list|)
expr_stmt|;
comment|/*    QTest::newRow( "01" )<< doc01<< QStringList()<< QString("http://trolltech.com/xml/features/report-whitespace-only-CharData").split(' ')<< QString("<!DOCTYPE a1>\n"                                    "<a1>\n"                                    "<b1>\n"                                    "<c1>foo</c1>\n"                                    "<c2>bar</c2>\n"                                    "<c3>foo&amp; bar</c3>\n"                                    "<c4>foo and bar</c4>\n"                                    "</b1>\n"                                    "<b2/>\n"                                    "<b3>\n"                                    "<c1/>\n"                                    "</b3>\n"                                    "</a1>\n");      QTest::newRow( "02" )<< doc01<< QString("http://trolltech.com/xml/features/report-whitespace-only-CharData").split(' ')<< QStringList()<< QString("<!DOCTYPE a1>\n"                                    "<a1>\n"                                    "<b1>\n"                                    "<c1>foo</c1>\n"                                    "<c2>bar</c2>\n"                                    "<c3>foo&amp; bar</c3>\n"                                    "<c4>foo and bar</c4>\n"                                    "</b1>\n"                                    "<b2></b2>\n"                                    "<b3>\n"                                    "<c1/>\n"                                    "</b3>\n"                                    "</a1>\n");      QTest::newRow( "03" )<< doc01<< QString("http://trolltech.com/xml/features/report-start-end-entity").split(' ')<< QString("http://trolltech.com/xml/features/report-whitespace-only-CharData").split(' ')<< QString("<!DOCTYPE a1 [\n"                                    "<!ENTITY blubber \"and\">\n"                                    "]>\n"                                    "<a1>\n"                                    "<b1>\n"                                    "<c1>foo</c1>\n"                                    "<c2>bar</c2>\n"                                    "<c3>foo&amp; bar</c3>\n"                                    "<c4>foo&blubber; bar</c4>\n"                                    "</b1>\n"                                    "<b2/>\n"                                    "<b3>\n"                                    "<c1/>\n"                                    "</b3>\n"                                    "</a1>\n");      QTest::newRow( "04" )<< doc01<< QString("http://trolltech.com/xml/features/report-whitespace-only-CharData http://trolltech.com/xml/features/report-start-end-entity").split(' ')<< QStringList()<< QString("<!DOCTYPE a1 [\n"                                    "<!ENTITY blubber \"and\">\n"                                    "]>\n"                                    "<a1>\n"                                    "<b1>\n"                                    "<c1>foo</c1>\n"                                    "<c2>bar</c2>\n"                                    "<c3>foo&amp; bar</c3>\n"                                    "<c4>foo&blubber; bar</c4>\n"                                    "</b1>\n"                                    "<b2></b2>\n"                                    "<b3>\n"                                    "<c1/>\n"                                    "</b3>\n"                                    "</a1>\n");    */
name|QTest
operator|::
name|newRow
argument_list|(
literal|"05"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<message>\n"
literal|"<body>&lt;b&gt;foo&lt;/b&gt;>]]&gt;</body>\n"
literal|"</message>\n"
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"<message>\n"
literal|"<body>&lt;b>foo&lt;/b>>]]&gt;</body>\n"
literal|"</message>\n"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setContent
name|void
name|tst_QDom
operator|::
name|setContent
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|QXmlInputSource
name|source
decl_stmt|;
name|source
operator|.
name|setData
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|featuresTrue
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|featuresFalse
argument_list|)
expr_stmt|;
name|QXmlSimpleReader
name|reader
decl_stmt|;
name|QStringList
operator|::
name|Iterator
name|it
decl_stmt|;
for|for
control|(
name|it
operator|=
name|featuresTrue
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|featuresTrue
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QVERIFY
argument_list|(
name|reader
operator|.
name|hasFeature
argument_list|(
operator|*
name|it
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setFeature
argument_list|(
operator|*
name|it
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|it
operator|=
name|featuresFalse
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|featuresFalse
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QVERIFY
argument_list|(
name|reader
operator|.
name|hasFeature
argument_list|(
operator|*
name|it
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setFeature
argument_list|(
operator|*
name|it
argument_list|,
name|FALSE
argument_list|)
expr_stmt|;
block|}
name|QDomDocument
name|domDoc
decl_stmt|;
name|QVERIFY
argument_list|(
name|domDoc
operator|.
name|setContent
argument_list|(
operator|&
name|source
argument_list|,
operator|&
name|reader
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|eRes
decl_stmt|;
name|QTextStream
name|ts
argument_list|(
operator|&
name|eRes
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|domDoc
operator|.
name|save
argument_list|(
name|ts
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|eRes
argument_list|,
literal|"res"
argument_list|)
expr_stmt|;
comment|// make sure that if we parse our output again, we get the same document
name|QDomDocument
name|domDoc1
decl_stmt|;
name|QDomDocument
name|domDoc2
decl_stmt|;
name|QVERIFY
argument_list|(
name|domDoc1
operator|.
name|setContent
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|domDoc2
operator|.
name|setContent
argument_list|(
name|eRes
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|compareDocuments
argument_list|(
name|domDoc1
argument_list|,
name|domDoc2
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toString_01_data
name|void
name|tst_QDom
operator|::
name|toString_01_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"01"
argument_list|)
operator|<<
name|QString
argument_list|(
name|SRCDIR
literal|"testdata/toString_01/doc01.xml"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"02"
argument_list|)
operator|<<
name|QString
argument_list|(
name|SRCDIR
literal|"testdata/toString_01/doc02.xml"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"03"
argument_list|)
operator|<<
name|QString
argument_list|(
name|SRCDIR
literal|"testdata/toString_01/doc03.xml"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"04"
argument_list|)
operator|<<
name|QString
argument_list|(
name|SRCDIR
literal|"testdata/toString_01/doc04.xml"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"05"
argument_list|)
operator|<<
name|QString
argument_list|(
name|SRCDIR
literal|"testdata/toString_01/doc05.xml"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"euc-jp"
argument_list|)
operator|<<
name|QString
argument_list|(
name|SRCDIR
literal|"testdata/toString_01/doc_euc-jp.xml"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"iso-2022-jp"
argument_list|)
operator|<<
name|QString
argument_list|(
name|SRCDIR
literal|"testdata/toString_01/doc_iso-2022-jp.xml"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"little-endian"
argument_list|)
operator|<<
name|QString
argument_list|(
name|SRCDIR
literal|"testdata/toString_01/doc_little-endian.xml"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf-16"
argument_list|)
operator|<<
name|QString
argument_list|(
name|SRCDIR
literal|"testdata/toString_01/doc_utf-16.xml"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf-8"
argument_list|)
operator|<<
name|QString
argument_list|(
name|SRCDIR
literal|"testdata/toString_01/doc_utf-8.xml"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \internal    This function tests that the QDomDocument::toString() function results in the   same XML document. The meaning of "same" in this context means that the   "information" in the resulting XML file is the same as in the original, i.e.   we are not intrested in different formatting, etc.    To achieve this, the XML document of the toString() function is parsed again   and the two QDomDocuments are compared. */
end_comment
begin_function
DECL|function|toString_01
name|void
name|tst_QDom
operator|::
name|toString_01
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|QFile
name|f
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Failed to open file %1, file error: %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|fileName
argument_list|)
operator|.
name|arg
argument_list|(
name|f
operator|.
name|error
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QDomDocument
name|doc
decl_stmt|;
name|QString
name|errorMsg
decl_stmt|;
name|int
name|errorLine
decl_stmt|;
name|int
name|errorCol
decl_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|.
name|setContent
argument_list|(
operator|&
name|f
argument_list|,
operator|&
name|errorMsg
argument_list|,
operator|&
name|errorLine
argument_list|,
operator|&
name|errorCol
argument_list|)
argument_list|)
expr_stmt|;
comment|/*,         QString("QDomDocument::setContent() failed: %1 in line %2, column %3")                         .arg( errorMsg ).arg( errorLine ).arg( errorCol )); */
comment|// test toString()'s invariant with different indenting depths
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|QString
name|toStr
init|=
name|doc
operator|.
name|toString
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QDomDocument
name|res
decl_stmt|;
name|QVERIFY
argument_list|(
name|res
operator|.
name|setContent
argument_list|(
name|toStr
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|compareDocuments
argument_list|(
name|doc
argument_list|,
name|res
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|toString_02_data
name|void
name|tst_QDom
operator|::
name|toString_02_data
parameter_list|()
block|{
name|save_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*   Tests the new QDomDocument::toString(int) overload (basically the same test   as save()). */
end_comment
begin_function
DECL|function|toString_02
name|void
name|tst_QDom
operator|::
name|toString_02
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|indent
argument_list|)
expr_stmt|;
name|QDomDocument
name|domDoc
decl_stmt|;
name|QVERIFY
argument_list|(
name|domDoc
operator|.
name|setContent
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|domDoc
operator|.
name|toString
argument_list|(
name|indent
argument_list|)
argument_list|,
literal|"res"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hasAttributes_data
name|void
name|tst_QDom
operator|::
name|hasAttributes_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"visitedNodes"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"xmlDoc"
argument_list|)
expr_stmt|;
name|QByteArray
name|doc1
argument_list|(
literal|"<top>Make a<blubb>stupid</blubb>, useless test sentence.</top>"
argument_list|)
decl_stmt|;
name|QByteArray
name|doc2
argument_list|(
literal|"<top a=\"a\">Make a<blubb a=\"a\">stupid</blubb>, useless test sentence.</top>"
argument_list|)
decl_stmt|;
name|QByteArray
name|doc3
argument_list|(
literal|"<!-- just a useless comment -->\n"
literal|"<?pi foo bar?>\n"
literal|"<foo>\n"
literal|"<bar fnord=\"snafu\" hmpf=\"grmpf\">\n"
literal|"<foobar/>\n"
literal|"</bar>\n"
literal|"<bar>blubber</bar>\n"
literal|"more text, pretty unintresting, though\n"
literal|"<hmpfl blubber=\"something\" />\n"
literal|"<![CDATA[ foo bar @!<>] ]]>\n"
literal|"</foo>\n"
literal|"<!-- just a useless comment -->\n"
literal|"<?pi foo bar?>\n"
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"01"
argument_list|)
operator|<<
literal|6
operator|<<
name|doc1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"02"
argument_list|)
operator|<<
literal|6
operator|<<
name|doc2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"03"
argument_list|)
operator|<<
literal|13
operator|<<
name|doc3
expr_stmt|;
block|}
end_function
begin_comment
comment|/*   This function tests that QDomNode::hasAttributes() returns TRUE if and only   if the node has attributes (i.e. QDomNode::attributes() returns a list with   attributes in it). */
end_comment
begin_function
DECL|function|hasAttributes
name|void
name|tst_QDom
operator|::
name|hasAttributes
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|xmlDoc
argument_list|)
expr_stmt|;
name|QDomDocument
name|doc
decl_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|.
name|setContent
argument_list|(
name|xmlDoc
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|visitedNodes
init|=
name|hasAttributesHelper
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|QTEST
argument_list|(
name|visitedNodes
argument_list|,
literal|"visitedNodes"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hasAttributesHelper
name|int
name|tst_QDom
operator|::
name|hasAttributesHelper
parameter_list|(
specifier|const
name|QDomNode
modifier|&
name|node
parameter_list|)
block|{
name|int
name|visitedNodes
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|hasAttributes
argument_list|()
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|attributes
argument_list|()
operator|.
name|count
argument_list|()
operator|==
literal|0
condition|)
return|return
operator|-
literal|1
return|;
comment|//        QVERIFY( node.attributes().count()> 0 );
block|}
else|else
block|{
if|if
condition|(
name|node
operator|.
name|attributes
argument_list|()
operator|.
name|count
argument_list|()
operator|!=
literal|0
condition|)
return|return
operator|-
literal|1
return|;
comment|//        QVERIFY( node.attributes().count() == 0 );
block|}
name|QDomNodeList
name|children
init|=
name|node
operator|.
name|childNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|j
init|=
name|hasAttributesHelper
argument_list|(
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|j
operator|<
literal|0
condition|)
return|return
operator|-
literal|1
return|;
name|visitedNodes
operator|+=
name|j
expr_stmt|;
block|}
return|return
name|visitedNodes
return|;
block|}
end_function
begin_function
DECL|function|save_data
name|void
name|tst_QDom
operator|::
name|save_data
parameter_list|()
block|{
specifier|const
name|QString
name|doc01
argument_list|(
literal|"<a1>\n"
literal|"<b1>\n"
literal|"<c1>\n"
literal|"<d1/>\n"
literal|"</c1>\n"
literal|"<c2/>\n"
literal|"</b1>\n"
literal|"<b2/>\n"
literal|"<b3>\n"
literal|"<c1/>\n"
literal|"</b3>\n"
literal|"</a1>\n"
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"doc"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"indent"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"res"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"01"
argument_list|)
operator|<<
name|doc01
operator|<<
literal|0
operator|<<
name|QString
argument_list|(
name|doc01
argument_list|)
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|" "
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"02"
argument_list|)
operator|<<
name|doc01
operator|<<
literal|1
operator|<<
name|doc01
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"03"
argument_list|)
operator|<<
name|doc01
operator|<<
literal|2
operator|<<
name|QString
argument_list|(
name|doc01
argument_list|)
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|" "
argument_list|)
argument_list|,
literal|"  "
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"04"
argument_list|)
operator|<<
name|doc01
operator|<<
literal|10
operator|<<
name|QString
argument_list|(
name|doc01
argument_list|)
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|" "
argument_list|)
argument_list|,
literal|"          "
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|save
name|void
name|tst_QDom
operator|::
name|save
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|indent
argument_list|)
expr_stmt|;
name|QDomDocument
name|domDoc
decl_stmt|;
name|QVERIFY
argument_list|(
name|domDoc
operator|.
name|setContent
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|eRes
decl_stmt|;
name|QTextStream
name|ts
argument_list|(
operator|&
name|eRes
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|domDoc
operator|.
name|save
argument_list|(
name|ts
argument_list|,
name|indent
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|eRes
argument_list|,
literal|"res"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initTestCase
name|void
name|tst_QDom
operator|::
name|initTestCase
parameter_list|()
block|{
name|QFile
name|file
argument_list|(
name|SRCDIR
literal|"testdata/excludedCodecs.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|codecName
decl_stmt|;
name|m_excludedCodecs
operator|=
name|file
operator|.
name|readAll
argument_list|()
operator|.
name|split
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|saveWithSerialization
name|void
name|tst_QDom
operator|::
name|saveWithSerialization
parameter_list|()
specifier|const
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|QFile
name|f
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QDomDocument
name|doc
decl_stmt|;
comment|// Read the document
name|QVERIFY
argument_list|(
name|doc
operator|.
name|setContent
argument_list|(
operator|&
name|f
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|codecs
argument_list|(
name|QTextCodec
operator|::
name|availableCodecs
argument_list|()
argument_list|)
decl_stmt|;
name|QByteArray
name|codecName
decl_stmt|;
foreach|foreach
control|(
name|codecName
init|,
name|codecs
control|)
block|{
comment|/* Avoid codecs that can't handle the files we have. */
if|if
condition|(
name|m_excludedCodecs
operator|.
name|contains
argument_list|(
name|codecName
operator|.
name|toLower
argument_list|()
argument_list|)
condition|)
continue|continue;
comment|/* Write out doc in the specified codec. */
name|QByteArray
name|storage
decl_stmt|;
name|QBuffer
name|writeDevice
argument_list|(
operator|&
name|storage
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|writeDevice
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|s
argument_list|(
operator|&
name|writeDevice
argument_list|)
decl_stmt|;
name|QTextCodec
modifier|*
name|codec
init|=
name|QTextCodec
operator|::
name|codecForName
argument_list|(
name|codecName
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|codec
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Failed to load codec %1, even though it was in QTextCodec::availableCodecs()"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|codecName
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|setCodec
argument_list|(
name|codec
argument_list|)
expr_stmt|;
name|doc
operator|.
name|save
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|QDomNode
operator|::
name|EncodingFromTextStream
argument_list|)
expr_stmt|;
name|s
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writeDevice
operator|.
name|close
argument_list|()
expr_stmt|;
name|QBuffer
name|readDevice
argument_list|(
operator|&
name|storage
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|readDevice
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QDomDocument
name|result
decl_stmt|;
name|QString
name|msg
decl_stmt|;
name|int
name|line
init|=
literal|0
decl_stmt|;
name|int
name|column
init|=
literal|0
decl_stmt|;
name|QVERIFY2
argument_list|(
name|result
operator|.
name|setContent
argument_list|(
operator|&
name|readDevice
argument_list|,
operator|&
name|msg
argument_list|,
operator|&
name|line
argument_list|,
operator|&
name|column
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Failed for codec %1: line %2, column %3: %4, content: %5"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|codecName
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|line
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|column
argument_list|)
argument_list|,
name|msg
argument_list|,
name|codec
operator|->
name|toUnicode
argument_list|(
name|storage
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|compareDocuments
argument_list|(
name|doc
argument_list|,
name|result
argument_list|)
condition|)
block|{
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|toString
argument_list|()
argument_list|,
name|result
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|/* We put this one here as well, in case the QCOMPARE above for some strange reason              * nevertheless succeeds. */
name|QVERIFY2
argument_list|(
literal|false
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Failed for codec %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|codecName
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|saveWithSerialization_data
name|void
name|tst_QDom
operator|::
name|saveWithSerialization_data
parameter_list|()
specifier|const
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"doc01.xml"
argument_list|)
operator|<<
name|QString
argument_list|(
name|SRCDIR
literal|"testdata/toString_01/doc01.xml"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"doc01.xml"
argument_list|)
operator|<<
name|QString
argument_list|(
name|SRCDIR
literal|"testdata/toString_01/doc01.xml"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"doc02.xml"
argument_list|)
operator|<<
name|QString
argument_list|(
name|SRCDIR
literal|"testdata/toString_01/doc02.xml"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"doc03.xml"
argument_list|)
operator|<<
name|QString
argument_list|(
name|SRCDIR
literal|"testdata/toString_01/doc03.xml"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"doc04.xml"
argument_list|)
operator|<<
name|QString
argument_list|(
name|SRCDIR
literal|"testdata/toString_01/doc04.xml"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"doc05.xml"
argument_list|)
operator|<<
name|QString
argument_list|(
name|SRCDIR
literal|"testdata/toString_01/doc05.xml"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"doc_euc-jp.xml"
argument_list|)
operator|<<
name|QString
argument_list|(
name|SRCDIR
literal|"testdata/toString_01/doc_euc-jp.xml"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"doc_iso-2022-jp.xml"
argument_list|)
operator|<<
name|QString
argument_list|(
name|SRCDIR
literal|"testdata/toString_01/doc_iso-2022-jp.xml"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"doc_little-endian.xml"
argument_list|)
operator|<<
name|QString
argument_list|(
name|SRCDIR
literal|"testdata/toString_01/doc_little-endian.xml"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"doc_utf-16.xml"
argument_list|)
operator|<<
name|QString
argument_list|(
name|SRCDIR
literal|"testdata/toString_01/doc_utf-16.xml"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"doc_utf-8.xml"
argument_list|)
operator|<<
name|QString
argument_list|(
name|SRCDIR
literal|"testdata/toString_01/doc_utf-8.xml"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cloneNode_data
name|void
name|tst_QDom
operator|::
name|cloneNode_data
parameter_list|()
block|{
specifier|const
name|QString
name|doc01
argument_list|(
literal|"<a1>\n"
literal|"<b1>\n"
literal|"<c1>\n"
literal|"<d1/>\n"
literal|"</c1>\n"
literal|"<c2/>\n"
literal|"</b1>\n"
literal|"<b2/>\n"
literal|"<b3>\n"
literal|"<c1/>\n"
literal|"</b3>\n"
literal|"</a1>\n"
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|nodeB1
decl_stmt|;
name|nodeB1
operator|<<
literal|0
expr_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|nodeC1
decl_stmt|;
name|nodeC1
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|nodeC2
decl_stmt|;
name|nodeC2
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"doc"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|>
argument_list|(
literal|"pathToNode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"deep"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"noDeep_01"
argument_list|)
operator|<<
name|doc01
operator|<<
name|nodeB1
operator|<<
operator|(
name|bool
operator|)
name|FALSE
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"noDeep_02"
argument_list|)
operator|<<
name|doc01
operator|<<
name|nodeC1
operator|<<
operator|(
name|bool
operator|)
name|FALSE
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"noDeep_03"
argument_list|)
operator|<<
name|doc01
operator|<<
name|nodeC2
operator|<<
operator|(
name|bool
operator|)
name|FALSE
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"deep_01"
argument_list|)
operator|<<
name|doc01
operator|<<
name|nodeB1
operator|<<
operator|(
name|bool
operator|)
name|TRUE
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"deep_02"
argument_list|)
operator|<<
name|doc01
operator|<<
name|nodeC1
operator|<<
operator|(
name|bool
operator|)
name|TRUE
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"deep_03"
argument_list|)
operator|<<
name|doc01
operator|<<
name|nodeC2
operator|<<
operator|(
name|bool
operator|)
name|TRUE
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cloneNode
name|void
name|tst_QDom
operator|::
name|cloneNode
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|,
name|pathToNode
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|deep
argument_list|)
expr_stmt|;
name|QDomDocument
name|domDoc
decl_stmt|;
name|QVERIFY
argument_list|(
name|domDoc
operator|.
name|setContent
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|QDomNode
name|node
init|=
name|findDomNode
argument_list|(
name|domDoc
argument_list|,
name|pathToNode
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|node
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QDomNode
name|clonedNode
init|=
name|node
operator|.
name|cloneNode
argument_list|(
name|deep
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|compareNodes
argument_list|(
name|node
argument_list|,
name|clonedNode
argument_list|,
name|deep
argument_list|)
argument_list|)
expr_stmt|;
name|QDomNode
name|parent
init|=
name|node
operator|.
name|parentNode
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|parent
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|node
operator|=
name|parent
operator|.
name|replaceChild
argument_list|(
name|clonedNode
argument_list|,
name|node
argument_list|)
expr_stmt|;
comment|// swap the nodes
name|QVERIFY
argument_list|(
operator|!
name|node
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|compareNodes
argument_list|(
name|node
argument_list|,
name|clonedNode
argument_list|,
name|deep
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|ownerElementTask45192_data
name|void
name|tst_QDom
operator|::
name|ownerElementTask45192_data
parameter_list|()
block|{
specifier|const
name|QString
name|doc
argument_list|(
literal|"<root>\n"
literal|"<item name=\"test\">\n"
literal|"</item>\n"
literal|"</root>"
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"doc"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"doc"
argument_list|)
operator|<<
name|doc
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ownerElementTask45192
name|void
name|tst_QDom
operator|::
name|ownerElementTask45192
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|QDomDocument
name|domDoc
decl_stmt|;
name|QVERIFY
argument_list|(
name|domDoc
operator|.
name|setContent
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|QDomNode
name|item
init|=
name|domDoc
operator|.
name|documentElement
argument_list|()
operator|.
name|firstChild
argument_list|()
decl_stmt|;
name|QDomNode
name|clone
init|=
name|item
operator|.
name|cloneNode
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|clone
operator|==
name|clone
operator|.
name|attributes
argument_list|()
operator|.
name|namedItem
argument_list|(
literal|"name"
argument_list|)
operator|.
name|toAttr
argument_list|()
operator|.
name|ownerElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ownerDocument_data
name|void
name|tst_QDom
operator|::
name|ownerDocument_data
parameter_list|()
block|{
name|cloneNode_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_define
DECL|macro|OWNERDOCUMENT_CREATE_TEST
define|#
directive|define
name|OWNERDOCUMENT_CREATE_TEST
parameter_list|(
name|t
parameter_list|,
name|x
parameter_list|)
define|\
value|{ \     t n = x; \     QVERIFY( n.ownerDocument() == domDoc ); \ }
end_define
begin_define
DECL|macro|OWNERDOCUMENT_IMPORTNODE_TEST
define|#
directive|define
name|OWNERDOCUMENT_IMPORTNODE_TEST
parameter_list|(
name|t
parameter_list|,
name|x
parameter_list|)
define|\
value|{ \     QDomNode importedNode; \     t n = x; \     QVERIFY( n.ownerDocument() != domDoc ); \     importedNode = domDoc.importNode( n, deep ); \     QVERIFY( n.ownerDocument() != domDoc ); \     QVERIFY( importedNode.ownerDocument() == domDoc ); \ }
end_define
begin_function
DECL|function|ownerDocument
name|void
name|tst_QDom
operator|::
name|ownerDocument
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|,
name|pathToNode
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|deep
argument_list|)
expr_stmt|;
name|QDomDocument
name|domDoc
decl_stmt|;
name|QVERIFY
argument_list|(
name|domDoc
operator|.
name|setContent
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|QDomNode
name|node
init|=
name|findDomNode
argument_list|(
name|domDoc
argument_list|,
name|pathToNode
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|node
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|node
operator|.
name|ownerDocument
argument_list|()
operator|==
name|domDoc
argument_list|)
expr_stmt|;
comment|// Does cloneNode() keep the ownerDocument()?
block|{
name|QDomNode
name|clonedNode
init|=
name|node
operator|.
name|cloneNode
argument_list|(
name|deep
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|node
operator|.
name|ownerDocument
argument_list|()
operator|==
name|domDoc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|clonedNode
operator|.
name|ownerDocument
argument_list|()
operator|==
name|domDoc
argument_list|)
expr_stmt|;
block|}
comment|// If the original DOM node is replaced with the cloned node, does this
comment|// keep the ownerDocument()?
block|{
name|QDomNode
name|clonedNode
init|=
name|node
operator|.
name|cloneNode
argument_list|(
name|deep
argument_list|)
decl_stmt|;
name|QDomNode
name|parent
init|=
name|node
operator|.
name|parentNode
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|parent
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|node
operator|=
name|parent
operator|.
name|replaceChild
argument_list|(
name|clonedNode
argument_list|,
name|node
argument_list|)
expr_stmt|;
comment|// swap the nodes
name|QVERIFY
argument_list|(
name|node
operator|.
name|ownerDocument
argument_list|()
operator|==
name|domDoc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|clonedNode
operator|.
name|ownerDocument
argument_list|()
operator|==
name|domDoc
argument_list|)
expr_stmt|;
block|}
block|}
comment|// test QDomDocument::create...()
block|{
name|OWNERDOCUMENT_CREATE_TEST
argument_list|(
name|QDomAttr
argument_list|,
name|domDoc
operator|.
name|createAttribute
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|OWNERDOCUMENT_CREATE_TEST
argument_list|(
name|QDomAttr
argument_list|,
name|domDoc
operator|.
name|createAttributeNS
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|OWNERDOCUMENT_CREATE_TEST
argument_list|(
name|QDomCDATASection
argument_list|,
name|domDoc
operator|.
name|createCDATASection
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|OWNERDOCUMENT_CREATE_TEST
argument_list|(
name|QDomComment
argument_list|,
name|domDoc
operator|.
name|createComment
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|OWNERDOCUMENT_CREATE_TEST
argument_list|(
name|QDomDocumentFragment
argument_list|,
name|domDoc
operator|.
name|createDocumentFragment
argument_list|()
argument_list|)
expr_stmt|;
name|OWNERDOCUMENT_CREATE_TEST
argument_list|(
name|QDomElement
argument_list|,
name|domDoc
operator|.
name|createElement
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|OWNERDOCUMENT_CREATE_TEST
argument_list|(
name|QDomElement
argument_list|,
name|domDoc
operator|.
name|createElementNS
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|OWNERDOCUMENT_CREATE_TEST
argument_list|(
name|QDomEntityReference
argument_list|,
name|domDoc
operator|.
name|createEntityReference
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|OWNERDOCUMENT_CREATE_TEST
argument_list|(
name|QDomProcessingInstruction
argument_list|,
name|domDoc
operator|.
name|createProcessingInstruction
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|OWNERDOCUMENT_CREATE_TEST
argument_list|(
name|QDomText
argument_list|,
name|domDoc
operator|.
name|createTextNode
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// test importNode()
block|{
name|QDomDocument
name|doc2
decl_stmt|;
name|OWNERDOCUMENT_IMPORTNODE_TEST
argument_list|(
name|QDomAttr
argument_list|,
name|doc2
operator|.
name|createAttribute
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|OWNERDOCUMENT_IMPORTNODE_TEST
argument_list|(
name|QDomAttr
argument_list|,
name|doc2
operator|.
name|createAttributeNS
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|OWNERDOCUMENT_IMPORTNODE_TEST
argument_list|(
name|QDomCDATASection
argument_list|,
name|doc2
operator|.
name|createCDATASection
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|OWNERDOCUMENT_IMPORTNODE_TEST
argument_list|(
name|QDomComment
argument_list|,
name|doc2
operator|.
name|createComment
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|OWNERDOCUMENT_IMPORTNODE_TEST
argument_list|(
name|QDomDocumentFragment
argument_list|,
name|doc2
operator|.
name|createDocumentFragment
argument_list|()
argument_list|)
expr_stmt|;
name|OWNERDOCUMENT_IMPORTNODE_TEST
argument_list|(
name|QDomElement
argument_list|,
name|doc2
operator|.
name|createElement
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|OWNERDOCUMENT_IMPORTNODE_TEST
argument_list|(
name|QDomElement
argument_list|,
name|doc2
operator|.
name|createElementNS
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|OWNERDOCUMENT_IMPORTNODE_TEST
argument_list|(
name|QDomEntityReference
argument_list|,
name|doc2
operator|.
name|createEntityReference
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|OWNERDOCUMENT_IMPORTNODE_TEST
argument_list|(
name|QDomProcessingInstruction
argument_list|,
name|doc2
operator|.
name|createProcessingInstruction
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|OWNERDOCUMENT_IMPORTNODE_TEST
argument_list|(
name|QDomText
argument_list|,
name|doc2
operator|.
name|createTextNode
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|ownerDocumentTask27424_data
name|void
name|tst_QDom
operator|::
name|ownerDocumentTask27424_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"insertLevel1AfterCstr"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"insertLevel2AfterCstr"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"insertLevel3AfterCstr"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"000"
argument_list|)
operator|<<
operator|(
name|bool
operator|)
name|FALSE
operator|<<
operator|(
name|bool
operator|)
name|FALSE
operator|<<
operator|(
name|bool
operator|)
name|FALSE
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"001"
argument_list|)
operator|<<
operator|(
name|bool
operator|)
name|FALSE
operator|<<
operator|(
name|bool
operator|)
name|FALSE
operator|<<
operator|(
name|bool
operator|)
name|TRUE
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"010"
argument_list|)
operator|<<
operator|(
name|bool
operator|)
name|FALSE
operator|<<
operator|(
name|bool
operator|)
name|TRUE
operator|<<
operator|(
name|bool
operator|)
name|FALSE
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"011"
argument_list|)
operator|<<
operator|(
name|bool
operator|)
name|FALSE
operator|<<
operator|(
name|bool
operator|)
name|TRUE
operator|<<
operator|(
name|bool
operator|)
name|TRUE
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"100"
argument_list|)
operator|<<
operator|(
name|bool
operator|)
name|TRUE
operator|<<
operator|(
name|bool
operator|)
name|FALSE
operator|<<
operator|(
name|bool
operator|)
name|FALSE
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"101"
argument_list|)
operator|<<
operator|(
name|bool
operator|)
name|TRUE
operator|<<
operator|(
name|bool
operator|)
name|FALSE
operator|<<
operator|(
name|bool
operator|)
name|TRUE
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"110"
argument_list|)
operator|<<
operator|(
name|bool
operator|)
name|TRUE
operator|<<
operator|(
name|bool
operator|)
name|TRUE
operator|<<
operator|(
name|bool
operator|)
name|FALSE
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"111"
argument_list|)
operator|<<
operator|(
name|bool
operator|)
name|TRUE
operator|<<
operator|(
name|bool
operator|)
name|TRUE
operator|<<
operator|(
name|bool
operator|)
name|TRUE
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ownerDocumentTask27424
name|void
name|tst_QDom
operator|::
name|ownerDocumentTask27424
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|insertLevel1AfterCstr
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|insertLevel2AfterCstr
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|insertLevel3AfterCstr
argument_list|)
expr_stmt|;
name|QDomDocument
name|doc
argument_list|(
literal|"TestXML"
argument_list|)
decl_stmt|;
name|QDomElement
name|level1
init|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"Level_1"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|level1
operator|.
name|ownerDocument
argument_list|()
operator|==
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|insertLevel1AfterCstr
condition|)
block|{
name|doc
operator|.
name|appendChild
argument_list|(
name|level1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|level1
operator|.
name|ownerDocument
argument_list|()
operator|==
name|doc
argument_list|)
expr_stmt|;
block|}
name|QDomElement
name|level2
init|=
name|level1
operator|.
name|ownerDocument
argument_list|()
operator|.
name|createElement
argument_list|(
literal|"Level_2"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|level1
operator|.
name|ownerDocument
argument_list|()
operator|==
name|doc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|level2
operator|.
name|ownerDocument
argument_list|()
operator|==
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|insertLevel2AfterCstr
condition|)
block|{
name|level1
operator|.
name|appendChild
argument_list|(
name|level2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|level1
operator|.
name|ownerDocument
argument_list|()
operator|==
name|doc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|level2
operator|.
name|ownerDocument
argument_list|()
operator|==
name|doc
argument_list|)
expr_stmt|;
block|}
name|QDomElement
name|level3
init|=
name|level2
operator|.
name|ownerDocument
argument_list|()
operator|.
name|createElement
argument_list|(
literal|"Level_3"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|level1
operator|.
name|ownerDocument
argument_list|()
operator|==
name|doc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|level2
operator|.
name|ownerDocument
argument_list|()
operator|==
name|doc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|level3
operator|.
name|ownerDocument
argument_list|()
operator|==
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|insertLevel3AfterCstr
condition|)
block|{
name|level2
operator|.
name|appendChild
argument_list|(
name|level3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|level1
operator|.
name|ownerDocument
argument_list|()
operator|==
name|doc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|level2
operator|.
name|ownerDocument
argument_list|()
operator|==
name|doc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|level3
operator|.
name|ownerDocument
argument_list|()
operator|==
name|doc
argument_list|)
expr_stmt|;
block|}
name|QDomNode
name|level4
init|=
name|level3
operator|.
name|ownerDocument
argument_list|()
operator|.
name|createTextNode
argument_list|(
literal|"This_is_a_value!"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|level4
operator|.
name|ownerDocument
argument_list|()
operator|==
name|doc
argument_list|)
expr_stmt|;
name|level3
operator|.
name|appendChild
argument_list|(
name|level4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|level1
operator|.
name|ownerDocument
argument_list|()
operator|==
name|doc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|level2
operator|.
name|ownerDocument
argument_list|()
operator|==
name|doc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|level3
operator|.
name|ownerDocument
argument_list|()
operator|==
name|doc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|level4
operator|.
name|ownerDocument
argument_list|()
operator|==
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|insertLevel3AfterCstr
condition|)
block|{
name|level2
operator|.
name|appendChild
argument_list|(
name|level3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|level1
operator|.
name|ownerDocument
argument_list|()
operator|==
name|doc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|level2
operator|.
name|ownerDocument
argument_list|()
operator|==
name|doc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|level3
operator|.
name|ownerDocument
argument_list|()
operator|==
name|doc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|level4
operator|.
name|ownerDocument
argument_list|()
operator|==
name|doc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|insertLevel2AfterCstr
condition|)
block|{
name|level1
operator|.
name|appendChild
argument_list|(
name|level2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|level1
operator|.
name|ownerDocument
argument_list|()
operator|==
name|doc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|level2
operator|.
name|ownerDocument
argument_list|()
operator|==
name|doc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|level3
operator|.
name|ownerDocument
argument_list|()
operator|==
name|doc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|level4
operator|.
name|ownerDocument
argument_list|()
operator|==
name|doc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|insertLevel1AfterCstr
condition|)
block|{
name|doc
operator|.
name|appendChild
argument_list|(
name|level1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|level1
operator|.
name|ownerDocument
argument_list|()
operator|==
name|doc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|level2
operator|.
name|ownerDocument
argument_list|()
operator|==
name|doc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|level3
operator|.
name|ownerDocument
argument_list|()
operator|==
name|doc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|level4
operator|.
name|ownerDocument
argument_list|()
operator|==
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|parentNode_data
name|void
name|tst_QDom
operator|::
name|parentNode_data
parameter_list|()
block|{
name|cloneNode_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_define
DECL|macro|PARENTNODE_CREATE_TEST
define|#
directive|define
name|PARENTNODE_CREATE_TEST
parameter_list|(
name|t
parameter_list|,
name|x
parameter_list|)
define|\
value|{ \     t n = x; \     QVERIFY( n.parentNode().isNull() ); \ }
end_define
begin_function
DECL|function|parentNode
name|void
name|tst_QDom
operator|::
name|parentNode
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|,
name|pathToNode
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|deep
argument_list|)
expr_stmt|;
name|QDomDocument
name|domDoc
decl_stmt|;
name|QVERIFY
argument_list|(
name|domDoc
operator|.
name|setContent
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|QDomNode
name|node
init|=
name|findDomNode
argument_list|(
name|domDoc
argument_list|,
name|pathToNode
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|node
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|deep
argument_list|)
expr_stmt|;
comment|// test QDomDocument::create...()
block|{
name|PARENTNODE_CREATE_TEST
argument_list|(
name|QDomAttr
argument_list|,
name|domDoc
operator|.
name|createAttribute
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|PARENTNODE_CREATE_TEST
argument_list|(
name|QDomAttr
argument_list|,
name|domDoc
operator|.
name|createAttributeNS
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|PARENTNODE_CREATE_TEST
argument_list|(
name|QDomCDATASection
argument_list|,
name|domDoc
operator|.
name|createCDATASection
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|PARENTNODE_CREATE_TEST
argument_list|(
name|QDomComment
argument_list|,
name|domDoc
operator|.
name|createComment
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|PARENTNODE_CREATE_TEST
argument_list|(
name|QDomDocumentFragment
argument_list|,
name|domDoc
operator|.
name|createDocumentFragment
argument_list|()
argument_list|)
expr_stmt|;
name|PARENTNODE_CREATE_TEST
argument_list|(
name|QDomElement
argument_list|,
name|domDoc
operator|.
name|createElement
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|PARENTNODE_CREATE_TEST
argument_list|(
name|QDomElement
argument_list|,
name|domDoc
operator|.
name|createElementNS
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|PARENTNODE_CREATE_TEST
argument_list|(
name|QDomEntityReference
argument_list|,
name|domDoc
operator|.
name|createEntityReference
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|PARENTNODE_CREATE_TEST
argument_list|(
name|QDomProcessingInstruction
argument_list|,
name|domDoc
operator|.
name|createProcessingInstruction
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|PARENTNODE_CREATE_TEST
argument_list|(
name|QDomText
argument_list|,
name|domDoc
operator|.
name|createTextNode
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|documentCreationTask27424_data
name|void
name|tst_QDom
operator|::
name|documentCreationTask27424_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"insertLevel1AfterCstr"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"insertLevel2AfterCstr"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"insertLevel3AfterCstr"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"000"
argument_list|)
operator|<<
operator|(
name|bool
operator|)
name|FALSE
operator|<<
operator|(
name|bool
operator|)
name|FALSE
operator|<<
operator|(
name|bool
operator|)
name|FALSE
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"001"
argument_list|)
operator|<<
operator|(
name|bool
operator|)
name|FALSE
operator|<<
operator|(
name|bool
operator|)
name|FALSE
operator|<<
operator|(
name|bool
operator|)
name|TRUE
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"010"
argument_list|)
operator|<<
operator|(
name|bool
operator|)
name|FALSE
operator|<<
operator|(
name|bool
operator|)
name|TRUE
operator|<<
operator|(
name|bool
operator|)
name|FALSE
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"011"
argument_list|)
operator|<<
operator|(
name|bool
operator|)
name|FALSE
operator|<<
operator|(
name|bool
operator|)
name|TRUE
operator|<<
operator|(
name|bool
operator|)
name|TRUE
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"100"
argument_list|)
operator|<<
operator|(
name|bool
operator|)
name|TRUE
operator|<<
operator|(
name|bool
operator|)
name|FALSE
operator|<<
operator|(
name|bool
operator|)
name|FALSE
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"101"
argument_list|)
operator|<<
operator|(
name|bool
operator|)
name|TRUE
operator|<<
operator|(
name|bool
operator|)
name|FALSE
operator|<<
operator|(
name|bool
operator|)
name|TRUE
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"110"
argument_list|)
operator|<<
operator|(
name|bool
operator|)
name|TRUE
operator|<<
operator|(
name|bool
operator|)
name|TRUE
operator|<<
operator|(
name|bool
operator|)
name|FALSE
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"111"
argument_list|)
operator|<<
operator|(
name|bool
operator|)
name|TRUE
operator|<<
operator|(
name|bool
operator|)
name|TRUE
operator|<<
operator|(
name|bool
operator|)
name|TRUE
expr_stmt|;
block|}
end_function
begin_function
DECL|function|documentCreationTask27424
name|void
name|tst_QDom
operator|::
name|documentCreationTask27424
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|insertLevel1AfterCstr
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|insertLevel2AfterCstr
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|insertLevel3AfterCstr
argument_list|)
expr_stmt|;
name|QDomDocument
name|docRes
decl_stmt|;
name|QVERIFY
argument_list|(
name|docRes
operator|.
name|setContent
argument_list|(
name|QString
argument_list|(
literal|"<!DOCTYPE TestXML>\n"
literal|"<Level_1>\n"
literal|"<Level_2>\n"
literal|"<Level_3>This_is_a_value!</Level_3>\n"
literal|"</Level_2>\n"
literal|"</Level_1>"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QDomDocument
name|doc
argument_list|(
literal|"TestXML"
argument_list|)
decl_stmt|;
name|QDomElement
name|level1
init|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"Level_1"
argument_list|)
decl_stmt|;
if|if
condition|(
name|insertLevel1AfterCstr
condition|)
name|doc
operator|.
name|appendChild
argument_list|(
name|level1
argument_list|)
expr_stmt|;
name|QDomElement
name|level2
init|=
name|level1
operator|.
name|ownerDocument
argument_list|()
operator|.
name|createElement
argument_list|(
literal|"Level_2"
argument_list|)
decl_stmt|;
if|if
condition|(
name|insertLevel2AfterCstr
condition|)
name|level1
operator|.
name|appendChild
argument_list|(
name|level2
argument_list|)
expr_stmt|;
name|QDomElement
name|level3
init|=
name|level2
operator|.
name|ownerDocument
argument_list|()
operator|.
name|createElement
argument_list|(
literal|"Level_3"
argument_list|)
decl_stmt|;
if|if
condition|(
name|insertLevel3AfterCstr
condition|)
name|level2
operator|.
name|appendChild
argument_list|(
name|level3
argument_list|)
expr_stmt|;
name|QDomNode
name|level4
init|=
name|level3
operator|.
name|ownerDocument
argument_list|()
operator|.
name|createTextNode
argument_list|(
literal|"This_is_a_value!"
argument_list|)
decl_stmt|;
name|level3
operator|.
name|appendChild
argument_list|(
name|level4
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|insertLevel3AfterCstr
condition|)
name|level2
operator|.
name|appendChild
argument_list|(
name|level3
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|insertLevel2AfterCstr
condition|)
name|level1
operator|.
name|appendChild
argument_list|(
name|level2
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|insertLevel1AfterCstr
condition|)
name|doc
operator|.
name|appendChild
argument_list|(
name|level1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|compareDocuments
argument_list|(
name|doc
argument_list|,
name|docRes
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isFakeXMLDeclaration
name|bool
name|tst_QDom
operator|::
name|isFakeXMLDeclaration
parameter_list|(
specifier|const
name|QDomNode
modifier|&
name|node
parameter_list|)
block|{
return|return
name|node
operator|.
name|isProcessingInstruction
argument_list|()
operator|&&
name|node
operator|.
name|nodeName
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"xml"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|isDeepEqual
name|bool
name|tst_QDom
operator|::
name|isDeepEqual
parameter_list|(
specifier|const
name|QDomNode
modifier|&
name|n1
parameter_list|,
specifier|const
name|QDomNode
modifier|&
name|n2
parameter_list|)
block|{
specifier|const
name|QDomNode
operator|::
name|NodeType
name|nt
init|=
name|n1
operator|.
name|nodeType
argument_list|()
decl_stmt|;
if|if
condition|(
name|nt
operator|!=
name|n2
operator|.
name|nodeType
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|n1
operator|.
name|nodeName
argument_list|()
operator|!=
name|n2
operator|.
name|nodeName
argument_list|()
operator|||
name|n1
operator|.
name|namespaceURI
argument_list|()
operator|!=
name|n2
operator|.
name|namespaceURI
argument_list|()
operator|||
name|n1
operator|.
name|nodeValue
argument_list|()
operator|!=
name|n2
operator|.
name|nodeValue
argument_list|()
condition|)
return|return
literal|false
return|;
comment|/* Check the children. */
specifier|const
name|QDomNodeList
name|children1
argument_list|(
name|n1
operator|.
name|childNodes
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QDomNodeList
name|children2
argument_list|(
name|n2
operator|.
name|childNodes
argument_list|()
argument_list|)
decl_stmt|;
name|uint
name|len1
init|=
name|children1
operator|.
name|length
argument_list|()
decl_stmt|;
name|uint
name|len2
init|=
name|children2
operator|.
name|length
argument_list|()
decl_stmt|;
name|uint
name|i1
init|=
literal|0
decl_stmt|;
name|uint
name|i2
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|len1
operator|!=
literal|0
operator|&&
name|isFakeXMLDeclaration
argument_list|(
name|children1
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
operator|++
name|i1
expr_stmt|;
if|if
condition|(
name|len2
operator|!=
literal|0
operator|&&
name|isFakeXMLDeclaration
argument_list|(
name|children2
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
operator|++
name|i2
expr_stmt|;
if|if
condition|(
name|len1
operator|-
name|i1
operator|!=
name|len2
operator|-
name|i2
condition|)
return|return
literal|false
return|;
comment|// We jump over the first to skip the processing instructions that
comment|// are (incorrectly) used as XML declarations.
for|for
control|(
init|;
name|i1
operator|<
name|len1
condition|;
operator|++
name|i1
control|)
block|{
if|if
condition|(
operator|!
name|isDeepEqual
argument_list|(
name|children1
operator|.
name|at
argument_list|(
name|i1
argument_list|)
argument_list|,
name|children2
operator|.
name|at
argument_list|(
name|i2
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
operator|++
name|i2
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*     Returns TRUE if \a doc1 and \a doc2 represent the same XML document, i.e.     they have the same informational content. Otherwise, this function returns     FALSE. */
end_comment
begin_function
DECL|function|compareDocuments
name|bool
name|tst_QDom
operator|::
name|compareDocuments
parameter_list|(
specifier|const
name|QDomDocument
modifier|&
name|doc1
parameter_list|,
specifier|const
name|QDomDocument
modifier|&
name|doc2
parameter_list|)
block|{
return|return
name|isDeepEqual
argument_list|(
name|doc1
argument_list|,
name|doc2
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*     Returns TRUE if \a node1 and \a node2 represent the same XML node, i.e.     they have the same informational content. Otherwise, this function returns     FALSE.      If \a deep is TRUE, children of the nodes are also tested. If \a deep is     FALSE, only \a node1 and \a node 2 are compared. */
end_comment
begin_function
DECL|function|compareNodes
name|bool
name|tst_QDom
operator|::
name|compareNodes
parameter_list|(
specifier|const
name|QDomNode
modifier|&
name|node1
parameter_list|,
specifier|const
name|QDomNode
modifier|&
name|node2
parameter_list|,
name|bool
name|deep
parameter_list|)
block|{
if|if
condition|(
name|deep
condition|)
block|{
name|QString
name|str1
decl_stmt|;
block|{
name|QTextStream
name|stream
argument_list|(
operator|&
name|str1
argument_list|)
decl_stmt|;
name|stream
operator|<<
name|node1
expr_stmt|;
block|}
name|QString
name|str2
decl_stmt|;
block|{
name|QTextStream
name|stream
argument_list|(
operator|&
name|str2
argument_list|)
decl_stmt|;
name|stream
operator|<<
name|node2
expr_stmt|;
block|}
return|return
name|str1
operator|==
name|str2
return|;
block|}
if|if
condition|(
name|node1
operator|.
name|isNull
argument_list|()
operator|&&
name|node2
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|TRUE
return|;
comment|// ### I am not sure if this test is complete
name|bool
name|equal
init|=
name|node1
operator|.
name|nodeName
argument_list|()
operator|==
name|node2
operator|.
name|nodeName
argument_list|()
decl_stmt|;
name|equal
operator|=
name|equal
operator|&&
name|node1
operator|.
name|nodeType
argument_list|()
operator|==
name|node2
operator|.
name|nodeType
argument_list|()
expr_stmt|;
name|equal
operator|=
name|equal
operator|&&
name|node1
operator|.
name|localName
argument_list|()
operator|==
name|node2
operator|.
name|localName
argument_list|()
expr_stmt|;
name|equal
operator|=
name|equal
operator|&&
name|node1
operator|.
name|nodeValue
argument_list|()
operator|==
name|node2
operator|.
name|nodeValue
argument_list|()
expr_stmt|;
name|equal
operator|=
name|equal
operator|&&
name|node1
operator|.
name|prefix
argument_list|()
operator|==
name|node2
operator|.
name|prefix
argument_list|()
expr_stmt|;
return|return
name|equal
return|;
block|}
end_function
begin_comment
comment|/*     \a pathToNode is a list of indices to wanted node in \a doc. Returns the     wanted node. */
end_comment
begin_function
DECL|function|findDomNode
name|QDomNode
name|tst_QDom
operator|::
name|findDomNode
parameter_list|(
specifier|const
name|QDomDocument
modifier|&
name|doc
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QVariant
argument_list|>
modifier|&
name|pathToNode
parameter_list|)
block|{
name|QDomNode
name|node
init|=
name|doc
decl_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
operator|::
name|const_iterator
name|it
decl_stmt|;
for|for
control|(
name|it
operator|=
name|pathToNode
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|pathToNode
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QDomNodeList
name|children
init|=
name|node
operator|.
name|childNodes
argument_list|()
decl_stmt|;
name|node
operator|=
name|children
operator|.
name|item
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
comment|//        QVERIFY( !node.isNull() );
block|}
return|return
name|node
return|;
block|}
end_function
begin_function
DECL|function|browseElements
name|void
name|tst_QDom
operator|::
name|browseElements
parameter_list|()
block|{
name|QDomDocument
name|doc
decl_stmt|;
name|QDomElement
name|root
init|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|appendChild
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|root
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createElement
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createElement
argument_list|(
literal|"bop"
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createElement
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createElement
argument_list|(
literal|"bop"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|.
name|firstChildElement
argument_list|(
literal|"ding"
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QDomElement
name|foo
init|=
name|doc
operator|.
name|firstChildElement
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|foo
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|foo
operator|.
name|firstChildElement
argument_list|(
literal|"ding"
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|foo
operator|.
name|nextSiblingElement
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|foo
operator|.
name|previousSiblingElement
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|foo
operator|.
name|nextSiblingElement
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|foo
operator|.
name|previousSiblingElement
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QDomElement
name|bar
init|=
name|foo
operator|.
name|firstChildElement
argument_list|(
literal|"bar"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|bar
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|bar
operator|.
name|previousSiblingElement
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|bar
operator|.
name|previousSiblingElement
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|bar
operator|.
name|nextSiblingElement
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|tagName
argument_list|()
operator|==
literal|"bar"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|bar
operator|.
name|nextSiblingElement
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|nextSiblingElement
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QDomElement
name|bop
init|=
name|foo
operator|.
name|firstChildElement
argument_list|(
literal|"bop"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|bop
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|bar
operator|.
name|nextSiblingElement
argument_list|()
operator|==
name|bop
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|bop
operator|.
name|nextSiblingElement
argument_list|(
literal|"bop"
argument_list|)
operator|==
name|foo
operator|.
name|lastChildElement
argument_list|(
literal|"bop"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|bop
operator|.
name|previousSiblingElement
argument_list|(
literal|"bar"
argument_list|)
operator|==
name|foo
operator|.
name|firstChildElement
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|bop
operator|.
name|previousSiblingElement
argument_list|(
literal|"bar"
argument_list|)
operator|==
name|foo
operator|.
name|firstChildElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|domNodeMapAndList
name|void
name|tst_QDom
operator|::
name|domNodeMapAndList
parameter_list|()
block|{
name|QString
name|xml_str
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"<foo ding='dong'></foo>"
argument_list|)
decl_stmt|;
name|QDomDocument
name|doc
decl_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|.
name|setContent
argument_list|(
name|xml_str
argument_list|)
argument_list|)
expr_stmt|;
name|QDomNamedNodeMap
name|map
init|=
name|doc
operator|.
name|documentElement
argument_list|()
operator|.
name|attributes
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|nodeName
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"ding"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|item
argument_list|(
literal|1
argument_list|)
operator|.
name|nodeName
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure we don't assert
name|QDomNodeList
name|list
init|=
name|doc
operator|.
name|elementsByTagName
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|nodeName
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|item
argument_list|(
literal|1
argument_list|)
operator|.
name|nodeName
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure we don't assert
block|}
end_function
begin_comment
comment|// Verifies that a default-constructed QDomDocument is null, and that calling
end_comment
begin_comment
comment|// any of the factory functions causes it to be non-null.
end_comment
begin_define
DECL|macro|TEST_NULL_DOCUMENT
define|#
directive|define
name|TEST_NULL_DOCUMENT
parameter_list|(
name|func
parameter_list|)
define|\
value|{ \     QDomDocument doc; \     QVERIFY(doc.isNull()); \     QVERIFY(!doc.func.isNull()); \     QVERIFY(!doc.isNull()); \ }
end_define
begin_function
DECL|function|nullDocument
name|void
name|tst_QDom
operator|::
name|nullDocument
parameter_list|()
block|{
name|TEST_NULL_DOCUMENT
argument_list|(
argument|createAttribute(
literal|"foo"
argument|)
argument_list|)
name|TEST_NULL_DOCUMENT
argument_list|(
argument|createAttributeNS(
literal|"http://foo/"
argument|,
literal|"bar"
argument|)
argument_list|)
name|TEST_NULL_DOCUMENT
argument_list|(
argument|createCDATASection(
literal|"foo"
argument|)
argument_list|)
name|TEST_NULL_DOCUMENT
argument_list|(
argument|createComment(
literal|"foo"
argument|)
argument_list|)
name|TEST_NULL_DOCUMENT
argument_list|(
argument|createDocumentFragment()
argument_list|)
name|TEST_NULL_DOCUMENT
argument_list|(
argument|createElement(
literal|"foo"
argument|)
argument_list|)
name|TEST_NULL_DOCUMENT
argument_list|(
argument|createElementNS(
literal|"http://foo/"
argument|,
literal|"foo"
argument|)
argument_list|)
name|TEST_NULL_DOCUMENT
argument_list|(
argument|createEntityReference(
literal|"foo"
argument|)
argument_list|)
name|TEST_NULL_DOCUMENT
argument_list|(
argument|createProcessingInstruction(
literal|"foo"
argument|,
literal|"bar"
argument|)
argument_list|)
name|TEST_NULL_DOCUMENT
argument_list|(
argument|createTextNode(
literal|"foo"
argument|)
argument_list|)
name|QDomDocument
name|doc2
decl_stmt|;
name|QDomElement
name|elt
init|=
name|doc2
operator|.
name|createElement
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|doc2
operator|.
name|appendChild
argument_list|(
name|elt
argument_list|)
expr_stmt|;
name|TEST_NULL_DOCUMENT
argument_list|(
argument|importNode(elt,
literal|true
argument|)
argument_list|)
block|}
end_function
begin_undef
DECL|macro|TEST_NULL_DOCUMENT
undef|#
directive|undef
name|TEST_NULL_DOCUMENT
end_undef
begin_function
DECL|function|invalidName_data
name|void
name|tst_QDom
operator|::
name|invalidName_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"in_name"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"ok_AcceptInvalidChars"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"ok_DropInvalidChars"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"ok_ReturnNullNode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"out_name"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
literal|true
operator|<<
literal|true
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"_f.o-o:"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"_f.o-o:"
argument_list|)
operator|<<
literal|true
operator|<<
literal|true
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|"_f.o-o:"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"...:."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"...:."
argument_list|)
operator|<<
literal|true
operator|<<
literal|true
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|":."
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
operator|<<
literal|false
operator|<<
literal|false
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"~f~o~o~"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"~f~o~o~"
argument_list|)
operator|<<
literal|true
operator|<<
literal|true
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"~"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"~"
argument_list|)
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|false
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"..."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"..."
argument_list|)
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|false
operator|<<
name|QString
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invalidName
name|void
name|tst_QDom
operator|::
name|invalidName
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|in_name
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|ok_AcceptInvalidChars
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|ok_DropInvalidChars
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|ok_ReturnNullNode
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|out_name
argument_list|)
expr_stmt|;
name|QDomImplementation
name|impl
decl_stmt|;
name|QDomDocument
name|doc
decl_stmt|;
name|QDomImplementation
operator|::
name|setInvalidDataPolicy
argument_list|(
name|QDomImplementation
operator|::
name|AcceptInvalidChars
argument_list|)
expr_stmt|;
block|{
name|QDomElement
name|elt
init|=
name|doc
operator|.
name|createElement
argument_list|(
name|in_name
argument_list|)
decl_stmt|;
name|QDomElement
name|elt_ns
init|=
name|doc
operator|.
name|createElementNS
argument_list|(
literal|"foo"
argument_list|,
literal|"foo:"
operator|+
name|in_name
argument_list|)
decl_stmt|;
name|QDomAttr
name|attr
init|=
name|doc
operator|.
name|createAttribute
argument_list|(
name|in_name
argument_list|)
decl_stmt|;
name|QDomAttr
name|attr_ns
init|=
name|doc
operator|.
name|createAttributeNS
argument_list|(
literal|"foo"
argument_list|,
literal|"foo:"
operator|+
name|in_name
argument_list|)
decl_stmt|;
name|QDomEntityReference
name|ref
init|=
name|doc
operator|.
name|createEntityReference
argument_list|(
name|in_name
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|elt
operator|.
name|isNull
argument_list|()
argument_list|,
name|ok_AcceptInvalidChars
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|elt_ns
operator|.
name|isNull
argument_list|()
argument_list|,
name|ok_AcceptInvalidChars
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|attr
operator|.
name|isNull
argument_list|()
argument_list|,
name|ok_AcceptInvalidChars
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|attr_ns
operator|.
name|isNull
argument_list|()
argument_list|,
name|ok_AcceptInvalidChars
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|ref
operator|.
name|isNull
argument_list|()
argument_list|,
name|ok_AcceptInvalidChars
argument_list|)
expr_stmt|;
if|if
condition|(
name|ok_AcceptInvalidChars
condition|)
block|{
name|QCOMPARE
argument_list|(
name|elt
operator|.
name|tagName
argument_list|()
argument_list|,
name|in_name
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|elt_ns
operator|.
name|tagName
argument_list|()
argument_list|,
name|in_name
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|attr
operator|.
name|name
argument_list|()
argument_list|,
name|in_name
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|attr_ns
operator|.
name|name
argument_list|()
argument_list|,
name|in_name
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ref
operator|.
name|nodeName
argument_list|()
argument_list|,
name|in_name
argument_list|)
expr_stmt|;
block|}
block|}
name|QDomImplementation
operator|::
name|setInvalidDataPolicy
argument_list|(
name|QDomImplementation
operator|::
name|DropInvalidChars
argument_list|)
expr_stmt|;
block|{
name|QDomElement
name|elt
init|=
name|doc
operator|.
name|createElement
argument_list|(
name|in_name
argument_list|)
decl_stmt|;
name|QDomElement
name|elt_ns
init|=
name|doc
operator|.
name|createElementNS
argument_list|(
literal|"foo"
argument_list|,
literal|"foo:"
operator|+
name|in_name
argument_list|)
decl_stmt|;
name|QDomAttr
name|attr
init|=
name|doc
operator|.
name|createAttribute
argument_list|(
name|in_name
argument_list|)
decl_stmt|;
name|QDomAttr
name|attr_ns
init|=
name|doc
operator|.
name|createAttributeNS
argument_list|(
literal|"foo"
argument_list|,
literal|"foo:"
operator|+
name|in_name
argument_list|)
decl_stmt|;
name|QDomEntityReference
name|ref
init|=
name|doc
operator|.
name|createEntityReference
argument_list|(
name|in_name
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|elt
operator|.
name|isNull
argument_list|()
argument_list|,
name|ok_DropInvalidChars
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|elt_ns
operator|.
name|isNull
argument_list|()
argument_list|,
name|ok_DropInvalidChars
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|attr
operator|.
name|isNull
argument_list|()
argument_list|,
name|ok_DropInvalidChars
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|attr_ns
operator|.
name|isNull
argument_list|()
argument_list|,
name|ok_DropInvalidChars
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|ref
operator|.
name|isNull
argument_list|()
argument_list|,
name|ok_DropInvalidChars
argument_list|)
expr_stmt|;
if|if
condition|(
name|ok_DropInvalidChars
condition|)
block|{
name|QCOMPARE
argument_list|(
name|elt
operator|.
name|tagName
argument_list|()
argument_list|,
name|out_name
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|elt_ns
operator|.
name|tagName
argument_list|()
argument_list|,
name|out_name
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|attr
operator|.
name|name
argument_list|()
argument_list|,
name|out_name
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|attr_ns
operator|.
name|name
argument_list|()
argument_list|,
name|out_name
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ref
operator|.
name|nodeName
argument_list|()
argument_list|,
name|out_name
argument_list|)
expr_stmt|;
block|}
block|}
name|QDomImplementation
operator|::
name|setInvalidDataPolicy
argument_list|(
name|QDomImplementation
operator|::
name|ReturnNullNode
argument_list|)
expr_stmt|;
block|{
name|QDomElement
name|elt
init|=
name|doc
operator|.
name|createElement
argument_list|(
name|in_name
argument_list|)
decl_stmt|;
name|QDomElement
name|elt_ns
init|=
name|doc
operator|.
name|createElementNS
argument_list|(
literal|"foo"
argument_list|,
literal|"foo:"
operator|+
name|in_name
argument_list|)
decl_stmt|;
name|QDomAttr
name|attr
init|=
name|doc
operator|.
name|createAttribute
argument_list|(
name|in_name
argument_list|)
decl_stmt|;
name|QDomAttr
name|attr_ns
init|=
name|doc
operator|.
name|createAttributeNS
argument_list|(
literal|"foo"
argument_list|,
literal|"foo:"
operator|+
name|in_name
argument_list|)
decl_stmt|;
name|QDomEntityReference
name|ref
init|=
name|doc
operator|.
name|createEntityReference
argument_list|(
name|in_name
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|elt
operator|.
name|isNull
argument_list|()
argument_list|,
name|ok_ReturnNullNode
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|elt_ns
operator|.
name|isNull
argument_list|()
argument_list|,
name|ok_ReturnNullNode
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|attr
operator|.
name|isNull
argument_list|()
argument_list|,
name|ok_ReturnNullNode
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|attr_ns
operator|.
name|isNull
argument_list|()
argument_list|,
name|ok_ReturnNullNode
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|ref
operator|.
name|isNull
argument_list|()
argument_list|,
name|ok_ReturnNullNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|ok_ReturnNullNode
condition|)
block|{
name|QCOMPARE
argument_list|(
name|elt
operator|.
name|tagName
argument_list|()
argument_list|,
name|in_name
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|elt_ns
operator|.
name|tagName
argument_list|()
argument_list|,
name|in_name
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|attr
operator|.
name|name
argument_list|()
argument_list|,
name|in_name
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|attr_ns
operator|.
name|name
argument_list|()
argument_list|,
name|in_name
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ref
operator|.
name|nodeName
argument_list|()
argument_list|,
name|in_name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|invalidQualifiedName_data
name|void
name|tst_QDom
operator|::
name|invalidQualifiedName_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"in_name"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"ok_AcceptInvalidChars"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"ok_DropInvalidChars"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"ok_ReturnNullNode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"out_name"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
literal|true
operator|<<
literal|true
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"foo:bar"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo:bar"
argument_list|)
operator|<<
literal|true
operator|<<
literal|true
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|"foo:bar"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bar:"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bar:"
argument_list|)
operator|<<
literal|false
operator|<<
literal|false
operator|<<
literal|false
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|":"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|":"
argument_list|)
operator|<<
literal|false
operator|<<
literal|false
operator|<<
literal|false
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
operator|<<
literal|false
operator|<<
literal|false
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"foo:...:."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo:...:."
argument_list|)
operator|<<
literal|true
operator|<<
literal|true
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"foo::."
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"foo:~"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo:~"
argument_list|)
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|false
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"foo:.~"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo:.~"
argument_list|)
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|false
operator|<<
name|QString
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invalidQualifiedName
name|void
name|tst_QDom
operator|::
name|invalidQualifiedName
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|in_name
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|ok_AcceptInvalidChars
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|ok_DropInvalidChars
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|ok_ReturnNullNode
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|out_name
argument_list|)
expr_stmt|;
name|QDomImplementation
name|impl
decl_stmt|;
name|QDomDocument
name|doc
decl_stmt|;
name|QDomImplementation
operator|::
name|setInvalidDataPolicy
argument_list|(
name|QDomImplementation
operator|::
name|AcceptInvalidChars
argument_list|)
expr_stmt|;
block|{
name|QDomElement
name|elt_ns
init|=
name|doc
operator|.
name|createElementNS
argument_list|(
literal|"foo"
argument_list|,
name|in_name
argument_list|)
decl_stmt|;
name|QDomAttr
name|attr_ns
init|=
name|doc
operator|.
name|createAttributeNS
argument_list|(
literal|"foo"
argument_list|,
name|in_name
argument_list|)
decl_stmt|;
name|QDomDocumentType
name|doctype
init|=
name|impl
operator|.
name|createDocumentType
argument_list|(
name|in_name
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|QDomDocument
name|doc2
init|=
name|impl
operator|.
name|createDocument
argument_list|(
literal|"foo"
argument_list|,
name|in_name
argument_list|,
name|doctype
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|elt_ns
operator|.
name|isNull
argument_list|()
argument_list|,
name|ok_AcceptInvalidChars
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|attr_ns
operator|.
name|isNull
argument_list|()
argument_list|,
name|ok_AcceptInvalidChars
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|doctype
operator|.
name|isNull
argument_list|()
argument_list|,
name|ok_AcceptInvalidChars
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|doc2
operator|.
name|isNull
argument_list|()
argument_list|,
name|ok_AcceptInvalidChars
argument_list|)
expr_stmt|;
if|if
condition|(
name|ok_AcceptInvalidChars
condition|)
block|{
name|QCOMPARE
argument_list|(
name|elt_ns
operator|.
name|nodeName
argument_list|()
argument_list|,
name|in_name
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|attr_ns
operator|.
name|nodeName
argument_list|()
argument_list|,
name|in_name
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doctype
operator|.
name|name
argument_list|()
argument_list|,
name|in_name
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc2
operator|.
name|documentElement
argument_list|()
operator|.
name|nodeName
argument_list|()
argument_list|,
name|in_name
argument_list|)
expr_stmt|;
block|}
block|}
name|QDomImplementation
operator|::
name|setInvalidDataPolicy
argument_list|(
name|QDomImplementation
operator|::
name|DropInvalidChars
argument_list|)
expr_stmt|;
block|{
name|QDomElement
name|elt_ns
init|=
name|doc
operator|.
name|createElementNS
argument_list|(
literal|"foo"
argument_list|,
name|in_name
argument_list|)
decl_stmt|;
name|QDomAttr
name|attr_ns
init|=
name|doc
operator|.
name|createAttributeNS
argument_list|(
literal|"foo"
argument_list|,
name|in_name
argument_list|)
decl_stmt|;
name|QDomDocumentType
name|doctype
init|=
name|impl
operator|.
name|createDocumentType
argument_list|(
name|in_name
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|QDomDocument
name|doc2
init|=
name|impl
operator|.
name|createDocument
argument_list|(
literal|"foo"
argument_list|,
name|in_name
argument_list|,
name|doctype
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|elt_ns
operator|.
name|isNull
argument_list|()
argument_list|,
name|ok_DropInvalidChars
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|attr_ns
operator|.
name|isNull
argument_list|()
argument_list|,
name|ok_DropInvalidChars
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|doctype
operator|.
name|isNull
argument_list|()
argument_list|,
name|ok_DropInvalidChars
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|doc2
operator|.
name|isNull
argument_list|()
argument_list|,
name|ok_DropInvalidChars
argument_list|)
expr_stmt|;
if|if
condition|(
name|ok_DropInvalidChars
condition|)
block|{
name|QCOMPARE
argument_list|(
name|elt_ns
operator|.
name|nodeName
argument_list|()
argument_list|,
name|out_name
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|attr_ns
operator|.
name|nodeName
argument_list|()
argument_list|,
name|out_name
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doctype
operator|.
name|name
argument_list|()
argument_list|,
name|out_name
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc2
operator|.
name|documentElement
argument_list|()
operator|.
name|nodeName
argument_list|()
argument_list|,
name|out_name
argument_list|)
expr_stmt|;
block|}
block|}
name|QDomImplementation
operator|::
name|setInvalidDataPolicy
argument_list|(
name|QDomImplementation
operator|::
name|ReturnNullNode
argument_list|)
expr_stmt|;
block|{
name|QDomElement
name|elt_ns
init|=
name|doc
operator|.
name|createElementNS
argument_list|(
literal|"foo"
argument_list|,
name|in_name
argument_list|)
decl_stmt|;
name|QDomAttr
name|attr_ns
init|=
name|doc
operator|.
name|createAttributeNS
argument_list|(
literal|"foo"
argument_list|,
name|in_name
argument_list|)
decl_stmt|;
name|QDomDocumentType
name|doctype
init|=
name|impl
operator|.
name|createDocumentType
argument_list|(
name|in_name
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|QDomDocument
name|doc2
init|=
name|impl
operator|.
name|createDocument
argument_list|(
literal|"foo"
argument_list|,
name|in_name
argument_list|,
name|doctype
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|elt_ns
operator|.
name|isNull
argument_list|()
argument_list|,
name|ok_ReturnNullNode
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|attr_ns
operator|.
name|isNull
argument_list|()
argument_list|,
name|ok_ReturnNullNode
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|doctype
operator|.
name|isNull
argument_list|()
argument_list|,
name|ok_ReturnNullNode
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|doc2
operator|.
name|isNull
argument_list|()
argument_list|,
name|ok_ReturnNullNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|ok_ReturnNullNode
condition|)
block|{
name|QCOMPARE
argument_list|(
name|elt_ns
operator|.
name|nodeName
argument_list|()
argument_list|,
name|in_name
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|attr_ns
operator|.
name|nodeName
argument_list|()
argument_list|,
name|in_name
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doctype
operator|.
name|name
argument_list|()
argument_list|,
name|in_name
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc2
operator|.
name|documentElement
argument_list|()
operator|.
name|nodeName
argument_list|()
argument_list|,
name|in_name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|invalidCharData_data
name|void
name|tst_QDom
operator|::
name|invalidCharData_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"in_text"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"ok_AcceptInvalidChars"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"ok_DropInvalidChars"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"ok_ReturnNullNode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"out_text"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
literal|true
operator|<<
literal|true
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"f<o&o"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"f<o&o"
argument_list|)
operator|<<
literal|true
operator|<<
literal|true
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|"f<o&o"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|true
operator|<<
literal|true
operator|<<
literal|true
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"f\\x07o\\x02"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"f\x07o\x02"
argument_list|)
operator|<<
literal|true
operator|<<
literal|true
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"fo"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invalidCharData
name|void
name|tst_QDom
operator|::
name|invalidCharData
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|in_text
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|ok_AcceptInvalidChars
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|ok_DropInvalidChars
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|ok_ReturnNullNode
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|out_text
argument_list|)
expr_stmt|;
name|QDomDocument
name|doc
decl_stmt|;
name|QDomImplementation
operator|::
name|setInvalidDataPolicy
argument_list|(
name|QDomImplementation
operator|::
name|AcceptInvalidChars
argument_list|)
expr_stmt|;
block|{
name|QDomText
name|text_elt
init|=
name|doc
operator|.
name|createTextNode
argument_list|(
name|in_text
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|text_elt
operator|.
name|isNull
argument_list|()
argument_list|,
name|ok_AcceptInvalidChars
argument_list|)
expr_stmt|;
if|if
condition|(
name|ok_AcceptInvalidChars
condition|)
block|{
name|QCOMPARE
argument_list|(
name|text_elt
operator|.
name|nodeValue
argument_list|()
argument_list|,
name|in_text
argument_list|)
expr_stmt|;
block|}
block|}
name|QDomImplementation
operator|::
name|setInvalidDataPolicy
argument_list|(
name|QDomImplementation
operator|::
name|DropInvalidChars
argument_list|)
expr_stmt|;
block|{
name|QDomText
name|text_elt
init|=
name|doc
operator|.
name|createTextNode
argument_list|(
name|in_text
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|text_elt
operator|.
name|isNull
argument_list|()
argument_list|,
name|ok_DropInvalidChars
argument_list|)
expr_stmt|;
if|if
condition|(
name|ok_DropInvalidChars
condition|)
block|{
name|QCOMPARE
argument_list|(
name|text_elt
operator|.
name|nodeValue
argument_list|()
argument_list|,
name|out_text
argument_list|)
expr_stmt|;
block|}
block|}
name|QDomImplementation
operator|::
name|setInvalidDataPolicy
argument_list|(
name|QDomImplementation
operator|::
name|ReturnNullNode
argument_list|)
expr_stmt|;
block|{
name|QDomText
name|text_elt
init|=
name|doc
operator|.
name|createTextNode
argument_list|(
name|in_text
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|text_elt
operator|.
name|isNull
argument_list|()
argument_list|,
name|ok_ReturnNullNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|ok_ReturnNullNode
condition|)
block|{
name|QCOMPARE
argument_list|(
name|text_elt
operator|.
name|nodeValue
argument_list|()
argument_list|,
name|in_text
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|roundTripAttributes
name|void
name|tst_QDom
operator|::
name|roundTripAttributes
parameter_list|()
specifier|const
block|{
comment|/* Create an attribute via the QDom API with weird whitespace content. */
name|QDomImplementation
name|impl
decl_stmt|;
name|QDomDocument
name|doc
argument_list|(
name|impl
operator|.
name|createDocument
argument_list|(
literal|""
argument_list|,
literal|"localName"
argument_list|,
name|QDomDocumentType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QDomElement
name|e
argument_list|(
name|doc
operator|.
name|documentElement
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|ws
decl_stmt|;
name|ws
operator|.
name|reserve
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|ws
operator|.
name|append
argument_list|(
name|QChar
argument_list|(
literal|0x20
argument_list|)
argument_list|)
expr_stmt|;
name|ws
operator|.
name|append
argument_list|(
name|QChar
argument_list|(
literal|0x20
argument_list|)
argument_list|)
expr_stmt|;
name|ws
operator|.
name|append
argument_list|(
name|QChar
argument_list|(
literal|0x20
argument_list|)
argument_list|)
expr_stmt|;
name|ws
operator|.
name|append
argument_list|(
name|QChar
argument_list|(
literal|0xD
argument_list|)
argument_list|)
expr_stmt|;
name|ws
operator|.
name|append
argument_list|(
name|QChar
argument_list|(
literal|0xA
argument_list|)
argument_list|)
expr_stmt|;
name|ws
operator|.
name|append
argument_list|(
name|QChar
argument_list|(
literal|0x9
argument_list|)
argument_list|)
expr_stmt|;
name|ws
operator|.
name|append
argument_list|(
name|QChar
argument_list|(
literal|0x20
argument_list|)
argument_list|)
expr_stmt|;
name|ws
operator|.
name|append
argument_list|(
name|QChar
argument_list|(
literal|0x20
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|setAttribute
argument_list|(
literal|"attr"
argument_list|,
name|ws
argument_list|)
expr_stmt|;
name|QByteArray
name|serialized
decl_stmt|;
name|QBuffer
name|buffer
argument_list|(
operator|&
name|serialized
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|buffer
argument_list|)
decl_stmt|;
name|doc
operator|.
name|save
argument_list|(
name|stream
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
specifier|const
name|QByteArray
name|expected
argument_list|(
literal|"<localName xmlns=\"\" attr=\"&#xd;&#xa;&#x9;  \"/>\n"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|serialized
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
name|expected
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|normalizeEndOfLine
name|void
name|tst_QDom
operator|::
name|normalizeEndOfLine
parameter_list|()
specifier|const
block|{
name|QByteArray
name|input
argument_list|(
literal|"<a>\r\nc\rc\ra\na</a>"
argument_list|)
decl_stmt|;
name|QBuffer
name|buffer
argument_list|(
operator|&
name|input
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|buffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QDomDocument
name|doc
decl_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|.
name|setContent
argument_list|(
operator|&
name|buffer
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|expected
argument_list|(
name|QLatin1String
argument_list|(
literal|"<a>\nc\nc\na\na</a>"
argument_list|)
argument_list|)
decl_stmt|;
comment|// ### Qt 5: fix this, if we keep QDom at all
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"The parser doesn't perform newline normalization. Fixing that would change behavior."
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|documentElement
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|normalizeAttributes
name|void
name|tst_QDom
operator|::
name|normalizeAttributes
parameter_list|()
specifier|const
block|{
name|QByteArray
name|data
argument_list|(
literal|"<element attribute=\"a\na\"/>"
argument_list|)
decl_stmt|;
name|QBuffer
name|buffer
argument_list|(
operator|&
name|data
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|buffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QDomDocument
name|doc
decl_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|.
name|setContent
argument_list|(
operator|&
name|buffer
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// ### Qt 5: fix this, if we keep QDom at all
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"The parser doesn't perform Attribute Value Normalization. Fixing that would change behavior."
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|documentElement
argument_list|()
operator|.
name|attribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"attribute"
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"a a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|serializeWeirdEOL
name|void
name|tst_QDom
operator|::
name|serializeWeirdEOL
parameter_list|()
specifier|const
block|{
name|QDomImplementation
name|impl
decl_stmt|;
name|QDomDocument
name|doc
argument_list|(
name|impl
operator|.
name|createDocument
argument_list|(
literal|""
argument_list|,
literal|"name"
argument_list|,
name|QDomDocumentType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QDomElement
name|ele
argument_list|(
name|doc
operator|.
name|documentElement
argument_list|()
argument_list|)
decl_stmt|;
name|ele
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createTextNode
argument_list|(
name|QLatin1String
argument_list|(
literal|"\r\nasd\nasd\rasd\n"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|output
decl_stmt|;
name|QBuffer
name|writeBuffer
argument_list|(
operator|&
name|output
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|writeBuffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|writeBuffer
argument_list|)
decl_stmt|;
specifier|const
name|QByteArray
name|expected
argument_list|(
literal|"<name xmlns=\"\">&#xd;\nasd\nasd&#xd;asd\n</name>\n"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|save
argument_list|(
name|stream
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|output
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
name|expected
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|reparentAttribute
name|void
name|tst_QDom
operator|::
name|reparentAttribute
parameter_list|()
specifier|const
block|{
name|QDomImplementation
name|impl
decl_stmt|;
name|QDomDocument
name|doc
argument_list|(
name|impl
operator|.
name|createDocument
argument_list|(
literal|""
argument_list|,
literal|"localName"
argument_list|,
name|QDomDocumentType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QDomElement
name|ele
argument_list|(
name|doc
operator|.
name|documentElement
argument_list|()
argument_list|)
decl_stmt|;
name|QDomAttr
name|attr
argument_list|(
name|doc
operator|.
name|createAttribute
argument_list|(
literal|"localName"
argument_list|)
argument_list|)
decl_stmt|;
name|ele
operator|.
name|setAttributeNode
argument_list|(
name|attr
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attr
operator|.
name|ownerElement
argument_list|()
operator|==
name|ele
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attr
operator|.
name|parentNode
argument_list|()
operator|==
name|ele
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|serializeNamespaces
name|void
name|tst_QDom
operator|::
name|serializeNamespaces
parameter_list|()
specifier|const
block|{
specifier|const
name|char
modifier|*
specifier|const
name|input
init|=
literal|"<doc xmlns:b='http://example.com/'>"
literal|"<b:element b:name=''/>"
literal|"</doc>"
decl_stmt|;
name|QByteArray
name|ba
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|QBuffer
name|buffer
argument_list|(
operator|&
name|ba
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|buffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QXmlInputSource
name|source
argument_list|(
operator|&
name|buffer
argument_list|)
decl_stmt|;
name|QXmlSimpleReader
name|reader
decl_stmt|;
name|reader
operator|.
name|setFeature
argument_list|(
literal|"http://xml.org/sax/features/namespaces"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setFeature
argument_list|(
literal|"http://xml.org/sax/features/namespace-prefixes"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QDomDocument
name|doc
decl_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|.
name|setContent
argument_list|(
operator|&
name|source
argument_list|,
operator|&
name|reader
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QByteArray
name|serialized
argument_list|(
name|doc
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|QDomDocument
name|doc2
decl_stmt|;
name|QVERIFY
argument_list|(
name|doc2
operator|.
name|setContent
argument_list|(
name|doc
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Here we test that it roundtrips. */
name|QVERIFY
argument_list|(
name|isDeepEqual
argument_list|(
name|doc2
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|QDomDocument
name|doc3
decl_stmt|;
name|QVERIFY
argument_list|(
name|doc3
operator|.
name|setContent
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|serialized
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isDeepEqual
argument_list|(
name|doc3
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|flagInvalidNamespaces
name|void
name|tst_QDom
operator|::
name|flagInvalidNamespaces
parameter_list|()
specifier|const
block|{
specifier|const
name|char
modifier|*
specifier|const
name|input
init|=
literal|"<doc>"
literal|"<b:element xmlns:b='http://example.com/' b:name='' xmlns:b='http://example.com/'/>"
literal|"</doc>"
decl_stmt|;
name|QDomDocument
name|doc
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|doc
operator|.
name|setContent
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|input
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"The parser doesn't flag identical qualified attribute names. Fixing this would change behavior."
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|doc
operator|.
name|setContent
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|input
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|flagUndeclaredNamespace
name|void
name|tst_QDom
operator|::
name|flagUndeclaredNamespace
parameter_list|()
specifier|const
block|{
comment|/* Note, prefix 'a' is not declared. */
specifier|const
name|char
modifier|*
specifier|const
name|input
init|=
literal|"<a:doc xmlns:b='http://example.com/'>"
literal|"<b:element b:name=''/>"
literal|"</a:doc>"
decl_stmt|;
name|QByteArray
name|ba
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|QBuffer
name|buffer
argument_list|(
operator|&
name|ba
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|buffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QXmlInputSource
name|source
argument_list|(
operator|&
name|buffer
argument_list|)
decl_stmt|;
name|QXmlSimpleReader
name|reader
decl_stmt|;
name|reader
operator|.
name|setFeature
argument_list|(
literal|"http://xml.org/sax/features/namespaces"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setFeature
argument_list|(
literal|"http://xml.org/sax/features/namespace-prefixes"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QDomDocument
name|doc
decl_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"The parser doesn't flag not declared prefixes. Fixing this would change behavior."
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|doc
operator|.
name|setContent
argument_list|(
operator|&
name|source
argument_list|,
operator|&
name|reader
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|indentComments
name|void
name|tst_QDom
operator|::
name|indentComments
parameter_list|()
specifier|const
block|{
comment|/* We test that:      *      * - Whitespace is not added if a text node appears after a comment.      * - Whitespace is not added if a text node appears before a comment.      * - Indentation depth is linear with level depth.      */
specifier|const
name|char
modifier|*
specifier|const
name|input
init|=
literal|"<e>"
literal|"<!-- A Comment -->"
literal|"<b><!-- deep --></b>"
literal|"textNode"
literal|"<!-- Another Comment -->"
literal|"<!-- Another Comment2 -->"
literal|"textNode2"
literal|"</e>"
decl_stmt|;
specifier|const
name|char
modifier|*
specifier|const
name|expected
init|=
literal|"<e>\n"
literal|"<!-- A Comment -->\n"
literal|"<b>\n"
literal|"<!-- deep -->\n"
literal|"</b>"
literal|"textNode"
literal|"<!-- Another Comment -->\n"
literal|"<!-- Another Comment2 -->"
literal|"textNode2"
literal|"</e>\n"
decl_stmt|;
name|QDomDocument
name|doc
decl_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|.
name|setContent
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|input
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|serialized
argument_list|(
name|doc
operator|.
name|toString
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|serialized
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|checkLiveness
name|void
name|tst_QDom
operator|::
name|checkLiveness
parameter_list|()
specifier|const
block|{
name|QDomImplementation
name|impl
decl_stmt|;
name|QDomDocument
name|doc
argument_list|(
name|impl
operator|.
name|createDocument
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"doc"
argument_list|,
name|QDomDocumentType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QDomElement
name|ele
argument_list|(
name|doc
operator|.
name|documentElement
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QDomElement
name|e1
argument_list|(
name|doc
operator|.
name|createElement
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QDomElement
name|e2
argument_list|(
name|doc
operator|.
name|createElement
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QDomText
name|t1
argument_list|(
name|doc
operator|.
name|createTextNode
argument_list|(
literal|"content"
argument_list|)
argument_list|)
decl_stmt|;
name|ele
operator|.
name|appendChild
argument_list|(
name|e1
argument_list|)
expr_stmt|;
name|ele
operator|.
name|appendChild
argument_list|(
name|t1
argument_list|)
expr_stmt|;
name|ele
operator|.
name|appendChild
argument_list|(
name|e2
argument_list|)
expr_stmt|;
specifier|const
name|QDomNodeList
name|children
argument_list|(
name|ele
operator|.
name|childNodes
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|children
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|ele
operator|.
name|removeChild
argument_list|(
name|e1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|children
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|children
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
specifier|const
name|QDomNode
operator|&
argument_list|>
argument_list|(
name|t1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|children
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
specifier|const
name|QDomNode
operator|&
argument_list|>
argument_list|(
name|e2
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|reportDuplicateAttributes
name|void
name|tst_QDom
operator|::
name|reportDuplicateAttributes
parameter_list|()
specifier|const
block|{
name|QDomDocument
name|dd
decl_stmt|;
name|bool
name|isSuccess
init|=
name|dd
operator|.
name|setContent
argument_list|(
name|QLatin1String
argument_list|(
literal|"<test x=\"1\" x=\"2\"/>"
argument_list|)
argument_list|)
decl_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"The parser doesn't flag duplicate attributes. Fixing this would change behavior."
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|isSuccess
argument_list|,
literal|"Duplicate attributes are well-formedness errors, and should be reported as such."
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|namespacedAttributes
name|void
name|tst_QDom
operator|::
name|namespacedAttributes
parameter_list|()
specifier|const
block|{
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|xml
init|=
literal|"<?xml version='1.0' encoding='UTF-8' standalone='yes'?>\n"
literal|"<xan:td xmlns:xan=\"http://www.someurl.com/Something\" "
literal|"        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" "
literal|"        xsi:schemaLocation=\"http://www.someurl.com/Something/../../xml/td.xsd\" "
literal|"        xmlns:xi=\"http://www.w3.org/2001/XInclude\" "
literal|"        xmlns=\"http://www.someurl.com/Something\">\n"
literal|"<Title displayLabel='Title'>>>> SIMPLE BASIC OP - SEND - DUT AS SINK</Title>\n"
literal|"</xan:td>\n"
decl_stmt|;
name|QDomDocument
name|one
argument_list|(
literal|"document"
argument_list|)
decl_stmt|;
name|QString
name|error
decl_stmt|;
name|bool
name|docParsed
init|=
name|one
operator|.
name|setContent
argument_list|(
name|QByteArray
argument_list|(
name|xml
argument_list|)
argument_list|,
literal|true
argument_list|,
operator|&
name|error
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|docParsed
argument_list|,
name|qPrintable
argument_list|(
name|error
argument_list|)
argument_list|)
expr_stmt|;
name|QDomDocument
name|two
argument_list|(
literal|"document2"
argument_list|)
decl_stmt|;
name|docParsed
operator|=
name|two
operator|.
name|setContent
argument_list|(
name|one
operator|.
name|toByteArray
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|true
argument_list|,
operator|&
name|error
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|docParsed
argument_list|,
name|qPrintable
argument_list|(
name|error
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isDeepEqual
argument_list|(
name|one
argument_list|,
name|two
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|appendChildFromToDocument
name|void
name|tst_QDom
operator|::
name|appendChildFromToDocument
parameter_list|()
specifier|const
block|{
name|QDomDocument
name|doc
decl_stmt|;
specifier|const
name|QByteArray
name|input
argument_list|(
literal|"<e/>"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|QDomDocument
name|doc2
argument_list|(
name|doc
operator|.
name|documentElement
argument_list|()
operator|.
name|toDocument
argument_list|()
argument_list|)
decl_stmt|;
name|QDomElement
name|element
init|=
name|doc2
operator|.
name|createElement
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|element
operator|.
name|setAttribute
argument_list|(
literal|"name"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|documentElement
argument_list|()
operator|.
name|appendChild
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|iterateCDATA
name|void
name|tst_QDom
operator|::
name|iterateCDATA
parameter_list|()
specifier|const
block|{
specifier|const
name|QByteArray
name|input
argument_list|(
literal|"<e><![CDATA[data]]></e>"
argument_list|)
decl_stmt|;
name|QDomDocument
name|doc
decl_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|.
name|setContent
argument_list|(
name|input
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"<e><![CDATA[data]]></e>\n"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QDomElement
name|element
argument_list|(
name|doc
operator|.
name|documentElement
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|element
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
comment|/* The node at element.childNodes().at(0) is not an element,      * it's a CDATA section. */
specifier|const
name|QDomElement
name|child
argument_list|(
name|element
operator|.
name|childNodes
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toElement
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|child
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|element
operator|.
name|childNodes
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|isCDATASection
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \internal   \since 4.4   \brief This function cannot be factored into appendDocumentNode(). The          invocation of constructors/destructors is part of triggering the bug.  */
end_comment
begin_function
DECL|function|generateRequest
name|QDomDocument
name|tst_QDom
operator|::
name|generateRequest
parameter_list|()
block|{
name|QDomDocument
name|doc
decl_stmt|;
name|QDomElement
name|elem
init|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"test_elem"
argument_list|)
decl_stmt|;
name|elem
operator|.
name|setAttribute
argument_list|(
literal|"name"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|appendChild
argument_list|(
name|elem
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
end_function
begin_function
DECL|function|appendDocumentNode
name|void
name|tst_QDom
operator|::
name|appendDocumentNode
parameter_list|()
specifier|const
block|{
name|QDomDocument
name|doc
decl_stmt|;
name|QDomDocument
name|xml
init|=
name|generateRequest
argument_list|()
decl_stmt|;
name|QDomElement
name|elem
init|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"document"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|appendChild
argument_list|(
name|elem
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|xml
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|expected
argument_list|(
name|QLatin1String
argument_list|(
literal|"<document>\n<test_elem name=\"value\"/>\n</document>\n"
argument_list|)
argument_list|)
decl_stmt|;
name|elem
operator|.
name|appendChild
argument_list|(
name|xml
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|childNodes
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|elem
operator|.
name|appendChild
argument_list|(
name|xml
operator|.
name|firstChild
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|childNodes
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|umlautName
specifier|static
specifier|const
name|QChar
name|umlautName
index|[]
init|=
block|{
literal|'a'
block|,
literal|0xfc
block|,
literal|'b'
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*!   \internal     Write a german umlaut to a QByteArray, via a QTextStream.  */
end_comment
begin_function
DECL|function|germanUmlautToByteArray
name|void
name|tst_QDom
operator|::
name|germanUmlautToByteArray
parameter_list|()
specifier|const
block|{
name|QCOMPARE
argument_list|(
name|ulong
argument_list|(
sizeof|sizeof
argument_list|(
name|umlautName
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
argument_list|)
argument_list|,
name|ulong
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|name
argument_list|(
name|umlautName
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|QDomDocument
name|d
decl_stmt|;
name|d
operator|.
name|appendChild
argument_list|(
name|d
operator|.
name|createElement
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|data
decl_stmt|;
name|QBuffer
name|buffer
argument_list|(
operator|&
name|data
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|buffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|ts
argument_list|(
operator|&
name|buffer
argument_list|)
decl_stmt|;
name|ts
operator|.
name|setCodec
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|ts
operator|<<
name|d
operator|.
name|toString
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|close
argument_list|()
expr_stmt|;
name|QByteArray
name|baseline
argument_list|(
literal|"<a"
argument_list|)
decl_stmt|;
comment|/* http://www.fileformat.info/info/unicode/char/00FC/index.htm */
name|baseline
operator|+=
literal|0xC3
expr_stmt|;
name|baseline
operator|+=
literal|0xBC
expr_stmt|;
name|baseline
operator|+=
literal|"b/>\n"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|data
argument_list|,
name|baseline
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \internal     Write a german umlaut to a QFile, via a QTextStream.  */
end_comment
begin_function
DECL|function|germanUmlautToFile
name|void
name|tst_QDom
operator|::
name|germanUmlautToFile
parameter_list|()
specifier|const
block|{
comment|/* http://www.fileformat.info/info/unicode/char/00FC/index.htm */
name|QString
name|name
argument_list|(
name|QLatin1String
argument_list|(
literal|"german"
argument_list|)
argument_list|)
decl_stmt|;
name|name
operator|+=
name|QChar
argument_list|(
literal|0xFC
argument_list|)
expr_stmt|;
name|name
operator|+=
name|QLatin1String
argument_list|(
literal|"umlaut"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|name
operator|.
name|length
argument_list|()
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|QDomDocument
name|d
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|d
operator|.
name|appendChild
argument_list|(
name|d
operator|.
name|createElement
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
literal|"germanUmlautToFile.xml"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|ts
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|ts
operator|.
name|setCodec
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|ts
operator|<<
name|d
operator|.
name|toString
argument_list|()
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QFile
name|inFile
argument_list|(
literal|"germanUmlautToFile.xml"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|inFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|baseline
argument_list|(
name|QLatin1String
argument_list|(
literal|"<!DOCTYPE test>\n<german"
argument_list|)
argument_list|)
decl_stmt|;
name|baseline
operator|+=
name|QChar
argument_list|(
literal|0xFC
argument_list|)
expr_stmt|;
name|baseline
operator|+=
name|QLatin1String
argument_list|(
literal|"umlaut/>\n"
argument_list|)
expr_stmt|;
specifier|const
name|QByteArray
name|in
argument_list|(
name|inFile
operator|.
name|readAll
argument_list|()
argument_list|)
decl_stmt|;
comment|/* Check that it was wwritten out correctly. */
name|QCOMPARE
argument_list|(
name|in
operator|.
name|length
argument_list|()
argument_list|,
literal|34
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|in
argument_list|,
name|baseline
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
name|inFile
operator|.
name|close
argument_list|()
expr_stmt|;
comment|/* Check that we read it in correctly with QDomDocument::setContent(). */
name|QVERIFY
argument_list|(
name|inFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QDomDocument
name|dd
decl_stmt|;
name|QVERIFY
argument_list|(
name|dd
operator|.
name|setContent
argument_list|(
operator|&
name|inFile
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dd
operator|.
name|toString
argument_list|()
argument_list|,
name|baseline
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setInvalidDataPolicy
name|void
name|tst_QDom
operator|::
name|setInvalidDataPolicy
parameter_list|()
specifier|const
block|{
name|QDomImplementation
operator|::
name|setInvalidDataPolicy
argument_list|(
name|QDomImplementation
operator|::
name|ReturnNullNode
argument_list|)
expr_stmt|;
name|QDomDocument
name|doc
decl_stmt|;
name|QDomElement
name|elem
init|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"invalid name"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|elem
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|crashInSetContent
name|void
name|tst_QDom
operator|::
name|crashInSetContent
parameter_list|()
specifier|const
block|{
name|QDomImplementation
operator|::
name|setInvalidDataPolicy
argument_list|(
name|QDomImplementation
operator|::
name|ReturnNullNode
argument_list|)
expr_stmt|;
name|QDomDocument
name|docImport
decl_stmt|;
name|QCOMPARE
argument_list|(
name|docImport
operator|.
name|setContent
argument_list|(
name|QLatin1String
argument_list|(
literal|"<a:>text</a:>"
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|docImport
operator|.
name|setContent
argument_list|(
name|QLatin1String
argument_list|(
literal|"<?xml version=\"1.0\"?><e/>"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|doubleNamespaceDeclarations
name|void
name|tst_QDom
operator|::
name|doubleNamespaceDeclarations
parameter_list|()
specifier|const
block|{
name|QDomDocument
name|doc
decl_stmt|;
name|QFile
name|file
argument_list|(
name|SRCDIR
literal|"doubleNamespaces.xml"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QXmlSimpleReader
name|reader
decl_stmt|;
name|QXmlInputSource
name|source
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|.
name|setContent
argument_list|(
operator|&
name|source
argument_list|,
operator|&
name|reader
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
operator|==
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"<a>\n<b p:c=\"\" xmlns:p=\"NS\" p:d=\"\"/>\n</a>\n"
argument_list|)
operator|||
name|doc
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
operator|==
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"<a>\n<b p:c=\"\" p:d=\"\" xmlns:p=\"NS\"/>\n</a>\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setContentQXmlReaderOverload
name|void
name|tst_QDom
operator|::
name|setContentQXmlReaderOverload
parameter_list|()
specifier|const
block|{
name|QDomDocument
name|doc
decl_stmt|;
name|QXmlSimpleReader
name|reader
decl_stmt|;
name|QXmlInputSource
name|data
decl_stmt|;
name|data
operator|.
name|setData
argument_list|(
name|QByteArray
argument_list|(
literal|"<e/>"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
operator|&
name|data
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|documentElement
argument_list|()
operator|.
name|nodeName
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QDom
operator|::
name|cleanupTestCase
parameter_list|()
specifier|const
block|{
name|QFile
operator|::
name|remove
argument_list|(
literal|"germanUmlautToFile.xml"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toStringWithoutNewlines
name|void
name|tst_QDom
operator|::
name|toStringWithoutNewlines
parameter_list|()
specifier|const
block|{
name|QDomDocument
name|doc
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|QLatin1String
argument_list|(
literal|"<doc><e/></doc>"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"<doc>\n<e/>\n</doc>\n"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|.
name|toString
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"<doc><e/></doc>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|checkIntOverflow
name|void
name|tst_QDom
operator|::
name|checkIntOverflow
parameter_list|()
specifier|const
block|{
comment|/* This test takes a *very* long time to run, so it is at best a manual      * test. */
return|return;
comment|/* QDom used an internal global int which overflowed. So iterate until an      * uint wrapsaround. */
specifier|const
name|QString
name|xmlMessage
argument_list|(
name|QLatin1String
argument_list|(
literal|"<test/>"
argument_list|)
argument_list|)
decl_stmt|;
name|bool
name|hasWrapped
init|=
literal|false
decl_stmt|;
for|for
control|(
name|uint
name|i
init|=
literal|1
init|;
name|i
operator|!=
literal|0
condition|;
operator|++
name|i
control|)
block|{
comment|/* We want to exit the second time, not loop infinitely. */
if|if
condition|(
name|i
operator|==
literal|1
operator|&&
name|hasWrapped
condition|)
break|break;
else|else
name|hasWrapped
operator|=
literal|true
expr_stmt|;
name|QDomDocument
name|doc
decl_stmt|;
name|QVERIFY
argument_list|(
name|doc
operator|.
name|setContent
argument_list|(
name|xmlMessage
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QDomNodeList
name|nl
argument_list|(
name|doc
operator|.
name|elementsByTagName
argument_list|(
name|QLatin1String
argument_list|(
literal|"test"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|nl
operator|.
name|length
argument_list|()
argument_list|,
name|uint
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setContentWhitespace
name|void
name|tst_QDom
operator|::
name|setContentWhitespace
parameter_list|()
specifier|const
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|expectedValidity
argument_list|)
expr_stmt|;
name|QDomDocument
name|domDoc
decl_stmt|;
name|QCOMPARE
argument_list|(
name|domDoc
operator|.
name|setContent
argument_list|(
name|doc
argument_list|)
argument_list|,
name|expectedValidity
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedValidity
condition|)
name|QCOMPARE
argument_list|(
name|domDoc
operator|.
name|documentElement
argument_list|()
operator|.
name|nodeName
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setContentWhitespace_data
name|void
name|tst_QDom
operator|::
name|setContentWhitespace_data
parameter_list|()
specifier|const
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"doc"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"expectedValidity"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"<e/>"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"<e/>"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"<e/>"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"<e/>"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\n<e/>"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\n\n<e/>"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\n\n\n<e/>"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\n\n\n\n<e/>"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\t<e/>"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\t\t<e/>"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\t\t\t<e/>"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\t\t\t\t<e/>"
argument_list|)
operator|<<
literal|true
expr_stmt|;
comment|/* With XML prolog. */
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"<?xml version='1.0' ?><e/>"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"<?xml version='1.0' ?><e/>"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"<?xml version='1.0' ?><e/>"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"<?xml version='1.0' ?><e/>"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"<?xml version='1.0' ?><e/>"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\n<?xml version='1.0' ?><e/>"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\n\n<?xml version='1.0' ?><e/>"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\n\n\n<?xml version='1.0' ?><e/>"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\n\n\n\n<?xml version='1.0' ?><e/>"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\t<?xml version='1.0' ?><e/>"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\t\t<?xml version='1.0' ?><e/>"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\t\t\t<?xml version='1.0' ?><e/>"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\t\t\t\t<?xml version='1.0' ?><e/>"
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|taskQTBUG4595_dontAssertWhenDocumentSpecifiesUnknownEncoding
name|void
name|tst_QDom
operator|::
name|taskQTBUG4595_dontAssertWhenDocumentSpecifiesUnknownEncoding
parameter_list|()
specifier|const
block|{
name|QString
name|xmlWithUnknownEncoding
argument_list|(
literal|"<?xml version='1.0' encoding='unknown-encoding'?>"
literal|"<foo>"
literal|"<bar>How will this sentence be handled?</bar>"
literal|"</foo>"
argument_list|)
decl_stmt|;
name|QDomDocument
name|d
decl_stmt|;
name|QVERIFY
argument_list|(
name|d
operator|.
name|setContent
argument_list|(
name|xmlWithUnknownEncoding
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|dontAssert
init|=
name|d
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// this should not assert
name|QVERIFY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cloneDTD_QTBUG8398
name|void
name|tst_QDom
operator|::
name|cloneDTD_QTBUG8398
parameter_list|()
specifier|const
block|{
name|QString
name|dtd
argument_list|(
literal|"<?xml version='1.0' encoding='UTF-8'?>\n"
literal|"<!DOCTYPE first [\n"
literal|"<!ENTITY secondFile SYSTEM 'second.xml'>\n"
literal|"<!ENTITY thirdFile SYSTEM 'third.xml'>\n"
literal|"]>\n"
literal|"<first/>\n"
argument_list|)
decl_stmt|;
name|QDomDocument
name|domDocument
decl_stmt|;
name|QVERIFY
argument_list|(
name|domDocument
operator|.
name|setContent
argument_list|(
name|dtd
argument_list|)
argument_list|)
expr_stmt|;
name|QDomDocument
name|domDocument2
init|=
name|domDocument
operator|.
name|cloneNode
argument_list|(
literal|true
argument_list|)
operator|.
name|toDocument
argument_list|()
decl_stmt|;
comment|// for some reason, our DOM implementation reverts the order of entities
name|QString
name|expected
argument_list|(
literal|"<?xml version='1.0' encoding='UTF-8'?>\n"
literal|"<!DOCTYPE first [\n"
literal|"<!ENTITY thirdFile SYSTEM 'third.xml'>\n"
literal|"<!ENTITY secondFile SYSTEM 'second.xml'>\n"
literal|"]>\n"
literal|"<first/>\n"
argument_list|)
decl_stmt|;
name|QString
name|output
decl_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|output
argument_list|)
decl_stmt|;
name|domDocument2
operator|.
name|save
argument_list|(
name|stream
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|output
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QDom
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qdom.moc"
end_include
end_unit
