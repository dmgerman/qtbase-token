begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QDomDocument>
end_include
begin_include
include|#
directive|include
file|<qthread.h>
end_include
begin_include
include|#
directive|include
file|<qtcpserver.h>
end_include
begin_include
include|#
directive|include
file|<qtcpsocket.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<qstring.h>
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<qbuffer.h>
end_include
begin_include
include|#
directive|include
file|"parser/parser.h"
end_include
begin_decl_stmt
DECL|variable|inputString
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|inputString
init|=
literal|"<!DOCTYPE inferno [<!ELEMENT inferno (circle+)><!ELEMENT circle (#PCDATA)>]><inferno><circle /><circle /></inferno>"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|refString
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|refString
init|=
literal|"setDocumentLocator(locator={columnNumber=1, lineNumber=1})\nstartDocument()\nstartDTD(name=\"inferno\", publicId=\"\", systemId=\"\")\nendDTD()\nstartElement(namespaceURI=\"\", localName=\"inferno\", qName=\"inferno\", atts=[])\nstartElement(namespaceURI=\"\", localName=\"circle\", qName=\"circle\", atts=[])\nendElement(namespaceURI=\"\", localName=\"circle\", qName=\"circle\")\nstartElement(namespaceURI=\"\", localName=\"circle\", qName=\"circle\", atts=[])\nendElement(namespaceURI=\"\", localName=\"circle\", qName=\"circle\")\nendElement(namespaceURI=\"\", localName=\"inferno\", qName=\"inferno\")\nendDocument()\n"
decl_stmt|;
end_decl_stmt
begin_define
DECL|macro|TEST_PORT
define|#
directive|define
name|TEST_PORT
value|1088
end_define
begin_class
DECL|class|XmlServer
class|class
name|XmlServer
super|:
specifier|public
name|QThread
block|{
name|Q_OBJECT
public|public:
DECL|function|XmlServer
name|XmlServer
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QThread
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|quit_soon
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|listening
argument_list|(
literal|false
argument_list|)
block|{}
DECL|member|quit_soon
name|bool
name|quit_soon
decl_stmt|;
DECL|member|listening
name|bool
name|listening
decl_stmt|;
protected|protected:
specifier|virtual
name|void
name|run
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_define
DECL|macro|CHUNK_SIZE
define|#
directive|define
name|CHUNK_SIZE
value|2048
end_define
begin_function
DECL|function|run
name|void
name|XmlServer
operator|::
name|run
parameter_list|()
block|{
name|QTcpServer
name|srv
decl_stmt|;
name|listening
operator|=
name|srv
operator|.
name|listen
argument_list|(
name|QHostAddress
operator|::
name|Any
argument_list|,
name|TEST_PORT
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|listening
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Failed to listen on"
operator|<<
name|TEST_PORT
operator|<<
name|srv
operator|.
name|errorString
argument_list|()
expr_stmt|;
return|return;
block|}
for|for
control|(
init|;
condition|;
control|)
block|{
name|srv
operator|.
name|waitForNewConnection
argument_list|(
literal|100
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTcpSocket
modifier|*
name|sock
init|=
name|srv
operator|.
name|nextPendingConnection
argument_list|()
condition|)
block|{
name|QByteArray
name|fileName
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|char
name|c
decl_stmt|;
if|if
condition|(
name|sock
operator|->
name|getChar
argument_list|(
operator|&
name|c
argument_list|)
condition|)
block|{
if|if
condition|(
name|c
operator|==
literal|'\n'
condition|)
break|break;
name|fileName
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|sock
operator|->
name|waitForReadyRead
argument_list|(
operator|-
literal|1
argument_list|)
condition|)
break|break;
block|}
block|}
name|QFile
name|file
argument_list|(
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|fileName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"XmlServer::run(): could not open"
operator|<<
name|fileName
expr_stmt|;
name|sock
operator|->
name|abort
argument_list|()
expr_stmt|;
operator|delete
name|sock
expr_stmt|;
continue|continue;
block|}
name|QByteArray
name|data
init|=
name|file
operator|.
name|readAll
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|size
argument_list|()
condition|;
control|)
block|{
comment|//                sock->putChar(data.at(i));
name|int
name|cnt
init|=
name|qMin
argument_list|(
name|CHUNK_SIZE
argument_list|,
name|data
operator|.
name|size
argument_list|()
operator|-
name|i
argument_list|)
decl_stmt|;
name|sock
operator|->
name|write
argument_list|(
name|data
operator|.
name|constData
argument_list|()
operator|+
name|i
argument_list|,
name|cnt
argument_list|)
expr_stmt|;
name|i
operator|+=
name|cnt
expr_stmt|;
name|sock
operator|->
name|flush
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qSleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|quit_soon
condition|)
block|{
name|sock
operator|->
name|abort
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|sock
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
operator|delete
name|sock
expr_stmt|;
block|}
if|if
condition|(
name|quit_soon
condition|)
break|break;
block|}
name|srv
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_class
DECL|class|tst_QXmlSimpleReader
class|class
name|tst_QXmlSimpleReader
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QXmlSimpleReader
parameter_list|()
constructor_decl|;
name|~
name|tst_QXmlSimpleReader
parameter_list|()
destructor_decl|;
private|private
name|slots
private|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|testGoodXmlFile
parameter_list|()
function_decl|;
name|void
name|testGoodXmlFile_data
parameter_list|()
function_decl|;
name|void
name|testBadXmlFile
parameter_list|()
function_decl|;
name|void
name|testBadXmlFile_data
parameter_list|()
function_decl|;
name|void
name|testIncrementalParsing
parameter_list|()
function_decl|;
name|void
name|testIncrementalParsing_data
parameter_list|()
function_decl|;
name|void
name|setDataQString
parameter_list|()
function_decl|;
name|void
name|inputFromQIODevice
parameter_list|()
function_decl|;
name|void
name|inputFromString
parameter_list|()
function_decl|;
name|void
name|inputFromSocket_data
parameter_list|()
function_decl|;
name|void
name|inputFromSocket
parameter_list|()
function_decl|;
name|void
name|idsInParseException1
parameter_list|()
function_decl|;
name|void
name|idsInParseException2
parameter_list|()
function_decl|;
name|void
name|preserveCharacterReferences
parameter_list|()
specifier|const
function_decl|;
name|void
name|reportNamespace
parameter_list|()
specifier|const
function_decl|;
name|void
name|reportNamespace_data
parameter_list|()
specifier|const
function_decl|;
name|void
name|roundtripWithNamespaces
parameter_list|()
specifier|const
function_decl|;
name|void
name|dtdRecursionLimit
parameter_list|()
function_decl|;
private|private:
specifier|static
name|QDomDocument
name|fromByteArray
parameter_list|(
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|ba
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|)
function_decl|;
DECL|member|server
name|XmlServer
modifier|*
name|server
decl_stmt|;
DECL|member|prefix
name|QString
name|prefix
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QXmlSimpleReader
name|tst_QXmlSimpleReader
operator|::
name|tst_QXmlSimpleReader
parameter_list|()
member_init_list|:
name|server
argument_list|(
operator|new
name|XmlServer
argument_list|(
name|this
argument_list|)
argument_list|)
block|{
name|server
operator|->
name|start
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~tst_QXmlSimpleReader
name|tst_QXmlSimpleReader
operator|::
name|~
name|tst_QXmlSimpleReader
parameter_list|()
block|{
name|server
operator|->
name|quit_soon
operator|=
literal|true
expr_stmt|;
name|server
operator|->
name|wait
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_class
DECL|class|MyErrorHandler
class|class
name|MyErrorHandler
super|:
specifier|public
name|QXmlErrorHandler
block|{
public|public:
DECL|member|publicId
name|QString
name|publicId
decl_stmt|;
DECL|member|systemId
name|QString
name|systemId
decl_stmt|;
DECL|function|error
specifier|virtual
name|bool
name|error
parameter_list|(
specifier|const
name|QXmlParseException
modifier|&
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
DECL|function|errorString
specifier|virtual
name|QString
name|errorString
parameter_list|()
specifier|const
block|{
return|return
name|QString
argument_list|()
return|;
block|}
DECL|function|fatalError
specifier|virtual
name|bool
name|fatalError
parameter_list|(
specifier|const
name|QXmlParseException
modifier|&
name|exception
parameter_list|)
block|{
name|publicId
operator|=
name|exception
operator|.
name|publicId
argument_list|()
expr_stmt|;
name|systemId
operator|=
name|exception
operator|.
name|systemId
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|warning
specifier|virtual
name|bool
name|warning
parameter_list|(
specifier|const
name|QXmlParseException
modifier|&
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|initTestCase
name|void
name|tst_QXmlSimpleReader
operator|::
name|initTestCase
parameter_list|()
block|{
name|prefix
operator|=
name|QFileInfo
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"xmldocs"
argument_list|)
argument_list|)
operator|.
name|absolutePath
argument_list|()
expr_stmt|;
if|if
condition|(
name|prefix
operator|.
name|isEmpty
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Cannot find xmldocs testdata!"
argument_list|)
expr_stmt|;
name|QDir
operator|::
name|setCurrent
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|idsInParseException1
name|void
name|tst_QXmlSimpleReader
operator|::
name|idsInParseException1
parameter_list|()
block|{
name|MyErrorHandler
name|handler
decl_stmt|;
name|QXmlSimpleReader
name|reader
decl_stmt|;
name|reader
operator|.
name|setErrorHandler
argument_list|(
operator|&
name|handler
argument_list|)
expr_stmt|;
comment|/* A non-wellformed XML document with PUBLIC and SYSTEM. */
name|QByteArray
name|input
argument_list|(
literal|"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" "
literal|"\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">"
literal|"<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">"
literal|"<head>"
literal|"<a/><a/><a/>"
literal|"<head/>"
argument_list|)
decl_stmt|;
name|QBuffer
name|buff
argument_list|(
operator|&
name|input
argument_list|)
decl_stmt|;
name|QXmlInputSource
name|source
argument_list|(
operator|&
name|buff
argument_list|)
decl_stmt|;
comment|/* Yes, parsing should be reported as a failure. */
name|QVERIFY
argument_list|(
operator|!
name|reader
operator|.
name|parse
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|handler
operator|.
name|publicId
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"-//W3C//DTD XHTML 1.0 Strict//EN"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|handler
operator|.
name|systemId
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|idsInParseException2
name|void
name|tst_QXmlSimpleReader
operator|::
name|idsInParseException2
parameter_list|()
block|{
name|MyErrorHandler
name|handler
decl_stmt|;
name|QXmlSimpleReader
name|reader
decl_stmt|;
name|reader
operator|.
name|setErrorHandler
argument_list|(
operator|&
name|handler
argument_list|)
expr_stmt|;
comment|/* A non-wellformed XML document with only SYSTEM. */
name|QByteArray
name|input
argument_list|(
literal|"<!DOCTYPE html SYSTEM \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">"
literal|"<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">"
literal|"<head>"
literal|"<a/><a/><a/>"
literal|"<head/>"
argument_list|)
decl_stmt|;
name|QBuffer
name|buff
argument_list|(
operator|&
name|input
argument_list|)
decl_stmt|;
name|QXmlInputSource
name|source
argument_list|(
operator|&
name|buff
argument_list|)
decl_stmt|;
comment|/* Yes, parsing should be reported as a failure. */
name|QVERIFY
argument_list|(
operator|!
name|reader
operator|.
name|parse
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|handler
operator|.
name|publicId
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|handler
operator|.
name|systemId
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|findXmlFiles
specifier|static
name|QStringList
name|findXmlFiles
parameter_list|(
name|QString
name|dir_name
parameter_list|)
block|{
name|QStringList
name|result
decl_stmt|;
name|QDir
name|dir
argument_list|(
name|dir_name
argument_list|)
decl_stmt|;
name|QFileInfoList
name|file_list
init|=
name|dir
operator|.
name|entryInfoList
argument_list|(
name|QStringList
argument_list|(
literal|"*.xml"
argument_list|)
argument_list|,
name|QDir
operator|::
name|Files
argument_list|,
name|QDir
operator|::
name|Name
argument_list|)
decl_stmt|;
name|QFileInfoList
operator|::
name|const_iterator
name|it
init|=
name|file_list
operator|.
name|begin
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|file_list
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
specifier|const
name|QFileInfo
modifier|&
name|file_info
init|=
operator|*
name|it
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
name|file_info
operator|.
name|filePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|testGoodXmlFile_data
name|void
name|tst_QXmlSimpleReader
operator|::
name|testGoodXmlFile_data
parameter_list|()
block|{
specifier|const
name|char
modifier|*
specifier|const
name|good_data_dirs
index|[]
init|=
block|{
literal|"xmldocs/valid/sa"
block|,
literal|"xmldocs/valid/not-sa"
block|,
literal|"xmldocs/valid/ext-sa"
block|,
literal|0
block|}
decl_stmt|;
specifier|const
name|char
modifier|*
specifier|const
modifier|*
name|d
init|=
name|good_data_dirs
decl_stmt|;
name|QStringList
name|good_file_list
decl_stmt|;
for|for
control|(
init|;
operator|*
name|d
operator|!=
literal|0
condition|;
operator|++
name|d
control|)
name|good_file_list
operator|+=
name|findXmlFiles
argument_list|(
operator|*
name|d
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"file_name"
argument_list|)
expr_stmt|;
name|QStringList
operator|::
name|const_iterator
name|it
init|=
name|good_file_list
operator|.
name|begin
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|good_file_list
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
name|QTest
operator|::
name|newRow
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
operator|*
name|it
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testGoodXmlFile
name|void
name|tst_QXmlSimpleReader
operator|::
name|testGoodXmlFile
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|file_name
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|file_name
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|content
init|=
name|file
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|Parser
name|parser
decl_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/valid/sa/089.xml"
argument_list|,
literal|"a form feed character is not accepted in XML"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parseFile
argument_list|(
operator|&
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
name|ref_file
argument_list|(
name|file_name
operator|+
literal|".ref"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|ref_file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|ref_stream
argument_list|(
operator|&
name|ref_file
argument_list|)
decl_stmt|;
name|ref_stream
operator|.
name|setCodec
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|QString
name|ref_file_contents
init|=
name|ref_stream
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|result
argument_list|()
argument_list|,
name|ref_file_contents
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testBadXmlFile_data
name|void
name|tst_QXmlSimpleReader
operator|::
name|testBadXmlFile_data
parameter_list|()
block|{
specifier|const
name|char
modifier|*
specifier|const
name|bad_data_dirs
index|[]
init|=
block|{
literal|"xmldocs/not-wf/sa"
block|,
literal|0
block|}
decl_stmt|;
specifier|const
name|char
modifier|*
specifier|const
modifier|*
name|d
init|=
name|bad_data_dirs
decl_stmt|;
name|QStringList
name|bad_file_list
decl_stmt|;
for|for
control|(
init|;
operator|*
name|d
operator|!=
literal|0
condition|;
operator|++
name|d
control|)
name|bad_file_list
operator|+=
name|findXmlFiles
argument_list|(
operator|*
name|d
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"file_name"
argument_list|)
expr_stmt|;
name|QStringList
operator|::
name|const_iterator
name|it
init|=
name|bad_file_list
operator|.
name|begin
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|bad_file_list
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
name|QTest
operator|::
name|newRow
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
operator|*
name|it
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testBadXmlFile
name|void
name|tst_QXmlSimpleReader
operator|::
name|testBadXmlFile
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|file_name
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|file_name
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|Parser
name|parser
decl_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/030.xml"
argument_list|,
literal|"a form feed character is not accepted in XML"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/031.xml"
argument_list|,
literal|"a form feed character is not accepted in a processing instruction"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/032.xml"
argument_list|,
literal|"a form feed character is not accepted in a comment"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/033.xml"
argument_list|,
literal|"overlong sequence - small latin letter d should be rejected"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/038.xml"
argument_list|,
literal|"attribute x redefined; should be rejected"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/072.xml"
argument_list|,
literal|"entity foo not defined"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/073.xml"
argument_list|,
literal|"entity f not defined"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/074.xml"
argument_list|,
literal|"entity e is not well-formed (</foo><foo>)"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/076.xml"
argument_list|,
literal|"entity foo is not defined"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/077.xml"
argument_list|,
literal|"entity bar is not defined within the definition of entity foo"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/078.xml"
argument_list|,
literal|"entity foo not defined"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/085.xml"
argument_list|,
literal|"Unfinished Public or System Id"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/086.xml"
argument_list|,
literal|"Unfinished Public or System Id"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/087.xml"
argument_list|,
literal|"Unfinished Public or System Id"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/101.xml"
argument_list|,
literal|"Invalid XML encoding name (space before utf-8)"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/102.xml"
argument_list|,
literal|"Invalid version specification (1.0 followed by space)"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/104.xml"
argument_list|,
literal|"Premature end of data in tag foo"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/116.xml"
argument_list|,
literal|"Invalid decimal value"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/117.xml"
argument_list|,
literal|"No name"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/119.xml"
argument_list|,
literal|"No name"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/122.xml"
argument_list|,
literal|"; expected in declaration of element"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/132.xml"
argument_list|,
literal|"; expected in declaration of element"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/142.xml"
argument_list|,
literal|"Invalid value '0'"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/143.xml"
argument_list|,
literal|"Invalid value '31'"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/144.xml"
argument_list|,
literal|"noncharacter code 0xFFFF should be rejected"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/145.xml"
argument_list|,
literal|"surrogate code point 0xD800 should be rejected"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/146.xml"
argument_list|,
literal|"code point out-of-range 0x110000 (must be< 0x10FFFE)"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/160.xml"
argument_list|,
literal|"Parameter references forbidden in internal subset"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/162.xml"
argument_list|,
literal|"Parameter references forbidden in internal subset"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/168.xml"
argument_list|,
literal|"Surrogate code point 0xEDA080 should be rejected"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/169.xml"
argument_list|,
literal|"Surrogate code point 0xEDB080 should be rejected"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/170.xml"
argument_list|,
literal|"Code point 0xF7808080 should be rejected"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/180.xml"
argument_list|,
literal|"Entity e is not defined"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/181.xml"
argument_list|,
literal|"Unregistered error message"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/182.xml"
argument_list|,
literal|"Comment not terminated"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/185.xml"
argument_list|,
literal|"Entity e not defined"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/186.xml"
argument_list|,
literal|"Attributes constructs error"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|parser
operator|.
name|parseFile
argument_list|(
operator|&
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
name|ref_file
argument_list|(
name|file_name
operator|+
literal|".ref"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|ref_file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|ref_stream
argument_list|(
operator|&
name|ref_file
argument_list|)
decl_stmt|;
name|ref_stream
operator|.
name|setCodec
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|QString
name|ref_file_contents
init|=
name|ref_stream
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"xmldocs/not-wf/sa/145.xml"
argument_list|,
literal|"Surrogate code point 0xD800 should be rejected"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|result
argument_list|()
argument_list|,
name|ref_file_contents
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testIncrementalParsing_data
name|void
name|tst_QXmlSimpleReader
operator|::
name|testIncrementalParsing_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"file_name"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"chunkSize"
argument_list|)
expr_stmt|;
specifier|const
name|char
modifier|*
specifier|const
name|good_data_dirs
index|[]
init|=
block|{
literal|"xmldocs/valid/sa"
block|,
literal|"xmldocs/valid/not-sa"
block|,
literal|"xmldocs/valid/ext-sa"
block|,
literal|0
block|}
decl_stmt|;
specifier|const
name|char
modifier|*
specifier|const
modifier|*
name|d
init|=
name|good_data_dirs
decl_stmt|;
name|QStringList
name|good_file_list
decl_stmt|;
for|for
control|(
init|;
operator|*
name|d
operator|!=
literal|0
condition|;
operator|++
name|d
control|)
name|good_file_list
operator|+=
name|findXmlFiles
argument_list|(
operator|*
name|d
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|QStringList
operator|::
name|const_iterator
name|it
init|=
name|good_file_list
operator|.
name|begin
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|good_file_list
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
operator|*
name|it
operator|==
literal|"xmldocs/valid/sa/089.xml"
condition|)
continue|continue;
comment|// TODO: fails at the moment -- don't bother
if|if
condition|(
name|i
operator|==
literal|1
operator|&&
operator|(
operator|*
name|it
operator|==
literal|"xmldocs/valid/sa/049.xml"
operator|||
operator|*
name|it
operator|==
literal|"xmldocs/valid/sa/050.xml"
operator|||
operator|*
name|it
operator|==
literal|"xmldocs/valid/sa/051.xml"
operator|||
operator|*
name|it
operator|==
literal|"xmldocs/valid/sa/052.xml"
operator|)
condition|)
block|{
continue|continue;
comment|// TODO: fails at the moment -- don't bother
block|}
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"%1 %2"
argument_list|)
operator|.
name|arg
argument_list|(
operator|*
name|it
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
operator|*
name|it
operator|<<
name|i
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|testIncrementalParsing
name|void
name|tst_QXmlSimpleReader
operator|::
name|testIncrementalParsing
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|file_name
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|chunkSize
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|file_name
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|Parser
name|parser
decl_stmt|;
name|QXmlInputSource
name|source
decl_stmt|;
name|bool
name|first
init|=
literal|true
decl_stmt|;
while|while
condition|(
operator|!
name|file
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|source
operator|.
name|setData
argument_list|(
name|file
operator|.
name|read
argument_list|(
name|chunkSize
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|first
condition|)
block|{
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
operator|&
name|source
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parseContinue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// detect end of document
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parseContinue
argument_list|()
argument_list|)
expr_stmt|;
comment|// parsing should fail after the end of the document was reached
name|QVERIFY
argument_list|(
operator|!
name|parser
operator|.
name|parseContinue
argument_list|()
argument_list|)
expr_stmt|;
name|QFile
name|ref_file
argument_list|(
name|file_name
operator|+
literal|".ref"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|ref_file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|ref_stream
argument_list|(
operator|&
name|ref_file
argument_list|)
decl_stmt|;
name|ref_stream
operator|.
name|setCodec
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|QString
name|ref_file_contents
init|=
name|ref_stream
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|result
argument_list|()
argument_list|,
name|ref_file_contents
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setDataQString
name|void
name|tst_QXmlSimpleReader
operator|::
name|setDataQString
parameter_list|()
block|{
name|QString
name|input
init|=
name|inputString
decl_stmt|;
name|QString
name|ref
init|=
name|refString
decl_stmt|;
name|QXmlInputSource
name|source
decl_stmt|;
name|Parser
name|parser
decl_stmt|;
name|source
operator|.
name|setData
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
operator|&
name|source
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|QBuffer
name|resultBuffer
decl_stmt|;
name|resultBuffer
operator|.
name|setData
argument_list|(
name|parser
operator|.
name|result
argument_list|()
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
name|QBuffer
name|refBuffer
decl_stmt|;
name|refBuffer
operator|.
name|setData
argument_list|(
name|ref
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
name|resultBuffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|refBuffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|bool
name|success
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|resultBuffer
operator|.
name|canReadLine
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|refBuffer
operator|.
name|canReadLine
argument_list|()
condition|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
break|break ;
block|}
if|if
condition|(
name|resultBuffer
operator|.
name|readLine
argument_list|()
operator|.
name|simplified
argument_list|()
operator|!=
name|refBuffer
operator|.
name|readLine
argument_list|()
operator|.
name|simplified
argument_list|()
condition|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
break|break ;
block|}
block|}
name|QVERIFY
argument_list|(
name|success
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|inputFromQIODevice
name|void
name|tst_QXmlSimpleReader
operator|::
name|inputFromQIODevice
parameter_list|()
block|{
name|QBuffer
name|inputBuffer
decl_stmt|;
name|inputBuffer
operator|.
name|setData
argument_list|(
name|inputString
argument_list|)
expr_stmt|;
name|QXmlInputSource
name|source
argument_list|(
operator|&
name|inputBuffer
argument_list|)
decl_stmt|;
name|Parser
name|parser
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
operator|&
name|source
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|QBuffer
name|resultBuffer
decl_stmt|;
name|resultBuffer
operator|.
name|setData
argument_list|(
name|parser
operator|.
name|result
argument_list|()
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
name|QBuffer
name|refBuffer
decl_stmt|;
name|refBuffer
operator|.
name|setData
argument_list|(
name|refString
argument_list|)
expr_stmt|;
name|resultBuffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|refBuffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|bool
name|success
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|resultBuffer
operator|.
name|canReadLine
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|refBuffer
operator|.
name|canReadLine
argument_list|()
condition|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
break|break ;
block|}
if|if
condition|(
name|resultBuffer
operator|.
name|readLine
argument_list|()
operator|.
name|simplified
argument_list|()
operator|!=
name|refBuffer
operator|.
name|readLine
argument_list|()
operator|.
name|simplified
argument_list|()
condition|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
break|break ;
block|}
block|}
name|QVERIFY
argument_list|(
name|success
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|inputFromString
name|void
name|tst_QXmlSimpleReader
operator|::
name|inputFromString
parameter_list|()
block|{
name|QString
name|str
init|=
literal|"<foo><bar>kake</bar><bar>ja</bar></foo>"
decl_stmt|;
name|QBuffer
name|buff
decl_stmt|;
name|buff
operator|.
name|setData
argument_list|(
operator|(
name|char
operator|*
operator|)
name|str
operator|.
name|utf16
argument_list|()
argument_list|,
name|str
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|ushort
argument_list|)
argument_list|)
expr_stmt|;
name|QXmlInputSource
name|input
argument_list|(
operator|&
name|buff
argument_list|)
decl_stmt|;
name|QXmlSimpleReader
name|reader
decl_stmt|;
name|QXmlDefaultHandler
name|handler
decl_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
operator|&
name|handler
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|reader
operator|.
name|parse
argument_list|(
operator|&
name|input
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|inputFromSocket_data
name|void
name|tst_QXmlSimpleReader
operator|::
name|inputFromSocket_data
parameter_list|()
block|{
name|QStringList
name|files
init|=
name|findXmlFiles
argument_list|(
name|QLatin1String
argument_list|(
literal|"encodings"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|files
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"file_name"
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|file_name
decl|,
name|files
control|)
name|QTest
operator|::
name|newRow
argument_list|(
name|file_name
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|file_name
expr_stmt|;
block|}
end_function
begin_function
DECL|function|inputFromSocket
name|void
name|tst_QXmlSimpleReader
operator|::
name|inputFromSocket
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|file_name
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|server
operator|->
name|listening
argument_list|)
expr_stmt|;
name|QTcpSocket
name|sock
decl_stmt|;
name|sock
operator|.
name|connectToHost
argument_list|(
name|QHostAddress
operator|::
name|LocalHost
argument_list|,
name|TEST_PORT
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|sock
operator|.
name|waitForConnected
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Cannot connect on port "
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|TEST_PORT
argument_list|)
operator|+
name|QStringLiteral
argument_list|(
literal|": "
argument_list|)
operator|+
name|sock
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sock
operator|.
name|write
argument_list|(
name|file_name
operator|.
name|toLocal8Bit
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sock
operator|.
name|waitForBytesWritten
argument_list|()
argument_list|)
expr_stmt|;
name|QXmlInputSource
name|input
argument_list|(
operator|&
name|sock
argument_list|)
decl_stmt|;
name|QXmlSimpleReader
name|reader
decl_stmt|;
name|QXmlDefaultHandler
name|handler
decl_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
operator|&
name|handler
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|reader
operator|.
name|parse
argument_list|(
operator|&
name|input
argument_list|)
argument_list|)
expr_stmt|;
comment|//    qDebug()<< "tst_QXmlSimpleReader::inputFromSocket(): success"<< file_name;
block|}
end_function
begin_function
DECL|function|preserveCharacterReferences
name|void
name|tst_QXmlSimpleReader
operator|::
name|preserveCharacterReferences
parameter_list|()
specifier|const
block|{
class|class
name|Handler
super|:
specifier|public
name|QXmlDefaultHandler
block|{
public|public:
specifier|virtual
name|bool
name|characters
parameter_list|(
specifier|const
name|QString
modifier|&
name|chars
parameter_list|)
block|{
name|received
operator|=
name|chars
expr_stmt|;
return|return
literal|true
return|;
block|}
name|QString
name|received
decl_stmt|;
block|}
class|;
block|{
name|QByteArray
name|input
argument_list|(
literal|"<e>A&#160;&#160;&#160;&#160;A</e>"
argument_list|)
decl_stmt|;
name|QBuffer
name|buff
argument_list|(
operator|&
name|input
argument_list|)
decl_stmt|;
name|QXmlInputSource
name|source
argument_list|(
operator|&
name|buff
argument_list|)
decl_stmt|;
name|Handler
name|h
decl_stmt|;
name|QXmlSimpleReader
name|reader
decl_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
operator|&
name|h
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|reader
operator|.
name|parse
argument_list|(
operator|&
name|source
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|h
operator|.
name|received
argument_list|,
name|QLatin1Char
argument_list|(
literal|'A'
argument_list|)
operator|+
name|QString
argument_list|(
literal|4
argument_list|,
name|QChar
argument_list|(
literal|160
argument_list|)
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'A'
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QByteArray
name|input
argument_list|(
literal|"<e>&#160;&#160;&#160;&#160;</e>"
argument_list|)
decl_stmt|;
name|QBuffer
name|buff
argument_list|(
operator|&
name|input
argument_list|)
decl_stmt|;
name|QXmlInputSource
name|source
argument_list|(
operator|&
name|buff
argument_list|)
decl_stmt|;
name|Handler
name|h
decl_stmt|;
name|QXmlSimpleReader
name|reader
decl_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
operator|&
name|h
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|reader
operator|.
name|parse
argument_list|(
operator|&
name|source
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|h
operator|.
name|received
argument_list|,
name|QString
argument_list|(
literal|4
argument_list|,
name|QChar
argument_list|(
literal|160
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|reportNamespace
name|void
name|tst_QXmlSimpleReader
operator|::
name|reportNamespace
parameter_list|()
specifier|const
block|{
class|class
name|Handler
super|:
specifier|public
name|QXmlDefaultHandler
block|{
public|public:
specifier|virtual
name|bool
name|startElement
parameter_list|(
specifier|const
name|QString
modifier|&
name|namespaceURI
parameter_list|,
specifier|const
name|QString
modifier|&
name|localName
parameter_list|,
specifier|const
name|QString
modifier|&
name|qName
parameter_list|,
specifier|const
name|QXmlAttributes
modifier|&
parameter_list|)
block|{
name|startNamespaceURI
operator|=
name|namespaceURI
expr_stmt|;
name|startLocalName
operator|=
name|localName
expr_stmt|;
name|startQName
operator|=
name|qName
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|virtual
name|bool
name|endElement
parameter_list|(
specifier|const
name|QString
modifier|&
name|namespaceURI
parameter_list|,
specifier|const
name|QString
modifier|&
name|localName
parameter_list|,
specifier|const
name|QString
modifier|&
name|qName
parameter_list|)
block|{
name|endNamespaceURI
operator|=
name|namespaceURI
expr_stmt|;
name|endLocalName
operator|=
name|localName
expr_stmt|;
name|endQName
operator|=
name|qName
expr_stmt|;
return|return
literal|true
return|;
block|}
name|QString
name|startLocalName
decl_stmt|;
name|QString
name|startQName
decl_stmt|;
name|QString
name|startNamespaceURI
decl_stmt|;
name|QString
name|endLocalName
decl_stmt|;
name|QString
name|endQName
decl_stmt|;
name|QString
name|endNamespaceURI
decl_stmt|;
block|}
class|;
name|QXmlSimpleReader
name|reader
decl_stmt|;
name|Handler
name|handler
decl_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
operator|&
name|handler
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QBuffer
name|buffer
argument_list|(
operator|&
name|input
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|buffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QXmlInputSource
name|source
argument_list|(
operator|&
name|buffer
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|reader
operator|.
name|parse
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedQName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedLocalName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedNamespace
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|handler
operator|.
name|startNamespaceURI
argument_list|,
name|expectedNamespace
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|handler
operator|.
name|startLocalName
argument_list|,
name|expectedLocalName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|handler
operator|.
name|startQName
argument_list|,
name|expectedQName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|handler
operator|.
name|endNamespaceURI
argument_list|,
name|expectedNamespace
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|handler
operator|.
name|endLocalName
argument_list|,
name|expectedLocalName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|handler
operator|.
name|endQName
argument_list|,
name|expectedQName
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|reportNamespace_data
name|void
name|tst_QXmlSimpleReader
operator|::
name|reportNamespace_data
parameter_list|()
specifier|const
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedQName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedLocalName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedNamespace"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"default ns"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"<element xmlns='http://example.com/'/>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"element"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"element"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"http://example.com/"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"with prefix"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"<p:element xmlns:p='http://example.com/'/>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"p:element"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"element"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"http://example.com/"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromByteArray
name|QDomDocument
name|tst_QXmlSimpleReader
operator|::
name|fromByteArray
parameter_list|(
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|ba
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|)
block|{
name|QDomDocument
name|doc
argument_list|(
name|title
argument_list|)
decl_stmt|;
operator|*
name|ok
operator|=
name|doc
operator|.
name|setContent
argument_list|(
name|ba
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
end_function
begin_function
DECL|function|roundtripWithNamespaces
name|void
name|tst_QXmlSimpleReader
operator|::
name|roundtripWithNamespaces
parameter_list|()
specifier|const
block|{
specifier|const
name|char
modifier|*
specifier|const
name|expected
init|=
literal|"<element b:attr=\"value\" xmlns:a=\"http://www.example.com/A\" xmlns:b=\"http://www.example.com/B\" />\n"
decl_stmt|;
name|bool
name|ok
decl_stmt|;
block|{
specifier|const
name|char
modifier|*
specifier|const
name|xml
init|=
literal|"<element xmlns:b=\"http://www.example.com/B\" b:attr=\"value\" xmlns:a=\"http://www.example.com/A\"/>"
decl_stmt|;
specifier|const
name|QDomDocument
name|one
argument_list|(
name|fromByteArray
argument_list|(
literal|"document"
argument_list|,
name|xml
argument_list|,
operator|&
name|ok
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
specifier|const
name|QDomDocument
name|two
argument_list|(
name|fromByteArray
argument_list|(
literal|"document2"
argument_list|,
name|one
operator|.
name|toByteArray
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"Known problem, see 154573. The fix happens to break uic."
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|expected
argument_list|,
name|one
operator|.
name|toByteArray
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|one
operator|.
name|toByteArray
argument_list|(
literal|2
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|,
name|two
operator|.
name|toByteArray
argument_list|(
literal|2
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|two
operator|.
name|toByteArray
argument_list|(
literal|2
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|,
name|two
operator|.
name|toByteArray
argument_list|(
literal|2
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|char
modifier|*
specifier|const
name|xml
init|=
literal|"<element b:attr=\"value\" xmlns:b=\"http://www.example.com/B\" xmlns:a=\"http://www.example.com/A\"/>"
decl_stmt|;
specifier|const
name|QDomDocument
name|one
argument_list|(
name|fromByteArray
argument_list|(
literal|"document"
argument_list|,
name|xml
argument_list|,
operator|&
name|ok
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
specifier|const
name|QDomDocument
name|two
argument_list|(
name|fromByteArray
argument_list|(
literal|"document2"
argument_list|,
name|one
operator|.
name|toByteArray
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|expected
argument_list|,
name|one
operator|.
name|toByteArray
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|one
operator|.
name|toByteArray
argument_list|(
literal|2
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|,
name|two
operator|.
name|toByteArray
argument_list|(
literal|2
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|two
operator|.
name|toByteArray
argument_list|(
literal|2
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|,
name|two
operator|.
name|toByteArray
argument_list|(
literal|2
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|TestHandler
class|class
name|TestHandler
super|:
specifier|public
name|QXmlDefaultHandler
block|{
public|public:
DECL|function|TestHandler
name|TestHandler
parameter_list|()
member_init_list|:
name|recursionCount
argument_list|(
literal|0
argument_list|)
block|{     }
DECL|function|internalEntityDecl
name|bool
name|internalEntityDecl
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
specifier|const
name|QString
modifier|&
name|value
parameter_list|)
block|{
operator|++
name|recursionCount
expr_stmt|;
return|return
name|QXmlDefaultHandler
operator|::
name|internalEntityDecl
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|member|recursionCount
name|int
name|recursionCount
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|dtdRecursionLimit
name|void
name|tst_QXmlSimpleReader
operator|::
name|dtdRecursionLimit
parameter_list|()
block|{
name|QFile
name|file
argument_list|(
literal|"xmldocs/2-levels-nested-dtd.xml"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QXmlSimpleReader
name|xmlReader
decl_stmt|;
block|{
name|QXmlInputSource
modifier|*
name|source
init|=
operator|new
name|QXmlInputSource
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|TestHandler
name|handler
decl_stmt|;
name|xmlReader
operator|.
name|setDeclHandler
argument_list|(
operator|&
name|handler
argument_list|)
expr_stmt|;
name|xmlReader
operator|.
name|setErrorHandler
argument_list|(
operator|&
name|handler
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|xmlReader
operator|.
name|parse
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|file
operator|.
name|setFileName
argument_list|(
literal|"xmldocs/1-levels-nested-dtd.xml"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|QXmlInputSource
modifier|*
name|source
init|=
operator|new
name|QXmlInputSource
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|TestHandler
name|handler
decl_stmt|;
name|xmlReader
operator|.
name|setDeclHandler
argument_list|(
operator|&
name|handler
argument_list|)
expr_stmt|;
name|xmlReader
operator|.
name|setErrorHandler
argument_list|(
operator|&
name|handler
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|xmlReader
operator|.
name|parse
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
comment|// The error wasn't because of the recursion limit being reached,
comment|// it was because the document is not valid.
name|QVERIFY
argument_list|(
name|handler
operator|.
name|recursionCount
operator|<
literal|2
argument_list|)
expr_stmt|;
block|}
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|file
operator|.
name|setFileName
argument_list|(
literal|"xmldocs/internal-entity-polynomial-attribute.xml"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|QXmlInputSource
modifier|*
name|source
init|=
operator|new
name|QXmlInputSource
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|TestHandler
name|handler
decl_stmt|;
name|xmlReader
operator|.
name|setDeclHandler
argument_list|(
operator|&
name|handler
argument_list|)
expr_stmt|;
name|xmlReader
operator|.
name|setErrorHandler
argument_list|(
operator|&
name|handler
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|xmlReader
operator|.
name|parse
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|handler
operator|.
name|recursionCount
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QXmlSimpleReader
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qxmlsimplereader.moc"
end_include
end_unit
