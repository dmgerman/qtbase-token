begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WIN
end_ifdef
begin_include
include|#
directive|include
file|<QtCore/qt_windows.h>
end_include
begin_include
include|#
directive|include
file|<oleacc.h>
end_include
begin_include
include|#
directive|include
file|<servprov.h>
end_include
begin_include
include|#
directive|include
file|<winuser.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_SUPPORTS_IACCESSIBLE2
end_ifdef
begin_include
include|#
directive|include
file|<Accessible2.h>
end_include
begin_include
include|#
directive|include
file|<AccessibleAction.h>
end_include
begin_include
include|#
directive|include
file|<AccessibleComponent.h>
end_include
begin_include
include|#
directive|include
file|<AccessibleEditableText.h>
end_include
begin_include
include|#
directive|include
file|<AccessibleText.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtGui>
end_include
begin_include
include|#
directive|include
file|<QtWidgets>
end_include
begin_include
include|#
directive|include
file|<math.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformnativeinterface.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
name|defined
argument_list|(
name|interface
argument_list|)
end_if
begin_undef
DECL|macro|interface
undef|#
directive|undef
name|interface
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"QtTest/qtestaccessible.h"
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_extern
extern|extern
literal|"C"
name|bool
name|SystemParametersInfo
parameter_list|(
name|UINT
name|uiAction
parameter_list|,
name|UINT
name|uiParam
parameter_list|,
name|PVOID
name|pvParam
parameter_list|,
name|UINT
name|fWinIni
parameter_list|)
function_decl|;
end_extern
begin_define
DECL|macro|SPI_GETPLATFORMTYPE
define|#
directive|define
name|SPI_GETPLATFORMTYPE
value|257
end_define
begin_function
DECL|function|IsValidCEPlatform
specifier|inline
name|bool
name|IsValidCEPlatform
parameter_list|()
block|{
name|wchar_t
name|tszPlatform
index|[
literal|64
index|]
decl_stmt|;
if|if
condition|(
name|SystemParametersInfo
argument_list|(
name|SPI_GETPLATFORMTYPE
argument_list|,
sizeof|sizeof
argument_list|(
name|tszPlatform
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
operator|*
name|tszPlatform
argument_list|)
argument_list|,
name|tszPlatform
argument_list|,
literal|0
argument_list|)
condition|)
block|{
name|QString
name|platform
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|tszPlatform
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|platform
operator|==
name|QLatin1String
argument_list|(
literal|"PocketPC"
argument_list|)
operator|)
operator|||
operator|(
name|platform
operator|==
name|QLatin1String
argument_list|(
literal|"Smartphone"
argument_list|)
operator|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_typedef
DECL|typedef|QAIPtr
typedef|typedef
name|QSharedPointer
argument_list|<
name|QAccessibleInterface
argument_list|>
name|QAIPtr
typedef|;
end_typedef
begin_function
DECL|function|verifyChild
specifier|static
specifier|inline
name|bool
name|verifyChild
parameter_list|(
name|QWidget
modifier|*
name|child
parameter_list|,
name|QAccessibleInterface
modifier|*
name|interface
parameter_list|,
name|int
name|index
parameter_list|,
specifier|const
name|QRect
modifier|&
name|domain
parameter_list|)
block|{
if|if
condition|(
operator|!
name|child
condition|)
block|{
name|qWarning
argument_list|(
literal|"tst_QAccessibility::verifyChild: null pointer to child."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|interface
condition|)
block|{
name|qWarning
argument_list|(
literal|"tst_QAccessibility::verifyChild: null pointer to interface."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Verify that we get a valid QAccessibleInterface for the child.
name|QAccessibleInterface
modifier|*
name|childInterface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|childInterface
condition|)
block|{
name|qWarning
argument_list|(
literal|"tst_QAccessibility::verifyChild: Failed to retrieve interface for child."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// QAccessibleInterface::indexOfChild():
comment|// Verify that indexOfChild() returns an index equal to the index passed in
name|int
name|indexFromIndexOfChild
init|=
name|interface
operator|->
name|indexOfChild
argument_list|(
name|childInterface
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexFromIndexOfChild
operator|!=
name|index
condition|)
block|{
name|qWarning
argument_list|(
literal|"tst_QAccessibility::verifyChild (indexOfChild()):"
argument_list|)
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"Expected:"
operator|<<
name|index
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"Actual:  "
operator|<<
name|indexFromIndexOfChild
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Navigate to child, compare its object and role with the interface from queryAccessibleInterface(child).
name|QAccessibleInterface
modifier|*
name|navigatedChildInterface
init|=
name|interface
operator|->
name|child
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|navigatedChildInterface
operator|==
literal|0
condition|)
return|return
literal|false
return|;
specifier|const
name|QRect
name|rectFromInterface
init|=
name|navigatedChildInterface
operator|->
name|rect
argument_list|()
decl_stmt|;
operator|delete
name|navigatedChildInterface
expr_stmt|;
comment|// QAccessibleInterface::childAt():
comment|// Calculate global child position and check that the interface
comment|// returns the correct index for that position.
name|QPoint
name|globalChildPos
init|=
name|child
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|childAtInterface
init|=
name|interface
operator|->
name|childAt
argument_list|(
name|globalChildPos
operator|.
name|x
argument_list|()
argument_list|,
name|globalChildPos
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|childAtInterface
condition|)
block|{
name|qWarning
argument_list|(
literal|"tst_QAccessibility::verifyChild (childAt()):"
argument_list|)
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"Expected:"
operator|<<
name|childInterface
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"Actual:  no child"
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|childAtInterface
operator|->
name|object
argument_list|()
operator|!=
name|childInterface
operator|->
name|object
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"tst_QAccessibility::verifyChild (childAt()):"
argument_list|)
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"Expected:"
operator|<<
name|childInterface
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"Actual:  "
operator|<<
name|childAtInterface
expr_stmt|;
return|return
literal|false
return|;
block|}
operator|delete
name|childInterface
expr_stmt|;
operator|delete
name|childAtInterface
expr_stmt|;
comment|// QAccessibleInterface::rect():
comment|// Calculate global child geometry and check that the interface
comment|// returns a QRect which is equal to the calculated QRect.
specifier|const
name|QRect
name|expectedGlobalRect
init|=
name|QRect
argument_list|(
name|globalChildPos
argument_list|,
name|child
operator|->
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedGlobalRect
operator|!=
name|rectFromInterface
condition|)
block|{
name|qWarning
argument_list|(
literal|"tst_QAccessibility::verifyChild (rect()):"
argument_list|)
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"Expected:"
operator|<<
name|expectedGlobalRect
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"Actual:  "
operator|<<
name|rectFromInterface
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Verify that the child is within its domain.
if|if
condition|(
operator|!
name|domain
operator|.
name|contains
argument_list|(
name|rectFromInterface
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"tst_QAccessibility::verifyChild: Child is not within its domain."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|indexOfChild
specifier|static
specifier|inline
name|int
name|indexOfChild
parameter_list|(
name|QAccessibleInterface
modifier|*
name|parentInterface
parameter_list|,
name|QWidget
modifier|*
name|childWidget
parameter_list|)
block|{
if|if
condition|(
operator|!
name|parentInterface
operator|||
operator|!
name|childWidget
condition|)
return|return
operator|-
literal|1
return|;
name|QAccessibleInterface
modifier|*
name|childInterface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|childWidget
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|childInterface
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|index
init|=
name|parentInterface
operator|->
name|indexOfChild
argument_list|(
name|childInterface
argument_list|)
decl_stmt|;
operator|delete
name|childInterface
expr_stmt|;
return|return
name|index
return|;
block|}
end_function
begin_define
DECL|macro|EXPECT
define|#
directive|define
name|EXPECT
parameter_list|(
name|cond
parameter_list|)
define|\
value|do { \         if (!errorAt&& !(cond)) { \             errorAt = __LINE__; \             qWarning("level: %d, middle: %d, role: %d (%s)", treelevel, middle, iface->role(), #cond); \         } \     } while (0)
end_define
begin_function
DECL|function|verifyHierarchy
specifier|static
name|int
name|verifyHierarchy
parameter_list|(
name|QAccessibleInterface
modifier|*
name|iface
parameter_list|)
block|{
name|int
name|errorAt
init|=
literal|0
decl_stmt|;
specifier|static
name|int
name|treelevel
init|=
literal|0
decl_stmt|;
comment|// for error diagnostics
name|QAccessibleInterface
modifier|*
name|middleChild
decl_stmt|,
modifier|*
name|if2
decl_stmt|;
name|middleChild
operator|=
literal|0
expr_stmt|;
operator|++
name|treelevel
expr_stmt|;
name|int
name|middle
init|=
name|iface
operator|->
name|childCount
argument_list|()
operator|/
literal|2
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|iface
operator|->
name|childCount
argument_list|()
operator|>=
literal|2
condition|)
block|{
name|middleChild
operator|=
name|iface
operator|->
name|child
argument_list|(
name|middle
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iface
operator|->
name|childCount
argument_list|()
operator|&&
operator|!
name|errorAt
condition|;
operator|++
name|i
control|)
block|{
name|if2
operator|=
name|iface
operator|->
name|child
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|EXPECT
argument_list|(
name|if2
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|// navigate Ancestor...
name|QAccessibleInterface
modifier|*
name|parent
init|=
name|if2
operator|->
name|parent
argument_list|()
decl_stmt|;
name|EXPECT
argument_list|(
name|iface
operator|->
name|object
argument_list|()
operator|==
name|parent
operator|->
name|object
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|parent
expr_stmt|;
comment|// navigate Sibling...
comment|//            if (middleChild) {
comment|//                entry = if2->navigate(QAccessible::Sibling, middle,&if3);
comment|//                EXPECT(entry == 0&& if3->object() == middleChild->object());
comment|//                if (entry == 0)
comment|//                    delete if3;
comment|//                EXPECT(iface->indexOfChild(middleChild) == middle);
comment|//            }
comment|// verify children...
if|if
condition|(
operator|!
name|errorAt
condition|)
name|errorAt
operator|=
name|verifyHierarchy
argument_list|(
name|if2
argument_list|)
expr_stmt|;
operator|delete
name|if2
expr_stmt|;
block|}
operator|delete
name|middleChild
expr_stmt|;
operator|--
name|treelevel
expr_stmt|;
return|return
name|errorAt
return|;
block|}
end_function
begin_function
DECL|function|childRect
name|QRect
name|childRect
parameter_list|(
name|QAccessibleInterface
modifier|*
name|iface
parameter_list|,
name|int
name|index
init|=
literal|0
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|child
init|=
name|iface
operator|->
name|child
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|QRect
name|rect
init|=
name|child
operator|->
name|rect
argument_list|()
decl_stmt|;
operator|delete
name|child
expr_stmt|;
return|return
name|rect
return|;
block|}
end_function
begin_class
DECL|class|tst_QAccessibility
class|class
name|tst_QAccessibility
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QAccessibility
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QAccessibility
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|eventTest
parameter_list|()
function_decl|;
name|void
name|customWidget
parameter_list|()
function_decl|;
name|void
name|deletedWidget
parameter_list|()
function_decl|;
name|void
name|statesStructTest
parameter_list|()
function_decl|;
name|void
name|navigateHierarchy
parameter_list|()
function_decl|;
name|void
name|sliderTest
parameter_list|()
function_decl|;
name|void
name|textAttributes
parameter_list|()
function_decl|;
name|void
name|hideShowTest
parameter_list|()
function_decl|;
name|void
name|actionTest
parameter_list|()
function_decl|;
name|void
name|applicationTest
parameter_list|()
function_decl|;
name|void
name|mainWindowTest
parameter_list|()
function_decl|;
name|void
name|buttonTest
parameter_list|()
function_decl|;
name|void
name|scrollBarTest
parameter_list|()
function_decl|;
name|void
name|tabTest
parameter_list|()
function_decl|;
name|void
name|tabWidgetTest
parameter_list|()
function_decl|;
name|void
name|menuTest
parameter_list|()
function_decl|;
name|void
name|spinBoxTest
parameter_list|()
function_decl|;
name|void
name|doubleSpinBoxTest
parameter_list|()
function_decl|;
name|void
name|textEditTest
parameter_list|()
function_decl|;
name|void
name|textBrowserTest
parameter_list|()
function_decl|;
name|void
name|mdiAreaTest
parameter_list|()
function_decl|;
name|void
name|mdiSubWindowTest
parameter_list|()
function_decl|;
name|void
name|lineEditTest
parameter_list|()
function_decl|;
name|void
name|groupBoxTest
parameter_list|()
function_decl|;
name|void
name|dialogButtonBoxTest
parameter_list|()
function_decl|;
name|void
name|dialTest
parameter_list|()
function_decl|;
name|void
name|rubberBandTest
parameter_list|()
function_decl|;
name|void
name|abstractScrollAreaTest
parameter_list|()
function_decl|;
name|void
name|scrollAreaTest
parameter_list|()
function_decl|;
name|void
name|listTest
parameter_list|()
function_decl|;
name|void
name|treeTest
parameter_list|()
function_decl|;
name|void
name|tableTest
parameter_list|()
function_decl|;
name|void
name|calendarWidgetTest
parameter_list|()
function_decl|;
name|void
name|dockWidgetTest
parameter_list|()
function_decl|;
name|void
name|comboBoxTest
parameter_list|()
function_decl|;
name|void
name|accessibleName
parameter_list|()
function_decl|;
name|void
name|labelTest
parameter_list|()
function_decl|;
name|void
name|accelerators
parameter_list|()
function_decl|;
name|void
name|bridgeTest
parameter_list|()
function_decl|;
protected|protected
name|slots
protected|:
name|void
name|onClicked
parameter_list|()
function_decl|;
private|private:
DECL|member|click_count
name|int
name|click_count
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|Q_PI
specifier|const
name|double
name|Q_PI
init|=
literal|3.14159265358979323846
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|state
name|QAccessible
operator|::
name|State
name|state
parameter_list|(
name|QWidget
modifier|*
specifier|const
name|widget
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|iface
condition|)
name|qWarning
argument_list|()
operator|<<
literal|"Cannot get QAccessibleInterface for widget"
expr_stmt|;
name|QAccessible
operator|::
name|State
name|state
init|=
operator|(
name|iface
condition|?
name|iface
operator|->
name|state
argument_list|()
else|:
name|QAccessible
operator|::
name|State
argument_list|()
operator|)
decl_stmt|;
operator|delete
name|iface
expr_stmt|;
return|return
name|state
return|;
block|}
end_function
begin_class
DECL|class|QtTestAccessibleWidget
class|class
name|QtTestAccessibleWidget
super|:
specifier|public
name|QWidget
block|{
name|Q_OBJECT
public|public:
DECL|function|QtTestAccessibleWidget
name|QtTestAccessibleWidget
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
block|{
name|setObjectName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|QPalette
name|pal
decl_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|backgroundRole
argument_list|()
argument_list|,
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
comment|//black is beautiful
name|setPalette
argument_list|(
name|pal
argument_list|)
expr_stmt|;
name|setFixedSize
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|QtTestAccessibleWidgetIface
class|class
name|QtTestAccessibleWidgetIface
super|:
specifier|public
name|QAccessibleWidget
block|{
public|public:
DECL|function|QtTestAccessibleWidgetIface
name|QtTestAccessibleWidgetIface
parameter_list|(
name|QtTestAccessibleWidget
modifier|*
name|w
parameter_list|)
member_init_list|:
name|QAccessibleWidget
argument_list|(
name|w
argument_list|)
block|{}
DECL|function|text
name|QString
name|text
parameter_list|(
name|QAccessible
operator|::
name|Text
name|t
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|t
operator|==
name|QAccessible
operator|::
name|Help
condition|)
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Help yourself"
argument_list|)
return|;
return|return
name|QAccessibleWidget
operator|::
name|text
argument_list|(
name|t
argument_list|)
return|;
block|}
DECL|function|ifaceFactory
specifier|static
name|QAccessibleInterface
modifier|*
name|ifaceFactory
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
name|QObject
modifier|*
name|o
parameter_list|)
block|{
if|if
condition|(
name|key
operator|==
literal|"QtTestAccessibleWidget"
condition|)
return|return
operator|new
name|QtTestAccessibleWidgetIface
argument_list|(
cast|static_cast
argument_list|<
name|QtTestAccessibleWidget
operator|*
argument_list|>
argument_list|(
name|o
argument_list|)
argument_list|)
return|;
return|return
literal|0
return|;
block|}
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QAccessibility
name|tst_QAccessibility
operator|::
name|tst_QAccessibility
parameter_list|()
block|{
name|click_count
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~tst_QAccessibility
name|tst_QAccessibility
operator|::
name|~
name|tst_QAccessibility
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|onClicked
name|void
name|tst_QAccessibility
operator|::
name|onClicked
parameter_list|()
block|{
name|click_count
operator|++
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initTestCase
name|void
name|tst_QAccessibility
operator|::
name|initTestCase
parameter_list|()
block|{
name|QTestAccessibility
operator|::
name|initialize
argument_list|()
expr_stmt|;
name|QAccessible
operator|::
name|installFactory
argument_list|(
name|QtTestAccessibleWidgetIface
operator|::
name|ifaceFactory
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QAccessibility
operator|::
name|cleanupTestCase
parameter_list|()
block|{
name|QTestAccessibility
operator|::
name|cleanup
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_QAccessibility
operator|::
name|init
parameter_list|()
block|{
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QAccessibility
operator|::
name|cleanup
parameter_list|()
block|{
specifier|const
name|EventList
name|list
init|=
name|QTestAccessibility
operator|::
name|events
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"%d accessibility event(s) were not handled in testfunction '%s':"
argument_list|,
name|list
operator|.
name|count
argument_list|()
argument_list|,
name|QString
argument_list|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|qWarning
argument_list|(
literal|" %d: Object: %p Event: '%s' Child: %d"
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|object
argument_list|()
argument_list|,
name|qAccessibleEventString
argument_list|(
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|type
argument_list|()
argument_list|)
argument_list|,
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|child
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|eventTest
name|void
name|tst_QAccessibility
operator|::
name|eventTest
parameter_list|()
block|{
name|QPushButton
modifier|*
name|button
init|=
operator|new
name|QPushButton
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|button
operator|->
name|setObjectName
argument_list|(
name|QString
argument_list|(
literal|"Olaf"
argument_list|)
argument_list|)
expr_stmt|;
name|button
operator|->
name|show
argument_list|()
expr_stmt|;
name|QAccessibleEvent
name|showEvent
argument_list|(
name|button
argument_list|,
name|QAccessible
operator|::
name|ObjectShow
argument_list|)
decl_stmt|;
comment|// some platforms might send other events first, (such as state change event active=1)
name|QVERIFY
argument_list|(
name|QTestAccessibility
operator|::
name|containsEvent
argument_list|(
operator|&
name|showEvent
argument_list|)
argument_list|)
expr_stmt|;
name|button
operator|->
name|setFocus
argument_list|(
name|Qt
operator|::
name|MouseFocusReason
argument_list|)
expr_stmt|;
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|mouseClick
argument_list|(
name|button
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|button
operator|->
name|setAccessibleName
argument_list|(
literal|"Olaf the second"
argument_list|)
expr_stmt|;
name|QAccessibleEvent
name|nameEvent
argument_list|(
name|button
argument_list|,
name|QAccessible
operator|::
name|NameChanged
argument_list|)
decl_stmt|;
name|QVERIFY_EVENT
argument_list|(
operator|&
name|nameEvent
argument_list|)
expr_stmt|;
name|button
operator|->
name|setAccessibleDescription
argument_list|(
literal|"This is a button labeled Olaf"
argument_list|)
expr_stmt|;
name|QAccessibleEvent
name|descEvent
argument_list|(
name|button
argument_list|,
name|QAccessible
operator|::
name|DescriptionChanged
argument_list|)
decl_stmt|;
name|QVERIFY_EVENT
argument_list|(
operator|&
name|descEvent
argument_list|)
expr_stmt|;
name|button
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QAccessibleEvent
name|hideEvent
argument_list|(
name|button
argument_list|,
name|QAccessible
operator|::
name|ObjectHide
argument_list|)
decl_stmt|;
comment|// some platforms might send other events first, (such as state change event active=1)
name|QVERIFY
argument_list|(
name|QTestAccessibility
operator|::
name|containsEvent
argument_list|(
operator|&
name|hideEvent
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|button
expr_stmt|;
block|}
end_function
begin_function
DECL|function|customWidget
name|void
name|tst_QAccessibility
operator|::
name|customWidget
parameter_list|()
block|{
name|QtTestAccessibleWidget
modifier|*
name|widget
init|=
operator|new
name|QtTestAccessibleWidget
argument_list|(
literal|0
argument_list|,
literal|"Heinz"
argument_list|)
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|->
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|object
argument_list|()
argument_list|,
operator|(
name|QObject
operator|*
operator|)
name|widget
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|object
argument_list|()
operator|->
name|objectName
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Heinz"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Help
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Help yourself"
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|iface
expr_stmt|;
operator|delete
name|widget
expr_stmt|;
block|}
end_function
begin_function
DECL|function|deletedWidget
name|void
name|tst_QAccessibility
operator|::
name|deletedWidget
parameter_list|()
block|{
name|QtTestAccessibleWidget
modifier|*
name|widget
init|=
operator|new
name|QtTestAccessibleWidget
argument_list|(
literal|0
argument_list|,
literal|"Ralf"
argument_list|)
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|->
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|object
argument_list|()
argument_list|,
operator|(
name|QObject
operator|*
operator|)
name|widget
argument_list|)
expr_stmt|;
operator|delete
name|widget
expr_stmt|;
name|widget
operator|=
literal|0
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|iface
operator|->
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|iface
expr_stmt|;
block|}
end_function
begin_function
DECL|function|statesStructTest
name|void
name|tst_QAccessibility
operator|::
name|statesStructTest
parameter_list|()
block|{
name|QAccessible
operator|::
name|State
name|s1
decl_stmt|;
name|QVERIFY
argument_list|(
name|s1
operator|.
name|disabled
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s1
operator|.
name|focusable
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s1
operator|.
name|modal
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QAccessible
operator|::
name|State
name|s2
decl_stmt|;
name|QVERIFY
argument_list|(
name|s2
operator|==
name|s1
argument_list|)
expr_stmt|;
name|s2
operator|.
name|busy
operator|=
literal|true
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|s2
operator|==
name|s1
operator|)
argument_list|)
expr_stmt|;
name|s1
operator|.
name|busy
operator|=
literal|true
expr_stmt|;
name|QVERIFY
argument_list|(
name|s2
operator|==
name|s1
argument_list|)
expr_stmt|;
name|s1
operator|=
name|QAccessible
operator|::
name|State
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|s2
operator|==
name|s1
operator|)
argument_list|)
expr_stmt|;
name|s1
operator|=
name|s2
expr_stmt|;
name|QVERIFY
argument_list|(
name|s2
operator|==
name|s1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s1
operator|.
name|busy
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sliderTest
name|void
name|tst_QAccessibility
operator|::
name|sliderTest
parameter_list|()
block|{
block|{
name|QSlider
modifier|*
name|slider
init|=
operator|new
name|QSlider
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|slider
operator|->
name|setObjectName
argument_list|(
name|QString
argument_list|(
literal|"Slidy"
argument_list|)
argument_list|)
expr_stmt|;
name|slider
operator|->
name|show
argument_list|()
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|slider
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|->
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|Slider
argument_list|)
expr_stmt|;
name|QAccessibleValueInterface
modifier|*
name|valueIface
init|=
name|iface
operator|->
name|valueInterface
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|valueIface
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|valueIface
operator|->
name|minimumValue
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|,
name|slider
operator|->
name|minimum
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|valueIface
operator|->
name|maximumValue
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|,
name|slider
operator|->
name|maximum
argument_list|()
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setValue
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|valueIface
operator|->
name|currentValue
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|,
name|slider
operator|->
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setValue
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|valueIface
operator|->
name|currentValue
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|,
name|slider
operator|->
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setValue
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|valueIface
operator|->
name|currentValue
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|,
name|slider
operator|->
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|valueIface
operator|->
name|setCurrentValue
argument_list|(
literal|77
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|77
argument_list|,
name|slider
operator|->
name|value
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|iface
expr_stmt|;
operator|delete
name|slider
expr_stmt|;
block|}
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|navigateHierarchy
name|void
name|tst_QAccessibility
operator|::
name|navigateHierarchy
parameter_list|()
block|{
block|{
name|QWidget
modifier|*
name|w
init|=
operator|new
name|QWidget
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|w
operator|->
name|setObjectName
argument_list|(
name|QString
argument_list|(
literal|"Hans"
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|->
name|show
argument_list|()
expr_stmt|;
name|QWidget
modifier|*
name|w1
init|=
operator|new
name|QWidget
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|w1
operator|->
name|setObjectName
argument_list|(
name|QString
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|w1
operator|->
name|show
argument_list|()
expr_stmt|;
name|QWidget
modifier|*
name|w2
init|=
operator|new
name|QWidget
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|w2
operator|->
name|setObjectName
argument_list|(
name|QString
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|w2
operator|->
name|show
argument_list|()
expr_stmt|;
name|QWidget
modifier|*
name|w3
init|=
operator|new
name|QWidget
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|w3
operator|->
name|setObjectName
argument_list|(
name|QString
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|w3
operator|->
name|show
argument_list|()
expr_stmt|;
name|QWidget
modifier|*
name|w31
init|=
operator|new
name|QWidget
argument_list|(
name|w3
argument_list|)
decl_stmt|;
name|w31
operator|->
name|setObjectName
argument_list|(
name|QString
argument_list|(
literal|"31"
argument_list|)
argument_list|)
expr_stmt|;
name|w31
operator|->
name|show
argument_list|()
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|target
init|=
literal|0
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|->
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|target
operator|=
name|iface
operator|->
name|child
argument_list|(
literal|14
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|target
operator|==
literal|0
argument_list|)
expr_stmt|;
name|target
operator|=
name|iface
operator|->
name|child
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|target
operator|==
literal|0
argument_list|)
expr_stmt|;
name|target
operator|=
name|iface
operator|->
name|child
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|interfaceW1
init|=
name|iface
operator|->
name|child
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|target
operator|->
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|target
operator|->
name|object
argument_list|()
argument_list|,
operator|(
name|QObject
operator|*
operator|)
name|w1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|interfaceW1
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|interfaceW1
operator|->
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interfaceW1
operator|->
name|object
argument_list|()
argument_list|,
operator|(
name|QObject
operator|*
operator|)
name|w1
argument_list|)
expr_stmt|;
operator|delete
name|interfaceW1
expr_stmt|;
operator|delete
name|iface
expr_stmt|;
name|iface
operator|=
literal|0
expr_stmt|;
name|iface
operator|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|target
operator|=
name|iface
operator|->
name|child
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|target
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|target
operator|->
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|target
operator|->
name|object
argument_list|()
argument_list|,
operator|(
name|QObject
operator|*
operator|)
name|w3
argument_list|)
expr_stmt|;
operator|delete
name|iface
expr_stmt|;
name|iface
operator|=
literal|0
expr_stmt|;
name|iface
operator|=
name|target
operator|->
name|child
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
argument_list|,
operator|(
name|QAccessibleInterface
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|iface
operator|=
name|target
operator|->
name|child
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|->
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|object
argument_list|()
argument_list|,
operator|(
name|QObject
operator|*
operator|)
name|w31
argument_list|)
expr_stmt|;
name|iface
operator|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|acc3
init|=
name|iface
operator|->
name|child
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|target
operator|=
name|acc3
operator|->
name|child
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|acc3
expr_stmt|;
operator|delete
name|iface
expr_stmt|;
name|QCOMPARE
argument_list|(
name|target
operator|->
name|object
argument_list|()
argument_list|,
operator|(
name|QObject
operator|*
operator|)
name|w31
argument_list|)
expr_stmt|;
name|iface
operator|=
name|target
operator|->
name|parent
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|->
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|object
argument_list|()
argument_list|,
operator|(
name|QObject
operator|*
operator|)
name|w3
argument_list|)
expr_stmt|;
operator|delete
name|iface
expr_stmt|;
name|iface
operator|=
literal|0
expr_stmt|;
operator|delete
name|target
expr_stmt|;
name|target
operator|=
literal|0
expr_stmt|;
operator|delete
name|w
expr_stmt|;
block|}
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_define
DECL|macro|QSETCOMPARE
define|#
directive|define
name|QSETCOMPARE
parameter_list|(
name|thetypename
parameter_list|,
name|elements
parameter_list|,
name|otherelements
parameter_list|)
define|\
value|QCOMPARE((QSet<thetypename>()<< elements), (QSet<thetypename>()<< otherelements))
end_define
begin_function
DECL|function|createWidgets
specifier|static
name|QWidget
modifier|*
name|createWidgets
parameter_list|()
block|{
name|QWidget
modifier|*
name|w
init|=
operator|new
name|QWidget
argument_list|()
decl_stmt|;
name|QHBoxLayout
modifier|*
name|box
init|=
operator|new
name|QHBoxLayout
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|box
operator|->
name|addWidget
argument_list|(
operator|new
name|QComboBox
argument_list|(
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|->
name|addWidget
argument_list|(
operator|new
name|QPushButton
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"widget text %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
operator|++
argument_list|)
argument_list|,
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|->
name|addWidget
argument_list|(
operator|new
name|QHeaderView
argument_list|(
name|Qt
operator|::
name|Vertical
argument_list|,
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|->
name|addWidget
argument_list|(
operator|new
name|QTreeView
argument_list|(
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|->
name|addWidget
argument_list|(
operator|new
name|QTreeWidget
argument_list|(
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|->
name|addWidget
argument_list|(
operator|new
name|QListView
argument_list|(
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|->
name|addWidget
argument_list|(
operator|new
name|QListWidget
argument_list|(
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|->
name|addWidget
argument_list|(
operator|new
name|QTableView
argument_list|(
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|->
name|addWidget
argument_list|(
operator|new
name|QTableWidget
argument_list|(
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|->
name|addWidget
argument_list|(
operator|new
name|QCalendarWidget
argument_list|(
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|->
name|addWidget
argument_list|(
operator|new
name|QDialogButtonBox
argument_list|(
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|->
name|addWidget
argument_list|(
operator|new
name|QGroupBox
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"widget text %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
operator|++
argument_list|)
argument_list|,
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|->
name|addWidget
argument_list|(
operator|new
name|QFrame
argument_list|(
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|->
name|addWidget
argument_list|(
operator|new
name|QLineEdit
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"widget text %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
operator|++
argument_list|)
argument_list|,
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|->
name|addWidget
argument_list|(
operator|new
name|QProgressBar
argument_list|(
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|->
name|addWidget
argument_list|(
operator|new
name|QTabWidget
argument_list|(
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|->
name|addWidget
argument_list|(
operator|new
name|QCheckBox
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"widget text %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
operator|++
argument_list|)
argument_list|,
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|->
name|addWidget
argument_list|(
operator|new
name|QRadioButton
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"widget text %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
operator|++
argument_list|)
argument_list|,
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|->
name|addWidget
argument_list|(
operator|new
name|QDial
argument_list|(
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|->
name|addWidget
argument_list|(
operator|new
name|QScrollBar
argument_list|(
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|->
name|addWidget
argument_list|(
operator|new
name|QSlider
argument_list|(
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|->
name|addWidget
argument_list|(
operator|new
name|QDateTimeEdit
argument_list|(
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|->
name|addWidget
argument_list|(
operator|new
name|QDoubleSpinBox
argument_list|(
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|->
name|addWidget
argument_list|(
operator|new
name|QSpinBox
argument_list|(
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|->
name|addWidget
argument_list|(
operator|new
name|QLabel
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"widget text %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
operator|++
argument_list|)
argument_list|,
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|->
name|addWidget
argument_list|(
operator|new
name|QLCDNumber
argument_list|(
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|->
name|addWidget
argument_list|(
operator|new
name|QStackedWidget
argument_list|(
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|->
name|addWidget
argument_list|(
operator|new
name|QToolBox
argument_list|(
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|->
name|addWidget
argument_list|(
operator|new
name|QLabel
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"widget text %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
operator|++
argument_list|)
argument_list|,
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|->
name|addWidget
argument_list|(
operator|new
name|QTextEdit
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"widget text %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
operator|++
argument_list|)
argument_list|,
name|w
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Not in the list      * QAbstractItemView, QGraphicsView, QScrollArea,      * QToolButton, QDockWidget, QFocusFrame, QMainWindow, QMenu, QMenuBar, QSizeGrip, QSplashScreen, QSplitterHandle,      * QStatusBar, QSvgWidget, QTabBar, QToolBar, QSplitter      */
return|return
name|w
return|;
block|}
end_function
begin_function
DECL|function|accessibleName
name|void
name|tst_QAccessibility
operator|::
name|accessibleName
parameter_list|()
block|{
name|QWidget
modifier|*
name|toplevel
init|=
name|createWidgets
argument_list|()
decl_stmt|;
name|toplevel
operator|->
name|show
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QLayout
modifier|*
name|lout
init|=
name|toplevel
operator|->
name|layout
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lout
operator|->
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QLayoutItem
modifier|*
name|item
init|=
name|lout
operator|->
name|itemAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|child
init|=
name|item
operator|->
name|widget
argument_list|()
decl_stmt|;
name|QString
name|name
init|=
name|tr
argument_list|(
literal|"Widget Name %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|child
operator|->
name|setAccessibleName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|acc
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|acc
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|QString
name|desc
init|=
name|tr
argument_list|(
literal|"Widget Description %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|child
operator|->
name|setAccessibleDescription
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|acc
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Description
argument_list|)
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
operator|delete
name|toplevel
expr_stmt|;
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|textAttributes
name|void
name|tst_QAccessibility
operator|::
name|textAttributes
parameter_list|()
block|{
name|QTextEdit
name|textEdit
decl_stmt|;
name|int
name|startOffset
decl_stmt|;
name|int
name|endOffset
decl_stmt|;
name|QString
name|attributes
decl_stmt|;
name|QString
name|text
argument_list|(
literal|"<html><head></head><body>"
literal|"Hello,<b>this</b> is an<i><b>example</b> text</i>."
literal|"<span style=\"font-family: monospace\">Multiple fonts are used.</span>"
literal|"Multiple<span style=\"font-size: 8pt\">text sizes</span> are used."
literal|"Let's give some color to<span style=\"color:#f0f1f2; background-color:#14f01e\">Qt</span>."
literal|"</body></html>"
argument_list|)
decl_stmt|;
name|textEdit
operator|.
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|interface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
operator|&
name|textEdit
argument_list|)
decl_stmt|;
name|QAccessibleTextInterface
modifier|*
name|textInterface
init|=
name|interface
operator|->
name|textInterface
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|textInterface
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|textInterface
operator|->
name|characterCount
argument_list|()
argument_list|,
literal|112
argument_list|)
expr_stmt|;
name|attributes
operator|=
name|textInterface
operator|->
name|attributes
argument_list|(
literal|10
argument_list|,
operator|&
name|startOffset
argument_list|,
operator|&
name|endOffset
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|startOffset
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|endOffset
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|prepend
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attributes
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|";font-weight:bold;"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|attributes
operator|=
name|textInterface
operator|->
name|attributes
argument_list|(
literal|18
argument_list|,
operator|&
name|startOffset
argument_list|,
operator|&
name|endOffset
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|startOffset
argument_list|,
literal|18
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|endOffset
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|prepend
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attributes
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|";font-weight:bold;"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attributes
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|";font-style:italic;"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|attributes
operator|=
name|textInterface
operator|->
name|attributes
argument_list|(
literal|34
argument_list|,
operator|&
name|startOffset
argument_list|,
operator|&
name|endOffset
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|startOffset
argument_list|,
literal|31
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|endOffset
argument_list|,
literal|55
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|prepend
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attributes
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|";font-family:\"monospace\";"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|attributes
operator|=
name|textInterface
operator|->
name|attributes
argument_list|(
literal|65
argument_list|,
operator|&
name|startOffset
argument_list|,
operator|&
name|endOffset
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|startOffset
argument_list|,
literal|64
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|endOffset
argument_list|,
literal|74
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|prepend
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attributes
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|";font-size:8pt;"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|attributes
operator|=
name|textInterface
operator|->
name|attributes
argument_list|(
literal|110
argument_list|,
operator|&
name|startOffset
argument_list|,
operator|&
name|endOffset
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|startOffset
argument_list|,
literal|109
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|endOffset
argument_list|,
literal|111
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|prepend
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attributes
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|";background-color:rgb(20,240,30);"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|attributes
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|";color:rgb(240,241,242);"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hideShowTest
name|void
name|tst_QAccessibility
operator|::
name|hideShowTest
parameter_list|()
block|{
name|QWidget
modifier|*
specifier|const
name|window
init|=
operator|new
name|QWidget
argument_list|()
decl_stmt|;
name|QWidget
modifier|*
specifier|const
name|child
init|=
operator|new
name|QWidget
argument_list|(
name|window
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|state
argument_list|(
name|window
argument_list|)
operator|.
name|invisible
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|state
argument_list|(
name|child
argument_list|)
operator|.
name|invisible
argument_list|)
expr_stmt|;
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
comment|// show() and veryfy that both window and child are not invisible and get ObjectShow events.
name|window
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|state
argument_list|(
name|window
argument_list|)
operator|.
name|invisible
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|state
argument_list|(
name|child
argument_list|)
operator|.
name|invisible
argument_list|)
expr_stmt|;
name|QAccessibleEvent
name|show
argument_list|(
name|window
argument_list|,
name|QAccessible
operator|::
name|ObjectShow
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QTestAccessibility
operator|::
name|containsEvent
argument_list|(
operator|&
name|show
argument_list|)
argument_list|)
expr_stmt|;
name|QAccessibleEvent
name|showChild
argument_list|(
name|child
argument_list|,
name|QAccessible
operator|::
name|ObjectShow
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QTestAccessibility
operator|::
name|containsEvent
argument_list|(
operator|&
name|showChild
argument_list|)
argument_list|)
expr_stmt|;
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
comment|// hide() and veryfy that both window and child are invisible and get ObjectHide events.
name|window
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|state
argument_list|(
name|window
argument_list|)
operator|.
name|invisible
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|state
argument_list|(
name|child
argument_list|)
operator|.
name|invisible
argument_list|)
expr_stmt|;
name|QAccessibleEvent
name|hide
argument_list|(
name|window
argument_list|,
name|QAccessible
operator|::
name|ObjectHide
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QTestAccessibility
operator|::
name|containsEvent
argument_list|(
operator|&
name|hide
argument_list|)
argument_list|)
expr_stmt|;
name|QAccessibleEvent
name|hideChild
argument_list|(
name|child
argument_list|,
name|QAccessible
operator|::
name|ObjectHide
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QTestAccessibility
operator|::
name|containsEvent
argument_list|(
operator|&
name|hideChild
argument_list|)
argument_list|)
expr_stmt|;
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
operator|delete
name|window
expr_stmt|;
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|actionTest
name|void
name|tst_QAccessibility
operator|::
name|actionTest
parameter_list|()
block|{
block|{
name|QCOMPARE
argument_list|(
name|QAccessibleActionInterface
operator|::
name|pressAction
argument_list|()
argument_list|,
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Press"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|widget
init|=
operator|new
name|QWidget
decl_stmt|;
name|widget
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|NoFocus
argument_list|)
expr_stmt|;
name|widget
operator|->
name|show
argument_list|()
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|interface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|interface
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|interface
operator|->
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QAccessibleActionInterface
modifier|*
name|actions
init|=
name|interface
operator|->
name|actionInterface
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|actions
argument_list|)
expr_stmt|;
comment|// no actions by default, except when focusable
name|QCOMPARE
argument_list|(
name|actions
operator|->
name|actionNames
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|StrongFocus
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|actions
operator|->
name|actionNames
argument_list|()
argument_list|,
name|QStringList
argument_list|(
name|QAccessibleActionInterface
operator|::
name|setFocusAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|interface
expr_stmt|;
operator|delete
name|widget
expr_stmt|;
block|}
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
block|{
name|QPushButton
modifier|*
name|button
init|=
operator|new
name|QPushButton
decl_stmt|;
name|button
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
name|button
argument_list|)
argument_list|)
expr_stmt|;
name|button
operator|->
name|clearFocus
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|button
operator|->
name|hasFocus
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|interface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|button
argument_list|)
decl_stmt|;
name|QAccessibleActionInterface
modifier|*
name|actions
init|=
name|interface
operator|->
name|actionInterface
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|actions
argument_list|)
expr_stmt|;
comment|// Make sure the "primary action" press comes first!
name|QCOMPARE
argument_list|(
name|actions
operator|->
name|actionNames
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|QAccessibleActionInterface
operator|::
name|pressAction
argument_list|()
operator|<<
name|QAccessibleActionInterface
operator|::
name|setFocusAction
argument_list|()
argument_list|)
expr_stmt|;
name|actions
operator|->
name|doAction
argument_list|(
name|QAccessibleActionInterface
operator|::
name|setFocusAction
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|button
operator|->
name|hasFocus
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|button
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|onClicked
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|click_count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|actions
operator|->
name|doAction
argument_list|(
name|QAccessibleActionInterface
operator|::
name|pressAction
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|click_count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
operator|delete
name|interface
expr_stmt|;
operator|delete
name|button
expr_stmt|;
block|}
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|applicationTest
name|void
name|tst_QAccessibility
operator|::
name|applicationTest
parameter_list|()
block|{
name|QLatin1String
name|name
init|=
name|QLatin1String
argument_list|(
literal|"My Name"
argument_list|)
decl_stmt|;
name|qApp
operator|->
name|setApplicationName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|interface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|qApp
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|Application
argument_list|)
expr_stmt|;
operator|delete
name|interface
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mainWindowTest
name|void
name|tst_QAccessibility
operator|::
name|mainWindowTest
parameter_list|()
block|{
block|{
name|QMainWindow
modifier|*
name|mw
init|=
operator|new
name|QMainWindow
decl_stmt|;
name|mw
operator|->
name|resize
argument_list|(
literal|300
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|mw
operator|->
name|show
argument_list|()
expr_stmt|;
comment|// triggers layout
name|qApp
operator|->
name|setActiveWindow
argument_list|(
name|mw
argument_list|)
expr_stmt|;
name|QLatin1String
name|name
init|=
name|QLatin1String
argument_list|(
literal|"I am the main window"
argument_list|)
decl_stmt|;
name|mw
operator|->
name|setWindowTitle
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowActive
argument_list|(
name|mw
argument_list|)
argument_list|)
expr_stmt|;
comment|// The order of events is not really that important.
name|QAccessibleEvent
name|show
argument_list|(
name|mw
argument_list|,
name|QAccessible
operator|::
name|ObjectShow
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QTestAccessibility
operator|::
name|containsEvent
argument_list|(
operator|&
name|show
argument_list|)
argument_list|)
expr_stmt|;
name|QAccessible
operator|::
name|State
name|activeState
decl_stmt|;
name|activeState
operator|.
name|active
operator|=
literal|true
expr_stmt|;
name|QAccessibleStateChangeEvent
name|active
argument_list|(
name|mw
argument_list|,
name|activeState
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QTestAccessibility
operator|::
name|containsEvent
argument_list|(
operator|&
name|active
argument_list|)
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|mw
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|Window
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|->
name|state
argument_list|()
operator|.
name|active
argument_list|)
expr_stmt|;
operator|delete
name|iface
expr_stmt|;
operator|delete
name|mw
expr_stmt|;
block|}
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
block|{
name|QWindow
name|window
decl_stmt|;
name|window
operator|.
name|setGeometry
argument_list|(
literal|80
argument_list|,
literal|80
argument_list|,
literal|40
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
operator|==
operator|&
name|window
argument_list|)
expr_stmt|;
comment|//    We currently don't have an accessible interface for QWindow
comment|//    the active state is either in the QMainWindow or QQuickView
comment|//    QAIPtr windowIface(QAccessible::queryAccessibleInterface(&window));
comment|//    QVERIFY(windowIface->state().active);
name|QAccessible
operator|::
name|State
name|activeState
decl_stmt|;
name|activeState
operator|.
name|active
operator|=
literal|true
expr_stmt|;
name|QAccessibleStateChangeEvent
name|active
argument_list|(
operator|&
name|window
argument_list|,
name|activeState
argument_list|)
decl_stmt|;
name|QVERIFY_EVENT
argument_list|(
operator|&
name|active
argument_list|)
expr_stmt|;
name|QWindow
name|child
decl_stmt|;
name|child
operator|.
name|setParent
argument_list|(
operator|&
name|window
argument_list|)
expr_stmt|;
name|child
operator|.
name|setGeometry
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|child
operator|.
name|show
argument_list|()
expr_stmt|;
name|child
operator|.
name|requestActivateWindow
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
operator|==
operator|&
name|child
argument_list|)
expr_stmt|;
name|QAccessibleStateChangeEvent
name|deactivate
argument_list|(
operator|&
name|window
argument_list|,
name|activeState
argument_list|)
decl_stmt|;
name|QVERIFY_EVENT
argument_list|(
operator|&
name|deactivate
argument_list|)
expr_stmt|;
comment|// deactivation of parent
name|QAccessibleStateChangeEvent
name|activeChild
argument_list|(
operator|&
name|child
argument_list|,
name|activeState
argument_list|)
decl_stmt|;
name|QVERIFY_EVENT
argument_list|(
operator|&
name|activeChild
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|CounterButton
class|class
name|CounterButton
super|:
specifier|public
name|QPushButton
block|{
name|Q_OBJECT
public|public:
DECL|function|CounterButton
name|CounterButton
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QPushButton
argument_list|(
name|name
argument_list|,
name|parent
argument_list|)
member_init_list|,
name|clickCount
argument_list|(
literal|0
argument_list|)
block|{
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|incClickCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|member|clickCount
name|int
name|clickCount
decl_stmt|;
public|public
name|Q_SLOTS
public|:
DECL|function|incClickCount
name|void
name|incClickCount
parameter_list|()
block|{
operator|++
name|clickCount
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|relatedInterface
specifier|static
name|QAccessibleInterface
modifier|*
name|relatedInterface
parameter_list|(
name|QAccessibleInterface
modifier|*
name|iface
parameter_list|,
name|QAccessible
operator|::
name|RelationFlag
name|flag
parameter_list|)
block|{
typedef|typedef
name|QPair
argument_list|<
name|QAccessibleInterface
modifier|*
argument_list|,
name|QAccessible
operator|::
name|Relation
argument_list|>
name|RelationPair
typedef|;
name|QVector
argument_list|<
name|RelationPair
argument_list|>
name|rels
init|=
name|iface
operator|->
name|relations
argument_list|(
name|flag
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|rels
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
operator|delete
name|rels
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|first
expr_stmt|;
return|return
name|rels
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|first
return|;
block|}
end_function
begin_function
DECL|function|buttonTest
name|void
name|tst_QAccessibility
operator|::
name|buttonTest
parameter_list|()
block|{
name|QWidget
name|window
decl_stmt|;
name|window
operator|.
name|setLayout
argument_list|(
operator|new
name|QVBoxLayout
argument_list|)
expr_stmt|;
comment|// Standard push button
name|CounterButton
name|pushButton
argument_list|(
literal|"Ok"
argument_list|,
operator|&
name|window
argument_list|)
decl_stmt|;
comment|// toggle button
name|QPushButton
name|toggleButton
argument_list|(
literal|"Toggle"
argument_list|,
operator|&
name|window
argument_list|)
decl_stmt|;
name|toggleButton
operator|.
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// standard checkbox
name|QCheckBox
name|checkBox
argument_list|(
literal|"Check me!"
argument_list|,
operator|&
name|window
argument_list|)
decl_stmt|;
comment|// tristate checkbox
name|QCheckBox
name|tristate
argument_list|(
literal|"Tristate!"
argument_list|,
operator|&
name|window
argument_list|)
decl_stmt|;
name|tristate
operator|.
name|setTristate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// radiobutton
name|QRadioButton
name|radio
argument_list|(
literal|"Radio me!"
argument_list|,
operator|&
name|window
argument_list|)
decl_stmt|;
comment|// standard toolbutton
name|QToolButton
name|toolbutton
argument_list|(
operator|&
name|window
argument_list|)
decl_stmt|;
name|toolbutton
operator|.
name|setText
argument_list|(
literal|"Tool"
argument_list|)
expr_stmt|;
name|toolbutton
operator|.
name|setMinimumSize
argument_list|(
literal|20
argument_list|,
literal|20
argument_list|)
expr_stmt|;
comment|// standard toolbutton
name|QToolButton
name|toggletool
argument_list|(
operator|&
name|window
argument_list|)
decl_stmt|;
name|toggletool
operator|.
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|toggletool
operator|.
name|setText
argument_list|(
literal|"Toggle"
argument_list|)
expr_stmt|;
name|toggletool
operator|.
name|setMinimumSize
argument_list|(
literal|20
argument_list|,
literal|20
argument_list|)
expr_stmt|;
comment|// test push button
name|QAccessibleInterface
modifier|*
name|interface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
operator|&
name|pushButton
argument_list|)
decl_stmt|;
name|QAccessibleActionInterface
modifier|*
name|actionInterface
init|=
name|interface
operator|->
name|actionInterface
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|actionInterface
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|PushButton
argument_list|)
expr_stmt|;
comment|// buttons only have a click action
name|QCOMPARE
argument_list|(
name|actionInterface
operator|->
name|actionNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|actionInterface
operator|->
name|actionNames
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|QAccessibleActionInterface
operator|::
name|pressAction
argument_list|()
operator|<<
name|QAccessibleActionInterface
operator|::
name|setFocusAction
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pushButton
operator|.
name|clickCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|actionInterface
operator|->
name|doAction
argument_list|(
name|QAccessibleActionInterface
operator|::
name|pressAction
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pushButton
operator|.
name|clickCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
operator|delete
name|interface
expr_stmt|;
comment|// test toggle button
name|interface
operator|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
operator|&
name|toggleButton
argument_list|)
expr_stmt|;
name|actionInterface
operator|=
name|interface
operator|->
name|actionInterface
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|CheckBox
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|actionInterface
operator|->
name|actionNames
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|QAccessibleActionInterface
operator|::
name|toggleAction
argument_list|()
operator|<<
name|QAccessibleActionInterface
operator|::
name|setFocusAction
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|actionInterface
operator|->
name|localizedActionDescription
argument_list|(
name|QAccessibleActionInterface
operator|::
name|toggleAction
argument_list|()
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Toggles the state"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|toggleButton
operator|.
name|isChecked
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|interface
operator|->
name|state
argument_list|()
operator|.
name|checked
argument_list|)
expr_stmt|;
name|actionInterface
operator|->
name|doAction
argument_list|(
name|QAccessibleActionInterface
operator|::
name|toggleAction
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|toggleButton
operator|.
name|isChecked
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|actionInterface
operator|->
name|actionNames
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QAccessibleActionInterface
operator|::
name|toggleAction
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|interface
operator|->
name|state
argument_list|()
operator|.
name|checked
argument_list|)
expr_stmt|;
operator|delete
name|interface
expr_stmt|;
block|{
comment|// test menu push button
name|QAction
modifier|*
name|foo
init|=
operator|new
name|QAction
argument_list|(
literal|"Foo"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|foo
operator|->
name|setShortcut
argument_list|(
name|QKeySequence
argument_list|(
literal|"Ctrl+F"
argument_list|)
argument_list|)
expr_stmt|;
name|QMenu
modifier|*
name|menu
init|=
operator|new
name|QMenu
argument_list|()
decl_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|QPushButton
name|menuButton
decl_stmt|;
name|menuButton
operator|.
name|setMenu
argument_list|(
name|menu
argument_list|)
expr_stmt|;
name|menuButton
operator|.
name|show
argument_list|()
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|interface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
operator|&
name|menuButton
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|ButtonMenu
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|interface
operator|->
name|state
argument_list|()
operator|.
name|hasPopup
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|actionInterface
argument_list|()
operator|->
name|actionNames
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|QAccessibleActionInterface
operator|::
name|showMenuAction
argument_list|()
operator|<<
name|QAccessibleActionInterface
operator|::
name|setFocusAction
argument_list|()
argument_list|)
expr_stmt|;
comment|// showing the menu enters a new event loop...
comment|//    interface->actionInterface()->doAction(QAccessibleActionInterface::showMenuAction());
comment|//    QTest::qWait(500);
operator|delete
name|interface
expr_stmt|;
operator|delete
name|menu
expr_stmt|;
block|}
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
block|{
comment|// test check box
name|interface
operator|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
operator|&
name|checkBox
argument_list|)
expr_stmt|;
name|actionInterface
operator|=
name|interface
operator|->
name|actionInterface
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|CheckBox
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|actionInterface
operator|->
name|actionNames
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|QAccessibleActionInterface
operator|::
name|toggleAction
argument_list|()
operator|<<
name|QAccessibleActionInterface
operator|::
name|setFocusAction
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|interface
operator|->
name|state
argument_list|()
operator|.
name|checked
argument_list|)
expr_stmt|;
name|actionInterface
operator|->
name|doAction
argument_list|(
name|QAccessibleActionInterface
operator|::
name|toggleAction
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|actionInterface
operator|->
name|actionNames
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|QAccessibleActionInterface
operator|::
name|toggleAction
argument_list|()
operator|<<
name|QAccessibleActionInterface
operator|::
name|setFocusAction
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|interface
operator|->
name|state
argument_list|()
operator|.
name|checked
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|checkBox
operator|.
name|isChecked
argument_list|()
argument_list|)
expr_stmt|;
name|QAccessible
operator|::
name|State
name|st
decl_stmt|;
name|st
operator|.
name|checked
operator|=
literal|true
expr_stmt|;
name|QAccessibleStateChangeEvent
name|ev
argument_list|(
operator|&
name|checkBox
argument_list|,
name|st
argument_list|)
decl_stmt|;
name|QVERIFY_EVENT
argument_list|(
operator|&
name|ev
argument_list|)
expr_stmt|;
name|checkBox
operator|.
name|setChecked
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY_EVENT
argument_list|(
operator|&
name|ev
argument_list|)
expr_stmt|;
operator|delete
name|interface
expr_stmt|;
block|}
block|{
comment|// test radiobutton
name|interface
operator|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
operator|&
name|radio
argument_list|)
expr_stmt|;
name|actionInterface
operator|=
name|interface
operator|->
name|actionInterface
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|RadioButton
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|actionInterface
operator|->
name|actionNames
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|QAccessibleActionInterface
operator|::
name|toggleAction
argument_list|()
operator|<<
name|QAccessibleActionInterface
operator|::
name|setFocusAction
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|interface
operator|->
name|state
argument_list|()
operator|.
name|checked
argument_list|)
expr_stmt|;
name|actionInterface
operator|->
name|doAction
argument_list|(
name|QAccessibleActionInterface
operator|::
name|toggleAction
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|actionInterface
operator|->
name|actionNames
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|QAccessibleActionInterface
operator|::
name|toggleAction
argument_list|()
operator|<<
name|QAccessibleActionInterface
operator|::
name|setFocusAction
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|interface
operator|->
name|state
argument_list|()
operator|.
name|checked
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|radio
operator|.
name|isChecked
argument_list|()
argument_list|)
expr_stmt|;
name|QAccessible
operator|::
name|State
name|st
decl_stmt|;
name|st
operator|.
name|checked
operator|=
literal|true
expr_stmt|;
name|QAccessibleStateChangeEvent
name|ev
argument_list|(
operator|&
name|radio
argument_list|,
name|st
argument_list|)
decl_stmt|;
name|QVERIFY_EVENT
argument_list|(
operator|&
name|ev
argument_list|)
expr_stmt|;
operator|delete
name|interface
expr_stmt|;
block|}
comment|//    // test standard toolbutton
comment|//    QVERIFY(QAccessible::queryAccessibleInterface(&toolbutton,&test));
comment|//    QCOMPARE(test->role(), QAccessible::PushButton);
comment|//    QCOMPARE(test->defaultAction(0), QAccessible::Press);
comment|//    QCOMPARE(test->actionText(test->defaultAction(0), QAccessible::Name, 0), QString("Press"));
comment|//    QCOMPARE(test->state(), (int)QAccessible::Normal);
comment|//    test->release();
comment|//    // toggle tool button
comment|//    QVERIFY(QAccessible::queryAccessibleInterface(&toggletool,&test));
comment|//    QCOMPARE(test->role(), QAccessible::CheckBox);
comment|//    QCOMPARE(test->defaultAction(0), QAccessible::Press);
comment|//    QCOMPARE(test->actionText(test->defaultAction(0), QAccessible::Name, 0), QString("Check"));
comment|//    QCOMPARE(test->state(), (int)QAccessible::Normal);
comment|//    QVERIFY(test->doAction(QAccessible::Press, 0));
comment|//    QTest::qWait(500);
comment|//    QCOMPARE(test->actionText(test->defaultAction(0), QAccessible::Name, 0), QString("Uncheck"));
comment|//    QCOMPARE(test->state(), (int)QAccessible::Checked);
comment|//    test->release();
comment|//    // test menu toolbutton
comment|//    QVERIFY(QAccessible::queryAccessibleInterface(&menuToolButton,&test));
comment|//    QCOMPARE(test->role(), QAccessible::ButtonMenu);
comment|//    QCOMPARE(test->defaultAction(0), 1);
comment|//    QCOMPARE(test->actionText(test->defaultAction(0), QAccessible::Name, 0), QString("Open"));
comment|//    QCOMPARE(test->state(), (int)QAccessible::HasPopup);
comment|//    QCOMPARE(test->actionCount(0), 1);
comment|//    QCOMPARE(test->actionText(QAccessible::Press, QAccessible::Name, 0), QString("Press"));
comment|//    test->release();
comment|//    // test split menu toolbutton
comment|//    QVERIFY(QAccessible::queryAccessibleInterface(&splitToolButton,&test));
comment|//    QCOMPARE(test->childCount(), 2);
comment|//    QCOMPARE(test->role(), QAccessible::ButtonDropDown);
comment|//    QCOMPARE(test->role(1), QAccessible::PushButton);
comment|//    QCOMPARE(test->role(2), QAccessible::ButtonMenu);
comment|//    QCOMPARE(test->defaultAction(0), QAccessible::Press);
comment|//    QCOMPARE(test->defaultAction(1), QAccessible::Press);
comment|//    QCOMPARE(test->defaultAction(2), QAccessible::Press);
comment|//    QCOMPARE(test->actionText(test->defaultAction(0), QAccessible::Name, 0), QString("Press"));
comment|//    QCOMPARE(test->state(), (int)QAccessible::HasPopup);
comment|//    QCOMPARE(test->actionCount(0), 1);
comment|//    QCOMPARE(test->actionText(1, QAccessible::Name, 0), QString("Open"));
comment|//    QCOMPARE(test->actionText(test->defaultAction(1), QAccessible::Name, 1), QString("Press"));
comment|//    QCOMPARE(test->state(1), (int)QAccessible::Normal);
comment|//    QCOMPARE(test->actionText(test->defaultAction(2), QAccessible::Name, 2), QString("Open"));
comment|//    QCOMPARE(test->state(2), (int)QAccessible::HasPopup);
comment|//    test->release();
block|}
end_function
begin_function
DECL|function|scrollBarTest
name|void
name|tst_QAccessibility
operator|::
name|scrollBarTest
parameter_list|()
block|{
name|QScrollBar
modifier|*
name|scrollBar
init|=
operator|new
name|QScrollBar
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|)
decl_stmt|;
name|QAccessibleInterface
modifier|*
specifier|const
name|scrollBarInterface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|scrollBar
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|scrollBarInterface
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|scrollBarInterface
operator|->
name|state
argument_list|()
operator|.
name|invisible
argument_list|)
expr_stmt|;
name|scrollBar
operator|->
name|resize
argument_list|(
literal|200
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|scrollBar
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|scrollBarInterface
operator|->
name|state
argument_list|()
operator|.
name|invisible
argument_list|)
expr_stmt|;
name|QAccessibleEvent
name|show
argument_list|(
name|scrollBar
argument_list|,
name|QAccessible
operator|::
name|ObjectShow
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QTestAccessibility
operator|::
name|containsEvent
argument_list|(
operator|&
name|show
argument_list|)
argument_list|)
expr_stmt|;
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
name|scrollBar
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|scrollBarInterface
operator|->
name|state
argument_list|()
operator|.
name|invisible
argument_list|)
expr_stmt|;
name|QAccessibleEvent
name|hide
argument_list|(
name|scrollBar
argument_list|,
name|QAccessible
operator|::
name|ObjectHide
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QTestAccessibility
operator|::
name|containsEvent
argument_list|(
operator|&
name|hide
argument_list|)
argument_list|)
expr_stmt|;
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
comment|// Test that the left/right subcontrols are set to unavailable when the scrollBar is at the minimum/maximum.
name|scrollBar
operator|->
name|show
argument_list|()
expr_stmt|;
name|scrollBar
operator|->
name|setMinimum
argument_list|(
literal|11
argument_list|)
expr_stmt|;
name|scrollBar
operator|->
name|setMaximum
argument_list|(
literal|111
argument_list|)
expr_stmt|;
name|QAccessibleValueInterface
modifier|*
name|valueIface
init|=
name|scrollBarInterface
operator|->
name|valueInterface
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|valueIface
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|valueIface
operator|->
name|minimumValue
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|,
name|scrollBar
operator|->
name|minimum
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|valueIface
operator|->
name|maximumValue
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|,
name|scrollBar
operator|->
name|maximum
argument_list|()
argument_list|)
expr_stmt|;
name|scrollBar
operator|->
name|setValue
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|valueIface
operator|->
name|currentValue
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|,
name|scrollBar
operator|->
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|scrollBar
operator|->
name|setValue
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|valueIface
operator|->
name|currentValue
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|,
name|scrollBar
operator|->
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|scrollBar
operator|->
name|setValue
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|valueIface
operator|->
name|currentValue
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|,
name|scrollBar
operator|->
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|valueIface
operator|->
name|setCurrentValue
argument_list|(
literal|77
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|77
argument_list|,
name|scrollBar
operator|->
name|value
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QRect
name|scrollBarRect
init|=
name|scrollBarInterface
operator|->
name|rect
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|scrollBarRect
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|scrollBarInterface
expr_stmt|;
operator|delete
name|scrollBar
expr_stmt|;
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tabTest
name|void
name|tst_QAccessibility
operator|::
name|tabTest
parameter_list|()
block|{
name|QTabBar
modifier|*
name|tabBar
init|=
operator|new
name|QTabBar
argument_list|()
decl_stmt|;
name|tabBar
operator|->
name|show
argument_list|()
expr_stmt|;
name|QAccessibleInterface
modifier|*
specifier|const
name|interface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|tabBar
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|interface
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Test that the Invisible bit for the navigation buttons gets set
comment|// and cleared correctly.
name|QAccessibleInterface
modifier|*
name|leftButton
init|=
name|interface
operator|->
name|child
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|leftButton
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|PushButton
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|leftButton
operator|->
name|state
argument_list|()
operator|.
name|invisible
argument_list|)
expr_stmt|;
operator|delete
name|leftButton
expr_stmt|;
specifier|const
name|int
name|lots
init|=
literal|5
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lots
condition|;
operator|++
name|i
control|)
name|tabBar
operator|->
name|addTab
argument_list|(
literal|"Foo"
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|child1
init|=
name|interface
operator|->
name|child
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|child2
init|=
name|interface
operator|->
name|child
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|child1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|child1
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|PageTab
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|child2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|child2
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|PageTab
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|child1
operator|->
name|state
argument_list|()
operator|.
name|invisible
operator|)
operator|==
literal|false
argument_list|)
expr_stmt|;
name|tabBar
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|child1
operator|->
name|state
argument_list|()
operator|.
name|invisible
argument_list|)
expr_stmt|;
name|tabBar
operator|->
name|show
argument_list|()
expr_stmt|;
name|tabBar
operator|->
name|setCurrentIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Test that sending a focus action to a tab does not select it.
comment|//    child2->doAction(QAccessible::Focus, 2, QVariantList());
name|QCOMPARE
argument_list|(
name|tabBar
operator|->
name|currentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test that sending a press action to a tab selects it.
name|QVERIFY
argument_list|(
name|child2
operator|->
name|actionInterface
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|child2
operator|->
name|actionInterface
argument_list|()
operator|->
name|actionNames
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|QAccessibleActionInterface
operator|::
name|pressAction
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tabBar
operator|->
name|currentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|child2
operator|->
name|actionInterface
argument_list|()
operator|->
name|doAction
argument_list|(
name|QAccessibleActionInterface
operator|::
name|pressAction
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tabBar
operator|->
name|currentIndex
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
operator|delete
name|tabBar
expr_stmt|;
operator|delete
name|interface
expr_stmt|;
operator|delete
name|child1
expr_stmt|;
operator|delete
name|child2
expr_stmt|;
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tabWidgetTest
name|void
name|tst_QAccessibility
operator|::
name|tabWidgetTest
parameter_list|()
block|{
name|QTabWidget
modifier|*
name|tabWidget
init|=
operator|new
name|QTabWidget
argument_list|()
decl_stmt|;
name|tabWidget
operator|->
name|show
argument_list|()
expr_stmt|;
comment|// the interface for the tab is just a container for tabbar and stacked widget
name|QAccessibleInterface
modifier|*
specifier|const
name|interface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|tabWidget
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|interface
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|Client
argument_list|)
expr_stmt|;
comment|// Create pages, check navigation
name|QLabel
modifier|*
name|label1
init|=
operator|new
name|QLabel
argument_list|(
literal|"Page 1"
argument_list|,
name|tabWidget
argument_list|)
decl_stmt|;
name|tabWidget
operator|->
name|addTab
argument_list|(
name|label1
argument_list|,
literal|"Tab 1"
argument_list|)
expr_stmt|;
name|QLabel
modifier|*
name|label2
init|=
operator|new
name|QLabel
argument_list|(
literal|"Page 2"
argument_list|,
name|tabWidget
argument_list|)
decl_stmt|;
name|tabWidget
operator|->
name|addTab
argument_list|(
name|label2
argument_list|,
literal|"Tab 2"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|tabBarInterface
init|=
literal|0
decl_stmt|;
comment|// there is no special logic to sort the children, so the contents will be 1, the tab bar 2
name|tabBarInterface
operator|=
name|interface
operator|->
name|child
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tabBarInterface
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tabBarInterface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tabBarInterface
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|PageTabList
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|tabButton1Interface
init|=
name|tabBarInterface
operator|->
name|child
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|tabButton1Interface
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tabButton1Interface
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|PageTab
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tabButton1Interface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Tab 1"
argument_list|)
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|tabButton2Interface
init|=
name|tabBarInterface
operator|->
name|child
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|tabButton1Interface
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tabButton2Interface
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|PageTab
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tabButton2Interface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Tab 2"
argument_list|)
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|tabButtonLeft
init|=
name|tabBarInterface
operator|->
name|child
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|tabButtonLeft
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tabButtonLeft
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|PushButton
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tabButtonLeft
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Scroll Left"
argument_list|)
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|tabButtonRight
init|=
name|tabBarInterface
operator|->
name|child
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|tabButtonRight
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tabButtonRight
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|PushButton
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tabButtonRight
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Scroll Right"
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|tabButton1Interface
expr_stmt|;
operator|delete
name|tabButton2Interface
expr_stmt|;
operator|delete
name|tabButtonLeft
expr_stmt|;
operator|delete
name|tabButtonRight
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|stackWidgetInterface
init|=
name|interface
operator|->
name|child
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|stackWidgetInterface
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stackWidgetInterface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stackWidgetInterface
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|LayeredPane
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|stackChild1Interface
init|=
name|stackWidgetInterface
operator|->
name|child
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|stackChild1Interface
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_CC_INTEL
name|QCOMPARE
argument_list|(
name|stackChild1Interface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|stackChild1Interface
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|StaticText
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stackChild1Interface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Page 1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|label1
argument_list|,
name|stackChild1Interface
operator|->
name|object
argument_list|()
argument_list|)
expr_stmt|;
comment|// Navigation in stack widgets should be consistent
name|QAccessibleInterface
modifier|*
name|parent
init|=
name|stackChild1Interface
operator|->
name|parent
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|parent
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_CC_INTEL
name|QCOMPARE
argument_list|(
name|parent
operator|->
name|childCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|parent
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|LayeredPane
argument_list|)
expr_stmt|;
operator|delete
name|parent
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|stackChild2Interface
init|=
name|stackWidgetInterface
operator|->
name|child
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|stackChild2Interface
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stackChild2Interface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stackChild2Interface
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|StaticText
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|label2
argument_list|,
name|stackChild2Interface
operator|->
name|object
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|label2
operator|->
name|text
argument_list|()
argument_list|,
name|stackChild2Interface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|)
expr_stmt|;
name|parent
operator|=
name|stackChild2Interface
operator|->
name|parent
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|parent
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_CC_INTEL
name|QCOMPARE
argument_list|(
name|parent
operator|->
name|childCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|parent
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|LayeredPane
argument_list|)
expr_stmt|;
operator|delete
name|parent
expr_stmt|;
operator|delete
name|tabBarInterface
expr_stmt|;
operator|delete
name|stackChild1Interface
expr_stmt|;
operator|delete
name|stackChild2Interface
expr_stmt|;
operator|delete
name|stackWidgetInterface
expr_stmt|;
operator|delete
name|interface
expr_stmt|;
operator|delete
name|tabWidget
expr_stmt|;
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|menuTest
name|void
name|tst_QAccessibility
operator|::
name|menuTest
parameter_list|()
block|{
block|{
name|QMainWindow
name|mw
decl_stmt|;
name|mw
operator|.
name|resize
argument_list|(
literal|300
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|QMenu
modifier|*
name|file
init|=
name|mw
operator|.
name|menuBar
argument_list|()
operator|->
name|addMenu
argument_list|(
literal|"&File"
argument_list|)
decl_stmt|;
name|QMenu
modifier|*
name|fileNew
init|=
name|file
operator|->
name|addMenu
argument_list|(
literal|"&New..."
argument_list|)
decl_stmt|;
name|fileNew
operator|->
name|menuAction
argument_list|()
operator|->
name|setShortcut
argument_list|(
name|tr
argument_list|(
literal|"Ctrl+N"
argument_list|)
argument_list|)
expr_stmt|;
name|fileNew
operator|->
name|addAction
argument_list|(
literal|"Text file"
argument_list|)
expr_stmt|;
name|fileNew
operator|->
name|addAction
argument_list|(
literal|"Image file"
argument_list|)
expr_stmt|;
name|file
operator|->
name|addAction
argument_list|(
literal|"&Open"
argument_list|)
operator|->
name|setShortcut
argument_list|(
name|tr
argument_list|(
literal|"Ctrl+O"
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|->
name|addAction
argument_list|(
literal|"&Save"
argument_list|)
operator|->
name|setShortcut
argument_list|(
name|tr
argument_list|(
literal|"Ctrl+S"
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
name|file
operator|->
name|addAction
argument_list|(
literal|"E&xit"
argument_list|)
operator|->
name|setShortcut
argument_list|(
name|tr
argument_list|(
literal|"Alt+F4"
argument_list|)
argument_list|)
expr_stmt|;
name|QMenu
modifier|*
name|edit
init|=
name|mw
operator|.
name|menuBar
argument_list|()
operator|->
name|addMenu
argument_list|(
literal|"&Edit"
argument_list|)
decl_stmt|;
name|edit
operator|->
name|addAction
argument_list|(
literal|"&Undo"
argument_list|)
operator|->
name|setShortcut
argument_list|(
name|tr
argument_list|(
literal|"Ctrl+Z"
argument_list|)
argument_list|)
expr_stmt|;
name|edit
operator|->
name|addAction
argument_list|(
literal|"&Redo"
argument_list|)
operator|->
name|setShortcut
argument_list|(
name|tr
argument_list|(
literal|"Ctrl+Y"
argument_list|)
argument_list|)
expr_stmt|;
name|edit
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
name|edit
operator|->
name|addAction
argument_list|(
literal|"Cu&t"
argument_list|)
operator|->
name|setShortcut
argument_list|(
name|tr
argument_list|(
literal|"Ctrl+X"
argument_list|)
argument_list|)
expr_stmt|;
name|edit
operator|->
name|addAction
argument_list|(
literal|"&Copy"
argument_list|)
operator|->
name|setShortcut
argument_list|(
name|tr
argument_list|(
literal|"Ctrl+C"
argument_list|)
argument_list|)
expr_stmt|;
name|edit
operator|->
name|addAction
argument_list|(
literal|"&Paste"
argument_list|)
operator|->
name|setShortcut
argument_list|(
name|tr
argument_list|(
literal|"Ctrl+V"
argument_list|)
argument_list|)
expr_stmt|;
name|edit
operator|->
name|addAction
argument_list|(
literal|"&Delete"
argument_list|)
operator|->
name|setShortcut
argument_list|(
name|tr
argument_list|(
literal|"Del"
argument_list|)
argument_list|)
expr_stmt|;
name|edit
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
name|edit
operator|->
name|addAction
argument_list|(
literal|"Pr&operties"
argument_list|)
expr_stmt|;
name|mw
operator|.
name|menuBar
argument_list|()
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
name|QMenu
modifier|*
name|help
init|=
name|mw
operator|.
name|menuBar
argument_list|()
operator|->
name|addMenu
argument_list|(
literal|"&Help"
argument_list|)
decl_stmt|;
name|help
operator|->
name|addAction
argument_list|(
literal|"&Contents"
argument_list|)
expr_stmt|;
name|help
operator|->
name|addAction
argument_list|(
literal|"&About"
argument_list|)
expr_stmt|;
name|mw
operator|.
name|menuBar
argument_list|()
operator|->
name|addAction
argument_list|(
literal|"Action!"
argument_list|)
expr_stmt|;
name|mw
operator|.
name|show
argument_list|()
expr_stmt|;
comment|// triggers layout
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|interface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|mw
operator|.
name|menuBar
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|verifyHierarchy
argument_list|(
name|interface
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|interface
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|MenuBar
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|iFile
init|=
name|interface
operator|->
name|child
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|iEdit
init|=
name|interface
operator|->
name|child
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|iSeparator
init|=
name|interface
operator|->
name|child
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|iHelp
init|=
name|interface
operator|->
name|child
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|iAction
init|=
name|interface
operator|->
name|child
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|iFile
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|MenuItem
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iEdit
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|MenuItem
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iSeparator
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|Separator
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iHelp
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|MenuItem
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iAction
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|MenuItem
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_MAC
ifdef|#
directive|ifdef
name|Q_OS_WINCE
if|if
condition|(
operator|!
name|IsValidCEPlatform
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"Tests do not work on Mobile platforms due to native menus"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|mw
operator|.
name|mapFromGlobal
argument_list|(
name|interface
operator|->
name|rect
argument_list|()
operator|.
name|topLeft
argument_list|()
argument_list|)
argument_list|,
name|mw
operator|.
name|menuBar
argument_list|()
operator|->
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|rect
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|mw
operator|.
name|menuBar
argument_list|()
operator|->
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|interface
operator|->
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|iFile
operator|->
name|rect
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|interface
operator|->
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|iEdit
operator|->
name|rect
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// QVERIFY(interface->rect().contains(childSeparator->rect())); //separator might be invisible
name|QVERIFY
argument_list|(
name|interface
operator|->
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|iHelp
operator|->
name|rect
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|interface
operator|->
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|iAction
operator|->
name|rect
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|iFile
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"File"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iEdit
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Edit"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iSeparator
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iHelp
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Help"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iAction
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Action!"
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: Currently not working, task to fix is #100019.
ifndef|#
directive|ifndef
name|Q_OS_MAC
name|QCOMPARE
argument_list|(
name|iFile
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Accelerator
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"Alt+F"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iEdit
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Accelerator
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"Alt+E"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iSeparator
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Accelerator
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iHelp
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Accelerator
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"Alt+H"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iAction
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Accelerator
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|iFile
operator|->
name|actionInterface
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iFile
operator|->
name|actionInterface
argument_list|()
operator|->
name|actionNames
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|QAccessibleActionInterface
operator|::
name|showMenuAction
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iSeparator
operator|->
name|actionInterface
argument_list|()
operator|->
name|actionNames
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iHelp
operator|->
name|actionInterface
argument_list|()
operator|->
name|actionNames
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|QAccessibleActionInterface
operator|::
name|showMenuAction
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iAction
operator|->
name|actionInterface
argument_list|()
operator|->
name|actionNames
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|QAccessibleActionInterface
operator|::
name|pressAction
argument_list|()
argument_list|)
expr_stmt|;
name|bool
name|menuFade
init|=
name|qApp
operator|->
name|isEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_FadeMenu
argument_list|)
decl_stmt|;
name|int
name|menuFadeDelay
init|=
literal|300
decl_stmt|;
name|iFile
operator|->
name|actionInterface
argument_list|()
operator|->
name|doAction
argument_list|(
name|QAccessibleActionInterface
operator|::
name|showMenuAction
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|menuFade
condition|)
name|QTest
operator|::
name|qWait
argument_list|(
name|menuFadeDelay
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|->
name|isVisible
argument_list|()
operator|&&
operator|!
name|edit
operator|->
name|isVisible
argument_list|()
operator|&&
operator|!
name|help
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|iEdit
operator|->
name|actionInterface
argument_list|()
operator|->
name|doAction
argument_list|(
name|QAccessibleActionInterface
operator|::
name|showMenuAction
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|menuFade
condition|)
name|QTest
operator|::
name|qWait
argument_list|(
name|menuFadeDelay
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|->
name|isVisible
argument_list|()
operator|&&
name|edit
operator|->
name|isVisible
argument_list|()
operator|&&
operator|!
name|help
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|iHelp
operator|->
name|actionInterface
argument_list|()
operator|->
name|doAction
argument_list|(
name|QAccessibleActionInterface
operator|::
name|showMenuAction
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|menuFade
condition|)
name|QTest
operator|::
name|qWait
argument_list|(
name|menuFadeDelay
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|->
name|isVisible
argument_list|()
operator|&&
operator|!
name|edit
operator|->
name|isVisible
argument_list|()
operator|&&
name|help
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|iAction
operator|->
name|actionInterface
argument_list|()
operator|->
name|doAction
argument_list|(
name|QAccessibleActionInterface
operator|::
name|showMenuAction
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|menuFade
condition|)
name|QTest
operator|::
name|qWait
argument_list|(
name|menuFadeDelay
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|->
name|isVisible
argument_list|()
operator|&&
operator|!
name|edit
operator|->
name|isVisible
argument_list|()
operator|&&
operator|!
name|help
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|interface
operator|->
name|actionInterface
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|actionInterface
argument_list|()
operator|->
name|actionNames
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|interface
expr_stmt|;
name|interface
operator|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|PopupMenu
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|iFileNew
init|=
name|interface
operator|->
name|child
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|iFileOpen
init|=
name|interface
operator|->
name|child
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|iFileSave
init|=
name|interface
operator|->
name|child
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|iFileSeparator
init|=
name|interface
operator|->
name|child
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|iFileExit
init|=
name|interface
operator|->
name|child
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|iFileNew
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|MenuItem
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iFileOpen
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|MenuItem
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iFileSave
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|MenuItem
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iFileSeparator
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|Separator
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iFileExit
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|MenuItem
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iFileNew
operator|->
name|actionInterface
argument_list|()
operator|->
name|actionNames
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|QAccessibleActionInterface
operator|::
name|showMenuAction
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iFileOpen
operator|->
name|actionInterface
argument_list|()
operator|->
name|actionNames
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|QAccessibleActionInterface
operator|::
name|pressAction
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iFileSave
operator|->
name|actionInterface
argument_list|()
operator|->
name|actionNames
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|QAccessibleActionInterface
operator|::
name|pressAction
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iFileSeparator
operator|->
name|actionInterface
argument_list|()
operator|->
name|actionNames
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iFileExit
operator|->
name|actionInterface
argument_list|()
operator|->
name|actionNames
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|QAccessibleActionInterface
operator|::
name|pressAction
argument_list|()
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|iface
init|=
literal|0
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|iface2
init|=
literal|0
decl_stmt|;
comment|// traverse siblings with navigate(Sibling, ...)
name|iface
operator|=
name|interface
operator|->
name|child
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|MenuItem
argument_list|)
expr_stmt|;
name|QAccessible
operator|::
name|Role
name|fileRoles
index|[
literal|5
index|]
init|=
block|{
name|QAccessible
operator|::
name|MenuItem
block|,
name|QAccessible
operator|::
name|MenuItem
block|,
name|QAccessible
operator|::
name|MenuItem
block|,
name|QAccessible
operator|::
name|Separator
block|,
name|QAccessible
operator|::
name|MenuItem
block|}
decl_stmt|;
for|for
control|(
name|int
name|child
init|=
literal|0
init|;
name|child
operator|<
literal|5
condition|;
operator|++
name|child
control|)
block|{
name|iface2
operator|=
name|interface
operator|->
name|child
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface2
operator|->
name|role
argument_list|()
argument_list|,
name|fileRoles
index|[
name|child
index|]
argument_list|)
expr_stmt|;
operator|delete
name|iface2
expr_stmt|;
block|}
operator|delete
name|iface
expr_stmt|;
comment|// "New" item
name|iface
operator|=
name|interface
operator|->
name|child
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|MenuItem
argument_list|)
expr_stmt|;
comment|// "New" menu
name|iface2
operator|=
name|iface
operator|->
name|child
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|iface
expr_stmt|;
name|iface
operator|=
name|iface2
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|PopupMenu
argument_list|)
expr_stmt|;
comment|// "Text file" menu item
name|iface2
operator|=
name|iface
operator|->
name|child
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|iface
expr_stmt|;
name|iface
operator|=
name|iface2
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|MenuItem
argument_list|)
expr_stmt|;
operator|delete
name|iface
expr_stmt|;
comment|// move mouse pointer away, since that might influence the
comment|// subsequent tests
name|QTest
operator|::
name|mouseMove
argument_list|(
operator|&
name|mw
argument_list|,
name|QPoint
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
if|if
condition|(
name|menuFade
condition|)
name|QTest
operator|::
name|qWait
argument_list|(
name|menuFadeDelay
argument_list|)
expr_stmt|;
name|iFile
operator|->
name|actionInterface
argument_list|()
operator|->
name|doAction
argument_list|(
name|QAccessibleActionInterface
operator|::
name|showMenuAction
argument_list|()
argument_list|)
expr_stmt|;
name|iFileNew
operator|->
name|actionInterface
argument_list|()
operator|->
name|doAction
argument_list|(
name|QAccessibleActionInterface
operator|::
name|showMenuAction
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fileNew
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|edit
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|help
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
name|mw
operator|.
name|hide
argument_list|()
expr_stmt|;
operator|delete
name|iFile
expr_stmt|;
operator|delete
name|iFileNew
expr_stmt|;
operator|delete
name|iFileOpen
expr_stmt|;
operator|delete
name|iFileSave
expr_stmt|;
operator|delete
name|iFileSeparator
expr_stmt|;
operator|delete
name|iFileExit
expr_stmt|;
comment|// Do not crash if the menu don't have a parent
name|QMenu
modifier|*
name|menu
init|=
operator|new
name|QMenu
decl_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|QLatin1String
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|QLatin1String
argument_list|(
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|QLatin1String
argument_list|(
literal|"three"
argument_list|)
argument_list|)
expr_stmt|;
name|iface
operator|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|menu
argument_list|)
expr_stmt|;
name|iface2
operator|=
name|iface
operator|->
name|parent
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface2
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|Application
argument_list|)
expr_stmt|;
comment|// caused a *crash*
name|iface2
operator|->
name|state
argument_list|()
expr_stmt|;
operator|delete
name|iface2
expr_stmt|;
operator|delete
name|iface
expr_stmt|;
operator|delete
name|menu
expr_stmt|;
block|}
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|spinBoxTest
name|void
name|tst_QAccessibility
operator|::
name|spinBoxTest
parameter_list|()
block|{
name|QSpinBox
modifier|*
specifier|const
name|spinBox
init|=
operator|new
name|QSpinBox
argument_list|()
decl_stmt|;
name|spinBox
operator|->
name|setValue
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|spinBox
operator|->
name|show
argument_list|()
expr_stmt|;
name|QAccessibleInterface
modifier|*
specifier|const
name|interface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|spinBox
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|interface
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|SpinBox
argument_list|)
expr_stmt|;
specifier|const
name|QRect
name|widgetRect
init|=
name|spinBox
operator|->
name|geometry
argument_list|()
decl_stmt|;
specifier|const
name|QRect
name|accessibleRect
init|=
name|interface
operator|->
name|rect
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|accessibleRect
argument_list|,
name|widgetRect
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Value
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// one child, the line edit
specifier|const
name|int
name|numChildren
init|=
name|interface
operator|->
name|childCount
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|numChildren
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|lineEdit
init|=
name|interface
operator|->
name|child
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|lineEdit
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|EditableText
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lineEdit
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Value
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|lineEdit
expr_stmt|;
name|QVERIFY
argument_list|(
name|interface
operator|->
name|valueInterface
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|valueInterface
argument_list|()
operator|->
name|currentValue
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|interface
operator|->
name|valueInterface
argument_list|()
operator|->
name|setCurrentValue
argument_list|(
literal|23
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|valueInterface
argument_list|()
operator|->
name|currentValue
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|,
literal|23
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spinBox
operator|->
name|value
argument_list|()
argument_list|,
literal|23
argument_list|)
expr_stmt|;
name|spinBox
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|spinBox
argument_list|,
name|Qt
operator|::
name|Key_Up
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|QAccessibleValueChangeEvent
name|expectedEvent
argument_list|(
name|spinBox
argument_list|,
name|spinBox
operator|->
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QTestAccessibility
operator|::
name|containsEvent
argument_list|(
operator|&
name|expectedEvent
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|spinBox
expr_stmt|;
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|doubleSpinBoxTest
name|void
name|tst_QAccessibility
operator|::
name|doubleSpinBoxTest
parameter_list|()
block|{
name|QDoubleSpinBox
modifier|*
name|doubleSpinBox
init|=
operator|new
name|QDoubleSpinBox
decl_stmt|;
name|doubleSpinBox
operator|->
name|show
argument_list|()
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|interface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|doubleSpinBox
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|interface
argument_list|)
expr_stmt|;
specifier|const
name|QRect
name|widgetRect
init|=
name|doubleSpinBox
operator|->
name|geometry
argument_list|()
decl_stmt|;
specifier|const
name|QRect
name|accessibleRect
init|=
name|interface
operator|->
name|rect
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|accessibleRect
argument_list|,
name|widgetRect
argument_list|)
expr_stmt|;
comment|// Test that we get valid rects for all the spinbox child interfaces.
specifier|const
name|int
name|numChildren
init|=
name|interface
operator|->
name|childCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numChildren
condition|;
operator|++
name|i
control|)
block|{
name|QAccessibleInterface
modifier|*
name|childIface
init|=
name|interface
operator|->
name|child
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|childRect
init|=
name|childIface
operator|->
name|rect
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|childRect
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|childIface
expr_stmt|;
block|}
operator|delete
name|doubleSpinBox
expr_stmt|;
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|textEditTest
name|void
name|tst_QAccessibility
operator|::
name|textEditTest
parameter_list|()
block|{
block|{
name|QTextEdit
name|edit
decl_stmt|;
name|int
name|startOffset
decl_stmt|;
name|int
name|endOffset
decl_stmt|;
name|QString
name|text
init|=
literal|"hello world\nhow are you today?\n"
decl_stmt|;
name|edit
operator|.
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|edit
operator|.
name|show
argument_list|()
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
operator|&
name|edit
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Value
argument_list|)
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|textInterface
argument_list|()
operator|->
name|textAtOffset
argument_list|(
literal|8
argument_list|,
name|QAccessible2
operator|::
name|WordBoundary
argument_list|,
operator|&
name|startOffset
argument_list|,
operator|&
name|endOffset
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"world"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|startOffset
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|endOffset
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|textInterface
argument_list|()
operator|->
name|textAtOffset
argument_list|(
literal|14
argument_list|,
name|QAccessible2
operator|::
name|LineBoundary
argument_list|,
operator|&
name|startOffset
argument_list|,
operator|&
name|endOffset
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"how are you today?"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|startOffset
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|endOffset
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|textInterface
argument_list|()
operator|->
name|characterCount
argument_list|()
argument_list|,
literal|31
argument_list|)
expr_stmt|;
name|QFontMetrics
name|fm
argument_list|(
name|edit
operator|.
name|font
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|textInterface
argument_list|()
operator|->
name|characterRect
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|QSize
argument_list|(
name|fm
operator|.
name|width
argument_list|(
literal|"h"
argument_list|)
argument_list|,
name|fm
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|textInterface
argument_list|()
operator|->
name|characterRect
argument_list|(
literal|5
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|QSize
argument_list|(
name|fm
operator|.
name|width
argument_list|(
literal|" "
argument_list|)
argument_list|,
name|fm
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|textInterface
argument_list|()
operator|->
name|characterRect
argument_list|(
literal|6
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|QSize
argument_list|(
name|fm
operator|.
name|width
argument_list|(
literal|"w"
argument_list|)
argument_list|,
name|fm
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
comment|// select text
name|QTextCursor
name|c
init|=
name|edit
operator|.
name|textCursor
argument_list|()
decl_stmt|;
name|c
operator|.
name|setPosition
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|c
operator|.
name|setPosition
argument_list|(
literal|4
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|edit
operator|.
name|setTextCursor
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|QAccessibleTextSelectionEvent
name|sel
argument_list|(
operator|&
name|edit
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|QVERIFY_EVENT
argument_list|(
operator|&
name|sel
argument_list|)
expr_stmt|;
name|edit
operator|.
name|selectAll
argument_list|()
expr_stmt|;
name|int
name|end
init|=
name|edit
operator|.
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
decl_stmt|;
name|sel
operator|.
name|setCursorPosition
argument_list|(
name|end
argument_list|)
expr_stmt|;
name|sel
operator|.
name|setSelection
argument_list|(
literal|0
argument_list|,
name|end
argument_list|)
expr_stmt|;
name|QVERIFY_EVENT
argument_list|(
operator|&
name|sel
argument_list|)
expr_stmt|;
block|}
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|textBrowserTest
name|void
name|tst_QAccessibility
operator|::
name|textBrowserTest
parameter_list|()
block|{
block|{
name|QTextBrowser
name|textBrowser
decl_stmt|;
name|QString
name|text
init|=
name|QLatin1String
argument_list|(
literal|"Hello world\nhow are you today?\n"
argument_list|)
decl_stmt|;
name|textBrowser
operator|.
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|textBrowser
operator|.
name|show
argument_list|()
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
operator|&
name|textBrowser
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|iface
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|StaticText
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Value
argument_list|)
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|int
name|startOffset
decl_stmt|;
name|int
name|endOffset
decl_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|textInterface
argument_list|()
operator|->
name|textAtOffset
argument_list|(
literal|8
argument_list|,
name|QAccessible2
operator|::
name|WordBoundary
argument_list|,
operator|&
name|startOffset
argument_list|,
operator|&
name|endOffset
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"world"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|startOffset
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|endOffset
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|textInterface
argument_list|()
operator|->
name|textAtOffset
argument_list|(
literal|14
argument_list|,
name|QAccessible2
operator|::
name|LineBoundary
argument_list|,
operator|&
name|startOffset
argument_list|,
operator|&
name|endOffset
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"how are you today?"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|startOffset
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|endOffset
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|textInterface
argument_list|()
operator|->
name|characterCount
argument_list|()
argument_list|,
literal|31
argument_list|)
expr_stmt|;
block|}
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mdiAreaTest
name|void
name|tst_QAccessibility
operator|::
name|mdiAreaTest
parameter_list|()
block|{
block|{
name|QMdiArea
name|mdiArea
decl_stmt|;
name|mdiArea
operator|.
name|resize
argument_list|(
literal|400
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|show
argument_list|()
expr_stmt|;
specifier|const
name|int
name|subWindowCount
init|=
literal|3
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subWindowCount
condition|;
operator|++
name|i
control|)
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|,
name|Qt
operator|::
name|Dialog
argument_list|)
operator|->
name|show
argument_list|()
expr_stmt|;
name|QList
argument_list|<
name|QMdiSubWindow
modifier|*
argument_list|>
name|subWindows
init|=
name|mdiArea
operator|.
name|subWindowList
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|subWindows
operator|.
name|count
argument_list|()
argument_list|,
name|subWindowCount
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|interface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
operator|&
name|mdiArea
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|interface
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|childCount
argument_list|()
argument_list|,
name|subWindowCount
argument_list|)
expr_stmt|;
block|}
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mdiSubWindowTest
name|void
name|tst_QAccessibility
operator|::
name|mdiSubWindowTest
parameter_list|()
block|{
block|{
name|QMdiArea
name|mdiArea
decl_stmt|;
name|mdiArea
operator|.
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
operator|&
name|mdiArea
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowActive
argument_list|(
operator|&
name|mdiArea
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|int
name|subWindowCount
init|=
literal|5
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subWindowCount
condition|;
operator|++
name|i
control|)
block|{
name|QMdiSubWindow
modifier|*
name|window
init|=
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QPushButton
argument_list|(
literal|"QAccessibilityTest"
argument_list|)
argument_list|)
decl_stmt|;
name|window
operator|->
name|show
argument_list|()
expr_stmt|;
comment|// Parts of this test requires that the sub windows are placed next
comment|// to each other. In order to achieve that QMdiArea must have
comment|// a width which is larger than subWindow->width() * subWindowCount.
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|int
name|minimumWidth
init|=
name|window
operator|->
name|width
argument_list|()
operator|*
name|subWindowCount
operator|+
literal|20
decl_stmt|;
name|mdiArea
operator|.
name|resize
argument_list|(
name|mdiArea
operator|.
name|size
argument_list|()
operator|.
name|expandedTo
argument_list|(
name|QSize
argument_list|(
name|minimumWidth
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
name|QList
argument_list|<
name|QMdiSubWindow
modifier|*
argument_list|>
name|subWindows
init|=
name|mdiArea
operator|.
name|subWindowList
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|subWindows
operator|.
name|count
argument_list|()
argument_list|,
name|subWindowCount
argument_list|)
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|testWindow
init|=
name|subWindows
operator|.
name|at
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|testWindow
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|interface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|testWindow
argument_list|)
decl_stmt|;
comment|// childCount
name|QVERIFY
argument_list|(
name|interface
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// setText / text
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|testWindow
operator|->
name|setWindowTitle
argument_list|(
name|QLatin1String
argument_list|(
literal|"ReplaceMe"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"ReplaceMe"
argument_list|)
argument_list|)
expr_stmt|;
name|interface
operator|->
name|setText
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|,
name|QLatin1String
argument_list|(
literal|"TitleSetOnWindow"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"TitleSetOnWindow"
argument_list|)
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|setActiveSubWindow
argument_list|(
name|testWindow
argument_list|)
expr_stmt|;
comment|// state
name|QAccessible
operator|::
name|State
name|state
decl_stmt|;
name|state
operator|.
name|focusable
operator|=
literal|true
expr_stmt|;
name|state
operator|.
name|focused
operator|=
literal|true
expr_stmt|;
name|state
operator|.
name|movable
operator|=
literal|true
expr_stmt|;
name|state
operator|.
name|sizeable
operator|=
literal|true
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|state
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
specifier|const
name|QRect
name|originalGeometry
init|=
name|testWindow
operator|->
name|geometry
argument_list|()
decl_stmt|;
name|testWindow
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|state
operator|.
name|sizeable
operator|=
literal|false
expr_stmt|;
name|state
operator|.
name|movable
operator|=
literal|false
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|state
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|testWindow
operator|->
name|showNormal
argument_list|()
expr_stmt|;
name|testWindow
operator|->
name|move
argument_list|(
operator|-
literal|10
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|interface
operator|->
name|state
argument_list|()
operator|.
name|offscreen
argument_list|)
expr_stmt|;
name|testWindow
operator|->
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|interface
operator|->
name|state
argument_list|()
operator|.
name|invisible
argument_list|)
expr_stmt|;
name|testWindow
operator|->
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testWindow
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|interface
operator|->
name|state
argument_list|()
operator|.
name|disabled
argument_list|)
expr_stmt|;
name|testWindow
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
operator|&
name|mdiArea
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|setActiveSubWindow
argument_list|(
name|testWindow
argument_list|)
expr_stmt|;
name|testWindow
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWindow
operator|->
name|isAncestorOf
argument_list|(
name|qApp
operator|->
name|focusWidget
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|interface
operator|->
name|state
argument_list|()
operator|.
name|focused
argument_list|)
expr_stmt|;
name|testWindow
operator|->
name|setGeometry
argument_list|(
name|originalGeometry
argument_list|)
expr_stmt|;
comment|// rect
specifier|const
name|QPoint
name|globalPos
init|=
name|testWindow
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|rect
argument_list|()
argument_list|,
name|QRect
argument_list|(
name|globalPos
argument_list|,
name|testWindow
operator|->
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|testWindow
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|rect
argument_list|()
argument_list|,
name|QRect
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|childRect
argument_list|(
name|interface
argument_list|)
argument_list|,
name|QRect
argument_list|()
argument_list|)
expr_stmt|;
name|testWindow
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|childRect
argument_list|(
name|interface
argument_list|)
argument_list|,
name|QRect
argument_list|()
argument_list|)
expr_stmt|;
name|testWindow
operator|->
name|showNormal
argument_list|()
expr_stmt|;
name|testWindow
operator|->
name|widget
argument_list|()
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|childRect
argument_list|(
name|interface
argument_list|)
argument_list|,
name|QRect
argument_list|()
argument_list|)
expr_stmt|;
name|testWindow
operator|->
name|widget
argument_list|()
operator|->
name|show
argument_list|()
expr_stmt|;
specifier|const
name|QRect
name|widgetGeometry
init|=
name|testWindow
operator|->
name|contentsRect
argument_list|()
decl_stmt|;
specifier|const
name|QPoint
name|globalWidgetPos
init|=
name|QPoint
argument_list|(
name|globalPos
operator|.
name|x
argument_list|()
operator|+
name|widgetGeometry
operator|.
name|x
argument_list|()
argument_list|,
name|globalPos
operator|.
name|y
argument_list|()
operator|+
name|widgetGeometry
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"QTBUG-22812"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|childRect
argument_list|(
name|interface
argument_list|)
argument_list|,
name|QRect
argument_list|(
name|globalWidgetPos
argument_list|,
name|widgetGeometry
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// childAt
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|childAt
argument_list|(
operator|-
literal|10
argument_list|,
literal|0
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
name|QAccessibleInterface
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|childAt
argument_list|(
name|globalPos
operator|.
name|x
argument_list|()
argument_list|,
name|globalPos
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
name|QAccessibleInterface
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|child
init|=
name|interface
operator|->
name|childAt
argument_list|(
name|globalWidgetPos
operator|.
name|x
argument_list|()
argument_list|,
name|globalWidgetPos
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|child
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|PushButton
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|child
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"QAccessibilityTest"
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|child
expr_stmt|;
name|testWindow
operator|->
name|widget
argument_list|()
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|childAt
argument_list|(
name|globalWidgetPos
operator|.
name|x
argument_list|()
argument_list|,
name|globalWidgetPos
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
name|QAccessibleInterface
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lineEditTest
name|void
name|tst_QAccessibility
operator|::
name|lineEditTest
parameter_list|()
block|{
name|QWidget
modifier|*
name|toplevel
init|=
operator|new
name|QWidget
decl_stmt|;
block|{
name|QLineEdit
modifier|*
name|le
init|=
operator|new
name|QLineEdit
decl_stmt|;
name|QAIPtr
name|iface
argument_list|(
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|le
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|iface
argument_list|)
expr_stmt|;
name|le
operator|->
name|show
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|->
name|state
argument_list|()
operator|.
name|sizeable
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|->
name|state
argument_list|()
operator|.
name|movable
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|->
name|state
argument_list|()
operator|.
name|focusable
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|->
name|state
argument_list|()
operator|.
name|selectable
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|->
name|state
argument_list|()
operator|.
name|hasPopup
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bool
argument_list|(
name|iface
operator|->
name|state
argument_list|()
operator|.
name|focused
argument_list|)
argument_list|,
name|le
operator|->
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|secret
argument_list|(
name|QLatin1String
argument_list|(
literal|"secret"
argument_list|)
argument_list|)
decl_stmt|;
name|le
operator|->
name|setText
argument_list|(
name|secret
argument_list|)
expr_stmt|;
name|le
operator|->
name|setEchoMode
argument_list|(
name|QLineEdit
operator|::
name|Normal
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|iface
operator|->
name|state
argument_list|()
operator|.
name|passwordEdit
operator|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Value
argument_list|)
argument_list|,
name|secret
argument_list|)
expr_stmt|;
name|le
operator|->
name|setEchoMode
argument_list|(
name|QLineEdit
operator|::
name|NoEcho
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|->
name|state
argument_list|()
operator|.
name|passwordEdit
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Value
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|le
operator|->
name|setEchoMode
argument_list|(
name|QLineEdit
operator|::
name|Password
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|->
name|state
argument_list|()
operator|.
name|passwordEdit
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Value
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|le
operator|->
name|setEchoMode
argument_list|(
name|QLineEdit
operator|::
name|PasswordEchoOnEdit
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|->
name|state
argument_list|()
operator|.
name|passwordEdit
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Value
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|le
operator|->
name|setEchoMode
argument_list|(
name|QLineEdit
operator|::
name|Normal
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|iface
operator|->
name|state
argument_list|()
operator|.
name|passwordEdit
operator|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Value
argument_list|)
argument_list|,
name|secret
argument_list|)
expr_stmt|;
name|le
operator|->
name|setParent
argument_list|(
name|toplevel
argument_list|)
expr_stmt|;
name|toplevel
operator|->
name|show
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|iface
operator|->
name|state
argument_list|()
operator|.
name|sizeable
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|iface
operator|->
name|state
argument_list|()
operator|.
name|movable
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|->
name|state
argument_list|()
operator|.
name|focusable
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|->
name|state
argument_list|()
operator|.
name|selectable
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|->
name|state
argument_list|()
operator|.
name|hasPopup
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bool
argument_list|(
name|iface
operator|->
name|state
argument_list|()
operator|.
name|focused
argument_list|)
argument_list|,
name|le
operator|->
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QLineEdit
modifier|*
name|le2
init|=
operator|new
name|QLineEdit
argument_list|(
name|toplevel
argument_list|)
decl_stmt|;
name|le2
operator|->
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|le2
operator|->
name|activateWindow
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|le
operator|->
name|setFocus
argument_list|(
name|Qt
operator|::
name|TabFocusReason
argument_list|)
expr_stmt|;
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
name|le2
operator|->
name|setFocus
argument_list|(
name|Qt
operator|::
name|TabFocusReason
argument_list|)
expr_stmt|;
name|QAccessibleEvent
name|ev
argument_list|(
name|le2
argument_list|,
name|QAccessible
operator|::
name|Focus
argument_list|)
decl_stmt|;
name|QTRY_VERIFY
argument_list|(
name|QTestAccessibility
operator|::
name|containsEvent
argument_list|(
operator|&
name|ev
argument_list|)
argument_list|)
expr_stmt|;
name|le
operator|->
name|setText
argument_list|(
name|QLatin1String
argument_list|(
literal|"500"
argument_list|)
argument_list|)
expr_stmt|;
name|le
operator|->
name|setValidator
argument_list|(
operator|new
name|QIntValidator
argument_list|()
argument_list|)
expr_stmt|;
name|iface
operator|->
name|setText
argument_list|(
name|QAccessible
operator|::
name|Value
argument_list|,
name|QLatin1String
argument_list|(
literal|"This text is not a number"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|le
operator|->
name|text
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"500"
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|le
expr_stmt|;
operator|delete
name|le2
expr_stmt|;
block|}
block|{
comment|// Text interface to get the current text
name|QString
name|cite
init|=
literal|"I always pass on good advice. It is the only thing to do with it. It is never of any use to oneself. --Oscar Wilde"
decl_stmt|;
name|QLineEdit
modifier|*
name|le3
init|=
operator|new
name|QLineEdit
argument_list|(
name|cite
argument_list|,
name|toplevel
argument_list|)
decl_stmt|;
name|le3
operator|->
name|show
argument_list|()
expr_stmt|;
name|QAIPtr
name|iface
argument_list|(
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|le3
argument_list|)
argument_list|)
decl_stmt|;
name|QAccessibleTextInterface
modifier|*
name|textIface
init|=
name|iface
operator|->
name|textInterface
argument_list|()
decl_stmt|;
name|le3
operator|->
name|deselect
argument_list|()
expr_stmt|;
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
name|le3
operator|->
name|setCursorPosition
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|textIface
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QAccessibleTextCursorEvent
name|caretEvent
argument_list|(
name|le3
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|QTRY_VERIFY
argument_list|(
name|QTestAccessibility
operator|::
name|containsEvent
argument_list|(
operator|&
name|caretEvent
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|textIface
operator|->
name|selectionCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
name|int
name|start
decl_stmt|,
name|end
decl_stmt|;
name|QCOMPARE
argument_list|(
name|textIface
operator|->
name|text
argument_list|(
literal|0
argument_list|,
literal|8
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"I always"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|textIface
operator|->
name|textAtOffset
argument_list|(
literal|0
argument_list|,
name|QAccessible2
operator|::
name|CharBoundary
argument_list|,
operator|&
name|start
argument_list|,
operator|&
name|end
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"I"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|start
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|end
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|textIface
operator|->
name|textBeforeOffset
argument_list|(
literal|0
argument_list|,
name|QAccessible2
operator|::
name|CharBoundary
argument_list|,
operator|&
name|start
argument_list|,
operator|&
name|end
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|textIface
operator|->
name|textAfterOffset
argument_list|(
literal|0
argument_list|,
name|QAccessible2
operator|::
name|CharBoundary
argument_list|,
operator|&
name|start
argument_list|,
operator|&
name|end
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|start
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|end
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|textIface
operator|->
name|textAtOffset
argument_list|(
literal|5
argument_list|,
name|QAccessible2
operator|::
name|CharBoundary
argument_list|,
operator|&
name|start
argument_list|,
operator|&
name|end
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|start
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|end
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|textIface
operator|->
name|textBeforeOffset
argument_list|(
literal|5
argument_list|,
name|QAccessible2
operator|::
name|CharBoundary
argument_list|,
operator|&
name|start
argument_list|,
operator|&
name|end
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"w"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|textIface
operator|->
name|textAfterOffset
argument_list|(
literal|5
argument_list|,
name|QAccessible2
operator|::
name|CharBoundary
argument_list|,
operator|&
name|start
argument_list|,
operator|&
name|end
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|textIface
operator|->
name|textAtOffset
argument_list|(
literal|5
argument_list|,
name|QAccessible2
operator|::
name|WordBoundary
argument_list|,
operator|&
name|start
argument_list|,
operator|&
name|end
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"always"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|start
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|end
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|textIface
operator|->
name|textAtOffset
argument_list|(
literal|2
argument_list|,
name|QAccessible2
operator|::
name|WordBoundary
argument_list|,
operator|&
name|start
argument_list|,
operator|&
name|end
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"always"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|textIface
operator|->
name|textAtOffset
argument_list|(
literal|7
argument_list|,
name|QAccessible2
operator|::
name|WordBoundary
argument_list|,
operator|&
name|start
argument_list|,
operator|&
name|end
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"always"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|textIface
operator|->
name|textAtOffset
argument_list|(
literal|8
argument_list|,
name|QAccessible2
operator|::
name|WordBoundary
argument_list|,
operator|&
name|start
argument_list|,
operator|&
name|end
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|textIface
operator|->
name|textAtOffset
argument_list|(
literal|25
argument_list|,
name|QAccessible2
operator|::
name|WordBoundary
argument_list|,
operator|&
name|start
argument_list|,
operator|&
name|end
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"advice"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|textIface
operator|->
name|textAtOffset
argument_list|(
literal|92
argument_list|,
name|QAccessible2
operator|::
name|WordBoundary
argument_list|,
operator|&
name|start
argument_list|,
operator|&
name|end
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"oneself"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|textIface
operator|->
name|textBeforeOffset
argument_list|(
literal|5
argument_list|,
name|QAccessible2
operator|::
name|WordBoundary
argument_list|,
operator|&
name|start
argument_list|,
operator|&
name|end
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|textIface
operator|->
name|textAfterOffset
argument_list|(
literal|5
argument_list|,
name|QAccessible2
operator|::
name|WordBoundary
argument_list|,
operator|&
name|start
argument_list|,
operator|&
name|end
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|textIface
operator|->
name|textAtOffset
argument_list|(
literal|5
argument_list|,
name|QAccessible2
operator|::
name|SentenceBoundary
argument_list|,
operator|&
name|start
argument_list|,
operator|&
name|end
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"I always pass on good advice. "
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|start
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|end
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|textIface
operator|->
name|textBeforeOffset
argument_list|(
literal|40
argument_list|,
name|QAccessible2
operator|::
name|SentenceBoundary
argument_list|,
operator|&
name|start
argument_list|,
operator|&
name|end
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"I always pass on good advice. "
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|textIface
operator|->
name|textAfterOffset
argument_list|(
literal|5
argument_list|,
name|QAccessible2
operator|::
name|SentenceBoundary
argument_list|,
operator|&
name|start
argument_list|,
operator|&
name|end
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"It is the only thing to do with it. "
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|textIface
operator|->
name|textAtOffset
argument_list|(
literal|5
argument_list|,
name|QAccessible2
operator|::
name|ParagraphBoundary
argument_list|,
operator|&
name|start
argument_list|,
operator|&
name|end
argument_list|)
argument_list|,
name|cite
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|start
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|end
argument_list|,
name|cite
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|textIface
operator|->
name|textAtOffset
argument_list|(
literal|5
argument_list|,
name|QAccessible2
operator|::
name|LineBoundary
argument_list|,
operator|&
name|start
argument_list|,
operator|&
name|end
argument_list|)
argument_list|,
name|cite
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|textIface
operator|->
name|textAtOffset
argument_list|(
literal|5
argument_list|,
name|QAccessible2
operator|::
name|NoBoundary
argument_list|,
operator|&
name|start
argument_list|,
operator|&
name|end
argument_list|)
argument_list|,
name|cite
argument_list|)
expr_stmt|;
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
block|}
block|{
comment|// Test events: cursor movement, selection, text changes
name|QString
name|text
init|=
literal|"Hello, world"
decl_stmt|;
name|QLineEdit
modifier|*
name|lineEdit
init|=
operator|new
name|QLineEdit
argument_list|(
name|text
argument_list|,
name|toplevel
argument_list|)
decl_stmt|;
name|lineEdit
operator|->
name|show
argument_list|()
expr_stmt|;
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
comment|// cursor
name|lineEdit
operator|->
name|setCursorPosition
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QAccessibleTextCursorEvent
name|cursorEvent
argument_list|(
name|lineEdit
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|QVERIFY_EVENT
argument_list|(
operator|&
name|cursorEvent
argument_list|)
expr_stmt|;
name|lineEdit
operator|->
name|setCursorPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cursorEvent
operator|.
name|setCursorPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY_EVENT
argument_list|(
operator|&
name|cursorEvent
argument_list|)
expr_stmt|;
comment|// selection
name|lineEdit
operator|->
name|setSelection
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QAccessibleTextSelectionEvent
name|sel
argument_list|(
name|lineEdit
argument_list|,
literal|2
argument_list|,
literal|2
operator|+
literal|4
argument_list|)
decl_stmt|;
name|QVERIFY_EVENT
argument_list|(
operator|&
name|sel
argument_list|)
expr_stmt|;
name|lineEdit
operator|->
name|selectAll
argument_list|()
expr_stmt|;
name|sel
operator|.
name|setSelection
argument_list|(
literal|0
argument_list|,
name|lineEdit
operator|->
name|text
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|sel
operator|.
name|setCursorPosition
argument_list|(
name|lineEdit
operator|->
name|text
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_EVENT
argument_list|(
operator|&
name|sel
argument_list|)
expr_stmt|;
name|lineEdit
operator|->
name|setSelection
argument_list|(
literal|10
argument_list|,
operator|-
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lineEdit
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QAccessibleTextSelectionEvent
name|sel2
argument_list|(
name|lineEdit
argument_list|,
literal|6
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|sel2
operator|.
name|setCursorPosition
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|QVERIFY_EVENT
argument_list|(
operator|&
name|sel2
argument_list|)
expr_stmt|;
name|lineEdit
operator|->
name|deselect
argument_list|()
expr_stmt|;
name|QAccessibleTextSelectionEvent
name|sel3
argument_list|(
name|lineEdit
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|sel3
operator|.
name|setCursorPosition
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|QVERIFY_EVENT
argument_list|(
operator|&
name|sel3
argument_list|)
expr_stmt|;
comment|// editing
name|lineEdit
operator|->
name|clear
argument_list|()
expr_stmt|;
comment|// FIXME: improve redundant updates
name|QAccessibleTextRemoveEvent
name|remove
argument_list|(
name|lineEdit
argument_list|,
literal|0
argument_list|,
name|text
argument_list|)
decl_stmt|;
name|QVERIFY_EVENT
argument_list|(
operator|&
name|remove
argument_list|)
expr_stmt|;
name|QAccessibleTextSelectionEvent
name|noSel
argument_list|(
name|lineEdit
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QVERIFY_EVENT
argument_list|(
operator|&
name|noSel
argument_list|)
expr_stmt|;
name|QAccessibleTextCursorEvent
name|cursor
argument_list|(
name|lineEdit
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY_EVENT
argument_list|(
operator|&
name|cursor
argument_list|)
expr_stmt|;
name|lineEdit
operator|->
name|setText
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|cursorEvent
operator|.
name|setCursorPosition
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY_EVENT
argument_list|(
operator|&
name|cursorEvent
argument_list|)
expr_stmt|;
name|QAccessibleTextInsertEvent
name|e
argument_list|(
name|lineEdit
argument_list|,
literal|0
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QTestAccessibility
operator|::
name|containsEvent
argument_list|(
operator|&
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|lineEdit
operator|->
name|setText
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|QAccessibleTextUpdateEvent
name|update
argument_list|(
name|lineEdit
argument_list|,
literal|0
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QTestAccessibility
operator|::
name|containsEvent
argument_list|(
operator|&
name|update
argument_list|)
argument_list|)
expr_stmt|;
comment|// FIXME check what extra events are around and get rid of them
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
name|QTestEventList
name|keys
decl_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
literal|'D'
argument_list|)
expr_stmt|;
name|keys
operator|.
name|simulate
argument_list|(
name|lineEdit
argument_list|)
expr_stmt|;
name|QAccessibleTextInsertEvent
name|insertD
argument_list|(
name|lineEdit
argument_list|,
literal|3
argument_list|,
literal|"D"
argument_list|)
decl_stmt|;
name|QVERIFY_EVENT
argument_list|(
operator|&
name|insertD
argument_list|)
expr_stmt|;
name|keys
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
literal|'E'
argument_list|)
expr_stmt|;
name|keys
operator|.
name|simulate
argument_list|(
name|lineEdit
argument_list|)
expr_stmt|;
name|QAccessibleTextInsertEvent
name|insertE
argument_list|(
name|lineEdit
argument_list|,
literal|4
argument_list|,
literal|"E"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QTestAccessibility
operator|::
name|containsEvent
argument_list|(
operator|&
name|insertE
argument_list|)
argument_list|)
expr_stmt|;
name|keys
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|keys
operator|.
name|simulate
argument_list|(
name|lineEdit
argument_list|)
expr_stmt|;
name|cursorEvent
operator|.
name|setCursorPosition
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTestAccessibility
operator|::
name|containsEvent
argument_list|(
operator|&
name|cursorEvent
argument_list|)
argument_list|)
expr_stmt|;
name|cursorEvent
operator|.
name|setCursorPosition
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTestAccessibility
operator|::
name|containsEvent
argument_list|(
operator|&
name|cursorEvent
argument_list|)
argument_list|)
expr_stmt|;
name|keys
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
literal|'C'
argument_list|)
expr_stmt|;
name|keys
operator|.
name|simulate
argument_list|(
name|lineEdit
argument_list|)
expr_stmt|;
name|QAccessibleTextInsertEvent
name|insertC
argument_list|(
name|lineEdit
argument_list|,
literal|3
argument_list|,
literal|"C"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QTestAccessibility
operator|::
name|containsEvent
argument_list|(
operator|&
name|insertC
argument_list|)
argument_list|)
expr_stmt|;
name|keys
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
literal|'O'
argument_list|)
expr_stmt|;
name|keys
operator|.
name|simulate
argument_list|(
name|lineEdit
argument_list|)
expr_stmt|;
name|QAccessibleTextInsertEvent
name|insertO
argument_list|(
name|lineEdit
argument_list|,
literal|4
argument_list|,
literal|"O"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QTestAccessibility
operator|::
name|containsEvent
argument_list|(
operator|&
name|insertO
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|delete
name|toplevel
expr_stmt|;
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|groupBoxTest
name|void
name|tst_QAccessibility
operator|::
name|groupBoxTest
parameter_list|()
block|{
block|{
name|QGroupBox
modifier|*
name|groupBox
init|=
operator|new
name|QGroupBox
argument_list|()
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|groupBox
argument_list|)
decl_stmt|;
name|groupBox
operator|->
name|setTitle
argument_list|(
name|QLatin1String
argument_list|(
literal|"Test QGroupBox"
argument_list|)
argument_list|)
expr_stmt|;
name|QAccessibleEvent
name|ev
argument_list|(
name|groupBox
argument_list|,
name|QAccessible
operator|::
name|NameChanged
argument_list|)
decl_stmt|;
name|QVERIFY_EVENT
argument_list|(
operator|&
name|ev
argument_list|)
expr_stmt|;
name|groupBox
operator|->
name|setToolTip
argument_list|(
name|QLatin1String
argument_list|(
literal|"This group box will be used to test accessibility"
argument_list|)
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|layout
init|=
operator|new
name|QVBoxLayout
argument_list|()
decl_stmt|;
name|QRadioButton
modifier|*
name|rbutton
init|=
operator|new
name|QRadioButton
argument_list|()
decl_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|rbutton
argument_list|)
expr_stmt|;
name|groupBox
operator|->
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|rButtonIface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|rbutton
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|Grouping
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Test QGroupBox"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Description
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"This group box will be used to test accessibility"
argument_list|)
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QPair
argument_list|<
name|QAccessibleInterface
modifier|*
argument_list|,
name|QAccessible
operator|::
name|Relation
argument_list|>
argument_list|>
name|relations
init|=
name|rButtonIface
operator|->
name|relations
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|relations
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QPair
argument_list|<
name|QAccessibleInterface
modifier|*
argument_list|,
name|QAccessible
operator|::
name|Relation
argument_list|>
name|relation
init|=
name|relations
operator|.
name|first
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|relation
operator|.
name|first
operator|->
name|object
argument_list|()
argument_list|,
name|groupBox
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|relation
operator|.
name|second
argument_list|,
name|QAccessible
operator|::
name|Label
argument_list|)
expr_stmt|;
operator|delete
name|relation
operator|.
name|first
expr_stmt|;
operator|delete
name|rButtonIface
expr_stmt|;
operator|delete
name|iface
expr_stmt|;
operator|delete
name|groupBox
expr_stmt|;
block|}
block|{
name|QGroupBox
modifier|*
name|groupBox
init|=
operator|new
name|QGroupBox
argument_list|()
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|groupBox
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|iface
operator|->
name|state
argument_list|()
operator|.
name|checkable
argument_list|)
expr_stmt|;
name|groupBox
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|groupBox
operator|->
name|setChecked
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QAccessible
operator|::
name|State
name|st
decl_stmt|;
name|st
operator|.
name|checked
operator|=
literal|true
expr_stmt|;
name|QAccessibleStateChangeEvent
name|ev
argument_list|(
name|groupBox
argument_list|,
name|st
argument_list|)
decl_stmt|;
name|QVERIFY_EVENT
argument_list|(
operator|&
name|ev
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|CheckBox
argument_list|)
expr_stmt|;
name|QAccessibleActionInterface
modifier|*
name|actionIface
init|=
name|iface
operator|->
name|actionInterface
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|actionIface
argument_list|)
expr_stmt|;
name|QAccessible
operator|::
name|State
name|state
init|=
name|iface
operator|->
name|state
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|state
operator|.
name|checkable
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|state
operator|.
name|checked
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|actionIface
operator|->
name|actionNames
argument_list|()
operator|.
name|contains
argument_list|(
name|QAccessibleActionInterface
operator|::
name|toggleAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|actionIface
operator|->
name|doAction
argument_list|(
name|QAccessibleActionInterface
operator|::
name|toggleAction
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|groupBox
operator|->
name|isChecked
argument_list|()
argument_list|)
expr_stmt|;
name|state
operator|=
name|iface
operator|->
name|state
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|state
operator|.
name|checked
argument_list|)
expr_stmt|;
name|QAccessibleStateChangeEvent
name|ev2
argument_list|(
name|groupBox
argument_list|,
name|st
argument_list|)
decl_stmt|;
name|QVERIFY_EVENT
argument_list|(
operator|&
name|ev2
argument_list|)
expr_stmt|;
operator|delete
name|iface
expr_stmt|;
operator|delete
name|groupBox
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|accessibleInterfaceLeftOf
name|bool
name|accessibleInterfaceLeftOf
parameter_list|(
specifier|const
name|QAccessibleInterface
modifier|*
name|a1
parameter_list|,
specifier|const
name|QAccessibleInterface
modifier|*
name|a2
parameter_list|)
block|{
return|return
name|a1
operator|->
name|rect
argument_list|()
operator|.
name|x
argument_list|()
operator|<
name|a2
operator|->
name|rect
argument_list|()
operator|.
name|x
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|accessibleInterfaceAbove
name|bool
name|accessibleInterfaceAbove
parameter_list|(
specifier|const
name|QAccessibleInterface
modifier|*
name|a1
parameter_list|,
specifier|const
name|QAccessibleInterface
modifier|*
name|a2
parameter_list|)
block|{
return|return
name|a1
operator|->
name|rect
argument_list|()
operator|.
name|y
argument_list|()
operator|<
name|a2
operator|->
name|rect
argument_list|()
operator|.
name|y
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|dialogButtonBoxTest
name|void
name|tst_QAccessibility
operator|::
name|dialogButtonBoxTest
parameter_list|()
block|{
block|{
name|QDialogButtonBox
name|box
argument_list|(
name|QDialogButtonBox
operator|::
name|Reset
operator||
name|QDialogButtonBox
operator|::
name|Help
operator||
name|QDialogButtonBox
operator|::
name|Ok
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
operator|&
name|box
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|iface
argument_list|)
expr_stmt|;
name|box
operator|.
name|show
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|Grouping
argument_list|)
expr_stmt|;
name|QStringList
name|actualOrder
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|child
decl_stmt|;
name|child
operator|=
name|iface
operator|->
name|child
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|child
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|PushButton
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QAccessibleInterface
modifier|*
argument_list|>
name|buttons
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iface
operator|->
name|childCount
argument_list|()
condition|;
operator|++
name|i
control|)
name|buttons
operator|<<
name|iface
operator|->
name|child
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|qSort
argument_list|(
name|buttons
operator|.
name|begin
argument_list|()
argument_list|,
name|buttons
operator|.
name|end
argument_list|()
argument_list|,
name|accessibleInterfaceLeftOf
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buttons
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|actualOrder
operator|<<
name|buttons
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
expr_stmt|;
name|QStringList
name|expectedOrder
decl_stmt|;
name|QDialogButtonBox
operator|::
name|ButtonLayout
name|btnlout
init|=
name|QDialogButtonBox
operator|::
name|ButtonLayout
argument_list|(
name|QApplication
operator|::
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_DialogButtonLayout
argument_list|)
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|btnlout
condition|)
block|{
case|case
name|QDialogButtonBox
operator|::
name|WinLayout
case|:
name|expectedOrder
operator|<<
name|QDialogButtonBox
operator|::
name|tr
argument_list|(
literal|"Reset"
argument_list|)
operator|<<
name|QDialogButtonBox
operator|::
name|tr
argument_list|(
literal|"OK"
argument_list|)
operator|<<
name|QDialogButtonBox
operator|::
name|tr
argument_list|(
literal|"Help"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QDialogButtonBox
operator|::
name|GnomeLayout
case|:
case|case
name|QDialogButtonBox
operator|::
name|KdeLayout
case|:
case|case
name|QDialogButtonBox
operator|::
name|MacLayout
case|:
name|expectedOrder
operator|<<
name|QDialogButtonBox
operator|::
name|tr
argument_list|(
literal|"Help"
argument_list|)
operator|<<
name|QDialogButtonBox
operator|::
name|tr
argument_list|(
literal|"Reset"
argument_list|)
operator|<<
name|QDialogButtonBox
operator|::
name|tr
argument_list|(
literal|"OK"
argument_list|)
expr_stmt|;
break|break;
block|}
name|QCOMPARE
argument_list|(
name|actualOrder
argument_list|,
name|expectedOrder
argument_list|)
expr_stmt|;
operator|delete
name|iface
expr_stmt|;
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
block|}
block|{
name|QDialogButtonBox
name|box
argument_list|(
name|QDialogButtonBox
operator|::
name|Reset
operator||
name|QDialogButtonBox
operator|::
name|Help
operator||
name|QDialogButtonBox
operator|::
name|Ok
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
decl_stmt|;
comment|// Test up and down navigation
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
operator|&
name|box
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|iface
argument_list|)
expr_stmt|;
name|box
operator|.
name|setOrientation
argument_list|(
name|Qt
operator|::
name|Vertical
argument_list|)
expr_stmt|;
name|box
operator|.
name|show
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QStringList
name|actualOrder
decl_stmt|;
name|QVector
argument_list|<
name|QAccessibleInterface
modifier|*
argument_list|>
name|buttons
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iface
operator|->
name|childCount
argument_list|()
condition|;
operator|++
name|i
control|)
name|buttons
operator|<<
name|iface
operator|->
name|child
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|qSort
argument_list|(
name|buttons
operator|.
name|begin
argument_list|()
argument_list|,
name|buttons
operator|.
name|end
argument_list|()
argument_list|,
name|accessibleInterfaceAbove
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buttons
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|actualOrder
operator|<<
name|buttons
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
expr_stmt|;
name|QStringList
name|expectedOrder
decl_stmt|;
name|expectedOrder
operator|<<
name|QDialogButtonBox
operator|::
name|tr
argument_list|(
literal|"OK"
argument_list|)
operator|<<
name|QDialogButtonBox
operator|::
name|tr
argument_list|(
literal|"Reset"
argument_list|)
operator|<<
name|QDialogButtonBox
operator|::
name|tr
argument_list|(
literal|"Help"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|actualOrder
argument_list|,
name|expectedOrder
argument_list|)
expr_stmt|;
operator|delete
name|iface
expr_stmt|;
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
block|}
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dialTest
name|void
name|tst_QAccessibility
operator|::
name|dialTest
parameter_list|()
block|{
block|{
name|QDial
name|dial
decl_stmt|;
name|dial
operator|.
name|setMinimum
argument_list|(
literal|23
argument_list|)
expr_stmt|;
name|dial
operator|.
name|setMaximum
argument_list|(
literal|121
argument_list|)
expr_stmt|;
name|dial
operator|.
name|setValue
argument_list|(
literal|42
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dial
operator|.
name|value
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|dial
operator|.
name|show
argument_list|()
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|interface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
operator|&
name|dial
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|interface
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Value
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|dial
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|rect
argument_list|()
argument_list|,
name|dial
operator|.
name|geometry
argument_list|()
argument_list|)
expr_stmt|;
name|QAccessibleValueInterface
modifier|*
name|valueIface
init|=
name|interface
operator|->
name|valueInterface
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|valueIface
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|valueIface
operator|->
name|minimumValue
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|,
name|dial
operator|.
name|minimum
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|valueIface
operator|->
name|maximumValue
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|,
name|dial
operator|.
name|maximum
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|valueIface
operator|->
name|currentValue
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|dial
operator|.
name|setValue
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|valueIface
operator|->
name|currentValue
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|,
name|dial
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|dial
operator|.
name|setValue
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|valueIface
operator|->
name|currentValue
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|,
name|dial
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|dial
operator|.
name|setValue
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|valueIface
operator|->
name|currentValue
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|,
name|dial
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|valueIface
operator|->
name|setCurrentValue
argument_list|(
literal|77
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|77
argument_list|,
name|dial
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rubberBandTest
name|void
name|tst_QAccessibility
operator|::
name|rubberBandTest
parameter_list|()
block|{
name|QRubberBand
name|rubberBand
argument_list|(
name|QRubberBand
operator|::
name|Rectangle
argument_list|)
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|interface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
operator|&
name|rubberBand
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|interface
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|Border
argument_list|)
expr_stmt|;
operator|delete
name|interface
expr_stmt|;
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|abstractScrollAreaTest
name|void
name|tst_QAccessibility
operator|::
name|abstractScrollAreaTest
parameter_list|()
block|{
block|{
name|QAbstractScrollArea
name|abstractScrollArea
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|interface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
operator|&
name|abstractScrollArea
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|interface
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|interface
operator|->
name|rect
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|childAt
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
name|QAccessibleInterface
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|abstractScrollArea
operator|.
name|resize
argument_list|(
literal|400
argument_list|,
literal|400
argument_list|)
expr_stmt|;
name|abstractScrollArea
operator|.
name|show
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
endif|#
directive|endif
specifier|const
name|QRect
name|globalGeometry
init|=
name|QRect
argument_list|(
name|abstractScrollArea
operator|.
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|abstractScrollArea
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// Viewport.
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|viewport
init|=
name|abstractScrollArea
operator|.
name|viewport
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|viewport
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|verifyChild
argument_list|(
name|viewport
argument_list|,
name|interface
argument_list|,
literal|0
argument_list|,
name|globalGeometry
argument_list|)
argument_list|)
expr_stmt|;
comment|// Horizontal scrollBar.
name|abstractScrollArea
operator|.
name|setHorizontalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAlwaysOn
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|horizontalScrollBar
init|=
name|abstractScrollArea
operator|.
name|horizontalScrollBar
argument_list|()
decl_stmt|;
name|QWidget
modifier|*
name|horizontalScrollBarContainer
init|=
name|horizontalScrollBar
operator|->
name|parentWidget
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|verifyChild
argument_list|(
name|horizontalScrollBarContainer
argument_list|,
name|interface
argument_list|,
literal|1
argument_list|,
name|globalGeometry
argument_list|)
argument_list|)
expr_stmt|;
comment|// Horizontal scrollBar widgets.
name|QLabel
modifier|*
name|secondLeftLabel
init|=
operator|new
name|QLabel
argument_list|(
name|QLatin1String
argument_list|(
literal|"L2"
argument_list|)
argument_list|)
decl_stmt|;
name|abstractScrollArea
operator|.
name|addScrollBarWidget
argument_list|(
name|secondLeftLabel
argument_list|,
name|Qt
operator|::
name|AlignLeft
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QLabel
modifier|*
name|firstLeftLabel
init|=
operator|new
name|QLabel
argument_list|(
name|QLatin1String
argument_list|(
literal|"L1"
argument_list|)
argument_list|)
decl_stmt|;
name|abstractScrollArea
operator|.
name|addScrollBarWidget
argument_list|(
name|firstLeftLabel
argument_list|,
name|Qt
operator|::
name|AlignLeft
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QLabel
modifier|*
name|secondRightLabel
init|=
operator|new
name|QLabel
argument_list|(
name|QLatin1String
argument_list|(
literal|"R2"
argument_list|)
argument_list|)
decl_stmt|;
name|abstractScrollArea
operator|.
name|addScrollBarWidget
argument_list|(
name|secondRightLabel
argument_list|,
name|Qt
operator|::
name|AlignRight
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QLabel
modifier|*
name|firstRightLabel
init|=
operator|new
name|QLabel
argument_list|(
name|QLatin1String
argument_list|(
literal|"R1"
argument_list|)
argument_list|)
decl_stmt|;
name|abstractScrollArea
operator|.
name|addScrollBarWidget
argument_list|(
name|firstRightLabel
argument_list|,
name|Qt
operator|::
name|AlignRight
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Vertical scrollBar.
name|abstractScrollArea
operator|.
name|setVerticalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAlwaysOn
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|verticalScrollBar
init|=
name|abstractScrollArea
operator|.
name|verticalScrollBar
argument_list|()
decl_stmt|;
name|QWidget
modifier|*
name|verticalScrollBarContainer
init|=
name|verticalScrollBar
operator|->
name|parentWidget
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|verifyChild
argument_list|(
name|verticalScrollBarContainer
argument_list|,
name|interface
argument_list|,
literal|2
argument_list|,
name|globalGeometry
argument_list|)
argument_list|)
expr_stmt|;
comment|// Vertical scrollBar widgets.
name|QLabel
modifier|*
name|secondTopLabel
init|=
operator|new
name|QLabel
argument_list|(
name|QLatin1String
argument_list|(
literal|"T2"
argument_list|)
argument_list|)
decl_stmt|;
name|abstractScrollArea
operator|.
name|addScrollBarWidget
argument_list|(
name|secondTopLabel
argument_list|,
name|Qt
operator|::
name|AlignTop
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QLabel
modifier|*
name|firstTopLabel
init|=
operator|new
name|QLabel
argument_list|(
name|QLatin1String
argument_list|(
literal|"T1"
argument_list|)
argument_list|)
decl_stmt|;
name|abstractScrollArea
operator|.
name|addScrollBarWidget
argument_list|(
name|firstTopLabel
argument_list|,
name|Qt
operator|::
name|AlignTop
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QLabel
modifier|*
name|secondBottomLabel
init|=
operator|new
name|QLabel
argument_list|(
name|QLatin1String
argument_list|(
literal|"B2"
argument_list|)
argument_list|)
decl_stmt|;
name|abstractScrollArea
operator|.
name|addScrollBarWidget
argument_list|(
name|secondBottomLabel
argument_list|,
name|Qt
operator|::
name|AlignBottom
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QLabel
modifier|*
name|firstBottomLabel
init|=
operator|new
name|QLabel
argument_list|(
name|QLatin1String
argument_list|(
literal|"B1"
argument_list|)
argument_list|)
decl_stmt|;
name|abstractScrollArea
operator|.
name|addScrollBarWidget
argument_list|(
name|firstBottomLabel
argument_list|,
name|Qt
operator|::
name|AlignBottom
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// CornerWidget.
name|abstractScrollArea
operator|.
name|setCornerWidget
argument_list|(
operator|new
name|QLabel
argument_list|(
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|cornerWidget
init|=
name|abstractScrollArea
operator|.
name|cornerWidget
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|verifyChild
argument_list|(
name|cornerWidget
argument_list|,
name|interface
argument_list|,
literal|3
argument_list|,
name|globalGeometry
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|verifyHierarchy
argument_list|(
name|interface
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|interface
expr_stmt|;
block|}
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|scrollAreaTest
name|void
name|tst_QAccessibility
operator|::
name|scrollAreaTest
parameter_list|()
block|{
block|{
name|QScrollArea
name|scrollArea
decl_stmt|;
name|scrollArea
operator|.
name|show
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QAccessibleInterface
modifier|*
name|interface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
operator|&
name|scrollArea
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|interface
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// The viewport.
operator|delete
name|interface
expr_stmt|;
block|}
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|listTest
name|void
name|tst_QAccessibility
operator|::
name|listTest
parameter_list|()
block|{
block|{
name|QListWidget
modifier|*
name|listView
init|=
operator|new
name|QListWidget
decl_stmt|;
name|listView
operator|->
name|addItem
argument_list|(
literal|"Oslo"
argument_list|)
expr_stmt|;
name|listView
operator|->
name|addItem
argument_list|(
literal|"Berlin"
argument_list|)
expr_stmt|;
name|listView
operator|->
name|addItem
argument_list|(
literal|"Brisbane"
argument_list|)
expr_stmt|;
name|listView
operator|->
name|resize
argument_list|(
literal|400
argument_list|,
literal|400
argument_list|)
expr_stmt|;
name|listView
operator|->
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Need this for indexOfchild to work.
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QAIPtr
name|iface
init|=
name|QAIPtr
argument_list|(
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|listView
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|verifyHierarchy
argument_list|(
name|iface
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|iface
operator|->
name|role
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|QAccessible
operator|::
name|List
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|{
name|QAIPtr
name|child1
init|=
name|QAIPtr
argument_list|(
name|iface
operator|->
name|child
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|child1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|indexOfChild
argument_list|(
name|child1
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|child1
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Oslo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|child1
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|ListItem
argument_list|)
expr_stmt|;
name|QAIPtr
name|child2
init|=
name|QAIPtr
argument_list|(
name|iface
operator|->
name|child
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|child2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|indexOfChild
argument_list|(
name|child2
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|child2
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Berlin"
argument_list|)
argument_list|)
expr_stmt|;
name|QAIPtr
name|child3
init|=
name|QAIPtr
argument_list|(
name|iface
operator|->
name|child
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|child3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|indexOfChild
argument_list|(
name|child3
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|child3
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Brisbane"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
comment|// Check for events
name|QTest
operator|::
name|mouseClick
argument_list|(
name|listView
operator|->
name|viewport
argument_list|()
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|listView
operator|->
name|visualItemRect
argument_list|(
name|listView
operator|->
name|item
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|QAccessibleEvent
name|selectionEvent
argument_list|(
name|listView
argument_list|,
name|QAccessible
operator|::
name|Selection
argument_list|)
decl_stmt|;
name|selectionEvent
operator|.
name|setChild
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QAccessibleEvent
name|focusEvent
argument_list|(
name|listView
argument_list|,
name|QAccessible
operator|::
name|Focus
argument_list|)
decl_stmt|;
name|focusEvent
operator|.
name|setChild
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTestAccessibility
operator|::
name|containsEvent
argument_list|(
operator|&
name|selectionEvent
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTestAccessibility
operator|::
name|containsEvent
argument_list|(
operator|&
name|focusEvent
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseClick
argument_list|(
name|listView
operator|->
name|viewport
argument_list|()
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|listView
operator|->
name|visualItemRect
argument_list|(
name|listView
operator|->
name|item
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|QAccessibleEvent
name|selectionEvent2
argument_list|(
name|listView
argument_list|,
name|QAccessible
operator|::
name|Selection
argument_list|)
decl_stmt|;
name|selectionEvent2
operator|.
name|setChild
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QAccessibleEvent
name|focusEvent2
argument_list|(
name|listView
argument_list|,
name|QAccessible
operator|::
name|Focus
argument_list|)
decl_stmt|;
name|focusEvent2
operator|.
name|setChild
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTestAccessibility
operator|::
name|containsEvent
argument_list|(
operator|&
name|selectionEvent2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTestAccessibility
operator|::
name|containsEvent
argument_list|(
operator|&
name|focusEvent2
argument_list|)
argument_list|)
expr_stmt|;
name|listView
operator|->
name|addItem
argument_list|(
literal|"Munich"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// table 2
name|QAccessibleTableInterface
modifier|*
name|table2
init|=
name|iface
operator|->
name|tableInterface
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|table2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table2
operator|->
name|columnCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table2
operator|->
name|rowCount
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QAIPtr
name|cell1
init|=
name|QAIPtr
argument_list|(
name|table2
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|cell1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cell1
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Oslo"
argument_list|)
argument_list|)
expr_stmt|;
name|QAIPtr
name|cell4
init|=
name|QAIPtr
argument_list|(
name|table2
operator|->
name|cellAt
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|cell4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cell4
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Munich"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cell4
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|ListItem
argument_list|)
expr_stmt|;
name|QAccessibleTableCellInterface
modifier|*
name|cellInterface
init|=
name|cell4
operator|->
name|tableCellInterface
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|cellInterface
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cellInterface
operator|->
name|rowIndex
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cellInterface
operator|->
name|columnIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cellInterface
operator|->
name|rowExtent
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cellInterface
operator|->
name|columnExtent
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cellInterface
operator|->
name|rowHeaderCells
argument_list|()
argument_list|,
name|QList
argument_list|<
name|QAccessibleInterface
operator|*
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cellInterface
operator|->
name|columnHeaderCells
argument_list|()
argument_list|,
name|QList
argument_list|<
name|QAccessibleInterface
operator|*
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QAIPtr
argument_list|(
name|cellInterface
operator|->
name|table
argument_list|()
argument_list|)
operator|->
name|object
argument_list|()
argument_list|,
name|listView
argument_list|)
expr_stmt|;
name|listView
operator|->
name|clearSelection
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|cell4
operator|->
name|state
argument_list|()
operator|.
name|expandable
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|cell4
operator|->
name|state
argument_list|()
operator|.
name|selectable
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|cell4
operator|->
name|state
argument_list|()
operator|.
name|selected
operator|)
argument_list|)
expr_stmt|;
name|table2
operator|->
name|selectRow
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|listView
operator|->
name|selectedItems
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|listView
operator|->
name|selectedItems
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"Munich"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cell4
operator|->
name|state
argument_list|()
operator|.
name|selected
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cellInterface
operator|->
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table2
operator|->
name|cellAt
argument_list|(
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table2
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table2
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|table2
operator|->
name|cellAt
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|listView
expr_stmt|;
block|}
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|treeTest
name|void
name|tst_QAccessibility
operator|::
name|treeTest
parameter_list|()
block|{
name|QTreeWidget
modifier|*
name|treeView
init|=
operator|new
name|QTreeWidget
decl_stmt|;
name|treeView
operator|->
name|setColumnCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QTreeWidgetItem
modifier|*
name|header
init|=
operator|new
name|QTreeWidgetItem
decl_stmt|;
name|header
operator|->
name|setText
argument_list|(
literal|0
argument_list|,
literal|"Artist"
argument_list|)
expr_stmt|;
name|header
operator|->
name|setText
argument_list|(
literal|1
argument_list|,
literal|"Work"
argument_list|)
expr_stmt|;
name|treeView
operator|->
name|setHeaderItem
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|QTreeWidgetItem
modifier|*
name|root1
init|=
operator|new
name|QTreeWidgetItem
decl_stmt|;
name|root1
operator|->
name|setText
argument_list|(
literal|0
argument_list|,
literal|"Spain"
argument_list|)
expr_stmt|;
name|treeView
operator|->
name|addTopLevelItem
argument_list|(
name|root1
argument_list|)
expr_stmt|;
name|QTreeWidgetItem
modifier|*
name|item1
init|=
operator|new
name|QTreeWidgetItem
decl_stmt|;
name|item1
operator|->
name|setText
argument_list|(
literal|0
argument_list|,
literal|"Picasso"
argument_list|)
expr_stmt|;
name|item1
operator|->
name|setText
argument_list|(
literal|1
argument_list|,
literal|"Guernica"
argument_list|)
expr_stmt|;
name|root1
operator|->
name|addChild
argument_list|(
name|item1
argument_list|)
expr_stmt|;
name|QTreeWidgetItem
modifier|*
name|item2
init|=
operator|new
name|QTreeWidgetItem
decl_stmt|;
name|item2
operator|->
name|setText
argument_list|(
literal|0
argument_list|,
literal|"Tapies"
argument_list|)
expr_stmt|;
name|item2
operator|->
name|setText
argument_list|(
literal|1
argument_list|,
literal|"Ambrosia"
argument_list|)
expr_stmt|;
name|root1
operator|->
name|addChild
argument_list|(
name|item2
argument_list|)
expr_stmt|;
name|QTreeWidgetItem
modifier|*
name|root2
init|=
operator|new
name|QTreeWidgetItem
decl_stmt|;
name|root2
operator|->
name|setText
argument_list|(
literal|0
argument_list|,
literal|"Austria"
argument_list|)
expr_stmt|;
name|treeView
operator|->
name|addTopLevelItem
argument_list|(
name|root2
argument_list|)
expr_stmt|;
name|QTreeWidgetItem
modifier|*
name|item3
init|=
operator|new
name|QTreeWidgetItem
decl_stmt|;
name|item3
operator|->
name|setText
argument_list|(
literal|0
argument_list|,
literal|"Klimt"
argument_list|)
expr_stmt|;
name|item3
operator|->
name|setText
argument_list|(
literal|1
argument_list|,
literal|"The Kiss"
argument_list|)
expr_stmt|;
name|root2
operator|->
name|addChild
argument_list|(
name|item3
argument_list|)
expr_stmt|;
name|treeView
operator|->
name|resize
argument_list|(
literal|400
argument_list|,
literal|400
argument_list|)
expr_stmt|;
name|treeView
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|treeView
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|verifyHierarchy
argument_list|(
name|iface
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|iface
operator|->
name|role
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|QAccessible
operator|::
name|Tree
argument_list|)
expr_stmt|;
comment|// header and 2 rows (the others are not expanded, thus not visible)
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|header1
init|=
literal|0
decl_stmt|;
name|header1
operator|=
name|iface
operator|->
name|child
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|header1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|indexOfChild
argument_list|(
name|header1
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|header1
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Artist"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|header1
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|ColumnHeader
argument_list|)
expr_stmt|;
operator|delete
name|header1
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|child1
init|=
literal|0
decl_stmt|;
name|child1
operator|=
name|iface
operator|->
name|child
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|child1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|indexOfChild
argument_list|(
name|child1
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|child1
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Spain"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|child1
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|TreeItem
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|child1
operator|->
name|state
argument_list|()
operator|.
name|expanded
operator|)
argument_list|)
expr_stmt|;
operator|delete
name|child1
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|child2
init|=
literal|0
decl_stmt|;
name|child2
operator|=
name|iface
operator|->
name|child
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|child2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|indexOfChild
argument_list|(
name|child2
argument_list|)
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|child2
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Austria"
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|child2
expr_stmt|;
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
comment|// table 2
name|QAccessibleTableInterface
modifier|*
name|table2
init|=
name|iface
operator|->
name|tableInterface
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|table2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table2
operator|->
name|columnCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table2
operator|->
name|rowCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|cell1
decl_stmt|;
name|QVERIFY
argument_list|(
name|cell1
operator|=
name|table2
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cell1
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Spain"
argument_list|)
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|cell2
decl_stmt|;
name|QVERIFY
argument_list|(
name|cell2
operator|=
name|table2
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cell2
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Austria"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cell2
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|TreeItem
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cell2
operator|->
name|tableCellInterface
argument_list|()
operator|->
name|rowIndex
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cell2
operator|->
name|tableCellInterface
argument_list|()
operator|->
name|columnIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cell2
operator|->
name|state
argument_list|()
operator|.
name|expandable
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|indexOfChild
argument_list|(
name|cell2
argument_list|)
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|cell2
operator|->
name|state
argument_list|()
operator|.
name|expanded
operator|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table2
operator|->
name|columnDescription
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Work"
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|cell2
expr_stmt|;
operator|delete
name|cell1
expr_stmt|;
name|treeView
operator|->
name|expandAll
argument_list|()
expr_stmt|;
comment|// Need this for indexOfchild to work.
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table2
operator|->
name|columnCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table2
operator|->
name|rowCount
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|cell1
operator|=
name|table2
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cell1
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Picasso"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|indexOfChild
argument_list|(
name|cell1
argument_list|)
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// 2 header + 2 for root item
name|cell2
operator|=
name|table2
operator|->
name|cellAt
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cell2
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Klimt"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cell2
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|TreeItem
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cell2
operator|->
name|tableCellInterface
argument_list|()
operator|->
name|rowIndex
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cell2
operator|->
name|tableCellInterface
argument_list|()
operator|->
name|columnIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|cell2
operator|->
name|state
argument_list|()
operator|.
name|expandable
operator|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|indexOfChild
argument_list|(
name|cell2
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table2
operator|->
name|columnDescription
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Artist"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table2
operator|->
name|columnDescription
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Work"
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|iface
expr_stmt|;
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tableTest
name|void
name|tst_QAccessibility
operator|::
name|tableTest
parameter_list|()
block|{
name|QTableWidget
modifier|*
name|tableView
init|=
operator|new
name|QTableWidget
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|tableView
operator|->
name|setColumnCount
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QStringList
name|hHeader
decl_stmt|;
name|hHeader
operator|<<
literal|"h1"
operator|<<
literal|"h2"
operator|<<
literal|"h3"
expr_stmt|;
name|tableView
operator|->
name|setHorizontalHeaderLabels
argument_list|(
name|hHeader
argument_list|)
expr_stmt|;
name|QStringList
name|vHeader
decl_stmt|;
name|vHeader
operator|<<
literal|"v1"
operator|<<
literal|"v2"
operator|<<
literal|"v3"
expr_stmt|;
name|tableView
operator|->
name|setVerticalHeaderLabels
argument_list|(
name|vHeader
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|9
condition|;
operator|++
name|i
control|)
block|{
name|QTableWidgetItem
modifier|*
name|item
init|=
operator|new
name|QTableWidgetItem
decl_stmt|;
name|item
operator|->
name|setText
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|i
operator|/
literal|3
argument_list|)
operator|+
name|QString
argument_list|(
literal|"."
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|i
operator|%
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|tableView
operator|->
name|setItem
argument_list|(
name|i
operator|/
literal|3
argument_list|,
name|i
operator|%
literal|3
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
name|tableView
operator|->
name|resize
argument_list|(
literal|600
argument_list|,
literal|600
argument_list|)
expr_stmt|;
name|tableView
operator|->
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Need this for indexOfchild to work.
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|tableView
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|verifyHierarchy
argument_list|(
name|iface
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|iface
operator|->
name|role
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|QAccessible
operator|::
name|Table
argument_list|)
expr_stmt|;
comment|// header and 2 rows (the others are not expanded, thus not visible)
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|9
operator|+
literal|3
operator|+
literal|3
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// cell+headers+topleft button
name|QAccessibleInterface
modifier|*
name|cornerButton
init|=
name|iface
operator|->
name|child
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|cornerButton
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|indexOfChild
argument_list|(
name|cornerButton
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cornerButton
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|Pane
argument_list|)
expr_stmt|;
operator|delete
name|cornerButton
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|child1
init|=
name|iface
operator|->
name|child
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|child1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|indexOfChild
argument_list|(
name|child1
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|child1
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"h2"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|child1
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|ColumnHeader
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|child1
operator|->
name|state
argument_list|()
operator|.
name|expanded
operator|)
argument_list|)
expr_stmt|;
operator|delete
name|child1
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|child2
init|=
name|iface
operator|->
name|child
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|child2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|indexOfChild
argument_list|(
name|child2
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|child2
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1.1"
argument_list|)
argument_list|)
expr_stmt|;
name|QAccessibleTableCellInterface
modifier|*
name|cell2Iface
init|=
name|child2
operator|->
name|tableCellInterface
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|cell2Iface
operator|->
name|rowIndex
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cell2Iface
operator|->
name|columnIndex
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
operator|delete
name|child2
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|child3
init|=
name|iface
operator|->
name|child
argument_list|(
literal|11
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|indexOfChild
argument_list|(
name|child3
argument_list|)
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|child3
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1.2"
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|child3
expr_stmt|;
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
comment|// table 2
name|QAccessibleTableInterface
modifier|*
name|table2
init|=
name|iface
operator|->
name|tableInterface
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|table2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table2
operator|->
name|columnCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table2
operator|->
name|rowCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|cell1
decl_stmt|;
name|QVERIFY
argument_list|(
name|cell1
operator|=
name|table2
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cell1
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|indexOfChild
argument_list|(
name|cell1
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|cell2
decl_stmt|;
name|QVERIFY
argument_list|(
name|cell2
operator|=
name|table2
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cell2
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"0.1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cell2
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|Cell
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cell2
operator|->
name|tableCellInterface
argument_list|()
operator|->
name|rowIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cell2
operator|->
name|tableCellInterface
argument_list|()
operator|->
name|columnIndex
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|indexOfChild
argument_list|(
name|cell2
argument_list|)
argument_list|,
literal|6
argument_list|)
expr_stmt|;
operator|delete
name|cell2
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|cell3
decl_stmt|;
name|QVERIFY
argument_list|(
name|cell3
operator|=
name|table2
operator|->
name|cellAt
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cell3
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1.2"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cell3
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|Cell
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cell3
operator|->
name|tableCellInterface
argument_list|()
operator|->
name|rowIndex
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cell3
operator|->
name|tableCellInterface
argument_list|()
operator|->
name|columnIndex
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|indexOfChild
argument_list|(
name|cell3
argument_list|)
argument_list|,
literal|11
argument_list|)
expr_stmt|;
operator|delete
name|cell3
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table2
operator|->
name|columnDescription
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"h1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table2
operator|->
name|columnDescription
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"h2"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table2
operator|->
name|columnDescription
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"h3"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table2
operator|->
name|rowDescription
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"v1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table2
operator|->
name|rowDescription
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"v2"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|table2
operator|->
name|rowDescription
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"v3"
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|iface
expr_stmt|;
operator|delete
name|tableView
expr_stmt|;
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|calendarWidgetTest
name|void
name|tst_QAccessibility
operator|::
name|calendarWidgetTest
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_CALENDARWIDGET
block|{
name|QCalendarWidget
name|calendarWidget
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|interface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
operator|&
name|calendarWidget
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|interface
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|Table
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|interface
operator|->
name|rect
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|childAt
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
name|QAccessibleInterface
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|calendarWidget
operator|.
name|resize
argument_list|(
literal|400
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|calendarWidget
operator|.
name|show
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// 1 = navigationBar, 2 = view.
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
specifier|const
name|QRect
name|globalGeometry
init|=
name|QRect
argument_list|(
name|calendarWidget
operator|.
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|calendarWidget
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|rect
argument_list|()
argument_list|,
name|globalGeometry
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|navigationBar
init|=
literal|0
decl_stmt|;
foreach|foreach
control|(
name|QObject
modifier|*
name|child
decl|,
name|calendarWidget
operator|.
name|children
argument_list|()
control|)
block|{
if|if
condition|(
name|child
operator|->
name|objectName
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"qt_calendar_navigationbar"
argument_list|)
condition|)
block|{
name|navigationBar
operator|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|child
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|QVERIFY
argument_list|(
name|navigationBar
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|verifyChild
argument_list|(
name|navigationBar
argument_list|,
name|interface
argument_list|,
literal|0
argument_list|,
name|globalGeometry
argument_list|)
argument_list|)
expr_stmt|;
name|QAbstractItemView
modifier|*
name|calendarView
init|=
literal|0
decl_stmt|;
foreach|foreach
control|(
name|QObject
modifier|*
name|child
decl|,
name|calendarWidget
operator|.
name|children
argument_list|()
control|)
block|{
if|if
condition|(
name|child
operator|->
name|objectName
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"qt_calendar_calendarview"
argument_list|)
condition|)
block|{
name|calendarView
operator|=
cast|static_cast
argument_list|<
name|QAbstractItemView
operator|*
argument_list|>
argument_list|(
name|child
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|QVERIFY
argument_list|(
name|calendarView
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|verifyChild
argument_list|(
name|calendarView
argument_list|,
name|interface
argument_list|,
literal|1
argument_list|,
name|globalGeometry
argument_list|)
argument_list|)
expr_stmt|;
comment|// Hide navigation bar.
name|calendarWidget
operator|.
name|setNavigationBarVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|navigationBar
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|verifyChild
argument_list|(
name|calendarView
argument_list|,
name|interface
argument_list|,
literal|0
argument_list|,
name|globalGeometry
argument_list|)
argument_list|)
expr_stmt|;
comment|// Show navigation bar.
name|calendarWidget
operator|.
name|setNavigationBarVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|navigationBar
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
comment|// Navigate to the navigation bar via Child.
name|QAccessibleInterface
modifier|*
name|navigationBarInterface
init|=
name|interface
operator|->
name|child
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|navigationBarInterface
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|navigationBarInterface
operator|->
name|object
argument_list|()
argument_list|,
operator|(
name|QObject
operator|*
operator|)
name|navigationBar
argument_list|)
expr_stmt|;
comment|// Navigate to the view via Child.
name|QAccessibleInterface
modifier|*
name|calendarViewInterface
init|=
name|interface
operator|->
name|child
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|calendarViewInterface
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|calendarViewInterface
operator|->
name|object
argument_list|()
argument_list|,
operator|(
name|QObject
operator|*
operator|)
name|calendarView
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|interface
operator|->
name|child
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// In order for geometric navigation to work they must share the same parent
name|QCOMPARE
argument_list|(
name|navigationBarInterface
operator|->
name|parent
argument_list|()
operator|->
name|object
argument_list|()
argument_list|,
name|calendarViewInterface
operator|->
name|parent
argument_list|()
operator|->
name|object
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|navigationBarInterface
operator|->
name|rect
argument_list|()
operator|.
name|bottom
argument_list|()
operator|<
name|calendarViewInterface
operator|->
name|rect
argument_list|()
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|calendarViewInterface
expr_stmt|;
name|calendarViewInterface
operator|=
literal|0
expr_stmt|;
operator|delete
name|navigationBarInterface
expr_stmt|;
name|navigationBarInterface
operator|=
literal|0
expr_stmt|;
block|}
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_CALENDARWIDGET
block|}
end_function
begin_function
DECL|function|dockWidgetTest
name|void
name|tst_QAccessibility
operator|::
name|dockWidgetTest
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
comment|// Set up a proper main window with two dock widgets
name|QMainWindow
modifier|*
name|mw
init|=
operator|new
name|QMainWindow
argument_list|()
decl_stmt|;
name|QFrame
modifier|*
name|central
init|=
operator|new
name|QFrame
argument_list|(
name|mw
argument_list|)
decl_stmt|;
name|mw
operator|->
name|setCentralWidget
argument_list|(
name|central
argument_list|)
expr_stmt|;
name|QMenuBar
modifier|*
name|mb
init|=
operator|new
name|QMenuBar
argument_list|(
name|mw
argument_list|)
decl_stmt|;
name|mb
operator|->
name|addAction
argument_list|(
name|tr
argument_list|(
literal|"&File"
argument_list|)
argument_list|)
expr_stmt|;
name|mw
operator|->
name|setMenuBar
argument_list|(
name|mb
argument_list|)
expr_stmt|;
name|QDockWidget
modifier|*
name|dock1
init|=
operator|new
name|QDockWidget
argument_list|(
name|mw
argument_list|)
decl_stmt|;
name|mw
operator|->
name|addDockWidget
argument_list|(
name|Qt
operator|::
name|LeftDockWidgetArea
argument_list|,
name|dock1
argument_list|)
expr_stmt|;
name|QPushButton
modifier|*
name|pb1
init|=
operator|new
name|QPushButton
argument_list|(
name|tr
argument_list|(
literal|"Push me"
argument_list|)
argument_list|,
name|dock1
argument_list|)
decl_stmt|;
name|dock1
operator|->
name|setWidget
argument_list|(
name|pb1
argument_list|)
expr_stmt|;
name|QDockWidget
modifier|*
name|dock2
init|=
operator|new
name|QDockWidget
argument_list|(
name|mw
argument_list|)
decl_stmt|;
name|mw
operator|->
name|addDockWidget
argument_list|(
name|Qt
operator|::
name|BottomDockWidgetArea
argument_list|,
name|dock2
argument_list|)
expr_stmt|;
name|QPushButton
modifier|*
name|pb2
init|=
operator|new
name|QPushButton
argument_list|(
name|tr
argument_list|(
literal|"Push me"
argument_list|)
argument_list|,
name|dock2
argument_list|)
decl_stmt|;
name|dock2
operator|->
name|setWidget
argument_list|(
name|pb2
argument_list|)
expr_stmt|;
name|mw
operator|->
name|resize
argument_list|(
literal|600
argument_list|,
literal|400
argument_list|)
expr_stmt|;
name|mw
operator|->
name|show
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QAccessibleInterface
modifier|*
name|accMainWindow
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|mw
argument_list|)
decl_stmt|;
comment|// 4 children: menu bar, dock1, dock2, and central widget
name|QCOMPARE
argument_list|(
name|accMainWindow
operator|->
name|childCount
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|accDock1
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|accDock1
operator|=
name|accMainWindow
operator|->
name|child
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|accMainWindow
operator|->
name|role
argument_list|()
operator|==
name|QAccessible
operator|::
name|Window
condition|)
block|{
if|if
condition|(
name|accDock1
operator|&&
name|qobject_cast
argument_list|<
name|QDockWidget
operator|*
argument_list|>
argument_list|(
name|accDock1
operator|->
name|object
argument_list|()
argument_list|)
operator|==
name|dock1
condition|)
block|{
break|break;
block|}
else|else
block|{
operator|delete
name|accDock1
expr_stmt|;
block|}
block|}
block|}
name|QVERIFY
argument_list|(
name|accDock1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|accDock1
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|Window
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|dock1TitleBar
init|=
name|accDock1
operator|->
name|child
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|dock1TitleBar
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|TitleBar
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|accDock1
operator|->
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|dock1TitleBar
operator|->
name|rect
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|dock1TitleBar
expr_stmt|;
name|QPoint
name|globalPos
init|=
name|dock1
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|globalPos
operator|.
name|rx
argument_list|()
operator|+=
literal|5
expr_stmt|;
comment|//### query style
name|globalPos
operator|.
name|ry
argument_list|()
operator|+=
literal|5
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|childAt
init|=
name|accDock1
operator|->
name|childAt
argument_list|(
name|globalPos
operator|.
name|x
argument_list|()
argument_list|,
name|globalPos
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
comment|//###
name|QCOMPARE
argument_list|(
name|childAt
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|TitleBar
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|accDock1
operator|->
name|indexOfChild
argument_list|(
name|childAt
argument_list|)
decl_stmt|;
operator|delete
name|childAt
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|accTitleBar
init|=
name|accDock1
operator|->
name|child
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|accTitleBar
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|TitleBar
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|accDock1
operator|->
name|indexOfChild
argument_list|(
name|accTitleBar
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|acc
decl_stmt|;
name|acc
operator|=
name|accTitleBar
operator|->
name|parent
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|acc
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|acc
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|Window
argument_list|)
expr_stmt|;
operator|delete
name|accTitleBar
expr_stmt|;
operator|delete
name|accDock1
expr_stmt|;
operator|delete
name|pb1
expr_stmt|;
operator|delete
name|pb2
expr_stmt|;
operator|delete
name|dock1
expr_stmt|;
operator|delete
name|dock2
expr_stmt|;
operator|delete
name|mw
expr_stmt|;
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_DOCKWIDGET
block|}
end_function
begin_function
DECL|function|comboBoxTest
name|void
name|tst_QAccessibility
operator|::
name|comboBoxTest
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
if|if
condition|(
operator|!
name|IsValidCEPlatform
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"Test skipped on Windows Mobile test hardware"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|{
comment|// not editable combobox
name|QComboBox
name|combo
decl_stmt|;
name|combo
operator|.
name|addItems
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"one"
operator|<<
literal|"two"
operator|<<
literal|"three"
argument_list|)
expr_stmt|;
name|combo
operator|.
name|show
argument_list|()
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
operator|&
name|combo
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|verifyHierarchy
argument_list|(
name|iface
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|ComboBox
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_UNIX
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Value
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|combo
operator|.
name|setCurrentIndex
argument_list|(
literal|2
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_UNIX
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"three"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Value
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"three"
argument_list|)
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|listIface
init|=
name|iface
operator|->
name|child
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|listIface
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|List
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|listIface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|combo
operator|.
name|view
argument_list|()
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|->
name|actionInterface
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|actionInterface
argument_list|()
operator|->
name|actionNames
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|QAccessibleActionInterface
operator|::
name|showMenuAction
argument_list|()
argument_list|)
expr_stmt|;
name|iface
operator|->
name|actionInterface
argument_list|()
operator|->
name|doAction
argument_list|(
name|QAccessibleActionInterface
operator|::
name|showMenuAction
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|combo
operator|.
name|view
argument_list|()
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|iface
expr_stmt|;
block|}
block|{
comment|// editable combobox
name|QComboBox
name|editableCombo
decl_stmt|;
name|editableCombo
operator|.
name|show
argument_list|()
expr_stmt|;
name|editableCombo
operator|.
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|editableCombo
operator|.
name|addItems
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
operator|&
name|editableCombo
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|verifyHierarchy
argument_list|(
name|iface
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|ComboBox
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|->
name|childCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|listIface
init|=
name|iface
operator|->
name|child
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|listIface
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|List
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|editIface
init|=
name|iface
operator|->
name|child
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|editIface
operator|->
name|role
argument_list|()
argument_list|,
name|QAccessible
operator|::
name|EditableText
argument_list|)
expr_stmt|;
operator|delete
name|listIface
expr_stmt|;
operator|delete
name|editIface
expr_stmt|;
operator|delete
name|iface
expr_stmt|;
block|}
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|labelTest
name|void
name|tst_QAccessibility
operator|::
name|labelTest
parameter_list|()
block|{
name|QString
name|text
init|=
literal|"Hello World"
decl_stmt|;
name|QLabel
modifier|*
name|label
init|=
operator|new
name|QLabel
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|label
operator|->
name|show
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|acc_label
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|label
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|acc_label
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|acc_label
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
argument_list|,
name|text
argument_list|)
expr_stmt|;
operator|delete
name|acc_label
expr_stmt|;
operator|delete
name|label
expr_stmt|;
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
name|QPixmap
name|testPixmap
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|testPixmap
operator|.
name|fill
argument_list|()
expr_stmt|;
name|QLabel
name|imageLabel
decl_stmt|;
name|imageLabel
operator|.
name|setPixmap
argument_list|(
name|testPixmap
argument_list|)
expr_stmt|;
name|imageLabel
operator|.
name|setToolTip
argument_list|(
literal|"Test Description"
argument_list|)
expr_stmt|;
name|acc_label
operator|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
operator|&
name|imageLabel
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|acc_label
argument_list|)
expr_stmt|;
name|QAccessibleImageInterface
modifier|*
name|imageInterface
init|=
name|acc_label
operator|->
name|imageInterface
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|imageInterface
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|imageInterface
operator|->
name|imageSize
argument_list|()
argument_list|,
name|testPixmap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|imageInterface
operator|->
name|imageDescription
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Test Description"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QPoint
name|labelPos
init|=
name|imageLabel
operator|.
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|imageInterface
operator|->
name|imagePosition
argument_list|()
operator|.
name|topLeft
argument_list|()
argument_list|,
name|labelPos
argument_list|)
expr_stmt|;
operator|delete
name|acc_label
expr_stmt|;
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|accelerators
name|void
name|tst_QAccessibility
operator|::
name|accelerators
parameter_list|()
block|{
name|QWidget
modifier|*
name|window
init|=
operator|new
name|QWidget
decl_stmt|;
name|QHBoxLayout
modifier|*
name|lay
init|=
operator|new
name|QHBoxLayout
argument_list|(
name|window
argument_list|)
decl_stmt|;
name|QLabel
modifier|*
name|label
init|=
operator|new
name|QLabel
argument_list|(
name|tr
argument_list|(
literal|"&Line edit"
argument_list|)
argument_list|,
name|window
argument_list|)
decl_stmt|;
name|QLineEdit
modifier|*
name|le
init|=
operator|new
name|QLineEdit
argument_list|(
name|window
argument_list|)
decl_stmt|;
name|lay
operator|->
name|addWidget
argument_list|(
name|label
argument_list|)
expr_stmt|;
name|lay
operator|->
name|addWidget
argument_list|(
name|le
argument_list|)
expr_stmt|;
name|label
operator|->
name|setBuddy
argument_list|(
name|le
argument_list|)
expr_stmt|;
name|window
operator|->
name|show
argument_list|()
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|accLineEdit
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|le
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|accLineEdit
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Accelerator
argument_list|)
argument_list|,
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|ALT
argument_list|)
operator|.
name|toString
argument_list|(
name|QKeySequence
operator|::
name|NativeText
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"L"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|accLineEdit
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Accelerator
argument_list|)
argument_list|,
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|ALT
argument_list|)
operator|.
name|toString
argument_list|(
name|QKeySequence
operator|::
name|NativeText
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"L"
argument_list|)
argument_list|)
expr_stmt|;
name|label
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Q&"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|accLineEdit
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Accelerator
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|label
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Q&&"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|accLineEdit
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Accelerator
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|label
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Q&& A"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|accLineEdit
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Accelerator
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|label
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Q&&&A"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|accLineEdit
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Accelerator
argument_list|)
argument_list|,
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|ALT
argument_list|)
operator|.
name|toString
argument_list|(
name|QKeySequence
operator|::
name|NativeText
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|label
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Q&&A"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|accLineEdit
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Accelerator
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DEBUG
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QKeySequence::mnemonic: \"Q&A&B\" contains multiple occurrences of '&'"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|label
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Q&A&B"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|accLineEdit
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Accelerator
argument_list|)
argument_list|,
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|ALT
argument_list|)
operator|.
name|toString
argument_list|(
name|QKeySequence
operator|::
name|NativeText
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
operator|delete
name|window
expr_stmt|;
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_SUPPORTS_IACCESSIBLE2
end_ifdef
begin_function
DECL|function|queryIA2
specifier|static
name|IUnknown
modifier|*
name|queryIA2
parameter_list|(
name|IAccessible
modifier|*
name|acc
parameter_list|,
specifier|const
name|IID
modifier|&
name|iid
parameter_list|)
block|{
name|IUnknown
modifier|*
name|resultInterface
init|=
literal|0
decl_stmt|;
name|IServiceProvider
modifier|*
name|pService
init|=
literal|0
decl_stmt|;
name|HRESULT
name|hr
init|=
name|acc
operator|->
name|QueryInterface
argument_list|(
name|IID_IServiceProvider
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
operator|&
name|pService
argument_list|)
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|IAccessible2
modifier|*
name|pIA2
init|=
literal|0
decl_stmt|;
name|hr
operator|=
name|pService
operator|->
name|QueryService
argument_list|(
name|IID_IAccessible
argument_list|,
name|IID_IAccessible2
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
operator|&
name|pIA2
argument_list|)
expr_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
operator|&&
name|pIA2
condition|)
block|{
comment|// The control supports IAccessible2.
comment|// pIA2 is the reference to the accessible object's IAccessible2 interface.
name|hr
operator|=
name|pIA2
operator|->
name|QueryInterface
argument_list|(
name|iid
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
operator|&
name|resultInterface
argument_list|)
expr_stmt|;
name|pIA2
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
comment|// The control supports IAccessible2.
name|pService
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
return|return
name|resultInterface
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|bridgeTest
name|void
name|tst_QAccessibility
operator|::
name|bridgeTest
parameter_list|()
block|{
comment|// For now this is a simple test to see if the bridge is working at all.
comment|// Ideally it should be extended to test all aspects of the bridge.
ifdef|#
directive|ifdef
name|Q_OS_WIN
comment|// First, test MSAA part of bridge
name|QWidget
modifier|*
name|window
init|=
operator|new
name|QWidget
decl_stmt|;
name|QVBoxLayout
modifier|*
name|lay
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|window
argument_list|)
decl_stmt|;
name|QPushButton
modifier|*
name|button
init|=
operator|new
name|QPushButton
argument_list|(
name|tr
argument_list|(
literal|"Push me"
argument_list|)
argument_list|,
name|window
argument_list|)
decl_stmt|;
name|QTextEdit
modifier|*
name|te
init|=
operator|new
name|QTextEdit
argument_list|(
name|window
argument_list|)
decl_stmt|;
name|te
operator|->
name|setText
argument_list|(
name|QLatin1String
argument_list|(
literal|"hello world\nhow are you today?\n"
argument_list|)
argument_list|)
expr_stmt|;
name|lay
operator|->
name|addWidget
argument_list|(
name|button
argument_list|)
expr_stmt|;
name|lay
operator|->
name|addWidget
argument_list|(
name|te
argument_list|)
expr_stmt|;
name|window
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
name|window
argument_list|)
argument_list|)
expr_stmt|;
comment|/**************************************************      *   QPushButton      **************************************************/
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|button
argument_list|)
decl_stmt|;
name|QPoint
name|buttonPos
init|=
name|button
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|QRect
name|buttonRect
init|=
name|iface
operator|->
name|rect
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|buttonRect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|buttonPos
argument_list|)
expr_stmt|;
comment|// All set, now test the bridge.
name|POINT
name|pt
decl_stmt|;
name|pt
operator|.
name|x
operator|=
name|buttonRect
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
expr_stmt|;
name|pt
operator|.
name|y
operator|=
name|buttonRect
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
expr_stmt|;
name|IAccessible
modifier|*
name|iaccButton
decl_stmt|;
name|VARIANT
name|varChild
decl_stmt|;
name|HRESULT
name|hr
init|=
operator|::
name|AccessibleObjectFromPoint
argument_list|(
name|pt
argument_list|,
operator|&
name|iaccButton
argument_list|,
operator|&
name|varChild
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
name|VARIANT
name|varSELF
decl_stmt|;
name|varSELF
operator|.
name|vt
operator|=
name|VT_I4
expr_stmt|;
name|varSELF
operator|.
name|lVal
operator|=
literal|0
expr_stmt|;
comment|// **** Test get_accRole ****
name|VARIANT
name|varRole
decl_stmt|;
name|hr
operator|=
name|iaccButton
operator|->
name|get_accRole
argument_list|(
name|varSELF
argument_list|,
operator|&
name|varRole
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|varRole
operator|.
name|vt
argument_list|,
operator|(
name|VARTYPE
operator|)
name|VT_I4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|varRole
operator|.
name|lVal
argument_list|,
operator|(
name|LONG
operator|)
name|ROLE_SYSTEM_PUSHBUTTON
argument_list|)
expr_stmt|;
comment|// **** Test accLocation ****
name|long
name|x
decl_stmt|,
name|y
decl_stmt|,
name|w
decl_stmt|,
name|h
decl_stmt|;
name|hr
operator|=
name|iaccButton
operator|->
name|accLocation
argument_list|(
operator|&
name|x
argument_list|,
operator|&
name|y
argument_list|,
operator|&
name|w
argument_list|,
operator|&
name|h
argument_list|,
name|varSELF
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buttonRect
argument_list|,
name|QRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_SUPPORTS_IACCESSIBLE2
comment|// Test IAccessible2 part of bridge
if|if
condition|(
name|IAccessible2
modifier|*
name|ia2Button
init|=
operator|(
name|IAccessible2
operator|*
operator|)
name|queryIA2
argument_list|(
name|iaccButton
argument_list|,
name|IID_IAccessible2
argument_list|)
condition|)
block|{
comment|// The control supports IAccessible2.
comment|// ia2Button is the reference to the accessible object's IAccessible2 interface.
comment|/***** Test IAccessibleComponent *****/
name|IAccessibleComponent
modifier|*
name|ia2Component
init|=
literal|0
decl_stmt|;
name|hr
operator|=
name|ia2Button
operator|->
name|QueryInterface
argument_list|(
name|IID_IAccessibleComponent
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
operator|&
name|ia2Component
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|x
decl_stmt|,
name|y
decl_stmt|;
name|hr
operator|=
name|ia2Component
operator|->
name|get_locationInParent
argument_list|(
operator|&
name|x
argument_list|,
operator|&
name|y
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|button
operator|->
name|pos
argument_list|()
argument_list|,
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|ia2Component
operator|->
name|Release
argument_list|()
expr_stmt|;
comment|/***** Test IAccessibleAction *****/
name|IAccessibleAction
modifier|*
name|ia2Action
init|=
literal|0
decl_stmt|;
name|hr
operator|=
name|ia2Button
operator|->
name|QueryInterface
argument_list|(
name|IID_IAccessibleAction
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
operator|&
name|ia2Action
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ia2Action
argument_list|)
expr_stmt|;
name|long
name|nActions
decl_stmt|;
name|ia2Action
operator|->
name|nActions
argument_list|(
operator|&
name|nActions
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nActions
operator|>=
literal|1
argument_list|)
expr_stmt|;
comment|// "Press" and "SetFocus"
name|BSTR
name|actionName
decl_stmt|;
name|ia2Action
operator|->
name|get_name
argument_list|(
literal|0
argument_list|,
operator|&
name|actionName
argument_list|)
expr_stmt|;
name|QString
name|name
argument_list|(
operator|(
name|QChar
operator|*
operator|)
name|actionName
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|name
argument_list|,
name|QAccessibleActionInterface
operator|::
name|pressAction
argument_list|()
argument_list|)
expr_stmt|;
name|ia2Action
operator|->
name|Release
argument_list|()
expr_stmt|;
comment|// Done testing
name|ia2Button
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
name|iaccButton
operator|->
name|Release
argument_list|()
expr_stmt|;
comment|/**************************************************      *   QWidget      **************************************************/
name|QWindow
modifier|*
name|windowHandle
init|=
name|window
operator|->
name|windowHandle
argument_list|()
decl_stmt|;
name|QPlatformNativeInterface
modifier|*
name|platform
init|=
name|QGuiApplication
operator|::
name|platformNativeInterface
argument_list|()
decl_stmt|;
name|HWND
name|hWnd
init|=
operator|(
name|HWND
operator|)
name|platform
operator|->
name|nativeResourceForWindow
argument_list|(
literal|"handle"
argument_list|,
name|windowHandle
argument_list|)
decl_stmt|;
name|IAccessible
modifier|*
name|iaccWindow
decl_stmt|;
name|hr
operator|=
operator|::
name|AccessibleObjectFromWindow
argument_list|(
name|hWnd
argument_list|,
name|OBJID_CLIENT
argument_list|,
name|IID_IAccessible
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
operator|&
name|iaccWindow
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
name|hr
operator|=
name|iaccWindow
operator|->
name|get_accRole
argument_list|(
name|varSELF
argument_list|,
operator|&
name|varRole
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|varRole
operator|.
name|vt
argument_list|,
operator|(
name|VARTYPE
operator|)
name|VT_I4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|varRole
operator|.
name|lVal
argument_list|,
operator|(
name|LONG
operator|)
name|ROLE_SYSTEM_CLIENT
argument_list|)
expr_stmt|;
name|long
name|nChildren
decl_stmt|;
name|hr
operator|=
name|iaccWindow
operator|->
name|get_accChildCount
argument_list|(
operator|&
name|nChildren
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nChildren
argument_list|,
operator|(
name|long
operator|)
literal|2
argument_list|)
expr_stmt|;
comment|/**************************************************      *   QTextEdit      **************************************************/
comment|// Get the second child (the accessible interface for the text edit)
name|varChild
operator|.
name|vt
operator|=
name|VT_I4
expr_stmt|;
name|varChild
operator|.
name|lVal
operator|=
literal|2
expr_stmt|;
name|QVERIFY
argument_list|(
name|iaccWindow
argument_list|)
expr_stmt|;
name|IAccessible
modifier|*
name|iaccTextEdit
decl_stmt|;
name|hr
operator|=
name|iaccWindow
operator|->
name|get_accChild
argument_list|(
name|varChild
argument_list|,
operator|(
name|IDispatch
operator|*
operator|*
operator|)
operator|&
name|iaccTextEdit
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|iaccTextEdit
argument_list|)
expr_stmt|;
name|hr
operator|=
name|iaccTextEdit
operator|->
name|get_accRole
argument_list|(
name|varSELF
argument_list|,
operator|&
name|varRole
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|varRole
operator|.
name|vt
argument_list|,
operator|(
name|VARTYPE
operator|)
name|VT_I4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|varRole
operator|.
name|lVal
argument_list|,
operator|(
name|LONG
operator|)
name|ROLE_SYSTEM_TEXT
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_SUPPORTS_IACCESSIBLE2
if|if
condition|(
name|IAccessibleEditableText
modifier|*
name|ia2TextEdit
init|=
operator|(
name|IAccessibleEditableText
operator|*
operator|)
name|queryIA2
argument_list|(
name|iaccTextEdit
argument_list|,
name|IID_IAccessibleEditableText
argument_list|)
condition|)
block|{
name|ia2TextEdit
operator|->
name|copyText
argument_list|(
literal|6
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|text
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"world"
argument_list|)
argument_list|)
expr_stmt|;
name|ia2TextEdit
operator|->
name|cutText
argument_list|(
literal|12
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|text
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"how "
argument_list|)
argument_list|)
expr_stmt|;
name|ia2TextEdit
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|IAccessibleText
modifier|*
name|ia2Text
init|=
operator|(
name|IAccessibleText
operator|*
operator|)
name|queryIA2
argument_list|(
name|iaccTextEdit
argument_list|,
name|IID_IAccessibleText
argument_list|)
condition|)
block|{
name|BSTR
name|txt
decl_stmt|;
name|hr
operator|=
name|ia2Text
operator|->
name|get_text
argument_list|(
literal|12
argument_list|,
literal|15
argument_list|,
operator|&
name|txt
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
operator|(
name|QChar
operator|*
operator|)
name|txt
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"are"
argument_list|)
argument_list|)
expr_stmt|;
name|ia2Text
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
name|iaccTextEdit
operator|->
name|Release
argument_list|()
expr_stmt|;
name|iaccWindow
operator|->
name|Release
argument_list|()
expr_stmt|;
name|QTestAccessibility
operator|::
name|clearEvents
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QAccessibility
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qaccessibility.moc"
end_include
end_unit
