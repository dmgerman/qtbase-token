begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|ACCESSIBLEWIDGETS_H
end_ifndef
begin_define
DECL|macro|ACCESSIBLEWIDGETS_H
define|#
directive|define
name|ACCESSIBLEWIDGETS_H
end_define
begin_include
include|#
directive|include
file|<QtWidgets/qaccessiblewidget.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qpushbutton.h>
end_include
begin_decl_stmt
name|class
name|QtTestAccessibleWidget
range|:
name|public
name|QWidget
block|{
name|Q_OBJECT
name|public
operator|:
name|QtTestAccessibleWidget
argument_list|(
name|QWidget
operator|*
name|parent
argument_list|,
specifier|const
name|char
operator|*
name|name
argument_list|)
operator|:
name|QWidget
argument_list|(
argument|parent
argument_list|)
block|{
name|setObjectName
argument_list|(
name|name
argument_list|)
block|;     }
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QtTestAccessibleWidgetIface
range|:
name|public
name|QAccessibleWidget
block|{
name|public
operator|:
name|QtTestAccessibleWidgetIface
argument_list|(
name|QtTestAccessibleWidget
operator|*
name|w
argument_list|)
operator|:
name|QAccessibleWidget
argument_list|(
argument|w
argument_list|)
block|{}
name|QString
name|text
argument_list|(
argument|QAccessible::Text t
argument_list|)
specifier|const
name|Q_DECL_OVERRIDE
block|{
if|if
condition|(
name|t
operator|==
name|QAccessible
operator|::
name|Help
condition|)
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Help yourself"
argument_list|)
return|;
return|return
name|QAccessibleWidget
operator|::
name|text
argument_list|(
name|t
argument_list|)
return|;
block|}
end_decl_stmt
begin_function
specifier|static
name|QAccessibleInterface
modifier|*
name|ifaceFactory
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
name|QObject
modifier|*
name|o
parameter_list|)
block|{
if|if
condition|(
name|key
operator|==
literal|"QtTestAccessibleWidget"
condition|)
return|return
name|new
name|QtTestAccessibleWidgetIface
argument_list|(
name|static_cast
operator|<
name|QtTestAccessibleWidget
operator|*
operator|>
operator|(
name|o
operator|)
argument_list|)
return|;
return|return
literal|0
return|;
block|}
end_function
begin_decl_stmt
unit|};
name|class
name|QtTestAccessibleWidgetSubclass
range|:
name|public
name|QtTestAccessibleWidget
block|{
name|Q_OBJECT
name|public
operator|:
name|QtTestAccessibleWidgetSubclass
argument_list|(
name|QWidget
operator|*
name|parent
argument_list|,
specifier|const
name|char
operator|*
name|name
argument_list|)
operator|:
name|QtTestAccessibleWidget
argument_list|(
argument|parent
argument_list|,
argument|name
argument_list|)
block|{}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|KFooButton
range|:
name|public
name|QPushButton
block|{
name|Q_OBJECT
name|public
operator|:
name|KFooButton
argument_list|(
specifier|const
name|QString
operator|&
name|text
argument_list|,
name|QWidget
operator|*
name|parent
operator|=
literal|0
argument_list|)
operator|:
name|QPushButton
argument_list|(
argument|text
argument_list|,
argument|parent
argument_list|)
block|{}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|CustomTextWidget
range|:
name|public
name|QWidget
block|{
name|Q_OBJECT
name|public
operator|:
name|int
name|cursorPosition
block|;
name|QString
name|text
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QAccessibleWidget
name|class
name|CustomTextWidgetIface
range|:
name|public
name|QAccessibleWidget
decl_stmt|,
name|public
name|QAccessibleTextInterface
block|{
name|public
label|:
specifier|static
name|QAccessibleInterface
modifier|*
name|ifaceFactory
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
name|QObject
modifier|*
name|o
parameter_list|)
block|{
if|if
condition|(
name|key
operator|==
literal|"CustomTextWidget"
condition|)
return|return
name|new
name|CustomTextWidgetIface
argument_list|(
name|static_cast
operator|<
name|CustomTextWidget
operator|*
operator|>
operator|(
name|o
operator|)
argument_list|)
return|;
return|return
literal|0
return|;
block|}
name|CustomTextWidgetIface
argument_list|(
name|CustomTextWidget
operator|*
name|w
argument_list|)
operator|:
name|QAccessibleWidget
argument_list|(
argument|w
argument_list|)
block|{}
name|void
operator|*
name|interface_cast
argument_list|(
argument|QAccessible::InterfaceType t
argument_list|)
block|{
if|if
condition|(
name|t
operator|==
name|QAccessible
operator|::
name|TextInterface
condition|)
return|return
name|static_cast
operator|<
name|QAccessibleTextInterface
operator|*
operator|>
operator|(
name|this
operator|)
return|;
return|return
literal|0
return|;
block|}
end_decl_stmt
begin_comment
comment|// this is mostly to test the base implementation for textBefore/At/After
end_comment
begin_decl_stmt
name|QString
name|text
argument_list|(
name|QAccessible
operator|::
name|Text
name|t
argument_list|)
decl|const
name|Q_DECL_OVERRIDE
block|{
if|if
condition|(
name|t
operator|==
name|QAccessible
operator|::
name|Value
condition|)
return|return
name|textWidget
argument_list|()
operator|->
name|text
return|;
return|return
name|QAccessibleWidget
operator|::
name|text
argument_list|(
name|t
argument_list|)
return|;
block|}
end_decl_stmt
begin_decl_stmt
name|QString
name|textBeforeOffset
argument_list|(
name|int
name|offset
argument_list|,
name|QAccessible
operator|::
name|TextBoundaryType
name|boundaryType
argument_list|,
name|int
operator|*
name|startOffset
argument_list|,
name|int
operator|*
name|endOffset
argument_list|)
decl|const
block|{
if|if
condition|(
name|offset
operator|==
operator|-
literal|2
condition|)
name|offset
operator|=
name|textWidget
argument_list|()
operator|->
name|cursorPosition
expr_stmt|;
return|return
name|QAccessibleTextInterface
operator|::
name|textBeforeOffset
argument_list|(
name|offset
argument_list|,
name|boundaryType
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|)
return|;
block|}
end_decl_stmt
begin_decl_stmt
name|QString
name|textAtOffset
argument_list|(
name|int
name|offset
argument_list|,
name|QAccessible
operator|::
name|TextBoundaryType
name|boundaryType
argument_list|,
name|int
operator|*
name|startOffset
argument_list|,
name|int
operator|*
name|endOffset
argument_list|)
decl|const
block|{
if|if
condition|(
name|offset
operator|==
operator|-
literal|2
condition|)
name|offset
operator|=
name|textWidget
argument_list|()
operator|->
name|cursorPosition
expr_stmt|;
return|return
name|QAccessibleTextInterface
operator|::
name|textAtOffset
argument_list|(
name|offset
argument_list|,
name|boundaryType
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|)
return|;
block|}
end_decl_stmt
begin_decl_stmt
name|QString
name|textAfterOffset
argument_list|(
name|int
name|offset
argument_list|,
name|QAccessible
operator|::
name|TextBoundaryType
name|boundaryType
argument_list|,
name|int
operator|*
name|startOffset
argument_list|,
name|int
operator|*
name|endOffset
argument_list|)
decl|const
block|{
if|if
condition|(
name|offset
operator|==
operator|-
literal|2
condition|)
name|offset
operator|=
name|textWidget
argument_list|()
operator|->
name|cursorPosition
expr_stmt|;
return|return
name|QAccessibleTextInterface
operator|::
name|textAfterOffset
argument_list|(
name|offset
argument_list|,
name|boundaryType
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|)
return|;
block|}
end_decl_stmt
begin_decl_stmt
name|void
name|selection
argument_list|(
name|int
argument_list|,
name|int
operator|*
name|startOffset
argument_list|,
name|int
operator|*
name|endOffset
argument_list|)
decl|const
name|Q_DECL_OVERRIDE
block|{
operator|*
name|startOffset
operator|=
operator|*
name|endOffset
operator|=
operator|-
literal|1
expr_stmt|;
block|}
end_decl_stmt
begin_expr_stmt
name|int
name|selectionCount
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
literal|0
return|;
block|}
end_expr_stmt
begin_function
name|void
name|addSelection
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function|Q_DECL_OVERRIDE
block|{}
end_function
begin_function
name|void
name|removeSelection
parameter_list|(
name|int
parameter_list|)
function|Q_DECL_OVERRIDE
block|{}
end_function
begin_function
name|void
name|setSelection
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function|Q_DECL_OVERRIDE
block|{}
end_function
begin_expr_stmt
name|int
name|cursorPosition
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|textWidget
argument_list|()
operator|->
name|cursorPosition
return|;
block|}
end_expr_stmt
begin_function
name|void
name|setCursorPosition
parameter_list|(
name|int
name|position
parameter_list|)
function|Q_DECL_OVERRIDE
block|{
name|textWidget
argument_list|()
operator|->
name|cursorPosition
operator|=
name|position
expr_stmt|;
block|}
end_function
begin_decl_stmt
name|QString
name|text
argument_list|(
name|int
name|startOffset
argument_list|,
name|int
name|endOffset
argument_list|)
decl|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|textWidget
argument_list|()
operator|->
name|text
operator|.
name|mid
argument_list|(
name|startOffset
argument_list|,
name|endOffset
argument_list|)
return|;
block|}
end_decl_stmt
begin_expr_stmt
name|int
name|characterCount
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|textWidget
argument_list|()
operator|->
name|text
operator|.
name|length
argument_list|()
return|;
block|}
end_expr_stmt
begin_decl_stmt
name|QRect
name|characterRect
argument_list|(
name|int
argument_list|)
decl|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|QRect
argument_list|()
return|;
block|}
end_decl_stmt
begin_decl_stmt
name|int
name|offsetAtPoint
argument_list|(
specifier|const
name|QPoint
operator|&
argument_list|)
decl|const
name|Q_DECL_OVERRIDE
block|{
return|return
literal|0
return|;
block|}
end_decl_stmt
begin_function
name|void
name|scrollToSubstring
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function|Q_DECL_OVERRIDE
block|{}
end_function
begin_decl_stmt
name|QString
name|attributes
argument_list|(
name|int
argument_list|,
name|int
operator|*
argument_list|,
name|int
operator|*
argument_list|)
decl|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|QString
argument_list|()
return|;
block|}
end_decl_stmt
begin_label
name|private
label|:
end_label
begin_expr_stmt
name|CustomTextWidget
operator|*
name|textWidget
argument_list|()
specifier|const
block|{
return|return
name|qobject_cast
operator|<
name|CustomTextWidget
operator|*
operator|>
operator|(
name|widget
argument_list|()
operator|)
return|;
block|}
end_expr_stmt
begin_endif
unit|};
endif|#
directive|endif
end_endif
begin_comment
comment|// ACCESSIBLEWIDGETS_H
end_comment
end_unit
