begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<atWrapper.h>
end_include
begin_include
include|#
directive|include
file|<datagenerator/datagenerator.h>
end_include
begin_include
include|#
directive|include
file|<QString>
end_include
begin_include
include|#
directive|include
file|<QHash>
end_include
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_include
include|#
directive|include
file|<QFtp>
end_include
begin_include
include|#
directive|include
file|<QObject>
end_include
begin_include
include|#
directive|include
file|<QHostInfo>
end_include
begin_include
include|#
directive|include
file|<QWidget>
end_include
begin_include
include|#
directive|include
file|<QImage>
end_include
begin_include
include|#
directive|include
file|<QtTest/QSignalSpy>
end_include
begin_include
include|#
directive|include
file|<QLibraryInfo>
end_include
begin_decl_stmt
DECL|variable|ArthurDir
specifier|static
specifier|const
name|char
modifier|*
name|ArthurDir
init|=
literal|"../../arthur"
decl_stmt|;
end_decl_stmt
begin_include
include|#
directive|include
file|<string.h>
end_include
begin_constructor
DECL|function|atWrapper
name|atWrapper
operator|::
name|atWrapper
parameter_list|()
block|{
comment|//   initTests();
block|}
end_constructor
begin_function
DECL|function|initTests
name|bool
name|atWrapper
operator|::
name|initTests
parameter_list|(
name|bool
modifier|*
name|haveBaseline
parameter_list|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Running test on buildkey:"
operator|<<
name|QLibraryInfo
operator|::
name|buildKey
argument_list|()
operator|<<
literal|"  qt version:"
operator|<<
name|qVersion
argument_list|()
expr_stmt|;
name|qDebug
argument_list|(
literal|"Initializing tests..."
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|loadConfig
argument_list|(
name|QHostInfo
operator|::
name|localHostName
argument_list|()
operator|.
name|split
argument_list|(
literal|"."
argument_list|)
operator|.
name|first
argument_list|()
operator|+
literal|".ini"
argument_list|)
condition|)
return|return
literal|false
return|;
comment|//Reset the FTP environment where the results are stored
operator|*
name|haveBaseline
operator|=
name|setupFTP
argument_list|()
expr_stmt|;
comment|// Retrieve the latest test result baseline from the FTP server.
name|downloadBaseline
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|downloadBaseline
name|void
name|atWrapper
operator|::
name|downloadBaseline
parameter_list|()
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Now downloading baseline..."
expr_stmt|;
name|QFtp
name|ftp
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|ftp
argument_list|,
name|SIGNAL
argument_list|(
name|listInfo
argument_list|(
specifier|const
name|QUrlInfo
operator|&
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|ftpMgetAddToList
argument_list|(
specifier|const
name|QUrlInfo
operator|&
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//Making sure that the needed local directories exist.
name|QHashIterator
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|j
argument_list|(
name|enginesToTest
argument_list|)
decl_stmt|;
while|while
condition|(
name|j
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|j
operator|.
name|next
argument_list|()
expr_stmt|;
name|QDir
name|dir
argument_list|(
name|output
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|cd
argument_list|(
name|j
operator|.
name|key
argument_list|()
operator|+
literal|".baseline"
argument_list|)
condition|)
name|dir
operator|.
name|mkdir
argument_list|(
name|j
operator|.
name|key
argument_list|()
operator|+
literal|".baseline"
argument_list|)
expr_stmt|;
block|}
comment|//FTP to the host specified in the config file, and retrieve the test result baseline.
name|ftp
operator|.
name|connectToHost
argument_list|(
name|ftpHost
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|login
argument_list|(
name|ftpUser
argument_list|,
name|ftpPass
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|cd
argument_list|(
name|ftpBaseDir
argument_list|)
expr_stmt|;
name|QHashIterator
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|i
argument_list|(
name|enginesToTest
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|mgetDirList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|mgetDirList
operator|<<
name|i
operator|.
name|key
argument_list|()
operator|+
literal|".baseline"
expr_stmt|;
name|ftp
operator|.
name|cd
argument_list|(
name|i
operator|.
name|key
argument_list|()
operator|+
literal|".baseline"
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|list
argument_list|()
expr_stmt|;
name|ftp
operator|.
name|cd
argument_list|(
literal|".."
argument_list|)
expr_stmt|;
while|while
condition|(
name|ftp
operator|.
name|hasPendingCommands
argument_list|()
condition|)
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|ftpMgetDone
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|ftp
operator|.
name|close
argument_list|()
expr_stmt|;
name|ftp
operator|.
name|close
argument_list|()
expr_stmt|;
while|while
condition|(
name|ftp
operator|.
name|hasPendingCommands
argument_list|()
condition|)
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ftpMgetAddToList
name|void
name|atWrapper
operator|::
name|ftpMgetAddToList
parameter_list|(
specifier|const
name|QUrlInfo
modifier|&
name|urlInfo
parameter_list|)
block|{
comment|//Simply adding to the list of files to download.
name|mgetDirList
operator|<<
name|urlInfo
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ftpMgetDone
name|void
name|atWrapper
operator|::
name|ftpMgetDone
parameter_list|(
name|bool
name|error
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|error
argument_list|)
expr_stmt|;
comment|//Downloading the files listed in mgetDirList...
name|QFtp
name|ftp
decl_stmt|;
name|ftp
operator|.
name|connectToHost
argument_list|(
name|ftpHost
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|login
argument_list|(
name|ftpUser
argument_list|,
name|ftpPass
argument_list|)
expr_stmt|;
name|QFile
modifier|*
name|file
decl_stmt|;
if|if
condition|(
name|mgetDirList
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|mgetDirList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|file
operator|=
operator|new
name|QFile
argument_list|(
name|QString
argument_list|(
name|output
argument_list|)
operator|+
literal|"/"
operator|+
name|mgetDirList
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|+
literal|"/"
operator|+
name|mgetDirList
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|->
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
condition|)
block|{
name|ftp
operator|.
name|get
argument_list|(
name|ftpBaseDir
operator|+
literal|"/"
operator|+
name|mgetDirList
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|+
literal|"/"
operator|+
name|mgetDirList
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|list
argument_list|()
expr_stmt|;
comment|//Only there to fill up a slot in the pendingCommands queue.
while|while
condition|(
name|ftp
operator|.
name|hasPendingCommands
argument_list|()
condition|)
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|file
operator|->
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Couldn't open file for writing: "
operator|<<
name|file
operator|->
name|fileName
argument_list|()
expr_stmt|;
block|}
block|}
while|while
condition|(
name|ftp
operator|.
name|hasPendingCommands
argument_list|()
condition|)
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|uploadFailed
name|void
name|atWrapper
operator|::
name|uploadFailed
parameter_list|(
name|QString
name|dir
parameter_list|,
name|QString
name|filename
parameter_list|,
name|QByteArray
name|filedata
parameter_list|)
block|{
comment|//Upload a failed test case image to the FTP server.
name|QFtp
name|ftp
decl_stmt|;
name|ftp
operator|.
name|connectToHost
argument_list|(
name|ftpHost
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|login
argument_list|(
name|ftpUser
argument_list|,
name|ftpPass
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|cd
argument_list|(
name|ftpBaseDir
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|cd
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|put
argument_list|(
name|filedata
argument_list|,
name|filename
argument_list|,
name|QFtp
operator|::
name|Binary
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|close
argument_list|()
expr_stmt|;
while|while
condition|(
name|ftp
operator|.
name|hasPendingCommands
argument_list|()
condition|)
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|// returns false if no baseline exists
end_comment
begin_function
DECL|function|setupFTP
name|bool
name|atWrapper
operator|::
name|setupFTP
parameter_list|()
block|{
name|qDebug
argument_list|(
literal|"Setting up FTP environment"
argument_list|)
expr_stmt|;
name|QString
name|dir
init|=
literal|""
decl_stmt|;
name|ftpMkDir
argument_list|(
name|ftpBaseDir
argument_list|)
expr_stmt|;
name|ftpBaseDir
operator|+=
literal|"/"
operator|+
name|QLibraryInfo
operator|::
name|buildKey
argument_list|()
expr_stmt|;
name|ftpMkDir
argument_list|(
name|ftpBaseDir
argument_list|)
expr_stmt|;
name|ftpBaseDir
operator|+=
literal|"/"
operator|+
name|QString
argument_list|(
name|qVersion
argument_list|()
argument_list|)
expr_stmt|;
name|ftpMkDir
argument_list|(
name|ftpBaseDir
argument_list|)
expr_stmt|;
name|QHashIterator
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|i
argument_list|(
name|enginesToTest
argument_list|)
decl_stmt|;
name|QHashIterator
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|j
argument_list|(
name|enginesToTest
argument_list|)
decl_stmt|;
name|bool
name|haveBaseline
init|=
literal|true
decl_stmt|;
comment|//Creating the baseline directories for each engine
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
comment|//qDebug()<< "Creating dir with key:"<< i.key();
name|ftpMkDir
argument_list|(
name|ftpBaseDir
operator|+
literal|"/"
operator|+
name|QString
argument_list|(
name|i
operator|.
name|key
argument_list|()
argument_list|)
operator|+
literal|".failed"
argument_list|)
expr_stmt|;
name|ftpMkDir
argument_list|(
name|ftpBaseDir
operator|+
literal|"/"
operator|+
name|QString
argument_list|(
name|i
operator|.
name|key
argument_list|()
argument_list|)
operator|+
literal|".diff"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ftpMkDir
argument_list|(
name|ftpBaseDir
operator|+
literal|"/"
operator|+
name|QString
argument_list|(
name|i
operator|.
name|key
argument_list|()
argument_list|)
operator|+
literal|".baseline"
argument_list|)
condition|)
name|haveBaseline
operator|=
literal|false
expr_stmt|;
block|}
name|QFtp
name|ftp
decl_stmt|;
name|ftp
operator|.
name|connectToHost
argument_list|(
name|ftpHost
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|login
argument_list|(
name|ftpUser
argument_list|,
name|ftpPass
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|cd
argument_list|(
name|ftpBaseDir
argument_list|)
expr_stmt|;
comment|//Deleting previous failed directory and all the files in it, then recreating it.
while|while
condition|(
name|j
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|j
operator|.
name|next
argument_list|()
expr_stmt|;
name|rmDirList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rmDirList
operator|<<
name|ftpBaseDir
operator|+
literal|"/"
operator|+
name|j
operator|.
name|key
argument_list|()
operator|+
literal|".failed"
operator|+
literal|"/"
expr_stmt|;
name|ftpRmDir
argument_list|(
name|j
operator|.
name|key
argument_list|()
operator|+
literal|".failed"
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|rmdir
argument_list|(
name|j
operator|.
name|key
argument_list|()
operator|+
literal|".failed"
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|mkdir
argument_list|(
name|j
operator|.
name|key
argument_list|()
operator|+
literal|".failed"
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|list
argument_list|()
expr_stmt|;
while|while
condition|(
name|ftp
operator|.
name|hasPendingCommands
argument_list|()
condition|)
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|rmDirList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rmDirList
operator|<<
name|ftpBaseDir
operator|+
literal|"/"
operator|+
name|j
operator|.
name|key
argument_list|()
operator|+
literal|".diff"
operator|+
literal|"/"
expr_stmt|;
name|ftpRmDir
argument_list|(
name|j
operator|.
name|key
argument_list|()
operator|+
literal|".diff"
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|rmdir
argument_list|(
name|j
operator|.
name|key
argument_list|()
operator|+
literal|".diff"
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|mkdir
argument_list|(
name|j
operator|.
name|key
argument_list|()
operator|+
literal|".diff"
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|list
argument_list|()
expr_stmt|;
while|while
condition|(
name|ftp
operator|.
name|hasPendingCommands
argument_list|()
condition|)
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
block|}
name|ftp
operator|.
name|close
argument_list|()
expr_stmt|;
while|while
condition|(
name|ftp
operator|.
name|hasPendingCommands
argument_list|()
condition|)
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
return|return
name|haveBaseline
return|;
block|}
end_function
begin_function
DECL|function|ftpRmDir
name|void
name|atWrapper
operator|::
name|ftpRmDir
parameter_list|(
name|QString
name|dir
parameter_list|)
block|{
comment|//Hack to remove a populated directory. (caveat: containing only files and empty dirs, not recursive!)
name|qDebug
argument_list|()
operator|<<
literal|"Now removing directory: "
operator|<<
name|dir
expr_stmt|;
name|QFtp
name|ftp
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|ftp
argument_list|,
name|SIGNAL
argument_list|(
name|listInfo
argument_list|(
specifier|const
name|QUrlInfo
operator|&
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|ftpRmDirAddToList
argument_list|(
specifier|const
name|QUrlInfo
operator|&
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|ftp
argument_list|,
name|SIGNAL
argument_list|(
name|done
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|ftpRmDirDone
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|connectToHost
argument_list|(
name|ftpHost
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|login
argument_list|(
name|ftpUser
argument_list|,
name|ftpPass
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|list
argument_list|(
name|ftpBaseDir
operator|+
literal|"/"
operator|+
name|dir
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|close
argument_list|()
expr_stmt|;
name|ftp
operator|.
name|close
argument_list|()
expr_stmt|;
while|while
condition|(
name|ftp
operator|.
name|hasPendingCommands
argument_list|()
condition|)
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ftpRmDirDone
name|void
name|atWrapper
operator|::
name|ftpRmDirDone
parameter_list|(
name|bool
name|error
parameter_list|)
block|{
comment|//Deleting each file in the directory listning, rmDirList.
name|Q_UNUSED
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|QFtp
name|ftp
decl_stmt|;
name|ftp
operator|.
name|connectToHost
argument_list|(
name|ftpHost
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|login
argument_list|(
name|ftpUser
argument_list|,
name|ftpPass
argument_list|)
expr_stmt|;
if|if
condition|(
name|rmDirList
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|rmDirList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|ftp
operator|.
name|remove
argument_list|(
name|rmDirList
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|+
name|rmDirList
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|close
argument_list|()
expr_stmt|;
while|while
condition|(
name|ftp
operator|.
name|hasPendingCommands
argument_list|()
condition|)
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|// returns false if the directory already exists
end_comment
begin_function
DECL|function|ftpMkDir
name|bool
name|atWrapper
operator|::
name|ftpMkDir
parameter_list|(
name|QString
name|dir
parameter_list|)
block|{
comment|//Simply used to avoid QFTP from bailing out and loosing a queue of commands.
comment|// IE: conveniance.
name|QFtp
name|ftp
decl_stmt|;
name|QSignalSpy
name|commandSpy
argument_list|(
operator|&
name|ftp
argument_list|,
name|SIGNAL
argument_list|(
name|commandFinished
argument_list|(
name|int
argument_list|,
name|bool
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ftp
operator|.
name|connectToHost
argument_list|(
name|ftpHost
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|login
argument_list|(
name|ftpUser
argument_list|,
name|ftpPass
argument_list|)
expr_stmt|;
specifier|const
name|int
name|command
init|=
name|ftp
operator|.
name|mkdir
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|ftp
operator|.
name|close
argument_list|()
expr_stmt|;
while|while
condition|(
name|ftp
operator|.
name|hasPendingCommands
argument_list|()
condition|)
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|commandSpy
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|commandSpy
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|command
condition|)
return|return
name|commandSpy
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toBool
argument_list|()
return|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|ftpRmDirAddToList
name|void
name|atWrapper
operator|::
name|ftpRmDirAddToList
parameter_list|(
specifier|const
name|QUrlInfo
modifier|&
name|urlInfo
parameter_list|)
block|{
comment|//Just adding the file to the list for deletion
name|rmDirList
operator|<<
name|urlInfo
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|executeTests
name|bool
name|atWrapper
operator|::
name|executeTests
parameter_list|()
block|{
name|qDebug
argument_list|(
literal|"Executing the tests..."
argument_list|)
expr_stmt|;
name|QHashIterator
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|i
argument_list|(
name|enginesToTest
argument_list|)
decl_stmt|;
name|DataGenerator
name|generator
decl_stmt|;
comment|//Running datagenerator against all the frameworks specified in the config file.
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|qDebug
argument_list|(
literal|"Now testing: "
operator|+
name|i
operator|.
name|key
argument_list|()
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
name|char
modifier|*
name|params
index|[
literal|13
index|]
decl_stmt|;
comment|//./bin/datagenerator  -framework data/framework.ini  -engine OpenGL -suite 1.1 -output outtest
name|QByteArray
name|eng
init|=
name|i
operator|.
name|key
argument_list|()
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|QByteArray
name|fwk
init|=
name|framework
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|QByteArray
name|sut
init|=
name|suite
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|QByteArray
name|out
init|=
name|output
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|QByteArray
name|siz
init|=
name|size
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|QByteArray
name|fill
init|=
name|fillColor
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|params
index|[
literal|1
index|]
operator|=
literal|"-framework"
expr_stmt|;
name|params
index|[
literal|2
index|]
operator|=
name|fwk
operator|.
name|data
argument_list|()
expr_stmt|;
name|params
index|[
literal|3
index|]
operator|=
literal|"-engine"
expr_stmt|;
name|params
index|[
literal|4
index|]
operator|=
name|eng
operator|.
name|data
argument_list|()
expr_stmt|;
name|params
index|[
literal|5
index|]
operator|=
literal|"-suite"
expr_stmt|;
name|params
index|[
literal|6
index|]
operator|=
name|sut
operator|.
name|data
argument_list|()
expr_stmt|;
name|params
index|[
literal|7
index|]
operator|=
literal|"-output"
expr_stmt|;
name|params
index|[
literal|8
index|]
operator|=
name|out
operator|.
name|data
argument_list|()
expr_stmt|;
name|params
index|[
literal|9
index|]
operator|=
literal|"-size"
expr_stmt|;
name|params
index|[
literal|10
index|]
operator|=
name|siz
operator|.
name|data
argument_list|()
expr_stmt|;
name|params
index|[
literal|11
index|]
operator|=
literal|"-fill"
expr_stmt|;
name|params
index|[
literal|12
index|]
operator|=
name|fill
operator|.
name|data
argument_list|()
expr_stmt|;
name|generator
operator|.
name|run
argument_list|(
literal|13
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|createBaseline
name|void
name|atWrapper
operator|::
name|createBaseline
parameter_list|()
block|{
name|qDebug
argument_list|(
literal|"Now uploading a baseline of only the latest test values"
argument_list|)
expr_stmt|;
name|QHashIterator
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|i
argument_list|(
name|enginesToTest
argument_list|)
decl_stmt|;
name|QDir
name|dir
argument_list|(
name|output
argument_list|)
decl_stmt|;
name|QFtp
name|ftp
decl_stmt|;
name|ftp
operator|.
name|connectToHost
argument_list|(
name|ftpHost
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|login
argument_list|(
name|ftpUser
argument_list|,
name|ftpPass
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|cd
argument_list|(
name|ftpBaseDir
argument_list|)
expr_stmt|;
comment|//Upload all the latest test results to the FTP server's baseline directory.
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|dir
operator|.
name|cd
argument_list|(
name|i
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
name|ftp
operator|.
name|cd
argument_list|(
name|i
operator|.
name|key
argument_list|()
operator|+
literal|".baseline"
argument_list|)
expr_stmt|;
name|dir
operator|.
name|setFilter
argument_list|(
name|QDir
operator|::
name|Files
operator||
name|QDir
operator|::
name|Hidden
operator||
name|QDir
operator|::
name|NoSymLinks
argument_list|)
expr_stmt|;
name|dir
operator|.
name|setNameFilters
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"*.png"
argument_list|)
expr_stmt|;
name|QFileInfoList
name|list
init|=
name|dir
operator|.
name|entryInfoList
argument_list|()
decl_stmt|;
name|dir
operator|.
name|cd
argument_list|(
literal|".."
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|n
operator|++
control|)
block|{
name|QFileInfo
name|fileInfo
init|=
name|list
operator|.
name|at
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|QFile
name|file
argument_list|(
name|QString
argument_list|(
name|output
argument_list|)
operator|+
literal|"/"
operator|+
name|i
operator|.
name|key
argument_list|()
operator|+
literal|"/"
operator|+
name|fileInfo
operator|.
name|fileName
argument_list|()
argument_list|)
decl_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QByteArray
name|fileData
init|=
name|file
operator|.
name|readAll
argument_list|()
decl_stmt|;
comment|//qDebug()<< "Sending up:"<< fileInfo.fileName()<< "with file size"<< fileData.size();
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|ftp
operator|.
name|put
argument_list|(
name|fileData
argument_list|,
name|fileInfo
operator|.
name|fileName
argument_list|()
argument_list|,
name|QFtp
operator|::
name|Binary
argument_list|)
expr_stmt|;
block|}
name|ftp
operator|.
name|cd
argument_list|(
literal|".."
argument_list|)
expr_stmt|;
block|}
name|ftp
operator|.
name|close
argument_list|()
expr_stmt|;
while|while
condition|(
name|ftp
operator|.
name|hasPendingCommands
argument_list|()
condition|)
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compare
name|bool
name|atWrapper
operator|::
name|compare
parameter_list|()
block|{
name|qDebug
argument_list|(
literal|"Now comparing the results to the baseline"
argument_list|)
expr_stmt|;
name|QHashIterator
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|i
argument_list|(
name|enginesToTest
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|compareDirs
argument_list|(
name|output
argument_list|,
name|i
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|compareDirs
name|void
name|atWrapper
operator|::
name|compareDirs
parameter_list|(
name|QString
name|basedir
parameter_list|,
name|QString
name|target
parameter_list|)
block|{
name|QDir
name|dir
argument_list|(
name|basedir
argument_list|)
decl_stmt|;
comment|/* The following should be redundant now.      if ( !dir.cd( target + ".failed" ) )         dir.mkdir( target + ".failed" );     else         dir.cdUp();      */
if|if
condition|(
operator|!
name|dir
operator|.
name|cd
argument_list|(
name|target
operator|+
literal|".diff"
argument_list|)
condition|)
name|dir
operator|.
name|mkdir
argument_list|(
name|target
operator|+
literal|".diff"
argument_list|)
expr_stmt|;
else|else
name|dir
operator|.
name|cdUp
argument_list|()
expr_stmt|;
comment|//Perform comparisons between the two directories.
name|dir
operator|.
name|setFilter
argument_list|(
name|QDir
operator|::
name|Files
operator||
name|QDir
operator|::
name|Hidden
operator||
name|QDir
operator|::
name|NoSymLinks
argument_list|)
expr_stmt|;
name|dir
operator|.
name|setNameFilters
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"*.png"
argument_list|)
expr_stmt|;
name|dir
operator|.
name|cd
argument_list|(
name|target
operator|+
literal|".baseline"
argument_list|)
expr_stmt|;
name|QFileInfoList
name|list
init|=
name|dir
operator|.
name|entryInfoList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QFileInfo
name|fileInfo
init|=
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|diff
argument_list|(
name|basedir
argument_list|,
name|target
argument_list|,
name|fileInfo
operator|.
name|fileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|diff
name|bool
name|atWrapper
operator|::
name|diff
parameter_list|(
name|QString
name|basedir
parameter_list|,
name|QString
name|dir
parameter_list|,
name|QString
name|target
parameter_list|)
block|{
comment|//Comparing the two specified files, and then uploading them to
comment|//the ftp server if they differ
name|basedir
operator|+=
literal|"/"
operator|+
name|dir
expr_stmt|;
name|QString
name|one
init|=
name|basedir
operator|+
literal|".baseline/"
operator|+
name|target
decl_stmt|;
name|QString
name|two
init|=
name|basedir
operator|+
literal|"/"
operator|+
name|target
decl_stmt|;
name|QFile
name|file
argument_list|(
name|one
argument_list|)
decl_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QByteArray
name|contentsOfOne
init|=
name|file
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|file
operator|.
name|setFileName
argument_list|(
name|two
argument_list|)
expr_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QByteArray
name|contentsOfTwo
init|=
name|file
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|contentsOfTwo
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"No test result found for baseline: "
operator|<<
name|one
expr_stmt|;
name|file
operator|.
name|setFileName
argument_list|(
name|one
argument_list|)
expr_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|file
operator|.
name|copy
argument_list|(
name|basedir
operator|+
literal|".failed/"
operator|+
name|target
operator|+
literal|"_missing"
argument_list|)
expr_stmt|;
name|uploadFailed
argument_list|(
name|dir
operator|+
literal|".failed"
argument_list|,
name|target
operator|+
literal|"_missing"
argument_list|,
name|contentsOfTwo
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|(
name|memcmp
argument_list|(
name|contentsOfOne
argument_list|,
name|contentsOfTwo
argument_list|,
name|contentsOfOne
operator|.
name|size
argument_list|()
argument_list|)
operator|)
operator|==
literal|0
condition|)
return|return
literal|true
return|;
else|else
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Sorry, the result did not match: "
operator|<<
name|one
expr_stmt|;
name|file
operator|.
name|setFileName
argument_list|(
name|two
argument_list|)
expr_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|file
operator|.
name|copy
argument_list|(
name|basedir
operator|+
literal|".failed/"
operator|+
name|target
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|uploadFailed
argument_list|(
name|dir
operator|+
literal|".failed"
argument_list|,
name|target
argument_list|,
name|contentsOfTwo
argument_list|)
expr_stmt|;
name|uploadDiff
argument_list|(
name|basedir
argument_list|,
name|dir
argument_list|,
name|target
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
end_function
begin_function
DECL|function|uploadDiff
name|void
name|atWrapper
operator|::
name|uploadDiff
parameter_list|(
name|QString
name|basedir
parameter_list|,
name|QString
name|dir
parameter_list|,
name|QString
name|filename
parameter_list|)
block|{
name|qDebug
argument_list|()
operator|<<
name|basedir
expr_stmt|;
name|QImage
name|im1
argument_list|(
name|basedir
operator|+
literal|".baseline/"
operator|+
name|filename
argument_list|)
decl_stmt|;
name|QImage
name|im2
argument_list|(
name|basedir
operator|+
literal|"/"
operator|+
name|filename
argument_list|)
decl_stmt|;
name|QImage
name|im3
argument_list|(
name|im1
operator|.
name|size
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|im1
operator|=
name|im1
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
expr_stmt|;
name|im2
operator|=
name|im2
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|im1
operator|.
name|height
argument_list|()
condition|;
operator|++
name|y
control|)
block|{
name|uint
modifier|*
name|s
init|=
operator|(
name|uint
operator|*
operator|)
name|im1
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
name|uint
modifier|*
name|d
init|=
operator|(
name|uint
operator|*
operator|)
name|im2
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
name|uint
modifier|*
name|w
init|=
operator|(
name|uint
operator|*
operator|)
name|im3
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|im1
operator|.
name|width
argument_list|()
condition|;
operator|++
name|x
control|)
block|{
if|if
condition|(
operator|*
name|s
operator|!=
operator|*
name|d
condition|)
operator|*
name|w
operator|=
literal|0xff000000
expr_stmt|;
else|else
operator|*
name|w
operator|=
literal|0xffffffff
expr_stmt|;
name|w
operator|++
expr_stmt|;
name|s
operator|++
expr_stmt|;
name|d
operator|++
expr_stmt|;
block|}
block|}
name|im3
operator|.
name|save
argument_list|(
name|basedir
operator|+
literal|".diff/"
operator|+
name|filename
argument_list|,
literal|"PNG"
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|basedir
operator|+
literal|".diff/"
operator|+
name|filename
argument_list|)
decl_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QByteArray
name|contents
init|=
name|file
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|uploadFailed
argument_list|(
name|dir
operator|+
literal|".diff"
argument_list|,
name|filename
argument_list|,
name|contents
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|loadConfig
name|bool
name|atWrapper
operator|::
name|loadConfig
parameter_list|(
name|QString
name|path
parameter_list|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Loading config file from ... "
operator|<<
name|path
expr_stmt|;
name|configPath
operator|=
name|path
expr_stmt|;
comment|//If there is no config file, don't proceed;
if|if
condition|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|QSettings
name|settings
argument_list|(
name|path
argument_list|,
name|QSettings
operator|::
name|IniFormat
argument_list|,
name|this
argument_list|)
decl_stmt|;
comment|//FIXME: Switch to QStringList or something, hash is not needed!
name|int
name|numEngines
init|=
name|settings
operator|.
name|beginReadArray
argument_list|(
literal|"engines"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numEngines
condition|;
operator|++
name|i
control|)
block|{
name|settings
operator|.
name|setArrayIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|enginesToTest
operator|.
name|insert
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"engine"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Info here please :p"
argument_list|)
expr_stmt|;
block|}
name|settings
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|framework
operator|=
name|QString
argument_list|(
name|ArthurDir
argument_list|)
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
name|settings
operator|.
name|value
argument_list|(
literal|"framework"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|suite
operator|=
name|settings
operator|.
name|value
argument_list|(
literal|"suite"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|output
operator|=
name|settings
operator|.
name|value
argument_list|(
literal|"output"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|size
operator|=
name|settings
operator|.
name|value
argument_list|(
literal|"size"
argument_list|,
literal|"480,360"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|fillColor
operator|=
name|settings
operator|.
name|value
argument_list|(
literal|"fill"
argument_list|,
literal|"white"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ftpUser
operator|=
name|settings
operator|.
name|value
argument_list|(
literal|"ftpUser"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ftpPass
operator|=
name|settings
operator|.
name|value
argument_list|(
literal|"ftpPass"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ftpHost
operator|=
name|settings
operator|.
name|value
argument_list|(
literal|"ftpHost"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ftpBaseDir
operator|=
name|settings
operator|.
name|value
argument_list|(
literal|"ftpBaseDir"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|QDir
operator|::
name|current
argument_list|()
operator|.
name|mkdir
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|output
operator|+=
literal|"/"
operator|+
name|QLibraryInfo
operator|::
name|buildKey
argument_list|()
expr_stmt|;
name|QDir
operator|::
name|current
argument_list|()
operator|.
name|mkdir
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|output
operator|+=
literal|"/"
operator|+
name|QString
argument_list|(
name|qVersion
argument_list|()
argument_list|)
expr_stmt|;
name|QDir
operator|::
name|current
argument_list|()
operator|.
name|mkdir
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|ftpBaseDir
operator|+=
literal|"/"
operator|+
name|QHostInfo
operator|::
name|localHostName
argument_list|()
operator|.
name|split
argument_list|(
literal|"."
argument_list|)
operator|.
name|first
argument_list|()
expr_stmt|;
comment|/*     framework = "data/framework.ini";     suite = "1.1";     output = "testresults";     ftpUser = "anonymous";     ftpPass = "anonymouspass";     ftpHost = "kramer.troll.no";     ftpBaseDir = "/arthurtest"; */
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|runAutoTests
name|bool
name|atWrapper
operator|::
name|runAutoTests
parameter_list|()
block|{
comment|//SVG needs this widget...
name|QWidget
name|dummy
decl_stmt|;
name|bool
name|haveBaseline
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|initTests
argument_list|(
operator|&
name|haveBaseline
argument_list|)
condition|)
return|return
literal|false
return|;
name|executeTests
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|haveBaseline
condition|)
block|{
name|qDebug
argument_list|(
literal|" First run! Creating baseline..."
argument_list|)
expr_stmt|;
name|createBaseline
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|qDebug
argument_list|(
literal|" Comparing results..."
argument_list|)
expr_stmt|;
name|compare
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
end_unit
