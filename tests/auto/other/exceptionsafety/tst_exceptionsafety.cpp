begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_macro
name|QT_USE_NAMESPACE
end_macro
begin_class
DECL|class|tst_ExceptionSafety
class|class
name|tst_ExceptionSafety
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
ifdef|#
directive|ifdef
name|QT_NO_EXCEPTIONS
name|void
name|initTestCase
parameter_list|()
function_decl|;
else|#
directive|else
name|void
name|exceptionInSlot
parameter_list|()
function_decl|;
name|void
name|exceptionVector
parameter_list|()
function_decl|;
name|void
name|exceptionHash
parameter_list|()
function_decl|;
name|void
name|exceptionMap
parameter_list|()
function_decl|;
name|void
name|exceptionList
parameter_list|()
function_decl|;
name|void
name|exceptionLinkedList
parameter_list|()
function_decl|;
comment|//    void exceptionEventLoop();
comment|//    void exceptionSignalSlot();
endif|#
directive|endif
block|}
class|;
end_class
begin_ifdef
ifdef|#
directive|ifdef
name|QT_NO_EXCEPTIONS
end_ifdef
begin_function
DECL|function|initTestCase
name|void
name|tst_ExceptionSafety
operator|::
name|initTestCase
parameter_list|()
block|{
name|QSKIP
argument_list|(
literal|"This test requires exception support"
argument_list|)
expr_stmt|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_class
DECL|class|Emitter
class|class
name|Emitter
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|emitTestSignal
specifier|inline
name|void
name|emitTestSignal
parameter_list|()
block|{
emit|emit
name|testSignal
argument_list|()
emit|;
block|}
signals|signals:
name|void
name|testSignal
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_class
DECL|class|ExceptionThrower
class|class
name|ExceptionThrower
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
DECL|function|thrower
name|void
name|thrower
parameter_list|()
block|{
throw|throw
literal|5
throw|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|Receiver
class|class
name|Receiver
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|Receiver
name|Receiver
parameter_list|()
member_init_list|:
name|received
argument_list|(
literal|0
argument_list|)
block|{}
DECL|member|received
name|int
name|received
decl_stmt|;
public|public
name|slots
public|:
DECL|function|receiver
name|void
name|receiver
parameter_list|()
block|{
operator|++
name|received
expr_stmt|;
block|}
block|}
class|;
end_class
begin_enum
DECL|enum|ThrowType
DECL|enumerator|ThrowNot
DECL|enumerator|ThrowAtCreate
DECL|enumerator|ThrowAtCopy
DECL|enumerator|ThrowLater
DECL|enumerator|ThrowAtComparison
enum|enum
name|ThrowType
block|{
name|ThrowNot
init|=
literal|0
block|,
name|ThrowAtCreate
init|=
literal|1
block|,
name|ThrowAtCopy
init|=
literal|2
block|,
name|ThrowLater
init|=
literal|3
block|,
name|ThrowAtComparison
init|=
literal|4
block|}
enum|;
end_enum
begin_decl_stmt
DECL|variable|throwType
name|ThrowType
name|throwType
init|=
name|ThrowNot
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|throwType
comment|// global flag to indicate when an exception should be throw. Will be reset when the exception has been generated.
end_comment
begin_decl_stmt
DECL|variable|objCounter
name|int
name|objCounter
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*! Class that does not throw any exceptions. Used as baseclass for all the other ones.  */
end_comment
begin_class
template|template
parameter_list|<
name|int
name|T
parameter_list|>
class|class
DECL|class|FlexibleThrower
name|FlexibleThrower
block|{
public|public:
DECL|function|FlexibleThrower
name|FlexibleThrower
parameter_list|()
member_init_list|:
name|_value
argument_list|(
operator|-
literal|1
argument_list|)
block|{
if|if
condition|(
name|throwType
operator|==
name|ThrowAtCreate
condition|)
block|{
name|throwType
operator|=
name|ThrowNot
expr_stmt|;
throw|throw
name|ThrowAtCreate
throw|;
block|}
name|objCounter
operator|++
expr_stmt|;
block|}
DECL|function|FlexibleThrower
name|FlexibleThrower
parameter_list|(
name|short
name|value
parameter_list|)
member_init_list|:
name|_value
argument_list|(
name|value
argument_list|)
block|{
if|if
condition|(
name|throwType
operator|==
name|ThrowAtCreate
condition|)
block|{
name|throwType
operator|=
name|ThrowNot
expr_stmt|;
throw|throw
name|ThrowAtCreate
throw|;
block|}
name|objCounter
operator|++
expr_stmt|;
block|}
DECL|function|FlexibleThrower
name|FlexibleThrower
parameter_list|(
name|FlexibleThrower
specifier|const
modifier|&
name|other
parameter_list|)
block|{
comment|// qDebug("cc");
if|if
condition|(
name|throwType
operator|==
name|ThrowAtCopy
condition|)
block|{
name|throwType
operator|=
name|ThrowNot
expr_stmt|;
throw|throw
name|ThrowAtCopy
throw|;
block|}
elseif|else
if|if
condition|(
name|throwType
operator|==
name|ThrowLater
condition|)
block|{
name|throwType
operator|=
name|ThrowAtCopy
expr_stmt|;
block|}
name|objCounter
operator|++
expr_stmt|;
name|_value
operator|=
name|other
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
DECL|function|~FlexibleThrower
name|~
name|FlexibleThrower
parameter_list|()
block|{
name|objCounter
operator|--
expr_stmt|;
block|}
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|FlexibleThrower
argument_list|<
name|T
argument_list|>
modifier|&
name|t
parameter_list|)
specifier|const
block|{
comment|// qDebug("vv == %d %d", value(), t.value());
if|if
condition|(
name|throwType
operator|==
name|ThrowAtComparison
condition|)
block|{
name|throwType
operator|=
name|ThrowNot
expr_stmt|;
throw|throw
name|ThrowAtComparison
throw|;
block|}
return|return
name|value
argument_list|()
operator|==
name|t
operator|.
name|value
argument_list|()
return|;
block|}
DECL|function|operator <
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|FlexibleThrower
argument_list|<
name|T
argument_list|>
modifier|&
name|t
parameter_list|)
specifier|const
block|{
comment|// qDebug("vv< %d %d", value(), t.value());
if|if
condition|(
name|throwType
operator|==
name|ThrowAtComparison
condition|)
block|{
name|throwType
operator|=
name|ThrowNot
expr_stmt|;
throw|throw
name|ThrowAtComparison
throw|;
block|}
return|return
name|value
argument_list|()
operator|<
name|t
operator|.
name|value
argument_list|()
return|;
block|}
DECL|function|value
name|int
name|value
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|int
operator|)
name|_value
return|;
block|}
DECL|member|_value
name|short
name|_value
decl_stmt|;
DECL|member|dummy
name|char
name|dummy
index|[
name|T
index|]
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|qHash
name|uint
name|qHash
parameter_list|(
specifier|const
name|FlexibleThrower
argument_list|<
literal|2
argument_list|>
modifier|&
name|t
parameter_list|)
block|{
comment|// qDebug("ha");
if|if
condition|(
name|throwType
operator|==
name|ThrowAtComparison
condition|)
block|{
name|throwType
operator|=
name|ThrowNot
expr_stmt|;
throw|throw
name|ThrowAtComparison
throw|;
block|}
return|return
operator|(
name|uint
operator|)
name|t
operator|.
name|value
argument_list|()
return|;
block|}
end_function
begin_typedef
DECL|typedef|FlexibleThrowerSmall
typedef|typedef
name|FlexibleThrower
argument_list|<
literal|2
argument_list|>
name|FlexibleThrowerSmall
typedef|;
end_typedef
begin_typedef
DECL|typedef|MyMap
typedef|typedef
name|QMap
argument_list|<
name|FlexibleThrowerSmall
argument_list|,
name|FlexibleThrowerSmall
argument_list|>
name|MyMap
typedef|;
end_typedef
begin_typedef
DECL|typedef|MyHash
typedef|typedef
name|QHash
argument_list|<
name|FlexibleThrowerSmall
argument_list|,
name|FlexibleThrowerSmall
argument_list|>
name|MyHash
typedef|;
end_typedef
begin_comment
comment|// connect a signal to a slot that throws an exception
end_comment
begin_comment
comment|// run this through valgrind to make sure it doesn't corrupt
end_comment
begin_function
DECL|function|exceptionInSlot
name|void
name|tst_ExceptionSafety
operator|::
name|exceptionInSlot
parameter_list|()
block|{
name|Emitter
name|emitter
decl_stmt|;
name|ExceptionThrower
name|thrower
decl_stmt|;
name|connect
argument_list|(
operator|&
name|emitter
argument_list|,
name|SIGNAL
argument_list|(
name|testSignal
argument_list|()
argument_list|)
argument_list|,
operator|&
name|thrower
argument_list|,
name|SLOT
argument_list|(
name|thrower
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|emitter
operator|.
name|emitTestSignal
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|i
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|exceptionList
name|void
name|tst_ExceptionSafety
operator|::
name|exceptionList
parameter_list|()
block|{
specifier|const
name|int
name|intancesCount
init|=
name|objCounter
decl_stmt|;
block|{
name|int
name|instances
decl_stmt|;
name|QList
argument_list|<
name|FlexibleThrowerSmall
argument_list|>
name|list
decl_stmt|;
name|QList
argument_list|<
name|FlexibleThrowerSmall
argument_list|>
name|list2
decl_stmt|;
name|QList
argument_list|<
name|FlexibleThrowerSmall
argument_list|>
name|list3
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
name|list
operator|.
name|append
argument_list|(
name|FlexibleThrowerSmall
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|instances
operator|=
name|objCounter
expr_stmt|;
try|try
block|{
name|throwType
operator|=
name|ThrowAtCopy
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
name|FlexibleThrowerSmall
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|instances
argument_list|,
name|objCounter
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|instances
operator|=
name|objCounter
expr_stmt|;
try|try
block|{
name|throwType
operator|=
name|ThrowAtCopy
expr_stmt|;
name|list
operator|.
name|prepend
argument_list|(
name|FlexibleThrowerSmall
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|instances
argument_list|,
name|objCounter
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|instances
operator|=
name|objCounter
expr_stmt|;
try|try
block|{
name|throwType
operator|=
name|ThrowAtCopy
expr_stmt|;
name|list
operator|.
name|insert
argument_list|(
literal|8
argument_list|,
name|FlexibleThrowerSmall
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|instances
argument_list|,
name|objCounter
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|7
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|8
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|instances
operator|=
name|objCounter
expr_stmt|;
try|try
block|{
name|throwType
operator|=
name|ThrowAtCopy
expr_stmt|;
name|FlexibleThrowerSmall
name|t
init|=
name|list
operator|.
name|takeAt
argument_list|(
literal|6
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|instances
argument_list|,
name|objCounter
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|6
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|7
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|instances
operator|=
name|objCounter
expr_stmt|;
try|try
block|{
name|throwType
operator|=
name|ThrowAtCopy
expr_stmt|;
name|list3
operator|=
name|list
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|instances
argument_list|,
name|objCounter
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|7
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list3
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list3
operator|.
name|at
argument_list|(
literal|7
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list3
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|instances
operator|=
name|objCounter
expr_stmt|;
try|try
block|{
name|throwType
operator|=
name|ThrowAtCopy
expr_stmt|;
name|list3
operator|.
name|append
argument_list|(
name|FlexibleThrowerSmall
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|instances
argument_list|,
name|objCounter
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|7
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list3
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list3
operator|.
name|at
argument_list|(
literal|7
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list3
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
try|try
block|{
name|list2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|list2
operator|.
name|append
argument_list|(
name|FlexibleThrowerSmall
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|throwType
operator|=
name|ThrowAtCopy
expr_stmt|;
name|instances
operator|=
name|objCounter
expr_stmt|;
name|list3
operator|=
name|list
operator|+
name|list2
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|instances
argument_list|,
name|objCounter
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|7
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// check that copy on write works atomar
name|list2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|list2
operator|.
name|append
argument_list|(
name|FlexibleThrowerSmall
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|list3
operator|=
name|list
operator|+
name|list2
expr_stmt|;
name|instances
operator|=
name|objCounter
expr_stmt|;
try|try
block|{
name|throwType
operator|=
name|ThrowAtCreate
expr_stmt|;
name|list3
index|[
literal|7
index|]
operator|=
name|FlexibleThrowerSmall
argument_list|(
literal|12
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|instances
argument_list|,
name|objCounter
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|7
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list3
operator|.
name|at
argument_list|(
literal|7
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list3
operator|.
name|size
argument_list|()
argument_list|,
literal|11
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|objCounter
argument_list|,
name|intancesCount
argument_list|)
expr_stmt|;
comment|// check that every object has been freed
block|}
end_function
begin_function
DECL|function|exceptionLinkedList
name|void
name|tst_ExceptionSafety
operator|::
name|exceptionLinkedList
parameter_list|()
block|{
specifier|const
name|int
name|intancesCount
init|=
name|objCounter
decl_stmt|;
block|{
name|int
name|instances
decl_stmt|;
name|QLinkedList
argument_list|<
name|FlexibleThrowerSmall
argument_list|>
name|list
decl_stmt|;
name|QLinkedList
argument_list|<
name|FlexibleThrowerSmall
argument_list|>
name|list2
decl_stmt|;
name|QLinkedList
argument_list|<
name|FlexibleThrowerSmall
argument_list|>
name|list3
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
name|list
operator|.
name|append
argument_list|(
name|FlexibleThrowerSmall
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|instances
operator|=
name|objCounter
expr_stmt|;
try|try
block|{
name|throwType
operator|=
name|ThrowAtCopy
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
name|FlexibleThrowerSmall
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|instances
argument_list|,
name|objCounter
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|instances
operator|=
name|objCounter
expr_stmt|;
try|try
block|{
name|throwType
operator|=
name|ThrowAtCopy
expr_stmt|;
name|list
operator|.
name|prepend
argument_list|(
name|FlexibleThrowerSmall
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|instances
argument_list|,
name|objCounter
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|list
operator|.
name|first
argument_list|()
operator|.
name|value
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|instances
operator|=
name|objCounter
expr_stmt|;
try|try
block|{
name|throwType
operator|=
name|ThrowAtCopy
expr_stmt|;
name|list3
operator|=
name|list
expr_stmt|;
name|list3
operator|.
name|append
argument_list|(
name|FlexibleThrowerSmall
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|instances
argument_list|,
name|objCounter
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|list
operator|.
name|first
argument_list|()
operator|.
name|value
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list3
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|objCounter
argument_list|,
name|intancesCount
argument_list|)
expr_stmt|;
comment|// check that every object has been freed
block|}
end_function
begin_function
DECL|function|exceptionVector
name|void
name|tst_ExceptionSafety
operator|::
name|exceptionVector
parameter_list|()
block|{
specifier|const
name|int
name|intancesCount
init|=
name|objCounter
decl_stmt|;
block|{
name|int
name|instances
decl_stmt|;
name|QVector
argument_list|<
name|FlexibleThrowerSmall
argument_list|>
name|vector
decl_stmt|;
name|QVector
argument_list|<
name|FlexibleThrowerSmall
argument_list|>
name|vector2
decl_stmt|;
name|QVector
argument_list|<
name|FlexibleThrowerSmall
argument_list|>
name|vector3
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
name|vector
operator|.
name|append
argument_list|(
name|FlexibleThrowerSmall
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|instances
operator|=
name|objCounter
expr_stmt|;
try|try
block|{
name|throwType
operator|=
name|ThrowAtCopy
expr_stmt|;
name|vector
operator|.
name|append
argument_list|(
name|FlexibleThrowerSmall
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|instances
argument_list|,
name|objCounter
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|vector
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|instances
operator|=
name|objCounter
expr_stmt|;
try|try
block|{
name|throwType
operator|=
name|ThrowAtCopy
expr_stmt|;
name|vector
operator|.
name|prepend
argument_list|(
name|FlexibleThrowerSmall
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|instances
argument_list|,
name|objCounter
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|vector
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vector
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|instances
operator|=
name|objCounter
expr_stmt|;
try|try
block|{
name|throwType
operator|=
name|ThrowAtCopy
expr_stmt|;
name|vector
operator|.
name|insert
argument_list|(
literal|8
argument_list|,
name|FlexibleThrowerSmall
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|instances
argument_list|,
name|objCounter
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|vector
operator|.
name|at
argument_list|(
literal|7
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vector
operator|.
name|at
argument_list|(
literal|8
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vector
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|instances
operator|=
name|objCounter
expr_stmt|;
try|try
block|{
name|throwType
operator|=
name|ThrowAtCopy
expr_stmt|;
name|vector3
operator|=
name|vector
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|instances
argument_list|,
name|objCounter
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|vector
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vector
operator|.
name|at
argument_list|(
literal|7
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vector
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vector3
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vector3
operator|.
name|at
argument_list|(
literal|7
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vector3
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|instances
operator|=
name|objCounter
expr_stmt|;
try|try
block|{
name|throwType
operator|=
name|ThrowAtCopy
expr_stmt|;
name|vector3
operator|.
name|append
argument_list|(
name|FlexibleThrowerSmall
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|instances
argument_list|,
name|objCounter
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|vector
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vector
operator|.
name|at
argument_list|(
literal|7
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vector
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vector3
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vector3
operator|.
name|at
argument_list|(
literal|7
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
try|try
block|{
name|vector2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|vector2
operator|.
name|append
argument_list|(
name|FlexibleThrowerSmall
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|instances
operator|=
name|objCounter
expr_stmt|;
name|throwType
operator|=
name|ThrowAtCopy
expr_stmt|;
name|vector3
operator|=
name|vector
operator|+
name|vector2
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|instances
argument_list|,
name|objCounter
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|vector
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vector
operator|.
name|at
argument_list|(
literal|7
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vector
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// check that copy on write works atomar
name|vector2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|vector2
operator|.
name|append
argument_list|(
name|FlexibleThrowerSmall
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|vector3
operator|=
name|vector
operator|+
name|vector2
expr_stmt|;
name|instances
operator|=
name|objCounter
expr_stmt|;
try|try
block|{
name|throwType
operator|=
name|ThrowAtCreate
expr_stmt|;
name|vector3
index|[
literal|7
index|]
operator|=
name|FlexibleThrowerSmall
argument_list|(
literal|12
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|instances
argument_list|,
name|objCounter
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|vector
operator|.
name|at
argument_list|(
literal|7
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vector
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vector3
operator|.
name|at
argument_list|(
literal|7
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vector3
operator|.
name|size
argument_list|()
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|instances
operator|=
name|objCounter
expr_stmt|;
try|try
block|{
name|throwType
operator|=
name|ThrowAtCreate
expr_stmt|;
name|vector
operator|.
name|resize
argument_list|(
literal|15
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|instances
argument_list|,
name|objCounter
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|vector
operator|.
name|at
argument_list|(
literal|7
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vector
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|instances
operator|=
name|objCounter
expr_stmt|;
try|try
block|{
name|throwType
operator|=
name|ThrowAtCreate
expr_stmt|;
name|vector
operator|.
name|resize
argument_list|(
literal|15
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|instances
argument_list|,
name|objCounter
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|vector
operator|.
name|at
argument_list|(
literal|7
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vector
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|instances
operator|=
name|objCounter
expr_stmt|;
try|try
block|{
name|throwType
operator|=
name|ThrowLater
expr_stmt|;
name|vector
operator|.
name|fill
argument_list|(
name|FlexibleThrowerSmall
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|15
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|instances
argument_list|,
name|objCounter
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|vector
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vector
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|objCounter
argument_list|,
name|intancesCount
argument_list|)
expr_stmt|;
comment|// check that every object has been freed
block|}
end_function
begin_function
DECL|function|exceptionMap
name|void
name|tst_ExceptionSafety
operator|::
name|exceptionMap
parameter_list|()
block|{
specifier|const
name|int
name|intancesCount
init|=
name|objCounter
decl_stmt|;
block|{
name|int
name|instances
decl_stmt|;
name|MyMap
name|map
decl_stmt|;
name|MyMap
name|map2
decl_stmt|;
name|MyMap
name|map3
decl_stmt|;
name|throwType
operator|=
name|ThrowNot
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
name|map
index|[
name|FlexibleThrowerSmall
argument_list|(
name|i
argument_list|)
index|]
operator|=
name|FlexibleThrowerSmall
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return;
comment|// further test are deactivated until Map is fixed.
for|for
control|(
name|int
name|i
init|=
name|ThrowAtCopy
init|;
name|i
operator|<=
name|ThrowAtComparison
condition|;
name|i
operator|++
control|)
block|{
name|instances
operator|=
name|objCounter
expr_stmt|;
try|try
block|{
name|throwType
operator|=
operator|(
name|ThrowType
operator|)
name|i
expr_stmt|;
name|map
index|[
name|FlexibleThrowerSmall
argument_list|(
literal|10
argument_list|)
index|]
operator|=
name|FlexibleThrowerSmall
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|instances
argument_list|,
name|objCounter
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
index|[
name|FlexibleThrowerSmall
argument_list|(
literal|1
argument_list|)
index|]
argument_list|,
name|FlexibleThrowerSmall
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|map2
operator|=
name|map
expr_stmt|;
name|instances
operator|=
name|objCounter
expr_stmt|;
try|try
block|{
name|throwType
operator|=
name|ThrowLater
expr_stmt|;
name|map2
index|[
name|FlexibleThrowerSmall
argument_list|(
literal|10
argument_list|)
index|]
operator|=
name|FlexibleThrowerSmall
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|instances
argument_list|,
name|objCounter
argument_list|)
expr_stmt|;
block|}
comment|/* qDebug("%d %d", map.size(), map2.size() );         for( int i=0; i<map.size(); i++ )             qDebug( "Value at %d: %d",i, map.value(FlexibleThrowerSmall(i), FlexibleThrowerSmall()).value() );         QCOMPARE( map.value(FlexibleThrowerSmall(1), FlexibleThrowerSmall()), FlexibleThrowerSmall(1) );         qDebug( "Value at %d: %d",1, map[FlexibleThrowerSmall(1)].value() );         qDebug("%d %d", map.size(), map2.size() );         */
name|QCOMPARE
argument_list|(
name|map
index|[
name|FlexibleThrowerSmall
argument_list|(
literal|1
argument_list|)
index|]
argument_list|,
name|FlexibleThrowerSmall
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map2
index|[
name|FlexibleThrowerSmall
argument_list|(
literal|1
argument_list|)
index|]
argument_list|,
name|FlexibleThrowerSmall
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map2
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|objCounter
argument_list|,
name|intancesCount
argument_list|)
expr_stmt|;
comment|// check that every object has been freed
block|}
end_function
begin_function
DECL|function|exceptionHash
name|void
name|tst_ExceptionSafety
operator|::
name|exceptionHash
parameter_list|()
block|{
specifier|const
name|int
name|intancesCount
init|=
name|objCounter
decl_stmt|;
block|{
name|int
name|instances
decl_stmt|;
name|MyHash
name|hash
decl_stmt|;
name|MyHash
name|hash2
decl_stmt|;
name|MyHash
name|hash3
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
name|hash
index|[
name|FlexibleThrowerSmall
argument_list|(
name|i
argument_list|)
index|]
operator|=
name|FlexibleThrowerSmall
argument_list|(
name|i
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|ThrowAtCopy
init|;
name|i
operator|<=
name|ThrowAtComparison
condition|;
name|i
operator|++
control|)
block|{
name|instances
operator|=
name|objCounter
expr_stmt|;
try|try
block|{
name|throwType
operator|=
operator|(
name|ThrowType
operator|)
name|i
expr_stmt|;
name|hash
index|[
name|FlexibleThrowerSmall
argument_list|(
literal|10
argument_list|)
index|]
operator|=
name|FlexibleThrowerSmall
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|instances
argument_list|,
name|objCounter
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|hash
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
name|hash2
operator|=
name|hash
expr_stmt|;
name|instances
operator|=
name|objCounter
expr_stmt|;
try|try
block|{
name|throwType
operator|=
name|ThrowLater
expr_stmt|;
name|hash2
index|[
name|FlexibleThrowerSmall
argument_list|(
literal|10
argument_list|)
index|]
operator|=
name|FlexibleThrowerSmall
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|instances
argument_list|,
name|objCounter
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|hash
index|[
name|FlexibleThrowerSmall
argument_list|(
literal|1
argument_list|)
index|]
argument_list|,
name|FlexibleThrowerSmall
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash2
index|[
name|FlexibleThrowerSmall
argument_list|(
literal|1
argument_list|)
index|]
argument_list|,
name|FlexibleThrowerSmall
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash2
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|hash2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|instances
operator|=
name|objCounter
expr_stmt|;
try|try
block|{
name|throwType
operator|=
name|ThrowLater
expr_stmt|;
name|hash2
operator|.
name|reserve
argument_list|(
literal|30
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|instances
argument_list|,
name|objCounter
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|hash2
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|/*            try {            throwType = ThrowAtCopy;            hash.prepend( FlexibleThrowerSmall(10));            } catch (...) {            }            QCOMPARE( hash.at(0).value(), 0 );            QCOMPARE( hash.size(), 10 );             try {            throwType = ThrowAtCopy;            hash.insert( 8, FlexibleThrowerSmall(10));            } catch (...) {            }            QCOMPARE( hash.at(7).value(), 7 );            QCOMPARE( hash.at(8).value(), 8 );            QCOMPARE( hash.size(), 10 );             qDebug("val");            try {            throwType = ThrowAtCopy;            hash3 = hash;            } catch (...) {            }            QCOMPARE( hash.at(0).value(), 0 );            QCOMPARE( hash.at(7).value(), 7 );            QCOMPARE( hash.size(), 10 );            QCOMPARE( hash3.at(0).value(), 0 );            QCOMPARE( hash3.at(7).value(), 7 );            QCOMPARE( hash3.size(), 10 );             try {            throwType = ThrowAtCopy;            hash3.append( FlexibleThrowerSmall(11) );            } catch (...) {            }            QCOMPARE( hash.at(0).value(), 0 );            QCOMPARE( hash.at(7).value(), 7 );            QCOMPARE( hash.size(), 10 );            QCOMPARE( hash3.at(0).value(), 0 );            QCOMPARE( hash3.at(7).value(), 7 );            QCOMPARE( hash3.at(11).value(), 11 );             try {            hash2.clear();            hash2.append( FlexibleThrowerSmall(11));            throwType = ThrowAtCopy;            hash3 = hash+hash2;            } catch (...) {            }            QCOMPARE( hash.at(0).value(), 0 );            QCOMPARE( hash.at(7).value(), 7 );            QCOMPARE( hash.size(), 10 );          // check that copy on write works atomar         hash2.clear();         hash2.append( FlexibleThrowerSmall(11));         hash3 = hash+hash2;         try {         throwType = ThrowAtCopy;         hash3[7]=FlexibleThrowerSmall(12);         } catch (...) {         }         QCOMPARE( hash.at(7).value(), 7 );         QCOMPARE( hash.size(), 10 );         QCOMPARE( hash3.at(7).value(), 7 );         QCOMPARE( hash3.size(), 11 );         */
block|}
name|QCOMPARE
argument_list|(
name|objCounter
argument_list|,
name|intancesCount
argument_list|)
expr_stmt|;
comment|// check that every object has been freed
block|}
end_function
begin_comment
comment|// Disable these tests until the level of exception safety in event loops is clear
end_comment
begin_if
if|#
directive|if
literal|0
end_if
begin_comment
unit|enum {     ThrowEventId = QEvent::User + 42,     NoThrowEventId = QEvent::User + 43 };  class ThrowEvent : public QEvent { public:     ThrowEvent()         : QEvent(static_cast<QEvent::Type>(ThrowEventId))     {     } };  class NoThrowEvent : public QEvent { public:     NoThrowEvent()         : QEvent(static_cast<QEvent::Type>(NoThrowEventId))     {} };  struct IntEx : public std::exception {     IntEx(int aEx) : ex(aEx) {}     int ex; };  class TestObject : public QObject { public:     TestObject()         : throwEventCount(0), noThrowEventCount(0) {}      int throwEventCount;     int noThrowEventCount;  protected:     bool event(QEvent *event)     {         if (int(event->type()) == ThrowEventId) {              throw IntEx(++throwEventCount);         } else if (int(event->type()) == NoThrowEventId) {             ++noThrowEventCount;         }         return QObject::event(event);     } };  void tst_ExceptionSafety::exceptionEventLoop() {
comment|// send an event that throws
end_comment
begin_comment
unit|TestObject obj;     ThrowEvent throwEvent;     try {         qApp->sendEvent(&obj,&throwEvent);     } catch (IntEx code) {         QCOMPARE(code.ex, 1);     }     QCOMPARE(obj.throwEventCount, 1);
comment|// post an event that throws
end_comment
begin_comment
unit|qApp->postEvent(&obj, new ThrowEvent);      try {         qApp->processEvents();     } catch (IntEx code) {         QCOMPARE(code.ex, 2);     }     QCOMPARE(obj.throwEventCount, 2);
comment|// post a normal event, then a throwing event, then a normal event
end_comment
begin_comment
comment|// run this in valgrind to ensure that it doesn't leak.
end_comment
begin_comment
unit|qApp->postEvent(&obj, new NoThrowEvent);     qApp->postEvent(&obj, new ThrowEvent);     qApp->postEvent(&obj, new NoThrowEvent);      try {         qApp->processEvents();     } catch (IntEx code) {         QCOMPARE(code.ex, 3);     }
comment|// here, we should have received on non-throwing event and one throwing one
end_comment
begin_comment
unit|QCOMPARE(obj.throwEventCount, 3);     QCOMPARE(obj.noThrowEventCount, 1);
comment|// spin the event loop again
end_comment
begin_comment
unit|qApp->processEvents();
comment|// now, we should have received the second non-throwing event
end_comment
begin_comment
unit|QCOMPARE(obj.noThrowEventCount, 2); }  void tst_ExceptionSafety::exceptionSignalSlot() {     Emitter e;     ExceptionThrower thrower;     Receiver r1;     Receiver r2;
comment|// connect a signal to a normal object, a thrower and a normal object again
end_comment
begin_comment
unit|connect(&e, SIGNAL(testSignal()),&r1, SLOT(receiver()));     connect(&e, SIGNAL(testSignal()),&thrower, SLOT(thrower()));     connect(&e, SIGNAL(testSignal()),&r2, SLOT(receiver()));      int code = 0;     try {         e.emitTestSignal();     } catch (int c) {         code = c;     }
comment|// 5 is the magic number that's thrown by thrower
end_comment
begin_comment
unit|QCOMPARE(code, 5);
comment|// assumption: slots are called in the connection order
end_comment
begin_endif
unit|QCOMPARE(r1.received, 1);     QCOMPARE(r2.received, 0); }
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_ExceptionSafety
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_exceptionsafety.moc"
end_include
end_unit
