begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/QtCore>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_define
DECL|macro|BASECLASS_NOT_ABSTRACT
define|#
directive|define
name|BASECLASS_NOT_ABSTRACT
end_define
begin_include
include|#
directive|include
file|"baseclass.h"
end_include
begin_include
include|#
directive|include
file|"derivedclass.h"
end_include
begin_macro
name|QT_USE_NAMESPACE
end_macro
begin_class
DECL|class|tst_Compiler
class|class
name|tst_Compiler
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|template_methods
parameter_list|()
function_decl|;
name|void
name|template_constructors
parameter_list|()
function_decl|;
name|void
name|template_subclasses
parameter_list|()
function_decl|;
name|void
name|methodSpecialization
parameter_list|()
function_decl|;
name|void
name|constructorSpecialization
parameter_list|()
function_decl|;
name|void
name|staticTemplateMethods
parameter_list|()
function_decl|;
name|void
name|staticTemplateMethodSpecialization
parameter_list|()
function_decl|;
name|void
name|detectDataStream
parameter_list|()
function_decl|;
name|void
name|detectEnums
parameter_list|()
function_decl|;
name|void
name|overrideCFunction
parameter_list|()
function_decl|;
name|void
name|stdSortQList
parameter_list|()
function_decl|;
name|void
name|stdSortQVector
parameter_list|()
function_decl|;
name|void
name|templateCallOrder
parameter_list|()
function_decl|;
name|void
name|virtualFunctionNoLongerPureVirtual
parameter_list|()
function_decl|;
name|void
name|charSignedness
parameter_list|()
specifier|const
function_decl|;
name|void
name|privateStaticTemplateMember
parameter_list|()
specifier|const
function_decl|;
name|void
name|staticConstUnionWithInitializerList
parameter_list|()
specifier|const
function_decl|;
block|}
class|;
end_class
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_HPACC
argument_list|)
end_if
begin_define
DECL|macro|DONT_TEST_TEMPLATE_CONSTRUCTORS
define|#
directive|define
name|DONT_TEST_TEMPLATE_CONSTRUCTORS
end_define
begin_define
DECL|macro|DONT_TEST_CONSTRUCTOR_SPECIALIZATION
define|#
directive|define
name|DONT_TEST_CONSTRUCTOR_SPECIALIZATION
end_define
begin_define
DECL|macro|DONT_TEST_DATASTREAM_DETECTION
define|#
directive|define
name|DONT_TEST_DATASTREAM_DETECTION
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_SUN
argument_list|)
end_if
begin_define
DECL|macro|DONT_TEST_STL_SORTING
define|#
directive|define
name|DONT_TEST_STL_SORTING
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|TemplateMethodClass
class|class
name|TemplateMethodClass
block|{
public|public:
template|template
parameter_list|<
name|class
name|T
parameter_list|>
DECL|function|foo
name|T
name|foo
parameter_list|()
block|{
return|return
literal|42
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|template_methods
name|void
name|tst_Compiler
operator|::
name|template_methods
parameter_list|()
block|{
name|TemplateMethodClass
name|t
decl_stmt|;
name|QCOMPARE
argument_list|(
name|t
operator|.
name|foo
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|t
operator|.
name|foo
argument_list|<
name|long
argument_list|>
argument_list|()
argument_list|,
literal|42l
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|t
operator|.
name|foo
argument_list|<
name|double
argument_list|>
argument_list|()
argument_list|,
literal|42.0
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|DONT_TEST_TEMPLATE_CONSTRUCTORS
end_ifndef
begin_class
DECL|class|TemplateConstructorClass
class|class
name|TemplateConstructorClass
block|{
public|public:
template|template
parameter_list|<
name|class
name|T
parameter_list|>
DECL|function|TemplateConstructorClass
name|TemplateConstructorClass
parameter_list|(
specifier|const
name|T
modifier|&
name|t
parameter_list|)
block|{
name|i
operator|=
name|int
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
DECL|member|i
name|int
name|i
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|template_constructors
name|void
name|tst_Compiler
operator|::
name|template_constructors
parameter_list|()
block|{
name|TemplateConstructorClass
name|t1
argument_list|(
literal|42
argument_list|)
decl_stmt|;
name|TemplateConstructorClass
name|t2
argument_list|(
literal|42l
argument_list|)
decl_stmt|;
name|TemplateConstructorClass
name|t3
argument_list|(
literal|42.0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|t1
operator|.
name|i
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|t2
operator|.
name|i
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|t3
operator|.
name|i
argument_list|,
literal|42
argument_list|)
expr_stmt|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_function
DECL|function|template_constructors
name|void
name|tst_Compiler
operator|::
name|template_constructors
parameter_list|()
block|{
name|QSKIP
argument_list|(
literal|"Compiler doesn't do template constructors"
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_struct
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
struct|struct
DECL|struct|OuterClass
name|OuterClass
block|{
template|template
parameter_list|<
name|typename
name|U
parameter_list|>
struct|struct
DECL|struct|InnerClass
name|InnerClass
block|{
DECL|function|convert
name|U
name|convert
parameter_list|(
specifier|const
name|T
modifier|&
name|t
parameter_list|)
block|{
return|return
cast|static_cast
argument_list|<
name|U
argument_list|>
argument_list|(
name|t
argument_list|)
return|;
block|}
block|}
struct|;
block|}
struct|;
end_struct
begin_function
DECL|function|template_subclasses
name|void
name|tst_Compiler
operator|::
name|template_subclasses
parameter_list|()
block|{
name|OuterClass
argument_list|<
name|char
argument_list|>
operator|::
name|InnerClass
argument_list|<
name|int
argument_list|>
name|c1
decl_stmt|;
name|QCOMPARE
argument_list|(
name|c1
operator|.
name|convert
argument_list|(
literal|'a'
argument_list|)
argument_list|,
name|int
argument_list|(
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
name|OuterClass
argument_list|<
name|QRect
argument_list|>
operator|::
name|InnerClass
argument_list|<
name|QRectF
argument_list|>
name|c2
decl_stmt|;
name|QCOMPARE
argument_list|(
name|c2
operator|.
name|convert
argument_list|(
name|QRect
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|,
name|QRectF
argument_list|(
name|QRect
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|TemplateMethodClass2
class|class
name|TemplateMethodClass2
block|{
public|public:
template|template
parameter_list|<
name|class
name|T
parameter_list|>
DECL|function|foo
name|T
name|foo
parameter_list|()
block|{
return|return
literal|42
return|;
block|}
block|}
class|;
end_class
begin_function
template|template
parameter_list|<>
DECL|function|foo
name|int
name|TemplateMethodClass2
operator|::
name|foo
argument_list|<
name|int
argument_list|>
parameter_list|()
block|{
return|return
literal|43
return|;
block|}
end_function
begin_function
DECL|function|methodSpecialization
name|void
name|tst_Compiler
operator|::
name|methodSpecialization
parameter_list|()
block|{
name|TemplateMethodClass2
name|t
decl_stmt|;
name|QCOMPARE
argument_list|(
name|t
operator|.
name|foo
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|,
literal|43
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|t
operator|.
name|foo
argument_list|<
name|long
argument_list|>
argument_list|()
argument_list|,
literal|42l
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|t
operator|.
name|foo
argument_list|<
name|double
argument_list|>
argument_list|()
argument_list|,
literal|42.0
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|DONT_TEST_CONSTRUCTOR_SPECIALIZATION
end_ifndef
begin_class
DECL|class|TemplateConstructorClass2
class|class
name|TemplateConstructorClass2
block|{
public|public:
template|template
parameter_list|<
name|class
name|T
parameter_list|>
DECL|function|TemplateConstructorClass2
name|TemplateConstructorClass2
parameter_list|(
specifier|const
name|T
modifier|&
name|t
parameter_list|)
block|{
name|i
operator|=
name|int
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
DECL|member|i
name|int
name|i
decl_stmt|;
block|}
class|;
end_class
begin_constructor
template|template
parameter_list|<>
DECL|function|TemplateConstructorClass2
name|TemplateConstructorClass2
operator|::
name|TemplateConstructorClass2
parameter_list|(
specifier|const
name|int
modifier|&
name|t
parameter_list|)
block|{
name|i
operator|=
name|t
operator|+
literal|1
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|constructorSpecialization
name|void
name|tst_Compiler
operator|::
name|constructorSpecialization
parameter_list|()
block|{
name|TemplateConstructorClass2
name|t1
argument_list|(
literal|42
argument_list|)
decl_stmt|;
name|TemplateConstructorClass2
name|t2
argument_list|(
literal|42l
argument_list|)
decl_stmt|;
name|TemplateConstructorClass2
name|t3
argument_list|(
literal|42.0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|t1
operator|.
name|i
argument_list|,
literal|43
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|t2
operator|.
name|i
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|t3
operator|.
name|i
argument_list|,
literal|42
argument_list|)
expr_stmt|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_function
DECL|function|constructorSpecialization
name|void
name|tst_Compiler
operator|::
name|constructorSpecialization
parameter_list|()
block|{
name|QSKIP
argument_list|(
literal|"Compiler doesn't do constructor specialization"
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|StaticTemplateClass
class|class
name|StaticTemplateClass
block|{
public|public:
template|template
parameter_list|<
name|class
name|T
parameter_list|>
DECL|function|foo
specifier|static
name|T
name|foo
parameter_list|()
block|{
return|return
literal|42
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|staticTemplateMethods
name|void
name|tst_Compiler
operator|::
name|staticTemplateMethods
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|StaticTemplateClass
operator|::
name|foo
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|StaticTemplateClass
operator|::
name|foo
argument_list|<
name|uint
argument_list|>
argument_list|()
argument_list|,
literal|42u
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|StaticTemplateClass2
class|class
name|StaticTemplateClass2
block|{
public|public:
template|template
parameter_list|<
name|class
name|T
parameter_list|>
DECL|function|foo
specifier|static
name|T
name|foo
parameter_list|()
block|{
return|return
literal|42
return|;
block|}
block|}
class|;
end_class
begin_function
template|template
parameter_list|<>
DECL|function|foo
name|double
name|StaticTemplateClass2
operator|::
name|foo
argument_list|<
name|double
argument_list|>
parameter_list|()
block|{
return|return
literal|18.5
return|;
block|}
end_function
begin_function
DECL|function|staticTemplateMethodSpecialization
name|void
name|tst_Compiler
operator|::
name|staticTemplateMethodSpecialization
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|StaticTemplateClass2
operator|::
name|foo
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|StaticTemplateClass2
operator|::
name|foo
argument_list|<
name|uint
argument_list|>
argument_list|()
argument_list|,
literal|42u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|StaticTemplateClass2
operator|::
name|foo
argument_list|<
name|double
argument_list|>
argument_list|()
argument_list|,
literal|18.5
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|DONT_TEST_DATASTREAM_DETECTION
end_ifndef
begin_comment
comment|/******* DataStream tester *********/
end_comment
begin_namespace
DECL|namespace|QtTestInternal
namespace|namespace
name|QtTestInternal
block|{
DECL|struct|EmptyStruct
struct|struct
name|EmptyStruct
block|{
block|}
struct|;
DECL|struct|LowPreferenceStruct
struct|struct
name|LowPreferenceStruct
block|{
name|LowPreferenceStruct
parameter_list|(
modifier|...
parameter_list|)
constructor_decl|;
block|}
struct|;
name|EmptyStruct
name|operator
name|<<
parameter_list|(
name|QDataStream
modifier|&
parameter_list|,
specifier|const
name|LowPreferenceStruct
modifier|&
parameter_list|)
function_decl|;
name|EmptyStruct
name|operator
name|>>
parameter_list|(
name|QDataStream
modifier|&
parameter_list|,
specifier|const
name|LowPreferenceStruct
modifier|&
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
struct|struct
DECL|struct|DataStreamChecker
name|DataStreamChecker
block|{
specifier|static
name|EmptyStruct
name|hasStreamHelper
parameter_list|(
specifier|const
name|EmptyStruct
modifier|&
parameter_list|)
function_decl|;
specifier|static
name|QDataStream
name|hasStreamHelper
parameter_list|(
specifier|const
name|QDataStream
modifier|&
parameter_list|)
function_decl|;
specifier|static
name|QDataStream
modifier|&
name|dsDummy
parameter_list|()
function_decl|;
specifier|static
name|T
modifier|&
name|dummy
parameter_list|()
function_decl|;
ifdef|#
directive|ifdef
name|BROKEN_COMPILER
DECL|member|HasDataStream
specifier|static
specifier|const
name|bool
name|HasDataStream
init|=
sizeof|sizeof
argument_list|(
name|hasStreamHelper
argument_list|(
name|dsDummy
argument_list|()
operator|<<
name|dummy
argument_list|()
argument_list|)
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|QDataStream
argument_list|)
operator|&&
sizeof|sizeof
argument_list|(
name|hasStreamHelper
argument_list|(
name|dsDummy
argument_list|()
operator|>>
name|dummy
argument_list|()
argument_list|)
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|QDataStream
argument_list|)
decl_stmt|;
else|#
directive|else
enum|enum
block|{
DECL|enumerator|HasOutDataStream
name|HasOutDataStream
init|=
sizeof|sizeof
argument_list|(
name|hasStreamHelper
argument_list|(
name|dsDummy
argument_list|()
operator|>>
name|dummy
argument_list|()
argument_list|)
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|QDataStream
argument_list|)
block|,
DECL|enumerator|HasInDataStream
name|HasInDataStream
init|=
sizeof|sizeof
argument_list|(
name|hasStreamHelper
argument_list|(
name|dsDummy
argument_list|()
operator|<<
name|dummy
argument_list|()
argument_list|)
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|QDataStream
argument_list|)
block|,
DECL|enumerator|HasDataStream
name|HasDataStream
init|=
name|HasOutDataStream
operator|&
name|HasInDataStream
block|}
enum|;
endif|#
directive|endif
block|}
struct|;
template|template
parameter_list|<
name|bool
parameter_list|>
struct|struct
DECL|struct|DataStreamOpHelper
name|DataStreamOpHelper
block|{
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
struct|struct
DECL|struct|Getter
name|Getter
block|{
DECL|function|saveOp
specifier|static
name|QMetaType
operator|::
name|SaveOperator
name|saveOp
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
struct|;
block|}
struct|;
template|template
parameter_list|<>
struct|struct
DECL|struct|DataStreamOpHelper
name|DataStreamOpHelper
argument_list|<
literal|true
argument_list|>
block|{
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
struct|struct
DECL|struct|Getter
name|Getter
block|{
DECL|function|saveOp
specifier|static
name|QMetaType
operator|::
name|SaveOperator
name|saveOp
parameter_list|()
block|{
typedef|typedef
name|void
function_decl|(
modifier|*
name|SavePtr
function_decl|)
parameter_list|(
name|QDataStream
modifier|&
parameter_list|,
specifier|const
name|T
modifier|*
parameter_list|)
function_decl|;
name|SavePtr
name|op
init|=
operator|::
name|qMetaTypeSaveHelper
argument_list|<
name|T
argument_list|>
decl_stmt|;
return|return
cast|reinterpret_cast
argument_list|<
name|QMetaType
operator|::
name|SaveOperator
argument_list|>
argument_list|(
name|op
argument_list|)
return|;
block|}
block|}
struct|;
block|}
struct|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|getSaveOperator
specifier|inline
name|QMetaType
operator|::
name|SaveOperator
name|getSaveOperator
parameter_list|(
name|T
modifier|*
init|=
literal|0
parameter_list|)
block|{
typedef|typedef
typename|typename
name|DataStreamOpHelper
argument_list|<
name|DataStreamChecker
argument_list|<
name|T
argument_list|>
operator|::
name|HasDataStream
argument_list|>
operator|::
specifier|template
name|Getter
argument_list|<
name|T
argument_list|>
name|GetterHelper
typedef|;
return|return
name|GetterHelper
operator|::
name|saveOp
argument_list|()
return|;
block|}
block|}
end_namespace
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_struct
DECL|struct|MyString
struct|struct
name|MyString
super|:
specifier|public
name|QString
block|{
block|}
struct|;
end_struct
begin_struct
DECL|struct|Qxxx
struct|struct
name|Qxxx
block|{
block|}
struct|;
end_struct
begin_function
DECL|function|detectDataStream
name|void
name|tst_Compiler
operator|::
name|detectDataStream
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QtTestInternal
operator|::
name|DataStreamChecker
argument_list|<
name|int
argument_list|>
operator|::
name|HasDataStream
operator|==
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QtTestInternal
operator|::
name|DataStreamChecker
argument_list|<
name|uint
argument_list|>
operator|::
name|HasDataStream
operator|==
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QtTestInternal
operator|::
name|DataStreamChecker
argument_list|<
name|char
operator|*
argument_list|>
operator|::
name|HasDataStream
operator|==
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QtTestInternal
operator|::
name|DataStreamChecker
argument_list|<
specifier|const
name|int
argument_list|>
operator|::
name|HasInDataStream
operator|==
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QtTestInternal
operator|::
name|DataStreamChecker
argument_list|<
specifier|const
name|int
argument_list|>
operator|::
name|HasOutDataStream
operator|==
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QtTestInternal
operator|::
name|DataStreamChecker
argument_list|<
specifier|const
name|int
argument_list|>
operator|::
name|HasDataStream
operator|==
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QtTestInternal
operator|::
name|DataStreamChecker
argument_list|<
name|double
argument_list|>
operator|::
name|HasDataStream
operator|==
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QtTestInternal
operator|::
name|DataStreamChecker
argument_list|<
name|QString
argument_list|>
operator|::
name|HasDataStream
operator|==
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QtTestInternal
operator|::
name|DataStreamChecker
argument_list|<
name|MyString
argument_list|>
operator|::
name|HasDataStream
operator|==
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QtTestInternal
operator|::
name|DataStreamChecker
argument_list|<
name|Qxxx
argument_list|>
operator|::
name|HasDataStream
operator|==
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QtTestInternal
operator|::
name|getSaveOperator
argument_list|<
name|int
argument_list|>
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QtTestInternal
operator|::
name|getSaveOperator
argument_list|<
name|uint
argument_list|>
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QtTestInternal
operator|::
name|getSaveOperator
argument_list|<
name|char
operator|*
argument_list|>
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QtTestInternal
operator|::
name|getSaveOperator
argument_list|<
name|double
argument_list|>
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QtTestInternal
operator|::
name|getSaveOperator
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QtTestInternal
operator|::
name|getSaveOperator
argument_list|<
name|MyString
argument_list|>
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QtTestInternal
operator|::
name|getSaveOperator
argument_list|<
name|Qxxx
argument_list|>
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_function
DECL|function|detectDataStream
name|void
name|tst_Compiler
operator|::
name|detectDataStream
parameter_list|()
block|{
name|QSKIP
argument_list|(
literal|"Compiler doesn't evaluate templates correctly"
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_enum
DECL|enum|Enum1
DECL|enumerator|Foo
DECL|enumerator|Bar
enum|enum
name|Enum1
block|{
name|Foo
init|=
literal|0
block|,
name|Bar
init|=
literal|1
block|}
enum|;
end_enum
begin_enum
DECL|enum|Enum2
enum|enum
name|Enum2
block|{}
enum|;
end_enum
begin_enum
DECL|enum|Enum3
DECL|enumerator|Something
enum|enum
name|Enum3
block|{
name|Something
init|=
literal|1
block|}
enum|;
end_enum
begin_function_decl
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|char
name|QTypeInfoEnumHelper
parameter_list|(
name|T
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
modifier|*
name|QTypeInfoEnumHelper
parameter_list|(
modifier|...
parameter_list|)
function_decl|;
end_function_decl
begin_struct
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
struct|struct
DECL|struct|QTestTypeInfo
name|QTestTypeInfo
block|{
DECL|enumerator|IsEnum
enum|enum
block|{
name|IsEnum
init|=
sizeof|sizeof
argument_list|(
name|QTypeInfoEnumHelper
argument_list|<
name|T
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|==
expr|sizeof
operator|(
name|void
operator|*
operator|)
block|}
enum|;
block|}
struct|;
end_struct
begin_function
DECL|function|detectEnums
name|void
name|tst_Compiler
operator|::
name|detectEnums
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QTestTypeInfo
argument_list|<
name|Enum1
argument_list|>
operator|::
name|IsEnum
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTestTypeInfo
argument_list|<
name|Enum2
argument_list|>
operator|::
name|IsEnum
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTestTypeInfo
argument_list|<
name|Enum3
argument_list|>
operator|::
name|IsEnum
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestTypeInfo
argument_list|<
name|int
argument_list|>
operator|::
name|IsEnum
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestTypeInfo
argument_list|<
name|char
argument_list|>
operator|::
name|IsEnum
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestTypeInfo
argument_list|<
name|uint
argument_list|>
operator|::
name|IsEnum
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestTypeInfo
argument_list|<
name|short
argument_list|>
operator|::
name|IsEnum
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestTypeInfo
argument_list|<
name|ushort
argument_list|>
operator|::
name|IsEnum
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestTypeInfo
argument_list|<
name|void
operator|*
argument_list|>
operator|::
name|IsEnum
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestTypeInfo
argument_list|<
name|QString
argument_list|>
operator|::
name|IsEnum
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTestTypeInfo
argument_list|<
name|Qt
operator|::
name|Key
argument_list|>
operator|::
name|IsEnum
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTestTypeInfo
argument_list|<
name|Qt
operator|::
name|ToolBarArea
argument_list|>
operator|::
name|IsEnum
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestTypeInfo
argument_list|<
name|Qt
operator|::
name|ToolBarAreas
argument_list|>
operator|::
name|IsEnum
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTestTypeInfo
argument_list|<
name|Qt
operator|::
name|MatchFlag
argument_list|>
operator|::
name|IsEnum
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestTypeInfo
argument_list|<
name|Qt
operator|::
name|MatchFlags
argument_list|>
operator|::
name|IsEnum
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|indicator
specifier|static
name|int
name|indicator
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
comment|// this is a silly C function
end_comment
begin_extern
extern|extern
literal|"C"
block|{
DECL|function|someCFunc
name|void
name|someCFunc
parameter_list|(
name|void
modifier|*
parameter_list|)
block|{
name|indicator
operator|=
literal|42
expr_stmt|;
block|}
block|}
end_extern
begin_comment
comment|// this is the catch-template that will be called if the C function doesn't exist
end_comment
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|someCFunc
name|void
name|someCFunc
parameter_list|(
name|T
modifier|*
parameter_list|)
block|{
name|indicator
operator|=
literal|10
expr_stmt|;
block|}
end_function
begin_function
DECL|function|overrideCFunction
name|void
name|tst_Compiler
operator|::
name|overrideCFunction
parameter_list|()
block|{
name|someCFunc
argument_list|(
operator|(
name|void
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|indicator
argument_list|,
literal|42
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|DONT_TEST_STL_SORTING
end_ifndef
begin_function
DECL|function|stdSortQList
name|void
name|tst_Compiler
operator|::
name|stdSortQList
parameter_list|()
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|4
operator|<<
literal|2
expr_stmt|;
name|std
operator|::
name|sort
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|value
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|value
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QString
argument_list|>
name|slist
decl_stmt|;
name|slist
operator|<<
literal|"b"
operator|<<
literal|"a"
expr_stmt|;
name|std
operator|::
name|sort
argument_list|(
name|slist
operator|.
name|begin
argument_list|()
argument_list|,
name|slist
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slist
operator|.
name|value
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slist
operator|.
name|value
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stdSortQVector
name|void
name|tst_Compiler
operator|::
name|stdSortQVector
parameter_list|()
block|{
name|QVector
argument_list|<
name|int
argument_list|>
name|vector
decl_stmt|;
name|vector
operator|<<
literal|4
operator|<<
literal|2
expr_stmt|;
name|std
operator|::
name|sort
argument_list|(
name|vector
operator|.
name|begin
argument_list|()
argument_list|,
name|vector
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vector
operator|.
name|value
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vector
operator|.
name|value
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QString
argument_list|>
name|strvec
decl_stmt|;
name|strvec
operator|<<
literal|"b"
operator|<<
literal|"a"
expr_stmt|;
name|std
operator|::
name|sort
argument_list|(
name|strvec
operator|.
name|begin
argument_list|()
argument_list|,
name|strvec
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|strvec
operator|.
name|value
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|strvec
operator|.
name|value
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_function
DECL|function|stdSortQList
name|void
name|tst_Compiler
operator|::
name|stdSortQList
parameter_list|()
block|{
name|QSKIP
argument_list|(
literal|"Compiler's STL broken"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stdSortQVector
name|void
name|tst_Compiler
operator|::
name|stdSortQVector
parameter_list|()
block|{
name|QSKIP
argument_list|(
literal|"Compiler's STL broken"
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// the C func will set it to 1, the template to 2
end_comment
begin_decl_stmt
DECL|variable|whatWasCalled
specifier|static
name|int
name|whatWasCalled
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|callOrderFunc
name|void
name|callOrderFunc
parameter_list|(
name|void
modifier|*
parameter_list|)
block|{
name|whatWasCalled
operator|=
literal|1
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|callOrderFunc
name|void
name|callOrderFunc
parameter_list|(
name|T
modifier|*
parameter_list|)
block|{
name|whatWasCalled
operator|=
literal|2
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|callOrderNoCFunc
name|void
name|callOrderNoCFunc
parameter_list|(
name|T
modifier|*
parameter_list|)
block|{
name|whatWasCalled
operator|=
literal|3
expr_stmt|;
block|}
end_function
begin_comment
comment|/*    This test will check what will get precendence - the C function    or the template.     It also makes sure this template "override" will compile on all systems    and not result in ambiguities. */
end_comment
begin_function
DECL|function|templateCallOrder
name|void
name|tst_Compiler
operator|::
name|templateCallOrder
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|whatWasCalled
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// call it with a void *
name|void
modifier|*
name|f
init|=
literal|0
decl_stmt|;
name|callOrderFunc
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|whatWasCalled
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|whatWasCalled
operator|=
literal|0
expr_stmt|;
name|char
modifier|*
name|c
init|=
literal|0
decl_stmt|;
comment|/* call it with a char * - AMBIGOUS, fails on several compilers     callOrderFunc(c);     QCOMPARE(whatWasCalled, 1);     whatWasCalled = 0;     */
comment|// now try the case when there is no C function
name|callOrderNoCFunc
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|whatWasCalled
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|whatWasCalled
operator|=
literal|0
expr_stmt|;
name|callOrderNoCFunc
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|whatWasCalled
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|whatWasCalled
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|// test to see if removing =0 from a pure virtual function is BC
end_comment
begin_function
DECL|function|virtualFunctionNoLongerPureVirtual
name|void
name|tst_Compiler
operator|::
name|virtualFunctionNoLongerPureVirtual
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|BASECLASS_NOT_ABSTRACT
comment|// has a single virtual function, not pure virtual, can call it
name|BaseClass
name|baseClass
decl_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtDebugMsg
argument_list|,
literal|"BaseClass::wasAPureVirtualFunction()"
argument_list|)
expr_stmt|;
name|baseClass
operator|.
name|wasAPureVirtualFunction
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// DerivedClass inherits from BaseClass, and function is declared
comment|// pure virtual, make sure we can still call it
name|DerivedClass
name|derivedClass
decl_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtDebugMsg
argument_list|,
literal|"DerivedClass::wasAPureVirtualFunction()"
argument_list|)
expr_stmt|;
name|derivedClass
operator|.
name|wasAPureVirtualFunction
argument_list|()
expr_stmt|;
block|}
end_function
begin_function_decl
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
specifier|const
name|char
modifier|*
name|resolveCharSignedness
parameter_list|()
function_decl|;
end_function_decl
begin_function
template|template
parameter_list|<>
DECL|function|resolveCharSignedness
specifier|const
name|char
modifier|*
name|resolveCharSignedness
argument_list|<
name|char
argument_list|>
parameter_list|()
block|{
return|return
literal|"char"
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|resolveCharSignedness
specifier|const
name|char
modifier|*
name|resolveCharSignedness
argument_list|<
name|unsigned
name|char
argument_list|>
parameter_list|()
block|{
return|return
literal|"unsigned char"
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|resolveCharSignedness
specifier|const
name|char
modifier|*
name|resolveCharSignedness
argument_list|<
name|signed
name|char
argument_list|>
parameter_list|()
block|{
return|return
literal|"signed char"
return|;
block|}
end_function
begin_function
DECL|function|charSignedness
name|void
name|tst_Compiler
operator|::
name|charSignedness
parameter_list|()
specifier|const
block|{
name|QCOMPARE
argument_list|(
literal|"char"
argument_list|,
name|resolveCharSignedness
argument_list|<
name|char
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|"unsigned char"
argument_list|,
argument|resolveCharSignedness<unsigned char>()
argument_list|)
empty_stmt|;
name|QCOMPARE
argument_list|(
literal|"signed char"
argument_list|,
argument|resolveCharSignedness<signed char>()
argument_list|)
empty_stmt|;
block|}
end_function
begin_class
DECL|class|PrivateStaticTemplateMember
class|class
name|PrivateStaticTemplateMember
block|{
public|public:
DECL|function|regularMember
name|long
name|regularMember
parameter_list|()
block|{
return|return
name|helper
argument_list|<
name|long
argument_list|,
name|int
argument_list|>
argument_list|(
literal|3
argument_list|)
return|;
block|}
private|private:
template|template
parameter_list|<
name|typename
name|A
parameter_list|,
name|typename
name|B
parameter_list|>
DECL|function|helper
specifier|static
name|A
name|helper
parameter_list|(
specifier|const
name|B
name|b
parameter_list|)
block|{
return|return
name|A
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|privateStaticTemplateMember
name|void
name|tst_Compiler
operator|::
name|privateStaticTemplateMember
parameter_list|()
specifier|const
block|{
name|PrivateStaticTemplateMember
name|v
decl_stmt|;
name|QCOMPARE
argument_list|(
name|long
argument_list|(
literal|3
argument_list|)
argument_list|,
name|v
operator|.
name|regularMember
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_CC_MIPS
argument_list|)
end_if
begin_comment
comment|// make sure we can use a static initializer with a union and then use
end_comment
begin_comment
comment|// the second member of the union
end_comment
begin_union
DECL|member|c
DECL|member|d
DECL|variable|qt_be_inf_bytes
specifier|static
specifier|const
union|union
block|{
name|unsigned
name|char
name|c
index|[
literal|8
index|]
decl_stmt|;
name|double
name|d
decl_stmt|;
block|}
name|qt_be_inf_bytes
init|=
block|{
block|{
literal|0x7f
block|,
literal|0xf0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
union|;
end_union
begin_union
DECL|member|c
DECL|member|d
DECL|variable|qt_le_inf_bytes
specifier|static
specifier|const
union|union
block|{
name|unsigned
name|char
name|c
index|[
literal|8
index|]
decl_stmt|;
name|double
name|d
decl_stmt|;
block|}
name|qt_le_inf_bytes
init|=
block|{
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0xf0
block|,
literal|0x7f
block|}
block|}
union|;
end_union
begin_union
DECL|member|c
DECL|member|d
DECL|variable|qt_armfpa_inf_bytes
specifier|static
specifier|const
union|union
block|{
name|unsigned
name|char
name|c
index|[
literal|8
index|]
decl_stmt|;
name|double
name|d
decl_stmt|;
block|}
name|qt_armfpa_inf_bytes
init|=
block|{
block|{
literal|0
block|,
literal|0
block|,
literal|0xf0
block|,
literal|0x7f
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
union|;
end_union
begin_function
DECL|function|qt_inf
specifier|static
specifier|inline
name|double
name|qt_inf
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_ARMFPA
return|return
name|qt_armfpa_inf_bytes
operator|.
name|d
return|;
else|#
directive|else
return|return
operator|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|?
name|qt_be_inf_bytes
operator|.
name|d
else|:
name|qt_le_inf_bytes
operator|.
name|d
operator|)
return|;
endif|#
directive|endif
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_decl_stmt
DECL|variable|qt_be_inf_bytes
specifier|static
specifier|const
name|unsigned
name|char
name|qt_be_inf_bytes
index|[]
init|=
block|{
literal|0x7f
block|,
literal|0xf0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_le_inf_bytes
specifier|static
specifier|const
name|unsigned
name|char
name|qt_le_inf_bytes
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0xf0
block|,
literal|0x7f
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_armfpa_inf_bytes
specifier|static
specifier|const
name|unsigned
name|char
name|qt_armfpa_inf_bytes
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0xf0
block|,
literal|0x7f
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qt_inf
specifier|static
specifier|inline
name|double
name|qt_inf
parameter_list|()
block|{
specifier|const
name|uchar
modifier|*
name|bytes
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_ARMFPA
name|bytes
operator|=
name|qt_armfpa_inf_bytes
expr_stmt|;
else|#
directive|else
name|bytes
operator|=
operator|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|?
name|qt_be_inf_bytes
else|:
name|qt_le_inf_bytes
operator|)
expr_stmt|;
endif|#
directive|endif
union|union
block|{
name|uchar
name|c
index|[
literal|8
index|]
decl_stmt|;
name|double
name|d
decl_stmt|;
block|}
name|returnValue
union|;
name|memcpy
argument_list|(
name|returnValue
operator|.
name|c
argument_list|,
name|bytes
argument_list|,
sizeof|sizeof
argument_list|(
name|returnValue
operator|.
name|c
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|returnValue
operator|.
name|d
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|staticConstUnionWithInitializerList
name|void
name|tst_Compiler
operator|::
name|staticConstUnionWithInitializerList
parameter_list|()
specifier|const
block|{
name|double
name|d
init|=
name|qt_inf
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|qIsInf
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_Compiler
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_compiler.moc"
end_include
end_unit
