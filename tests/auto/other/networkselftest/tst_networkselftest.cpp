begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/QtNetwork>
end_include
begin_include
include|#
directive|include
file|<time.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
end_ifndef
begin_include
include|#
directive|include
file|<QtNetwork/qnetworkconfigmanager.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qnetworkconfiguration.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qnetworksession.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"../../network-settings.h"
end_include
begin_class
DECL|class|tst_NetworkSelfTest
class|class
name|tst_NetworkSelfTest
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
DECL|member|cachedIpAddress
name|QHostAddress
name|cachedIpAddress
decl_stmt|;
public|public:
name|tst_NetworkSelfTest
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_NetworkSelfTest
parameter_list|()
destructor_decl|;
name|QHostAddress
name|serverIpAddress
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|hostTest
parameter_list|()
function_decl|;
name|void
name|dnsResolution_data
parameter_list|()
function_decl|;
name|void
name|dnsResolution
parameter_list|()
function_decl|;
name|void
name|serverReachability
parameter_list|()
function_decl|;
name|void
name|remotePortsOpen_data
parameter_list|()
function_decl|;
name|void
name|remotePortsOpen
parameter_list|()
function_decl|;
comment|// specific protocol tests
name|void
name|ftpServer
parameter_list|()
function_decl|;
name|void
name|ftpProxyServer
parameter_list|()
function_decl|;
name|void
name|imapServer
parameter_list|()
function_decl|;
name|void
name|httpServer
parameter_list|()
function_decl|;
name|void
name|httpServerFiles_data
parameter_list|()
function_decl|;
name|void
name|httpServerFiles
parameter_list|()
function_decl|;
name|void
name|httpServerCGI_data
parameter_list|()
function_decl|;
name|void
name|httpServerCGI
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_SSL
name|void
name|httpsServer
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|httpProxy
parameter_list|()
function_decl|;
name|void
name|httpProxyBasicAuth
parameter_list|()
function_decl|;
name|void
name|httpProxyNtlmAuth
parameter_list|()
function_decl|;
name|void
name|socks5Proxy
parameter_list|()
function_decl|;
name|void
name|socks5ProxyAuth
parameter_list|()
function_decl|;
name|void
name|smbServer
parameter_list|()
function_decl|;
comment|// ssl supported test
name|void
name|supportsSsl
parameter_list|()
function_decl|;
private|private:
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
DECL|member|netConfMan
name|QNetworkConfigurationManager
modifier|*
name|netConfMan
decl_stmt|;
DECL|member|networkConfiguration
name|QNetworkConfiguration
name|networkConfiguration
decl_stmt|;
DECL|member|networkSession
name|QScopedPointer
argument_list|<
name|QNetworkSession
argument_list|>
name|networkSession
decl_stmt|;
endif|#
directive|endif
block|}
class|;
end_class
begin_class
DECL|class|Chat
class|class
name|Chat
block|{
public|public:
DECL|enum|Type
enum|enum
name|Type
block|{
DECL|enumerator|Reconnect
name|Reconnect
block|,
DECL|enumerator|Send
name|Send
block|,
DECL|enumerator|Expect
name|Expect
block|,
DECL|enumerator|SkipBytes
name|SkipBytes
block|,
DECL|enumerator|DiscardUntil
name|DiscardUntil
block|,
DECL|enumerator|DiscardUntilDisconnect
name|DiscardUntilDisconnect
block|,
DECL|enumerator|Disconnect
name|Disconnect
block|,
DECL|enumerator|RemoteDisconnect
name|RemoteDisconnect
block|,
DECL|enumerator|StartEncryption
name|StartEncryption
block|}
enum|;
DECL|function|Chat
name|Chat
parameter_list|(
name|Type
name|t
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|d
parameter_list|)
member_init_list|:
name|data
argument_list|(
name|d
argument_list|)
member_init_list|,
name|type
argument_list|(
name|t
argument_list|)
block|{     }
DECL|function|Chat
name|Chat
parameter_list|(
name|Type
name|t
parameter_list|,
name|int
name|val
init|=
literal|0
parameter_list|)
member_init_list|:
name|value
argument_list|(
name|val
argument_list|)
member_init_list|,
name|type
argument_list|(
name|t
argument_list|)
block|{     }
DECL|function|send
specifier|static
specifier|inline
name|Chat
name|send
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|)
block|{
return|return
name|Chat
argument_list|(
name|Send
argument_list|,
name|data
argument_list|)
return|;
block|}
DECL|function|expect
specifier|static
specifier|inline
name|Chat
name|expect
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|)
block|{
return|return
name|Chat
argument_list|(
name|Expect
argument_list|,
name|data
argument_list|)
return|;
block|}
DECL|function|discardUntil
specifier|static
specifier|inline
name|Chat
name|discardUntil
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|)
block|{
return|return
name|Chat
argument_list|(
name|DiscardUntil
argument_list|,
name|data
argument_list|)
return|;
block|}
DECL|function|skipBytes
specifier|static
specifier|inline
name|Chat
name|skipBytes
parameter_list|(
name|int
name|count
parameter_list|)
block|{
return|return
name|Chat
argument_list|(
name|SkipBytes
argument_list|,
name|count
argument_list|)
return|;
block|}
DECL|member|data
name|QByteArray
name|data
decl_stmt|;
DECL|member|value
name|int
name|value
decl_stmt|;
DECL|member|type
name|Type
name|type
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|prettyByteArray
specifier|static
name|QString
name|prettyByteArray
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|array
parameter_list|)
block|{
comment|// any control chars?
name|QString
name|result
decl_stmt|;
name|result
operator|.
name|reserve
argument_list|(
name|array
operator|.
name|length
argument_list|()
operator|+
name|array
operator|.
name|length
argument_list|()
operator|/
literal|3
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|char
name|c
init|=
name|array
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'\n'
case|:
name|result
operator|+=
literal|"\\n"
expr_stmt|;
continue|continue;
case|case
literal|'\r'
case|:
name|result
operator|+=
literal|"\\r"
expr_stmt|;
continue|continue;
case|case
literal|'\t'
case|:
name|result
operator|+=
literal|"\\t"
expr_stmt|;
continue|continue;
case|case
literal|'"'
case|:
name|result
operator|+=
literal|"\\\""
expr_stmt|;
continue|continue;
default|default:
break|break;
block|}
if|if
condition|(
name|c
operator|<
literal|0x20
operator|||
name|uchar
argument_list|(
name|c
argument_list|)
operator|>=
literal|0x7f
condition|)
block|{
name|result
operator|+=
literal|'\\'
expr_stmt|;
name|result
operator|+=
name|QString
operator|::
name|number
argument_list|(
name|uchar
argument_list|(
name|c
argument_list|)
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|+=
name|c
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|doSocketRead
specifier|static
name|bool
name|doSocketRead
parameter_list|(
name|QTcpSocket
modifier|*
name|socket
parameter_list|,
name|int
name|minBytesAvailable
parameter_list|,
name|int
name|timeout
init|=
literal|4000
parameter_list|)
block|{
name|QElapsedTimer
name|timer
decl_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
forever|forever
block|{
if|if
condition|(
name|socket
operator|->
name|bytesAvailable
argument_list|()
operator|>=
name|minBytesAvailable
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|socket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
operator|||
name|timer
operator|.
name|elapsed
argument_list|()
operator|>=
name|timeout
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|socket
operator|->
name|waitForReadyRead
argument_list|(
name|timeout
operator|-
name|timer
operator|.
name|elapsed
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
block|}
end_function
begin_function
DECL|function|doSocketFlush
specifier|static
name|bool
name|doSocketFlush
parameter_list|(
name|QTcpSocket
modifier|*
name|socket
parameter_list|,
name|int
name|timeout
init|=
literal|4000
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SSL
name|QSslSocket
modifier|*
name|sslSocket
init|=
name|qobject_cast
argument_list|<
name|QSslSocket
operator|*
argument_list|>
argument_list|(
name|socket
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|QTime
name|timer
decl_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
forever|forever
block|{
if|if
condition|(
name|socket
operator|->
name|bytesToWrite
argument_list|()
operator|==
literal|0
ifndef|#
directive|ifndef
name|QT_NO_SSL
operator|&&
name|sslSocket
operator|->
name|encryptedBytesToWrite
argument_list|()
operator|==
literal|0
endif|#
directive|endif
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|socket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
operator|||
name|timer
operator|.
name|elapsed
argument_list|()
operator|>=
name|timeout
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|socket
operator|->
name|waitForBytesWritten
argument_list|(
name|timeout
operator|-
name|timer
operator|.
name|elapsed
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
block|}
end_function
begin_function
DECL|function|netChat
specifier|static
name|void
name|netChat
parameter_list|(
name|int
name|port
parameter_list|,
specifier|const
name|QList
argument_list|<
name|Chat
argument_list|>
modifier|&
name|chat
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SSL
name|QSslSocket
name|socket
decl_stmt|;
else|#
directive|else
name|QTcpSocket
name|socket
decl_stmt|;
endif|#
directive|endif
name|socket
operator|.
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|0
operator|<<
literal|"Connecting to server on port"
operator|<<
name|port
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|.
name|waitForConnected
argument_list|(
literal|10000
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Failed to connect to server in step 0: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|socket
operator|.
name|errorString
argument_list|()
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
comment|// now start the chat
name|QList
argument_list|<
name|Chat
argument_list|>
operator|::
name|ConstIterator
name|it
init|=
name|chat
operator|.
name|constBegin
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|it
operator|!=
name|chat
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
operator|,
operator|++
name|i
control|)
block|{
switch|switch
condition|(
name|it
operator|->
name|type
condition|)
block|{
case|case
name|Chat
operator|::
name|Expect
case|:
block|{
name|qDebug
argument_list|()
operator|<<
name|i
operator|<<
literal|"Expecting"
operator|<<
name|prettyByteArray
argument_list|(
name|it
operator|->
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|doSocketRead
argument_list|(
operator|&
name|socket
argument_list|,
name|it
operator|->
name|data
operator|.
name|length
argument_list|()
argument_list|)
condition|)
name|QFAIL
argument_list|(
name|QString
argument_list|(
literal|"Failed to receive data in step %1: timeout"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
comment|// pop that many bytes off the socket
name|QByteArray
name|received
init|=
name|socket
operator|.
name|read
argument_list|(
name|it
operator|->
name|data
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
comment|// is it what we expected?
name|QVERIFY2
argument_list|(
name|received
operator|==
name|it
operator|->
name|data
argument_list|,
name|QString
argument_list|(
literal|"Did not receive expected data in step %1: data received was:\n%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|arg
argument_list|(
name|prettyByteArray
argument_list|(
name|received
argument_list|)
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Chat
operator|::
name|DiscardUntil
case|:
name|qDebug
argument_list|()
operator|<<
name|i
operator|<<
literal|"Discarding until"
operator|<<
name|prettyByteArray
argument_list|(
name|it
operator|->
name|data
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|// scan the buffer until we have our string
if|if
condition|(
operator|!
name|doSocketRead
argument_list|(
operator|&
name|socket
argument_list|,
name|it
operator|->
name|data
operator|.
name|length
argument_list|()
argument_list|)
condition|)
name|QFAIL
argument_list|(
name|QString
argument_list|(
literal|"Failed to receive data in step %1: timeout"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
name|QByteArray
name|buffer
decl_stmt|;
name|buffer
operator|.
name|resize
argument_list|(
name|socket
operator|.
name|bytesAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|socket
operator|.
name|peek
argument_list|(
name|buffer
operator|.
name|data
argument_list|()
argument_list|,
name|socket
operator|.
name|bytesAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|pos
init|=
name|buffer
operator|.
name|indexOf
argument_list|(
name|it
operator|->
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|==
operator|-
literal|1
condition|)
block|{
comment|// data not found, keep trying
continue|continue;
block|}
name|buffer
operator|=
name|socket
operator|.
name|read
argument_list|(
name|pos
operator|+
name|it
operator|->
name|data
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
name|i
operator|<<
literal|"Discarded"
operator|<<
name|prettyByteArray
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
break|break;
block|}
break|break;
case|case
name|Chat
operator|::
name|SkipBytes
case|:
block|{
name|qDebug
argument_list|()
operator|<<
name|i
operator|<<
literal|"Skipping"
operator|<<
name|it
operator|->
name|value
operator|<<
literal|"bytes"
expr_stmt|;
if|if
condition|(
operator|!
name|doSocketRead
argument_list|(
operator|&
name|socket
argument_list|,
name|it
operator|->
name|value
argument_list|)
condition|)
name|QFAIL
argument_list|(
name|QString
argument_list|(
literal|"Failed to receive data in step %1: timeout"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
comment|// now discard the bytes
name|QByteArray
name|buffer
init|=
name|socket
operator|.
name|read
argument_list|(
name|it
operator|->
name|value
argument_list|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
name|i
operator|<<
literal|"Skipped"
operator|<<
name|prettyByteArray
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Chat
operator|::
name|Send
case|:
block|{
name|qDebug
argument_list|()
operator|<<
name|i
operator|<<
literal|"Sending"
operator|<<
name|prettyByteArray
argument_list|(
name|it
operator|->
name|data
argument_list|)
expr_stmt|;
name|socket
operator|.
name|write
argument_list|(
name|it
operator|->
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|doSocketFlush
argument_list|(
operator|&
name|socket
argument_list|)
condition|)
block|{
name|QVERIFY2
argument_list|(
name|socket
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|,
name|QString
argument_list|(
literal|"Socket disconnected while sending data in step %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
name|QFAIL
argument_list|(
name|QString
argument_list|(
literal|"Failed to send data in step %1: timeout"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|Chat
operator|::
name|Disconnect
case|:
name|qDebug
argument_list|()
operator|<<
name|i
operator|<<
literal|"Disconnecting from host"
expr_stmt|;
name|socket
operator|.
name|disconnectFromHost
argument_list|()
expr_stmt|;
comment|// is this the last command?
if|if
condition|(
name|it
operator|+
literal|1
operator|!=
name|chat
operator|.
name|constEnd
argument_list|()
condition|)
break|break;
comment|// fall through:
case|case
name|Chat
operator|::
name|RemoteDisconnect
case|:
case|case
name|Chat
operator|::
name|DiscardUntilDisconnect
case|:
name|qDebug
argument_list|()
operator|<<
name|i
operator|<<
literal|"Waiting for remote disconnect"
expr_stmt|;
if|if
condition|(
name|socket
operator|.
name|state
argument_list|()
operator|!=
name|QAbstractSocket
operator|::
name|UnconnectedState
condition|)
name|socket
operator|.
name|waitForDisconnected
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|,
name|QString
argument_list|(
literal|"Socket did not disconnect as expected in step %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
comment|// any data left?
if|if
condition|(
name|it
operator|->
name|type
operator|==
name|Chat
operator|::
name|DiscardUntilDisconnect
condition|)
block|{
name|QByteArray
name|buffer
init|=
name|socket
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
name|i
operator|<<
literal|"Discarded in the process:"
operator|<<
name|prettyByteArray
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|socket
operator|.
name|bytesAvailable
argument_list|()
operator|!=
literal|0
condition|)
name|QFAIL
argument_list|(
name|QString
argument_list|(
literal|"Unexpected bytes still on buffer when disconnecting in step %1:\n%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|arg
argument_list|(
name|prettyByteArray
argument_list|(
name|socket
operator|.
name|readAll
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Chat
operator|::
name|Reconnect
case|:
name|qDebug
argument_list|()
operator|<<
name|i
operator|<<
literal|"Reconnecting to server on port"
operator|<<
name|port
expr_stmt|;
name|socket
operator|.
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|.
name|waitForConnected
argument_list|(
literal|10000
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Failed to reconnect to server in step %1: %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|arg
argument_list|(
name|socket
operator|.
name|errorString
argument_list|()
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Chat
operator|::
name|StartEncryption
case|:
ifdef|#
directive|ifdef
name|QT_NO_SSL
name|QFAIL
argument_list|(
literal|"Internal error: SSL required for this test"
argument_list|)
expr_stmt|;
else|#
directive|else
name|qDebug
argument_list|()
operator|<<
name|i
operator|<<
literal|"Starting client encryption"
expr_stmt|;
name|socket
operator|.
name|ignoreSslErrors
argument_list|()
expr_stmt|;
name|socket
operator|.
name|startClientEncryption
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|.
name|waitForEncrypted
argument_list|(
literal|5000
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Failed to start client encryption in step %1: %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|arg
argument_list|(
name|socket
operator|.
name|errorString
argument_list|()
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
block|}
block|}
block|}
end_function
begin_constructor
DECL|function|tst_NetworkSelfTest
name|tst_NetworkSelfTest
operator|::
name|tst_NetworkSelfTest
parameter_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~tst_NetworkSelfTest
name|tst_NetworkSelfTest
operator|::
name|~
name|tst_NetworkSelfTest
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|serverIpAddress
name|QHostAddress
name|tst_NetworkSelfTest
operator|::
name|serverIpAddress
parameter_list|()
block|{
if|if
condition|(
name|cachedIpAddress
operator|.
name|protocol
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnknownNetworkLayerProtocol
condition|)
block|{
comment|// need resolving
name|QHostInfo
name|resolved
init|=
name|QHostInfo
operator|::
name|fromName
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolved
operator|.
name|error
argument_list|()
operator|!=
name|QHostInfo
operator|::
name|NoError
operator|||
name|resolved
operator|.
name|addresses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QHostInfo::fromName failed (%d)."
argument_list|,
name|resolved
operator|.
name|error
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|QHostAddress
argument_list|(
name|QHostAddress
operator|::
name|Null
argument_list|)
return|;
block|}
name|cachedIpAddress
operator|=
name|resolved
operator|.
name|addresses
argument_list|()
operator|.
name|first
argument_list|()
expr_stmt|;
block|}
return|return
name|cachedIpAddress
return|;
block|}
end_function
begin_function
DECL|function|initTestCase
name|void
name|tst_NetworkSelfTest
operator|::
name|initTestCase
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QtNetworkSettings
operator|::
name|verifyTestNetworkSettings
argument_list|()
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
name|netConfMan
operator|=
operator|new
name|QNetworkConfigurationManager
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|networkConfiguration
operator|=
name|netConfMan
operator|->
name|defaultConfiguration
argument_list|()
expr_stmt|;
name|networkSession
operator|.
name|reset
argument_list|(
operator|new
name|QNetworkSession
argument_list|(
name|networkConfiguration
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|networkSession
operator|->
name|isOpen
argument_list|()
condition|)
block|{
name|networkSession
operator|->
name|open
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|networkSession
operator|->
name|waitForOpened
argument_list|(
literal|30000
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|hostTest
name|void
name|tst_NetworkSelfTest
operator|::
name|hostTest
parameter_list|()
block|{
comment|// this is a localhost self-test
name|QHostInfo
name|localhost
init|=
name|QHostInfo
operator|::
name|fromName
argument_list|(
literal|"localhost"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|localhost
operator|.
name|error
argument_list|()
argument_list|,
name|QHostInfo
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|localhost
operator|.
name|addresses
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QTcpServer
name|server
decl_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|()
argument_list|)
expr_stmt|;
name|QTcpSocket
name|socket
decl_stmt|;
name|socket
operator|.
name|connectToHost
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|server
operator|.
name|serverPort
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|.
name|waitForConnected
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dnsResolution_data
name|void
name|tst_NetworkSelfTest
operator|::
name|dnsResolution_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"hostName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"local-name"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverLocalName
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"fqdn"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dnsResolution
name|void
name|tst_NetworkSelfTest
operator|::
name|dnsResolution
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|hostName
argument_list|)
expr_stmt|;
name|QHostInfo
name|resolved
init|=
name|QHostInfo
operator|::
name|fromName
argument_list|(
name|hostName
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|resolved
operator|.
name|error
argument_list|()
operator|==
name|QHostInfo
operator|::
name|NoError
argument_list|,
name|QString
argument_list|(
literal|"Failed to resolve hostname %1: %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|hostName
argument_list|,
name|resolved
operator|.
name|errorString
argument_list|()
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|resolved
operator|.
name|addresses
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|,
literal|"Got 0 addresses for server IP"
argument_list|)
expr_stmt|;
name|cachedIpAddress
operator|=
name|resolved
operator|.
name|addresses
argument_list|()
operator|.
name|first
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|serverReachability
name|void
name|tst_NetworkSelfTest
operator|::
name|serverReachability
parameter_list|()
block|{
comment|// check that we get a proper error connecting to port 12346
name|QTcpSocket
name|socket
decl_stmt|;
name|socket
operator|.
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|12346
argument_list|)
expr_stmt|;
name|QTime
name|timer
decl_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|socket
operator|.
name|waitForConnected
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|timer
operator|.
name|elapsed
argument_list|()
operator|<
literal|9900
argument_list|,
literal|"Connection to closed port timed out instead of refusing, something is wrong"
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|,
literal|"Socket connected unexpectedly!"
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|.
name|error
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectionRefusedError
argument_list|,
name|QString
argument_list|(
literal|"Could not reach server: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|socket
operator|.
name|errorString
argument_list|()
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|remotePortsOpen_data
name|void
name|tst_NetworkSelfTest
operator|::
name|remotePortsOpen_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"portNumber"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"echo"
argument_list|)
operator|<<
literal|7
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"daytime"
argument_list|)
operator|<<
literal|13
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ftp"
argument_list|)
operator|<<
literal|21
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ssh"
argument_list|)
operator|<<
literal|22
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"imap"
argument_list|)
operator|<<
literal|143
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http"
argument_list|)
operator|<<
literal|80
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"https"
argument_list|)
operator|<<
literal|443
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http-proxy"
argument_list|)
operator|<<
literal|3128
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http-proxy-auth-basic"
argument_list|)
operator|<<
literal|3129
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http-proxy-auth-ntlm"
argument_list|)
operator|<<
literal|3130
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"socks5-proxy"
argument_list|)
operator|<<
literal|1080
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"socks5-proxy-auth"
argument_list|)
operator|<<
literal|1081
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ftp-proxy"
argument_list|)
operator|<<
literal|2121
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"smb"
argument_list|)
operator|<<
literal|139
expr_stmt|;
block|}
end_function
begin_function
DECL|function|remotePortsOpen
name|void
name|tst_NetworkSelfTest
operator|::
name|remotePortsOpen
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|portNumber
argument_list|)
expr_stmt|;
name|QTcpSocket
name|socket
decl_stmt|;
name|socket
operator|.
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
name|portNumber
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|socket
operator|.
name|waitForConnected
argument_list|(
literal|10000
argument_list|)
condition|)
block|{
if|if
condition|(
name|socket
operator|.
name|error
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|SocketTimeoutError
condition|)
name|QFAIL
argument_list|(
name|QString
argument_list|(
literal|"Network timeout connecting to the server on port %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|portNumber
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|QFAIL
argument_list|(
name|QString
argument_list|(
literal|"Error connecting to server on port %1: %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|portNumber
argument_list|)
operator|.
name|arg
argument_list|(
name|socket
operator|.
name|errorString
argument_list|()
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|socket
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ftpChat
specifier|static
name|QList
argument_list|<
name|Chat
argument_list|>
name|ftpChat
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|userSuffix
init|=
name|QByteArray
argument_list|()
parameter_list|)
block|{
name|QList
argument_list|<
name|Chat
argument_list|>
name|rv
decl_stmt|;
name|rv
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"220"
argument_list|)
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|"\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|send
argument_list|(
literal|"USER anonymous"
operator|+
name|userSuffix
operator|+
literal|"\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"331"
argument_list|)
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|"\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|send
argument_list|(
literal|"PASS user@hostname\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"230"
argument_list|)
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|"\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|send
argument_list|(
literal|"CWD pub\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"250"
argument_list|)
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|"\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|send
argument_list|(
literal|"CWD dir-not-readable\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"550"
argument_list|)
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|"\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|send
argument_list|(
literal|"PWD\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"257 \"/pub\"\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|send
argument_list|(
literal|"SIZE file-not-readable.txt\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"213 41\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|send
argument_list|(
literal|"CWD qxmlquery\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"250"
argument_list|)
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|"\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|send
argument_list|(
literal|"CWD /qtest\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"250"
argument_list|)
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|"\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|send
argument_list|(
literal|"SIZE bigfile\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"213 519240\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|send
argument_list|(
literal|"SIZE rfc3252\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"213 25962\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|send
argument_list|(
literal|"SIZE rfc3252.txt\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"213 25962\r\n"
argument_list|)
comment|//<< Chat::send("SIZE nonASCII/german_\344\366\374\304\326\334\337\r\n")
comment|//<< Chat::expect("213 40\r\n")
operator|<<
name|Chat
operator|::
name|send
argument_list|(
literal|"QUIT\r\n"
argument_list|)
expr_stmt|;
name|rv
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"221"
argument_list|)
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|"\r\n"
argument_list|)
expr_stmt|;
name|rv
operator|<<
name|Chat
operator|::
name|RemoteDisconnect
expr_stmt|;
return|return
name|rv
return|;
block|}
end_function
begin_function
DECL|function|ftpServer
name|void
name|tst_NetworkSelfTest
operator|::
name|ftpServer
parameter_list|()
block|{
name|netChat
argument_list|(
literal|21
argument_list|,
name|ftpChat
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ftpProxyServer
name|void
name|tst_NetworkSelfTest
operator|::
name|ftpProxyServer
parameter_list|()
block|{
name|netChat
argument_list|(
literal|2121
argument_list|,
name|ftpChat
argument_list|(
literal|"@"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|imapServer
name|void
name|tst_NetworkSelfTest
operator|::
name|imapServer
parameter_list|()
block|{
name|netChat
argument_list|(
literal|143
argument_list|,
name|QList
argument_list|<
name|Chat
argument_list|>
argument_list|()
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"* OK "
argument_list|)
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|"\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|send
argument_list|(
literal|"1 CAPABILITY\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"* CAPABILITY "
argument_list|)
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|"1 OK"
argument_list|)
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|"\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|send
argument_list|(
literal|"2 LOGOUT\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|"2 OK"
argument_list|)
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|"\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|RemoteDisconnect
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|httpServer
name|void
name|tst_NetworkSelfTest
operator|::
name|httpServer
parameter_list|()
block|{
name|QString
name|uniqueExtension
decl_stmt|;
name|qsrand
argument_list|(
name|time
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|uniqueExtension
operator|=
name|QString
argument_list|(
literal|"%1%2%3"
argument_list|)
operator|.
name|arg
argument_list|(
operator|(
name|qulonglong
operator|)
name|this
argument_list|)
operator|.
name|arg
argument_list|(
name|qrand
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
operator|(
name|qulonglong
operator|)
name|time
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|uniqueExtension
operator|=
name|QString
argument_list|(
literal|"%1%2"
argument_list|)
operator|.
name|arg
argument_list|(
operator|(
name|qulonglong
operator|)
name|this
argument_list|)
operator|.
name|arg
argument_list|(
name|qrand
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|netChat
argument_list|(
literal|80
argument_list|,
name|QList
argument_list|<
name|Chat
argument_list|>
argument_list|()
comment|// HTTP/0.9 chat:
operator|<<
name|Chat
operator|::
name|send
argument_list|(
literal|"GET /\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|DiscardUntilDisconnect
comment|// HTTP/1.0 chat:
operator|<<
name|Chat
operator|::
name|Reconnect
operator|<<
name|Chat
operator|::
name|send
argument_list|(
literal|"GET / HTTP/1.0\r\n"
literal|"Host: "
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|+
literal|"\r\n"
literal|"Connection: close\r\n"
literal|"\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"HTTP/1."
argument_list|)
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|" "
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"200 "
argument_list|)
operator|<<
name|Chat
operator|::
name|DiscardUntilDisconnect
comment|// HTTP/1.0 POST:
operator|<<
name|Chat
operator|::
name|Reconnect
operator|<<
name|Chat
operator|::
name|send
argument_list|(
literal|"POST / HTTP/1.0\r\n"
literal|"Content-Length: 5\r\n"
literal|"Host: "
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|+
literal|"\r\n"
literal|"Connection: close\r\n"
literal|"\r\n"
literal|"Hello"
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"HTTP/1."
argument_list|)
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|" "
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"200 "
argument_list|)
operator|<<
name|Chat
operator|::
name|DiscardUntilDisconnect
comment|// HTTP protected area
operator|<<
name|Chat
operator|::
name|Reconnect
operator|<<
name|Chat
operator|::
name|send
argument_list|(
literal|"GET /qtest/protected/rfc3252.txt HTTP/1.0\r\n"
literal|"Host: "
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|+
literal|"\r\n"
literal|"Connection: close\r\n"
literal|"\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"HTTP/1."
argument_list|)
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|" "
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"401 "
argument_list|)
operator|<<
name|Chat
operator|::
name|DiscardUntilDisconnect
operator|<<
name|Chat
operator|::
name|Reconnect
operator|<<
name|Chat
operator|::
name|send
argument_list|(
literal|"HEAD /qtest/protected/rfc3252.txt HTTP/1.0\r\n"
literal|"Host: "
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|+
literal|"\r\n"
literal|"Connection: close\r\n"
literal|"Authorization: Basic cXNvY2tzdGVzdDpwYXNzd29yZA==\r\n"
literal|"\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"HTTP/1."
argument_list|)
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|" "
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"200 "
argument_list|)
operator|<<
name|Chat
operator|::
name|DiscardUntilDisconnect
comment|// DAV area
operator|<<
name|Chat
operator|::
name|Reconnect
operator|<<
name|Chat
operator|::
name|send
argument_list|(
literal|"HEAD /dav/ HTTP/1.0\r\n"
literal|"Host: "
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|+
literal|"\r\n"
literal|"Connection: close\r\n"
literal|"\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"HTTP/1."
argument_list|)
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|" "
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"200 "
argument_list|)
operator|<<
name|Chat
operator|::
name|DiscardUntilDisconnect
comment|// HTTP/1.0 PUT
operator|<<
name|Chat
operator|::
name|Reconnect
operator|<<
name|Chat
operator|::
name|send
argument_list|(
literal|"PUT /dav/networkselftest-"
operator|+
name|uniqueExtension
operator|.
name|toLatin1
argument_list|()
operator|+
literal|".txt HTTP/1.0\r\n"
literal|"Content-Length: 5\r\n"
literal|"Host: "
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|+
literal|"\r\n"
literal|"Connection: close\r\n"
literal|"\r\n"
literal|"Hello"
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"HTTP/1."
argument_list|)
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|" "
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"201 "
argument_list|)
operator|<<
name|Chat
operator|::
name|DiscardUntilDisconnect
comment|// check that the file did get uploaded
operator|<<
name|Chat
operator|::
name|Reconnect
operator|<<
name|Chat
operator|::
name|send
argument_list|(
literal|"HEAD /dav/networkselftest-"
operator|+
name|uniqueExtension
operator|.
name|toLatin1
argument_list|()
operator|+
literal|".txt HTTP/1.0\r\n"
literal|"Host: "
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|+
literal|"\r\n"
literal|"Connection: close\r\n"
literal|"\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"HTTP/1."
argument_list|)
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|" "
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"200 "
argument_list|)
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|"\r\nContent-Length: 5\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|DiscardUntilDisconnect
comment|// HTTP/1.0 DELETE
operator|<<
name|Chat
operator|::
name|Reconnect
operator|<<
name|Chat
operator|::
name|send
argument_list|(
literal|"DELETE /dav/networkselftest-"
operator|+
name|uniqueExtension
operator|.
name|toLatin1
argument_list|()
operator|+
literal|".txt HTTP/1.0\r\n"
literal|"Host: "
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|+
literal|"\r\n"
literal|"Connection: close\r\n"
literal|"\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"HTTP/1."
argument_list|)
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|" "
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"204 "
argument_list|)
operator|<<
name|Chat
operator|::
name|DiscardUntilDisconnect
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|httpServerFiles_data
name|void
name|tst_NetworkSelfTest
operator|::
name|httpServerFiles_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"uri"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"size"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"fluke.gif"
argument_list|)
operator|<<
literal|"/qtest/fluke.gif"
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bigfile"
argument_list|)
operator|<<
literal|"/qtest/bigfile"
operator|<<
literal|519240
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rfc3252.txt"
argument_list|)
operator|<<
literal|"/qtest/rfc3252.txt"
operator|<<
literal|25962
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"protected/rfc3252.txt"
argument_list|)
operator|<<
literal|"/qtest/protected/rfc3252.txt"
operator|<<
literal|25962
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"completelyEmptyQuery.xq"
argument_list|)
operator|<<
literal|"/qtest/qxmlquery/completelyEmptyQuery.xq"
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"notWellformedViaHttps.xml"
argument_list|)
operator|<<
literal|"/qtest/qxmlquery/notWellformedViaHttps.xml"
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"notWellformed.xml"
argument_list|)
operator|<<
literal|"/qtest/qxmlquery/notWellformed.xml"
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"viaHttp.xq"
argument_list|)
operator|<<
literal|"/qtest/qxmlquery/viaHttp.xq"
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"wellFormedViaHttps.xml"
argument_list|)
operator|<<
literal|"/qtest/qxmlquery/wellFormedViaHttps.xml"
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"wellFormed.xml"
argument_list|)
operator|<<
literal|"/qtest/qxmlquery/wellFormed.xml"
operator|<<
operator|-
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|httpServerFiles
name|void
name|tst_NetworkSelfTest
operator|::
name|httpServerFiles
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|Chat
argument_list|>
name|chat
decl_stmt|;
name|chat
operator|<<
name|Chat
operator|::
name|send
argument_list|(
literal|"HEAD "
operator|+
name|QUrl
operator|::
name|toPercentEncoding
argument_list|(
name|uri
argument_list|,
literal|"/"
argument_list|)
operator|+
literal|" HTTP/1.0\r\n"
literal|"Host: "
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|+
literal|"\r\n"
literal|"Connection: close\r\n"
literal|"Authorization: Basic cXNvY2tzdGVzdDpwYXNzd29yZA==\r\n"
literal|"\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"HTTP/1."
argument_list|)
operator|<<
name|Chat
operator|::
name|skipBytes
argument_list|(
literal|1
argument_list|)
comment|// HTTP/1.0 or 1.1 reply
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|" 200 "
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
operator|!=
operator|-
literal|1
condition|)
name|chat
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|"\r\nContent-Length: "
operator|+
name|QByteArray
operator|::
name|number
argument_list|(
name|size
argument_list|)
operator|+
literal|"\r\n"
argument_list|)
expr_stmt|;
name|chat
operator|<<
name|Chat
operator|::
name|DiscardUntilDisconnect
expr_stmt|;
name|netChat
argument_list|(
literal|80
argument_list|,
name|chat
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|httpServerCGI_data
name|void
name|tst_NetworkSelfTest
operator|::
name|httpServerCGI_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"request"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"additionalHeader"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"echo.cgi"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"GET /qtest/cgi-bin/echo.cgi?Hello+World HTTP/1.0\r\n"
literal|"Connection: close\r\n"
literal|"\r\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Hello+World"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"echo.cgi(POST)"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"POST /qtest/cgi-bin/echo.cgi?Hello+World HTTP/1.0\r\n"
literal|"Connection: close\r\n"
literal|"Content-Length: 15\r\n"
literal|"\r\n"
literal|"Hello, World!\r\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Hello, World!\r\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"md5sum.cgi"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"POST /qtest/cgi-bin/md5sum.cgi HTTP/1.0\r\n"
literal|"Connection: close\r\n"
literal|"Content-Length: 15\r\n"
literal|"\r\n"
literal|"Hello, World!\r\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"29b933a8d9a0fcef0af75f1713f4940e\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"protected/md5sum.cgi"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"POST /qtest/protected/cgi-bin/md5sum.cgi HTTP/1.0\r\n"
literal|"Connection: close\r\n"
literal|"Authorization: Basic cXNvY2tzdGVzdDpwYXNzd29yZA==\r\n"
literal|"Content-Length: 15\r\n"
literal|"\r\n"
literal|"Hello, World!\r\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"29b933a8d9a0fcef0af75f1713f4940e\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"set-cookie.cgi"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"POST /qtest/cgi-bin/set-cookie.cgi HTTP/1.0\r\n"
literal|"Connection: close\r\n"
literal|"Content-Length: 8\r\n"
literal|"\r\n"
literal|"foo=bar\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Success\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\r\nSet-Cookie: foo=bar\r\n"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|httpServerCGI
name|void
name|tst_NetworkSelfTest
operator|::
name|httpServerCGI
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|additionalHeader
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|Chat
argument_list|>
name|chat
decl_stmt|;
name|chat
operator|<<
name|Chat
operator|::
name|send
argument_list|(
name|request
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"HTTP/1."
argument_list|)
operator|<<
name|Chat
operator|::
name|skipBytes
argument_list|(
literal|1
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|" 200 "
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|additionalHeader
operator|.
name|isEmpty
argument_list|()
condition|)
name|chat
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
name|additionalHeader
argument_list|)
expr_stmt|;
name|chat
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|"\r\n\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
name|result
argument_list|)
operator|<<
name|Chat
operator|::
name|RemoteDisconnect
expr_stmt|;
name|netChat
argument_list|(
literal|80
argument_list|,
name|chat
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SSL
end_ifndef
begin_function
DECL|function|httpsServer
name|void
name|tst_NetworkSelfTest
operator|::
name|httpsServer
parameter_list|()
block|{
name|netChat
argument_list|(
literal|443
argument_list|,
name|QList
argument_list|<
name|Chat
argument_list|>
argument_list|()
operator|<<
name|Chat
operator|::
name|StartEncryption
operator|<<
name|Chat
operator|::
name|send
argument_list|(
literal|"GET / HTTP/1.0\r\n"
literal|"Host: "
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|+
literal|"\r\n"
literal|"Connection: close\r\n"
literal|"\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"HTTP/1."
argument_list|)
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|" "
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"200 "
argument_list|)
operator|<<
name|Chat
operator|::
name|DiscardUntilDisconnect
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|httpProxy
name|void
name|tst_NetworkSelfTest
operator|::
name|httpProxy
parameter_list|()
block|{
name|netChat
argument_list|(
literal|3128
argument_list|,
name|QList
argument_list|<
name|Chat
argument_list|>
argument_list|()
comment|// proxy GET by IP
operator|<<
name|Chat
operator|::
name|send
argument_list|(
literal|"GET http://"
operator|+
name|serverIpAddress
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|+
literal|"/ HTTP/1.0\r\n"
literal|"Host: "
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|+
literal|"\r\n"
literal|"Proxy-connection: close\r\n"
literal|"\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"HTTP/1."
argument_list|)
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|" "
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"200 "
argument_list|)
operator|<<
name|Chat
operator|::
name|DiscardUntilDisconnect
comment|// proxy GET by hostname
operator|<<
name|Chat
operator|::
name|Reconnect
operator|<<
name|Chat
operator|::
name|send
argument_list|(
literal|"GET http://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|+
literal|"/ HTTP/1.0\r\n"
literal|"Host: "
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|+
literal|"\r\n"
literal|"Proxy-connection: close\r\n"
literal|"\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"HTTP/1."
argument_list|)
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|" "
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"200 "
argument_list|)
operator|<<
name|Chat
operator|::
name|DiscardUntilDisconnect
comment|// proxy CONNECT by IP
operator|<<
name|Chat
operator|::
name|Reconnect
operator|<<
name|Chat
operator|::
name|send
argument_list|(
literal|"CONNECT "
operator|+
name|serverIpAddress
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|+
literal|":21 HTTP/1.0\r\n"
literal|"\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"HTTP/1."
argument_list|)
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|" "
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"200 "
argument_list|)
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|"\r\n\r\n"
argument_list|)
operator|<<
name|ftpChat
argument_list|()
comment|// proxy CONNECT by hostname
operator|<<
name|Chat
operator|::
name|Reconnect
operator|<<
name|Chat
operator|::
name|send
argument_list|(
literal|"CONNECT "
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|+
literal|":21 HTTP/1.0\r\n"
literal|"\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"HTTP/1."
argument_list|)
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|" "
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"200 "
argument_list|)
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|"\r\n\r\n"
argument_list|)
operator|<<
name|ftpChat
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|httpProxyBasicAuth
name|void
name|tst_NetworkSelfTest
operator|::
name|httpProxyBasicAuth
parameter_list|()
block|{
name|netChat
argument_list|(
literal|3129
argument_list|,
name|QList
argument_list|<
name|Chat
argument_list|>
argument_list|()
comment|// test auth required response
operator|<<
name|Chat
operator|::
name|send
argument_list|(
literal|"GET http://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|+
literal|"/ HTTP/1.0\r\n"
literal|"Host: "
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|+
literal|"\r\n"
literal|"Proxy-connection: close\r\n"
literal|"\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"HTTP/1."
argument_list|)
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|" "
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"407 "
argument_list|)
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|"\r\nProxy-Authenticate: Basic realm=\""
argument_list|)
operator|<<
name|Chat
operator|::
name|DiscardUntilDisconnect
comment|// now try sending our credentials
operator|<<
name|Chat
operator|::
name|Reconnect
operator|<<
name|Chat
operator|::
name|send
argument_list|(
literal|"GET http://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|+
literal|"/ HTTP/1.0\r\n"
literal|"Host: "
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|+
literal|"\r\n"
literal|"Proxy-connection: close\r\n"
literal|"Proxy-Authorization: Basic cXNvY2tzdGVzdDpwYXNzd29yZA==\r\n"
literal|"\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"HTTP/1."
argument_list|)
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|" "
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"200 "
argument_list|)
operator|<<
name|Chat
operator|::
name|DiscardUntilDisconnect
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|httpProxyNtlmAuth
name|void
name|tst_NetworkSelfTest
operator|::
name|httpProxyNtlmAuth
parameter_list|()
block|{
name|netChat
argument_list|(
literal|3130
argument_list|,
name|QList
argument_list|<
name|Chat
argument_list|>
argument_list|()
comment|// test auth required response
operator|<<
name|Chat
operator|::
name|send
argument_list|(
literal|"GET http://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|+
literal|"/ HTTP/1.0\r\n"
literal|"Host: "
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|+
literal|"\r\n"
literal|"Proxy-connection: keep-alive\r\n"
comment|// NTLM auth will disconnect
literal|"\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"HTTP/1."
argument_list|)
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|" "
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"407 "
argument_list|)
operator|<<
name|Chat
operator|::
name|discardUntil
argument_list|(
literal|"\r\nProxy-Authenticate: NTLM\r\n"
argument_list|)
operator|<<
name|Chat
operator|::
name|DiscardUntilDisconnect
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// SOCKSv5 is a binary protocol
end_comment
begin_decl_stmt
DECL|variable|handshakeNoAuth
specifier|static
specifier|const
name|char
name|handshakeNoAuth
index|[]
init|=
literal|"\5\1\0"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|handshakeOkNoAuth
specifier|static
specifier|const
name|char
name|handshakeOkNoAuth
index|[]
init|=
literal|"\5\0"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|handshakeAuthPassword
specifier|static
specifier|const
name|char
name|handshakeAuthPassword
index|[]
init|=
literal|"\5\1\2\1\12qsockstest\10password"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|handshakeOkPasswdAuth
specifier|static
specifier|const
name|char
name|handshakeOkPasswdAuth
index|[]
init|=
literal|"\5\2\1\0"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|handshakeAuthNotOk
specifier|static
specifier|const
name|char
name|handshakeAuthNotOk
index|[]
init|=
literal|"\5\377"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|connect1
specifier|static
specifier|const
name|char
name|connect1
index|[]
init|=
literal|"\5\1\0\1\177\0\0\1\0\25"
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|connect1
comment|// Connect IPv4 127.0.0.1 port 21
end_comment
begin_decl_stmt
DECL|variable|connect1a
specifier|static
specifier|const
name|char
name|connect1a
index|[]
init|=
literal|"\5\1\0\1"
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|connect1a
comment|// just "Connect to IPv4"
end_comment
begin_decl_stmt
DECL|variable|connect1b
specifier|static
specifier|const
name|char
name|connect1b
index|[]
init|=
literal|"\0\25"
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|connect1b
comment|// just "port 21"
end_comment
begin_decl_stmt
DECL|variable|connect2
specifier|static
specifier|const
name|char
name|connect2
index|[]
init|=
literal|"\5\1\0\3\11localhost\0\25"
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|connect2
comment|// Connect hostname localhost 21
end_comment
begin_decl_stmt
DECL|variable|connect2a
specifier|static
specifier|const
name|char
name|connect2a
index|[]
init|=
literal|"\5\1\0\3"
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|connect2a
comment|// just "Connect to hostname"
end_comment
begin_decl_stmt
DECL|variable|connected
specifier|static
specifier|const
name|char
name|connected
index|[]
init|=
literal|"\5\0\0"
decl_stmt|;
end_decl_stmt
begin_define
DECL|macro|QBA
define|#
directive|define
name|QBA
parameter_list|(
name|x
parameter_list|)
value|(QByteArray::fromRawData(x, int(sizeof(x)) - 1))
end_define
begin_function
DECL|function|socks5Proxy
name|void
name|tst_NetworkSelfTest
operator|::
name|socks5Proxy
parameter_list|()
block|{
union|union
block|{
name|char
name|buf
index|[
literal|4
index|]
decl_stmt|;
name|quint32
name|data
decl_stmt|;
block|}
name|ip4Address
union|;
name|ip4Address
operator|.
name|data
operator|=
name|qToBigEndian
argument_list|(
name|serverIpAddress
argument_list|()
operator|.
name|toIPv4Address
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QByteArray
name|handshakeNoAuthData
init|=
name|QByteArray
argument_list|(
name|handshakeNoAuth
argument_list|,
name|int
argument_list|(
sizeof|sizeof
name|handshakeNoAuth
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|QByteArray
name|handshakeOkNoAuthData
init|=
name|QByteArray
argument_list|(
name|handshakeOkNoAuth
argument_list|,
name|int
argument_list|(
sizeof|sizeof
name|handshakeOkNoAuth
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|QByteArray
name|connect1Data
init|=
name|QByteArray
argument_list|(
name|connect1
argument_list|,
name|int
argument_list|(
sizeof|sizeof
name|connect1
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|QByteArray
name|connectedData
init|=
name|QByteArray
argument_list|(
name|connected
argument_list|,
name|int
argument_list|(
sizeof|sizeof
name|connected
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|QByteArray
name|connect2Data
init|=
name|QByteArray
argument_list|(
name|connect2
argument_list|,
name|int
argument_list|(
sizeof|sizeof
name|connect2
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|netChat
argument_list|(
literal|1080
argument_list|,
name|QList
argument_list|<
name|Chat
argument_list|>
argument_list|()
comment|// IP address connection
operator|<<
name|Chat
operator|::
name|send
argument_list|(
name|handshakeNoAuthData
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
name|handshakeOkNoAuthData
argument_list|)
operator|<<
name|Chat
operator|::
name|send
argument_list|(
name|connect1Data
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
name|connectedData
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"\1"
argument_list|)
comment|// IPv4 address following
operator|<<
name|Chat
operator|::
name|skipBytes
argument_list|(
literal|6
argument_list|)
comment|// the server's local address and port
operator|<<
name|ftpChat
argument_list|()
comment|// connect by IP
operator|<<
name|Chat
operator|::
name|Reconnect
operator|<<
name|Chat
operator|::
name|send
argument_list|(
name|handshakeNoAuthData
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
name|handshakeOkNoAuthData
argument_list|)
operator|<<
name|Chat
operator|::
name|send
argument_list|(
name|QBA
argument_list|(
name|connect1a
argument_list|)
operator|+
name|QByteArray
operator|::
name|fromRawData
argument_list|(
name|ip4Address
operator|.
name|buf
argument_list|,
literal|4
argument_list|)
operator|+
name|QBA
argument_list|(
name|connect1b
argument_list|)
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
name|connectedData
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"\1"
argument_list|)
comment|// IPv4 address following
operator|<<
name|Chat
operator|::
name|skipBytes
argument_list|(
literal|6
argument_list|)
comment|// the server's local address and port
operator|<<
name|ftpChat
argument_list|()
comment|// connect to "localhost" by hostname
operator|<<
name|Chat
operator|::
name|Reconnect
operator|<<
name|Chat
operator|::
name|send
argument_list|(
name|handshakeNoAuthData
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
name|handshakeOkNoAuthData
argument_list|)
operator|<<
name|Chat
operator|::
name|send
argument_list|(
name|connect2Data
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
name|connectedData
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"\1"
argument_list|)
comment|// IPv4 address following
operator|<<
name|Chat
operator|::
name|skipBytes
argument_list|(
literal|6
argument_list|)
comment|// the server's local address and port
operator|<<
name|ftpChat
argument_list|()
comment|// connect to server by its official name
operator|<<
name|Chat
operator|::
name|Reconnect
operator|<<
name|Chat
operator|::
name|send
argument_list|(
name|handshakeNoAuthData
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
name|handshakeOkNoAuthData
argument_list|)
operator|<<
name|Chat
operator|::
name|send
argument_list|(
name|QBA
argument_list|(
name|connect2a
argument_list|)
operator|+
name|char
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|+
name|QBA
argument_list|(
name|connect1b
argument_list|)
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
name|connectedData
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"\1"
argument_list|)
comment|// IPv4 address following
operator|<<
name|Chat
operator|::
name|skipBytes
argument_list|(
literal|6
argument_list|)
comment|// the server's local address and port
operator|<<
name|ftpChat
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|socks5ProxyAuth
name|void
name|tst_NetworkSelfTest
operator|::
name|socks5ProxyAuth
parameter_list|()
block|{
specifier|const
name|QByteArray
name|handshakeNoAuthData
init|=
name|QByteArray
argument_list|(
name|handshakeNoAuth
argument_list|,
name|int
argument_list|(
sizeof|sizeof
name|handshakeNoAuth
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|QByteArray
name|connect1Data
init|=
name|QByteArray
argument_list|(
name|connect1
argument_list|,
name|int
argument_list|(
sizeof|sizeof
name|connect1
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|QByteArray
name|connectedData
init|=
name|QByteArray
argument_list|(
name|connected
argument_list|,
name|int
argument_list|(
sizeof|sizeof
name|connected
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|QByteArray
name|handshakeAuthNotOkData
init|=
name|QByteArray
argument_list|(
name|handshakeAuthNotOk
argument_list|,
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|handshakeAuthNotOk
argument_list|)
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|QByteArray
name|handshakeAuthPasswordData
init|=
name|QByteArray
argument_list|(
name|handshakeAuthPassword
argument_list|,
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|handshakeAuthPassword
argument_list|)
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|QByteArray
name|handshakeOkPasswdAuthData
init|=
name|QByteArray
argument_list|(
name|handshakeOkPasswdAuth
argument_list|,
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|handshakeOkPasswdAuth
argument_list|)
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|netChat
argument_list|(
literal|1081
argument_list|,
name|QList
argument_list|<
name|Chat
argument_list|>
argument_list|()
comment|// unauthenticated connect -- will get error
operator|<<
name|Chat
operator|::
name|send
argument_list|(
name|handshakeNoAuthData
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
name|handshakeAuthNotOkData
argument_list|)
operator|<<
name|Chat
operator|::
name|RemoteDisconnect
comment|// now try to connect with authentication
operator|<<
name|Chat
operator|::
name|Reconnect
operator|<<
name|Chat
operator|::
name|send
argument_list|(
name|handshakeAuthPasswordData
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
name|handshakeOkPasswdAuthData
argument_list|)
operator|<<
name|Chat
operator|::
name|send
argument_list|(
name|connect1Data
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
name|connectedData
argument_list|)
operator|<<
name|Chat
operator|::
name|expect
argument_list|(
literal|"\1"
argument_list|)
comment|// IPv4 address following
operator|<<
name|Chat
operator|::
name|skipBytes
argument_list|(
literal|6
argument_list|)
comment|// the server's local address and port
operator|<<
name|ftpChat
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|supportsSsl
name|void
name|tst_NetworkSelfTest
operator|::
name|supportsSsl
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_NO_SSL
name|QSKIP
argument_list|(
literal|"SSL not compiled in"
argument_list|)
expr_stmt|;
else|#
directive|else
name|QVERIFY2
argument_list|(
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
argument_list|,
literal|"Could not load SSL libraries"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|smbServer
name|void
name|tst_NetworkSelfTest
operator|::
name|smbServer
parameter_list|()
block|{
specifier|static
specifier|const
name|char
name|contents
index|[]
init|=
literal|"This is 34 bytes. Do not change..."
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
comment|// use Windows's native UNC support to try and open a file on the server
name|QString
name|filepath
init|=
name|QString
argument_list|(
literal|"\\\\%1\\testshare\\test.pri"
argument_list|)
operator|.
name|arg
argument_list|(
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
argument_list|)
decl_stmt|;
name|FILE
modifier|*
name|f
init|=
name|fopen
argument_list|(
name|filepath
operator|.
name|toLatin1
argument_list|()
argument_list|,
literal|"rb"
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|f
argument_list|,
name|qt_error_string
argument_list|()
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
name|char
name|buf
index|[
literal|128
index|]
decl_stmt|;
name|size_t
name|ret
init|=
name|fread
argument_list|(
name|buf
argument_list|,
literal|1
argument_list|,
sizeof|sizeof
name|buf
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|fclose
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ret
argument_list|,
name|strlen
argument_list|(
name|contents
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|memcmp
argument_list|(
name|buf
argument_list|,
name|contents
argument_list|,
name|strlen
argument_list|(
name|contents
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// try to use Samba
name|QString
name|progname
init|=
literal|"smbclient"
decl_stmt|;
name|QProcess
name|smbclient
decl_stmt|;
name|smbclient
operator|.
name|start
argument_list|(
name|progname
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|smbclient
operator|.
name|waitForStarted
argument_list|(
literal|2000
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"Could not find smbclient (from Samba), cannot continue testing"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|smbclient
operator|.
name|waitForFinished
argument_list|(
literal|2000
argument_list|)
operator|||
name|smbclient
operator|.
name|exitStatus
argument_list|()
operator|!=
name|QProcess
operator|::
name|NormalExit
condition|)
name|QSKIP
argument_list|(
literal|"smbclient isn't working, cannot continue testing"
argument_list|)
expr_stmt|;
name|smbclient
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// try listing the server
name|smbclient
operator|.
name|start
argument_list|(
name|progname
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"-g"
operator|<<
literal|"-N"
operator|<<
literal|"-L"
operator|<<
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|smbclient
operator|.
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|smbclient
operator|.
name|exitStatus
argument_list|()
operator|!=
name|QProcess
operator|::
name|NormalExit
condition|)
name|QSKIP
argument_list|(
literal|"smbclient crashed"
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|smbclient
operator|.
name|exitCode
argument_list|()
operator|==
literal|0
argument_list|,
literal|"Test server not found"
argument_list|)
expr_stmt|;
name|QByteArray
name|output
init|=
name|smbclient
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|output
operator|.
name|contains
argument_list|(
literal|"Disk|testshare|"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|output
operator|.
name|contains
argument_list|(
literal|"Disk|testsharewritable|"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|output
operator|.
name|contains
argument_list|(
literal|"Disk|testsharelargefile|"
argument_list|)
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Test server found and shares are correct"
expr_stmt|;
comment|// try getting a file
name|QProcessEnvironment
name|env
init|=
name|QProcessEnvironment
operator|::
name|systemEnvironment
argument_list|()
decl_stmt|;
name|env
operator|.
name|insert
argument_list|(
literal|"PAGER"
argument_list|,
literal|"/bin/cat"
argument_list|)
expr_stmt|;
comment|// just in case
name|smbclient
operator|.
name|setProcessEnvironment
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|smbclient
operator|.
name|start
argument_list|(
name|progname
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"-N"
operator|<<
literal|"-c"
operator|<<
literal|"more test.pri"
operator|<<
name|QString
argument_list|(
literal|"\\\\%1\\testshare"
argument_list|)
operator|.
name|arg
argument_list|(
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
argument_list|)
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|smbclient
operator|.
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|smbclient
operator|.
name|exitStatus
argument_list|()
operator|!=
name|QProcess
operator|::
name|NormalExit
condition|)
name|QSKIP
argument_list|(
literal|"smbclient crashed"
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|smbclient
operator|.
name|exitCode
argument_list|()
operator|==
literal|0
argument_list|,
literal|"File //qt-test-server/testshare/test.pri not found"
argument_list|)
expr_stmt|;
name|output
operator|=
name|smbclient
operator|.
name|readAll
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|output
operator|.
name|constData
argument_list|()
argument_list|,
name|contents
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Test file is correct"
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_NetworkSelfTest
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_networkselftest.moc"
end_include
end_unit
