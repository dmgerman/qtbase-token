begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"paintcommands.h"
end_include
begin_include
include|#
directive|include
file|<qbaselinetest.h>
end_include
begin_include
include|#
directive|include
file|<QDir>
end_include
begin_include
include|#
directive|include
file|<QPainter>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_OPENGL
end_ifndef
begin_include
include|#
directive|include
file|<QOpenGLFramebufferObjectFormat>
end_include
begin_include
include|#
directive|include
file|<QOpenGLContext>
end_include
begin_include
include|#
directive|include
file|<QOpenGLPaintDevice>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_class
DECL|class|tst_Lancelot
class|class
name|tst_Lancelot
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_Lancelot
parameter_list|()
constructor_decl|;
private|private:
DECL|enum|GraphicsEngine
enum|enum
name|GraphicsEngine
block|{
DECL|enumerator|Raster
name|Raster
init|=
literal|0
block|,
DECL|enumerator|OpenGL
name|OpenGL
init|=
literal|1
block|}
enum|;
name|void
name|setupTestSuite
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|blacklist
init|=
name|QStringList
argument_list|()
parameter_list|)
function_decl|;
name|void
name|runTestSuite
parameter_list|(
name|GraphicsEngine
name|engine
parameter_list|,
name|QImage
operator|::
name|Format
name|format
parameter_list|)
function_decl|;
name|void
name|paint
parameter_list|(
name|QPaintDevice
modifier|*
name|device
parameter_list|,
name|GraphicsEngine
name|engine
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|script
parameter_list|,
specifier|const
name|QString
modifier|&
name|filePath
parameter_list|)
function_decl|;
DECL|member|qpsFiles
name|QStringList
name|qpsFiles
decl_stmt|;
DECL|member|scripts
name|QHash
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
name|scripts
decl_stmt|;
DECL|member|scriptChecksums
name|QHash
argument_list|<
name|QString
argument_list|,
name|quint16
argument_list|>
name|scriptChecksums
decl_stmt|;
DECL|member|scriptsDir
name|QString
name|scriptsDir
decl_stmt|;
private|private
name|slots
private|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
DECL|function|cleanupTestCase
name|void
name|cleanupTestCase
parameter_list|()
block|{}
name|void
name|testRasterARGB32PM_data
parameter_list|()
function_decl|;
name|void
name|testRasterARGB32PM
parameter_list|()
function_decl|;
name|void
name|testRasterRGB32_data
parameter_list|()
function_decl|;
name|void
name|testRasterRGB32
parameter_list|()
function_decl|;
name|void
name|testRasterRGB16_data
parameter_list|()
function_decl|;
name|void
name|testRasterRGB16
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_OPENGL
name|void
name|testOpenGL_data
parameter_list|()
function_decl|;
name|void
name|testOpenGL
parameter_list|()
function_decl|;
private|private:
name|bool
name|checkSystemGLSupport
parameter_list|()
function_decl|;
endif|#
directive|endif
block|}
class|;
end_class
begin_constructor
DECL|function|tst_Lancelot
name|tst_Lancelot
operator|::
name|tst_Lancelot
parameter_list|()
block|{ }
end_constructor
begin_function
DECL|function|initTestCase
name|void
name|tst_Lancelot
operator|::
name|initTestCase
parameter_list|()
block|{
comment|// Check and setup the environment. We treat failures because of test environment
comment|// (e.g. script files not found) as just warnings, and not QFAILs, to avoid false negatives
comment|// caused by environment or server instability
name|QByteArray
name|msg
decl_stmt|;
if|if
condition|(
operator|!
name|QBaselineTest
operator|::
name|connectToBaselineServer
argument_list|(
operator|&
name|msg
argument_list|)
condition|)
name|QSKIP
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|QString
name|baseDir
init|=
name|QFINDTESTDATA
argument_list|(
literal|"scripts/text.qps"
argument_list|)
decl_stmt|;
name|scriptsDir
operator|=
name|baseDir
operator|.
name|left
argument_list|(
name|baseDir
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
argument_list|)
operator|+
literal|'/'
expr_stmt|;
name|QDir
name|qpsDir
argument_list|(
name|scriptsDir
argument_list|)
decl_stmt|;
name|qpsFiles
operator|=
name|qpsDir
operator|.
name|entryList
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QLatin1String
argument_list|(
literal|"*.qps"
argument_list|)
argument_list|,
name|QDir
operator|::
name|Files
operator||
name|QDir
operator|::
name|Readable
argument_list|)
expr_stmt|;
if|if
condition|(
name|qpsFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QWARN
argument_list|(
literal|"No qps script files found in "
operator|+
name|qpsDir
operator|.
name|path
argument_list|()
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
name|QSKIP
argument_list|(
literal|"Aborted due to errors."
argument_list|)
expr_stmt|;
block|}
name|std
operator|::
name|sort
argument_list|(
name|qpsFiles
operator|.
name|begin
argument_list|()
argument_list|,
name|qpsFiles
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|fileName
decl|,
name|qpsFiles
control|)
block|{
name|QFile
name|file
argument_list|(
name|scriptsDir
operator|+
name|fileName
argument_list|)
decl_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QByteArray
name|cont
init|=
name|file
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|scripts
operator|.
name|insert
argument_list|(
name|fileName
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
name|cont
argument_list|)
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
argument_list|)
expr_stmt|;
name|scriptChecksums
operator|.
name|insert
argument_list|(
name|fileName
argument_list|,
name|qChecksum
argument_list|(
name|cont
operator|.
name|constData
argument_list|()
argument_list|,
name|cont
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|testRasterARGB32PM_data
name|void
name|tst_Lancelot
operator|::
name|testRasterARGB32PM_data
parameter_list|()
block|{
name|setupTestSuite
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testRasterARGB32PM
name|void
name|tst_Lancelot
operator|::
name|testRasterARGB32PM
parameter_list|()
block|{
name|runTestSuite
argument_list|(
name|Raster
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testRasterRGB32_data
name|void
name|tst_Lancelot
operator|::
name|testRasterRGB32_data
parameter_list|()
block|{
name|setupTestSuite
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testRasterRGB32
name|void
name|tst_Lancelot
operator|::
name|testRasterRGB32
parameter_list|()
block|{
name|runTestSuite
argument_list|(
name|Raster
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testRasterRGB16_data
name|void
name|tst_Lancelot
operator|::
name|testRasterRGB16_data
parameter_list|()
block|{
name|setupTestSuite
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testRasterRGB16
name|void
name|tst_Lancelot
operator|::
name|testRasterRGB16
parameter_list|()
block|{
name|runTestSuite
argument_list|(
name|Raster
argument_list|,
name|QImage
operator|::
name|Format_RGB16
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_OPENGL
end_ifndef
begin_function
DECL|function|checkSystemGLSupport
name|bool
name|tst_Lancelot
operator|::
name|checkSystemGLSupport
parameter_list|()
block|{
name|QWindow
name|win
decl_stmt|;
name|win
operator|.
name|setSurfaceType
argument_list|(
name|QSurface
operator|::
name|OpenGLSurface
argument_list|)
expr_stmt|;
name|win
operator|.
name|create
argument_list|()
expr_stmt|;
name|QOpenGLFramebufferObjectFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setAttachment
argument_list|(
name|QOpenGLFramebufferObject
operator|::
name|CombinedDepthStencil
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setSamples
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|QOpenGLContext
name|ctx
decl_stmt|;
if|if
condition|(
operator|!
name|ctx
operator|.
name|create
argument_list|()
operator|||
operator|!
name|ctx
operator|.
name|makeCurrent
argument_list|(
operator|&
name|win
argument_list|)
condition|)
return|return
literal|false
return|;
name|QOpenGLFramebufferObject
name|fbo
argument_list|(
literal|800
argument_list|,
literal|800
argument_list|,
name|fmt
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fbo
operator|.
name|isValid
argument_list|()
operator|||
operator|!
name|fbo
operator|.
name|bind
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|testOpenGL_data
name|void
name|tst_Lancelot
operator|::
name|testOpenGL_data
parameter_list|()
block|{
if|if
condition|(
operator|!
name|checkSystemGLSupport
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"System under test does not meet preconditions for GL testing. Skipping."
argument_list|)
expr_stmt|;
name|QStringList
name|localBlacklist
init|=
name|QStringList
argument_list|()
operator|<<
name|QLatin1String
argument_list|(
literal|"rasterops.qps"
argument_list|)
decl_stmt|;
name|setupTestSuite
argument_list|(
name|localBlacklist
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testOpenGL
name|void
name|tst_Lancelot
operator|::
name|testOpenGL
parameter_list|()
block|{
name|runTestSuite
argument_list|(
name|OpenGL
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|setupTestSuite
name|void
name|tst_Lancelot
operator|::
name|setupTestSuite
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|blacklist
parameter_list|)
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"qpsFile"
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|fileName
decl|,
name|qpsFiles
control|)
block|{
if|if
condition|(
name|blacklist
operator|.
name|contains
argument_list|(
name|fileName
argument_list|)
condition|)
continue|continue;
name|QBaselineTest
operator|::
name|newRow
argument_list|(
name|fileName
operator|.
name|toLatin1
argument_list|()
argument_list|,
name|scriptChecksums
operator|.
name|value
argument_list|(
name|fileName
argument_list|)
argument_list|)
operator|<<
name|fileName
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|runTestSuite
name|void
name|tst_Lancelot
operator|::
name|runTestSuite
parameter_list|(
name|GraphicsEngine
name|engine
parameter_list|,
name|QImage
operator|::
name|Format
name|format
parameter_list|)
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|qpsFile
argument_list|)
expr_stmt|;
name|QString
name|filePath
init|=
name|scriptsDir
operator|+
name|qpsFile
decl_stmt|;
name|QStringList
name|script
init|=
name|scripts
operator|.
name|value
argument_list|(
name|qpsFile
argument_list|)
decl_stmt|;
name|QImage
name|rendered
decl_stmt|;
if|if
condition|(
name|engine
operator|==
name|Raster
condition|)
block|{
name|QImage
name|img
argument_list|(
literal|800
argument_list|,
literal|800
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|paint
argument_list|(
operator|&
name|img
argument_list|,
name|engine
argument_list|,
name|script
argument_list|,
name|QFileInfo
argument_list|(
name|filePath
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
expr_stmt|;
name|rendered
operator|=
name|img
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_OPENGL
block|}
elseif|else
if|if
condition|(
name|engine
operator|==
name|OpenGL
condition|)
block|{
name|QWindow
name|win
decl_stmt|;
name|win
operator|.
name|setSurfaceType
argument_list|(
name|QSurface
operator|::
name|OpenGLSurface
argument_list|)
expr_stmt|;
name|win
operator|.
name|create
argument_list|()
expr_stmt|;
name|QOpenGLFramebufferObjectFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setAttachment
argument_list|(
name|QOpenGLFramebufferObject
operator|::
name|CombinedDepthStencil
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setSamples
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|QOpenGLContext
name|ctx
decl_stmt|;
name|QVERIFY
argument_list|(
name|ctx
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ctx
operator|.
name|makeCurrent
argument_list|(
operator|&
name|win
argument_list|)
argument_list|)
expr_stmt|;
name|QOpenGLFramebufferObject
name|fbo
argument_list|(
literal|800
argument_list|,
literal|800
argument_list|,
name|fmt
argument_list|)
decl_stmt|;
name|fbo
operator|.
name|bind
argument_list|()
expr_stmt|;
name|QOpenGLPaintDevice
name|pdv
argument_list|(
literal|800
argument_list|,
literal|800
argument_list|)
decl_stmt|;
name|paint
argument_list|(
operator|&
name|pdv
argument_list|,
name|engine
argument_list|,
name|script
argument_list|,
name|QFileInfo
argument_list|(
name|filePath
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
expr_stmt|;
name|rendered
operator|=
name|fbo
operator|.
name|toImage
argument_list|()
operator|.
name|convertToFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|QBASELINE_TEST
argument_list|(
name|rendered
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paint
name|void
name|tst_Lancelot
operator|::
name|paint
parameter_list|(
name|QPaintDevice
modifier|*
name|device
parameter_list|,
name|GraphicsEngine
name|engine
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|script
parameter_list|,
specifier|const
name|QString
modifier|&
name|filePath
parameter_list|)
block|{
name|QPainter
name|p
argument_list|(
name|device
argument_list|)
decl_stmt|;
name|PaintCommands
name|pcmd
argument_list|(
name|script
argument_list|,
literal|800
argument_list|,
literal|800
argument_list|)
decl_stmt|;
comment|//pcmd.setShouldDrawText(false);
switch|switch
condition|(
name|engine
condition|)
block|{
case|case
name|OpenGL
case|:
name|pcmd
operator|.
name|setType
argument_list|(
name|OpenGLBufferType
argument_list|)
expr_stmt|;
break|break;
case|case
name|Raster
case|:
comment|// fallthrough
default|default:
name|pcmd
operator|.
name|setType
argument_list|(
name|ImageType
argument_list|)
expr_stmt|;
break|break;
block|}
name|pcmd
operator|.
name|setPainter
argument_list|(
operator|&
name|p
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|setFilePath
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|runCommands
argument_list|()
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
end_function
begin_define
DECL|macro|main
define|#
directive|define
name|main
value|_realmain
end_define
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_Lancelot
argument_list|)
end_macro
begin_undef
DECL|macro|main
undef|#
directive|undef
name|main
end_undef
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
name|qSetGlobalQHashSeed
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Avoid rendering variations caused by QHash randomization
name|QBaselineTest
operator|::
name|handleCmdLineArgs
argument_list|(
operator|&
name|argc
argument_list|,
operator|&
name|argv
argument_list|)
expr_stmt|;
return|return
name|_realmain
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
return|;
block|}
end_function
begin_include
include|#
directive|include
file|"tst_lancelot.moc"
end_include
end_unit
