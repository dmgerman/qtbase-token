begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|// test the container forwards
end_comment
begin_include
include|#
directive|include
file|<QtContainerFwd>
end_include
begin_decl_stmt
DECL|variable|cacheX
specifier|static
name|QCache
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
modifier|*
name|cacheX
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|hashX
specifier|static
name|QHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
modifier|*
name|hashX
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|linkedListX
specifier|static
name|QLinkedList
argument_list|<
name|int
argument_list|>
modifier|*
name|linkedListX
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|listX
specifier|static
name|QList
argument_list|<
name|int
argument_list|>
modifier|*
name|listX
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|mapX
specifier|static
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
modifier|*
name|mapX
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|multiHashX
specifier|static
name|QMultiHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
modifier|*
name|multiHashX
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|multiMapX
specifier|static
name|QMultiMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
modifier|*
name|multiMapX
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pairX
specifier|static
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
modifier|*
name|pairX
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|queueX
specifier|static
name|QQueue
argument_list|<
name|int
argument_list|>
modifier|*
name|queueX
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|setX
specifier|static
name|QSet
argument_list|<
name|int
argument_list|>
modifier|*
name|setX
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|stackX
specifier|static
name|QStack
argument_list|<
name|int
argument_list|>
modifier|*
name|stackX
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|varLengthArrayX
specifier|static
name|QVarLengthArray
argument_list|<
name|int
argument_list|>
modifier|*
name|varLengthArrayX
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|varLengthArrayY
specifier|static
name|QVarLengthArray
argument_list|<
name|int
argument_list|,
literal|512
argument_list|>
modifier|*
name|varLengthArrayY
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|vectorX
specifier|static
name|QVector
argument_list|<
name|int
argument_list|>
modifier|*
name|vectorX
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|foo
name|void
name|foo
parameter_list|()
block|{
name|cacheX
operator|=
literal|0
expr_stmt|;
name|hashX
operator|=
literal|0
expr_stmt|;
name|linkedListX
operator|=
literal|0
expr_stmt|;
name|listX
operator|=
literal|0
expr_stmt|;
name|mapX
operator|=
literal|0
expr_stmt|;
name|multiHashX
operator|=
literal|0
expr_stmt|;
name|multiMapX
operator|=
literal|0
expr_stmt|;
name|pairX
operator|=
literal|0
expr_stmt|;
name|queueX
operator|=
literal|0
expr_stmt|;
name|setX
operator|=
literal|0
expr_stmt|;
name|stackX
operator|=
literal|0
expr_stmt|;
name|varLengthArrayX
operator|=
literal|0
expr_stmt|;
name|varLengthArrayY
operator|=
literal|0
expr_stmt|;
name|vectorX
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STL
end_ifndef
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"qalgorithms.h"
end_include
begin_include
include|#
directive|include
file|"qbitarray.h"
end_include
begin_include
include|#
directive|include
file|"qbytearray.h"
end_include
begin_include
include|#
directive|include
file|"qcache.h"
end_include
begin_include
include|#
directive|include
file|"qhash.h"
end_include
begin_include
include|#
directive|include
file|"qlinkedlist.h"
end_include
begin_include
include|#
directive|include
file|"qlist.h"
end_include
begin_include
include|#
directive|include
file|"qmap.h"
end_include
begin_include
include|#
directive|include
file|"qpair.h"
end_include
begin_include
include|#
directive|include
file|"qregexp.h"
end_include
begin_include
include|#
directive|include
file|"qset.h"
end_include
begin_include
include|#
directive|include
file|"qstack.h"
end_include
begin_include
include|#
directive|include
file|"qstring.h"
end_include
begin_include
include|#
directive|include
file|"qstringlist.h"
end_include
begin_include
include|#
directive|include
file|"qvarlengtharray.h"
end_include
begin_include
include|#
directive|include
file|"qvector.h"
end_include
begin_include
include|#
directive|include
file|"qqueue.h"
end_include
begin_class_decl
specifier|template
class_decl|class
name|QList
argument_list|<
name|int
argument_list|>
class_decl|;
end_class_decl
begin_class
DECL|class|tst_Collections
class|class
name|tst_Collections
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_Collections
parameter_list|()
constructor_decl|;
name|~
name|tst_Collections
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|typeinfo
parameter_list|()
function_decl|;
name|void
name|qstring
parameter_list|()
function_decl|;
name|void
name|list
parameter_list|()
function_decl|;
name|void
name|linkedList
parameter_list|()
function_decl|;
name|void
name|vector
parameter_list|()
function_decl|;
name|void
name|byteArray
parameter_list|()
function_decl|;
name|void
name|stack
parameter_list|()
function_decl|;
name|void
name|hash
parameter_list|()
function_decl|;
name|void
name|map
parameter_list|()
function_decl|;
name|void
name|bitArray
parameter_list|()
function_decl|;
name|void
name|cache
parameter_list|()
function_decl|;
name|void
name|regexp
parameter_list|()
function_decl|;
name|void
name|pair
parameter_list|()
function_decl|;
name|void
name|sharableQList
parameter_list|()
function_decl|;
name|void
name|sharableQLinkedList
parameter_list|()
function_decl|;
name|void
name|sharableQVector
parameter_list|()
function_decl|;
name|void
name|sharableQMap
parameter_list|()
function_decl|;
name|void
name|sharableQHash
parameter_list|()
function_decl|;
name|void
name|q_foreach
parameter_list|()
function_decl|;
name|void
name|conversions
parameter_list|()
function_decl|;
name|void
name|javaStyleIterators
parameter_list|()
function_decl|;
name|void
name|constAndNonConstStlIterators
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_STL
name|void
name|vector_stl_data
parameter_list|()
function_decl|;
name|void
name|vector_stl
parameter_list|()
function_decl|;
name|void
name|list_stl_data
parameter_list|()
function_decl|;
name|void
name|list_stl
parameter_list|()
function_decl|;
name|void
name|linkedlist_stl_data
parameter_list|()
function_decl|;
name|void
name|linkedlist_stl
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|q_init
parameter_list|()
function_decl|;
name|void
name|pointersize
parameter_list|()
function_decl|;
name|void
name|containerInstantiation
parameter_list|()
function_decl|;
name|void
name|qtimerList
parameter_list|()
function_decl|;
name|void
name|containerTypedefs
parameter_list|()
function_decl|;
name|void
name|forwardDeclared
parameter_list|()
function_decl|;
name|void
name|alignment
parameter_list|()
function_decl|;
name|void
name|QTBUG13079_collectionInsideCollection
parameter_list|()
function_decl|;
name|void
name|foreach_2
parameter_list|()
function_decl|;
name|void
name|insert_remove_loop
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_struct
DECL|struct|LargeStatic
struct|struct
name|LargeStatic
block|{
DECL|member|count
specifier|static
name|int
name|count
decl_stmt|;
DECL|function|LargeStatic
name|LargeStatic
parameter_list|()
member_init_list|:
name|c
argument_list|(
name|count
argument_list|)
block|{
operator|++
name|count
expr_stmt|;
block|}
DECL|function|LargeStatic
name|LargeStatic
parameter_list|(
specifier|const
name|LargeStatic
modifier|&
name|o
parameter_list|)
member_init_list|:
name|c
argument_list|(
name|o
operator|.
name|c
argument_list|)
block|{
operator|++
name|count
expr_stmt|;
block|}
DECL|function|~LargeStatic
name|~
name|LargeStatic
parameter_list|()
block|{
operator|--
name|count
expr_stmt|;
block|}
DECL|member|c
name|int
name|c
decl_stmt|;
DECL|member|data
name|int
name|data
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
DECL|member|count
name|int
name|LargeStatic
operator|::
name|count
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|Movable
struct|struct
name|Movable
block|{
DECL|member|count
specifier|static
name|int
name|count
decl_stmt|;
DECL|function|Movable
name|Movable
parameter_list|()
member_init_list|:
name|c
argument_list|(
name|count
argument_list|)
block|{
operator|++
name|count
expr_stmt|;
block|}
DECL|function|Movable
name|Movable
parameter_list|(
specifier|const
name|Movable
modifier|&
name|o
parameter_list|)
member_init_list|:
name|c
argument_list|(
name|o
operator|.
name|c
argument_list|)
block|{
operator|++
name|count
expr_stmt|;
block|}
DECL|function|~Movable
name|~
name|Movable
parameter_list|()
block|{
operator|--
name|count
expr_stmt|;
block|}
DECL|member|c
name|int
name|c
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
DECL|member|count
name|int
name|Movable
operator|::
name|count
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function_decl
name|QT_BEGIN_NAMESPACE
name|Q_DECLARE_TYPEINFO
parameter_list|(
name|Movable
parameter_list|,
name|Q_MOVABLE_TYPE
parameter_list|)
function_decl|;
end_function_decl
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_struct
DECL|struct|Pod
struct|struct
name|Pod
block|{
DECL|member|i1
DECL|member|i2
name|int
name|i1
decl_stmt|,
name|i2
decl_stmt|;
block|}
struct|;
end_struct
begin_constructor
DECL|function|tst_Collections
name|tst_Collections
operator|::
name|tst_Collections
parameter_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~tst_Collections
name|tst_Collections
operator|::
name|~
name|tst_Collections
parameter_list|()
block|{  }
end_destructor
begin_function
DECL|function|init
name|void
name|tst_Collections
operator|::
name|init
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_Collections
operator|::
name|cleanup
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|typeinfo
name|void
name|tst_Collections
operator|::
name|typeinfo
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QTypeInfo
argument_list|<
name|int
operator|*
argument_list|>
operator|::
name|isPointer
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTypeInfo
argument_list|<
name|int
argument_list|>
operator|::
name|isPointer
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTypeInfo
argument_list|<
name|QString
argument_list|>
operator|::
name|isComplex
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTypeInfo
argument_list|<
name|int
argument_list|>
operator|::
name|isComplex
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|list
name|void
name|tst_Collections
operator|::
name|list
parameter_list|()
block|{
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|list
decl_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
name|list
operator|.
name|begin
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|list
operator|.
name|push_back
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|list
operator|+=
operator|(
literal|3
operator|)
expr_stmt|;
name|list
operator|<<
literal|4
operator|<<
literal|5
operator|<<
literal|6
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|6
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|end
argument_list|()
operator|-
name|list
operator|.
name|begin
argument_list|()
operator|==
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STL
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_CC_MSVC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_CC_SUN
argument_list|)
name|QVERIFY
argument_list|(
name|std
operator|::
name|binary_search
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|std
operator|::
name|binary_search
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|,
literal|9
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|qBinaryFind
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|==
name|list
operator|.
name|begin
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qLowerBound
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|==
name|list
operator|.
name|begin
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qUpperBound
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|==
name|list
operator|.
name|begin
argument_list|()
operator|+
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qBinaryFind
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|,
literal|9
argument_list|)
operator|==
name|list
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qLowerBound
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|,
literal|9
argument_list|)
operator|==
name|list
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qUpperBound
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|,
literal|9
argument_list|)
operator|==
name|list
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|QListIterator
argument_list|<
name|int
argument_list|>
name|i
argument_list|(
name|list
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|sum
operator|+=
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|21
argument_list|)
expr_stmt|;
block|}
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|list1
decl_stmt|;
name|list1
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
operator|<<
literal|5
operator|<<
literal|7
operator|<<
literal|8
operator|<<
literal|9
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|list2
init|=
name|list1
decl_stmt|;
name|QMutableListIterator
argument_list|<
name|int
argument_list|>
name|i1
argument_list|(
name|list1
argument_list|)
decl_stmt|;
while|while
condition|(
name|i1
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|i1
operator|.
name|next
argument_list|()
operator|%
literal|2
operator|!=
literal|0
condition|)
name|i1
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|QMutableListIterator
argument_list|<
name|int
argument_list|>
name|i2
argument_list|(
name|list2
argument_list|)
decl_stmt|;
name|i2
operator|.
name|toBack
argument_list|()
expr_stmt|;
while|while
condition|(
name|i2
operator|.
name|hasPrevious
argument_list|()
condition|)
block|{
if|if
condition|(
name|i2
operator|.
name|previous
argument_list|()
operator|%
literal|2
operator|!=
literal|0
condition|)
name|i2
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|list1
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list2
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list1
operator|==
name|list2
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|sum
operator|+=
name|list
index|[
name|i
index|]
expr_stmt|;
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|21
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|i
init|=
name|list
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|!=
name|list
operator|.
name|end
argument_list|()
condition|)
name|sum
operator|+=
operator|*
name|i
operator|++
expr_stmt|;
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|21
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
operator|::
name|ConstIterator
name|i
init|=
name|list
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|!=
name|list
operator|.
name|end
argument_list|()
condition|)
name|sum
operator|+=
operator|*
name|i
operator|++
expr_stmt|;
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|21
argument_list|)
expr_stmt|;
block|}
block|{
name|QList
argument_list|<
name|int
argument_list|>
operator|::
name|Iterator
name|i
init|=
name|list
operator|.
name|begin
argument_list|()
decl_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|i
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|i
operator|-=
literal|1
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|i
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
name|QList
argument_list|<
name|int
argument_list|>
operator|::
name|ConstIterator
name|i
init|=
name|list
operator|.
name|begin
argument_list|()
decl_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|i
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|i
operator|-=
literal|1
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|i
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|list
index|[
name|i
index|]
operator|=
name|list
index|[
name|i
index|]
operator|+
literal|1
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|sum
operator|+=
name|list
index|[
name|i
index|]
expr_stmt|;
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|21
operator|+
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
operator|--
name|list
index|[
name|i
index|]
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|sum
operator|+=
name|list
index|[
name|i
index|]
expr_stmt|;
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|21
argument_list|)
expr_stmt|;
block|}
block|{
name|QMutableListIterator
argument_list|<
name|int
argument_list|>
name|i
argument_list|(
name|list
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|i
operator|.
name|setValue
argument_list|(
literal|2
operator|*
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|QListIterator
argument_list|<
name|int
argument_list|>
name|i
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|i
operator|.
name|toBack
argument_list|()
expr_stmt|;
while|while
condition|(
name|i
operator|.
name|hasPrevious
argument_list|()
condition|)
name|sum
operator|+=
name|i
operator|.
name|previous
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|2
operator|*
literal|21
argument_list|)
expr_stmt|;
block|}
block|{
name|QMutableListIterator
argument_list|<
name|int
argument_list|>
name|i
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|i
operator|.
name|toBack
argument_list|()
expr_stmt|;
while|while
condition|(
name|i
operator|.
name|hasPrevious
argument_list|()
condition|)
name|i
operator|.
name|setValue
argument_list|(
literal|2
operator|*
name|i
operator|.
name|previous
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|QListIterator
argument_list|<
name|int
argument_list|>
name|i
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|i
operator|.
name|toBack
argument_list|()
expr_stmt|;
while|while
condition|(
name|i
operator|.
name|hasPrevious
argument_list|()
condition|)
name|sum
operator|+=
name|i
operator|.
name|previous
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|2
operator|*
literal|2
operator|*
literal|21
argument_list|)
expr_stmt|;
block|}
block|{
name|QMutableListIterator
argument_list|<
name|int
argument_list|>
name|i
argument_list|(
name|list
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|a
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|i
operator|.
name|insert
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
operator|::
name|iterator
name|i
init|=
name|list
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|!=
name|list
operator|.
name|end
argument_list|()
condition|)
name|sum
operator|+=
operator|*
name|i
operator|++
expr_stmt|;
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|2
operator|*
literal|2
operator|*
literal|2
operator|*
literal|21
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|duplicates
init|=
literal|0
decl_stmt|;
name|QListIterator
argument_list|<
name|int
argument_list|>
name|i
argument_list|(
name|list
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|a
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
operator|&&
name|a
operator|==
name|i
operator|.
name|peekNext
argument_list|()
condition|)
name|duplicates
operator|++
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|duplicates
operator|==
literal|6
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|duplicates
init|=
literal|0
decl_stmt|;
name|QListIterator
argument_list|<
name|int
argument_list|>
name|i
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|i
operator|.
name|toBack
argument_list|()
expr_stmt|;
while|while
condition|(
name|i
operator|.
name|hasPrevious
argument_list|()
condition|)
block|{
name|int
name|a
init|=
name|i
operator|.
name|previous
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|.
name|hasPrevious
argument_list|()
operator|&&
name|a
operator|==
name|i
operator|.
name|peekPrevious
argument_list|()
condition|)
name|duplicates
operator|++
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|duplicates
operator|==
literal|6
argument_list|)
expr_stmt|;
block|}
block|{
name|QMutableListIterator
argument_list|<
name|int
argument_list|>
name|i
argument_list|(
name|list
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|a
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
operator|&&
name|i
operator|.
name|peekNext
argument_list|()
operator|==
name|a
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|{
name|int
name|duplicates
init|=
literal|0
decl_stmt|;
name|QMutableListIterator
argument_list|<
name|int
argument_list|>
name|i
init|=
name|list
decl_stmt|;
name|i
operator|.
name|toBack
argument_list|()
expr_stmt|;
while|while
condition|(
name|i
operator|.
name|hasPrevious
argument_list|()
condition|)
block|{
name|int
name|a
init|=
name|i
operator|.
name|previous
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|.
name|hasPrevious
argument_list|()
operator|&&
name|a
operator|==
name|i
operator|.
name|peekPrevious
argument_list|()
condition|)
name|duplicates
operator|++
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|duplicates
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|{
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|6
argument_list|)
expr_stmt|;
name|QMutableListIterator
argument_list|<
name|int
argument_list|>
name|i
init|=
name|list
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|a
init|=
name|i
operator|.
name|peekNext
argument_list|()
decl_stmt|;
name|i
operator|.
name|insert
argument_list|(
literal|42
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|peekPrevious
argument_list|()
operator|==
literal|42
operator|&&
name|i
operator|.
name|peekNext
argument_list|()
operator|==
name|a
argument_list|)
expr_stmt|;
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|12
argument_list|)
expr_stmt|;
name|i
operator|.
name|toFront
argument_list|()
expr_stmt|;
while|while
condition|(
name|i
operator|.
name|findNext
argument_list|(
literal|42
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|l
decl_stmt|;
name|l
operator|<<
literal|4
operator|<<
literal|8
operator|<<
literal|12
operator|<<
literal|16
operator|<<
literal|20
operator|<<
literal|24
expr_stmt|;
name|QVERIFY
argument_list|(
name|l
operator|==
name|list
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|copy
init|=
name|list
decl_stmt|;
name|list
operator|+=
name|list
expr_stmt|;
name|QVERIFY
argument_list|(
name|l
operator|!=
name|list
operator|&&
name|l
operator|.
name|size
argument_list|()
operator|==
name|list
operator|.
name|size
argument_list|()
operator|/
literal|2
operator|&&
name|l
operator|==
name|copy
argument_list|)
expr_stmt|;
name|l
operator|+=
name|copy
expr_stmt|;
name|QVERIFY
argument_list|(
name|l
operator|==
name|list
argument_list|)
expr_stmt|;
name|list
operator|=
name|copy
expr_stmt|;
block|}
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|copy
init|=
name|list
decl_stmt|;
name|list
operator|<<
literal|8
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|indexOf
argument_list|(
literal|8
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|indexOf
argument_list|(
literal|8
argument_list|,
name|list
operator|.
name|indexOf
argument_list|(
literal|8
argument_list|)
operator|+
literal|1
argument_list|)
operator|==
literal|6
argument_list|)
expr_stmt|;
name|int
name|a
init|=
name|list
operator|.
name|indexOf
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|count
argument_list|(
literal|8
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|int
name|r
init|=
name|list
operator|.
name|removeAll
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|r
operator|==
literal|2
argument_list|)
expr_stmt|;
name|list
operator|.
name|insert
argument_list|(
name|a
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|==
name|copy
argument_list|)
expr_stmt|;
block|}
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|"one"
operator|<<
literal|"two"
operator|<<
literal|"three"
operator|<<
literal|"four"
operator|<<
literal|"five"
operator|<<
literal|"six"
expr_stmt|;
while|while
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
name|list
operator|.
name|removeAll
argument_list|(
name|list
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|"one"
operator|<<
literal|"two"
operator|<<
literal|"one"
operator|<<
literal|"two"
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|list
operator|.
name|removeOne
argument_list|(
literal|"three"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|removeOne
argument_list|(
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"one"
operator|<<
literal|"one"
operator|<<
literal|"two"
argument_list|)
expr_stmt|;
empty_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|removeOne
argument_list|(
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"one"
operator|<<
literal|"one"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|list
operator|.
name|removeOne
argument_list|(
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"one"
operator|<<
literal|"one"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|removeOne
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"one"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|removeOne
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|list
operator|.
name|removeOne
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|copy
init|=
name|list
decl_stmt|;
name|list
operator|<<
literal|8
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|lastIndexOf
argument_list|(
literal|8
argument_list|)
operator|==
literal|6
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|lastIndexOf
argument_list|(
literal|8
argument_list|,
name|list
operator|.
name|lastIndexOf
argument_list|(
literal|8
argument_list|)
operator|-
literal|1
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|list
operator|=
name|copy
expr_stmt|;
block|}
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|copy
init|=
name|list
decl_stmt|;
name|list
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|999
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
index|[
literal|3
index|]
operator|==
literal|999
argument_list|)
expr_stmt|;
name|list
operator|.
name|replace
argument_list|(
literal|3
argument_list|,
literal|222
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
index|[
literal|3
index|]
operator|==
literal|222
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|contains
argument_list|(
literal|222
argument_list|)
operator|&&
operator|!
name|list
operator|.
name|contains
argument_list|(
literal|999
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|removeAt
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|list
operator|=
name|copy
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|==
name|copy
argument_list|)
expr_stmt|;
block|}
block|{
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|begin
argument_list|()
operator|==
name|list
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QListIterator
argument_list|<
name|int
argument_list|>
name|i
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|i
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|i
operator|.
name|hasPrevious
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|l1
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|l2
decl_stmt|;
name|l1
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
expr_stmt|;
name|l2
operator|<<
literal|4
operator|<<
literal|5
operator|<<
literal|6
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|l3
init|=
name|l1
operator|+
name|l2
decl_stmt|;
name|l1
operator|+=
name|l2
expr_stmt|;
name|QVERIFY
argument_list|(
name|l3
operator|==
name|l1
argument_list|)
expr_stmt|;
block|}
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|list
decl_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|list2
decl_stmt|;
name|list2
operator|=
name|list
expr_stmt|;
name|list2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|list2
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|list
decl_stmt|;
name|list
operator|.
name|append
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|list
operator|=
name|list
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|QList
argument_list|<
name|void
modifier|*
argument_list|>
name|list
decl_stmt|;
name|list
operator|.
name|append
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
operator|(
name|void
operator|*
operator|)
literal|42
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|(
name|void
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|(
name|void
operator|*
operator|)
literal|42
argument_list|)
expr_stmt|;
block|}
block|{
name|QVector
argument_list|<
name|QString
argument_list|>
name|vector
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|vector
index|[
literal|0
index|]
operator|=
literal|"99"
expr_stmt|;
name|vector
index|[
literal|4
index|]
operator|=
literal|"100"
expr_stmt|;
name|QList
argument_list|<
name|QString
argument_list|>
name|list
init|=
name|vector
operator|.
name|toList
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
literal|"99"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|4
argument_list|)
operator|==
literal|"100"
argument_list|)
expr_stmt|;
name|list
index|[
literal|0
index|]
operator|=
literal|"10"
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
literal|"10"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|vector
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
literal|"99"
argument_list|)
expr_stmt|;
block|}
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
name|list
operator|.
name|append
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QString
argument_list|>
operator|::
name|iterator
name|it
init|=
name|list
operator|.
name|begin
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
operator|*
name|it
operator|)
index|[
literal|0
index|]
operator|==
name|QChar
argument_list|(
literal|'H'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|->
name|constData
argument_list|()
index|[
literal|0
index|]
operator|==
name|QChar
argument_list|(
literal|'H'
argument_list|)
argument_list|)
expr_stmt|;
name|it
operator|->
name|replace
argument_list|(
name|QChar
argument_list|(
literal|'H'
argument_list|)
argument_list|,
name|QChar
argument_list|(
literal|'X'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|first
argument_list|()
operator|==
literal|"Xello"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QString
argument_list|>
operator|::
name|const_iterator
name|cit
init|=
name|list
operator|.
name|constBegin
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
operator|*
name|cit
operator|)
operator|.
name|toLower
argument_list|()
operator|==
literal|"xello"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cit
operator|->
name|toUpper
argument_list|()
operator|==
literal|"XELLO"
argument_list|)
expr_stmt|;
block|}
block|{
name|QList
argument_list|<
name|int
modifier|*
argument_list|>
name|list
decl_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|int
name|i
decl_stmt|;
name|list
operator|.
name|append
argument_list|(
operator|&
name|i
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|==
operator|&
name|i
argument_list|)
expr_stmt|;
block|}
block|{
name|QList
argument_list|<
specifier|const
name|int
modifier|*
argument_list|>
name|list
decl_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|int
name|i
decl_stmt|;
name|list
operator|.
name|append
argument_list|(
operator|&
name|i
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|==
operator|&
name|i
argument_list|)
expr_stmt|;
block|}
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|list
decl_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
block|}
block|{
name|QList
argument_list|<
name|Pod
argument_list|>
name|list
decl_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|i1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|i2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|"alpha"
operator|<<
literal|"beta"
expr_stmt|;
name|list
operator|+=
name|list
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
literal|"alpha"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|==
literal|"beta"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|==
literal|"alpha"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|3
argument_list|)
operator|==
literal|"beta"
argument_list|)
expr_stmt|;
block|}
comment|// test endcases for inserting into a qlist
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|"foo"
operator|<<
literal|"bar"
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|insert
argument_list|(
operator|-
literal|1
argument_list|,
literal|"lessthanzero"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"lessthanzero"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|"atzero"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"atzero"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|listCount
init|=
name|list
operator|.
name|count
argument_list|()
decl_stmt|;
name|list
operator|.
name|insert
argument_list|(
name|listCount
argument_list|,
literal|"atcount"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
name|listCount
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"atcount"
argument_list|)
argument_list|)
expr_stmt|;
name|listCount
operator|=
name|list
operator|.
name|count
argument_list|()
expr_stmt|;
name|list
operator|.
name|insert
argument_list|(
name|listCount
operator|+
literal|1
argument_list|,
literal|"beyondcount"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
name|listCount
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"beyondcount"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|list1
decl_stmt|;
name|list1
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
expr_stmt|;
name|list1
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
name|list1
operator|.
name|swap
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list1
operator|==
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
argument_list|)
expr_stmt|;
name|list1
operator|.
name|swap
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list1
operator|==
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
argument_list|)
expr_stmt|;
name|list1
operator|.
name|swap
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list1
operator|==
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
argument_list|)
expr_stmt|;
name|list1
operator|.
name|swap
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list1
operator|==
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|2
operator|<<
literal|1
operator|<<
literal|3
argument_list|)
expr_stmt|;
name|list1
operator|.
name|swap
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list1
operator|==
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|3
operator|<<
literal|1
operator|<<
literal|2
argument_list|)
expr_stmt|;
name|list1
operator|.
name|swap
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list1
operator|==
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|3
operator|<<
literal|2
operator|<<
literal|1
argument_list|)
expr_stmt|;
name|list1
operator|.
name|swap
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list1
operator|==
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|3
operator|<<
literal|1
operator|<<
literal|2
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QString
argument_list|>
name|list2
decl_stmt|;
name|list2
operator|<<
literal|"1"
operator|<<
literal|"2"
operator|<<
literal|"3"
expr_stmt|;
name|list2
operator|.
name|swap
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list2
operator|==
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"1"
operator|<<
literal|"2"
operator|<<
literal|"3"
argument_list|)
expr_stmt|;
name|list2
operator|.
name|swap
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list2
operator|==
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"1"
operator|<<
literal|"2"
operator|<<
literal|"3"
argument_list|)
expr_stmt|;
name|list2
operator|.
name|swap
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list2
operator|==
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"1"
operator|<<
literal|"2"
operator|<<
literal|"3"
argument_list|)
expr_stmt|;
name|list2
operator|.
name|swap
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list2
operator|==
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"2"
operator|<<
literal|"1"
operator|<<
literal|"3"
argument_list|)
expr_stmt|;
name|list2
operator|.
name|swap
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list2
operator|==
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"3"
operator|<<
literal|"1"
operator|<<
literal|"2"
argument_list|)
expr_stmt|;
name|list2
operator|.
name|swap
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list2
operator|==
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"3"
operator|<<
literal|"2"
operator|<<
literal|"1"
argument_list|)
expr_stmt|;
name|list2
operator|.
name|swap
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list2
operator|==
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"3"
operator|<<
literal|"1"
operator|<<
literal|"2"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|double
argument_list|>
name|list3
decl_stmt|;
name|list3
operator|<<
literal|1.0
operator|<<
literal|2.0
operator|<<
literal|3.0
expr_stmt|;
name|list3
operator|.
name|swap
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list3
operator|==
name|QList
argument_list|<
name|double
argument_list|>
argument_list|()
operator|<<
literal|1.0
operator|<<
literal|2.0
operator|<<
literal|3.0
argument_list|)
expr_stmt|;
name|list3
operator|.
name|swap
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list3
operator|==
name|QList
argument_list|<
name|double
argument_list|>
argument_list|()
operator|<<
literal|1.0
operator|<<
literal|2.0
operator|<<
literal|3.0
argument_list|)
expr_stmt|;
name|list3
operator|.
name|swap
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list3
operator|==
name|QList
argument_list|<
name|double
argument_list|>
argument_list|()
operator|<<
literal|1.0
operator|<<
literal|2.0
operator|<<
literal|3.0
argument_list|)
expr_stmt|;
name|list3
operator|.
name|swap
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list3
operator|==
name|QList
argument_list|<
name|double
argument_list|>
argument_list|()
operator|<<
literal|2.0
operator|<<
literal|1.0
operator|<<
literal|3.0
argument_list|)
expr_stmt|;
name|list3
operator|.
name|swap
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list3
operator|==
name|QList
argument_list|<
name|double
argument_list|>
argument_list|()
operator|<<
literal|3.0
operator|<<
literal|1.0
operator|<<
literal|2.0
argument_list|)
expr_stmt|;
name|list3
operator|.
name|swap
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list3
operator|==
name|QList
argument_list|<
name|double
argument_list|>
argument_list|()
operator|<<
literal|3.0
operator|<<
literal|2.0
operator|<<
literal|1.0
argument_list|)
expr_stmt|;
name|list3
operator|.
name|swap
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list3
operator|==
name|QList
argument_list|<
name|double
argument_list|>
argument_list|()
operator|<<
literal|3.0
operator|<<
literal|1.0
operator|<<
literal|2.0
argument_list|)
expr_stmt|;
block|}
comment|// Check what happens when using references to own items.
comment|// Ideally we should run valgrind on this.
block|{
name|int
name|i
decl_stmt|;
name|QList
argument_list|<
name|void
modifier|*
argument_list|>
name|list1
decl_stmt|;
name|list1
operator|.
name|append
argument_list|(
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|1
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|list1
operator|.
name|append
argument_list|(
name|list1
operator|.
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|list1
operator|.
name|prepend
argument_list|(
name|list1
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|list1
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|list1
operator|.
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|list1
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|list1
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|list1
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|list1
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|list1
operator|.
name|replace
argument_list|(
name|i
argument_list|,
name|list1
operator|.
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|list1
operator|.
name|replace
argument_list|(
name|i
argument_list|,
name|list1
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|list1
operator|.
name|replace
argument_list|(
name|i
argument_list|,
name|list1
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|list1
operator|.
name|size
argument_list|()
argument_list|,
literal|496
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|list1
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|list1
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QList
argument_list|<
name|QString
argument_list|>
name|list2
decl_stmt|;
name|list2
operator|.
name|append
argument_list|(
literal|"50"
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|1
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|list2
operator|.
name|append
argument_list|(
name|list2
operator|.
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|list2
operator|.
name|prepend
argument_list|(
name|list2
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|list2
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|list2
operator|.
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|list2
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|list2
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|list2
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|list2
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|list2
operator|.
name|replace
argument_list|(
name|i
argument_list|,
name|list2
operator|.
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|list2
operator|.
name|replace
argument_list|(
name|i
argument_list|,
name|list2
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|list2
operator|.
name|replace
argument_list|(
name|i
argument_list|,
name|list2
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|list2
operator|.
name|size
argument_list|()
argument_list|,
literal|496
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|list2
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|list2
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"50"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QList
argument_list|<
name|double
argument_list|>
name|list3
decl_stmt|;
name|list3
operator|.
name|append
argument_list|(
literal|50.0
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|1
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|list3
operator|.
name|append
argument_list|(
name|list3
operator|.
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|list3
operator|.
name|prepend
argument_list|(
name|list3
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|list3
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|list3
operator|.
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|list3
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|list3
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|list3
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|list3
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|list3
operator|.
name|replace
argument_list|(
name|i
argument_list|,
name|list3
operator|.
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|list3
operator|.
name|replace
argument_list|(
name|i
argument_list|,
name|list3
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|list3
operator|.
name|replace
argument_list|(
name|i
argument_list|,
name|list3
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|list3
operator|.
name|size
argument_list|()
argument_list|,
literal|496
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|list3
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|list3
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
literal|50.0
argument_list|)
expr_stmt|;
block|}
name|QList
argument_list|<
name|QTime
argument_list|>
name|list4
decl_stmt|;
name|list4
operator|.
name|append
argument_list|(
name|QTime
argument_list|(
literal|12
argument_list|,
literal|34
argument_list|,
literal|56
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|1
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|list4
operator|.
name|append
argument_list|(
name|list4
operator|.
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|list4
operator|.
name|prepend
argument_list|(
name|list4
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|list4
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|list4
operator|.
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|list4
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|list4
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|list4
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|list4
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|list4
operator|.
name|replace
argument_list|(
name|i
argument_list|,
name|list4
operator|.
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|list4
operator|.
name|replace
argument_list|(
name|i
argument_list|,
name|list4
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|list4
operator|.
name|replace
argument_list|(
name|i
argument_list|,
name|list4
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|list4
operator|.
name|size
argument_list|()
argument_list|,
literal|496
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|list4
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|list4
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|QTime
argument_list|(
literal|12
argument_list|,
literal|34
argument_list|,
literal|56
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|a
decl_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|a
operator|.
name|append
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|a
operator|.
name|append
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|linkedList
name|void
name|tst_Collections
operator|::
name|linkedList
parameter_list|()
block|{
block|{
name|QLinkedList
argument_list|<
name|int
argument_list|>
name|list
decl_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|list
operator|.
name|push_back
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|list
operator|+=
operator|(
literal|3
operator|)
expr_stmt|;
name|list
operator|<<
literal|4
operator|<<
literal|5
operator|<<
literal|6
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|6
argument_list|)
expr_stmt|;
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|QLinkedListIterator
argument_list|<
name|int
argument_list|>
name|i
init|=
name|list
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sum
operator|+=
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|21
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|QLinkedList
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|i
init|=
name|list
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|!=
name|list
operator|.
name|end
argument_list|()
condition|)
name|sum
operator|+=
operator|*
name|i
operator|++
expr_stmt|;
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|21
argument_list|)
expr_stmt|;
block|}
block|{
name|QMutableLinkedListIterator
argument_list|<
name|int
argument_list|>
name|i
init|=
name|list
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|i
operator|.
name|setValue
argument_list|(
literal|2
operator|*
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|QLinkedListIterator
argument_list|<
name|int
argument_list|>
name|i
init|=
name|list
decl_stmt|;
name|i
operator|.
name|toBack
argument_list|()
expr_stmt|;
while|while
condition|(
name|i
operator|.
name|hasPrevious
argument_list|()
condition|)
name|sum
operator|+=
name|i
operator|.
name|previous
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|2
operator|*
literal|21
argument_list|)
expr_stmt|;
block|}
block|{
name|QMutableLinkedListIterator
argument_list|<
name|int
argument_list|>
name|i
init|=
name|list
decl_stmt|;
name|i
operator|.
name|toBack
argument_list|()
expr_stmt|;
while|while
condition|(
name|i
operator|.
name|hasPrevious
argument_list|()
condition|)
name|i
operator|.
name|setValue
argument_list|(
literal|2
operator|*
name|i
operator|.
name|previous
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|QLinkedListIterator
argument_list|<
name|int
argument_list|>
name|i
init|=
name|list
decl_stmt|;
name|i
operator|.
name|toBack
argument_list|()
expr_stmt|;
while|while
condition|(
name|i
operator|.
name|hasPrevious
argument_list|()
condition|)
name|sum
operator|+=
name|i
operator|.
name|previous
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|2
operator|*
literal|2
operator|*
literal|21
argument_list|)
expr_stmt|;
block|}
block|{
name|QMutableLinkedListIterator
argument_list|<
name|int
argument_list|>
name|i
init|=
name|list
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|a
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|i
operator|.
name|insert
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|QLinkedList
argument_list|<
name|int
argument_list|>
operator|::
name|iterator
name|i
init|=
name|list
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|!=
name|list
operator|.
name|end
argument_list|()
condition|)
name|sum
operator|+=
operator|*
name|i
operator|++
expr_stmt|;
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|2
operator|*
literal|2
operator|*
literal|2
operator|*
literal|21
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|duplicates
init|=
literal|0
decl_stmt|;
name|QLinkedListIterator
argument_list|<
name|int
argument_list|>
name|i
init|=
name|list
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|a
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
operator|&&
name|a
operator|==
name|i
operator|.
name|peekNext
argument_list|()
condition|)
name|duplicates
operator|++
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|duplicates
operator|==
literal|6
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|duplicates
init|=
literal|0
decl_stmt|;
name|QLinkedListIterator
argument_list|<
name|int
argument_list|>
name|i
init|=
name|list
decl_stmt|;
name|i
operator|.
name|toBack
argument_list|()
expr_stmt|;
while|while
condition|(
name|i
operator|.
name|hasPrevious
argument_list|()
condition|)
block|{
name|int
name|a
init|=
name|i
operator|.
name|previous
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|.
name|hasPrevious
argument_list|()
operator|&&
name|a
operator|==
name|i
operator|.
name|peekPrevious
argument_list|()
condition|)
name|duplicates
operator|++
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|duplicates
operator|==
literal|6
argument_list|)
expr_stmt|;
block|}
block|{
name|QMutableLinkedListIterator
argument_list|<
name|int
argument_list|>
name|i
init|=
name|list
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|a
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
operator|&&
name|i
operator|.
name|peekNext
argument_list|()
operator|==
name|a
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|{
name|int
name|duplicates
init|=
literal|0
decl_stmt|;
name|QMutableLinkedListIterator
argument_list|<
name|int
argument_list|>
name|i
init|=
name|list
decl_stmt|;
name|i
operator|.
name|toBack
argument_list|()
expr_stmt|;
while|while
condition|(
name|i
operator|.
name|hasPrevious
argument_list|()
condition|)
block|{
name|int
name|a
init|=
name|i
operator|.
name|previous
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|.
name|hasPrevious
argument_list|()
operator|&&
name|a
operator|==
name|i
operator|.
name|peekPrevious
argument_list|()
condition|)
name|duplicates
operator|++
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|duplicates
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|{
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|6
argument_list|)
expr_stmt|;
name|QMutableLinkedListIterator
argument_list|<
name|int
argument_list|>
name|i
init|=
name|list
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|a
init|=
name|i
operator|.
name|peekNext
argument_list|()
decl_stmt|;
name|i
operator|.
name|insert
argument_list|(
literal|42
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|peekPrevious
argument_list|()
operator|==
literal|42
operator|&&
name|i
operator|.
name|peekNext
argument_list|()
operator|==
name|a
argument_list|)
expr_stmt|;
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|12
argument_list|)
expr_stmt|;
name|i
operator|.
name|toFront
argument_list|()
expr_stmt|;
while|while
condition|(
name|i
operator|.
name|findNext
argument_list|(
literal|42
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|{
name|QLinkedList
argument_list|<
name|int
argument_list|>
name|l
decl_stmt|;
name|l
operator|<<
literal|4
operator|<<
literal|8
operator|<<
literal|12
operator|<<
literal|16
operator|<<
literal|20
operator|<<
literal|24
expr_stmt|;
name|QVERIFY
argument_list|(
name|l
operator|==
name|list
argument_list|)
expr_stmt|;
name|QLinkedList
argument_list|<
name|int
argument_list|>
name|copy
init|=
name|list
decl_stmt|;
name|list
operator|+=
name|list
expr_stmt|;
name|QVERIFY
argument_list|(
name|l
operator|!=
name|list
operator|&&
name|l
operator|.
name|size
argument_list|()
operator|==
name|list
operator|.
name|size
argument_list|()
operator|/
literal|2
operator|&&
name|l
operator|==
name|copy
argument_list|)
expr_stmt|;
name|l
operator|+=
name|copy
expr_stmt|;
name|QVERIFY
argument_list|(
name|l
operator|==
name|list
argument_list|)
expr_stmt|;
name|list
operator|=
name|copy
expr_stmt|;
block|}
block|{
name|QLinkedList
argument_list|<
name|int
argument_list|>
name|copy
init|=
name|list
decl_stmt|;
name|list
operator|.
name|prepend
argument_list|(
literal|999
argument_list|)
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
literal|999
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|contains
argument_list|(
literal|999
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|count
argument_list|(
literal|999
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|list
operator|.
name|removeAll
argument_list|(
literal|999
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|==
name|copy
argument_list|)
expr_stmt|;
block|}
block|{
name|QLinkedList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|"one"
operator|<<
literal|"two"
operator|<<
literal|"three"
operator|<<
literal|"four"
operator|<<
literal|"five"
operator|<<
literal|"six"
expr_stmt|;
while|while
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
name|list
operator|.
name|removeAll
argument_list|(
name|list
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QLinkedList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|"one"
operator|<<
literal|"two"
operator|<<
literal|"one"
operator|<<
literal|"two"
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|list
operator|.
name|removeOne
argument_list|(
literal|"three"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|removeOne
argument_list|(
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QLinkedList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"one"
operator|<<
literal|"one"
operator|<<
literal|"two"
argument_list|)
expr_stmt|;
empty_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|removeOne
argument_list|(
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QLinkedList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"one"
operator|<<
literal|"one"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|list
operator|.
name|removeOne
argument_list|(
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QLinkedList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"one"
operator|<<
literal|"one"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|removeOne
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QLinkedList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"one"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|removeOne
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|list
operator|.
name|removeOne
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|begin
argument_list|()
operator|==
name|list
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QLinkedListIterator
argument_list|<
name|int
argument_list|>
name|i
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|i
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|i
operator|.
name|hasPrevious
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|QLinkedList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
name|list
operator|.
name|append
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|QLinkedList
argument_list|<
name|QString
argument_list|>
operator|::
name|iterator
name|it
init|=
name|list
operator|.
name|begin
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
operator|*
name|it
operator|)
index|[
literal|0
index|]
operator|==
name|QChar
argument_list|(
literal|'H'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|->
name|constData
argument_list|()
index|[
literal|0
index|]
operator|==
name|QChar
argument_list|(
literal|'H'
argument_list|)
argument_list|)
expr_stmt|;
name|it
operator|->
name|replace
argument_list|(
name|QChar
argument_list|(
literal|'H'
argument_list|)
argument_list|,
name|QChar
argument_list|(
literal|'X'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|first
argument_list|()
operator|==
literal|"Xello"
argument_list|)
expr_stmt|;
name|QLinkedList
argument_list|<
name|QString
argument_list|>
operator|::
name|const_iterator
name|cit
init|=
name|list
operator|.
name|constBegin
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
operator|*
name|cit
operator|)
operator|.
name|toLower
argument_list|()
operator|==
literal|"xello"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cit
operator|->
name|toUpper
argument_list|()
operator|==
literal|"XELLO"
argument_list|)
expr_stmt|;
block|}
block|{
name|QLinkedList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|"alpha"
operator|<<
literal|"beta"
expr_stmt|;
name|list
operator|+=
name|list
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
name|list
operator|.
name|begin
argument_list|()
operator|==
literal|"alpha"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
operator|(
name|list
operator|.
name|begin
argument_list|()
operator|+
literal|1
operator|)
operator|==
literal|"beta"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
operator|(
name|list
operator|.
name|begin
argument_list|()
operator|+
literal|2
operator|)
operator|==
literal|"alpha"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
operator|(
name|list
operator|.
name|begin
argument_list|()
operator|+
literal|3
operator|)
operator|==
literal|"beta"
argument_list|)
expr_stmt|;
block|}
block|{
name|QLinkedList
argument_list|<
name|int
argument_list|>
name|a
decl_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|a
operator|.
name|append
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|a
operator|.
name|append
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_function
DECL|function|vector
name|void
name|tst_Collections
operator|::
name|vector
parameter_list|()
block|{
name|QVector
argument_list|<
name|int
argument_list|>
name|v1
decl_stmt|;
name|v1
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
expr_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|v2
decl_stmt|;
name|v2
operator|<<
literal|4
operator|<<
literal|5
expr_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|v3
decl_stmt|;
name|v3
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
operator|<<
literal|4
operator|<<
literal|5
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|+
name|v2
operator|==
name|v3
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|emptyVector
decl_stmt|;
name|QCOMPARE
argument_list|(
name|emptyVector
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|#
directive|if
literal|0
comment|// this should trigger an assert
block|emptyVector.remove(3, -3);     QCOMPARE(emptyVector.size(), 0);
endif|#
directive|endif
name|emptyVector
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|emptyVector
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|v4
decl_stmt|;
name|v4
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|v4
operator|.
name|remove
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|v
decl_stmt|;
name|v
operator|.
name|append
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
name|v
operator|.
name|begin
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|v
operator|.
name|prepend
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|v
operator|<<
literal|3
operator|<<
literal|4
operator|<<
literal|5
operator|<<
literal|6
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STL
argument_list|)
name|QVERIFY
argument_list|(
name|std
operator|::
name|binary_search
argument_list|(
name|v
operator|.
name|begin
argument_list|()
argument_list|,
name|v
operator|.
name|end
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|std
operator|::
name|binary_search
argument_list|(
name|v
operator|.
name|begin
argument_list|()
argument_list|,
name|v
operator|.
name|end
argument_list|()
argument_list|,
literal|9
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|qBinaryFind
argument_list|(
name|v
operator|.
name|begin
argument_list|()
argument_list|,
name|v
operator|.
name|end
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|==
name|v
operator|.
name|begin
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qLowerBound
argument_list|(
name|v
operator|.
name|begin
argument_list|()
argument_list|,
name|v
operator|.
name|end
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|==
name|v
operator|.
name|begin
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qUpperBound
argument_list|(
name|v
operator|.
name|begin
argument_list|()
argument_list|,
name|v
operator|.
name|end
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|==
name|v
operator|.
name|begin
argument_list|()
operator|+
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qBinaryFind
argument_list|(
name|v
operator|.
name|begin
argument_list|()
argument_list|,
name|v
operator|.
name|end
argument_list|()
argument_list|,
literal|9
argument_list|)
operator|==
name|v
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qLowerBound
argument_list|(
name|v
operator|.
name|begin
argument_list|()
argument_list|,
name|v
operator|.
name|end
argument_list|()
argument_list|,
literal|9
argument_list|)
operator|==
name|v
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qUpperBound
argument_list|(
name|v
operator|.
name|begin
argument_list|()
argument_list|,
name|v
operator|.
name|end
argument_list|()
argument_list|,
literal|9
argument_list|)
operator|==
name|v
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|.
name|clear
argument_list|()
expr_stmt|;
name|v
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
expr_stmt|;
name|v
operator|.
name|insert
argument_list|(
name|v
operator|.
name|begin
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|v
operator|.
name|insert
argument_list|(
name|v
operator|.
name|end
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|v
operator|.
name|insert
argument_list|(
name|v
operator|.
name|begin
argument_list|()
operator|+
literal|2
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|result
decl_stmt|;
name|result
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|9
operator|<<
literal|2
operator|<<
literal|3
operator|<<
literal|4
expr_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|==
name|result
argument_list|)
expr_stmt|;
name|v
operator|.
name|clear
argument_list|()
expr_stmt|;
name|v
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
expr_stmt|;
name|v
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|v
operator|.
name|insert
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|v
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|==
name|result
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QString
argument_list|>
name|vec
decl_stmt|;
name|vec
operator|<<
literal|"foo"
operator|<<
literal|"bar"
expr_stmt|;
name|vec
operator|.
name|reserve
argument_list|(
literal|512
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|vec
index|[
literal|0
index|]
operator|==
literal|"foo"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|vec
index|[
literal|1
index|]
operator|==
literal|"bar"
argument_list|)
expr_stmt|;
name|int
name|initialLargeStaticCount
init|=
name|LargeStatic
operator|::
name|count
decl_stmt|;
block|{
name|QVector
argument_list|<
name|LargeStatic
argument_list|>
name|vector
decl_stmt|;
name|vector
operator|.
name|append
argument_list|(
name|LargeStatic
argument_list|()
argument_list|)
expr_stmt|;
name|vector
operator|.
name|resize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|LargeStatic
operator|::
name|count
argument_list|,
name|initialLargeStaticCount
argument_list|)
expr_stmt|;
block|{
name|QVector
argument_list|<
name|QString
argument_list|>
name|vector
decl_stmt|;
name|vector
operator|<<
literal|"alpha"
operator|<<
literal|"beta"
expr_stmt|;
name|vector
operator|+=
name|vector
expr_stmt|;
name|QVERIFY
argument_list|(
name|vector
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|vector
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
literal|"alpha"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|vector
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|==
literal|"beta"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|vector
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|==
literal|"alpha"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|vector
operator|.
name|at
argument_list|(
literal|3
argument_list|)
operator|==
literal|"beta"
argument_list|)
expr_stmt|;
block|}
name|int
name|originalLargeStaticCount
init|=
name|LargeStatic
operator|::
name|count
decl_stmt|;
block|{
name|QVector
argument_list|<
name|LargeStatic
argument_list|>
name|vector
argument_list|(
literal|5
argument_list|)
decl_stmt|;
block|}
name|QVERIFY
argument_list|(
name|LargeStatic
operator|::
name|count
operator|==
name|originalLargeStaticCount
argument_list|)
expr_stmt|;
block|{
name|QVector
argument_list|<
name|LargeStatic
argument_list|>
name|vector
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|LargeStatic
argument_list|>
name|list
init|=
name|vector
operator|.
name|toList
argument_list|()
decl_stmt|;
block|}
name|QVERIFY
argument_list|(
name|LargeStatic
operator|::
name|count
operator|==
name|originalLargeStaticCount
argument_list|)
expr_stmt|;
block|{
name|QVector
argument_list|<
name|LargeStatic
argument_list|>
name|vector
decl_stmt|;
name|LargeStatic
modifier|*
name|dummy
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
operator|++
name|i
control|)
block|{
operator|delete
name|dummy
expr_stmt|;
name|dummy
operator|=
operator|new
name|LargeStatic
expr_stmt|;
name|vector
operator|.
name|append
argument_list|(
name|LargeStatic
argument_list|()
argument_list|)
expr_stmt|;
block|}
operator|delete
name|dummy
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|LargeStatic
operator|::
name|count
operator|==
name|originalLargeStaticCount
argument_list|)
expr_stmt|;
name|int
name|originalMovableCount
init|=
name|Movable
operator|::
name|count
decl_stmt|;
block|{
name|QVector
argument_list|<
name|Movable
argument_list|>
name|vector
argument_list|(
literal|5
argument_list|)
decl_stmt|;
block|}
name|QVERIFY
argument_list|(
name|Movable
operator|::
name|count
operator|==
name|originalMovableCount
argument_list|)
expr_stmt|;
block|{
name|QVector
argument_list|<
name|Movable
argument_list|>
name|vector
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|Movable
argument_list|>
name|list
init|=
name|vector
operator|.
name|toList
argument_list|()
decl_stmt|;
block|}
name|QVERIFY
argument_list|(
name|Movable
operator|::
name|count
operator|==
name|originalMovableCount
argument_list|)
expr_stmt|;
block|{
name|QVector
argument_list|<
name|Movable
argument_list|>
name|vector
decl_stmt|;
name|Movable
modifier|*
name|dummy
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
operator|++
name|i
control|)
block|{
operator|delete
name|dummy
expr_stmt|;
name|dummy
operator|=
operator|new
name|Movable
expr_stmt|;
name|vector
operator|.
name|append
argument_list|(
name|Movable
argument_list|()
argument_list|)
expr_stmt|;
block|}
operator|delete
name|dummy
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|Movable
operator|::
name|count
operator|==
name|originalMovableCount
argument_list|)
expr_stmt|;
comment|// Check what happens when using references to own items.
comment|// Ideally we should run valgrind on this.
block|{
name|int
name|i
decl_stmt|;
name|QVector
argument_list|<
name|void
modifier|*
argument_list|>
name|vect1
decl_stmt|;
name|vect1
operator|.
name|append
argument_list|(
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|1
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|vect1
operator|.
name|append
argument_list|(
name|vect1
operator|.
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|vect1
operator|.
name|prepend
argument_list|(
name|vect1
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|vect1
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|vect1
operator|.
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|vect1
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|vect1
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|vect1
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|vect1
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|vect1
operator|.
name|replace
argument_list|(
name|i
argument_list|,
name|vect1
operator|.
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|vect1
operator|.
name|replace
argument_list|(
name|i
argument_list|,
name|vect1
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|vect1
operator|.
name|replace
argument_list|(
name|i
argument_list|,
name|vect1
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|vect1
operator|.
name|size
argument_list|()
argument_list|,
literal|496
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|vect1
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|vect1
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QVector
argument_list|<
name|QString
argument_list|>
name|vect2
decl_stmt|;
name|vect2
operator|.
name|append
argument_list|(
literal|"50"
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|1
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|vect2
operator|.
name|append
argument_list|(
name|vect2
operator|.
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|vect2
operator|.
name|prepend
argument_list|(
name|vect2
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|vect2
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|vect2
operator|.
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|vect2
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|vect2
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|vect2
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|vect2
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|vect2
operator|.
name|replace
argument_list|(
name|i
argument_list|,
name|vect2
operator|.
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|vect2
operator|.
name|replace
argument_list|(
name|i
argument_list|,
name|vect2
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|vect2
operator|.
name|replace
argument_list|(
name|i
argument_list|,
name|vect2
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|vect2
operator|.
name|size
argument_list|()
argument_list|,
literal|496
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|vect2
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|vect2
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"50"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QVector
argument_list|<
name|double
argument_list|>
name|vect3
decl_stmt|;
name|vect3
operator|.
name|append
argument_list|(
literal|50.0
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|1
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|vect3
operator|.
name|append
argument_list|(
name|vect3
operator|.
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|vect3
operator|.
name|prepend
argument_list|(
name|vect3
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|vect3
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|vect3
operator|.
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|vect3
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|vect3
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|vect3
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|vect3
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|vect3
operator|.
name|replace
argument_list|(
name|i
argument_list|,
name|vect3
operator|.
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|vect3
operator|.
name|replace
argument_list|(
name|i
argument_list|,
name|vect3
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|vect3
operator|.
name|replace
argument_list|(
name|i
argument_list|,
name|vect3
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|vect3
operator|.
name|size
argument_list|()
argument_list|,
literal|496
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|vect3
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|vect3
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
literal|50.0
argument_list|)
expr_stmt|;
block|}
name|QVector
argument_list|<
name|QTime
argument_list|>
name|vect4
decl_stmt|;
name|vect4
operator|.
name|append
argument_list|(
name|QTime
argument_list|(
literal|12
argument_list|,
literal|34
argument_list|,
literal|56
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|1
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|vect4
operator|.
name|append
argument_list|(
name|vect4
operator|.
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|vect4
operator|.
name|prepend
argument_list|(
name|vect4
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|vect4
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|vect4
operator|.
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|vect4
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|vect4
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|vect4
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|vect4
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|vect4
operator|.
name|replace
argument_list|(
name|i
argument_list|,
name|vect4
operator|.
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|vect4
operator|.
name|replace
argument_list|(
name|i
argument_list|,
name|vect4
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|vect4
operator|.
name|replace
argument_list|(
name|i
argument_list|,
name|vect4
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|vect4
operator|.
name|size
argument_list|()
argument_list|,
literal|496
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|vect4
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|vect4
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|QTime
argument_list|(
literal|12
argument_list|,
literal|34
argument_list|,
literal|56
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// this used to trigger an uninitialized read in valgrind
name|QVector
argument_list|<
name|char
argument_list|>
name|foo
decl_stmt|;
name|foo
operator|.
name|resize
argument_list|(
literal|144
argument_list|)
expr_stmt|;
block|{
name|QVector
argument_list|<
name|int
argument_list|>
name|a
decl_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|a
operator|.
name|append
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|a
operator|.
name|append
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|byteArray
name|void
name|tst_Collections
operator|::
name|byteArray
parameter_list|()
block|{
name|QByteArray
name|hello
init|=
literal|"hello"
decl_stmt|;
name|QByteArray
name|ello
init|=
literal|"ello"
decl_stmt|;
name|QByteArray
name|World
init|=
literal|"World"
decl_stmt|;
name|QByteArray
name|Wor
init|=
literal|"Wor"
decl_stmt|;
name|QByteArray
name|helloWorld
init|=
literal|"helloWorld"
decl_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|+
name|World
operator|==
name|helloWorld
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|+
literal|"World"
operator|==
name|helloWorld
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|"hello"
operator|+
name|World
operator|==
name|helloWorld
argument_list|)
expr_stmt|;
name|QByteArray
name|l
decl_stmt|;
name|QVERIFY
argument_list|(
literal|'h'
operator|+
name|ello
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|Wor
operator|+
literal|'l'
operator|+
literal|'d'
operator|==
literal|"World"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|+
name|World
operator|==
literal|"helloWorld"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|+
literal|"World"
operator|==
literal|"helloWorld"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|"hello"
operator|+
name|World
operator|==
literal|"helloWorld"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|'h'
operator|+
name|ello
operator|==
literal|"hello"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|Wor
operator|+
literal|'l'
operator|+
literal|'d'
operator|==
literal|"World"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|"helloWorld"
operator|==
name|hello
operator|+
name|World
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|"helloWorld"
operator|==
name|hello
operator|+
literal|"World"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|"helloWorld"
operator|==
literal|"hello"
operator|+
name|World
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|"hello"
operator|==
literal|'h'
operator|+
name|ello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|"World"
operator|==
name|Wor
operator|+
literal|'l'
operator|+
literal|'d'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|contains
argument_list|(
literal|'e'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|true
operator|==
name|hello
operator|.
name|contains
argument_list|(
literal|'e'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|contains
argument_list|(
literal|'e'
argument_list|)
operator|!=
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|indexOf
argument_list|(
literal|'e'
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|indexOf
argument_list|(
literal|'e'
argument_list|,
operator|-
literal|10
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|indexOf
argument_list|(
literal|'l'
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|indexOf
argument_list|(
literal|'l'
argument_list|,
literal|2
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|indexOf
argument_list|(
literal|'l'
argument_list|,
literal|3
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QByteArray
name|large
init|=
literal|"000 100 200 300 400 500 600 700 800 900"
decl_stmt|;
name|QVERIFY
argument_list|(
name|large
operator|.
name|indexOf
argument_list|(
literal|"700"
argument_list|)
operator|==
literal|28
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|large
operator|.
name|indexOf
argument_list|(
literal|"700"
argument_list|,
literal|28
argument_list|)
operator|==
literal|28
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|large
operator|.
name|indexOf
argument_list|(
literal|"700"
argument_list|,
literal|29
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|large
operator|.
name|lastIndexOf
argument_list|(
literal|"700"
argument_list|)
operator|==
literal|28
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|large
operator|.
name|lastIndexOf
argument_list|(
literal|"700"
argument_list|,
literal|28
argument_list|)
operator|==
literal|28
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|large
operator|.
name|lastIndexOf
argument_list|(
literal|"700"
argument_list|,
literal|27
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|large
operator|.
name|contains
argument_list|(
literal|"200"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|large
operator|.
name|contains
argument_list|(
literal|"201"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|large
operator|.
name|contains
argument_list|(
literal|'3'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|large
operator|.
name|contains
argument_list|(
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|large
operator|.
name|count
argument_list|(
literal|"00"
argument_list|)
operator|==
literal|11
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|large
operator|.
name|count
argument_list|(
literal|'3'
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|large
operator|.
name|count
argument_list|(
literal|'0'
argument_list|)
operator|==
literal|21
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|large
operator|.
name|count
argument_list|(
literal|"0"
argument_list|)
operator|==
literal|21
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|large
operator|.
name|count
argument_list|(
literal|"200"
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|large
operator|.
name|count
argument_list|(
literal|"201"
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|left
argument_list|(
literal|0
argument_list|)
operator|==
literal|""
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|hello
operator|.
name|left
argument_list|(
literal|0
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|left
argument_list|(
literal|1
argument_list|)
operator|==
literal|"h"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|left
argument_list|(
literal|2
argument_list|)
operator|==
literal|"he"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|left
argument_list|(
literal|200
argument_list|)
operator|==
literal|"hello"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|left
argument_list|(
name|hello
operator|.
name|size
argument_list|()
argument_list|)
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|left
argument_list|(
name|hello
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|right
argument_list|(
literal|0
argument_list|)
operator|==
literal|""
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|hello
operator|.
name|right
argument_list|(
literal|0
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|right
argument_list|(
literal|1
argument_list|)
operator|==
literal|"o"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|right
argument_list|(
literal|2
argument_list|)
operator|==
literal|"lo"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|right
argument_list|(
literal|200
argument_list|)
operator|==
literal|"hello"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|right
argument_list|(
name|hello
operator|.
name|size
argument_list|()
argument_list|)
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|right
argument_list|(
name|hello
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|hello
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|==
literal|"h"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
operator|==
literal|"he"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
literal|200
argument_list|)
operator|==
literal|"hello"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|mid
argument_list|(
literal|0
argument_list|)
operator|==
literal|"hello"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
name|hello
operator|.
name|size
argument_list|()
argument_list|)
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
name|hello
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|mid
argument_list|(
name|hello
operator|.
name|size
argument_list|()
operator|-
literal|0
argument_list|)
operator|==
literal|""
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|mid
argument_list|(
name|hello
operator|.
name|size
argument_list|()
operator|-
literal|0
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
comment|// weird but valid 3.x semantics
name|QVERIFY
argument_list|(
name|hello
operator|.
name|mid
argument_list|(
name|hello
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|"o"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|mid
argument_list|(
name|hello
operator|.
name|size
argument_list|()
operator|-
literal|2
argument_list|)
operator|==
literal|"lo"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|mid
argument_list|(
name|hello
operator|.
name|size
argument_list|()
operator|-
literal|200
argument_list|)
operator|==
literal|"hello"
argument_list|)
expr_stmt|;
name|QByteArray
name|null
decl_stmt|;
name|QByteArray
name|nonNull
init|=
literal|""
decl_stmt|;
name|QVERIFY
argument_list|(
name|null
operator|.
name|left
argument_list|(
literal|10
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|null
operator|.
name|mid
argument_list|(
literal|0
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
literal|0
block|QVERIFY(null == QByteArray::null);     QVERIFY(QByteArray::null  == null);     QVERIFY(nonNull != QByteArray::null);     QVERIFY(QByteArray::null != nonNull);     QVERIFY(null == nonNull);     QVERIFY(QByteArray::null == QByteArray::null);
endif|#
directive|endif
name|QByteArray
name|str
init|=
literal|"Hello"
decl_stmt|;
name|QByteArray
name|cstr
argument_list|(
name|str
operator|.
name|data
argument_list|()
argument_list|,
name|str
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|str
operator|==
literal|"Hello"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cstr
operator|==
literal|"Hello"
argument_list|)
expr_stmt|;
name|cstr
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|str
operator|==
literal|"Hello"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cstr
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|QByteArray
name|ba1
argument_list|(
literal|"Foo"
argument_list|)
decl_stmt|;
name|ba1
operator|.
name|prepend
argument_list|(
name|ba1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba1
argument_list|,
name|QByteArray
argument_list|(
literal|"FooFoo"
argument_list|)
argument_list|)
expr_stmt|;
name|ba1
operator|.
name|append
argument_list|(
name|ba1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba1
argument_list|,
name|QByteArray
argument_list|(
literal|"FooFooFooFoo"
argument_list|)
argument_list|)
expr_stmt|;
name|ba1
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba1
argument_list|,
name|QByteArray
argument_list|(
literal|"FoFooFooFooFoooFooFooFoo"
argument_list|)
argument_list|)
expr_stmt|;
name|ba1
operator|.
name|replace
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba1
argument_list|,
name|QByteArray
argument_list|(
literal|"FoFFoFooFooFooFoooFooFooFooooFooFoooFooFooFoo"
argument_list|)
argument_list|)
expr_stmt|;
name|ba1
operator|=
literal|"FooFoo"
expr_stmt|;
name|ba1
operator|.
name|replace
argument_list|(
name|char
argument_list|(
literal|'F'
argument_list|)
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba1
argument_list|,
name|QByteArray
argument_list|(
literal|"FooFooooFooFoooo"
argument_list|)
argument_list|)
expr_stmt|;
name|ba1
operator|=
literal|"FooFoo"
expr_stmt|;
name|ba1
operator|.
name|replace
argument_list|(
name|char
argument_list|(
literal|'o'
argument_list|)
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba1
argument_list|,
name|QByteArray
argument_list|(
literal|"FFooFooFooFooFFooFooFooFoo"
argument_list|)
argument_list|)
expr_stmt|;
name|ba1
operator|.
name|replace
argument_list|(
name|ba1
argument_list|,
literal|"xxx"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba1
argument_list|,
name|QByteArray
argument_list|(
literal|"xxx"
argument_list|)
argument_list|)
expr_stmt|;
name|ba1
operator|.
name|replace
argument_list|(
name|ba1
argument_list|,
name|QByteArray
argument_list|(
literal|"yyy"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba1
argument_list|,
name|QByteArray
argument_list|(
literal|"yyy"
argument_list|)
argument_list|)
expr_stmt|;
name|ba1
operator|+=
name|ba1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba1
argument_list|,
name|QByteArray
argument_list|(
literal|"yyyyyy"
argument_list|)
argument_list|)
expr_stmt|;
name|ba1
operator|.
name|remove
argument_list|(
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// do nothing
name|QCOMPARE
argument_list|(
name|ba1
argument_list|,
name|QByteArray
argument_list|(
literal|"yyyyyy"
argument_list|)
argument_list|)
expr_stmt|;
name|ba1
operator|.
name|replace
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|"ZZZ"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba1
argument_list|,
name|QByteArray
argument_list|(
literal|"ZZZyyyyyy"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_function
DECL|function|stack
name|void
name|tst_Collections
operator|::
name|stack
parameter_list|()
block|{
name|QStack
argument_list|<
name|int
argument_list|>
name|stack
decl_stmt|;
name|stack
operator|.
name|push
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|stack
operator|.
name|push
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|stack
operator|.
name|push
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QVectorIterator
argument_list|<
name|int
argument_list|>
name|i
init|=
name|stack
decl_stmt|;
name|i
operator|.
name|toBack
argument_list|()
expr_stmt|;
name|int
name|sum
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasPrevious
argument_list|()
condition|)
name|sum
operator|+=
name|i
operator|.
name|previous
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|6
argument_list|)
expr_stmt|;
name|sum
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|QStack
argument_list|<
name|int
argument_list|>
operator|::
name|iterator
name|i
init|=
name|stack
operator|.
name|begin
argument_list|()
init|;
name|i
operator|!=
name|stack
operator|.
name|end
argument_list|()
condition|;
operator|++
name|i
control|)
name|sum
operator|+=
operator|*
name|i
expr_stmt|;
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|6
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
name|sum
operator|-=
name|stack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hash
name|void
name|tst_Collections
operator|::
name|hash
parameter_list|()
block|{
specifier|const
name|char
modifier|*
name|hello
init|=
literal|"hello"
decl_stmt|;
specifier|const
name|char
modifier|*
name|world
init|=
literal|"world"
decl_stmt|;
specifier|const
name|char
modifier|*
name|allo
init|=
literal|"allo"
decl_stmt|;
specifier|const
name|char
modifier|*
name|monde
init|=
literal|"monde"
decl_stmt|;
block|{
typedef|typedef
name|QHash
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|Hash
typedef|;
name|Hash
name|hash
decl_stmt|;
name|QString
name|key
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|key
index|[
literal|0
index|]
operator|=
name|i
operator|+
literal|'0'
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
operator|++
name|j
control|)
block|{
name|key
index|[
literal|1
index|]
operator|=
name|j
operator|+
literal|'0'
expr_stmt|;
name|hash
operator|.
name|insert
argument_list|(
name|key
argument_list|,
literal|"V"
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|key
index|[
literal|0
index|]
operator|=
name|i
operator|+
literal|'0'
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
operator|++
name|j
control|)
block|{
name|key
index|[
literal|1
index|]
operator|=
name|j
operator|+
literal|'0'
expr_stmt|;
name|hash
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|{
typedef|typedef
name|QHash
argument_list|<
name|int
argument_list|,
specifier|const
name|char
modifier|*
argument_list|>
name|Hash
typedef|;
name|Hash
name|hash
decl_stmt|;
name|hash
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
name|hello
argument_list|)
expr_stmt|;
name|hash
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
name|world
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|hash
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|Hash
name|hash2
init|=
name|hash
decl_stmt|;
name|hash2
operator|=
name|hash
expr_stmt|;
name|hash
operator|=
name|hash2
expr_stmt|;
name|hash2
operator|=
name|hash2
expr_stmt|;
name|hash
operator|=
name|hash
expr_stmt|;
name|hash2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hash2
operator|=
name|hash2
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash2
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|hash
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
block|{
name|Hash
name|hash2
init|=
name|hash
decl_stmt|;
name|hash2
index|[
literal|1
index|]
operator|=
name|allo
expr_stmt|;
name|hash2
index|[
literal|2
index|]
operator|=
name|monde
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash2
index|[
literal|1
index|]
operator|==
name|allo
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash2
index|[
literal|2
index|]
operator|==
name|monde
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
index|[
literal|1
index|]
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
index|[
literal|2
index|]
operator|==
name|world
argument_list|)
expr_stmt|;
name|hash2
index|[
literal|1
index|]
operator|=
name|hash
index|[
literal|1
index|]
expr_stmt|;
name|hash2
index|[
literal|2
index|]
operator|=
name|hash
index|[
literal|2
index|]
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash2
index|[
literal|1
index|]
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash2
index|[
literal|2
index|]
operator|==
name|world
argument_list|)
expr_stmt|;
name|hash
index|[
literal|1
index|]
operator|=
name|hash
index|[
literal|1
index|]
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
index|[
literal|1
index|]
operator|==
name|hello
argument_list|)
expr_stmt|;
block|}
block|{
name|Hash
name|hash2
init|=
name|hash
decl_stmt|;
name|hash2
operator|.
name|detach
argument_list|()
expr_stmt|;
name|hash2
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash2
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|hash2
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash2
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|hash2
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash2
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|hash2
operator|.
name|remove
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash2
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
name|hash
operator|.
name|detach
argument_list|()
expr_stmt|;
block|{
name|Hash
operator|::
name|iterator
name|it1
init|=
name|hash
operator|.
name|find
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|it1
operator|!=
name|hash
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|Hash
operator|::
name|iterator
name|it2
init|=
name|hash
operator|.
name|find
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|it2
operator|!=
name|hash
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it2
operator|==
name|hash
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
operator|*
name|it1
operator|=
name|monde
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
name|it1
operator|==
name|monde
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
index|[
literal|1
index|]
operator|==
name|monde
argument_list|)
expr_stmt|;
operator|*
name|it1
operator|=
name|hello
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
name|it1
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
index|[
literal|1
index|]
operator|==
name|hello
argument_list|)
expr_stmt|;
name|hash
index|[
literal|1
index|]
operator|=
name|monde
expr_stmt|;
name|QVERIFY
argument_list|(
name|it1
operator|.
name|key
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it1
operator|.
name|value
argument_list|()
operator|==
name|monde
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
name|it1
operator|==
name|monde
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
index|[
literal|1
index|]
operator|==
name|monde
argument_list|)
expr_stmt|;
name|hash
index|[
literal|1
index|]
operator|=
name|hello
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
name|it1
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
index|[
literal|1
index|]
operator|==
name|hello
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|Hash
name|hash2
init|=
name|hash
decl_stmt|;
name|Hash
operator|::
name|const_iterator
name|it1
init|=
name|hash2
operator|.
name|find
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|it1
operator|!=
name|hash2
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it1
operator|.
name|key
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it1
operator|.
name|value
argument_list|()
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
name|it1
operator|==
name|hello
argument_list|)
expr_stmt|;
name|Hash
operator|::
name|const_iterator
name|it2
init|=
name|hash2
operator|.
name|find
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|it1
operator|!=
name|it2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it1
operator|!=
name|hash2
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it2
operator|!=
name|hash2
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|it1
operator|=
name|hash2
operator|.
name|begin
argument_list|()
expr_stmt|;
while|while
condition|(
name|it1
operator|!=
name|hash2
operator|.
name|end
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
operator|++
name|it1
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|count
operator|==
literal|2
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
name|it1
operator|=
name|hash
operator|.
name|begin
argument_list|()
expr_stmt|;
while|while
condition|(
name|it1
operator|!=
name|hash
operator|.
name|end
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
operator|++
name|it1
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|count
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
name|QVERIFY
argument_list|(
name|hash
operator|.
name|contains
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
operator|.
name|contains
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|hash
operator|.
name|contains
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|hash
operator|.
name|contains
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QVERIFY
argument_list|(
name|hash
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|==
name|world
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
operator|.
name|value
argument_list|(
literal|3
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
operator|.
name|value
argument_list|(
literal|1
argument_list|,
name|allo
argument_list|)
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
operator|.
name|value
argument_list|(
literal|2
argument_list|,
name|allo
argument_list|)
operator|==
name|world
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
operator|.
name|value
argument_list|(
literal|3
argument_list|,
name|allo
argument_list|)
operator|==
name|allo
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
operator|.
name|value
argument_list|(
literal|0
argument_list|,
name|monde
argument_list|)
operator|==
name|monde
argument_list|)
expr_stmt|;
block|}
block|{
name|QHash
argument_list|<
name|int
argument_list|,
name|LargeStatic
argument_list|>
name|hash
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
name|hash
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|LargeStatic
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|LargeStatic
operator|::
name|count
operator|==
literal|10
argument_list|)
expr_stmt|;
name|hash
operator|.
name|remove
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|LargeStatic
operator|::
name|count
operator|==
literal|9
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|LargeStatic
operator|::
name|count
operator|==
literal|0
argument_list|)
expr_stmt|;
block|{
name|QHash
argument_list|<
name|int
argument_list|,
name|int
modifier|*
argument_list|>
name|hash
decl_stmt|;
name|QVERIFY
argument_list|(
argument|((const QHash<int,int*>*)&hash)->operator[](
literal|7
argument|) ==
literal|0
argument_list|)
empty_stmt|;
block|}
block|{
comment|/*                 This test relies on a certain implementation of                 QHash. If you change the way QHash works internally,                 change this test as well.             */
name|QHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|hash
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
operator|++
name|i
control|)
name|hash
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
operator|.
name|capacity
argument_list|()
operator|==
literal|1031
argument_list|)
expr_stmt|;
name|hash
operator|.
name|squeeze
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
operator|.
name|capacity
argument_list|()
operator|==
literal|521
argument_list|)
expr_stmt|;
name|hash
operator|.
name|insert
argument_list|(
literal|12345
argument_list|,
literal|12345
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
operator|.
name|capacity
argument_list|()
operator|==
literal|1031
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|900
condition|;
operator|++
name|j
control|)
name|hash
operator|.
name|remove
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
operator|.
name|capacity
argument_list|()
operator|==
literal|257
argument_list|)
expr_stmt|;
name|hash
operator|.
name|squeeze
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
operator|.
name|capacity
argument_list|()
operator|==
literal|67
argument_list|)
expr_stmt|;
name|hash
operator|.
name|reserve
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|QHash
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|hash
decl_stmt|;
name|hash
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|"Hello"
argument_list|)
expr_stmt|;
name|QHash
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
operator|::
name|iterator
name|it
init|=
name|hash
operator|.
name|begin
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
operator|*
name|it
operator|)
index|[
literal|0
index|]
operator|==
name|QChar
argument_list|(
literal|'H'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|->
name|constData
argument_list|()
index|[
literal|0
index|]
operator|==
name|QChar
argument_list|(
literal|'H'
argument_list|)
argument_list|)
expr_stmt|;
name|it
operator|->
name|replace
argument_list|(
name|QChar
argument_list|(
literal|'H'
argument_list|)
argument_list|,
name|QChar
argument_list|(
literal|'X'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
name|hash
operator|.
name|begin
argument_list|()
operator|==
literal|"Xello"
argument_list|)
expr_stmt|;
name|QHash
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
operator|::
name|const_iterator
name|cit
init|=
name|hash
operator|.
name|constBegin
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
operator|*
name|cit
operator|)
operator|.
name|toLower
argument_list|()
operator|==
literal|"xello"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cit
operator|->
name|toUpper
argument_list|()
operator|==
literal|"XELLO"
argument_list|)
expr_stmt|;
block|}
block|{
name|QHash
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|hash1
decl_stmt|,
name|hash2
decl_stmt|;
name|hash1
operator|.
name|insertMulti
argument_list|(
literal|1
argument_list|,
literal|"Alpha"
argument_list|)
expr_stmt|;
name|hash1
operator|.
name|insertMulti
argument_list|(
literal|1
argument_list|,
literal|"Gamma"
argument_list|)
expr_stmt|;
name|hash2
operator|.
name|insertMulti
argument_list|(
literal|1
argument_list|,
literal|"Beta"
argument_list|)
expr_stmt|;
name|hash2
operator|.
name|insertMulti
argument_list|(
literal|1
argument_list|,
literal|"Gamma"
argument_list|)
expr_stmt|;
name|hash2
operator|.
name|insertMulti
argument_list|(
literal|1
argument_list|,
literal|"Gamma"
argument_list|)
expr_stmt|;
name|hash1
operator|.
name|unite
argument_list|(
name|hash2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash1
operator|.
name|size
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash1
operator|.
name|values
argument_list|()
argument_list|,
operator|(
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"Gamma"
operator|<<
literal|"Gamma"
operator|<<
literal|"Beta"
operator|<<
literal|"Gamma"
operator|<<
literal|"Alpha"
operator|)
argument_list|)
expr_stmt|;
name|hash2
operator|=
name|hash1
expr_stmt|;
name|hash2
operator|.
name|unite
argument_list|(
name|hash2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash2
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash2
operator|.
name|values
argument_list|()
argument_list|,
name|hash1
operator|.
name|values
argument_list|()
operator|+
name|hash1
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|map
name|void
name|tst_Collections
operator|::
name|map
parameter_list|()
block|{
specifier|const
name|char
modifier|*
name|hello
init|=
literal|"hello"
decl_stmt|;
specifier|const
name|char
modifier|*
name|world
init|=
literal|"world"
decl_stmt|;
specifier|const
name|char
modifier|*
name|allo
init|=
literal|"allo"
decl_stmt|;
specifier|const
name|char
modifier|*
name|monde
init|=
literal|"monde"
decl_stmt|;
block|{
typedef|typedef
name|QMap
argument_list|<
name|int
argument_list|,
specifier|const
name|char
modifier|*
argument_list|>
name|Map
typedef|;
name|Map
name|map
decl_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
name|hello
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
name|world
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
name|map
operator|.
name|begin
argument_list|()
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|map
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|Map
name|map2
init|=
name|map
decl_stmt|;
name|map2
operator|=
name|map
expr_stmt|;
name|map
operator|=
name|map2
expr_stmt|;
name|map2
operator|=
name|map2
expr_stmt|;
name|map
operator|=
name|map
expr_stmt|;
name|map2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|map2
operator|=
name|map2
expr_stmt|;
name|QVERIFY
argument_list|(
name|map2
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|map
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
block|{
name|Map
name|map2
init|=
name|map
decl_stmt|;
name|map2
index|[
literal|1
index|]
operator|=
name|allo
expr_stmt|;
name|map2
index|[
literal|2
index|]
operator|=
name|monde
expr_stmt|;
name|QVERIFY
argument_list|(
name|map2
index|[
literal|1
index|]
operator|==
name|allo
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map2
index|[
literal|2
index|]
operator|==
name|monde
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
index|[
literal|1
index|]
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
index|[
literal|2
index|]
operator|==
name|world
argument_list|)
expr_stmt|;
name|map2
index|[
literal|1
index|]
operator|=
name|map
index|[
literal|1
index|]
expr_stmt|;
name|map2
index|[
literal|2
index|]
operator|=
name|map
index|[
literal|2
index|]
expr_stmt|;
name|QVERIFY
argument_list|(
name|map2
index|[
literal|1
index|]
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map2
index|[
literal|2
index|]
operator|==
name|world
argument_list|)
expr_stmt|;
name|map
index|[
literal|1
index|]
operator|=
name|map
index|[
literal|1
index|]
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
index|[
literal|1
index|]
operator|==
name|hello
argument_list|)
expr_stmt|;
block|}
block|{
name|Map
name|map2
init|=
name|map
decl_stmt|;
name|map2
operator|.
name|detach
argument_list|()
expr_stmt|;
name|map2
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map2
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|map2
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map2
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|map2
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map2
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|map2
operator|.
name|remove
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map2
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|detach
argument_list|()
expr_stmt|;
block|{
name|Map
operator|::
name|iterator
name|it1
init|=
name|map
operator|.
name|find
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|it1
operator|==
name|map
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it1
operator|!=
name|map
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|Map
operator|::
name|iterator
name|it2
init|=
name|map
operator|.
name|find
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|it2
operator|!=
name|map
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it2
operator|==
name|map
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
operator|*
name|it1
operator|=
name|monde
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
name|it1
operator|==
name|monde
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
index|[
literal|1
index|]
operator|==
name|monde
argument_list|)
expr_stmt|;
operator|*
name|it1
operator|=
name|hello
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
name|it1
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
index|[
literal|1
index|]
operator|==
name|hello
argument_list|)
expr_stmt|;
name|map
index|[
literal|1
index|]
operator|=
name|monde
expr_stmt|;
name|QVERIFY
argument_list|(
name|it1
operator|.
name|key
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it1
operator|.
name|value
argument_list|()
operator|==
name|monde
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
name|it1
operator|==
name|monde
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
index|[
literal|1
index|]
operator|==
name|monde
argument_list|)
expr_stmt|;
name|map
index|[
literal|1
index|]
operator|=
name|hello
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
name|it1
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
index|[
literal|1
index|]
operator|==
name|hello
argument_list|)
expr_stmt|;
operator|*
operator|++
name|it1
operator|=
name|allo
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
name|it1
operator|==
name|allo
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
index|[
literal|2
index|]
operator|==
name|allo
argument_list|)
expr_stmt|;
operator|*
name|it1
operator|=
name|world
expr_stmt|;
operator|++
name|it1
expr_stmt|;
name|QVERIFY
argument_list|(
name|it1
operator|==
name|map
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|it1
operator|=
name|map
operator|.
name|begin
argument_list|()
expr_stmt|;
while|while
condition|(
name|it1
operator|!=
name|map
operator|.
name|end
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
operator|++
name|it1
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|count
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|Map
name|map2
init|=
name|map
decl_stmt|;
name|Map
operator|::
name|const_iterator
name|it1
init|=
name|map2
operator|.
name|find
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|it1
operator|!=
name|map2
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it1
operator|.
name|key
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it1
operator|.
name|value
argument_list|()
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
name|it1
operator|==
name|hello
argument_list|)
expr_stmt|;
operator|++
name|it1
expr_stmt|;
name|Map
operator|::
name|const_iterator
name|it2
init|=
name|map2
operator|.
name|find
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|it1
operator|==
name|it2
argument_list|)
expr_stmt|;
operator|++
name|it1
expr_stmt|;
name|QVERIFY
argument_list|(
name|it1
operator|==
name|map2
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it2
operator|!=
name|map2
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it1
operator|!=
name|it2
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|it1
operator|=
name|map2
operator|.
name|begin
argument_list|()
expr_stmt|;
while|while
condition|(
name|it1
operator|!=
name|map2
operator|.
name|end
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
operator|++
name|it1
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|count
operator|==
literal|2
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
name|it1
operator|=
name|map
operator|.
name|begin
argument_list|()
expr_stmt|;
while|while
condition|(
name|it1
operator|!=
name|map
operator|.
name|end
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
operator|++
name|it1
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|count
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
name|QVERIFY
argument_list|(
name|map
operator|.
name|contains
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|contains
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|map
operator|.
name|contains
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|map
operator|.
name|contains
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QVERIFY
argument_list|(
name|map
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|==
name|world
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|value
argument_list|(
literal|3
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|value
argument_list|(
literal|1
argument_list|,
name|allo
argument_list|)
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|value
argument_list|(
literal|2
argument_list|,
name|allo
argument_list|)
operator|==
name|world
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|value
argument_list|(
literal|3
argument_list|,
name|allo
argument_list|)
operator|==
name|allo
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|value
argument_list|(
literal|0
argument_list|,
name|monde
argument_list|)
operator|==
name|monde
argument_list|)
expr_stmt|;
block|}
name|int
name|originalLargeStaticCount
init|=
name|LargeStatic
operator|::
name|count
decl_stmt|;
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|LargeStatic
argument_list|>
name|map
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
name|map
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|LargeStatic
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|LargeStatic
operator|::
name|count
operator|==
operator|(
name|originalLargeStaticCount
operator|+
literal|10
operator|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|remove
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|LargeStatic
operator|::
name|count
operator|==
operator|(
name|originalLargeStaticCount
operator|+
literal|9
operator|)
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|LargeStatic
operator|::
name|count
operator|==
name|originalLargeStaticCount
argument_list|)
expr_stmt|;
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|int
modifier|*
argument_list|>
name|map
decl_stmt|;
name|QVERIFY
argument_list|(
argument|((const QMap<int,int*>*)&map)->operator[](
literal|7
argument|) ==
literal|0
argument_list|)
empty_stmt|;
block|}
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|map
decl_stmt|;
name|map
index|[
literal|0
index|]
operator|=
literal|1
expr_stmt|;
name|map
index|[
literal|1
index|]
operator|=
literal|2
expr_stmt|;
name|map
index|[
literal|2
index|]
operator|=
literal|4
expr_stmt|;
name|map
index|[
literal|3
index|]
operator|=
literal|8
expr_stmt|;
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|int
name|sumkey
init|=
literal|0
decl_stmt|;
name|QMapIterator
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|i
init|=
name|map
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sum
operator|+=
name|i
operator|.
name|next
argument_list|()
operator|.
name|value
argument_list|()
expr_stmt|;
name|sumkey
operator|+=
name|i
operator|.
name|key
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|15
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sumkey
operator|==
literal|6
argument_list|)
expr_stmt|;
block|}
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|map
decl_stmt|;
name|map
index|[
literal|0
index|]
operator|=
literal|1
expr_stmt|;
name|map
index|[
literal|1
index|]
operator|=
literal|2
expr_stmt|;
name|map
index|[
literal|2
index|]
operator|=
literal|4
expr_stmt|;
name|map
index|[
literal|3
index|]
operator|=
literal|8
expr_stmt|;
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|QMutableMapIterator
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|i
init|=
name|map
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
if|if
condition|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|key
argument_list|()
operator|==
literal|2
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
name|i
operator|.
name|toFront
argument_list|()
expr_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sum
operator|+=
name|i
operator|.
name|next
argument_list|()
operator|.
name|value
argument_list|()
expr_stmt|;
name|i
operator|.
name|setValue
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|i
operator|.
name|value
argument_list|()
operator|+=
literal|22
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|value
argument_list|()
operator|==
literal|32
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|11
argument_list|)
expr_stmt|;
block|}
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|map
decl_stmt|;
name|map
index|[
literal|0
index|]
operator|=
literal|1
expr_stmt|;
name|QMutableMapIterator
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|i
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|i
operator|.
name|toBack
argument_list|()
expr_stmt|;
while|while
condition|(
name|i
operator|.
name|hasPrevious
argument_list|()
condition|)
block|{
name|i
operator|.
name|previous
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i
operator|.
name|key
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i
operator|.
name|value
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|{
name|QMultiMap
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
name|map1
decl_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|"1"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|"1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|"a"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|"a"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|"b"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|"b"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QMultiMap
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
operator|::
name|iterator
name|j1
decl_stmt|,
name|k1
decl_stmt|;
name|j1
operator|=
name|map1
operator|.
name|lowerBound
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|k1
operator|=
name|map1
operator|.
name|upperBound
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|j1
operator|==
name|map1
operator|.
name|begin
argument_list|()
operator|&&
name|k1
operator|==
name|j1
argument_list|)
expr_stmt|;
name|j1
operator|=
name|map1
operator|.
name|lowerBound
argument_list|(
literal|"00"
argument_list|)
expr_stmt|;
name|k1
operator|=
name|map1
operator|.
name|upperBound
argument_list|(
literal|"00"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|j1
operator|==
name|map1
operator|.
name|find
argument_list|(
literal|"1"
argument_list|)
operator|&&
name|k1
operator|==
name|j1
argument_list|)
expr_stmt|;
name|j1
operator|=
name|map1
operator|.
name|lowerBound
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|k1
operator|=
name|map1
operator|.
name|upperBound
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|j1
operator|==
name|map1
operator|.
name|find
argument_list|(
literal|"1"
argument_list|)
operator|&&
operator|--
operator|(
operator|--
name|k1
operator|)
operator|==
name|j1
argument_list|)
expr_stmt|;
name|j1
operator|=
name|map1
operator|.
name|lowerBound
argument_list|(
literal|"11"
argument_list|)
expr_stmt|;
name|k1
operator|=
name|map1
operator|.
name|upperBound
argument_list|(
literal|"11"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|j1
operator|==
name|map1
operator|.
name|find
argument_list|(
literal|"a"
argument_list|)
operator|&&
name|k1
operator|==
name|j1
argument_list|)
expr_stmt|;
name|j1
operator|=
name|map1
operator|.
name|lowerBound
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|k1
operator|=
name|map1
operator|.
name|upperBound
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|j1
operator|==
name|map1
operator|.
name|find
argument_list|(
literal|"a"
argument_list|)
operator|&&
name|k1
operator|==
name|map1
operator|.
name|find
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|j1
operator|.
name|value
argument_list|()
operator|==
literal|1
operator|&&
name|j1
operator|.
name|value
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|j1
operator|=
name|map1
operator|.
name|lowerBound
argument_list|(
literal|"aa"
argument_list|)
expr_stmt|;
name|k1
operator|=
name|map1
operator|.
name|upperBound
argument_list|(
literal|"aa"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|j1
operator|==
name|map1
operator|.
name|find
argument_list|(
literal|"b"
argument_list|)
operator|&&
name|k1
operator|==
name|j1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|j1
operator|.
name|value
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|j1
operator|=
name|map1
operator|.
name|lowerBound
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|k1
operator|=
name|map1
operator|.
name|upperBound
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|j1
operator|==
name|map1
operator|.
name|find
argument_list|(
literal|"b"
argument_list|)
operator|&&
name|k1
operator|==
name|map1
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|j1
operator|.
name|value
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|j1
operator|=
name|map1
operator|.
name|lowerBound
argument_list|(
literal|"bb"
argument_list|)
expr_stmt|;
name|k1
operator|=
name|map1
operator|.
name|upperBound
argument_list|(
literal|"bb"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|j1
operator|==
name|map1
operator|.
name|end
argument_list|()
operator|&&
name|k1
operator|==
name|j1
argument_list|)
expr_stmt|;
specifier|const
name|QMultiMap
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
name|map2
init|=
name|map1
decl_stmt|;
name|QMultiMap
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
operator|::
name|const_iterator
name|j2
decl_stmt|,
name|k2
decl_stmt|;
name|j2
operator|=
name|map2
operator|.
name|lowerBound
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|k2
operator|=
name|map2
operator|.
name|upperBound
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|j2
operator|==
name|map2
operator|.
name|begin
argument_list|()
operator|&&
name|k2
operator|==
name|j2
argument_list|)
expr_stmt|;
name|j2
operator|=
name|map2
operator|.
name|lowerBound
argument_list|(
literal|"00"
argument_list|)
expr_stmt|;
name|k2
operator|=
name|map2
operator|.
name|upperBound
argument_list|(
literal|"00"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|j2
operator|==
name|map2
operator|.
name|find
argument_list|(
literal|"1"
argument_list|)
operator|&&
name|k2
operator|==
name|j2
argument_list|)
expr_stmt|;
name|j2
operator|=
name|map2
operator|.
name|lowerBound
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|k2
operator|=
name|map2
operator|.
name|upperBound
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|j2
operator|==
name|map2
operator|.
name|find
argument_list|(
literal|"1"
argument_list|)
operator|&&
operator|--
operator|(
operator|--
name|k2
operator|)
operator|==
name|j2
argument_list|)
expr_stmt|;
name|j2
operator|=
name|map2
operator|.
name|lowerBound
argument_list|(
literal|"11"
argument_list|)
expr_stmt|;
name|k2
operator|=
name|map2
operator|.
name|upperBound
argument_list|(
literal|"11"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|j2
operator|==
name|map2
operator|.
name|find
argument_list|(
literal|"a"
argument_list|)
operator|&&
name|k2
operator|==
name|j2
argument_list|)
expr_stmt|;
name|j2
operator|=
name|map2
operator|.
name|lowerBound
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|k2
operator|=
name|map2
operator|.
name|upperBound
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|j2
operator|==
name|map2
operator|.
name|find
argument_list|(
literal|"a"
argument_list|)
operator|&&
name|k2
operator|==
name|map2
operator|.
name|find
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|j2
operator|.
name|value
argument_list|()
operator|==
literal|1
operator|&&
name|j2
operator|.
name|value
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|j2
operator|=
name|map2
operator|.
name|lowerBound
argument_list|(
literal|"aa"
argument_list|)
expr_stmt|;
name|k2
operator|=
name|map2
operator|.
name|upperBound
argument_list|(
literal|"aa"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|j2
operator|==
name|map2
operator|.
name|find
argument_list|(
literal|"b"
argument_list|)
operator|&&
name|k2
operator|==
name|j2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|j2
operator|.
name|value
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|j2
operator|=
name|map2
operator|.
name|lowerBound
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|k2
operator|=
name|map2
operator|.
name|upperBound
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|j2
operator|==
name|map2
operator|.
name|find
argument_list|(
literal|"b"
argument_list|)
operator|&&
name|k2
operator|==
name|map2
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|j2
operator|.
name|value
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|j2
operator|=
name|map2
operator|.
name|lowerBound
argument_list|(
literal|"bb"
argument_list|)
expr_stmt|;
name|k2
operator|=
name|map2
operator|.
name|upperBound
argument_list|(
literal|"bb"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|j2
operator|==
name|map2
operator|.
name|end
argument_list|()
operator|&&
name|k2
operator|==
name|j2
argument_list|)
expr_stmt|;
block|}
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|map
decl_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|"Hello"
argument_list|)
expr_stmt|;
name|QMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
operator|::
name|iterator
name|it
init|=
name|map
operator|.
name|begin
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
operator|*
name|it
operator|)
index|[
literal|0
index|]
operator|==
name|QChar
argument_list|(
literal|'H'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|->
name|constData
argument_list|()
index|[
literal|0
index|]
operator|==
name|QChar
argument_list|(
literal|'H'
argument_list|)
argument_list|)
expr_stmt|;
name|it
operator|->
name|replace
argument_list|(
name|QChar
argument_list|(
literal|'H'
argument_list|)
argument_list|,
name|QChar
argument_list|(
literal|'X'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
name|map
operator|.
name|begin
argument_list|()
operator|==
literal|"Xello"
argument_list|)
expr_stmt|;
name|QMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
operator|::
name|const_iterator
name|cit
init|=
name|map
operator|.
name|constBegin
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
operator|*
name|cit
operator|)
operator|.
name|toLower
argument_list|()
operator|==
literal|"xello"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cit
operator|->
name|toUpper
argument_list|()
operator|==
literal|"XELLO"
argument_list|)
expr_stmt|;
block|}
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|map1
decl_stmt|,
name|map2
decl_stmt|;
name|map1
operator|.
name|insertMulti
argument_list|(
literal|1
argument_list|,
literal|"Alpha"
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insertMulti
argument_list|(
literal|1
argument_list|,
literal|"Gamma"
argument_list|)
expr_stmt|;
name|map2
operator|.
name|insertMulti
argument_list|(
literal|1
argument_list|,
literal|"Beta"
argument_list|)
expr_stmt|;
name|map2
operator|.
name|insertMulti
argument_list|(
literal|1
argument_list|,
literal|"Gamma"
argument_list|)
expr_stmt|;
name|map2
operator|.
name|insertMulti
argument_list|(
literal|1
argument_list|,
literal|"Gamma"
argument_list|)
expr_stmt|;
name|map1
operator|.
name|unite
argument_list|(
name|map2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|size
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
name|QStringList
argument_list|>
argument_list|(
name|map1
operator|.
name|values
argument_list|()
argument_list|)
argument_list|,
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Gamma"
operator|<<
literal|"Gamma"
operator|<<
literal|"Beta"
operator|<<
literal|"Gamma"
operator|<<
literal|"Alpha"
operator|)
argument_list|)
expr_stmt|;
name|map2
operator|=
name|map1
expr_stmt|;
name|map2
operator|.
name|unite
argument_list|(
name|map2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map2
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map2
operator|.
name|values
argument_list|()
argument_list|,
name|map1
operator|.
name|values
argument_list|()
operator|+
name|map1
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qstring
name|void
name|tst_Collections
operator|::
name|qstring
parameter_list|()
block|{
name|QString
name|hello
init|=
literal|"hello"
decl_stmt|;
name|QString
name|ello
init|=
literal|"ello"
decl_stmt|;
name|QString
name|World
init|=
literal|"World"
decl_stmt|;
name|QString
name|Wor
init|=
literal|"Wor"
decl_stmt|;
name|QString
name|helloWorld
init|=
literal|"helloWorld"
decl_stmt|;
name|QString
name|s
init|=
name|hello
operator|+
literal|"World"
decl_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|+
name|World
operator|==
name|helloWorld
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|+
literal|"World"
operator|==
name|helloWorld
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|"hello"
operator|+
name|World
operator|==
name|helloWorld
argument_list|)
expr_stmt|;
name|QString
name|l
decl_stmt|;
name|QVERIFY
argument_list|(
literal|'h'
operator|+
name|ello
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|Wor
operator|+
literal|'l'
operator|+
literal|'d'
operator|==
literal|"World"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|+
name|World
operator|==
literal|"helloWorld"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|+
literal|"World"
operator|==
literal|"helloWorld"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|"hello"
operator|+
name|World
operator|==
literal|"helloWorld"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|'h'
operator|+
name|ello
operator|==
literal|"hello"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|Wor
operator|+
literal|'l'
operator|+
literal|'d'
operator|==
literal|"World"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|"helloWorld"
operator|==
name|hello
operator|+
name|World
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|"helloWorld"
operator|==
name|hello
operator|+
literal|"World"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|"helloWorld"
operator|==
literal|"hello"
operator|+
name|World
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|"hello"
operator|==
literal|'h'
operator|+
name|ello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|"World"
operator|==
name|Wor
operator|+
literal|'l'
operator|+
literal|'d'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|contains
argument_list|(
literal|'e'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|true
operator|==
name|hello
operator|.
name|contains
argument_list|(
literal|'e'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|contains
argument_list|(
literal|'e'
argument_list|)
operator|!=
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|indexOf
argument_list|(
literal|'e'
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|indexOf
argument_list|(
literal|'e'
argument_list|,
operator|-
literal|10
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|indexOf
argument_list|(
literal|'l'
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|indexOf
argument_list|(
literal|'l'
argument_list|,
literal|2
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|indexOf
argument_list|(
literal|'l'
argument_list|,
literal|3
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QString
name|large
init|=
literal|"000 100 200 300 400 500 600 700 800 900"
decl_stmt|;
name|QVERIFY
argument_list|(
name|large
operator|.
name|indexOf
argument_list|(
literal|"700"
argument_list|)
operator|==
literal|28
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|large
operator|.
name|indexOf
argument_list|(
literal|"700"
argument_list|,
literal|28
argument_list|)
operator|==
literal|28
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|large
operator|.
name|indexOf
argument_list|(
literal|"700"
argument_list|,
literal|29
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|large
operator|.
name|lastIndexOf
argument_list|(
literal|"700"
argument_list|)
operator|==
literal|28
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|large
operator|.
name|lastIndexOf
argument_list|(
literal|"700"
argument_list|,
literal|28
argument_list|)
operator|==
literal|28
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|large
operator|.
name|lastIndexOf
argument_list|(
literal|"700"
argument_list|,
literal|27
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|large
operator|.
name|contains
argument_list|(
literal|"200"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|large
operator|.
name|contains
argument_list|(
literal|"201"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|large
operator|.
name|contains
argument_list|(
literal|'3'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|large
operator|.
name|contains
argument_list|(
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|large
operator|.
name|count
argument_list|(
literal|"00"
argument_list|)
operator|==
literal|11
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|large
operator|.
name|count
argument_list|(
literal|'3'
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|large
operator|.
name|count
argument_list|(
literal|'0'
argument_list|)
operator|==
literal|21
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|large
operator|.
name|count
argument_list|(
literal|"0"
argument_list|)
operator|==
literal|21
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|large
operator|.
name|count
argument_list|(
literal|"200"
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|large
operator|.
name|count
argument_list|(
literal|"201"
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|left
argument_list|(
literal|0
argument_list|)
operator|==
literal|""
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|hello
operator|.
name|left
argument_list|(
literal|0
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|left
argument_list|(
literal|1
argument_list|)
operator|==
literal|"h"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|left
argument_list|(
literal|2
argument_list|)
operator|==
literal|"he"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|left
argument_list|(
literal|200
argument_list|)
operator|==
literal|"hello"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|left
argument_list|(
name|hello
operator|.
name|size
argument_list|()
argument_list|)
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|left
argument_list|(
name|hello
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|right
argument_list|(
literal|0
argument_list|)
operator|==
literal|""
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|hello
operator|.
name|right
argument_list|(
literal|0
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|right
argument_list|(
literal|1
argument_list|)
operator|==
literal|"o"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|right
argument_list|(
literal|2
argument_list|)
operator|==
literal|"lo"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|right
argument_list|(
literal|200
argument_list|)
operator|==
literal|"hello"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|right
argument_list|(
name|hello
operator|.
name|size
argument_list|()
argument_list|)
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|right
argument_list|(
name|hello
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|hello
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|==
literal|"h"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
operator|==
literal|"he"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
literal|200
argument_list|)
operator|==
literal|"hello"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|mid
argument_list|(
literal|0
argument_list|)
operator|==
literal|"hello"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
name|hello
operator|.
name|size
argument_list|()
argument_list|)
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
name|hello
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|mid
argument_list|(
name|hello
operator|.
name|size
argument_list|()
operator|-
literal|0
argument_list|)
operator|==
literal|""
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|mid
argument_list|(
name|hello
operator|.
name|size
argument_list|()
operator|-
literal|0
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|mid
argument_list|(
name|hello
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|"o"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|mid
argument_list|(
name|hello
operator|.
name|size
argument_list|()
operator|-
literal|2
argument_list|)
operator|==
literal|"lo"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hello
operator|.
name|mid
argument_list|(
name|hello
operator|.
name|size
argument_list|()
operator|-
literal|200
argument_list|)
operator|==
literal|"hello"
argument_list|)
expr_stmt|;
name|QString
name|null
decl_stmt|;
name|QString
name|nonNull
init|=
literal|""
decl_stmt|;
name|QVERIFY
argument_list|(
name|null
operator|.
name|left
argument_list|(
literal|10
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|null
operator|.
name|mid
argument_list|(
literal|0
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|null
operator|==
name|QString
operator|::
name|null
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QString
operator|::
name|null
operator|==
name|null
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nonNull
operator|!=
name|QString
operator|::
name|null
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QString
operator|::
name|null
operator|!=
name|nonNull
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|null
operator|==
name|nonNull
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QString
operator|::
name|null
operator|==
name|QString
operator|::
name|null
argument_list|)
expr_stmt|;
name|QString
name|fill
init|=
literal|"123"
decl_stmt|;
name|fill
operator|.
name|fill
argument_list|(
literal|'a'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fill
operator|==
literal|"aaa"
argument_list|)
expr_stmt|;
name|s
operator|.
name|clear
argument_list|()
expr_stmt|;
name|s
operator|=
name|hello
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|World
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|==
name|helloWorld
argument_list|)
expr_stmt|;
name|s
operator|.
name|clear
argument_list|()
expr_stmt|;
name|s
operator|=
name|World
expr_stmt|;
name|s
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|==
name|helloWorld
argument_list|)
expr_stmt|;
name|s
operator|=
literal|"012345"
expr_stmt|;
name|s
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|'E'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|==
literal|"012E345"
argument_list|)
expr_stmt|;
name|s
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|"INSID"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|==
literal|"012INSIDE345"
argument_list|)
expr_stmt|;
name|s
operator|=
literal|"short"
expr_stmt|;
name|s
operator|.
name|insert
argument_list|(
literal|7
argument_list|,
literal|'E'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|==
literal|"short  E"
argument_list|)
expr_stmt|;
name|s
operator|=
literal|"short"
expr_stmt|;
name|s
operator|.
name|insert
argument_list|(
literal|7
argument_list|,
literal|"END"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|==
literal|"short  END"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"hello"
argument_list|)
operator|==
literal|"hello"
argument_list|)
expr_stmt|;
name|s
operator|=
literal|"first"
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|toLatin1
argument_list|()
operator|==
literal|"first"
argument_list|)
expr_stmt|;
name|s
operator|=
literal|"second"
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|toLatin1
argument_list|()
operator|==
literal|"second"
argument_list|)
expr_stmt|;
name|s
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|toLatin1
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|toLatin1
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|toLatin1
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|=
literal|"first-utf8"
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|toUtf8
argument_list|()
operator|==
literal|"first-utf8"
argument_list|)
expr_stmt|;
name|s
operator|=
literal|"second-utf8"
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|toUtf8
argument_list|()
operator|==
literal|"second-utf8"
argument_list|)
expr_stmt|;
name|s
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|toUtf8
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|toUtf8
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|toUtf8
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|=
literal|"first-utf8"
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|toUtf8
argument_list|()
operator|==
literal|"first-utf8"
argument_list|)
expr_stmt|;
name|s
operator|=
literal|"second-utf8"
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|toUtf8
argument_list|()
operator|==
literal|"second-utf8"
argument_list|)
expr_stmt|;
name|s
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|toUtf8
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|toUtf8
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|toUtf8
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|=
literal|"first-local8Bit"
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|toLocal8Bit
argument_list|()
operator|==
literal|"first-local8Bit"
argument_list|)
expr_stmt|;
name|s
operator|=
literal|"second-local8Bit"
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|toLocal8Bit
argument_list|()
operator|==
literal|"second-local8Bit"
argument_list|)
expr_stmt|;
name|s
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|=
literal|"first-ascii"
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|toAscii
argument_list|()
operator|==
literal|"first-ascii"
argument_list|)
expr_stmt|;
name|s
operator|=
literal|"second-ascii"
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|toAscii
argument_list|()
operator|==
literal|"second-ascii"
argument_list|)
expr_stmt|;
name|s
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|toAscii
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|toAscii
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|toAscii
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|=
literal|"ascii"
expr_stmt|;
name|s
operator|+=
operator|(
name|uchar
operator|)
literal|0xb0
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|toUtf8
argument_list|()
operator|!=
name|s
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|sa
init|=
name|s
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|sa
index|[
name|sa
operator|.
name|length
argument_list|()
operator|-
literal|1
index|]
operator|==
operator|(
name|ushort
operator|)
literal|0xb0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sa
operator|.
name|left
argument_list|(
name|sa
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|"ascii"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|==
name|QString
operator|::
name|fromUtf8
argument_list|(
name|s
operator|.
name|toUtf8
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
literal|"12"
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|'3'
argument_list|)
expr_stmt|;
name|s
operator|+=
literal|'4'
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|==
literal|"1234"
argument_list|)
expr_stmt|;
name|s
operator|=
literal|"repend"
expr_stmt|;
name|s
operator|.
name|prepend
argument_list|(
literal|'p'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|==
literal|"prepend"
argument_list|)
expr_stmt|;
name|s
operator|.
name|prepend
argument_list|(
literal|"abc "
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|==
literal|"abc prepend"
argument_list|)
expr_stmt|;
name|s
operator|=
literal|"   whitespace        "
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|trimmed
argument_list|()
operator|==
literal|"whitespace"
argument_list|)
expr_stmt|;
name|s
operator|=
literal|"    lots      of  stuff       "
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|simplified
argument_list|()
operator|==
literal|"lots of stuff"
argument_list|)
expr_stmt|;
name|s
operator|=
literal|"a hat, a stick, a ski"
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
index|[
literal|2
index|]
operator|==
literal|'h'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
index|[
literal|1
index|]
operator|<
literal|'b'
argument_list|)
expr_stmt|;
name|s
operator|=
literal|"12223"
expr_stmt|;
name|s
operator|.
name|remove
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|==
literal|"123"
argument_list|)
expr_stmt|;
name|s
operator|=
literal|"(%1)(%2)"
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|arg
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|arg
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|==
literal|"(foo)(7)"
argument_list|)
expr_stmt|;
if|#
directive|if
literal|0
block|s = "stl rocks";     std::string stl_string = s;     s = stl_string;     QVERIFY(s == "stl rocks");
endif|#
directive|endif
block|{
name|QString
name|str
argument_list|(
literal|"Bananas"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|str
operator|.
name|startsWith
argument_list|(
literal|"Ban"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|false
operator|==
name|str
operator|.
name|startsWith
argument_list|(
literal|"Car"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QString
name|str
argument_list|(
literal|"Bananas"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|str
operator|.
name|endsWith
argument_list|(
literal|"anas"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|false
operator|==
name|str
operator|.
name|endsWith
argument_list|(
literal|"pple"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QString
name|str
init|=
literal|"Hello"
decl_stmt|;
name|QString
name|cstr
init|=
name|QString
operator|::
name|fromRawData
argument_list|(
name|str
operator|.
name|unicode
argument_list|()
argument_list|,
name|str
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|str
operator|==
literal|"Hello"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cstr
operator|==
literal|"Hello"
argument_list|)
expr_stmt|;
name|cstr
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|str
operator|==
literal|"Hello"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cstr
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|QString
name|str1
argument_list|(
literal|"Foo"
argument_list|)
decl_stmt|;
name|str1
operator|.
name|prepend
argument_list|(
name|str1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str1
argument_list|,
name|QString
argument_list|(
literal|"FooFoo"
argument_list|)
argument_list|)
expr_stmt|;
name|str1
operator|.
name|append
argument_list|(
name|str1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str1
argument_list|,
name|QString
argument_list|(
literal|"FooFooFooFoo"
argument_list|)
argument_list|)
expr_stmt|;
name|str1
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
name|str1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str1
argument_list|,
name|QString
argument_list|(
literal|"FoFooFooFooFoooFooFooFoo"
argument_list|)
argument_list|)
expr_stmt|;
name|str1
operator|.
name|replace
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
name|str1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str1
argument_list|,
name|QString
argument_list|(
literal|"FoFFoFooFooFooFoooFooFooFooooFooFoooFooFooFoo"
argument_list|)
argument_list|)
expr_stmt|;
name|str1
operator|=
literal|"FooFoo"
expr_stmt|;
name|str1
operator|.
name|replace
argument_list|(
name|char
argument_list|(
literal|'F'
argument_list|)
argument_list|,
name|str1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str1
argument_list|,
name|QString
argument_list|(
literal|"FooFooooFooFoooo"
argument_list|)
argument_list|)
expr_stmt|;
name|str1
operator|=
literal|"FooFoo"
expr_stmt|;
name|str1
operator|.
name|replace
argument_list|(
name|char
argument_list|(
literal|'o'
argument_list|)
argument_list|,
name|str1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str1
argument_list|,
name|QString
argument_list|(
literal|"FFooFooFooFooFFooFooFooFoo"
argument_list|)
argument_list|)
expr_stmt|;
name|str1
operator|=
literal|"Foo"
expr_stmt|;
name|str1
operator|.
name|replace
argument_list|(
literal|"Foo"
argument_list|,
name|str1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str1
argument_list|,
name|QString
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|str1
operator|.
name|replace
argument_list|(
name|str1
argument_list|,
name|str1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str1
argument_list|,
name|QString
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|str1
operator|=
literal|"Foo"
expr_stmt|;
name|str1
operator|.
name|replace
argument_list|(
literal|"Foo"
argument_list|,
name|str1
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str1
argument_list|,
name|QString
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|str1
operator|.
name|replace
argument_list|(
name|str1
argument_list|,
name|str1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str1
argument_list|,
name|QString
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|str1
operator|=
literal|"FooFoo"
expr_stmt|;
name|str1
operator|.
name|reserve
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|str1
operator|.
name|replace
argument_list|(
literal|"oo"
argument_list|,
name|str1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str1
argument_list|,
name|QString
argument_list|(
literal|"FFooFooFFooFoo"
argument_list|)
argument_list|)
expr_stmt|;
name|str1
operator|=
literal|"Bar"
expr_stmt|;
name|str1
operator|.
name|replace
argument_list|(
literal|"FooFoo"
argument_list|,
name|str1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str1
argument_list|,
name|QString
argument_list|(
literal|"Bar"
argument_list|)
argument_list|)
expr_stmt|;
name|str1
operator|.
name|replace
argument_list|(
name|str1
argument_list|,
literal|"xxx"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str1
argument_list|,
name|QString
argument_list|(
literal|"xxx"
argument_list|)
argument_list|)
expr_stmt|;
name|str1
operator|.
name|replace
argument_list|(
name|str1
argument_list|,
name|QString
argument_list|(
literal|"yyy"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str1
argument_list|,
name|QString
argument_list|(
literal|"yyy"
argument_list|)
argument_list|)
expr_stmt|;
name|str1
operator|+=
name|str1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str1
argument_list|,
name|QString
argument_list|(
literal|"yyyyyy"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|bitArray
name|void
name|tst_Collections
operator|::
name|bitArray
parameter_list|()
block|{
name|QBitArray
name|ba
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|ba
operator|.
name|testBit
argument_list|(
literal|17
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
name|ba
operator|.
name|setBit
argument_list|(
literal|17
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ba
operator|.
name|size
argument_list|()
operator|==
literal|20
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ba
operator|.
name|testBit
argument_list|(
literal|17
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ba
operator|.
name|testBit
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|ba
index|[
literal|4
index|]
operator|=
literal|true
expr_stmt|;
name|QVERIFY
argument_list|(
name|ba
operator|.
name|testBit
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ba
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|int
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
name|sum
operator|+=
name|ba
operator|.
name|testBit
argument_list|(
name|i
argument_list|)
condition|?
literal|1
else|:
literal|0
expr_stmt|;
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|2
argument_list|)
expr_stmt|;
name|ba
operator|=
name|QBitArray
argument_list|(
literal|7
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ba
operator|.
name|size
argument_list|()
operator|==
literal|7
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ba
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|ba
operator|=
name|QBitArray
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|ba
index|[
literal|0
index|]
operator|=
name|ba
index|[
literal|2
index|]
operator|=
literal|true
expr_stmt|;
name|QBitArray
name|nba
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|nba
index|[
literal|1
index|]
operator|=
literal|true
expr_stmt|;
name|QVERIFY
argument_list|(
operator|~
name|ba
operator|==
name|nba
argument_list|)
expr_stmt|;
block|}
end_function
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_struct
DECL|struct|CacheFoo
struct|struct
name|CacheFoo
block|{
DECL|function|CacheFoo
name|CacheFoo
parameter_list|(
name|int
name|v
parameter_list|)
member_init_list|:
name|val
argument_list|(
name|v
argument_list|)
block|{
name|counter
operator|++
expr_stmt|;
block|}
DECL|function|~CacheFoo
name|~
name|CacheFoo
parameter_list|()
block|{
name|counter
operator|--
expr_stmt|;
block|}
DECL|member|val
name|int
name|val
decl_stmt|;
DECL|member|counter
specifier|static
name|int
name|counter
decl_stmt|;
DECL|function|isDetached
name|bool
name|isDetached
parameter_list|()
specifier|const
block|{
return|return
name|val
operator|!=
literal|2
return|;
block|}
block|}
struct|;
end_struct
begin_decl_stmt
DECL|member|counter
name|int
name|CacheFoo
operator|::
name|counter
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|cache
name|void
name|tst_Collections
operator|::
name|cache
parameter_list|()
block|{
block|{
name|QCache
argument_list|<
name|int
argument_list|,
name|CacheFoo
argument_list|>
name|cache
argument_list|(
literal|120
argument_list|)
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|30
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|object
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|cache
operator|.
name|insert
argument_list|(
name|i
argument_list|,
operator|new
name|CacheFoo
argument_list|(
name|i
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|cache
operator|.
name|contains
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cache
operator|.
name|contains
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cache
operator|.
name|contains
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|cache
operator|.
name|take
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|{
name|QCache
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|cache
argument_list|(
literal|120
argument_list|)
decl_stmt|;
name|int
name|i
decl_stmt|;
name|QString
name|two
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|30
condition|;
name|i
operator|++
control|)
block|{
name|QString
name|s
init|=
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|cache
operator|.
name|insert
argument_list|(
name|i
argument_list|,
operator|new
name|QString
argument_list|(
name|s
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|2
condition|)
name|two
operator|=
name|s
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|cache
operator|.
name|contains
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cache
operator|.
name|contains
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QCache
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|cache
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|cache
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
operator|new
name|int
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
operator|*
name|cache
index|[
literal|2
index|]
operator|=
literal|3
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
name|cache
operator|.
name|object
argument_list|(
literal|2
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|CacheFoo
operator|::
name|counter
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|regexp
name|void
name|tst_Collections
operator|::
name|regexp
parameter_list|()
block|{
name|QRegExp
name|rx
argument_list|(
literal|"^\\d\\d?$"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|rx
operator|.
name|indexIn
argument_list|(
literal|"123"
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rx
operator|.
name|indexIn
argument_list|(
literal|"-6"
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rx
operator|.
name|indexIn
argument_list|(
literal|"6"
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pair
name|void
name|tst_Collections
operator|::
name|pair
parameter_list|()
block|{
name|QPair
argument_list|<
name|double
argument_list|,
name|int
argument_list|>
name|p
decl_stmt|;
name|QVERIFY
argument_list|(
name|p
operator|.
name|first
operator|==
literal|0.0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|p
operator|.
name|second
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QPair
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|a
argument_list|(
literal|1
argument_list|,
literal|"Zebra"
argument_list|)
decl_stmt|,
name|b
argument_list|(
literal|2
argument_list|,
literal|"Ying"
argument_list|)
decl_stmt|,
name|c
argument_list|(
literal|3
argument_list|,
literal|"Yang"
argument_list|)
decl_stmt|,
name|d
argument_list|(
literal|3
argument_list|,
literal|"Ying"
argument_list|)
decl_stmt|,
name|e
argument_list|(
literal|5
argument_list|,
literal|"Alabama"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|first
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|second
operator|==
literal|"Zebra"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
name|qMakePair
argument_list|(
literal|1
argument_list|,
name|QString
argument_list|(
literal|"Zebra"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
name|a
operator|&&
name|b
operator|==
name|b
operator|&&
name|c
operator|==
name|c
operator|&&
name|d
operator|==
name|d
operator|&&
name|e
operator|==
name|e
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|!=
name|b
operator|&&
name|a
operator|!=
name|c
operator|&&
name|a
operator|!=
name|d
operator|&&
name|a
operator|!=
name|e
operator|&&
name|b
operator|!=
name|c
operator|&&
name|b
operator|!=
name|d
operator|&&
name|b
operator|!=
name|e
operator|&&
name|c
operator|!=
name|d
operator|&&
name|c
operator|!=
name|e
operator|&&
name|d
operator|!=
name|e
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|<
name|b
operator|&&
name|b
operator|<
name|c
operator|&&
name|c
operator|<
name|d
operator|&&
name|d
operator|<
name|e
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|<=
name|b
operator|&&
name|b
operator|<=
name|c
operator|&&
name|c
operator|<=
name|d
operator|&&
name|d
operator|<=
name|e
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|e
operator|>
name|d
operator|&&
name|d
operator|>
name|c
operator|&&
name|c
operator|>
name|b
operator|&&
name|b
operator|>
name|a
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|e
operator|>=
name|d
operator|&&
name|d
operator|>=
name|c
operator|&&
name|c
operator|>=
name|b
operator|&&
name|b
operator|>=
name|a
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|>
name|b
operator|||
name|b
operator|>
name|c
operator|||
name|c
operator|>
name|d
operator|||
name|d
operator|>
name|e
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|>=
name|b
operator|||
name|b
operator|>=
name|c
operator|||
name|c
operator|>=
name|d
operator|||
name|d
operator|>=
name|e
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|e
operator|<
name|d
operator|||
name|d
operator|<
name|c
operator|||
name|c
operator|<
name|b
operator|||
name|b
operator|<
name|a
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|e
operator|<=
name|d
operator|||
name|d
operator|<=
name|c
operator|||
name|c
operator|<=
name|b
operator|||
name|b
operator|<=
name|a
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|<=
name|a
operator|&&
name|b
operator|<=
name|b
operator|&&
name|c
operator|<=
name|c
operator|&&
name|d
operator|<=
name|d
operator|&&
name|e
operator|<=
name|e
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|<
name|a
operator|||
name|b
operator|<
name|b
operator|||
name|c
operator|<
name|c
operator|||
name|d
operator|<
name|d
operator|||
name|e
operator|<
name|e
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|>=
name|a
operator|&&
name|b
operator|>=
name|b
operator|&&
name|c
operator|>=
name|c
operator|&&
name|d
operator|>=
name|d
operator|&&
name|e
operator|>=
name|e
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|>
name|a
operator|||
name|b
operator|>
name|b
operator|||
name|c
operator|>
name|c
operator|||
name|d
operator|>
name|d
operator|||
name|e
operator|>
name|e
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     These test that Java-style mutable iterators don't trash shared     copy (the setSharable() mechanism). */
end_comment
begin_function_decl
template|template
parameter_list|<
name|class
name|Container
parameter_list|>
name|void
name|populate
parameter_list|(
name|Container
modifier|&
parameter_list|)
function_decl|;
end_function_decl
begin_function
template|template
parameter_list|<>
DECL|function|populate
name|void
name|populate
parameter_list|(
name|QList
argument_list|<
name|int
argument_list|>
modifier|&
name|container
parameter_list|)
block|{
name|container
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|4
operator|<<
literal|8
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|populate
name|void
name|populate
parameter_list|(
name|QLinkedList
argument_list|<
name|int
argument_list|>
modifier|&
name|container
parameter_list|)
block|{
name|container
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|4
operator|<<
literal|8
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|populate
name|void
name|populate
parameter_list|(
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|container
parameter_list|)
block|{
name|container
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|4
operator|<<
literal|8
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|populate
name|void
name|populate
parameter_list|(
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
modifier|&
name|container
parameter_list|)
block|{
name|container
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|container
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|container
operator|.
name|insert
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|container
operator|.
name|insert
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|populate
name|void
name|populate
parameter_list|(
name|QHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
modifier|&
name|container
parameter_list|)
block|{
name|container
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|container
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|container
operator|.
name|insert
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|container
operator|.
name|insert
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|Container
parameter_list|>
DECL|function|isSharable
name|bool
name|isSharable
parameter_list|(
specifier|const
name|Container
modifier|&
name|container
parameter_list|)
block|{
name|Container
name|copy
init|=
name|container
decl_stmt|;
return|return
operator|!
name|container
operator|.
name|isDetached
argument_list|()
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|Container
parameter_list|,
name|class
name|ContainerMutableIterator
parameter_list|>
DECL|function|testContainer
name|void
name|testContainer
parameter_list|()
block|{
comment|/*         Verify that shared_null's 'sharable' flag is set to true.     */
block|{
name|Container
name|c1
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|c1
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|Container
name|c2
init|=
name|c1
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|c1
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|c2
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*         Verify that the 'sharable' flag is true while no mutable         iterator is active.     */
block|{
name|Container
name|c1
decl_stmt|;
name|populate
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|Container
name|c2
init|=
name|c1
decl_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c2
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|c1
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|c2
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*         Verify that the 'sharable' flag is set to false by the         mutable iterator.     */
block|{
name|Container
name|c1
decl_stmt|;
name|populate
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerMutableIterator
name|i
argument_list|(
name|c1
argument_list|)
decl_stmt|;
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|Container
name|c2
init|=
name|c1
decl_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c2
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c2
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c2
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
block|}
comment|/*         Verify that the 'sharable' flag is reset to true by the         mutable iterator's destructor.     */
block|{
name|Container
name|c1
decl_stmt|;
name|populate
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|ContainerMutableIterator
name|i
argument_list|(
name|c1
argument_list|)
decl_stmt|;
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|Container
name|c2
init|=
name|c1
decl_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c2
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|c1
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|c2
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*         Verify that the 'sharable' flag only affects the original         object, not the copies.     */
block|{
name|Container
name|c1
decl_stmt|;
name|populate
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|Container
name|c2
init|=
name|c1
decl_stmt|;
name|QVERIFY
argument_list|(
name|isSharable
argument_list|(
name|c2
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerMutableIterator
name|i
argument_list|(
name|c1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|isSharable
argument_list|(
name|c1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSharable
argument_list|(
name|c2
argument_list|)
argument_list|)
expr_stmt|;
name|Container
name|c3
init|=
name|c1
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|isSharable
argument_list|(
name|c1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSharable
argument_list|(
name|c2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSharable
argument_list|(
name|c3
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c2
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c3
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|Container
name|c4
decl_stmt|;
name|c4
operator|=
name|c1
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|isSharable
argument_list|(
name|c1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSharable
argument_list|(
name|c2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSharable
argument_list|(
name|c4
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c2
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c4
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|c3
operator|=
name|c2
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|isSharable
argument_list|(
name|c1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSharable
argument_list|(
name|c2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSharable
argument_list|(
name|c3
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|c2
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|c3
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_define
DECL|macro|TEST_SEQUENTIAL_CONTAINER
define|#
directive|define
name|TEST_SEQUENTIAL_CONTAINER
parameter_list|(
name|Container
parameter_list|)
define|\
value|testContainer<Q##Container<int>, QMutable##Container##Iterator<int>>()
end_define
begin_define
DECL|macro|TEST_ASSOCIATIVE_CONTAINER
define|#
directive|define
name|TEST_ASSOCIATIVE_CONTAINER
parameter_list|(
name|Container
parameter_list|)
define|\
value|testContainer<Q##Container<int, int>, QMutable##Container##Iterator<int, int>>()
end_define
begin_function
DECL|function|sharableQList
name|void
name|tst_Collections
operator|::
name|sharableQList
parameter_list|()
block|{
name|TEST_SEQUENTIAL_CONTAINER
argument_list|(
name|List
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sharableQLinkedList
name|void
name|tst_Collections
operator|::
name|sharableQLinkedList
parameter_list|()
block|{
name|TEST_SEQUENTIAL_CONTAINER
argument_list|(
name|LinkedList
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sharableQVector
name|void
name|tst_Collections
operator|::
name|sharableQVector
parameter_list|()
block|{
name|TEST_SEQUENTIAL_CONTAINER
argument_list|(
name|Vector
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sharableQMap
name|void
name|tst_Collections
operator|::
name|sharableQMap
parameter_list|()
block|{
name|TEST_ASSOCIATIVE_CONTAINER
argument_list|(
name|Map
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sharableQHash
name|void
name|tst_Collections
operator|::
name|sharableQHash
parameter_list|()
block|{
name|TEST_ASSOCIATIVE_CONTAINER
argument_list|(
name|Hash
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|getList_calls
specifier|static
name|int
name|getList_calls
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|getList
name|QList
argument_list|<
name|int
argument_list|>
name|getList
parameter_list|()
block|{
operator|++
name|getList_calls
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
operator|<<
literal|4
operator|<<
literal|5
operator|<<
literal|6
expr_stmt|;
return|return
name|list
return|;
block|}
end_function
begin_function
DECL|function|q_foreach
name|void
name|tst_Collections
operator|::
name|q_foreach
parameter_list|()
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
operator|-
literal|2
operator|<<
operator|-
literal|1
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
expr_stmt|;
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
foreach|foreach
control|(
name|int
name|i
decl|,
name|list
control|)
block|{
name|QCOMPARE
argument_list|(
name|i
argument_list|,
name|list
operator|.
name|at
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|sum
operator|+=
name|i
expr_stmt|;
operator|++
name|j
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|sum
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// again, but without scope
foreach|foreach
control|(
name|int
name|i
decl|,
name|list
control|)
name|sum
operator|+=
name|i
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sum
argument_list|,
literal|0
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|int
name|i
decl|,
name|list
control|)
block|{
name|sum
operator|+=
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
break|break;
block|}
name|QCOMPARE
argument_list|(
name|sum
argument_list|,
operator|-
literal|3
argument_list|)
expr_stmt|;
name|sum
operator|=
literal|0
expr_stmt|;
foreach|foreach
control|(
name|int
name|i
decl|,
name|list
control|)
block|{
if|if
condition|(
name|i
operator|<
literal|0
condition|)
continue|continue;
name|sum
operator|+=
name|i
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|sum
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|sum
operator|=
literal|0
expr_stmt|;
name|getList_calls
operator|=
literal|0
expr_stmt|;
foreach|foreach
control|(
name|int
name|i
decl|,
name|getList
argument_list|()
control|)
name|sum
operator|+=
name|i
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sum
argument_list|,
literal|21
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|getList_calls
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|conversions
name|void
name|tst_Collections
operator|::
name|conversions
parameter_list|()
block|{
DECL|macro|STUFF
define|#
directive|define
name|STUFF
value|"A"<< "C"<< "B"<< "A"
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|list1
decl_stmt|;
name|list1
operator|<<
name|STUFF
expr_stmt|;
name|QVector
argument_list|<
name|QString
argument_list|>
name|vect1
init|=
name|list1
operator|.
name|toVector
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|list1
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|vect1
operator|==
operator|(
name|QVector
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
name|STUFF
operator|)
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QString
argument_list|>
name|list2
init|=
name|vect1
operator|.
name|toList
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|list2
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list2
operator|==
operator|(
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
name|STUFF
operator|)
argument_list|)
expr_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|set1
init|=
name|list1
operator|.
name|toSet
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|set1
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|contains
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|contains
argument_list|(
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|contains
argument_list|(
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|set1
operator|.
name|contains
argument_list|(
literal|"D"
argument_list|)
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QString
argument_list|>
name|list3
init|=
name|set1
operator|.
name|toList
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|list3
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list3
operator|.
name|contains
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list3
operator|.
name|contains
argument_list|(
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list3
operator|.
name|contains
argument_list|(
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|list3
operator|.
name|contains
argument_list|(
literal|"D"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|.
name|toVector
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|.
name|toSet
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|()
operator|.
name|toList
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QSet
argument_list|<
name|int
argument_list|>
argument_list|()
operator|.
name|toList
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|list1
decl_stmt|;
name|list1
operator|<<
name|STUFF
expr_stmt|;
name|QVector
argument_list|<
name|QString
argument_list|>
name|vect1
init|=
name|QVector
argument_list|<
name|QString
argument_list|>
operator|::
name|fromList
argument_list|(
name|list1
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|list1
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|vect1
operator|==
operator|(
name|QVector
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
name|STUFF
operator|)
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QString
argument_list|>
name|list2
init|=
name|QList
argument_list|<
name|QString
argument_list|>
operator|::
name|fromVector
argument_list|(
name|vect1
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|list2
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list2
operator|==
operator|(
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
name|STUFF
operator|)
argument_list|)
expr_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|set1
init|=
name|QSet
argument_list|<
name|QString
argument_list|>
operator|::
name|fromList
argument_list|(
name|list1
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|set1
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|contains
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|contains
argument_list|(
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|contains
argument_list|(
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|set1
operator|.
name|contains
argument_list|(
literal|"D"
argument_list|)
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QString
argument_list|>
name|list3
init|=
name|QList
argument_list|<
name|QString
argument_list|>
operator|::
name|fromSet
argument_list|(
name|set1
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|list3
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list3
operator|.
name|contains
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list3
operator|.
name|contains
argument_list|(
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list3
operator|.
name|contains
argument_list|(
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|list3
operator|.
name|contains
argument_list|(
literal|"D"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QVector
argument_list|<
name|int
argument_list|>
operator|::
name|fromList
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QSet
argument_list|<
name|int
argument_list|>
operator|::
name|fromList
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
operator|::
name|fromVector
argument_list|(
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
operator|::
name|fromSet
argument_list|(
name|QSet
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|macro|STUFF
undef|#
directive|undef
name|STUFF
block|}
end_function
begin_function
DECL|function|javaStyleIterators
name|void
name|tst_Collections
operator|::
name|javaStyleIterators
parameter_list|()
block|{
name|QStringList
name|list
decl_stmt|;
name|list
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
expr_stmt|;
name|QMutableStringListIterator
name|i
argument_list|(
name|list
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|i
operator|.
name|setValue
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|i
operator|.
name|hasPrevious
argument_list|()
condition|)
block|{
name|i
operator|.
name|previous
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|value
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|value
argument_list|()
operator|=
literal|"x"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i
operator|.
name|value
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|Container
parameter_list|>
DECL|function|testLinkedListLikeStlIterators
name|void
name|testLinkedListLikeStlIterators
parameter_list|()
block|{
name|Container
name|fake
decl_stmt|;
typename|typename
name|Container
operator|::
name|value_type
name|t
decl_stmt|;
name|fake
operator|<<
name|t
expr_stmt|;
typename|typename
name|Container
operator|::
name|iterator
name|i1
init|=
name|fake
operator|.
name|begin
argument_list|()
decl_stmt|,
name|i2
init|=
name|i1
operator|+
literal|1
decl_stmt|;
typename|typename
name|Container
operator|::
name|const_iterator
name|c1
init|=
name|i1
decl_stmt|,
name|c2
init|=
name|c1
operator|+
literal|1
decl_stmt|;
name|QVERIFY
argument_list|(
name|i1
operator|==
name|i1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i1
operator|==
name|c1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|==
name|i1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|==
name|c1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i2
operator|==
name|i2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i2
operator|==
name|c2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c2
operator|==
name|i2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c2
operator|==
name|c2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i1
operator|!=
name|i2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i1
operator|!=
name|c2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|!=
name|i2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|!=
name|c2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i2
operator|!=
name|i1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i2
operator|!=
name|c1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c2
operator|!=
name|i1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c2
operator|!=
name|c1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|Container
parameter_list|>
DECL|function|testListLikeStlIterators
name|void
name|testListLikeStlIterators
parameter_list|()
block|{
name|testLinkedListLikeStlIterators
argument_list|<
name|Container
argument_list|>
argument_list|()
expr_stmt|;
name|Container
name|fake
decl_stmt|;
typename|typename
name|Container
operator|::
name|value_type
name|t
decl_stmt|;
name|fake
operator|<<
name|t
expr_stmt|;
typename|typename
name|Container
operator|::
name|iterator
name|i1
init|=
name|fake
operator|.
name|begin
argument_list|()
decl_stmt|,
name|i2
init|=
name|i1
operator|+
literal|1
decl_stmt|;
typename|typename
name|Container
operator|::
name|const_iterator
name|c1
init|=
name|i1
decl_stmt|,
name|c2
init|=
name|c1
operator|+
literal|1
decl_stmt|;
name|QVERIFY
argument_list|(
name|i1
operator|<
name|i2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i1
operator|<
name|c2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|<
name|i2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|<
name|c2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|i2
operator|<
name|i1
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|i2
operator|<
name|c1
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|c2
operator|<
name|i1
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|c2
operator|<
name|c1
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|i1
operator|<
name|i1
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|i1
operator|<
name|c1
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|c1
operator|<
name|i1
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|c1
operator|<
name|c1
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|i2
operator|<
name|i2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|i2
operator|<
name|c2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|c2
operator|<
name|i2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|c2
operator|<
name|c2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i2
operator|>
name|i1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i2
operator|>
name|c1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c2
operator|>
name|i1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c2
operator|>
name|c1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|i1
operator|>
name|i2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|i1
operator|>
name|c2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|c1
operator|>
name|i2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|c1
operator|>
name|c2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|i1
operator|>
name|i1
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|i1
operator|>
name|c1
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|c1
operator|>
name|i1
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|c1
operator|>
name|c1
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|i2
operator|>
name|i2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|i2
operator|>
name|c2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|c2
operator|>
name|i2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|c2
operator|>
name|c2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|i1
operator|>=
name|i2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|i1
operator|>=
name|c2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|c1
operator|>=
name|i2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|c1
operator|>=
name|c2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i2
operator|>=
name|i1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i2
operator|>=
name|c1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c2
operator|>=
name|i1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c2
operator|>=
name|c1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i1
operator|>=
name|i1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i1
operator|>=
name|c1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|>=
name|i1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|>=
name|c1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i2
operator|>=
name|i2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i2
operator|>=
name|c2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c2
operator|>=
name|i2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c2
operator|>=
name|c2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|i2
operator|<=
name|i1
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|i2
operator|<=
name|c1
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|c2
operator|<=
name|i1
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|c2
operator|<=
name|c1
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i1
operator|<=
name|i2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i1
operator|<=
name|c2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|<=
name|i2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|<=
name|c2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i1
operator|<=
name|i1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i1
operator|<=
name|c1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|<=
name|i1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|<=
name|c1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i2
operator|<=
name|i2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i2
operator|<=
name|c2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c2
operator|<=
name|i2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c2
operator|<=
name|c2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|Container
parameter_list|>
DECL|function|testMapLikeStlIterators
name|void
name|testMapLikeStlIterators
parameter_list|()
block|{
name|Container
name|fake
decl_stmt|;
name|QString
name|k
decl_stmt|;
name|QString
name|t
decl_stmt|;
name|fake
operator|.
name|insert
argument_list|(
name|k
argument_list|,
name|t
argument_list|)
expr_stmt|;
typename|typename
name|Container
operator|::
name|iterator
name|i1
init|=
name|fake
operator|.
name|begin
argument_list|()
decl_stmt|,
name|i2
init|=
name|i1
operator|+
literal|1
decl_stmt|;
typename|typename
name|Container
operator|::
name|const_iterator
name|c1
init|=
name|i1
decl_stmt|,
name|c2
init|=
name|c1
operator|+
literal|1
decl_stmt|;
name|QVERIFY
argument_list|(
name|i1
operator|==
name|i1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i1
operator|==
name|c1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|==
name|i1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|==
name|c1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i2
operator|==
name|i2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i2
operator|==
name|c2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c2
operator|==
name|i2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c2
operator|==
name|c2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i1
operator|!=
name|i2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i1
operator|!=
name|c2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|!=
name|i2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|!=
name|c2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i2
operator|!=
name|i1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i2
operator|!=
name|c1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c2
operator|!=
name|i1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c2
operator|!=
name|c1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|constAndNonConstStlIterators
name|void
name|tst_Collections
operator|::
name|constAndNonConstStlIterators
parameter_list|()
block|{
name|testListLikeStlIterators
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|testListLikeStlIterators
argument_list|<
name|QStringList
argument_list|>
argument_list|()
expr_stmt|;
name|testLinkedListLikeStlIterators
argument_list|<
name|QLinkedList
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|testListLikeStlIterators
argument_list|<
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|testMapLikeStlIterators
argument_list|<
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|testMapLikeStlIterators
argument_list|<
name|QMultiMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|testMapLikeStlIterators
argument_list|<
name|QHash
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|testMapLikeStlIterators
argument_list|<
name|QMultiHash
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STL
end_ifndef
begin_function
DECL|function|vector_stl_data
name|void
name|tst_Collections
operator|::
name|vector_stl_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"elements"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Hei"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"two"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Hei"
operator|<<
literal|"Hopp"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"three"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Hei"
operator|<<
literal|"Hopp"
operator|<<
literal|"Sann"
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|vector_stl
name|void
name|tst_Collections
operator|::
name|vector_stl
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|elements
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QString
argument_list|>
name|vector
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|vector
operator|<<
name|elements
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|std
operator|::
name|vector
argument_list|<
name|QString
argument_list|>
name|stdVector
init|=
name|vector
operator|.
name|toStdVector
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|stdVector
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|elements
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|std
operator|::
name|vector
argument_list|<
name|QString
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|stdVector
operator|.
name|begin
argument_list|()
decl_stmt|;
for|for
control|(
name|uint
name|j
init|=
literal|0
init|;
name|j
operator|<
name|stdVector
operator|.
name|size
argument_list|()
operator|&&
name|it
operator|!=
name|stdVector
operator|.
name|end
argument_list|()
condition|;
operator|++
name|j
operator|,
operator|++
name|it
control|)
name|QCOMPARE
argument_list|(
operator|*
name|it
argument_list|,
name|vector
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QVector
argument_list|<
name|QString
argument_list|>
operator|::
name|fromStdVector
argument_list|(
name|stdVector
argument_list|)
argument_list|,
name|vector
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|linkedlist_stl_data
name|void
name|tst_Collections
operator|::
name|linkedlist_stl_data
parameter_list|()
block|{
name|list_stl_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|linkedlist_stl
name|void
name|tst_Collections
operator|::
name|linkedlist_stl
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|elements
argument_list|)
expr_stmt|;
name|QLinkedList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|list
operator|<<
name|elements
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|std
operator|::
name|list
argument_list|<
name|QString
argument_list|>
name|stdList
init|=
name|list
operator|.
name|toStdList
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|stdList
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|elements
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|std
operator|::
name|list
argument_list|<
name|QString
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|stdList
operator|.
name|begin
argument_list|()
decl_stmt|;
name|QLinkedList
argument_list|<
name|QString
argument_list|>
operator|::
name|const_iterator
name|it2
init|=
name|list
operator|.
name|constBegin
argument_list|()
decl_stmt|;
for|for
control|(
name|uint
name|j
init|=
literal|0
init|;
name|j
operator|<
name|stdList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
operator|,
operator|++
name|it
operator|,
operator|++
name|it2
control|)
name|QCOMPARE
argument_list|(
operator|*
name|it
argument_list|,
operator|*
name|it2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QLinkedList
argument_list|<
name|QString
argument_list|>
operator|::
name|fromStdList
argument_list|(
name|stdList
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|list_stl_data
name|void
name|tst_Collections
operator|::
name|list_stl_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"elements"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Hei"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"two"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Hei"
operator|<<
literal|"Hopp"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"three"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Hei"
operator|<<
literal|"Hopp"
operator|<<
literal|"Sann"
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|list_stl
name|void
name|tst_Collections
operator|::
name|list_stl
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|elements
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|list
operator|<<
name|elements
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|std
operator|::
name|list
argument_list|<
name|QString
argument_list|>
name|stdList
init|=
name|list
operator|.
name|toStdList
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|stdList
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|elements
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|std
operator|::
name|list
argument_list|<
name|QString
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|stdList
operator|.
name|begin
argument_list|()
decl_stmt|;
for|for
control|(
name|uint
name|j
init|=
literal|0
init|;
name|j
operator|<
name|stdList
operator|.
name|size
argument_list|()
operator|&&
name|it
operator|!=
name|stdList
operator|.
name|end
argument_list|()
condition|;
operator|++
name|j
operator|,
operator|++
name|it
control|)
name|QCOMPARE
argument_list|(
operator|*
name|it
argument_list|,
name|list
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QList
argument_list|<
name|QString
argument_list|>
operator|::
name|fromStdList
argument_list|(
name|stdList
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|qtInit
name|T
name|qtInit
parameter_list|(
name|T
modifier|*
init|=
literal|0
parameter_list|)
block|{
return|return
name|T
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|q_init
name|void
name|tst_Collections
operator|::
name|q_init
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|qtInit
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qtInit
argument_list|<
name|double
argument_list|>
argument_list|()
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qtInit
argument_list|<
name|QString
argument_list|>
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qtInit
argument_list|<
name|int
operator|*
argument_list|>
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|int
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qtInit
argument_list|<
name|double
operator|*
argument_list|>
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|double
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qtInit
argument_list|<
name|QString
operator|*
argument_list|>
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QString
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qtInit
argument_list|<
name|Pod
argument_list|>
argument_list|()
operator|.
name|i1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qtInit
argument_list|<
name|Pod
argument_list|>
argument_list|()
operator|.
name|i2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pointersize
name|void
name|tst_Collections
operator|::
name|pointersize
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
argument_list|)
argument_list|,
name|QT_POINTER_SIZE
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|LessThanComparable
class|class
name|LessThanComparable
block|{
public|public:
DECL|function|operator <
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|LessThanComparable
modifier|&
parameter_list|)
specifier|const
block|{
return|return
literal|true
return|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|EqualsComparable
class|class
name|EqualsComparable
block|{
public|public:
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|EqualsComparable
modifier|&
parameter_list|)
specifier|const
block|{
return|return
literal|true
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|qHash
name|uint
name|qHash
parameter_list|(
specifier|const
name|EqualsComparable
modifier|&
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*     The following functions instatiates every member functions in the     Qt containers that requires either operator== or operator<.     They are ordered in a concept inheritance tree:      Container         MutableIterationContainer             Sequence (QLinkedList)                 Random Access (QVector, QList, QQueue, QStack)             Pair Associative (QHash, QMap)         Associative (QSet) */
end_comment
begin_function
template|template
parameter_list|<
name|typename
name|ContainerType
parameter_list|,
name|typename
name|ValueType
parameter_list|>
DECL|function|instantiateContainer
name|void
name|instantiateContainer
parameter_list|()
block|{
specifier|const
name|ValueType
name|value
init|=
name|ValueType
argument_list|()
decl_stmt|;
name|ContainerType
name|container
decl_stmt|;
specifier|const
name|ContainerType
name|constContainer
argument_list|(
name|container
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_STL
typename|typename
name|ContainerType
operator|::
name|const_iterator
name|constIt
decl_stmt|;
name|constIt
operator|=
name|constContainer
operator|.
name|begin
argument_list|()
expr_stmt|;
name|container
operator|.
name|constBegin
argument_list|()
expr_stmt|;
name|constIt
operator|=
name|constContainer
operator|.
name|end
argument_list|()
expr_stmt|;
name|container
operator|.
name|constEnd
argument_list|()
expr_stmt|;
name|Q_UNUSED
argument_list|(
argument|constIt
argument_list|)
endif|#
directive|endif
name|container
operator|.
name|clear
argument_list|()
expr_stmt|;
name|container
operator|.
name|contains
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|container
operator|.
name|count
argument_list|()
expr_stmt|;
name|container
operator|.
name|empty
argument_list|()
expr_stmt|;
name|container
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|container
operator|.
name|size
argument_list|()
expr_stmt|;
name|container
operator|!=
name|constContainer
expr_stmt|;
name|container
operator|==
name|constContainer
expr_stmt|;
name|container
operator|=
name|constContainer
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|ContainerType
parameter_list|,
name|typename
name|ValueType
parameter_list|>
DECL|function|instantiateMutableIterationContainer
name|void
name|instantiateMutableIterationContainer
parameter_list|()
block|{
name|instantiateContainer
argument_list|<
name|ContainerType
argument_list|,
name|ValueType
argument_list|>
argument_list|()
expr_stmt|;
name|ContainerType
name|container
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_STL
typename|typename
name|ContainerType
operator|::
name|iterator
name|it
decl_stmt|;
name|it
operator|=
name|container
operator|.
name|begin
argument_list|()
expr_stmt|;
name|it
operator|=
name|container
operator|.
name|end
argument_list|()
expr_stmt|;
name|Q_UNUSED
argument_list|(
argument|it
argument_list|)
endif|#
directive|endif
comment|// QSet lacks count(T).
specifier|const
name|ValueType
name|value
init|=
name|ValueType
argument_list|()
decl_stmt|;
name|container
operator|.
name|count
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|ContainerType
parameter_list|,
name|typename
name|ValueType
parameter_list|>
DECL|function|instantiateSequence
name|void
name|instantiateSequence
parameter_list|()
block|{
name|instantiateMutableIterationContainer
argument_list|<
name|ContainerType
argument_list|,
name|ValueType
argument_list|>
argument_list|()
expr_stmt|;
comment|// QVector lacks removeAll(T)
comment|//    ValueType value = ValueType();
comment|//    ContainerType container;
comment|//    container.removeAll(value);
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|ContainerType
parameter_list|,
name|typename
name|ValueType
parameter_list|>
DECL|function|instantiateRandomAccess
name|void
name|instantiateRandomAccess
parameter_list|()
block|{
name|instantiateSequence
argument_list|<
name|ContainerType
argument_list|,
name|ValueType
argument_list|>
argument_list|()
expr_stmt|;
name|ValueType
name|value
init|=
name|ValueType
argument_list|()
decl_stmt|;
name|ContainerType
name|container
decl_stmt|;
name|container
operator|.
name|indexOf
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|container
operator|.
name|lastIndexOf
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|ContainerType
parameter_list|,
name|typename
name|ValueType
parameter_list|>
DECL|function|instantiateAssociative
name|void
name|instantiateAssociative
parameter_list|()
block|{
name|instantiateContainer
argument_list|<
name|ContainerType
argument_list|,
name|ValueType
argument_list|>
argument_list|()
expr_stmt|;
specifier|const
name|ValueType
name|value
init|=
name|ValueType
argument_list|()
decl_stmt|;
name|ContainerType
name|container
decl_stmt|;
specifier|const
name|ContainerType
name|constContainer
argument_list|(
name|container
argument_list|)
decl_stmt|;
name|container
operator|.
name|reserve
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|container
operator|.
name|capacity
argument_list|()
expr_stmt|;
name|container
operator|.
name|squeeze
argument_list|()
expr_stmt|;
name|container
operator|.
name|remove
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|container
operator|.
name|values
argument_list|()
expr_stmt|;
name|container
operator|.
name|unite
argument_list|(
name|constContainer
argument_list|)
expr_stmt|;
name|container
operator|.
name|intersect
argument_list|(
name|constContainer
argument_list|)
expr_stmt|;
name|container
operator|.
name|subtract
argument_list|(
name|constContainer
argument_list|)
expr_stmt|;
name|container
operator|!=
name|constContainer
expr_stmt|;
name|container
operator|==
name|constContainer
expr_stmt|;
name|container
modifier|&
name|constContainer
decl_stmt|;
name|container
operator|&=
name|constContainer
expr_stmt|;
name|container
operator|&=
name|value
expr_stmt|;
name|container
operator|+
name|constContainer
expr_stmt|;
name|container
operator|+=
name|constContainer
expr_stmt|;
name|container
operator|+=
name|value
expr_stmt|;
name|container
operator|-
name|constContainer
expr_stmt|;
name|container
operator|-=
name|constContainer
expr_stmt|;
name|container
operator|-=
name|value
expr_stmt|;
name|container
operator||
name|constContainer
expr_stmt|;
name|container
operator||=
name|constContainer
expr_stmt|;
name|container
operator||=
name|value
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|ContainerType
parameter_list|,
name|typename
name|KeyType
parameter_list|,
name|typename
name|ValueType
parameter_list|>
DECL|function|instantiatePairAssociative
name|void
name|instantiatePairAssociative
parameter_list|()
block|{
name|instantiateMutableIterationContainer
argument_list|<
name|ContainerType
argument_list|,
name|KeyType
argument_list|>
argument_list|()
expr_stmt|;
typename|typename
name|ContainerType
operator|::
name|iterator
name|it
decl_stmt|;
typename|typename
name|ContainerType
operator|::
name|const_iterator
name|constIt
decl_stmt|;
specifier|const
name|KeyType
name|key
init|=
name|KeyType
argument_list|()
decl_stmt|;
specifier|const
name|ValueType
name|value
init|=
name|ValueType
argument_list|()
decl_stmt|;
name|ContainerType
name|container
decl_stmt|;
specifier|const
name|ContainerType
name|constContainer
argument_list|(
name|container
argument_list|)
decl_stmt|;
name|it
operator|=
name|container
operator|.
name|insert
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|container
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
name|container
operator|.
name|find
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|container
operator|.
name|constFind
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|constContainer
operator|.
name|find
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|container
operator|.
name|key
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|container
operator|.
name|keys
argument_list|()
expr_stmt|;
name|constContainer
operator|.
name|keys
argument_list|()
expr_stmt|;
name|container
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|container
operator|.
name|take
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|container
operator|.
name|unite
argument_list|(
name|constContainer
argument_list|)
expr_stmt|;
name|container
operator|.
name|value
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|container
operator|.
name|value
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|container
operator|.
name|values
argument_list|()
expr_stmt|;
name|container
operator|.
name|values
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|container
index|[
name|key
index|]
expr_stmt|;
specifier|const
name|int
name|foo
init|=
name|constContainer
index|[
name|key
index|]
decl_stmt|;
name|Q_UNUSED
argument_list|(
name|foo
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Instantiate all Qt containers using a datatype that     defines the minimum amount of operators. */
end_comment
begin_function
DECL|function|containerInstantiation
name|void
name|tst_Collections
operator|::
name|containerInstantiation
parameter_list|()
block|{
comment|// Instantiate QHash member functions.
typedef|typedef
name|QHash
argument_list|<
name|EqualsComparable
argument_list|,
name|int
argument_list|>
name|Hash
typedef|;
name|instantiatePairAssociative
argument_list|<
name|Hash
argument_list|,
name|EqualsComparable
argument_list|,
name|int
argument_list|>
argument_list|()
expr_stmt|;
name|Hash
name|hash
decl_stmt|;
name|hash
operator|.
name|reserve
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|hash
operator|.
name|capacity
argument_list|()
expr_stmt|;
name|hash
operator|.
name|squeeze
argument_list|()
expr_stmt|;
comment|// Instantiate QMap member functions.
typedef|typedef
name|QMap
argument_list|<
name|LessThanComparable
argument_list|,
name|int
argument_list|>
name|Map
typedef|;
name|instantiatePairAssociative
argument_list|<
name|Map
argument_list|,
name|LessThanComparable
argument_list|,
name|int
argument_list|>
argument_list|()
expr_stmt|;
comment|// Instantiate QSet member functions.
typedef|typedef
name|QSet
argument_list|<
name|EqualsComparable
argument_list|>
name|Set
typedef|;
name|instantiateAssociative
argument_list|<
name|Set
argument_list|,
name|EqualsComparable
argument_list|>
argument_list|()
expr_stmt|;
comment|//Instantiate QLinkedList member functions.
typedef|typedef
name|QLinkedList
argument_list|<
name|EqualsComparable
argument_list|>
name|LinkedList
typedef|;
name|instantiateSequence
argument_list|<
name|LinkedList
argument_list|,
name|EqualsComparable
argument_list|>
argument_list|()
expr_stmt|;
block|{
name|EqualsComparable
name|value
decl_stmt|;
name|LinkedList
name|list
decl_stmt|;
name|list
operator|.
name|removeAll
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
comment|//Instantiate QList member functions.
typedef|typedef
name|QList
argument_list|<
name|EqualsComparable
argument_list|>
name|List
typedef|;
name|instantiateRandomAccess
argument_list|<
name|List
argument_list|,
name|EqualsComparable
argument_list|>
argument_list|()
expr_stmt|;
block|{
name|EqualsComparable
name|value
decl_stmt|;
name|List
name|list
decl_stmt|;
name|list
operator|.
name|removeAll
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
comment|//Instantiate QVector member functions.
typedef|typedef
name|QVector
argument_list|<
name|EqualsComparable
argument_list|>
name|Vector
typedef|;
name|instantiateRandomAccess
argument_list|<
name|Vector
argument_list|,
name|EqualsComparable
argument_list|>
argument_list|()
expr_stmt|;
comment|//Instantiate QQueue member functions.
typedef|typedef
name|QQueue
argument_list|<
name|EqualsComparable
argument_list|>
name|Queue
typedef|;
name|instantiateRandomAccess
argument_list|<
name|Queue
argument_list|,
name|EqualsComparable
argument_list|>
argument_list|()
expr_stmt|;
comment|//Instantiate QStack member functions.
typedef|typedef
name|QStack
argument_list|<
name|EqualsComparable
argument_list|>
name|Stack
typedef|;
name|instantiateRandomAccess
argument_list|<
name|Stack
argument_list|,
name|EqualsComparable
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qtimerList
name|void
name|tst_Collections
operator|::
name|qtimerList
parameter_list|()
block|{
name|QList
argument_list|<
name|double
argument_list|>
name|foo
decl_stmt|;
specifier|const
name|int
name|N
init|=
literal|10000
decl_stmt|;
name|foo
operator|.
name|append
argument_list|(
literal|99.9
argument_list|)
expr_stmt|;
name|foo
operator|.
name|append
argument_list|(
literal|99.9
argument_list|)
expr_stmt|;
name|foo
operator|.
name|append
argument_list|(
literal|99.9
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|N
condition|;
name|i
operator|++
control|)
block|{
name|foo
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
name|foo
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|99.9
argument_list|)
expr_stmt|;
block|}
name|QList
argument_list|<
name|double
argument_list|>
operator|::
name|Iterator
name|end
init|=
name|foo
operator|.
name|end
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|N
operator|/
literal|2
operator|)
operator|-
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|foo
operator|.
name|prepend
argument_list|(
literal|99.9
argument_list|)
expr_stmt|;
if|if
condition|(
name|foo
operator|.
name|end
argument_list|()
operator|!=
name|end
condition|)
return|return;
block|}
name|QFAIL
argument_list|(
literal|"QList preallocates too much memory"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|Container
parameter_list|>
DECL|function|testContainerTypedefs
name|void
name|testContainerTypedefs
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|container
argument_list|)
block|{
typedef|typedef
typename|typename
name|Container
operator|::
name|value_type
name|Foo
typedef|;
block|}
block|{
typedef|typedef
typename|typename
name|Container
operator|::
name|iterator
name|Foo
typedef|;
block|}
block|{
typedef|typedef
typename|typename
name|Container
operator|::
name|const_iterator
name|Foo
typedef|;
block|}
block|{
typedef|typedef
typename|typename
name|Container
operator|::
name|reference
name|Foo
typedef|;
block|}
block|{
typedef|typedef
typename|typename
name|Container
operator|::
name|const_reference
name|Foo
typedef|;
block|}
block|{
typedef|typedef
typename|typename
name|Container
operator|::
name|pointer
name|Foo
typedef|;
block|}
block|{
typedef|typedef
typename|typename
name|Container
operator|::
name|difference_type
name|Foo
typedef|;
block|}
block|{
typedef|typedef
typename|typename
name|Container
operator|::
name|size_type
name|Foo
typedef|;
block|}
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|Container
parameter_list|>
DECL|function|testPairAssociativeContainerTypedefs
name|void
name|testPairAssociativeContainerTypedefs
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|container
argument_list|)
comment|//  TODO: Not sure how to define value_type for our associative containers
comment|//    { typedef typename Container::value_type Foo; }
comment|//    { typedef typename Container::const_iterator Foo; }
comment|//    { typedef typename Container::reference Foo; }
comment|//    { typedef typename Container::const_reference Foo; }
comment|//    { typedef typename Container::pointer Foo; }
block|{
typedef|typedef
typename|typename
name|Container
operator|::
name|difference_type
name|Foo
typedef|;
block|}
block|{
typedef|typedef
typename|typename
name|Container
operator|::
name|size_type
name|Foo
typedef|;
block|}
block|{
typedef|typedef
typename|typename
name|Container
operator|::
name|iterator
name|Foo
typedef|;
block|}
block|{
typedef|typedef
typename|typename
name|Container
operator|::
name|key_type
name|Foo
typedef|;
block|}
block|{
typedef|typedef
typename|typename
name|Container
operator|::
name|mapped_type
name|Foo
typedef|;
block|}
comment|// TODO
comment|//    { typedef typename Container::key_compare Foo; }
comment|//    { typedef typename Container::value_comare Foo; }
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|Container
parameter_list|>
DECL|function|testSetContainerTypedefs
name|void
name|testSetContainerTypedefs
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|container
argument_list|)
block|{
typedef|typedef
typename|typename
name|Container
operator|::
name|iterator
name|Foo
typedef|;
block|}
block|{
typedef|typedef
typename|typename
name|Container
operator|::
name|const_iterator
name|Foo
typedef|;
block|}
block|{
typedef|typedef
typename|typename
name|Container
operator|::
name|reference
name|Foo
typedef|;
block|}
block|{
typedef|typedef
typename|typename
name|Container
operator|::
name|const_reference
name|Foo
typedef|;
block|}
block|{
typedef|typedef
typename|typename
name|Container
operator|::
name|pointer
name|Foo
typedef|;
block|}
block|{
typedef|typedef
typename|typename
name|Container
operator|::
name|difference_type
name|Foo
typedef|;
block|}
block|{
typedef|typedef
typename|typename
name|Container
operator|::
name|size_type
name|Foo
typedef|;
block|}
block|{
typedef|typedef
typename|typename
name|Container
operator|::
name|key_type
name|Foo
typedef|;
block|}
block|}
end_function
begin_comment
comment|/*     Compile-time test that verifies that the Qt containers     have STL-compatable typedefs. */
end_comment
begin_function
DECL|function|containerTypedefs
name|void
name|tst_Collections
operator|::
name|containerTypedefs
parameter_list|()
block|{
name|testContainerTypedefs
argument_list|(
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|testContainerTypedefs
argument_list|(
name|QStack
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|testContainerTypedefs
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|testContainerTypedefs
argument_list|(
name|QLinkedList
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|testContainerTypedefs
argument_list|(
name|QQueue
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|testPairAssociativeContainerTypedefs
argument_list|(
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|testPairAssociativeContainerTypedefs
argument_list|(
name|QMultiMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|testPairAssociativeContainerTypedefs
argument_list|(
name|QHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|testSetContainerTypedefs
argument_list|(
name|QSet
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_class_decl
class_decl|class
name|Key1
class_decl|;
end_class_decl
begin_class_decl
class_decl|class
name|T1
class_decl|;
end_class_decl
begin_class_decl
class_decl|class
name|T2
class_decl|;
end_class_decl
begin_function
DECL|function|forwardDeclared
name|void
name|tst_Collections
operator|::
name|forwardDeclared
parameter_list|()
block|{
block|{
typedef|typedef
name|QHash
argument_list|<
name|Key1
argument_list|,
name|T1
argument_list|>
name|C
typedef|;
name|C
modifier|*
name|x
init|=
literal|0
decl_stmt|;
name|C
operator|::
name|iterator
name|i
decl_stmt|;
name|C
operator|::
name|const_iterator
name|j
decl_stmt|;
name|Q_UNUSED
argument_list|(
argument|x
argument_list|)
block|}
block|{
typedef|typedef
name|QMultiHash
argument_list|<
name|Key1
argument_list|,
name|T1
argument_list|>
name|C
typedef|;
name|C
modifier|*
name|x
init|=
literal|0
decl_stmt|;
name|C
operator|::
name|iterator
name|i
decl_stmt|;
name|C
operator|::
name|const_iterator
name|j
decl_stmt|;
name|Q_UNUSED
argument_list|(
argument|x
argument_list|)
block|}
block|{
typedef|typedef
name|QMap
argument_list|<
name|Key1
argument_list|,
name|T1
argument_list|>
name|C
typedef|;
name|C
modifier|*
name|x
init|=
literal|0
decl_stmt|;
name|C
operator|::
name|iterator
name|i
decl_stmt|;
name|C
operator|::
name|const_iterator
name|j
decl_stmt|;
name|Q_UNUSED
argument_list|(
argument|x
argument_list|)
block|}
block|{
typedef|typedef
name|QMultiMap
argument_list|<
name|Key1
argument_list|,
name|T1
argument_list|>
name|C
typedef|;
name|C
modifier|*
name|x
init|=
literal|0
decl_stmt|;
name|C
operator|::
name|iterator
name|i
decl_stmt|;
name|C
operator|::
name|const_iterator
name|j
decl_stmt|;
name|Q_UNUSED
argument_list|(
argument|x
argument_list|)
block|}
block|{
typedef|typedef
name|QPair
argument_list|<
name|T1
argument_list|,
name|T2
argument_list|>
name|C
typedef|;
name|C
modifier|*
name|x
init|=
literal|0
decl_stmt|;
name|Q_UNUSED
argument_list|(
argument|x
argument_list|)
block|}
block|{
typedef|typedef
name|QList
argument_list|<
name|T1
argument_list|>
name|C
typedef|;
name|C
modifier|*
name|x
init|=
literal|0
decl_stmt|;
name|C
operator|::
name|iterator
name|i
decl_stmt|;
name|C
operator|::
name|const_iterator
name|j
decl_stmt|;
name|Q_UNUSED
argument_list|(
argument|x
argument_list|)
block|}
block|{
typedef|typedef
name|QLinkedList
argument_list|<
name|T1
argument_list|>
name|C
typedef|;
name|C
modifier|*
name|x
init|=
literal|0
decl_stmt|;
name|C
operator|::
name|iterator
name|i
decl_stmt|;
name|C
operator|::
name|const_iterator
name|j
decl_stmt|;
name|Q_UNUSED
argument_list|(
argument|x
argument_list|)
block|}
block|{
typedef|typedef
name|QVector
argument_list|<
name|T1
argument_list|>
name|C
typedef|;
name|C
modifier|*
name|x
init|=
literal|0
decl_stmt|;
name|C
operator|::
name|iterator
name|i
decl_stmt|;
name|C
operator|::
name|const_iterator
name|j
decl_stmt|;
name|Q_UNUSED
argument_list|(
argument|x
argument_list|)
name|Q_UNUSED
argument_list|(
argument|i
argument_list|)
name|Q_UNUSED
argument_list|(
argument|j
argument_list|)
block|}
block|{
typedef|typedef
name|QStack
argument_list|<
name|T1
argument_list|>
name|C
typedef|;
name|C
modifier|*
name|x
init|=
literal|0
decl_stmt|;
name|C
operator|::
name|iterator
name|i
decl_stmt|;
name|C
operator|::
name|const_iterator
name|j
decl_stmt|;
name|Q_UNUSED
argument_list|(
argument|x
argument_list|)
name|Q_UNUSED
argument_list|(
argument|i
argument_list|)
name|Q_UNUSED
argument_list|(
argument|j
argument_list|)
block|}
block|{
typedef|typedef
name|QQueue
argument_list|<
name|T1
argument_list|>
name|C
typedef|;
name|C
modifier|*
name|x
init|=
literal|0
decl_stmt|;
name|C
operator|::
name|iterator
name|i
decl_stmt|;
name|C
operator|::
name|const_iterator
name|j
decl_stmt|;
name|Q_UNUSED
argument_list|(
argument|x
argument_list|)
block|}
block|{
typedef|typedef
name|QSet
argument_list|<
name|T1
argument_list|>
name|C
typedef|;
name|C
modifier|*
name|x
init|=
literal|0
decl_stmt|;
comment|/* C::iterator i; */
name|C
operator|::
name|const_iterator
name|j
decl_stmt|;
name|Q_UNUSED
argument_list|(
argument|x
argument_list|)
block|}
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_ALIGNOF
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_DECL_ALIGN
argument_list|)
end_if
begin_class
class|class
name|Q_DECL_ALIGN
argument_list|(
literal|4
argument_list|)
name|Aligned4
block|{
name|char
name|i
decl_stmt|;
public|public:
name|Aligned4
parameter_list|(
name|int
name|i
init|=
literal|0
parameter_list|)
member_init_list|:
name|i
argument_list|(
name|i
argument_list|)
block|{}
name|bool
name|checkAligned
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|quintptr
argument_list|(
name|this
argument_list|)
operator|&
literal|3
operator|)
operator|==
literal|0
return|;
block|}
specifier|inline
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|Aligned4
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
name|i
operator|==
name|other
operator|.
name|i
return|;
block|}
specifier|inline
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|Aligned4
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
name|i
operator|<
name|other
operator|.
name|i
return|;
block|}
friend|friend
specifier|inline
name|int
name|qHash
parameter_list|(
specifier|const
name|Aligned4
modifier|&
name|a
parameter_list|)
block|{
return|return
name|qHash
argument_list|(
name|a
operator|.
name|i
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_class
class|class
name|Q_DECL_ALIGN
argument_list|(
literal|128
argument_list|)
name|Aligned128
block|{
name|char
name|i
decl_stmt|;
public|public:
name|Aligned128
parameter_list|(
name|int
name|i
init|=
literal|0
parameter_list|)
member_init_list|:
name|i
argument_list|(
name|i
argument_list|)
block|{}
name|bool
name|checkAligned
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|quintptr
argument_list|(
name|this
argument_list|)
operator|&
literal|127
operator|)
operator|==
literal|0
return|;
block|}
specifier|inline
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|Aligned128
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
name|i
operator|==
name|other
operator|.
name|i
return|;
block|}
specifier|inline
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|Aligned128
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
name|i
operator|<
name|other
operator|.
name|i
return|;
block|}
friend|friend
specifier|inline
name|int
name|qHash
parameter_list|(
specifier|const
name|Aligned128
modifier|&
name|a
parameter_list|)
block|{
return|return
name|qHash
argument_list|(
name|a
operator|.
name|i
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_function
template|template
parameter_list|<
name|typename
name|C
parameter_list|>
DECL|function|testVectorAlignment
name|void
name|testVectorAlignment
parameter_list|()
block|{
typedef|typedef
typename|typename
name|C
operator|::
name|value_type
name|Aligned
typedef|;
name|C
name|container
decl_stmt|;
name|container
operator|.
name|append
argument_list|(
name|Aligned
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|container
index|[
literal|0
index|]
operator|.
name|checkAligned
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|200
condition|;
operator|++
name|i
control|)
name|container
operator|.
name|append
argument_list|(
name|Aligned
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|container
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|QVERIFY
argument_list|(
name|container
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|checkAligned
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|C
parameter_list|>
DECL|function|testContiguousCacheAlignment
name|void
name|testContiguousCacheAlignment
parameter_list|()
block|{
typedef|typedef
typename|typename
name|C
operator|::
name|value_type
name|Aligned
typedef|;
name|C
name|container
argument_list|(
literal|150
argument_list|)
decl_stmt|;
name|container
operator|.
name|append
argument_list|(
name|Aligned
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|container
index|[
name|container
operator|.
name|firstIndex
argument_list|()
index|]
operator|.
name|checkAligned
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|200
condition|;
operator|++
name|i
control|)
name|container
operator|.
name|append
argument_list|(
name|Aligned
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|container
operator|.
name|firstIndex
argument_list|()
init|;
name|i
operator|<
name|container
operator|.
name|lastIndex
argument_list|()
condition|;
operator|++
name|i
control|)
name|QVERIFY
argument_list|(
name|container
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|checkAligned
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|C
parameter_list|>
DECL|function|testAssociativeContainerAlignment
name|void
name|testAssociativeContainerAlignment
parameter_list|()
block|{
typedef|typedef
typename|typename
name|C
operator|::
name|key_type
name|Key
typedef|;
typedef|typedef
typename|typename
name|C
operator|::
name|mapped_type
name|Value
typedef|;
name|C
name|container
decl_stmt|;
name|container
operator|.
name|insert
argument_list|(
name|Key
argument_list|()
argument_list|,
name|Value
argument_list|()
argument_list|)
expr_stmt|;
typename|typename
name|C
operator|::
name|const_iterator
name|it
init|=
name|container
operator|.
name|constBegin
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|key
argument_list|()
operator|.
name|checkAligned
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|checkAligned
argument_list|()
argument_list|)
expr_stmt|;
comment|// add some more elements
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|200
condition|;
operator|++
name|i
control|)
name|container
operator|.
name|insert
argument_list|(
name|Key
argument_list|(
name|i
argument_list|)
argument_list|,
name|Value
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|it
operator|=
name|container
operator|.
name|constBegin
argument_list|()
expr_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|container
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QVERIFY
argument_list|(
name|it
operator|.
name|key
argument_list|()
operator|.
name|checkAligned
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|checkAligned
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|alignment
name|void
name|tst_Collections
operator|::
name|alignment
parameter_list|()
block|{
name|testVectorAlignment
argument_list|<
name|QVector
argument_list|<
name|Aligned4
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|testVectorAlignment
argument_list|<
name|QVector
argument_list|<
name|Aligned128
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|testContiguousCacheAlignment
argument_list|<
name|QContiguousCache
argument_list|<
name|Aligned4
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|testContiguousCacheAlignment
argument_list|<
name|QContiguousCache
argument_list|<
name|Aligned128
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|testAssociativeContainerAlignment
argument_list|<
name|QMap
argument_list|<
name|Aligned4
argument_list|,
name|Aligned4
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|testAssociativeContainerAlignment
argument_list|<
name|QMap
argument_list|<
name|Aligned4
argument_list|,
name|Aligned128
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|testAssociativeContainerAlignment
argument_list|<
name|QMap
argument_list|<
name|Aligned128
argument_list|,
name|Aligned4
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|testAssociativeContainerAlignment
argument_list|<
name|QMap
argument_list|<
name|Aligned128
argument_list|,
name|Aligned128
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|testAssociativeContainerAlignment
argument_list|<
name|QHash
argument_list|<
name|Aligned4
argument_list|,
name|Aligned4
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|testAssociativeContainerAlignment
argument_list|<
name|QHash
argument_list|<
name|Aligned4
argument_list|,
name|Aligned128
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|testAssociativeContainerAlignment
argument_list|<
name|QHash
argument_list|<
name|Aligned128
argument_list|,
name|Aligned4
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|testAssociativeContainerAlignment
argument_list|<
name|QHash
argument_list|<
name|Aligned128
argument_list|,
name|Aligned128
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_function
DECL|function|alignment
name|void
name|tst_Collections
operator|::
name|alignment
parameter_list|()
block|{
name|QSKIP
argument_list|(
literal|"Compiler doesn't support necessary extension keywords"
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TEMPLATE_TEMPLATE_PARAMETERS
end_ifndef
begin_struct
template|template
parameter_list|<
template|template
parameter_list|<
name|class
parameter_list|>
name|class
name|C
parameter_list|>
struct|struct
DECL|struct|QTBUG13079_Node
name|QTBUG13079_Node
block|{
DECL|member|children
name|C
argument_list|<
name|QTBUG13079_Node
argument_list|>
name|children
decl_stmt|;
DECL|member|s
name|QString
name|s
decl_stmt|;
DECL|function|~QTBUG13079_Node
name|~
name|QTBUG13079_Node
parameter_list|()
block|{
name|children
operator|.
name|begin
argument_list|()
expr_stmt|;
comment|//play with memory
block|}
block|}
struct|;
end_struct
begin_function
DECL|function|QTBUG13079_collectionInsideCollectionImpl
template|template
parameter_list|<
template|template
parameter_list|<
name|class
parameter_list|>
name|class
name|C
parameter_list|>
name|void
name|QTBUG13079_collectionInsideCollectionImpl
parameter_list|()
block|{
name|C
argument_list|<
name|QTBUG13079_Node
argument_list|<
name|C
argument_list|>
argument_list|>
name|nodeList
decl_stmt|;
name|nodeList
operator|<<
name|QTBUG13079_Node
argument_list|<
name|C
argument_list|>
argument_list|()
expr_stmt|;
name|nodeList
operator|.
name|first
argument_list|()
operator|.
name|s
operator|=
literal|"parent"
expr_stmt|;
name|nodeList
operator|.
name|first
argument_list|()
operator|.
name|children
operator|<<
name|QTBUG13079_Node
argument_list|<
name|C
argument_list|>
argument_list|()
expr_stmt|;
name|nodeList
operator|.
name|first
argument_list|()
operator|.
name|children
operator|.
name|first
argument_list|()
operator|.
name|s
operator|=
literal|"child"
expr_stmt|;
name|nodeList
operator|=
name|nodeList
operator|.
name|first
argument_list|()
operator|.
name|children
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nodeList
operator|.
name|first
argument_list|()
operator|.
name|s
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"child"
argument_list|)
argument_list|)
expr_stmt|;
name|nodeList
operator|=
name|nodeList
operator|.
name|first
argument_list|()
operator|.
name|children
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nodeList
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|nodeList
operator|<<
name|QTBUG13079_Node
argument_list|<
name|C
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_struct
template|template
parameter_list|<
template|template
parameter_list|<
name|class
parameter_list|,
name|class
parameter_list|>
name|class
name|C
parameter_list|>
struct|struct
DECL|struct|QTBUG13079_NodeAssoc
name|QTBUG13079_NodeAssoc
block|{
DECL|member|children
name|C
argument_list|<
name|int
argument_list|,
name|QTBUG13079_NodeAssoc
argument_list|>
name|children
decl_stmt|;
DECL|member|s
name|QString
name|s
decl_stmt|;
DECL|function|~QTBUG13079_NodeAssoc
name|~
name|QTBUG13079_NodeAssoc
parameter_list|()
block|{
name|children
operator|.
name|begin
argument_list|()
expr_stmt|;
comment|//play with memory
block|}
block|}
struct|;
end_struct
begin_function
DECL|function|QTBUG13079_collectionInsideCollectionAssocImpl
template|template
parameter_list|<
template|template
parameter_list|<
name|class
parameter_list|,
name|class
parameter_list|>
name|class
name|C
parameter_list|>
name|void
name|QTBUG13079_collectionInsideCollectionAssocImpl
parameter_list|()
block|{
name|C
argument_list|<
name|int
argument_list|,
name|QTBUG13079_NodeAssoc
argument_list|<
name|C
argument_list|>
argument_list|>
name|nodeMap
decl_stmt|;
name|nodeMap
index|[
literal|18
index|]
operator|=
name|QTBUG13079_NodeAssoc
argument_list|<
name|C
argument_list|>
argument_list|()
expr_stmt|;
name|nodeMap
index|[
literal|18
index|]
operator|.
name|s
operator|=
literal|"parent"
expr_stmt|;
name|nodeMap
index|[
literal|18
index|]
operator|.
name|children
index|[
literal|12
index|]
operator|=
name|QTBUG13079_NodeAssoc
argument_list|<
name|C
argument_list|>
argument_list|()
expr_stmt|;
name|nodeMap
index|[
literal|18
index|]
operator|.
name|children
index|[
literal|12
index|]
operator|.
name|s
operator|=
literal|"child"
expr_stmt|;
name|nodeMap
operator|=
name|nodeMap
index|[
literal|18
index|]
operator|.
name|children
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nodeMap
index|[
literal|12
index|]
operator|.
name|s
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"child"
argument_list|)
argument_list|)
expr_stmt|;
name|nodeMap
operator|=
name|nodeMap
index|[
literal|12
index|]
operator|.
name|children
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nodeMap
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|nodeMap
index|[
literal|42
index|]
operator|=
name|QTBUG13079_NodeAssoc
argument_list|<
name|C
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qHash
name|quint32
name|qHash
parameter_list|(
specifier|const
name|QTBUG13079_Node
argument_list|<
name|QSet
argument_list|>
modifier|&
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|QTBUG13079_Node
argument_list|<
name|QSet
argument_list|>
modifier|&
name|a
parameter_list|,
specifier|const
name|QTBUG13079_Node
argument_list|<
name|QSet
argument_list|>
modifier|&
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|s
operator|==
name|b
operator|.
name|s
operator|&&
name|a
operator|.
name|children
operator|==
name|b
operator|.
name|children
return|;
block|}
end_function
begin_struct
template|template
parameter_list|<
template|template
parameter_list|<
name|class
parameter_list|>
name|class
name|C
parameter_list|>
struct|struct
DECL|struct|QTBUG13079_NodePtr
name|QTBUG13079_NodePtr
super|:
name|QSharedData
block|{
DECL|member|child
name|C
argument_list|<
name|QTBUG13079_NodePtr
argument_list|>
name|child
decl_stmt|;
DECL|member|next
name|QTBUG13079_NodePtr
modifier|*
name|next
decl_stmt|;
DECL|member|s
name|QString
name|s
decl_stmt|;
DECL|function|QTBUG13079_NodePtr
name|QTBUG13079_NodePtr
parameter_list|()
member_init_list|:
name|next
argument_list|(
literal|0
argument_list|)
block|{}
DECL|function|~QTBUG13079_NodePtr
name|~
name|QTBUG13079_NodePtr
parameter_list|()
block|{
name|next
operator|=
name|child
operator|.
name|data
argument_list|()
expr_stmt|;
comment|//play with memory
block|}
block|}
struct|;
end_struct
begin_function
DECL|function|QTBUG13079_collectionInsidePtrImpl
template|template
parameter_list|<
template|template
parameter_list|<
name|class
parameter_list|>
name|class
name|C
parameter_list|>
name|void
name|QTBUG13079_collectionInsidePtrImpl
parameter_list|()
block|{
typedef|typedef
name|C
argument_list|<
name|QTBUG13079_NodePtr
argument_list|<
name|C
argument_list|>
argument_list|>
name|Ptr
typedef|;
block|{
name|Ptr
name|nodePtr
decl_stmt|;
name|nodePtr
operator|=
name|Ptr
argument_list|(
operator|new
name|QTBUG13079_NodePtr
argument_list|<
name|C
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|nodePtr
operator|->
name|s
operator|=
literal|"parent"
expr_stmt|;
name|nodePtr
operator|->
name|child
operator|=
name|Ptr
argument_list|(
operator|new
name|QTBUG13079_NodePtr
argument_list|<
name|C
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|nodePtr
operator|->
name|child
operator|->
name|s
operator|=
literal|"child"
expr_stmt|;
name|nodePtr
operator|=
name|nodePtr
operator|->
name|child
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nodePtr
operator|->
name|s
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"child"
argument_list|)
argument_list|)
expr_stmt|;
name|nodePtr
operator|=
name|nodePtr
operator|->
name|child
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|nodePtr
argument_list|)
expr_stmt|;
block|}
block|{
name|Ptr
name|nodePtr
decl_stmt|;
name|nodePtr
operator|=
name|Ptr
argument_list|(
operator|new
name|QTBUG13079_NodePtr
argument_list|<
name|C
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|nodePtr
operator|->
name|s
operator|=
literal|"parent"
expr_stmt|;
name|nodePtr
operator|->
name|next
operator|=
operator|new
name|QTBUG13079_NodePtr
argument_list|<
name|C
argument_list|>
argument_list|()
expr_stmt|;
name|nodePtr
operator|->
name|next
operator|->
name|s
operator|=
literal|"next"
expr_stmt|;
name|nodePtr
operator|=
name|Ptr
argument_list|(
name|nodePtr
operator|->
name|next
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nodePtr
operator|->
name|s
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"next"
argument_list|)
argument_list|)
expr_stmt|;
name|nodePtr
operator|=
name|Ptr
argument_list|(
name|nodePtr
operator|->
name|next
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|nodePtr
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|QTBUG13079_collectionInsideCollection
name|void
name|tst_Collections
operator|::
name|QTBUG13079_collectionInsideCollection
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_TEMPLATE_TEMPLATE_PARAMETERS
name|QTBUG13079_collectionInsideCollectionImpl
argument_list|<
name|QVector
argument_list|>
argument_list|()
expr_stmt|;
name|QTBUG13079_collectionInsideCollectionImpl
argument_list|<
name|QStack
argument_list|>
argument_list|()
expr_stmt|;
name|QTBUG13079_collectionInsideCollectionImpl
argument_list|<
name|QList
argument_list|>
argument_list|()
expr_stmt|;
name|QTBUG13079_collectionInsideCollectionImpl
argument_list|<
name|QLinkedList
argument_list|>
argument_list|()
expr_stmt|;
name|QTBUG13079_collectionInsideCollectionImpl
argument_list|<
name|QQueue
argument_list|>
argument_list|()
expr_stmt|;
block|{
name|QSet
argument_list|<
name|QTBUG13079_Node
argument_list|<
name|QSet
argument_list|>
argument_list|>
name|nodeSet
decl_stmt|;
name|nodeSet
operator|<<
name|QTBUG13079_Node
argument_list|<
name|QSet
argument_list|>
argument_list|()
expr_stmt|;
name|nodeSet
operator|=
name|nodeSet
operator|.
name|begin
argument_list|()
operator|->
name|children
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nodeSet
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|QTBUG13079_collectionInsideCollectionAssocImpl
argument_list|<
name|QMap
argument_list|>
argument_list|()
expr_stmt|;
name|QTBUG13079_collectionInsideCollectionAssocImpl
argument_list|<
name|QHash
argument_list|>
argument_list|()
expr_stmt|;
name|QTBUG13079_collectionInsidePtrImpl
argument_list|<
name|QSharedPointer
argument_list|>
argument_list|()
expr_stmt|;
name|QTBUG13079_collectionInsidePtrImpl
argument_list|<
name|QExplicitlySharedDataPointer
argument_list|>
argument_list|()
expr_stmt|;
name|QTBUG13079_collectionInsidePtrImpl
argument_list|<
name|QSharedDataPointer
argument_list|>
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|foreach_test_arrays
template|template
parameter_list|<
name|class
name|Container
parameter_list|>
name|void
name|foreach_test_arrays
parameter_list|(
specifier|const
name|Container
modifier|&
name|container
parameter_list|)
block|{
typedef|typedef
typename|typename
name|Container
operator|::
name|value_type
name|T
typedef|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|QSet
argument_list|<
name|T
argument_list|>
name|set
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|T
modifier|&
name|val
decl|,
name|container
control|)
block|{
name|QVERIFY
argument_list|(
name|val
operator|==
name|container
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|set
operator|<<
name|val
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|set
operator|.
name|count
argument_list|()
argument_list|,
name|container
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
comment|//modify the container while iterating.
name|Container
name|c2
init|=
name|container
decl_stmt|;
name|Container
name|c3
decl_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
foreach|foreach
control|(
name|T
name|val
decl|,
name|c2
control|)
block|{
name|c3
operator|<<
name|val
expr_stmt|;
name|c2
operator|.
name|insert
argument_list|(
operator|(
name|i
operator|*
literal|89
operator|)
operator|%
name|c2
operator|.
name|size
argument_list|()
argument_list|,
name|T
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|val
operator|==
name|container
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|val
operator|=
name|T
argument_list|()
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|c3
operator|==
name|container
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|foreach_2
name|void
name|tst_Collections
operator|::
name|foreach_2
parameter_list|()
block|{
name|QStringList
name|strlist
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"a,b,c,d,e,f,g,h,ih,kl,mn,op,qr,st,uvw,xyz"
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|foreach_test_arrays
argument_list|(
name|strlist
argument_list|)
expr_stmt|;
name|foreach_test_arrays
argument_list|(
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|(
name|strlist
argument_list|)
argument_list|)
expr_stmt|;
name|foreach_test_arrays
argument_list|(
name|strlist
operator|.
name|toVector
argument_list|()
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|intlist
decl_stmt|;
name|intlist
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
operator|<<
literal|4
operator|<<
literal|5
operator|<<
literal|6
operator|<<
literal|7
operator|<<
literal|8
operator|<<
literal|9
expr_stmt|;
name|foreach_test_arrays
argument_list|(
name|intlist
argument_list|)
expr_stmt|;
name|foreach_test_arrays
argument_list|(
name|intlist
operator|.
name|toVector
argument_list|()
argument_list|)
expr_stmt|;
name|QVarLengthArray
argument_list|<
name|int
argument_list|>
name|varl1
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|int
argument_list|,
literal|3
argument_list|>
name|varl2
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|int
argument_list|,
literal|10
argument_list|>
name|varl3
decl_stmt|;
foreach|foreach
control|(
name|int
name|i
decl|,
name|intlist
control|)
block|{
name|varl1
operator|<<
name|i
expr_stmt|;
name|varl2
operator|<<
name|i
expr_stmt|;
name|varl3
operator|<<
name|i
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|varl1
operator|.
name|count
argument_list|()
argument_list|,
name|intlist
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|varl2
operator|.
name|count
argument_list|()
argument_list|,
name|intlist
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|varl3
operator|.
name|count
argument_list|()
argument_list|,
name|intlist
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|foreach_test_arrays
argument_list|(
name|varl1
argument_list|)
expr_stmt|;
name|foreach_test_arrays
argument_list|(
name|varl2
argument_list|)
expr_stmt|;
name|foreach_test_arrays
argument_list|(
name|varl3
argument_list|)
expr_stmt|;
name|QVarLengthArray
argument_list|<
name|QString
argument_list|>
name|varl4
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|QString
argument_list|,
literal|3
argument_list|>
name|varl5
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|QString
argument_list|,
literal|18
argument_list|>
name|varl6
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|str
decl|,
name|strlist
control|)
block|{
name|varl4
operator|<<
name|str
expr_stmt|;
name|varl5
operator|<<
name|str
expr_stmt|;
name|varl6
operator|<<
name|str
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|varl4
operator|.
name|count
argument_list|()
argument_list|,
name|strlist
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|varl5
operator|.
name|count
argument_list|()
argument_list|,
name|strlist
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|varl6
operator|.
name|count
argument_list|()
argument_list|,
name|strlist
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|foreach_test_arrays
argument_list|(
name|varl4
argument_list|)
expr_stmt|;
name|foreach_test_arrays
argument_list|(
name|varl5
argument_list|)
expr_stmt|;
name|foreach_test_arrays
argument_list|(
name|varl6
argument_list|)
expr_stmt|;
block|}
end_function
begin_struct
DECL|struct|IntOrString
struct|struct
name|IntOrString
block|{
DECL|member|val
name|int
name|val
decl_stmt|;
DECL|function|IntOrString
name|IntOrString
parameter_list|(
name|int
name|v
parameter_list|)
member_init_list|:
name|val
argument_list|(
name|v
argument_list|)
block|{ }
DECL|function|IntOrString
name|IntOrString
parameter_list|(
specifier|const
name|QString
modifier|&
name|v
parameter_list|)
member_init_list|:
name|val
argument_list|(
name|v
operator|.
name|toInt
argument_list|()
argument_list|)
block|{ }
DECL|function|operator int
name|operator
name|int
parameter_list|()
block|{
return|return
name|val
return|;
block|}
DECL|function|operator QString
name|operator
name|QString
parameter_list|()
block|{
return|return
name|QString
operator|::
name|number
argument_list|(
name|val
argument_list|)
return|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_STL
DECL|function|operator std::string
name|operator
name|std::string
parameter_list|()
block|{
return|return
name|QString
operator|::
name|number
argument_list|(
name|val
argument_list|)
operator|.
name|toStdString
argument_list|()
return|;
block|}
DECL|function|IntOrString
name|IntOrString
parameter_list|(
specifier|const
name|std
operator|::
name|string
modifier|&
name|v
parameter_list|)
member_init_list|:
name|val
argument_list|(
name|QString
operator|::
name|fromStdString
argument_list|(
name|v
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
block|{ }
endif|#
directive|endif
block|}
struct|;
end_struct
begin_function
DECL|function|insert_remove_loop_impl
template|template
parameter_list|<
name|class
name|Container
parameter_list|>
name|void
name|insert_remove_loop_impl
parameter_list|()
block|{
typedef|typedef
typename|typename
name|Container
operator|::
name|value_type
name|T
typedef|;
name|Container
name|t
decl_stmt|;
name|t
operator|.
name|append
argument_list|(
name|T
argument_list|(
name|IntOrString
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|<<
operator|(
name|T
argument_list|(
name|IntOrString
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
expr_stmt|;
name|t
operator|+=
operator|(
name|T
argument_list|(
name|IntOrString
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|)
expr_stmt|;
name|t
operator|.
name|prepend
argument_list|(
name|T
argument_list|(
name|IntOrString
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
name|T
argument_list|(
name|IntOrString
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|insert
argument_list|(
literal|4
argument_list|,
name|T
argument_list|(
name|IntOrString
argument_list|(
literal|6
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|insert
argument_list|(
name|t
operator|.
name|begin
argument_list|()
operator|+
literal|2
argument_list|,
name|T
argument_list|(
name|IntOrString
argument_list|(
literal|7
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|insert
argument_list|(
name|t
operator|.
name|begin
argument_list|()
operator|+
literal|5
argument_list|,
literal|3
argument_list|,
name|T
argument_list|(
name|IntOrString
argument_list|(
literal|8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|expect1
index|[]
init|=
block|{
literal|4
block|,
literal|1
block|,
literal|7
block|,
literal|5
block|,
literal|5
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|6
block|,
literal|5
block|,
literal|2
block|,
literal|3
block|}
decl_stmt|;
name|QCOMPARE
argument_list|(
name|size_t
argument_list|(
name|t
operator|.
name|count
argument_list|()
argument_list|)
argument_list|,
sizeof|sizeof
argument_list|(
name|expect1
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|int
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|t
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QCOMPARE
argument_list|(
name|t
index|[
name|i
index|]
argument_list|,
name|T
argument_list|(
name|IntOrString
argument_list|(
name|expect1
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Container
name|compare_test1
init|=
name|t
decl_stmt|;
name|t
operator|.
name|replace
argument_list|(
literal|5
argument_list|,
name|T
argument_list|(
name|IntOrString
argument_list|(
literal|9
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Container
name|compare_test2
init|=
name|t
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|compare_test1
operator|==
name|t
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|compare_test1
operator|!=
name|t
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|compare_test2
operator|==
name|t
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|compare_test2
operator|!=
name|t
operator|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|remove
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|t
operator|.
name|remove
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|int
name|expect2
index|[]
init|=
block|{
literal|4
block|,
literal|1
block|,
literal|9
block|,
literal|8
block|,
literal|6
block|,
literal|5
block|,
literal|2
block|,
literal|3
block|}
decl_stmt|;
name|QCOMPARE
argument_list|(
name|size_t
argument_list|(
name|t
operator|.
name|count
argument_list|()
argument_list|)
argument_list|,
sizeof|sizeof
argument_list|(
name|expect2
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|int
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|t
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QCOMPARE
argument_list|(
name|t
index|[
name|i
index|]
argument_list|,
name|T
argument_list|(
name|IntOrString
argument_list|(
name|expect2
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
typename|typename
name|Container
operator|::
name|iterator
name|it
init|=
name|t
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|t
operator|.
name|end
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|int
argument_list|(
name|IntOrString
argument_list|(
operator|*
name|it
argument_list|)
argument_list|)
operator|%
literal|2
condition|)
operator|++
name|it
expr_stmt|;
else|else
name|it
operator|=
name|t
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
block|}
name|int
name|expect3
index|[]
init|=
block|{
literal|1
block|,
literal|9
block|,
literal|5
block|,
literal|3
block|}
decl_stmt|;
name|QCOMPARE
argument_list|(
name|size_t
argument_list|(
name|t
operator|.
name|count
argument_list|()
argument_list|)
argument_list|,
sizeof|sizeof
argument_list|(
name|expect3
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|int
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|t
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QCOMPARE
argument_list|(
name|t
index|[
name|i
index|]
argument_list|,
name|T
argument_list|(
name|IntOrString
argument_list|(
name|expect3
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|t
operator|.
name|erase
argument_list|(
name|t
operator|.
name|begin
argument_list|()
operator|+
literal|1
argument_list|,
name|t
operator|.
name|end
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|expect4
index|[]
init|=
block|{
literal|1
block|,
literal|3
block|}
decl_stmt|;
name|QCOMPARE
argument_list|(
name|size_t
argument_list|(
name|t
operator|.
name|count
argument_list|()
argument_list|)
argument_list|,
sizeof|sizeof
argument_list|(
name|expect4
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|int
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|t
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QCOMPARE
argument_list|(
name|t
index|[
name|i
index|]
argument_list|,
name|T
argument_list|(
name|IntOrString
argument_list|(
name|expect4
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|t
operator|<<
name|T
argument_list|(
name|IntOrString
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|<<
name|T
argument_list|(
name|IntOrString
argument_list|(
literal|11
argument_list|)
argument_list|)
operator|<<
name|T
argument_list|(
name|IntOrString
argument_list|(
literal|12
argument_list|)
argument_list|)
operator|<<
name|T
argument_list|(
name|IntOrString
argument_list|(
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|<<
name|T
argument_list|(
name|IntOrString
argument_list|(
literal|14
argument_list|)
argument_list|)
operator|<<
name|T
argument_list|(
name|IntOrString
argument_list|(
literal|15
argument_list|)
argument_list|)
operator|<<
name|T
argument_list|(
name|IntOrString
argument_list|(
literal|16
argument_list|)
argument_list|)
operator|<<
name|T
argument_list|(
name|IntOrString
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|<<
name|T
argument_list|(
name|IntOrString
argument_list|(
literal|18
argument_list|)
argument_list|)
operator|<<
name|T
argument_list|(
name|IntOrString
argument_list|(
literal|19
argument_list|)
argument_list|)
operator|<<
name|T
argument_list|(
name|IntOrString
argument_list|(
literal|20
argument_list|)
argument_list|)
operator|<<
name|T
argument_list|(
name|IntOrString
argument_list|(
literal|21
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
typename|typename
name|Container
operator|::
name|iterator
name|it
init|=
name|t
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|t
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|int
name|iv
init|=
name|int
argument_list|(
name|IntOrString
argument_list|(
operator|*
name|it
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|iv
operator|%
literal|2
condition|)
block|{
name|it
operator|=
name|t
operator|.
name|insert
argument_list|(
name|it
argument_list|,
name|T
argument_list|(
name|IntOrString
argument_list|(
name|iv
operator|*
name|iv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|it
operator|=
name|t
operator|.
name|insert
argument_list|(
name|it
operator|+
literal|2
argument_list|,
name|T
argument_list|(
name|IntOrString
argument_list|(
name|iv
operator|*
name|iv
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|expect5
index|[]
init|=
block|{
literal|1
block|,
literal|1
block|,
literal|2
block|,
literal|3
operator|*
literal|3
block|,
literal|3
block|,
literal|3
operator|*
literal|3
operator|+
literal|1
block|,
literal|10
block|,
literal|11
operator|*
literal|11
block|,
literal|11
block|,
literal|11
operator|*
literal|11
operator|+
literal|1
block|,
literal|12
block|,
literal|13
operator|*
literal|13
block|,
literal|13
block|,
literal|13
operator|*
literal|13
operator|+
literal|1
block|,
literal|14
block|,
literal|15
operator|*
literal|15
block|,
literal|15
block|,
literal|15
operator|*
literal|15
operator|+
literal|1
block|,
literal|16
block|,
literal|17
operator|*
literal|17
block|,
literal|17
block|,
literal|17
operator|*
literal|17
operator|+
literal|1
block|,
literal|18
block|,
literal|19
operator|*
literal|19
block|,
literal|19
block|,
literal|19
operator|*
literal|19
operator|+
literal|1
block|,
literal|20
block|,
literal|21
operator|*
literal|21
block|,
literal|21
block|,
literal|21
operator|*
literal|21
operator|+
literal|1
block|}
decl_stmt|;
name|QCOMPARE
argument_list|(
name|size_t
argument_list|(
name|t
operator|.
name|count
argument_list|()
argument_list|)
argument_list|,
sizeof|sizeof
argument_list|(
name|expect5
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|int
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|t
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QCOMPARE
argument_list|(
name|t
index|[
name|i
index|]
argument_list|,
name|T
argument_list|(
name|IntOrString
argument_list|(
name|expect5
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|//Add insert(int, int, T) so it has the same interface as QVector and QVarLengthArray for the test.
end_comment
begin_struct
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
struct|struct
DECL|struct|ExtList
name|ExtList
super|:
name|QList
argument_list|<
name|T
argument_list|>
block|{
using|using
name|QList
argument_list|<
name|T
argument_list|>
operator|::
name|insert
using|;
DECL|function|insert
name|void
name|insert
parameter_list|(
name|int
name|before
parameter_list|,
name|int
name|n
parameter_list|,
specifier|const
name|T
modifier|&
name|x
parameter_list|)
block|{
while|while
condition|(
name|n
operator|--
condition|)
block|{
name|this
operator|->
name|insert
argument_list|(
name|before
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|insert
name|void
name|insert
parameter_list|(
typename|typename
name|QList
argument_list|<
name|T
argument_list|>
operator|::
name|iterator
name|before
parameter_list|,
name|int
name|n
parameter_list|,
specifier|const
name|T
modifier|&
name|x
parameter_list|)
block|{
while|while
condition|(
name|n
operator|--
condition|)
block|{
name|before
operator|=
name|this
operator|->
name|insert
argument_list|(
name|before
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|remove
name|void
name|remove
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|this
operator|->
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
DECL|function|remove
name|void
name|remove
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|n
parameter_list|)
block|{
while|while
condition|(
name|n
operator|--
condition|)
block|{
name|this
operator|->
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
struct|;
end_struct
begin_function
DECL|function|insert_remove_loop
name|void
name|tst_Collections
operator|::
name|insert_remove_loop
parameter_list|()
block|{
name|insert_remove_loop_impl
argument_list|<
name|ExtList
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|insert_remove_loop_impl
argument_list|<
name|ExtList
argument_list|<
name|QString
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|insert_remove_loop_impl
argument_list|<
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|insert_remove_loop_impl
argument_list|<
name|QVector
argument_list|<
name|QString
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|insert_remove_loop_impl
argument_list|<
name|QVarLengthArray
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|insert_remove_loop_impl
argument_list|<
name|QVarLengthArray
argument_list|<
name|QString
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|insert_remove_loop_impl
argument_list|<
name|QVarLengthArray
argument_list|<
name|int
argument_list|,
literal|10
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|insert_remove_loop_impl
argument_list|<
name|QVarLengthArray
argument_list|<
name|QString
argument_list|,
literal|10
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|insert_remove_loop_impl
argument_list|<
name|QVarLengthArray
argument_list|<
name|int
argument_list|,
literal|3
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|insert_remove_loop_impl
argument_list|<
name|QVarLengthArray
argument_list|<
name|QString
argument_list|,
literal|3
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|insert_remove_loop_impl
argument_list|<
name|QVarLengthArray
argument_list|<
name|int
argument_list|,
literal|15
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|insert_remove_loop_impl
argument_list|<
name|QVarLengthArray
argument_list|<
name|QString
argument_list|,
literal|15
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_STL
name|insert_remove_loop_impl
argument_list|<
name|ExtList
argument_list|<
name|std
operator|::
name|string
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|insert_remove_loop_impl
argument_list|<
name|QVector
argument_list|<
name|std
operator|::
name|string
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|insert_remove_loop_impl
argument_list|<
name|QVarLengthArray
argument_list|<
name|std
operator|::
name|string
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|insert_remove_loop_impl
argument_list|<
name|QVarLengthArray
argument_list|<
name|std
operator|::
name|string
argument_list|,
literal|10
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|insert_remove_loop_impl
argument_list|<
name|QVarLengthArray
argument_list|<
name|std
operator|::
name|string
argument_list|,
literal|3
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|insert_remove_loop_impl
argument_list|<
name|QVarLengthArray
argument_list|<
name|std
operator|::
name|string
argument_list|,
literal|15
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_Collections
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_collections.moc"
end_include
end_unit
