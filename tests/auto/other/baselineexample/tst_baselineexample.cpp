begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qbaselinetest.h>
end_include
begin_include
include|#
directive|include
file|<QPushButton>
end_include
begin_class
DECL|class|tst_BaselineExample
class|class
name|tst_BaselineExample
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_BaselineExample
parameter_list|()
constructor_decl|;
private|private
name|Q_SLOTS
private|:
name|void
name|testBasicUsage
parameter_list|()
function_decl|;
name|void
name|testMultipleImages
parameter_list|()
function_decl|;
name|void
name|testDataDriven_data
parameter_list|()
function_decl|;
name|void
name|testDataDriven
parameter_list|()
function_decl|;
name|void
name|testDataDrivenChecksum_data
parameter_list|()
function_decl|;
name|void
name|testDataDrivenChecksum
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_BaselineExample
name|tst_BaselineExample
operator|::
name|tst_BaselineExample
parameter_list|()
block|{ }
end_constructor
begin_function
DECL|function|testBasicUsage
name|void
name|tst_BaselineExample
operator|::
name|testBasicUsage
parameter_list|()
block|{
comment|// Generate an image:
name|QPushButton
name|b
argument_list|(
literal|"Press me!"
argument_list|)
decl_stmt|;
name|b
operator|.
name|resize
argument_list|(
literal|100
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|b
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|QImage
name|img1
init|=
name|b
operator|.
name|grab
argument_list|()
operator|.
name|toImage
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|img1
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
comment|// Compare it to baseline on server:
name|QBASELINE_CHECK
argument_list|(
name|img1
argument_list|,
literal|"button"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testMultipleImages
name|void
name|tst_BaselineExample
operator|::
name|testMultipleImages
parameter_list|()
block|{
name|QPushButton
name|b
argument_list|(
literal|"Press me!"
argument_list|)
decl_stmt|;
name|b
operator|.
name|resize
argument_list|(
literal|100
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|b
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|QBASELINE_CHECK
argument_list|(
name|b
operator|.
name|grab
argument_list|()
operator|.
name|toImage
argument_list|()
argument_list|,
literal|"text1"
argument_list|)
expr_stmt|;
name|b
operator|.
name|setText
argument_list|(
literal|"Kick me!"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|QBASELINE_CHECK
argument_list|(
name|b
operator|.
name|grab
argument_list|()
operator|.
name|toImage
argument_list|()
argument_list|,
literal|"text2"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testDataDriven_data
name|void
name|tst_BaselineExample
operator|::
name|testDataDriven_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"label"
argument_list|)
expr_stmt|;
name|QBaselineTest
operator|::
name|newRow
argument_list|(
literal|"short"
argument_list|)
operator|<<
literal|"Ok!"
expr_stmt|;
name|QBaselineTest
operator|::
name|newRow
argument_list|(
literal|"long"
argument_list|)
operator|<<
literal|"A really long button text that just does not seem to end"
expr_stmt|;
name|QBaselineTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
literal|""
expr_stmt|;
name|QBaselineTest
operator|::
name|newRow
argument_list|(
literal|"signs"
argument_list|)
operator|<<
literal|"!@#$%^&*()_"
expr_stmt|;
name|QBaselineTest
operator|::
name|newRow
argument_list|(
literal|"html"
argument_list|)
operator|<<
literal|"<b>BOLD</b>"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testDataDriven
name|void
name|tst_BaselineExample
operator|::
name|testDataDriven
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|label
argument_list|)
expr_stmt|;
name|QPushButton
name|b
argument_list|(
name|label
argument_list|)
decl_stmt|;
name|b
operator|.
name|resize
argument_list|(
literal|100
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|b
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|QBASELINE_TEST
argument_list|(
name|b
operator|.
name|grab
argument_list|()
operator|.
name|toImage
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testDataDrivenChecksum_data
name|void
name|tst_BaselineExample
operator|::
name|testDataDrivenChecksum_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"label"
argument_list|)
expr_stmt|;
specifier|const
name|int
name|numItems
init|=
literal|5
decl_stmt|;
specifier|const
name|char
modifier|*
name|tags
index|[
name|numItems
index|]
init|=
block|{
literal|"short"
block|,
literal|"long"
block|,
literal|"empty"
block|,
literal|"signs"
block|,
literal|"html"
block|}
decl_stmt|;
specifier|const
name|char
modifier|*
name|labels
index|[
name|numItems
index|]
init|=
block|{
literal|"Ok!"
block|,
literal|"A really long button text that just does not seem to end"
block|,
literal|""
block|,
literal|"!@#$%^&*()_"
block|,
literal|"<b>BOLD</b>"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numItems
condition|;
name|i
operator|++
control|)
block|{
name|quint16
name|checksum
init|=
name|qChecksum
argument_list|(
name|labels
index|[
name|i
index|]
argument_list|,
name|qstrlen
argument_list|(
name|labels
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|QBaselineTest
operator|::
name|newRow
argument_list|(
name|tags
index|[
name|i
index|]
argument_list|,
name|checksum
argument_list|)
operator|<<
name|labels
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|testDataDrivenChecksum
name|void
name|tst_BaselineExample
operator|::
name|testDataDrivenChecksum
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|label
argument_list|)
expr_stmt|;
name|QPushButton
name|b
argument_list|(
name|label
argument_list|)
decl_stmt|;
name|b
operator|.
name|resize
argument_list|(
literal|100
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|b
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|QBASELINE_TEST
argument_list|(
name|b
operator|.
name|grab
argument_list|()
operator|.
name|toImage
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
DECL|variable|tst_BaselineExample
name|QTEST_MAIN
argument_list|(
name|tst_BaselineExample
argument_list|)
expr_stmt|;
end_expr_stmt
begin_include
include|#
directive|include
file|"tst_baselineexample.moc"
end_include
end_unit
