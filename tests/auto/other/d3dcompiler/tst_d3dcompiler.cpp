begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|// This test verifies the behavior of d3dcompiler_qt, which is only built when ANGLE is enabled
end_comment
begin_include
include|#
directive|include
file|<QCryptographicHash>
end_include
begin_include
include|#
directive|include
file|<QDir>
end_include
begin_include
include|#
directive|include
file|<QFuture>
end_include
begin_include
include|#
directive|include
file|<QObject>
end_include
begin_include
include|#
directive|include
file|<QStandardPaths>
end_include
begin_include
include|#
directive|include
file|<QTemporaryDir>
end_include
begin_include
include|#
directive|include
file|<QTest>
end_include
begin_include
include|#
directive|include
file|<QThread>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
end_if
begin_include
include|#
directive|include
file|<d3dcommon.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINRT
end_ifndef
begin_define
DECL|macro|loadLibrary
define|#
directive|define
name|loadLibrary
parameter_list|(
name|library
parameter_list|)
value|LoadLibrary(library)
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|loadLibrary
define|#
directive|define
name|loadLibrary
parameter_list|(
name|library
parameter_list|)
value|LoadPackagedLibrary(library, NULL)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|D3DCOMPILER_DLL
end_ifdef
begin_undef
DECL|macro|D3DCOMPILER_DLL
undef|#
directive|undef
name|D3DCOMPILER_DLL
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QT_NO_DEBUG
end_ifdef
begin_define
DECL|macro|D3DCOMPILER_DLL
define|#
directive|define
name|D3DCOMPILER_DLL
value|L"d3dcompiler_qt"
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|D3DCOMPILER_DLL
define|#
directive|define
name|D3DCOMPILER_DLL
value|L"d3dcompiler_qtd"
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|getCompilerFunc
define|#
directive|define
name|getCompilerFunc
parameter_list|(
name|dll
parameter_list|)
value|reinterpret_cast<D3DCompileFunc>(GetProcAddress(dll, "D3DCompile"))
end_define
begin_typedef
DECL|typedef|D3DCompileFunc
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|D3DCompileFunc
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|SIZE_T
name|data_size
parameter_list|,
specifier|const
name|char
modifier|*
name|filename
parameter_list|,
specifier|const
name|D3D_SHADER_MACRO
modifier|*
name|defines
parameter_list|,
name|ID3DInclude
modifier|*
name|include
parameter_list|,
specifier|const
name|char
modifier|*
name|entrypoint
parameter_list|,
specifier|const
name|char
modifier|*
name|target
parameter_list|,
name|UINT
name|sflags
parameter_list|,
name|UINT
name|eflags
parameter_list|,
name|ID3DBlob
modifier|*
modifier|*
name|shader
parameter_list|,
name|ID3DBlob
modifier|*
modifier|*
name|error_messages
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|compilerDlls
specifier|static
specifier|const
name|wchar_t
modifier|*
name|compilerDlls
index|[]
init|=
block|{
literal|L"d3dcompiler_47.dll"
block|,
literal|L"d3dcompiler_46.dll"
block|,
literal|L"d3dcompiler_45.dll"
block|,
literal|L"d3dcompiler_44.dll"
block|,
literal|L"d3dcompiler_43.dll"
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|hlsl
specifier|static
specifier|const
name|char
name|hlsl
index|[]
init|=
literal|"uniform SamplerState Sampler : register(s0);\n"
literal|"uniform Texture2D Texture : register(t0);\n"
literal|"float4 main(in float4 gl_Position : SV_POSITION, in float2 coord : TEXCOORD0) : SV_TARGET0\n"
literal|"{\n"
literal|"return Texture.Sample(Sampler, coord);\n"
literal|"}\n"
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|blobToByteArray
specifier|static
specifier|inline
name|QByteArray
name|blobToByteArray
parameter_list|(
name|ID3DBlob
modifier|*
name|blob
parameter_list|)
block|{
return|return
name|blob
condition|?
name|QByteArray
operator|::
name|fromRawData
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|blob
operator|->
name|GetBufferPointer
argument_list|()
argument_list|)
argument_list|,
name|blob
operator|->
name|GetBufferSize
argument_list|()
argument_list|)
else|:
name|QByteArray
argument_list|()
return|;
block|}
end_function
begin_class
DECL|class|CompileRunner
class|class
name|CompileRunner
super|:
specifier|public
name|QThread
block|{
public|public:
DECL|function|CompileRunner
name|CompileRunner
parameter_list|(
name|D3DCompileFunc
name|d3dCompile
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|,
name|ID3DBlob
modifier|*
modifier|*
name|shader
parameter_list|,
name|ID3DBlob
modifier|*
modifier|*
name|error
parameter_list|)
member_init_list|:
name|m_d3dCompile
argument_list|(
name|d3dCompile
argument_list|)
member_init_list|,
name|m_data
argument_list|(
name|data
argument_list|)
member_init_list|,
name|m_shader
argument_list|(
name|shader
argument_list|)
member_init_list|,
name|m_error
argument_list|(
name|error
argument_list|)
block|{     }
DECL|function|result
name|HRESULT
name|result
parameter_list|()
specifier|const
block|{
return|return
name|m_result
return|;
block|}
private|private:
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|m_result
operator|=
name|m_d3dCompile
argument_list|(
name|m_data
operator|.
name|constData
argument_list|()
argument_list|,
name|m_data
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"main"
argument_list|,
literal|"ps_4_0"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|m_shader
argument_list|,
name|m_error
argument_list|)
expr_stmt|;
block|}
DECL|member|m_result
name|HRESULT
name|m_result
decl_stmt|;
DECL|member|m_d3dCompile
name|D3DCompileFunc
name|m_d3dCompile
decl_stmt|;
DECL|member|m_data
name|QByteArray
name|m_data
decl_stmt|;
DECL|member|m_shader
name|ID3DBlob
modifier|*
modifier|*
name|m_shader
decl_stmt|;
DECL|member|m_error
name|ID3DBlob
modifier|*
modifier|*
name|m_error
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|tst_d3dcompiler
class|class
name|tst_d3dcompiler
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
name|void
name|service_data
parameter_list|()
function_decl|;
name|void
name|service
parameter_list|()
function_decl|;
name|void
name|offlineCompile
parameter_list|()
function_decl|;
name|void
name|onlineCompile
parameter_list|()
function_decl|;
private|private:
name|QString
name|blobPath
parameter_list|()
function_decl|;
DECL|member|d3dcompiler_qt
name|HMODULE
name|d3dcompiler_qt
decl_stmt|;
DECL|member|d3dcompiler_win
name|HMODULE
name|d3dcompiler_win
decl_stmt|;
DECL|member|d3dCompile
name|D3DCompileFunc
name|d3dCompile
decl_stmt|;
DECL|member|tempDir
name|QTemporaryDir
name|tempDir
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|blobPath
name|QString
name|tst_d3dcompiler
operator|::
name|blobPath
parameter_list|()
block|{
name|QDir
name|path
decl_stmt|;
if|if
condition|(
name|qEnvironmentVariableIsSet
argument_list|(
literal|"QT_D3DCOMPILER_DIR"
argument_list|)
condition|)
name|path
operator|.
name|setPath
argument_list|(
name|qgetenv
argument_list|(
literal|"QT_D3DCOMPILER_DIR"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|path
operator|.
name|setPath
argument_list|(
name|QStandardPaths
operator|::
name|writableLocation
argument_list|(
name|QStandardPaths
operator|::
name|DataLocation
argument_list|)
operator|+
name|QStringLiteral
argument_list|(
literal|"/d3dcompiler"
argument_list|)
argument_list|)
expr_stmt|;
name|path
operator|.
name|mkdir
argument_list|(
name|QStringLiteral
argument_list|(
literal|"binary"
argument_list|)
argument_list|)
expr_stmt|;
name|path
operator|.
name|mkdir
argument_list|(
name|QStringLiteral
argument_list|(
literal|"source"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|path
operator|.
name|absolutePath
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|initTestCase
name|void
name|tst_d3dcompiler
operator|::
name|initTestCase
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|tempDir
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_d3dcompiler
operator|::
name|init
parameter_list|()
block|{
name|qunsetenv
argument_list|(
literal|"QT_D3DCOMPILER_DIR"
argument_list|)
expr_stmt|;
name|qunsetenv
argument_list|(
literal|"QT_D3DCOMPILER_TIMEOUT"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_d3dcompiler
operator|::
name|cleanup
parameter_list|()
block|{
name|FreeLibrary
argument_list|(
name|d3dcompiler_qt
argument_list|)
expr_stmt|;
name|FreeLibrary
argument_list|(
name|d3dcompiler_win
argument_list|)
expr_stmt|;
name|QDir
name|path
argument_list|(
name|blobPath
argument_list|()
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|entry
decl|,
name|path
operator|.
name|entryList
argument_list|(
name|QStringList
argument_list|()
argument_list|,
name|QDir
operator|::
name|Files
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
control|)
name|path
operator|.
name|remove
argument_list|(
name|entry
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|entry
decl|,
name|path
operator|.
name|entryList
argument_list|(
name|QStringList
argument_list|()
argument_list|,
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
control|)
block|{
name|QDir
name|dir
argument_list|(
name|path
operator|.
name|absoluteFilePath
argument_list|(
name|entry
operator|+
name|QStringLiteral
argument_list|(
literal|"/"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|dir
operator|.
name|removeRecursively
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|service_data
name|void
name|tst_d3dcompiler
operator|::
name|service_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"compilerDir"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"exists"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|HRESULT
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
comment|// Don't test the default case, as it would clutter the AppData directory
comment|//QTest::newRow("default")<< QByteArrayLiteral("")<< true<< E_ABORT;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"temporary"
argument_list|)
operator|<<
name|QFile
operator|::
name|encodeName
argument_list|(
name|tempDir
operator|.
name|path
argument_list|()
argument_list|)
operator|<<
literal|true
operator|<<
name|E_ABORT
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid"
argument_list|)
operator|<<
name|QByteArrayLiteral
argument_list|(
literal|"ZZ:\\"
argument_list|)
operator|<<
literal|false
operator|<<
name|S_OK
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QByteArrayLiteral
argument_list|(
literal|""
argument_list|)
operator|<<
literal|false
operator|<<
name|S_OK
expr_stmt|;
block|}
end_function
begin_function
DECL|function|service
name|void
name|tst_d3dcompiler
operator|::
name|service
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|compilerDir
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|exists
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|HRESULT
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|qputenv
argument_list|(
literal|"QT_D3DCOMPILER_DIR"
argument_list|,
name|compilerDir
argument_list|)
expr_stmt|;
specifier|const
name|QDir
name|path
init|=
name|blobPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|exists
condition|)
block|{
comment|// Activate service
name|QVERIFY
argument_list|(
name|path
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QFile
name|control
argument_list|(
name|path
operator|.
name|absoluteFilePath
argument_list|(
name|QStringLiteral
argument_list|(
literal|"control"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|control
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|control
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
operator|!
name|path
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Run compiler (fast fail)
name|d3dcompiler_qt
operator|=
name|loadLibrary
argument_list|(
name|D3DCOMPILER_DLL
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|d3dcompiler_qt
argument_list|)
expr_stmt|;
name|d3dCompile
operator|=
name|getCompilerFunc
argument_list|(
name|d3dcompiler_qt
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|d3dCompile
argument_list|)
expr_stmt|;
name|qputenv
argument_list|(
literal|"QT_D3DCOMPILER_TIMEOUT"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
specifier|const
name|QByteArray
name|data
argument_list|(
name|hlsl
argument_list|)
decl_stmt|;
name|ID3DBlob
modifier|*
name|shader
init|=
literal|0
decl_stmt|,
modifier|*
name|errorMessage
init|=
literal|0
decl_stmt|;
name|HRESULT
name|hr
init|=
name|d3dCompile
argument_list|(
name|data
operator|.
name|constData
argument_list|()
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"main"
argument_list|,
literal|"ps_4_0"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|shader
argument_list|,
operator|&
name|errorMessage
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|hr
operator|==
name|result
argument_list|,
name|blobToByteArray
argument_list|(
name|errorMessage
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that passthrough works
if|if
condition|(
name|hr
operator|==
name|S_OK
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|compilerDlls
index|[
name|i
index|]
condition|;
operator|++
name|i
control|)
block|{
name|d3dcompiler_win
operator|=
name|loadLibrary
argument_list|(
name|compilerDlls
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|d3dcompiler_win
condition|)
break|break;
block|}
name|QVERIFY
argument_list|(
name|d3dcompiler_win
argument_list|)
expr_stmt|;
name|d3dCompile
operator|=
name|getCompilerFunc
argument_list|(
name|d3dcompiler_win
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|d3dCompile
argument_list|)
expr_stmt|;
comment|// Compile a shader to compare with
name|ID3DBlob
modifier|*
name|reference
init|=
literal|0
decl_stmt|;
name|HRESULT
name|hr
init|=
name|d3dCompile
argument_list|(
name|data
operator|.
name|constData
argument_list|()
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"main"
argument_list|,
literal|"ps_4_0"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|reference
argument_list|,
operator|&
name|errorMessage
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|,
name|blobToByteArray
argument_list|(
name|errorMessage
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|shaderData
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|shader
operator|->
name|GetBufferPointer
argument_list|()
argument_list|)
argument_list|,
name|shader
operator|->
name|GetBufferSize
argument_list|()
argument_list|)
decl_stmt|;
name|QByteArray
name|referenceData
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|reference
operator|->
name|GetBufferPointer
argument_list|()
argument_list|)
argument_list|,
name|reference
operator|->
name|GetBufferSize
argument_list|()
argument_list|)
decl_stmt|;
name|reference
operator|->
name|Release
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|shaderData
argument_list|,
name|referenceData
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|FAILED
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shader
condition|)
name|shader
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|offlineCompile
name|void
name|tst_d3dcompiler
operator|::
name|offlineCompile
parameter_list|()
block|{
name|qputenv
argument_list|(
literal|"QT_D3DCOMPILER_DIR"
argument_list|,
name|QFile
operator|::
name|encodeName
argument_list|(
name|tempDir
operator|.
name|path
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|compilerDlls
index|[
name|i
index|]
condition|;
operator|++
name|i
control|)
block|{
name|d3dcompiler_win
operator|=
name|loadLibrary
argument_list|(
name|compilerDlls
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|d3dcompiler_win
condition|)
break|break;
block|}
name|QVERIFY
argument_list|(
name|d3dcompiler_win
argument_list|)
expr_stmt|;
name|d3dCompile
operator|=
name|getCompilerFunc
argument_list|(
name|d3dcompiler_win
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|d3dCompile
argument_list|)
expr_stmt|;
comment|// Compile a shader to place in binary directory
specifier|const
name|QByteArray
name|data
argument_list|(
name|hlsl
argument_list|)
decl_stmt|;
name|ID3DBlob
modifier|*
name|shader
init|=
literal|0
decl_stmt|,
modifier|*
name|errorMessage
init|=
literal|0
decl_stmt|;
name|HRESULT
name|hr
init|=
name|d3dCompile
argument_list|(
name|data
operator|.
name|constData
argument_list|()
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"main"
argument_list|,
literal|"ps_4_0"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|shader
argument_list|,
operator|&
name|errorMessage
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|,
name|blobToByteArray
argument_list|(
name|errorMessage
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|shader
argument_list|)
expr_stmt|;
name|QDir
name|outputPath
argument_list|(
name|blobPath
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|outputPath
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|outputPath
operator|.
name|exists
argument_list|(
name|QStringLiteral
argument_list|(
literal|"binary"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|outputPath
operator|.
name|cd
argument_list|(
name|QStringLiteral
argument_list|(
literal|"binary"
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
name|output
argument_list|(
name|outputPath
operator|.
name|absoluteFilePath
argument_list|(
name|QCryptographicHash
operator|::
name|hash
argument_list|(
name|data
argument_list|,
name|QCryptographicHash
operator|::
name|Sha1
argument_list|)
operator|.
name|toHex
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|output
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|shader
operator|->
name|GetBufferPointer
argument_list|()
argument_list|)
argument_list|,
name|shader
operator|->
name|GetBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|shader
operator|->
name|Release
argument_list|()
expr_stmt|;
comment|// Run compiler
name|d3dcompiler_qt
operator|=
name|loadLibrary
argument_list|(
name|D3DCOMPILER_DLL
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|d3dcompiler_qt
argument_list|)
expr_stmt|;
name|d3dCompile
operator|=
name|getCompilerFunc
argument_list|(
name|d3dcompiler_qt
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|d3dCompile
argument_list|)
expr_stmt|;
name|hr
operator|=
name|d3dCompile
argument_list|(
name|data
operator|.
name|constData
argument_list|()
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"main"
argument_list|,
literal|"ps_4_0"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|shader
argument_list|,
operator|&
name|errorMessage
argument_list|)
expr_stmt|;
comment|// Returns S_FALSE if a cached shader was found
name|QVERIFY2
argument_list|(
name|hr
operator|==
name|S_FALSE
argument_list|,
name|blobToByteArray
argument_list|(
name|errorMessage
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|onlineCompile
name|void
name|tst_d3dcompiler
operator|::
name|onlineCompile
parameter_list|()
block|{
name|qputenv
argument_list|(
literal|"QT_D3DCOMPILER_DIR"
argument_list|,
name|QFile
operator|::
name|encodeName
argument_list|(
name|tempDir
operator|.
name|path
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|data
argument_list|(
name|hlsl
argument_list|)
decl_stmt|;
specifier|const
name|QDir
name|path
init|=
name|blobPath
argument_list|()
decl_stmt|;
comment|// Activate service
name|QVERIFY
argument_list|(
name|path
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QFile
name|control
argument_list|(
name|path
operator|.
name|absoluteFilePath
argument_list|(
name|QStringLiteral
argument_list|(
literal|"control"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|control
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|control
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|d3dcompiler_qt
operator|=
name|loadLibrary
argument_list|(
name|D3DCOMPILER_DLL
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|d3dcompiler_qt
argument_list|)
expr_stmt|;
name|D3DCompileFunc
name|concurrentCompile
init|=
name|getCompilerFunc
argument_list|(
name|d3dcompiler_qt
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|d3dCompile
argument_list|)
expr_stmt|;
comment|// Run async
name|ID3DBlob
modifier|*
name|shader
init|=
literal|0
decl_stmt|,
modifier|*
name|errorMessage
init|=
literal|0
decl_stmt|;
name|CompileRunner
name|runner
argument_list|(
name|concurrentCompile
argument_list|,
name|data
argument_list|,
operator|&
name|shader
argument_list|,
operator|&
name|errorMessage
argument_list|)
decl_stmt|;
name|runner
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Wait for source to appear
name|QVERIFY
argument_list|(
name|path
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|path
operator|.
name|exists
argument_list|(
name|QStringLiteral
argument_list|(
literal|"source"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|path
operator|.
name|exists
argument_list|(
name|QStringLiteral
argument_list|(
literal|"binary"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|fileName
init|=
name|QCryptographicHash
operator|::
name|hash
argument_list|(
name|data
argument_list|,
name|QCryptographicHash
operator|::
name|Sha1
argument_list|)
operator|.
name|toHex
argument_list|()
operator|+
name|QStringLiteral
argument_list|(
literal|"!main!ps_4_0!0"
argument_list|)
decl_stmt|;
name|QFile
name|input
argument_list|(
name|path
operator|.
name|absoluteFilePath
argument_list|(
name|QStringLiteral
argument_list|(
literal|"source/"
argument_list|)
operator|+
name|fileName
argument_list|)
argument_list|)
decl_stmt|;
name|QTRY_VERIFY_WITH_TIMEOUT
argument_list|(
name|input
operator|.
name|exists
argument_list|()
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
name|QTRY_VERIFY_WITH_TIMEOUT
argument_list|(
name|input
operator|.
name|isOpen
argument_list|()
operator|||
name|input
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|// Compile passed source
specifier|const
name|QByteArray
name|inputData
init|=
name|input
operator|.
name|readAll
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|compilerDlls
index|[
name|i
index|]
condition|;
operator|++
name|i
control|)
block|{
name|d3dcompiler_win
operator|=
name|loadLibrary
argument_list|(
name|compilerDlls
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|d3dcompiler_win
condition|)
break|break;
block|}
name|QVERIFY
argument_list|(
name|d3dcompiler_win
argument_list|)
expr_stmt|;
name|d3dCompile
operator|=
name|getCompilerFunc
argument_list|(
name|d3dcompiler_win
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|d3dCompile
argument_list|)
expr_stmt|;
name|ID3DBlob
modifier|*
name|reference
init|=
literal|0
decl_stmt|,
modifier|*
name|errorMessage2
init|=
literal|0
decl_stmt|;
name|HRESULT
name|hr
init|=
name|d3dCompile
argument_list|(
name|inputData
operator|.
name|constData
argument_list|()
argument_list|,
name|inputData
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"main"
argument_list|,
literal|"ps_4_0"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|reference
argument_list|,
operator|&
name|errorMessage2
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|,
name|blobToByteArray
argument_list|(
name|errorMessage2
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QByteArray
name|referenceData
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|reference
operator|->
name|GetBufferPointer
argument_list|()
argument_list|)
argument_list|,
name|reference
operator|->
name|GetBufferSize
argument_list|()
argument_list|)
decl_stmt|;
name|reference
operator|->
name|Release
argument_list|()
expr_stmt|;
comment|// Write to output directory
name|QFile
name|output
argument_list|(
name|path
operator|.
name|absoluteFilePath
argument_list|(
name|QStringLiteral
argument_list|(
literal|"binary/"
argument_list|)
operator|+
name|fileName
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|output
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|referenceData
argument_list|)
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// All done
name|QVERIFY
argument_list|(
name|runner
operator|.
name|wait
argument_list|(
literal|3000
argument_list|)
argument_list|)
expr_stmt|;
name|hr
operator|=
name|runner
operator|.
name|result
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|hr
operator|==
name|S_FALSE
argument_list|,
name|blobToByteArray
argument_list|(
name|errorMessage2
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QByteArray
name|resultData
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|shader
operator|->
name|GetBufferPointer
argument_list|()
argument_list|)
argument_list|,
name|shader
operator|->
name|GetBufferSize
argument_list|()
argument_list|)
decl_stmt|;
name|shader
operator|->
name|Release
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|referenceData
operator|==
name|resultData
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_d3dcompiler
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_d3dcompiler.moc"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_OS_WIN
end_comment
end_unit
