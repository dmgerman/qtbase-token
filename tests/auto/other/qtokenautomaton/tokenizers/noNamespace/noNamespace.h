begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/* NOTE: This file is AUTO GENERATED by qtokenautomaton2cpp.xsl. */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|q_noNamespace_h
end_ifndef
begin_define
DECL|macro|q_noNamespace_h
define|#
directive|define
name|q_noNamespace_h
end_define
begin_include
include|#
directive|include
file|<QtCore/QString>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|class
name|NoNamespace
block|{
name|public
label|:
enum|enum
name|Token
block|{
name|NoKeyword
block|,
name|AReallyLongTokenIFreakinMeanItUKnowUKnowKnow
block|,
name|ColonInName
block|,
name|FFFF
block|,
name|FFFG
block|,
name|FFGF
block|,
name|FFGG
block|,
name|FFLM
block|,
name|WeHaveDashes
block|,
name|WeHaveDashes2
block|,
name|_
block|,
name|_111
block|,
name|wobbly
block|}
enum|;
specifier|static
specifier|inline
name|Token
name|toToken
parameter_list|(
specifier|const
name|QString
modifier|&
name|value
parameter_list|)
function_decl|;
specifier|static
specifier|inline
name|Token
name|toToken
parameter_list|(
specifier|const
name|QStringRef
modifier|&
name|value
parameter_list|)
function_decl|;
specifier|static
name|Token
name|toToken
parameter_list|(
specifier|const
name|QChar
modifier|*
name|data
parameter_list|,
name|int
name|length
parameter_list|)
function_decl|;
specifier|static
name|QString
name|toString
parameter_list|(
name|Token
name|token
parameter_list|)
function_decl|;
name|private
label|:
specifier|static
specifier|inline
name|Token
name|classifier3
parameter_list|(
specifier|const
name|QChar
modifier|*
name|data
parameter_list|)
function_decl|;
specifier|static
specifier|inline
name|Token
name|classifier4
parameter_list|(
specifier|const
name|QChar
modifier|*
name|data
parameter_list|)
function_decl|;
specifier|static
specifier|inline
name|Token
name|classifier14
parameter_list|(
specifier|const
name|QChar
modifier|*
name|data
parameter_list|)
function_decl|;
specifier|static
specifier|inline
name|Token
name|classifier15
parameter_list|(
specifier|const
name|QChar
modifier|*
name|data
parameter_list|)
function_decl|;
specifier|static
specifier|inline
name|Token
name|classifier44
parameter_list|(
specifier|const
name|QChar
modifier|*
name|data
parameter_list|)
function_decl|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
DECL|function|toToken
specifier|inline
name|NoNamespace
operator|::
name|Token
name|NoNamespace
operator|::
name|toToken
argument_list|(
argument|const QString&value
argument_list|)
block|{
return|return
name|toToken
argument_list|(
name|value
operator|.
name|constData
argument_list|()
argument_list|,
name|value
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|toToken
specifier|inline
name|NoNamespace
operator|::
name|Token
name|NoNamespace
operator|::
name|toToken
argument_list|(
argument|const QStringRef&value
argument_list|)
block|{
return|return
name|toToken
argument_list|(
name|value
operator|.
name|constData
argument_list|()
argument_list|,
name|value
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
