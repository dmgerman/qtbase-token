begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtGui/QtGui>
end_include
begin_include
include|#
directive|include
file|"modeltest.h"
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QModelIndex
argument_list|)
end_macro
begin_comment
comment|/*!     Connect to all of the models signals.  Whenever anything happens recheck everything. */
end_comment
begin_constructor
DECL|function|ModelTest
name|ModelTest
operator|::
name|ModelTest
parameter_list|(
name|QAbstractItemModel
modifier|*
name|_model
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|model
argument_list|(
name|_model
argument_list|)
member_init_list|,
name|fetchingMore
argument_list|(
literal|false
argument_list|)
block|{
if|if
condition|(
operator|!
name|model
condition|)
name|qFatal
argument_list|(
literal|"%s: model must not be null"
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsAboutToBeInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|runAllTests
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|runAllTests
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|runAllTests
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|runAllTests
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|dataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|runAllTests
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|headerDataChanged
argument_list|(
name|Qt
operator|::
name|Orientation
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|runAllTests
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|layoutAboutToBeChanged
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|runAllTests
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|layoutChanged
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|runAllTests
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|modelReset
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|runAllTests
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|runAllTests
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|runAllTests
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|runAllTests
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|runAllTests
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Special checks for changes
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|layoutAboutToBeChanged
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|layoutAboutToBeChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|layoutChanged
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|layoutChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|rowsAboutToBeInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|rowsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|rowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|rowsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|dataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|dataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|headerDataChanged
argument_list|(
name|Qt
operator|::
name|Orientation
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|headerDataChanged
argument_list|(
name|Qt
operator|::
name|Orientation
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|runAllTests
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|runAllTests
name|void
name|ModelTest
operator|::
name|runAllTests
parameter_list|()
block|{
if|if
condition|(
name|fetchingMore
condition|)
return|return;
name|nonDestructiveBasicTest
argument_list|()
expr_stmt|;
name|rowCount
argument_list|()
expr_stmt|;
name|columnCount
argument_list|()
expr_stmt|;
name|hasIndex
argument_list|()
expr_stmt|;
name|index
argument_list|()
expr_stmt|;
name|parent
argument_list|()
expr_stmt|;
name|data
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     nonDestructiveBasicTest tries to call a number of the basic functions (not all)     to make sure the model doesn't outright segfault, testing the functions that makes sense. */
end_comment
begin_function
DECL|function|nonDestructiveBasicTest
name|void
name|ModelTest
operator|::
name|nonDestructiveBasicTest
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|model
operator|->
name|buddy
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
operator|==
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|->
name|canFetchMore
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|model
operator|->
name|columnCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|model
operator|->
name|data
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
operator|==
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|fetchingMore
operator|=
literal|true
expr_stmt|;
name|model
operator|->
name|fetchMore
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|fetchingMore
operator|=
literal|false
expr_stmt|;
name|Qt
operator|::
name|ItemFlags
name|flags
init|=
name|model
operator|->
name|flags
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|flags
operator|==
name|Qt
operator|::
name|ItemIsDropEnabled
operator|||
name|flags
operator|==
literal|0
argument_list|)
expr_stmt|;
name|model
operator|->
name|hasChildren
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|->
name|hasIndex
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|model
operator|->
name|headerData
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
expr_stmt|;
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|model
operator|->
name|itemData
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|QVariant
name|cache
decl_stmt|;
name|model
operator|->
name|match
argument_list|(
name|QModelIndex
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
name|cache
argument_list|)
expr_stmt|;
name|model
operator|->
name|mimeTypes
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|model
operator|->
name|parent
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
operator|==
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|model
operator|->
name|rowCount
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|QVariant
name|variant
decl_stmt|;
name|model
operator|->
name|setData
argument_list|(
name|QModelIndex
argument_list|()
argument_list|,
name|variant
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|model
operator|->
name|setHeaderData
argument_list|(
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|->
name|setHeaderData
argument_list|(
literal|999999
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QMap
argument_list|<
name|int
argument_list|,
name|QVariant
argument_list|>
name|roles
decl_stmt|;
name|model
operator|->
name|sibling
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|->
name|span
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|->
name|supportedDropActions
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Tests model's implementation of QAbstractItemModel::rowCount() and hasChildren()      Models that are dynamically populated are not as fully tested here.  */
end_comment
begin_function
DECL|function|rowCount
name|void
name|ModelTest
operator|::
name|rowCount
parameter_list|()
block|{
comment|//     qDebug()<< "rc";
comment|// check top row
name|QModelIndex
name|topIndex
init|=
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|rows
init|=
name|model
operator|->
name|rowCount
argument_list|(
name|topIndex
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|rows
operator|>=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|rows
operator|>
literal|0
condition|)
name|QVERIFY
argument_list|(
name|model
operator|->
name|hasChildren
argument_list|(
name|topIndex
argument_list|)
argument_list|)
expr_stmt|;
name|QModelIndex
name|secondLevelIndex
init|=
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|topIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|secondLevelIndex
operator|.
name|isValid
argument_list|()
condition|)
block|{
comment|// not the top level
comment|// check a row count where parent is valid
name|rows
operator|=
name|model
operator|->
name|rowCount
argument_list|(
name|secondLevelIndex
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rows
operator|>=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|rows
operator|>
literal|0
condition|)
name|QVERIFY
argument_list|(
name|model
operator|->
name|hasChildren
argument_list|(
name|secondLevelIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// The models rowCount() is tested more extensively in checkChildren(),
comment|// but this catches the big mistakes
block|}
end_function
begin_comment
comment|/*!     Tests model's implementation of QAbstractItemModel::columnCount() and hasChildren()  */
end_comment
begin_function
DECL|function|columnCount
name|void
name|ModelTest
operator|::
name|columnCount
parameter_list|()
block|{
comment|// check top row
name|QModelIndex
name|topIndex
init|=
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|model
operator|->
name|columnCount
argument_list|(
name|topIndex
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
comment|// check a column count where parent is valid
name|QModelIndex
name|childIndex
init|=
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|topIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|childIndex
operator|.
name|isValid
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|model
operator|->
name|columnCount
argument_list|(
name|childIndex
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
comment|// columnCount() is tested more extensively in checkChildren(),
comment|// but this catches the big mistakes
block|}
end_function
begin_comment
comment|/*!     Tests model's implementation of QAbstractItemModel::hasIndex()  */
end_comment
begin_function
DECL|function|hasIndex
name|void
name|ModelTest
operator|::
name|hasIndex
parameter_list|()
block|{
comment|//     qDebug()<< "hi";
comment|// Make sure that invalid values returns an invalid index
name|QVERIFY
argument_list|(
operator|!
name|model
operator|->
name|hasIndex
argument_list|(
operator|-
literal|2
argument_list|,
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|model
operator|->
name|hasIndex
argument_list|(
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|model
operator|->
name|hasIndex
argument_list|(
literal|0
argument_list|,
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|rows
init|=
name|model
operator|->
name|rowCount
argument_list|()
decl_stmt|;
name|int
name|columns
init|=
name|model
operator|->
name|columnCount
argument_list|()
decl_stmt|;
comment|// check out of bounds
name|QVERIFY
argument_list|(
operator|!
name|model
operator|->
name|hasIndex
argument_list|(
name|rows
argument_list|,
name|columns
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|model
operator|->
name|hasIndex
argument_list|(
name|rows
operator|+
literal|1
argument_list|,
name|columns
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|rows
operator|>
literal|0
condition|)
name|QVERIFY
argument_list|(
name|model
operator|->
name|hasIndex
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// hasIndex() is tested more extensively in checkChildren(),
comment|// but this catches the big mistakes
block|}
end_function
begin_comment
comment|/*!     Tests model's implementation of QAbstractItemModel::index()  */
end_comment
begin_function
DECL|function|index
name|void
name|ModelTest
operator|::
name|index
parameter_list|()
block|{
comment|//     qDebug()<< "i";
comment|// Make sure that invalid values returns an invalid index
name|QVERIFY
argument_list|(
name|model
operator|->
name|index
argument_list|(
operator|-
literal|2
argument_list|,
operator|-
literal|2
argument_list|)
operator|==
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|model
operator|->
name|index
argument_list|(
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
operator|==
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
operator|-
literal|2
argument_list|)
operator|==
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|rows
init|=
name|model
operator|->
name|rowCount
argument_list|()
decl_stmt|;
name|int
name|columns
init|=
name|model
operator|->
name|columnCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|rows
operator|==
literal|0
condition|)
return|return;
comment|// Catch off by one errors
name|QVERIFY
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|rows
argument_list|,
name|columns
argument_list|)
operator|==
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure that the same index is *always* returned
name|QModelIndex
name|a
init|=
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QModelIndex
name|b
init|=
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
name|b
argument_list|)
expr_stmt|;
comment|// index() is tested more extensively in checkChildren(),
comment|// but this catches the big mistakes
block|}
end_function
begin_comment
comment|/*!     Tests model's implementation of QAbstractItemModel::parent()  */
end_comment
begin_function
DECL|function|parent
name|void
name|ModelTest
operator|::
name|parent
parameter_list|()
block|{
comment|//     qDebug()<< "p";
comment|// Make sure the model wont crash and will return an invalid QModelIndex
comment|// when asked for the parent of an invalid index.
name|QVERIFY
argument_list|(
name|model
operator|->
name|parent
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
operator|==
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|->
name|rowCount
argument_list|()
operator|==
literal|0
condition|)
return|return;
comment|// Column 0                | Column 1    |
comment|// QModelIndex()           |             |
comment|//    \- topIndex          | topIndex1   |
comment|//         \- childIndex   | childIndex1 |
comment|// Common error test #1, make sure that a top level index has a parent
comment|// that is a invalid QModelIndex.
name|QModelIndex
name|topIndex
init|=
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|model
operator|->
name|parent
argument_list|(
name|topIndex
argument_list|)
operator|==
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
comment|// Common error test #2, make sure that a second level index has a parent
comment|// that is the first level index.
if|if
condition|(
name|model
operator|->
name|rowCount
argument_list|(
name|topIndex
argument_list|)
operator|>
literal|0
condition|)
block|{
name|QModelIndex
name|childIndex
init|=
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|topIndex
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|model
operator|->
name|parent
argument_list|(
name|childIndex
argument_list|)
operator|==
name|topIndex
argument_list|)
expr_stmt|;
block|}
comment|// Common error test #3, the second column should NOT have the same children
comment|// as the first column in a row.
comment|// Usually the second column shouldn't have children.
name|QModelIndex
name|topIndex1
init|=
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|model
operator|->
name|rowCount
argument_list|(
name|topIndex1
argument_list|)
operator|>
literal|0
condition|)
block|{
name|QModelIndex
name|childIndex
init|=
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|topIndex
argument_list|)
decl_stmt|;
name|QModelIndex
name|childIndex1
init|=
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|topIndex1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|childIndex
operator|!=
name|childIndex1
argument_list|)
expr_stmt|;
block|}
comment|// Full test, walk n levels deep through the model making sure that all
comment|// parent's children correctly specify their parent.
name|checkChildren
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Called from the parent() test.      A model that returns an index of parent X should also return X when asking     for the parent of the index.      This recursive function does pretty extensive testing on the whole model in an     effort to catch edge cases.      This function assumes that rowCount(), columnCount() and index() already work.     If they have a bug it will point it out, but the above tests should have already     found the basic bugs because it is easier to figure out the problem in     those tests then this one.  */
end_comment
begin_function
DECL|function|checkChildren
name|void
name|ModelTest
operator|::
name|checkChildren
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|currentDepth
parameter_list|)
block|{
comment|// First just try walking back up the tree.
name|QModelIndex
name|p
init|=
name|parent
decl_stmt|;
while|while
condition|(
name|p
operator|.
name|isValid
argument_list|()
condition|)
name|p
operator|=
name|p
operator|.
name|parent
argument_list|()
expr_stmt|;
comment|// For models that are dynamically populated
if|if
condition|(
name|model
operator|->
name|canFetchMore
argument_list|(
name|parent
argument_list|)
condition|)
block|{
name|fetchingMore
operator|=
literal|true
expr_stmt|;
name|model
operator|->
name|fetchMore
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|fetchingMore
operator|=
literal|false
expr_stmt|;
block|}
name|int
name|rows
init|=
name|model
operator|->
name|rowCount
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|int
name|columns
init|=
name|model
operator|->
name|columnCount
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|rows
operator|>
literal|0
condition|)
name|QVERIFY
argument_list|(
name|model
operator|->
name|hasChildren
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
comment|// Some further testing against rows(), columns(), and hasChildren()
name|QVERIFY
argument_list|(
name|rows
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|columns
operator|>=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|rows
operator|>
literal|0
condition|)
name|QVERIFY
argument_list|(
name|model
operator|->
name|hasChildren
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
comment|//qDebug()<< "parent:"<< model->data(parent).toString()<< "rows:"<< rows
comment|//<< "columns:"<< columns<< "parent column:"<< parent.column();
name|QVERIFY
argument_list|(
operator|!
name|model
operator|->
name|hasIndex
argument_list|(
name|rows
operator|+
literal|1
argument_list|,
literal|0
argument_list|,
name|parent
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|rows
condition|;
operator|++
name|r
control|)
block|{
if|if
condition|(
name|model
operator|->
name|canFetchMore
argument_list|(
name|parent
argument_list|)
condition|)
block|{
name|fetchingMore
operator|=
literal|true
expr_stmt|;
name|model
operator|->
name|fetchMore
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|fetchingMore
operator|=
literal|false
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|model
operator|->
name|hasIndex
argument_list|(
name|r
argument_list|,
name|columns
operator|+
literal|1
argument_list|,
name|parent
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|columns
condition|;
operator|++
name|c
control|)
block|{
name|QVERIFY
argument_list|(
name|model
operator|->
name|hasIndex
argument_list|(
name|r
argument_list|,
name|c
argument_list|,
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|QModelIndex
name|index
init|=
name|model
operator|->
name|index
argument_list|(
name|r
argument_list|,
name|c
argument_list|,
name|parent
argument_list|)
decl_stmt|;
comment|// rowCount() and columnCount() said that it existed...
name|QVERIFY
argument_list|(
name|index
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// index() should always return the same index when called twice in a row
name|QModelIndex
name|modifiedIndex
init|=
name|model
operator|->
name|index
argument_list|(
name|r
argument_list|,
name|c
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|index
operator|==
name|modifiedIndex
argument_list|)
expr_stmt|;
comment|// Make sure we get the same index if we request it twice in a row
name|QModelIndex
name|a
init|=
name|model
operator|->
name|index
argument_list|(
name|r
argument_list|,
name|c
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|QModelIndex
name|b
init|=
name|model
operator|->
name|index
argument_list|(
name|r
argument_list|,
name|c
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
name|b
argument_list|)
expr_stmt|;
comment|// Some basic checking on the index that is returned
name|QVERIFY
argument_list|(
name|index
operator|.
name|model
argument_list|()
operator|==
name|model
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|index
operator|.
name|column
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
comment|// While you can technically return a QVariant usually this is a sign
comment|// of a bug in data().  Disable if this really is ok in your model.
comment|//            QVERIFY( model->data ( index, Qt::DisplayRole ).isValid() );
comment|// If the next test fails here is some somewhat useful debug you play with.
if|if
condition|(
name|model
operator|->
name|parent
argument_list|(
name|index
argument_list|)
operator|!=
name|parent
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
name|r
operator|<<
name|c
operator|<<
name|currentDepth
operator|<<
name|model
operator|->
name|data
argument_list|(
name|index
argument_list|)
operator|.
name|toString
argument_list|()
operator|<<
name|model
operator|->
name|data
argument_list|(
name|parent
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
name|index
operator|<<
name|parent
operator|<<
name|model
operator|->
name|parent
argument_list|(
name|index
argument_list|)
expr_stmt|;
comment|//                 And a view that you can even use to show the model.
comment|//                 QTreeView view;
comment|//                 view.setModel(model);
comment|//                 view.show();
block|}
comment|// Check that we can get back our real parent.
name|QCOMPARE
argument_list|(
name|model
operator|->
name|parent
argument_list|(
name|index
argument_list|)
argument_list|,
name|parent
argument_list|)
expr_stmt|;
comment|// recursively go down the children
if|if
condition|(
name|model
operator|->
name|hasChildren
argument_list|(
name|index
argument_list|)
operator|&&
name|currentDepth
operator|<
literal|10
condition|)
block|{
comment|//qDebug()<< r<< c<< "has children"<< model->rowCount(index);
name|checkChildren
argument_list|(
name|index
argument_list|,
operator|++
name|currentDepth
argument_list|)
expr_stmt|;
block|}
comment|/* else { if (currentDepth>= 10) qDebug()<< "checked 10 deep"; };*/
comment|// make sure that after testing the children that the index doesn't change.
name|QModelIndex
name|newerIndex
init|=
name|model
operator|->
name|index
argument_list|(
name|r
argument_list|,
name|c
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|index
operator|==
name|newerIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     Tests model's implementation of QAbstractItemModel::data()  */
end_comment
begin_function
DECL|function|data
name|void
name|ModelTest
operator|::
name|data
parameter_list|()
block|{
comment|// Invalid index should return an invalid qvariant
name|QVERIFY
argument_list|(
operator|!
name|model
operator|->
name|data
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|->
name|rowCount
argument_list|()
operator|==
literal|0
condition|)
return|return;
comment|// A valid index should have a valid QVariant data
name|QVERIFY
argument_list|(
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// shouldn't be able to set data on an invalid index
name|QVERIFY
argument_list|(
operator|!
name|model
operator|->
name|setData
argument_list|(
name|QModelIndex
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
argument_list|)
expr_stmt|;
comment|// General Purpose roles that should return a QString
name|QVariant
name|variant
init|=
name|model
operator|->
name|data
argument_list|(
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|ToolTipRole
argument_list|)
decl_stmt|;
if|if
condition|(
name|variant
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
name|variant
operator|.
name|canConvert
argument_list|<
name|QString
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|variant
operator|=
name|model
operator|->
name|data
argument_list|(
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|StatusTipRole
argument_list|)
expr_stmt|;
if|if
condition|(
name|variant
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
name|variant
operator|.
name|canConvert
argument_list|<
name|QString
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|variant
operator|=
name|model
operator|->
name|data
argument_list|(
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|WhatsThisRole
argument_list|)
expr_stmt|;
if|if
condition|(
name|variant
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
name|variant
operator|.
name|canConvert
argument_list|<
name|QString
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// General Purpose roles that should return a QSize
name|variant
operator|=
name|model
operator|->
name|data
argument_list|(
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|SizeHintRole
argument_list|)
expr_stmt|;
if|if
condition|(
name|variant
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
name|variant
operator|.
name|canConvert
argument_list|<
name|QSize
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// General Purpose roles that should return a QFont
name|QVariant
name|fontVariant
init|=
name|model
operator|->
name|data
argument_list|(
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|FontRole
argument_list|)
decl_stmt|;
if|if
condition|(
name|fontVariant
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
name|fontVariant
operator|.
name|canConvert
argument_list|<
name|QFont
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Check that the alignment is one we know about
name|QVariant
name|textAlignmentVariant
init|=
name|model
operator|->
name|data
argument_list|(
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|TextAlignmentRole
argument_list|)
decl_stmt|;
if|if
condition|(
name|textAlignmentVariant
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|int
name|alignment
init|=
name|textAlignmentVariant
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|alignment
argument_list|,
operator|(
name|alignment
operator|&
operator|(
name|Qt
operator|::
name|AlignHorizontal_Mask
operator||
name|Qt
operator|::
name|AlignVertical_Mask
operator|)
operator|)
argument_list|)
expr_stmt|;
block|}
comment|// General Purpose roles that should return a QColor
name|QVariant
name|colorVariant
init|=
name|model
operator|->
name|data
argument_list|(
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|BackgroundColorRole
argument_list|)
decl_stmt|;
if|if
condition|(
name|colorVariant
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
name|colorVariant
operator|.
name|canConvert
argument_list|<
name|QColor
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|colorVariant
operator|=
name|model
operator|->
name|data
argument_list|(
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|TextColorRole
argument_list|)
expr_stmt|;
if|if
condition|(
name|colorVariant
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
name|colorVariant
operator|.
name|canConvert
argument_list|<
name|QColor
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Check that the "check state" is one we know about.
name|QVariant
name|checkStateVariant
init|=
name|model
operator|->
name|data
argument_list|(
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|CheckStateRole
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkStateVariant
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|int
name|state
init|=
name|checkStateVariant
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|state
operator|==
name|Qt
operator|::
name|Unchecked
operator|||
name|state
operator|==
name|Qt
operator|::
name|PartiallyChecked
operator|||
name|state
operator|==
name|Qt
operator|::
name|Checked
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Store what is about to be inserted to make sure it actually happens      \sa rowsInserted()  */
end_comment
begin_function
DECL|function|rowsAboutToBeInserted
name|void
name|ModelTest
operator|::
name|rowsAboutToBeInserted
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
comment|/* end */
parameter_list|)
block|{
comment|//     Q_UNUSED(end);
comment|//    qDebug()<< "rowsAboutToBeInserted"<< "start="<< start<< "end="<< end<< "parent="<< model->data ( parent ).toString()
comment|//<< "current count of parent="<< model->rowCount ( parent ); //<< "display of last="<< model->data( model->index(start-1, 0, parent) );
comment|//     qDebug()<< model->index(start-1, 0, parent)<< model->data( model->index(start-1, 0, parent) );
name|Changing
name|c
decl_stmt|;
name|c
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|c
operator|.
name|oldSize
operator|=
name|model
operator|->
name|rowCount
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|c
operator|.
name|last
operator|=
name|model
operator|->
name|data
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|start
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|next
operator|=
name|model
operator|->
name|data
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|start
argument_list|,
literal|0
argument_list|,
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|insert
operator|.
name|push
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Confirm that what was said was going to happen actually did      \sa rowsAboutToBeInserted()  */
end_comment
begin_function
DECL|function|rowsInserted
name|void
name|ModelTest
operator|::
name|rowsInserted
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|Changing
name|c
init|=
name|insert
operator|.
name|pop
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|c
operator|.
name|parent
operator|==
name|parent
argument_list|)
expr_stmt|;
comment|//    qDebug()<< "rowsInserted"<< "start="<< start<< "end="<< end<< "oldsize="<< c.oldSize
comment|//<< "parent="<< model->data ( parent ).toString()<< "current rowcount of parent="<< model->rowCount ( parent );
comment|//    for (int ii=start; ii<= end; ii++)
comment|//    {
comment|//      qDebug()<< "itemWasInserted:"<< ii<< model->data ( model->index ( ii, 0, parent ));
comment|//    }
comment|//    qDebug();
name|QVERIFY
argument_list|(
name|c
operator|.
name|oldSize
operator|+
operator|(
name|end
operator|-
name|start
operator|+
literal|1
operator|)
operator|==
name|model
operator|->
name|rowCount
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c
operator|.
name|last
operator|==
name|model
operator|->
name|data
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|start
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
name|c
operator|.
name|parent
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|next
operator|!=
name|model
operator|->
name|data
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|end
operator|+
literal|1
argument_list|,
literal|0
argument_list|,
name|c
operator|.
name|parent
argument_list|)
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
name|start
operator|<<
name|end
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|model
operator|->
name|rowCount
argument_list|()
condition|;
operator|++
name|i
control|)
name|qDebug
argument_list|()
operator|<<
name|model
operator|->
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
operator|.
name|data
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
name|c
operator|.
name|next
operator|<<
name|model
operator|->
name|data
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|end
operator|+
literal|1
argument_list|,
literal|0
argument_list|,
name|c
operator|.
name|parent
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|c
operator|.
name|next
operator|==
name|model
operator|->
name|data
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|end
operator|+
literal|1
argument_list|,
literal|0
argument_list|,
name|c
operator|.
name|parent
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|layoutAboutToBeChanged
name|void
name|ModelTest
operator|::
name|layoutAboutToBeChanged
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qBound
argument_list|(
literal|0
argument_list|,
name|model
operator|->
name|rowCount
argument_list|()
argument_list|,
literal|100
argument_list|)
condition|;
operator|++
name|i
control|)
name|changing
operator|.
name|append
argument_list|(
name|QPersistentModelIndex
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|layoutChanged
name|void
name|ModelTest
operator|::
name|layoutChanged
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|changing
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QPersistentModelIndex
name|p
init|=
name|changing
index|[
name|i
index|]
decl_stmt|;
name|QVERIFY
argument_list|(
name|p
operator|==
name|model
operator|->
name|index
argument_list|(
name|p
operator|.
name|row
argument_list|()
argument_list|,
name|p
operator|.
name|column
argument_list|()
argument_list|,
name|p
operator|.
name|parent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|changing
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Store what is about to be inserted to make sure it actually happens      \sa rowsRemoved()  */
end_comment
begin_function
DECL|function|rowsAboutToBeRemoved
name|void
name|ModelTest
operator|::
name|rowsAboutToBeRemoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"ratbr"
operator|<<
name|parent
operator|<<
name|start
operator|<<
name|end
expr_stmt|;
name|Changing
name|c
decl_stmt|;
name|c
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|c
operator|.
name|oldSize
operator|=
name|model
operator|->
name|rowCount
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|c
operator|.
name|last
operator|=
name|model
operator|->
name|data
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|start
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|next
operator|=
name|model
operator|->
name|data
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|end
operator|+
literal|1
argument_list|,
literal|0
argument_list|,
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|remove
operator|.
name|push
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Confirm that what was said was going to happen actually did      \sa rowsAboutToBeRemoved()  */
end_comment
begin_function
DECL|function|rowsRemoved
name|void
name|ModelTest
operator|::
name|rowsRemoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"rr"
operator|<<
name|parent
operator|<<
name|start
operator|<<
name|end
expr_stmt|;
name|Changing
name|c
init|=
name|remove
operator|.
name|pop
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|c
operator|.
name|parent
operator|==
name|parent
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c
operator|.
name|oldSize
operator|-
operator|(
name|end
operator|-
name|start
operator|+
literal|1
operator|)
operator|==
name|model
operator|->
name|rowCount
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c
operator|.
name|last
operator|==
name|model
operator|->
name|data
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|start
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
name|c
operator|.
name|parent
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c
operator|.
name|next
operator|==
name|model
operator|->
name|data
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|start
argument_list|,
literal|0
argument_list|,
name|c
operator|.
name|parent
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dataChanged
name|void
name|ModelTest
operator|::
name|dataChanged
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|topLeft
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|bottomRight
parameter_list|)
block|{
name|QVERIFY
argument_list|(
name|topLeft
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|bottomRight
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QModelIndex
name|commonParent
init|=
name|bottomRight
operator|.
name|parent
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|topLeft
operator|.
name|parent
argument_list|()
operator|==
name|commonParent
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|topLeft
operator|.
name|row
argument_list|()
operator|<=
name|bottomRight
operator|.
name|row
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|topLeft
operator|.
name|column
argument_list|()
operator|<=
name|bottomRight
operator|.
name|column
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|rowCount
init|=
name|model
operator|->
name|rowCount
argument_list|(
name|commonParent
argument_list|)
decl_stmt|;
name|int
name|columnCount
init|=
name|model
operator|->
name|columnCount
argument_list|(
name|commonParent
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|bottomRight
operator|.
name|row
argument_list|()
operator|<
name|rowCount
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|bottomRight
operator|.
name|column
argument_list|()
operator|<
name|columnCount
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|headerDataChanged
name|void
name|ModelTest
operator|::
name|headerDataChanged
parameter_list|(
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|QVERIFY
argument_list|(
name|start
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|end
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|start
operator|<=
name|end
argument_list|)
expr_stmt|;
name|int
name|itemCount
init|=
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
condition|?
name|model
operator|->
name|rowCount
argument_list|()
else|:
name|model
operator|->
name|columnCount
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|start
operator|<
name|itemCount
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|end
operator|<
name|itemCount
argument_list|)
expr_stmt|;
block|}
end_function
end_unit
