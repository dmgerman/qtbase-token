begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2009 Stephen Kelly<steveire@gmail.com> ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"dynamictreemodel.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QHash>
end_include
begin_include
include|#
directive|include
file|<QtCore/QList>
end_include
begin_include
include|#
directive|include
file|<QtCore/QTimer>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_constructor
DECL|function|DynamicTreeModel
name|DynamicTreeModel
operator|::
name|DynamicTreeModel
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractItemModel
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|nextId
argument_list|(
literal|1
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|index
name|QModelIndex
name|DynamicTreeModel
operator|::
name|index
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
comment|//   if (column != 0)
comment|//     return QModelIndex();
if|if
condition|(
name|column
operator|<
literal|0
operator|||
name|row
operator|<
literal|0
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
name|QList
argument_list|<
name|QList
argument_list|<
name|qint64
argument_list|>
argument_list|>
name|childIdColumns
init|=
name|m_childItems
operator|.
name|value
argument_list|(
name|parent
operator|.
name|internalId
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|qint64
name|grandParent
init|=
name|findParentId
argument_list|(
name|parent
operator|.
name|internalId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|grandParent
operator|>=
literal|0
condition|)
block|{
name|QList
argument_list|<
name|QList
argument_list|<
name|qint64
argument_list|>
argument_list|>
name|parentTable
init|=
name|m_childItems
operator|.
name|value
argument_list|(
name|grandParent
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|.
name|column
argument_list|()
operator|>=
name|parentTable
operator|.
name|size
argument_list|()
condition|)
name|qFatal
argument_list|(
literal|"%s: parent.column() must be less than parentTable.size()"
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|qint64
argument_list|>
name|parentSiblings
init|=
name|parentTable
operator|.
name|at
argument_list|(
name|parent
operator|.
name|column
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|.
name|row
argument_list|()
operator|>=
name|parentSiblings
operator|.
name|size
argument_list|()
condition|)
name|qFatal
argument_list|(
literal|"%s: parent.row() must be less than parentSiblings.size()"
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|childIdColumns
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
if|if
condition|(
name|column
operator|>=
name|childIdColumns
operator|.
name|size
argument_list|()
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
name|QList
argument_list|<
name|qint64
argument_list|>
name|rowIds
init|=
name|childIdColumns
operator|.
name|at
argument_list|(
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|>=
name|rowIds
operator|.
name|size
argument_list|()
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
name|qint64
name|id
init|=
name|rowIds
operator|.
name|at
argument_list|(
name|row
argument_list|)
decl_stmt|;
return|return
name|createIndex
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|findParentId
name|qint64
name|DynamicTreeModel
operator|::
name|findParentId
parameter_list|(
name|qint64
name|searchId
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|searchId
operator|<=
literal|0
condition|)
return|return
operator|-
literal|1
return|;
name|QHashIterator
argument_list|<
name|qint64
argument_list|,
name|QList
argument_list|<
name|QList
argument_list|<
name|qint64
argument_list|>
argument_list|>
argument_list|>
name|i
argument_list|(
name|m_childItems
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|QListIterator
argument_list|<
name|QList
argument_list|<
name|qint64
argument_list|>
argument_list|>
name|j
argument_list|(
name|i
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|j
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|QList
argument_list|<
name|qint64
argument_list|>
name|l
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|.
name|contains
argument_list|(
name|searchId
argument_list|)
condition|)
block|{
return|return
name|i
operator|.
name|key
argument_list|()
return|;
block|}
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|parent
name|QModelIndex
name|DynamicTreeModel
operator|::
name|parent
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
name|qint64
name|searchId
init|=
name|index
operator|.
name|internalId
argument_list|()
decl_stmt|;
name|qint64
name|parentId
init|=
name|findParentId
argument_list|(
name|searchId
argument_list|)
decl_stmt|;
comment|// Will never happen for valid index, but what the hey...
if|if
condition|(
name|parentId
operator|<=
literal|0
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
name|qint64
name|grandParentId
init|=
name|findParentId
argument_list|(
name|parentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|grandParentId
operator|<
literal|0
condition|)
name|grandParentId
operator|=
literal|0
expr_stmt|;
name|int
name|column
init|=
literal|0
decl_stmt|;
name|QList
argument_list|<
name|qint64
argument_list|>
name|childList
init|=
name|m_childItems
operator|.
name|value
argument_list|(
name|grandParentId
argument_list|)
operator|.
name|at
argument_list|(
name|column
argument_list|)
decl_stmt|;
name|int
name|row
init|=
name|childList
operator|.
name|indexOf
argument_list|(
name|parentId
argument_list|)
decl_stmt|;
return|return
name|createIndex
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|parentId
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|rowCount
name|int
name|DynamicTreeModel
operator|::
name|rowCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|QList
argument_list|<
name|QList
argument_list|<
name|qint64
argument_list|>
argument_list|>
name|cols
init|=
name|m_childItems
operator|.
name|value
argument_list|(
name|index
operator|.
name|internalId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cols
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|index
operator|.
name|column
argument_list|()
operator|>
literal|0
condition|)
return|return
literal|0
return|;
return|return
name|cols
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|columnCount
name|int
name|DynamicTreeModel
operator|::
name|columnCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
comment|//   Q_UNUSED(index);
return|return
name|m_childItems
operator|.
name|value
argument_list|(
name|index
operator|.
name|internalId
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|data
name|QVariant
name|DynamicTreeModel
operator|::
name|data
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QVariant
argument_list|()
return|;
if|if
condition|(
name|Qt
operator|::
name|DisplayRole
operator|==
name|role
condition|)
block|{
return|return
name|m_items
operator|.
name|value
argument_list|(
name|index
operator|.
name|internalId
argument_list|()
argument_list|)
return|;
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|DynamicTreeModel
operator|::
name|clear
parameter_list|()
block|{
name|beginResetModel
argument_list|()
expr_stmt|;
name|m_items
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_childItems
operator|.
name|clear
argument_list|()
expr_stmt|;
name|nextId
operator|=
literal|1
expr_stmt|;
name|endResetModel
argument_list|()
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|ModelChangeCommand
name|ModelChangeCommand
operator|::
name|ModelChangeCommand
parameter_list|(
name|DynamicTreeModel
modifier|*
name|model
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_model
argument_list|(
name|model
argument_list|)
member_init_list|,
name|m_numCols
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|m_startRow
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|m_endRow
argument_list|(
operator|-
literal|1
argument_list|)
block|{  }
end_constructor
begin_function
DECL|function|findIndex
name|QModelIndex
name|ModelChangeCommand
operator|::
name|findIndex
parameter_list|(
name|QList
argument_list|<
name|int
argument_list|>
name|rows
parameter_list|)
block|{
specifier|const
name|int
name|col
init|=
literal|0
decl_stmt|;
name|QModelIndex
name|parent
init|=
name|QModelIndex
argument_list|()
decl_stmt|;
name|QListIterator
argument_list|<
name|int
argument_list|>
name|i
argument_list|(
name|rows
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|parent
operator|=
name|m_model
operator|->
name|index
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|,
name|col
argument_list|,
name|parent
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|parent
operator|.
name|isValid
argument_list|()
condition|)
name|qFatal
argument_list|(
literal|"%s: parent must be valid"
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
block|}
return|return
name|parent
return|;
block|}
end_function
begin_constructor
DECL|function|ModelInsertCommand
name|ModelInsertCommand
operator|::
name|ModelInsertCommand
parameter_list|(
name|DynamicTreeModel
modifier|*
name|model
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|ModelChangeCommand
argument_list|(
name|model
argument_list|,
name|parent
argument_list|)
block|{  }
end_constructor
begin_function
DECL|function|doCommand
name|void
name|ModelInsertCommand
operator|::
name|doCommand
parameter_list|()
block|{
name|QModelIndex
name|parent
init|=
name|findIndex
argument_list|(
name|m_rowNumbers
argument_list|)
decl_stmt|;
name|m_model
operator|->
name|beginInsertRows
argument_list|(
name|parent
argument_list|,
name|m_startRow
argument_list|,
name|m_endRow
argument_list|)
expr_stmt|;
name|qint64
name|parentId
init|=
name|parent
operator|.
name|internalId
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
name|m_startRow
init|;
name|row
operator|<=
name|m_endRow
condition|;
name|row
operator|++
control|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|m_numCols
condition|;
name|col
operator|++
control|)
block|{
if|if
condition|(
name|m_model
operator|->
name|m_childItems
index|[
name|parentId
index|]
operator|.
name|size
argument_list|()
operator|<=
name|col
condition|)
block|{
name|m_model
operator|->
name|m_childItems
index|[
name|parentId
index|]
operator|.
name|append
argument_list|(
name|QList
argument_list|<
name|qint64
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//       QString name = QUuid::createUuid().toString();
name|qint64
name|id
init|=
name|m_model
operator|->
name|newId
argument_list|()
decl_stmt|;
name|QString
name|name
init|=
name|QString
operator|::
name|number
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|m_model
operator|->
name|m_items
operator|.
name|insert
argument_list|(
name|id
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|m_model
operator|->
name|m_childItems
index|[
name|parentId
index|]
index|[
name|col
index|]
operator|.
name|insert
argument_list|(
name|row
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
name|m_model
operator|->
name|endInsertRows
argument_list|()
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|ModelMoveCommand
name|ModelMoveCommand
operator|::
name|ModelMoveCommand
parameter_list|(
name|DynamicTreeModel
modifier|*
name|model
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|ModelChangeCommand
argument_list|(
name|model
argument_list|,
name|parent
argument_list|)
block|{  }
end_constructor
begin_function
DECL|function|emitPreSignal
name|bool
name|ModelMoveCommand
operator|::
name|emitPreSignal
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|srcParent
parameter_list|,
name|int
name|srcStart
parameter_list|,
name|int
name|srcEnd
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|destParent
parameter_list|,
name|int
name|destRow
parameter_list|)
block|{
return|return
name|m_model
operator|->
name|beginMoveRows
argument_list|(
name|srcParent
argument_list|,
name|srcStart
argument_list|,
name|srcEnd
argument_list|,
name|destParent
argument_list|,
name|destRow
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|doCommand
name|void
name|ModelMoveCommand
operator|::
name|doCommand
parameter_list|()
block|{
name|QModelIndex
name|srcParent
init|=
name|findIndex
argument_list|(
name|m_rowNumbers
argument_list|)
decl_stmt|;
name|QModelIndex
name|destParent
init|=
name|findIndex
argument_list|(
name|m_destRowNumbers
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|emitPreSignal
argument_list|(
name|srcParent
argument_list|,
name|m_startRow
argument_list|,
name|m_endRow
argument_list|,
name|destParent
argument_list|,
name|m_destRow
argument_list|)
condition|)
block|{
return|return;
block|}
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|m_numCols
condition|;
operator|++
name|column
control|)
block|{
name|QList
argument_list|<
name|qint64
argument_list|>
name|l
init|=
name|m_model
operator|->
name|m_childItems
operator|.
name|value
argument_list|(
name|srcParent
operator|.
name|internalId
argument_list|()
argument_list|)
index|[
name|column
index|]
operator|.
name|mid
argument_list|(
name|m_startRow
argument_list|,
name|m_endRow
operator|-
name|m_startRow
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|m_startRow
init|;
name|i
operator|<=
name|m_endRow
condition|;
name|i
operator|++
control|)
block|{
name|m_model
operator|->
name|m_childItems
index|[
name|srcParent
operator|.
name|internalId
argument_list|()
index|]
index|[
name|column
index|]
operator|.
name|removeAt
argument_list|(
name|m_startRow
argument_list|)
expr_stmt|;
block|}
name|int
name|d
decl_stmt|;
if|if
condition|(
name|m_destRow
operator|<
name|m_startRow
condition|)
name|d
operator|=
name|m_destRow
expr_stmt|;
else|else
block|{
if|if
condition|(
name|srcParent
operator|==
name|destParent
condition|)
name|d
operator|=
name|m_destRow
operator|-
operator|(
name|m_endRow
operator|-
name|m_startRow
operator|+
literal|1
operator|)
expr_stmt|;
else|else
name|d
operator|=
name|m_destRow
operator|-
operator|(
name|m_endRow
operator|-
name|m_startRow
operator|)
operator|+
literal|1
expr_stmt|;
block|}
foreach|foreach
control|(
specifier|const
name|qint64
name|id
decl|,
name|l
control|)
block|{
name|m_model
operator|->
name|m_childItems
index|[
name|destParent
operator|.
name|internalId
argument_list|()
index|]
index|[
name|column
index|]
operator|.
name|insert
argument_list|(
name|d
operator|++
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
name|emitPostSignal
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|emitPostSignal
name|void
name|ModelMoveCommand
operator|::
name|emitPostSignal
parameter_list|()
block|{
name|m_model
operator|->
name|endMoveRows
argument_list|()
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|ModelResetCommand
name|ModelResetCommand
operator|::
name|ModelResetCommand
parameter_list|(
name|DynamicTreeModel
modifier|*
name|model
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|ModelMoveCommand
argument_list|(
name|model
argument_list|,
name|parent
argument_list|)
block|{  }
end_constructor
begin_destructor
DECL|function|~ModelResetCommand
name|ModelResetCommand
operator|::
name|~
name|ModelResetCommand
parameter_list|()
block|{  }
end_destructor
begin_function
DECL|function|emitPreSignal
name|bool
name|ModelResetCommand
operator|::
name|emitPreSignal
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|srcParent
parameter_list|,
name|int
name|srcStart
parameter_list|,
name|int
name|srcEnd
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|destParent
parameter_list|,
name|int
name|destRow
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|srcParent
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|srcStart
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|srcEnd
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|destParent
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|destRow
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|emitPostSignal
name|void
name|ModelResetCommand
operator|::
name|emitPostSignal
parameter_list|()
block|{
name|m_model
operator|->
name|reset
argument_list|()
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|ModelResetCommandFixed
name|ModelResetCommandFixed
operator|::
name|ModelResetCommandFixed
parameter_list|(
name|DynamicTreeModel
modifier|*
name|model
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|ModelMoveCommand
argument_list|(
name|model
argument_list|,
name|parent
argument_list|)
block|{  }
end_constructor
begin_destructor
DECL|function|~ModelResetCommandFixed
name|ModelResetCommandFixed
operator|::
name|~
name|ModelResetCommandFixed
parameter_list|()
block|{  }
end_destructor
begin_function
DECL|function|emitPreSignal
name|bool
name|ModelResetCommandFixed
operator|::
name|emitPreSignal
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|srcParent
parameter_list|,
name|int
name|srcStart
parameter_list|,
name|int
name|srcEnd
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|destParent
parameter_list|,
name|int
name|destRow
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|srcParent
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|srcStart
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|srcEnd
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|destParent
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|destRow
argument_list|)
expr_stmt|;
name|m_model
operator|->
name|beginResetModel
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|emitPostSignal
name|void
name|ModelResetCommandFixed
operator|::
name|emitPostSignal
parameter_list|()
block|{
name|m_model
operator|->
name|endResetModel
argument_list|()
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|ModelChangeChildrenLayoutsCommand
name|ModelChangeChildrenLayoutsCommand
operator|::
name|ModelChangeChildrenLayoutsCommand
parameter_list|(
name|DynamicTreeModel
modifier|*
name|model
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|ModelChangeCommand
argument_list|(
name|model
argument_list|,
name|parent
argument_list|)
block|{  }
end_constructor
begin_function
DECL|function|doCommand
name|void
name|ModelChangeChildrenLayoutsCommand
operator|::
name|doCommand
parameter_list|()
block|{
specifier|const
name|QPersistentModelIndex
name|parent1
init|=
name|findIndex
argument_list|(
name|m_rowNumbers
argument_list|)
decl_stmt|;
specifier|const
name|QPersistentModelIndex
name|parent2
init|=
name|findIndex
argument_list|(
name|m_secondRowNumbers
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|parents
decl_stmt|;
name|parents
operator|<<
name|parent1
expr_stmt|;
name|parents
operator|<<
name|parent2
expr_stmt|;
emit|emit
name|m_model
operator|->
name|layoutAboutToBeChanged
argument_list|(
name|parents
argument_list|)
emit|;
name|int
name|rowSize1
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|rowSize2
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|m_numCols
condition|;
operator|++
name|column
control|)
block|{
block|{
name|QList
argument_list|<
name|qint64
argument_list|>
modifier|&
name|l
init|=
name|m_model
operator|->
name|m_childItems
index|[
name|parent1
operator|.
name|internalId
argument_list|()
index|]
index|[
name|column
index|]
decl_stmt|;
name|rowSize1
operator|=
name|l
operator|.
name|size
argument_list|()
expr_stmt|;
name|l
operator|.
name|prepend
argument_list|(
name|l
operator|.
name|takeLast
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QList
argument_list|<
name|qint64
argument_list|>
modifier|&
name|l
init|=
name|m_model
operator|->
name|m_childItems
index|[
name|parent2
operator|.
name|internalId
argument_list|()
index|]
index|[
name|column
index|]
decl_stmt|;
name|rowSize2
operator|=
name|l
operator|.
name|size
argument_list|()
expr_stmt|;
name|l
operator|.
name|append
argument_list|(
name|l
operator|.
name|takeFirst
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
foreach|foreach
control|(
specifier|const
name|QModelIndex
modifier|&
name|idx
decl|,
name|m_model
operator|->
name|persistentIndexList
argument_list|()
control|)
block|{
if|if
condition|(
name|idx
operator|.
name|parent
argument_list|()
operator|==
name|parent1
condition|)
block|{
if|if
condition|(
name|idx
operator|.
name|row
argument_list|()
operator|==
name|rowSize1
operator|-
literal|1
condition|)
block|{
name|m_model
operator|->
name|changePersistentIndex
argument_list|(
name|idx
argument_list|,
name|m_model
operator|->
name|createIndex
argument_list|(
literal|0
argument_list|,
name|idx
operator|.
name|column
argument_list|()
argument_list|,
name|idx
operator|.
name|internalPointer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m_model
operator|->
name|changePersistentIndex
argument_list|(
name|idx
argument_list|,
name|m_model
operator|->
name|createIndex
argument_list|(
name|idx
operator|.
name|row
argument_list|()
operator|+
literal|1
argument_list|,
name|idx
operator|.
name|column
argument_list|()
argument_list|,
name|idx
operator|.
name|internalPointer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|idx
operator|.
name|parent
argument_list|()
operator|==
name|parent2
condition|)
block|{
if|if
condition|(
name|idx
operator|.
name|row
argument_list|()
operator|==
literal|0
condition|)
block|{
name|m_model
operator|->
name|changePersistentIndex
argument_list|(
name|idx
argument_list|,
name|m_model
operator|->
name|createIndex
argument_list|(
name|rowSize2
operator|-
literal|1
argument_list|,
name|idx
operator|.
name|column
argument_list|()
argument_list|,
name|idx
operator|.
name|internalPointer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m_model
operator|->
name|changePersistentIndex
argument_list|(
name|idx
argument_list|,
name|m_model
operator|->
name|createIndex
argument_list|(
name|idx
operator|.
name|row
argument_list|()
operator|-
literal|1
argument_list|,
name|idx
operator|.
name|column
argument_list|()
argument_list|,
name|idx
operator|.
name|internalPointer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
emit|emit
name|m_model
operator|->
name|layoutChanged
argument_list|(
name|parents
argument_list|)
emit|;
block|}
end_function
end_unit
