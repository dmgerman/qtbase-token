begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_enum
DECL|enumerator|OneMinute
enum|enum
block|{
name|OneMinute
init|=
literal|60
operator|*
literal|1000
block|,
DECL|enumerator|TwoMinutes
name|TwoMinutes
init|=
name|OneMinute
operator|*
literal|2
block|}
enum|;
end_enum
begin_class
DECL|class|tst_QObjectRace
class|class
name|tst_QObjectRace
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|moveToThreadRace
parameter_list|()
function_decl|;
name|void
name|destroyRace
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_class
DECL|class|RaceObject
class|class
name|RaceObject
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
DECL|member|threads
name|QList
argument_list|<
name|QThread
modifier|*
argument_list|>
name|threads
decl_stmt|;
DECL|member|count
name|int
name|count
decl_stmt|;
public|public:
DECL|function|RaceObject
name|RaceObject
parameter_list|()
member_init_list|:
name|count
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|function|addThread
name|void
name|addThread
parameter_list|(
name|QThread
modifier|*
name|thread
parameter_list|)
block|{
name|threads
operator|.
name|append
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
public|public
name|slots
public|:
DECL|function|theSlot
name|void
name|theSlot
parameter_list|()
block|{
enum|enum
block|{
name|step
init|=
literal|35
block|}
enum|;
if|if
condition|(
operator|(
operator|++
name|count
operator|%
name|step
operator|)
operator|==
literal|0
condition|)
block|{
name|QThread
modifier|*
name|nextThread
init|=
name|threads
operator|.
name|at
argument_list|(
operator|(
name|count
operator|/
name|step
operator|)
operator|%
name|threads
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|moveToThread
argument_list|(
name|nextThread
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|destroSlot
name|void
name|destroSlot
parameter_list|()
block|{
emit|emit
name|theSignal
argument_list|()
emit|;
block|}
signals|signals:
name|void
name|theSignal
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_class
DECL|class|RaceThread
class|class
name|RaceThread
super|:
specifier|public
name|QThread
block|{
name|Q_OBJECT
DECL|member|object
name|RaceObject
modifier|*
name|object
decl_stmt|;
DECL|member|stopWatch
name|QTime
name|stopWatch
decl_stmt|;
public|public:
DECL|function|RaceThread
name|RaceThread
parameter_list|()
member_init_list|:
name|object
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|function|setObject
name|void
name|setObject
parameter_list|(
name|RaceObject
modifier|*
name|o
parameter_list|)
block|{
name|object
operator|=
name|o
expr_stmt|;
name|object
operator|->
name|addThread
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|start
name|void
name|start
parameter_list|()
block|{
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
name|QThread
operator|::
name|start
argument_list|()
expr_stmt|;
block|}
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|QTimer
name|zeroTimer
decl_stmt|;
name|connect
argument_list|(
operator|&
name|zeroTimer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
name|object
argument_list|,
name|SLOT
argument_list|(
name|theSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|zeroTimer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|checkStopWatch
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
name|zeroTimer
operator|.
name|start
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|exec
argument_list|()
expr_stmt|;
block|}
signals|signals:
name|void
name|theSignal
parameter_list|()
function_decl|;
private|private
name|slots
private|:
DECL|function|checkStopWatch
name|void
name|checkStopWatch
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_VXWORKS
argument_list|)
if|if
condition|(
name|stopWatch
operator|.
name|elapsed
argument_list|()
operator|>=
name|OneMinute
operator|/
literal|2
condition|)
else|#
directive|else
if|if
condition|(
name|stopWatch
operator|.
name|elapsed
argument_list|()
operator|>=
name|OneMinute
condition|)
endif|#
directive|endif
name|quit
argument_list|()
expr_stmt|;
name|QObject
name|o
decl_stmt|;
name|connect
argument_list|(
operator|&
name|o
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|()
argument_list|)
argument_list|,
name|object
argument_list|,
name|SLOT
argument_list|(
name|destroSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|object
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|()
argument_list|)
argument_list|,
operator|&
name|o
argument_list|,
name|SLOT
argument_list|(
name|deleteLater
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|moveToThreadRace
name|void
name|tst_QObjectRace
operator|::
name|moveToThreadRace
parameter_list|()
block|{
name|RaceObject
modifier|*
name|object
init|=
operator|new
name|RaceObject
decl_stmt|;
enum|enum
block|{
name|ThreadCount
init|=
literal|6
block|}
enum|;
name|RaceThread
modifier|*
name|threads
index|[
name|ThreadCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ThreadCount
condition|;
operator|++
name|i
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|RaceThread
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|->
name|setObject
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
name|object
operator|->
name|moveToThread
argument_list|(
name|threads
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ThreadCount
condition|;
operator|++
name|i
control|)
name|threads
index|[
name|i
index|]
operator|->
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|threads
index|[
literal|0
index|]
operator|->
name|isFinished
argument_list|()
condition|)
block|{
name|QPointer
argument_list|<
name|RaceObject
argument_list|>
name|foo
argument_list|(
name|object
argument_list|)
decl_stmt|;
name|QObject
name|o
decl_stmt|;
name|connect
argument_list|(
operator|&
name|o
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|()
argument_list|)
argument_list|,
name|object
argument_list|,
name|SLOT
argument_list|(
name|destroSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|object
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|()
argument_list|)
argument_list|,
operator|&
name|o
argument_list|,
name|SLOT
argument_list|(
name|deleteLater
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
comment|// the other threads should finish pretty quickly now
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|ThreadCount
condition|;
operator|++
name|i
control|)
name|QVERIFY
argument_list|(
name|threads
index|[
name|i
index|]
operator|->
name|wait
argument_list|(
literal|300
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ThreadCount
condition|;
operator|++
name|i
control|)
operator|delete
name|threads
index|[
name|i
index|]
expr_stmt|;
operator|delete
name|object
expr_stmt|;
block|}
end_function
begin_class
DECL|class|MyObject
class|class
name|MyObject
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
DECL|function|slot1
name|void
name|slot1
parameter_list|()
block|{
emit|emit
name|signal1
argument_list|()
emit|;
block|}
DECL|function|slot2
name|void
name|slot2
parameter_list|()
block|{
emit|emit
name|signal2
argument_list|()
emit|;
block|}
DECL|function|slot3
name|void
name|slot3
parameter_list|()
block|{
emit|emit
name|signal3
argument_list|()
emit|;
block|}
DECL|function|slot4
name|void
name|slot4
parameter_list|()
block|{
emit|emit
name|signal4
argument_list|()
emit|;
block|}
DECL|function|slot5
name|void
name|slot5
parameter_list|()
block|{
emit|emit
name|signal5
argument_list|()
emit|;
block|}
DECL|function|slot6
name|void
name|slot6
parameter_list|()
block|{
emit|emit
name|signal6
argument_list|()
emit|;
block|}
DECL|function|slot7
name|void
name|slot7
parameter_list|()
block|{
emit|emit
name|signal7
argument_list|()
emit|;
block|}
signals|signals:
name|void
name|signal1
parameter_list|()
function_decl|;
name|void
name|signal2
parameter_list|()
function_decl|;
name|void
name|signal3
parameter_list|()
function_decl|;
name|void
name|signal4
parameter_list|()
function_decl|;
name|void
name|signal5
parameter_list|()
function_decl|;
name|void
name|signal6
parameter_list|()
function_decl|;
name|void
name|signal7
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_class
DECL|class|DestroyThread
class|class
name|DestroyThread
super|:
specifier|public
name|QThread
block|{
name|Q_OBJECT
DECL|member|objects
name|QObject
modifier|*
modifier|*
name|objects
decl_stmt|;
DECL|member|number
name|int
name|number
decl_stmt|;
public|public:
DECL|function|setObjects
name|void
name|setObjects
parameter_list|(
name|QObject
modifier|*
modifier|*
name|o
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|objects
operator|=
name|o
expr_stmt|;
name|number
operator|=
name|n
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|number
condition|;
name|i
operator|++
control|)
name|objects
index|[
name|i
index|]
operator|->
name|moveToThread
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|run
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|number
condition|;
name|i
operator|++
control|)
operator|delete
name|objects
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
class|;
end_class
begin_define
DECL|macro|EXTRA_THREAD_WAIT
define|#
directive|define
name|EXTRA_THREAD_WAIT
value|3000
end_define
begin_define
DECL|macro|MAIN_THREAD_WAIT
define|#
directive|define
name|MAIN_THREAD_WAIT
value|TwoMinutes
end_define
begin_function
DECL|function|destroyRace
name|void
name|tst_QObjectRace
operator|::
name|destroyRace
parameter_list|()
block|{
enum|enum
block|{
name|ThreadCount
init|=
literal|10
block|,
name|ObjectCountPerThread
init|=
literal|733
block|,
name|ObjectCount
init|=
name|ThreadCount
operator|*
name|ObjectCountPerThread
block|}
enum|;
specifier|const
name|char
modifier|*
name|_slots
index|[]
init|=
block|{
name|SLOT
argument_list|(
name|slot1
argument_list|()
argument_list|)
block|,
name|SLOT
argument_list|(
name|slot2
argument_list|()
argument_list|)
block|,
name|SLOT
argument_list|(
name|slot3
argument_list|()
argument_list|)
block|,
name|SLOT
argument_list|(
name|slot4
argument_list|()
argument_list|)
block|,
name|SLOT
argument_list|(
name|slot5
argument_list|()
argument_list|)
block|,
name|SLOT
argument_list|(
name|slot6
argument_list|()
argument_list|)
block|,
name|SLOT
argument_list|(
argument|slot7()
argument_list|)
block|}
decl_stmt|;
specifier|const
name|char
modifier|*
name|_signals
index|[]
init|=
block|{
name|SIGNAL
argument_list|(
name|signal1
argument_list|()
argument_list|)
block|,
name|SIGNAL
argument_list|(
name|signal2
argument_list|()
argument_list|)
block|,
name|SIGNAL
argument_list|(
name|signal3
argument_list|()
argument_list|)
block|,
name|SIGNAL
argument_list|(
name|signal4
argument_list|()
argument_list|)
block|,
name|SIGNAL
argument_list|(
name|signal5
argument_list|()
argument_list|)
block|,
name|SIGNAL
argument_list|(
name|signal6
argument_list|()
argument_list|)
block|,
name|SIGNAL
argument_list|(
argument|signal7()
argument_list|)
block|}
decl_stmt|;
name|QObject
modifier|*
name|objects
index|[
name|ObjectCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ObjectCount
condition|;
operator|++
name|i
control|)
name|objects
index|[
name|i
index|]
operator|=
operator|new
name|MyObject
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ObjectCount
operator|*
literal|11
condition|;
operator|++
name|i
control|)
block|{
name|connect
argument_list|(
name|objects
index|[
operator|(
name|i
operator|*
literal|13
operator|)
operator|%
name|ObjectCount
index|]
argument_list|,
name|_signals
index|[
operator|(
literal|2
operator|*
name|i
operator|)
operator|%
literal|7
index|]
argument_list|,
name|objects
index|[
operator|(
operator|(
name|i
operator|+
literal|2
operator|)
operator|*
literal|17
operator|)
operator|%
name|ObjectCount
index|]
argument_list|,
name|_slots
index|[
operator|(
literal|3
operator|*
name|i
operator|+
literal|2
operator|)
operator|%
literal|7
index|]
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|objects
index|[
operator|(
operator|(
name|i
operator|+
literal|6
operator|)
operator|*
literal|23
operator|)
operator|%
name|ObjectCount
index|]
argument_list|,
name|_signals
index|[
operator|(
literal|5
operator|*
name|i
operator|+
literal|4
operator|)
operator|%
literal|7
index|]
argument_list|,
name|objects
index|[
operator|(
operator|(
name|i
operator|+
literal|8
operator|)
operator|*
literal|41
operator|)
operator|%
name|ObjectCount
index|]
argument_list|,
name|_slots
index|[
operator|(
name|i
operator|+
literal|6
operator|)
operator|%
literal|7
index|]
argument_list|)
expr_stmt|;
block|}
name|DestroyThread
modifier|*
name|threads
index|[
name|ThreadCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ThreadCount
condition|;
operator|++
name|i
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|DestroyThread
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|->
name|setObjects
argument_list|(
name|objects
operator|+
name|i
operator|*
name|ObjectCountPerThread
argument_list|,
name|ObjectCountPerThread
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ThreadCount
condition|;
operator|++
name|i
control|)
name|threads
index|[
name|i
index|]
operator|->
name|start
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|threads
index|[
literal|0
index|]
operator|->
name|wait
argument_list|(
name|MAIN_THREAD_WAIT
argument_list|)
argument_list|)
expr_stmt|;
comment|// the other threads should finish pretty quickly now
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|ThreadCount
condition|;
operator|++
name|i
control|)
name|QVERIFY
argument_list|(
name|threads
index|[
name|i
index|]
operator|->
name|wait
argument_list|(
name|EXTRA_THREAD_WAIT
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ThreadCount
condition|;
operator|++
name|i
control|)
operator|delete
name|threads
index|[
name|i
index|]
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QObjectRace
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qobjectrace.moc"
end_include
end_unit
