begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_NATIVE_INPUT
end_ifndef
begin_define
DECL|macro|Q_NATIVE_INPUT
define|#
directive|define
name|Q_NATIVE_INPUT
end_define
begin_include
include|#
directive|include
file|<QtCore>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|namespace
name|Qt
block|{
name|namespace
name|Native
block|{
enum|enum
name|Status
block|{
name|Success
block|,
name|Failure
block|}
enum|;
block|}
block|}
end_decl_stmt
begin_decl_stmt
name|QT_END_NAMESPACE
comment|// ----------------------------------------------------------------------------
comment|// Declare a set of native events that can be used to communicate with
comment|// client applications in an platform independent way
comment|// ----------------------------------------------------------------------------
name|class
name|QNativeEvent
block|{
name|public
label|:
specifier|static
specifier|const
name|int
name|eventId
init|=
literal|1
decl_stmt|;
name|QNativeEvent
argument_list|(
argument|Qt::KeyboardModifiers modifiers = Qt::NoModifier
argument_list|)
empty_stmt|;
name|virtual
operator|~
name|QNativeEvent
argument_list|()
block|{}
expr_stmt|;
name|virtual
name|int
name|id
argument_list|()
specifier|const
block|{
return|return
name|eventId
return|;
block|}
empty_stmt|;
name|virtual
name|QString
name|toString
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
expr_stmt|;
comment|// Yields for mouse events too.
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|QNativeMouseEvent
range|:
name|public
name|QNativeEvent
block|{
name|public
operator|:
specifier|static
specifier|const
name|int
name|eventId
operator|=
literal|2
block|;
name|QNativeMouseEvent
argument_list|()
block|{}
block|;
name|QNativeMouseEvent
argument_list|(
argument|QPoint globalPos
argument_list|,
argument|Qt::KeyboardModifiers modifiers = Qt::NoModifier
argument_list|)
block|;
name|virtual
operator|~
name|QNativeMouseEvent
argument_list|()
block|{}
block|;
name|virtual
name|int
name|id
argument_list|()
specifier|const
block|{
return|return
name|eventId
return|;
block|}
block|;
name|QPoint
name|globalPos
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QNativeMouseMoveEvent
range|:
name|public
name|QNativeMouseEvent
block|{
name|public
operator|:
specifier|static
specifier|const
name|int
name|eventId
operator|=
literal|4
block|;
name|QNativeMouseMoveEvent
argument_list|()
block|{}
block|;
name|QNativeMouseMoveEvent
argument_list|(
argument|QPoint globalPos
argument_list|,
argument|Qt::KeyboardModifiers modifiers = Qt::NoModifier
argument_list|)
block|;
name|virtual
operator|~
name|QNativeMouseMoveEvent
argument_list|()
block|{}
block|;
name|virtual
name|int
name|id
argument_list|()
specifier|const
block|{
return|return
name|eventId
return|;
block|}
block|;
name|virtual
name|QString
name|toString
argument_list|()
specifier|const
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QNativeMouseButtonEvent
range|:
name|public
name|QNativeMouseEvent
block|{
name|public
operator|:
specifier|static
specifier|const
name|int
name|eventId
operator|=
literal|8
block|;
name|QNativeMouseButtonEvent
argument_list|()
block|{}
block|;
name|QNativeMouseButtonEvent
argument_list|(
argument|QPoint globalPos
argument_list|,
argument|Qt::MouseButton button
argument_list|,
argument|int clickCount
argument_list|,
argument|Qt::KeyboardModifiers modifiers = Qt::NoModifier
argument_list|)
block|;
name|virtual
operator|~
name|QNativeMouseButtonEvent
argument_list|()
block|{}
block|;
name|virtual
name|int
name|id
argument_list|()
specifier|const
block|{
return|return
name|eventId
return|;
block|}
block|;
name|virtual
name|QString
name|toString
argument_list|()
specifier|const
block|;
name|Qt
operator|::
name|MouseButton
name|button
block|;
name|int
name|clickCount
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QNativeMouseDragEvent
range|:
name|public
name|QNativeMouseButtonEvent
block|{
name|public
operator|:
specifier|static
specifier|const
name|int
name|eventId
operator|=
literal|16
block|;
name|QNativeMouseDragEvent
argument_list|()
block|{}
block|;
name|QNativeMouseDragEvent
argument_list|(
argument|QPoint globalPos
argument_list|,
argument|Qt::MouseButton button
argument_list|,
argument|Qt::KeyboardModifiers modifiers = Qt::NoModifier
argument_list|)
block|;
name|virtual
operator|~
name|QNativeMouseDragEvent
argument_list|()
block|{}
block|;
name|virtual
name|int
name|id
argument_list|()
specifier|const
block|{
return|return
name|eventId
return|;
block|}
block|;
name|virtual
name|QString
name|toString
argument_list|()
specifier|const
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QNativeMouseWheelEvent
range|:
name|public
name|QNativeMouseEvent
block|{
name|public
operator|:
specifier|static
specifier|const
name|int
name|eventId
operator|=
literal|32
block|;
name|QNativeMouseWheelEvent
argument_list|()
block|{}
block|;
name|QNativeMouseWheelEvent
argument_list|(
argument|QPoint globalPos
argument_list|,
argument|int delta
argument_list|,
argument|Qt::KeyboardModifiers modifiers = Qt::NoModifier
argument_list|)
block|;
name|virtual
operator|~
name|QNativeMouseWheelEvent
argument_list|()
block|{}
block|;
name|virtual
name|int
name|id
argument_list|()
specifier|const
block|{
return|return
name|eventId
return|;
block|}
block|;
name|virtual
name|QString
name|toString
argument_list|()
specifier|const
block|;
name|int
name|delta
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QNativeKeyEvent
range|:
name|public
name|QNativeEvent
block|{
name|public
operator|:
specifier|static
specifier|const
name|int
name|eventId
operator|=
literal|64
block|;
name|QNativeKeyEvent
argument_list|()
block|{}
block|;
name|QNativeKeyEvent
argument_list|(
argument|int nativeKeyCode
argument_list|,
argument|bool press
argument_list|,
argument|Qt::KeyboardModifiers modifiers = Qt::NoModifier
argument_list|)
block|;
name|QNativeKeyEvent
argument_list|(
argument|int nativeKeyCode
argument_list|,
argument|bool press
argument_list|,
argument|QChar character
argument_list|,
argument|Qt::KeyboardModifiers modifiers
argument_list|)
block|;
name|virtual
operator|~
name|QNativeKeyEvent
argument_list|()
block|{}
block|;
name|virtual
name|int
name|id
argument_list|()
specifier|const
block|{
return|return
name|eventId
return|;
block|}
block|;
name|virtual
name|QString
name|toString
argument_list|()
specifier|const
block|;
name|int
name|nativeKeyCode
block|;
name|bool
name|press
block|;
name|QChar
name|character
block|;
comment|// Some Qt to Native mappings:
specifier|static
name|int
name|Key_A
block|;
specifier|static
name|int
name|Key_B
block|;
specifier|static
name|int
name|Key_C
block|;
specifier|static
name|int
name|Key_1
block|;
specifier|static
name|int
name|Key_Backspace
block|;
specifier|static
name|int
name|Key_Enter
block|;
specifier|static
name|int
name|Key_Del
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QNativeModifierEvent
range|:
name|public
name|QNativeEvent
block|{
name|public
operator|:
specifier|static
specifier|const
name|int
name|eventId
operator|=
literal|128
block|;
name|QNativeModifierEvent
argument_list|(
argument|Qt::KeyboardModifiers modifiers = Qt::NoModifier
argument_list|,
argument|int nativeKeyCode =
literal|0
argument_list|)
block|;
name|virtual
operator|~
name|QNativeModifierEvent
argument_list|()
block|{}
block|;
name|virtual
name|int
name|id
argument_list|()
specifier|const
block|{
return|return
name|eventId
return|;
block|}
block|;
name|virtual
name|QString
name|toString
argument_list|()
specifier|const
block|;
name|int
name|nativeKeyCode
block|; }
decl_stmt|;
end_decl_stmt
begin_comment
comment|// ----------------------------------------------------------------------------
end_comment
begin_comment
comment|// Declare a set of related output / input functions for convenience:
end_comment
begin_comment
comment|// ----------------------------------------------------------------------------
end_comment
begin_expr_stmt
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
name|d
operator|,
name|QNativeEvent
operator|*
name|e
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
name|d
operator|,
specifier|const
name|QNativeEvent
operator|&
name|e
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QTextStream
operator|&
name|operator
operator|<<
operator|(
name|QTextStream
operator|&
name|s
operator|,
name|QNativeEvent
operator|*
name|e
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QTextStream
operator|&
name|operator
operator|<<
operator|(
name|QTextStream
operator|&
name|s
operator|,
name|QNativeMouseEvent
operator|*
name|e
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QTextStream
operator|&
name|operator
operator|<<
operator|(
name|QTextStream
operator|&
name|s
operator|,
name|QNativeMouseMoveEvent
operator|*
name|e
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QTextStream
operator|&
name|operator
operator|<<
operator|(
name|QTextStream
operator|&
name|s
operator|,
name|QNativeMouseButtonEvent
operator|*
name|e
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QTextStream
operator|&
name|operator
operator|<<
operator|(
name|QTextStream
operator|&
name|s
operator|,
name|QNativeMouseDragEvent
operator|*
name|e
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QTextStream
operator|&
name|operator
operator|<<
operator|(
name|QTextStream
operator|&
name|s
operator|,
name|QNativeMouseWheelEvent
operator|*
name|e
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QTextStream
operator|&
name|operator
operator|<<
operator|(
name|QTextStream
operator|&
name|s
operator|,
name|QNativeKeyEvent
operator|*
name|e
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QTextStream
operator|&
name|operator
operator|<<
operator|(
name|QTextStream
operator|&
name|s
operator|,
name|QNativeModifierEvent
operator|*
name|e
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QTextStream
operator|&
name|operator
operator|>>
operator|(
name|QTextStream
operator|&
name|s
operator|,
name|QNativeMouseMoveEvent
operator|*
name|e
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QTextStream
operator|&
name|operator
operator|>>
operator|(
name|QTextStream
operator|&
name|s
operator|,
name|QNativeMouseButtonEvent
operator|*
name|e
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QTextStream
operator|&
name|operator
operator|>>
operator|(
name|QTextStream
operator|&
name|s
operator|,
name|QNativeMouseDragEvent
operator|*
name|e
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QTextStream
operator|&
name|operator
operator|>>
operator|(
name|QTextStream
operator|&
name|s
operator|,
name|QNativeMouseWheelEvent
operator|*
name|e
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QTextStream
operator|&
name|operator
operator|>>
operator|(
name|QTextStream
operator|&
name|s
operator|,
name|QNativeKeyEvent
operator|*
name|e
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QTextStream
operator|&
name|operator
operator|>>
operator|(
name|QTextStream
operator|&
name|s
operator|,
name|QNativeModifierEvent
operator|*
name|e
operator|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// ----------------------------------------------------------------------------
end_comment
begin_comment
comment|// Declare the main class that is supposed to be sub-classed by components
end_comment
begin_comment
comment|// that are to receive native events
end_comment
begin_comment
comment|// ----------------------------------------------------------------------------
end_comment
begin_decl_stmt
name|class
name|QNativeInput
block|{
name|public
label|:
name|QNativeInput
argument_list|(
argument|bool subscribe = true
argument_list|)
empty_stmt|;
name|virtual
operator|~
name|QNativeInput
argument_list|()
expr_stmt|;
comment|// Callback methods. Should be implemented by interested sub-classes:
name|void
name|notify
parameter_list|(
name|QNativeEvent
modifier|*
name|event
parameter_list|)
function_decl|;
name|virtual
name|void
name|nativeEvent
parameter_list|(
name|QNativeEvent
modifier|*
name|event
parameter_list|)
function_decl|;
name|virtual
name|void
name|nativeMousePressEvent
parameter_list|(
name|QNativeMouseButtonEvent
modifier|*
parameter_list|)
block|{}
empty_stmt|;
name|virtual
name|void
name|nativeMouseReleaseEvent
parameter_list|(
name|QNativeMouseButtonEvent
modifier|*
parameter_list|)
block|{}
empty_stmt|;
name|virtual
name|void
name|nativeMouseMoveEvent
parameter_list|(
name|QNativeMouseMoveEvent
modifier|*
parameter_list|)
block|{}
empty_stmt|;
name|virtual
name|void
name|nativeMouseDragEvent
parameter_list|(
name|QNativeMouseDragEvent
modifier|*
parameter_list|)
block|{}
empty_stmt|;
name|virtual
name|void
name|nativeMouseWheelEvent
parameter_list|(
name|QNativeMouseWheelEvent
modifier|*
parameter_list|)
block|{}
empty_stmt|;
name|virtual
name|void
name|nativeKeyPressEvent
parameter_list|(
name|QNativeKeyEvent
modifier|*
parameter_list|)
block|{}
empty_stmt|;
name|virtual
name|void
name|nativeKeyReleaseEvent
parameter_list|(
name|QNativeKeyEvent
modifier|*
parameter_list|)
block|{}
empty_stmt|;
name|virtual
name|void
name|nativeModifierEvent
parameter_list|(
name|QNativeModifierEvent
modifier|*
parameter_list|)
block|{}
empty_stmt|;
comment|// The following methods will differ in implementation from OS to OS:
specifier|static
name|Qt
operator|::
name|Native
operator|::
name|Status
name|sendNativeMouseButtonEvent
argument_list|(
specifier|const
name|QNativeMouseButtonEvent
operator|&
name|event
argument_list|)
expr_stmt|;
specifier|static
name|Qt
operator|::
name|Native
operator|::
name|Status
name|sendNativeMouseMoveEvent
argument_list|(
specifier|const
name|QNativeMouseMoveEvent
operator|&
name|event
argument_list|)
expr_stmt|;
specifier|static
name|Qt
operator|::
name|Native
operator|::
name|Status
name|sendNativeMouseDragEvent
argument_list|(
specifier|const
name|QNativeMouseDragEvent
operator|&
name|event
argument_list|)
expr_stmt|;
specifier|static
name|Qt
operator|::
name|Native
operator|::
name|Status
name|sendNativeMouseWheelEvent
argument_list|(
specifier|const
name|QNativeMouseWheelEvent
operator|&
name|event
argument_list|)
expr_stmt|;
specifier|static
name|Qt
operator|::
name|Native
operator|::
name|Status
name|sendNativeKeyEvent
argument_list|(
argument|const QNativeKeyEvent&event
argument_list|,
argument|int pid =
literal|0
argument_list|)
expr_stmt|;
specifier|static
name|Qt
operator|::
name|Native
operator|::
name|Status
name|sendNativeModifierEvent
argument_list|(
specifier|const
name|QNativeModifierEvent
operator|&
name|event
argument_list|)
expr_stmt|;
comment|// sendNativeEvent will NOT differ from OS to OS.
specifier|static
name|Qt
operator|::
name|Native
operator|::
name|Status
name|sendNativeEvent
argument_list|(
argument|const QNativeEvent&event
argument_list|,
argument|int pid =
literal|0
argument_list|)
expr_stmt|;
comment|// The following methods will differ in implementation from OS to OS:
name|Qt
operator|::
name|Native
operator|::
name|Status
name|subscribeForNativeEvents
argument_list|()
expr_stmt|;
name|Qt
operator|::
name|Native
operator|::
name|Status
name|unsubscribeForNativeEvents
argument_list|()
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_NATIVE_INPUT
end_comment
end_unit
