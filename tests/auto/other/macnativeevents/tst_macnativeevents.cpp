begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QWidget>
end_include
begin_include
include|#
directive|include
file|<QDialog>
end_include
begin_include
include|#
directive|include
file|<QPushButton>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|"qnativeevents.h"
end_include
begin_include
include|#
directive|include
file|"nativeeventlist.h"
end_include
begin_include
include|#
directive|include
file|"expectedeventlist.h"
end_include
begin_include
include|#
directive|include
file|<Carbon/Carbon.h>
end_include
begin_macro
name|QT_USE_NAMESPACE
end_macro
begin_class
DECL|class|tst_MacNativeEvents
class|class
name|tst_MacNativeEvents
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|testMouseMoveLocation
parameter_list|()
function_decl|;
name|void
name|testPushButtonPressRelease
parameter_list|()
function_decl|;
name|void
name|testMouseLeftDoubleClick
parameter_list|()
function_decl|;
name|void
name|stressTestMouseLeftDoubleClick
parameter_list|()
function_decl|;
name|void
name|testMouseDragInside
parameter_list|()
function_decl|;
name|void
name|testMouseDragOutside
parameter_list|()
function_decl|;
name|void
name|testMouseDragToNonClientArea
parameter_list|()
function_decl|;
name|void
name|testDragWindow
parameter_list|()
function_decl|;
name|void
name|testMouseEnter
parameter_list|()
function_decl|;
name|void
name|testChildDialogInFrontOfModalParent
parameter_list|()
function_decl|;
comment|//    void testChildWindowInFrontOfParentWindow();
comment|//    void testChildToolWindowInFrontOfChildNormalWindow();
name|void
name|testChildWindowInFrontOfStaysOnTopParentWindow
parameter_list|()
function_decl|;
name|void
name|testKeyPressOnToplevel
parameter_list|()
function_decl|;
name|void
name|testModifierShift
parameter_list|()
function_decl|;
name|void
name|testModifierAlt
parameter_list|()
function_decl|;
name|void
name|testModifierCtrl
parameter_list|()
function_decl|;
name|void
name|testModifierCtrlWithDontSwapCtrlAndMeta
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|testMouseMoveLocation
name|void
name|tst_MacNativeEvents
operator|::
name|testMouseMoveLocation
parameter_list|()
block|{
name|QWidget
name|w
decl_stmt|;
name|w
operator|.
name|setMouseTracking
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|QPoint
name|p
init|=
name|w
operator|.
name|geometry
argument_list|()
operator|.
name|center
argument_list|()
decl_stmt|;
name|NativeEventList
name|native
decl_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeMouseMoveEvent
argument_list|(
name|p
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|ExpectedEventList
name|expected
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QMouseEvent
argument_list|(
name|QEvent
operator|::
name|MouseMove
argument_list|,
name|w
operator|.
name|mapFromGlobal
argument_list|(
name|p
argument_list|)
argument_list|,
name|p
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|play
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|expected
operator|.
name|waitForAllEvents
argument_list|()
argument_list|,
literal|"the test did not receive all expected events!"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testPushButtonPressRelease
name|void
name|tst_MacNativeEvents
operator|::
name|testPushButtonPressRelease
parameter_list|()
block|{
comment|// Check that a native mouse press and release generates the
comment|// same qevents on a pushbutton:
name|QPushButton
name|w
argument_list|(
literal|"click me"
argument_list|)
decl_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|QPoint
name|p
init|=
name|w
operator|.
name|geometry
argument_list|()
operator|.
name|center
argument_list|()
decl_stmt|;
name|NativeEventList
name|native
decl_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeMouseButtonEvent
argument_list|(
name|p
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|1
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeMouseButtonEvent
argument_list|(
name|p
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|ExpectedEventList
name|expected
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QMouseEvent
argument_list|(
name|QEvent
operator|::
name|MouseButtonPress
argument_list|,
name|w
operator|.
name|mapFromGlobal
argument_list|(
name|p
argument_list|)
argument_list|,
name|p
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QMouseEvent
argument_list|(
name|QEvent
operator|::
name|MouseButtonRelease
argument_list|,
name|w
operator|.
name|mapFromGlobal
argument_list|(
name|p
argument_list|)
argument_list|,
name|p
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|play
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|expected
operator|.
name|waitForAllEvents
argument_list|()
argument_list|,
literal|"the test did not receive all expected events!"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testMouseLeftDoubleClick
name|void
name|tst_MacNativeEvents
operator|::
name|testMouseLeftDoubleClick
parameter_list|()
block|{
comment|// Check that a native double click makes
comment|// the test widget receive a press-release-click-release:
name|QWidget
name|w
decl_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|QPoint
name|p
init|=
name|w
operator|.
name|geometry
argument_list|()
operator|.
name|center
argument_list|()
decl_stmt|;
name|NativeEventList
name|native
decl_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeMouseButtonEvent
argument_list|(
name|p
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|1
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeMouseButtonEvent
argument_list|(
name|p
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeMouseButtonEvent
argument_list|(
name|p
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|2
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeMouseButtonEvent
argument_list|(
name|p
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|ExpectedEventList
name|expected
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QMouseEvent
argument_list|(
name|QEvent
operator|::
name|MouseButtonPress
argument_list|,
name|w
operator|.
name|mapFromGlobal
argument_list|(
name|p
argument_list|)
argument_list|,
name|p
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QMouseEvent
argument_list|(
name|QEvent
operator|::
name|MouseButtonRelease
argument_list|,
name|w
operator|.
name|mapFromGlobal
argument_list|(
name|p
argument_list|)
argument_list|,
name|p
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QMouseEvent
argument_list|(
name|QEvent
operator|::
name|MouseButtonDblClick
argument_list|,
name|w
operator|.
name|mapFromGlobal
argument_list|(
name|p
argument_list|)
argument_list|,
name|p
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QMouseEvent
argument_list|(
name|QEvent
operator|::
name|MouseButtonRelease
argument_list|,
name|w
operator|.
name|mapFromGlobal
argument_list|(
name|p
argument_list|)
argument_list|,
name|p
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|play
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|expected
operator|.
name|waitForAllEvents
argument_list|()
argument_list|,
literal|"the test did not receive all expected events!"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stressTestMouseLeftDoubleClick
name|void
name|tst_MacNativeEvents
operator|::
name|stressTestMouseLeftDoubleClick
parameter_list|()
block|{
comment|// Check that multiple, fast, double clicks makes
comment|// the test widget receive correct click events
name|QWidget
name|w
decl_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|QPoint
name|p
init|=
name|w
operator|.
name|geometry
argument_list|()
operator|.
name|center
argument_list|()
decl_stmt|;
name|NativeEventList
name|native
decl_stmt|;
name|ExpectedEventList
name|expected
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeMouseButtonEvent
argument_list|(
name|p
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|1
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeMouseButtonEvent
argument_list|(
name|p
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeMouseButtonEvent
argument_list|(
name|p
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|2
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeMouseButtonEvent
argument_list|(
name|p
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QMouseEvent
argument_list|(
name|QEvent
operator|::
name|MouseButtonPress
argument_list|,
name|w
operator|.
name|mapFromGlobal
argument_list|(
name|p
argument_list|)
argument_list|,
name|p
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QMouseEvent
argument_list|(
name|QEvent
operator|::
name|MouseButtonRelease
argument_list|,
name|w
operator|.
name|mapFromGlobal
argument_list|(
name|p
argument_list|)
argument_list|,
name|p
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QMouseEvent
argument_list|(
name|QEvent
operator|::
name|MouseButtonDblClick
argument_list|,
name|w
operator|.
name|mapFromGlobal
argument_list|(
name|p
argument_list|)
argument_list|,
name|p
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QMouseEvent
argument_list|(
name|QEvent
operator|::
name|MouseButtonRelease
argument_list|,
name|w
operator|.
name|mapFromGlobal
argument_list|(
name|p
argument_list|)
argument_list|,
name|p
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|native
operator|.
name|play
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|expected
operator|.
name|waitForAllEvents
argument_list|()
argument_list|,
literal|"the test did not receive all expected events!"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testMouseDragInside
name|void
name|tst_MacNativeEvents
operator|::
name|testMouseDragInside
parameter_list|()
block|{
comment|// Check that a mouse drag inside a widget
comment|// will cause press-move-release events to be delivered
name|QWidget
name|w
decl_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|QPoint
name|p1
init|=
name|w
operator|.
name|geometry
argument_list|()
operator|.
name|center
argument_list|()
decl_stmt|;
name|QPoint
name|p2
init|=
name|p1
operator|-
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QPoint
name|p3
init|=
name|p1
operator|-
name|QPoint
argument_list|(
literal|20
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QPoint
name|p4
init|=
name|p1
operator|-
name|QPoint
argument_list|(
literal|30
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|NativeEventList
name|native
decl_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeMouseButtonEvent
argument_list|(
name|p1
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|1
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeMouseDragEvent
argument_list|(
name|p2
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeMouseDragEvent
argument_list|(
name|p3
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeMouseButtonEvent
argument_list|(
name|p4
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|ExpectedEventList
name|expected
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QMouseEvent
argument_list|(
name|QEvent
operator|::
name|MouseButtonPress
argument_list|,
name|w
operator|.
name|mapFromGlobal
argument_list|(
name|p1
argument_list|)
argument_list|,
name|p1
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QMouseEvent
argument_list|(
name|QEvent
operator|::
name|MouseMove
argument_list|,
name|w
operator|.
name|mapFromGlobal
argument_list|(
name|p2
argument_list|)
argument_list|,
name|p2
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QMouseEvent
argument_list|(
name|QEvent
operator|::
name|MouseMove
argument_list|,
name|w
operator|.
name|mapFromGlobal
argument_list|(
name|p3
argument_list|)
argument_list|,
name|p3
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QMouseEvent
argument_list|(
name|QEvent
operator|::
name|MouseButtonRelease
argument_list|,
name|w
operator|.
name|mapFromGlobal
argument_list|(
name|p4
argument_list|)
argument_list|,
name|p4
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|play
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|expected
operator|.
name|waitForAllEvents
argument_list|()
argument_list|,
literal|"the test did not receive all expected events!"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testMouseDragOutside
name|void
name|tst_MacNativeEvents
operator|::
name|testMouseDragOutside
parameter_list|()
block|{
comment|// Check that if we drag the mouse from inside the
comment|// widget, and release it outside, we still get mouse move
comment|// and release events when the mouse is outside the widget.
name|QWidget
name|w
decl_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|QPoint
name|inside1
init|=
name|w
operator|.
name|geometry
argument_list|()
operator|.
name|center
argument_list|()
decl_stmt|;
name|QPoint
name|inside2
init|=
name|inside1
operator|-
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QPoint
name|outside1
init|=
name|w
operator|.
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
operator|-
name|QPoint
argument_list|(
literal|50
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QPoint
name|outside2
init|=
name|outside1
operator|-
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|NativeEventList
name|native
decl_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeMouseButtonEvent
argument_list|(
name|inside1
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|1
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeMouseDragEvent
argument_list|(
name|inside2
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeMouseDragEvent
argument_list|(
name|outside1
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeMouseButtonEvent
argument_list|(
name|outside2
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|ExpectedEventList
name|expected
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QMouseEvent
argument_list|(
name|QEvent
operator|::
name|MouseButtonPress
argument_list|,
name|w
operator|.
name|mapFromGlobal
argument_list|(
name|inside1
argument_list|)
argument_list|,
name|inside1
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QMouseEvent
argument_list|(
name|QEvent
operator|::
name|MouseMove
argument_list|,
name|w
operator|.
name|mapFromGlobal
argument_list|(
name|inside2
argument_list|)
argument_list|,
name|inside2
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QMouseEvent
argument_list|(
name|QEvent
operator|::
name|MouseMove
argument_list|,
name|w
operator|.
name|mapFromGlobal
argument_list|(
name|outside1
argument_list|)
argument_list|,
name|outside1
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QMouseEvent
argument_list|(
name|QEvent
operator|::
name|MouseButtonRelease
argument_list|,
name|w
operator|.
name|mapFromGlobal
argument_list|(
name|outside2
argument_list|)
argument_list|,
name|outside2
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|play
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|expected
operator|.
name|waitForAllEvents
argument_list|()
argument_list|,
literal|"the test did not receive all expected events!"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testMouseDragToNonClientArea
name|void
name|tst_MacNativeEvents
operator|::
name|testMouseDragToNonClientArea
parameter_list|()
block|{
comment|// Check that if we drag the mouse from inside the
comment|// widget, and release it on the title bar, we still get mouse move
comment|// and release events when the mouse is on the title bar
name|QWidget
name|w
decl_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|QPoint
name|inside1
init|=
name|w
operator|.
name|geometry
argument_list|()
operator|.
name|center
argument_list|()
decl_stmt|;
name|QPoint
name|inside2
init|=
name|inside1
operator|-
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QPoint
name|titlebar1
init|=
name|w
operator|.
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
operator|-
name|QPoint
argument_list|(
operator|-
literal|100
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|QPoint
name|titlebar2
init|=
name|titlebar1
operator|-
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|NativeEventList
name|native
decl_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeMouseButtonEvent
argument_list|(
name|inside1
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|1
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeMouseDragEvent
argument_list|(
name|inside2
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeMouseDragEvent
argument_list|(
name|titlebar1
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeMouseButtonEvent
argument_list|(
name|titlebar2
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|ExpectedEventList
name|expected
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QMouseEvent
argument_list|(
name|QEvent
operator|::
name|MouseButtonPress
argument_list|,
name|w
operator|.
name|mapFromGlobal
argument_list|(
name|inside1
argument_list|)
argument_list|,
name|inside1
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QMouseEvent
argument_list|(
name|QEvent
operator|::
name|MouseMove
argument_list|,
name|w
operator|.
name|mapFromGlobal
argument_list|(
name|inside2
argument_list|)
argument_list|,
name|inside2
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QMouseEvent
argument_list|(
name|QEvent
operator|::
name|MouseMove
argument_list|,
name|w
operator|.
name|mapFromGlobal
argument_list|(
name|titlebar1
argument_list|)
argument_list|,
name|titlebar1
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QMouseEvent
argument_list|(
name|QEvent
operator|::
name|MouseButtonRelease
argument_list|,
name|w
operator|.
name|mapFromGlobal
argument_list|(
name|titlebar2
argument_list|)
argument_list|,
name|titlebar2
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|play
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|expected
operator|.
name|waitForAllEvents
argument_list|()
argument_list|,
literal|"the test did not receive all expected events!"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testDragWindow
name|void
name|tst_MacNativeEvents
operator|::
name|testDragWindow
parameter_list|()
block|{
comment|// Check that if we drag the mouse from inside the
comment|// widgets title bar, we get a move event on the window
name|QWidget
name|w
decl_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|QPoint
name|titlebar
init|=
name|w
operator|.
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
operator|-
name|QPoint
argument_list|(
operator|-
literal|100
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|QPoint
name|moveTo
init|=
name|titlebar
operator|+
name|QPoint
argument_list|(
literal|100
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|NativeEventList
name|native
decl_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeMouseButtonEvent
argument_list|(
name|titlebar
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|1
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeMouseDragEvent
argument_list|(
name|moveTo
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|append
argument_list|(
literal|500
argument_list|,
operator|new
name|QNativeMouseButtonEvent
argument_list|(
name|moveTo
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|ExpectedEventList
name|expected
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QMouseEvent
argument_list|(
name|QEvent
operator|::
name|NonClientAreaMouseButtonPress
argument_list|,
name|w
operator|.
name|mapFromGlobal
argument_list|(
name|titlebar
argument_list|)
argument_list|,
name|titlebar
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QMouseEvent
argument_list|(
name|QEvent
operator|::
name|NonClientAreaMouseButtonRelease
argument_list|,
name|w
operator|.
name|mapFromGlobal
argument_list|(
name|titlebar
argument_list|)
argument_list|,
name|moveTo
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|play
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|expected
operator|.
name|waitForAllEvents
argument_list|()
argument_list|,
literal|"the test did not receive all expected events!"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testMouseEnter
name|void
name|tst_MacNativeEvents
operator|::
name|testMouseEnter
parameter_list|()
block|{
comment|// When a mouse enters a widget, both a mouse enter events and a
comment|// mouse move event should be sent. Let's test this:
name|QWidget
name|w
decl_stmt|;
name|w
operator|.
name|setMouseTracking
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|QPoint
name|outside
init|=
name|w
operator|.
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
operator|-
name|QPoint
argument_list|(
literal|50
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QPoint
name|inside
init|=
name|w
operator|.
name|geometry
argument_list|()
operator|.
name|center
argument_list|()
decl_stmt|;
name|NativeEventList
name|native
decl_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeMouseMoveEvent
argument_list|(
name|outside
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeMouseMoveEvent
argument_list|(
name|inside
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|ExpectedEventList
name|expected
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Enter
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QMouseEvent
argument_list|(
name|QEvent
operator|::
name|MouseMove
argument_list|,
name|w
operator|.
name|mapFromGlobal
argument_list|(
name|inside
argument_list|)
argument_list|,
name|inside
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|play
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|expected
operator|.
name|waitForAllEvents
argument_list|()
argument_list|,
literal|"the test did not receive all expected events!"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testChildDialogInFrontOfModalParent
name|void
name|tst_MacNativeEvents
operator|::
name|testChildDialogInFrontOfModalParent
parameter_list|()
block|{
comment|// Test that a child dialog of a modal parent dialog is
comment|// in front of the parent, and active:
name|QDialog
name|parent
decl_stmt|;
name|parent
operator|.
name|setWindowModality
argument_list|(
name|Qt
operator|::
name|ApplicationModal
argument_list|)
expr_stmt|;
name|QDialog
name|child
argument_list|(
operator|&
name|parent
argument_list|)
decl_stmt|;
name|QPushButton
name|button
argument_list|(
literal|"close"
argument_list|,
operator|&
name|child
argument_list|)
decl_stmt|;
name|connect
argument_list|(
operator|&
name|button
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
operator|&
name|child
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|parent
operator|.
name|show
argument_list|()
expr_stmt|;
name|child
operator|.
name|show
argument_list|()
expr_stmt|;
name|QPoint
name|inside
init|=
name|button
operator|.
name|mapToGlobal
argument_list|(
name|button
operator|.
name|geometry
argument_list|()
operator|.
name|center
argument_list|()
argument_list|)
decl_stmt|;
comment|// Post a click on the button to close the child dialog:
name|NativeEventList
name|native
decl_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeMouseButtonEvent
argument_list|(
name|inside
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|1
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeMouseButtonEvent
argument_list|(
name|inside
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|play
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|child
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
literal|0
end_if
begin_comment
comment|// This test is disabled as of Qt-4.7.4 because we cannot do it
end_comment
begin_comment
comment|// unless we use the Cocoa sub window API. But using that opens up
end_comment
begin_comment
comment|// a world of side effects that we cannot live with. So we rather
end_comment
begin_comment
comment|// not support child-on-top-of-parent instead.
end_comment
begin_comment
unit|void tst_MacNativeEvents::testChildWindowInFrontOfParentWindow() {
comment|// Test that a child window always stacks in front of its parent window.
end_comment
begin_comment
comment|// Do this by first click on the parent, then on the child window button.
end_comment
begin_endif
unit|QWidget parent;     QPushButton child("a button",&parent);     child.setWindowFlags(Qt::Window);     connect(&child, SIGNAL(clicked()),&child, SLOT(close()));     parent.show();     child.show();      QPoint parent_p = parent.geometry().bottomLeft() + QPoint(20, -20);     QPoint child_p = child.geometry().center();      NativeEventList native;     native.append(new QNativeMouseButtonEvent(parent_p, Qt::LeftButton, 1, Qt::NoModifier));     native.append(new QNativeMouseButtonEvent(parent_p, Qt::LeftButton, 0, Qt::NoModifier));     native.append(new QNativeMouseButtonEvent(child_p, Qt::LeftButton, 1, Qt::NoModifier));     native.append(new QNativeMouseButtonEvent(child_p, Qt::LeftButton, 0, Qt::NoModifier));      native.play();     QTest::qWait(100);     QVERIFY(!child.isVisible()); }
endif|#
directive|endif
end_endif
begin_comment
comment|/* This test can be enabled once setStackingOrder has been fixed in qwidget_mac.mm void tst_MacNativeEvents::testChildToolWindowInFrontOfChildNormalWindow() {     // Test that a child tool window always stacks in front of normal sibling windows.     // Do this by first click on the sibling, then on the tool window button.     QWidget parent;     QWidget normalChild(&parent, Qt::Window);     QPushButton toolChild("a button",&parent);     toolChild.setWindowFlags(Qt::Tool);     connect(&toolChild, SIGNAL(clicked()),&toolChild, SLOT(close()));     parent.show();     normalChild.show();     toolChild.show();      QPoint normalChild_p = normalChild.geometry().bottomLeft() + QPoint(20, -20);     QPoint toolChild_p = toolChild.geometry().center();      NativeEventList native;     native.append(new QNativeMouseButtonEvent(normalChild_p, Qt::LeftButton, 1, Qt::NoModifier));     native.append(new QNativeMouseButtonEvent(normalChild_p, Qt::LeftButton, 0, Qt::NoModifier));     native.append(new QNativeMouseButtonEvent(toolChild_p, Qt::LeftButton, 1, Qt::NoModifier));     native.append(new QNativeMouseButtonEvent(toolChild_p, Qt::LeftButton, 0, Qt::NoModifier));      native.play();     QTest::qWait(100);     QVERIFY(!toolChild.isVisible()); } */
end_comment
begin_function
DECL|function|testChildWindowInFrontOfStaysOnTopParentWindow
name|void
name|tst_MacNativeEvents
operator|::
name|testChildWindowInFrontOfStaysOnTopParentWindow
parameter_list|()
block|{
comment|// Test that a child window stacks on top of a stays-on-top parent.
name|QWidget
name|parent
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|WindowStaysOnTopHint
argument_list|)
decl_stmt|;
name|QPushButton
name|button
argument_list|(
literal|"close"
argument_list|,
operator|&
name|parent
argument_list|)
decl_stmt|;
name|button
operator|.
name|setWindowFlags
argument_list|(
name|Qt
operator|::
name|Window
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|button
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
operator|&
name|button
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|parent
operator|.
name|show
argument_list|()
expr_stmt|;
name|button
operator|.
name|show
argument_list|()
expr_stmt|;
name|QPoint
name|inside
init|=
name|button
operator|.
name|geometry
argument_list|()
operator|.
name|center
argument_list|()
decl_stmt|;
comment|// Post a click on the button to close the child dialog:
name|NativeEventList
name|native
decl_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeMouseButtonEvent
argument_list|(
name|inside
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|1
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeMouseButtonEvent
argument_list|(
name|inside
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|play
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|button
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testKeyPressOnToplevel
name|void
name|tst_MacNativeEvents
operator|::
name|testKeyPressOnToplevel
parameter_list|()
block|{
comment|// Check that we receive keyevents for
comment|// toplevel widgets. For leagacy reasons, and according to Qt on
comment|// other platforms (carbon port + linux), we should get these events
comment|// even when the focus policy is set to Qt::NoFocus when there is no
comment|// other focus widget on screen:
name|QWidget
name|w
decl_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|NativeEventList
name|native
decl_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeKeyEvent
argument_list|(
name|QNativeKeyEvent
operator|::
name|Key_A
argument_list|,
literal|true
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeKeyEvent
argument_list|(
name|QNativeKeyEvent
operator|::
name|Key_A
argument_list|,
literal|false
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|ExpectedEventList
name|expected
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QKeyEvent
argument_list|(
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QKeyEvent
argument_list|(
name|QEvent
operator|::
name|KeyRelease
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|play
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|expected
operator|.
name|waitForAllEvents
argument_list|()
argument_list|,
literal|"the test did not receive all expected events!"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testModifierShift
name|void
name|tst_MacNativeEvents
operator|::
name|testModifierShift
parameter_list|()
block|{
name|QWidget
name|w
decl_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|NativeEventList
name|native
decl_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeModifierEvent
argument_list|(
name|Qt
operator|::
name|ShiftModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeKeyEvent
argument_list|(
name|QNativeKeyEvent
operator|::
name|Key_A
argument_list|,
literal|true
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeKeyEvent
argument_list|(
name|QNativeKeyEvent
operator|::
name|Key_A
argument_list|,
literal|false
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeModifierEvent
argument_list|(
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|ExpectedEventList
name|expected
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QKeyEvent
argument_list|(
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|Qt
operator|::
name|Key_Shift
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QKeyEvent
argument_list|(
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QKeyEvent
argument_list|(
name|QEvent
operator|::
name|KeyRelease
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QKeyEvent
argument_list|(
name|QEvent
operator|::
name|KeyRelease
argument_list|,
name|Qt
operator|::
name|Key_Shift
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|play
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|expected
operator|.
name|waitForAllEvents
argument_list|()
argument_list|,
literal|"the test did not receive all expected events!"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testModifierAlt
name|void
name|tst_MacNativeEvents
operator|::
name|testModifierAlt
parameter_list|()
block|{
name|QWidget
name|w
decl_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|NativeEventList
name|native
decl_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeModifierEvent
argument_list|(
name|Qt
operator|::
name|AltModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeKeyEvent
argument_list|(
name|QNativeKeyEvent
operator|::
name|Key_A
argument_list|,
literal|true
argument_list|,
name|Qt
operator|::
name|AltModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeKeyEvent
argument_list|(
name|QNativeKeyEvent
operator|::
name|Key_A
argument_list|,
literal|false
argument_list|,
name|Qt
operator|::
name|AltModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeModifierEvent
argument_list|(
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|ExpectedEventList
name|expected
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QKeyEvent
argument_list|(
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|Qt
operator|::
name|Key_Alt
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QKeyEvent
argument_list|(
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|AltModifier
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QKeyEvent
argument_list|(
name|QEvent
operator|::
name|KeyRelease
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|AltModifier
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QKeyEvent
argument_list|(
name|QEvent
operator|::
name|KeyRelease
argument_list|,
name|Qt
operator|::
name|Key_Alt
argument_list|,
name|Qt
operator|::
name|AltModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|play
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|expected
operator|.
name|waitForAllEvents
argument_list|()
argument_list|,
literal|"the test did not receive all expected events!"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testModifierCtrl
name|void
name|tst_MacNativeEvents
operator|::
name|testModifierCtrl
parameter_list|()
block|{
comment|// On Mac, we switch the Command and Control modifier by default, so that Command
comment|// means Meta, and Control means Command. Lets check that this works:
name|QWidget
name|w
decl_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ushort
argument_list|(
name|kControlUnicode
argument_list|)
argument_list|,
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|Key_Meta
argument_list|)
operator|.
name|toString
argument_list|(
name|QKeySequence
operator|::
name|NativeText
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|unicode
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ushort
argument_list|(
name|kCommandUnicode
argument_list|)
argument_list|,
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|Key_Control
argument_list|)
operator|.
name|toString
argument_list|(
name|QKeySequence
operator|::
name|NativeText
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|unicode
argument_list|()
argument_list|)
expr_stmt|;
name|NativeEventList
name|native
decl_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeModifierEvent
argument_list|(
name|Qt
operator|::
name|ControlModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeKeyEvent
argument_list|(
name|QNativeKeyEvent
operator|::
name|Key_A
argument_list|,
literal|true
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeKeyEvent
argument_list|(
name|QNativeKeyEvent
operator|::
name|Key_A
argument_list|,
literal|false
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeModifierEvent
argument_list|(
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|ExpectedEventList
name|expected
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QKeyEvent
argument_list|(
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|Qt
operator|::
name|Key_Meta
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QKeyEvent
argument_list|(
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|MetaModifier
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QKeyEvent
argument_list|(
name|QEvent
operator|::
name|KeyRelease
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|MetaModifier
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QKeyEvent
argument_list|(
name|QEvent
operator|::
name|KeyRelease
argument_list|,
name|Qt
operator|::
name|Key_Meta
argument_list|,
name|Qt
operator|::
name|MetaModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|play
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|expected
operator|.
name|waitForAllEvents
argument_list|()
argument_list|,
literal|"the test did not receive all expected events!"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testModifierCtrlWithDontSwapCtrlAndMeta
name|void
name|tst_MacNativeEvents
operator|::
name|testModifierCtrlWithDontSwapCtrlAndMeta
parameter_list|()
block|{
comment|// On Mac, we switch the Command and Control modifier by default, so that Command
comment|// means Meta, and Control means Command. Lets check that the flag to swith off
comment|// this behaviour works. While working on this test I realized that we actually
comment|// don't (and never have) respected this flag for raw key events. Only for
comment|// menus, through QKeySequence. I don't want to change this behaviour now, at
comment|// least not until someone complains. So I choose to let the test just stop
comment|// any unintended regressions instead. If we decide to resepect the flag at one
comment|// point, fix the test.
name|QCoreApplication
operator|::
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_MacDontSwapCtrlAndMeta
argument_list|)
expr_stmt|;
name|QWidget
name|w
decl_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ushort
argument_list|(
name|kCommandUnicode
argument_list|)
argument_list|,
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|Key_Meta
argument_list|)
operator|.
name|toString
argument_list|(
name|QKeySequence
operator|::
name|NativeText
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|unicode
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ushort
argument_list|(
name|kControlUnicode
argument_list|)
argument_list|,
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|Key_Control
argument_list|)
operator|.
name|toString
argument_list|(
name|QKeySequence
operator|::
name|NativeText
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|unicode
argument_list|()
argument_list|)
expr_stmt|;
name|NativeEventList
name|native
decl_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeModifierEvent
argument_list|(
name|Qt
operator|::
name|ControlModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeKeyEvent
argument_list|(
name|QNativeKeyEvent
operator|::
name|Key_A
argument_list|,
literal|true
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeKeyEvent
argument_list|(
name|QNativeKeyEvent
operator|::
name|Key_A
argument_list|,
literal|false
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|append
argument_list|(
operator|new
name|QNativeModifierEvent
argument_list|(
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|ExpectedEventList
name|expected
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QKeyEvent
argument_list|(
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|Qt
operator|::
name|Key_Meta
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QKeyEvent
argument_list|(
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QKeyEvent
argument_list|(
name|QEvent
operator|::
name|KeyRelease
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
operator|new
name|QKeyEvent
argument_list|(
name|QEvent
operator|::
name|KeyRelease
argument_list|,
name|Qt
operator|::
name|Key_Meta
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
argument_list|)
expr_stmt|;
name|native
operator|.
name|play
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|expected
operator|.
name|waitForAllEvents
argument_list|()
argument_list|,
literal|"the test did not receive all expected events!"
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_MacDontSwapCtrlAndMeta
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_MacNativeEvents
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_macnativeevents.moc"
end_include
end_unit
