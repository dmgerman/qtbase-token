begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qobject.h>
end_include
begin_class
DECL|class|tst_QObjectPerformance
class|class
name|tst_QObjectPerformance
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
private|private
name|slots
private|:
name|void
name|emitToManyReceivers
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_class
DECL|class|SimpleSenderObject
class|class
name|SimpleSenderObject
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
signals|signals:
name|void
name|signal
parameter_list|()
function_decl|;
public|public:
DECL|function|emitSignal
name|void
name|emitSignal
parameter_list|()
block|{
emit|emit
name|signal
argument_list|()
emit|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|SimpleReceiverObject
class|class
name|SimpleReceiverObject
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
DECL|function|slot
name|void
name|slot
parameter_list|()
block|{     }
block|}
class|;
end_class
begin_function
DECL|function|emitToManyReceivers
name|void
name|tst_QObjectPerformance
operator|::
name|emitToManyReceivers
parameter_list|()
block|{
comment|// ensure that emission times remain mostly linear as the number of receivers increase
name|SimpleSenderObject
name|sender
decl_stmt|;
name|int
name|elapsed
init|=
literal|0
decl_stmt|;
specifier|const
name|int
name|increase
init|=
literal|3000
decl_stmt|;
specifier|const
name|int
name|base
init|=
literal|5000
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|int
name|size
init|=
name|base
operator|+
name|i
operator|*
name|increase
decl_stmt|;
specifier|const
name|double
name|increaseRatio
init|=
name|double
argument_list|(
name|size
argument_list|)
operator|/
call|(
name|double
call|)
argument_list|(
name|size
operator|-
name|increase
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|SimpleReceiverObject
modifier|*
argument_list|>
name|receivers
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|size
condition|;
operator|++
name|k
control|)
block|{
name|SimpleReceiverObject
modifier|*
name|receiver
init|=
operator|new
name|SimpleReceiverObject
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|sender
argument_list|,
name|SIGNAL
argument_list|(
name|signal
argument_list|()
argument_list|)
argument_list|,
name|receiver
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|receivers
operator|.
name|append
argument_list|(
name|receiver
argument_list|)
expr_stmt|;
block|}
name|QTime
name|timer
decl_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|sender
operator|.
name|emitSignal
argument_list|()
expr_stmt|;
name|int
name|e
init|=
name|timer
operator|.
name|elapsed
argument_list|()
decl_stmt|;
if|if
condition|(
name|elapsed
operator|>
literal|1
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
name|size
operator|<<
literal|"receivers, elapsed time"
operator|<<
name|e
operator|<<
literal|"compared to previous time"
operator|<<
name|elapsed
expr_stmt|;
name|QVERIFY
argument_list|(
name|double
argument_list|(
name|e
argument_list|)
operator|/
name|double
argument_list|(
name|elapsed
argument_list|)
operator|<=
name|increaseRatio
operator|*
literal|2.0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qDebug
argument_list|()
operator|<<
name|size
operator|<<
literal|"receivers, elapsed time"
operator|<<
name|e
operator|<<
literal|"cannot be compared to previous, unmeasurable time"
expr_stmt|;
block|}
name|elapsed
operator|=
name|e
expr_stmt|;
name|qDeleteAll
argument_list|(
name|receivers
argument_list|)
expr_stmt|;
name|receivers
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QObjectPerformance
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qobjectperformance.moc"
end_include
end_unit
