begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDate>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtCore/QObject>
end_include
begin_include
include|#
directive|include
file|<QtGui>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WINCE_WM
end_ifdef
begin_include
include|#
directive|include
file|<windows.h>
end_include
begin_include
include|#
directive|include
file|"ddhelper.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|tst_WindowsMobile
class|class
name|tst_WindowsMobile
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|tst_WindowsMobile
name|tst_WindowsMobile
parameter_list|()
block|{
name|qApp
operator|->
name|setCursorFlashTime
argument_list|(
literal|24
operator|*
literal|3600
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// once a day
comment|// qApp->setCursorFlashTime (INT_MAX);
ifdef|#
directive|ifdef
name|Q_OS_WINCE_WM
name|q_initDD
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE_WM
argument_list|)
operator|&&
name|defined
argument_list|(
name|_WIN32_WCE
argument_list|)
operator|&&
name|_WIN32_WCE
operator|<=
literal|0x501
private|private
name|slots
private|:
name|void
name|testMainWindowAndMenuBar
parameter_list|()
function_decl|;
name|void
name|testSimpleWidget
parameter_list|()
function_decl|;
endif|#
directive|endif
block|}
class|;
end_class
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE_WM
argument_list|)
operator|&&
name|defined
argument_list|(
name|_WIN32_WCE
argument_list|)
operator|&&
name|_WIN32_WCE
operator|<=
literal|0x501
end_if
begin_function
DECL|function|qt_wince_is_platform
name|bool
name|qt_wince_is_platform
parameter_list|(
specifier|const
name|QString
modifier|&
name|platformString
parameter_list|)
block|{
name|wchar_t
name|tszPlatform
index|[
literal|64
index|]
decl_stmt|;
if|if
condition|(
name|SystemParametersInfo
argument_list|(
name|SPI_GETPLATFORMTYPE
argument_list|,
sizeof|sizeof
argument_list|(
name|tszPlatform
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
operator|*
name|tszPlatform
argument_list|)
argument_list|,
name|tszPlatform
argument_list|,
literal|0
argument_list|)
condition|)
if|if
condition|(
literal|0
operator|==
name|_tcsicmp
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|platformString
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
name|tszPlatform
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|qt_wince_is_smartphone
name|bool
name|qt_wince_is_smartphone
parameter_list|()
block|{
return|return
name|qt_wince_is_platform
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Smartphone"
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|openMenu
name|void
name|openMenu
parameter_list|()
block|{
operator|::
name|mouse_event
argument_list|(
name|MOUSEEVENTF_LEFTDOWN
operator||
name|MOUSEEVENTF_ABSOLUTE
argument_list|,
literal|450
argument_list|,
literal|630
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|::
name|mouse_event
argument_list|(
name|MOUSEEVENTF_LEFTUP
operator||
name|MOUSEEVENTF_ABSOLUTE
argument_list|,
literal|450
argument_list|,
literal|630
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
operator|::
name|mouse_event
argument_list|(
name|MOUSEEVENTF_LEFTDOWN
operator||
name|MOUSEEVENTF_ABSOLUTE
argument_list|,
literal|65535
argument_list|,
literal|65535
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|::
name|mouse_event
argument_list|(
name|MOUSEEVENTF_LEFTUP
operator||
name|MOUSEEVENTF_ABSOLUTE
argument_list|,
literal|65535
argument_list|,
literal|65535
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
operator|::
name|mouse_event
argument_list|(
name|MOUSEEVENTF_LEFTDOWN
operator||
name|MOUSEEVENTF_ABSOLUTE
argument_list|,
literal|55535
argument_list|,
literal|55535
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|::
name|mouse_event
argument_list|(
name|MOUSEEVENTF_LEFTUP
operator||
name|MOUSEEVENTF_ABSOLUTE
argument_list|,
literal|55535
argument_list|,
literal|55535
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
operator|::
name|mouse_event
argument_list|(
name|MOUSEEVENTF_LEFTDOWN
operator||
name|MOUSEEVENTF_ABSOLUTE
argument_list|,
literal|55535
argument_list|,
literal|58535
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|::
name|mouse_event
argument_list|(
name|MOUSEEVENTF_LEFTUP
operator||
name|MOUSEEVENTF_ABSOLUTE
argument_list|,
literal|55535
argument_list|,
literal|58535
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
operator|::
name|mouse_event
argument_list|(
name|MOUSEEVENTF_LEFTDOWN
operator||
name|MOUSEEVENTF_ABSOLUTE
argument_list|,
literal|40535
argument_list|,
literal|55535
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|::
name|mouse_event
argument_list|(
name|MOUSEEVENTF_LEFTUP
operator||
name|MOUSEEVENTF_ABSOLUTE
argument_list|,
literal|40535
argument_list|,
literal|55535
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
operator|::
name|mouse_event
argument_list|(
name|MOUSEEVENTF_LEFTDOWN
operator||
name|MOUSEEVENTF_ABSOLUTE
argument_list|,
literal|32535
argument_list|,
literal|55535
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|::
name|mouse_event
argument_list|(
name|MOUSEEVENTF_LEFTUP
operator||
name|MOUSEEVENTF_ABSOLUTE
argument_list|,
literal|32535
argument_list|,
literal|55535
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
operator|::
name|mouse_event
argument_list|(
name|MOUSEEVENTF_LEFTDOWN
operator||
name|MOUSEEVENTF_ABSOLUTE
argument_list|,
literal|65535
argument_list|,
literal|65535
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|::
name|mouse_event
argument_list|(
name|MOUSEEVENTF_LEFTUP
operator||
name|MOUSEEVENTF_ABSOLUTE
argument_list|,
literal|65535
argument_list|,
literal|65535
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
operator|::
name|mouse_event
argument_list|(
name|MOUSEEVENTF_LEFTDOWN
operator||
name|MOUSEEVENTF_ABSOLUTE
argument_list|,
literal|55535
argument_list|,
literal|50535
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|::
name|mouse_event
argument_list|(
name|MOUSEEVENTF_LEFTUP
operator||
name|MOUSEEVENTF_ABSOLUTE
argument_list|,
literal|55535
argument_list|,
literal|50535
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
operator|::
name|mouse_event
argument_list|(
name|MOUSEEVENTF_LEFTDOWN
operator||
name|MOUSEEVENTF_ABSOLUTE
argument_list|,
literal|55535
argument_list|,
literal|40535
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|::
name|mouse_event
argument_list|(
name|MOUSEEVENTF_LEFTUP
operator||
name|MOUSEEVENTF_ABSOLUTE
argument_list|,
literal|55535
argument_list|,
literal|40535
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
operator|::
name|mouse_event
argument_list|(
name|MOUSEEVENTF_LEFTDOWN
operator||
name|MOUSEEVENTF_ABSOLUTE
argument_list|,
literal|48535
argument_list|,
literal|45535
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
operator|::
name|mouse_event
argument_list|(
name|MOUSEEVENTF_LEFTUP
operator||
name|MOUSEEVENTF_ABSOLUTE
argument_list|,
literal|48535
argument_list|,
literal|45535
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compareScreenshots
name|void
name|compareScreenshots
parameter_list|(
specifier|const
name|QString
modifier|&
name|image1
parameter_list|,
specifier|const
name|QString
modifier|&
name|image2
parameter_list|)
block|{
name|QImage
name|screenShot
argument_list|(
name|image1
argument_list|)
decl_stmt|;
name|QImage
name|original
argument_list|(
name|image2
argument_list|)
decl_stmt|;
comment|// cut away the title bar before comparing
name|QDesktopWidget
name|desktop
decl_stmt|;
name|QRect
name|desktopFrameRect
init|=
name|desktop
operator|.
name|frameGeometry
argument_list|()
decl_stmt|;
name|QRect
name|desktopClientRect
init|=
name|desktop
operator|.
name|availableGeometry
argument_list|()
decl_stmt|;
name|QPainter
name|p1
argument_list|(
operator|&
name|screenShot
argument_list|)
decl_stmt|;
name|QPainter
name|p2
argument_list|(
operator|&
name|original
argument_list|)
decl_stmt|;
comment|//screenShot.save("scr1.png", "PNG");
name|p1
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|desktopFrameRect
operator|.
name|width
argument_list|()
argument_list|,
name|desktopClientRect
operator|.
name|y
argument_list|()
argument_list|,
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|p2
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|desktopFrameRect
operator|.
name|width
argument_list|()
argument_list|,
name|desktopClientRect
operator|.
name|y
argument_list|()
argument_list|,
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
comment|//screenShot.save("scr2.png", "PNG");
comment|//original.save("orig1.png", "PNG");
name|QCOMPARE
argument_list|(
name|original
argument_list|,
name|screenShot
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeScreenShot
name|void
name|takeScreenShot
parameter_list|(
specifier|const
name|QString
name|filename
parameter_list|)
block|{
name|q_lock
argument_list|()
expr_stmt|;
name|QImage
name|image
init|=
name|QImage
argument_list|(
operator|(
name|uchar
operator|*
operator|)
name|q_frameBuffer
argument_list|()
argument_list|,
name|q_screenWidth
argument_list|()
argument_list|,
name|q_screenHeight
argument_list|()
argument_list|,
name|q_screenWidth
argument_list|()
operator|*
name|q_screenDepth
argument_list|()
operator|/
literal|8
argument_list|,
name|QImage
operator|::
name|Format_RGB16
argument_list|)
decl_stmt|;
name|image
operator|.
name|save
argument_list|(
name|filename
argument_list|,
literal|"PNG"
argument_list|)
expr_stmt|;
name|q_unlock
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testMainWindowAndMenuBar
name|void
name|tst_WindowsMobile
operator|::
name|testMainWindowAndMenuBar
parameter_list|()
block|{
if|if
condition|(
name|qt_wince_is_smartphone
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"This test is only for Windows Mobile"
argument_list|)
expr_stmt|;
name|QProcess
name|process
decl_stmt|;
name|process
operator|.
name|start
argument_list|(
literal|"testQMenuBar.exe"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|state
argument_list|()
argument_list|,
name|QProcess
operator|::
name|Running
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|6000
argument_list|)
expr_stmt|;
name|openMenu
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|takeScreenShot
argument_list|(
literal|"testQMenuBar_current.png"
argument_list|)
expr_stmt|;
name|process
operator|.
name|close
argument_list|()
expr_stmt|;
name|compareScreenshots
argument_list|(
literal|"testQMenuBar_current.png"
argument_list|,
literal|":/testQMenuBar_current.png"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testSimpleWidget
name|void
name|tst_WindowsMobile
operator|::
name|testSimpleWidget
parameter_list|()
block|{
if|if
condition|(
name|qt_wince_is_smartphone
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"This test is only for Windows Mobile"
argument_list|)
expr_stmt|;
name|QMenuBar
name|menubar
decl_stmt|;
name|menubar
operator|.
name|show
argument_list|()
expr_stmt|;
name|QWidget
name|maximized
decl_stmt|;
name|QPalette
name|pal
init|=
name|maximized
operator|.
name|palette
argument_list|()
decl_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Background
argument_list|,
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|maximized
operator|.
name|setPalette
argument_list|(
name|pal
argument_list|)
expr_stmt|;
name|maximized
operator|.
name|showMaximized
argument_list|()
expr_stmt|;
name|QWidget
name|widget
decl_stmt|;
name|widget
operator|.
name|setGeometry
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|widget
operator|.
name|setWindowTitle
argument_list|(
literal|"Widget"
argument_list|)
expr_stmt|;
name|widget
operator|.
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|QWidget
name|widget2
decl_stmt|;
name|widget2
operator|.
name|setGeometry
argument_list|(
literal|100
argument_list|,
literal|380
argument_list|,
literal|300
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|widget2
operator|.
name|setWindowTitle
argument_list|(
literal|"Widget 2"
argument_list|)
expr_stmt|;
name|widget2
operator|.
name|setWindowFlags
argument_list|(
name|Qt
operator|::
name|Popup
argument_list|)
expr_stmt|;
name|widget2
operator|.
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|takeScreenShot
argument_list|(
literal|"testSimpleWidget_current.png"
argument_list|)
expr_stmt|;
name|compareScreenshots
argument_list|(
literal|"testSimpleWidget_current.png"
argument_list|,
literal|":/testSimpleWidget_current.png"
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//Q_OS_WINCE_WM
end_comment
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_WindowsMobile
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_windowsmobile.moc"
end_include
end_unit
