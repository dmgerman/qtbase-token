begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qstring.h>
end_include
begin_include
include|#
directive|include
file|<qtemporaryfile.h>
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<qset.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
end_if
begin_include
include|#
directive|include
file|<windows.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
end_if
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<sys/stat.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_comment
comment|// open(2)
end_comment
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_comment
comment|// close(2)
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
end_ifdef
begin_define
DECL|macro|SRCDIR
define|#
directive|define
name|SRCDIR
value|""
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//TESTED_CLASS=
end_comment
begin_comment
comment|//TESTED_FILES=
end_comment
begin_class
DECL|class|tst_QTemporaryFile
class|class
name|tst_QTemporaryFile
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QTemporaryFile
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QTemporaryFile
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|construction
parameter_list|()
function_decl|;
name|void
name|fileTemplate
parameter_list|()
function_decl|;
name|void
name|fileTemplate_data
parameter_list|()
function_decl|;
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|fileName
parameter_list|()
function_decl|;
name|void
name|fileNameIsEmpty
parameter_list|()
function_decl|;
name|void
name|autoRemove
parameter_list|()
function_decl|;
name|void
name|write
parameter_list|()
function_decl|;
name|void
name|openCloseOpenClose
parameter_list|()
function_decl|;
name|void
name|size
parameter_list|()
function_decl|;
name|void
name|resize
parameter_list|()
function_decl|;
name|void
name|openOnRootDrives
parameter_list|()
function_decl|;
name|void
name|stressTest
parameter_list|()
function_decl|;
name|void
name|rename
parameter_list|()
function_decl|;
name|void
name|renameFdLeak
parameter_list|()
function_decl|;
name|void
name|reOpenThroughQFile
parameter_list|()
function_decl|;
name|void
name|keepOpenMode
parameter_list|()
function_decl|;
name|void
name|resetTemplateAfterError
parameter_list|()
function_decl|;
name|void
name|setTemplateAfterOpen
parameter_list|()
function_decl|;
name|void
name|autoRemoveAfterFailedRename
parameter_list|()
function_decl|;
name|void
name|QTBUG_4796_data
parameter_list|()
function_decl|;
name|void
name|QTBUG_4796
parameter_list|()
function_decl|;
public|public:
block|}
class|;
end_class
begin_function
DECL|function|initTestCase
name|void
name|tst_QTemporaryFile
operator|::
name|initTestCase
parameter_list|()
block|{
comment|// For QTBUG_4796
name|QVERIFY
argument_list|(
name|QDir
argument_list|(
literal|"test-XXXXXX"
argument_list|)
operator|.
name|exists
argument_list|()
operator|||
name|QDir
argument_list|()
operator|.
name|mkdir
argument_list|(
literal|"test-XXXXXX"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QTemporaryFile
operator|::
name|cleanupTestCase
parameter_list|()
block|{
comment|// From QTBUG_4796
name|QVERIFY
argument_list|(
name|QDir
argument_list|()
operator|.
name|rmdir
argument_list|(
literal|"test-XXXXXX"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|construction
name|void
name|tst_QTemporaryFile
operator|::
name|construction
parameter_list|()
block|{
name|QTemporaryFile
name|file
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QString
name|tmp
init|=
name|QDir
operator|::
name|tempPath
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|fileTemplate
argument_list|()
operator|.
name|left
argument_list|(
name|tmp
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|fileTemplate
argument_list|()
operator|.
name|at
argument_list|(
name|tmp
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|QChar
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QTemporaryFile
operator|::
name|getSetCheck
parameter_list|()
block|{
name|QTemporaryFile
name|obj1
decl_stmt|;
comment|// bool QTemporaryFile::autoRemove()
comment|// void QTemporaryFile::setAutoRemove(bool)
name|obj1
operator|.
name|setAutoRemove
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|autoRemove
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setAutoRemove
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|autoRemove
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|tst_QTemporaryFile
name|tst_QTemporaryFile
operator|::
name|tst_QTemporaryFile
parameter_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~tst_QTemporaryFile
name|tst_QTemporaryFile
operator|::
name|~
name|tst_QTemporaryFile
parameter_list|()
block|{  }
end_destructor
begin_function
DECL|function|init
name|void
name|tst_QTemporaryFile
operator|::
name|init
parameter_list|()
block|{
comment|// TODO: Add initialization code here.
comment|// This will be executed immediately before each test is run.
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QTemporaryFile
operator|::
name|cleanup
parameter_list|()
block|{
comment|// TODO: Add cleanup code here.
comment|// This will be executed immediately after each test is run.
block|}
end_function
begin_function
DECL|function|fileTemplate_data
name|void
name|tst_QTemporaryFile
operator|::
name|fileTemplate_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"constructorTemplate"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"prefix"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"suffix"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fileTemplate"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"constructor default"
argument_list|)
operator|<<
literal|""
operator|<<
literal|"."
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"constructor with xxx sufix"
argument_list|)
operator|<<
literal|"qt_XXXXXXxxx"
operator|<<
literal|"qt_"
operator|<<
literal|"xxx"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"constructor with xXx sufix"
argument_list|)
operator|<<
literal|"qt_XXXXXXxXx"
operator|<<
literal|"qt_"
operator|<<
literal|"xXx"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"constructor with no sufix"
argument_list|)
operator|<<
literal|"qt_XXXXXX"
operator|<<
literal|"qt_"
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"constructor with>6 X's and xxx suffix"
argument_list|)
operator|<<
literal|"qt_XXXXXXXXXXxxx"
operator|<<
literal|"qt_"
operator|<<
literal|"xxx"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"constructor with>6 X's, no suffix"
argument_list|)
operator|<<
literal|"qt_XXXXXXXXXX"
operator|<<
literal|"qt_"
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"constructor with XXXX suffix"
argument_list|)
operator|<<
literal|"qt_XXXXXX_XXXX"
operator|<<
literal|"qt_"
operator|<<
literal|"_XXXX"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"constructor with XXXXX suffix"
argument_list|)
operator|<<
literal|"qt_XXXXXX_XXXXX"
operator|<<
literal|"qt_"
operator|<<
literal|"_XXXXX"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"constructor with XXXX prefix"
argument_list|)
operator|<<
literal|"qt_XXXX"
operator|<<
literal|"qt_XXXX."
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"constructor with XXXXX prefix"
argument_list|)
operator|<<
literal|"qt_XXXXX"
operator|<<
literal|"qt_XXXXX."
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"constructor with XXXX  prefix and suffix"
argument_list|)
operator|<<
literal|"qt_XXXX_XXXXXX_XXXX"
operator|<<
literal|"qt_XXXX_"
operator|<<
literal|"_XXXX"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"constructor with XXXXX prefix and suffix"
argument_list|)
operator|<<
literal|"qt_XXXXX_XXXXXX_XXXXX"
operator|<<
literal|"qt_XXXXX_"
operator|<<
literal|"_XXXXX"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"set template, no suffix"
argument_list|)
operator|<<
literal|""
operator|<<
literal|"foo"
operator|<<
literal|""
operator|<<
literal|"foo"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"set template, with lowercase XXXXXX"
argument_list|)
operator|<<
literal|""
operator|<<
literal|"qt_"
operator|<<
literal|"xxxxxx"
operator|<<
literal|"qt_XXXXXXxxxxxx"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"set template, with xxx"
argument_list|)
operator|<<
literal|""
operator|<<
literal|"qt_"
operator|<<
literal|".xxx"
operator|<<
literal|"qt_XXXXXX.xxx"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"set template, with>6 X's"
argument_list|)
operator|<<
literal|""
operator|<<
literal|"qt_"
operator|<<
literal|".xxx"
operator|<<
literal|"qt_XXXXXXXXXXXXXX.xxx"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"set template, with>6 X's, no suffix"
argument_list|)
operator|<<
literal|""
operator|<<
literal|"qt_"
operator|<<
literal|""
operator|<<
literal|"qt_XXXXXXXXXXXXXX"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fileTemplate
name|void
name|tst_QTemporaryFile
operator|::
name|fileTemplate
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|constructorTemplate
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|suffix
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileTemplate
argument_list|)
expr_stmt|;
name|QTemporaryFile
name|file
argument_list|(
name|constructorTemplate
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fileTemplate
operator|.
name|isEmpty
argument_list|()
condition|)
name|file
operator|.
name|setFileTemplate
argument_list|(
name|fileTemplate
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|open
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefix
operator|.
name|length
argument_list|()
condition|)
name|QCOMPARE
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
operator|.
name|left
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|suffix
operator|.
name|length
argument_list|()
condition|)
name|QCOMPARE
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
operator|.
name|right
argument_list|(
name|suffix
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|suffix
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     This tests whether the temporary file really gets placed in QDir::tempPath */
end_comment
begin_function
DECL|function|fileName
name|void
name|tst_QTemporaryFile
operator|::
name|fileName
parameter_list|()
block|{
comment|// Get QDir::tempPath and make an absolute path.
name|QString
name|tempPath
init|=
name|QDir
operator|::
name|tempPath
argument_list|()
decl_stmt|;
name|QString
name|absoluteTempPath
init|=
name|QDir
argument_list|(
name|tempPath
argument_list|)
operator|.
name|absolutePath
argument_list|()
decl_stmt|;
name|QTemporaryFile
name|file
decl_stmt|;
name|file
operator|.
name|setAutoRemove
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|file
operator|.
name|open
argument_list|()
expr_stmt|;
name|QString
name|fileName
init|=
name|file
operator|.
name|fileName
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|exists
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get path to the temp file, whithout the file name.
name|QString
name|absoluteFilePath
init|=
name|QFileInfo
argument_list|(
name|fileName
argument_list|)
operator|.
name|absolutePath
argument_list|()
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
name|absoluteFilePath
operator|=
name|absoluteFilePath
operator|.
name|toLower
argument_list|()
expr_stmt|;
name|absoluteTempPath
operator|=
name|absoluteTempPath
operator|.
name|toLower
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|absoluteFilePath
argument_list|,
name|absoluteTempPath
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fileNameIsEmpty
name|void
name|tst_QTemporaryFile
operator|::
name|fileNameIsEmpty
parameter_list|()
block|{
name|QString
name|filename
decl_stmt|;
block|{
name|QTemporaryFile
name|file
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|fileName
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|filename
operator|=
name|file
operator|.
name|fileName
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|exists
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|exists
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|fileName
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|autoRemove
name|void
name|tst_QTemporaryFile
operator|::
name|autoRemove
parameter_list|()
block|{
comment|// Test auto remove
name|QString
name|fileName
decl_stmt|;
block|{
name|QTemporaryFile
name|file
argument_list|(
literal|"tempXXXXXX"
argument_list|)
decl_stmt|;
name|file
operator|.
name|setAutoRemove
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|()
argument_list|)
expr_stmt|;
name|fileName
operator|=
name|file
operator|.
name|fileName
argument_list|()
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test if disabling auto remove works.
block|{
name|QTemporaryFile
name|file
argument_list|(
literal|"tempXXXXXX"
argument_list|)
decl_stmt|;
name|file
operator|.
name|setAutoRemove
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|()
argument_list|)
expr_stmt|;
name|fileName
operator|=
name|file
operator|.
name|fileName
argument_list|()
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|exists
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|remove
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Do not explicitly call setAutoRemove (tests if it really is the default as documented)
block|{
name|QTemporaryFile
name|file
argument_list|(
literal|"tempXXXXXX"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|()
argument_list|)
expr_stmt|;
name|fileName
operator|=
name|file
operator|.
name|fileName
argument_list|()
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|write
name|void
name|tst_QTemporaryFile
operator|::
name|write
parameter_list|()
block|{
name|QByteArray
name|data
argument_list|(
literal|"OLE\nOLE\nOLE"
argument_list|)
decl_stmt|;
name|QTemporaryFile
name|file
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|file
operator|.
name|write
argument_list|(
name|data
argument_list|)
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|.
name|reset
argument_list|()
expr_stmt|;
name|QFile
name|compare
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
argument_list|)
decl_stmt|;
name|compare
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|compare
operator|.
name|readAll
argument_list|()
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|openCloseOpenClose
name|void
name|tst_QTemporaryFile
operator|::
name|openCloseOpenClose
parameter_list|()
block|{
name|QString
name|fileName
decl_stmt|;
block|{
comment|// Create a temp file
name|QTemporaryFile
name|file
argument_list|(
literal|"tempXXXXXX"
argument_list|)
decl_stmt|;
name|file
operator|.
name|setAutoRemove
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|.
name|write
argument_list|(
literal|"OLE"
argument_list|)
expr_stmt|;
name|fileName
operator|=
name|file
operator|.
name|fileName
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|exists
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Check that it still exists after being closed
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|exists
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|readAll
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"OLE"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that it's still the same file after being opened again.
name|QCOMPARE
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|size
name|void
name|tst_QTemporaryFile
operator|::
name|size
parameter_list|()
block|{
name|QTemporaryFile
name|file
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|isSequential
argument_list|()
argument_list|)
expr_stmt|;
name|QByteArray
name|str
argument_list|(
literal|"foobar"
argument_list|)
decl_stmt|;
name|file
operator|.
name|write
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|exists
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// On CE it takes more time for the filesystem to update
comment|// the information. Usually you have to close it or seek
comment|// to get latest information. flush() does not help either.
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|file
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resize
name|void
name|tst_QTemporaryFile
operator|::
name|resize
parameter_list|()
block|{
name|QTemporaryFile
name|file
decl_stmt|;
name|file
operator|.
name|setAutoRemove
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|resize
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFileInfo
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|openOnRootDrives
name|void
name|tst_QTemporaryFile
operator|::
name|openOnRootDrives
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|unsigned
name|int
name|lastErrorMode
init|=
name|SetErrorMode
argument_list|(
name|SEM_FAILCRITICALERRORS
argument_list|)
decl_stmt|;
endif|#
directive|endif
comment|// If it's possible to create a file in the root directory, it
comment|// must be possible to create a temp file there too.
foreach|foreach
control|(
name|QFileInfo
name|driveInfo
decl|,
name|QDir
operator|::
name|drives
argument_list|()
control|)
block|{
name|QFile
name|testFile
argument_list|(
name|driveInfo
operator|.
name|filePath
argument_list|()
operator|+
literal|"XXXXXX.txt"
argument_list|)
decl_stmt|;
if|if
condition|(
name|testFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
condition|)
block|{
name|testFile
operator|.
name|remove
argument_list|()
expr_stmt|;
name|QTemporaryFile
name|file
argument_list|(
name|driveInfo
operator|.
name|filePath
argument_list|()
operator|+
literal|"XXXXXX.txt"
argument_list|)
decl_stmt|;
name|file
operator|.
name|setAutoRemove
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|SetErrorMode
argument_list|(
name|lastErrorMode
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|stressTest
name|void
name|tst_QTemporaryFile
operator|::
name|stressTest
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
comment|// 200 is still ok, first colision happens after ~30
specifier|const
name|int
name|iterations
init|=
literal|200
decl_stmt|;
else|#
directive|else
specifier|const
name|int
name|iterations
init|=
literal|1000
decl_stmt|;
endif|#
directive|endif
name|QSet
argument_list|<
name|QString
argument_list|>
name|names
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
operator|++
name|i
control|)
block|{
name|QTemporaryFile
name|file
decl_stmt|;
name|file
operator|.
name|setAutoRemove
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|file
operator|.
name|open
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|file
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|names
operator|.
name|contains
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|names
operator|.
name|insert
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|QSet
argument_list|<
name|QString
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|names
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|names
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QFile
operator|::
name|remove
argument_list|(
operator|*
name|it
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rename
name|void
name|tst_QTemporaryFile
operator|::
name|rename
parameter_list|()
block|{
comment|// This test checks that the temporary file is deleted, even after a
comment|// rename.
name|QDir
name|dir
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|dir
operator|.
name|exists
argument_list|(
literal|"temporary-file.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|tempname
decl_stmt|;
block|{
name|QTemporaryFile
name|file
argument_list|(
name|dir
operator|.
name|filePath
argument_list|(
literal|"temporary-file.XXXXXX"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|()
argument_list|)
expr_stmt|;
name|tempname
operator|=
name|file
operator|.
name|fileName
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|dir
operator|.
name|exists
argument_list|(
name|tempname
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|rename
argument_list|(
literal|"temporary-file.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|dir
operator|.
name|exists
argument_list|(
name|tempname
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|dir
operator|.
name|exists
argument_list|(
literal|"temporary-file.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"temporary-file.txt"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|dir
operator|.
name|exists
argument_list|(
name|tempname
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|dir
operator|.
name|exists
argument_list|(
literal|"temporary-file.txt"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|renameFdLeak
name|void
name|tst_QTemporaryFile
operator|::
name|renameFdLeak
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_UNIX
comment|// Test this on Unix only
comment|// Open a bunch of files to force the fd count to go up
specifier|static
specifier|const
name|int
name|count
init|=
literal|10
decl_stmt|;
name|int
name|bunch_of_files
index|[
name|count
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|bunch_of_files
index|[
name|i
index|]
operator|=
operator|::
name|open
argument_list|(
name|SRCDIR
literal|"tst_qtemporaryfile.cpp"
argument_list|,
name|O_RDONLY
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|bunch_of_files
index|[
name|i
index|]
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|int
name|fd
decl_stmt|;
block|{
name|QTemporaryFile
name|file
decl_stmt|;
name|file
operator|.
name|setAutoRemove
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|()
argument_list|)
expr_stmt|;
comment|// close the bunch of files
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
operator|::
name|close
argument_list|(
name|bunch_of_files
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|// save the file descriptor for later
name|fd
operator|=
name|file
operator|.
name|handle
argument_list|()
expr_stmt|;
comment|// rename the file to something
name|QString
name|newPath
init|=
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
literal|"/tst_qtemporaryfile-renameFdLeak-"
operator|+
name|QString
operator|::
name|number
argument_list|(
name|getpid
argument_list|()
argument_list|)
decl_stmt|;
name|file
operator|.
name|rename
argument_list|(
name|newPath
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|newPath
argument_list|)
expr_stmt|;
block|}
comment|// check if QTemporaryFile closed the file
name|QVERIFY
argument_list|(
operator|::
name|close
argument_list|(
name|fd
argument_list|)
operator|==
operator|-
literal|1
operator|&&
name|errno
operator|==
name|EBADF
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|reOpenThroughQFile
name|void
name|tst_QTemporaryFile
operator|::
name|reOpenThroughQFile
parameter_list|()
block|{
name|QByteArray
name|data
argument_list|(
literal|"abcdefghij"
argument_list|)
decl_stmt|;
name|QTemporaryFile
name|file
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
operator|(
name|QFile
operator|&
operator|)
name|file
operator|)
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|write
argument_list|(
name|data
argument_list|)
argument_list|,
operator|(
name|qint64
operator|)
name|data
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|readAll
argument_list|()
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|keepOpenMode
name|void
name|tst_QTemporaryFile
operator|::
name|keepOpenMode
parameter_list|()
block|{
name|QByteArray
name|data
argument_list|(
literal|"abcdefghij"
argument_list|)
decl_stmt|;
block|{
name|QTemporaryFile
name|file
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
operator|(
name|QFile
operator|&
operator|)
name|file
operator|)
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator|==
name|file
operator|.
name|openMode
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|write
argument_list|(
name|data
argument_list|)
argument_list|,
operator|(
name|qint64
operator|)
name|data
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
operator|(
name|QFile
operator|&
operator|)
name|file
operator|)
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator|==
name|file
operator|.
name|openMode
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|readAll
argument_list|()
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|{
name|QTemporaryFile
name|file
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|write
argument_list|(
name|data
argument_list|)
argument_list|,
operator|(
name|qint64
operator|)
name|data
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|rename
argument_list|(
literal|"temporary-file.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
operator|(
name|QFile
operator|&
operator|)
name|file
operator|)
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator|==
name|file
operator|.
name|openMode
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|readAll
argument_list|()
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
operator|(
name|QFile
operator|&
operator|)
name|file
operator|)
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator|==
name|file
operator|.
name|openMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|resetTemplateAfterError
name|void
name|tst_QTemporaryFile
operator|::
name|resetTemplateAfterError
parameter_list|()
block|{
comment|// calling setFileTemplate on a failed open
name|QString
name|tempPath
init|=
name|QDir
operator|::
name|tempPath
argument_list|()
decl_stmt|;
name|QString
specifier|const
name|fileTemplate
argument_list|(
literal|"destination/qt_temp_file_test.XXXXXX"
argument_list|)
decl_stmt|;
name|QString
specifier|const
name|fileTemplate2
argument_list|(
name|tempPath
operator|+
literal|"/qt_temp_file_test.XXXXXX"
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|QDir
argument_list|(
name|tempPath
argument_list|)
operator|.
name|exists
argument_list|()
operator|||
name|QDir
argument_list|()
operator|.
name|mkpath
argument_list|(
name|tempPath
argument_list|)
argument_list|,
literal|"Test precondition"
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
literal|"destination"
argument_list|)
argument_list|,
literal|"Test precondition"
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|fileTemplate2
argument_list|)
operator|||
name|QFile
operator|::
name|remove
argument_list|(
name|fileTemplate2
argument_list|)
argument_list|,
literal|"Test precondition"
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|fileTemplate2
argument_list|)
decl_stmt|;
name|QByteArray
name|fileContent
argument_list|(
literal|"This file is intentionally NOT left empty."
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
operator||
name|QIODevice
operator|::
name|Truncate
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|write
argument_list|(
name|fileContent
argument_list|)
argument_list|,
operator|(
name|qint64
operator|)
name|fileContent
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|flush
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|fileName
decl_stmt|;
block|{
name|QTemporaryFile
name|temp
decl_stmt|;
name|QVERIFY
argument_list|(
name|temp
operator|.
name|fileName
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|temp
operator|.
name|fileTemplate
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|temp
operator|.
name|setFileTemplate
argument_list|(
name|fileTemplate
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|temp
operator|.
name|fileName
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|temp
operator|.
name|fileTemplate
argument_list|()
argument_list|,
name|fileTemplate
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|temp
operator|.
name|open
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|temp
operator|.
name|fileName
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|temp
operator|.
name|fileTemplate
argument_list|()
argument_list|,
name|fileTemplate
argument_list|)
expr_stmt|;
name|temp
operator|.
name|setFileTemplate
argument_list|(
name|fileTemplate2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|temp
operator|.
name|open
argument_list|()
argument_list|)
expr_stmt|;
name|fileName
operator|=
name|temp
operator|.
name|fileName
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|exists
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|fileName
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|fileName
operator|!=
name|fileTemplate2
argument_list|,
operator|(
literal|"Generated name shouldn't be same as template: "
operator|+
name|fileTemplate2
operator|)
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
name|file
operator|.
name|readAll
argument_list|()
argument_list|)
argument_list|,
name|QString
argument_list|(
name|fileContent
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|remove
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setTemplateAfterOpen
name|void
name|tst_QTemporaryFile
operator|::
name|setTemplateAfterOpen
parameter_list|()
block|{
name|QTemporaryFile
name|temp
decl_stmt|;
name|QVERIFY
argument_list|(
name|temp
operator|.
name|fileName
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|temp
operator|.
name|fileTemplate
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|temp
operator|.
name|open
argument_list|()
argument_list|)
expr_stmt|;
name|QString
specifier|const
name|fileName
init|=
name|temp
operator|.
name|fileName
argument_list|()
decl_stmt|;
name|QString
specifier|const
name|newTemplate
argument_list|(
literal|"funny-path/funny-name-XXXXXX.tmp"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|fileName
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|exists
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|temp
operator|.
name|fileTemplate
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|temp
operator|.
name|fileTemplate
argument_list|()
operator|!=
name|newTemplate
argument_list|)
expr_stmt|;
name|temp
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// QTemporaryFile::setFileTemplate will assert on isOpen() up to 4.5.2
name|temp
operator|.
name|setFileTemplate
argument_list|(
name|newTemplate
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|temp
operator|.
name|fileTemplate
argument_list|()
argument_list|,
name|newTemplate
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|temp
operator|.
name|open
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|temp
operator|.
name|fileName
argument_list|()
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|temp
operator|.
name|fileTemplate
argument_list|()
argument_list|,
name|newTemplate
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|autoRemoveAfterFailedRename
name|void
name|tst_QTemporaryFile
operator|::
name|autoRemoveAfterFailedRename
parameter_list|()
block|{
struct|struct
name|CleanOnReturn
block|{
name|~
name|CleanOnReturn
parameter_list|()
block|{
if|if
condition|(
operator|!
name|tempName
operator|.
name|isEmpty
argument_list|()
condition|)
name|QFile
operator|::
name|remove
argument_list|(
name|tempName
argument_list|)
expr_stmt|;
block|}
name|void
name|reset
parameter_list|()
block|{
name|tempName
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|QString
name|tempName
decl_stmt|;
block|}
struct|;
name|CleanOnReturn
name|cleaner
decl_stmt|;
block|{
name|QTemporaryFile
name|file
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|()
argument_list|)
expr_stmt|;
name|cleaner
operator|.
name|tempName
operator|=
name|file
operator|.
name|fileName
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|exists
argument_list|(
name|cleaner
operator|.
name|tempName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QFileInfo
argument_list|(
literal|"i-do-not-exist"
argument_list|)
operator|.
name|isDir
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|rename
argument_list|(
literal|"i-do-not-exist/file.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|exists
argument_list|(
name|cleaner
operator|.
name|tempName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|cleaner
operator|.
name|tempName
argument_list|)
argument_list|)
expr_stmt|;
name|cleaner
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|QTBUG_4796_data
name|void
name|tst_QTemporaryFile
operator|::
name|QTBUG_4796_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"prefix"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"suffix"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"openResult"
argument_list|)
expr_stmt|;
name|QString
name|unicode
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xc3\xa5\xc3\xa6\xc3\xb8"
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"<empty>"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"blaXXXXXX"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bla"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"XXXXXXbla"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"bla"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"does-not-exist/qt_temp.XXXXXX"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"does-not-exist/qt_temp"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"XXXXXX<unicode>"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|unicode
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"<unicode>XXXXXX"
argument_list|)
operator|<<
name|unicode
operator|<<
name|QString
argument_list|()
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"<unicode>XXXXXX<unicode>"
argument_list|)
operator|<<
name|unicode
operator|<<
name|unicode
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|QTBUG_4796
name|void
name|tst_QTemporaryFile
operator|::
name|QTBUG_4796
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QDir
argument_list|(
literal|"test-XXXXXX"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
struct|struct
name|CleanOnReturn
block|{
name|~
name|CleanOnReturn
parameter_list|()
block|{
name|Q_FOREACH
argument_list|(
argument|QString tempName
argument_list|,
argument|tempNames
argument_list|)
name|QFile
operator|::
name|remove
argument_list|(
name|tempName
argument_list|)
expr_stmt|;
block|}
name|void
name|reset
parameter_list|()
block|{
name|tempNames
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|QStringList
name|tempNames
decl_stmt|;
block|}
struct|;
name|CleanOnReturn
name|cleaner
decl_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|suffix
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|openResult
argument_list|)
expr_stmt|;
block|{
name|QString
name|fileTemplate1
init|=
name|prefix
operator|+
name|QString
argument_list|(
literal|"XX"
argument_list|)
operator|+
name|suffix
decl_stmt|;
name|QString
name|fileTemplate2
init|=
name|prefix
operator|+
name|QString
argument_list|(
literal|"XXXX"
argument_list|)
operator|+
name|suffix
decl_stmt|;
name|QString
name|fileTemplate3
init|=
name|prefix
operator|+
name|QString
argument_list|(
literal|"XXXXXX"
argument_list|)
operator|+
name|suffix
decl_stmt|;
name|QString
name|fileTemplate4
init|=
name|prefix
operator|+
name|QString
argument_list|(
literal|"XXXXXXXX"
argument_list|)
operator|+
name|suffix
decl_stmt|;
name|QTemporaryFile
name|file1
argument_list|(
name|fileTemplate1
argument_list|)
decl_stmt|;
name|QTemporaryFile
name|file2
argument_list|(
name|fileTemplate2
argument_list|)
decl_stmt|;
name|QTemporaryFile
name|file3
argument_list|(
name|fileTemplate3
argument_list|)
decl_stmt|;
name|QTemporaryFile
name|file4
argument_list|(
name|fileTemplate4
argument_list|)
decl_stmt|;
name|QTemporaryFile
name|file5
argument_list|(
literal|"test-XXXXXX/"
operator|+
name|fileTemplate1
argument_list|)
decl_stmt|;
name|QTemporaryFile
name|file6
argument_list|(
literal|"test-XXXXXX/"
operator|+
name|fileTemplate3
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|file1
operator|.
name|open
argument_list|()
argument_list|,
name|openResult
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file2
operator|.
name|open
argument_list|()
argument_list|,
name|openResult
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file3
operator|.
name|open
argument_list|()
argument_list|,
name|openResult
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file4
operator|.
name|open
argument_list|()
argument_list|,
name|openResult
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file5
operator|.
name|open
argument_list|()
argument_list|,
name|openResult
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file6
operator|.
name|open
argument_list|()
argument_list|,
name|openResult
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file1
operator|.
name|exists
argument_list|()
argument_list|,
name|openResult
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file2
operator|.
name|exists
argument_list|()
argument_list|,
name|openResult
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file3
operator|.
name|exists
argument_list|()
argument_list|,
name|openResult
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file4
operator|.
name|exists
argument_list|()
argument_list|,
name|openResult
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file5
operator|.
name|exists
argument_list|()
argument_list|,
name|openResult
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file6
operator|.
name|exists
argument_list|()
argument_list|,
name|openResult
argument_list|)
expr_stmt|;
comment|// make sure the file exists under the *correct* name
if|if
condition|(
name|openResult
condition|)
block|{
name|cleaner
operator|.
name|tempNames
operator|<<
name|file1
operator|.
name|fileName
argument_list|()
operator|<<
name|file2
operator|.
name|fileName
argument_list|()
operator|<<
name|file3
operator|.
name|fileName
argument_list|()
operator|<<
name|file4
operator|.
name|fileName
argument_list|()
operator|<<
name|file5
operator|.
name|fileName
argument_list|()
operator|<<
name|file6
operator|.
name|fileName
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|file1
operator|.
name|fileName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|fileTemplate1
operator|+
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file2
operator|.
name|fileName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|fileTemplate2
operator|+
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file5
operator|.
name|fileName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"test-XXXXXX/"
operator|+
name|fileTemplate1
operator|+
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file6
operator|.
name|fileName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"test-XXXXXX/"
operator|+
name|prefix
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|prefix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
name|file3
operator|.
name|fileName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file4
operator|.
name|fileName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|suffix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
name|file3
operator|.
name|fileName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|suffix
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file4
operator|.
name|fileName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|suffix
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file6
operator|.
name|fileName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|suffix
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Q_FOREACH
argument_list|(
argument|QString const&tempName
argument_list|,
argument|cleaner.tempNames
argument_list|)
name|QVERIFY
argument_list|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|tempName
argument_list|)
argument_list|)
expr_stmt|;
name|cleaner
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QTemporaryFile
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qtemporaryfile.moc"
end_include
end_unit
