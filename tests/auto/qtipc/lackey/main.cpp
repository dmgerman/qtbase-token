begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qscriptengine.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QFile>
end_include
begin_include
include|#
directive|include
file|<QtCore/QTextStream>
end_include
begin_include
include|#
directive|include
file|<QTest>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<qsharedmemory.h>
end_include
begin_include
include|#
directive|include
file|<qsystemsemaphore.h>
end_include
begin_include
include|#
directive|include
file|<qsystemlock.h>
end_include
begin_class
DECL|class|ScriptSystemSemaphore
class|class
name|ScriptSystemSemaphore
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|ScriptSystemSemaphore
name|ScriptSystemSemaphore
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|ss
argument_list|(
name|QString
argument_list|()
argument_list|)
block|{     }
public|public
name|slots
public|:
DECL|function|acquire
name|bool
name|acquire
parameter_list|()
block|{
return|return
name|ss
operator|.
name|acquire
argument_list|()
return|;
block|}
empty_stmt|;
DECL|function|release
name|bool
name|release
parameter_list|(
name|int
name|n
init|=
literal|1
parameter_list|)
block|{
return|return
name|ss
operator|.
name|release
argument_list|(
name|n
argument_list|)
return|;
block|}
empty_stmt|;
DECL|function|setKey
name|void
name|setKey
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
name|int
name|n
init|=
literal|0
parameter_list|)
block|{
name|ss
operator|.
name|setKey
argument_list|(
name|key
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
DECL|function|key
name|QString
name|key
parameter_list|()
specifier|const
block|{
return|return
name|ss
operator|.
name|key
argument_list|()
return|;
block|}
private|private:
DECL|member|ss
name|QSystemSemaphore
name|ss
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|ScriptSystemLock
class|class
name|ScriptSystemLock
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
name|Q_PROPERTY
parameter_list|(
name|QString
name|key
name|WRITE
name|setKey
name|READ
name|key
parameter_list|)
specifier|public
private|:
DECL|function|ScriptSystemLock
name|ScriptSystemLock
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|sl
argument_list|(
name|QString
argument_list|()
argument_list|)
block|{     }
public|public
name|slots
public|:
DECL|function|lockReadOnly
name|bool
name|lockReadOnly
parameter_list|()
block|{
return|return
name|sl
operator|.
name|lock
argument_list|(
name|QSystemLock
operator|::
name|ReadOnly
argument_list|)
return|;
block|}
DECL|function|lock
name|bool
name|lock
parameter_list|()
block|{
return|return
name|sl
operator|.
name|lock
argument_list|()
return|;
block|}
empty_stmt|;
DECL|function|unlock
name|bool
name|unlock
parameter_list|()
block|{
return|return
name|sl
operator|.
name|unlock
argument_list|()
return|;
block|}
empty_stmt|;
DECL|function|setKey
name|void
name|setKey
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|)
block|{
name|sl
operator|.
name|setKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
DECL|function|key
name|QString
name|key
parameter_list|()
specifier|const
block|{
return|return
name|sl
operator|.
name|key
argument_list|()
return|;
block|}
private|private:
DECL|member|sl
name|QSystemLock
name|sl
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|ScriptSharedMemory
class|class
name|ScriptSharedMemory
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
name|Q_PROPERTY
argument_list|(
name|bool
name|attached
name|READ
name|isAttached
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QString
name|key
name|WRITE
name|setKey
name|READ
name|key
argument_list|)
decl|public
range|:     enum
DECL|enum|SharedMemoryError
name|SharedMemoryError
block|{
DECL|enumerator|NoError
name|NoError
operator|=
literal|0
block|,
DECL|enumerator|PermissionDenied
name|PermissionDenied
operator|=
literal|1
block|,
DECL|enumerator|InvalidSize
name|InvalidSize
operator|=
literal|2
block|,
DECL|enumerator|KeyError
name|KeyError
operator|=
literal|3
block|,
DECL|enumerator|AlreadyExists
name|AlreadyExists
operator|=
literal|4
block|,
DECL|enumerator|NotFound
name|NotFound
operator|=
literal|5
block|,
DECL|enumerator|LockError
name|LockError
operator|=
literal|6
block|,
DECL|enumerator|OutOfResources
name|OutOfResources
operator|=
literal|7
block|,
DECL|enumerator|UnknownError
name|UnknownError
operator|=
literal|8
block|}
decl_stmt|;
DECL|function|ScriptSharedMemory
name|ScriptSharedMemory
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|{     }
public|public
name|slots
public|:
DECL|function|sleep
name|void
name|sleep
parameter_list|(
name|int
name|x
parameter_list|)
specifier|const
block|{
name|QTest
operator|::
name|qSleep
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
DECL|function|create
name|bool
name|create
parameter_list|(
name|int
name|size
parameter_list|)
block|{
return|return
name|sm
operator|.
name|create
argument_list|(
name|size
argument_list|)
return|;
block|}
empty_stmt|;
DECL|function|createReadOnly
name|bool
name|createReadOnly
parameter_list|(
name|int
name|size
parameter_list|)
block|{
return|return
name|sm
operator|.
name|create
argument_list|(
name|size
argument_list|,
name|QSharedMemory
operator|::
name|ReadOnly
argument_list|)
return|;
block|}
empty_stmt|;
DECL|function|size
name|int
name|size
parameter_list|()
specifier|const
block|{
return|return
name|sm
operator|.
name|size
argument_list|()
return|;
block|}
empty_stmt|;
DECL|function|attach
name|bool
name|attach
parameter_list|()
block|{
return|return
name|sm
operator|.
name|attach
argument_list|()
return|;
block|}
empty_stmt|;
DECL|function|attachReadOnly
name|bool
name|attachReadOnly
parameter_list|()
block|{
return|return
name|sm
operator|.
name|attach
argument_list|(
name|QSharedMemory
operator|::
name|ReadOnly
argument_list|)
return|;
block|}
empty_stmt|;
DECL|function|isAttached
name|bool
name|isAttached
parameter_list|()
specifier|const
block|{
return|return
name|sm
operator|.
name|isAttached
argument_list|()
return|;
block|}
empty_stmt|;
DECL|function|detach
name|bool
name|detach
parameter_list|()
block|{
return|return
name|sm
operator|.
name|detach
argument_list|()
return|;
block|}
empty_stmt|;
DECL|function|error
name|int
name|error
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|int
operator|)
name|sm
operator|.
name|error
argument_list|()
return|;
block|}
empty_stmt|;
DECL|function|errorString
name|QString
name|errorString
parameter_list|()
specifier|const
block|{
return|return
name|sm
operator|.
name|errorString
argument_list|()
return|;
block|}
empty_stmt|;
DECL|function|set
name|void
name|set
parameter_list|(
name|int
name|i
parameter_list|,
name|QChar
name|value
parameter_list|)
block|{
operator|(
operator|(
name|char
operator|*
operator|)
name|sm
operator|.
name|data
argument_list|()
operator|)
index|[
name|i
index|]
operator|=
name|value
operator|.
name|toLatin1
argument_list|()
expr_stmt|;
block|}
DECL|function|get
name|QString
name|get
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|QChar
operator|::
name|fromLatin1
argument_list|(
operator|(
operator|(
name|char
operator|*
operator|)
name|sm
operator|.
name|data
argument_list|()
operator|)
index|[
name|i
index|]
argument_list|)
return|;
block|}
DECL|function|data
name|char
modifier|*
name|data
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|char
operator|*
operator|)
name|sm
operator|.
name|data
argument_list|()
return|;
block|}
empty_stmt|;
DECL|function|setKey
name|void
name|setKey
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|)
block|{
name|sm
operator|.
name|setKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
DECL|function|key
name|QString
name|key
parameter_list|()
specifier|const
block|{
return|return
name|sm
operator|.
name|key
argument_list|()
return|;
block|}
DECL|function|lock
name|bool
name|lock
parameter_list|()
block|{
return|return
name|sm
operator|.
name|lock
argument_list|()
return|;
block|}
DECL|function|unlock
name|bool
name|unlock
parameter_list|()
block|{
return|return
name|sm
operator|.
name|unlock
argument_list|()
return|;
block|}
private|private:
DECL|member|sm
name|QSharedMemory
name|sm
decl_stmt|;
block|}
class|;
end_class
begin_function_decl
name|QT_BEGIN_NAMESPACE
name|Q_SCRIPT_DECLARE_QMETAOBJECT
parameter_list|(
name|ScriptSharedMemory
parameter_list|,
name|QObject
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|Q_SCRIPT_DECLARE_QMETAOBJECT
argument_list|(
name|ScriptSystemLock
argument_list|,
name|QObject
operator|*
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_SCRIPT_DECLARE_QMETAOBJECT
argument_list|(
name|ScriptSystemSemaphore
argument_list|,
name|QObject
operator|*
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
name|QT_END_NAMESPACE
DECL|function|interactive
specifier|static
name|void
name|interactive
parameter_list|(
name|QScriptEngine
modifier|&
name|eng
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Interactive mode not supported on Windows CE\n"
argument_list|)
expr_stmt|;
return|return;
endif|#
directive|endif
name|QTextStream
name|qin
argument_list|(
name|stdin
argument_list|,
name|QFile
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
specifier|const
name|char
modifier|*
name|qscript_prompt
init|=
literal|"qs> "
decl_stmt|;
specifier|const
name|char
modifier|*
name|dot_prompt
init|=
literal|".... "
decl_stmt|;
specifier|const
name|char
modifier|*
name|prompt
init|=
name|qscript_prompt
decl_stmt|;
name|QString
name|code
decl_stmt|;
forever|forever
block|{
name|QString
name|line
decl_stmt|;
name|printf
argument_list|(
literal|"%s"
argument_list|,
name|prompt
argument_list|)
expr_stmt|;
name|fflush
argument_list|(
name|stdout
argument_list|)
expr_stmt|;
name|line
operator|=
name|qin
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|isNull
argument_list|()
condition|)
break|break;
name|code
operator|+=
name|line
expr_stmt|;
name|code
operator|+=
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|trimmed
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
operator|!
name|eng
operator|.
name|canEvaluate
argument_list|(
name|code
argument_list|)
condition|)
block|{
name|prompt
operator|=
name|dot_prompt
expr_stmt|;
block|}
else|else
block|{
name|QScriptValue
name|result
init|=
name|eng
operator|.
name|evaluate
argument_list|(
name|code
argument_list|)
decl_stmt|;
name|code
operator|.
name|clear
argument_list|()
expr_stmt|;
name|prompt
operator|=
name|qscript_prompt
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isUndefined
argument_list|()
condition|)
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"%s\n"
argument_list|,
name|qPrintable
argument_list|(
name|result
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
name|QCoreApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QScriptEngine
name|eng
decl_stmt|;
name|QScriptValue
name|globalObject
init|=
name|eng
operator|.
name|globalObject
argument_list|()
decl_stmt|;
name|QScriptValue
name|sm
init|=
name|qScriptValueFromQMetaObject
argument_list|<
name|ScriptSharedMemory
argument_list|>
argument_list|(
operator|&
name|eng
argument_list|)
decl_stmt|;
name|eng
operator|.
name|globalObject
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ScriptSharedMemory"
argument_list|,
name|sm
argument_list|)
expr_stmt|;
name|QScriptValue
name|sl
init|=
name|qScriptValueFromQMetaObject
argument_list|<
name|ScriptSystemLock
argument_list|>
argument_list|(
operator|&
name|eng
argument_list|)
decl_stmt|;
name|eng
operator|.
name|globalObject
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ScriptSystemLock"
argument_list|,
name|sl
argument_list|)
expr_stmt|;
name|QScriptValue
name|ss
init|=
name|qScriptValueFromQMetaObject
argument_list|<
name|ScriptSystemSemaphore
argument_list|>
argument_list|(
operator|&
name|eng
argument_list|)
decl_stmt|;
name|eng
operator|.
name|globalObject
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ScriptSystemSemaphore"
argument_list|,
name|ss
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|*
operator|++
name|argv
condition|)
block|{
name|interactive
argument_list|(
name|eng
argument_list|)
expr_stmt|;
return|return
name|EXIT_SUCCESS
return|;
block|}
name|QStringList
name|arguments
init|=
name|app
operator|.
name|arguments
argument_list|()
decl_stmt|;
name|arguments
operator|.
name|takeFirst
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|arguments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|fn
init|=
name|arguments
operator|.
name|takeFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|fn
operator|==
name|QLatin1String
argument_list|(
literal|"-i"
argument_list|)
condition|)
block|{
name|interactive
argument_list|(
name|eng
argument_list|)
expr_stmt|;
break|break;
block|}
name|QString
name|contents
decl_stmt|;
if|if
condition|(
name|fn
operator|==
name|QLatin1String
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|QTextStream
name|stream
argument_list|(
name|stdin
argument_list|,
name|QFile
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|contents
operator|=
name|stream
operator|.
name|readAll
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QFile
name|file
argument_list|(
name|fn
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"%s doesn't exists\n"
argument_list|,
name|qPrintable
argument_list|(
name|fn
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EXIT_FAILURE
return|;
block|}
if|if
condition|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|QTextStream
name|stream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|contents
operator|=
name|stream
operator|.
name|readAll
argument_list|()
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|contents
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|contents
index|[
literal|0
index|]
operator|==
literal|'#'
condition|)
block|{
name|contents
operator|.
name|prepend
argument_list|(
literal|"//"
argument_list|)
expr_stmt|;
name|QScriptValue
name|args
init|=
name|eng
operator|.
name|newArray
argument_list|()
decl_stmt|;
name|args
operator|.
name|setProperty
argument_list|(
literal|"0"
argument_list|,
name|QScriptValue
argument_list|(
operator|&
name|eng
argument_list|,
name|fn
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
while|while
condition|(
operator|!
name|arguments
operator|.
name|isEmpty
argument_list|()
condition|)
name|args
operator|.
name|setProperty
argument_list|(
name|i
operator|++
argument_list|,
name|QScriptValue
argument_list|(
operator|&
name|eng
argument_list|,
name|arguments
operator|.
name|takeFirst
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|eng
operator|.
name|currentContext
argument_list|()
operator|->
name|activationObject
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"args"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
name|QScriptValue
name|r
init|=
name|eng
operator|.
name|evaluate
argument_list|(
name|contents
argument_list|)
decl_stmt|;
if|if
condition|(
name|eng
operator|.
name|hasUncaughtException
argument_list|()
condition|)
block|{
name|int
name|line
init|=
name|eng
operator|.
name|uncaughtExceptionLineNumber
argument_list|()
decl_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"%d: %s\n\t%s\n\n"
argument_list|,
name|line
argument_list|,
name|qPrintable
argument_list|(
name|fn
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|r
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EXIT_FAILURE
return|;
block|}
if|if
condition|(
name|r
operator|.
name|isNumber
argument_list|()
condition|)
return|return
name|r
operator|.
name|toInt32
argument_list|()
return|;
block|}
return|return
name|EXIT_SUCCESS
return|;
block|}
end_function
begin_include
include|#
directive|include
file|"main.moc"
end_include
end_unit
