begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qsystemlock.h"
end_include
begin_include
include|#
directive|include
file|"qsystemlock_p.h"
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<QtCore>
end_include
begin_constructor
DECL|function|QSystemLockPrivate
name|QSystemLockPrivate
operator|::
name|QSystemLockPrivate
parameter_list|()
member_init_list|:
name|semaphore
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|semaphoreLock
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|lockCount
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|error
argument_list|(
name|QSystemLock
operator|::
name|NoError
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|setErrorString
name|void
name|QSystemLockPrivate
operator|::
name|setErrorString
parameter_list|(
specifier|const
name|QString
modifier|&
name|function
parameter_list|)
block|{
name|BOOL
name|windowsError
init|=
name|GetLastError
argument_list|()
decl_stmt|;
if|if
condition|(
name|windowsError
operator|==
literal|0
condition|)
return|return;
name|errorString
operator|=
name|function
operator|+
name|QLatin1String
argument_list|(
literal|": "
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"Unknown error"
argument_list|)
expr_stmt|;
name|error
operator|=
name|QSystemLock
operator|::
name|UnknownError
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
name|errorString
operator|<<
literal|"key"
operator|<<
name|key
operator|<<
operator|(
name|int
operator|)
name|windowsError
operator|<<
name|semaphore
operator|<<
name|semaphoreLock
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal      Setup the semaphore  */
end_comment
begin_function
DECL|function|handle
name|HANDLE
name|QSystemLockPrivate
operator|::
name|handle
parameter_list|()
block|{
comment|// don't allow making handles on empty keys
if|if
condition|(
name|key
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
comment|// Create it if it doesn't already exists.
if|if
condition|(
name|semaphore
operator|==
literal|0
condition|)
block|{
name|QString
name|safeName
init|=
name|makeKeyFileName
argument_list|()
decl_stmt|;
name|semaphore
operator|=
name|CreateSemaphore
argument_list|(
literal|0
argument_list|,
name|MAX_LOCKS
argument_list|,
name|MAX_LOCKS
argument_list|,
operator|(
name|wchar_t
operator|*
operator|)
name|safeName
operator|.
name|utf16
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|semaphore
operator|==
literal|0
condition|)
block|{
name|setErrorString
argument_list|(
name|QLatin1String
argument_list|(
literal|"QSystemLockPrivate::handle"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
if|if
condition|(
name|semaphoreLock
operator|==
literal|0
condition|)
block|{
name|QString
name|safeLockName
init|=
name|QSharedMemoryPrivate
operator|::
name|makePlatformSafeKey
argument_list|(
name|key
operator|+
name|QLatin1String
argument_list|(
literal|"lock"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"qipc_systemlock_"
argument_list|)
argument_list|)
decl_stmt|;
name|semaphoreLock
operator|=
name|CreateSemaphore
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
operator|(
name|wchar_t
operator|*
operator|)
name|safeLockName
operator|.
name|utf16
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|semaphoreLock
operator|==
literal|0
condition|)
block|{
name|setErrorString
argument_list|(
name|QLatin1String
argument_list|(
literal|"QSystemLockPrivate::handle"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
return|return
name|semaphore
return|;
block|}
end_function
begin_comment
comment|/*!     \internal      Cleanup the semaphore  */
end_comment
begin_function
DECL|function|cleanHandle
name|void
name|QSystemLockPrivate
operator|::
name|cleanHandle
parameter_list|()
block|{
if|if
condition|(
name|semaphore
operator|&&
operator|!
name|CloseHandle
argument_list|(
name|semaphore
argument_list|)
condition|)
name|setErrorString
argument_list|(
name|QLatin1String
argument_list|(
literal|"QSystemLockPrivate::cleanHandle:"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|semaphoreLock
operator|&&
operator|!
name|CloseHandle
argument_list|(
name|semaphoreLock
argument_list|)
condition|)
name|setErrorString
argument_list|(
name|QLatin1String
argument_list|(
literal|"QSystemLockPrivate::cleanHandle:"
argument_list|)
argument_list|)
expr_stmt|;
name|semaphore
operator|=
literal|0
expr_stmt|;
name|semaphoreLock
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lock
name|bool
name|QSystemLockPrivate
operator|::
name|lock
parameter_list|(
name|HANDLE
name|handle
parameter_list|,
name|int
name|count
parameter_list|)
block|{
if|if
condition|(
name|count
operator|==
literal|1
condition|)
block|{
name|WaitForSingleObject
argument_list|(
name|handle
argument_list|,
name|INFINITE
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|int
name|i
init|=
name|count
decl_stmt|;
while|while
condition|(
name|i
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|WAIT_OBJECT_0
operator|==
name|WaitForSingleObject
argument_list|(
name|handle
argument_list|,
literal|0
argument_list|)
condition|)
block|{
operator|--
name|i
expr_stmt|;
block|}
else|else
block|{
comment|// undo what we have done, sleep and then try again later
name|ReleaseSemaphore
argument_list|(
name|handle
argument_list|,
operator|(
name|count
operator|-
name|i
operator|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|i
operator|=
name|count
expr_stmt|;
name|ReleaseSemaphore
argument_list|(
name|semaphoreLock
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|WaitForSingleObject
argument_list|(
name|semaphoreLock
argument_list|,
name|INFINITE
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|unlock
name|bool
name|QSystemLockPrivate
operator|::
name|unlock
parameter_list|(
name|HANDLE
name|handle
parameter_list|,
name|int
name|count
parameter_list|)
block|{
if|if
condition|(
literal|0
operator|==
name|ReleaseSemaphore
argument_list|(
name|handle
argument_list|,
name|count
argument_list|,
literal|0
argument_list|)
condition|)
block|{
name|setErrorString
argument_list|(
name|QLatin1String
argument_list|(
literal|"QSystemLockPrivate::unlock"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     \internal      modifySemaphore handles recursive behavior and modifies the semaphore.  */
end_comment
begin_function
DECL|function|modifySemaphore
name|bool
name|QSystemLockPrivate
operator|::
name|modifySemaphore
parameter_list|(
name|QSystemLockPrivate
operator|::
name|Operation
name|op
parameter_list|,
name|QSystemLock
operator|::
name|LockMode
name|mode
parameter_list|)
block|{
if|if
condition|(
literal|0
operator|==
name|handle
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|(
name|lockCount
operator|==
literal|0
operator|&&
name|op
operator|==
name|Lock
operator|)
operator|||
operator|(
name|lockCount
operator|>
literal|0
operator|&&
name|op
operator|==
name|Unlock
operator|)
condition|)
block|{
if|if
condition|(
name|op
operator|==
name|Unlock
condition|)
block|{
operator|--
name|lockCount
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|lockCount
operator|>=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|lockCount
operator|>
literal|0
condition|)
return|return
literal|true
return|;
block|}
name|int
name|count
init|=
operator|(
name|mode
operator|==
name|QSystemLock
operator|::
name|ReadWrite
operator|)
condition|?
name|MAX_LOCKS
else|:
literal|1
decl_stmt|;
if|if
condition|(
name|op
operator|==
name|Lock
condition|)
block|{
name|lock
argument_list|(
name|semaphoreLock
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|lock
argument_list|(
name|semaphore
argument_list|,
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|!=
name|MAX_LOCKS
condition|)
name|unlock
argument_list|(
name|semaphoreLock
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|lockedMode
operator|=
name|mode
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|count
operator|==
name|MAX_LOCKS
condition|)
name|unlock
argument_list|(
name|semaphoreLock
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|unlock
argument_list|(
name|semaphore
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|op
operator|==
name|Lock
condition|)
name|lockCount
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
end_unit
