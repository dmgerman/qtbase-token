begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtGui/qgraphicseffect.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qgraphicsview.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qgraphicsscene.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qgraphicsitem.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qstyleoption.h>
end_include
begin_include
include|#
directive|include
file|<private/qgraphicseffect_p.h>
end_include
begin_include
include|#
directive|include
file|"../../shared/util.h"
end_include
begin_comment
comment|//TESTED_CLASS=
end_comment
begin_comment
comment|//TESTED_FILES=
end_comment
begin_class
DECL|class|CustomItem
class|class
name|CustomItem
super|:
specifier|public
name|QGraphicsRectItem
block|{
public|public:
DECL|function|CustomItem
name|CustomItem
parameter_list|(
name|qreal
name|x
parameter_list|,
name|qreal
name|y
parameter_list|,
name|qreal
name|width
parameter_list|,
name|qreal
name|height
parameter_list|)
member_init_list|:
name|QGraphicsRectItem
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
member_init_list|,
name|numRepaints
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_painter
argument_list|(
literal|0
argument_list|)
block|{}
DECL|function|paint
name|void
name|paint
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QStyleOptionGraphicsItem
modifier|*
name|option
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|m_painter
operator|=
name|painter
expr_stmt|;
operator|++
name|numRepaints
expr_stmt|;
name|QGraphicsRectItem
operator|::
name|paint
argument_list|(
name|painter
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
DECL|function|reset
name|void
name|reset
parameter_list|()
block|{
name|numRepaints
operator|=
literal|0
expr_stmt|;
name|m_painter
operator|=
literal|0
expr_stmt|;
block|}
DECL|member|numRepaints
name|int
name|numRepaints
decl_stmt|;
DECL|member|m_painter
name|QPainter
modifier|*
name|m_painter
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|CustomEffect
class|class
name|CustomEffect
super|:
specifier|public
name|QGraphicsEffect
block|{
public|public:
DECL|function|CustomEffect
name|CustomEffect
parameter_list|()
member_init_list|:
name|QGraphicsEffect
argument_list|()
member_init_list|,
name|numRepaints
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_margin
argument_list|(
literal|10
argument_list|)
member_init_list|,
name|m_sourceChanged
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_sourceBoundingRectChanged
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|doNothingInDraw
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|storeDeviceDependentStuff
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_painter
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_source
argument_list|(
literal|0
argument_list|)
block|{}
DECL|function|boundingRectFor
name|QRectF
name|boundingRectFor
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
specifier|const
block|{
return|return
name|rect
operator|.
name|adjusted
argument_list|(
operator|-
name|m_margin
argument_list|,
operator|-
name|m_margin
argument_list|,
name|m_margin
argument_list|,
name|m_margin
argument_list|)
return|;
block|}
DECL|function|reset
name|void
name|reset
parameter_list|()
block|{
name|numRepaints
operator|=
literal|0
expr_stmt|;
name|m_sourceChanged
operator|=
literal|false
expr_stmt|;
name|m_sourceBoundingRectChanged
operator|=
literal|false
expr_stmt|;
name|m_painter
operator|=
literal|0
expr_stmt|;
name|m_source
operator|=
literal|0
expr_stmt|;
name|deviceCoordinatesPixmap
operator|=
name|QPixmap
argument_list|()
expr_stmt|;
name|deviceRect
operator|=
name|QRect
argument_list|()
expr_stmt|;
name|sourceDeviceBoundingRect
operator|=
name|QRectF
argument_list|()
expr_stmt|;
block|}
DECL|function|setMargin
name|void
name|setMargin
parameter_list|(
name|int
name|margin
parameter_list|)
block|{
name|m_margin
operator|=
name|margin
expr_stmt|;
name|updateBoundingRect
argument_list|()
expr_stmt|;
block|}
DECL|function|margin
name|int
name|margin
parameter_list|()
specifier|const
block|{
return|return
name|m_margin
return|;
block|}
DECL|function|draw
name|void
name|draw
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|)
block|{
operator|++
name|numRepaints
expr_stmt|;
if|if
condition|(
name|storeDeviceDependentStuff
condition|)
block|{
name|deviceCoordinatesPixmap
operator|=
name|source
argument_list|()
operator|->
name|pixmap
argument_list|(
name|Qt
operator|::
name|DeviceCoordinates
argument_list|)
expr_stmt|;
name|deviceRect
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|painter
operator|->
name|device
argument_list|()
operator|->
name|width
argument_list|()
argument_list|,
name|painter
operator|->
name|device
argument_list|()
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|sourceDeviceBoundingRect
operator|=
name|source
argument_list|()
operator|->
name|boundingRect
argument_list|(
name|Qt
operator|::
name|DeviceCoordinates
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doNothingInDraw
condition|)
return|return;
name|m_source
operator|=
name|source
argument_list|()
expr_stmt|;
name|m_painter
operator|=
name|painter
expr_stmt|;
name|source
argument_list|()
operator|->
name|draw
argument_list|(
name|painter
argument_list|)
expr_stmt|;
block|}
DECL|function|sourceChanged
name|void
name|sourceChanged
parameter_list|()
block|{
name|m_sourceChanged
operator|=
literal|true
expr_stmt|;
block|}
DECL|function|sourceBoundingRectChanged
name|void
name|sourceBoundingRectChanged
parameter_list|()
block|{
name|m_sourceBoundingRectChanged
operator|=
literal|true
expr_stmt|;
block|}
DECL|member|numRepaints
name|int
name|numRepaints
decl_stmt|;
DECL|member|m_margin
name|int
name|m_margin
decl_stmt|;
DECL|member|m_sourceChanged
name|bool
name|m_sourceChanged
decl_stmt|;
DECL|member|m_sourceBoundingRectChanged
name|bool
name|m_sourceBoundingRectChanged
decl_stmt|;
DECL|member|doNothingInDraw
name|bool
name|doNothingInDraw
decl_stmt|;
DECL|member|storeDeviceDependentStuff
name|bool
name|storeDeviceDependentStuff
decl_stmt|;
DECL|member|m_painter
name|QPainter
modifier|*
name|m_painter
decl_stmt|;
DECL|member|m_source
name|QGraphicsEffectSource
modifier|*
name|m_source
decl_stmt|;
DECL|member|deviceCoordinatesPixmap
name|QPixmap
name|deviceCoordinatesPixmap
decl_stmt|;
DECL|member|deviceRect
name|QRect
name|deviceRect
decl_stmt|;
DECL|member|sourceDeviceBoundingRect
name|QRectF
name|sourceDeviceBoundingRect
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|tst_QGraphicsEffectSource
class|class
name|tst_QGraphicsEffectSource
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|graphicsItem
parameter_list|()
function_decl|;
name|void
name|styleOption
parameter_list|()
function_decl|;
name|void
name|isPixmap
parameter_list|()
function_decl|;
name|void
name|draw
parameter_list|()
function_decl|;
name|void
name|update
parameter_list|()
function_decl|;
name|void
name|boundingRect
parameter_list|()
function_decl|;
name|void
name|clippedBoundingRect
parameter_list|()
function_decl|;
name|void
name|deviceRect
parameter_list|()
function_decl|;
name|void
name|pixmap
parameter_list|()
function_decl|;
name|void
name|pixmapPadding_data
parameter_list|()
function_decl|;
name|void
name|pixmapPadding
parameter_list|()
function_decl|;
private|private:
DECL|member|view
name|QGraphicsView
modifier|*
name|view
decl_stmt|;
DECL|member|scene
name|QGraphicsScene
modifier|*
name|scene
decl_stmt|;
DECL|member|item
name|CustomItem
modifier|*
name|item
decl_stmt|;
DECL|member|effect
name|CustomEffect
modifier|*
name|effect
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|initTestCase
name|void
name|tst_QGraphicsEffectSource
operator|::
name|initTestCase
parameter_list|()
block|{
name|scene
operator|=
operator|new
name|QGraphicsScene
expr_stmt|;
name|item
operator|=
operator|new
name|CustomItem
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|effect
operator|=
operator|new
name|CustomEffect
expr_stmt|;
name|item
operator|->
name|setGraphicsEffect
argument_list|(
name|effect
argument_list|)
expr_stmt|;
name|scene
operator|->
name|addItem
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|view
operator|=
operator|new
name|QGraphicsView
argument_list|(
name|scene
argument_list|)
expr_stmt|;
name|view
operator|->
name|show
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
name|qt_x11_wait_for_window_manager
argument_list|(
name|view
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QGraphicsEffectSource
operator|::
name|cleanupTestCase
parameter_list|()
block|{
operator|delete
name|view
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_QGraphicsEffectSource
operator|::
name|init
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|effect
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|effect
operator|->
name|source
argument_list|()
argument_list|)
expr_stmt|;
name|effect
operator|->
name|reset
argument_list|()
expr_stmt|;
name|effect
operator|->
name|storeDeviceDependentStuff
operator|=
literal|false
expr_stmt|;
name|effect
operator|->
name|doNothingInDraw
operator|=
literal|false
expr_stmt|;
name|item
operator|->
name|reset
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|graphicsItem
name|void
name|tst_QGraphicsEffectSource
operator|::
name|graphicsItem
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|effect
operator|->
name|source
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|effect
operator|->
name|source
argument_list|()
operator|->
name|graphicsItem
argument_list|()
argument_list|,
operator|(
specifier|const
name|QGraphicsItem
operator|*
operator|)
name|item
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|styleOption
name|void
name|tst_QGraphicsEffectSource
operator|::
name|styleOption
parameter_list|()
block|{
comment|// We don't have style options unless the source is drawing.
name|QVERIFY
argument_list|(
name|effect
operator|->
name|source
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|effect
operator|->
name|source
argument_list|()
operator|->
name|styleOption
argument_list|()
argument_list|)
expr_stmt|;
comment|// Trigger an update and check that the style option in QGraphicsEffect::draw
comment|// was the same as the one in QGraphicsItem::paint.
name|QCOMPARE
argument_list|(
name|item
operator|->
name|numRepaints
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|effect
operator|->
name|numRepaints
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|item
operator|->
name|update
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|item
operator|->
name|numRepaints
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|effect
operator|->
name|numRepaints
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isPixmap
name|void
name|tst_QGraphicsEffectSource
operator|::
name|isPixmap
parameter_list|()
block|{
comment|// Current source is a CustomItem (which is not a pixmap item).
name|QVERIFY
argument_list|(
operator|!
name|effect
operator|->
name|source
argument_list|()
operator|->
name|isPixmap
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure isPixmap() returns true for QGraphicsPixmapItem.
name|QGraphicsPixmapItem
modifier|*
name|pixmapItem
init|=
operator|new
name|QGraphicsPixmapItem
decl_stmt|;
name|CustomEffect
modifier|*
name|anotherEffect
init|=
operator|new
name|CustomEffect
decl_stmt|;
name|pixmapItem
operator|->
name|setGraphicsEffect
argument_list|(
name|anotherEffect
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|anotherEffect
operator|->
name|source
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|anotherEffect
operator|->
name|source
argument_list|()
operator|->
name|graphicsItem
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
specifier|const
name|QGraphicsItem
operator|*
argument_list|>
argument_list|(
name|pixmapItem
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|anotherEffect
operator|->
name|source
argument_list|()
operator|->
name|isPixmap
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|pixmapItem
expr_stmt|;
block|}
end_function
begin_function
DECL|function|draw
name|void
name|tst_QGraphicsEffectSource
operator|::
name|draw
parameter_list|()
block|{
comment|// The source can only draw as a result of QGraphicsEffect::draw.
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QGraphicsEffectSource::draw: Can only begin as a result of QGraphicsEffect::draw"
argument_list|)
expr_stmt|;
name|QPixmap
name|dummyPixmap
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|QPainter
name|dummyPainter
argument_list|(
operator|&
name|dummyPixmap
argument_list|)
decl_stmt|;
name|effect
operator|->
name|source
argument_list|()
operator|->
name|draw
argument_list|(
operator|&
name|dummyPainter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|update
name|void
name|tst_QGraphicsEffectSource
operator|::
name|update
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|item
operator|->
name|numRepaints
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|effect
operator|->
name|numRepaints
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|effect
operator|->
name|source
argument_list|()
operator|->
name|update
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|item
operator|->
name|numRepaints
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|effect
operator|->
name|numRepaints
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|boundingRect
name|void
name|tst_QGraphicsEffectSource
operator|::
name|boundingRect
parameter_list|()
block|{
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QGraphicsEffectSource::boundingRect: Not yet implemented, lacking device context"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|effect
operator|->
name|source
argument_list|()
operator|->
name|boundingRect
argument_list|(
name|Qt
operator|::
name|DeviceCoordinates
argument_list|)
argument_list|,
name|QRectF
argument_list|()
argument_list|)
expr_stmt|;
name|QRectF
name|itemBoundingRect
init|=
name|item
operator|->
name|boundingRect
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|item
operator|->
name|children
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|itemBoundingRect
operator||=
name|item
operator|->
name|childrenBoundingRect
argument_list|()
expr_stmt|;
comment|// We can at least check that the device bounding rect was correct in QGraphicsEffect::draw.
name|effect
operator|->
name|storeDeviceDependentStuff
operator|=
literal|true
expr_stmt|;
name|effect
operator|->
name|source
argument_list|()
operator|->
name|update
argument_list|()
expr_stmt|;
specifier|const
name|QTransform
name|deviceTransform
init|=
name|item
operator|->
name|deviceTransform
argument_list|(
name|view
operator|->
name|viewportTransform
argument_list|()
argument_list|)
decl_stmt|;
name|QTRY_COMPARE
argument_list|(
name|effect
operator|->
name|sourceDeviceBoundingRect
argument_list|,
name|deviceTransform
operator|.
name|mapRect
argument_list|(
name|itemBoundingRect
argument_list|)
argument_list|)
expr_stmt|;
comment|// Bounding rect in logical coordinates is of course fine.
name|QTRY_COMPARE
argument_list|(
name|effect
operator|->
name|source
argument_list|()
operator|->
name|boundingRect
argument_list|(
name|Qt
operator|::
name|LogicalCoordinates
argument_list|)
argument_list|,
name|itemBoundingRect
argument_list|)
expr_stmt|;
comment|// Make sure default value is Qt::LogicalCoordinates.
name|QTRY_COMPARE
argument_list|(
name|effect
operator|->
name|source
argument_list|()
operator|->
name|boundingRect
argument_list|()
argument_list|,
name|itemBoundingRect
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clippedBoundingRect
name|void
name|tst_QGraphicsEffectSource
operator|::
name|clippedBoundingRect
parameter_list|()
block|{
name|QRectF
name|itemBoundingRect
init|=
name|item
operator|->
name|boundingRect
argument_list|()
decl_stmt|;
name|item
operator|->
name|setFlag
argument_list|(
name|QGraphicsItem
operator|::
name|ItemClipsChildrenToShape
argument_list|)
expr_stmt|;
name|QGraphicsRectItem
modifier|*
name|child
init|=
operator|new
name|QGraphicsRectItem
argument_list|(
operator|-
literal|1000
argument_list|,
operator|-
literal|1000
argument_list|,
literal|2000
argument_list|,
literal|2000
argument_list|)
decl_stmt|;
name|child
operator|->
name|setBrush
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|child
operator|->
name|setParentItem
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|effect
operator|->
name|storeDeviceDependentStuff
operator|=
literal|true
expr_stmt|;
name|effect
operator|->
name|source
argument_list|()
operator|->
name|update
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|effect
operator|->
name|source
argument_list|()
operator|->
name|boundingRect
argument_list|(
name|Qt
operator|::
name|LogicalCoordinates
argument_list|)
argument_list|,
name|itemBoundingRect
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|deviceRect
name|void
name|tst_QGraphicsEffectSource
operator|::
name|deviceRect
parameter_list|()
block|{
name|effect
operator|->
name|storeDeviceDependentStuff
operator|=
literal|true
expr_stmt|;
name|effect
operator|->
name|source
argument_list|()
operator|->
name|update
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|effect
operator|->
name|deviceRect
argument_list|,
name|view
operator|->
name|viewport
argument_list|()
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pixmap
name|void
name|tst_QGraphicsEffectSource
operator|::
name|pixmap
parameter_list|()
block|{
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QGraphicsEffectSource::pixmap: Not yet implemented, lacking device context"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|effect
operator|->
name|source
argument_list|()
operator|->
name|pixmap
argument_list|(
name|Qt
operator|::
name|DeviceCoordinates
argument_list|)
argument_list|,
name|QPixmap
argument_list|()
argument_list|)
expr_stmt|;
comment|// We can at least verify a valid pixmap from QGraphicsEffect::draw.
name|effect
operator|->
name|storeDeviceDependentStuff
operator|=
literal|true
expr_stmt|;
name|effect
operator|->
name|source
argument_list|()
operator|->
name|update
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
operator|!
name|effect
operator|->
name|deviceCoordinatesPixmap
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
comment|// Pixmaps in logical coordinates we can do fine.
name|QPixmap
name|pixmap1
init|=
name|effect
operator|->
name|source
argument_list|()
operator|->
name|pixmap
argument_list|(
name|Qt
operator|::
name|LogicalCoordinates
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|pixmap1
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure default value is Qt::LogicalCoordinates.
name|QPixmap
name|pixmap2
init|=
name|effect
operator|->
name|source
argument_list|()
operator|->
name|pixmap
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|pixmap1
argument_list|,
name|pixmap2
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|PaddingEffect
class|class
name|PaddingEffect
super|:
specifier|public
name|QGraphicsEffect
block|{
public|public:
DECL|function|PaddingEffect
name|PaddingEffect
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QGraphicsEffect
argument_list|(
name|parent
argument_list|)
block|{     }
DECL|function|boundingRectFor
name|QRectF
name|boundingRectFor
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|src
parameter_list|)
specifier|const
block|{
return|return
name|src
operator|.
name|adjusted
argument_list|(
operator|-
literal|10
argument_list|,
operator|-
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
return|;
block|}
DECL|function|draw
name|void
name|draw
parameter_list|(
name|QPainter
modifier|*
parameter_list|)
block|{
name|pix
operator|=
name|source
argument_list|()
operator|->
name|pixmap
argument_list|(
name|coordinateMode
argument_list|,
operator|&
name|offset
argument_list|,
name|padMode
argument_list|)
expr_stmt|;
block|}
DECL|member|pix
name|QPixmap
name|pix
decl_stmt|;
DECL|member|offset
name|QPoint
name|offset
decl_stmt|;
DECL|member|padMode
name|QGraphicsEffect
operator|::
name|PixmapPadMode
name|padMode
decl_stmt|;
DECL|member|coordinateMode
name|Qt
operator|::
name|CoordinateSystem
name|coordinateMode
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|pixmapPadding_data
name|void
name|tst_QGraphicsEffectSource
operator|::
name|pixmapPadding_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"coordinateMode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"padMode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QSize
argument_list|>
argument_list|(
literal|"size"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QPoint
argument_list|>
argument_list|(
literal|"offset"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|uint
argument_list|>
argument_list|(
literal|"ulPixel"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"log,nopad"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|LogicalCoordinates
argument_list|)
operator|<<
name|int
argument_list|(
name|QGraphicsEffect
operator|::
name|NoPad
argument_list|)
operator|<<
name|QSize
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
operator|<<
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|<<
literal|0xffff0000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"log,transparent"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|LogicalCoordinates
argument_list|)
operator|<<
name|int
argument_list|(
name|QGraphicsEffect
operator|::
name|PadToTransparentBorder
argument_list|)
operator|<<
name|QSize
argument_list|(
literal|14
argument_list|,
literal|14
argument_list|)
operator|<<
name|QPoint
argument_list|(
operator|-
literal|2
argument_list|,
operator|-
literal|2
argument_list|)
operator|<<
literal|0x00000000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"log,effectrect"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|LogicalCoordinates
argument_list|)
operator|<<
name|int
argument_list|(
name|QGraphicsEffect
operator|::
name|PadToEffectiveBoundingRect
argument_list|)
operator|<<
name|QSize
argument_list|(
literal|20
argument_list|,
literal|20
argument_list|)
operator|<<
name|QPoint
argument_list|(
operator|-
literal|5
argument_list|,
operator|-
literal|5
argument_list|)
operator|<<
literal|0x00000000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dev,nopad"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|DeviceCoordinates
argument_list|)
operator|<<
name|int
argument_list|(
name|QGraphicsEffect
operator|::
name|NoPad
argument_list|)
operator|<<
name|QSize
argument_list|(
literal|20
argument_list|,
literal|20
argument_list|)
operator|<<
name|QPoint
argument_list|(
literal|40
argument_list|,
literal|40
argument_list|)
operator|<<
literal|0xffff0000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dev,transparent"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|DeviceCoordinates
argument_list|)
operator|<<
name|int
argument_list|(
name|QGraphicsEffect
operator|::
name|PadToTransparentBorder
argument_list|)
operator|<<
name|QSize
argument_list|(
literal|24
argument_list|,
literal|24
argument_list|)
operator|<<
name|QPoint
argument_list|(
literal|38
argument_list|,
literal|38
argument_list|)
operator|<<
literal|0x00000000u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dev,effectrect"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|DeviceCoordinates
argument_list|)
operator|<<
name|int
argument_list|(
name|QGraphicsEffect
operator|::
name|PadToEffectiveBoundingRect
argument_list|)
operator|<<
name|QSize
argument_list|(
literal|40
argument_list|,
literal|40
argument_list|)
operator|<<
name|QPoint
argument_list|(
literal|30
argument_list|,
literal|30
argument_list|)
operator|<<
literal|0x00000000u
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pixmapPadding
name|void
name|tst_QGraphicsEffectSource
operator|::
name|pixmapPadding
parameter_list|()
block|{
name|QPixmap
name|dummyTarget
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|QPainter
name|dummyPainter
argument_list|(
operator|&
name|dummyTarget
argument_list|)
decl_stmt|;
name|dummyPainter
operator|.
name|translate
argument_list|(
literal|40
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|dummyPainter
operator|.
name|scale
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QPixmap
name|pm
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|pm
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|QGraphicsScene
modifier|*
name|scene
init|=
operator|new
name|QGraphicsScene
argument_list|()
decl_stmt|;
name|PaddingEffect
modifier|*
name|effect
init|=
operator|new
name|PaddingEffect
argument_list|(
name|scene
argument_list|)
decl_stmt|;
name|QGraphicsPixmapItem
modifier|*
name|pmItem
init|=
operator|new
name|QGraphicsPixmapItem
argument_list|(
name|pm
argument_list|)
decl_stmt|;
name|scene
operator|->
name|addItem
argument_list|(
name|pmItem
argument_list|)
expr_stmt|;
name|pmItem
operator|->
name|setGraphicsEffect
argument_list|(
name|effect
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|coordinateMode
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|padMode
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QPoint
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QSize
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|uint
argument_list|,
name|ulPixel
argument_list|)
expr_stmt|;
name|effect
operator|->
name|padMode
operator|=
operator|(
name|QGraphicsEffect
operator|::
name|PixmapPadMode
operator|)
name|padMode
expr_stmt|;
name|effect
operator|->
name|coordinateMode
operator|=
operator|(
name|Qt
operator|::
name|CoordinateSystem
operator|)
name|coordinateMode
expr_stmt|;
name|scene
operator|->
name|render
argument_list|(
operator|&
name|dummyPainter
argument_list|,
name|scene
operator|->
name|itemsBoundingRect
argument_list|()
argument_list|,
name|scene
operator|->
name|itemsBoundingRect
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|effect
operator|->
name|pix
operator|.
name|size
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|effect
operator|->
name|offset
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|effect
operator|->
name|pix
operator|.
name|toImage
argument_list|()
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|ulPixel
argument_list|)
expr_stmt|;
comment|// ### Fix corruption in scene destruction, then enable...
comment|// delete scene;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QGraphicsEffectSource
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qgraphicseffectsource.moc"
end_include
end_unit
