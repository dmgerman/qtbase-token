begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QTest>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WIN
end_ifdef
begin_include
include|#
directive|include
file|<winsock2.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qdatastream.h>
end_include
begin_include
include|#
directive|include
file|<qhostaddress.h>
end_include
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_UNIX
end_ifdef
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<sys/socket.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<stddef.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
end_ifdef
begin_include
include|#
directive|include
file|<QNetworkConfigurationManager>
end_include
begin_include
include|#
directive|include
file|<QNetworkConfiguration>
end_include
begin_include
include|#
directive|include
file|<QNetworkSession>
end_include
begin_include
include|#
directive|include
file|<QScopedPointer>
end_include
begin_define
DECL|macro|PLATFORMSOCKETENGINE
define|#
directive|define
name|PLATFORMSOCKETENGINE
value|QSymbianSocketEngine
end_define
begin_define
DECL|macro|PLATFORMSOCKETENGINESTRING
define|#
directive|define
name|PLATFORMSOCKETENGINESTRING
value|"QSymbianSocketEngine"
end_define
begin_include
include|#
directive|include
file|<private/qsymbiansocketengine_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qcore_symbian_p.h>
end_include
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|PLATFORMSOCKETENGINE
define|#
directive|define
name|PLATFORMSOCKETENGINE
value|QNativeSocketEngine
end_define
begin_define
DECL|macro|PLATFORMSOCKETENGINESTRING
define|#
directive|define
name|PLATFORMSOCKETENGINESTRING
value|"QNativeSocketEngine"
end_define
begin_include
include|#
directive|include
file|<private/qnativesocketengine_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|"../network-settings.h"
end_include
begin_comment
comment|//TESTED_FILES=network/qnativesocketengine.cpp network/qnativesocketengine_p.h network/qnativesocketengine_unix.cpp
end_comment
begin_class
DECL|class|tst_PlatformSocketEngine
class|class
name|tst_PlatformSocketEngine
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_PlatformSocketEngine
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_PlatformSocketEngine
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|construction
parameter_list|()
function_decl|;
name|void
name|simpleConnectToIMAP
parameter_list|()
function_decl|;
name|void
name|udpLoopbackTest
parameter_list|()
function_decl|;
name|void
name|udpIPv6LoopbackTest
parameter_list|()
function_decl|;
name|void
name|broadcastTest
parameter_list|()
function_decl|;
name|void
name|serverTest
parameter_list|()
function_decl|;
name|void
name|udpLoopbackPerformance
parameter_list|()
function_decl|;
name|void
name|tcpLoopbackPerformance
parameter_list|()
function_decl|;
name|void
name|readWriteBufferSize
parameter_list|()
function_decl|;
name|void
name|bind
parameter_list|()
function_decl|;
name|void
name|networkError
parameter_list|()
function_decl|;
name|void
name|setSocketDescriptor
parameter_list|()
function_decl|;
name|void
name|invalidSend
parameter_list|()
function_decl|;
name|void
name|receiveUrgentData
parameter_list|()
function_decl|;
name|void
name|tooManySockets
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_PlatformSocketEngine
name|tst_PlatformSocketEngine
operator|::
name|tst_PlatformSocketEngine
parameter_list|()
block|{
name|Q_SET_DEFAULT_IAP
block|}
end_constructor
begin_destructor
DECL|function|~tst_PlatformSocketEngine
name|tst_PlatformSocketEngine
operator|::
name|~
name|tst_PlatformSocketEngine
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|init
name|void
name|tst_PlatformSocketEngine
operator|::
name|init
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_PlatformSocketEngine
operator|::
name|cleanup
parameter_list|()
block|{ }
end_function
begin_comment
comment|//---------------------------------------------------------------------------
end_comment
begin_function
DECL|function|construction
name|void
name|tst_PlatformSocketEngine
operator|::
name|construction
parameter_list|()
block|{
name|PLATFORMSOCKETENGINE
name|socketDevice
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socketDevice
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// Initialize device
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|,
name|QAbstractSocket
operator|::
name|IPv4Protocol
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|protocol
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|IPv4Protocol
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|socketType
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|socketDescriptor
argument_list|()
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|localAddress
argument_list|()
operator|==
name|QHostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|localPort
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|peerAddress
argument_list|()
operator|==
name|QHostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|peerPort
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|error
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnknownSocketError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
name|PLATFORMSOCKETENGINESTRING
literal|"::bytesAvailable() was called in QAbstractSocket::UnconnectedState"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|bytesAvailable
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
name|PLATFORMSOCKETENGINESTRING
literal|"::hasPendingDatagrams() was called in QAbstractSocket::UnconnectedState"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socketDevice
operator|.
name|hasPendingDatagrams
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//---------------------------------------------------------------------------
end_comment
begin_function
DECL|function|simpleConnectToIMAP
name|void
name|tst_PlatformSocketEngine
operator|::
name|simpleConnectToIMAP
parameter_list|()
block|{
name|PLATFORMSOCKETENGINE
name|socketDevice
decl_stmt|;
comment|// Initialize device
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|,
name|QAbstractSocket
operator|::
name|IPv4Protocol
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|isConnected
init|=
name|socketDevice
operator|.
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverIP
argument_list|()
argument_list|,
literal|143
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isConnected
condition|)
block|{
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectingState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|waitForWrite
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|peerAddress
argument_list|()
operator|==
name|QtNetworkSettings
operator|::
name|serverIP
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wait for the greeting
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|waitForRead
argument_list|()
argument_list|)
expr_stmt|;
comment|// Read the greeting
name|qint64
name|available
init|=
name|socketDevice
operator|.
name|bytesAvailable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|available
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QByteArray
name|array
decl_stmt|;
name|array
operator|.
name|resize
argument_list|(
name|available
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|read
argument_list|(
name|array
operator|.
name|data
argument_list|()
argument_list|,
name|array
operator|.
name|size
argument_list|()
argument_list|)
operator|==
name|available
argument_list|)
expr_stmt|;
comment|// Check that the greeting is what we expect it to be
name|QVERIFY2
argument_list|(
name|QtNetworkSettings
operator|::
name|compareReplyIMAP
argument_list|(
name|array
argument_list|)
argument_list|,
name|array
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
comment|// Write a logout message
name|QByteArray
name|array2
init|=
literal|"ZZZ LOGOUT\r\n"
decl_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|write
argument_list|(
name|array2
operator|.
name|data
argument_list|()
argument_list|,
name|array2
operator|.
name|size
argument_list|()
argument_list|)
operator|==
name|array2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wait for the response
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|waitForRead
argument_list|()
argument_list|)
expr_stmt|;
name|available
operator|=
name|socketDevice
operator|.
name|bytesAvailable
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|available
operator|>
literal|0
argument_list|)
expr_stmt|;
name|array
operator|.
name|resize
argument_list|(
name|available
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|read
argument_list|(
name|array
operator|.
name|data
argument_list|()
argument_list|,
name|array
operator|.
name|size
argument_list|()
argument_list|)
operator|==
name|available
argument_list|)
expr_stmt|;
comment|// Check that the greeting is what we expect it to be
name|QCOMPARE
argument_list|(
name|array
operator|.
name|constData
argument_list|()
argument_list|,
literal|"* BYE LOGOUT received\r\n"
literal|"ZZZ OK Completed\r\n"
argument_list|)
expr_stmt|;
comment|// Wait for the response
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|waitForRead
argument_list|()
argument_list|)
expr_stmt|;
name|char
name|c
decl_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|read
argument_list|(
operator|&
name|c
argument_list|,
sizeof|sizeof
argument_list|(
name|c
argument_list|)
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|error
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|RemoteHostClosedError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//---------------------------------------------------------------------------
end_comment
begin_function
DECL|function|udpLoopbackTest
name|void
name|tst_PlatformSocketEngine
operator|::
name|udpLoopbackTest
parameter_list|()
block|{
name|PLATFORMSOCKETENGINE
name|udpSocket
decl_stmt|;
comment|// Initialize device #1
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|UdpSocket
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|socketDescriptor
argument_list|()
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|protocol
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|IPv4Protocol
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|socketType
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UdpSocket
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
comment|// Bind #1 to localhost
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|bind
argument_list|(
name|QHostAddress
argument_list|(
literal|"127.0.0.1"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|BoundState
argument_list|)
expr_stmt|;
name|quint16
name|port
init|=
name|udpSocket
operator|.
name|localPort
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|port
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|// Initialize device #2
name|PLATFORMSOCKETENGINE
name|udpSocket2
decl_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket2
operator|.
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|UdpSocket
argument_list|)
argument_list|)
expr_stmt|;
comment|// Connect device #2 to #1
name|QVERIFY
argument_list|(
name|udpSocket2
operator|.
name|connectToHost
argument_list|(
name|QHostAddress
argument_list|(
literal|"127.0.0.1"
argument_list|)
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket2
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
comment|// Write a message to #1
name|QByteArray
name|message1
init|=
literal|"hei der"
decl_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket2
operator|.
name|write
argument_list|(
name|message1
operator|.
name|data
argument_list|()
argument_list|,
name|message1
operator|.
name|size
argument_list|()
argument_list|)
operator|==
name|message1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Read the message from #2
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|waitForRead
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|hasPendingDatagrams
argument_list|()
argument_list|)
expr_stmt|;
name|qint64
name|available
init|=
name|udpSocket
operator|.
name|pendingDatagramSize
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|available
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QByteArray
name|answer
decl_stmt|;
name|answer
operator|.
name|resize
argument_list|(
name|available
argument_list|)
expr_stmt|;
name|QHostAddress
name|senderAddress
decl_stmt|;
name|quint16
name|senderPort
init|=
literal|0
decl_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|readDatagram
argument_list|(
name|answer
operator|.
name|data
argument_list|()
argument_list|,
name|answer
operator|.
name|size
argument_list|()
argument_list|,
operator|&
name|senderAddress
argument_list|,
operator|&
name|senderPort
argument_list|)
operator|==
name|message1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|senderAddress
operator|==
name|QHostAddress
argument_list|(
literal|"127.0.0.1"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|senderPort
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//---------------------------------------------------------------------------
end_comment
begin_function
DECL|function|udpIPv6LoopbackTest
name|void
name|tst_PlatformSocketEngine
operator|::
name|udpIPv6LoopbackTest
parameter_list|()
block|{
name|PLATFORMSOCKETENGINE
name|udpSocket
decl_stmt|;
comment|// Initialize device #1
name|bool
name|init
init|=
name|udpSocket
operator|.
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|UdpSocket
argument_list|,
name|QAbstractSocket
operator|::
name|IPv6Protocol
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|init
condition|)
block|{
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|error
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|protocol
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|IPv6Protocol
argument_list|)
expr_stmt|;
comment|// Bind #1 to localhost
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|bind
argument_list|(
name|QHostAddress
argument_list|(
literal|"::1"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|BoundState
argument_list|)
expr_stmt|;
name|quint16
name|port
init|=
name|udpSocket
operator|.
name|localPort
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|port
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|// Initialize device #2
name|PLATFORMSOCKETENGINE
name|udpSocket2
decl_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket2
operator|.
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|UdpSocket
argument_list|,
name|QAbstractSocket
operator|::
name|IPv6Protocol
argument_list|)
argument_list|)
expr_stmt|;
comment|// Connect device #2 to #1
name|QVERIFY
argument_list|(
name|udpSocket2
operator|.
name|connectToHost
argument_list|(
name|QHostAddress
argument_list|(
literal|"::1"
argument_list|)
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket2
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
comment|// Write a message to #1
name|QByteArray
name|message1
init|=
literal|"hei der"
decl_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket2
operator|.
name|write
argument_list|(
name|message1
operator|.
name|data
argument_list|()
argument_list|,
name|message1
operator|.
name|size
argument_list|()
argument_list|)
operator|==
name|message1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Read the message from #2
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|waitForRead
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|hasPendingDatagrams
argument_list|()
argument_list|)
expr_stmt|;
name|qint64
name|available
init|=
name|udpSocket
operator|.
name|pendingDatagramSize
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|available
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QByteArray
name|answer
decl_stmt|;
name|answer
operator|.
name|resize
argument_list|(
name|available
argument_list|)
expr_stmt|;
name|QHostAddress
name|senderAddress
decl_stmt|;
name|quint16
name|senderPort
init|=
literal|0
decl_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|readDatagram
argument_list|(
name|answer
operator|.
name|data
argument_list|()
argument_list|,
name|answer
operator|.
name|size
argument_list|()
argument_list|,
operator|&
name|senderAddress
argument_list|,
operator|&
name|senderPort
argument_list|)
operator|==
name|message1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|senderAddress
operator|==
name|QHostAddress
argument_list|(
literal|"::1"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|senderPort
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|//---------------------------------------------------------------------------
end_comment
begin_function
DECL|function|broadcastTest
name|void
name|tst_PlatformSocketEngine
operator|::
name|broadcastTest
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
comment|//broadcast isn't supported on loopback connections, but is on WLAN
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
name|QScopedPointer
argument_list|<
name|QNetworkConfigurationManager
argument_list|>
name|netConfMan
argument_list|(
operator|new
name|QNetworkConfigurationManager
argument_list|()
argument_list|)
decl_stmt|;
name|QNetworkConfiguration
name|networkConfiguration
argument_list|(
name|netConfMan
operator|->
name|defaultConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|QScopedPointer
argument_list|<
name|QNetworkSession
argument_list|>
name|networkSession
argument_list|(
operator|new
name|QNetworkSession
argument_list|(
name|networkConfiguration
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|networkSession
operator|->
name|isOpen
argument_list|()
condition|)
block|{
name|networkSession
operator|->
name|open
argument_list|()
expr_stmt|;
name|bool
name|ok
init|=
name|networkSession
operator|->
name|waitForOpened
argument_list|(
literal|30000
argument_list|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
name|networkSession
operator|->
name|isOpen
argument_list|()
operator|<<
name|networkSession
operator|->
name|error
argument_list|()
operator|<<
name|networkSession
operator|->
name|errorString
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_OS_AIX
name|QSKIP
argument_list|(
literal|"Broadcast does not work on darko"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|PLATFORMSOCKETENGINE
name|broadcastSocket
decl_stmt|;
comment|// Initialize a regular Udp socket
name|QVERIFY
argument_list|(
name|broadcastSocket
operator|.
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|UdpSocket
argument_list|)
argument_list|)
expr_stmt|;
comment|// Bind to any port on all interfaces
name|QVERIFY
argument_list|(
name|broadcastSocket
operator|.
name|bind
argument_list|(
name|QHostAddress
operator|::
name|Any
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|broadcastSocket
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|BoundState
argument_list|)
expr_stmt|;
name|quint16
name|port
init|=
name|broadcastSocket
operator|.
name|localPort
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|port
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// Broadcast an inappropriate troll message
name|QByteArray
name|trollMessage
init|=
literal|"MOOT wtf is a MOOT? talk english not your sutpiD ENGLISH."
decl_stmt|;
name|qint64
name|written
init|=
name|broadcastSocket
operator|.
name|writeDatagram
argument_list|(
name|trollMessage
operator|.
name|data
argument_list|()
argument_list|,
name|trollMessage
operator|.
name|size
argument_list|()
argument_list|,
name|QHostAddress
operator|::
name|Broadcast
argument_list|,
name|port
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
comment|//On symbian, broadcasts return 0 bytes written if none of the interfaces support it.
comment|//Notably the loopback interfaces do not. (though they do support multicast!?)
if|if
condition|(
name|written
operator|==
literal|0
condition|)
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"No active interface supports broadcast"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|written
argument_list|,
name|trollMessage
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wait until we receive it ourselves
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_FREEBSD
argument_list|)
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"Broadcasting to 255.255.255.255 does not work on FreeBSD"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|broadcastSocket
operator|.
name|waitForRead
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|broadcastSocket
operator|.
name|hasPendingDatagrams
argument_list|()
argument_list|)
expr_stmt|;
name|qlonglong
name|available
init|=
name|broadcastSocket
operator|.
name|pendingDatagramSize
argument_list|()
decl_stmt|;
name|QByteArray
name|response
decl_stmt|;
name|response
operator|.
name|resize
argument_list|(
name|available
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|broadcastSocket
operator|.
name|readDatagram
argument_list|(
name|response
operator|.
name|data
argument_list|()
argument_list|,
name|response
operator|.
name|size
argument_list|()
argument_list|)
operator|==
name|response
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|response
argument_list|,
name|trollMessage
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//---------------------------------------------------------------------------
end_comment
begin_function
DECL|function|serverTest
name|void
name|tst_PlatformSocketEngine
operator|::
name|serverTest
parameter_list|()
block|{
name|PLATFORMSOCKETENGINE
name|server
decl_stmt|;
comment|// Initialize a Tcp socket
name|QVERIFY
argument_list|(
name|server
operator|.
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|)
argument_list|)
expr_stmt|;
comment|// Bind to any port on all interfaces
name|QVERIFY
argument_list|(
name|server
operator|.
name|bind
argument_list|(
name|QHostAddress
argument_list|(
literal|"0.0.0.0"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|BoundState
argument_list|)
expr_stmt|;
name|quint16
name|port
init|=
name|server
operator|.
name|localPort
argument_list|()
decl_stmt|;
comment|// Listen for incoming connections
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ListeningState
argument_list|)
expr_stmt|;
comment|// Initialize a Tcp socket
name|PLATFORMSOCKETENGINE
name|client
decl_stmt|;
name|QVERIFY
argument_list|(
name|client
operator|.
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|client
operator|.
name|connectToHost
argument_list|(
name|QHostAddress
argument_list|(
literal|"127.0.0.1"
argument_list|)
argument_list|,
name|port
argument_list|)
condition|)
block|{
name|QVERIFY
argument_list|(
name|client
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectingState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|client
operator|.
name|waitForWrite
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|client
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
block|}
comment|// The server accepts the connection
name|int
name|socketDescriptor
init|=
name|server
operator|.
name|accept
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|socketDescriptor
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// A socket device is initialized on the server side, passing the
comment|// socket descriptor from accept(). It's pre-connected.
name|PLATFORMSOCKETENGINE
name|serverSocket
decl_stmt|;
name|QVERIFY
argument_list|(
name|serverSocket
operator|.
name|initialize
argument_list|(
name|socketDescriptor
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|serverSocket
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
comment|// The server socket sends a greeting to the clietn
name|QByteArray
name|greeting
init|=
literal|"Greetings!"
decl_stmt|;
name|QVERIFY
argument_list|(
name|serverSocket
operator|.
name|write
argument_list|(
name|greeting
operator|.
name|data
argument_list|()
argument_list|,
name|greeting
operator|.
name|size
argument_list|()
argument_list|)
operator|==
name|greeting
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// The client waits for the greeting to arrive
name|QVERIFY
argument_list|(
name|client
operator|.
name|waitForRead
argument_list|()
argument_list|)
expr_stmt|;
name|qint64
name|available
init|=
name|client
operator|.
name|bytesAvailable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|available
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// The client reads the greeting and checks that it's correct
name|QByteArray
name|response
decl_stmt|;
name|response
operator|.
name|resize
argument_list|(
name|available
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|client
operator|.
name|read
argument_list|(
name|response
operator|.
name|data
argument_list|()
argument_list|,
name|response
operator|.
name|size
argument_list|()
argument_list|)
operator|==
name|response
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|response
argument_list|,
name|greeting
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//---------------------------------------------------------------------------
end_comment
begin_function
DECL|function|udpLoopbackPerformance
name|void
name|tst_PlatformSocketEngine
operator|::
name|udpLoopbackPerformance
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|SYMBIAN_WINSOCK_CONNECTIVITY
name|QSKIP
argument_list|(
literal|"Not working on Emulator without WinPCAP"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|PLATFORMSOCKETENGINE
name|udpSocket
decl_stmt|;
comment|// Initialize device #1
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|UdpSocket
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|socketDescriptor
argument_list|()
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|protocol
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|IPv4Protocol
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|socketType
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UdpSocket
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
comment|// Bind #1 to localhost
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|bind
argument_list|(
name|QHostAddress
argument_list|(
literal|"127.0.0.1"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|BoundState
argument_list|)
expr_stmt|;
name|quint16
name|port
init|=
name|udpSocket
operator|.
name|localPort
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|port
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|// Initialize device #2
name|PLATFORMSOCKETENGINE
name|udpSocket2
decl_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket2
operator|.
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|UdpSocket
argument_list|)
argument_list|)
expr_stmt|;
comment|// Connect device #2 to #1
name|QVERIFY
argument_list|(
name|udpSocket2
operator|.
name|connectToHost
argument_list|(
name|QHostAddress
argument_list|(
literal|"127.0.0.1"
argument_list|)
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket2
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
specifier|const
name|int
name|messageSize
init|=
literal|8192
decl_stmt|;
name|QByteArray
name|message1
argument_list|(
name|messageSize
argument_list|,
literal|'@'
argument_list|)
decl_stmt|;
name|QByteArray
name|answer
argument_list|(
name|messageSize
argument_list|,
literal|'@'
argument_list|)
decl_stmt|;
name|QHostAddress
name|localhost
init|=
name|QHostAddress
operator|::
name|LocalHost
decl_stmt|;
name|qlonglong
name|readBytes
init|=
literal|0
decl_stmt|;
name|QTime
name|timer
decl_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
name|timer
operator|.
name|elapsed
argument_list|()
operator|<
literal|5000
condition|)
block|{
name|udpSocket2
operator|.
name|write
argument_list|(
name|message1
operator|.
name|data
argument_list|()
argument_list|,
name|message1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|udpSocket
operator|.
name|waitForRead
argument_list|()
expr_stmt|;
while|while
condition|(
name|udpSocket
operator|.
name|hasPendingDatagrams
argument_list|()
condition|)
block|{
name|readBytes
operator|+=
operator|(
name|qlonglong
operator|)
name|udpSocket
operator|.
name|readDatagram
argument_list|(
name|answer
operator|.
name|data
argument_list|()
argument_list|,
name|answer
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|qDebug
argument_list|(
literal|"\t\t%.1fMB/%.1fs: %.1fMB/s"
argument_list|,
name|readBytes
operator|/
operator|(
literal|1024.0
operator|*
literal|1024.0
operator|)
argument_list|,
name|timer
operator|.
name|elapsed
argument_list|()
operator|/
literal|1024.0
argument_list|,
operator|(
name|readBytes
operator|/
operator|(
name|timer
operator|.
name|elapsed
argument_list|()
operator|/
literal|1000.0
operator|)
operator|)
operator|/
operator|(
literal|1024
operator|*
literal|1024
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//---------------------------------------------------------------------------
end_comment
begin_function
DECL|function|tcpLoopbackPerformance
name|void
name|tst_PlatformSocketEngine
operator|::
name|tcpLoopbackPerformance
parameter_list|()
block|{
name|PLATFORMSOCKETENGINE
name|server
decl_stmt|;
comment|// Initialize a Tcp socket
name|QVERIFY
argument_list|(
name|server
operator|.
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|)
argument_list|)
expr_stmt|;
comment|// Bind to any port on all interfaces
name|QVERIFY
argument_list|(
name|server
operator|.
name|bind
argument_list|(
name|QHostAddress
argument_list|(
literal|"0.0.0.0"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|BoundState
argument_list|)
expr_stmt|;
name|quint16
name|port
init|=
name|server
operator|.
name|localPort
argument_list|()
decl_stmt|;
comment|// Listen for incoming connections
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ListeningState
argument_list|)
expr_stmt|;
comment|// Initialize a Tcp socket
name|PLATFORMSOCKETENGINE
name|client
decl_stmt|;
name|QVERIFY
argument_list|(
name|client
operator|.
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|)
argument_list|)
expr_stmt|;
comment|// Connect to our server
if|if
condition|(
operator|!
name|client
operator|.
name|connectToHost
argument_list|(
name|QHostAddress
argument_list|(
literal|"127.0.0.1"
argument_list|)
argument_list|,
name|port
argument_list|)
condition|)
block|{
name|QVERIFY
argument_list|(
name|client
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectingState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|client
operator|.
name|waitForWrite
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|client
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
block|}
comment|// The server accepts the connection
name|int
name|socketDescriptor
init|=
name|server
operator|.
name|accept
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|socketDescriptor
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// A socket device is initialized on the server side, passing the
comment|// socket descriptor from accept(). It's pre-connected.
name|PLATFORMSOCKETENGINE
name|serverSocket
decl_stmt|;
name|QVERIFY
argument_list|(
name|serverSocket
operator|.
name|initialize
argument_list|(
name|socketDescriptor
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|serverSocket
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
operator|&&
name|defined
argument_list|(
name|__WINS__
argument_list|)
specifier|const
name|int
name|messageSize
init|=
literal|1024
operator|*
literal|16
decl_stmt|;
else|#
directive|else
specifier|const
name|int
name|messageSize
init|=
literal|1024
operator|*
literal|256
decl_stmt|;
endif|#
directive|endif
name|QByteArray
name|message1
argument_list|(
name|messageSize
argument_list|,
literal|'@'
argument_list|)
decl_stmt|;
name|QByteArray
name|answer
argument_list|(
name|messageSize
argument_list|,
literal|'@'
argument_list|)
decl_stmt|;
name|QTime
name|timer
decl_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|qlonglong
name|readBytes
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|timer
operator|.
name|elapsed
argument_list|()
operator|<
literal|5000
condition|)
block|{
name|qlonglong
name|written
init|=
name|serverSocket
operator|.
name|write
argument_list|(
name|message1
operator|.
name|data
argument_list|()
argument_list|,
name|message1
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|written
operator|>
literal|0
condition|)
block|{
name|client
operator|.
name|waitForRead
argument_list|()
expr_stmt|;
if|if
condition|(
name|client
operator|.
name|bytesAvailable
argument_list|()
operator|>
literal|0
condition|)
block|{
name|qlonglong
name|readNow
init|=
name|client
operator|.
name|read
argument_list|(
name|answer
operator|.
name|data
argument_list|()
argument_list|,
name|answer
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|written
operator|-=
name|readNow
expr_stmt|;
name|readBytes
operator|+=
name|readNow
expr_stmt|;
block|}
block|}
block|}
name|qDebug
argument_list|(
literal|"\t\t%.1fMB/%.1fs: %.1fMB/s"
argument_list|,
name|readBytes
operator|/
operator|(
literal|1024.0
operator|*
literal|1024.0
operator|)
argument_list|,
name|timer
operator|.
name|elapsed
argument_list|()
operator|/
literal|1024.0
argument_list|,
operator|(
name|readBytes
operator|/
operator|(
name|timer
operator|.
name|elapsed
argument_list|()
operator|/
literal|1000.0
operator|)
operator|)
operator|/
operator|(
literal|1024
operator|*
literal|1024
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//---------------------------------------------------------------------------
end_comment
begin_function
DECL|function|readWriteBufferSize
name|void
name|tst_PlatformSocketEngine
operator|::
name|readWriteBufferSize
parameter_list|()
block|{
name|PLATFORMSOCKETENGINE
name|device
decl_stmt|;
name|QVERIFY
argument_list|(
name|device
operator|.
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|)
argument_list|)
expr_stmt|;
name|qint64
name|bufferSize
init|=
name|device
operator|.
name|receiveBufferSize
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|bufferSize
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|device
operator|.
name|setReceiveBufferSize
argument_list|(
name|bufferSize
operator|+
literal|1
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QEXPECT_FAIL
argument_list|(
literal|0
argument_list|,
literal|"Not supported by default on WinCE"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|device
operator|.
name|receiveBufferSize
argument_list|()
operator|>
name|bufferSize
argument_list|)
expr_stmt|;
name|bufferSize
operator|=
name|device
operator|.
name|sendBufferSize
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|bufferSize
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|device
operator|.
name|setSendBufferSize
argument_list|(
name|bufferSize
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|device
operator|.
name|sendBufferSize
argument_list|()
operator|>
name|bufferSize
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//---------------------------------------------------------------------------
end_comment
begin_function
DECL|function|tooManySockets
name|void
name|tst_PlatformSocketEngine
operator|::
name|tooManySockets
parameter_list|()
block|{
if|#
directive|if
name|defined
name|Q_OS_WIN
name|QSKIP
argument_list|(
literal|"Certain windows machines suffocate and spend too much time in this test."
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QList
argument_list|<
name|PLATFORMSOCKETENGINE
modifier|*
argument_list|>
name|sockets
decl_stmt|;
name|PLATFORMSOCKETENGINE
modifier|*
name|socketLayer
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|socketLayer
operator|=
operator|new
name|PLATFORMSOCKETENGINE
expr_stmt|;
name|sockets
operator|.
name|append
argument_list|(
name|socketLayer
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|socketLayer
operator|->
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|,
name|QAbstractSocket
operator|::
name|IPv4Protocol
argument_list|)
condition|)
break|break;
block|}
name|QCOMPARE
argument_list|(
name|socketLayer
operator|->
name|error
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|SocketResourceError
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|sockets
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//---------------------------------------------------------------------------
end_comment
begin_function
DECL|function|bind
name|void
name|tst_PlatformSocketEngine
operator|::
name|bind
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
name|Q_OS_WIN
operator|&&
operator|!
name|defined
name|Q_OS_SYMBIAN
name|PLATFORMSOCKETENGINE
name|binder
decl_stmt|;
name|QVERIFY
argument_list|(
name|binder
operator|.
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|,
name|QAbstractSocket
operator|::
name|IPv4Protocol
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|binder
operator|.
name|bind
argument_list|(
name|QHostAddress
operator|::
name|Any
argument_list|,
literal|82
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|binder
operator|.
name|error
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|SocketAccessError
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|PLATFORMSOCKETENGINE
name|binder2
decl_stmt|;
name|QVERIFY
argument_list|(
name|binder2
operator|.
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|,
name|QAbstractSocket
operator|::
name|IPv4Protocol
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|binder2
operator|.
name|bind
argument_list|(
name|QHostAddress
operator|::
name|Any
argument_list|,
literal|31180
argument_list|)
argument_list|)
expr_stmt|;
name|PLATFORMSOCKETENGINE
name|binder3
decl_stmt|;
name|QVERIFY
argument_list|(
name|binder3
operator|.
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|,
name|QAbstractSocket
operator|::
name|IPv4Protocol
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|binder3
operator|.
name|bind
argument_list|(
name|QHostAddress
operator|::
name|Any
argument_list|,
literal|31180
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|SYMBIAN_WINSOCK_CONNECTIVITY
name|qDebug
argument_list|(
literal|"On Symbian Emulator (WinSock) we get EADDRNOTAVAIL instead of EADDRINUSE"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|binder3
operator|.
name|error
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|SocketAddressNotAvailableError
argument_list|)
expr_stmt|;
else|#
directive|else
name|QVERIFY
argument_list|(
name|binder3
operator|.
name|error
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|AddressInUseError
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|//---------------------------------------------------------------------------
end_comment
begin_function
DECL|function|networkError
name|void
name|tst_PlatformSocketEngine
operator|::
name|networkError
parameter_list|()
block|{
name|PLATFORMSOCKETENGINE
name|client
decl_stmt|;
name|QVERIFY
argument_list|(
name|client
operator|.
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|,
name|QAbstractSocket
operator|::
name|IPv4Protocol
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|isConnected
init|=
name|client
operator|.
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverIP
argument_list|()
argument_list|,
literal|143
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isConnected
condition|)
block|{
name|QVERIFY
argument_list|(
name|client
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectingState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|client
operator|.
name|waitForWrite
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|client
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|client
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
comment|// An unexpected network error!
ifdef|#
directive|ifdef
name|Q_OS_WIN
comment|// could use shutdown to produce different errors
operator|::
name|closesocket
argument_list|(
name|client
operator|.
name|socketDescriptor
argument_list|()
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
name|RSocket
name|sock
decl_stmt|;
name|QVERIFY
argument_list|(
name|QSymbianSocketManager
operator|::
name|instance
argument_list|()
operator|.
name|lookupSocket
argument_list|(
name|client
operator|.
name|socketDescriptor
argument_list|()
argument_list|,
name|sock
argument_list|)
argument_list|)
expr_stmt|;
name|TRequestStatus
name|stat
decl_stmt|;
name|sock
operator|.
name|Shutdown
argument_list|(
name|RSocket
operator|::
name|EImmediate
argument_list|,
name|stat
argument_list|)
expr_stmt|;
name|User
operator|::
name|WaitForRequest
argument_list|(
name|stat
argument_list|)
expr_stmt|;
else|#
directive|else
operator|::
name|close
argument_list|(
name|client
operator|.
name|socketDescriptor
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|client
operator|.
name|read
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//---------------------------------------------------------------------------
end_comment
begin_function
DECL|function|setSocketDescriptor
name|void
name|tst_PlatformSocketEngine
operator|::
name|setSocketDescriptor
parameter_list|()
block|{
name|PLATFORMSOCKETENGINE
name|socket1
decl_stmt|;
name|QVERIFY
argument_list|(
name|socket1
operator|.
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|)
argument_list|)
expr_stmt|;
name|PLATFORMSOCKETENGINE
name|socket2
decl_stmt|;
name|QVERIFY
argument_list|(
name|socket2
operator|.
name|initialize
argument_list|(
name|socket1
operator|.
name|socketDescriptor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//---------------------------------------------------------------------------
end_comment
begin_function
DECL|function|invalidSend
name|void
name|tst_PlatformSocketEngine
operator|::
name|invalidSend
parameter_list|()
block|{
name|PLATFORMSOCKETENGINE
name|socket
decl_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|.
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
name|PLATFORMSOCKETENGINESTRING
literal|"::writeDatagram() was"
literal|" called by a socket other than QAbstractSocket::UdpSocket"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|writeDatagram
argument_list|(
literal|"hei"
argument_list|,
literal|3
argument_list|,
name|QHostAddress
operator|::
name|LocalHost
argument_list|,
literal|143
argument_list|)
argument_list|,
operator|(
name|qlonglong
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//---------------------------------------------------------------------------
end_comment
begin_function
DECL|function|receiveUrgentData
name|void
name|tst_PlatformSocketEngine
operator|::
name|receiveUrgentData
parameter_list|()
block|{
name|PLATFORMSOCKETENGINE
name|server
decl_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|)
argument_list|)
expr_stmt|;
comment|// Bind to any port on all interfaces
name|QVERIFY
argument_list|(
name|server
operator|.
name|bind
argument_list|(
name|QHostAddress
argument_list|(
literal|"0.0.0.0"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|BoundState
argument_list|)
expr_stmt|;
name|quint16
name|port
init|=
name|server
operator|.
name|localPort
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ListeningState
argument_list|)
expr_stmt|;
name|PLATFORMSOCKETENGINE
name|client
decl_stmt|;
name|QVERIFY
argument_list|(
name|client
operator|.
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|client
operator|.
name|connectToHost
argument_list|(
name|QHostAddress
argument_list|(
literal|"127.0.0.1"
argument_list|)
argument_list|,
name|port
argument_list|)
condition|)
block|{
name|QVERIFY
argument_list|(
name|client
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectingState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|client
operator|.
name|waitForWrite
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|client
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
block|}
name|int
name|socketDescriptor
init|=
name|server
operator|.
name|accept
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|socketDescriptor
operator|>
literal|0
argument_list|)
expr_stmt|;
name|PLATFORMSOCKETENGINE
name|serverSocket
decl_stmt|;
name|QVERIFY
argument_list|(
name|serverSocket
operator|.
name|initialize
argument_list|(
name|socketDescriptor
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|serverSocket
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|char
name|msg
decl_stmt|;
name|int
name|available
decl_stmt|;
name|QByteArray
name|response
decl_stmt|;
if|#
directive|if
name|defined
name|Q_OS_HPUX
name|QSKIP
argument_list|(
literal|"Native OOB data test doesn't work on HP-UX."
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QSKIP
argument_list|(
literal|"Native OOB data test doesn't work on WinCE."
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// The server sends an urgent message
name|msg
operator|=
literal|'Q'
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
name|RSocket
name|sock
decl_stmt|;
name|QVERIFY
argument_list|(
name|QSymbianSocketManager
operator|::
name|instance
argument_list|()
operator|.
name|lookupSocket
argument_list|(
name|socketDescriptor
argument_list|,
name|sock
argument_list|)
argument_list|)
expr_stmt|;
name|TRequestStatus
name|stat
decl_stmt|;
name|TSockXfrLength
name|len
decl_stmt|;
name|sock
operator|.
name|Send
argument_list|(
name|TPtrC8
argument_list|(
operator|(
name|TUint8
operator|*
operator|)
operator|&
name|msg
argument_list|,
literal|1
argument_list|)
argument_list|,
name|KSockWriteUrgent
argument_list|,
name|stat
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|User
operator|::
name|WaitForRequest
argument_list|(
name|stat
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|stat
operator|==
name|KErrNone
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|len
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
else|#
directive|else
name|QCOMPARE
argument_list|(
name|int
argument_list|(
operator|::
name|send
argument_list|(
name|socketDescriptor
argument_list|,
operator|&
name|msg
argument_list|,
sizeof|sizeof
argument_list|(
name|msg
argument_list|)
argument_list|,
name|MSG_OOB
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// The client receives the urgent message
name|QVERIFY
argument_list|(
name|client
operator|.
name|waitForRead
argument_list|()
argument_list|)
expr_stmt|;
name|available
operator|=
name|client
operator|.
name|bytesAvailable
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|available
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|response
operator|.
name|resize
argument_list|(
name|available
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|client
operator|.
name|read
argument_list|(
name|response
operator|.
name|data
argument_list|()
argument_list|,
name|response
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|response
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|msg
argument_list|)
expr_stmt|;
comment|// The client sends an urgent message
name|msg
operator|=
literal|'T'
expr_stmt|;
name|int
name|clientDescriptor
init|=
name|client
operator|.
name|socketDescriptor
argument_list|()
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
name|QVERIFY
argument_list|(
name|QSymbianSocketManager
operator|::
name|instance
argument_list|()
operator|.
name|lookupSocket
argument_list|(
name|clientDescriptor
argument_list|,
name|sock
argument_list|)
argument_list|)
expr_stmt|;
name|sock
operator|.
name|Send
argument_list|(
name|TPtrC8
argument_list|(
operator|(
name|TUint8
operator|*
operator|)
operator|&
name|msg
argument_list|,
literal|1
argument_list|)
argument_list|,
name|KSockWriteUrgent
argument_list|,
name|stat
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|User
operator|::
name|WaitForRequest
argument_list|(
name|stat
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|stat
operator|==
name|KErrNone
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|len
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
else|#
directive|else
name|QCOMPARE
argument_list|(
name|int
argument_list|(
operator|::
name|send
argument_list|(
name|clientDescriptor
argument_list|,
operator|&
name|msg
argument_list|,
sizeof|sizeof
argument_list|(
name|msg
argument_list|)
argument_list|,
name|MSG_OOB
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// The server receives the urgent message
name|QVERIFY
argument_list|(
name|serverSocket
operator|.
name|waitForRead
argument_list|()
argument_list|)
expr_stmt|;
name|available
operator|=
name|serverSocket
operator|.
name|bytesAvailable
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|available
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|response
operator|.
name|resize
argument_list|(
name|available
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|serverSocket
operator|.
name|read
argument_list|(
name|response
operator|.
name|data
argument_list|()
argument_list|,
name|response
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|response
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_PlatformSocketEngine
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_platformsocketengine.moc"
end_include
end_unit
