begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qtextedit.h>
end_include
begin_include
include|#
directive|include
file|<qtextcursor.h>
end_include
begin_include
include|#
directive|include
file|<qtextlist.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qclipboard.h>
end_include
begin_include
include|#
directive|include
file|<qtextbrowser.h>
end_include
begin_include
include|#
directive|include
file|<private/qwidgettextcontrol_p.h>
end_include
begin_include
include|#
directive|include
file|<qscrollbar.h>
end_include
begin_include
include|#
directive|include
file|<qtextobject.h>
end_include
begin_include
include|#
directive|include
file|<qmenu.h>
end_include
begin_include
include|#
directive|include
file|<qabstracttextdocumentlayout.h>
end_include
begin_include
include|#
directive|include
file|<qtextdocumentfragment.h>
end_include
begin_include
include|#
directive|include
file|"qplaintextedit.h"
end_include
begin_include
include|#
directive|include
file|"../../../shared/platformclipboard.h"
end_include
begin_include
include|#
directive|include
file|"../../../qtest-config.h"
end_include
begin_comment
comment|//Used in copyAvailable
end_comment
begin_typedef
DECL|typedef|keyPairType
typedef|typedef
name|QPair
argument_list|<
name|Qt
operator|::
name|Key
argument_list|,
name|Qt
operator|::
name|KeyboardModifier
argument_list|>
name|keyPairType
typedef|;
end_typedef
begin_typedef
DECL|typedef|pairListType
typedef|typedef
name|QList
argument_list|<
name|keyPairType
argument_list|>
name|pairListType
typedef|;
end_typedef
begin_expr_stmt
DECL|variable|keyPairType
name|Q_DECLARE_METATYPE
argument_list|(
name|keyPairType
argument_list|)
expr_stmt|;
end_expr_stmt
begin_macro
name|QT_FORWARD_DECLARE_CLASS
argument_list|(
argument|QPlainTextEdit
argument_list|)
end_macro
begin_class
DECL|class|tst_QPlainTextEdit
class|class
name|tst_QPlainTextEdit
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QPlainTextEdit
parameter_list|()
constructor_decl|;
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|getSetCheck
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
name|void
name|clearMustNotChangeClipboard
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|clearMustNotResetRootFrameMarginToDefault
parameter_list|()
function_decl|;
name|void
name|paragSeparatorOnPlaintextAppend
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
name|void
name|selectAllSetsNotSelection
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|asciiTab
parameter_list|()
function_decl|;
name|void
name|setDocument
parameter_list|()
function_decl|;
name|void
name|emptyAppend
parameter_list|()
function_decl|;
name|void
name|appendOnEmptyDocumentShouldReuseInitialParagraph
parameter_list|()
function_decl|;
name|void
name|cursorPositionChanged
parameter_list|()
function_decl|;
name|void
name|setTextCursor
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
name|void
name|undoAvailableAfterPaste
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|undoRedoAvailableRepetition
parameter_list|()
function_decl|;
name|void
name|appendShouldNotTouchTheSelection
parameter_list|()
function_decl|;
name|void
name|backspace
parameter_list|()
function_decl|;
name|void
name|shiftBackspace
parameter_list|()
function_decl|;
name|void
name|undoRedo
parameter_list|()
function_decl|;
name|void
name|preserveCharFormatInAppend
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
name|void
name|copyAndSelectAllInReadonly
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|charWithAltOrCtrlModifier_data
parameter_list|()
function_decl|;
name|void
name|charWithAltOrCtrlModifier
parameter_list|()
function_decl|;
name|void
name|noPropertiesOnDefaultTextEditCharFormat
parameter_list|()
function_decl|;
name|void
name|setPlainTextShouldEmitTextChangedOnce
parameter_list|()
function_decl|;
name|void
name|overwriteMode
parameter_list|()
function_decl|;
name|void
name|shiftDownInLineLastShouldSelectToEnd_data
parameter_list|()
function_decl|;
name|void
name|shiftDownInLineLastShouldSelectToEnd
parameter_list|()
function_decl|;
name|void
name|undoRedoShouldRepositionTextEditCursor
parameter_list|()
function_decl|;
name|void
name|lineWrapModes
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QTEST_NO_CURSOR
name|void
name|mouseCursorShape
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|implicitClear
parameter_list|()
function_decl|;
name|void
name|undoRedoAfterSetContent
parameter_list|()
function_decl|;
name|void
name|numPadKeyNavigation
parameter_list|()
function_decl|;
name|void
name|moveCursor
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
name|void
name|mimeDataReimplementations
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|shiftEnterShouldInsertLineSeparator
parameter_list|()
function_decl|;
name|void
name|selectWordsFromStringsContainingSeparators_data
parameter_list|()
function_decl|;
name|void
name|selectWordsFromStringsContainingSeparators
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
name|void
name|canPaste
parameter_list|()
function_decl|;
name|void
name|copyAvailable_data
parameter_list|()
function_decl|;
name|void
name|copyAvailable
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|ensureCursorVisibleOnInitialShow
parameter_list|()
function_decl|;
name|void
name|setTextInsideResizeEvent
parameter_list|()
function_decl|;
name|void
name|colorfulAppend
parameter_list|()
function_decl|;
name|void
name|ensureVisibleWithRtl
parameter_list|()
function_decl|;
name|void
name|preserveCharFormatAfterSetPlainText
parameter_list|()
function_decl|;
name|void
name|extraSelections
parameter_list|()
function_decl|;
name|void
name|adjustScrollbars
parameter_list|()
function_decl|;
name|void
name|textObscuredByScrollbars
parameter_list|()
function_decl|;
name|void
name|setTextPreservesUndoRedoEnabled
parameter_list|()
function_decl|;
name|void
name|wordWrapProperty
parameter_list|()
function_decl|;
name|void
name|lineWrapProperty
parameter_list|()
function_decl|;
name|void
name|selectionChanged
parameter_list|()
function_decl|;
name|void
name|blockCountChanged
parameter_list|()
function_decl|;
name|void
name|insertAndScrollToBottom
parameter_list|()
function_decl|;
name|void
name|inputMethodQueryImHints_data
parameter_list|()
function_decl|;
name|void
name|inputMethodQueryImHints
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_REGEXP
name|void
name|findWithRegExp
parameter_list|()
function_decl|;
name|void
name|findBackwardWithRegExp
parameter_list|()
function_decl|;
name|void
name|findWithRegExpReturnsFalseIfNoMoreResults
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|layoutAfterMultiLineRemove
parameter_list|()
function_decl|;
name|void
name|undoCommandRemovesAndReinsertsBlock
parameter_list|()
function_decl|;
name|void
name|taskQTBUG_43562_lineCountCrash
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
name|void
name|contextMenu
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|inputMethodCursorRect
parameter_list|()
function_decl|;
private|private:
name|void
name|createSelection
parameter_list|()
function_decl|;
name|int
name|blockCount
parameter_list|()
specifier|const
function_decl|;
name|int
name|lineCount
parameter_list|()
specifier|const
function_decl|;
DECL|member|ed
name|QPlainTextEdit
modifier|*
name|ed
decl_stmt|;
DECL|member|rootFrameMargin
name|qreal
name|rootFrameMargin
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QPlainTextEdit
operator|::
name|getSetCheck
parameter_list|()
block|{
name|QPlainTextEdit
name|obj1
decl_stmt|;
comment|// QTextDocument * QPlainTextEdit::document()
comment|// void QPlainTextEdit::setDocument(QTextDocument *)
name|QTextDocument
modifier|*
name|var1
init|=
operator|new
name|QTextDocument
decl_stmt|;
name|var1
operator|->
name|setDocumentLayout
argument_list|(
operator|new
name|QPlainTextDocumentLayout
argument_list|(
name|var1
argument_list|)
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setDocument
argument_list|(
name|var1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|var1
argument_list|,
name|obj1
operator|.
name|document
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setDocument
argument_list|(
operator|(
name|QTextDocument
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|var1
operator|!=
name|obj1
operator|.
name|document
argument_list|()
argument_list|)
expr_stmt|;
comment|// QPlainTextEdit creates a new document when setting 0
name|QVERIFY
argument_list|(
operator|(
name|QTextDocument
operator|*
operator|)
literal|0
operator|!=
name|obj1
operator|.
name|document
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|var1
expr_stmt|;
comment|// bool QPlainTextEdit::tabChangesFocus()
comment|// void QPlainTextEdit::setTabChangesFocus(bool)
name|obj1
operator|.
name|setTabChangesFocus
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|tabChangesFocus
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setTabChangesFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|tabChangesFocus
argument_list|()
argument_list|)
expr_stmt|;
comment|// LineWrapMode QPlainTextEdit::lineWrapMode()
comment|// void QPlainTextEdit::setLineWrapMode(LineWrapMode)
name|obj1
operator|.
name|setLineWrapMode
argument_list|(
name|QPlainTextEdit
operator|::
name|LineWrapMode
argument_list|(
name|QPlainTextEdit
operator|::
name|NoWrap
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QPlainTextEdit
operator|::
name|LineWrapMode
argument_list|(
name|QPlainTextEdit
operator|::
name|NoWrap
argument_list|)
argument_list|,
name|obj1
operator|.
name|lineWrapMode
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setLineWrapMode
argument_list|(
name|QPlainTextEdit
operator|::
name|LineWrapMode
argument_list|(
name|QPlainTextEdit
operator|::
name|WidgetWidth
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QPlainTextEdit
operator|::
name|LineWrapMode
argument_list|(
name|QPlainTextEdit
operator|::
name|WidgetWidth
argument_list|)
argument_list|,
name|obj1
operator|.
name|lineWrapMode
argument_list|()
argument_list|)
expr_stmt|;
comment|//     obj1.setLineWrapMode(QPlainTextEdit::LineWrapMode(QPlainTextEdit::FixedPixelWidth));
comment|//     QCOMPARE(QPlainTextEdit::LineWrapMode(QPlainTextEdit::FixedPixelWidth), obj1.lineWrapMode());
comment|//     obj1.setLineWrapMode(QPlainTextEdit::LineWrapMode(QPlainTextEdit::FixedColumnWidth));
comment|//     QCOMPARE(QPlainTextEdit::LineWrapMode(QPlainTextEdit::FixedColumnWidth), obj1.lineWrapMode());
comment|// bool QPlainTextEdit::overwriteMode()
comment|// void QPlainTextEdit::setOverwriteMode(bool)
name|obj1
operator|.
name|setOverwriteMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|overwriteMode
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setOverwriteMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|overwriteMode
argument_list|()
argument_list|)
expr_stmt|;
comment|// int QPlainTextEdit::tabStopWidth()
comment|// void QPlainTextEdit::setTabStopWidth(int)
name|obj1
operator|.
name|setTabStopWidth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|tabStopWidth
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setTabStopWidth
argument_list|(
name|INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|tabStopWidth
argument_list|()
argument_list|)
expr_stmt|;
comment|// Makes no sense to set a negative tabstop value
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
comment|// due to rounding error in qRound when qreal==float
comment|// we cannot use INT_MAX for this check
name|obj1
operator|.
name|setTabStopWidth
argument_list|(
name|SHRT_MAX
operator|*
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|SHRT_MAX
operator|*
literal|2
argument_list|,
name|obj1
operator|.
name|tabStopWidth
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|obj1
operator|.
name|setTabStopWidth
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MAX
argument_list|,
name|obj1
operator|.
name|tabStopWidth
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_class
DECL|class|QtTestDocumentLayout
class|class
name|QtTestDocumentLayout
super|:
specifier|public
name|QAbstractTextDocumentLayout
block|{
name|Q_OBJECT
public|public:
DECL|function|QtTestDocumentLayout
specifier|inline
name|QtTestDocumentLayout
parameter_list|(
name|QPlainTextEdit
modifier|*
name|edit
parameter_list|,
name|QTextDocument
modifier|*
name|doc
parameter_list|,
name|int
modifier|&
name|itCount
parameter_list|)
member_init_list|:
name|QAbstractTextDocumentLayout
argument_list|(
name|doc
argument_list|)
member_init_list|,
name|useBiggerSize
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|ed
argument_list|(
name|edit
argument_list|)
member_init_list|,
name|iterationCounter
argument_list|(
name|itCount
argument_list|)
block|{}
DECL|function|draw
specifier|virtual
name|void
name|draw
parameter_list|(
name|QPainter
modifier|*
parameter_list|,
specifier|const
name|QAbstractTextDocumentLayout
operator|::
name|PaintContext
modifier|&
parameter_list|)
block|{}
DECL|function|hitTest
specifier|virtual
name|int
name|hitTest
parameter_list|(
specifier|const
name|QPointF
modifier|&
parameter_list|,
name|Qt
operator|::
name|HitTestAccuracy
parameter_list|)
specifier|const
block|{
return|return
literal|0
return|;
block|}
DECL|function|documentChanged
specifier|virtual
name|void
name|documentChanged
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
block|{}
DECL|function|pageCount
specifier|virtual
name|int
name|pageCount
parameter_list|()
specifier|const
block|{
return|return
literal|1
return|;
block|}
DECL|function|documentSize
specifier|virtual
name|QSizeF
name|documentSize
parameter_list|()
specifier|const
block|{
return|return
name|usedSize
return|;
block|}
DECL|function|frameBoundingRect
specifier|virtual
name|QRectF
name|frameBoundingRect
parameter_list|(
name|QTextFrame
modifier|*
parameter_list|)
specifier|const
block|{
return|return
name|QRectF
argument_list|()
return|;
block|}
DECL|function|blockBoundingRect
specifier|virtual
name|QRectF
name|blockBoundingRect
parameter_list|(
specifier|const
name|QTextBlock
modifier|&
parameter_list|)
specifier|const
block|{
return|return
name|QRectF
argument_list|()
return|;
block|}
DECL|member|useBiggerSize
name|bool
name|useBiggerSize
decl_stmt|;
DECL|member|usedSize
name|QSize
name|usedSize
decl_stmt|;
DECL|member|ed
name|QPlainTextEdit
modifier|*
name|ed
decl_stmt|;
DECL|member|iterationCounter
name|int
modifier|&
name|iterationCounter
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QPlainTextEdit
name|tst_QPlainTextEdit
operator|::
name|tst_QPlainTextEdit
parameter_list|()
block|{}
end_constructor
begin_function
DECL|function|initTestCase
name|void
name|tst_QPlainTextEdit
operator|::
name|initTestCase
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE
comment|//disable magic for WindowsCE
name|qApp
operator|->
name|setAutoMaximizeThreshold
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_QPlainTextEdit
operator|::
name|init
parameter_list|()
block|{
name|ed
operator|=
operator|new
name|QPlainTextEdit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|rootFrameMargin
operator|=
name|ed
operator|->
name|document
argument_list|()
operator|->
name|documentMargin
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QPlainTextEdit
operator|::
name|cleanup
parameter_list|()
block|{
operator|delete
name|ed
expr_stmt|;
name|ed
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createSelection
name|void
name|tst_QPlainTextEdit
operator|::
name|createSelection
parameter_list|()
block|{
name|QTest
operator|::
name|keyClicks
argument_list|(
name|ed
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
comment|/* go to start */
ifndef|#
directive|ifndef
name|Q_OS_MAC
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Home
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
else|#
directive|else
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Home
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|/* select until end of text */
ifndef|#
directive|ifndef
name|Q_OS_MAC
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_End
argument_list|,
name|Qt
operator|::
name|ControlModifier
operator||
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
else|#
directive|else
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_End
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|11
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
end_ifndef
begin_function
DECL|function|clearMustNotChangeClipboard
name|void
name|tst_QPlainTextEdit
operator|::
name|clearMustNotChangeClipboard
parameter_list|()
block|{
if|if
condition|(
operator|!
name|PlatformClipboard
operator|::
name|isAvailable
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"Clipboard not working with cron-started unit tests"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|insertText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|QString
name|txt
argument_list|(
literal|"This is different text"
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|setText
argument_list|(
name|txt
argument_list|)
expr_stmt|;
name|ed
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|text
argument_list|()
argument_list|,
name|txt
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|clearMustNotResetRootFrameMarginToDefault
name|void
name|tst_QPlainTextEdit
operator|::
name|clearMustNotResetRootFrameMarginToDefault
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|document
argument_list|()
operator|->
name|rootFrame
argument_list|()
operator|->
name|frameFormat
argument_list|()
operator|.
name|margin
argument_list|()
argument_list|,
name|rootFrameMargin
argument_list|)
expr_stmt|;
name|ed
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|document
argument_list|()
operator|->
name|rootFrame
argument_list|()
operator|->
name|frameFormat
argument_list|()
operator|.
name|margin
argument_list|()
argument_list|,
name|rootFrameMargin
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paragSeparatorOnPlaintextAppend
name|void
name|tst_QPlainTextEdit
operator|::
name|paragSeparatorOnPlaintextAppend
parameter_list|()
block|{
name|ed
operator|->
name|appendPlainText
argument_list|(
literal|"Hello\nWorld"
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
name|QTextBlock
name|blk
init|=
name|ed
operator|->
name|document
argument_list|()
operator|->
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|blk
operator|.
name|isValid
argument_list|()
condition|)
block|{
operator|++
name|cnt
expr_stmt|;
name|blk
operator|=
name|blk
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|cnt
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
end_ifndef
begin_function
DECL|function|selectAllSetsNotSelection
name|void
name|tst_QPlainTextEdit
operator|::
name|selectAllSetsNotSelection
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|supportsSelection
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"Test only relevant for systems with selection"
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|setText
argument_list|(
name|QString
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|QClipboard
operator|::
name|Selection
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|text
argument_list|(
name|QClipboard
operator|::
name|Selection
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
name|ed
operator|->
name|insertPlainText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|selectAll
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|text
argument_list|(
name|QClipboard
operator|::
name|Selection
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|asciiTab
name|void
name|tst_QPlainTextEdit
operator|::
name|asciiTab
parameter_list|()
block|{
name|QPlainTextEdit
name|edit
decl_stmt|;
name|edit
operator|.
name|setPlainText
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|edit
operator|.
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|edit
operator|.
name|toPlainText
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QChar
argument_list|(
literal|'\t'
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setDocument
name|void
name|tst_QPlainTextEdit
operator|::
name|setDocument
parameter_list|()
block|{
name|QTextDocument
modifier|*
name|document
init|=
operator|new
name|QTextDocument
argument_list|(
name|ed
argument_list|)
decl_stmt|;
name|document
operator|->
name|setDocumentLayout
argument_list|(
operator|new
name|QPlainTextDocumentLayout
argument_list|(
name|document
argument_list|)
argument_list|)
expr_stmt|;
name|QTextCursor
argument_list|(
name|document
argument_list|)
operator|.
name|insertText
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|blockCount
name|int
name|tst_QPlainTextEdit
operator|::
name|blockCount
parameter_list|()
specifier|const
block|{
name|int
name|blocks
init|=
literal|0
decl_stmt|;
for|for
control|(
name|QTextBlock
name|block
init|=
name|ed
operator|->
name|document
argument_list|()
operator|->
name|begin
argument_list|()
init|;
name|block
operator|.
name|isValid
argument_list|()
condition|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
control|)
operator|++
name|blocks
expr_stmt|;
return|return
name|blocks
return|;
block|}
end_function
begin_function
DECL|function|lineCount
name|int
name|tst_QPlainTextEdit
operator|::
name|lineCount
parameter_list|()
specifier|const
block|{
name|int
name|lines
init|=
literal|0
decl_stmt|;
for|for
control|(
name|QTextBlock
name|block
init|=
name|ed
operator|->
name|document
argument_list|()
operator|->
name|begin
argument_list|()
init|;
name|block
operator|.
name|isValid
argument_list|()
condition|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
control|)
block|{
name|ed
operator|->
name|document
argument_list|()
operator|->
name|documentLayout
argument_list|()
operator|->
name|blockBoundingRect
argument_list|(
name|block
argument_list|)
expr_stmt|;
name|lines
operator|+=
name|block
operator|.
name|layout
argument_list|()
operator|->
name|lineCount
argument_list|()
expr_stmt|;
block|}
return|return
name|lines
return|;
block|}
end_function
begin_comment
comment|// Supporter issue #56783
end_comment
begin_function
DECL|function|emptyAppend
name|void
name|tst_QPlainTextEdit
operator|::
name|emptyAppend
parameter_list|()
block|{
name|ed
operator|->
name|appendPlainText
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|blockCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ed
operator|->
name|appendPlainText
argument_list|(
name|QString
operator|::
name|null
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|blockCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ed
operator|->
name|appendPlainText
argument_list|(
name|QString
argument_list|(
literal|"   "
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|blockCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|appendOnEmptyDocumentShouldReuseInitialParagraph
name|void
name|tst_QPlainTextEdit
operator|::
name|appendOnEmptyDocumentShouldReuseInitialParagraph
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|blockCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ed
operator|->
name|appendPlainText
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|blockCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|CursorPositionChangedRecorder
class|class
name|CursorPositionChangedRecorder
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|CursorPositionChangedRecorder
specifier|inline
name|CursorPositionChangedRecorder
parameter_list|(
name|QPlainTextEdit
modifier|*
name|ed
parameter_list|)
member_init_list|:
name|editor
argument_list|(
name|ed
argument_list|)
block|{
name|connect
argument_list|(
name|editor
argument_list|,
name|SIGNAL
argument_list|(
name|cursorPositionChanged
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|recordCursorPos
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|member|cursorPositions
name|QList
argument_list|<
name|int
argument_list|>
name|cursorPositions
decl_stmt|;
private|private
name|slots
private|:
DECL|function|recordCursorPos
name|void
name|recordCursorPos
parameter_list|()
block|{
name|cursorPositions
operator|.
name|append
argument_list|(
name|editor
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|member|editor
name|QPlainTextEdit
modifier|*
name|editor
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|cursorPositionChanged
name|void
name|tst_QPlainTextEdit
operator|::
name|cursorPositionChanged
parameter_list|()
block|{
name|QSignalSpy
name|spy
argument_list|(
name|ed
argument_list|,
name|SIGNAL
argument_list|(
name|cursorPositionChanged
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursor
init|=
name|ed
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|CursorPositionChangedRecorder
name|spy2
argument_list|(
name|ed
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy2
operator|.
name|cursorPositions
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy2
operator|.
name|cursorPositions
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setTextCursor
name|void
name|tst_QPlainTextEdit
operator|::
name|setTextCursor
parameter_list|()
block|{
name|QSignalSpy
name|spy
argument_list|(
name|ed
argument_list|,
name|SIGNAL
argument_list|(
name|cursorPositionChanged
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursor
init|=
name|ed
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ed
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
end_ifndef
begin_function
DECL|function|undoAvailableAfterPaste
name|void
name|tst_QPlainTextEdit
operator|::
name|undoAvailableAfterPaste
parameter_list|()
block|{
if|if
condition|(
operator|!
name|PlatformClipboard
operator|::
name|isAvailable
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"Clipboard not working with cron-started unit tests"
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
name|ed
operator|->
name|document
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|undoAvailable
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|txt
argument_list|(
literal|"Test"
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|setText
argument_list|(
name|txt
argument_list|)
expr_stmt|;
name|ed
operator|->
name|paste
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|count
argument_list|()
operator|>=
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|txt
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|UndoRedoRecorder
class|class
name|UndoRedoRecorder
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|UndoRedoRecorder
name|UndoRedoRecorder
parameter_list|(
name|QTextDocument
modifier|*
name|doc
parameter_list|)
member_init_list|:
name|undoRepetitions
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|redoRepetitions
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|undoCount
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|redoCount
argument_list|(
literal|0
argument_list|)
block|{
name|connect
argument_list|(
name|doc
argument_list|,
name|SIGNAL
argument_list|(
name|undoAvailable
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|undoAvailable
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|doc
argument_list|,
name|SIGNAL
argument_list|(
name|redoAvailable
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|redoAvailable
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|member|undoRepetitions
name|bool
name|undoRepetitions
decl_stmt|;
DECL|member|redoRepetitions
name|bool
name|redoRepetitions
decl_stmt|;
private|private
name|slots
private|:
DECL|function|undoAvailable
name|void
name|undoAvailable
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|undoCount
operator|>
literal|0
operator|&&
name|enabled
operator|==
name|lastUndoEnabled
condition|)
name|undoRepetitions
operator|=
literal|true
expr_stmt|;
operator|++
name|undoCount
expr_stmt|;
name|lastUndoEnabled
operator|=
name|enabled
expr_stmt|;
block|}
DECL|function|redoAvailable
name|void
name|redoAvailable
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|redoCount
operator|>
literal|0
operator|&&
name|enabled
operator|==
name|lastRedoEnabled
condition|)
name|redoRepetitions
operator|=
literal|true
expr_stmt|;
operator|++
name|redoCount
expr_stmt|;
name|lastRedoEnabled
operator|=
name|enabled
expr_stmt|;
block|}
private|private:
DECL|member|lastUndoEnabled
name|bool
name|lastUndoEnabled
decl_stmt|;
DECL|member|lastRedoEnabled
name|bool
name|lastRedoEnabled
decl_stmt|;
DECL|member|undoCount
name|int
name|undoCount
decl_stmt|;
DECL|member|redoCount
name|int
name|redoCount
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|undoRedoAvailableRepetition
name|void
name|tst_QPlainTextEdit
operator|::
name|undoRedoAvailableRepetition
parameter_list|()
block|{
name|UndoRedoRecorder
name|spy
argument_list|(
name|ed
operator|->
name|document
argument_list|()
argument_list|)
decl_stmt|;
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|insertText
argument_list|(
literal|"ABC\n\nDEF\n\nGHI\n"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|insertText
argument_list|(
literal|"foo\n"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|insertText
argument_list|(
literal|"bar\n"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|undo
argument_list|()
expr_stmt|;
name|ed
operator|->
name|undo
argument_list|()
expr_stmt|;
name|ed
operator|->
name|undo
argument_list|()
expr_stmt|;
name|ed
operator|->
name|redo
argument_list|()
expr_stmt|;
name|ed
operator|->
name|redo
argument_list|()
expr_stmt|;
name|ed
operator|->
name|redo
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|spy
operator|.
name|undoRepetitions
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|spy
operator|.
name|redoRepetitions
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|appendShouldNotTouchTheSelection
name|void
name|tst_QPlainTextEdit
operator|::
name|appendShouldNotTouchTheSelection
parameter_list|()
block|{
name|QTextCursor
name|cursor
argument_list|(
name|ed
operator|->
name|document
argument_list|()
argument_list|)
decl_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"H"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"ey"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"some random text inbetween"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selectedText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hey"
argument_list|)
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|hasSelection
argument_list|()
argument_list|)
expr_stmt|;
name|ed
operator|->
name|appendHtml
argument_list|(
literal|"<b>Some Bold Text</b>"
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|backspace
name|void
name|tst_QPlainTextEdit
operator|::
name|backspace
parameter_list|()
block|{
name|QTextCursor
name|cursor
init|=
name|ed
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|QTextListFormat
name|listFmt
decl_stmt|;
name|listFmt
operator|.
name|setStyle
argument_list|(
name|QTextListFormat
operator|::
name|ListDisc
argument_list|)
expr_stmt|;
name|listFmt
operator|.
name|setIndent
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertList
argument_list|(
name|listFmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
comment|// delete 'A'
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Backspace
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|currentList
argument_list|()
argument_list|)
expr_stmt|;
comment|// delete list
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Backspace
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|currentList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|indent
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// outdent paragraph
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Backspace
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|indent
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|shiftBackspace
name|void
name|tst_QPlainTextEdit
operator|::
name|shiftBackspace
parameter_list|()
block|{
name|QTextCursor
name|cursor
init|=
name|ed
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|QTextListFormat
name|listFmt
decl_stmt|;
name|listFmt
operator|.
name|setStyle
argument_list|(
name|QTextListFormat
operator|::
name|ListDisc
argument_list|)
expr_stmt|;
name|listFmt
operator|.
name|setIndent
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertList
argument_list|(
name|listFmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
comment|// delete 'A'
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Backspace
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|currentList
argument_list|()
argument_list|)
expr_stmt|;
comment|// delete list
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Backspace
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|currentList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|indent
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// outdent paragraph
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Backspace
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|blockFormat
argument_list|()
operator|.
name|indent
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|undoRedo
name|void
name|tst_QPlainTextEdit
operator|::
name|undoRedo
parameter_list|()
block|{
name|ed
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|keyClicks
argument_list|(
name|ed
argument_list|,
literal|"abc d"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"abc d"
argument_list|)
argument_list|)
expr_stmt|;
name|ed
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|ed
operator|->
name|redo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"abc d"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
comment|// shortcut for undo
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Backspace
argument_list|,
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
comment|// shortcut for redo
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Backspace
argument_list|,
name|Qt
operator|::
name|ShiftModifier
operator||
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"abc d"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|// Task #70465
end_comment
begin_function
DECL|function|preserveCharFormatInAppend
name|void
name|tst_QPlainTextEdit
operator|::
name|preserveCharFormatInAppend
parameter_list|()
block|{
name|ed
operator|->
name|appendHtml
argument_list|(
literal|"First para"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|appendHtml
argument_list|(
literal|"<b>Second para</b>"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|appendHtml
argument_list|(
literal|"third para"
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursor
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|fontWeight
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|QFont
operator|::
name|Normal
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"First para"
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|fontWeight
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Second para"
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|fontWeight
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|QFont
operator|::
name|Normal
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"third para"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
end_ifndef
begin_function
DECL|function|copyAndSelectAllInReadonly
name|void
name|tst_QPlainTextEdit
operator|::
name|copyAndSelectAllInReadonly
parameter_list|()
block|{
if|if
condition|(
operator|!
name|PlatformClipboard
operator|::
name|isAvailable
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"Clipboard not working with cron-started unit tests"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursor
init|=
name|ed
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
name|ed
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|hasSelection
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hello World"
argument_list|)
argument_list|)
expr_stmt|;
comment|// shouldn't do anything
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hello World"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|hasSelection
argument_list|()
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|setText
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_C
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hello World"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|Qt::KeyboardModifiers
argument_list|)
end_macro
begin_comment
comment|// Test how QWidgetTextControlPrivate (used in QPlainTextEdit, QTextEdit)
end_comment
begin_comment
comment|// handles input with modifiers.
end_comment
begin_function
DECL|function|charWithAltOrCtrlModifier_data
name|void
name|tst_QPlainTextEdit
operator|::
name|charWithAltOrCtrlModifier_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|Qt
operator|::
name|KeyboardModifiers
argument_list|>
argument_list|(
literal|"modifiers"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"textExpected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-modifiers"
argument_list|)
operator|<<
name|Qt
operator|::
name|KeyboardModifiers
argument_list|()
operator|<<
literal|true
expr_stmt|;
comment|// Ctrl, Ctrl+Shift: No text (QTBUG-35734)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ctrl"
argument_list|)
operator|<<
name|Qt
operator|::
name|KeyboardModifiers
argument_list|(
name|Qt
operator|::
name|ControlModifier
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ctrl-shift"
argument_list|)
operator|<<
name|Qt
operator|::
name|KeyboardModifiers
argument_list|(
name|Qt
operator|::
name|ShiftModifier
operator||
name|Qt
operator|::
name|ControlModifier
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"alt"
argument_list|)
operator|<<
name|Qt
operator|::
name|KeyboardModifiers
argument_list|(
name|Qt
operator|::
name|AltModifier
argument_list|)
operator|<<
literal|true
expr_stmt|;
comment|// Alt-Ctrl (Alt-Gr on German keyboards, Task 129098): Expect text
name|QTest
operator|::
name|newRow
argument_list|(
literal|"alt-ctrl"
argument_list|)
operator|<<
operator|(
name|Qt
operator|::
name|AltModifier
operator||
name|Qt
operator|::
name|ControlModifier
operator|)
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|charWithAltOrCtrlModifier
name|void
name|tst_QPlainTextEdit
operator|::
name|charWithAltOrCtrlModifier
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|Qt
operator|::
name|KeyboardModifiers
argument_list|,
name|modifiers
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|textExpected
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_At
argument_list|,
name|modifiers
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|expectedText
init|=
name|textExpected
condition|?
name|QLatin1String
argument_list|(
literal|"@"
argument_list|)
else|:
name|QString
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|expectedText
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|noPropertiesOnDefaultTextEditCharFormat
name|void
name|tst_QPlainTextEdit
operator|::
name|noPropertiesOnDefaultTextEditCharFormat
parameter_list|()
block|{
comment|// there should be no properties set on the default/initial char format
comment|// on a text edit. Font properties instead should be taken from the
comment|// widget's font (in sync with defaultFont property in document) and the
comment|// foreground color should be taken from the palette.
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|properties
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setPlainTextShouldEmitTextChangedOnce
name|void
name|tst_QPlainTextEdit
operator|::
name|setPlainTextShouldEmitTextChangedOnce
parameter_list|()
block|{
name|QSignalSpy
name|spy
argument_list|(
name|ed
argument_list|,
name|SIGNAL
argument_list|(
name|textChanged
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"Yankee Doodle"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|overwriteMode
name|void
name|tst_QPlainTextEdit
operator|::
name|overwriteMode
parameter_list|()
block|{
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|overwriteMode
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClicks
argument_list|(
name|ed
argument_list|,
literal|"Some first text"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Some first text"
argument_list|)
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setOverwriteMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursor
init|=
name|ed
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClicks
argument_list|(
name|ed
argument_list|,
literal|"shiny"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Some shiny text"
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setOverwriteMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClicks
argument_list|(
name|ed
argument_list|,
literal|"Second paragraph"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|blockCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|EndOfBlock
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setOverwriteMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClicks
argument_list|(
name|ed
argument_list|,
literal|" blah"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|blockCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QTextBlock
name|block
init|=
name|ed
operator|->
name|document
argument_list|()
operator|->
name|begin
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Some shiny text blah"
argument_list|)
argument_list|)
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Second paragraph"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|shiftDownInLineLastShouldSelectToEnd_data
name|void
name|tst_QPlainTextEdit
operator|::
name|shiftDownInLineLastShouldSelectToEnd_data
parameter_list|()
block|{
comment|// shift cursor-down in the last line should select to the end of the document
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"totalLineCount"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Foo\nBar"
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Foo\nBar"
argument_list|)
operator|+
name|QChar
argument_list|(
name|QChar
operator|::
name|LineSeparator
argument_list|)
operator|+
name|QString
argument_list|(
literal|"Baz"
argument_list|)
operator|<<
literal|3
expr_stmt|;
block|}
end_function
begin_function
DECL|function|shiftDownInLineLastShouldSelectToEnd
name|void
name|tst_QPlainTextEdit
operator|::
name|shiftDownInLineLastShouldSelectToEnd
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|totalLineCount
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|ed
operator|->
name|show
argument_list|()
expr_stmt|;
comment|// ensure we're layouted
for|for
control|(
name|QTextBlock
name|block
init|=
name|ed
operator|->
name|document
argument_list|()
operator|->
name|begin
argument_list|()
init|;
name|block
operator|.
name|isValid
argument_list|()
condition|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
control|)
name|ed
operator|->
name|document
argument_list|()
operator|->
name|documentLayout
argument_list|()
operator|->
name|blockBoundingRect
argument_list|(
name|block
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|blockCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|int
name|lineCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|QTextBlock
name|block
init|=
name|ed
operator|->
name|document
argument_list|()
operator|->
name|begin
argument_list|()
init|;
name|block
operator|.
name|isValid
argument_list|()
condition|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
control|)
name|lineCount
operator|+=
name|block
operator|.
name|layout
argument_list|()
operator|->
name|lineCount
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lineCount
argument_list|,
name|totalLineCount
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursor
init|=
name|ed
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lineCount
condition|;
operator|++
name|i
control|)
block|{
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
block|}
name|input
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|,
name|QChar
argument_list|(
name|QChar
operator|::
name|ParagraphSeparator
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|selectedText
argument_list|()
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
comment|// also test that without shift modifier the cursor does not move to the end
comment|// for Key_Down in the last line
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lineCount
condition|;
operator|++
name|i
control|)
block|{
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|undoRedoShouldRepositionTextEditCursor
name|void
name|tst_QPlainTextEdit
operator|::
name|undoRedoShouldRepositionTextEditCursor
parameter_list|()
block|{
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"five\nlines\nin\nthis\ntextedit"
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursor
init|=
name|ed
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setUndoRedoEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setUndoRedoEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|document
argument_list|()
operator|->
name|isUndoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|document
argument_list|()
operator|->
name|isRedoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|document
argument_list|()
operator|->
name|isUndoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|document
argument_list|()
operator|->
name|isRedoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|ed
argument_list|,
literal|"undo"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|document
argument_list|()
operator|->
name|isUndoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|document
argument_list|()
operator|->
name|isRedoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|ed
argument_list|,
literal|"redo"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|document
argument_list|()
operator|->
name|isUndoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|document
argument_list|()
operator|->
name|isRedoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lineWrapModes
name|void
name|tst_QPlainTextEdit
operator|::
name|lineWrapModes
parameter_list|()
block|{
name|QWidget
modifier|*
name|window
init|=
operator|new
name|QWidget
decl_stmt|;
name|ed
operator|->
name|setParent
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|window
operator|->
name|show
argument_list|()
expr_stmt|;
name|ed
operator|->
name|show
argument_list|()
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"a b c d e f g h i j k l m n o p q r s t u v w x y z"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setLineWrapMode
argument_list|(
name|QPlainTextEdit
operator|::
name|NoWrap
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lineCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setLineWrapMode
argument_list|(
name|QPlainTextEdit
operator|::
name|WidgetWidth
argument_list|)
expr_stmt|;
comment|// QPlainTextEdit does lazy line layout on resize, only for the visible blocks.
comment|// We thus need to make it wide enough to show something visible.
name|int
name|minimumWidth
init|=
literal|2
operator|*
name|ed
operator|->
name|document
argument_list|()
operator|->
name|documentMargin
argument_list|()
decl_stmt|;
name|minimumWidth
operator|+=
name|ed
operator|->
name|fontMetrics
argument_list|()
operator|.
name|width
argument_list|(
name|QLatin1Char
argument_list|(
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
name|minimumWidth
operator|+=
name|ed
operator|->
name|frameWidth
argument_list|()
expr_stmt|;
name|ed
operator|->
name|resize
argument_list|(
name|minimumWidth
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lineCount
argument_list|()
argument_list|,
literal|26
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setParent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|window
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QTEST_NO_CURSOR
end_ifndef
begin_function
DECL|function|mouseCursorShape
name|void
name|tst_QPlainTextEdit
operator|::
name|mouseCursorShape
parameter_list|()
block|{
comment|// always show an IBeamCursor, see change 170146
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|isReadOnly
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|viewport
argument_list|()
operator|->
name|cursor
argument_list|()
operator|.
name|shape
argument_list|()
argument_list|,
name|Qt
operator|::
name|IBeamCursor
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|viewport
argument_list|()
operator|->
name|cursor
argument_list|()
operator|.
name|shape
argument_list|()
argument_list|,
name|Qt
operator|::
name|IBeamCursor
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"Foo"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|viewport
argument_list|()
operator|->
name|cursor
argument_list|()
operator|.
name|shape
argument_list|()
argument_list|,
name|Qt
operator|::
name|IBeamCursor
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|implicitClear
name|void
name|tst_QPlainTextEdit
operator|::
name|implicitClear
parameter_list|()
block|{
comment|// test that QPlainTextEdit::setHtml, etc. avoid calling clear() but instead call
comment|// QTextDocument::setHtml/etc. instead, which also clear the contents and
comment|// cached resource but preserve manually added resources. setHtml on a textedit
comment|// should behave the same as on a document with respect to that.
comment|// see also clearResources() autotest in qtextdocument
comment|// regular resource for QTextDocument
name|QUrl
name|testUrl
argument_list|(
literal|":/foobar"
argument_list|)
decl_stmt|;
name|QVariant
name|testResource
argument_list|(
literal|"hello world"
argument_list|)
decl_stmt|;
name|ed
operator|->
name|document
argument_list|()
operator|->
name|addResource
argument_list|(
name|QTextDocument
operator|::
name|ImageResource
argument_list|,
name|testUrl
argument_list|,
name|testResource
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|document
argument_list|()
operator|->
name|resource
argument_list|(
name|QTextDocument
operator|::
name|ImageResource
argument_list|,
name|testUrl
argument_list|)
operator|==
name|testResource
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|document
argument_list|()
operator|->
name|resource
argument_list|(
name|QTextDocument
operator|::
name|ImageResource
argument_list|,
name|testUrl
argument_list|)
operator|==
name|testResource
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"<b>Blah</b>"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|document
argument_list|()
operator|->
name|resource
argument_list|(
name|QTextDocument
operator|::
name|ImageResource
argument_list|,
name|testUrl
argument_list|)
operator|==
name|testResource
argument_list|)
expr_stmt|;
name|ed
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|document
argument_list|()
operator|->
name|resource
argument_list|(
name|QTextDocument
operator|::
name|ImageResource
argument_list|,
name|testUrl
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|toPlainText
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
end_ifndef
begin_function
DECL|function|copyAvailable_data
name|void
name|tst_QPlainTextEdit
operator|::
name|copyAvailable_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|pairListType
argument_list|>
argument_list|(
literal|"keystrokes"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|bool
argument_list|>
argument_list|>
argument_list|(
literal|"copyAvailable"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"function"
argument_list|)
expr_stmt|;
name|pairListType
name|keystrokes
decl_stmt|;
name|QList
argument_list|<
name|bool
argument_list|>
name|copyAvailable
decl_stmt|;
name|keystrokes
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_B
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_B
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|copyAvailable
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"Case1 B,B,<- + shift | signals: true"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|keystrokes
operator|<<
name|copyAvailable
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|keystrokes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|copyAvailable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keystrokes
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_T
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|copyAvailable
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"Case2 T,A,A,<- + shift, cut() | signals: true, false"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|keystrokes
operator|<<
name|copyAvailable
operator|<<
name|QString
argument_list|(
literal|"cut"
argument_list|)
expr_stmt|;
name|keystrokes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|copyAvailable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keystrokes
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_T
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|copyAvailable
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"Case3 T,A,A,<- + shift,<- + shift,<- + shift, copy() | signals: true"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|keystrokes
operator|<<
name|copyAvailable
operator|<<
name|QString
argument_list|(
literal|"copy"
argument_list|)
expr_stmt|;
name|keystrokes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|copyAvailable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keystrokes
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_T
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_X
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|copyAvailable
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"Case4 T,A,A,<- + shift,<- + shift,<- + shift, ctrl + x, paste() | signals: true, false"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|keystrokes
operator|<<
name|copyAvailable
operator|<<
name|QString
argument_list|(
literal|"paste"
argument_list|)
expr_stmt|;
name|keystrokes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|copyAvailable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keystrokes
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_B
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_B
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
expr_stmt|;
name|copyAvailable
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"Case5 B,B,<- + shift,<- | signals: true, false"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|keystrokes
operator|<<
name|copyAvailable
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|keystrokes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|copyAvailable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keystrokes
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_B
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_Right
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|copyAvailable
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"Case6 B,A,<- + shift, ->,<- + shift | signals: true, false, true, false"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|keystrokes
operator|<<
name|copyAvailable
operator|<<
name|QString
argument_list|(
literal|"cut"
argument_list|)
expr_stmt|;
name|keystrokes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|copyAvailable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keystrokes
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_T
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
operator|<<
name|qMakePair
argument_list|(
name|Qt
operator|::
name|Key_X
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|copyAvailable
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"Case7 T,A,A,<- + shift,<- + shift,<- + shift, ctrl + x, undo() | signals: true, false, true"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|keystrokes
operator|<<
name|copyAvailable
operator|<<
name|QString
argument_list|(
literal|"undo"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//Tests the copyAvailable slot for several cases
end_comment
begin_function
DECL|function|copyAvailable
name|void
name|tst_QPlainTextEdit
operator|::
name|copyAvailable
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|pairListType
argument_list|,
name|keystrokes
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|bool
argument_list|>
argument_list|,
name|copyAvailable
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|function
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|QSKIP
argument_list|(
literal|"QTBUG-22283: copyAvailable has never passed on Mac"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|ed
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|canPaste
argument_list|()
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spyCopyAvailabe
argument_list|(
name|ed
argument_list|,
name|SIGNAL
argument_list|(
name|copyAvailable
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|//Execute Keystrokes
foreach|foreach
control|(
name|keyPairType
name|keyPair
decl|,
name|keystrokes
control|)
block|{
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|keyPair
operator|.
name|first
argument_list|,
name|keyPair
operator|.
name|second
argument_list|)
expr_stmt|;
block|}
comment|//Execute ed->"function"
if|if
condition|(
name|function
operator|==
literal|"cut"
condition|)
name|ed
operator|->
name|cut
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|function
operator|==
literal|"copy"
condition|)
name|ed
operator|->
name|copy
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|function
operator|==
literal|"paste"
condition|)
name|ed
operator|->
name|paste
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|function
operator|==
literal|"undo"
condition|)
name|ed
operator|->
name|paste
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|function
operator|==
literal|"redo"
condition|)
name|ed
operator|->
name|paste
argument_list|()
expr_stmt|;
comment|//Compare spied signals
name|QEXPECT_FAIL
argument_list|(
literal|"Case7 T,A,A,<- + shift,<- + shift,<- + shift, ctrl + x, undo() | signals: true, false, true"
argument_list|,
literal|"Wrong undo selection behaviour. Should be fixed in some future release. (See task: 132482)"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyCopyAvailabe
operator|.
name|count
argument_list|()
argument_list|,
name|copyAvailable
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|spyCopyAvailabe
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QVariant
name|variantSpyCopyAvailable
init|=
name|spyCopyAvailabe
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|variantSpyCopyAvailable
operator|.
name|toBool
argument_list|()
operator|==
name|copyAvailable
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Spied singnal: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|undoRedoAfterSetContent
name|void
name|tst_QPlainTextEdit
operator|::
name|undoRedoAfterSetContent
parameter_list|()
block|{
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|document
argument_list|()
operator|->
name|isUndoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|document
argument_list|()
operator|->
name|isRedoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"Foobar"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|document
argument_list|()
operator|->
name|isUndoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|document
argument_list|()
operator|->
name|isRedoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"<p>bleh</p>"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|document
argument_list|()
operator|->
name|isUndoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|document
argument_list|()
operator|->
name|isRedoAvailable
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|numPadKeyNavigation
name|void
name|tst_QPlainTextEdit
operator|::
name|numPadKeyNavigation
parameter_list|()
block|{
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Right
argument_list|,
name|Qt
operator|::
name|KeypadModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|moveCursor
name|void
name|tst_QPlainTextEdit
operator|::
name|moveCursor
parameter_list|()
block|{
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|QSignalSpy
name|cursorMovedSpy
argument_list|(
name|ed
argument_list|,
name|SIGNAL
argument_list|(
name|cursorPositionChanged
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursorMovedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursorMovedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|selectedText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|MyTextEdit
class|class
name|MyTextEdit
super|:
specifier|public
name|QPlainTextEdit
block|{
public|public:
DECL|function|MyTextEdit
specifier|inline
name|MyTextEdit
parameter_list|()
member_init_list|:
name|createMimeDataCallCount
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|canInsertCallCount
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|insertCallCount
argument_list|(
literal|0
argument_list|)
block|{}
DECL|member|createMimeDataCallCount
specifier|mutable
name|int
name|createMimeDataCallCount
decl_stmt|;
DECL|member|canInsertCallCount
specifier|mutable
name|int
name|canInsertCallCount
decl_stmt|;
DECL|member|insertCallCount
specifier|mutable
name|int
name|insertCallCount
decl_stmt|;
DECL|function|createMimeDataFromSelection
specifier|virtual
name|QMimeData
modifier|*
name|createMimeDataFromSelection
parameter_list|()
specifier|const
block|{
name|createMimeDataCallCount
operator|++
expr_stmt|;
return|return
name|QPlainTextEdit
operator|::
name|createMimeDataFromSelection
argument_list|()
return|;
block|}
DECL|function|canInsertFromMimeData
specifier|virtual
name|bool
name|canInsertFromMimeData
parameter_list|(
specifier|const
name|QMimeData
modifier|*
name|source
parameter_list|)
specifier|const
block|{
name|canInsertCallCount
operator|++
expr_stmt|;
return|return
name|QPlainTextEdit
operator|::
name|canInsertFromMimeData
argument_list|(
name|source
argument_list|)
return|;
block|}
DECL|function|insertFromMimeData
specifier|virtual
name|void
name|insertFromMimeData
parameter_list|(
specifier|const
name|QMimeData
modifier|*
name|source
parameter_list|)
block|{
name|insertCallCount
operator|++
expr_stmt|;
name|QPlainTextEdit
operator|::
name|insertFromMimeData
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
end_ifndef
begin_function
DECL|function|mimeDataReimplementations
name|void
name|tst_QPlainTextEdit
operator|::
name|mimeDataReimplementations
parameter_list|()
block|{
name|MyTextEdit
name|ed
decl_stmt|;
name|ed
operator|.
name|setPlainText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|.
name|createMimeDataCallCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|.
name|canInsertCallCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|.
name|insertCallCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ed
operator|.
name|selectAll
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|.
name|createMimeDataCallCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|.
name|canInsertCallCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|.
name|insertCallCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ed
operator|.
name|copy
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|.
name|createMimeDataCallCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|.
name|canInsertCallCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|.
name|insertCallCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|QWidgetTextControl
modifier|*
name|control
init|=
name|ed
operator|.
name|findChild
argument_list|<
name|QWidgetTextControl
operator|*
argument_list|>
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|control
argument_list|)
expr_stmt|;
name|control
operator|->
name|canInsertFromMimeData
argument_list|(
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|mimeData
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|.
name|createMimeDataCallCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|.
name|canInsertCallCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|.
name|insertCallCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ed
operator|.
name|paste
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|.
name|createMimeDataCallCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|.
name|canInsertCallCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|.
name|insertCallCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|shiftEnterShouldInsertLineSeparator
name|void
name|tst_QPlainTextEdit
operator|::
name|shiftEnterShouldInsertLineSeparator
parameter_list|()
block|{
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_B
argument_list|)
expr_stmt|;
name|QString
name|expected
decl_stmt|;
name|expected
operator|+=
literal|'a'
expr_stmt|;
name|expected
operator|+=
name|QChar
operator|::
name|LineSeparator
expr_stmt|;
name|expected
operator|+=
literal|'b'
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|block
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|selectWordsFromStringsContainingSeparators_data
name|void
name|tst_QPlainTextEdit
operator|::
name|selectWordsFromStringsContainingSeparators_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"testString"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"selectedWord"
argument_list|)
expr_stmt|;
specifier|const
name|ushort
name|wordSeparators
index|[]
init|=
block|{
literal|'.'
block|,
literal|','
block|,
literal|'?'
block|,
literal|'!'
block|,
literal|':'
block|,
literal|';'
block|,
literal|'-'
block|,
literal|'<'
block|,
literal|'>'
block|,
literal|'['
block|,
literal|']'
block|,
literal|'('
block|,
literal|')'
block|,
literal|'{'
block|,
literal|'}'
block|,
literal|'='
block|,
literal|'\t'
block|,
name|ushort
argument_list|(
argument|QChar::Nbsp
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|,
name|count
init|=
sizeof|sizeof
argument_list|(
name|wordSeparators
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|wordSeparators
index|[
literal|0
index|]
argument_list|)
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|ushort
name|u
init|=
name|wordSeparators
index|[
name|i
index|]
decl_stmt|;
name|QByteArray
name|rowName
init|=
name|QByteArrayLiteral
argument_list|(
literal|"separator: "
argument_list|)
decl_stmt|;
if|if
condition|(
name|u
operator|>=
literal|32
operator|&&
name|u
operator|<
literal|128
condition|)
name|rowName
operator|+=
name|char
argument_list|(
name|u
argument_list|)
expr_stmt|;
else|else
name|rowName
operator|+=
name|QByteArrayLiteral
argument_list|(
literal|"0x"
argument_list|)
operator|+
name|QByteArray
operator|::
name|number
argument_list|(
name|u
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|rowName
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|+
name|QChar
argument_list|(
name|u
argument_list|)
operator|+
name|QString
argument_list|(
literal|"bar"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|selectWordsFromStringsContainingSeparators
name|void
name|tst_QPlainTextEdit
operator|::
name|selectWordsFromStringsContainingSeparators
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|testString
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|selectedWord
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
name|testString
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursor
init|=
name|ed
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|StartOfLine
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|select
argument_list|(
name|QTextCursor
operator|::
name|WordUnderCursor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cursor
operator|.
name|hasSelection
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursor
operator|.
name|selection
argument_list|()
operator|.
name|toPlainText
argument_list|()
argument_list|,
name|selectedWord
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
end_ifndef
begin_function
DECL|function|canPaste
name|void
name|tst_QPlainTextEdit
operator|::
name|canPaste
parameter_list|()
block|{
if|if
condition|(
operator|!
name|PlatformClipboard
operator|::
name|isAvailable
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"Clipboard not working with cron-started unit tests"
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|setText
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|canPaste
argument_list|()
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|setText
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|canPaste
argument_list|()
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextInteractionFlags
argument_list|(
name|Qt
operator|::
name|NoTextInteraction
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|canPaste
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|ensureCursorVisibleOnInitialShow
name|void
name|tst_QPlainTextEdit
operator|::
name|ensureCursorVisibleOnInitialShow
parameter_list|()
block|{
name|QString
name|manyPagesOfPlainText
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|800
condition|;
operator|++
name|i
control|)
name|manyPagesOfPlainText
operator|+=
name|QLatin1String
argument_list|(
literal|"Blah blah blah blah blah blah\n"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
name|manyPagesOfPlainText
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|ed
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
operator|>
literal|10
argument_list|)
expr_stmt|;
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
operator|<
literal|10
argument_list|)
expr_stmt|;
name|ed
operator|->
name|hide
argument_list|()
expr_stmt|;
name|ed
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|setValue
argument_list|(
name|ed
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|maximum
argument_list|()
argument_list|)
expr_stmt|;
name|ed
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
argument_list|,
name|ed
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|maximum
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|TestEdit
class|class
name|TestEdit
super|:
specifier|public
name|QPlainTextEdit
block|{
public|public:
DECL|function|TestEdit
name|TestEdit
parameter_list|()
member_init_list|:
name|resizeEventCalled
argument_list|(
literal|false
argument_list|)
block|{}
DECL|member|resizeEventCalled
name|bool
name|resizeEventCalled
decl_stmt|;
protected|protected:
DECL|function|resizeEvent
specifier|virtual
name|void
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
name|e
parameter_list|)
block|{
name|QPlainTextEdit
operator|::
name|resizeEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|setPlainText
argument_list|(
literal|"<img src=qtextbrowser-resizeevent.png width="
operator|+
name|QString
operator|::
name|number
argument_list|(
name|size
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
operator|+
literal|"><br>Size is "
operator|+
name|QString
operator|::
name|number
argument_list|(
name|size
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
operator|+
literal|" x "
operator|+
name|QString
operator|::
name|number
argument_list|(
name|size
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|resizeEventCalled
operator|=
literal|true
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|setTextInsideResizeEvent
name|void
name|tst_QPlainTextEdit
operator|::
name|setTextInsideResizeEvent
parameter_list|()
block|{
name|TestEdit
name|edit
decl_stmt|;
name|edit
operator|.
name|show
argument_list|()
expr_stmt|;
name|edit
operator|.
name|resize
argument_list|(
literal|800
argument_list|,
literal|600
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|edit
operator|.
name|resizeEventCalled
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|colorfulAppend
name|void
name|tst_QPlainTextEdit
operator|::
name|colorfulAppend
parameter_list|()
block|{
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|QBrush
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
argument_list|)
expr_stmt|;
name|ed
operator|->
name|mergeCurrentCharFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|ed
operator|->
name|appendPlainText
argument_list|(
literal|"Red"
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|QBrush
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
argument_list|)
expr_stmt|;
name|ed
operator|->
name|mergeCurrentCharFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|ed
operator|->
name|appendPlainText
argument_list|(
literal|"Blue"
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|QBrush
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
argument_list|)
expr_stmt|;
name|ed
operator|->
name|mergeCurrentCharFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|ed
operator|->
name|appendPlainText
argument_list|(
literal|"Green"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|document
argument_list|()
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QTextBlock
name|block
init|=
name|ed
operator|->
name|document
argument_list|()
operator|->
name|begin
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Red"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Blue"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Green"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
operator|==
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ensureVisibleWithRtl
name|void
name|tst_QPlainTextEdit
operator|::
name|ensureVisibleWithRtl
parameter_list|()
block|{
name|ed
operator|->
name|setLayoutDirection
argument_list|(
name|Qt
operator|::
name|RightToLeft
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setLineWrapMode
argument_list|(
name|QPlainTextEdit
operator|::
name|NoWrap
argument_list|)
expr_stmt|;
name|QString
name|txt
argument_list|(
literal|500
argument_list|,
name|QChar
argument_list|(
name|QLatin1Char
argument_list|(
literal|'a'
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|txt
operator|.
name|length
argument_list|()
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
name|txt
argument_list|)
expr_stmt|;
name|ed
operator|->
name|resize
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|ed
operator|->
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|horizontalScrollBar
argument_list|()
operator|->
name|maximum
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|horizontalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
argument_list|,
name|ed
operator|->
name|horizontalScrollBar
argument_list|()
operator|->
name|maximum
argument_list|()
argument_list|)
expr_stmt|;
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|horizontalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|horizontalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
argument_list|,
name|ed
operator|->
name|horizontalScrollBar
argument_list|()
operator|->
name|maximum
argument_list|()
argument_list|)
expr_stmt|;
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|horizontalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|preserveCharFormatAfterSetPlainText
name|void
name|tst_QPlainTextEdit
operator|::
name|preserveCharFormatAfterSetPlainText
parameter_list|()
block|{
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|QBrush
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
argument_list|)
expr_stmt|;
name|ed
operator|->
name|mergeCurrentCharFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"This is blue"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|appendPlainText
argument_list|(
literal|"This should still be blue"
argument_list|)
expr_stmt|;
name|QTextBlock
name|block
init|=
name|ed
operator|->
name|document
argument_list|()
operator|->
name|begin
argument_list|()
decl_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"This should still be blue"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|begin
argument_list|()
operator|.
name|fragment
argument_list|()
operator|.
name|charFormat
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|extraSelections
name|void
name|tst_QPlainTextEdit
operator|::
name|extraSelections
parameter_list|()
block|{
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|QTextCursor
name|c
init|=
name|ed
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|c
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|c
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
specifier|const
name|int
name|endPos
init|=
name|c
operator|.
name|position
argument_list|()
decl_stmt|;
name|QTextEdit
operator|::
name|ExtraSelection
name|sel
decl_stmt|;
name|sel
operator|.
name|cursor
operator|=
name|c
expr_stmt|;
name|ed
operator|->
name|setExtraSelections
argument_list|(
name|QList
argument_list|<
name|QTextEdit
operator|::
name|ExtraSelection
argument_list|>
argument_list|()
operator|<<
name|sel
argument_list|)
expr_stmt|;
name|c
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|c
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextWord
argument_list|)
expr_stmt|;
specifier|const
name|int
name|wordPos
init|=
name|c
operator|.
name|position
argument_list|()
decl_stmt|;
name|c
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|sel
operator|.
name|cursor
operator|=
name|c
expr_stmt|;
name|ed
operator|->
name|setExtraSelections
argument_list|(
name|QList
argument_list|<
name|QTextEdit
operator|::
name|ExtraSelection
argument_list|>
argument_list|()
operator|<<
name|sel
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QTextEdit
operator|::
name|ExtraSelection
argument_list|>
name|selections
init|=
name|ed
operator|->
name|extraSelections
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|selections
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selections
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
name|endPos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selections
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|cursor
operator|.
name|anchor
argument_list|()
argument_list|,
name|wordPos
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|adjustScrollbars
name|void
name|tst_QPlainTextEdit
operator|::
name|adjustScrollbars
parameter_list|()
block|{
comment|// For some reason ff is defined to be<< on Mac Panther / gcc 3.3
DECL|macro|ff
undef|#
directive|undef
name|ff
name|QFont
name|ff
argument_list|(
name|ed
operator|->
name|font
argument_list|()
argument_list|)
decl_stmt|;
name|ff
operator|.
name|setFamily
argument_list|(
literal|"Tahoma"
argument_list|)
expr_stmt|;
name|ff
operator|.
name|setPointSize
argument_list|(
literal|11
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setFont
argument_list|(
name|ff
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setMinimumSize
argument_list|(
literal|140
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setMaximumSize
argument_list|(
literal|140
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|ed
operator|->
name|show
argument_list|()
expr_stmt|;
name|QLatin1String
name|txt
argument_list|(
literal|"\nabc def ghi jkl mno pqr stu vwx"
argument_list|)
decl_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
name|txt
operator|+
name|txt
operator|+
name|txt
operator|+
name|txt
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|maximum
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|int
name|oldMaximum
init|=
name|ed
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|maximum
argument_list|()
decl_stmt|;
name|QTextCursor
name|cursor
init|=
name|ed
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|QLatin1String
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|deletePreviousChar
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|maximum
argument_list|()
argument_list|,
name|oldMaximum
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|SignalReceiver
class|class
name|SignalReceiver
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|SignalReceiver
name|SignalReceiver
parameter_list|()
member_init_list|:
name|received
argument_list|(
literal|0
argument_list|)
block|{}
DECL|function|receivedSignals
name|int
name|receivedSignals
parameter_list|()
specifier|const
block|{
return|return
name|received
return|;
block|}
DECL|function|charFormat
name|QTextCharFormat
name|charFormat
parameter_list|()
specifier|const
block|{
return|return
name|format
return|;
block|}
public|public
name|slots
public|:
DECL|function|charFormatChanged
name|void
name|charFormatChanged
parameter_list|(
specifier|const
name|QTextCharFormat
modifier|&
name|tcf
parameter_list|)
block|{
operator|++
name|received
expr_stmt|;
name|format
operator|=
name|tcf
expr_stmt|;
block|}
private|private:
DECL|member|format
name|QTextCharFormat
name|format
decl_stmt|;
DECL|member|received
name|int
name|received
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|textObscuredByScrollbars
name|void
name|tst_QPlainTextEdit
operator|::
name|textObscuredByScrollbars
parameter_list|()
block|{
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|insertText
argument_list|(
literal|"ab cab cab c abca kjsdf lka sjd lfk jsal df j kasdf abc ab abc "
literal|"a b c d e f g h i j k l m n o p q r s t u v w x y z "
literal|"abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc "
literal|"ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab"
literal|"abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc "
literal|"ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab"
literal|"abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc "
literal|"ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab"
literal|"abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc "
literal|"ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab"
literal|"abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc "
literal|"ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setHorizontalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAlwaysOff
argument_list|)
expr_stmt|;
name|ed
operator|->
name|show
argument_list|()
expr_stmt|;
name|QSize
name|documentSize
init|=
name|ed
operator|->
name|document
argument_list|()
operator|->
name|documentLayout
argument_list|()
operator|->
name|documentSize
argument_list|()
operator|.
name|toSize
argument_list|()
decl_stmt|;
name|QSize
name|viewportSize
init|=
name|ed
operator|->
name|viewport
argument_list|()
operator|->
name|size
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|documentSize
operator|.
name|width
argument_list|()
operator|<=
name|viewportSize
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setTextPreservesUndoRedoEnabled
name|void
name|tst_QPlainTextEdit
operator|::
name|setTextPreservesUndoRedoEnabled
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|ed
operator|->
name|isUndoRedoEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ed
operator|->
name|isUndoRedoEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setUndoRedoEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|isUndoRedoEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"Test2"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|isUndoRedoEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"<p>hello"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|isUndoRedoEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|wordWrapProperty
name|void
name|tst_QPlainTextEdit
operator|::
name|wordWrapProperty
parameter_list|()
block|{
block|{
name|QPlainTextEdit
name|edit
decl_stmt|;
name|QTextDocument
modifier|*
name|doc
init|=
operator|new
name|QTextDocument
argument_list|(
operator|&
name|edit
argument_list|)
decl_stmt|;
name|doc
operator|->
name|setDocumentLayout
argument_list|(
operator|new
name|QPlainTextDocumentLayout
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|edit
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|edit
operator|.
name|setWordWrapMode
argument_list|(
name|QTextOption
operator|::
name|NoWrap
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|defaultTextOption
argument_list|()
operator|.
name|wrapMode
argument_list|()
argument_list|,
name|QTextOption
operator|::
name|NoWrap
argument_list|)
expr_stmt|;
block|}
block|{
name|QPlainTextEdit
name|edit
decl_stmt|;
name|QTextDocument
modifier|*
name|doc
init|=
operator|new
name|QTextDocument
argument_list|(
operator|&
name|edit
argument_list|)
decl_stmt|;
name|doc
operator|->
name|setDocumentLayout
argument_list|(
operator|new
name|QPlainTextDocumentLayout
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|edit
operator|.
name|setWordWrapMode
argument_list|(
name|QTextOption
operator|::
name|NoWrap
argument_list|)
expr_stmt|;
name|edit
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doc
operator|->
name|defaultTextOption
argument_list|()
operator|.
name|wrapMode
argument_list|()
argument_list|,
name|QTextOption
operator|::
name|NoWrap
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|lineWrapProperty
name|void
name|tst_QPlainTextEdit
operator|::
name|lineWrapProperty
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|wordWrapMode
argument_list|()
argument_list|,
name|QTextOption
operator|::
name|WrapAtWordBoundaryOrAnywhere
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|lineWrapMode
argument_list|()
argument_list|,
name|QPlainTextEdit
operator|::
name|WidgetWidth
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setLineWrapMode
argument_list|(
name|QPlainTextEdit
operator|::
name|NoWrap
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|lineWrapMode
argument_list|()
argument_list|,
name|QPlainTextEdit
operator|::
name|NoWrap
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|wordWrapMode
argument_list|()
argument_list|,
name|QTextOption
operator|::
name|WrapAtWordBoundaryOrAnywhere
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|document
argument_list|()
operator|->
name|defaultTextOption
argument_list|()
operator|.
name|wrapMode
argument_list|()
argument_list|,
name|QTextOption
operator|::
name|NoWrap
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|selectionChanged
name|void
name|tst_QPlainTextEdit
operator|::
name|selectionChanged
parameter_list|()
block|{
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|QSignalSpy
name|selectionChangedSpy
argument_list|(
name|ed
argument_list|,
name|SIGNAL
argument_list|(
name|selectionChanged
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Right
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selectionChangedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Right
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selectionChangedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Right
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selectionChangedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Right
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selectionChangedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Right
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selectionChangedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Right
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selectionChangedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|blockCountChanged
name|void
name|tst_QPlainTextEdit
operator|::
name|blockCountChanged
parameter_list|()
block|{
name|QSignalSpy
name|blockCountCpangedSpy
argument_list|(
name|ed
argument_list|,
name|SIGNAL
argument_list|(
name|blockCountChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|blockCountCpangedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|blockCountCpangedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"Hello \n World \n this \n has \n more \n blocks \n than \n just \n one"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|blockCountCpangedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"One"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|blockCountCpangedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"One \n Two"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|blockCountCpangedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"Three \n Four"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|blockCountCpangedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertAndScrollToBottom
name|void
name|tst_QPlainTextEdit
operator|::
name|insertAndScrollToBottom
parameter_list|()
block|{
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"First Line"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|show
argument_list|()
expr_stmt|;
name|QString
name|text
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2000
condition|;
operator|++
name|i
control|)
block|{
name|text
operator|+=
name|QLatin1String
argument_list|(
literal|"this is another line of text to be appended. It is quite long and will probably wrap around, meaning the number of lines is larger than the number of blocks in the text.\n"
argument_list|)
expr_stmt|;
block|}
name|QTextCursor
name|cursor
init|=
name|ed
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|beginEditBlock
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|endEditBlock
argument_list|()
expr_stmt|;
name|ed
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|setValue
argument_list|(
name|ed
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|maximum
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
argument_list|,
name|ed
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|maximum
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|Qt::InputMethodHints
argument_list|)
end_macro
begin_function
DECL|function|inputMethodQueryImHints_data
name|void
name|tst_QPlainTextEdit
operator|::
name|inputMethodQueryImHints_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|Qt
operator|::
name|InputMethodHints
argument_list|>
argument_list|(
literal|"hints"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"None"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|Qt
operator|::
name|InputMethodHints
argument_list|>
argument_list|(
name|Qt
operator|::
name|ImhNone
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Password"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|Qt
operator|::
name|InputMethodHints
argument_list|>
argument_list|(
name|Qt
operator|::
name|ImhHiddenText
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Normal"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|Qt
operator|::
name|InputMethodHints
argument_list|>
argument_list|(
name|Qt
operator|::
name|ImhNoAutoUppercase
operator||
name|Qt
operator|::
name|ImhNoPredictiveText
operator||
name|Qt
operator|::
name|ImhSensitiveData
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|inputMethodQueryImHints
name|void
name|tst_QPlainTextEdit
operator|::
name|inputMethodQueryImHints
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|Qt
operator|::
name|InputMethodHints
argument_list|,
name|hints
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setInputMethodHints
argument_list|(
name|hints
argument_list|)
expr_stmt|;
name|QVariant
name|value
init|=
name|ed
operator|->
name|inputMethodQuery
argument_list|(
name|Qt
operator|::
name|ImHints
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
name|Qt
operator|::
name|InputMethodHints
argument_list|>
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|,
name|hints
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_REGEXP
end_ifndef
begin_function
DECL|function|findWithRegExp
name|void
name|tst_QPlainTextEdit
operator|::
name|findWithRegExp
parameter_list|()
block|{
name|ed
operator|->
name|setPlainText
argument_list|(
name|QStringLiteral
argument_list|(
literal|"arbitrary text"
argument_list|)
argument_list|)
expr_stmt|;
name|QRegExp
name|rx
argument_list|(
literal|"\\w{2}xt"
argument_list|)
decl_stmt|;
name|bool
name|found
init|=
name|ed
operator|->
name|find
argument_list|(
name|rx
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|found
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|selectedText
argument_list|()
argument_list|,
name|QStringLiteral
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|findBackwardWithRegExp
name|void
name|tst_QPlainTextEdit
operator|::
name|findBackwardWithRegExp
parameter_list|()
block|{
name|ed
operator|->
name|setPlainText
argument_list|(
name|QStringLiteral
argument_list|(
literal|"arbitrary text"
argument_list|)
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursor
init|=
name|ed
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|QRegExp
name|rx
argument_list|(
literal|"a\\w*t"
argument_list|)
decl_stmt|;
name|bool
name|found
init|=
name|ed
operator|->
name|find
argument_list|(
name|rx
argument_list|,
name|QTextDocument
operator|::
name|FindBackward
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|found
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|selectedText
argument_list|()
argument_list|,
name|QStringLiteral
argument_list|(
literal|"arbit"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|findWithRegExpReturnsFalseIfNoMoreResults
name|void
name|tst_QPlainTextEdit
operator|::
name|findWithRegExpReturnsFalseIfNoMoreResults
parameter_list|()
block|{
name|ed
operator|->
name|setPlainText
argument_list|(
name|QStringLiteral
argument_list|(
literal|"arbitrary text"
argument_list|)
argument_list|)
expr_stmt|;
name|QRegExp
name|rx
argument_list|(
literal|"t.xt"
argument_list|)
decl_stmt|;
name|ed
operator|->
name|find
argument_list|(
name|rx
argument_list|)
expr_stmt|;
name|bool
name|found
init|=
name|ed
operator|->
name|find
argument_list|(
name|rx
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|found
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|textCursor
argument_list|()
operator|.
name|selectedText
argument_list|()
argument_list|,
name|QStringLiteral
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|layoutAfterMultiLineRemove
name|void
name|tst_QPlainTextEdit
operator|::
name|layoutAfterMultiLineRemove
parameter_list|()
block|{
name|ed
operator|->
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// The widget must be visible to reproduce this bug.
name|QString
name|contents
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
name|contents
operator|.
name|append
argument_list|(
literal|"\ttest\n"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
name|contents
argument_list|)
expr_stmt|;
comment|/*      * Remove the tab from the beginning of lines 2-4, in an edit block. The      * edit block is required for the bug to be reproduced.      */
name|QTextCursor
name|curs
init|=
name|ed
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|curs
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|curs
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
name|curs
operator|.
name|beginEditBlock
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|curs
operator|.
name|deleteChar
argument_list|()
expr_stmt|;
name|curs
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|)
expr_stmt|;
block|}
name|curs
operator|.
name|endEditBlock
argument_list|()
expr_stmt|;
comment|/*      * Now, we're going to perform the following actions:      *      *     - Move to the beginning of the document.      *     - Move down three times - this should put us at the front of block 3.      *     - Move to the end of the line.      *      * At this point, if the document layout is behaving correctly, we should      * still be positioned on block 3. Verify that this is the case.      */
name|curs
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|curs
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Down
argument_list|,
name|QTextCursor
operator|::
name|MoveAnchor
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|curs
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|EndOfLine
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|curs
operator|.
name|blockNumber
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|undoCommandRemovesAndReinsertsBlock
name|void
name|tst_QPlainTextEdit
operator|::
name|undoCommandRemovesAndReinsertsBlock
parameter_list|()
block|{
name|ed
operator|->
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setPlainText
argument_list|(
name|QStringLiteral
argument_list|(
literal|"line1\nline2"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|document
argument_list|()
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursor
init|=
name|ed
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|QStringLiteral
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|document
argument_list|()
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ed
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ed
operator|->
name|document
argument_list|()
operator|->
name|blockCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QTextBlock
name|block
decl_stmt|;
for|for
control|(
name|block
operator|=
name|ed
operator|->
name|document
argument_list|()
operator|->
name|begin
argument_list|()
init|;
name|block
operator|!=
name|ed
operator|->
name|document
argument_list|()
operator|->
name|end
argument_list|()
condition|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
control|)
block|{
name|QVERIFY
argument_list|(
name|block
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|block
operator|.
name|length
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|block
operator|.
name|layout
argument_list|()
operator|->
name|lineForTextPosition
argument_list|(
literal|0
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|ContentsChangedFunctor
class|class
name|ContentsChangedFunctor
block|{
public|public:
DECL|function|ContentsChangedFunctor
name|ContentsChangedFunctor
parameter_list|(
name|QPlainTextEdit
modifier|*
name|t
parameter_list|)
member_init_list|:
name|textEdit
argument_list|(
name|t
argument_list|)
block|{}
DECL|function|operator ()
name|void
name|operator
name|()
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
block|{
name|QTextCursor
name|c
argument_list|(
name|textEdit
operator|->
name|textCursor
argument_list|()
argument_list|)
decl_stmt|;
name|c
operator|.
name|beginEditBlock
argument_list|()
expr_stmt|;
name|c
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
name|c
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|c
operator|.
name|setCharFormat
argument_list|(
name|QTextCharFormat
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|endEditBlock
argument_list|()
expr_stmt|;
block|}
private|private:
DECL|member|textEdit
name|QPlainTextEdit
modifier|*
name|textEdit
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|taskQTBUG_43562_lineCountCrash
name|void
name|tst_QPlainTextEdit
operator|::
name|taskQTBUG_43562_lineCountCrash
parameter_list|()
block|{
name|connect
argument_list|(
name|ed
operator|->
name|document
argument_list|()
argument_list|,
operator|&
name|QTextDocument
operator|::
name|contentsChange
argument_list|,
name|ContentsChangedFunctor
argument_list|(
name|ed
argument_list|)
argument_list|)
expr_stmt|;
comment|// Don't crash
name|QTest
operator|::
name|keyClicks
argument_list|(
name|ed
argument_list|,
literal|"Some text"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Right
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Right
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ed
argument_list|,
name|Qt
operator|::
name|Key_Space
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClicks
argument_list|(
name|ed
argument_list|,
literal|"nd some more"
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|ed
operator|->
name|document
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|contentsChange
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
end_ifndef
begin_function
DECL|function|contextMenu
name|void
name|tst_QPlainTextEdit
operator|::
name|contextMenu
parameter_list|()
block|{
name|ed
operator|->
name|appendHtml
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Hello<a href='http://www.qt.io'>Qt</a>"
argument_list|)
argument_list|)
expr_stmt|;
name|QMenu
modifier|*
name|menu
init|=
name|ed
operator|->
name|createStandardContextMenu
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|menu
argument_list|)
expr_stmt|;
name|QAction
modifier|*
name|action
init|=
name|ed
operator|->
name|findChild
argument_list|<
name|QAction
operator|*
argument_list|>
argument_list|(
name|QStringLiteral
argument_list|(
literal|"link-copy"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|action
argument_list|)
expr_stmt|;
operator|delete
name|menu
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|findChild
argument_list|<
name|QAction
operator|*
argument_list|>
argument_list|(
name|QStringLiteral
argument_list|(
literal|"link-copy"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextInteractionFlags
argument_list|(
name|Qt
operator|::
name|TextBrowserInteraction
argument_list|)
expr_stmt|;
name|menu
operator|=
name|ed
operator|->
name|createStandardContextMenu
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|menu
argument_list|)
expr_stmt|;
name|action
operator|=
name|ed
operator|->
name|findChild
argument_list|<
name|QAction
operator|*
argument_list|>
argument_list|(
name|QStringLiteral
argument_list|(
literal|"link-copy"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|action
operator|->
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|menu
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|findChild
argument_list|<
name|QAction
operator|*
argument_list|>
argument_list|(
name|QStringLiteral
argument_list|(
literal|"link-copy"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursor
init|=
name|ed
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|ed
operator|->
name|toPlainText
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
name|ed
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|menu
operator|=
name|ed
operator|->
name|createStandardContextMenu
argument_list|(
name|ed
operator|->
name|cursorRect
argument_list|()
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|menu
argument_list|)
expr_stmt|;
name|action
operator|=
name|ed
operator|->
name|findChild
argument_list|<
name|QAction
operator|*
argument_list|>
argument_list|(
name|QStringLiteral
argument_list|(
literal|"link-copy"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|action
operator|->
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|menu
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ed
operator|->
name|findChild
argument_list|<
name|QAction
operator|*
argument_list|>
argument_list|(
name|QStringLiteral
argument_list|(
literal|"link-copy"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CONTEXTMENU
end_comment
begin_comment
comment|// QTBUG-51923: Verify that the cursor rectangle returned by the input
end_comment
begin_comment
comment|// method query correctly reflects the viewport offset.
end_comment
begin_function
DECL|function|inputMethodCursorRect
name|void
name|tst_QPlainTextEdit
operator|::
name|inputMethodCursorRect
parameter_list|()
block|{
name|ed
operator|->
name|setPlainText
argument_list|(
literal|"Line1\nLine2Line3\nLine3"
argument_list|)
expr_stmt|;
name|ed
operator|->
name|moveCursor
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
specifier|const
name|QRectF
name|cursorRect
init|=
name|ed
operator|->
name|cursorRect
argument_list|()
decl_stmt|;
specifier|const
name|QVariant
name|cursorRectV
init|=
name|ed
operator|->
name|inputMethodQuery
argument_list|(
name|Qt
operator|::
name|ImCursorRectangle
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|cursorRectV
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|RectF
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cursorRectV
operator|.
name|toRect
argument_list|()
argument_list|,
name|cursorRect
operator|.
name|toRect
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QPlainTextEdit
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qplaintextedit.moc"
end_include
end_unit
