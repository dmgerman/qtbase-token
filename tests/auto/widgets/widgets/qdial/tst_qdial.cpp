begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QDial>
end_include
begin_class
DECL|class|tst_QDial
class|class
name|tst_QDial
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QDial
parameter_list|()
constructor_decl|;
private|private
name|slots
private|:
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|valueChanged
parameter_list|()
function_decl|;
name|void
name|sliderMoved
parameter_list|()
function_decl|;
name|void
name|wrappingCheck
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QDial
operator|::
name|getSetCheck
parameter_list|()
block|{
name|QDial
name|obj1
decl_stmt|;
comment|// bool QDial::notchesVisible()
comment|// void QDial::setNotchesVisible(bool)
name|obj1
operator|.
name|setNotchesVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|notchesVisible
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setNotchesVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|notchesVisible
argument_list|()
argument_list|)
expr_stmt|;
comment|// bool QDial::wrapping()
comment|// void QDial::setWrapping(bool)
name|obj1
operator|.
name|setWrapping
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|wrapping
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setWrapping
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|wrapping
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|tst_QDial
name|tst_QDial
operator|::
name|tst_QDial
parameter_list|()
block|{ }
end_constructor
begin_function
DECL|function|valueChanged
name|void
name|tst_QDial
operator|::
name|valueChanged
parameter_list|()
block|{
name|QDial
name|dial
decl_stmt|;
name|dial
operator|.
name|setMinimum
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dial
operator|.
name|setMaximum
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|dial
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|dial
operator|.
name|setValue
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|dial
operator|.
name|setValue
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// repeat!
name|dial
operator|.
name|setValue
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sliderMoved
name|void
name|tst_QDial
operator|::
name|sliderMoved
parameter_list|()
block|{
comment|//this tests that when dragging the arrow that the sliderMoved signal is emitted
comment|//even if tracking is set to false
name|QDial
name|dial
decl_stmt|;
name|dial
operator|.
name|setTracking
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dial
operator|.
name|setMinimum
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dial
operator|.
name|setMaximum
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|dial
operator|.
name|show
argument_list|()
expr_stmt|;
name|QPoint
name|init
argument_list|(
name|dial
operator|.
name|width
argument_list|()
operator|/
literal|4
argument_list|,
name|dial
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
decl_stmt|;
name|QMouseEvent
name|pressevent
argument_list|(
name|QEvent
operator|::
name|MouseButtonPress
argument_list|,
name|init
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|qApp
operator|->
name|sendEvent
argument_list|(
operator|&
name|dial
argument_list|,
operator|&
name|pressevent
argument_list|)
expr_stmt|;
name|QSignalSpy
name|sliderspy
argument_list|(
operator|&
name|dial
argument_list|,
name|SIGNAL
argument_list|(
name|sliderMoved
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|valuespy
argument_list|(
operator|&
name|dial
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
block|{
comment|//move on top of the slider
name|init
operator|=
name|QPoint
argument_list|(
name|dial
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|dial
operator|.
name|height
argument_list|()
operator|/
literal|4
argument_list|)
expr_stmt|;
name|QMouseEvent
name|moveevent
argument_list|(
name|QEvent
operator|::
name|MouseMove
argument_list|,
name|init
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|qApp
operator|->
name|sendEvent
argument_list|(
operator|&
name|dial
argument_list|,
operator|&
name|moveevent
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sliderspy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|valuespy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|{
comment|//move on the right of the slider
name|init
operator|=
name|QPoint
argument_list|(
name|dial
operator|.
name|width
argument_list|()
operator|*
literal|3
operator|/
literal|4
argument_list|,
name|dial
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
name|QMouseEvent
name|moveevent
argument_list|(
name|QEvent
operator|::
name|MouseMove
argument_list|,
name|init
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|qApp
operator|->
name|sendEvent
argument_list|(
operator|&
name|dial
argument_list|,
operator|&
name|moveevent
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sliderspy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|valuespy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|QMouseEvent
name|releaseevent
argument_list|(
name|QEvent
operator|::
name|MouseButtonRelease
argument_list|,
name|init
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|qApp
operator|->
name|sendEvent
argument_list|(
operator|&
name|dial
argument_list|,
operator|&
name|releaseevent
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|valuespy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// valuechanged signal should be called at this point
block|}
end_function
begin_function
DECL|function|wrappingCheck
name|void
name|tst_QDial
operator|::
name|wrappingCheck
parameter_list|()
block|{
comment|//This tests if dial will wrap past the maximum value back to the minimum
comment|//and vice versa when changing the value with a keypress
name|QDial
name|dial
decl_stmt|;
name|dial
operator|.
name|setMinimum
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dial
operator|.
name|setMaximum
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|dial
operator|.
name|setSingleStep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dial
operator|.
name|setWrapping
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dial
operator|.
name|setValue
argument_list|(
literal|99
argument_list|)
expr_stmt|;
name|dial
operator|.
name|show
argument_list|()
expr_stmt|;
block|{
comment|//set value to maximum but do not wrap
name|QTest
operator|::
name|keyPress
argument_list|(
operator|&
name|dial
argument_list|,
name|Qt
operator|::
name|Key_Up
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dial
operator|.
name|value
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
block|{
comment|//step up once more and wrap clockwise to minimum + 1
name|QTest
operator|::
name|keyPress
argument_list|(
operator|&
name|dial
argument_list|,
name|Qt
operator|::
name|Key_Up
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dial
operator|.
name|value
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|{
comment|//step down once, and wrap anti-clockwise to minimum, then again to maximum - 1
name|QTest
operator|::
name|keyPress
argument_list|(
operator|&
name|dial
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dial
operator|.
name|value
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
operator|&
name|dial
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dial
operator|.
name|value
argument_list|()
argument_list|,
literal|99
argument_list|)
expr_stmt|;
block|}
block|{
comment|//when wrapping property is false no wrapping will occur
name|dial
operator|.
name|setWrapping
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dial
operator|.
name|setValue
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
operator|&
name|dial
argument_list|,
name|Qt
operator|::
name|Key_Up
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dial
operator|.
name|value
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|dial
operator|.
name|setValue
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
operator|&
name|dial
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dial
operator|.
name|value
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|{
comment|//When the step is really big or small, wrapping should still behave
name|dial
operator|.
name|setWrapping
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dial
operator|.
name|setValue
argument_list|(
name|dial
operator|.
name|minimum
argument_list|()
argument_list|)
expr_stmt|;
name|dial
operator|.
name|setSingleStep
argument_list|(
literal|305
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
operator|&
name|dial
argument_list|,
name|Qt
operator|::
name|Key_Up
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dial
operator|.
name|value
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|dial
operator|.
name|setValue
argument_list|(
name|dial
operator|.
name|minimum
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
operator|&
name|dial
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dial
operator|.
name|value
argument_list|()
argument_list|,
literal|95
argument_list|)
expr_stmt|;
name|dial
operator|.
name|setMinimum
argument_list|(
operator|-
literal|30
argument_list|)
expr_stmt|;
name|dial
operator|.
name|setMaximum
argument_list|(
operator|-
literal|4
argument_list|)
expr_stmt|;
name|dial
operator|.
name|setSingleStep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|dial
operator|.
name|setValue
argument_list|(
name|dial
operator|.
name|minimum
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
operator|&
name|dial
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dial
operator|.
name|value
argument_list|()
argument_list|,
operator|-
literal|22
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QDial
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qdial.moc"
end_include
end_unit
