begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|"qlineedit.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qstringlist.h"
end_include
begin_include
include|#
directive|include
file|"qstyle.h"
end_include
begin_include
include|#
directive|include
file|"qvalidator.h"
end_include
begin_include
include|#
directive|include
file|"qwidgetaction.h"
end_include
begin_include
include|#
directive|include
file|"qimage.h"
end_include
begin_include
include|#
directive|include
file|"qicon.h"
end_include
begin_include
include|#
directive|include
file|"qcompleter.h"
end_include
begin_include
include|#
directive|include
file|"qstandarditemmodel.h"
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformtheme.h>
end_include
begin_include
include|#
directive|include
file|"qstylehints.h"
end_include
begin_include
include|#
directive|include
file|<private/qapplication_p.h>
end_include
begin_include
include|#
directive|include
file|"qclipboard.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_MAC
end_ifdef
begin_include
include|#
directive|include
file|<cstdlib>
end_include
begin_comment
comment|// For the random function.
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<qlineedit.h>
end_include
begin_include
include|#
directive|include
file|<private/qlineedit_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qwidgetlinecontrol_p.h>
end_include
begin_include
include|#
directive|include
file|<qmenu.h>
end_include
begin_include
include|#
directive|include
file|<qlabel.h>
end_include
begin_include
include|#
directive|include
file|<qlayout.h>
end_include
begin_include
include|#
directive|include
file|<qspinbox.h>
end_include
begin_include
include|#
directive|include
file|<qlistview.h>
end_include
begin_include
include|#
directive|include
file|<qstringlistmodel.h>
end_include
begin_include
include|#
directive|include
file|<qsortfilterproxymodel.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qscreen.h>
end_include
begin_include
include|#
directive|include
file|"qcommonstyle.h"
end_include
begin_include
include|#
directive|include
file|"qstyleoption.h"
end_include
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_include
include|#
directive|include
file|"../../../shared/platformclipboard.h"
end_include
begin_include
include|#
directive|include
file|"../../../shared/platforminputcontext.h"
end_include
begin_include
include|#
directive|include
file|<private/qinputmethod_p.h>
end_include
begin_include
include|#
directive|include
file|"../../../qtest-config.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class_decl
class_decl|class
name|QPainter
class_decl|;
end_class_decl
begin_function
name|QT_END_NAMESPACE
DECL|function|centerOnScreen
specifier|static
specifier|inline
name|void
name|centerOnScreen
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
block|{
specifier|const
name|QPoint
name|offset
init|=
name|QPoint
argument_list|(
name|size
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|size
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
decl_stmt|;
name|w
operator|->
name|move
argument_list|(
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
operator|->
name|availableGeometry
argument_list|()
operator|.
name|center
argument_list|()
operator|-
name|offset
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|centerOnScreen
specifier|static
specifier|inline
name|void
name|centerOnScreen
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
name|centerOnScreen
argument_list|(
name|w
argument_list|,
name|w
operator|->
name|geometry
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|StyleOptionTestStyle
class|class
name|StyleOptionTestStyle
super|:
specifier|public
name|QCommonStyle
block|{
private|private:
DECL|member|readOnly
name|bool
name|readOnly
decl_stmt|;
public|public:
DECL|function|StyleOptionTestStyle
specifier|inline
name|StyleOptionTestStyle
parameter_list|()
member_init_list|:
name|QCommonStyle
argument_list|()
member_init_list|,
name|readOnly
argument_list|(
literal|false
argument_list|)
block|{     }
DECL|function|setReadOnly
specifier|inline
name|void
name|setReadOnly
parameter_list|(
name|bool
name|readOnly
parameter_list|)
block|{
name|this
operator|->
name|readOnly
operator|=
name|readOnly
expr_stmt|;
block|}
DECL|function|drawPrimitive
specifier|inline
name|void
name|drawPrimitive
parameter_list|(
name|PrimitiveElement
name|pe
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
name|QPainter
modifier|*
parameter_list|,
specifier|const
name|QWidget
modifier|*
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|pe
condition|)
block|{
case|case
name|PE_PanelLineEdit
case|:
if|if
condition|(
name|readOnly
condition|)
name|QVERIFY
argument_list|(
name|opt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_ReadOnly
argument_list|)
expr_stmt|;
else|else
name|QVERIFY
argument_list|(
operator|!
operator|(
name|opt
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_ReadOnly
operator|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
block|}
class|;
end_class
begin_class
DECL|class|tst_QLineEdit
class|class
name|tst_QLineEdit
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|enum|EventStates
DECL|enumerator|Press
DECL|enumerator|Release
DECL|enumerator|Click
enum|enum
name|EventStates
block|{
name|Press
block|,
name|Release
block|,
name|Click
block|}
enum|;
name|tst_QLineEdit
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QLineEdit
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|experimental
parameter_list|()
function_decl|;
name|void
name|upperAndLowercase
parameter_list|()
function_decl|;
name|void
name|setInputMask_data
parameter_list|()
function_decl|;
name|void
name|setInputMask
parameter_list|()
function_decl|;
name|void
name|inputMask_data
parameter_list|()
function_decl|;
name|void
name|inputMask
parameter_list|()
function_decl|;
name|void
name|clearInputMask
parameter_list|()
function_decl|;
name|void
name|keypress_inputMask_data
parameter_list|()
function_decl|;
name|void
name|keypress_inputMask
parameter_list|()
function_decl|;
name|void
name|inputMaskAndValidator_data
parameter_list|()
function_decl|;
name|void
name|inputMaskAndValidator
parameter_list|()
function_decl|;
name|void
name|hasAcceptableInputMask_data
parameter_list|()
function_decl|;
name|void
name|hasAcceptableInputMask
parameter_list|()
function_decl|;
name|void
name|hasAcceptableInputValidator
parameter_list|()
function_decl|;
name|void
name|redo_data
parameter_list|()
function_decl|;
name|void
name|redo
parameter_list|()
function_decl|;
name|void
name|undo_data
parameter_list|()
function_decl|;
name|void
name|undo
parameter_list|()
function_decl|;
name|void
name|undo_keypressevents_data
parameter_list|()
function_decl|;
name|void
name|undo_keypressevents
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
name|void
name|QTBUG5786_undoPaste
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|clear
parameter_list|()
function_decl|;
name|void
name|text_data
parameter_list|()
function_decl|;
name|void
name|text
parameter_list|()
function_decl|;
name|void
name|textMask_data
parameter_list|()
function_decl|;
name|void
name|textMask
parameter_list|()
function_decl|;
name|void
name|maskCharacter
parameter_list|()
function_decl|;
name|void
name|maskCharacter_data
parameter_list|()
function_decl|;
name|void
name|setText
parameter_list|()
function_decl|;
name|void
name|displayText_data
parameter_list|()
function_decl|;
name|void
name|displayText
parameter_list|()
function_decl|;
name|void
name|passwordEchoOnEdit
parameter_list|()
function_decl|;
name|void
name|passwordEchoDelay
parameter_list|()
function_decl|;
name|void
name|maxLength_mask_data
parameter_list|()
function_decl|;
name|void
name|maxLength_mask
parameter_list|()
function_decl|;
name|void
name|maxLength_data
parameter_list|()
function_decl|;
name|void
name|maxLength
parameter_list|()
function_decl|;
name|void
name|isReadOnly
parameter_list|()
function_decl|;
name|void
name|noCursorBlinkWhenReadOnly
parameter_list|()
function_decl|;
name|void
name|cursorPosition
parameter_list|()
function_decl|;
name|void
name|cursorPositionChanged_data
parameter_list|()
function_decl|;
name|void
name|cursorPositionChanged
parameter_list|()
function_decl|;
name|void
name|selectedText
parameter_list|()
function_decl|;
name|void
name|deleteSelectedText
parameter_list|()
function_decl|;
name|void
name|textChangedAndTextEdited
parameter_list|()
function_decl|;
name|void
name|returnPressed
parameter_list|()
function_decl|;
name|void
name|returnPressed_maskvalidator_data
parameter_list|()
function_decl|;
name|void
name|returnPressed_maskvalidator
parameter_list|()
function_decl|;
name|void
name|setValidator
parameter_list|()
function_decl|;
name|void
name|setValidator_QIntValidator_data
parameter_list|()
function_decl|;
name|void
name|setValidator_QIntValidator
parameter_list|()
function_decl|;
name|void
name|frame_data
parameter_list|()
function_decl|;
name|void
name|frame
parameter_list|()
function_decl|;
name|void
name|leftKeyOnSelectedText
parameter_list|()
function_decl|;
name|void
name|setAlignment_data
parameter_list|()
function_decl|;
name|void
name|setAlignment
parameter_list|()
function_decl|;
name|void
name|isModified
parameter_list|()
function_decl|;
name|void
name|edited
parameter_list|()
function_decl|;
name|void
name|insert
parameter_list|()
function_decl|;
name|void
name|setSelection_data
parameter_list|()
function_decl|;
name|void
name|setSelection
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
name|void
name|cut
parameter_list|()
function_decl|;
name|void
name|cutWithoutSelection
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|maxLengthAndInputMask
parameter_list|()
function_decl|;
name|void
name|returnPressedKeyEvent
parameter_list|()
function_decl|;
name|void
name|keepSelectionOnTabFocusIn
parameter_list|()
function_decl|;
name|void
name|readOnlyStyleOption
parameter_list|()
function_decl|;
name|void
name|validateOnFocusOut
parameter_list|()
function_decl|;
name|void
name|editInvalidText
parameter_list|()
function_decl|;
name|void
name|charWithAltOrCtrlModifier_data
parameter_list|()
function_decl|;
name|void
name|charWithAltOrCtrlModifier
parameter_list|()
function_decl|;
name|void
name|inlineCompletion
parameter_list|()
function_decl|;
name|void
name|noTextEditedOnClear
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QTEST_NO_CURSOR
name|void
name|cursor
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|textMargin_data
parameter_list|()
function_decl|;
name|void
name|textMargin
parameter_list|()
function_decl|;
comment|// task-specific tests:
name|void
name|task180999_focus
parameter_list|()
function_decl|;
name|void
name|task174640_editingFinished
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_COMPLETER
name|void
name|task198789_currentCompletion
parameter_list|()
function_decl|;
name|void
name|task210502_caseInsensitiveInlineCompletion
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|task229938_dontEmitChangedWhenTextIsNotChanged
parameter_list|()
function_decl|;
name|void
name|task233101_cursorPosAfterInputMethod_data
parameter_list|()
function_decl|;
name|void
name|task233101_cursorPosAfterInputMethod
parameter_list|()
function_decl|;
name|void
name|task241436_passwordEchoOnEditRestoreEchoMode
parameter_list|()
function_decl|;
name|void
name|task248948_redoRemovedSelection
parameter_list|()
function_decl|;
name|void
name|taskQTBUG_4401_enterKeyClearsPassword
parameter_list|()
function_decl|;
name|void
name|taskQTBUG_4679_moveToStartEndOfBlock
parameter_list|()
function_decl|;
name|void
name|taskQTBUG_4679_selectToStartEndOfBlock
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
name|void
name|taskQTBUG_7902_contextMenuCrash
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|taskQTBUG_7395_readOnlyShortcut
parameter_list|()
function_decl|;
name|void
name|QTBUG697_paletteCurrentColorGroup
parameter_list|()
function_decl|;
name|void
name|QTBUG13520_textNotVisible
parameter_list|()
function_decl|;
name|void
name|QTBUG7174_inputMaskCursorBlink
parameter_list|()
function_decl|;
name|void
name|QTBUG16850_setSelection
parameter_list|()
function_decl|;
name|void
name|bidiVisualMovement_data
parameter_list|()
function_decl|;
name|void
name|bidiVisualMovement
parameter_list|()
function_decl|;
name|void
name|bidiLogicalMovement_data
parameter_list|()
function_decl|;
name|void
name|bidiLogicalMovement
parameter_list|()
function_decl|;
name|void
name|selectAndCursorPosition
parameter_list|()
function_decl|;
name|void
name|inputMethod
parameter_list|()
function_decl|;
name|void
name|inputMethodSelection
parameter_list|()
function_decl|;
name|void
name|inputMethodQueryImHints_data
parameter_list|()
function_decl|;
name|void
name|inputMethodQueryImHints
parameter_list|()
function_decl|;
name|void
name|undoRedoAndEchoModes_data
parameter_list|()
function_decl|;
name|void
name|undoRedoAndEchoModes
parameter_list|()
function_decl|;
name|void
name|clearButton
parameter_list|()
function_decl|;
name|void
name|clearButtonVisibleAfterSettingText_QTBUG_45518
parameter_list|()
function_decl|;
name|void
name|sideWidgets
parameter_list|()
function_decl|;
name|void
name|sideWidgetsActionEvents
parameter_list|()
function_decl|;
name|void
name|shouldShowPlaceholderText_data
parameter_list|()
function_decl|;
name|void
name|shouldShowPlaceholderText
parameter_list|()
function_decl|;
name|void
name|QTBUG1266_setInputMaskEmittingTextEdited
parameter_list|()
function_decl|;
protected|protected
name|slots
protected|:
name|void
name|editingFinished
parameter_list|()
function_decl|;
name|void
name|onTextChanged
parameter_list|(
specifier|const
name|QString
modifier|&
name|newString
parameter_list|)
function_decl|;
name|void
name|onTextEdited
parameter_list|(
specifier|const
name|QString
modifier|&
name|newString
parameter_list|)
function_decl|;
name|void
name|onReturnPressed
parameter_list|()
function_decl|;
name|void
name|onSelectionChanged
parameter_list|()
function_decl|;
name|void
name|onCursorPositionChanged
parameter_list|(
name|int
name|oldpos
parameter_list|,
name|int
name|newpos
parameter_list|)
function_decl|;
private|private:
comment|// keyClicks(..) is moved to QtTestCase
name|void
name|psKeyClick
parameter_list|(
name|QWidget
modifier|*
name|target
parameter_list|,
name|Qt
operator|::
name|Key
name|key
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|pressState
init|=
literal|0
parameter_list|)
function_decl|;
name|void
name|psKeyClick
parameter_list|(
name|QTestEventList
modifier|&
name|keys
parameter_list|,
name|Qt
operator|::
name|Key
name|key
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|pressState
init|=
literal|0
parameter_list|)
function_decl|;
name|QLineEdit
modifier|*
name|ensureTestWidget
parameter_list|()
function_decl|;
DECL|member|validInput
name|bool
name|validInput
decl_stmt|;
DECL|member|changed_string
name|QString
name|changed_string
decl_stmt|;
DECL|member|changed_count
name|int
name|changed_count
decl_stmt|;
DECL|member|edited_count
name|int
name|edited_count
decl_stmt|;
DECL|member|return_count
name|int
name|return_count
decl_stmt|;
DECL|member|selection_count
name|int
name|selection_count
decl_stmt|;
DECL|member|lastCursorPos
name|int
name|lastCursorPos
decl_stmt|;
DECL|member|newCursorPos
name|int
name|newCursorPos
decl_stmt|;
DECL|member|m_testWidget
name|QLineEdit
modifier|*
name|m_testWidget
decl_stmt|;
DECL|member|m_keyboardScheme
name|int
name|m_keyboardScheme
decl_stmt|;
DECL|member|m_platformInputContext
name|PlatformInputContext
name|m_platformInputContext
decl_stmt|;
block|}
class|;
end_class
begin_typedef
DECL|typedef|IntList
typedef|typedef
name|QList
argument_list|<
name|int
argument_list|>
name|IntList
typedef|;
end_typedef
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QLineEdit::EchoMode
argument_list|)
end_macro
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QLineEdit
operator|::
name|getSetCheck
parameter_list|()
block|{
name|QLineEdit
name|obj1
decl_stmt|;
comment|// const QValidator * QLineEdit::validator()
comment|// void QLineEdit::setValidator(const QValidator *)
name|QIntValidator
modifier|*
name|var1
init|=
operator|new
name|QIntValidator
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|obj1
operator|.
name|setValidator
argument_list|(
name|var1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
specifier|const
name|QValidator
operator|*
operator|)
name|var1
argument_list|,
name|obj1
operator|.
name|validator
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setValidator
argument_list|(
operator|(
name|QValidator
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
specifier|const
name|QValidator
operator|*
operator|)
literal|0
argument_list|,
name|obj1
operator|.
name|validator
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|var1
expr_stmt|;
comment|// bool QLineEdit::dragEnabled()
comment|// void QLineEdit::setDragEnabled(bool)
name|obj1
operator|.
name|setDragEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|dragEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setDragEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|dragEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|tst_QLineEdit
name|tst_QLineEdit
operator|::
name|tst_QLineEdit
parameter_list|()
member_init_list|:
name|validInput
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_testWidget
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_keyboardScheme
argument_list|(
literal|0
argument_list|)
block|{
if|if
condition|(
specifier|const
name|QPlatformTheme
modifier|*
name|theme
init|=
name|QGuiApplicationPrivate
operator|::
name|platformTheme
argument_list|()
condition|)
name|m_keyboardScheme
operator|=
name|theme
operator|->
name|themeHint
argument_list|(
name|QPlatformTheme
operator|::
name|KeyboardScheme
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
comment|// Generalize for X11
if|if
condition|(
name|m_keyboardScheme
operator|==
name|QPlatformTheme
operator|::
name|KdeKeyboardScheme
operator|||
name|m_keyboardScheme
operator|==
name|QPlatformTheme
operator|::
name|GnomeKeyboardScheme
operator|||
name|m_keyboardScheme
operator|==
name|QPlatformTheme
operator|::
name|CdeKeyboardScheme
condition|)
block|{
name|m_keyboardScheme
operator|=
name|QPlatformTheme
operator|::
name|X11KeyboardScheme
expr_stmt|;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~tst_QLineEdit
name|tst_QLineEdit
operator|::
name|~
name|tst_QLineEdit
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|ensureTestWidget
name|QLineEdit
modifier|*
name|tst_QLineEdit
operator|::
name|ensureTestWidget
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_testWidget
condition|)
block|{
name|m_testWidget
operator|=
operator|new
name|QLineEdit
expr_stmt|;
name|m_testWidget
operator|->
name|setObjectName
argument_list|(
literal|"testWidget"
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_testWidget
argument_list|,
name|SIGNAL
argument_list|(
name|cursorPositionChanged
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|onCursorPositionChanged
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_testWidget
argument_list|,
name|SIGNAL
argument_list|(
name|textChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|onTextChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_testWidget
argument_list|,
name|SIGNAL
argument_list|(
name|textEdited
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|onTextEdited
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_testWidget
argument_list|,
name|SIGNAL
argument_list|(
name|returnPressed
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|onReturnPressed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_testWidget
argument_list|,
name|SIGNAL
argument_list|(
name|selectionChanged
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|onSelectionChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_testWidget
argument_list|,
name|SIGNAL
argument_list|(
name|editingFinished
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|editingFinished
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m_testWidget
operator|->
name|resize
argument_list|(
literal|200
argument_list|,
literal|50
argument_list|)
expr_stmt|;
block|}
return|return
name|m_testWidget
return|;
block|}
end_function
begin_function
DECL|function|initTestCase
name|void
name|tst_QLineEdit
operator|::
name|initTestCase
parameter_list|()
block|{
name|changed_count
operator|=
literal|0
expr_stmt|;
name|edited_count
operator|=
literal|0
expr_stmt|;
name|selection_count
operator|=
literal|0
expr_stmt|;
name|QInputMethodPrivate
modifier|*
name|inputMethodPrivate
init|=
name|QInputMethodPrivate
operator|::
name|get
argument_list|(
name|qApp
operator|->
name|inputMethod
argument_list|()
argument_list|)
decl_stmt|;
name|inputMethodPrivate
operator|->
name|testContext
operator|=
operator|&
name|m_platformInputContext
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QLineEdit
operator|::
name|cleanupTestCase
parameter_list|()
block|{
name|QInputMethodPrivate
modifier|*
name|inputMethodPrivate
init|=
name|QInputMethodPrivate
operator|::
name|get
argument_list|(
name|qApp
operator|->
name|inputMethod
argument_list|()
argument_list|)
decl_stmt|;
name|inputMethodPrivate
operator|->
name|testContext
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_QLineEdit
operator|::
name|init
parameter_list|()
block|{
name|return_count
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QLineEdit
operator|::
name|cleanup
parameter_list|()
block|{
operator|delete
name|m_testWidget
expr_stmt|;
name|m_testWidget
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|experimental
name|void
name|tst_QLineEdit
operator|::
name|experimental
parameter_list|()
block|{
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|QIntValidator
name|intValidator
argument_list|(
literal|3
argument_list|,
literal|7
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|testWidget
operator|->
name|setValidator
argument_list|(
operator|&
name|intValidator
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
comment|// test the order of setting these
name|testWidget
operator|->
name|setInputMask
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
literal|"abc123"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setInputMask
argument_list|(
literal|"000.000.000.000"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"123..."
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|upperAndLowercase
name|void
name|tst_QLineEdit
operator|::
name|upperAndLowercase
parameter_list|()
block|{
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|QTest
operator|::
name|keyClicks
argument_list|(
name|testWidget
argument_list|,
literal|"aAzZ`1234567890-=~!@#$%^&*()_+[]{}\\|;:'\",.<>/?"
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"aAzZ`1234567890-=~!@#$%^&*()_+[]{}\\|;:'\",.<>/?"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setInputMask_data
name|void
name|tst_QLineEdit
operator|::
name|setInputMask_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"mask"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedText"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedDisplay"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"insert_text"
argument_list|)
expr_stmt|;
comment|// both keyboard and insert()
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|bool
name|insert_text
init|=
name|i
operator|==
literal|0
condition|?
literal|false
else|:
literal|true
decl_stmt|;
name|QString
name|insert_mode
init|=
literal|"keys "
decl_stmt|;
if|if
condition|(
name|insert_text
condition|)
name|insert_mode
operator|=
literal|"insert "
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|insert_mode
operator|+
literal|"ip_localhost"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"000.000.000.000"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"127.0.0.1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"127.0.0.1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"127.0  .0  .1  "
argument_list|)
operator|<<
name|bool
argument_list|(
name|insert_text
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|insert_mode
operator|+
literal|"mac"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"HH:HH:HH:HH:HH:HH;#"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"00:E0:81:21:9E:8E"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"00:E0:81:21:9E:8E"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"00:E0:81:21:9E:8E"
argument_list|)
operator|<<
name|bool
argument_list|(
name|insert_text
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|insert_mode
operator|+
literal|"mac2"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<HH:>HH:!HH:HH:HH:HH;#"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AAe081219E8E"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aa:E0:81:21:9E:8E"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aa:E0:81:21:9E:8E"
argument_list|)
operator|<<
name|bool
argument_list|(
name|insert_text
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|insert_mode
operator|+
literal|"byte"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"BBBBBBBB;0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"11011001"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"11111"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"11011001"
argument_list|)
operator|<<
name|bool
argument_list|(
name|insert_text
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|insert_mode
operator|+
literal|"halfbytes"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bbbb.bbbb;-"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"110. 0001"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"110.0001"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"110-.0001"
argument_list|)
operator|<<
name|bool
argument_list|(
name|insert_text
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|insert_mode
operator|+
literal|"blank char same type as content"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"000.000.000.000;0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"127.0.0.1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"127...1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"127.000.000.100"
argument_list|)
operator|<<
name|bool
argument_list|(
name|insert_text
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|insert_mode
operator|+
literal|"parts of ip_localhost"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"000.000.000.000"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".0.0.1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".0.0.1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"   .0  .0  .1  "
argument_list|)
operator|<<
name|bool
argument_list|(
name|insert_text
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|insert_mode
operator|+
literal|"ip_null"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"000.000.000.000"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"..."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"   .   .   .   "
argument_list|)
operator|<<
name|bool
argument_list|(
name|insert_text
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|insert_mode
operator|+
literal|"ip_null_hash"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"000.000.000.000;#"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"..."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"###.###.###.###"
argument_list|)
operator|<<
name|bool
argument_list|(
name|insert_text
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|insert_mode
operator|+
literal|"ip_overflow"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"000.000.000.000"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1234123412341234"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"123.412.341.234"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"123.412.341.234"
argument_list|)
operator|<<
name|bool
argument_list|(
name|insert_text
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|insert_mode
operator|+
literal|"uppercase"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|">AAAA"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbCd"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABCD"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABCD"
argument_list|)
operator|<<
name|bool
argument_list|(
name|insert_text
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|insert_mode
operator|+
literal|"lowercase"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<AAAA"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbCd"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcd"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcd"
argument_list|)
operator|<<
name|bool
argument_list|(
name|insert_text
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|insert_mode
operator|+
literal|"nocase"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"!AAAA"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbCd"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbCd"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbCd"
argument_list|)
operator|<<
name|bool
argument_list|(
name|insert_text
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|insert_mode
operator|+
literal|"nocase1"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"!A!A!A!A"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbCd"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbCd"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbCd"
argument_list|)
operator|<<
name|bool
argument_list|(
name|insert_text
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|insert_mode
operator|+
literal|"nocase2"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AAAA"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbCd"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbCd"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbCd"
argument_list|)
operator|<<
name|bool
argument_list|(
name|insert_text
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|insert_mode
operator|+
literal|"reserved"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"{n}[0]"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A9"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A9"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A9"
argument_list|)
operator|<<
name|bool
argument_list|(
name|insert_text
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|insert_mode
operator|+
literal|"escape01"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\\N\\n00"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"9"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Nn9"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Nn9 "
argument_list|)
operator|<<
name|bool
argument_list|(
name|insert_text
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|insert_mode
operator|+
literal|"escape02"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\\\\00"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\\0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\\0 "
argument_list|)
operator|<<
name|bool
argument_list|(
name|insert_text
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|insert_mode
operator|+
literal|"escape03"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\\(00\\)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(0)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(0 )"
argument_list|)
operator|<<
name|bool
argument_list|(
name|insert_text
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|insert_mode
operator|+
literal|"upper_lower_nocase1"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|">AAAA<AAAA!AAAA"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbCdEfGhIjKl"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABCDefghIjKl"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABCDefghIjKl"
argument_list|)
operator|<<
name|bool
argument_list|(
name|insert_text
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|insert_mode
operator|+
literal|"upper_lower_nocase2"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|">aaaa<aaaa!aaaa"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbCdEfGhIjKl"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABCDefghIjKl"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABCDefghIjKl"
argument_list|)
operator|<<
name|bool
argument_list|(
name|insert_text
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|insert_mode
operator|+
literal|"exact_case1"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|">A<A<A>A>A<A!A!A"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbCdEFGH"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbcDEfGH"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbcDEfGH"
argument_list|)
operator|<<
name|bool
argument_list|(
name|insert_text
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|insert_mode
operator|+
literal|"exact_case2"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|">A<A<A>A>A<A!A!A"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aBcDefgh"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbcDEfgh"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbcDEfgh"
argument_list|)
operator|<<
name|bool
argument_list|(
name|insert_text
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|insert_mode
operator|+
literal|"exact_case3"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|">a<a<a>a>a<a!a!a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbCdEFGH"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbcDEfGH"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbcDEfGH"
argument_list|)
operator|<<
name|bool
argument_list|(
name|insert_text
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|insert_mode
operator|+
literal|"exact_case4"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|">a<a<a>a>a<a!a!a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aBcDefgh"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbcDEfgh"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbcDEfgh"
argument_list|)
operator|<<
name|bool
argument_list|(
name|insert_text
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|insert_mode
operator|+
literal|"exact_case5"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|">H<H<H>H>H<H!H!H"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aBcDef01"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbcDEf01"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbcDEf01"
argument_list|)
operator|<<
name|bool
argument_list|(
name|insert_text
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|insert_mode
operator|+
literal|"exact_case6"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|">h<h<h>h>h<h!h!h"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aBcDef92"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbcDEf92"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbcDEf92"
argument_list|)
operator|<<
name|bool
argument_list|(
name|insert_text
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|insert_mode
operator|+
literal|"illegal_keys1"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AAAAAAAA"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A2#a;.0!"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Aa"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Aa      "
argument_list|)
operator|<<
name|bool
argument_list|(
name|insert_text
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|insert_mode
operator|+
literal|"illegal_keys2"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AAAA"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"f4f4f4f4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ffff"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ffff"
argument_list|)
operator|<<
name|bool
argument_list|(
name|insert_text
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|insert_mode
operator|+
literal|"blank=input"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"9999;0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"2004"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"2004"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"2004"
argument_list|)
operator|<<
name|bool
argument_list|(
name|insert_text
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setInputMask
name|void
name|tst_QLineEdit
operator|::
name|setInputMask
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|mask
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedText
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedDisplay
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|insert_text
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"keys blank=input"
argument_list|,
literal|"To eat blanks or not? Known issue. Task 43172"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"insert blank=input"
argument_list|,
literal|"To eat blanks or not? Known issue. Task 43172"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
comment|// First set the input mask
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|setInputMask
argument_list|(
name|mask
argument_list|)
expr_stmt|;
comment|// then either insert using insert() or keyboard
if|if
condition|(
name|insert_text
condition|)
block|{
name|testWidget
operator|->
name|insert
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|psKeyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Home
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|input
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|input
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|expectedText
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|displayText
argument_list|()
argument_list|,
name|expectedDisplay
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|inputMask_data
name|void
name|tst_QLineEdit
operator|::
name|inputMask_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"mask"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedMask"
argument_list|)
expr_stmt|;
comment|// if no mask is set a nul string should be returned
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nul 1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nul 2"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
comment|// try different masks
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mask 1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"000.000.000.000"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"000.000.000.000"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mask 2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"000.000.000.000;#"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"000.000.000.000;#"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mask 3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AAA.aa.999.###;"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AAA.aa.999.###"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mask 4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|">abcdef<GHIJK"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|">abcdef<GHIJK"
argument_list|)
expr_stmt|;
comment|// set an invalid input mask...
comment|// the current behaviour is that this exact (faulty) string is returned.
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABCDEFGHIKLMNOP;"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABCDEFGHIKLMNOP"
argument_list|)
expr_stmt|;
comment|// verify that we can unset the mask again
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unset"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|inputMask
name|void
name|tst_QLineEdit
operator|::
name|inputMask
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|mask
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedMask
argument_list|)
expr_stmt|;
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|setInputMask
argument_list|(
name|mask
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|inputMask
argument_list|()
argument_list|,
name|expectedMask
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearInputMask
name|void
name|tst_QLineEdit
operator|::
name|clearInputMask
parameter_list|()
block|{
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|setInputMask
argument_list|(
literal|"000.000.000.000"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|inputMask
argument_list|()
operator|!=
name|QString
operator|::
name|null
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setInputMask
argument_list|(
name|QString
operator|::
name|null
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|inputMask
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|keypress_inputMask_data
name|void
name|tst_QLineEdit
operator|::
name|keypress_inputMask_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"mask"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QTestEventList
argument_list|>
argument_list|(
literal|"keys"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedText"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedDisplayText"
argument_list|)
expr_stmt|;
block|{
name|QTestEventList
name|keys
decl_stmt|;
comment|// inserting 'A1.2B'
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Home
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_1
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Period
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_2
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_B
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"jumping on period(separator)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"000.000;_"
argument_list|)
operator|<<
name|keys
operator|<<
name|QString
argument_list|(
literal|"1.2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1__.2__"
argument_list|)
expr_stmt|;
block|}
block|{
name|QTestEventList
name|keys
decl_stmt|;
comment|// inserting 'A1.2B'
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Home
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_0
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Exclam
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
literal|'P'
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_3
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"jumping on input"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"D0.AA.XX.AA.00;_"
argument_list|)
operator|<<
name|keys
operator|<<
name|QString
argument_list|(
literal|"0..!P..3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"_0.__.!P.__.3_"
argument_list|)
expr_stmt|;
block|}
block|{
name|QTestEventList
name|keys
decl_stmt|;
comment|// pressing delete
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Home
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Delete
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"delete"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"000.000;_"
argument_list|)
operator|<<
name|keys
operator|<<
name|QString
argument_list|(
literal|"."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"___.___"
argument_list|)
expr_stmt|;
block|}
block|{
name|QTestEventList
name|keys
decl_stmt|;
comment|// selecting all and delete
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Home
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_End
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Delete
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"deleting all"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"000.000;_"
argument_list|)
operator|<<
name|keys
operator|<<
name|QString
argument_list|(
literal|"."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"___.___"
argument_list|)
expr_stmt|;
block|}
block|{
name|QTestEventList
name|keys
decl_stmt|;
comment|// inserting '12.12' then two backspaces
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Home
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_1
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_2
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Period
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_1
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_2
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Backspace
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Backspace
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"backspace"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"000.000;_"
argument_list|)
operator|<<
name|keys
operator|<<
name|QString
argument_list|(
literal|"12."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"12_.___"
argument_list|)
expr_stmt|;
block|}
block|{
name|QTestEventList
name|keys
decl_stmt|;
comment|// inserting '12ab'
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Home
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_1
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_2
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_B
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"uppercase"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"9999>AA;_"
argument_list|)
operator|<<
name|keys
operator|<<
name|QString
argument_list|(
literal|"12 AB"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"12__ AB"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|keypress_inputMask
name|void
name|tst_QLineEdit
operator|::
name|keypress_inputMask
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|mask
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QTestEventList
argument_list|,
name|keys
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedText
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedDisplayText
argument_list|)
expr_stmt|;
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|setInputMask
argument_list|(
name|mask
argument_list|)
expr_stmt|;
name|keys
operator|.
name|simulate
argument_list|(
name|testWidget
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|expectedText
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|displayText
argument_list|()
argument_list|,
name|expectedDisplayText
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hasAcceptableInputMask_data
name|void
name|tst_QLineEdit
operator|::
name|hasAcceptableInputMask_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"optionalMask"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"requiredMask"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"invalid"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"valid"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Alphabetic optional and required"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aaaa"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AAAA"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcd"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Alphanumeric optional and require"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"nnnn"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"NNNN"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"R2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"R2D2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Any optional and required"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"xxxx"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"XXXX"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"+-"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"+-*/"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Numeric (0-9) required"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"0000"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"9999"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"11"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1138"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Numeric (1-9) optional and required"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"dddd"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"DDDD"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"12"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1234"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hasAcceptableInputMask
name|void
name|tst_QLineEdit
operator|::
name|hasAcceptableInputMask
parameter_list|()
block|{
name|QFocusEvent
name|lostFocus
argument_list|(
name|QEvent
operator|::
name|FocusOut
argument_list|)
decl_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|optionalMask
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|requiredMask
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|invalid
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|valid
argument_list|)
expr_stmt|;
comment|// test that invalid input (for required) work for optionalMask
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|setInputMask
argument_list|(
name|optionalMask
argument_list|)
expr_stmt|;
name|validInput
operator|=
literal|false
expr_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
name|invalid
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|sendEvent
argument_list|(
name|testWidget
argument_list|,
operator|&
name|lostFocus
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|validInput
argument_list|)
expr_stmt|;
comment|// at the moment we don't strip the blank character if it is valid input, this makes the test between x vs X useless
name|QEXPECT_FAIL
argument_list|(
literal|"Any optional and required"
argument_list|,
literal|"To eat blanks or not? Known issue. Task 43172"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
comment|// test requiredMask
name|testWidget
operator|->
name|setInputMask
argument_list|(
name|requiredMask
argument_list|)
expr_stmt|;
name|validInput
operator|=
literal|true
expr_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
name|invalid
argument_list|)
expr_stmt|;
name|validInput
operator|=
name|testWidget
operator|->
name|hasAcceptableInput
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|validInput
argument_list|)
expr_stmt|;
name|validInput
operator|=
literal|false
expr_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
name|valid
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|sendEvent
argument_list|(
name|testWidget
argument_list|,
operator|&
name|lostFocus
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|validInput
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|chars
specifier|static
specifier|const
name|int
name|chars
init|=
literal|8
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|ValidatorWithFixup
class|class
name|ValidatorWithFixup
super|:
specifier|public
name|QValidator
block|{
public|public:
DECL|function|ValidatorWithFixup
name|ValidatorWithFixup
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QValidator
argument_list|(
name|parent
argument_list|)
block|{}
DECL|function|validate
name|QValidator
operator|::
name|State
name|validate
parameter_list|(
name|QString
modifier|&
name|str
parameter_list|,
name|int
modifier|&
parameter_list|)
specifier|const
block|{
specifier|const
name|int
name|s
init|=
name|str
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|<
name|chars
condition|)
block|{
return|return
name|Intermediate
return|;
block|}
elseif|else
if|if
condition|(
name|s
operator|>
name|chars
condition|)
block|{
return|return
name|Invalid
return|;
block|}
return|return
name|Acceptable
return|;
block|}
DECL|function|fixup
name|void
name|fixup
parameter_list|(
name|QString
modifier|&
name|str
parameter_list|)
specifier|const
block|{
name|str
operator|=
name|str
operator|.
name|leftJustified
argument_list|(
name|chars
argument_list|,
literal|'X'
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|hasAcceptableInputValidator
name|void
name|tst_QLineEdit
operator|::
name|hasAcceptableInputValidator
parameter_list|()
block|{
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|QSignalSpy
name|spyChanged
argument_list|(
name|testWidget
argument_list|,
name|SIGNAL
argument_list|(
name|textChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spyEdited
argument_list|(
name|testWidget
argument_list|,
name|SIGNAL
argument_list|(
name|textEdited
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QFocusEvent
name|lostFocus
argument_list|(
name|QEvent
operator|::
name|FocusOut
argument_list|)
decl_stmt|;
name|ValidatorWithFixup
name|val
decl_stmt|;
name|testWidget
operator|->
name|setValidator
argument_list|(
operator|&
name|val
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
literal|"foobar"
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|sendEvent
argument_list|(
name|testWidget
argument_list|,
operator|&
name|lostFocus
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|hasAcceptableInput
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyChanged
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyEdited
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|maskCharacter_data
name|void
name|tst_QLineEdit
operator|::
name|maskCharacter_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"mask"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"expectedValid"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Hex"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"H"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"0123456789abcdefABCDEF"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hex"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"h"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"0123456789abcdefABCDEF"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"HexInvalid"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"H"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ghijklmnopqrstuvwxyzGHIJKLMNOPQRSTUVWXYZ"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hexInvalid"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"h"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ghijklmnopqrstuvwxyzGHIJKLMNOPQRSTUVWXYZ"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Bin"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"01"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bin"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"01"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BinInvalid"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"23456789qwertyuiopasdfghjklzxcvbnm"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"binInvalid"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"23456789qwertyuiopasdfghjklzxcvbnm"
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|maskCharacter
name|void
name|tst_QLineEdit
operator|::
name|maskCharacter
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|mask
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|expectedValid
argument_list|)
expr_stmt|;
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|QFocusEvent
name|lostFocus
argument_list|(
name|QEvent
operator|::
name|FocusOut
argument_list|)
decl_stmt|;
name|testWidget
operator|->
name|setInputMask
argument_list|(
name|mask
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|input
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|in
init|=
name|QString
argument_list|(
name|input
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|expected
init|=
name|expectedValid
condition|?
name|in
else|:
name|QString
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
name|QString
argument_list|(
name|input
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|sendEvent
argument_list|(
name|testWidget
argument_list|,
operator|&
name|lostFocus
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_define
DECL|macro|NORMAL
define|#
directive|define
name|NORMAL
value|0
end_define
begin_define
DECL|macro|REPLACE_UNTIL_END
define|#
directive|define
name|REPLACE_UNTIL_END
value|1
end_define
begin_function
DECL|function|undo_data
name|void
name|tst_QLineEdit
operator|::
name|undo_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"insertString"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|IntList
argument_list|>
argument_list|(
literal|"insertIndex"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|IntList
argument_list|>
argument_list|(
literal|"insertMode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"expectedString"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"use_keys"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|QString
name|keys_str
init|=
literal|"keyboard"
decl_stmt|;
name|bool
name|use_keys
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|keys_str
operator|=
literal|"insert"
expr_stmt|;
name|use_keys
operator|=
literal|false
expr_stmt|;
block|}
block|{
name|IntList
name|insertIndex
decl_stmt|;
name|IntList
name|insertMode
decl_stmt|;
name|QStringList
name|insertString
decl_stmt|;
name|QStringList
name|expectedString
decl_stmt|;
name|insertIndex
operator|<<
operator|-
literal|1
expr_stmt|;
name|insertMode
operator|<<
name|NORMAL
expr_stmt|;
name|insertString
operator|<<
literal|"1"
expr_stmt|;
name|insertIndex
operator|<<
operator|-
literal|1
expr_stmt|;
name|insertMode
operator|<<
name|NORMAL
expr_stmt|;
name|insertString
operator|<<
literal|"5"
expr_stmt|;
name|insertIndex
operator|<<
literal|1
expr_stmt|;
name|insertMode
operator|<<
name|NORMAL
expr_stmt|;
name|insertString
operator|<<
literal|"3"
expr_stmt|;
name|insertIndex
operator|<<
literal|1
expr_stmt|;
name|insertMode
operator|<<
name|NORMAL
expr_stmt|;
name|insertString
operator|<<
literal|"2"
expr_stmt|;
name|insertIndex
operator|<<
literal|3
expr_stmt|;
name|insertMode
operator|<<
name|NORMAL
expr_stmt|;
name|insertString
operator|<<
literal|"4"
expr_stmt|;
name|expectedString
operator|<<
literal|"12345"
expr_stmt|;
name|expectedString
operator|<<
literal|"1235"
expr_stmt|;
name|expectedString
operator|<<
literal|"135"
expr_stmt|;
name|expectedString
operator|<<
literal|"15"
expr_stmt|;
name|expectedString
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|keys_str
operator|+
literal|"_numbers"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|insertString
operator|<<
name|insertIndex
operator|<<
name|insertMode
operator|<<
name|expectedString
operator|<<
name|bool
argument_list|(
name|use_keys
argument_list|)
expr_stmt|;
block|}
block|{
name|IntList
name|insertIndex
decl_stmt|;
name|IntList
name|insertMode
decl_stmt|;
name|QStringList
name|insertString
decl_stmt|;
name|QStringList
name|expectedString
decl_stmt|;
name|insertIndex
operator|<<
operator|-
literal|1
expr_stmt|;
name|insertMode
operator|<<
name|NORMAL
expr_stmt|;
name|insertString
operator|<<
literal|"World"
expr_stmt|;
comment|// World
name|insertIndex
operator|<<
literal|0
expr_stmt|;
name|insertMode
operator|<<
name|NORMAL
expr_stmt|;
name|insertString
operator|<<
literal|"Hello"
expr_stmt|;
comment|// HelloWorld
name|insertIndex
operator|<<
literal|0
expr_stmt|;
name|insertMode
operator|<<
name|NORMAL
expr_stmt|;
name|insertString
operator|<<
literal|"Well"
expr_stmt|;
comment|// WellHelloWorld
name|insertIndex
operator|<<
literal|9
expr_stmt|;
name|insertMode
operator|<<
name|NORMAL
expr_stmt|;
name|insertString
operator|<<
literal|"There"
expr_stmt|;
comment|// WellHelloThereWorld;
name|expectedString
operator|<<
literal|"WellHelloThereWorld"
expr_stmt|;
name|expectedString
operator|<<
literal|"WellHelloWorld"
expr_stmt|;
name|expectedString
operator|<<
literal|"HelloWorld"
expr_stmt|;
name|expectedString
operator|<<
literal|"World"
expr_stmt|;
name|expectedString
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|keys_str
operator|+
literal|"_helloworld"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|insertString
operator|<<
name|insertIndex
operator|<<
name|insertMode
operator|<<
name|expectedString
operator|<<
name|bool
argument_list|(
name|use_keys
argument_list|)
expr_stmt|;
block|}
block|{
name|IntList
name|insertIndex
decl_stmt|;
name|IntList
name|insertMode
decl_stmt|;
name|QStringList
name|insertString
decl_stmt|;
name|QStringList
name|expectedString
decl_stmt|;
name|insertIndex
operator|<<
operator|-
literal|1
expr_stmt|;
name|insertMode
operator|<<
name|NORMAL
expr_stmt|;
name|insertString
operator|<<
literal|"Ensuring"
expr_stmt|;
name|insertIndex
operator|<<
operator|-
literal|1
expr_stmt|;
name|insertMode
operator|<<
name|NORMAL
expr_stmt|;
name|insertString
operator|<<
literal|" instan"
expr_stmt|;
name|insertIndex
operator|<<
literal|9
expr_stmt|;
name|insertMode
operator|<<
name|NORMAL
expr_stmt|;
name|insertString
operator|<<
literal|"an "
expr_stmt|;
name|insertIndex
operator|<<
literal|10
expr_stmt|;
name|insertMode
operator|<<
name|REPLACE_UNTIL_END
expr_stmt|;
name|insertString
operator|<<
literal|" unique instance."
expr_stmt|;
name|expectedString
operator|<<
literal|"Ensuring a unique instance."
expr_stmt|;
name|expectedString
operator|<<
literal|"Ensuring an instan"
expr_stmt|;
name|expectedString
operator|<<
literal|"Ensuring instan"
expr_stmt|;
name|expectedString
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|keys_str
operator|+
literal|"_patterns"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|insertString
operator|<<
name|insertIndex
operator|<<
name|insertMode
operator|<<
name|expectedString
operator|<<
name|bool
argument_list|(
name|use_keys
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|undo
name|void
name|tst_QLineEdit
operator|::
name|undo
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|insertString
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|IntList
argument_list|,
name|insertIndex
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|IntList
argument_list|,
name|insertMode
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|expectedString
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|use_keys
argument_list|)
expr_stmt|;
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isUndoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
decl_stmt|;
comment|// STEP 1: First build up an undo history by inserting or typing some strings...
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|insertString
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|insertIndex
index|[
name|i
index|]
operator|>
operator|-
literal|1
condition|)
name|testWidget
operator|->
name|setCursorPosition
argument_list|(
name|insertIndex
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|// experimental stuff
if|if
condition|(
name|insertMode
index|[
name|i
index|]
operator|==
name|REPLACE_UNTIL_END
condition|)
block|{
name|testWidget
operator|->
name|setSelection
argument_list|(
name|insertIndex
index|[
name|i
index|]
argument_list|,
literal|8
argument_list|)
expr_stmt|;
comment|// This is what I actually want...
comment|// QTest::keyClick(testWidget, Qt::Key_End, Qt::ShiftModifier);
block|}
if|if
condition|(
name|use_keys
condition|)
name|QTest
operator|::
name|keyClicks
argument_list|(
name|testWidget
argument_list|,
name|insertString
index|[
name|i
index|]
argument_list|)
expr_stmt|;
else|else
name|testWidget
operator|->
name|insert
argument_list|(
name|insertString
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// STEP 2: Next call undo several times and see if we can restore to the previous state
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|expectedString
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|expectedString
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|isUndoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|undo
argument_list|()
expr_stmt|;
block|}
comment|// STEP 3: Verify that we have undone everything
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isUndoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_keyboardScheme
operator|==
name|QPlatformTheme
operator|::
name|WindowsKeyboardScheme
condition|)
block|{
comment|// Repeat the test using shortcut instead of undo()
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|insertString
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|insertIndex
index|[
name|i
index|]
operator|>
operator|-
literal|1
condition|)
name|testWidget
operator|->
name|setCursorPosition
argument_list|(
name|insertIndex
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|insertMode
index|[
name|i
index|]
operator|==
name|REPLACE_UNTIL_END
condition|)
name|testWidget
operator|->
name|setSelection
argument_list|(
name|insertIndex
index|[
name|i
index|]
argument_list|,
literal|8
argument_list|)
expr_stmt|;
if|if
condition|(
name|use_keys
condition|)
name|QTest
operator|::
name|keyClicks
argument_list|(
name|testWidget
argument_list|,
name|insertString
index|[
name|i
index|]
argument_list|)
expr_stmt|;
else|else
name|testWidget
operator|->
name|insert
argument_list|(
name|insertString
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|expectedString
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|expectedString
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|isUndoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Backspace
argument_list|,
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|redo_data
name|void
name|tst_QLineEdit
operator|::
name|redo_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"insertString"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|IntList
argument_list|>
argument_list|(
literal|"insertIndex"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"expectedString"
argument_list|)
expr_stmt|;
block|{
name|IntList
name|insertIndex
decl_stmt|;
name|QStringList
name|insertString
decl_stmt|;
name|QStringList
name|expectedString
decl_stmt|;
name|insertIndex
operator|<<
operator|-
literal|1
expr_stmt|;
name|insertString
operator|<<
literal|"World"
expr_stmt|;
comment|// World
name|insertIndex
operator|<<
literal|0
expr_stmt|;
name|insertString
operator|<<
literal|"Hello"
expr_stmt|;
comment|// HelloWorld
name|insertIndex
operator|<<
literal|0
expr_stmt|;
name|insertString
operator|<<
literal|"Well"
expr_stmt|;
comment|// WellHelloWorld
name|insertIndex
operator|<<
literal|9
expr_stmt|;
name|insertString
operator|<<
literal|"There"
expr_stmt|;
comment|// WellHelloThereWorld;
name|expectedString
operator|<<
literal|"World"
expr_stmt|;
name|expectedString
operator|<<
literal|"HelloWorld"
expr_stmt|;
name|expectedString
operator|<<
literal|"WellHelloWorld"
expr_stmt|;
name|expectedString
operator|<<
literal|"WellHelloThereWorld"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Inserts and setting cursor"
argument_list|)
operator|<<
name|insertString
operator|<<
name|insertIndex
operator|<<
name|expectedString
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|redo
name|void
name|tst_QLineEdit
operator|::
name|redo
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|insertString
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|IntList
argument_list|,
name|insertIndex
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|expectedString
argument_list|)
expr_stmt|;
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isUndoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isRedoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
decl_stmt|;
comment|// inserts the diff strings at diff positions
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|insertString
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|insertIndex
index|[
name|i
index|]
operator|>
operator|-
literal|1
condition|)
name|testWidget
operator|->
name|setCursorPosition
argument_list|(
name|insertIndex
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|insert
argument_list|(
name|insertString
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isRedoAvailable
argument_list|()
argument_list|)
expr_stmt|;
comment|// undo everything
while|while
condition|(
operator|!
name|testWidget
operator|->
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|testWidget
operator|->
name|undo
argument_list|()
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|expectedString
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|isRedoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|redo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|expectedString
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isRedoAvailable
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_keyboardScheme
operator|==
name|QPlatformTheme
operator|::
name|WindowsKeyboardScheme
condition|)
block|{
comment|// repeat test, this time using shortcuts instead of undo()/redo()
while|while
condition|(
operator|!
name|testWidget
operator|->
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Backspace
argument_list|,
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|expectedString
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|isRedoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Backspace
argument_list|,
name|Qt
operator|::
name|ShiftModifier
operator||
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|expectedString
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isRedoAvailable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|undo_keypressevents_data
name|void
name|tst_QLineEdit
operator|::
name|undo_keypressevents_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QTestEventList
argument_list|>
argument_list|(
literal|"keys"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"expectedString"
argument_list|)
expr_stmt|;
block|{
name|QTestEventList
name|keys
decl_stmt|;
name|QStringList
name|expectedString
decl_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
literal|'A'
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
literal|'F'
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
literal|'R'
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
literal|'A'
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
literal|'I'
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
literal|'D'
argument_list|)
expr_stmt|;
name|psKeyClick
argument_list|(
name|keys
argument_list|,
name|Qt
operator|::
name|Key_Home
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
literal|'V'
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
literal|'E'
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
literal|'R'
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
literal|'Y'
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
literal|'B'
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
literal|'E'
argument_list|)
expr_stmt|;
name|psKeyClick
argument_list|(
name|keys
argument_list|,
name|Qt
operator|::
name|Key_End
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Exclam
argument_list|)
expr_stmt|;
name|expectedString
operator|<<
literal|"BEVERYAFRAID!"
expr_stmt|;
name|expectedString
operator|<<
literal|"BEVERYAFRAID"
expr_stmt|;
name|expectedString
operator|<<
literal|"VERYAFRAID"
expr_stmt|;
name|expectedString
operator|<<
literal|"AFRAID"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Inserts and moving cursor"
argument_list|)
operator|<<
name|keys
operator|<<
name|expectedString
expr_stmt|;
block|}
block|{
name|QTestEventList
name|keys
decl_stmt|;
name|QStringList
name|expectedString
decl_stmt|;
comment|// inserting '1234'
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_1
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_2
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_3
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_4
argument_list|)
expr_stmt|;
name|psKeyClick
argument_list|(
name|keys
argument_list|,
name|Qt
operator|::
name|Key_Home
argument_list|)
expr_stmt|;
comment|// skipping '12'
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Right
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Right
argument_list|)
expr_stmt|;
comment|// selecting '34'
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Right
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Right
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
comment|// deleting '34'
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Delete
argument_list|)
expr_stmt|;
name|expectedString
operator|<<
literal|"12"
expr_stmt|;
name|expectedString
operator|<<
literal|"1234"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Inserts,moving,selection and delete"
argument_list|)
operator|<<
name|keys
operator|<<
name|expectedString
expr_stmt|;
block|}
block|{
name|QTestEventList
name|keys
decl_stmt|;
name|QStringList
name|expectedString
decl_stmt|;
comment|// inserting 'AB12'
name|keys
operator|.
name|addKeyClick
argument_list|(
literal|'A'
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
literal|'B'
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_1
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_2
argument_list|)
expr_stmt|;
name|psKeyClick
argument_list|(
name|keys
argument_list|,
name|Qt
operator|::
name|Key_Home
argument_list|)
expr_stmt|;
comment|// selecting 'AB'
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Right
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Right
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
comment|// deleting 'AB'
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Delete
argument_list|)
expr_stmt|;
comment|// undoing deletion of 'AB'
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Z
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
comment|// unselect any current selection
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Right
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
name|Q_OS_WIN
operator|||
name|defined
name|Q_OS_QNX
comment|//Windows and QNX do not jump to the beginning of the selection
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// selecting '12'
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Right
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Right
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
comment|// deleting '12'
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Delete
argument_list|)
expr_stmt|;
name|expectedString
operator|<<
literal|"AB"
expr_stmt|;
name|expectedString
operator|<<
literal|"AB12"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Inserts,moving,selection, delete and undo"
argument_list|)
operator|<<
name|keys
operator|<<
name|expectedString
expr_stmt|;
block|}
block|{
name|QTestEventList
name|keys
decl_stmt|;
name|QStringList
name|expectedString
decl_stmt|;
comment|// inserting 'ABCD'
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_B
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_C
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_D
argument_list|)
expr_stmt|;
comment|//move left two
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
comment|// inserting '1234'
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_1
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_2
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_3
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_4
argument_list|)
expr_stmt|;
comment|// selecting '1234'
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
comment|// overwriting '1234' with '5'
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_5
argument_list|)
expr_stmt|;
comment|// undoing deletion of 'AB'
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Z
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
comment|// overwriting '1234' with '6'
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_6
argument_list|)
expr_stmt|;
name|expectedString
operator|<<
literal|"ab6cd"
expr_stmt|;
comment|// for versions previous to 3.2 we overwrite needed two undo operations
name|expectedString
operator|<<
literal|"ab1234cd"
expr_stmt|;
name|expectedString
operator|<<
literal|"abcd"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Inserts,moving,selection and undo, removing selection"
argument_list|)
operator|<<
name|keys
operator|<<
name|expectedString
expr_stmt|;
block|}
block|{
name|QTestEventList
name|keys
decl_stmt|;
name|QStringList
name|expectedString
decl_stmt|;
comment|// inserting 'ABC'
name|keys
operator|.
name|addKeyClick
argument_list|(
literal|'A'
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
literal|'B'
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
literal|'C'
argument_list|)
expr_stmt|;
comment|// removes 'C'
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Backspace
argument_list|)
expr_stmt|;
name|expectedString
operator|<<
literal|"AB"
expr_stmt|;
name|expectedString
operator|<<
literal|"ABC"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Inserts,backspace"
argument_list|)
operator|<<
name|keys
operator|<<
name|expectedString
expr_stmt|;
block|}
block|{
name|QTestEventList
name|keys
decl_stmt|;
name|QStringList
name|expectedString
decl_stmt|;
comment|// inserting 'ABC'
name|keys
operator|.
name|addKeyClick
argument_list|(
literal|'A'
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
literal|'B'
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
literal|'C'
argument_list|)
expr_stmt|;
comment|// removes 'C'
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Backspace
argument_list|)
expr_stmt|;
comment|// inserting 'Z'
name|keys
operator|.
name|addKeyClick
argument_list|(
literal|'Z'
argument_list|)
expr_stmt|;
name|expectedString
operator|<<
literal|"ABZ"
expr_stmt|;
name|expectedString
operator|<<
literal|"AB"
expr_stmt|;
name|expectedString
operator|<<
literal|"ABC"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Inserts,backspace,inserts"
argument_list|)
operator|<<
name|keys
operator|<<
name|expectedString
expr_stmt|;
block|}
block|{
name|QTestEventList
name|keys
decl_stmt|;
name|QStringList
name|expectedString
decl_stmt|;
comment|// inserting '123'
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_1
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_2
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_3
argument_list|)
expr_stmt|;
name|psKeyClick
argument_list|(
name|keys
argument_list|,
name|Qt
operator|::
name|Key_Home
argument_list|)
expr_stmt|;
comment|// selecting '123'
name|psKeyClick
argument_list|(
name|keys
argument_list|,
name|Qt
operator|::
name|Key_End
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
comment|// overwriting '123' with 'ABC'
name|keys
operator|.
name|addKeyClick
argument_list|(
literal|'A'
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
literal|'B'
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
literal|'C'
argument_list|)
expr_stmt|;
name|expectedString
operator|<<
literal|"ABC"
expr_stmt|;
comment|// for versions previous to 3.2 we overwrite needed two undo operations
name|expectedString
operator|<<
literal|"123"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Inserts,moving,selection and overwriting"
argument_list|)
operator|<<
name|keys
operator|<<
name|expectedString
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|undo_keypressevents
name|void
name|tst_QLineEdit
operator|::
name|undo_keypressevents
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QTestEventList
argument_list|,
name|keys
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|expectedString
argument_list|)
expr_stmt|;
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|keys
operator|.
name|simulate
argument_list|(
name|testWidget
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedString
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|expectedString
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|undo
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
end_ifndef
begin_function
DECL|function|QTBUG5786_undoPaste
name|void
name|tst_QLineEdit
operator|::
name|QTBUG5786_undoPaste
parameter_list|()
block|{
if|if
condition|(
operator|!
name|PlatformClipboard
operator|::
name|isAvailable
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"this machine doesn't support the clipboard"
argument_list|)
expr_stmt|;
name|QString
name|initial
argument_list|(
literal|"initial"
argument_list|)
decl_stmt|;
name|QString
name|string
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|QString
name|additional
argument_list|(
literal|"add"
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|setText
argument_list|(
name|string
argument_list|)
expr_stmt|;
name|QLineEdit
name|edit
argument_list|(
name|initial
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|edit
operator|.
name|text
argument_list|()
argument_list|,
name|initial
argument_list|)
expr_stmt|;
name|edit
operator|.
name|paste
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|edit
operator|.
name|text
argument_list|()
argument_list|,
name|initial
operator|+
name|string
argument_list|)
expr_stmt|;
name|edit
operator|.
name|paste
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|edit
operator|.
name|text
argument_list|()
argument_list|,
name|initial
operator|+
name|string
operator|+
name|string
argument_list|)
expr_stmt|;
name|edit
operator|.
name|insert
argument_list|(
name|additional
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|edit
operator|.
name|text
argument_list|()
argument_list|,
name|initial
operator|+
name|string
operator|+
name|string
operator|+
name|additional
argument_list|)
expr_stmt|;
name|edit
operator|.
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|edit
operator|.
name|text
argument_list|()
argument_list|,
name|initial
operator|+
name|string
operator|+
name|string
argument_list|)
expr_stmt|;
name|edit
operator|.
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|edit
operator|.
name|text
argument_list|()
argument_list|,
name|initial
operator|+
name|string
argument_list|)
expr_stmt|;
name|edit
operator|.
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|edit
operator|.
name|text
argument_list|()
argument_list|,
name|initial
argument_list|)
expr_stmt|;
name|edit
operator|.
name|selectAll
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|setText
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|edit
operator|.
name|paste
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|edit
operator|.
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|clear
name|void
name|tst_QLineEdit
operator|::
name|clear
parameter_list|()
block|{
comment|// checking that clear of empty/nullstring doesn't add to undo history
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|int
name|max
init|=
literal|5000
decl_stmt|;
while|while
condition|(
name|max
operator|>
literal|0
operator|&&
name|testWidget
operator|->
name|isUndoAvailable
argument_list|()
condition|)
block|{
name|max
operator|--
expr_stmt|;
name|testWidget
operator|->
name|undo
argument_list|()
expr_stmt|;
block|}
name|testWidget
operator|->
name|clear
argument_list|()
expr_stmt|;
comment|//    QVERIFY(!testWidget->isUndoAvailable());
comment|// checks that clear actually clears
name|testWidget
operator|->
name|insert
argument_list|(
literal|"I am Legend"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// checks that clears can be undone
name|testWidget
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"I am Legend"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|editingFinished
name|void
name|tst_QLineEdit
operator|::
name|editingFinished
parameter_list|()
block|{
if|if
condition|(
name|m_testWidget
operator|->
name|hasAcceptableInput
argument_list|()
condition|)
name|validInput
operator|=
literal|true
expr_stmt|;
else|else
name|validInput
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|text_data
name|void
name|tst_QLineEdit
operator|::
name|text_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"insertString"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Plain text0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Plain text1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Plain text2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Plain text3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ryyryryryryryryryryryryryryryryryryryryryryryryryryryrryryryryryryryryryryryryryryryryryryryryryryryryryryryryryryryryryrryryryryryryryryryryryryry"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Plain text4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890`~!@#$%^&*()_-+={[}]|\\:;'?/>.<,\""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Newlines"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A\nB\nC\n"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Text with nbsp"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Hello"
argument_list|)
operator|+
name|QChar
argument_list|(
literal|0xa0
argument_list|)
operator|+
literal|"World"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|text
name|void
name|tst_QLineEdit
operator|::
name|text
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|insertString
argument_list|)
expr_stmt|;
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
name|insertString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|insertString
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|textMask_data
name|void
name|tst_QLineEdit
operator|::
name|textMask_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"insertString"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Plain text1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|textMask
name|void
name|tst_QLineEdit
operator|::
name|textMask
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|insertString
argument_list|)
expr_stmt|;
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|setInputMask
argument_list|(
literal|"#"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
name|insertString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|insertString
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setText
name|void
name|tst_QLineEdit
operator|::
name|setText
parameter_list|()
block|{
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|QSignalSpy
name|editedSpy
argument_list|(
name|testWidget
argument_list|,
name|SIGNAL
argument_list|(
name|textEdited
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|changedSpy
argument_list|(
name|testWidget
argument_list|,
name|SIGNAL
argument_list|(
name|textChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|editedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|changedSpy
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|displayText_data
name|void
name|tst_QLineEdit
operator|::
name|displayText_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"insertString"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedString"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QLineEdit
operator|::
name|EchoMode
argument_list|>
argument_list|(
literal|"mode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"use_setText"
argument_list|)
expr_stmt|;
name|QString
name|s
decl_stmt|;
name|QLineEdit
operator|::
name|EchoMode
name|m
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|QString
name|key_mode_str
decl_stmt|;
name|bool
name|use_setText
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|key_mode_str
operator|=
literal|"setText_"
expr_stmt|;
name|use_setText
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|key_mode_str
operator|=
literal|"useKeys_"
expr_stmt|;
name|use_setText
operator|=
literal|false
expr_stmt|;
block|}
name|s
operator|=
name|key_mode_str
operator|+
literal|"Normal"
expr_stmt|;
name|m
operator|=
name|QLineEdit
operator|::
name|Normal
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|s
operator|+
literal|" text0"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Hello World"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Hello World"
argument_list|)
operator|<<
name|m
operator|<<
name|bool
argument_list|(
name|use_setText
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|s
operator|+
literal|" text1"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|m
operator|<<
name|bool
argument_list|(
name|use_setText
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|s
operator|+
literal|" text2"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
name|m
operator|<<
name|bool
argument_list|(
name|use_setText
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|s
operator|+
literal|" text3"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ryyryryryryryryryryryryryryryryryryryryryryryryryryryrryryryryryryryryryryryryryryryryryryryryryryryryryryryryryryryryryrryryryryryryryryryryryryry"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ryyryryryryryryryryryryryryryryryryryryryryryryryryryrryryryryryryryryryryryryryryryryryryryryryryryryryryryryryryryryryrryryryryryryryryryryryryry"
argument_list|)
operator|<<
name|m
operator|<<
name|bool
argument_list|(
name|use_setText
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|s
operator|+
literal|" text4"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890`~!@#$%^&*()_-+={[}]|\\:;'?/>.<,\""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890`~!@#$%^&*()_-+={[}]|\\:;'?/>.<,\""
argument_list|)
operator|<<
name|m
operator|<<
name|bool
argument_list|(
name|use_setText
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|s
operator|+
literal|" text with nbsp"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Hello"
argument_list|)
operator|+
name|QChar
argument_list|(
literal|0xa0
argument_list|)
operator|+
literal|"World"
operator|<<
name|QString
argument_list|(
literal|"Hello"
argument_list|)
operator|+
name|QChar
argument_list|(
literal|0xa0
argument_list|)
operator|+
literal|"World"
operator|<<
name|m
operator|<<
name|bool
argument_list|(
name|use_setText
argument_list|)
expr_stmt|;
name|s
operator|=
name|key_mode_str
operator|+
literal|"NoEcho"
expr_stmt|;
name|m
operator|=
name|QLineEdit
operator|::
name|NoEcho
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|s
operator|+
literal|" text0"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Hello World"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|m
operator|<<
name|bool
argument_list|(
name|use_setText
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|s
operator|+
literal|" text1"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|m
operator|<<
name|bool
argument_list|(
name|use_setText
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|s
operator|+
literal|" text2"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|m
operator|<<
name|bool
argument_list|(
name|use_setText
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|s
operator|+
literal|" text3"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ryyryryryryryryryryryryryryryryryryryryryryryryryryryrryryryryryryryryryryryryryryryryryryryryryryryryryryryryryryryryryrryryryryryryryryryryryryry"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|m
operator|<<
name|bool
argument_list|(
name|use_setText
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|s
operator|+
literal|" text4"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890`~!@#$%^&*()_-+={[}]|\\:;'?/>.<,\""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|m
operator|<<
name|bool
argument_list|(
name|use_setText
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|s
operator|+
literal|" text with nbsp"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Hello"
argument_list|)
operator|+
name|QChar
argument_list|(
literal|0xa0
argument_list|)
operator|+
literal|"World"
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|m
operator|<<
name|bool
argument_list|(
name|use_setText
argument_list|)
expr_stmt|;
name|s
operator|=
name|key_mode_str
operator|+
literal|"Password"
expr_stmt|;
name|m
operator|=
name|QLineEdit
operator|::
name|Password
expr_stmt|;
name|QChar
name|passChar
init|=
name|qApp
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_LineEdit_PasswordCharacter
argument_list|,
literal|0
argument_list|,
name|m_testWidget
argument_list|)
decl_stmt|;
name|QString
name|input
decl_stmt|;
name|QString
name|pass
decl_stmt|;
name|input
operator|=
literal|"Hello World"
expr_stmt|;
name|pass
operator|.
name|resize
argument_list|(
name|input
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|pass
operator|.
name|fill
argument_list|(
name|passChar
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|s
operator|+
literal|" text0"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|input
operator|<<
name|pass
operator|<<
name|m
operator|<<
name|bool
argument_list|(
name|use_setText
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|s
operator|+
literal|" text1"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|m
operator|<<
name|bool
argument_list|(
name|use_setText
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|s
operator|+
literal|" text2"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
name|QString
argument_list|(
name|passChar
argument_list|)
operator|<<
name|m
operator|<<
name|bool
argument_list|(
name|use_setText
argument_list|)
expr_stmt|;
name|input
operator|=
name|QString
argument_list|(
literal|"ryyryryryryryryryryryryryryryryryryryryryryryryryryryrryryryryryryryryryryryryryryryryryryryryryryryryryryryryryryryryryrryryryryryryryryryryryryry"
argument_list|)
expr_stmt|;
name|pass
operator|.
name|resize
argument_list|(
name|input
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|pass
operator|.
name|fill
argument_list|(
name|passChar
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|s
operator|+
literal|" text3"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|input
operator|<<
name|pass
operator|<<
name|m
operator|<<
name|bool
argument_list|(
name|use_setText
argument_list|)
expr_stmt|;
name|input
operator|=
name|QString
argument_list|(
literal|"abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890`~!@#$%^&*()_-+={[}]|\\:;'?/>.<,\""
argument_list|)
expr_stmt|;
name|pass
operator|.
name|fill
argument_list|(
name|passChar
argument_list|,
name|input
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|s
operator|+
literal|" text4"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|input
operator|<<
name|pass
operator|<<
name|m
operator|<<
name|bool
argument_list|(
name|use_setText
argument_list|)
expr_stmt|;
name|input
operator|=
name|QString
argument_list|(
literal|"Hello"
argument_list|)
operator|+
name|QChar
argument_list|(
literal|0xa0
argument_list|)
operator|+
literal|"World"
expr_stmt|;
name|pass
operator|.
name|resize
argument_list|(
name|input
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|pass
operator|.
name|fill
argument_list|(
name|passChar
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|s
operator|+
literal|" text with nbsp"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|input
operator|<<
name|pass
operator|<<
name|m
operator|<<
name|bool
argument_list|(
name|use_setText
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|displayText
name|void
name|tst_QLineEdit
operator|::
name|displayText
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|insertString
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedString
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QLineEdit
operator|::
name|EchoMode
argument_list|,
name|mode
argument_list|)
expr_stmt|;
comment|//QFETCH(bool, use_setText);  Currently unused.
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|setEchoMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
name|insertString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|displayText
argument_list|()
argument_list|,
name|expectedString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|echoMode
argument_list|()
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|passwordEchoOnEdit
name|void
name|tst_QLineEdit
operator|::
name|passwordEchoOnEdit
parameter_list|()
block|{
name|QStyleOptionFrame
name|opt
decl_stmt|;
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|QChar
name|fillChar
init|=
name|testWidget
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_LineEdit_PasswordCharacter
argument_list|,
operator|&
name|opt
argument_list|,
name|testWidget
argument_list|)
decl_stmt|;
name|testWidget
operator|->
name|setEchoMode
argument_list|(
name|QLineEdit
operator|::
name|PasswordEchoOnEdit
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|centerOnScreen
argument_list|(
name|testWidget
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|show
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|raise
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
name|testWidget
argument_list|)
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|testWidget
operator|->
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
literal|'0'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
literal|'1'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
literal|'2'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
literal|'3'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
literal|'4'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|displayText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"01234"
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|clearFocus
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|displayText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|5
argument_list|,
name|fillChar
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|testWidget
operator|->
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|displayText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|5
argument_list|,
name|fillChar
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
literal|'0'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|displayText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// restore clean state
name|testWidget
operator|->
name|setEchoMode
argument_list|(
name|QLineEdit
operator|::
name|Normal
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|passwordEchoDelay
name|void
name|tst_QLineEdit
operator|::
name|passwordEchoDelay
parameter_list|()
block|{
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|int
name|delay
init|=
name|qGuiApp
operator|->
name|styleHints
argument_list|()
operator|->
name|passwordMaskDelay
argument_list|()
decl_stmt|;
if|#
directive|if
name|defined
name|QT_BUILD_INTERNAL
name|QLineEditPrivate
modifier|*
name|priv
init|=
name|QLineEditPrivate
operator|::
name|get
argument_list|(
name|testWidget
argument_list|)
decl_stmt|;
name|QWidgetLineControl
modifier|*
name|control
init|=
name|priv
operator|->
name|control
decl_stmt|;
name|control
operator|->
name|m_passwordMaskDelayOverride
operator|=
literal|200
expr_stmt|;
name|delay
operator|=
literal|200
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|delay
operator|<=
literal|0
condition|)
name|QSKIP
argument_list|(
literal|"Platform not defining echo delay and overriding only possible in internal build"
argument_list|)
expr_stmt|;
name|QStyleOptionFrame
name|opt
decl_stmt|;
name|QChar
name|fillChar
init|=
name|testWidget
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_LineEdit_PasswordCharacter
argument_list|,
operator|&
name|opt
argument_list|,
name|testWidget
argument_list|)
decl_stmt|;
name|testWidget
operator|->
name|setEchoMode
argument_list|(
name|QLineEdit
operator|::
name|Password
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|centerOnScreen
argument_list|(
name|testWidget
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|show
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|raise
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
name|testWidget
argument_list|)
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|testWidget
operator|->
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
literal|'0'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
literal|'1'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
literal|'2'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|displayText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|2
argument_list|,
name|fillChar
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'2'
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
literal|'3'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
literal|'4'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|displayText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|4
argument_list|,
name|fillChar
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'4'
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Backspace
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|displayText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|4
argument_list|,
name|fillChar
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
literal|'4'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|displayText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|4
argument_list|,
name|fillChar
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'4'
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
name|delay
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|testWidget
operator|->
name|displayText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|5
argument_list|,
name|fillChar
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
literal|'5'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|displayText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|5
argument_list|,
name|fillChar
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'5'
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|clearFocus
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|displayText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|6
argument_list|,
name|fillChar
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|testWidget
operator|->
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|displayText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|6
argument_list|,
name|fillChar
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
literal|'6'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|displayText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|6
argument_list|,
name|fillChar
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'6'
argument_list|)
argument_list|)
expr_stmt|;
name|QInputMethodEvent
name|ev
decl_stmt|;
name|ev
operator|.
name|setCommitString
argument_list|(
name|QLatin1String
argument_list|(
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|testWidget
argument_list|,
operator|&
name|ev
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|displayText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|7
argument_list|,
name|fillChar
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'7'
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setCursorPosition
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|displayText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|7
argument_list|,
name|fillChar
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'7'
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|displayText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|3
argument_list|,
name|fillChar
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'a'
argument_list|)
operator|+
name|QString
argument_list|(
literal|5
argument_list|,
name|fillChar
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Backspace
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|displayText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|8
argument_list|,
name|fillChar
argument_list|)
argument_list|)
expr_stmt|;
comment|// restore clean state
name|testWidget
operator|->
name|setEchoMode
argument_list|(
name|QLineEdit
operator|::
name|Normal
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|maxLength_mask_data
name|void
name|tst_QLineEdit
operator|::
name|maxLength_mask_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"mask"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedLength"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mask_case"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|">000<>00<000"
argument_list|)
operator|<<
literal|8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mask_nocase"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"00000000"
argument_list|)
operator|<<
literal|8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mask_null"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|32767
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mask_escape"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\\A\\aAA"
argument_list|)
operator|<<
literal|4
expr_stmt|;
block|}
end_function
begin_function
DECL|function|maxLength_mask
name|void
name|tst_QLineEdit
operator|::
name|maxLength_mask
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|mask
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedLength
argument_list|)
expr_stmt|;
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|setInputMask
argument_list|(
name|mask
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|maxLength
argument_list|()
argument_list|,
name|expectedLength
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|maxLength_data
name|void
name|tst_QLineEdit
operator|::
name|maxLength_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"insertString"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedString"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"length"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"insertBeforeSettingMaxLength"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"use_setText"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"keyclick before0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"this is a test."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"this is a test."
argument_list|)
operator|<<
literal|20
operator|<<
name|bool
argument_list|(
literal|true
argument_list|)
operator|<<
name|bool
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"keyclick before1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"this is a test."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"this is a "
argument_list|)
operator|<<
literal|10
operator|<<
name|bool
argument_list|(
literal|true
argument_list|)
operator|<<
name|bool
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"keyclick after0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"this is a test."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"this is a test."
argument_list|)
operator|<<
literal|20
operator|<<
name|bool
argument_list|(
literal|false
argument_list|)
operator|<<
name|bool
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"keyclick after1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"this is a test."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"this is a "
argument_list|)
operator|<<
literal|10
operator|<<
name|bool
argument_list|(
literal|false
argument_list|)
operator|<<
name|bool
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"settext before0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"this is a test."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"this is a test."
argument_list|)
operator|<<
literal|20
operator|<<
name|bool
argument_list|(
literal|true
argument_list|)
operator|<<
name|bool
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"settext before1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"this is a test."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"this is a "
argument_list|)
operator|<<
literal|10
operator|<<
name|bool
argument_list|(
literal|true
argument_list|)
operator|<<
name|bool
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"settext after0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"this is a test."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"this is a test."
argument_list|)
operator|<<
literal|20
operator|<<
name|bool
argument_list|(
literal|false
argument_list|)
operator|<<
name|bool
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"settext after1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"this is a test."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"this is a "
argument_list|)
operator|<<
literal|10
operator|<<
name|bool
argument_list|(
literal|false
argument_list|)
operator|<<
name|bool
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|maxLength
name|void
name|tst_QLineEdit
operator|::
name|maxLength
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|insertString
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedString
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|insertBeforeSettingMaxLength
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|use_setText
argument_list|)
expr_stmt|;
comment|// in some cases we set the maxLength _before_ entering the text.
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|insertBeforeSettingMaxLength
condition|)
name|testWidget
operator|->
name|setMaxLength
argument_list|(
name|length
argument_list|)
expr_stmt|;
comment|// I expect MaxLength to work BOTH with entering live characters AND with setting the text.
if|if
condition|(
name|use_setText
condition|)
block|{
comment|// Enter insertString using setText.
name|testWidget
operator|->
name|setText
argument_list|(
name|insertString
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Enter insertString as a sequence of keyClicks
name|QTest
operator|::
name|keyClicks
argument_list|(
name|testWidget
argument_list|,
name|insertString
argument_list|)
expr_stmt|;
block|}
comment|// in all other cases we set the maxLength _after_ entering the text.
if|if
condition|(
name|insertBeforeSettingMaxLength
condition|)
block|{
name|changed_count
operator|=
literal|0
expr_stmt|;
name|testWidget
operator|->
name|setMaxLength
argument_list|(
name|length
argument_list|)
expr_stmt|;
comment|// Make sure that the textChanged is not emitted unless the text is actually changed
if|if
condition|(
name|insertString
operator|==
name|expectedString
condition|)
block|{
name|QCOMPARE
argument_list|(
name|changed_count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|changed_count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|// and check if we get the expected string back
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|expectedString
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isReadOnly
name|void
name|tst_QLineEdit
operator|::
name|isReadOnly
parameter_list|()
block|{
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isReadOnly
argument_list|()
argument_list|)
expr_stmt|;
comment|// start with a basic text
name|QTest
operator|::
name|keyClicks
argument_list|(
name|testWidget
argument_list|,
literal|"the quick brown fox"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"the quick brown fox"
argument_list|)
argument_list|)
expr_stmt|;
comment|// do a quick check to verify that we can indeed edit the text
name|testWidget
operator|->
name|home
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|cursorForward
argument_list|(
literal|false
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClicks
argument_list|(
name|testWidget
argument_list|,
literal|"dark "
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"the quick dark brown fox"
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|isReadOnly
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that we cannot edit the text anymore
name|testWidget
operator|->
name|home
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|cursorForward
argument_list|(
literal|false
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Delete
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"the quick dark brown fox"
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|cursorForward
argument_list|(
literal|false
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClicks
argument_list|(
name|testWidget
argument_list|,
literal|"this should not have any effect!! "
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"the quick dark brown fox"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|BlinkTestLineEdit
class|class
name|BlinkTestLineEdit
super|:
specifier|public
name|QLineEdit
block|{
public|public:
DECL|function|paintEvent
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
name|e
parameter_list|)
block|{
operator|++
name|updates
expr_stmt|;
name|QLineEdit
operator|::
name|paintEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
DECL|member|updates
name|int
name|updates
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|noCursorBlinkWhenReadOnly
name|void
name|tst_QLineEdit
operator|::
name|noCursorBlinkWhenReadOnly
parameter_list|()
block|{
name|int
name|cursorFlashTime
init|=
name|QApplication
operator|::
name|cursorFlashTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|cursorFlashTime
operator|==
literal|0
condition|)
return|return;
name|BlinkTestLineEdit
name|le
decl_stmt|;
name|centerOnScreen
argument_list|(
operator|&
name|le
argument_list|)
expr_stmt|;
name|le
operator|.
name|show
argument_list|()
expr_stmt|;
name|le
operator|.
name|setFocus
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowActive
argument_list|(
operator|&
name|le
argument_list|)
expr_stmt|;
name|le
operator|.
name|updates
operator|=
literal|0
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
name|cursorFlashTime
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|le
operator|.
name|updates
operator|>
literal|0
argument_list|)
expr_stmt|;
name|le
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|le
operator|.
name|updates
operator|=
literal|0
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
name|cursorFlashTime
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|le
operator|.
name|updates
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|le
operator|.
name|setReadOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|le
operator|.
name|updates
operator|=
literal|0
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
name|cursorFlashTime
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|le
operator|.
name|updates
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|figureOutProperKey
specifier|static
name|void
name|figureOutProperKey
parameter_list|(
name|Qt
operator|::
name|Key
modifier|&
name|key
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
modifier|&
name|pressState
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_MAC
specifier|static
name|bool
name|tst_lineedit_randomized
init|=
literal|false
decl_stmt|;
comment|// Mac has 3 different ways of accomplishing this (same for moving to the back)
comment|// So I guess we should just randomly do this for now. Which may get people mad, but if
comment|// we fail at one point, it's just a matter of setting roll to the correct value
comment|// instead of random.
if|if
condition|(
operator|!
name|tst_lineedit_randomized
condition|)
block|{
name|tst_lineedit_randomized
operator|=
literal|true
expr_stmt|;
operator|::
name|srandom
argument_list|(
name|ulong
argument_list|(
name|time
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|long
name|roll
init|=
operator|::
name|random
argument_list|()
operator|%
literal|3
decl_stmt|;
switch|switch
condition|(
name|roll
condition|)
block|{
case|case
literal|0
case|:
name|key
operator|=
name|key
operator|==
name|Qt
operator|::
name|Key_Home
condition|?
name|Qt
operator|::
name|Key_Up
else|:
name|Qt
operator|::
name|Key_Down
expr_stmt|;
break|break;
case|case
literal|1
case|:
case|case
literal|2
case|:
name|key
operator|=
name|key
operator|==
name|Qt
operator|::
name|Key_Home
condition|?
name|Qt
operator|::
name|Key_Left
else|:
name|Qt
operator|::
name|Key_Right
expr_stmt|;
name|pressState
operator||=
operator|(
name|roll
operator|==
literal|1
operator|)
condition|?
name|Qt
operator|::
name|ControlModifier
else|:
name|Qt
operator|::
name|MetaModifier
expr_stmt|;
break|break;
block|}
else|#
directive|else
comment|// Naively kill the warning.
name|key
operator|=
name|key
expr_stmt|;
name|pressState
operator|=
name|pressState
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|// Platform specific move. Home and End do nothing on the Mac,
end_comment
begin_comment
comment|// so do something a bit smarter than tons of #ifdefs
end_comment
begin_function
DECL|function|psKeyClick
name|void
name|tst_QLineEdit
operator|::
name|psKeyClick
parameter_list|(
name|QWidget
modifier|*
name|target
parameter_list|,
name|Qt
operator|::
name|Key
name|key
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|pressState
parameter_list|)
block|{
name|figureOutProperKey
argument_list|(
name|key
argument_list|,
name|pressState
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|target
argument_list|,
name|key
argument_list|,
name|pressState
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|psKeyClick
name|void
name|tst_QLineEdit
operator|::
name|psKeyClick
parameter_list|(
name|QTestEventList
modifier|&
name|keys
parameter_list|,
name|Qt
operator|::
name|Key
name|key
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|pressState
parameter_list|)
block|{
name|figureOutProperKey
argument_list|(
name|key
argument_list|,
name|pressState
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|key
argument_list|,
name|pressState
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cursorPosition
name|void
name|tst_QLineEdit
operator|::
name|cursorPosition
parameter_list|()
block|{
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// start with a basic text
name|QTest
operator|::
name|keyClicks
argument_list|(
name|testWidget
argument_list|,
literal|"The"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClicks
argument_list|(
name|testWidget
argument_list|,
literal|" quick"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClicks
argument_list|(
name|testWidget
argument_list|,
literal|" brown fox jumps over the lazy dog"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|43
argument_list|)
expr_stmt|;
comment|// The text we have now is:
comment|//           1         2         3         4         5
comment|// 012345678901234567890123456789012345678901234567890
comment|// The quick brown fox jumps over the lazy dog
comment|// next we will check some of the cursor movement functions
name|testWidget
operator|->
name|end
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|43
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|cursorForward
argument_list|(
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|cursorBackward
argument_list|(
literal|false
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|41
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|home
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|cursorForward
argument_list|(
literal|false
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|cursorForward
argument_list|(
literal|false
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|cursorWordForward
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// 'fox'
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|cursorWordForward
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// 'jumps'
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|cursorWordBackward
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// 'fox'
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|cursorWordBackward
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// 'brown'
name|testWidget
operator|->
name|cursorWordBackward
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// 'quick'
name|testWidget
operator|->
name|cursorWordBackward
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// 'The'
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|cursorWordBackward
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// 'The'
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Cursor position should be 0 here!
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Right
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|psKeyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_End
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|43
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|41
argument_list|)
expr_stmt|;
name|psKeyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Home
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// cursorposition when maxlength is set
name|int
name|maxLength
init|=
literal|9
decl_stmt|;
name|testWidget
operator|->
name|clear
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|setMaxLength
argument_list|(
name|maxLength
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClicks
argument_list|(
name|testWidget
argument_list|,
literal|"123ABC123"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
name|psKeyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Home
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|psKeyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_End
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/* // tested in cursorPosition void tst_QLineEdit::cursorLeft() void tst_QLineEdit::cursorRight() void tst_QLineEdit::cursorForward() void tst_QLineEdit::cursorBackward() void tst_QLineEdit::cursorWordForward() void tst_QLineEdit::cursorWordBackward() void tst_QLineEdit::home() void tst_QLineEdit::end() */
end_comment
begin_function
DECL|function|cursorPositionChanged_data
name|void
name|tst_QLineEdit
operator|::
name|cursorPositionChanged_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QTestEventList
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"lastPos"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"newPos"
argument_list|)
expr_stmt|;
name|QTestEventList
name|keys
decl_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|keys
operator|<<
operator|-
literal|1
operator|<<
literal|1
expr_stmt|;
name|keys
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_B
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_C
argument_list|)
expr_stmt|;
name|psKeyClick
argument_list|(
name|keys
argument_list|,
name|Qt
operator|::
name|Key_Home
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"abc<home>"
argument_list|)
operator|<<
name|keys
operator|<<
literal|3
operator|<<
literal|0
expr_stmt|;
name|keys
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_B
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_C
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"abc<left>"
argument_list|)
operator|<<
name|keys
operator|<<
literal|3
operator|<<
literal|2
expr_stmt|;
name|keys
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_B
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_C
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Right
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"abc<right>"
argument_list|)
operator|<<
name|keys
operator|<<
literal|2
operator|<<
literal|3
expr_stmt|;
name|keys
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_B
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_C
argument_list|)
expr_stmt|;
name|psKeyClick
argument_list|(
name|keys
argument_list|,
name|Qt
operator|::
name|Key_Home
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Right
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"abc<home><right>"
argument_list|)
operator|<<
name|keys
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|keys
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_B
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_C
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Backspace
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"abc<backspace>"
argument_list|)
operator|<<
name|keys
operator|<<
literal|3
operator|<<
literal|2
expr_stmt|;
name|keys
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_B
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_C
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Delete
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"abc<delete>"
argument_list|)
operator|<<
name|keys
operator|<<
literal|2
operator|<<
literal|3
expr_stmt|;
name|keys
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_B
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_C
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Delete
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"abc<left><delete>"
argument_list|)
operator|<<
name|keys
operator|<<
literal|3
operator|<<
literal|2
expr_stmt|;
name|keys
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_B
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_C
argument_list|)
expr_stmt|;
name|psKeyClick
argument_list|(
name|keys
argument_list|,
name|Qt
operator|::
name|Key_Home
argument_list|)
expr_stmt|;
name|psKeyClick
argument_list|(
name|keys
argument_list|,
name|Qt
operator|::
name|Key_End
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"abc<home><end>"
argument_list|)
operator|<<
name|keys
operator|<<
literal|0
operator|<<
literal|3
expr_stmt|;
name|keys
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_B
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_C
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Space
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_D
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_E
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_F
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Home
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Right
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"abc efg<home><ctrl-right>"
argument_list|)
operator|<<
name|keys
ifndef|#
directive|ifndef
name|Q_OS_MAC
operator|<<
literal|0
operator|<<
literal|4
expr_stmt|;
else|#
directive|else
operator|<<
literal|6
operator|<<
literal|7
expr_stmt|;
endif|#
directive|endif
name|keys
operator|.
name|clear
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_B
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_C
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Space
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_D
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_E
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_F
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Up
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Right
argument_list|,
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mac equivalent abc efg<up><option-right>"
argument_list|)
operator|<<
name|keys
operator|<<
literal|0
operator|<<
literal|4
expr_stmt|;
name|keys
operator|.
name|clear
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_B
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_C
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Space
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_D
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_E
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_F
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"abc efg<ctrl-left>"
argument_list|)
operator|<<
name|keys
operator|<<
literal|7
ifndef|#
directive|ifndef
name|Q_OS_MAC
operator|<<
literal|4
expr_stmt|;
else|#
directive|else
operator|<<
literal|0
expr_stmt|;
endif|#
directive|endif
name|keys
operator|.
name|clear
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_B
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_C
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Space
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_D
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_E
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_F
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mac equivalent abc efg<option-left>"
argument_list|)
operator|<<
name|keys
operator|<<
literal|7
operator|<<
literal|4
expr_stmt|;
name|keys
operator|.
name|clear
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|cursorPositionChanged
name|void
name|tst_QLineEdit
operator|::
name|cursorPositionChanged
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QTestEventList
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|lastPos
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|newPos
argument_list|)
expr_stmt|;
name|lastCursorPos
operator|=
literal|0
expr_stmt|;
name|newCursorPos
operator|=
literal|0
expr_stmt|;
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|input
operator|.
name|simulate
argument_list|(
name|testWidget
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lastCursorPos
argument_list|,
name|lastPos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|newCursorPos
argument_list|,
name|newPos
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|selectedText
name|void
name|tst_QLineEdit
operator|::
name|selectedText
parameter_list|()
block|{
name|QString
name|testString
init|=
literal|"Abc defg hijklmno, p 'qrst' uvw xyz"
decl_stmt|;
comment|// start with a basic text
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
name|testString
argument_list|)
expr_stmt|;
name|selection_count
operator|=
literal|0
expr_stmt|;
comment|// The text we have now is:
comment|//           1         2         3         4         5
comment|// 012345678901234567890123456789012345678901234567890
comment|// Abc defg hijklmno, p 'qrst' uvw xyz
name|testWidget
operator|->
name|home
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|hasSelectedText
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|selectedText
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
comment|// play a bit with the cursorForward, cursorBackward(), etc
name|testWidget
operator|->
name|cursorForward
argument_list|(
literal|true
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|hasSelectedText
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|selectedText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Abc defg "
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selection_count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// reset selection
name|testWidget
operator|->
name|home
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|hasSelectedText
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|selectedText
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|selection_count
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|/* // tested in selectedText void tst_QLineEdit::backspace() void tst_QLineEdit::del() void tst_QLineEdit::selectionChanged() void tst_QLineEdit::selectAll() void tst_QLineEdit::deselect() */
end_comment
begin_function
DECL|function|onSelectionChanged
name|void
name|tst_QLineEdit
operator|::
name|onSelectionChanged
parameter_list|()
block|{
name|selection_count
operator|++
expr_stmt|;
block|}
end_function
begin_function
DECL|function|deleteSelectedText
name|void
name|tst_QLineEdit
operator|::
name|deleteSelectedText
parameter_list|()
block|{
specifier|const
name|QString
name|text
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"bar"
argument_list|)
decl_stmt|;
name|QLineEdit
name|edit
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|edit
operator|.
name|text
argument_list|()
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|edit
operator|.
name|selectAll
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|edit
argument_list|,
name|Qt
operator|::
name|Key_Delete
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|edit
operator|.
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|edit
operator|.
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|edit
operator|.
name|selectAll
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
name|QMenu
modifier|*
name|menu
init|=
name|edit
operator|.
name|createStandardContextMenu
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|menu
operator|->
name|actions
argument_list|()
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QAction
modifier|*
name|current
init|=
name|menu
operator|->
name|actions
argument_list|()
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|->
name|text
argument_list|()
operator|==
name|QLineEdit
operator|::
name|tr
argument_list|(
literal|"Delete"
argument_list|)
condition|)
block|{
name|current
operator|->
name|trigger
argument_list|()
expr_stmt|;
comment|//this will delete the whole text selected
name|QVERIFY
argument_list|(
name|edit
operator|.
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|// QT_NO_CONTEXTMENU
block|}
end_function
begin_function
DECL|function|textChangedAndTextEdited
name|void
name|tst_QLineEdit
operator|::
name|textChangedAndTextEdited
parameter_list|()
block|{
name|changed_count
operator|=
literal|0
expr_stmt|;
name|edited_count
operator|=
literal|0
expr_stmt|;
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|changed_count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|edited_count
argument_list|,
name|changed_count
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
literal|'b'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|changed_count
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|edited_count
argument_list|,
name|changed_count
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|changed_count
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|edited_count
argument_list|,
name|changed_count
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|changed_count
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|edited_count
argument_list|,
name|changed_count
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
literal|'d'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|changed_count
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|edited_count
argument_list|,
name|changed_count
argument_list|)
expr_stmt|;
name|changed_count
operator|=
literal|0
expr_stmt|;
name|edited_count
operator|=
literal|0
expr_stmt|;
name|changed_string
operator|=
name|QString
operator|::
name|null
expr_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|changed_count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|edited_count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|changed_string
argument_list|,
name|QString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|changed_count
operator|=
literal|0
expr_stmt|;
name|edited_count
operator|=
literal|0
expr_stmt|;
name|changed_string
operator|=
name|QString
operator|::
name|null
expr_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|changed_count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|edited_count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|changed_string
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|changed_string
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|onTextChanged
name|void
name|tst_QLineEdit
operator|::
name|onTextChanged
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|changed_count
operator|++
expr_stmt|;
name|changed_string
operator|=
name|text
expr_stmt|;
block|}
end_function
begin_function
DECL|function|onTextEdited
name|void
name|tst_QLineEdit
operator|::
name|onTextEdited
parameter_list|(
specifier|const
name|QString
modifier|&
comment|/*text*/
parameter_list|)
block|{
name|edited_count
operator|++
expr_stmt|;
block|}
end_function
begin_function
DECL|function|onCursorPositionChanged
name|void
name|tst_QLineEdit
operator|::
name|onCursorPositionChanged
parameter_list|(
name|int
name|oldPos
parameter_list|,
name|int
name|newPos
parameter_list|)
block|{
name|lastCursorPos
operator|=
name|oldPos
expr_stmt|;
name|newCursorPos
operator|=
name|newPos
expr_stmt|;
block|}
end_function
begin_function
DECL|function|returnPressed
name|void
name|tst_QLineEdit
operator|::
name|returnPressed
parameter_list|()
block|{
name|return_count
operator|=
literal|0
expr_stmt|;
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Return
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|return_count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|return_count
operator|=
literal|0
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
literal|'A'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|return_count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
literal|'b'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|return_count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|return_count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|return_count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
literal|'d'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|return_count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|psKeyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Home
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|return_count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|psKeyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_End
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|return_count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Escape
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|return_count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Return
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|return_count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// int validator that fixes all !isNumber to '0'
end_comment
begin_class
DECL|class|QIntFixValidator
class|class
name|QIntFixValidator
super|:
specifier|public
name|QIntValidator
block|{
public|public:
DECL|function|QIntFixValidator
name|QIntFixValidator
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QIntValidator
argument_list|(
name|min
argument_list|,
name|max
argument_list|,
name|parent
argument_list|)
block|{}
DECL|function|fixup
name|void
name|fixup
parameter_list|(
name|QString
modifier|&
name|input
parameter_list|)
specifier|const
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|input
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
operator|!
name|input
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|isNumber
argument_list|()
condition|)
block|{
name|input
index|[
operator|(
name|int
operator|)
name|i
index|]
operator|=
name|QChar
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
class|;
end_class
begin_function
DECL|function|returnPressed_maskvalidator_data
name|void
name|tst_QLineEdit
operator|::
name|returnPressed_maskvalidator_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"inputMask"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"hasValidator"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QTestEventList
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedText"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"returnPressed"
argument_list|)
expr_stmt|;
block|{
name|QTestEventList
name|keys
decl_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Home
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_1
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_2
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_3
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Return
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no mask, no validator, input '123<cr>'"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
operator|<<
name|keys
operator|<<
name|QString
argument_list|(
literal|"123"
argument_list|)
operator|<<
literal|true
expr_stmt|;
block|}
block|{
name|QTestEventList
name|keys
decl_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Home
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_1
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_2
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Return
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mask '999', no validator, input '12<cr>'"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"999"
argument_list|)
operator|<<
literal|false
operator|<<
name|keys
operator|<<
name|QString
argument_list|(
literal|"12"
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
block|{
name|QTestEventList
name|keys
decl_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Home
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_1
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_2
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_3
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Return
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mask '999', no validator, input '123<cr>'"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"999"
argument_list|)
operator|<<
literal|false
operator|<<
name|keys
operator|<<
name|QString
argument_list|(
literal|"123"
argument_list|)
operator|<<
literal|true
expr_stmt|;
block|}
block|{
name|QTestEventList
name|keys
decl_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Home
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_1
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_2
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_3
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Return
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no mask, intfix validator(0,999), input '123<cr>'"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|true
operator|<<
name|keys
operator|<<
name|QString
argument_list|(
literal|"123"
argument_list|)
operator|<<
literal|true
expr_stmt|;
block|}
block|{
name|QTestEventList
name|keys
decl_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Home
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_7
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_7
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_7
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_7
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Return
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no mask, intfix validator(0,999), input '7777<cr>'"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|true
operator|<<
name|keys
operator|<<
name|QString
argument_list|(
literal|"777"
argument_list|)
operator|<<
literal|true
expr_stmt|;
block|}
block|{
name|QTestEventList
name|keys
decl_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Home
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_1
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_2
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Return
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mask '999', intfix validator(0,999), input '12<cr>'"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"999"
argument_list|)
operator|<<
literal|true
operator|<<
name|keys
operator|<<
name|QString
argument_list|(
literal|"12"
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
block|{
name|QTestEventList
name|keys
decl_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Home
argument_list|)
expr_stmt|;
name|keys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_Return
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mask '999', intfix validator(0,999), input '<cr>'"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"999"
argument_list|)
operator|<<
literal|true
operator|<<
name|keys
operator|<<
name|QString
argument_list|(
literal|"000"
argument_list|)
operator|<<
literal|true
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|returnPressed_maskvalidator
name|void
name|tst_QLineEdit
operator|::
name|returnPressed_maskvalidator
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|inputMask
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|hasValidator
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QTestEventList
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedText
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|returnPressed
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"mask '999', intfix validator(0,999), input '12<cr>'"
argument_list|,
literal|"QIntValidator has changed behaviour. Does not accept spaces. Task 43082."
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|setInputMask
argument_list|(
name|inputMask
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasValidator
condition|)
name|testWidget
operator|->
name|setValidator
argument_list|(
operator|new
name|QIntFixValidator
argument_list|(
literal|0
argument_list|,
literal|999
argument_list|,
name|testWidget
argument_list|)
argument_list|)
expr_stmt|;
name|return_count
operator|=
literal|0
expr_stmt|;
name|input
operator|.
name|simulate
argument_list|(
name|testWidget
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|expectedText
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|return_count
argument_list|,
name|returnPressed
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|onReturnPressed
name|void
name|tst_QLineEdit
operator|::
name|onReturnPressed
parameter_list|()
block|{
name|return_count
operator|++
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setValidator
name|void
name|tst_QLineEdit
operator|::
name|setValidator
parameter_list|()
block|{
comment|// Verify that we can set and re-set a validator.
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|validator
argument_list|()
argument_list|)
expr_stmt|;
name|QIntValidator
name|iv1
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|testWidget
operator|->
name|setValidator
argument_list|(
operator|&
name|iv1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|validator
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
specifier|const
name|QValidator
operator|*
argument_list|>
argument_list|(
operator|&
name|iv1
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setValidator
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|validator
argument_list|()
argument_list|)
expr_stmt|;
name|QIntValidator
name|iv2
argument_list|(
literal|0
argument_list|,
literal|99
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|testWidget
operator|->
name|setValidator
argument_list|(
operator|&
name|iv2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|validator
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
specifier|const
name|QValidator
operator|*
argument_list|>
argument_list|(
operator|&
name|iv2
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setValidator
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|validator
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setValidator_QIntValidator_data
name|void
name|tst_QLineEdit
operator|::
name|setValidator_QIntValidator_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"mini"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"maxi"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedText"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"useKeys"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"is_valid"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|uint
argument_list|>
argument_list|(
literal|"echoMode"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|bool
name|useKeys
init|=
literal|false
decl_stmt|;
name|QString
name|inputMode
init|=
literal|"insert "
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|inputMode
operator|=
literal|"useKeys "
expr_stmt|;
name|useKeys
operator|=
literal|true
expr_stmt|;
block|}
comment|// valid data
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|inputMode
operator|+
literal|"range [0,9] valid '1'"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
literal|0
operator|<<
literal|9
operator|<<
name|QString
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|bool
argument_list|(
name|useKeys
argument_list|)
operator|<<
name|bool
argument_list|(
literal|true
argument_list|)
operator|<<
name|uint
argument_list|(
name|QLineEdit
operator|::
name|Normal
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|inputMode
operator|+
literal|"range [3,7] valid '3'"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
literal|3
operator|<<
literal|7
operator|<<
name|QString
argument_list|(
literal|"3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"3"
argument_list|)
operator|<<
name|bool
argument_list|(
name|useKeys
argument_list|)
operator|<<
name|bool
argument_list|(
literal|true
argument_list|)
operator|<<
name|uint
argument_list|(
name|QLineEdit
operator|::
name|Normal
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|inputMode
operator|+
literal|"range [3,7] valid '7'"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
literal|3
operator|<<
literal|7
operator|<<
name|QString
argument_list|(
literal|"7"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"7"
argument_list|)
operator|<<
name|bool
argument_list|(
name|useKeys
argument_list|)
operator|<<
name|bool
argument_list|(
literal|true
argument_list|)
operator|<<
name|uint
argument_list|(
name|QLineEdit
operator|::
name|Normal
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|inputMode
operator|+
literal|"range [0,100] valid '9'"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
literal|0
operator|<<
literal|100
operator|<<
name|QString
argument_list|(
literal|"9"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"9"
argument_list|)
operator|<<
name|bool
argument_list|(
name|useKeys
argument_list|)
operator|<<
name|bool
argument_list|(
literal|true
argument_list|)
operator|<<
name|uint
argument_list|(
name|QLineEdit
operator|::
name|Normal
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|inputMode
operator|+
literal|"range [0,100] valid '12'"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
literal|0
operator|<<
literal|100
operator|<<
name|QString
argument_list|(
literal|"12"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"12"
argument_list|)
operator|<<
name|bool
argument_list|(
name|useKeys
argument_list|)
operator|<<
name|bool
argument_list|(
literal|true
argument_list|)
operator|<<
name|uint
argument_list|(
name|QLineEdit
operator|::
name|Normal
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|inputMode
operator|+
literal|"range [-100,100] valid '-12'"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
operator|-
literal|100
operator|<<
literal|100
operator|<<
name|QString
argument_list|(
literal|"-12"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-12"
argument_list|)
operator|<<
name|bool
argument_list|(
name|useKeys
argument_list|)
operator|<<
name|bool
argument_list|(
literal|true
argument_list|)
operator|<<
name|uint
argument_list|(
name|QLineEdit
operator|::
name|Normal
argument_list|)
expr_stmt|;
comment|// invalid data
comment|// characters not allowed in QIntValidator
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|inputMode
operator|+
literal|"range [0,9] inv 'a-a'"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
literal|0
operator|<<
literal|9
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|bool
argument_list|(
name|useKeys
argument_list|)
operator|<<
name|bool
argument_list|(
literal|false
argument_list|)
operator|<<
name|uint
argument_list|(
name|QLineEdit
operator|::
name|Normal
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|inputMode
operator|+
literal|"range [0,9] inv 'A'"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
literal|0
operator|<<
literal|9
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|bool
argument_list|(
name|useKeys
argument_list|)
operator|<<
name|bool
argument_list|(
literal|false
argument_list|)
operator|<<
name|uint
argument_list|(
name|QLineEdit
operator|::
name|Normal
argument_list|)
expr_stmt|;
comment|// minus sign only allowed with a range on the negative side
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|inputMode
operator|+
literal|"range [0,100] inv '-'"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
literal|0
operator|<<
literal|100
operator|<<
name|QString
argument_list|(
literal|"-"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|bool
argument_list|(
name|useKeys
argument_list|)
operator|<<
name|bool
argument_list|(
literal|false
argument_list|)
operator|<<
name|uint
argument_list|(
name|QLineEdit
operator|::
name|Normal
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|inputMode
operator|+
literal|"range [0,100] int '153'"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
literal|0
operator|<<
literal|100
operator|<<
name|QString
argument_list|(
literal|"153"
argument_list|)
operator|<<
name|QString
argument_list|(
name|useKeys
condition|?
literal|"15"
else|:
literal|""
argument_list|)
operator|<<
name|bool
argument_list|(
name|useKeys
argument_list|)
operator|<<
name|bool
argument_list|(
name|useKeys
condition|?
literal|true
else|:
literal|false
argument_list|)
operator|<<
name|uint
argument_list|(
name|QLineEdit
operator|::
name|Normal
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|inputMode
operator|+
literal|"range [-100,100] int '-153'"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
operator|-
literal|100
operator|<<
literal|100
operator|<<
name|QString
argument_list|(
literal|"-153"
argument_list|)
operator|<<
name|QString
argument_list|(
name|useKeys
condition|?
literal|"-15"
else|:
literal|""
argument_list|)
operator|<<
name|bool
argument_list|(
name|useKeys
argument_list|)
operator|<<
name|bool
argument_list|(
name|useKeys
condition|?
literal|true
else|:
literal|false
argument_list|)
operator|<<
name|uint
argument_list|(
name|QLineEdit
operator|::
name|Normal
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|inputMode
operator|+
literal|"range [3,7] int '2'"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
literal|3
operator|<<
literal|7
operator|<<
name|QString
argument_list|(
literal|"2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"2"
argument_list|)
operator|<<
name|bool
argument_list|(
name|useKeys
argument_list|)
operator|<<
name|bool
argument_list|(
literal|false
argument_list|)
operator|<<
name|uint
argument_list|(
name|QLineEdit
operator|::
name|Normal
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|inputMode
operator|+
literal|"range [3,7] int '8'"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
literal|3
operator|<<
literal|7
operator|<<
name|QString
argument_list|(
literal|"8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|bool
argument_list|(
name|useKeys
argument_list|)
operator|<<
name|bool
argument_list|(
literal|false
argument_list|)
operator|<<
name|uint
argument_list|(
name|QLineEdit
operator|::
name|Normal
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|inputMode
operator|+
literal|"range [0,99] inv 'a-a'"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
literal|0
operator|<<
literal|99
operator|<<
name|QString
argument_list|(
literal|"19a"
argument_list|)
operator|<<
name|QString
argument_list|(
name|useKeys
condition|?
literal|"19"
else|:
literal|""
argument_list|)
operator|<<
name|bool
argument_list|(
name|useKeys
argument_list|)
operator|<<
name|bool
argument_list|(
name|useKeys
condition|?
literal|true
else|:
literal|false
argument_list|)
operator|<<
name|uint
argument_list|(
name|QLineEdit
operator|::
name|Password
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setValidator_QIntValidator
name|void
name|tst_QLineEdit
operator|::
name|setValidator_QIntValidator
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|mini
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|maxi
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedText
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|useKeys
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|is_valid
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|uint
argument_list|,
name|echoMode
argument_list|)
expr_stmt|;
name|QIntValidator
name|intValidator
argument_list|(
name|mini
argument_list|,
name|maxi
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|setEchoMode
argument_list|(
operator|(
name|QLineEdit
operator|::
name|EchoMode
operator|)
name|echoMode
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setValidator
argument_list|(
operator|&
name|intValidator
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|//qDebug("1 input: '" + input + "' Exp: '" + expectedText + "'");
comment|// tests valid input
if|if
condition|(
operator|!
name|useKeys
condition|)
block|{
name|testWidget
operator|->
name|insert
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QTest
operator|::
name|keyClicks
argument_list|(
name|testWidget
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|return_count
operator|=
literal|0
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Return
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|return_count
argument_list|,
name|int
argument_list|(
name|is_valid
argument_list|)
argument_list|)
expr_stmt|;
comment|// assuming that is_valid = true equals 1
block|}
comment|//qDebug("2 input: '" + input + "' Exp: '" + expectedText + "'");
comment|//    QCOMPARE(testWidget->displayText(), expectedText);
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|expectedText
argument_list|)
expr_stmt|;
block|}
end_function
begin_define
DECL|macro|NO_PIXMAP_TESTS
define|#
directive|define
name|NO_PIXMAP_TESTS
end_define
begin_function
DECL|function|frame_data
name|void
name|tst_QLineEdit
operator|::
name|frame_data
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|NO_PIXMAP_TESTS
if|#
directive|if
name|defined
name|Q_OS_WIN
name|QTest
operator|::
name|addColumn
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
literal|"noFrame"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
literal|"useFrame"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"win"
argument_list|)
expr_stmt|;
comment|//#else
comment|//    QTest::newRow("x11");
endif|#
directive|endif
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|frame
name|void
name|tst_QLineEdit
operator|::
name|frame
parameter_list|()
block|{
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|setFrame
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// verify that the editor is shown without a frame
ifndef|#
directive|ifndef
name|NO_PIXMAP_TESTS
if|#
directive|if
name|defined
name|Q_OS_WIN
name|QTEST
argument_list|(
name|testWidget
argument_list|,
literal|"noFrame"
argument_list|)
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|hasFrame
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setFrame
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// verify that the editor is shown with a frame
ifndef|#
directive|ifndef
name|NO_PIXMAP_TESTS
if|#
directive|if
name|defined
name|Q_OS_WIN
name|QTEST
argument_list|(
name|testWidget
argument_list|,
literal|"useFrame"
argument_list|)
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|hasFrame
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setAlignment_data
name|void
name|tst_QLineEdit
operator|::
name|setAlignment_data
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|NO_PIXMAP_TESTS
if|#
directive|if
name|defined
name|Q_OS_WIN
name|QTest
operator|::
name|addColumn
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
literal|"left"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
literal|"right"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
literal|"hcenter"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
literal|"auto"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"win"
argument_list|)
expr_stmt|;
comment|//#else
comment|//    QTest::newRow("x11");
endif|#
directive|endif
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|setAlignment
name|void
name|tst_QLineEdit
operator|::
name|setAlignment
parameter_list|()
block|{
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
literal|"left"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignLeft
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|NO_PIXMAP_TESTS
if|#
directive|if
name|defined
name|Q_OS_WIN
name|QTEST
argument_list|(
name|testWidget
argument_list|,
literal|"left"
argument_list|)
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|alignment
argument_list|()
argument_list|,
name|Qt
operator|::
name|AlignLeft
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
literal|"hcenter"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignHCenter
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|NO_PIXMAP_TESTS
if|#
directive|if
name|defined
name|Q_OS_WIN
name|QTEST
argument_list|(
name|testWidget
argument_list|,
literal|"hcenter"
argument_list|)
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|alignment
argument_list|()
argument_list|,
name|Qt
operator|::
name|AlignHCenter
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
literal|"right"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignRight
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|NO_PIXMAP_TESTS
if|#
directive|if
name|defined
name|Q_OS_WIN
name|QTEST
argument_list|(
name|testWidget
argument_list|,
literal|"right"
argument_list|)
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|alignment
argument_list|()
argument_list|,
name|Qt
operator|::
name|AlignRight
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignTop
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|alignment
argument_list|()
argument_list|,
name|Qt
operator|::
name|AlignTop
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignBottom
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|alignment
argument_list|()
argument_list|,
name|Qt
operator|::
name|AlignBottom
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignCenter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|alignment
argument_list|()
argument_list|,
name|Qt
operator|::
name|AlignCenter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isModified
name|void
name|tst_QLineEdit
operator|::
name|isModified
parameter_list|()
block|{
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
literal|"bla"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|psKeyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Home
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Right
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Right
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Right
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|psKeyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_End
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClicks
argument_list|(
name|testWidget
argument_list|,
literal|"T"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClicks
argument_list|(
name|testWidget
argument_list|,
literal|"his is a string"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Obsolete function but as long as we provide it, it needs to work. */
end_comment
begin_function
DECL|function|edited
name|void
name|tst_QLineEdit
operator|::
name|edited
parameter_list|()
block|{
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
literal|"bla"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|psKeyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Home
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Right
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Right
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Right
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|psKeyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_End
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClicks
argument_list|(
name|testWidget
argument_list|,
literal|"T"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClicks
argument_list|(
name|testWidget
argument_list|,
literal|"his is a string"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setModified
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setModified
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insert
name|void
name|tst_QLineEdit
operator|::
name|insert
parameter_list|()
block|{
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|insert
argument_list|(
literal|"This"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|insert
argument_list|(
literal|" is"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|insert
argument_list|(
literal|" a"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|insert
argument_list|(
literal|" test"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"This is a test"
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|cursorWordBackward
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|cursorBackward
argument_list|(
literal|false
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|insert
argument_list|(
literal|" nice"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"This is a nice test"
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setCursorPosition
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|insert
argument_list|(
literal|"No Crash! "
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"No Crash! This is a nice test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setSelection_data
name|void
name|tst_QLineEdit
operator|::
name|setSelection_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"text"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"start"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"length"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedCursor"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedText"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"expectedHasSelectedText"
argument_list|)
expr_stmt|;
name|QString
name|text
init|=
literal|"Abc defg hijklmno, p 'qrst' uvw xyz"
decl_stmt|;
name|int
name|start
decl_stmt|,
name|length
decl_stmt|,
name|pos
decl_stmt|;
name|start
operator|=
literal|0
expr_stmt|;
name|length
operator|=
literal|1
expr_stmt|;
name|pos
operator|=
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"selection start: %1 length: %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|start
argument_list|)
operator|.
name|arg
argument_list|(
name|length
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|text
operator|<<
name|start
operator|<<
name|length
operator|<<
name|pos
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|start
operator|=
literal|0
expr_stmt|;
name|length
operator|=
literal|2
expr_stmt|;
name|pos
operator|=
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"selection start: %1 length: %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|start
argument_list|)
operator|.
name|arg
argument_list|(
name|length
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|text
operator|<<
name|start
operator|<<
name|length
operator|<<
name|pos
operator|<<
name|QString
argument_list|(
literal|"Ab"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|start
operator|=
literal|0
expr_stmt|;
name|length
operator|=
literal|4
expr_stmt|;
name|pos
operator|=
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"selection start: %1 length: %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|start
argument_list|)
operator|.
name|arg
argument_list|(
name|length
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|text
operator|<<
name|start
operator|<<
name|length
operator|<<
name|pos
operator|<<
name|QString
argument_list|(
literal|"Abc "
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|start
operator|=
operator|-
literal|1
expr_stmt|;
name|length
operator|=
literal|0
expr_stmt|;
name|pos
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"selection start: %1 length: %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|start
argument_list|)
operator|.
name|arg
argument_list|(
name|length
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|text
operator|<<
name|start
operator|<<
name|length
operator|<<
name|pos
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
expr_stmt|;
name|start
operator|=
literal|34
expr_stmt|;
name|length
operator|=
literal|1
expr_stmt|;
name|pos
operator|=
literal|35
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"selection start: %1 length: %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|start
argument_list|)
operator|.
name|arg
argument_list|(
name|length
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|text
operator|<<
name|start
operator|<<
name|length
operator|<<
name|pos
operator|<<
name|QString
argument_list|(
literal|"z"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|start
operator|=
literal|34
expr_stmt|;
name|length
operator|=
literal|2
expr_stmt|;
name|pos
operator|=
literal|35
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"selection start: %1 length: %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|start
argument_list|)
operator|.
name|arg
argument_list|(
name|length
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|text
operator|<<
name|start
operator|<<
name|length
operator|<<
name|pos
operator|<<
name|QString
argument_list|(
literal|"z"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|start
operator|=
literal|34
expr_stmt|;
name|length
operator|=
operator|-
literal|1
expr_stmt|;
name|pos
operator|=
literal|33
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"selection start: %1 length: %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|start
argument_list|)
operator|.
name|arg
argument_list|(
name|length
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|text
operator|<<
name|start
operator|<<
name|length
operator|<<
name|pos
operator|<<
name|QString
argument_list|(
literal|"y"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|start
operator|=
literal|1
expr_stmt|;
name|length
operator|=
operator|-
literal|2
expr_stmt|;
name|pos
operator|=
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"selection start: %1 length: %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|start
argument_list|)
operator|.
name|arg
argument_list|(
name|length
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|text
operator|<<
name|start
operator|<<
name|length
operator|<<
name|pos
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|start
operator|=
operator|-
literal|1
expr_stmt|;
name|length
operator|=
operator|-
literal|1
expr_stmt|;
name|pos
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"selection start: %1 length: %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|start
argument_list|)
operator|.
name|arg
argument_list|(
name|length
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|text
operator|<<
name|start
operator|<<
name|length
operator|<<
name|pos
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setSelection
name|void
name|tst_QLineEdit
operator|::
name|setSelection
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedCursor
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedText
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|expectedHasSelectedText
argument_list|)
expr_stmt|;
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setSelection
argument_list|(
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|hasSelectedText
argument_list|()
argument_list|,
name|expectedHasSelectedText
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|selectedText
argument_list|()
argument_list|,
name|expectedText
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedCursor
operator|>=
literal|0
condition|)
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
name|expectedCursor
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
end_ifndef
begin_function
DECL|function|cut
name|void
name|tst_QLineEdit
operator|::
name|cut
parameter_list|()
block|{
if|if
condition|(
operator|!
name|PlatformClipboard
operator|::
name|isAvailable
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"Autotests run from cron and pasteboard don't get along quite ATM"
argument_list|)
expr_stmt|;
comment|// test newlines in cut'n'paste
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
literal|"A\nB\nC\n"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setSelection
argument_list|(
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|cut
argument_list|()
expr_stmt|;
name|psKeyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Home
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|paste
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"A\nB\nC\n"
argument_list|)
argument_list|)
expr_stmt|;
comment|//                              1         2         3         4
comment|//                    01234567890123456789012345678901234567890
name|testWidget
operator|->
name|setText
argument_list|(
literal|"Abc defg hijklmno"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setSelection
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|cut
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|" defg hijklmno"
argument_list|)
argument_list|)
expr_stmt|;
name|psKeyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_End
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|paste
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|" defg hijklmnoAbc"
argument_list|)
argument_list|)
expr_stmt|;
name|psKeyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Home
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|del
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"defg hijklmnoAbc"
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setSelection
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|copy
argument_list|()
expr_stmt|;
name|psKeyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_End
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|paste
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"defg hijklmnoAbcdefg"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"defg hijklmno Abcdefg"
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setSelection
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|del
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"hijklmno Abcdefg"
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|end
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|paste
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"hijklmno Abcdefg defg"
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|home
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|cursorWordForward
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|cut
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|end
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|paste
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|cursorBackward
argument_list|(
literal|true
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|cut
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Abcdefg defg hijklmno"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cutWithoutSelection
name|void
name|tst_QLineEdit
operator|::
name|cutWithoutSelection
parameter_list|()
block|{
enum|enum
block|{
name|selectionLength
init|=
literal|1
block|}
enum|;
if|if
condition|(
name|QKeySequence
argument_list|(
name|QKeySequence
operator|::
name|Cut
argument_list|)
operator|.
name|toString
argument_list|()
operator|!=
name|QLatin1String
argument_list|(
literal|"Ctrl+X"
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"Platform with non-standard keybindings"
argument_list|)
expr_stmt|;
name|QClipboard
modifier|*
name|clipboard
init|=
name|QGuiApplication
operator|::
name|clipboard
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|PlatformClipboard
operator|::
name|isAvailable
argument_list|()
operator|||
operator|!
name|QGuiApplication
operator|::
name|platformName
argument_list|()
operator|.
name|compare
argument_list|(
literal|"xcb"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
block|{
comment|// Avoid unstable X11 clipboard
name|clipboard
operator|=
name|Q_NULLPTR
expr_stmt|;
block|}
if|if
condition|(
name|clipboard
condition|)
name|clipboard
operator|->
name|clear
argument_list|()
expr_stmt|;
specifier|const
name|QString
name|origText
init|=
name|QStringLiteral
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|QLineEdit
name|lineEdit
argument_list|(
name|origText
argument_list|)
decl_stmt|;
name|lineEdit
operator|.
name|setCursorPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|lineEdit
operator|.
name|hasSelectedText
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|lineEdit
argument_list|,
name|Qt
operator|::
name|Key_X
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lineEdit
operator|.
name|text
argument_list|()
argument_list|,
name|origText
argument_list|)
expr_stmt|;
comment|// No selection, unmodified.
if|if
condition|(
name|clipboard
condition|)
name|QVERIFY
argument_list|(
name|clipboard
operator|->
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|lineEdit
operator|.
name|setSelection
argument_list|(
literal|0
argument_list|,
name|selectionLength
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|lineEdit
argument_list|,
name|Qt
operator|::
name|Key_X
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lineEdit
operator|.
name|text
argument_list|()
argument_list|,
name|origText
operator|.
name|right
argument_list|(
name|origText
operator|.
name|size
argument_list|()
operator|-
name|selectionLength
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clipboard
condition|)
name|QCOMPARE
argument_list|(
name|clipboard
operator|->
name|text
argument_list|()
argument_list|,
name|origText
operator|.
name|left
argument_list|(
name|selectionLength
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !QT_NO_CLIPBOARD
end_comment
begin_class
DECL|class|InputMaskValidator
class|class
name|InputMaskValidator
super|:
specifier|public
name|QValidator
block|{
public|public:
DECL|function|InputMaskValidator
name|InputMaskValidator
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|,
specifier|const
name|char
modifier|*
name|name
init|=
literal|0
parameter_list|)
member_init_list|:
name|QValidator
argument_list|(
name|parent
argument_list|)
block|{
name|setObjectName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|function|validate
name|State
name|validate
parameter_list|(
name|QString
modifier|&
name|text
parameter_list|,
name|int
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
name|InputMaskValidator
modifier|*
name|that
init|=
operator|(
name|InputMaskValidator
operator|*
operator|)
name|this
decl_stmt|;
name|that
operator|->
name|validateText
operator|=
name|text
expr_stmt|;
name|that
operator|->
name|validatePos
operator|=
name|pos
expr_stmt|;
return|return
name|Acceptable
return|;
block|}
DECL|member|validateText
name|QString
name|validateText
decl_stmt|;
DECL|member|validatePos
name|int
name|validatePos
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|inputMaskAndValidator_data
name|void
name|tst_QLineEdit
operator|::
name|inputMaskAndValidator_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"inputMask"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QTestEventList
argument_list|>
argument_list|(
literal|"keys"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"validateText"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"validatePos"
argument_list|)
expr_stmt|;
name|QTestEventList
name|inputKeys
decl_stmt|;
name|inputKeys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_1
argument_list|)
expr_stmt|;
name|inputKeys
operator|.
name|addKeyClick
argument_list|(
name|Qt
operator|::
name|Key_2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"task28291"
argument_list|)
operator|<<
literal|"000;_"
operator|<<
name|inputKeys
operator|<<
literal|"12_"
operator|<<
literal|2
expr_stmt|;
block|}
end_function
begin_function
DECL|function|inputMaskAndValidator
name|void
name|tst_QLineEdit
operator|::
name|inputMaskAndValidator
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|inputMask
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QTestEventList
argument_list|,
name|keys
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|validateText
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|validatePos
argument_list|)
expr_stmt|;
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|InputMaskValidator
name|imv
argument_list|(
name|testWidget
argument_list|)
decl_stmt|;
name|testWidget
operator|->
name|setValidator
argument_list|(
operator|&
name|imv
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setInputMask
argument_list|(
name|inputMask
argument_list|)
expr_stmt|;
name|keys
operator|.
name|simulate
argument_list|(
name|testWidget
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|imv
operator|.
name|validateText
argument_list|,
name|validateText
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|imv
operator|.
name|validatePos
argument_list|,
name|validatePos
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|maxLengthAndInputMask
name|void
name|tst_QLineEdit
operator|::
name|maxLengthAndInputMask
parameter_list|()
block|{
comment|// Really a test for #30447
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|inputMask
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setMaxLength
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|maxLength
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setInputMask
argument_list|(
name|QString
operator|::
name|null
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|inputMask
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|maxLength
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|LineEdit
class|class
name|LineEdit
super|:
specifier|public
name|QLineEdit
block|{
public|public:
DECL|function|LineEdit
name|LineEdit
parameter_list|()
block|{
name|state
operator|=
name|Other
expr_stmt|;
block|}
DECL|function|keyPressEvent
name|void
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|e
parameter_list|)
block|{
name|QLineEdit
operator|::
name|keyPressEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Enter
condition|)
block|{
name|state
operator|=
name|e
operator|->
name|isAccepted
argument_list|()
condition|?
name|Accepted
else|:
name|Ignored
expr_stmt|;
block|}
else|else
block|{
name|state
operator|=
name|Other
expr_stmt|;
block|}
block|}
DECL|enum|State
enum|enum
name|State
block|{
DECL|enumerator|Accepted
name|Accepted
block|,
DECL|enumerator|Ignored
name|Ignored
block|,
DECL|enumerator|Other
name|Other
block|}
enum|;
DECL|member|state
name|State
name|state
decl_stmt|;
friend|friend
class_decl|class
name|tst_QLineEdit
class_decl|;
block|}
class|;
end_class
begin_expr_stmt
DECL|variable|State
name|Q_DECLARE_METATYPE
argument_list|(
name|LineEdit
operator|::
name|State
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|returnPressedKeyEvent
name|void
name|tst_QLineEdit
operator|::
name|returnPressedKeyEvent
parameter_list|()
block|{
name|LineEdit
name|lineedit
decl_stmt|;
name|centerOnScreen
argument_list|(
operator|&
name|lineedit
argument_list|)
expr_stmt|;
name|lineedit
operator|.
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|lineedit
operator|.
name|state
argument_list|,
operator|(
name|int
operator|)
name|LineEdit
operator|::
name|Other
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|lineedit
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|lineedit
operator|.
name|state
argument_list|,
operator|(
name|int
operator|)
name|LineEdit
operator|::
name|Ignored
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|lineedit
argument_list|,
name|SIGNAL
argument_list|(
name|returnPressed
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|onReturnPressed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|lineedit
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|lineedit
operator|.
name|state
argument_list|,
operator|(
name|int
operator|)
name|LineEdit
operator|::
name|Ignored
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
operator|&
name|lineedit
argument_list|,
name|SIGNAL
argument_list|(
name|returnPressed
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|onReturnPressed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|lineedit
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|lineedit
operator|.
name|state
argument_list|,
operator|(
name|int
operator|)
name|LineEdit
operator|::
name|Ignored
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|lineedit
argument_list|,
name|Qt
operator|::
name|Key_1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|lineedit
operator|.
name|state
argument_list|,
operator|(
name|int
operator|)
name|LineEdit
operator|::
name|Other
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|keepSelectionOnTabFocusIn
name|void
name|tst_QLineEdit
operator|::
name|keepSelectionOnTabFocusIn
parameter_list|()
block|{
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
literal|"hello world"
argument_list|)
expr_stmt|;
block|{
name|QFocusEvent
name|e
argument_list|(
name|QEvent
operator|::
name|FocusIn
argument_list|,
name|Qt
operator|::
name|TabFocusReason
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|testWidget
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|selectedText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"hello world"
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setSelection
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|selectedText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|QFocusEvent
name|e
argument_list|(
name|QEvent
operator|::
name|FocusIn
argument_list|,
name|Qt
operator|::
name|TabFocusReason
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|testWidget
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|selectedText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readOnlyStyleOption
name|void
name|tst_QLineEdit
operator|::
name|readOnlyStyleOption
parameter_list|()
block|{
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|bool
name|wasReadOnly
init|=
name|testWidget
operator|->
name|isReadOnly
argument_list|()
decl_stmt|;
name|QStyle
modifier|*
name|oldStyle
init|=
name|testWidget
operator|->
name|style
argument_list|()
decl_stmt|;
name|StyleOptionTestStyle
name|myStyle
decl_stmt|;
name|testWidget
operator|->
name|setStyle
argument_list|(
operator|&
name|myStyle
argument_list|)
expr_stmt|;
name|myStyle
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|repaint
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|setReadOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|myStyle
operator|.
name|setReadOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|repaint
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|setReadOnly
argument_list|(
name|wasReadOnly
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setStyle
argument_list|(
name|oldStyle
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|validateOnFocusOut
name|void
name|tst_QLineEdit
operator|::
name|validateOnFocusOut
parameter_list|()
block|{
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|QSignalSpy
name|editingFinishedSpy
argument_list|(
name|testWidget
argument_list|,
name|SIGNAL
argument_list|(
name|editingFinished
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|testWidget
operator|->
name|setValidator
argument_list|(
operator|new
name|QIntValidator
argument_list|(
literal|100
argument_list|,
literal|999
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
literal|'1'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
literal|'0'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|clearFocus
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|editingFinishedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|centerOnScreen
argument_list|(
name|testWidget
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|show
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|activateWindow
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowActive
argument_list|(
name|testWidget
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
literal|'0'
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"100"
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|clearFocus
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|editingFinishedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|editInvalidText
name|void
name|tst_QLineEdit
operator|::
name|editInvalidText
parameter_list|()
block|{
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|clear
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|setValidator
argument_list|(
operator|new
name|QIntValidator
argument_list|(
literal|0
argument_list|,
literal|120
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
literal|"1234"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|hasAcceptableInput
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Backspace
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Backspace
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_B
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_C
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|hasAcceptableInput
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"12"
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|cursorBackward
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|cursorBackward
argument_list|(
literal|true
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Delete
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|hasAcceptableInput
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|hasAcceptableInput
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"12"
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setValidator
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|Qt::KeyboardModifiers
argument_list|)
end_macro
begin_function
DECL|function|charWithAltOrCtrlModifier_data
name|void
name|tst_QLineEdit
operator|::
name|charWithAltOrCtrlModifier_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|Qt
operator|::
name|KeyboardModifiers
argument_list|>
argument_list|(
literal|"modifiers"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"textExpected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-modifiers"
argument_list|)
operator|<<
name|Qt
operator|::
name|KeyboardModifiers
argument_list|()
operator|<<
literal|true
expr_stmt|;
comment|// Ctrl, Ctrl+Shift: No text (QTBUG-35734)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ctrl"
argument_list|)
operator|<<
name|Qt
operator|::
name|KeyboardModifiers
argument_list|(
name|Qt
operator|::
name|ControlModifier
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ctrl-shift"
argument_list|)
operator|<<
name|Qt
operator|::
name|KeyboardModifiers
argument_list|(
name|Qt
operator|::
name|ShiftModifier
operator||
name|Qt
operator|::
name|ControlModifier
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"alt"
argument_list|)
operator|<<
name|Qt
operator|::
name|KeyboardModifiers
argument_list|(
name|Qt
operator|::
name|AltModifier
argument_list|)
operator|<<
literal|true
expr_stmt|;
comment|// Alt-Ctrl (Alt-Gr on German keyboards, Task 129098): Expect text
name|QTest
operator|::
name|newRow
argument_list|(
literal|"alt-ctrl"
argument_list|)
operator|<<
operator|(
name|Qt
operator|::
name|AltModifier
operator||
name|Qt
operator|::
name|ControlModifier
operator|)
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|charWithAltOrCtrlModifier
name|void
name|tst_QLineEdit
operator|::
name|charWithAltOrCtrlModifier
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|Qt
operator|::
name|KeyboardModifiers
argument_list|,
name|modifiers
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|textExpected
argument_list|)
expr_stmt|;
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Plus
argument_list|,
name|modifiers
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|expectedText
init|=
name|textExpected
condition|?
name|QLatin1String
argument_list|(
literal|"+"
argument_list|)
else|:
name|QString
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|expectedText
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|leftKeyOnSelectedText
name|void
name|tst_QLineEdit
operator|::
name|leftKeyOnSelectedText
parameter_list|()
block|{
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|clear
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
literal|"0123"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setCursorPosition
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|selectedText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Left
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|selectedText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"23"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
name|Q_OS_WIN
operator|||
name|defined
name|Q_OS_QNX
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// Selection is cleared ands cursor remains at position 2.
comment|// X11 used to behave like window prior to 4.2. Changes caused by QKeySequence
comment|// resulted in an inadvertant change in behavior
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|inlineCompletion
name|void
name|tst_QLineEdit
operator|::
name|inlineCompletion
parameter_list|()
block|{
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QStandardItemModel
modifier|*
name|model
init|=
operator|new
name|QStandardItemModel
decl_stmt|;
name|QStandardItem
modifier|*
name|root
init|=
name|model
operator|->
name|invisibleRootItem
argument_list|()
decl_stmt|;
name|QStandardItem
modifier|*
name|items
index|[
literal|5
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|items
index|[
name|i
index|]
operator|=
operator|new
name|QStandardItem
argument_list|(
name|QString
argument_list|(
literal|"item%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|i
operator|+
literal|2
operator|)
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
comment|// disable 0,2,4
name|items
index|[
name|i
index|]
operator|->
name|setFlags
argument_list|(
name|items
index|[
name|i
index|]
operator|->
name|flags
argument_list|()
operator|&
operator|~
name|Qt
operator|::
name|ItemIsEnabled
argument_list|)
expr_stmt|;
block|}
name|root
operator|->
name|appendRow
argument_list|(
name|items
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|QCompleter
modifier|*
name|completer
init|=
operator|new
name|QCompleter
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|completer
operator|->
name|setCompletionMode
argument_list|(
name|QCompleter
operator|::
name|InlineCompletion
argument_list|)
expr_stmt|;
name|completer
operator|->
name|setCaseSensitivity
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|centerOnScreen
argument_list|(
name|testWidget
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
name|testWidget
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|qApp
operator|->
name|activeWindow
argument_list|()
argument_list|,
operator|(
name|QWidget
operator|*
operator|)
name|testWidget
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setCompleter
argument_list|(
name|completer
argument_list|)
expr_stmt|;
comment|// sanity
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_X
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|selectedText
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|selectedText
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Up
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|selectedText
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_I
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|selectedText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"tem1"
argument_list|)
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|KeyboardModifiers
name|keyboardModifiers
init|=
name|Qt
operator|::
name|ControlModifier
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|keyboardModifiers
operator||=
name|Qt
operator|::
name|AltModifier
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|,
name|keyboardModifiers
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|selectedText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"tem3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// wraps around (Default)
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|,
name|keyboardModifiers
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|selectedText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"tem1"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Up
argument_list|,
name|keyboardModifiers
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|selectedText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"tem3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should not wrap
name|completer
operator|->
name|setWrapAround
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|,
name|keyboardModifiers
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|selectedText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"tem3"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Up
argument_list|,
name|keyboardModifiers
argument_list|)
expr_stmt|;
comment|// item1
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Up
argument_list|,
name|keyboardModifiers
argument_list|)
expr_stmt|;
comment|// item1
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|selectedText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"tem1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// trivia :)
name|root
operator|->
name|appendRow
argument_list|(
operator|new
name|QStandardItem
argument_list|(
literal|"item11"
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|->
name|appendRow
argument_list|(
operator|new
name|QStandardItem
argument_list|(
literal|"item12"
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_I
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|selectedText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"tem1"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Delete
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|selectedText
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|,
name|keyboardModifiers
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|selectedText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"tem1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// neato
name|testWidget
operator|->
name|setText
argument_list|(
literal|"item1"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setSelection
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|,
name|keyboardModifiers
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|end
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"item1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// no effect for selection in "middle"
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|,
name|keyboardModifiers
argument_list|)
expr_stmt|;
comment|// item1
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|,
name|keyboardModifiers
argument_list|)
expr_stmt|;
comment|// item11
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"item11"
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|model
expr_stmt|;
operator|delete
name|completer
expr_stmt|;
block|}
end_function
begin_function
DECL|function|noTextEditedOnClear
name|void
name|tst_QLineEdit
operator|::
name|noTextEditedOnClear
parameter_list|()
block|{
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|QSignalSpy
name|textEditedSpy
argument_list|(
name|testWidget
argument_list|,
name|SIGNAL
argument_list|(
name|textEdited
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|testWidget
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|textEditedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|textMargin_data
name|void
name|tst_QLineEdit
operator|::
name|textMargin_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"left"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"top"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"right"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"bottom"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QPoint
argument_list|>
argument_list|(
literal|"mousePressPos"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"cursorPosition"
argument_list|)
expr_stmt|;
name|QLineEdit
name|testWidget
decl_stmt|;
name|QFontMetrics
name|metrics
argument_list|(
name|testWidget
operator|.
name|font
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|s
init|=
name|QLatin1String
argument_list|(
literal|"MMM MMM MMM"
argument_list|)
decl_stmt|;
comment|// Different styles generate different offsets, so
comment|// calculate the width rather than hardcode it.
specifier|const
name|int
name|pixelWidthOfM
init|=
name|metrics
operator|.
name|width
argument_list|(
name|s
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|int
name|pixelWidthOfMMM_MM
init|=
name|metrics
operator|.
name|width
argument_list|(
name|s
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"default-0"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QPoint
argument_list|(
name|pixelWidthOfMMM_MM
argument_list|,
literal|0
argument_list|)
operator|<<
literal|6
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"default-1"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QPoint
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"default-2"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|0
operator|<<
operator|-
literal|1
operator|<<
literal|0
operator|<<
name|QPoint
argument_list|(
name|pixelWidthOfMMM_MM
argument_list|,
literal|0
argument_list|)
operator|<<
literal|6
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"default-3"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QPoint
argument_list|(
name|pixelWidthOfM
argument_list|,
literal|1
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hor-0"
argument_list|)
operator|<<
literal|10
operator|<<
literal|0
operator|<<
literal|10
operator|<<
literal|0
operator|<<
name|QPoint
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hor-1"
argument_list|)
operator|<<
literal|10
operator|<<
literal|0
operator|<<
literal|10
operator|<<
literal|0
operator|<<
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|1
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hor-2"
argument_list|)
operator|<<
literal|20
operator|<<
literal|0
operator|<<
literal|10
operator|<<
literal|0
operator|<<
name|QPoint
argument_list|(
literal|20
argument_list|,
literal|1
argument_list|)
operator|<<
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|qApp
operator|->
name|style
argument_list|()
operator|->
name|inherits
argument_list|(
literal|"QMacStyle"
argument_list|)
condition|)
block|{
comment|//MacStyle doesn't support verticals margins.
name|QTest
operator|::
name|newRow
argument_list|(
literal|"default-2-ver"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
name|QPoint
argument_list|(
name|pixelWidthOfMMM_MM
argument_list|,
literal|0
argument_list|)
operator|<<
literal|6
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ver"
argument_list|)
operator|<<
literal|0
operator|<<
literal|10
operator|<<
literal|0
operator|<<
literal|10
operator|<<
name|QPoint
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|<<
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|textMargin
name|void
name|tst_QLineEdit
operator|::
name|textMargin
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|top
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|bottom
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QPoint
argument_list|,
name|mousePressPos
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|cursorPosition
argument_list|)
expr_stmt|;
comment|// Put the line edit into a toplevel window to avoid
comment|// resizing by the window system.
name|QWidget
name|tlw
decl_stmt|;
name|QLineEdit
name|testWidget
argument_list|(
operator|&
name|tlw
argument_list|)
decl_stmt|;
name|testWidget
operator|.
name|setGeometry
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|testWidget
operator|.
name|setText
argument_list|(
literal|"MMM MMM MMM"
argument_list|)
expr_stmt|;
name|testWidget
operator|.
name|setCursorPosition
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|QSize
name|sizeHint
init|=
name|testWidget
operator|.
name|sizeHint
argument_list|()
decl_stmt|;
name|QSize
name|minSizeHint
init|=
name|testWidget
operator|.
name|minimumSizeHint
argument_list|()
decl_stmt|;
name|testWidget
operator|.
name|setTextMargins
argument_list|(
name|left
argument_list|,
name|top
argument_list|,
name|right
argument_list|,
name|bottom
argument_list|)
expr_stmt|;
name|sizeHint
operator|.
name|setWidth
argument_list|(
name|sizeHint
operator|.
name|width
argument_list|()
operator|+
name|left
operator|+
name|right
argument_list|)
expr_stmt|;
name|sizeHint
operator|.
name|setHeight
argument_list|(
name|sizeHint
operator|.
name|height
argument_list|()
operator|+
name|top
operator|+
name|bottom
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|.
name|sizeHint
argument_list|()
argument_list|,
name|sizeHint
argument_list|)
expr_stmt|;
if|if
condition|(
name|minSizeHint
operator|.
name|width
argument_list|()
operator|>
operator|-
literal|1
condition|)
block|{
name|minSizeHint
operator|.
name|setWidth
argument_list|(
name|minSizeHint
operator|.
name|width
argument_list|()
operator|+
name|left
operator|+
name|right
argument_list|)
expr_stmt|;
name|minSizeHint
operator|.
name|setHeight
argument_list|(
name|minSizeHint
operator|.
name|height
argument_list|()
operator|+
name|top
operator|+
name|bottom
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|.
name|minimumSizeHint
argument_list|()
argument_list|,
name|minSizeHint
argument_list|)
expr_stmt|;
block|}
name|testWidget
operator|.
name|setFrame
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|centerOnScreen
argument_list|(
operator|&
name|tlw
argument_list|)
expr_stmt|;
name|tlw
operator|.
name|show
argument_list|()
expr_stmt|;
name|int
name|l
decl_stmt|;
name|int
name|t
decl_stmt|;
name|int
name|r
decl_stmt|;
name|int
name|b
decl_stmt|;
name|testWidget
operator|.
name|getTextMargins
argument_list|(
operator|&
name|l
argument_list|,
operator|&
name|t
argument_list|,
operator|&
name|r
argument_list|,
operator|&
name|b
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|left
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|top
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|right
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bottom
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseClick
argument_list|(
operator|&
name|testWidget
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|mousePressPos
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|testWidget
operator|.
name|cursorPosition
argument_list|()
argument_list|,
name|cursorPosition
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QTEST_NO_CURSOR
end_ifndef
begin_function
DECL|function|cursor
name|void
name|tst_QLineEdit
operator|::
name|cursor
parameter_list|()
block|{
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|setReadOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursor
argument_list|()
operator|.
name|shape
argument_list|()
argument_list|,
name|Qt
operator|::
name|IBeamCursor
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursor
argument_list|()
operator|.
name|shape
argument_list|()
argument_list|,
name|Qt
operator|::
name|ArrowCursor
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setReadOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursor
argument_list|()
operator|.
name|shape
argument_list|()
argument_list|,
name|Qt
operator|::
name|IBeamCursor
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|task180999_Widget
class|class
name|task180999_Widget
super|:
specifier|public
name|QWidget
block|{
public|public:
DECL|function|task180999_Widget
name|task180999_Widget
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
block|{
name|QHBoxLayout
modifier|*
name|layout
init|=
operator|new
name|QHBoxLayout
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|lineEdit1
operator|.
name|setText
argument_list|(
literal|"some text 1 ..."
argument_list|)
expr_stmt|;
name|lineEdit2
operator|.
name|setText
argument_list|(
literal|"some text 2 ..."
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
operator|&
name|lineEdit1
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
operator|&
name|lineEdit2
argument_list|)
expr_stmt|;
block|}
DECL|member|lineEdit1
name|QLineEdit
name|lineEdit1
decl_stmt|;
DECL|member|lineEdit2
name|QLineEdit
name|lineEdit2
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|task180999_focus
name|void
name|tst_QLineEdit
operator|::
name|task180999_focus
parameter_list|()
block|{
name|task180999_Widget
name|widget
decl_stmt|;
name|widget
operator|.
name|lineEdit1
operator|.
name|setFocus
argument_list|()
expr_stmt|;
name|widget
operator|.
name|show
argument_list|()
expr_stmt|;
name|widget
operator|.
name|lineEdit2
operator|.
name|setFocus
argument_list|()
expr_stmt|;
name|widget
operator|.
name|lineEdit2
operator|.
name|selectAll
argument_list|()
expr_stmt|;
name|widget
operator|.
name|hide
argument_list|()
expr_stmt|;
name|widget
operator|.
name|lineEdit1
operator|.
name|setFocus
argument_list|()
expr_stmt|;
name|widget
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|widget
operator|.
name|activateWindow
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
operator|!
name|widget
operator|.
name|lineEdit2
operator|.
name|hasSelectedText
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task174640_editingFinished
name|void
name|tst_QLineEdit
operator|::
name|task174640_editingFinished
parameter_list|()
block|{
name|QWidget
name|mw
decl_stmt|;
name|QVBoxLayout
modifier|*
name|layout
init|=
operator|new
name|QVBoxLayout
argument_list|(
operator|&
name|mw
argument_list|)
decl_stmt|;
name|QLineEdit
modifier|*
name|le1
init|=
operator|new
name|QLineEdit
argument_list|(
operator|&
name|mw
argument_list|)
decl_stmt|;
name|QLineEdit
modifier|*
name|le2
init|=
operator|new
name|QLineEdit
argument_list|(
operator|&
name|mw
argument_list|)
decl_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|le1
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|le2
argument_list|)
expr_stmt|;
name|mw
operator|.
name|show
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|mw
argument_list|)
expr_stmt|;
name|mw
operator|.
name|activateWindow
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowActive
argument_list|(
operator|&
name|mw
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|&
name|mw
argument_list|,
name|QApplication
operator|::
name|activeWindow
argument_list|()
argument_list|)
expr_stmt|;
name|QSignalSpy
name|editingFinishedSpy
argument_list|(
name|le1
argument_list|,
name|SIGNAL
argument_list|(
name|editingFinished
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|le1
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|le1
operator|->
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|editingFinishedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|le2
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|le2
operator|->
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|editingFinishedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|editingFinishedSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|le1
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|le1
operator|->
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QMenu
modifier|*
name|testMenu1
init|=
operator|new
name|QMenu
argument_list|(
name|le1
argument_list|)
decl_stmt|;
name|testMenu1
operator|->
name|addAction
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|testMenu1
operator|->
name|addAction
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|testMenu1
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
name|testMenu1
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|mw
operator|.
name|activateWindow
argument_list|()
expr_stmt|;
operator|delete
name|testMenu1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|editingFinishedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|le1
operator|->
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QMenu
modifier|*
name|testMenu2
init|=
operator|new
name|QMenu
argument_list|(
name|le2
argument_list|)
decl_stmt|;
name|testMenu2
operator|->
name|addAction
argument_list|(
literal|"foo2"
argument_list|)
expr_stmt|;
name|testMenu2
operator|->
name|addAction
argument_list|(
literal|"bar2"
argument_list|)
expr_stmt|;
name|testMenu2
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
name|testMenu2
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|mw
operator|.
name|activateWindow
argument_list|()
expr_stmt|;
operator|delete
name|testMenu2
expr_stmt|;
name|QCOMPARE
argument_list|(
name|editingFinishedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_COMPLETER
end_ifndef
begin_class
DECL|class|task198789_Widget
class|class
name|task198789_Widget
super|:
specifier|public
name|QWidget
block|{
name|Q_OBJECT
public|public:
DECL|function|task198789_Widget
name|task198789_Widget
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
block|{
name|QStringList
name|wordList
decl_stmt|;
name|wordList
operator|<<
literal|"alpha"
operator|<<
literal|"omega"
operator|<<
literal|"omicron"
operator|<<
literal|"zeta"
expr_stmt|;
name|lineEdit
operator|=
operator|new
name|QLineEdit
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|completer
operator|=
operator|new
name|QCompleter
argument_list|(
name|wordList
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|lineEdit
operator|->
name|setCompleter
argument_list|(
name|completer
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|lineEdit
argument_list|,
name|SIGNAL
argument_list|(
name|textChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|textChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|member|lineEdit
name|QLineEdit
modifier|*
name|lineEdit
decl_stmt|;
DECL|member|completer
name|QCompleter
modifier|*
name|completer
decl_stmt|;
DECL|member|currentCompletion
name|QString
name|currentCompletion
decl_stmt|;
private|private
name|slots
private|:
DECL|function|textChanged
name|void
name|textChanged
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
block|{
name|currentCompletion
operator|=
name|completer
operator|->
name|currentCompletion
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|task198789_currentCompletion
name|void
name|tst_QLineEdit
operator|::
name|task198789_currentCompletion
parameter_list|()
block|{
name|task198789_Widget
name|widget
decl_stmt|;
name|widget
operator|.
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|widget
operator|.
name|lineEdit
argument_list|,
literal|'o'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|widget
operator|.
name|lineEdit
argument_list|,
literal|'m'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|widget
operator|.
name|lineEdit
argument_list|,
literal|'i'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widget
operator|.
name|currentCompletion
argument_list|,
name|QLatin1String
argument_list|(
literal|"omicron"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task210502_caseInsensitiveInlineCompletion
name|void
name|tst_QLineEdit
operator|::
name|task210502_caseInsensitiveInlineCompletion
parameter_list|()
block|{
name|QString
name|completion
argument_list|(
literal|"ABCD"
argument_list|)
decl_stmt|;
name|QStringList
name|completions
decl_stmt|;
name|completions
operator|<<
name|completion
expr_stmt|;
name|QLineEdit
name|lineEdit
decl_stmt|;
name|QCompleter
name|completer
argument_list|(
name|completions
argument_list|)
decl_stmt|;
name|completer
operator|.
name|setCaseSensitivity
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|completer
operator|.
name|setCompletionMode
argument_list|(
name|QCompleter
operator|::
name|InlineCompletion
argument_list|)
expr_stmt|;
name|lineEdit
operator|.
name|setCompleter
argument_list|(
operator|&
name|completer
argument_list|)
expr_stmt|;
name|lineEdit
operator|.
name|show
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|lineEdit
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowActive
argument_list|(
operator|&
name|lineEdit
argument_list|)
argument_list|)
expr_stmt|;
name|lineEdit
operator|.
name|setFocus
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|lineEdit
operator|.
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
operator|&
name|lineEdit
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
operator|&
name|lineEdit
argument_list|,
name|Qt
operator|::
name|Key_Return
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lineEdit
operator|.
name|text
argument_list|()
argument_list|,
name|completion
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_COMPLETER
end_comment
begin_function
DECL|function|task229938_dontEmitChangedWhenTextIsNotChanged
name|void
name|tst_QLineEdit
operator|::
name|task229938_dontEmitChangedWhenTextIsNotChanged
parameter_list|()
block|{
name|QLineEdit
name|lineEdit
decl_stmt|;
name|lineEdit
operator|.
name|setMaxLength
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|lineEdit
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|lineEdit
argument_list|)
expr_stmt|;
comment|// to be safe and avoid failing setFocus with window managers
name|lineEdit
operator|.
name|setFocus
argument_list|()
expr_stmt|;
name|QSignalSpy
name|changedSpy
argument_list|(
operator|&
name|lineEdit
argument_list|,
name|SIGNAL
argument_list|(
name|textChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
operator|&
name|lineEdit
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
operator|&
name|lineEdit
argument_list|,
literal|'b'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
operator|&
name|lineEdit
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
operator|&
name|lineEdit
argument_list|,
literal|'d'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
operator|&
name|lineEdit
argument_list|,
literal|'e'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
operator|&
name|lineEdit
argument_list|,
literal|'f'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|changedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task233101_cursorPosAfterInputMethod_data
name|void
name|tst_QLineEdit
operator|::
name|task233101_cursorPosAfterInputMethod_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"maxLength"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"cursorPos"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"replacementStart"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"replacementLength"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"commitString"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
literal|4
operator|<<
literal|4
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
literal|4
operator|<<
literal|4
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QString
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data3"
argument_list|)
operator|<<
literal|4
operator|<<
literal|4
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QString
argument_list|(
literal|"xxxxxxxxxxxxxxxx"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data4"
argument_list|)
operator|<<
literal|4
operator|<<
literal|3
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data5"
argument_list|)
operator|<<
literal|4
operator|<<
literal|3
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QString
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data6"
argument_list|)
operator|<<
literal|4
operator|<<
literal|3
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QString
argument_list|(
literal|"xxxxxxxxxxxxxxxx"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data7"
argument_list|)
operator|<<
literal|4
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data8"
argument_list|)
operator|<<
literal|4
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QString
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data9"
argument_list|)
operator|<<
literal|4
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QString
argument_list|(
literal|"xxxxxxxxxxxxxxxx"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data10"
argument_list|)
operator|<<
literal|4
operator|<<
literal|4
operator|<<
operator|-
literal|4
operator|<<
literal|4
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data11"
argument_list|)
operator|<<
literal|4
operator|<<
literal|4
operator|<<
operator|-
literal|4
operator|<<
literal|4
operator|<<
name|QString
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data12"
argument_list|)
operator|<<
literal|4
operator|<<
literal|4
operator|<<
operator|-
literal|4
operator|<<
literal|4
operator|<<
name|QString
argument_list|(
literal|"xxxxxxxxxxxxxxxx"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data13"
argument_list|)
operator|<<
literal|4
operator|<<
literal|3
operator|<<
operator|-
literal|3
operator|<<
literal|4
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data14"
argument_list|)
operator|<<
literal|4
operator|<<
literal|3
operator|<<
operator|-
literal|3
operator|<<
literal|4
operator|<<
name|QString
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data15"
argument_list|)
operator|<<
literal|4
operator|<<
literal|3
operator|<<
operator|-
literal|3
operator|<<
literal|4
operator|<<
name|QString
argument_list|(
literal|"xxxxxxxxxxxxxxxx"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data16"
argument_list|)
operator|<<
literal|4
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|4
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data17"
argument_list|)
operator|<<
literal|4
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|4
operator|<<
name|QString
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data18"
argument_list|)
operator|<<
literal|4
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|4
operator|<<
name|QString
argument_list|(
literal|"xxxxxxxxxxxxxxxx"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data19"
argument_list|)
operator|<<
literal|4
operator|<<
literal|4
operator|<<
operator|-
literal|4
operator|<<
literal|0
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data20"
argument_list|)
operator|<<
literal|4
operator|<<
literal|4
operator|<<
operator|-
literal|4
operator|<<
literal|0
operator|<<
name|QString
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data21"
argument_list|)
operator|<<
literal|4
operator|<<
literal|4
operator|<<
operator|-
literal|4
operator|<<
literal|0
operator|<<
name|QString
argument_list|(
literal|"xxxxxxxxxxxxxxxx"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data22"
argument_list|)
operator|<<
literal|4
operator|<<
literal|3
operator|<<
operator|-
literal|3
operator|<<
literal|0
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data23"
argument_list|)
operator|<<
literal|4
operator|<<
literal|3
operator|<<
operator|-
literal|3
operator|<<
literal|0
operator|<<
name|QString
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data24"
argument_list|)
operator|<<
literal|4
operator|<<
literal|3
operator|<<
operator|-
literal|3
operator|<<
literal|0
operator|<<
name|QString
argument_list|(
literal|"xxxxxxxxxxxxxxxx"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task233101_cursorPosAfterInputMethod
name|void
name|tst_QLineEdit
operator|::
name|task233101_cursorPosAfterInputMethod
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|cursorPos
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|replacementStart
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|replacementLength
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|commitString
argument_list|)
expr_stmt|;
name|QLineEdit
name|lineEdit
decl_stmt|;
name|lineEdit
operator|.
name|setMaxLength
argument_list|(
name|maxLength
argument_list|)
expr_stmt|;
name|lineEdit
operator|.
name|insert
argument_list|(
name|QString
argument_list|()
operator|.
name|fill
argument_list|(
name|QLatin1Char
argument_list|(
literal|'a'
argument_list|)
argument_list|,
name|cursorPos
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lineEdit
operator|.
name|cursorPosition
argument_list|()
argument_list|,
name|cursorPos
argument_list|)
expr_stmt|;
name|QInputMethodEvent
name|event
decl_stmt|;
name|event
operator|.
name|setCommitString
argument_list|(
name|QLatin1String
argument_list|(
literal|"x"
argument_list|)
argument_list|,
name|replacementStart
argument_list|,
name|replacementLength
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|sendEvent
argument_list|(
operator|&
name|lineEdit
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|lineEdit
operator|.
name|cursorPosition
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|lineEdit
operator|.
name|cursorPosition
argument_list|()
operator|<=
name|lineEdit
operator|.
name|text
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|lineEdit
operator|.
name|text
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
name|lineEdit
operator|.
name|maxLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task241436_passwordEchoOnEditRestoreEchoMode
name|void
name|tst_QLineEdit
operator|::
name|task241436_passwordEchoOnEditRestoreEchoMode
parameter_list|()
block|{
name|QStyleOptionFrame
name|opt
decl_stmt|;
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|QChar
name|fillChar
init|=
name|testWidget
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_LineEdit_PasswordCharacter
argument_list|,
operator|&
name|opt
argument_list|,
name|testWidget
argument_list|)
decl_stmt|;
name|testWidget
operator|->
name|setEchoMode
argument_list|(
name|QLineEdit
operator|::
name|PasswordEchoOnEdit
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|centerOnScreen
argument_list|(
name|testWidget
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|show
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
name|testWidget
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowActive
argument_list|(
name|testWidget
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
literal|'0'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|displayText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setEchoMode
argument_list|(
name|QLineEdit
operator|::
name|Normal
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|clearFocus
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|displayText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|activateWindow
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|setEchoMode
argument_list|(
name|QLineEdit
operator|::
name|PasswordEchoOnEdit
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
literal|'0'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|displayText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setEchoMode
argument_list|(
name|QLineEdit
operator|::
name|PasswordEchoOnEdit
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|displayText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|clearFocus
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|displayText
argument_list|()
argument_list|,
name|QString
argument_list|(
name|fillChar
argument_list|)
argument_list|)
expr_stmt|;
comment|// restore clean state
name|testWidget
operator|->
name|setEchoMode
argument_list|(
name|QLineEdit
operator|::
name|Normal
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task248948_redoRemovedSelection
name|void
name|tst_QLineEdit
operator|::
name|task248948_redoRemovedSelection
parameter_list|()
block|{
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|selectAll
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Delete
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|undo
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|redo
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
literal|'b'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"ab"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|taskQTBUG_4401_enterKeyClearsPassword
name|void
name|tst_QLineEdit
operator|::
name|taskQTBUG_4401_enterKeyClearsPassword
parameter_list|()
block|{
name|QString
name|password
argument_list|(
literal|"Wanna guess?"
argument_list|)
decl_stmt|;
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
name|password
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setEchoMode
argument_list|(
name|QLineEdit
operator|::
name|PasswordEchoOnEdit
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|selectAll
argument_list|()
expr_stmt|;
name|centerOnScreen
argument_list|(
name|testWidget
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|show
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
name|testWidget
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowActive
argument_list|(
name|testWidget
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|taskQTBUG_4679_moveToStartEndOfBlock
name|void
name|tst_QLineEdit
operator|::
name|taskQTBUG_4679_moveToStartEndOfBlock
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_MAC
specifier|const
name|QString
name|text
argument_list|(
literal|"there are no blocks for lineEdit"
argument_list|)
decl_stmt|;
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setCursorPosition
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|MetaModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_E
argument_list|,
name|Qt
operator|::
name|MetaModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
name|text
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Q_OS_MAC
block|}
end_function
begin_function
DECL|function|taskQTBUG_4679_selectToStartEndOfBlock
name|void
name|tst_QLineEdit
operator|::
name|taskQTBUG_4679_selectToStartEndOfBlock
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_MAC
specifier|const
name|QString
name|text
argument_list|(
literal|"there are no blocks for lineEdit, select all"
argument_list|)
decl_stmt|;
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setCursorPosition
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|MetaModifier
operator||
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|hasSelectedText
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|selectedText
argument_list|()
argument_list|,
name|text
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_E
argument_list|,
name|Qt
operator|::
name|MetaModifier
operator||
name|Qt
operator|::
name|ShiftModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
name|text
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|hasSelectedText
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|selectedText
argument_list|()
argument_list|,
name|text
operator|.
name|mid
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Q_OS_MAC
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
end_ifndef
begin_function
DECL|function|taskQTBUG_7902_contextMenuCrash
name|void
name|tst_QLineEdit
operator|::
name|taskQTBUG_7902_contextMenuCrash
parameter_list|()
block|{
comment|// Would pass before the associated commit, but left as a guard.
name|QLineEdit
modifier|*
name|w
init|=
operator|new
name|QLineEdit
decl_stmt|;
name|w
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|QTimer
name|ti
decl_stmt|;
name|w
operator|->
name|connect
argument_list|(
operator|&
name|ti
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
name|w
argument_list|,
name|SLOT
argument_list|(
name|deleteLater
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ti
operator|.
name|start
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|QContextMenuEvent
modifier|*
name|cme
init|=
operator|new
name|QContextMenuEvent
argument_list|(
name|QContextMenuEvent
operator|::
name|Mouse
argument_list|,
name|w
operator|->
name|rect
argument_list|()
operator|.
name|center
argument_list|()
argument_list|)
decl_stmt|;
name|qApp
operator|->
name|postEvent
argument_list|(
name|w
argument_list|,
name|cme
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|300
argument_list|)
expr_stmt|;
comment|// No crash, it's allright.
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|taskQTBUG_7395_readOnlyShortcut
name|void
name|tst_QLineEdit
operator|::
name|taskQTBUG_7395_readOnlyShortcut
parameter_list|()
block|{
comment|//ReadOnly QLineEdit should not intercept shortcut.
name|QLineEdit
name|le
decl_stmt|;
name|le
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QAction
name|action
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"hello"
argument_list|)
argument_list|,
operator|&
name|le
argument_list|)
decl_stmt|;
name|action
operator|.
name|setShortcut
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|action
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|le
operator|.
name|addAction
argument_list|(
operator|&
name|action
argument_list|)
expr_stmt|;
name|le
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|le
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|le
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowActive
argument_list|(
operator|&
name|le
argument_list|)
argument_list|)
expr_stmt|;
name|le
operator|.
name|setFocus
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|le
operator|.
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_P
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|QTBUG697_paletteCurrentColorGroup
name|void
name|tst_QLineEdit
operator|::
name|QTBUG697_paletteCurrentColorGroup
parameter_list|()
block|{
name|QLineEdit
name|le
decl_stmt|;
name|le
operator|.
name|setText
argument_list|(
literal|"               "
argument_list|)
expr_stmt|;
name|QPalette
name|p
init|=
name|le
operator|.
name|palette
argument_list|()
decl_stmt|;
name|p
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
name|p
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|le
operator|.
name|setPalette
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|le
operator|.
name|show
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|le
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowActive
argument_list|(
operator|&
name|le
argument_list|)
argument_list|)
expr_stmt|;
name|le
operator|.
name|setFocus
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|le
operator|.
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|le
operator|.
name|selectAll
argument_list|()
expr_stmt|;
name|QImage
name|img
argument_list|(
name|le
operator|.
name|size
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|le
operator|.
name|render
argument_list|(
operator|&
name|img
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|pixel
argument_list|(
literal|10
argument_list|,
name|le
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QWindow
name|window
decl_stmt|;
name|window
operator|.
name|resize
argument_list|(
literal|100
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|window
operator|.
name|requestActivate
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowActive
argument_list|(
operator|&
name|window
argument_list|)
argument_list|)
expr_stmt|;
name|le
operator|.
name|render
argument_list|(
operator|&
name|img
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|pixel
argument_list|(
literal|10
argument_list|,
name|le
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|QTBUG13520_textNotVisible
name|void
name|tst_QLineEdit
operator|::
name|QTBUG13520_textNotVisible
parameter_list|()
block|{
name|LineEdit
name|le
decl_stmt|;
name|le
operator|.
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignRight
operator||
name|Qt
operator|::
name|AlignVCenter
argument_list|)
expr_stmt|;
name|le
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|le
argument_list|)
argument_list|)
expr_stmt|;
name|le
operator|.
name|setText
argument_list|(
literal|"01-ST16-01SIL-MPL001wfgsdfgsdgsdfgsdfgsdfgsdfgsdfg"
argument_list|)
expr_stmt|;
name|le
operator|.
name|setCursorPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|//just make sure we get he lineedit correcly painted
name|QVERIFY
argument_list|(
name|le
operator|.
name|cursorRect
argument_list|()
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
operator|<
name|le
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|UpdateRegionLineEdit
class|class
name|UpdateRegionLineEdit
super|:
specifier|public
name|QLineEdit
block|{
public|public:
DECL|member|updateRegion
name|QRegion
name|updateRegion
decl_stmt|;
protected|protected:
DECL|function|paintEvent
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
name|event
parameter_list|)
block|{
name|updateRegion
operator|=
name|event
operator|->
name|region
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|QTBUG7174_inputMaskCursorBlink
name|void
name|tst_QLineEdit
operator|::
name|QTBUG7174_inputMaskCursorBlink
parameter_list|()
block|{
name|UpdateRegionLineEdit
name|edit
decl_stmt|;
name|edit
operator|.
name|setInputMask
argument_list|(
name|QLatin1String
argument_list|(
literal|"AAAA"
argument_list|)
argument_list|)
expr_stmt|;
name|edit
operator|.
name|setFocus
argument_list|()
expr_stmt|;
name|edit
operator|.
name|setText
argument_list|(
name|QLatin1String
argument_list|(
literal|"AAAA"
argument_list|)
argument_list|)
expr_stmt|;
name|edit
operator|.
name|show
argument_list|()
expr_stmt|;
name|QRect
name|cursorRect
init|=
name|edit
operator|.
name|inputMethodQuery
argument_list|(
name|Qt
operator|::
name|ImMicroFocus
argument_list|)
operator|.
name|toRect
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|edit
argument_list|)
argument_list|)
expr_stmt|;
name|edit
operator|.
name|updateRegion
operator|=
name|QRegion
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
name|QApplication
operator|::
name|cursorFlashTime
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|edit
operator|.
name|updateRegion
operator|.
name|contains
argument_list|(
name|cursorRect
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|QTBUG16850_setSelection
name|void
name|tst_QLineEdit
operator|::
name|QTBUG16850_setSelection
parameter_list|()
block|{
name|QLineEdit
name|le
decl_stmt|;
name|le
operator|.
name|setInputMask
argument_list|(
literal|"00:0"
argument_list|)
expr_stmt|;
name|le
operator|.
name|setText
argument_list|(
literal|"  1"
argument_list|)
expr_stmt|;
name|le
operator|.
name|setSelection
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|le
operator|.
name|selectionStart
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|le
operator|.
name|selectedText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|bidiVisualMovement_data
name|void
name|tst_QLineEdit
operator|::
name|bidiVisualMovement_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"logical"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"basicDir"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|IntList
argument_list|>
argument_list|(
literal|"positionList"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Latin text"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"abc"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QChar
operator|::
name|DirL
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Hebrew text, one item"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\327\220\327\221\327\222"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QChar
operator|::
name|DirR
operator|<<
operator|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Hebrew text after Latin text"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"abc\327\220\327\221\327\222"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QChar
operator|::
name|DirL
operator|<<
operator|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|6
operator|<<
literal|5
operator|<<
literal|4
operator|<<
literal|3
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Latin text after Hebrew text"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\327\220\327\221\327\222abc"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QChar
operator|::
name|DirR
operator|<<
operator|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|6
operator|<<
literal|5
operator|<<
literal|4
operator|<<
literal|3
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"LTR, 3 items"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"abc\327\220\327\221\327\222abc"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QChar
operator|::
name|DirL
operator|<<
operator|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|5
operator|<<
literal|4
operator|<<
literal|3
operator|<<
literal|6
operator|<<
literal|7
operator|<<
literal|8
operator|<<
literal|9
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RTL, 3 items"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\327\220\327\221\327\222abc\327\220\327\221\327\222"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QChar
operator|::
name|DirR
operator|<<
operator|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|5
operator|<<
literal|4
operator|<<
literal|3
operator|<<
literal|6
operator|<<
literal|7
operator|<<
literal|8
operator|<<
literal|9
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"LTR, 4 items"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"abc\327\220\327\221\327\222abc\327\220\327\221\327\222"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QChar
operator|::
name|DirL
operator|<<
operator|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|5
operator|<<
literal|4
operator|<<
literal|3
operator|<<
literal|6
operator|<<
literal|7
operator|<<
literal|8
operator|<<
literal|12
operator|<<
literal|11
operator|<<
literal|10
operator|<<
literal|9
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RTL, 4 items"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\327\220\327\221\327\222abc\327\220\327\221\327\222abc"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QChar
operator|::
name|DirR
operator|<<
operator|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|5
operator|<<
literal|4
operator|<<
literal|3
operator|<<
literal|6
operator|<<
literal|7
operator|<<
literal|8
operator|<<
literal|12
operator|<<
literal|11
operator|<<
literal|10
operator|<<
literal|9
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|bidiVisualMovement
name|void
name|tst_QLineEdit
operator|::
name|bidiVisualMovement
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|logical
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|basicDir
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|IntList
argument_list|,
name|positionList
argument_list|)
expr_stmt|;
name|QLineEdit
name|le
decl_stmt|;
name|le
operator|.
name|setText
argument_list|(
name|logical
argument_list|)
expr_stmt|;
name|le
operator|.
name|setCursorMoveStyle
argument_list|(
name|Qt
operator|::
name|VisualMoveStyle
argument_list|)
expr_stmt|;
name|le
operator|.
name|setCursorPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|bool
name|moved
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|,
name|oldPos
decl_stmt|,
name|newPos
init|=
literal|0
decl_stmt|;
do|do
block|{
name|oldPos
operator|=
name|newPos
expr_stmt|;
name|QCOMPARE
argument_list|(
name|oldPos
argument_list|,
name|positionList
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|basicDir
operator|==
name|QChar
operator|::
name|DirL
condition|)
block|{
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|le
argument_list|,
name|Qt
operator|::
name|Key_Right
argument_list|)
expr_stmt|;
block|}
else|else
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|le
argument_list|,
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|newPos
operator|=
name|le
operator|.
name|cursorPosition
argument_list|()
expr_stmt|;
name|moved
operator|=
operator|(
name|oldPos
operator|!=
name|newPos
operator|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|moved
condition|)
do|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
name|positionList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
do|do
block|{
name|i
operator|--
expr_stmt|;
name|oldPos
operator|=
name|newPos
expr_stmt|;
name|QCOMPARE
argument_list|(
name|oldPos
argument_list|,
name|positionList
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|basicDir
operator|==
name|QChar
operator|::
name|DirL
condition|)
block|{
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|le
argument_list|,
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|le
argument_list|,
name|Qt
operator|::
name|Key_Right
argument_list|)
expr_stmt|;
block|}
name|newPos
operator|=
name|le
operator|.
name|cursorPosition
argument_list|()
expr_stmt|;
name|moved
operator|=
operator|(
name|oldPos
operator|!=
name|newPos
operator|)
expr_stmt|;
block|}
do|while
condition|(
name|moved
operator|&&
name|i
operator|>=
literal|0
condition|)
do|;
block|}
end_function
begin_function
DECL|function|bidiLogicalMovement_data
name|void
name|tst_QLineEdit
operator|::
name|bidiLogicalMovement_data
parameter_list|()
block|{
name|bidiVisualMovement_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|bidiLogicalMovement
name|void
name|tst_QLineEdit
operator|::
name|bidiLogicalMovement
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|logical
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|basicDir
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|IntList
argument_list|,
name|positionList
argument_list|)
expr_stmt|;
name|QLineEdit
name|le
decl_stmt|;
name|le
operator|.
name|setText
argument_list|(
name|logical
argument_list|)
expr_stmt|;
name|le
operator|.
name|setCursorMoveStyle
argument_list|(
name|Qt
operator|::
name|LogicalMoveStyle
argument_list|)
expr_stmt|;
name|le
operator|.
name|setCursorPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|bool
name|moved
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|,
name|oldPos
decl_stmt|,
name|newPos
init|=
literal|0
decl_stmt|;
do|do
block|{
name|oldPos
operator|=
name|newPos
expr_stmt|;
name|QCOMPARE
argument_list|(
name|oldPos
argument_list|,
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|basicDir
operator|==
name|QChar
operator|::
name|DirL
condition|)
block|{
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|le
argument_list|,
name|Qt
operator|::
name|Key_Right
argument_list|)
expr_stmt|;
block|}
else|else
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|le
argument_list|,
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|newPos
operator|=
name|le
operator|.
name|cursorPosition
argument_list|()
expr_stmt|;
name|moved
operator|=
operator|(
name|oldPos
operator|!=
name|newPos
operator|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|moved
condition|)
do|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
name|positionList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
do|do
block|{
name|i
operator|--
expr_stmt|;
name|oldPos
operator|=
name|newPos
expr_stmt|;
name|QCOMPARE
argument_list|(
name|oldPos
argument_list|,
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|basicDir
operator|==
name|QChar
operator|::
name|DirL
condition|)
block|{
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|le
argument_list|,
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|le
argument_list|,
name|Qt
operator|::
name|Key_Right
argument_list|)
expr_stmt|;
block|}
name|newPos
operator|=
name|le
operator|.
name|cursorPosition
argument_list|()
expr_stmt|;
name|moved
operator|=
operator|(
name|oldPos
operator|!=
name|newPos
operator|)
expr_stmt|;
block|}
do|while
condition|(
name|moved
operator|&&
name|i
operator|>=
literal|0
condition|)
do|;
block|}
end_function
begin_function
DECL|function|selectAndCursorPosition
name|void
name|tst_QLineEdit
operator|::
name|selectAndCursorPosition
parameter_list|()
block|{
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
literal|"This is a long piece of text"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setSelection
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setSelection
argument_list|(
literal|5
argument_list|,
operator|-
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|inputMethod
name|void
name|tst_QLineEdit
operator|::
name|inputMethod
parameter_list|()
block|{
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|centerOnScreen
argument_list|(
name|testWidget
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
name|testWidget
argument_list|)
argument_list|)
expr_stmt|;
comment|// widget accepts input
name|QInputMethodQueryEvent
name|queryEvent
argument_list|(
name|Qt
operator|::
name|ImEnabled
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|testWidget
argument_list|,
operator|&
name|queryEvent
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|queryEvent
operator|.
name|value
argument_list|(
name|Qt
operator|::
name|ImEnabled
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|testWidget
argument_list|,
operator|&
name|queryEvent
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|queryEvent
operator|.
name|value
argument_list|(
name|Qt
operator|::
name|ImEnabled
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// removing focus allows input method to commit preedit
name|testWidget
operator|->
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|activateWindow
argument_list|()
expr_stmt|;
comment|// TODO setFocus should not be necessary here, because activateWindow
comment|// should focus it, and the window is the QLineEdit. But the test can fail
comment|// on Windows if we don't do this. If each test had a unique QLineEdit
comment|// instance, maybe such problems would go away.
name|testWidget
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|testWidget
operator|->
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|qApp
operator|->
name|focusObject
argument_list|()
argument_list|,
name|testWidget
argument_list|)
expr_stmt|;
name|m_platformInputContext
operator|.
name|setCommitString
argument_list|(
literal|"text"
argument_list|)
expr_stmt|;
name|m_platformInputContext
operator|.
name|m_commitCallCount
operator|=
literal|0
expr_stmt|;
name|QList
argument_list|<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|>
name|attributes
decl_stmt|;
name|QInputMethodEvent
name|preeditEvent
argument_list|(
literal|"preedit text"
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|testWidget
argument_list|,
operator|&
name|preeditEvent
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|clearFocus
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m_platformInputContext
operator|.
name|m_commitCallCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|inputMethodSelection
name|void
name|tst_QLineEdit
operator|::
name|inputMethodSelection
parameter_list|()
block|{
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
literal|"Lorem ipsum dolor sit amet, consectetur adipiscing elit."
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setSelection
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QSignalSpy
name|selectionSpy
argument_list|(
name|testWidget
argument_list|,
name|SIGNAL
argument_list|(
name|selectionChanged
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|selectionSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|selectionStart
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setSelection
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selectionSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|selectionStart
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// selection gained
block|{
name|QList
argument_list|<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|>
name|attributes
decl_stmt|;
name|attributes
operator|<<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|Selection
argument_list|,
literal|12
argument_list|,
literal|5
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QInputMethodEvent
name|event
argument_list|(
literal|""
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|testWidget
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|selectionSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|selectionStart
argument_list|()
argument_list|,
literal|12
argument_list|)
expr_stmt|;
comment|// selection removed
block|{
name|QList
argument_list|<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|>
name|attributes
decl_stmt|;
name|attributes
operator|<<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|Selection
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QInputMethodEvent
name|event
argument_list|(
literal|""
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|testWidget
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|selectionSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|Qt::InputMethodHints
argument_list|)
end_macro
begin_function
DECL|function|inputMethodQueryImHints_data
name|void
name|tst_QLineEdit
operator|::
name|inputMethodQueryImHints_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|Qt
operator|::
name|InputMethodHints
argument_list|>
argument_list|(
literal|"hints"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"None"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|Qt
operator|::
name|InputMethodHints
argument_list|>
argument_list|(
name|Qt
operator|::
name|ImhNone
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Password"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|Qt
operator|::
name|InputMethodHints
argument_list|>
argument_list|(
name|Qt
operator|::
name|ImhHiddenText
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Normal"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|Qt
operator|::
name|InputMethodHints
argument_list|>
argument_list|(
name|Qt
operator|::
name|ImhNoAutoUppercase
operator||
name|Qt
operator|::
name|ImhNoPredictiveText
operator||
name|Qt
operator|::
name|ImhSensitiveData
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|inputMethodQueryImHints
name|void
name|tst_QLineEdit
operator|::
name|inputMethodQueryImHints
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|Qt
operator|::
name|InputMethodHints
argument_list|,
name|hints
argument_list|)
expr_stmt|;
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|setInputMethodHints
argument_list|(
name|hints
argument_list|)
expr_stmt|;
name|QVariant
name|value
init|=
name|testWidget
operator|->
name|inputMethodQuery
argument_list|(
name|Qt
operator|::
name|ImHints
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
name|Qt
operator|::
name|InputMethodHints
argument_list|>
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|,
name|hints
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|undoRedoAndEchoModes_data
name|void
name|tst_QLineEdit
operator|::
name|undoRedoAndEchoModes_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"echoMode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QStringList
name|input
argument_list|(
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"aaa"
operator|<<
literal|"bbb"
operator|<<
literal|"ccc"
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Normal"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QLineEdit
operator|::
name|Normal
operator|<<
name|input
operator|<<
name|QStringList
argument_list|(
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"aaa"
operator|<<
literal|"ccc"
operator|<<
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"NoEcho"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QLineEdit
operator|::
name|NoEcho
operator|<<
name|input
operator|<<
name|QStringList
argument_list|(
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Password"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QLineEdit
operator|::
name|Password
operator|<<
name|input
operator|<<
name|QStringList
argument_list|(
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"PasswordEchoOnEdit"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QLineEdit
operator|::
name|PasswordEchoOnEdit
operator|<<
name|input
operator|<<
name|QStringList
argument_list|(
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|undoRedoAndEchoModes
name|void
name|tst_QLineEdit
operator|::
name|undoRedoAndEchoModes
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|echoMode
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// create some history for the QLineEdit
name|QLineEdit
modifier|*
name|testWidget
init|=
name|ensureTestWidget
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|setEchoMode
argument_list|(
name|QLineEdit
operator|::
name|EchoMode
argument_list|(
name|echoMode
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|insert
argument_list|(
name|input
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|selectAll
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|backspace
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|insert
argument_list|(
name|input
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// test undo
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|isUndoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|expected
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|insert
argument_list|(
name|input
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|selectAll
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|backspace
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|isUndoAvailable
argument_list|()
argument_list|,
name|echoMode
operator|==
name|QLineEdit
operator|::
name|Normal
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|expected
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// test redo
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|isRedoAvailable
argument_list|()
argument_list|,
name|echoMode
operator|==
name|QLineEdit
operator|::
name|Normal
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|redo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|expected
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isRedoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|redo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|expected
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearButton
name|void
name|tst_QLineEdit
operator|::
name|clearButton
parameter_list|()
block|{
comment|// Construct a listview with a stringlist model and filter model.
name|QWidget
name|testWidget
decl_stmt|;
name|QVBoxLayout
modifier|*
name|l
init|=
operator|new
name|QVBoxLayout
argument_list|(
operator|&
name|testWidget
argument_list|)
decl_stmt|;
name|QLineEdit
modifier|*
name|filterLineEdit
init|=
operator|new
name|QLineEdit
argument_list|(
operator|&
name|testWidget
argument_list|)
decl_stmt|;
name|l
operator|->
name|addWidget
argument_list|(
name|filterLineEdit
argument_list|)
expr_stmt|;
name|QListView
modifier|*
name|listView
init|=
operator|new
name|QListView
argument_list|(
operator|&
name|testWidget
argument_list|)
decl_stmt|;
name|QStringListModel
modifier|*
name|model
init|=
operator|new
name|QStringListModel
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QStringLiteral
argument_list|(
literal|"aa"
argument_list|)
operator|<<
name|QStringLiteral
argument_list|(
literal|"ab"
argument_list|)
operator|<<
name|QStringLiteral
argument_list|(
literal|"cc"
argument_list|)
argument_list|,
name|listView
argument_list|)
decl_stmt|;
name|QSortFilterProxyModel
modifier|*
name|filterModel
init|=
operator|new
name|QSortFilterProxyModel
argument_list|(
name|listView
argument_list|)
decl_stmt|;
name|filterModel
operator|->
name|setSourceModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|filterLineEdit
argument_list|,
name|SIGNAL
argument_list|(
name|textChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|filterModel
argument_list|,
name|SLOT
argument_list|(
name|setFilterFixedString
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|listView
operator|->
name|setModel
argument_list|(
name|filterModel
argument_list|)
expr_stmt|;
name|l
operator|->
name|addWidget
argument_list|(
name|listView
argument_list|)
expr_stmt|;
name|testWidget
operator|.
name|move
argument_list|(
literal|300
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|testWidget
operator|.
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
operator|&
name|testWidget
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowActive
argument_list|(
operator|&
name|testWidget
argument_list|)
argument_list|)
expr_stmt|;
comment|// Flip the clear button on,off, trying to detect crashes.
name|filterLineEdit
operator|->
name|setClearButtonEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|filterLineEdit
operator|->
name|isClearButtonEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|filterLineEdit
operator|->
name|setClearButtonEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|filterLineEdit
operator|->
name|isClearButtonEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|filterLineEdit
operator|->
name|setClearButtonEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|filterLineEdit
operator|->
name|isClearButtonEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|filterLineEdit
operator|->
name|setClearButtonEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|filterLineEdit
operator|->
name|isClearButtonEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|filterLineEdit
operator|->
name|setClearButtonEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|filterLineEdit
operator|->
name|isClearButtonEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Emulate filtering
name|QToolButton
modifier|*
name|clearButton
init|=
name|filterLineEdit
operator|->
name|findChild
argument_list|<
name|QToolButton
operator|*
argument_list|>
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|clearButton
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|filterModel
operator|->
name|rowCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|filterLineEdit
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|clearButton
operator|->
name|cursor
argument_list|()
operator|.
name|shape
argument_list|()
argument_list|,
name|Qt
operator|::
name|ArrowCursor
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|filterModel
operator|->
name|rowCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// matches 'aa', 'ab'
name|QTest
operator|::
name|keyClick
argument_list|(
name|filterLineEdit
argument_list|,
literal|'b'
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|filterModel
operator|->
name|rowCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// matches 'ab'
name|QSignalSpy
name|spyEdited
argument_list|(
name|filterLineEdit
argument_list|,
operator|&
name|QLineEdit
operator|::
name|textEdited
argument_list|)
decl_stmt|;
specifier|const
name|QPoint
name|clearButtonCenterPos
init|=
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|clearButton
operator|->
name|size
argument_list|()
argument_list|)
operator|.
name|center
argument_list|()
decl_stmt|;
name|QTest
operator|::
name|mouseClick
argument_list|(
name|clearButton
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|clearButtonCenterPos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyEdited
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|clearButton
operator|->
name|cursor
argument_list|()
operator|.
name|shape
argument_list|()
argument_list|,
name|filterLineEdit
operator|->
name|cursor
argument_list|()
operator|.
name|shape
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|filterModel
operator|->
name|rowCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyEdited
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|filterLineEdit
operator|->
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// QTBUG-34315
name|QVERIFY
argument_list|(
operator|!
name|clearButton
operator|->
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearButtonVisibleAfterSettingText_QTBUG_45518
name|void
name|tst_QLineEdit
operator|::
name|clearButtonVisibleAfterSettingText_QTBUG_45518
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_BUILD_INTERNAL
name|QSKIP
argument_list|(
literal|"This test requires a developer build"
argument_list|)
expr_stmt|;
else|#
directive|else
name|QLineEdit
name|edit
decl_stmt|;
name|edit
operator|.
name|setMinimumWidth
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|centerOnScreen
argument_list|(
operator|&
name|edit
argument_list|)
expr_stmt|;
name|QLineEditIconButton
modifier|*
name|clearButton
decl_stmt|;
name|clearButton
operator|=
name|edit
operator|.
name|findChild
argument_list|<
name|QLineEditIconButton
operator|*
argument_list|>
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|clearButton
argument_list|)
expr_stmt|;
name|edit
operator|.
name|setText
argument_list|(
name|QStringLiteral
argument_list|(
literal|"some text"
argument_list|)
argument_list|)
expr_stmt|;
name|edit
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowActive
argument_list|(
operator|&
name|edit
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|edit
operator|.
name|isClearButtonEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|clearButton
operator|=
name|edit
operator|.
name|findChild
argument_list|<
name|QLineEditIconButton
operator|*
argument_list|>
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|clearButton
argument_list|)
expr_stmt|;
name|edit
operator|.
name|setClearButtonEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|edit
operator|.
name|isClearButtonEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|clearButton
operator|=
name|edit
operator|.
name|findChild
argument_list|<
name|QLineEditIconButton
operator|*
argument_list|>
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|clearButton
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|clearButton
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|clearButton
operator|->
name|opacity
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|clearButton
operator|->
name|cursor
argument_list|()
operator|.
name|shape
argument_list|()
argument_list|,
name|Qt
operator|::
name|ArrowCursor
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseClick
argument_list|(
name|clearButton
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|clearButton
operator|->
name|rect
argument_list|()
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|edit
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|clearButton
operator|->
name|opacity
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|clearButton
operator|->
name|cursor
argument_list|()
operator|.
name|shape
argument_list|()
argument_list|,
name|clearButton
operator|->
name|parentWidget
argument_list|()
operator|->
name|cursor
argument_list|()
operator|.
name|shape
argument_list|()
argument_list|)
expr_stmt|;
name|edit
operator|.
name|setClearButtonEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|edit
operator|.
name|isClearButtonEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|clearButton
operator|=
name|edit
operator|.
name|findChild
argument_list|<
name|QLineEditIconButton
operator|*
argument_list|>
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|clearButton
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_BUILD_INTERNAL
block|}
end_function
begin_function
DECL|function|sideWidgetTestIcon
specifier|static
specifier|inline
name|QIcon
name|sideWidgetTestIcon
parameter_list|()
block|{
name|QImage
name|image
argument_list|(
name|QSize
argument_list|(
literal|20
argument_list|,
literal|20
argument_list|)
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|image
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|yellow
argument_list|)
expr_stmt|;
return|return
name|QIcon
argument_list|(
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|image
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|sideWidgets
name|void
name|tst_QLineEdit
operator|::
name|sideWidgets
parameter_list|()
block|{
name|QWidget
name|testWidget
decl_stmt|;
name|QVBoxLayout
modifier|*
name|l
init|=
operator|new
name|QVBoxLayout
argument_list|(
operator|&
name|testWidget
argument_list|)
decl_stmt|;
name|QLineEdit
modifier|*
name|lineEdit
init|=
operator|new
name|QLineEdit
argument_list|(
operator|&
name|testWidget
argument_list|)
decl_stmt|;
name|l
operator|->
name|addWidget
argument_list|(
name|lineEdit
argument_list|)
expr_stmt|;
name|l
operator|->
name|addSpacerItem
argument_list|(
operator|new
name|QSpacerItem
argument_list|(
literal|0
argument_list|,
literal|50
argument_list|,
name|QSizePolicy
operator|::
name|Ignored
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
argument_list|)
expr_stmt|;
name|QAction
modifier|*
name|iconAction
init|=
operator|new
name|QAction
argument_list|(
name|sideWidgetTestIcon
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|,
name|lineEdit
argument_list|)
decl_stmt|;
name|QWidgetAction
modifier|*
name|label1Action
init|=
operator|new
name|QWidgetAction
argument_list|(
name|lineEdit
argument_list|)
decl_stmt|;
name|label1Action
operator|->
name|setDefaultWidget
argument_list|(
operator|new
name|QLabel
argument_list|(
name|QStringLiteral
argument_list|(
literal|"l1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QWidgetAction
modifier|*
name|label2Action
init|=
operator|new
name|QWidgetAction
argument_list|(
name|lineEdit
argument_list|)
decl_stmt|;
name|label2Action
operator|->
name|setDefaultWidget
argument_list|(
operator|new
name|QLabel
argument_list|(
name|QStringLiteral
argument_list|(
literal|"l2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QWidgetAction
modifier|*
name|label3Action
init|=
operator|new
name|QWidgetAction
argument_list|(
name|lineEdit
argument_list|)
decl_stmt|;
name|label3Action
operator|->
name|setDefaultWidget
argument_list|(
operator|new
name|QLabel
argument_list|(
name|QStringLiteral
argument_list|(
literal|"l3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|lineEdit
operator|->
name|addAction
argument_list|(
name|iconAction
argument_list|,
name|QLineEdit
operator|::
name|LeadingPosition
argument_list|)
expr_stmt|;
name|lineEdit
operator|->
name|addAction
argument_list|(
name|label2Action
argument_list|,
name|QLineEdit
operator|::
name|LeadingPosition
argument_list|)
expr_stmt|;
name|lineEdit
operator|->
name|addAction
argument_list|(
name|label1Action
argument_list|,
name|QLineEdit
operator|::
name|TrailingPosition
argument_list|)
expr_stmt|;
name|lineEdit
operator|->
name|addAction
argument_list|(
name|label3Action
argument_list|,
name|QLineEdit
operator|::
name|TrailingPosition
argument_list|)
expr_stmt|;
name|testWidget
operator|.
name|move
argument_list|(
literal|300
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|testWidget
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|testWidget
argument_list|)
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QToolButton
modifier|*
name|button
decl|,
name|lineEdit
operator|->
name|findChildren
argument_list|<
name|QToolButton
operator|*
argument_list|>
argument_list|()
control|)
name|QCOMPARE
argument_list|(
name|button
operator|->
name|cursor
argument_list|()
operator|.
name|shape
argument_list|()
argument_list|,
name|Qt
operator|::
name|ArrowCursor
argument_list|)
expr_stmt|;
comment|// Arbitrarily add/remove actions, trying to detect crashes. Add QTRY_VERIFY(false) to view the result.
operator|delete
name|label3Action
expr_stmt|;
name|lineEdit
operator|->
name|removeAction
argument_list|(
name|label2Action
argument_list|)
expr_stmt|;
name|lineEdit
operator|->
name|removeAction
argument_list|(
name|iconAction
argument_list|)
expr_stmt|;
name|lineEdit
operator|->
name|removeAction
argument_list|(
name|label1Action
argument_list|)
expr_stmt|;
name|lineEdit
operator|->
name|removeAction
argument_list|(
name|iconAction
argument_list|)
expr_stmt|;
name|lineEdit
operator|->
name|removeAction
argument_list|(
name|label1Action
argument_list|)
expr_stmt|;
name|lineEdit
operator|->
name|addAction
argument_list|(
name|iconAction
argument_list|)
expr_stmt|;
name|lineEdit
operator|->
name|addAction
argument_list|(
name|iconAction
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sideWidgetsActionEvents
name|void
name|tst_QLineEdit
operator|::
name|sideWidgetsActionEvents
parameter_list|()
block|{
comment|// QTBUG-39660, verify whether action events are handled by the widget.
name|QWidget
name|testWidget
decl_stmt|;
name|QVBoxLayout
modifier|*
name|l
init|=
operator|new
name|QVBoxLayout
argument_list|(
operator|&
name|testWidget
argument_list|)
decl_stmt|;
name|QLineEdit
modifier|*
name|lineEdit
init|=
operator|new
name|QLineEdit
argument_list|(
operator|&
name|testWidget
argument_list|)
decl_stmt|;
name|l
operator|->
name|addWidget
argument_list|(
name|lineEdit
argument_list|)
expr_stmt|;
name|l
operator|->
name|addSpacerItem
argument_list|(
operator|new
name|QSpacerItem
argument_list|(
literal|0
argument_list|,
literal|50
argument_list|,
name|QSizePolicy
operator|::
name|Ignored
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
argument_list|)
expr_stmt|;
name|QAction
modifier|*
name|iconAction
init|=
name|lineEdit
operator|->
name|addAction
argument_list|(
name|sideWidgetTestIcon
argument_list|()
argument_list|,
name|QLineEdit
operator|::
name|LeadingPosition
argument_list|)
decl_stmt|;
name|testWidget
operator|.
name|move
argument_list|(
literal|300
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|testWidget
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|testWidget
argument_list|)
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|toolButton
init|=
name|Q_NULLPTR
decl_stmt|;
foreach|foreach
control|(
name|QWidget
modifier|*
name|w
decl|,
name|iconAction
operator|->
name|associatedWidgets
argument_list|()
control|)
block|{
if|if
condition|(
name|qobject_cast
argument_list|<
name|QToolButton
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
condition|)
block|{
name|toolButton
operator|=
name|w
expr_stmt|;
break|break;
block|}
block|}
name|QVERIFY
argument_list|(
name|toolButton
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|toolButton
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|toolButton
operator|->
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|iconAction
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|toolButton
operator|->
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|iconAction
operator|->
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|toolButton
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|Qt::AlignmentFlag
argument_list|)
end_macro
begin_function
DECL|function|shouldShowPlaceholderText_data
name|void
name|tst_QLineEdit
operator|::
name|shouldShowPlaceholderText_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"text"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"hasFocus"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|Qt
operator|::
name|AlignmentFlag
argument_list|>
argument_list|(
literal|"alignment"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"shouldShowPlaceholderText"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty, non-focused, left"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
operator|<<
name|Qt
operator|::
name|AlignLeft
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty, focused, left"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|AlignLeft
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"non-empty, non-focused, left"
argument_list|)
operator|<<
name|QStringLiteral
argument_list|(
literal|"Qt"
argument_list|)
operator|<<
literal|false
operator|<<
name|Qt
operator|::
name|AlignLeft
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"non-empty, focused, left"
argument_list|)
operator|<<
name|QStringLiteral
argument_list|(
literal|"Qt"
argument_list|)
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|AlignLeft
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty, non-focused, center"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
operator|<<
name|Qt
operator|::
name|AlignHCenter
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty, focused, center"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|AlignHCenter
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"non-empty, non-focused, center"
argument_list|)
operator|<<
name|QStringLiteral
argument_list|(
literal|"Qt"
argument_list|)
operator|<<
literal|false
operator|<<
name|Qt
operator|::
name|AlignHCenter
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"non-empty, focused, center"
argument_list|)
operator|<<
name|QStringLiteral
argument_list|(
literal|"Qt"
argument_list|)
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|AlignHCenter
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty, non-focused, right"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
operator|<<
name|Qt
operator|::
name|AlignRight
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty, focused, right"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|AlignRight
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"non-empty, non-focused, right"
argument_list|)
operator|<<
name|QStringLiteral
argument_list|(
literal|"Qt"
argument_list|)
operator|<<
literal|false
operator|<<
name|Qt
operator|::
name|AlignRight
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"non-empty, focused, right"
argument_list|)
operator|<<
name|QStringLiteral
argument_list|(
literal|"Qt"
argument_list|)
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|AlignRight
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|shouldShowPlaceholderText
name|void
name|tst_QLineEdit
operator|::
name|shouldShowPlaceholderText
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_BUILD_INTERNAL
name|QSKIP
argument_list|(
literal|"This test requires a developer build."
argument_list|)
expr_stmt|;
else|#
directive|else
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|hasFocus
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|Qt
operator|::
name|AlignmentFlag
argument_list|,
name|alignment
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|shouldShowPlaceholderText
argument_list|)
expr_stmt|;
name|QLineEdit
name|lineEdit
decl_stmt|;
comment|// avoid "Test input context to commit without focused object" warnings
name|lineEdit
operator|.
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasFocus
condition|)
block|{
name|lineEdit
operator|.
name|show
argument_list|()
expr_stmt|;
name|QApplicationPrivate
operator|::
name|setFocusWidget
argument_list|(
operator|&
name|lineEdit
argument_list|,
name|Qt
operator|::
name|NoFocusReason
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|lineEdit
operator|.
name|hasFocus
argument_list|()
argument_list|,
name|hasFocus
argument_list|)
expr_stmt|;
name|lineEdit
operator|.
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|lineEdit
operator|.
name|setAlignment
argument_list|(
name|alignment
argument_list|)
expr_stmt|;
name|QLineEditPrivate
modifier|*
name|priv
init|=
name|QLineEditPrivate
operator|::
name|get
argument_list|(
operator|&
name|lineEdit
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|priv
operator|->
name|shouldShowPlaceholderText
argument_list|()
argument_list|,
name|shouldShowPlaceholderText
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|QTBUG1266_setInputMaskEmittingTextEdited
name|void
name|tst_QLineEdit
operator|::
name|QTBUG1266_setInputMaskEmittingTextEdited
parameter_list|()
block|{
name|QLineEdit
name|lineEdit
decl_stmt|;
name|lineEdit
operator|.
name|setText
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|lineEdit
argument_list|,
name|SIGNAL
argument_list|(
name|textEdited
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|lineEdit
operator|.
name|setInputMask
argument_list|(
literal|"AAAA"
argument_list|)
expr_stmt|;
name|lineEdit
operator|.
name|setInputMask
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QLineEdit
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qlineedit.moc"
end_include
end_unit
