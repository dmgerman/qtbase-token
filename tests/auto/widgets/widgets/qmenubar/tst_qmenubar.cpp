begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qmainwindow.h>
end_include
begin_include
include|#
directive|include
file|<qmenubar.h>
end_include
begin_include
include|#
directive|include
file|<qstyle.h>
end_include
begin_include
include|#
directive|include
file|<qwindowsstyle.h>
end_include
begin_include
include|#
directive|include
file|<qdesktopwidget.h>
end_include
begin_include
include|#
directive|include
file|<qaction.h>
end_include
begin_include
include|#
directive|include
file|<qstyleoption.h>
end_include
begin_include
include|#
directive|include
file|<qobject.h>
end_include
begin_macro
name|QT_FORWARD_DECLARE_CLASS
argument_list|(
argument|QMainWindow
argument_list|)
end_macro
begin_include
include|#
directive|include
file|<qmenubar.h>
end_include
begin_class
DECL|class|QtTestSlot
class|class
name|QtTestSlot
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|QtTestSlot
name|QtTestSlot
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|{
name|clear
argument_list|()
expr_stmt|;
block|}
empty_stmt|;
DECL|function|~QtTestSlot
specifier|virtual
name|~
name|QtTestSlot
parameter_list|()
block|{}
empty_stmt|;
DECL|function|clear
name|void
name|clear
parameter_list|()
block|{
name|sel_count
operator|=
literal|0
expr_stmt|;
block|}
empty_stmt|;
DECL|function|selCount
name|uint
name|selCount
parameter_list|()
block|{
return|return
name|sel_count
return|;
block|}
empty_stmt|;
public|public
name|slots
public|:
DECL|function|selected
name|void
name|selected
parameter_list|()
block|{
name|sel_count
operator|++
expr_stmt|;
block|}
empty_stmt|;
private|private:
DECL|member|sel_count
name|uint
name|sel_count
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|Menu
class|class
name|Menu
super|:
specifier|public
name|QMenu
block|{
name|Q_OBJECT
public|public
name|slots
public|:
DECL|function|addActions
name|void
name|addActions
parameter_list|()
block|{
comment|//this will change the geometry of the menu
name|addAction
argument_list|(
literal|"action1"
argument_list|)
expr_stmt|;
name|addAction
argument_list|(
literal|"action2"
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|tst_QMenuBar
class|class
name|tst_QMenuBar
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QMenuBar
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QMenuBar
parameter_list|()
destructor_decl|;
name|void
name|initSimpleMenubar
parameter_list|()
function_decl|;
name|void
name|initComplexMenubar
parameter_list|()
function_decl|;
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|clear
parameter_list|()
function_decl|;
name|void
name|removeItemAt
parameter_list|()
function_decl|;
name|void
name|removeItemAt_data
parameter_list|()
function_decl|;
name|void
name|removeItem_data
parameter_list|()
function_decl|;
name|void
name|removeItem
parameter_list|()
function_decl|;
name|void
name|count
parameter_list|()
function_decl|;
name|void
name|insertItem_QString_QObject
parameter_list|()
function_decl|;
name|void
name|accel
parameter_list|()
function_decl|;
name|void
name|activatedCount
parameter_list|()
function_decl|;
name|void
name|allowActiveAndDisabled
parameter_list|()
function_decl|;
name|void
name|check_accelKeys
parameter_list|()
function_decl|;
name|void
name|check_cursorKeys1
parameter_list|()
function_decl|;
name|void
name|check_cursorKeys2
parameter_list|()
function_decl|;
name|void
name|check_cursorKeys3
parameter_list|()
function_decl|;
name|void
name|check_homeKey
parameter_list|()
function_decl|;
name|void
name|check_endKey
parameter_list|()
function_decl|;
name|void
name|check_escKey
parameter_list|()
function_decl|;
comment|//     void check_mouse1_data();
comment|//     void check_mouse1();
comment|//     void check_mouse2_data();
comment|//     void check_mouse2();
name|void
name|check_altPress
parameter_list|()
function_decl|;
name|void
name|check_shortcutPress
parameter_list|()
function_decl|;
name|void
name|check_menuPosition
parameter_list|()
function_decl|;
name|void
name|task223138_triggered
parameter_list|()
function_decl|;
name|void
name|task256322_highlight
parameter_list|()
function_decl|;
name|void
name|menubarSizeHint
parameter_list|()
function_decl|;
name|void
name|taskQTBUG4965_escapeEaten
parameter_list|()
function_decl|;
name|void
name|taskQTBUG11823_crashwithInvisibleActions
parameter_list|()
function_decl|;
protected|protected
name|slots
protected|:
name|void
name|onActivated
parameter_list|(
name|QAction
modifier|*
parameter_list|)
function_decl|;
private|private:
DECL|member|menu1
name|QtTestSlot
modifier|*
name|menu1
decl_stmt|;
DECL|member|menu2
name|QtTestSlot
modifier|*
name|menu2
decl_stmt|;
DECL|member|menu3
name|QtTestSlot
modifier|*
name|menu3
decl_stmt|;
DECL|member|menu4
name|QtTestSlot
modifier|*
name|menu4
decl_stmt|;
DECL|member|item1_A
name|QtTestSlot
modifier|*
name|item1_A
decl_stmt|;
DECL|member|item1_B
name|QtTestSlot
modifier|*
name|item1_B
decl_stmt|;
DECL|member|item2_C
name|QtTestSlot
modifier|*
name|item2_C
decl_stmt|;
DECL|member|item2_D
name|QtTestSlot
modifier|*
name|item2_D
decl_stmt|;
DECL|member|item2_E
name|QtTestSlot
modifier|*
name|item2_E
decl_stmt|;
DECL|member|item2_F
name|QtTestSlot
modifier|*
name|item2_F
decl_stmt|;
DECL|member|item2_G
name|QtTestSlot
modifier|*
name|item2_G
decl_stmt|;
DECL|member|item2_H
name|QtTestSlot
modifier|*
name|item2_H
decl_stmt|;
name|void
name|resetSlots
parameter_list|()
function_decl|;
name|void
name|resetCount
parameter_list|()
function_decl|;
DECL|function|reset
name|void
name|reset
parameter_list|()
block|{
name|resetSlots
argument_list|()
expr_stmt|;
name|resetCount
argument_list|()
expr_stmt|;
block|}
empty_stmt|;
DECL|member|last_accel_id
name|QAction
modifier|*
name|last_accel_id
decl_stmt|;
DECL|member|activated_count
name|int
name|activated_count
decl_stmt|;
DECL|member|action
name|QAction
modifier|*
name|action
decl_stmt|;
DECL|member|action1
name|QAction
modifier|*
name|action1
decl_stmt|;
DECL|member|mw
name|QMainWindow
modifier|*
name|mw
decl_stmt|;
DECL|member|mb
name|QMenuBar
modifier|*
name|mb
decl_stmt|;
DECL|member|pm1
name|QMenu
modifier|*
name|pm1
decl_stmt|;
DECL|member|pm2
name|QMenu
modifier|*
name|pm2
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QMenuBar
operator|::
name|getSetCheck
parameter_list|()
block|{
name|QMenuBar
name|obj1
decl_stmt|;
comment|// QAction * QMenuBar::activeAction()
comment|// void QMenuBar::setActiveAction(QAction *)
name|QAction
modifier|*
name|var1
init|=
operator|new
name|QAction
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|obj1
operator|.
name|setActiveAction
argument_list|(
name|var1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|var1
argument_list|,
name|obj1
operator|.
name|activeAction
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setActiveAction
argument_list|(
operator|(
name|QAction
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|QAction
operator|*
operator|)
literal|0
argument_list|,
name|obj1
operator|.
name|activeAction
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|var1
expr_stmt|;
block|}
end_function
begin_include
include|#
directive|include
file|<qcursor.h>
end_include
begin_decl_stmt
DECL|variable|RESET
specifier|const
name|int
name|RESET
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*!     Test plan:         insertItem (all flavors and combinations) 	removing menu items 	clearing the menu  	check the common behaviour + emitted signals for: 	    accelerator keys 	    navigating tru the menu and then pressing ENTER 	    mouse clicks 	    mouse drags 	    combinations of key + mouse (if possible) 	    checked / unckecked state of menu options 	    active / inactive state      Can't test these without pixmap comparison... 	show and hide 	icons in a menu 	pixmaps in a menu  */
end_comment
begin_constructor
DECL|function|tst_QMenuBar
name|tst_QMenuBar
operator|::
name|tst_QMenuBar
parameter_list|()
block|{
name|QApplication
operator|::
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_AnimateMenu
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|activated_count
operator|=
literal|0
expr_stmt|;
name|mb
operator|=
literal|0
expr_stmt|;
name|pm1
operator|=
literal|0
expr_stmt|;
name|pm2
operator|=
literal|0
expr_stmt|;
name|last_accel_id
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~tst_QMenuBar
name|tst_QMenuBar
operator|::
name|~
name|tst_QMenuBar
parameter_list|()
block|{
comment|//delete mw; //#### cannot do that AFTER qapplication was destroyed!
name|mw
operator|=
literal|0
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|initTestCase
name|void
name|tst_QMenuBar
operator|::
name|initTestCase
parameter_list|()
block|{
comment|// create a default mainwindow
comment|// If you run a widget test, this will be replaced in the testcase by the
comment|// widget under test
name|mw
operator|=
operator|new
name|QMainWindow
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|X11BypassWindowManagerHint
argument_list|)
expr_stmt|;
name|mb
operator|=
operator|new
name|QMenuBar
argument_list|(
name|mw
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|mb
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|onActivated
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|initSimpleMenubar
argument_list|()
expr_stmt|;
name|mw
operator|->
name|show
argument_list|()
expr_stmt|;
name|mw
operator|->
name|activateWindow
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowActive
argument_list|(
name|mw
argument_list|)
argument_list|)
expr_stmt|;
name|menu1
operator|=
operator|new
name|QtTestSlot
argument_list|(
name|mw
argument_list|)
expr_stmt|;
name|menu2
operator|=
operator|new
name|QtTestSlot
argument_list|(
name|mw
argument_list|)
expr_stmt|;
name|menu3
operator|=
operator|new
name|QtTestSlot
argument_list|(
name|mw
argument_list|)
expr_stmt|;
name|menu4
operator|=
operator|new
name|QtTestSlot
argument_list|(
name|mw
argument_list|)
expr_stmt|;
name|item1_A
operator|=
operator|new
name|QtTestSlot
argument_list|(
name|mw
argument_list|)
expr_stmt|;
name|item1_B
operator|=
operator|new
name|QtTestSlot
argument_list|(
name|mw
argument_list|)
expr_stmt|;
name|item2_C
operator|=
operator|new
name|QtTestSlot
argument_list|(
name|mw
argument_list|)
expr_stmt|;
name|item2_D
operator|=
operator|new
name|QtTestSlot
argument_list|(
name|mw
argument_list|)
expr_stmt|;
name|item2_E
operator|=
operator|new
name|QtTestSlot
argument_list|(
name|mw
argument_list|)
expr_stmt|;
name|item2_F
operator|=
operator|new
name|QtTestSlot
argument_list|(
name|mw
argument_list|)
expr_stmt|;
name|item2_G
operator|=
operator|new
name|QtTestSlot
argument_list|(
name|mw
argument_list|)
expr_stmt|;
name|item2_H
operator|=
operator|new
name|QtTestSlot
argument_list|(
name|mw
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QMenuBar
operator|::
name|cleanupTestCase
parameter_list|()
block|{
operator|delete
name|mw
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initSimpleMenubar
name|void
name|tst_QMenuBar
operator|::
name|initSimpleMenubar
parameter_list|()
block|{
name|mb
operator|->
name|hide
argument_list|()
expr_stmt|;
name|mb
operator|->
name|clear
argument_list|()
expr_stmt|;
operator|delete
name|pm1
expr_stmt|;
name|pm1
operator|=
name|mb
operator|->
name|addMenu
argument_list|(
literal|"&accel"
argument_list|)
expr_stmt|;
name|action
operator|=
name|pm1
operator|->
name|addAction
argument_list|(
literal|"menu1"
argument_list|)
expr_stmt|;
name|action
operator|->
name|setShortcut
argument_list|(
name|QKeySequence
argument_list|(
literal|"ALT+A"
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|->
name|setShortcut
argument_list|(
name|QKeySequence
argument_list|(
literal|"CTRL+A"
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|pm1
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|onActivated
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|pm2
expr_stmt|;
name|pm2
operator|=
name|mb
operator|->
name|addMenu
argument_list|(
literal|"accel1"
argument_list|)
expr_stmt|;
name|action1
operator|=
name|pm2
operator|->
name|addAction
argument_list|(
literal|"&Open..."
argument_list|)
expr_stmt|;
name|action1
operator|->
name|setShortcut
argument_list|(
name|Qt
operator|::
name|Key_O
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|pm2
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|onActivated
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mb
operator|->
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|syncX
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_QMenuBar
operator|::
name|init
parameter_list|()
block|{
name|resetSlots
argument_list|()
expr_stmt|;
name|resetCount
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resetSlots
name|void
name|tst_QMenuBar
operator|::
name|resetSlots
parameter_list|()
block|{
name|menu1
operator|->
name|clear
argument_list|()
expr_stmt|;
name|menu2
operator|->
name|clear
argument_list|()
expr_stmt|;
name|menu3
operator|->
name|clear
argument_list|()
expr_stmt|;
name|menu4
operator|->
name|clear
argument_list|()
expr_stmt|;
name|item1_A
operator|->
name|clear
argument_list|()
expr_stmt|;
name|item1_B
operator|->
name|clear
argument_list|()
expr_stmt|;
name|item2_C
operator|->
name|clear
argument_list|()
expr_stmt|;
name|item2_D
operator|->
name|clear
argument_list|()
expr_stmt|;
name|item2_E
operator|->
name|clear
argument_list|()
expr_stmt|;
name|item2_F
operator|->
name|clear
argument_list|()
expr_stmt|;
name|item2_G
operator|->
name|clear
argument_list|()
expr_stmt|;
name|item2_H
operator|->
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resetCount
name|void
name|tst_QMenuBar
operator|::
name|resetCount
parameter_list|()
block|{
name|last_accel_id
operator|=
literal|0
expr_stmt|;
name|activated_count
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|onActivated
name|void
name|tst_QMenuBar
operator|::
name|onActivated
parameter_list|(
name|QAction
modifier|*
name|action
parameter_list|)
block|{
name|last_accel_id
operator|=
name|action
expr_stmt|;
name|activated_count
operator|++
expr_stmt|;
comment|//     printf( QString("acceleratorId: %1, count: %1\n").arg( i ).arg(activated_count) );
block|}
end_function
begin_function
DECL|function|accel
name|void
name|tst_QMenuBar
operator|::
name|accel
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WINCE_WM
argument_list|)
name|QSKIP
argument_list|(
literal|"On Mac/WinCE, native key events are needed to test menu action activation"
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// create a popup menu with menu items set the accelerators later...
name|initSimpleMenubar
argument_list|()
expr_stmt|;
comment|// shortcuts won't work unless the window is active
name|QTRY_VERIFY
argument_list|(
name|QApplication
operator|::
name|activeWindow
argument_list|()
argument_list|)
expr_stmt|;
comment|//    QTest::keyClick(static_cast<QWidget *>(0), Qt::Key_A, AltKey );
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|300
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|last_accel_id
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|activatedCount
name|void
name|tst_QMenuBar
operator|::
name|activatedCount
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WINCE_WM
argument_list|)
name|QSKIP
argument_list|(
literal|"On Mac/WinCE, native key events are needed to test menu action activation"
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// create a popup menu with menu items set the accelerators later...
name|initSimpleMenubar
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
comment|//wait(5000);
name|QCOMPARE
argument_list|(
name|activated_count
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|//1 from the popupmenu and 1 from the menubar
block|}
end_function
begin_function
DECL|function|clear
name|void
name|tst_QMenuBar
operator|::
name|clear
parameter_list|()
block|{
name|mb
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|uint
operator|)
name|mb
operator|->
name|actions
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|mb
operator|->
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|uint
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|QMenu
modifier|*
name|menu
init|=
name|mb
operator|->
name|addMenu
argument_list|(
name|QString
argument_list|(
literal|"Menu %1"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|uint
name|k
init|=
literal|0
init|;
name|k
operator|<
name|i
condition|;
name|k
operator|++
control|)
name|menu
operator|->
name|addAction
argument_list|(
name|QString
argument_list|(
literal|"Item %1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|uint
operator|)
name|mb
operator|->
name|actions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
operator|(
name|uint
operator|)
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
operator|(
name|uint
operator|)
name|mb
operator|->
name|actions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|10u
argument_list|)
expr_stmt|;
name|mb
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|uint
operator|)
name|mb
operator|->
name|actions
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|count
name|void
name|tst_QMenuBar
operator|::
name|count
parameter_list|()
block|{
name|mb
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|mb
operator|->
name|actions
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|uint
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|mb
operator|->
name|addAction
argument_list|(
name|QString
argument_list|(
literal|"Menu %1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|uint
operator|)
name|mb
operator|->
name|actions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
operator|(
name|uint
operator|)
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|removeItem_data
name|void
name|tst_QMenuBar
operator|::
name|removeItem_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"removeIndex"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"first"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"middle"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"last"
argument_list|)
operator|<<
literal|2
expr_stmt|;
block|}
end_function
begin_comment
comment|// Basically the same test as removeItemAt, except that we remember and remove id's.
end_comment
begin_function
DECL|function|removeItem
name|void
name|tst_QMenuBar
operator|::
name|removeItem
parameter_list|()
block|{
name|mb
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QMenu
modifier|*
name|pm
decl_stmt|;
name|pm
operator|=
operator|new
name|QMenu
argument_list|(
literal|"stuff"
argument_list|,
name|mb
argument_list|)
expr_stmt|;
name|pm
operator|->
name|setTitle
argument_list|(
literal|"Menu 1"
argument_list|)
expr_stmt|;
name|pm
operator|->
name|addAction
argument_list|(
name|QString
argument_list|(
literal|"Item 10"
argument_list|)
argument_list|)
expr_stmt|;
name|QAction
modifier|*
name|action1
init|=
name|mb
operator|->
name|addMenu
argument_list|(
name|pm
argument_list|)
decl_stmt|;
name|pm
operator|=
operator|new
name|QMenu
argument_list|(
name|mb
argument_list|)
expr_stmt|;
name|pm
operator|->
name|setTitle
argument_list|(
literal|"Menu 2"
argument_list|)
expr_stmt|;
name|pm
operator|->
name|addAction
argument_list|(
name|QString
argument_list|(
literal|"Item 20"
argument_list|)
argument_list|)
expr_stmt|;
name|pm
operator|->
name|addAction
argument_list|(
name|QString
argument_list|(
literal|"Item 21"
argument_list|)
argument_list|)
expr_stmt|;
name|QAction
modifier|*
name|action2
init|=
name|mb
operator|->
name|addMenu
argument_list|(
name|pm
argument_list|)
decl_stmt|;
name|pm
operator|=
operator|new
name|QMenu
argument_list|(
literal|"Menu 3"
argument_list|,
name|mb
argument_list|)
expr_stmt|;
name|pm
operator|->
name|addAction
argument_list|(
name|QString
argument_list|(
literal|"Item 30"
argument_list|)
argument_list|)
expr_stmt|;
name|pm
operator|->
name|addAction
argument_list|(
name|QString
argument_list|(
literal|"Item 31"
argument_list|)
argument_list|)
expr_stmt|;
name|pm
operator|->
name|addAction
argument_list|(
name|QString
argument_list|(
literal|"Item 32"
argument_list|)
argument_list|)
expr_stmt|;
name|QAction
modifier|*
name|action3
init|=
name|mb
operator|->
name|addMenu
argument_list|(
name|pm
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QAction
modifier|*
argument_list|>
name|menuBarActions
init|=
name|mb
operator|->
name|actions
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|action1
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Menu 1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|action2
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Menu 2"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|action3
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Menu 3"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|menuBarActions
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|action1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|menuBarActions
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|==
name|action2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|menuBarActions
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|==
name|action3
argument_list|)
expr_stmt|;
comment|// Ok, now that we know we have created the menu we expect, lets remove an item...
name|QFETCH
argument_list|(
name|int
argument_list|,
name|removeIndex
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|removeIndex
condition|)
block|{
case|case
literal|0
case|:
block|{
name|mb
operator|->
name|removeAction
argument_list|(
name|action1
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QAction
modifier|*
argument_list|>
name|menuBarActions2
init|=
name|mb
operator|->
name|actions
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|menuBarActions2
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Menu 2"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menuBarActions2
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Menu 3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
block|{
name|mb
operator|->
name|removeAction
argument_list|(
name|action2
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QAction
modifier|*
argument_list|>
name|menuBarActions2
init|=
name|mb
operator|->
name|actions
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|menuBarActions2
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Menu 1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menuBarActions2
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Menu 3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
block|{
name|mb
operator|->
name|removeAction
argument_list|(
name|action3
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QAction
modifier|*
argument_list|>
name|menuBarActions2
init|=
name|mb
operator|->
name|actions
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|menuBarActions2
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Menu 1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menuBarActions2
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Menu 2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|QList
argument_list|<
name|QAction
modifier|*
argument_list|>
name|menuBarActions2
init|=
name|mb
operator|->
name|actions
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|menuBarActions2
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeItemAt_data
name|void
name|tst_QMenuBar
operator|::
name|removeItemAt_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"removeIndex"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"first"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"middle"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"last"
argument_list|)
operator|<<
literal|2
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeItemAt
name|void
name|tst_QMenuBar
operator|::
name|removeItemAt
parameter_list|()
block|{
name|mb
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QMenu
modifier|*
name|pm
decl_stmt|;
name|pm
operator|=
operator|new
name|QMenu
argument_list|(
literal|"Menu 1"
argument_list|,
name|mb
argument_list|)
expr_stmt|;
name|pm
operator|->
name|addAction
argument_list|(
name|QString
argument_list|(
literal|"Item 10"
argument_list|)
argument_list|)
expr_stmt|;
name|mb
operator|->
name|addMenu
argument_list|(
name|pm
argument_list|)
expr_stmt|;
name|pm
operator|=
operator|new
name|QMenu
argument_list|(
literal|"Menu 2"
argument_list|,
name|mb
argument_list|)
expr_stmt|;
name|pm
operator|->
name|addAction
argument_list|(
name|QString
argument_list|(
literal|"Item 20"
argument_list|)
argument_list|)
expr_stmt|;
name|pm
operator|->
name|addAction
argument_list|(
name|QString
argument_list|(
literal|"Item 21"
argument_list|)
argument_list|)
expr_stmt|;
name|mb
operator|->
name|addMenu
argument_list|(
name|pm
argument_list|)
expr_stmt|;
name|pm
operator|=
operator|new
name|QMenu
argument_list|(
literal|"Menu 3"
argument_list|,
name|mb
argument_list|)
expr_stmt|;
name|pm
operator|->
name|addAction
argument_list|(
name|QString
argument_list|(
literal|"Item 30"
argument_list|)
argument_list|)
expr_stmt|;
name|pm
operator|->
name|addAction
argument_list|(
name|QString
argument_list|(
literal|"Item 31"
argument_list|)
argument_list|)
expr_stmt|;
name|pm
operator|->
name|addAction
argument_list|(
name|QString
argument_list|(
literal|"Item 32"
argument_list|)
argument_list|)
expr_stmt|;
name|mb
operator|->
name|addMenu
argument_list|(
name|pm
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QAction
modifier|*
argument_list|>
name|menuBarActions
init|=
name|mb
operator|->
name|actions
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|menuBarActions
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Menu 1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menuBarActions
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Menu 2"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menuBarActions
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Menu 3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ok, now that we know we have created the menu we expect, lets remove an item...
name|QFETCH
argument_list|(
name|int
argument_list|,
name|removeIndex
argument_list|)
expr_stmt|;
name|mb
operator|->
name|removeAction
argument_list|(
name|menuBarActions
operator|.
name|at
argument_list|(
name|removeIndex
argument_list|)
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QAction
modifier|*
argument_list|>
name|menuBarActions2
init|=
name|mb
operator|->
name|actions
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|removeIndex
condition|)
block|{
case|case
literal|0
case|:
name|QCOMPARE
argument_list|(
name|menuBarActions2
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Menu 2"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menuBarActions2
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Menu 3"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|QCOMPARE
argument_list|(
name|menuBarActions2
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Menu 1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menuBarActions2
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Menu 3"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|QCOMPARE
argument_list|(
name|menuBarActions2
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Menu 1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menuBarActions2
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Menu 2"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
name|QVERIFY
argument_list|(
name|menuBarActions2
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initComplexMenubar
name|void
name|tst_QMenuBar
operator|::
name|initComplexMenubar
parameter_list|()
comment|// well, complex....
block|{
name|mb
operator|->
name|hide
argument_list|()
expr_stmt|;
name|mb
operator|->
name|clear
argument_list|()
expr_stmt|;
operator|delete
name|pm1
expr_stmt|;
name|pm1
operator|=
name|mb
operator|->
name|addMenu
argument_list|(
literal|"Menu&1"
argument_list|)
expr_stmt|;
name|pm1
operator|->
name|addAction
argument_list|(
name|QString
argument_list|(
literal|"Item A"
argument_list|)
argument_list|,
name|item1_A
argument_list|,
name|SLOT
argument_list|(
name|selected
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|pm1
operator|->
name|addAction
argument_list|(
name|QString
argument_list|(
literal|"Item B"
argument_list|)
argument_list|,
name|item1_B
argument_list|,
name|SLOT
argument_list|(
name|selected
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_B
argument_list|)
expr_stmt|;
operator|delete
name|pm2
expr_stmt|;
name|pm2
operator|=
name|mb
operator|->
name|addMenu
argument_list|(
literal|"Menu&2"
argument_list|)
expr_stmt|;
name|pm2
operator|->
name|addAction
argument_list|(
name|QString
argument_list|(
literal|"Item C"
argument_list|)
argument_list|,
name|item2_C
argument_list|,
name|SLOT
argument_list|(
name|selected
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_C
argument_list|)
expr_stmt|;
name|pm2
operator|->
name|addAction
argument_list|(
name|QString
argument_list|(
literal|"Item D"
argument_list|)
argument_list|,
name|item2_D
argument_list|,
name|SLOT
argument_list|(
name|selected
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_D
argument_list|)
expr_stmt|;
name|pm2
operator|->
name|addAction
argument_list|(
name|QString
argument_list|(
literal|"Item E"
argument_list|)
argument_list|,
name|item2_E
argument_list|,
name|SLOT
argument_list|(
name|selected
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_E
argument_list|)
expr_stmt|;
name|pm2
operator|->
name|addAction
argument_list|(
name|QString
argument_list|(
literal|"Item F"
argument_list|)
argument_list|,
name|item2_F
argument_list|,
name|SLOT
argument_list|(
name|selected
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_F
argument_list|)
expr_stmt|;
name|pm2
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
name|pm2
operator|->
name|addAction
argument_list|(
name|QString
argument_list|(
literal|"Item G"
argument_list|)
argument_list|,
name|item2_G
argument_list|,
name|SLOT
argument_list|(
name|selected
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_G
argument_list|)
expr_stmt|;
name|pm2
operator|->
name|addAction
argument_list|(
name|QString
argument_list|(
literal|"Item H"
argument_list|)
argument_list|,
name|item2_H
argument_list|,
name|SLOT
argument_list|(
name|selected
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_H
argument_list|)
expr_stmt|;
name|QAction
modifier|*
name|ac
init|=
name|mb
operator|->
name|addAction
argument_list|(
name|QString
argument_list|(
literal|"M&enu 3"
argument_list|)
argument_list|,
name|menu3
argument_list|,
name|SLOT
argument_list|(
name|selected
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ac
operator|->
name|setShortcut
argument_list|(
name|Qt
operator|::
name|ALT
operator|+
name|Qt
operator|::
name|Key_J
argument_list|)
expr_stmt|;
name|mb
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Check the insert functions that create menu items.     For the moment i only check the strings and pixmaps. The rest are special cases which are     used less frequently. */
end_comment
begin_function
DECL|function|insertItem_QString_QObject
name|void
name|tst_QMenuBar
operator|::
name|insertItem_QString_QObject
parameter_list|()
block|{
name|initComplexMenubar
argument_list|()
expr_stmt|;
name|QList
argument_list|<
name|QAction
modifier|*
argument_list|>
name|actions
init|=
name|mb
operator|->
name|actions
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|actions
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Menu&1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|actions
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Menu&2"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|actions
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"M&enu 3"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|actions
operator|.
name|size
argument_list|()
operator|<
literal|4
argument_list|)
expr_stmt|;
comment|// there is no menu 4!
block|}
end_function
begin_function
DECL|function|check_accelKeys
name|void
name|tst_QMenuBar
operator|::
name|check_accelKeys
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WINCE_WM
argument_list|)
name|QSKIP
argument_list|(
literal|"On Mac/WinCE, native key events are needed to test menu action activation"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|initComplexMenubar
argument_list|()
expr_stmt|;
comment|// start with a bogus key that shouldn't trigger anything
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_I
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu1
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu2
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu3
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu4
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item1_A
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item1_B
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item2_C
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item2_D
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu1
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu2
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu3
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu4
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item1_A
operator|->
name|selCount
argument_list|()
argument_list|,
literal|1u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item1_B
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item2_C
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item2_D
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_C
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu1
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu2
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu3
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu4
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item1_A
operator|->
name|selCount
argument_list|()
argument_list|,
literal|1u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item1_B
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item2_C
operator|->
name|selCount
argument_list|()
argument_list|,
literal|1u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item2_D
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_B
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu1
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu2
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu3
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu4
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item1_A
operator|->
name|selCount
argument_list|()
argument_list|,
literal|1u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item1_B
operator|->
name|selCount
argument_list|()
argument_list|,
literal|1u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item2_C
operator|->
name|selCount
argument_list|()
argument_list|,
literal|1u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item2_D
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_D
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu1
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu2
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu3
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu4
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item1_A
operator|->
name|selCount
argument_list|()
argument_list|,
literal|1u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item1_B
operator|->
name|selCount
argument_list|()
argument_list|,
literal|1u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item2_C
operator|->
name|selCount
argument_list|()
argument_list|,
literal|1u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item2_D
operator|->
name|selCount
argument_list|()
argument_list|,
literal|1u
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_J
argument_list|,
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu1
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu2
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu3
operator|->
name|selCount
argument_list|()
argument_list|,
literal|1u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu4
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item1_A
operator|->
name|selCount
argument_list|()
argument_list|,
literal|1u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item1_B
operator|->
name|selCount
argument_list|()
argument_list|,
literal|1u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item2_C
operator|->
name|selCount
argument_list|()
argument_list|,
literal|1u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item2_D
operator|->
name|selCount
argument_list|()
argument_list|,
literal|1u
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|check_cursorKeys1
name|void
name|tst_QMenuBar
operator|::
name|check_cursorKeys1
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WINCE_WM
argument_list|)
name|QSKIP
argument_list|(
literal|"Qt/Mac,WinCE does not use the native popups/menubar"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|initComplexMenubar
argument_list|()
expr_stmt|;
comment|// start with a ALT + 1 that activates the first popupmenu
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_1
argument_list|,
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
comment|// the Popupmenu should be visible now
name|QCOMPARE
argument_list|(
name|menu3
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu4
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item1_A
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item1_B
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item2_C
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item2_D
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
comment|// Simulate a cursor key down click
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
comment|// and an Enter key
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
comment|// Let's see if the correct slot is called...
name|QCOMPARE
argument_list|(
name|menu3
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu4
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item1_A
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
comment|// this shouldn't have been called
name|QCOMPARE
argument_list|(
name|item1_B
operator|->
name|selCount
argument_list|()
argument_list|,
literal|1u
argument_list|)
expr_stmt|;
comment|// and this should have been called by a signal now
name|QCOMPARE
argument_list|(
name|item2_C
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item2_D
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|check_cursorKeys2
name|void
name|tst_QMenuBar
operator|::
name|check_cursorKeys2
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WINCE_WM
argument_list|)
name|QSKIP
argument_list|(
literal|"Qt/Mac,WinCE does not use the native popups/menubar"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|initComplexMenubar
argument_list|()
expr_stmt|;
comment|// select popupmenu2
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_2
argument_list|,
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
comment|// Simulate some cursor keys
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_Right
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
comment|// and an Enter key
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
comment|// Let's see if the correct slot is called...
name|QCOMPARE
argument_list|(
name|menu3
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu4
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item1_A
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
comment|// this shouldn't have been caled
name|QCOMPARE
argument_list|(
name|item1_B
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
comment|// and this should have been called by a signal ow
name|QCOMPARE
argument_list|(
name|item2_C
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item2_D
operator|->
name|selCount
argument_list|()
argument_list|,
literal|1u
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     If a popupmenu is active you can use Left to move to the menu to the left of it. */
end_comment
begin_function
DECL|function|check_cursorKeys3
name|void
name|tst_QMenuBar
operator|::
name|check_cursorKeys3
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WINCE_WM
argument_list|)
name|QSKIP
argument_list|(
literal|"Qt/Mac,WinCE does not use the native popups/menubar"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|initComplexMenubar
argument_list|()
expr_stmt|;
comment|// select Popupmenu 2
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_2
argument_list|,
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
comment|// Simulate some keys
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
comment|// and press ENTER
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
comment|// Let's see if the correct slot is called...
name|QCOMPARE
argument_list|(
name|menu3
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu4
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item1_A
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
comment|// this shouldn't have been called
name|QCOMPARE
argument_list|(
name|item1_B
operator|->
name|selCount
argument_list|()
argument_list|,
literal|1u
argument_list|)
expr_stmt|;
comment|// and this should have been called by a signal now
name|QCOMPARE
argument_list|(
name|item2_C
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item2_D
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     If a popupmenu is active you can use home to go quickly to the first item in the menu. */
end_comment
begin_function
DECL|function|check_homeKey
name|void
name|tst_QMenuBar
operator|::
name|check_homeKey
parameter_list|()
block|{
comment|// I'm temporarily shutting up this testcase.
comment|// Seems like the behaviour i'm expecting isn't ok.
name|QVERIFY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
name|QEXPECT_FAIL
argument_list|(
literal|"0"
argument_list|,
literal|"Popupmenu should respond to a Home key"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
name|initComplexMenubar
argument_list|()
expr_stmt|;
comment|// select Popupmenu 2
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_2
argument_list|,
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
comment|// Simulate some keys
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_Home
argument_list|)
expr_stmt|;
comment|// and press ENTER
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
comment|// Let's see if the correct slot is called...
comment|//    QVERIFY2( item2_C->selCount() == 1, "Popupmenu should respond to a Home key" );
name|QCOMPARE
argument_list|(
name|item2_C
operator|->
name|selCount
argument_list|()
argument_list|,
literal|1u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu3
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu4
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item1_A
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item1_B
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item2_D
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item2_E
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item2_F
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item2_G
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item2_H
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     If a popupmenu is active you can use end to go quickly to the last item in the menu. */
end_comment
begin_function
DECL|function|check_endKey
name|void
name|tst_QMenuBar
operator|::
name|check_endKey
parameter_list|()
block|{
comment|// I'm temporarily silenting this testcase.
comment|// Seems like the behaviour i'm expecting isn't ok.
name|QVERIFY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
name|QEXPECT_FAIL
argument_list|(
literal|"0"
argument_list|,
literal|"Popupmenu should respond to an End key"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
name|initComplexMenubar
argument_list|()
expr_stmt|;
comment|// select Popupmenu 2
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_2
argument_list|,
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
comment|// Simulate some keys
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_End
argument_list|)
expr_stmt|;
comment|// and press ENTER
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
comment|// Let's see if the correct slot is called...
comment|//    QVERIFY2( item2_H->selCount() == 1, "Popupmenu should respond to an End key" );
name|QCOMPARE
argument_list|(
name|item2_H
operator|->
name|selCount
argument_list|()
argument_list|,
literal|1u
argument_list|)
expr_stmt|;
comment|//, "Popupmenu should respond to an End key");
name|QCOMPARE
argument_list|(
name|menu3
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu4
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item1_A
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item1_B
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item2_C
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item2_D
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item2_E
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item2_F
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item2_G
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     If a popupmenu is active you can use esc to hide the menu and then the     menubar should become active.     If Down is pressed next the popup is activated again. */
end_comment
begin_function
DECL|function|check_escKey
name|void
name|tst_QMenuBar
operator|::
name|check_escKey
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WINCE_WM
argument_list|)
name|QSKIP
argument_list|(
literal|"Qt/Mac,WinCE does not use the native popups/menubar"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|initComplexMenubar
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|pm1
operator|->
name|isActiveWindow
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|pm2
operator|->
name|isActiveWindow
argument_list|()
argument_list|)
expr_stmt|;
comment|// select Popupmenu 2
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_2
argument_list|,
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|pm1
operator|->
name|isActiveWindow
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|pm2
operator|->
name|isActiveWindow
argument_list|()
argument_list|)
expr_stmt|;
comment|// If we press ESC, the popup should disappear
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_Escape
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|pm1
operator|->
name|isActiveWindow
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|pm2
operator|->
name|isActiveWindow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QApplication
operator|::
name|style
argument_list|()
operator|->
name|inherits
argument_list|(
literal|"QWindowsStyle"
argument_list|)
condition|)
return|return;
comment|// If we press Down the popupmenu should be active again
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|pm1
operator|->
name|isActiveWindow
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|pm2
operator|->
name|isActiveWindow
argument_list|()
argument_list|)
expr_stmt|;
comment|// and press ENTER
name|QTest
operator|::
name|keyClick
argument_list|(
name|pm2
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
comment|// Let's see if the correct slot is called...
name|QVERIFY2
argument_list|(
name|item2_C
operator|->
name|selCount
argument_list|()
operator|==
literal|1
argument_list|,
literal|"Expected item 2C to be selected"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// void tst_QMenuBar::check_mouse1_data()
end_comment
begin_comment
comment|// {
end_comment
begin_comment
comment|//     QTest::addColumn<QString>("popup_item");
end_comment
begin_comment
comment|//     QTest::addColumn<int>("itemA_count");
end_comment
begin_comment
comment|//     QTest::addColumn<int>("itemB_count");
end_comment
begin_comment
comment|//     QTest::newRow( "A" )<< QString( "Item A Ctrl+A" )<< 1<< 0;
end_comment
begin_comment
comment|//     QTest::newRow( "B" )<< QString( "Item B Ctrl+B" )<< 0<< 1;
end_comment
begin_comment
comment|// }
end_comment
begin_comment
comment|// /*!
end_comment
begin_comment
comment|//     Check if the correct signals are emitted if we select a popupmenu.
end_comment
begin_comment
comment|// */
end_comment
begin_comment
comment|// void tst_QMenuBar::check_mouse1()
end_comment
begin_comment
comment|// {
end_comment
begin_comment
comment|//     if (QSystem::curStyle() == "Motif")
end_comment
begin_comment
comment|// 	QSKIP("This fails in Motif due to a bug in the testing framework");
end_comment
begin_comment
comment|//     QFETCH( QString, popup_item );
end_comment
begin_comment
comment|//     QFETCH( int, itemA_count );
end_comment
begin_comment
comment|//     QFETCH( int, itemB_count );
end_comment
begin_comment
comment|//     initComplexMenubar();
end_comment
begin_comment
comment|//     QVERIFY( !pm1->isActiveWindow() );
end_comment
begin_comment
comment|//     QVERIFY( !pm2->isActiveWindow() );
end_comment
begin_comment
comment|//     QTest::qWait(1000);
end_comment
begin_comment
comment|//     QtTestMouse mouse;
end_comment
begin_comment
comment|//     mouse.mouseEvent( QtTestMouse::MouseClick, mb, "Menu&1", Qt::LeftButton );
end_comment
begin_comment
comment|//     QVERIFY( pm1->isActiveWindow() );
end_comment
begin_comment
comment|//     QVERIFY( !pm2->isActiveWindow() );
end_comment
begin_comment
comment|//     QTest::qWait(1000);
end_comment
begin_comment
comment|//     mouse.mouseEvent( QtTestMouse::MouseClick, pm1, popup_item, Qt::LeftButton );
end_comment
begin_comment
comment|//     QCOMPARE(menu3->selCount(), 0u);
end_comment
begin_comment
comment|//     QCOMPARE(menu4->selCount(), 0u);
end_comment
begin_comment
comment|//     QCOMPARE(item1_A->selCount(), (uint)itemA_count); // this option should have fired
end_comment
begin_comment
comment|//     QCOMPARE(item1_B->selCount(), (uint)itemB_count);
end_comment
begin_comment
comment|//     QCOMPARE(item2_C->selCount(), 0u);
end_comment
begin_comment
comment|//     QCOMPARE(item2_D->selCount(), 0u);
end_comment
begin_comment
comment|//     QCOMPARE(item2_E->selCount(), 0u);
end_comment
begin_comment
comment|//     QCOMPARE(item2_F->selCount(), 0u);
end_comment
begin_comment
comment|//     QCOMPARE(item2_G->selCount(), 0u);
end_comment
begin_comment
comment|// }
end_comment
begin_comment
comment|// void tst_QMenuBar::check_mouse2_data()
end_comment
begin_comment
comment|// {
end_comment
begin_comment
comment|//     QTest::addColumn<QString>("label");
end_comment
begin_comment
comment|//     QTest::addColumn<int>("itemA_count");
end_comment
begin_comment
comment|//     QTest::addColumn<int>("itemB_count");
end_comment
begin_comment
comment|//     QTest::addColumn<int>("itemC_count");
end_comment
begin_comment
comment|//     QTest::addColumn<int>("itemD_count");
end_comment
begin_comment
comment|//     QTest::addColumn<int>("itemE_count");
end_comment
begin_comment
comment|//     QTest::addColumn<int>("itemF_count");
end_comment
begin_comment
comment|//     QTest::addColumn<int>("itemG_count");
end_comment
begin_comment
comment|//     QTest::addColumn<int>("itemH_count");
end_comment
begin_comment
comment|//     QTest::addColumn<int>("menu3_count");
end_comment
begin_comment
comment|//     QTest::newRow( "A" )<< QString( "Menu&1/Item A Ctrl+A" )<< 1<< 0<< 0<< 0<< 0<< 0<< 0<< 0<< 0;
end_comment
begin_comment
comment|//     QTest::newRow( "B" )<< QString( "Menu&1/Item B Ctrl+B" )<< 0<< 1<< 0<< 0<< 0<< 0<< 0<< 0<< 0;
end_comment
begin_comment
comment|//     QTest::newRow( "C" )<< QString( "Menu&2/Item C Ctrl+C" )<< 0<< 0<< 1<< 0<< 0<< 0<< 0<< 0<< 0;
end_comment
begin_comment
comment|//     QTest::newRow( "D" )<< QString( "Menu&2/Item D Ctrl+D" )<< 0<< 0<< 0<< 1<< 0<< 0<< 0<< 0<< 0;
end_comment
begin_comment
comment|//     QTest::newRow( "E" )<< QString( "Menu&2/Item E Ctrl+E" )<< 0<< 0<< 0<< 0<< 1<< 0<< 0<< 0<< 0;
end_comment
begin_comment
comment|//     QTest::newRow( "F" )<< QString( "Menu&2/Item F Ctrl+F" )<< 0<< 0<< 0<< 0<< 0<< 1<< 0<< 0<< 0;
end_comment
begin_comment
comment|//     QTest::newRow( "G" )<< QString( "Menu&2/Item G Ctrl+G" )<< 0<< 0<< 0<< 0<< 0<< 0<< 1<< 0<< 0;
end_comment
begin_comment
comment|//     QTest::newRow( "H" )<< QString( "Menu&2/Item H Ctrl+H" )<< 0<< 0<< 0<< 0<< 0<< 0<< 0<< 1<< 0;
end_comment
begin_comment
comment|//     QTest::newRow( "menu 3" )<< QString( "M&enu 3" )<< 0<< 0<< 0<< 0<< 0<< 0<< 0<< 0<< 1;
end_comment
begin_comment
comment|// }
end_comment
begin_comment
comment|// /*!
end_comment
begin_comment
comment|//     Check if the correct signals are emitted if we select a popupmenu.
end_comment
begin_comment
comment|//     This time, we use a little bit more magic from the testframework.
end_comment
begin_comment
comment|// */
end_comment
begin_comment
comment|// void tst_QMenuBar::check_mouse2()
end_comment
begin_comment
comment|// {
end_comment
begin_comment
comment|//     if (QSystem::curStyle() == "Motif")
end_comment
begin_comment
comment|// 	QSKIP("This fails in Motif due to a bug in the testing framework");
end_comment
begin_comment
comment|//     QFETCH( QString, label );
end_comment
begin_comment
comment|//     QFETCH( int, itemA_count );
end_comment
begin_comment
comment|//     QFETCH( int, itemB_count );
end_comment
begin_comment
comment|//     QFETCH( int, itemC_count );
end_comment
begin_comment
comment|//     QFETCH( int, itemD_count );
end_comment
begin_comment
comment|//     QFETCH( int, itemE_count );
end_comment
begin_comment
comment|//     QFETCH( int, itemF_count );
end_comment
begin_comment
comment|//     QFETCH( int, itemG_count );
end_comment
begin_comment
comment|//     QFETCH( int, itemH_count );
end_comment
begin_comment
comment|//     QFETCH( int, menu3_count );
end_comment
begin_comment
comment|//     initComplexMenubar();
end_comment
begin_comment
comment|//     QtTestMouse mouse;
end_comment
begin_comment
comment|//     mouse.click( QtTestMouse::Menu, label, Qt::LeftButton );
end_comment
begin_comment
comment|//     // check if the correct signals have fired
end_comment
begin_comment
comment|//     QCOMPARE(menu3->selCount(), (uint)menu3_count);
end_comment
begin_comment
comment|//     QCOMPARE(menu4->selCount(), 0u);
end_comment
begin_comment
comment|//     QCOMPARE(item1_A->selCount(), (uint)itemA_count);
end_comment
begin_comment
comment|//     QCOMPARE(item1_B->selCount(), (uint)itemB_count);
end_comment
begin_comment
comment|//     QCOMPARE(item2_C->selCount(), (uint)itemC_count);
end_comment
begin_comment
comment|//     QCOMPARE(item2_D->selCount(), (uint)itemD_count);
end_comment
begin_comment
comment|//     QCOMPARE(item2_E->selCount(), (uint)itemE_count);
end_comment
begin_comment
comment|//     QCOMPARE(item2_F->selCount(), (uint)itemF_count);
end_comment
begin_comment
comment|//     QCOMPARE(item2_G->selCount(), (uint)itemG_count);
end_comment
begin_comment
comment|//     QCOMPARE(item2_H->selCount(), (uint)itemH_count);
end_comment
begin_comment
comment|// }
end_comment
begin_function
name|void
DECL|function|allowActiveAndDisabled
name|tst_QMenuBar
operator|::
name|allowActiveAndDisabled
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE_WM
argument_list|)
name|mb
operator|->
name|hide
argument_list|()
expr_stmt|;
name|mb
operator|->
name|clear
argument_list|()
expr_stmt|;
comment|// Task 241043 : check that second menu is activated if only
comment|// disabled menu items are added
name|QMenu
name|fileMenu
argument_list|(
literal|"&File"
argument_list|)
decl_stmt|;
comment|// Task 241043 : check that second menu is activated
comment|// if all items are disabled
name|QAction
modifier|*
name|act
init|=
name|fileMenu
operator|.
name|addAction
argument_list|(
literal|"Disabled"
argument_list|)
decl_stmt|;
name|act
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|mb
operator|->
name|addMenu
argument_list|(
operator|&
name|fileMenu
argument_list|)
expr_stmt|;
name|QMenu
name|disabledMenu
argument_list|(
literal|"Disabled"
argument_list|)
decl_stmt|;
name|disabledMenu
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QMenu
name|activeMenu
argument_list|(
literal|"Active"
argument_list|)
decl_stmt|;
name|mb
operator|->
name|addMenu
argument_list|(
operator|&
name|disabledMenu
argument_list|)
expr_stmt|;
name|mb
operator|->
name|addMenu
argument_list|(
operator|&
name|activeMenu
argument_list|)
expr_stmt|;
name|mb
operator|->
name|show
argument_list|()
expr_stmt|;
comment|// Here we verify that AllowActiveAndDisabled correctly skips
comment|// the disabled menu entry
name|QTest
operator|::
name|keyClick
argument_list|(
name|mb
argument_list|,
name|Qt
operator|::
name|Key_F
argument_list|,
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|fileMenu
argument_list|,
operator|(
name|Qt
operator|::
name|Key_Right
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|qApp
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Menu_AllowActiveAndDisabled
argument_list|)
condition|)
name|QCOMPARE
argument_list|(
name|mb
operator|->
name|activeAction
argument_list|()
operator|->
name|text
argument_list|()
argument_list|,
name|disabledMenu
operator|.
name|title
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|QCOMPARE
argument_list|(
name|mb
operator|->
name|activeAction
argument_list|()
operator|->
name|text
argument_list|()
argument_list|,
name|activeMenu
operator|.
name|title
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|mb
argument_list|,
operator|(
name|Qt
operator|::
name|Key_Left
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|qApp
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Menu_AllowActiveAndDisabled
argument_list|)
condition|)
name|QCOMPARE
argument_list|(
name|mb
operator|->
name|activeAction
argument_list|()
operator|->
name|text
argument_list|()
argument_list|,
name|fileMenu
operator|.
name|title
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|QCOMPARE
argument_list|(
name|mb
operator|->
name|activeAction
argument_list|()
operator|->
name|text
argument_list|()
argument_list|,
name|fileMenu
operator|.
name|title
argument_list|()
argument_list|)
expr_stmt|;
name|mb
operator|->
name|hide
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|//Q_OS_MAC
block|}
end_function
begin_function
DECL|function|check_altPress
name|void
name|tst_QMenuBar
operator|::
name|check_altPress
parameter_list|()
block|{
if|if
condition|(
operator|!
name|qApp
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_MenuBar_AltKeyNavigation
argument_list|)
condition|)
block|{
name|QSKIP
argument_list|(
name|QString
argument_list|(
literal|"this is not supposed to work in the %1 style. Skipping."
argument_list|)
operator|.
name|arg
argument_list|(
name|qApp
operator|->
name|style
argument_list|()
operator|->
name|objectName
argument_list|()
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|initSimpleMenubar
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
name|mw
argument_list|)
expr_stmt|;
name|mw
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|mw
argument_list|,
name|Qt
operator|::
name|Key_Alt
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|::
name|qobject_cast
argument_list|<
name|QMenuBar
operator|*
argument_list|>
argument_list|(
name|qApp
operator|->
name|focusWidget
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|check_shortcutPress
name|void
name|tst_QMenuBar
operator|::
name|check_shortcutPress
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WINCE_WM
argument_list|)
name|QSKIP
argument_list|(
literal|"Qt/Mac,WinCE does not use the native popups/menubar"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|initComplexMenubar
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
name|mw
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu3
operator|->
name|selCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|mw
argument_list|,
name|Qt
operator|::
name|Key_E
argument_list|,
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu3
operator|->
name|selCount
argument_list|()
argument_list|,
literal|1u
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|mb
operator|->
name|activeAction
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|mw
argument_list|,
name|Qt
operator|::
name|Key_1
argument_list|,
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|pm1
operator|->
name|isActiveWindow
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|mb
argument_list|,
name|Qt
operator|::
name|Key_2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|pm1
operator|->
name|isActiveWindow
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|check_menuPosition
name|void
name|tst_QMenuBar
operator|::
name|check_menuPosition
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|QSKIP
argument_list|(
literal|"Qt/Mac does not use the native popups/menubar"
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_OS_WINCE_WM
name|QSKIP
argument_list|(
literal|"Qt/CE uses native menubar"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|Menu
name|menu
decl_stmt|;
name|initComplexMenubar
argument_list|()
expr_stmt|;
name|menu
operator|.
name|setTitle
argument_list|(
literal|"&menu"
argument_list|)
expr_stmt|;
name|QRect
name|availRect
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|availableGeometry
argument_list|(
name|mw
argument_list|)
decl_stmt|;
name|QRect
name|screenRect
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|screenGeometry
argument_list|(
name|mw
argument_list|)
decl_stmt|;
while|while
condition|(
name|menu
operator|.
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
operator|<
operator|(
name|screenRect
operator|.
name|height
argument_list|()
operator|*
literal|2
operator|/
literal|3
operator|)
condition|)
block|{
name|menu
operator|.
name|addAction
argument_list|(
literal|"item"
argument_list|)
expr_stmt|;
block|}
name|QAction
modifier|*
name|menu_action
init|=
name|mw
operator|->
name|menuBar
argument_list|()
operator|->
name|addMenu
argument_list|(
operator|&
name|menu
argument_list|)
decl_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
name|mw
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
comment|//the menu should be below the menubar item
block|{
name|mw
operator|->
name|move
argument_list|(
name|availRect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
name|QRect
name|mbItemRect
init|=
name|mw
operator|->
name|menuBar
argument_list|()
operator|->
name|actionGeometry
argument_list|(
name|menu_action
argument_list|)
decl_stmt|;
name|mbItemRect
operator|.
name|moveTo
argument_list|(
name|mw
operator|->
name|menuBar
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|mbItemRect
operator|.
name|topLeft
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|mw
argument_list|,
name|Qt
operator|::
name|Key_M
argument_list|,
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|menu
operator|.
name|isActiveWindow
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu
operator|.
name|pos
argument_list|()
argument_list|,
name|QPoint
argument_list|(
name|mbItemRect
operator|.
name|x
argument_list|()
argument_list|,
name|mbItemRect
operator|.
name|bottom
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|menu
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|//the menu should be above the menubar item
block|{
name|mw
operator|->
name|move
argument_list|(
literal|0
argument_list|,
name|screenRect
operator|.
name|bottom
argument_list|()
operator|-
name|screenRect
operator|.
name|height
argument_list|()
operator|/
literal|4
argument_list|)
expr_stmt|;
comment|//just leave some place for the menubar
name|QRect
name|mbItemRect
init|=
name|mw
operator|->
name|menuBar
argument_list|()
operator|->
name|actionGeometry
argument_list|(
name|menu_action
argument_list|)
decl_stmt|;
name|mbItemRect
operator|.
name|moveTo
argument_list|(
name|mw
operator|->
name|menuBar
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|mbItemRect
operator|.
name|topLeft
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|mw
argument_list|,
name|Qt
operator|::
name|Key_M
argument_list|,
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|menu
operator|.
name|isActiveWindow
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu
operator|.
name|pos
argument_list|()
argument_list|,
name|QPoint
argument_list|(
name|mbItemRect
operator|.
name|x
argument_list|()
argument_list|,
name|mbItemRect
operator|.
name|top
argument_list|()
operator|-
name|menu
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|menu
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|//the menu should be on the side of the menubar item and should be "stuck" to the bottom of the screen
block|{
name|mw
operator|->
name|move
argument_list|(
literal|0
argument_list|,
name|screenRect
operator|.
name|y
argument_list|()
operator|+
name|screenRect
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
comment|//put it in the middle
name|QRect
name|mbItemRect
init|=
name|mw
operator|->
name|menuBar
argument_list|()
operator|->
name|actionGeometry
argument_list|(
name|menu_action
argument_list|)
decl_stmt|;
name|mbItemRect
operator|.
name|moveTo
argument_list|(
name|mw
operator|->
name|menuBar
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|mbItemRect
operator|.
name|topLeft
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|mw
argument_list|,
name|Qt
operator|::
name|Key_M
argument_list|,
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|menu
operator|.
name|isActiveWindow
argument_list|()
argument_list|)
expr_stmt|;
name|QPoint
name|firstPoint
init|=
name|QPoint
argument_list|(
name|mbItemRect
operator|.
name|right
argument_list|()
operator|+
literal|1
argument_list|,
name|screenRect
operator|.
name|bottom
argument_list|()
operator|-
name|menu
operator|.
name|height
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|QPoint
name|secondPoint
init|=
name|QPoint
argument_list|(
name|mbItemRect
operator|.
name|right
argument_list|()
operator|+
literal|1
argument_list|,
name|availRect
operator|.
name|bottom
argument_list|()
operator|-
name|menu
operator|.
name|height
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|menu
operator|.
name|pos
argument_list|()
operator|==
name|firstPoint
operator|||
name|menu
operator|.
name|pos
argument_list|()
operator|==
name|secondPoint
argument_list|)
expr_stmt|;
name|menu
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|//in RTL, the menu should be stuck at the right of the action geometry
block|{
name|Qt
operator|::
name|LayoutDirection
name|dir
init|=
name|qApp
operator|->
name|layoutDirection
argument_list|()
decl_stmt|;
name|qApp
operator|->
name|setLayoutDirection
argument_list|(
name|Qt
operator|::
name|RightToLeft
argument_list|)
expr_stmt|;
name|menu
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|menu
argument_list|,
name|SIGNAL
argument_list|(
name|aboutToShow
argument_list|()
argument_list|)
argument_list|,
operator|&
name|menu
argument_list|,
name|SLOT
argument_list|(
name|addActions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QRect
name|mbItemRect
init|=
name|mw
operator|->
name|menuBar
argument_list|()
operator|->
name|actionGeometry
argument_list|(
name|menu_action
argument_list|)
decl_stmt|;
name|mbItemRect
operator|.
name|moveTo
argument_list|(
name|mw
operator|->
name|menuBar
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|mbItemRect
operator|.
name|topLeft
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|mw
argument_list|,
name|Qt
operator|::
name|Key_M
argument_list|,
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|menu
operator|.
name|isActiveWindow
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu
operator|.
name|geometry
argument_list|()
operator|.
name|right
argument_list|()
argument_list|,
name|mbItemRect
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
name|menu
operator|.
name|close
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|setLayoutDirection
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|task223138_triggered
name|void
name|tst_QMenuBar
operator|::
name|task223138_triggered
parameter_list|()
block|{
name|qRegisterMetaType
argument_list|<
name|QAction
operator|*
argument_list|>
argument_list|(
literal|"QAction *"
argument_list|)
expr_stmt|;
comment|//we create a window with submenus and we check that both menubar and menus get the triggered signal
name|QMainWindow
name|win
decl_stmt|;
name|QMenu
modifier|*
name|menu
init|=
name|win
operator|.
name|menuBar
argument_list|()
operator|->
name|addMenu
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|QAction
modifier|*
name|top
init|=
name|menu
operator|->
name|addAction
argument_list|(
literal|"toplevelaction"
argument_list|)
decl_stmt|;
name|QMenu
modifier|*
name|submenu
init|=
name|menu
operator|->
name|addMenu
argument_list|(
literal|"nested menu"
argument_list|)
decl_stmt|;
name|QAction
modifier|*
name|action
init|=
name|submenu
operator|->
name|addAction
argument_list|(
literal|"nested action"
argument_list|)
decl_stmt|;
name|QSignalSpy
name|menubarSpy
argument_list|(
name|win
operator|.
name|menuBar
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|menuSpy
argument_list|(
name|menu
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|submenuSpy
argument_list|(
name|submenu
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|//let's trigger the first action
name|top
operator|->
name|trigger
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menubarSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menuSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|submenuSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|menubarSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|menuSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|submenuSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|//let's trigger the sub action
name|action
operator|->
name|trigger
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menubarSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menuSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|submenuSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task256322_highlight
name|void
name|tst_QMenuBar
operator|::
name|task256322_highlight
parameter_list|()
block|{
name|QMainWindow
name|win
decl_stmt|;
name|win
operator|.
name|menuBar
argument_list|()
operator|->
name|setNativeMenuBar
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//we can't check the geometry of native menubars
name|QMenu
name|menu
decl_stmt|;
name|QAction
modifier|*
name|file
init|=
name|win
operator|.
name|menuBar
argument_list|()
operator|->
name|addMenu
argument_list|(
operator|&
name|menu
argument_list|)
decl_stmt|;
name|file
operator|->
name|setText
argument_list|(
literal|"file"
argument_list|)
expr_stmt|;
name|QMenu
name|menu2
decl_stmt|;
name|QAction
modifier|*
name|file2
init|=
name|win
operator|.
name|menuBar
argument_list|()
operator|->
name|addMenu
argument_list|(
operator|&
name|menu2
argument_list|)
decl_stmt|;
name|file2
operator|->
name|setText
argument_list|(
literal|"file2"
argument_list|)
expr_stmt|;
name|QAction
modifier|*
name|nothing
init|=
name|win
operator|.
name|menuBar
argument_list|()
operator|->
name|addAction
argument_list|(
literal|"nothing"
argument_list|)
decl_stmt|;
name|win
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mousePress
argument_list|(
name|win
operator|.
name|menuBar
argument_list|()
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|win
operator|.
name|menuBar
argument_list|()
operator|->
name|actionGeometry
argument_list|(
name|file
argument_list|)
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseMove
argument_list|(
name|win
operator|.
name|menuBar
argument_list|()
argument_list|,
name|win
operator|.
name|menuBar
argument_list|()
operator|->
name|actionGeometry
argument_list|(
name|file
argument_list|)
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseRelease
argument_list|(
name|win
operator|.
name|menuBar
argument_list|()
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|win
operator|.
name|menuBar
argument_list|()
operator|->
name|actionGeometry
argument_list|(
name|file
argument_list|)
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|menu
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|menu2
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|win
operator|.
name|menuBar
argument_list|()
operator|->
name|activeAction
argument_list|()
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mousePress
argument_list|(
name|win
operator|.
name|menuBar
argument_list|()
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|win
operator|.
name|menuBar
argument_list|()
operator|->
name|actionGeometry
argument_list|(
name|file2
argument_list|)
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseMove
argument_list|(
name|win
operator|.
name|menuBar
argument_list|()
argument_list|,
name|win
operator|.
name|menuBar
argument_list|()
operator|->
name|actionGeometry
argument_list|(
name|file2
argument_list|)
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
operator|!
name|menu
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|menu2
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|win
operator|.
name|menuBar
argument_list|()
operator|->
name|activeAction
argument_list|()
argument_list|,
name|file2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseRelease
argument_list|(
name|win
operator|.
name|menuBar
argument_list|()
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|win
operator|.
name|menuBar
argument_list|()
operator|->
name|actionGeometry
argument_list|(
name|file2
argument_list|)
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|QPoint
name|nothingCenter
init|=
name|win
operator|.
name|menuBar
argument_list|()
operator|->
name|actionGeometry
argument_list|(
name|nothing
argument_list|)
operator|.
name|center
argument_list|()
decl_stmt|;
name|QTest
operator|::
name|mousePress
argument_list|(
name|win
operator|.
name|menuBar
argument_list|()
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|nothingCenter
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseMove
argument_list|(
name|win
operator|.
name|menuBar
argument_list|()
argument_list|,
name|nothingCenter
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
operator|!
name|menu2
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|menu
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|win
operator|.
name|menuBar
argument_list|()
operator|->
name|activeAction
argument_list|()
argument_list|,
name|nothing
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseRelease
argument_list|(
name|win
operator|.
name|menuBar
argument_list|()
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|nothingCenter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|menubarSizeHint
name|void
name|tst_QMenuBar
operator|::
name|menubarSizeHint
parameter_list|()
block|{
struct|struct
name|MyStyle
super|:
specifier|public
name|QWindowsStyle
block|{
specifier|virtual
name|int
name|pixelMetric
parameter_list|(
name|PixelMetric
name|metric
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
init|=
literal|0
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
init|=
literal|0
parameter_list|)
specifier|const
block|{
comment|// I chose strange values (prime numbers to be more sure that the size of the menubar is correct)
switch|switch
condition|(
name|metric
condition|)
block|{
case|case
name|QStyle
operator|::
name|PM_MenuBarItemSpacing
case|:
return|return
literal|7
return|;
case|case
name|PM_MenuBarHMargin
case|:
return|return
literal|13
return|;
case|case
name|PM_MenuBarVMargin
case|:
return|return
literal|11
return|;
case|case
name|PM_MenuBarPanelWidth
case|:
return|return
literal|1
return|;
default|default:
return|return
name|QWindowsStyle
operator|::
name|pixelMetric
argument_list|(
name|metric
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
block|}
block|}
block|}
name|style
struct|;
name|QMenuBar
name|mb
decl_stmt|;
name|mb
operator|.
name|setNativeMenuBar
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//we can't check the geometry of native menubars
name|mb
operator|.
name|setStyle
argument_list|(
operator|&
name|style
argument_list|)
expr_stmt|;
comment|//this is a list of arbitrary strings so that we check the geometry
name|QStringList
name|list
init|=
name|QStringList
argument_list|()
operator|<<
literal|"trer"
operator|<<
literal|"ezrfgtgvqd"
operator|<<
literal|"sdgzgzerzerzer"
operator|<<
literal|"eerzertz"
operator|<<
literal|"er"
decl_stmt|;
foreach|foreach
control|(
name|QString
name|str
decl|,
name|list
control|)
name|mb
operator|.
name|addAction
argument_list|(
name|str
argument_list|)
expr_stmt|;
specifier|const
name|int
name|panelWidth
init|=
name|style
operator|.
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuBarPanelWidth
argument_list|)
decl_stmt|;
specifier|const
name|int
name|hmargin
init|=
name|style
operator|.
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuBarHMargin
argument_list|)
decl_stmt|;
specifier|const
name|int
name|vmargin
init|=
name|style
operator|.
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuBarVMargin
argument_list|)
decl_stmt|;
specifier|const
name|int
name|spacing
init|=
name|style
operator|.
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuBarItemSpacing
argument_list|)
decl_stmt|;
name|mb
operator|.
name|show
argument_list|()
expr_stmt|;
name|QRect
name|result
decl_stmt|;
foreach|foreach
control|(
name|QAction
modifier|*
name|action
decl|,
name|mb
operator|.
name|actions
argument_list|()
control|)
block|{
specifier|const
name|QRect
name|actionRect
init|=
name|mb
operator|.
name|actionGeometry
argument_list|(
name|action
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isNull
argument_list|()
condition|)
comment|//this is the first item
name|QCOMPARE
argument_list|(
name|actionRect
operator|.
name|left
argument_list|()
operator|-
name|result
operator|.
name|right
argument_list|()
operator|-
literal|1
argument_list|,
name|spacing
argument_list|)
expr_stmt|;
name|result
operator||=
name|actionRect
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|x
argument_list|()
argument_list|,
name|panelWidth
operator|+
name|hmargin
operator|+
name|spacing
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|y
argument_list|()
argument_list|,
name|panelWidth
operator|+
name|vmargin
argument_list|)
expr_stmt|;
block|}
comment|//this code is copied from QMenuBar
comment|//there is no public member that allows to initialize a styleoption instance
name|QStyleOptionMenuItem
name|opt
decl_stmt|;
name|opt
operator|.
name|rect
operator|=
name|mb
operator|.
name|rect
argument_list|()
expr_stmt|;
name|opt
operator|.
name|menuRect
operator|=
name|mb
operator|.
name|rect
argument_list|()
expr_stmt|;
name|opt
operator|.
name|state
operator|=
name|QStyle
operator|::
name|State_None
expr_stmt|;
name|opt
operator|.
name|menuItemType
operator|=
name|QStyleOptionMenuItem
operator|::
name|Normal
expr_stmt|;
name|opt
operator|.
name|checkType
operator|=
name|QStyleOptionMenuItem
operator|::
name|NotCheckable
expr_stmt|;
name|opt
operator|.
name|palette
operator|=
name|mb
operator|.
name|palette
argument_list|()
expr_stmt|;
name|QSize
name|resSize
init|=
name|QSize
argument_list|(
name|result
operator|.
name|x
argument_list|()
argument_list|,
name|result
operator|.
name|y
argument_list|()
argument_list|)
operator|+
name|result
operator|.
name|size
argument_list|()
operator|+
name|QSize
argument_list|(
name|panelWidth
operator|+
name|hmargin
argument_list|,
name|panelWidth
operator|+
name|vmargin
argument_list|)
decl_stmt|;
name|resSize
operator|=
name|style
operator|.
name|sizeFromContents
argument_list|(
name|QStyle
operator|::
name|CT_MenuBar
argument_list|,
operator|&
name|opt
argument_list|,
name|resSize
operator|.
name|expandedTo
argument_list|(
name|QApplication
operator|::
name|globalStrut
argument_list|()
argument_list|)
argument_list|,
operator|&
name|mb
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|resSize
argument_list|,
name|mb
operator|.
name|sizeHint
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|taskQTBUG4965_escapeEaten
name|void
name|tst_QMenuBar
operator|::
name|taskQTBUG4965_escapeEaten
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|QSKIP
argument_list|(
literal|"On Mac, do not test the menubar with escape key"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QMenuBar
name|menubar
decl_stmt|;
name|QMenu
name|menu
argument_list|(
literal|"menu1"
argument_list|)
decl_stmt|;
name|QAction
modifier|*
name|first
init|=
name|menubar
operator|.
name|addMenu
argument_list|(
operator|&
name|menu
argument_list|)
decl_stmt|;
name|menu
operator|.
name|addAction
argument_list|(
literal|"quit"
argument_list|,
operator|&
name|menubar
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|,
name|QKeySequence
argument_list|(
literal|"ESC"
argument_list|)
argument_list|)
expr_stmt|;
name|menubar
operator|.
name|show
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|menubar
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|menubar
argument_list|)
argument_list|)
expr_stmt|;
name|menubar
operator|.
name|setActiveAction
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|menu
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menubar
operator|.
name|activeAction
argument_list|()
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|menu
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_Escape
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|menu
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|menubar
operator|.
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menubar
operator|.
name|activeAction
argument_list|()
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_Escape
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|menubar
operator|.
name|activeAction
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_Escape
argument_list|)
expr_stmt|;
comment|//now the action should be triggered
name|QTRY_VERIFY
argument_list|(
operator|!
name|menubar
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|taskQTBUG11823_crashwithInvisibleActions
name|void
name|tst_QMenuBar
operator|::
name|taskQTBUG11823_crashwithInvisibleActions
parameter_list|()
block|{
name|QMenuBar
name|menubar
decl_stmt|;
name|menubar
operator|.
name|setNativeMenuBar
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//we can't check the geometry of native menubars
name|QAction
modifier|*
name|m
init|=
name|menubar
operator|.
name|addAction
argument_list|(
literal|"&m"
argument_list|)
decl_stmt|;
name|QAction
modifier|*
name|a
init|=
name|menubar
operator|.
name|addAction
argument_list|(
literal|"&a"
argument_list|)
decl_stmt|;
name|menubar
operator|.
name|show
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|menubar
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowActive
argument_list|(
operator|&
name|menubar
argument_list|)
argument_list|)
expr_stmt|;
name|menubar
operator|.
name|setActiveAction
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menubar
operator|.
name|activeAction
argument_list|()
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_Right
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menubar
operator|.
name|activeAction
argument_list|()
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_Right
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menubar
operator|.
name|activeAction
argument_list|()
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|a
operator|->
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|menubar
operator|.
name|setActiveAction
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menubar
operator|.
name|activeAction
argument_list|()
argument_list|,
name|m
argument_list|)
expr_stmt|;
comment|//the active action shouldn't have changed
comment|//it used to crash here because the action is invisible
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_Right
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menubar
operator|.
name|activeAction
argument_list|()
argument_list|,
name|m
argument_list|)
expr_stmt|;
comment|//the active action shouldn't have changed
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QMenuBar
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qmenubar.moc"
end_include
end_unit
