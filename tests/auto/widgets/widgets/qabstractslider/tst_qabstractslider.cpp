begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QAbstractSlider>
end_include
begin_include
include|#
directive|include
file|<QScrollBar>
end_include
begin_include
include|#
directive|include
file|<QSlider>
end_include
begin_include
include|#
directive|include
file|<QStyle>
end_include
begin_include
include|#
directive|include
file|<QStyleOption>
end_include
begin_include
include|#
directive|include
file|<QTime>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_comment
comment|// defined to be 120 by the wheel mouse vendors according to the docs
end_comment
begin_define
DECL|macro|WHEEL_DELTA
define|#
directive|define
name|WHEEL_DELTA
value|120
end_define
begin_class
DECL|class|Slider
class|class
name|Slider
super|:
specifier|public
name|QAbstractSlider
block|{
public|public:
DECL|function|Slider
name|Slider
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractSlider
argument_list|(
name|parent
argument_list|)
block|{}
using|using
name|QAbstractSlider
operator|::
name|setRepeatAction
using|;
using|using
name|QAbstractSlider
operator|::
name|repeatAction
using|;
block|}
class|;
end_class
begin_class
DECL|class|tst_QAbstractSlider
class|class
name|tst_QAbstractSlider
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|actionTriggered
parameter_list|(
name|int
name|action
parameter_list|)
function_decl|;
name|void
name|rangeChanged
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
function_decl|;
name|void
name|valueChanged
parameter_list|(
name|int
name|value
parameter_list|)
function_decl|;
name|void
name|sliderMoved
parameter_list|(
name|int
name|value
parameter_list|)
function_decl|;
private|private
name|slots
private|:
name|void
name|triggerAction_data
parameter_list|()
function_decl|;
name|void
name|triggerAction
parameter_list|()
function_decl|;
name|void
name|minimum_maximum_data
parameter_list|()
function_decl|;
name|void
name|minimum_maximum
parameter_list|()
function_decl|;
name|void
name|keyPressed_data
parameter_list|()
function_decl|;
name|void
name|keyPressed
parameter_list|()
function_decl|;
name|void
name|wheelEvent_data
parameter_list|()
function_decl|;
name|void
name|wheelEvent
parameter_list|()
function_decl|;
name|void
name|sliderPressedReleased_data
parameter_list|()
function_decl|;
name|void
name|sliderPressedReleased
parameter_list|()
function_decl|;
name|void
name|setOrientation
parameter_list|()
function_decl|;
name|void
name|sliderMoved_data
parameter_list|()
function_decl|;
name|void
name|sliderMoved
parameter_list|()
function_decl|;
name|void
name|rangeChanged_data
parameter_list|()
function_decl|;
name|void
name|rangeChanged
parameter_list|()
function_decl|;
name|void
name|setSliderPosition_data
parameter_list|()
function_decl|;
name|void
name|setSliderPosition
parameter_list|()
function_decl|;
name|void
name|setValue_data
parameter_list|()
function_decl|;
name|void
name|setValue
parameter_list|()
function_decl|;
name|void
name|setRepeatAction
parameter_list|()
function_decl|;
name|void
name|connectedSliders
parameter_list|()
function_decl|;
private|private:
name|void
name|waitUntilTimeElapsed
parameter_list|(
specifier|const
name|QTime
modifier|&
name|t
parameter_list|,
name|int
name|ms
parameter_list|)
function_decl|;
DECL|member|topLevel
name|QWidget
modifier|*
name|topLevel
decl_stmt|;
DECL|member|slider
name|Slider
modifier|*
name|slider
decl_stmt|;
DECL|member|previousAction
name|int
name|previousAction
decl_stmt|;
DECL|member|reportedMinimum
name|int
name|reportedMinimum
decl_stmt|;
DECL|member|reportedMaximum
name|int
name|reportedMaximum
decl_stmt|;
DECL|member|reportedValue
name|int
name|reportedValue
decl_stmt|;
DECL|member|reportedSliderPosition
name|int
name|reportedSliderPosition
decl_stmt|;
DECL|member|timeStamp
name|qint64
name|timeStamp
decl_stmt|;
DECL|member|actionTriggeredTimeStamp
name|qint64
name|actionTriggeredTimeStamp
decl_stmt|;
DECL|member|valueChangedTimeStamp
name|qint64
name|valueChangedTimeStamp
decl_stmt|;
DECL|member|rangeChangedTimeStamp
name|qint64
name|rangeChangedTimeStamp
decl_stmt|;
DECL|member|sliderMovedTimeStamp
name|qint64
name|sliderMovedTimeStamp
decl_stmt|;
block|}
class|;
end_class
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<Qt::Key>
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QPoint
argument_list|)
end_macro
begin_function
DECL|function|initTestCase
name|void
name|tst_QAbstractSlider
operator|::
name|initTestCase
parameter_list|()
block|{
name|topLevel
operator|=
operator|new
name|QWidget
expr_stmt|;
name|slider
operator|=
operator|new
name|Slider
argument_list|(
name|topLevel
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setObjectName
argument_list|(
literal|"testWidget"
argument_list|)
expr_stmt|;
name|slider
operator|->
name|resize
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|slider
operator|->
name|show
argument_list|()
expr_stmt|;
name|previousAction
operator|=
name|QAbstractSlider
operator|::
name|SliderNoAction
expr_stmt|;
name|timeStamp
operator|=
literal|0
expr_stmt|;
name|connect
argument_list|(
name|slider
argument_list|,
name|SIGNAL
argument_list|(
name|actionTriggered
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|actionTriggered
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|slider
argument_list|,
name|SIGNAL
argument_list|(
name|rangeChanged
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|rangeChanged
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|slider
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|slider
argument_list|,
name|SIGNAL
argument_list|(
name|sliderMoved
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|sliderMoved
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QAbstractSlider
operator|::
name|cleanupTestCase
parameter_list|()
block|{
operator|delete
name|topLevel
expr_stmt|;
block|}
end_function
begin_function
DECL|function|actionTriggered
name|void
name|tst_QAbstractSlider
operator|::
name|actionTriggered
parameter_list|(
name|int
name|action
parameter_list|)
block|{
name|previousAction
operator|=
name|action
expr_stmt|;
name|actionTriggeredTimeStamp
operator|=
name|timeStamp
operator|++
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rangeChanged
name|void
name|tst_QAbstractSlider
operator|::
name|rangeChanged
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|reportedMinimum
operator|=
name|min
expr_stmt|;
name|reportedMaximum
operator|=
name|max
expr_stmt|;
name|rangeChangedTimeStamp
operator|=
name|timeStamp
operator|++
expr_stmt|;
block|}
end_function
begin_function
DECL|function|valueChanged
name|void
name|tst_QAbstractSlider
operator|::
name|valueChanged
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|reportedValue
operator|=
name|value
expr_stmt|;
name|valueChangedTimeStamp
operator|=
name|timeStamp
operator|++
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sliderMoved
name|void
name|tst_QAbstractSlider
operator|::
name|sliderMoved
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|reportedSliderPosition
operator|=
name|value
expr_stmt|;
name|sliderMovedTimeStamp
operator|=
name|timeStamp
operator|++
expr_stmt|;
block|}
end_function
begin_function
DECL|function|triggerAction_data
name|void
name|tst_QAbstractSlider
operator|::
name|triggerAction_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"sliderAction"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"maximum"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"minimum"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"initialSliderPosition"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"singleStep"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"pageStep"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedSliderPosition"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"No action"
argument_list|)
operator|<<
name|int
argument_list|(
name|QAbstractSlider
operator|::
name|SliderNoAction
argument_list|)
comment|// sliderAction
operator|<<
literal|1000
comment|// max
operator|<<
literal|900
comment|// min
operator|<<
literal|987
comment|// initial position
operator|<<
literal|237
comment|// single step size
operator|<<
literal|234
comment|// page step size
operator|<<
literal|987
expr_stmt|;
comment|// expected position after
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Move action"
argument_list|)
operator|<<
name|int
argument_list|(
name|QAbstractSlider
operator|::
name|SliderMove
argument_list|)
comment|// sliderAction
operator|<<
literal|1000
comment|// max
operator|<<
literal|900
comment|// min
operator|<<
literal|988
comment|// initial position
operator|<<
literal|237
comment|// single step size
operator|<<
literal|234
comment|// page step size
operator|<<
literal|988
expr_stmt|;
comment|// expected position after
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Empty step add"
argument_list|)
operator|<<
name|int
argument_list|(
name|QAbstractSlider
operator|::
name|SliderSingleStepAdd
argument_list|)
comment|// sliderAction
operator|<<
literal|1000
comment|// max
operator|<<
literal|900
comment|// min
operator|<<
literal|988
comment|// initial position
operator|<<
literal|0
comment|// single step size
operator|<<
literal|234
comment|// page step size
operator|<<
literal|988
expr_stmt|;
comment|// expected position after
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Empty step sub"
argument_list|)
operator|<<
name|int
argument_list|(
name|QAbstractSlider
operator|::
name|SliderSingleStepSub
argument_list|)
comment|// sliderAction
operator|<<
literal|1000
comment|// max
operator|<<
literal|900
comment|// min
operator|<<
literal|987
comment|// initial position
operator|<<
literal|0
comment|// single step size
operator|<<
literal|234
comment|// page step size
operator|<<
literal|987
expr_stmt|;
comment|// expected position after
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Empty page add"
argument_list|)
operator|<<
name|int
argument_list|(
name|QAbstractSlider
operator|::
name|SliderPageStepAdd
argument_list|)
comment|// sliderAction
operator|<<
literal|1000
comment|// max
operator|<<
literal|900
comment|// min
operator|<<
literal|988
comment|// initial position
operator|<<
literal|234
comment|// single step size
operator|<<
literal|0
comment|// page step size
operator|<<
literal|988
expr_stmt|;
comment|// expected position after
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Empty page sub"
argument_list|)
operator|<<
name|int
argument_list|(
name|QAbstractSlider
operator|::
name|SliderPageStepSub
argument_list|)
comment|// sliderAction
operator|<<
literal|1000
comment|// max
operator|<<
literal|900
comment|// min
operator|<<
literal|987
comment|// initial position
operator|<<
literal|234
comment|// single step size
operator|<<
literal|0
comment|// page step size
operator|<<
literal|987
expr_stmt|;
comment|// expected position after
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Legal step add"
argument_list|)
operator|<<
name|int
argument_list|(
name|QAbstractSlider
operator|::
name|SliderSingleStepAdd
argument_list|)
comment|// sliderAction
operator|<<
literal|1000
comment|// max
operator|<<
literal|900
comment|// min
operator|<<
literal|988
comment|// initial position
operator|<<
literal|5
comment|// single step size
operator|<<
literal|234
comment|// page step size
operator|<<
literal|993
expr_stmt|;
comment|// expected position after
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Legal step sub"
argument_list|)
operator|<<
name|int
argument_list|(
name|QAbstractSlider
operator|::
name|SliderSingleStepSub
argument_list|)
comment|// sliderAction
operator|<<
literal|1000
comment|// max
operator|<<
literal|900
comment|// min
operator|<<
literal|987
comment|// initial position
operator|<<
literal|5
comment|// single step size
operator|<<
literal|234
comment|// page step size
operator|<<
literal|982
expr_stmt|;
comment|// expected position after
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Legal page add"
argument_list|)
operator|<<
name|int
argument_list|(
name|QAbstractSlider
operator|::
name|SliderPageStepAdd
argument_list|)
comment|// sliderAction
operator|<<
literal|1000
comment|// max
operator|<<
literal|900
comment|// min
operator|<<
literal|988
comment|// initial position
operator|<<
literal|234
comment|// single step size
operator|<<
literal|5
comment|// page step size
operator|<<
literal|993
expr_stmt|;
comment|// expected position after
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Legal page sub"
argument_list|)
operator|<<
name|int
argument_list|(
name|QAbstractSlider
operator|::
name|SliderPageStepSub
argument_list|)
comment|// sliderAction
operator|<<
literal|1000
comment|// max
operator|<<
literal|900
comment|// min
operator|<<
literal|987
comment|// initial position
operator|<<
literal|234
comment|// single step size
operator|<<
literal|5
comment|// page step size
operator|<<
literal|982
expr_stmt|;
comment|// expected position after
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Illegal step add"
argument_list|)
operator|<<
name|int
argument_list|(
name|QAbstractSlider
operator|::
name|SliderSingleStepAdd
argument_list|)
comment|// sliderAction
operator|<<
literal|1000
comment|// max
operator|<<
literal|900
comment|// min
operator|<<
literal|988
comment|// initial position
operator|<<
literal|500
comment|// single step size
operator|<<
literal|234
comment|// page step size
operator|<<
literal|1000
expr_stmt|;
comment|// expected position after
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Illegal step sub"
argument_list|)
operator|<<
name|int
argument_list|(
name|QAbstractSlider
operator|::
name|SliderSingleStepSub
argument_list|)
comment|// sliderAction
operator|<<
literal|1000
comment|// max
operator|<<
literal|900
comment|// min
operator|<<
literal|987
comment|// initial position
operator|<<
literal|500
comment|// single step size
operator|<<
literal|234
comment|// page step size
operator|<<
literal|900
expr_stmt|;
comment|// expected position after
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Illegal page add"
argument_list|)
operator|<<
name|int
argument_list|(
name|QAbstractSlider
operator|::
name|SliderPageStepAdd
argument_list|)
comment|// sliderAction
operator|<<
literal|1000
comment|// max
operator|<<
literal|900
comment|// min
operator|<<
literal|988
comment|// initial position
operator|<<
literal|234
comment|// single step size
operator|<<
literal|500
comment|// page step size
operator|<<
literal|1000
expr_stmt|;
comment|// expected position after
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Illegal page sub"
argument_list|)
operator|<<
name|int
argument_list|(
name|QAbstractSlider
operator|::
name|SliderPageStepSub
argument_list|)
comment|// sliderAction
operator|<<
literal|1000
comment|// max
operator|<<
literal|900
comment|// min
operator|<<
literal|987
comment|// initial position
operator|<<
literal|234
comment|// single step size
operator|<<
literal|500
comment|// page step size
operator|<<
literal|900
expr_stmt|;
comment|// expected position after
comment|// Negative steps will also be abs()'d so, check that case.
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Negative step add"
argument_list|)
operator|<<
name|int
argument_list|(
name|QAbstractSlider
operator|::
name|SliderSingleStepAdd
argument_list|)
comment|// sliderAction
operator|<<
literal|1000
comment|// max
operator|<<
literal|900
comment|// min
operator|<<
literal|988
comment|// initial position
operator|<<
operator|-
literal|1
comment|// single step size
operator|<<
literal|234
comment|// page step size
operator|<<
literal|989
expr_stmt|;
comment|// expected position after
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Negative step sub"
argument_list|)
operator|<<
name|int
argument_list|(
name|QAbstractSlider
operator|::
name|SliderSingleStepSub
argument_list|)
comment|// sliderAction
operator|<<
literal|1000
comment|// max
operator|<<
literal|900
comment|// min
operator|<<
literal|987
comment|// initial position
operator|<<
operator|-
literal|1
comment|// single step size
operator|<<
literal|234
comment|// page step size
operator|<<
literal|986
expr_stmt|;
comment|// expected position after
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Negative page add"
argument_list|)
operator|<<
name|int
argument_list|(
name|QAbstractSlider
operator|::
name|SliderPageStepAdd
argument_list|)
comment|// sliderAction
operator|<<
literal|1000
comment|// max
operator|<<
literal|900
comment|// min
operator|<<
literal|988
comment|// initial position
operator|<<
literal|234
comment|// single step size
operator|<<
operator|-
literal|1
comment|// page step size
operator|<<
literal|989
expr_stmt|;
comment|// expected position after
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Negative page sub"
argument_list|)
operator|<<
name|int
argument_list|(
name|QAbstractSlider
operator|::
name|SliderPageStepSub
argument_list|)
comment|// sliderAction
operator|<<
literal|1000
comment|// max
operator|<<
literal|900
comment|// min
operator|<<
literal|987
comment|// initial position
operator|<<
literal|234
comment|// single step size
operator|<<
operator|-
literal|1
comment|// page step size
operator|<<
literal|986
expr_stmt|;
comment|// expected position after
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Illegal negative step add"
argument_list|)
operator|<<
name|int
argument_list|(
name|QAbstractSlider
operator|::
name|SliderSingleStepAdd
argument_list|)
comment|// sliderAction
operator|<<
literal|1000
comment|// max
operator|<<
literal|900
comment|// min
operator|<<
literal|988
comment|// initial position
operator|<<
operator|-
literal|500
comment|// single step size
operator|<<
literal|234
comment|// page step size
operator|<<
literal|1000
expr_stmt|;
comment|// expected position after
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Illegal negative step sub"
argument_list|)
operator|<<
name|int
argument_list|(
name|QAbstractSlider
operator|::
name|SliderSingleStepSub
argument_list|)
comment|// sliderAction
operator|<<
literal|1000
comment|// max
operator|<<
literal|900
comment|// min
operator|<<
literal|988
comment|// initial position
operator|<<
operator|-
literal|500
comment|// single step size
operator|<<
literal|234
comment|// page step size
operator|<<
literal|900
expr_stmt|;
comment|// expected position after
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Illegal negative page add"
argument_list|)
operator|<<
name|int
argument_list|(
name|QAbstractSlider
operator|::
name|SliderPageStepAdd
argument_list|)
comment|// sliderAction
operator|<<
literal|1000
comment|// max
operator|<<
literal|900
comment|// min
operator|<<
literal|988
comment|// initial position
operator|<<
literal|234
comment|// single step size
operator|<<
operator|-
literal|500
comment|// page step size
operator|<<
literal|1000
expr_stmt|;
comment|// expected position after
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Illegal negative page sub"
argument_list|)
operator|<<
name|int
argument_list|(
name|QAbstractSlider
operator|::
name|SliderPageStepSub
argument_list|)
comment|// sliderAction
operator|<<
literal|1000
comment|// max
operator|<<
literal|900
comment|// min
operator|<<
literal|988
comment|// initial position
operator|<<
literal|245
comment|// single step size
operator|<<
operator|-
literal|500
comment|// page step size
operator|<<
literal|900
expr_stmt|;
comment|// expected position after
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Slider to minimum"
argument_list|)
operator|<<
name|int
argument_list|(
name|QAbstractSlider
operator|::
name|SliderToMinimum
argument_list|)
comment|// sliderAction
operator|<<
literal|1000
comment|// max
operator|<<
literal|900
comment|// min
operator|<<
literal|988
comment|// initial position
operator|<<
literal|245
comment|// single step size
operator|<<
literal|1
comment|// page step size
operator|<<
literal|900
expr_stmt|;
comment|// expected position after
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Slider to maximum"
argument_list|)
operator|<<
name|int
argument_list|(
name|QAbstractSlider
operator|::
name|SliderToMaximum
argument_list|)
comment|// sliderAction
operator|<<
literal|1000
comment|// max
operator|<<
literal|900
comment|// min
operator|<<
literal|988
comment|// initial position
operator|<<
literal|245
comment|// single step size
operator|<<
literal|1
comment|// page step size
operator|<<
literal|1000
expr_stmt|;
comment|// expected position after
block|}
end_function
begin_function
DECL|function|triggerAction
name|void
name|tst_QAbstractSlider
operator|::
name|triggerAction
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|sliderAction
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|maximum
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|minimum
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|initialSliderPosition
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|singleStep
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|pageStep
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedSliderPosition
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setTracking
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setRange
argument_list|(
name|minimum
argument_list|,
name|maximum
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setSingleStep
argument_list|(
name|singleStep
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setPageStep
argument_list|(
name|pageStep
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slider
operator|->
name|singleStep
argument_list|()
argument_list|,
name|qAbs
argument_list|(
name|singleStep
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slider
operator|->
name|pageStep
argument_list|()
argument_list|,
name|qAbs
argument_list|(
name|pageStep
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|oldPosition
init|=
name|slider
operator|->
name|sliderPosition
argument_list|()
decl_stmt|;
name|slider
operator|->
name|setSliderPosition
argument_list|(
name|initialSliderPosition
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|oldPosition
operator|==
name|initialSliderPosition
operator|&&
name|previousAction
operator|==
name|int
argument_list|(
name|QAbstractSlider
operator|::
name|SliderNoAction
argument_list|)
operator|)
operator|||
operator|(
name|oldPosition
operator|!=
name|initialSliderPosition
operator|&&
name|previousAction
operator|==
name|int
argument_list|(
name|QAbstractSlider
operator|::
name|SliderMove
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|previousAction
operator|=
name|int
argument_list|(
name|QAbstractSlider
operator|::
name|SliderNoAction
argument_list|)
expr_stmt|;
name|QAbstractSlider
operator|::
name|SliderAction
modifier|*
name|action
init|=
cast|reinterpret_cast
argument_list|<
name|QAbstractSlider
operator|::
name|SliderAction
operator|*
argument_list|>
argument_list|(
operator|&
name|sliderAction
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|action
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|slider
operator|->
name|triggerAction
argument_list|(
operator|*
name|action
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|previousAction
argument_list|,
name|sliderAction
argument_list|)
expr_stmt|;
comment|// previousAction set in the actionTriggered() slot
name|QCOMPARE
argument_list|(
name|slider
operator|->
name|sliderPosition
argument_list|()
argument_list|,
name|expectedSliderPosition
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slider
operator|->
name|value
argument_list|()
argument_list|,
name|expectedSliderPosition
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reportedValue
argument_list|,
name|expectedSliderPosition
argument_list|)
expr_stmt|;
name|previousAction
operator|=
name|int
argument_list|(
name|QAbstractSlider
operator|::
name|SliderNoAction
argument_list|)
expr_stmt|;
if|if
condition|(
name|initialSliderPosition
operator|!=
name|expectedSliderPosition
condition|)
name|QVERIFY
argument_list|(
name|actionTriggeredTimeStamp
operator|<
name|valueChangedTimeStamp
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|minimum_maximum_data
name|void
name|tst_QAbstractSlider
operator|::
name|minimum_maximum_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"minimum"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"maximum"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedMinimum"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedMaximum"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Normal range"
argument_list|)
operator|<<
literal|100
operator|<<
literal|200
operator|<<
literal|100
operator|<<
literal|200
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Minimum higher"
argument_list|)
operator|<<
literal|100
operator|<<
literal|0
operator|<<
literal|100
operator|<<
literal|100
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Negative minimum"
argument_list|)
operator|<<
operator|-
literal|100
operator|<<
literal|100
operator|<<
operator|-
literal|100
operator|<<
literal|100
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Negative range"
argument_list|)
operator|<<
operator|-
literal|100
operator|<<
operator|-
literal|50
operator|<<
operator|-
literal|100
operator|<<
operator|-
literal|50
expr_stmt|;
block|}
end_function
begin_function
DECL|function|minimum_maximum
name|void
name|tst_QAbstractSlider
operator|::
name|minimum_maximum
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|minimum
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|maximum
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedMinimum
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedMaximum
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setRange
argument_list|(
name|minimum
argument_list|,
name|maximum
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slider
operator|->
name|minimum
argument_list|()
argument_list|,
name|expectedMinimum
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slider
operator|->
name|maximum
argument_list|()
argument_list|,
name|expectedMaximum
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reportedMinimum
argument_list|,
name|expectedMinimum
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reportedMaximum
argument_list|,
name|expectedMaximum
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setRange
argument_list|(
name|minimum
argument_list|,
name|maximum
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setMaximum
argument_list|(
name|slider
operator|->
name|minimum
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slider
operator|->
name|maximum
argument_list|()
argument_list|,
name|slider
operator|->
name|minimum
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reportedMinimum
argument_list|,
name|slider
operator|->
name|minimum
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reportedMaximum
argument_list|,
name|slider
operator|->
name|maximum
argument_list|()
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setRange
argument_list|(
name|minimum
argument_list|,
name|maximum
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setMinimum
argument_list|(
name|slider
operator|->
name|maximum
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slider
operator|->
name|minimum
argument_list|()
argument_list|,
name|slider
operator|->
name|maximum
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reportedMinimum
argument_list|,
name|slider
operator|->
name|minimum
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reportedMaximum
argument_list|,
name|slider
operator|->
name|maximum
argument_list|()
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setRange
argument_list|(
name|minimum
argument_list|,
name|maximum
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setSliderPosition
argument_list|(
name|slider
operator|->
name|maximum
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slider
operator|->
name|sliderPosition
argument_list|()
argument_list|,
name|slider
operator|->
name|maximum
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slider
operator|->
name|value
argument_list|()
argument_list|,
name|slider
operator|->
name|maximum
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reportedValue
argument_list|,
name|slider
operator|->
name|maximum
argument_list|()
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setRange
argument_list|(
name|minimum
argument_list|,
name|maximum
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setSliderPosition
argument_list|(
name|slider
operator|->
name|minimum
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slider
operator|->
name|sliderPosition
argument_list|()
argument_list|,
name|slider
operator|->
name|minimum
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slider
operator|->
name|value
argument_list|()
argument_list|,
name|slider
operator|->
name|minimum
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reportedValue
argument_list|,
name|slider
operator|->
name|minimum
argument_list|()
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setRange
argument_list|(
name|minimum
argument_list|,
name|maximum
argument_list|)
expr_stmt|;
name|int
name|oldPosition
init|=
name|slider
operator|->
name|sliderPosition
argument_list|()
decl_stmt|;
name|slider
operator|->
name|setMaximum
argument_list|(
name|oldPosition
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slider
operator|->
name|sliderPosition
argument_list|()
argument_list|,
name|oldPosition
operator|-
literal|1
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setRange
argument_list|(
name|minimum
argument_list|,
name|maximum
argument_list|)
expr_stmt|;
name|oldPosition
operator|=
name|slider
operator|->
name|sliderPosition
argument_list|()
expr_stmt|;
name|slider
operator|->
name|setMinimum
argument_list|(
name|oldPosition
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slider
operator|->
name|sliderPosition
argument_list|()
argument_list|,
name|oldPosition
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|keyPressed_data
name|void
name|tst_QAbstractSlider
operator|::
name|keyPressed_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"initialSliderPosition"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"minimum"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"maximum"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"stepSize"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"pageSize"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|Qt
operator|::
name|Key
argument_list|>
argument_list|>
argument_list|(
literal|"keySequence"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedSliderPositionHorizontal"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedSliderPositionVertical"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedSliderPositionHorizontalInverted"
argument_list|)
expr_stmt|;
comment|// :)
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedSliderPositionVerticalInverted"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|Qt
operator|::
name|Key
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
name|Qt
operator|::
name|Key_Down
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Step down once 1"
argument_list|)
operator|<<
literal|10
comment|// initial position
operator|<<
literal|0
comment|// minimum
operator|<<
literal|100
comment|// maximum
operator|<<
literal|3
comment|// single step size
operator|<<
literal|0
comment|// page step size
operator|<<
name|list
comment|// key sequence
operator|<<
literal|7
comment|// result in case of horizontal slider
operator|<<
literal|7
comment|// result in case of vertical slider
operator|<<
literal|13
comment|// result in case of inverted horiz. slider
operator|<<
literal|13
expr_stmt|;
comment|// result in case of inverted vertical slider
name|list
operator|=
name|QList
argument_list|<
name|Qt
operator|::
name|Key
argument_list|>
argument_list|()
expr_stmt|;
name|list
operator|<<
name|Qt
operator|::
name|Key_Up
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Step down once 2"
argument_list|)
operator|<<
literal|10
comment|// initial position
operator|<<
literal|0
comment|// minimum
operator|<<
literal|100
comment|// maximum
operator|<<
literal|3
comment|// single step size
operator|<<
literal|0
comment|// page step size
operator|<<
name|list
comment|// key sequence
operator|<<
literal|13
comment|// result in case of horizontal slider
operator|<<
literal|13
comment|// result in case of vertical slider
operator|<<
literal|7
comment|// result in case of inverted horiz. slider
operator|<<
literal|7
expr_stmt|;
comment|// result in case of inverted vertical slider
name|list
operator|=
name|QList
argument_list|<
name|Qt
operator|::
name|Key
argument_list|>
argument_list|()
expr_stmt|;
name|list
operator|<<
name|Qt
operator|::
name|Key_Left
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Step left once"
argument_list|)
operator|<<
literal|10
comment|// initial position
operator|<<
literal|0
comment|// minimum
operator|<<
literal|100
comment|// maximum
operator|<<
literal|3
comment|// single step size
operator|<<
literal|0
comment|// page step size
operator|<<
name|list
comment|// key sequence
operator|<<
literal|7
comment|// result in case of horizontal slider
operator|<<
literal|7
comment|// result in case of vertical slider
operator|<<
literal|13
comment|// result in case of inverted horiz. slider
operator|<<
literal|13
expr_stmt|;
comment|// result in case of inverted vertical slider
name|list
operator|=
name|QList
argument_list|<
name|Qt
operator|::
name|Key
argument_list|>
argument_list|()
expr_stmt|;
name|list
operator|<<
name|Qt
operator|::
name|Key_Right
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Step right once"
argument_list|)
operator|<<
literal|10
comment|// initial position
operator|<<
literal|0
comment|// minimum
operator|<<
literal|100
comment|// maximum
operator|<<
literal|3
comment|// single step size
operator|<<
literal|0
comment|// page step size
operator|<<
name|list
comment|// key sequence
operator|<<
literal|13
comment|// result in case of horizontal slider
operator|<<
literal|13
comment|// result in case of vertical slider
operator|<<
literal|7
comment|// result in case of inverted horiz. slider
operator|<<
literal|7
expr_stmt|;
comment|// result in case of inverted vertical slider
name|list
operator|=
name|QList
argument_list|<
name|Qt
operator|::
name|Key
argument_list|>
argument_list|()
expr_stmt|;
name|list
operator|<<
name|Qt
operator|::
name|Key_PageDown
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Page down once"
argument_list|)
operator|<<
literal|10
comment|// initial position
operator|<<
literal|0
comment|// minimum
operator|<<
literal|100
comment|// maximum
operator|<<
literal|0
comment|// single step size
operator|<<
literal|3
comment|// page step size
operator|<<
name|list
comment|// key sequence
operator|<<
literal|7
comment|// result in case of horizontal slider
operator|<<
literal|7
comment|// result in case of vertical slider
operator|<<
literal|13
comment|// result in case of inverted horiz. slider
operator|<<
literal|13
expr_stmt|;
comment|// result in case of inverted vertical slider
name|list
operator|=
name|QList
argument_list|<
name|Qt
operator|::
name|Key
argument_list|>
argument_list|()
expr_stmt|;
name|list
operator|<<
name|Qt
operator|::
name|Key_PageUp
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Page up once"
argument_list|)
operator|<<
literal|10
comment|// initial position
operator|<<
literal|0
comment|// minimum
operator|<<
literal|100
comment|// maximum
operator|<<
literal|0
comment|// single step size
operator|<<
literal|3
comment|// page step size
operator|<<
name|list
comment|// key sequence
operator|<<
literal|13
comment|// result in case of horizontal slider
operator|<<
literal|13
comment|// result in case of vertical slider
operator|<<
literal|7
comment|// result in case of inverted horiz. slider
operator|<<
literal|7
expr_stmt|;
comment|// result in case of inverted vertical slider
name|list
operator|=
name|QList
argument_list|<
name|Qt
operator|::
name|Key
argument_list|>
argument_list|()
expr_stmt|;
name|list
operator|<<
name|Qt
operator|::
name|Key_Up
operator|<<
name|Qt
operator|::
name|Key_Up
operator|<<
name|Qt
operator|::
name|Key_PageDown
operator|<<
name|Qt
operator|::
name|Key_PageDown
operator|<<
name|Qt
operator|::
name|Key_Left
operator|<<
name|Qt
operator|::
name|Key_Left
operator|<<
name|Qt
operator|::
name|Key_Right
operator|<<
name|Qt
operator|::
name|Key_Down
operator|<<
name|Qt
operator|::
name|Key_PageUp
operator|<<
name|Qt
operator|::
name|Key_PageUp
operator|<<
name|Qt
operator|::
name|Key_Down
operator|<<
name|Qt
operator|::
name|Key_Right
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Symmetric seq"
argument_list|)
operator|<<
literal|50
comment|// initial position
operator|<<
literal|0
comment|// minimum
operator|<<
literal|100
comment|// maximum
operator|<<
literal|3
comment|// single step size
operator|<<
literal|3
comment|// page step size
operator|<<
name|list
comment|// key sequence
operator|<<
literal|50
comment|// result in case of horizontal slider
operator|<<
literal|50
comment|// result in case of vertical slider
operator|<<
literal|50
comment|// result in case of inverted horiz. slider
operator|<<
literal|50
expr_stmt|;
comment|// result in case of inverted vertical slider
name|list
operator|=
name|QList
argument_list|<
name|Qt
operator|::
name|Key
argument_list|>
argument_list|()
expr_stmt|;
name|list
operator|<<
name|Qt
operator|::
name|Key_Home
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Home"
argument_list|)
operator|<<
literal|10
comment|// initial position
operator|<<
literal|0
comment|// minimum
operator|<<
literal|100
comment|// maximum
operator|<<
literal|0
comment|// single step size
operator|<<
literal|3
comment|// page step size
operator|<<
name|list
comment|// key sequence
operator|<<
literal|0
comment|// result in case of horizontal slider
operator|<<
literal|0
comment|// result in case of vertical slider
operator|<<
literal|0
comment|// result in case of inverted horiz. slider
operator|<<
literal|0
expr_stmt|;
comment|// result in case of inverted vertical slider
name|list
operator|=
name|QList
argument_list|<
name|Qt
operator|::
name|Key
argument_list|>
argument_list|()
expr_stmt|;
name|list
operator|<<
name|Qt
operator|::
name|Key_End
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"End"
argument_list|)
operator|<<
literal|10
comment|// initial position
operator|<<
literal|0
comment|// minimum
operator|<<
literal|100
comment|// maximum
operator|<<
literal|0
comment|// single step size
operator|<<
literal|3
comment|// page step size
operator|<<
name|list
comment|// key sequence
operator|<<
literal|100
comment|// result in case of horizontal slider
operator|<<
literal|100
comment|// result in case of vertical slider
operator|<<
literal|100
comment|// result in case of inverted horiz. slider
operator|<<
literal|100
expr_stmt|;
comment|// result in case of inverted vertical slider
name|list
operator|=
name|QList
argument_list|<
name|Qt
operator|::
name|Key
argument_list|>
argument_list|()
expr_stmt|;
name|list
operator|<<
name|Qt
operator|::
name|Key_End
operator|<<
name|Qt
operator|::
name|Key_Up
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Past end"
argument_list|)
operator|<<
literal|10
comment|// initial position
operator|<<
literal|0
comment|// minimum
operator|<<
literal|100
comment|// maximum
operator|<<
literal|3
comment|// single step size
operator|<<
literal|3
comment|// page step size
operator|<<
name|list
comment|// key sequence
operator|<<
literal|100
comment|// result in case of horizontal slider
operator|<<
literal|100
comment|// result in case of vertical slider
operator|<<
literal|97
comment|// result in case of inverted horiz. slider
operator|<<
literal|97
expr_stmt|;
comment|// result in case of inverted vertical slider
name|list
operator|=
name|QList
argument_list|<
name|Qt
operator|::
name|Key
argument_list|>
argument_list|()
expr_stmt|;
name|list
operator|<<
name|Qt
operator|::
name|Key_Home
operator|<<
name|Qt
operator|::
name|Key_Down
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Past home"
argument_list|)
operator|<<
literal|10
comment|// initial position
operator|<<
literal|0
comment|// minimum
operator|<<
literal|100
comment|// maximum
operator|<<
literal|3
comment|// single step size
operator|<<
literal|3
comment|// page step size
operator|<<
name|list
comment|// key sequence
operator|<<
literal|0
comment|// result in case of horizontal slider
operator|<<
literal|0
comment|// result in case of vertical slider
operator|<<
literal|3
comment|// result in case of inverted horiz. slider
operator|<<
literal|3
expr_stmt|;
comment|// result in case of inverted vertical slider
block|}
end_function
begin_function
DECL|function|keyPressed
name|void
name|tst_QAbstractSlider
operator|::
name|keyPressed
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|initialSliderPosition
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|minimum
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|maximum
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|stepSize
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|pageSize
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|Qt
operator|::
name|Key
argument_list|>
argument_list|,
name|keySequence
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedSliderPositionHorizontal
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedSliderPositionVertical
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedSliderPositionHorizontalInverted
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedSliderPositionVerticalInverted
argument_list|)
expr_stmt|;
comment|// Horizontal non-inverted
name|slider
operator|->
name|setRange
argument_list|(
name|minimum
argument_list|,
name|maximum
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setSliderPosition
argument_list|(
name|initialSliderPosition
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setSingleStep
argument_list|(
name|stepSize
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setPageStep
argument_list|(
name|pageSize
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setOrientation
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setInvertedAppearance
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setInvertedControls
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keySequence
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QTest
operator|::
name|keyClick
argument_list|(
name|slider
argument_list|,
name|keySequence
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|slider
operator|->
name|sliderPosition
argument_list|()
argument_list|,
name|expectedSliderPositionHorizontal
argument_list|)
expr_stmt|;
comment|// Horizontal inverted
name|slider
operator|->
name|setRange
argument_list|(
name|minimum
argument_list|,
name|maximum
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setSliderPosition
argument_list|(
name|initialSliderPosition
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setSingleStep
argument_list|(
name|stepSize
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setPageStep
argument_list|(
name|pageSize
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setOrientation
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setInvertedAppearance
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setInvertedControls
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keySequence
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
name|QTest
operator|::
name|keyPress
argument_list|(
name|slider
argument_list|,
name|keySequence
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slider
operator|->
name|sliderPosition
argument_list|()
argument_list|,
name|expectedSliderPositionHorizontalInverted
argument_list|)
expr_stmt|;
comment|// Vertical non-inverted
name|slider
operator|->
name|setRange
argument_list|(
name|minimum
argument_list|,
name|maximum
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setSliderPosition
argument_list|(
name|initialSliderPosition
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setSingleStep
argument_list|(
name|stepSize
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setPageStep
argument_list|(
name|pageSize
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setOrientation
argument_list|(
name|Qt
operator|::
name|Vertical
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setInvertedAppearance
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setInvertedControls
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keySequence
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
name|QTest
operator|::
name|keyPress
argument_list|(
name|slider
argument_list|,
name|keySequence
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slider
operator|->
name|sliderPosition
argument_list|()
argument_list|,
name|expectedSliderPositionVertical
argument_list|)
expr_stmt|;
comment|// Vertical inverted
name|slider
operator|->
name|setRange
argument_list|(
name|minimum
argument_list|,
name|maximum
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setSliderPosition
argument_list|(
name|initialSliderPosition
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setSingleStep
argument_list|(
name|stepSize
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setPageStep
argument_list|(
name|pageSize
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setOrientation
argument_list|(
name|Qt
operator|::
name|Vertical
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setInvertedAppearance
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setInvertedControls
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keySequence
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
name|QTest
operator|::
name|keyPress
argument_list|(
name|slider
argument_list|,
name|keySequence
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slider
operator|->
name|sliderPosition
argument_list|()
argument_list|,
name|expectedSliderPositionVerticalInverted
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|wheelEvent_data
name|void
name|tst_QAbstractSlider
operator|::
name|wheelEvent_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"initialSliderPosition"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"minimum"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"maximum"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"singleStep"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"pageStep"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"invertedControls"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"wheelScrollLines"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"withModifiers"
argument_list|)
expr_stmt|;
comment|// use keyboard modifiers while scrolling? (CTRL and SHIFT)
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"deltaMultiple"
argument_list|)
expr_stmt|;
comment|// multiples of WHEEL_DELTA
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"sliderOrientation"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"wheelOrientation"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedSliderPosition"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QPoint
argument_list|>
argument_list|(
literal|"distanceFromBottomRight"
argument_list|)
expr_stmt|;
comment|// mpointer's distance from bottom-right corner of widget
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Normal data step"
argument_list|)
operator|<<
literal|0
comment|// initial position
operator|<<
literal|0
comment|// minimum
operator|<<
literal|100
comment|// maximum
operator|<<
literal|1
comment|// single step
operator|<<
literal|100
comment|// page step
operator|<<
literal|false
comment|// inverted controls
operator|<<
literal|20
comment|// wheel scroll lines
operator|<<
literal|false
comment|// with modifiers
operator|<<
literal|1
comment|// delta
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Vertical
argument_list|)
comment|// orientation of slider
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Vertical
argument_list|)
comment|// orientation of wheel
operator|<<
literal|20
comment|// expected position after
operator|<<
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Normal data page"
argument_list|)
operator|<<
literal|0
comment|// initial position
operator|<<
literal|0
comment|// minimum
operator|<<
literal|100
comment|// maximum
operator|<<
literal|100
comment|// single step
operator|<<
literal|1
comment|// page step
operator|<<
literal|false
comment|// inverted controls
operator|<<
literal|20
comment|// wheel scroll lines
operator|<<
literal|false
comment|// with modifiers
operator|<<
literal|1
comment|// delta
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Vertical
argument_list|)
comment|// orientation of slider
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Vertical
argument_list|)
comment|// orientation of wheel
ifndef|#
directive|ifndef
name|Q_OS_MAC
operator|<<
literal|1
comment|// expected position after
else|#
directive|else
comment|// We don't restrict scrolling to pageStep on Mac
operator|<<
literal|100
comment|// expected position after
endif|#
directive|endif
operator|<<
name|QPoint
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Different orientation"
argument_list|)
operator|<<
literal|0
comment|// initial position
operator|<<
literal|0
comment|// minimum
operator|<<
literal|100
comment|// maximum
operator|<<
literal|100
comment|// single step
operator|<<
literal|1
comment|// page step
operator|<<
literal|false
comment|// inverted controls
operator|<<
literal|20
comment|// wheel scroll lines
operator|<<
literal|false
comment|// with modifiers
operator|<<
literal|1
comment|// delta
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|)
comment|// orientation of slider
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Vertical
argument_list|)
comment|// orientation of wheel
ifndef|#
directive|ifndef
name|Q_OS_MAC
operator|<<
literal|1
comment|// expected position after
else|#
directive|else
comment|// We don't restrict scrolling to pageStep on Mac
operator|<<
literal|100
comment|// expected position after
endif|#
directive|endif
operator|<<
name|QPoint
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Different orientation2"
argument_list|)
operator|<<
literal|0
comment|// initial position
operator|<<
literal|0
comment|// minimum
operator|<<
literal|100
comment|// maximum
operator|<<
literal|100
comment|// single step
operator|<<
literal|1
comment|// page step
operator|<<
literal|false
comment|// inverted controls
operator|<<
literal|20
comment|// wheel scroll lines
operator|<<
literal|false
comment|// with modifiers
operator|<<
literal|1
comment|// delta
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|)
comment|// orientation of slider
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Vertical
argument_list|)
comment|// orientation of wheel
ifndef|#
directive|ifndef
name|Q_OS_MAC
operator|<<
literal|1
comment|// expected position after
else|#
directive|else
comment|// We don't restrict scrolling to pageStep on Mac
operator|<<
literal|100
comment|// expected position after
endif|#
directive|endif
operator|<<
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Inverted controls"
argument_list|)
operator|<<
literal|50
comment|// initial position
operator|<<
literal|0
comment|// minimum
operator|<<
literal|100
comment|// maximum
operator|<<
literal|1
comment|// single step
operator|<<
literal|100
comment|// page step
operator|<<
literal|true
comment|// inverted controls
operator|<<
literal|20
comment|// wheel scroll lines
operator|<<
literal|false
comment|// with modifiers
operator|<<
operator|-
literal|1
comment|// delta
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|)
comment|// orientation of slider
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|)
comment|// orientation of wheel
operator|<<
literal|30
comment|// expected position after
operator|<<
name|QPoint
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Past end"
argument_list|)
operator|<<
literal|50
comment|// initial position
operator|<<
literal|0
comment|// minimum
operator|<<
literal|100
comment|// maximum
operator|<<
literal|26
comment|// single step
operator|<<
literal|100
comment|// page step
operator|<<
literal|false
comment|// inverted controls
operator|<<
literal|1
comment|// wheel scroll lines
operator|<<
literal|false
comment|// with modifiers
operator|<<
operator|-
literal|2
comment|// delta
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|)
comment|// orientation of slider
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|)
comment|// orientation of wheel
operator|<<
literal|100
comment|// expected position after
operator|<<
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Past start"
argument_list|)
operator|<<
literal|50
comment|// initial position
operator|<<
literal|0
comment|// minimum
operator|<<
literal|100
comment|// maximum
operator|<<
literal|26
comment|// single step
operator|<<
literal|100
comment|// page step
operator|<<
literal|false
comment|// inverted controls
operator|<<
literal|1
comment|// wheel scroll lines
operator|<<
literal|false
comment|// with modifiers
operator|<<
literal|2
comment|// delta
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|)
comment|// orientation of slider
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|)
comment|// orientation of wheel
operator|<<
literal|0
comment|// expected position after
operator|<<
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"With modifiers"
argument_list|)
operator|<<
literal|50
comment|// initial position
operator|<<
literal|0
comment|// minimum
operator|<<
literal|100
comment|// maximum
operator|<<
literal|1
comment|// single step
operator|<<
literal|40
comment|// page step
operator|<<
literal|false
comment|// inverted controls
operator|<<
literal|20
comment|// wheel scroll lines
operator|<<
literal|true
comment|// with modifiers
operator|<<
operator|-
literal|1
comment|// delta
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|)
comment|// orientation of slider
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|)
comment|// orientation of wheel
operator|<<
literal|90
comment|// expected position after
operator|<<
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|wheelEvent
name|void
name|tst_QAbstractSlider
operator|::
name|wheelEvent
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|initialSliderPosition
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|minimum
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|maximum
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|singleStep
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|pageStep
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|invertedControls
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|wheelScrollLines
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|withModifiers
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|deltaMultiple
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|sliderOrientation
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|wheelOrientation
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedSliderPosition
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QPoint
argument_list|,
name|distanceFromBottomRight
argument_list|)
expr_stmt|;
name|QCoreApplication
modifier|*
name|applicationInstance
init|=
name|QCoreApplication
operator|::
name|instance
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|applicationInstance
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setWheelScrollLines
argument_list|(
name|wheelScrollLines
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|Orientation
name|orientation
init|=
operator|*
cast|reinterpret_cast
argument_list|<
name|Qt
operator|::
name|Orientation
operator|*
argument_list|>
argument_list|(
operator|&
name|sliderOrientation
argument_list|)
decl_stmt|;
name|slider
operator|->
name|setRange
argument_list|(
name|minimum
argument_list|,
name|maximum
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setSliderPosition
argument_list|(
name|initialSliderPosition
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setSingleStep
argument_list|(
name|singleStep
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setPageStep
argument_list|(
name|pageStep
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setInvertedControls
argument_list|(
name|invertedControls
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setOrientation
argument_list|(
name|orientation
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|KeyboardModifier
name|k
init|=
name|withModifiers
condition|?
name|Qt
operator|::
name|ControlModifier
else|:
name|Qt
operator|::
name|NoModifier
decl_stmt|;
name|orientation
operator|=
operator|*
cast|reinterpret_cast
argument_list|<
name|Qt
operator|::
name|Orientation
operator|*
argument_list|>
argument_list|(
operator|&
name|wheelOrientation
argument_list|)
expr_stmt|;
name|QWheelEvent
name|event
argument_list|(
name|slider
operator|->
name|rect
argument_list|()
operator|.
name|bottomRight
argument_list|()
operator|+
name|distanceFromBottomRight
argument_list|,
name|WHEEL_DELTA
operator|*
name|deltaMultiple
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|,
name|k
argument_list|,
name|orientation
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|applicationInstance
operator|->
name|sendEvent
argument_list|(
name|slider
argument_list|,
operator|&
name|event
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|QEXPECT_FAIL
argument_list|(
literal|"Normal data page"
argument_list|,
literal|"QTBUG-23679"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"Different orientation"
argument_list|,
literal|"QTBUG-23679"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"Different orientation2"
argument_list|,
literal|"QTBUG-23679"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|slider
operator|->
name|sliderPosition
argument_list|()
argument_list|,
name|expectedSliderPosition
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setSliderPosition
argument_list|(
name|initialSliderPosition
argument_list|)
expr_stmt|;
name|k
operator|=
name|withModifiers
condition|?
name|Qt
operator|::
name|ShiftModifier
else|:
name|Qt
operator|::
name|NoModifier
expr_stmt|;
name|event
operator|=
name|QWheelEvent
argument_list|(
name|slider
operator|->
name|rect
argument_list|()
operator|.
name|bottomRight
argument_list|()
operator|+
name|distanceFromBottomRight
argument_list|,
name|WHEEL_DELTA
operator|*
name|deltaMultiple
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|,
name|k
argument_list|,
name|orientation
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy1
argument_list|(
name|slider
argument_list|,
name|SIGNAL
argument_list|(
name|actionTriggered
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spy2
argument_list|(
name|slider
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|applicationInstance
operator|->
name|sendEvent
argument_list|(
name|slider
argument_list|,
operator|&
name|event
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|QEXPECT_FAIL
argument_list|(
literal|"Normal data page"
argument_list|,
literal|"QTBUG-23679"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"Different orientation"
argument_list|,
literal|"QTBUG-23679"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"Different orientation2"
argument_list|,
literal|"QTBUG-23679"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|slider
operator|->
name|sliderPosition
argument_list|()
argument_list|,
name|expectedSliderPosition
argument_list|)
expr_stmt|;
name|int
name|expectedSignalCount
init|=
operator|(
name|initialSliderPosition
operator|==
name|expectedSliderPosition
operator|)
condition|?
literal|0
else|:
literal|1
decl_stmt|;
name|QCOMPARE
argument_list|(
name|spy1
operator|.
name|count
argument_list|()
argument_list|,
name|expectedSignalCount
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy2
operator|.
name|count
argument_list|()
argument_list|,
name|expectedSignalCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedSignalCount
condition|)
name|QVERIFY
argument_list|(
name|actionTriggeredTimeStamp
operator|<
name|valueChangedTimeStamp
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sliderPressedReleased_data
name|void
name|tst_QAbstractSlider
operator|::
name|sliderPressedReleased_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"control"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"minimum"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"maximum"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|uint
argument_list|>
argument_list|(
literal|"subControl"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedCount"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"slider on the handle"
argument_list|)
operator|<<
name|int
argument_list|(
name|QStyle
operator|::
name|CC_Slider
argument_list|)
operator|<<
literal|0
operator|<<
literal|20
operator|<<
name|uint
argument_list|(
name|QStyle
operator|::
name|SC_SliderHandle
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"slider on the groove"
argument_list|)
operator|<<
name|int
argument_list|(
name|QStyle
operator|::
name|CC_Slider
argument_list|)
operator|<<
literal|0
operator|<<
literal|20
operator|<<
name|uint
argument_list|(
name|QStyle
operator|::
name|SC_SliderGroove
argument_list|)
operator|<<
operator|(
operator|(
name|qApp
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Slider_AbsoluteSetButtons
argument_list|)
operator|&
name|Qt
operator|::
name|LeftButton
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"scrollbar on the handle"
argument_list|)
operator|<<
name|int
argument_list|(
name|QStyle
operator|::
name|CC_ScrollBar
argument_list|)
operator|<<
literal|0
operator|<<
literal|20
operator|<<
name|uint
argument_list|(
name|QStyle
operator|::
name|SC_ScrollBarSlider
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"scrollbar on the groove"
argument_list|)
operator|<<
name|int
argument_list|(
name|QStyle
operator|::
name|CC_ScrollBar
argument_list|)
operator|<<
literal|0
operator|<<
literal|20
operator|<<
name|uint
argument_list|(
name|QStyle
operator|::
name|SC_ScrollBarGroove
argument_list|)
operator|<<
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sliderPressedReleased
name|void
name|tst_QAbstractSlider
operator|::
name|sliderPressedReleased
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|control
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|minimum
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|maximum
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|uint
argument_list|,
name|subControl
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedCount
argument_list|)
expr_stmt|;
name|QWidget
name|topLevel
decl_stmt|;
name|QAbstractSlider
modifier|*
name|slider
decl_stmt|;
switch|switch
condition|(
name|control
condition|)
block|{
default|default:
name|qWarning
argument_list|(
literal|"Bad input into test, leaving"
argument_list|)
expr_stmt|;
return|return;
break|break;
case|case
name|QStyle
operator|::
name|CC_Slider
case|:
name|slider
operator|=
operator|new
name|QSlider
argument_list|(
operator|&
name|topLevel
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setLayoutDirection
argument_list|(
name|Qt
operator|::
name|LeftToRight
argument_list|)
expr_stmt|;
comment|// Makes "upside down" much easier to compute
break|break;
case|case
name|QStyle
operator|::
name|CC_ScrollBar
case|:
name|slider
operator|=
operator|new
name|QScrollBar
argument_list|(
operator|&
name|topLevel
argument_list|)
expr_stmt|;
break|break;
block|}
name|slider
operator|->
name|setMinimum
argument_list|(
name|minimum
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setMaximum
argument_list|(
name|maximum
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setValue
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setOrientation
argument_list|(
name|Qt
operator|::
name|Vertical
argument_list|)
expr_stmt|;
name|slider
operator|->
name|resize
argument_list|(
name|slider
operator|->
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|slider
operator|->
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
operator|+
literal|100
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy1
argument_list|(
name|slider
argument_list|,
name|SIGNAL
argument_list|(
name|sliderPressed
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spy2
argument_list|(
name|slider
argument_list|,
name|SIGNAL
argument_list|(
name|sliderReleased
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// Mac Style requires the control to be active to get the correct values...
name|topLevel
operator|.
name|show
argument_list|()
expr_stmt|;
name|slider
operator|->
name|activateWindow
argument_list|()
expr_stmt|;
name|QStyleOptionSlider
name|option
decl_stmt|;
name|option
operator|.
name|init
argument_list|(
name|slider
argument_list|)
expr_stmt|;
name|option
operator|.
name|upsideDown
operator|=
name|control
operator|==
name|QStyle
operator|::
name|CC_Slider
condition|?
operator|!
name|slider
operator|->
name|invertedAppearance
argument_list|()
else|:
name|slider
operator|->
name|invertedAppearance
argument_list|()
expr_stmt|;
name|option
operator|.
name|subControls
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
name|option
operator|.
name|activeSubControls
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
name|option
operator|.
name|orientation
operator|=
name|slider
operator|->
name|orientation
argument_list|()
expr_stmt|;
name|option
operator|.
name|maximum
operator|=
name|maximum
expr_stmt|;
name|option
operator|.
name|minimum
operator|=
name|minimum
expr_stmt|;
name|option
operator|.
name|sliderPosition
operator|=
name|slider
operator|->
name|value
argument_list|()
expr_stmt|;
name|option
operator|.
name|sliderValue
operator|=
name|slider
operator|->
name|value
argument_list|()
expr_stmt|;
name|option
operator|.
name|singleStep
operator|=
name|slider
operator|->
name|singleStep
argument_list|()
expr_stmt|;
name|option
operator|.
name|pageStep
operator|=
name|slider
operator|->
name|pageStep
argument_list|()
expr_stmt|;
name|QRect
name|rect
init|=
name|slider
operator|->
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|ComplexControl
argument_list|(
name|control
argument_list|)
argument_list|,
operator|&
name|option
argument_list|,
name|QStyle
operator|::
name|SubControl
argument_list|(
name|subControl
argument_list|)
argument_list|,
name|slider
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|mousePress
argument_list|(
name|slider
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|QPoint
argument_list|(
name|rect
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
operator|+
literal|2
argument_list|,
name|rect
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|QEXPECT_FAIL
argument_list|(
literal|"scrollbar on the groove"
argument_list|,
literal|"QTBUG-23679"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|spy1
operator|.
name|count
argument_list|()
argument_list|,
name|expectedCount
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseRelease
argument_list|(
name|slider
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|rect
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|QEXPECT_FAIL
argument_list|(
literal|"scrollbar on the groove"
argument_list|,
literal|"QTBUG-23679"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|spy2
operator|.
name|count
argument_list|()
argument_list|,
name|expectedCount
argument_list|)
expr_stmt|;
operator|delete
name|slider
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sliderMoved_data
name|void
name|tst_QAbstractSlider
operator|::
name|sliderMoved_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"control"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"minimum"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"maximum"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"position"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"sliderDown"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedCount"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"slider pressed"
argument_list|)
operator|<<
name|int
argument_list|(
name|QStyle
operator|::
name|CC_Slider
argument_list|)
operator|<<
literal|0
operator|<<
literal|20
operator|<<
literal|10
operator|<<
literal|true
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"slider not pressed"
argument_list|)
operator|<<
name|int
argument_list|(
name|QStyle
operator|::
name|CC_Slider
argument_list|)
operator|<<
literal|0
operator|<<
literal|20
operator|<<
literal|10
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"scrollbar pressed"
argument_list|)
operator|<<
name|int
argument_list|(
name|QStyle
operator|::
name|CC_ScrollBar
argument_list|)
operator|<<
literal|0
operator|<<
literal|20
operator|<<
literal|10
operator|<<
literal|true
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"scrollbar not pressed"
argument_list|)
operator|<<
name|int
argument_list|(
name|QStyle
operator|::
name|CC_ScrollBar
argument_list|)
operator|<<
literal|0
operator|<<
literal|20
operator|<<
literal|10
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sliderMoved
name|void
name|tst_QAbstractSlider
operator|::
name|sliderMoved
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|control
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|minimum
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|maximum
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|sliderDown
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedCount
argument_list|)
expr_stmt|;
name|QAbstractSlider
modifier|*
name|slider
decl_stmt|;
switch|switch
condition|(
name|control
condition|)
block|{
default|default:
name|slider
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|CC_Slider
case|:
name|slider
operator|=
operator|new
name|QSlider
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|CC_ScrollBar
case|:
name|slider
operator|=
operator|new
name|QScrollBar
expr_stmt|;
break|break;
block|}
name|QSignalSpy
name|spy
argument_list|(
name|slider
argument_list|,
name|SIGNAL
argument_list|(
name|sliderMoved
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|slider
operator|->
name|setMinimum
argument_list|(
name|minimum
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setMaximum
argument_list|(
name|maximum
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setSliderDown
argument_list|(
name|sliderDown
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setSliderPosition
argument_list|(
name|position
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
name|expectedCount
argument_list|)
expr_stmt|;
operator|delete
name|slider
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setOrientation
name|void
name|tst_QAbstractSlider
operator|::
name|setOrientation
parameter_list|()
block|{
name|QSlider
name|slider
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QSizePolicy
name|sp
init|=
name|slider
operator|.
name|sizePolicy
argument_list|()
decl_stmt|;
name|slider
operator|.
name|setOrientation
argument_list|(
name|slider
operator|.
name|orientation
argument_list|()
argument_list|)
expr_stmt|;
name|QSizePolicy
name|sp2
init|=
name|slider
operator|.
name|sizePolicy
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|sp
argument_list|,
name|sp2
argument_list|)
expr_stmt|;
name|slider
operator|.
name|setOrientation
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|)
expr_stmt|;
name|sp
operator|=
name|slider
operator|.
name|sizePolicy
argument_list|()
expr_stmt|;
name|slider
operator|.
name|setOrientation
argument_list|(
name|Qt
operator|::
name|Vertical
argument_list|)
expr_stmt|;
name|sp2
operator|=
name|slider
operator|.
name|sizePolicy
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|sp
operator|!=
name|sp2
argument_list|)
expr_stmt|;
name|sp2
operator|.
name|transpose
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sp
argument_list|,
name|sp2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rangeChanged_data
name|void
name|tst_QAbstractSlider
operator|::
name|rangeChanged_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"minimum"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"maximum"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"newMin"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"newMax"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedCount"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no change"
argument_list|)
operator|<<
literal|0
operator|<<
literal|20
operator|<<
literal|0
operator|<<
literal|20
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"min change"
argument_list|)
operator|<<
literal|0
operator|<<
literal|20
operator|<<
literal|10
operator|<<
literal|20
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"max change"
argument_list|)
operator|<<
literal|0
operator|<<
literal|20
operator|<<
literal|0
operator|<<
literal|30
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"both change"
argument_list|)
operator|<<
literal|0
operator|<<
literal|20
operator|<<
literal|10
operator|<<
literal|30
operator|<<
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rangeChanged
name|void
name|tst_QAbstractSlider
operator|::
name|rangeChanged
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|minimum
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|maximum
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|newMin
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|newMax
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedCount
argument_list|)
expr_stmt|;
name|QSlider
name|slider
decl_stmt|;
name|slider
operator|.
name|setRange
argument_list|(
name|minimum
argument_list|,
name|maximum
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|slider
argument_list|,
name|SIGNAL
argument_list|(
name|rangeChanged
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|slider
operator|.
name|setRange
argument_list|(
name|newMin
argument_list|,
name|newMax
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
name|expectedCount
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setSliderPosition_data
name|void
name|tst_QAbstractSlider
operator|::
name|setSliderPosition_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"tracking"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"down"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"tracking, slider down"
argument_list|)
operator|<<
literal|true
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"tracking, slider not down"
argument_list|)
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no tracking, slider down"
argument_list|)
operator|<<
literal|false
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no tracking, slider not down"
argument_list|)
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setSliderPosition
name|void
name|tst_QAbstractSlider
operator|::
name|setSliderPosition
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|tracking
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|down
argument_list|)
expr_stmt|;
specifier|const
name|int
name|minimum
init|=
literal|0
decl_stmt|;
specifier|const
name|int
name|maximum
init|=
literal|100
decl_stmt|;
specifier|const
name|int
name|initialValue
init|=
literal|50
decl_stmt|;
specifier|const
name|int
name|targetPosition
init|=
literal|75
decl_stmt|;
name|slider
operator|->
name|setRange
argument_list|(
name|minimum
argument_list|,
name|maximum
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setTracking
argument_list|(
name|tracking
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setSliderDown
argument_list|(
name|down
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setValue
argument_list|(
name|initialValue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slider
operator|->
name|sliderPosition
argument_list|()
argument_list|,
name|initialValue
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy1
argument_list|(
name|slider
argument_list|,
name|SIGNAL
argument_list|(
name|sliderMoved
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spy2
argument_list|(
name|slider
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|slider
operator|->
name|setSliderPosition
argument_list|(
name|targetPosition
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slider
operator|->
name|sliderPosition
argument_list|()
argument_list|,
name|targetPosition
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy1
operator|.
name|count
argument_list|()
argument_list|,
name|down
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy2
operator|.
name|count
argument_list|()
argument_list|,
name|tracking
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slider
operator|->
name|value
argument_list|()
argument_list|,
name|tracking
condition|?
name|targetPosition
else|:
name|initialValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|tracking
operator|&&
name|down
condition|)
name|QVERIFY
argument_list|(
name|sliderMovedTimeStamp
operator|<
name|valueChangedTimeStamp
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setValue_data
name|void
name|tst_QAbstractSlider
operator|::
name|setValue_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"down"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"slider down"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"slider not down"
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setValue
name|void
name|tst_QAbstractSlider
operator|::
name|setValue
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|down
argument_list|)
expr_stmt|;
specifier|const
name|int
name|minimum
init|=
literal|0
decl_stmt|;
specifier|const
name|int
name|maximum
init|=
literal|100
decl_stmt|;
name|slider
operator|->
name|setRange
argument_list|(
name|minimum
argument_list|,
name|maximum
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setSliderDown
argument_list|(
name|down
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setValue
argument_list|(
literal|49
argument_list|)
expr_stmt|;
comment|// to force a valueChanged() below
name|QSignalSpy
name|spy1
argument_list|(
name|slider
argument_list|,
name|SIGNAL
argument_list|(
name|sliderMoved
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spy2
argument_list|(
name|slider
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spy3
argument_list|(
name|slider
argument_list|,
name|SIGNAL
argument_list|(
name|actionTriggered
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|slider
operator|->
name|setValue
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy1
operator|.
name|count
argument_list|()
argument_list|,
name|down
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy2
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy3
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slider
operator|->
name|value
argument_list|()
argument_list|,
name|reportedValue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slider
operator|->
name|sliderPosition
argument_list|()
argument_list|,
name|reportedSliderPosition
argument_list|)
expr_stmt|;
if|if
condition|(
name|down
condition|)
name|QVERIFY
argument_list|(
name|sliderMovedTimeStamp
operator|<
name|valueChangedTimeStamp
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|waitUntilTimeElapsed
name|void
name|tst_QAbstractSlider
operator|::
name|waitUntilTimeElapsed
parameter_list|(
specifier|const
name|QTime
modifier|&
name|t
parameter_list|,
name|int
name|ms
parameter_list|)
block|{
specifier|const
name|int
name|eps
init|=
literal|80
decl_stmt|;
while|while
condition|(
name|t
operator|.
name|elapsed
argument_list|()
operator|<
name|ms
operator|+
name|eps
condition|)
name|QTest
operator|::
name|qWait
argument_list|(
name|qMax
argument_list|(
name|ms
operator|-
name|t
operator|.
name|elapsed
argument_list|()
operator|+
name|eps
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setRepeatAction
name|void
name|tst_QAbstractSlider
operator|::
name|setRepeatAction
parameter_list|()
block|{
name|slider
operator|->
name|setRange
argument_list|(
literal|0
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setValue
argument_list|(
literal|55
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setPageStep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
name|slider
argument_list|,
name|SIGNAL
argument_list|(
name|actionTriggered
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Start repeat action with initial delay of 500 ms, and then repeating
comment|// every 250 ms.
name|slider
operator|->
name|setRepeatAction
argument_list|(
name|QAbstractSlider
operator|::
name|SliderPageStepAdd
argument_list|,
literal|500
argument_list|,
literal|250
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slider
operator|->
name|value
argument_list|()
argument_list|,
literal|55
argument_list|)
expr_stmt|;
name|QTime
name|t
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|300
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slider
operator|->
name|value
argument_list|()
argument_list|,
literal|55
argument_list|)
expr_stmt|;
name|waitUntilTimeElapsed
argument_list|(
name|t
argument_list|,
literal|550
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slider
operator|->
name|value
argument_list|()
argument_list|,
literal|65
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toUInt
argument_list|()
argument_list|,
operator|(
name|uint
operator|)
name|QAbstractSlider
operator|::
name|SliderPageStepAdd
argument_list|)
expr_stmt|;
name|waitUntilTimeElapsed
argument_list|(
name|t
argument_list|,
literal|790
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slider
operator|->
name|value
argument_list|()
argument_list|,
literal|75
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toUInt
argument_list|()
argument_list|,
operator|(
name|uint
operator|)
name|QAbstractSlider
operator|::
name|SliderPageStepAdd
argument_list|)
expr_stmt|;
name|waitUntilTimeElapsed
argument_list|(
name|t
argument_list|,
literal|1790
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slider
operator|->
name|value
argument_list|()
argument_list|,
literal|115
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|4
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toUInt
argument_list|()
argument_list|,
operator|(
name|uint
operator|)
name|QAbstractSlider
operator|::
name|SliderPageStepAdd
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|5
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toUInt
argument_list|()
argument_list|,
operator|(
name|uint
operator|)
name|QAbstractSlider
operator|::
name|SliderPageStepAdd
argument_list|)
expr_stmt|;
name|slider
operator|->
name|setRepeatAction
argument_list|(
name|QAbstractSlider
operator|::
name|SliderNoAction
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slider
operator|->
name|value
argument_list|()
argument_list|,
literal|115
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|300
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slider
operator|->
name|value
argument_list|()
argument_list|,
literal|115
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|connectedSliders
name|void
name|tst_QAbstractSlider
operator|::
name|connectedSliders
parameter_list|()
block|{
name|Slider
modifier|*
name|slider2
init|=
operator|new
name|Slider
argument_list|(
name|topLevel
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|slider
argument_list|,
name|SIGNAL
argument_list|(
name|rangeChanged
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|slider2
argument_list|,
name|SLOT
argument_list|(
name|setRange
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|int
name|sliderlow
init|=
literal|13
decl_stmt|;
specifier|const
name|int
name|sliderhigh
init|=
literal|1017
decl_stmt|;
name|slider
operator|->
name|setRange
argument_list|(
name|sliderlow
argument_list|,
name|sliderhigh
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slider2
operator|->
name|minimum
argument_list|()
argument_list|,
name|sliderlow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slider2
operator|->
name|maximum
argument_list|()
argument_list|,
name|sliderhigh
argument_list|)
expr_stmt|;
operator|delete
name|slider2
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QAbstractSlider
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qabstractslider.moc"
end_include
end_unit
