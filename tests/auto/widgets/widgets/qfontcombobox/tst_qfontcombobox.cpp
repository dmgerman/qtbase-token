begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qfontcombobox.h>
end_include
begin_class
DECL|class|tst_QFontComboBox
class|class
name|tst_QFontComboBox
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|qfontcombobox_data
parameter_list|()
function_decl|;
name|void
name|qfontcombobox
parameter_list|()
function_decl|;
name|void
name|currentFont_data
parameter_list|()
function_decl|;
name|void
name|currentFont
parameter_list|()
function_decl|;
name|void
name|fontFilters_data
parameter_list|()
function_decl|;
name|void
name|fontFilters
parameter_list|()
function_decl|;
name|void
name|sizeHint
parameter_list|()
function_decl|;
name|void
name|writingSystem_data
parameter_list|()
function_decl|;
name|void
name|writingSystem
parameter_list|()
function_decl|;
name|void
name|currentFontChanged
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_comment
comment|// Subclass that exposes the protected functions.
end_comment
begin_class
DECL|class|SubQFontComboBox
class|class
name|SubQFontComboBox
super|:
specifier|public
name|QFontComboBox
block|{
public|public:
DECL|function|call_currentFontChanged
name|void
name|call_currentFontChanged
parameter_list|(
name|QFont
specifier|const
modifier|&
name|f
parameter_list|)
block|{
return|return
name|SubQFontComboBox
operator|::
name|currentFontChanged
argument_list|(
name|f
argument_list|)
return|;
block|}
DECL|function|call_event
name|bool
name|call_event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
return|return
name|SubQFontComboBox
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_comment
comment|// This will be called before the first test function is executed.
end_comment
begin_comment
comment|// It is only called once.
end_comment
begin_function
DECL|function|initTestCase
name|void
name|tst_QFontComboBox
operator|::
name|initTestCase
parameter_list|()
block|{ }
end_function
begin_comment
comment|// This will be called after the last test function is executed.
end_comment
begin_comment
comment|// It is only called once.
end_comment
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QFontComboBox
operator|::
name|cleanupTestCase
parameter_list|()
block|{ }
end_function
begin_comment
comment|// This will be called before each test function is executed.
end_comment
begin_function
DECL|function|init
name|void
name|tst_QFontComboBox
operator|::
name|init
parameter_list|()
block|{ }
end_function
begin_comment
comment|// This will be called after every test function.
end_comment
begin_function
DECL|function|cleanup
name|void
name|tst_QFontComboBox
operator|::
name|cleanup
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|qfontcombobox_data
name|void
name|tst_QFontComboBox
operator|::
name|qfontcombobox_data
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|qfontcombobox
name|void
name|tst_QFontComboBox
operator|::
name|qfontcombobox
parameter_list|()
block|{
name|SubQFontComboBox
name|box
decl_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|currentFont
argument_list|()
argument_list|,
name|QFont
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|fontFilters
argument_list|()
argument_list|,
name|QFontComboBox
operator|::
name|AllFonts
argument_list|)
expr_stmt|;
name|box
operator|.
name|setCurrentFont
argument_list|(
name|QFont
argument_list|()
argument_list|)
expr_stmt|;
name|box
operator|.
name|setFontFilters
argument_list|(
name|QFontComboBox
operator|::
name|AllFonts
argument_list|)
expr_stmt|;
name|box
operator|.
name|setWritingSystem
argument_list|(
name|QFontDatabase
operator|::
name|Any
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|box
operator|.
name|sizeHint
argument_list|()
operator|!=
name|QSize
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|writingSystem
argument_list|()
argument_list|,
name|QFontDatabase
operator|::
name|Any
argument_list|)
expr_stmt|;
name|box
operator|.
name|call_currentFontChanged
argument_list|(
name|QFont
argument_list|()
argument_list|)
expr_stmt|;
name|QEvent
name|event
argument_list|(
name|QEvent
operator|::
name|None
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|call_event
argument_list|(
operator|&
name|event
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|currentFont_data
name|void
name|tst_QFontComboBox
operator|::
name|currentFont_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QFont
argument_list|>
argument_list|(
literal|"currentFont"
argument_list|)
expr_stmt|;
comment|// Normalize the names
name|QFont
name|defaultFont
decl_stmt|;
name|QFontInfo
name|fi
argument_list|(
name|defaultFont
argument_list|)
decl_stmt|;
name|defaultFont
operator|=
name|QFont
argument_list|(
name|fi
operator|.
name|family
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure we have a real font name and not something like 'Sans Serif'.
name|QTest
operator|::
name|newRow
argument_list|(
literal|"default"
argument_list|)
operator|<<
name|defaultFont
expr_stmt|;
name|defaultFont
operator|.
name|setPointSize
argument_list|(
name|defaultFont
operator|.
name|pointSize
argument_list|()
operator|+
literal|10
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"default2"
argument_list|)
operator|<<
name|defaultFont
expr_stmt|;
name|QFontDatabase
name|db
decl_stmt|;
name|QStringList
name|list
init|=
name|db
operator|.
name|families
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QFont
name|f
init|=
name|QFont
argument_list|(
name|QFontInfo
argument_list|(
name|QFont
argument_list|(
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
operator|.
name|family
argument_list|()
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|f
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// public QFont currentFont() const
end_comment
begin_function
DECL|function|currentFont
name|void
name|tst_QFontComboBox
operator|::
name|currentFont
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QFont
argument_list|,
name|currentFont
argument_list|)
expr_stmt|;
name|SubQFontComboBox
name|box
decl_stmt|;
name|QSignalSpy
name|spy0
argument_list|(
operator|&
name|box
argument_list|,
name|SIGNAL
argument_list|(
name|currentFontChanged
argument_list|(
name|QFont
specifier|const
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QFont
name|oldCurrentFont
init|=
name|box
operator|.
name|currentFont
argument_list|()
decl_stmt|;
name|box
operator|.
name|setCurrentFont
argument_list|(
name|currentFont
argument_list|)
expr_stmt|;
name|QRegExp
name|foundry
argument_list|(
literal|" \\[.*\\]"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|box
operator|.
name|currentFont
argument_list|()
operator|.
name|family
argument_list|()
operator|.
name|contains
argument_list|(
name|foundry
argument_list|)
condition|)
block|{
name|QCOMPARE
argument_list|(
name|box
operator|.
name|currentFont
argument_list|()
argument_list|,
name|currentFont
argument_list|)
expr_stmt|;
block|}
name|QString
name|boxFontFamily
init|=
name|QFontInfo
argument_list|(
name|box
operator|.
name|currentFont
argument_list|()
argument_list|)
operator|.
name|family
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|currentFont
operator|.
name|family
argument_list|()
operator|.
name|contains
argument_list|(
name|foundry
argument_list|)
condition|)
name|boxFontFamily
operator|.
name|remove
argument_list|(
name|foundry
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|boxFontFamily
argument_list|,
name|currentFont
operator|.
name|family
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldCurrentFont
operator|!=
name|box
operator|.
name|currentFont
argument_list|()
condition|)
block|{
comment|//the signal may be emit twice if there is a foundry into brackets
name|QCOMPARE
argument_list|(
name|spy0
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QFontComboBox::FontFilters
argument_list|)
end_macro
begin_function
DECL|function|fontFilters_data
name|void
name|tst_QFontComboBox
operator|::
name|fontFilters_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QFontComboBox
operator|::
name|FontFilters
argument_list|>
argument_list|(
literal|"fontFilters"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"AllFonts"
argument_list|)
operator|<<
name|QFontComboBox
operator|::
name|FontFilters
argument_list|(
name|QFontComboBox
operator|::
name|AllFonts
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ScalableFonts"
argument_list|)
operator|<<
name|QFontComboBox
operator|::
name|FontFilters
argument_list|(
name|QFontComboBox
operator|::
name|ScalableFonts
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"NonScalableFonts"
argument_list|)
operator|<<
name|QFontComboBox
operator|::
name|FontFilters
argument_list|(
name|QFontComboBox
operator|::
name|NonScalableFonts
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"MonospacedFonts"
argument_list|)
operator|<<
name|QFontComboBox
operator|::
name|FontFilters
argument_list|(
name|QFontComboBox
operator|::
name|MonospacedFonts
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ProportionalFonts"
argument_list|)
operator|<<
name|QFontComboBox
operator|::
name|FontFilters
argument_list|(
name|QFontComboBox
operator|::
name|ProportionalFonts
argument_list|)
expr_stmt|;
comment|// combine two
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ProportionalFonts | NonScalableFonts"
argument_list|)
operator|<<
name|QFontComboBox
operator|::
name|FontFilters
argument_list|(
name|QFontComboBox
operator|::
name|ProportionalFonts
operator||
name|QFontComboBox
operator|::
name|NonScalableFonts
argument_list|)
expr_stmt|;
comment|// i.e. all
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ScalableFonts | NonScalableFonts"
argument_list|)
operator|<<
name|QFontComboBox
operator|::
name|FontFilters
argument_list|(
name|QFontComboBox
operator|::
name|ScalableFonts
operator||
name|QFontComboBox
operator|::
name|NonScalableFonts
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// public QFontComboBox::FontFilters fontFilters() const
end_comment
begin_function
DECL|function|fontFilters
name|void
name|tst_QFontComboBox
operator|::
name|fontFilters
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QFontComboBox
operator|::
name|FontFilters
argument_list|,
name|fontFilters
argument_list|)
expr_stmt|;
name|SubQFontComboBox
name|box
decl_stmt|;
name|QSignalSpy
name|spy0
argument_list|(
operator|&
name|box
argument_list|,
name|SIGNAL
argument_list|(
name|currentFontChanged
argument_list|(
name|QFont
specifier|const
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QFont
name|currentFont
init|=
name|box
operator|.
name|currentFont
argument_list|()
decl_stmt|;
name|box
operator|.
name|setFontFilters
argument_list|(
name|fontFilters
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|fontFilters
argument_list|()
argument_list|,
name|fontFilters
argument_list|)
expr_stmt|;
name|QFontDatabase
name|db
decl_stmt|;
name|QStringList
name|list
init|=
name|db
operator|.
name|families
argument_list|()
decl_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
specifier|const
name|int
name|scalableMask
init|=
operator|(
name|QFontComboBox
operator|::
name|ScalableFonts
operator||
name|QFontComboBox
operator|::
name|NonScalableFonts
operator|)
decl_stmt|;
specifier|const
name|int
name|spacingMask
init|=
operator|(
name|QFontComboBox
operator|::
name|ProportionalFonts
operator||
name|QFontComboBox
operator|::
name|MonospacedFonts
operator|)
decl_stmt|;
if|if
condition|(
operator|(
name|fontFilters
operator|&
name|scalableMask
operator|)
operator|==
name|scalableMask
condition|)
name|fontFilters
operator|&=
operator|~
name|scalableMask
expr_stmt|;
if|if
condition|(
operator|(
name|fontFilters
operator|&
name|spacingMask
operator|)
operator|==
name|spacingMask
condition|)
name|fontFilters
operator|&=
operator|~
name|spacingMask
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|fontFilters
operator|&
name|QFontComboBox
operator|::
name|ScalableFonts
condition|)
block|{
if|if
condition|(
operator|!
name|db
operator|.
name|isSmoothlyScalable
argument_list|(
name|list
index|[
name|i
index|]
argument_list|)
condition|)
continue|continue;
block|}
elseif|else
if|if
condition|(
name|fontFilters
operator|&
name|QFontComboBox
operator|::
name|NonScalableFonts
condition|)
block|{
if|if
condition|(
name|db
operator|.
name|isSmoothlyScalable
argument_list|(
name|list
index|[
name|i
index|]
argument_list|)
condition|)
continue|continue;
block|}
if|if
condition|(
name|fontFilters
operator|&
name|QFontComboBox
operator|::
name|MonospacedFonts
condition|)
block|{
if|if
condition|(
operator|!
name|db
operator|.
name|isFixedPitch
argument_list|(
name|list
index|[
name|i
index|]
argument_list|)
condition|)
continue|continue;
block|}
elseif|else
if|if
condition|(
name|fontFilters
operator|&
name|QFontComboBox
operator|::
name|ProportionalFonts
condition|)
block|{
if|if
condition|(
name|db
operator|.
name|isFixedPitch
argument_list|(
name|list
index|[
name|i
index|]
argument_list|)
condition|)
continue|continue;
block|}
name|c
operator|++
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|box
operator|.
name|model
argument_list|()
operator|->
name|rowCount
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|0
condition|)
name|QCOMPARE
argument_list|(
name|box
operator|.
name|currentFont
argument_list|()
argument_list|,
name|QFont
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy0
operator|.
name|count
argument_list|()
argument_list|,
operator|(
name|currentFont
operator|!=
name|box
operator|.
name|currentFont
argument_list|()
operator|)
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// public QSize sizeHint() const
end_comment
begin_function
DECL|function|sizeHint
name|void
name|tst_QFontComboBox
operator|::
name|sizeHint
parameter_list|()
block|{
name|SubQFontComboBox
name|box
decl_stmt|;
name|QSize
name|sizeHint
init|=
name|box
operator|.
name|QComboBox
operator|::
name|sizeHint
argument_list|()
decl_stmt|;
name|QFontMetrics
name|fm
argument_list|(
name|box
operator|.
name|font
argument_list|()
argument_list|)
decl_stmt|;
name|sizeHint
operator|.
name|setWidth
argument_list|(
name|qMax
argument_list|(
name|sizeHint
operator|.
name|width
argument_list|()
argument_list|,
name|fm
operator|.
name|width
argument_list|(
name|QLatin1Char
argument_list|(
literal|'m'
argument_list|)
argument_list|)
operator|*
literal|14
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|sizeHint
argument_list|()
argument_list|,
name|sizeHint
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QFontDatabase::WritingSystem
argument_list|)
end_macro
begin_function
DECL|function|writingSystem_data
name|void
name|tst_QFontComboBox
operator|::
name|writingSystem_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QFontDatabase
operator|::
name|WritingSystem
argument_list|>
argument_list|(
literal|"writingSystem"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Any"
argument_list|)
operator|<<
name|QFontDatabase
operator|::
name|Any
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Latin"
argument_list|)
operator|<<
name|QFontDatabase
operator|::
name|Latin
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Lao"
argument_list|)
operator|<<
name|QFontDatabase
operator|::
name|Lao
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"TraditionalChinese"
argument_list|)
operator|<<
name|QFontDatabase
operator|::
name|TraditionalChinese
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Ogham"
argument_list|)
operator|<<
name|QFontDatabase
operator|::
name|Ogham
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Runic"
argument_list|)
operator|<<
name|QFontDatabase
operator|::
name|Runic
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|31
condition|;
operator|++
name|i
control|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"enum"
argument_list|)
operator|<<
operator|(
name|QFontDatabase
operator|::
name|WritingSystem
operator|)
name|i
expr_stmt|;
block|}
end_function
begin_comment
comment|// public QFontDatabase::WritingSystem writingSystem() const
end_comment
begin_function
DECL|function|writingSystem
name|void
name|tst_QFontComboBox
operator|::
name|writingSystem
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QFontDatabase
operator|::
name|WritingSystem
argument_list|,
name|writingSystem
argument_list|)
expr_stmt|;
name|SubQFontComboBox
name|box
decl_stmt|;
name|QSignalSpy
name|spy0
argument_list|(
operator|&
name|box
argument_list|,
name|SIGNAL
argument_list|(
name|currentFontChanged
argument_list|(
name|QFont
specifier|const
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QFont
name|currentFont
init|=
name|box
operator|.
name|currentFont
argument_list|()
decl_stmt|;
name|box
operator|.
name|setWritingSystem
argument_list|(
name|writingSystem
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|writingSystem
argument_list|()
argument_list|,
name|writingSystem
argument_list|)
expr_stmt|;
name|QFontDatabase
name|db
decl_stmt|;
name|QStringList
name|list
init|=
name|db
operator|.
name|families
argument_list|(
name|writingSystem
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|model
argument_list|()
operator|->
name|rowCount
argument_list|()
argument_list|,
name|list
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|list
operator|.
name|count
argument_list|()
operator|==
literal|0
condition|)
name|QCOMPARE
argument_list|(
name|box
operator|.
name|currentFont
argument_list|()
argument_list|,
name|QFont
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy0
operator|.
name|count
argument_list|()
argument_list|,
operator|(
name|currentFont
operator|!=
name|box
operator|.
name|currentFont
argument_list|()
operator|)
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// protected void currentFontChanged(QFont const& f)
end_comment
begin_function
DECL|function|currentFontChanged
name|void
name|tst_QFontComboBox
operator|::
name|currentFontChanged
parameter_list|()
block|{
name|SubQFontComboBox
name|box
decl_stmt|;
name|QSignalSpy
name|spy0
argument_list|(
operator|&
name|box
argument_list|,
name|SIGNAL
argument_list|(
name|currentFontChanged
argument_list|(
name|QFont
specifier|const
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|box
operator|.
name|model
argument_list|()
operator|->
name|rowCount
argument_list|()
operator|>
literal|2
condition|)
block|{
name|QTest
operator|::
name|keyPress
argument_list|(
operator|&
name|box
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy0
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QFont
name|f
argument_list|(
literal|"Sans Serif"
argument_list|)
decl_stmt|;
name|box
operator|.
name|setCurrentFont
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy0
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
name|qWarning
argument_list|(
literal|"Not enough fonts installed on test system. Consider adding some"
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QFontComboBox
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qfontcombobox.moc"
end_include
end_unit
