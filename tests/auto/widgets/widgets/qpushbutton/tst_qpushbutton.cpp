begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|"qpushbutton.h"
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qpushbutton.h>
end_include
begin_include
include|#
directive|include
file|<qmenu.h>
end_include
begin_include
include|#
directive|include
file|<qtimer.h>
end_include
begin_include
include|#
directive|include
file|<QDialog>
end_include
begin_include
include|#
directive|include
file|<QGridLayout>
end_include
begin_include
include|#
directive|include
file|<QStyleFactory>
end_include
begin_include
include|#
directive|include
file|<QTabWidget>
end_include
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QPushButton*
argument_list|)
end_macro
begin_class
DECL|class|tst_QPushButton
class|class
name|tst_QPushButton
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QPushButton
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QPushButton
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|autoRepeat
parameter_list|()
function_decl|;
name|void
name|pressed
parameter_list|()
function_decl|;
name|void
name|setAccel
parameter_list|()
function_decl|;
name|void
name|isCheckable
parameter_list|()
function_decl|;
name|void
name|setDown
parameter_list|()
function_decl|;
name|void
name|popupCrash
parameter_list|()
function_decl|;
name|void
name|isChecked
parameter_list|()
function_decl|;
name|void
name|animateClick
parameter_list|()
function_decl|;
name|void
name|toggle
parameter_list|()
function_decl|;
name|void
name|clicked
parameter_list|()
function_decl|;
name|void
name|toggled
parameter_list|()
function_decl|;
name|void
name|defaultAndAutoDefault
parameter_list|()
function_decl|;
name|void
name|sizeHint_data
parameter_list|()
function_decl|;
name|void
name|sizeHint
parameter_list|()
function_decl|;
comment|/*     void state();     void group();     void stateChanged(); */
protected|protected
name|slots
protected|:
name|void
name|resetCounters
parameter_list|()
function_decl|;
name|void
name|onClicked
parameter_list|()
function_decl|;
name|void
name|onToggled
parameter_list|(
name|bool
name|on
parameter_list|)
function_decl|;
name|void
name|onPressed
parameter_list|()
function_decl|;
name|void
name|onReleased
parameter_list|()
function_decl|;
name|void
name|helperSlotDelete
parameter_list|()
function_decl|;
private|private:
DECL|member|click_count
name|uint
name|click_count
decl_stmt|;
DECL|member|toggle_count
name|uint
name|toggle_count
decl_stmt|;
DECL|member|press_count
name|uint
name|press_count
decl_stmt|;
DECL|member|release_count
name|uint
name|release_count
decl_stmt|;
DECL|member|testWidget
name|QPushButton
modifier|*
name|testWidget
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QPushButton
operator|::
name|getSetCheck
parameter_list|()
block|{
name|QPushButton
name|obj1
decl_stmt|;
comment|// QMenu* QPushButton::menu()
comment|// void QPushButton::setMenu(QMenu*)
name|QMenu
modifier|*
name|var1
init|=
operator|new
name|QMenu
decl_stmt|;
name|obj1
operator|.
name|setMenu
argument_list|(
name|var1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|var1
argument_list|,
name|obj1
operator|.
name|menu
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setMenu
argument_list|(
operator|(
name|QMenu
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|QMenu
operator|*
operator|)
literal|0
argument_list|,
name|obj1
operator|.
name|menu
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|var1
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|tst_QPushButton
name|tst_QPushButton
operator|::
name|tst_QPushButton
parameter_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~tst_QPushButton
name|tst_QPushButton
operator|::
name|~
name|tst_QPushButton
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|initTestCase
name|void
name|tst_QPushButton
operator|::
name|initTestCase
parameter_list|()
block|{
comment|// Create the test class
name|testWidget
operator|=
operator|new
name|QPushButton
argument_list|(
literal|"&Start"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setObjectName
argument_list|(
literal|"testWidget"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|resize
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|show
argument_list|()
expr_stmt|;
name|connect
argument_list|(
name|testWidget
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|onClicked
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|testWidget
argument_list|,
name|SIGNAL
argument_list|(
name|pressed
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|onPressed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|testWidget
argument_list|,
name|SIGNAL
argument_list|(
name|released
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|onReleased
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|testWidget
argument_list|,
name|SIGNAL
argument_list|(
name|toggled
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|onToggled
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QPushButton
operator|::
name|cleanupTestCase
parameter_list|()
block|{
operator|delete
name|testWidget
expr_stmt|;
name|testWidget
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_QPushButton
operator|::
name|init
parameter_list|()
block|{
name|testWidget
operator|->
name|setAutoRepeat
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setDown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QKeySequence
name|seq
decl_stmt|;
name|testWidget
operator|->
name|setShortcut
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|resetCounters
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QPushButton
operator|::
name|cleanup
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|resetCounters
name|void
name|tst_QPushButton
operator|::
name|resetCounters
parameter_list|()
block|{
name|toggle_count
operator|=
literal|0
expr_stmt|;
name|press_count
operator|=
literal|0
expr_stmt|;
name|release_count
operator|=
literal|0
expr_stmt|;
name|click_count
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|onClicked
name|void
name|tst_QPushButton
operator|::
name|onClicked
parameter_list|()
block|{
name|click_count
operator|++
expr_stmt|;
block|}
end_function
begin_function
DECL|function|onToggled
name|void
name|tst_QPushButton
operator|::
name|onToggled
parameter_list|(
name|bool
comment|/*on*/
parameter_list|)
block|{
name|toggle_count
operator|++
expr_stmt|;
block|}
end_function
begin_function
DECL|function|onPressed
name|void
name|tst_QPushButton
operator|::
name|onPressed
parameter_list|()
block|{
name|press_count
operator|++
expr_stmt|;
block|}
end_function
begin_function
DECL|function|onReleased
name|void
name|tst_QPushButton
operator|::
name|onReleased
parameter_list|()
block|{
name|release_count
operator|++
expr_stmt|;
block|}
end_function
begin_function
DECL|function|autoRepeat
name|void
name|tst_QPushButton
operator|::
name|autoRepeat
parameter_list|()
block|{
comment|// If this changes, this test must be completely revised.
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isCheckable
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify autorepeat is off by default.
name|QPushButton
name|tmp
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|tmp
operator|.
name|setObjectName
argument_list|(
literal|"tmp"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tmp
operator|.
name|autoRepeat
argument_list|()
argument_list|)
expr_stmt|;
comment|// check if we can toggle the mode
name|testWidget
operator|->
name|setAutoRepeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|autoRepeat
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setAutoRepeat
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|autoRepeat
argument_list|()
argument_list|)
expr_stmt|;
name|resetCounters
argument_list|()
expr_stmt|;
comment|// check that the button is down if we press space and not in autorepeat
name|testWidget
operator|->
name|setDown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setAutoRepeat
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Space
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|300
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|isDown
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|toggle_count
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|press_count
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|release_count
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|click_count
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyRelease
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Space
argument_list|)
expr_stmt|;
name|resetCounters
argument_list|()
expr_stmt|;
comment|// check that the button is down if we press space while in autorepeat
comment|// we can't actually confirm how many times it is fired, more than 1 is enough.
name|testWidget
operator|->
name|setDown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setAutoRepeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Space
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|900
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|isDown
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|toggle_count
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyRelease
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Space
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|press_count
operator|==
name|release_count
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|release_count
operator|==
name|click_count
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|press_count
operator|>
literal|1
argument_list|)
expr_stmt|;
comment|// #### shouldn't I check here to see if multiple signals have been fired???
comment|// check that pressing ENTER has no effect
name|resetCounters
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|setDown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setAutoRepeat
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|300
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isDown
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|toggle_count
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|press_count
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|release_count
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|click_count
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyRelease
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
comment|// check that pressing ENTER has no effect
name|resetCounters
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|setDown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setAutoRepeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|300
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isDown
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|toggle_count
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|press_count
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|release_count
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|click_count
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pressed
name|void
name|tst_QPushButton
operator|::
name|pressed
parameter_list|()
block|{
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
comment|//    QTest::qWait( 300 );
name|QCOMPARE
argument_list|(
name|press_count
argument_list|,
operator|(
name|uint
operator|)
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|release_count
argument_list|,
operator|(
name|uint
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyRelease
argument_list|(
name|testWidget
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
comment|//    QTest::qWait( 300 );
name|QCOMPARE
argument_list|(
name|press_count
argument_list|,
operator|(
name|uint
operator|)
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|release_count
argument_list|,
operator|(
name|uint
operator|)
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
comment|//    QTest::qWait( 300 );
name|QCOMPARE
argument_list|(
name|press_count
argument_list|,
operator|(
name|uint
operator|)
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|release_count
argument_list|,
operator|(
name|uint
operator|)
literal|1
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setAutoDefault
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
comment|//    QTest::qWait( 300 );
name|QCOMPARE
argument_list|(
name|press_count
argument_list|,
operator|(
name|uint
operator|)
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|release_count
argument_list|,
operator|(
name|uint
operator|)
literal|2
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setAutoDefault
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isCheckable
name|void
name|tst_QPushButton
operator|::
name|isCheckable
parameter_list|()
block|{
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isCheckable
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setDown
name|void
name|tst_QPushButton
operator|::
name|setDown
parameter_list|()
block|{
name|testWidget
operator|->
name|setDown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isDown
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setDown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|isDown
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setDown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Escape
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isDown
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isChecked
name|void
name|tst_QPushButton
operator|::
name|isChecked
parameter_list|()
block|{
name|testWidget
operator|->
name|setDown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isChecked
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setDown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isChecked
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setDown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|toggle
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|isChecked
argument_list|()
operator|==
name|testWidget
operator|->
name|isCheckable
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toggle
name|void
name|tst_QPushButton
operator|::
name|toggle
parameter_list|()
block|{
comment|// the pushbutton shouldn't toggle the button.
name|testWidget
operator|->
name|toggle
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|isChecked
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toggled
name|void
name|tst_QPushButton
operator|::
name|toggled
parameter_list|()
block|{
comment|// the pushbutton shouldn't send a toggled signal when we call the toggle slot.
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isCheckable
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|toggle
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|toggle_count
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// do it again, just to be sure
name|resetCounters
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|toggle
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|toggle_count
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// finally check that we can toggle using the mouse
name|resetCounters
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|mousePress
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|toggle_count
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|click_count
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseRelease
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|click_count
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     If we press an accelerator key we ONLY get a pressed signal and     NOT a released or clicked signal. */
end_comment
begin_function
DECL|function|setAccel
name|void
name|tst_QPushButton
operator|::
name|setAccel
parameter_list|()
block|{
name|testWidget
operator|->
name|setText
argument_list|(
literal|"&AccelTest"
argument_list|)
expr_stmt|;
name|QKeySequence
name|seq
argument_list|(
name|Qt
operator|::
name|ALT
operator|+
name|Qt
operator|::
name|Key_A
argument_list|)
decl_stmt|;
name|testWidget
operator|->
name|setShortcut
argument_list|(
name|seq
argument_list|)
expr_stmt|;
comment|// The shortcut will not be activated unless the button is in a active
comment|// window and has focus
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
name|testWidget
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setFocus
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|!
name|testWidget
operator|->
name|isActiveWindow
argument_list|()
operator|&&
name|i
operator|<
literal|1000
condition|;
operator|++
name|i
control|)
block|{
name|testWidget
operator|->
name|activateWindow
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|isActiveWindow
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
literal|'A'
argument_list|,
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|click_count
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|press_count
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|release_count
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|toggle_count
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// wait 200 ms because setAccel uses animateClick.
comment|// if we don't wait this may screw up a next test.
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isDown
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|animateClick
name|void
name|tst_QPushButton
operator|::
name|animateClick
parameter_list|()
block|{
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isDown
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|animateClick
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|isDown
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isDown
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|click_count
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|press_count
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|release_count
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|toggle_count
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clicked
name|void
name|tst_QPushButton
operator|::
name|clicked
parameter_list|()
block|{
name|QTest
operator|::
name|mousePress
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|press_count
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|release_count
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseRelease
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|press_count
argument_list|,
operator|(
name|uint
operator|)
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|release_count
argument_list|,
operator|(
name|uint
operator|)
literal|1
argument_list|)
expr_stmt|;
name|press_count
operator|=
literal|0
expr_stmt|;
name|release_count
operator|=
literal|0
expr_stmt|;
name|testWidget
operator|->
name|setDown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|uint
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
name|QTest
operator|::
name|mouseClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|press_count
argument_list|,
operator|(
name|uint
operator|)
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|release_count
argument_list|,
operator|(
name|uint
operator|)
literal|10
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/* void tst_QPushButton::group() { }  void tst_QPushButton::state() { }  void tst_QPushButton::stateChanged() { } */
end_comment
begin_decl_stmt
DECL|variable|pb
name|QPushButton
modifier|*
name|pb
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|helperSlotDelete
name|void
name|tst_QPushButton
operator|::
name|helperSlotDelete
parameter_list|()
block|{
operator|delete
name|pb
expr_stmt|;
name|pb
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|popupCrash
name|void
name|tst_QPushButton
operator|::
name|popupCrash
parameter_list|()
block|{
name|pb
operator|=
operator|new
name|QPushButton
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|QMenu
modifier|*
name|menu
init|=
operator|new
name|QMenu
argument_list|(
literal|"bar"
argument_list|,
name|pb
argument_list|)
decl_stmt|;
name|pb
operator|->
name|setMenu
argument_list|(
name|menu
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|1000
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|helperSlotDelete
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|pb
operator|->
name|show
argument_list|()
expr_stmt|;
name|pb
operator|->
name|click
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|defaultAndAutoDefault
name|void
name|tst_QPushButton
operator|::
name|defaultAndAutoDefault
parameter_list|()
block|{
block|{
comment|// Adding buttons directly to QDialog
name|QDialog
name|dialog
decl_stmt|;
name|QPushButton
name|button1
argument_list|(
operator|&
name|dialog
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|button1
operator|.
name|autoDefault
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|button1
operator|.
name|isDefault
argument_list|()
argument_list|)
expr_stmt|;
name|QPushButton
name|button2
argument_list|(
operator|&
name|dialog
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|button2
operator|.
name|autoDefault
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|button2
operator|.
name|isDefault
argument_list|()
argument_list|)
expr_stmt|;
name|button1
operator|.
name|setDefault
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|button1
operator|.
name|autoDefault
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|button1
operator|.
name|isDefault
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|button2
operator|.
name|autoDefault
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|button2
operator|.
name|isDefault
argument_list|()
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|dialog
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|button1
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
operator|&
name|dialog
argument_list|,
name|SLOT
argument_list|(
name|hide
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QKeyEvent
name|event
argument_list|(
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|Qt
operator|::
name|Key_Return
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
operator|&
name|dialog
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|dialog
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|// Adding buttons to QDialog through a layout
name|QDialog
name|dialog
decl_stmt|;
name|QPushButton
name|button3
decl_stmt|;
name|button3
operator|.
name|setAutoDefault
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QPushButton
name|button1
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|button1
operator|.
name|autoDefault
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|button1
operator|.
name|isDefault
argument_list|()
argument_list|)
expr_stmt|;
name|QPushButton
name|button2
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|button2
operator|.
name|autoDefault
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|button2
operator|.
name|isDefault
argument_list|()
argument_list|)
expr_stmt|;
name|button1
operator|.
name|setDefault
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|button1
operator|.
name|autoDefault
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|button1
operator|.
name|isDefault
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|button2
operator|.
name|autoDefault
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|button2
operator|.
name|isDefault
argument_list|()
argument_list|)
expr_stmt|;
name|QGridLayout
name|layout
decl_stmt|;
name|layout
operator|.
name|addWidget
argument_list|(
operator|&
name|button3
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|layout
operator|.
name|addWidget
argument_list|(
operator|&
name|button2
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|layout
operator|.
name|addWidget
argument_list|(
operator|&
name|button1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setLayout
argument_list|(
operator|&
name|layout
argument_list|)
expr_stmt|;
name|button3
operator|.
name|setFocus
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|button1
operator|.
name|autoDefault
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|button1
operator|.
name|isDefault
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|button2
operator|.
name|autoDefault
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|button2
operator|.
name|isDefault
argument_list|()
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|dialog
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|button1
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
operator|&
name|dialog
argument_list|,
name|SLOT
argument_list|(
name|hide
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QKeyEvent
name|event
argument_list|(
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|Qt
operator|::
name|Key_Return
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
operator|&
name|dialog
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|dialog
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|// autoDefault behavior.
name|QDialog
name|dialog
decl_stmt|;
name|QPushButton
name|button2
argument_list|(
operator|&
name|dialog
argument_list|)
decl_stmt|;
name|QPushButton
name|button1
argument_list|(
operator|&
name|dialog
argument_list|)
decl_stmt|;
name|dialog
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|dialog
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
comment|// No default button is set, and button2 is the first autoDefault button
comment|// that is next in the tab order
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|button2
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
operator|&
name|dialog
argument_list|,
name|SLOT
argument_list|(
name|hide
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QKeyEvent
name|event
argument_list|(
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|Qt
operator|::
name|Key_Return
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
operator|&
name|dialog
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|dialog
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
comment|// Reparenting
name|QVERIFY
argument_list|(
name|button2
operator|.
name|autoDefault
argument_list|()
argument_list|)
expr_stmt|;
name|button2
operator|.
name|setParent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|button2
operator|.
name|autoDefault
argument_list|()
argument_list|)
expr_stmt|;
name|button2
operator|.
name|setAutoDefault
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|button2
operator|.
name|setParent
argument_list|(
operator|&
name|dialog
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|button2
operator|.
name|autoDefault
argument_list|()
argument_list|)
expr_stmt|;
name|button1
operator|.
name|setAutoDefault
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|button1
operator|.
name|setParent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|button1
operator|.
name|autoDefault
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|sizeHint_data
name|void
name|tst_QPushButton
operator|::
name|sizeHint_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"stylename"
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_MOTIF
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"motif"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"motif"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_CDE
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"cde"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"cde"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWS
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"windows"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"windows"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_CLEANLOOKS
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"cleanlooks"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"cleanlooks"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_GTK
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gtk"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"gtk"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_MAC
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mac"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"mac"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_PLASTIQUE
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"plastique"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"plastique"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSXP
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"windowsxp"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"windowsxp"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSVISTA
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"windowsvista"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"windowsvista"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSCE
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"windowsce"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"windowsce"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE_WM
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSCE
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"windowsmobile"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"windowsmobile"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|sizeHint
name|void
name|tst_QPushButton
operator|::
name|sizeHint
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|stylename
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
if|if
condition|(
name|stylename
operator|==
literal|"mac"
condition|)
name|QSKIP
argument_list|(
literal|"QStyleFactory cannot create the Mac style, see QTBUG-23680"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QStyle
modifier|*
name|style
init|=
name|QStyleFactory
operator|::
name|create
argument_list|(
name|stylename
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|style
condition|)
name|QFAIL
argument_list|(
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Cannot create style: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|stylename
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
comment|// Test 1
block|{
name|QPushButton
modifier|*
name|button
init|=
operator|new
name|QPushButton
argument_list|(
literal|"123"
argument_list|)
decl_stmt|;
name|QSize
name|initSizeHint
init|=
name|button
operator|->
name|sizeHint
argument_list|()
decl_stmt|;
name|QDialog
modifier|*
name|dialog
init|=
operator|new
name|QDialog
decl_stmt|;
name|QWidget
modifier|*
name|widget
init|=
operator|new
name|QWidget
argument_list|(
name|dialog
argument_list|)
decl_stmt|;
name|button
operator|->
name|setParent
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|button
operator|->
name|sizeHint
argument_list|()
expr_stmt|;
name|widget
operator|->
name|setParent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|dialog
expr_stmt|;
name|button
operator|->
name|setDefault
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|button
operator|->
name|sizeHint
argument_list|()
argument_list|,
name|initSizeHint
argument_list|)
expr_stmt|;
operator|delete
name|button
expr_stmt|;
block|}
comment|// Test 2
block|{
name|QWidget
modifier|*
name|tab1
init|=
operator|new
name|QWidget
decl_stmt|;
name|QHBoxLayout
modifier|*
name|layout1
init|=
operator|new
name|QHBoxLayout
argument_list|(
name|tab1
argument_list|)
decl_stmt|;
name|QPushButton
modifier|*
name|button1_1
init|=
operator|new
name|QPushButton
argument_list|(
literal|"123"
argument_list|)
decl_stmt|;
name|QPushButton
modifier|*
name|button1_2
init|=
operator|new
name|QPushButton
argument_list|(
literal|"123"
argument_list|)
decl_stmt|;
name|layout1
operator|->
name|addWidget
argument_list|(
name|button1_1
argument_list|)
expr_stmt|;
name|layout1
operator|->
name|addWidget
argument_list|(
name|button1_2
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|tab2
init|=
operator|new
name|QWidget
decl_stmt|;
name|QHBoxLayout
modifier|*
name|layout2
init|=
operator|new
name|QHBoxLayout
argument_list|(
name|tab2
argument_list|)
decl_stmt|;
name|QPushButton
modifier|*
name|button2_1
init|=
operator|new
name|QPushButton
argument_list|(
literal|"123"
argument_list|)
decl_stmt|;
name|QPushButton
modifier|*
name|button2_2
init|=
operator|new
name|QPushButton
argument_list|(
literal|"123"
argument_list|)
decl_stmt|;
name|layout2
operator|->
name|addWidget
argument_list|(
name|button2_1
argument_list|)
expr_stmt|;
name|layout2
operator|->
name|addWidget
argument_list|(
name|button2_2
argument_list|)
expr_stmt|;
name|QDialog
modifier|*
name|dialog
init|=
operator|new
name|QDialog
decl_stmt|;
name|QTabWidget
modifier|*
name|tabWidget
init|=
operator|new
name|QTabWidget
decl_stmt|;
name|tabWidget
operator|->
name|addTab
argument_list|(
name|tab1
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|tabWidget
operator|->
name|addTab
argument_list|(
name|tab2
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|mainLayout
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|dialog
argument_list|)
decl_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|tabWidget
argument_list|)
expr_stmt|;
name|dialog
operator|->
name|show
argument_list|()
expr_stmt|;
name|tabWidget
operator|->
name|setCurrentWidget
argument_list|(
name|tab2
argument_list|)
expr_stmt|;
name|tabWidget
operator|->
name|setCurrentWidget
argument_list|(
name|tab1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|button1_2
operator|->
name|size
argument_list|()
argument_list|,
name|button2_2
operator|->
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QPushButton
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qpushbutton.moc"
end_include
end_unit
