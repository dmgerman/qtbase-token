begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qpainter.h>
end_include
begin_include
include|#
directive|include
file|<qstyleoption.h>
end_include
begin_include
include|#
directive|include
file|<qkeysequence.h>
end_include
begin_include
include|#
directive|include
file|<qevent.h>
end_include
begin_include
include|#
directive|include
file|<qgridlayout.h>
end_include
begin_include
include|#
directive|include
file|<qabstractbutton.h>
end_include
begin_class
DECL|class|tst_QAbstractButton
class|class
name|tst_QAbstractButton
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QAbstractButton
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QAbstractButton
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|setAutoRepeat_data
parameter_list|()
function_decl|;
name|void
name|setAutoRepeat
parameter_list|()
function_decl|;
name|void
name|pressed
parameter_list|()
function_decl|;
name|void
name|released
parameter_list|()
function_decl|;
name|void
name|setText
parameter_list|()
function_decl|;
name|void
name|setIcon
parameter_list|()
function_decl|;
name|void
name|setShortcut
parameter_list|()
function_decl|;
name|void
name|animateClick
parameter_list|()
function_decl|;
name|void
name|isCheckable
parameter_list|()
function_decl|;
name|void
name|setDown
parameter_list|()
function_decl|;
name|void
name|isChecked
parameter_list|()
function_decl|;
name|void
name|toggled
parameter_list|()
function_decl|;
name|void
name|setEnabled
parameter_list|()
function_decl|;
name|void
name|shortcutEvents
parameter_list|()
function_decl|;
name|void
name|stopRepeatTimer
parameter_list|()
function_decl|;
name|void
name|keyNavigation
parameter_list|()
function_decl|;
protected|protected
name|slots
protected|:
name|void
name|onClicked
parameter_list|()
function_decl|;
name|void
name|onToggled
parameter_list|(
name|bool
name|on
parameter_list|)
function_decl|;
name|void
name|onPressed
parameter_list|()
function_decl|;
name|void
name|onReleased
parameter_list|()
function_decl|;
name|void
name|resetValues
parameter_list|()
function_decl|;
private|private:
DECL|member|click_count
name|uint
name|click_count
decl_stmt|;
DECL|member|toggle_count
name|uint
name|toggle_count
decl_stmt|;
DECL|member|press_count
name|uint
name|press_count
decl_stmt|;
DECL|member|release_count
name|uint
name|release_count
decl_stmt|;
DECL|member|testWidget
name|QAbstractButton
modifier|*
name|testWidget
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|// QAbstractButton is an abstract class in 4.0
end_comment
begin_class
DECL|class|MyButton
class|class
name|MyButton
super|:
specifier|public
name|QAbstractButton
block|{
public|public:
DECL|function|MyButton
name|MyButton
parameter_list|(
name|QWidget
modifier|*
name|p
init|=
literal|0
parameter_list|)
member_init_list|:
name|QAbstractButton
argument_list|(
name|p
argument_list|)
block|{}
DECL|function|paintEvent
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QRect
name|r
init|=
name|rect
argument_list|()
decl_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
name|r
argument_list|,
name|isDown
argument_list|()
condition|?
name|Qt
operator|::
name|black
else|:
operator|(
name|isChecked
argument_list|()
condition|?
name|Qt
operator|::
name|lightGray
else|:
name|Qt
operator|::
name|white
operator|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPen
argument_list|(
name|isDown
argument_list|()
condition|?
name|Qt
operator|::
name|white
else|:
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawRect
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawText
argument_list|(
name|r
argument_list|,
name|Qt
operator|::
name|AlignCenter
operator||
name|Qt
operator|::
name|TextShowMnemonic
argument_list|,
name|text
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasFocus
argument_list|()
condition|)
block|{
name|r
operator|.
name|adjust
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|QStyleOptionFocusRect
name|opt
decl_stmt|;
name|opt
operator|.
name|rect
operator|=
name|r
expr_stmt|;
name|opt
operator|.
name|palette
operator|=
name|palette
argument_list|()
expr_stmt|;
name|opt
operator|.
name|state
operator|=
name|QStyle
operator|::
name|State_None
expr_stmt|;
name|style
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_FrameFocusRect
argument_list|,
operator|&
name|opt
argument_list|,
operator|&
name|p
argument_list|,
name|this
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_MAC
name|p
operator|.
name|setPen
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawRect
argument_list|(
name|r
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
DECL|function|sizeHint
name|QSize
name|sizeHint
parameter_list|()
specifier|const
block|{
name|QSize
name|sh
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|sh
operator|+=
name|fontMetrics
argument_list|()
operator|.
name|boundingRect
argument_list|(
name|text
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
return|return
name|sh
return|;
block|}
DECL|function|resetTimerEvents
name|void
name|resetTimerEvents
parameter_list|()
block|{
name|timerEvents
operator|=
literal|0
expr_stmt|;
block|}
DECL|function|timerEventCount
name|int
name|timerEventCount
parameter_list|()
specifier|const
block|{
return|return
name|timerEvents
return|;
block|}
private|private:
DECL|member|timerEvents
name|int
name|timerEvents
decl_stmt|;
DECL|function|timerEvent
name|void
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|event
parameter_list|)
block|{
operator|++
name|timerEvents
expr_stmt|;
name|QAbstractButton
operator|::
name|timerEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QAbstractButton
name|tst_QAbstractButton
operator|::
name|tst_QAbstractButton
parameter_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~tst_QAbstractButton
name|tst_QAbstractButton
operator|::
name|~
name|tst_QAbstractButton
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|initTestCase
name|void
name|tst_QAbstractButton
operator|::
name|initTestCase
parameter_list|()
block|{
name|testWidget
operator|=
operator|new
name|MyButton
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setObjectName
argument_list|(
literal|"testObject"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|resize
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|show
argument_list|()
expr_stmt|;
name|connect
argument_list|(
name|testWidget
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|onClicked
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|testWidget
argument_list|,
name|SIGNAL
argument_list|(
name|pressed
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|onPressed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|testWidget
argument_list|,
name|SIGNAL
argument_list|(
name|released
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|onReleased
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|testWidget
argument_list|,
name|SIGNAL
argument_list|(
name|toggled
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|onToggled
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QAbstractButton
operator|::
name|cleanupTestCase
parameter_list|()
block|{
operator|delete
name|testWidget
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_QAbstractButton
operator|::
name|init
parameter_list|()
block|{
name|testWidget
operator|->
name|setText
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setDown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setAutoRepeat
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QKeySequence
name|seq
decl_stmt|;
name|testWidget
operator|->
name|setShortcut
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|toggle_count
operator|=
literal|0
expr_stmt|;
name|press_count
operator|=
literal|0
expr_stmt|;
name|release_count
operator|=
literal|0
expr_stmt|;
name|click_count
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QAbstractButton
operator|::
name|cleanup
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|resetValues
name|void
name|tst_QAbstractButton
operator|::
name|resetValues
parameter_list|()
block|{
name|toggle_count
operator|=
literal|0
expr_stmt|;
name|press_count
operator|=
literal|0
expr_stmt|;
name|release_count
operator|=
literal|0
expr_stmt|;
name|click_count
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|onClicked
name|void
name|tst_QAbstractButton
operator|::
name|onClicked
parameter_list|()
block|{
name|click_count
operator|++
expr_stmt|;
block|}
end_function
begin_function
DECL|function|onToggled
name|void
name|tst_QAbstractButton
operator|::
name|onToggled
parameter_list|(
name|bool
comment|/*on*/
parameter_list|)
block|{
name|toggle_count
operator|++
expr_stmt|;
block|}
end_function
begin_function
DECL|function|onPressed
name|void
name|tst_QAbstractButton
operator|::
name|onPressed
parameter_list|()
block|{
name|press_count
operator|++
expr_stmt|;
block|}
end_function
begin_function
DECL|function|onReleased
name|void
name|tst_QAbstractButton
operator|::
name|onReleased
parameter_list|()
block|{
name|release_count
operator|++
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setAutoRepeat_data
name|void
name|tst_QAbstractButton
operator|::
name|setAutoRepeat_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"mode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
literal|6
expr_stmt|;
block|}
end_function
begin_define
DECL|macro|REPEAT_DELAY
define|#
directive|define
name|REPEAT_DELAY
value|1000
end_define
begin_decl_stmt
DECL|variable|test_count
name|int
name|test_count
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|last_mode
name|int
name|last_mode
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|setAutoRepeat
name|void
name|tst_QAbstractButton
operator|::
name|setAutoRepeat
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|mode
argument_list|)
expr_stmt|;
comment|//FIXME: temp code to check that the test fails consistenly
comment|//retest( 3 );
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
literal|0
case|:
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isCheckable
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
comment|// check if we can toggle the mode
name|testWidget
operator|->
name|setAutoRepeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|autoRepeat
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setAutoRepeat
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|autoRepeat
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// check that the button is down if we press space and not in autorepeat
name|testWidget
operator|->
name|setDown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setAutoRepeat
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Space
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
name|REPEAT_DELAY
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|release_count
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|isDown
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|toggle_count
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|press_count
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|click_count
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyRelease
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Space
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|click_count
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|release_count
operator|==
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// check that the button is down if we press space while in autorepeat
name|testWidget
operator|->
name|setDown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setAutoRepeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Space
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
name|REPEAT_DELAY
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|isDown
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyRelease
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Space
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|release_count
operator|==
name|press_count
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|toggle_count
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|press_count
operator|==
name|click_count
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|click_count
operator|>
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|// check that pressing ENTER has no effect when autorepeat is false
name|testWidget
operator|->
name|setDown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setAutoRepeat
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
name|REPEAT_DELAY
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isDown
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|toggle_count
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|press_count
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|release_count
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|click_count
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyRelease
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|click_count
operator|==
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
comment|// check that pressing ENTER has no effect when autorepeat is true
name|testWidget
operator|->
name|setDown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setAutoRepeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
name|REPEAT_DELAY
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isDown
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|toggle_count
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|press_count
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|release_count
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|click_count
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyRelease
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|click_count
operator|==
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
comment|// verify autorepeat is off by default.
name|MyButton
name|tmp
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|tmp
operator|.
name|setObjectName
argument_list|(
literal|"tmp"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tmp
operator|.
name|autoRepeat
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_function
DECL|function|pressed
name|void
name|tst_QAbstractButton
operator|::
name|pressed
parameter_list|()
block|{
comment|// pressed/released signals expected for a QAbstractButton
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|press_count
argument_list|,
operator|(
name|uint
operator|)
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|released
name|void
name|tst_QAbstractButton
operator|::
name|released
parameter_list|()
block|{
comment|// pressed/released signals expected for a QAbstractButton
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyRelease
argument_list|(
name|testWidget
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|release_count
argument_list|,
operator|(
name|uint
operator|)
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setText
name|void
name|tst_QAbstractButton
operator|::
name|setText
parameter_list|()
block|{
name|testWidget
operator|->
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
literal|"simple"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"simple"
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
literal|"&ampersand"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"&ampersand"
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_WS_MAC
comment|// no mneonics on Mac.
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|shortcut
argument_list|()
argument_list|,
name|QKeySequence
argument_list|(
literal|"ALT+A"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|testWidget
operator|->
name|setText
argument_list|(
literal|"te&st"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"te&st"
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_WS_MAC
comment|// no mneonics on Mac.
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|shortcut
argument_list|()
argument_list|,
name|QKeySequence
argument_list|(
literal|"ALT+S"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|testWidget
operator|->
name|setText
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_WS_MAC
comment|// no mneonics on Mac.
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|shortcut
argument_list|()
argument_list|,
name|QKeySequence
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|setIcon
name|void
name|tst_QAbstractButton
operator|::
name|setIcon
parameter_list|()
block|{
specifier|const
name|char
modifier|*
name|test1_xpm
index|[]
init|=
block|{
literal|"12 8 2 1"
block|,
literal|". c None"
block|,
literal|"c c #ff0000"
block|,
literal|".........ccc"
block|,
literal|"........ccc."
block|,
literal|".......ccc.."
block|,
literal|"ccc...ccc..."
block|,
literal|".ccc.ccc...."
block|,
literal|"..ccccc....."
block|,
literal|"...ccc......"
block|,
literal|"....c......."
block|,     }
decl_stmt|;
name|QPixmap
name|p
argument_list|(
name|test1_xpm
argument_list|)
decl_stmt|;
name|testWidget
operator|->
name|setIcon
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|icon
argument_list|()
operator|.
name|pixmap
argument_list|(
literal|12
argument_list|,
literal|8
argument_list|)
argument_list|,
name|p
argument_list|)
expr_stmt|;
comment|// Test for #14793
specifier|const
name|char
modifier|*
name|test2_xpm
index|[]
init|=
block|{
literal|"12 8 2 1"
block|,
literal|". c None"
block|,
literal|"c c #ff0000"
block|,
literal|"ccc......ccc"
block|,
literal|".ccc....ccc."
block|,
literal|"..ccc..ccc.."
block|,
literal|"....cc.cc..."
block|,
literal|".....ccc...."
block|,
literal|"....cc.cc..."
block|,
literal|"...ccc.ccc.."
block|,
literal|"..ccc...ccc."
block|,     }
decl_stmt|;
name|int
name|currentHeight
init|=
name|testWidget
operator|->
name|height
argument_list|()
decl_stmt|;
name|int
name|currentWidth
init|=
name|testWidget
operator|->
name|width
argument_list|()
decl_stmt|;
name|QPixmap
name|p2
argument_list|(
name|test2_xpm
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|a
init|=
literal|0
init|;
name|a
operator|<
literal|5
condition|;
name|a
operator|++
control|)
name|testWidget
operator|->
name|setIcon
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|icon
argument_list|()
operator|.
name|pixmap
argument_list|(
literal|12
argument_list|,
literal|8
argument_list|)
argument_list|,
name|p2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|height
argument_list|()
argument_list|,
name|currentHeight
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|width
argument_list|()
argument_list|,
name|currentWidth
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setEnabled
name|void
name|tst_QAbstractButton
operator|::
name|setEnabled
parameter_list|()
block|{
name|testWidget
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|//    QTEST( testWidget, "disabled" );
name|testWidget
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|//    QTEST( testWidget, "enabled" );
block|}
end_function
begin_function
DECL|function|isCheckable
name|void
name|tst_QAbstractButton
operator|::
name|isCheckable
parameter_list|()
block|{
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isCheckable
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setDown
name|void
name|tst_QAbstractButton
operator|::
name|setDown
parameter_list|()
block|{
name|testWidget
operator|->
name|setDown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isDown
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setDown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|300
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|isDown
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setDown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// add some debugging stuff
name|QWidget
modifier|*
name|grab
init|=
name|QWidget
operator|::
name|keyboardGrabber
argument_list|()
decl_stmt|;
if|if
condition|(
name|grab
operator|!=
literal|0
operator|&&
name|grab
operator|!=
name|testWidget
condition|)
name|qDebug
argument_list|(
literal|"testWidget != keyboardGrabber"
argument_list|)
expr_stmt|;
name|grab
operator|=
name|qApp
operator|->
name|focusWidget
argument_list|()
expr_stmt|;
if|if
condition|(
name|grab
operator|!=
literal|0
operator|&&
name|grab
operator|!=
name|testWidget
condition|)
name|qDebug
argument_list|(
literal|"testWidget != focusWidget"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Escape
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isDown
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isChecked
name|void
name|tst_QAbstractButton
operator|::
name|isChecked
parameter_list|()
block|{
name|testWidget
operator|->
name|setDown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isChecked
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setDown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isChecked
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setDown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|toggle
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|isChecked
argument_list|()
operator|==
name|testWidget
operator|->
name|isCheckable
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toggled
name|void
name|tst_QAbstractButton
operator|::
name|toggled
parameter_list|()
block|{
name|testWidget
operator|->
name|toggle
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|toggle_count
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mousePress
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|toggle_count
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|click_count
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseRelease
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|click_count
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setShortcut
name|void
name|tst_QAbstractButton
operator|::
name|setShortcut
parameter_list|()
block|{
name|QKeySequence
name|seq
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|)
decl_stmt|;
name|testWidget
operator|->
name|setShortcut
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
name|testWidget
argument_list|)
expr_stmt|;
comment|// must be active to get shortcuts
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|!
name|testWidget
operator|->
name|isActiveWindow
argument_list|()
operator|&&
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|testWidget
operator|->
name|activateWindow
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|isActiveWindow
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
argument_list|,
literal|'A'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|300
argument_list|)
expr_stmt|;
comment|// Animate click takes time
name|QCOMPARE
argument_list|(
name|click_count
argument_list|,
operator|(
name|uint
operator|)
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|press_count
argument_list|,
operator|(
name|uint
operator|)
literal|1
argument_list|)
expr_stmt|;
comment|// Press is part of a click
name|QCOMPARE
argument_list|(
name|release_count
argument_list|,
operator|(
name|uint
operator|)
literal|1
argument_list|)
expr_stmt|;
comment|// Release is part of a click
name|QVERIFY
argument_list|(
name|toggle_count
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|//     resetValues();
comment|//     QTest::keyPress( testWidget, 'A' );
comment|//     QTest::qWait(10000);
comment|//     QTest::keyRelease( testWidget, 'A' );
comment|//     QCOMPARE(click_count,  (uint)1);
comment|//     QCOMPARE(press_count,  (uint)1);
comment|//     QCOMPARE(release_count,(uint)1);
comment|//     qDebug()<< click_count;
block|}
end_function
begin_function
DECL|function|animateClick
name|void
name|tst_QAbstractButton
operator|::
name|animateClick
parameter_list|()
block|{
name|testWidget
operator|->
name|animateClick
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|isDown
argument_list|()
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|isDown
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isDown
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|shortcutEvents
name|void
name|tst_QAbstractButton
operator|::
name|shortcutEvents
parameter_list|()
block|{
name|MyButton
name|button
decl_stmt|;
name|QSignalSpy
name|pressedSpy
argument_list|(
operator|&
name|button
argument_list|,
name|SIGNAL
argument_list|(
name|pressed
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|releasedSpy
argument_list|(
operator|&
name|button
argument_list|,
name|SIGNAL
argument_list|(
name|released
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|clickedSpy
argument_list|(
operator|&
name|button
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|QKeySequence
name|sequence
decl_stmt|;
name|QShortcutEvent
name|event
argument_list|(
name|sequence
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
operator|&
name|button
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
literal|2
condition|)
name|QTest
operator|::
name|qWait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
name|QTest
operator|::
name|qWait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// ensure animate timer is expired
name|QCOMPARE
argument_list|(
name|pressedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|releasedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|clickedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stopRepeatTimer
name|void
name|tst_QAbstractButton
operator|::
name|stopRepeatTimer
parameter_list|()
block|{
name|MyButton
name|button
decl_stmt|;
name|button
operator|.
name|setAutoRepeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Mouse trigger case:
name|button
operator|.
name|resetTimerEvents
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|mousePress
argument_list|(
operator|&
name|button
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|button
operator|.
name|timerEventCount
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseRelease
argument_list|(
operator|&
name|button
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|button
operator|.
name|resetTimerEvents
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|button
operator|.
name|timerEventCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Key trigger case:
name|button
operator|.
name|resetTimerEvents
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
operator|&
name|button
argument_list|,
name|Qt
operator|::
name|Key_Space
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|button
operator|.
name|timerEventCount
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyRelease
argument_list|(
operator|&
name|button
argument_list|,
name|Qt
operator|::
name|Key_Space
argument_list|)
expr_stmt|;
name|button
operator|.
name|resetTimerEvents
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|button
operator|.
name|timerEventCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|keyNavigation
name|void
name|tst_QAbstractButton
operator|::
name|keyNavigation
parameter_list|()
block|{
name|QSKIP
argument_list|(
literal|"Key navigation in QAbstractButton will be fixed/improved as part of task 194373"
argument_list|)
expr_stmt|;
name|QWidget
name|widget
decl_stmt|;
name|QGridLayout
modifier|*
name|layout
init|=
operator|new
name|QGridLayout
argument_list|(
operator|&
name|widget
argument_list|)
decl_stmt|;
name|QAbstractButton
modifier|*
name|buttons
index|[
literal|3
index|]
index|[
literal|3
index|]
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
literal|3
condition|;
name|y
operator|++
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|3
condition|;
name|x
operator|++
control|)
block|{
name|buttons
index|[
name|y
index|]
index|[
name|x
index|]
operator|=
operator|new
name|MyButton
argument_list|(
operator|&
name|widget
argument_list|)
expr_stmt|;
name|buttons
index|[
name|y
index|]
index|[
name|x
index|]
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|StrongFocus
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|buttons
index|[
name|y
index|]
index|[
name|x
index|]
argument_list|,
name|y
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
block|}
name|widget
operator|.
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
operator|&
name|widget
argument_list|)
expr_stmt|;
name|widget
operator|.
name|activateWindow
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|buttons
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|400
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|buttons
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|->
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|buttons
index|[
literal|1
index|]
index|[
literal|1
index|]
argument_list|,
name|Qt
operator|::
name|Key_Up
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|buttons
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|->
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|buttons
index|[
literal|0
index|]
index|[
literal|1
index|]
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|buttons
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|->
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|buttons
index|[
literal|1
index|]
index|[
literal|1
index|]
argument_list|,
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|buttons
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|->
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|buttons
index|[
literal|1
index|]
index|[
literal|0
index|]
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|buttons
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|->
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|buttons
index|[
literal|2
index|]
index|[
literal|0
index|]
argument_list|,
name|Qt
operator|::
name|Key_Right
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|buttons
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|->
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|buttons
index|[
literal|2
index|]
index|[
literal|1
index|]
argument_list|,
name|Qt
operator|::
name|Key_Right
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|buttons
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|->
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|buttons
index|[
literal|2
index|]
index|[
literal|2
index|]
argument_list|,
name|Qt
operator|::
name|Key_Up
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|buttons
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|->
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|buttons
index|[
literal|1
index|]
index|[
literal|2
index|]
argument_list|,
name|Qt
operator|::
name|Key_Up
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|buttons
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|->
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|buttons
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|buttons
index|[
literal|0
index|]
index|[
literal|2
index|]
argument_list|,
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|buttons
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|->
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QAbstractButton
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qabstractbutton.moc"
end_include
end_unit
