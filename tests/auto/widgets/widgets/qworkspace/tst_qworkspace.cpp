begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qmainwindow.h>
end_include
begin_include
include|#
directive|include
file|<qmenubar.h>
end_include
begin_include
include|#
directive|include
file|<qworkspace.h>
end_include
begin_comment
comment|//TESTED_CLASS=
end_comment
begin_comment
comment|//TESTED_FILES=
end_comment
begin_class
DECL|class|tst_QWorkspace
class|class
name|tst_QWorkspace
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QWorkspace
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QWorkspace
parameter_list|()
destructor_decl|;
protected|protected
name|slots
protected|:
name|void
name|activeChanged
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
function_decl|;
name|void
name|accelActivated
parameter_list|()
function_decl|;
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|windowActivated_data
parameter_list|()
function_decl|;
name|void
name|windowActivated
parameter_list|()
function_decl|;
name|void
name|windowActivatedWithMinimize
parameter_list|()
function_decl|;
name|void
name|showWindows
parameter_list|()
function_decl|;
name|void
name|changeWindowTitle
parameter_list|()
function_decl|;
name|void
name|changeModified
parameter_list|()
function_decl|;
name|void
name|childSize
parameter_list|()
function_decl|;
name|void
name|fixedSize
parameter_list|()
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
name|void
name|nativeSubWindows
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|task206368
parameter_list|()
function_decl|;
private|private:
DECL|member|activeWidget
name|QWidget
modifier|*
name|activeWidget
decl_stmt|;
DECL|member|accelPressed
name|bool
name|accelPressed
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QWorkspace
operator|::
name|getSetCheck
parameter_list|()
block|{
name|QWorkspace
name|obj1
decl_stmt|;
comment|// bool QWorkspace::scrollBarsEnabled()
comment|// void QWorkspace::setScrollBarsEnabled(bool)
name|obj1
operator|.
name|setScrollBarsEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|scrollBarsEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setScrollBarsEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|scrollBarsEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|tst_QWorkspace
name|tst_QWorkspace
operator|::
name|tst_QWorkspace
parameter_list|()
member_init_list|:
name|activeWidget
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~tst_QWorkspace
name|tst_QWorkspace
operator|::
name|~
name|tst_QWorkspace
parameter_list|()
block|{  }
end_destructor
begin_comment
comment|// initTestCase will be executed once before the first testfunction is executed.
end_comment
begin_function
DECL|function|initTestCase
name|void
name|tst_QWorkspace
operator|::
name|initTestCase
parameter_list|()
block|{  }
end_function
begin_comment
comment|// cleanupTestCase will be executed once after the last testfunction is executed.
end_comment
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QWorkspace
operator|::
name|cleanupTestCase
parameter_list|()
block|{ }
end_function
begin_comment
comment|// init() will be executed immediately before each testfunction is run.
end_comment
begin_function
DECL|function|init
name|void
name|tst_QWorkspace
operator|::
name|init
parameter_list|()
block|{
comment|// TODO: Add testfunction specific initialization code here.
block|}
end_function
begin_comment
comment|// cleanup() will be executed immediately after each testfunction is run.
end_comment
begin_function
DECL|function|cleanup
name|void
name|tst_QWorkspace
operator|::
name|cleanup
parameter_list|()
block|{
comment|// TODO: Add testfunction specific cleanup code here.
block|}
end_function
begin_function
DECL|function|activeChanged
name|void
name|tst_QWorkspace
operator|::
name|activeChanged
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
name|activeWidget
operator|=
name|w
expr_stmt|;
block|}
end_function
begin_function
DECL|function|windowActivated_data
name|void
name|tst_QWorkspace
operator|::
name|windowActivated_data
parameter_list|()
block|{
comment|// define the test elements we're going to use
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"count"
argument_list|)
expr_stmt|;
comment|// create a first testdata instance and fill it with data
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
literal|2
expr_stmt|;
block|}
end_function
begin_function
DECL|function|windowActivated
name|void
name|tst_QWorkspace
operator|::
name|windowActivated
parameter_list|()
block|{
name|QMainWindow
name|mw
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|X11BypassWindowManagerHint
argument_list|)
decl_stmt|;
name|mw
operator|.
name|menuBar
argument_list|()
expr_stmt|;
name|QWorkspace
modifier|*
name|workspace
init|=
operator|new
name|QWorkspace
argument_list|(
operator|&
name|mw
argument_list|)
decl_stmt|;
name|workspace
operator|->
name|setObjectName
argument_list|(
literal|"testWidget"
argument_list|)
expr_stmt|;
name|mw
operator|.
name|setCentralWidget
argument_list|(
name|workspace
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
name|workspace
argument_list|,
name|SIGNAL
argument_list|(
name|windowActivated
argument_list|(
name|QWidget
operator|*
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|workspace
argument_list|,
name|SIGNAL
argument_list|(
name|windowActivated
argument_list|(
name|QWidget
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|activeChanged
argument_list|(
name|QWidget
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mw
operator|.
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
operator|&
name|mw
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|widget
init|=
operator|new
name|QWidget
argument_list|(
name|workspace
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DeleteOnClose
argument_list|)
expr_stmt|;
name|workspace
operator|->
name|addWindow
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|widget
operator|->
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|activeWidget
operator|==
name|workspace
operator|->
name|activeWindow
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|QWidgetList
name|windows
init|=
name|workspace
operator|->
name|windowList
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|windows
operator|.
name|count
argument_list|()
argument_list|,
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|window
init|=
name|windows
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|window
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|activeWidget
operator|==
name|workspace
operator|->
name|activeWindow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|1
condition|)
name|QVERIFY
argument_list|(
name|activeWidget
operator|==
name|window
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|window
init|=
name|windows
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|window
operator|->
name|showNormal
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|==
name|activeWidget
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|activeWidget
operator|==
name|workspace
operator|->
name|activeWindow
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
while|while
condition|(
name|workspace
operator|->
name|activeWindow
argument_list|()
condition|)
block|{
name|workspace
operator|->
name|activeWindow
argument_list|()
operator|->
name|close
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|activeWidget
operator|==
name|workspace
operator|->
name|activeWindow
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|activeWidget
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|workspace
operator|->
name|activeWindow
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|workspace
operator|->
name|windowList
argument_list|()
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|{
name|workspace
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QWidget
modifier|*
name|widget
init|=
operator|new
name|QWidget
argument_list|(
name|workspace
argument_list|)
decl_stmt|;
name|widget
operator|->
name|setObjectName
argument_list|(
literal|"normal"
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DeleteOnClose
argument_list|)
expr_stmt|;
name|workspace
operator|->
name|addWindow
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|widget
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|workspace
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|activeWidget
operator|==
name|widget
argument_list|)
expr_stmt|;
name|widget
operator|->
name|close
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|activeWidget
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|{
name|workspace
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QWidget
modifier|*
name|widget
init|=
operator|new
name|QWidget
argument_list|(
name|workspace
argument_list|)
decl_stmt|;
name|widget
operator|->
name|setObjectName
argument_list|(
literal|"maximized"
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DeleteOnClose
argument_list|)
expr_stmt|;
name|workspace
operator|->
name|addWindow
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|widget
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|sendPostedEvents
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_MAC
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"This test has never passed on Mac. QWorkspace is obsoleted -> won't fix"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|workspace
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|activeWidget
operator|==
name|widget
argument_list|)
expr_stmt|;
name|widget
operator|->
name|close
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|activeWidget
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|{
name|QWidget
modifier|*
name|widget
init|=
operator|new
name|QWidget
argument_list|(
name|workspace
argument_list|)
decl_stmt|;
name|widget
operator|->
name|setObjectName
argument_list|(
literal|"minimized"
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DeleteOnClose
argument_list|)
expr_stmt|;
name|workspace
operator|->
name|addWindow
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|widget
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|activeWidget
operator|==
name|widget
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|workspace
operator|->
name|activeWindow
argument_list|()
operator|==
name|widget
argument_list|)
expr_stmt|;
name|widget
operator|->
name|close
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|workspace
operator|->
name|activeWindow
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|activeWidget
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|windowActivatedWithMinimize
name|void
name|tst_QWorkspace
operator|::
name|windowActivatedWithMinimize
parameter_list|()
block|{
name|QMainWindow
name|mw
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|X11BypassWindowManagerHint
argument_list|)
decl_stmt|;
name|mw
operator|.
name|menuBar
argument_list|()
expr_stmt|;
name|QWorkspace
modifier|*
name|workspace
init|=
operator|new
name|QWorkspace
argument_list|(
operator|&
name|mw
argument_list|)
decl_stmt|;
name|workspace
operator|->
name|setObjectName
argument_list|(
literal|"testWidget"
argument_list|)
expr_stmt|;
name|mw
operator|.
name|setCentralWidget
argument_list|(
name|workspace
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
name|workspace
argument_list|,
name|SIGNAL
argument_list|(
name|windowActivated
argument_list|(
name|QWidget
operator|*
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|workspace
argument_list|,
name|SIGNAL
argument_list|(
name|windowActivated
argument_list|(
name|QWidget
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|activeChanged
argument_list|(
name|QWidget
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mw
operator|.
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
operator|&
name|mw
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|widget
init|=
operator|new
name|QWidget
argument_list|(
name|workspace
argument_list|)
decl_stmt|;
name|widget
operator|->
name|setObjectName
argument_list|(
literal|"minimized1"
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DeleteOnClose
argument_list|)
expr_stmt|;
name|workspace
operator|->
name|addWindow
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|widget2
init|=
operator|new
name|QWidget
argument_list|(
name|workspace
argument_list|)
decl_stmt|;
name|widget2
operator|->
name|setObjectName
argument_list|(
literal|"minimized2"
argument_list|)
expr_stmt|;
name|widget2
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DeleteOnClose
argument_list|)
expr_stmt|;
name|workspace
operator|->
name|addWindow
argument_list|(
name|widget2
argument_list|)
expr_stmt|;
name|widget
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|activeWidget
operator|==
name|widget
argument_list|)
expr_stmt|;
name|widget2
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|activeWidget
operator|==
name|widget2
argument_list|)
expr_stmt|;
name|widget2
operator|->
name|close
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|activeWidget
operator|==
name|widget
argument_list|)
expr_stmt|;
name|widget
operator|->
name|close
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|workspace
operator|->
name|activeWindow
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|activeWidget
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|workspace
operator|->
name|windowList
argument_list|()
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|accelActivated
name|void
name|tst_QWorkspace
operator|::
name|accelActivated
parameter_list|()
block|{
name|accelPressed
operator|=
name|TRUE
expr_stmt|;
block|}
end_function
begin_function
DECL|function|showWindows
name|void
name|tst_QWorkspace
operator|::
name|showWindows
parameter_list|()
block|{
name|QWorkspace
modifier|*
name|ws
init|=
operator|new
name|QWorkspace
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|widget
init|=
literal|0
decl_stmt|;
name|ws
operator|->
name|show
argument_list|()
expr_stmt|;
name|widget
operator|=
operator|new
name|QWidget
argument_list|(
name|ws
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setObjectName
argument_list|(
literal|"plain1"
argument_list|)
expr_stmt|;
name|widget
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|widget
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|widget
operator|=
operator|new
name|QWidget
argument_list|(
name|ws
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setObjectName
argument_list|(
literal|"maximized1"
argument_list|)
expr_stmt|;
name|widget
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|widget
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|widget
operator|->
name|showNormal
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|widget
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|widget
operator|=
operator|new
name|QWidget
argument_list|(
name|ws
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setObjectName
argument_list|(
literal|"minimized1"
argument_list|)
expr_stmt|;
name|widget
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|widget
operator|->
name|isMinimized
argument_list|()
argument_list|)
expr_stmt|;
name|widget
operator|->
name|showNormal
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|widget
operator|->
name|isMinimized
argument_list|()
argument_list|)
expr_stmt|;
name|ws
operator|->
name|hide
argument_list|()
expr_stmt|;
name|widget
operator|=
operator|new
name|QWidget
argument_list|(
name|ws
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setObjectName
argument_list|(
literal|"plain2"
argument_list|)
expr_stmt|;
name|ws
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|widget
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|ws
operator|->
name|hide
argument_list|()
expr_stmt|;
name|widget
operator|=
operator|new
name|QWidget
argument_list|(
name|ws
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setObjectName
argument_list|(
literal|"maximized2"
argument_list|)
expr_stmt|;
name|widget
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|widget
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|ws
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|widget
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|widget
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|ws
operator|->
name|hide
argument_list|()
expr_stmt|;
name|widget
operator|=
operator|new
name|QWidget
argument_list|(
name|ws
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setObjectName
argument_list|(
literal|"minimized2"
argument_list|)
expr_stmt|;
name|widget
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
name|ws
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|widget
operator|->
name|isMinimized
argument_list|()
argument_list|)
expr_stmt|;
name|ws
operator|->
name|hide
argument_list|()
expr_stmt|;
operator|delete
name|ws
expr_stmt|;
block|}
end_function
begin_comment
comment|//#define USE_SHOW
end_comment
begin_function
DECL|function|changeWindowTitle
name|void
name|tst_QWorkspace
operator|::
name|changeWindowTitle
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|QSKIP
argument_list|(
literal|"Test fails on Windows CE due to QWorkspace state handling"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
endif|#
directive|endif
specifier|const
name|QString
name|mwc
argument_list|(
literal|"MainWindow's Caption"
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|mwc2
argument_list|(
literal|"MainWindow's New Caption"
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|wc
argument_list|(
literal|"Widget's Caption"
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|wc2
argument_list|(
literal|"Widget's New Caption"
argument_list|)
decl_stmt|;
name|QMainWindow
modifier|*
name|mw
init|=
operator|new
name|QMainWindow
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|X11BypassWindowManagerHint
argument_list|)
decl_stmt|;
name|mw
operator|->
name|setWindowTitle
argument_list|(
name|mwc
argument_list|)
expr_stmt|;
name|QWorkspace
modifier|*
name|ws
init|=
operator|new
name|QWorkspace
argument_list|(
name|mw
argument_list|)
decl_stmt|;
name|mw
operator|->
name|setCentralWidget
argument_list|(
name|ws
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|widget
init|=
operator|new
name|QWidget
argument_list|(
name|ws
argument_list|)
decl_stmt|;
name|widget
operator|->
name|setWindowTitle
argument_list|(
name|wc
argument_list|)
expr_stmt|;
name|ws
operator|->
name|addWindow
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|mwc
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|USE_SHOW
name|widget
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
else|#
directive|else
name|widget
operator|->
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowMaximized
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"%1 - [%2]"
argument_list|)
operator|.
name|arg
argument_list|(
name|mwc
argument_list|)
operator|.
name|arg
argument_list|(
name|wc
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|USE_SHOW
name|widget
operator|->
name|showNormal
argument_list|()
expr_stmt|;
else|#
directive|else
name|widget
operator|->
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|mwc
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|USE_SHOW
name|widget
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
else|#
directive|else
name|widget
operator|->
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowMaximized
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"%1 - [%2]"
argument_list|)
operator|.
name|arg
argument_list|(
name|mwc
argument_list|)
operator|.
name|arg
argument_list|(
name|wc
argument_list|)
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setWindowTitle
argument_list|(
name|wc2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"%1 - [%2]"
argument_list|)
operator|.
name|arg
argument_list|(
name|mwc
argument_list|)
operator|.
name|arg
argument_list|(
name|wc2
argument_list|)
argument_list|)
expr_stmt|;
name|mw
operator|->
name|setWindowTitle
argument_list|(
name|mwc2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"%1 - [%2]"
argument_list|)
operator|.
name|arg
argument_list|(
name|mwc2
argument_list|)
operator|.
name|arg
argument_list|(
name|wc2
argument_list|)
argument_list|)
expr_stmt|;
name|mw
operator|->
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
name|mw
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|USE_SHOW
name|mw
operator|->
name|showFullScreen
argument_list|()
expr_stmt|;
else|#
directive|else
name|mw
operator|->
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowFullScreen
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"%1 - [%2]"
argument_list|)
operator|.
name|arg
argument_list|(
name|mwc2
argument_list|)
operator|.
name|arg
argument_list|(
name|wc2
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|USE_SHOW
name|widget
operator|->
name|showNormal
argument_list|()
expr_stmt|;
else|#
directive|else
name|widget
operator|->
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|mwc2
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|USE_SHOW
name|widget
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
else|#
directive|else
name|widget
operator|->
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowMaximized
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"%1 - [%2]"
argument_list|)
operator|.
name|arg
argument_list|(
name|mwc2
argument_list|)
operator|.
name|arg
argument_list|(
name|wc2
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|USE_SHOW
name|mw
operator|->
name|showNormal
argument_list|()
expr_stmt|;
else|#
directive|else
name|mw
operator|->
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"%1 - [%2]"
argument_list|)
operator|.
name|arg
argument_list|(
name|mwc2
argument_list|)
operator|.
name|arg
argument_list|(
name|wc2
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|USE_SHOW
name|widget
operator|->
name|showNormal
argument_list|()
expr_stmt|;
else|#
directive|else
name|widget
operator|->
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|mwc2
argument_list|)
expr_stmt|;
operator|delete
name|mw
expr_stmt|;
block|}
end_function
begin_function
DECL|function|changeModified
name|void
name|tst_QWorkspace
operator|::
name|changeModified
parameter_list|()
block|{
specifier|const
name|QString
name|mwc
argument_list|(
literal|"MainWindow's Caption"
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|wc
argument_list|(
literal|"Widget's Caption[*]"
argument_list|)
decl_stmt|;
name|QMainWindow
modifier|*
name|mw
init|=
operator|new
name|QMainWindow
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|X11BypassWindowManagerHint
argument_list|)
decl_stmt|;
name|mw
operator|->
name|setWindowTitle
argument_list|(
name|mwc
argument_list|)
expr_stmt|;
name|QWorkspace
modifier|*
name|ws
init|=
operator|new
name|QWorkspace
argument_list|(
name|mw
argument_list|)
decl_stmt|;
name|mw
operator|->
name|setCentralWidget
argument_list|(
name|ws
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|widget
init|=
operator|new
name|QWidget
argument_list|(
name|ws
argument_list|)
decl_stmt|;
name|widget
operator|->
name|setWindowTitle
argument_list|(
name|wc
argument_list|)
expr_stmt|;
name|ws
operator|->
name|addWindow
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widget
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowMaximized
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widget
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widget
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setWindowModified
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widget
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowMaximized
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widget
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widget
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowMaximized
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widget
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setWindowModified
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widget
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setWindowModified
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widget
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widget
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
operator|delete
name|mw
expr_stmt|;
block|}
end_function
begin_class
DECL|class|MyChild
class|class
name|MyChild
super|:
specifier|public
name|QWidget
block|{
public|public:
DECL|function|MyChild
name|MyChild
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|,
name|Qt
operator|::
name|WFlags
name|f
init|=
literal|0
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|,
name|f
argument_list|)
block|{     }
DECL|function|sizeHint
name|QSize
name|sizeHint
parameter_list|()
specifier|const
block|{
return|return
name|QSize
argument_list|(
literal|234
argument_list|,
literal|123
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|childSize
name|void
name|tst_QWorkspace
operator|::
name|childSize
parameter_list|()
block|{
name|QWorkspace
name|ws
decl_stmt|;
name|MyChild
modifier|*
name|child
init|=
operator|new
name|MyChild
argument_list|(
operator|&
name|ws
argument_list|)
decl_stmt|;
name|child
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|child
operator|->
name|size
argument_list|()
argument_list|,
name|child
operator|->
name|sizeHint
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|child
expr_stmt|;
name|child
operator|=
operator|new
name|MyChild
argument_list|(
operator|&
name|ws
argument_list|)
expr_stmt|;
name|child
operator|->
name|setFixedSize
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|child
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|child
operator|->
name|size
argument_list|()
argument_list|,
name|child
operator|->
name|minimumSize
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|child
expr_stmt|;
name|child
operator|=
operator|new
name|MyChild
argument_list|(
operator|&
name|ws
argument_list|)
expr_stmt|;
name|child
operator|->
name|resize
argument_list|(
literal|150
argument_list|,
literal|150
argument_list|)
expr_stmt|;
name|child
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|child
operator|->
name|size
argument_list|()
argument_list|,
name|QSize
argument_list|(
literal|150
argument_list|,
literal|150
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|child
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fixedSize
name|void
name|tst_QWorkspace
operator|::
name|fixedSize
parameter_list|()
block|{
name|QWorkspace
modifier|*
name|ws
init|=
operator|new
name|QWorkspace
decl_stmt|;
name|int
name|i
decl_stmt|;
name|ws
operator|->
name|resize
argument_list|(
literal|500
argument_list|,
literal|500
argument_list|)
expr_stmt|;
comment|//     ws->show();
name|QSize
name|fixed
argument_list|(
literal|300
argument_list|,
literal|300
argument_list|)
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|child
init|=
operator|new
name|QWidget
argument_list|(
name|ws
argument_list|)
decl_stmt|;
name|child
operator|->
name|setFixedSize
argument_list|(
name|fixed
argument_list|)
expr_stmt|;
name|child
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
name|QWidgetList
name|windows
init|=
name|ws
operator|->
name|windowList
argument_list|()
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
operator|(
name|int
operator|)
name|windows
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|child
init|=
name|windows
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|child
operator|->
name|size
argument_list|()
argument_list|,
name|fixed
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|child
operator|->
name|visibleRegion
argument_list|()
operator|.
name|boundingRect
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|fixed
argument_list|)
expr_stmt|;
block|}
name|ws
operator|->
name|cascade
argument_list|()
expr_stmt|;
name|ws
operator|->
name|resize
argument_list|(
literal|800
argument_list|,
literal|800
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
operator|(
name|int
operator|)
name|windows
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|child
init|=
name|windows
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|child
operator|->
name|size
argument_list|()
argument_list|,
name|fixed
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|child
operator|->
name|visibleRegion
argument_list|()
operator|.
name|boundingRect
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|fixed
argument_list|)
expr_stmt|;
block|}
name|ws
operator|->
name|resize
argument_list|(
literal|500
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|ws
operator|->
name|tile
argument_list|()
expr_stmt|;
name|ws
operator|->
name|resize
argument_list|(
literal|800
argument_list|,
literal|800
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
operator|(
name|int
operator|)
name|windows
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|child
init|=
name|windows
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|child
operator|->
name|size
argument_list|()
argument_list|,
name|fixed
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|child
operator|->
name|visibleRegion
argument_list|()
operator|.
name|boundingRect
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|fixed
argument_list|)
expr_stmt|;
block|}
name|ws
operator|->
name|resize
argument_list|(
literal|500
argument_list|,
literal|500
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
operator|(
name|int
operator|)
name|windows
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|child
init|=
name|windows
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
operator|delete
name|child
expr_stmt|;
block|}
operator|delete
name|ws
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
end_if
begin_function
DECL|function|nativeSubWindows
name|void
name|tst_QWorkspace
operator|::
name|nativeSubWindows
parameter_list|()
block|{
block|{
comment|// Add native widgets after show.
name|QWorkspace
name|workspace
decl_stmt|;
name|workspace
operator|.
name|addWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|addWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|show
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
name|qt_x11_wait_for_window_manager
argument_list|(
operator|&
name|workspace
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// No native widgets.
foreach|foreach
control|(
name|QWidget
modifier|*
name|subWindow
decl|,
name|workspace
operator|.
name|windowList
argument_list|()
control|)
name|QVERIFY
argument_list|(
operator|!
name|subWindow
operator|->
name|parentWidget
argument_list|()
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|nativeWidget
init|=
operator|new
name|QWidget
decl_stmt|;
name|QVERIFY
argument_list|(
name|nativeWidget
operator|->
name|winId
argument_list|()
argument_list|)
expr_stmt|;
comment|// enforce native window.
name|workspace
operator|.
name|addWindow
argument_list|(
name|nativeWidget
argument_list|)
expr_stmt|;
comment|// All the sub-windows must be native.
foreach|foreach
control|(
name|QWidget
modifier|*
name|subWindow
decl|,
name|workspace
operator|.
name|windowList
argument_list|()
control|)
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|parentWidget
argument_list|()
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a non-native widget. This should become native.
name|QWidget
modifier|*
name|subWindow
init|=
name|workspace
operator|.
name|addWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|parentWidget
argument_list|()
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|// Add native widgets before show.
name|QWorkspace
name|workspace
decl_stmt|;
name|workspace
operator|.
name|addWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|nativeWidget
init|=
operator|new
name|QWidget
decl_stmt|;
operator|(
name|void
operator|)
name|nativeWidget
operator|->
name|winId
argument_list|()
expr_stmt|;
name|workspace
operator|.
name|addWindow
argument_list|(
name|nativeWidget
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|show
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
name|qt_x11_wait_for_window_manager
argument_list|(
operator|&
name|workspace
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// All the sub-windows must be native.
foreach|foreach
control|(
name|QWidget
modifier|*
name|subWindow
decl|,
name|workspace
operator|.
name|windowList
argument_list|()
control|)
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|parentWidget
argument_list|()
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|// Make a sub-window native *after* it's added to the area.
name|QWorkspace
name|workspace
decl_stmt|;
name|workspace
operator|.
name|addWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|addWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|show
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
name|qt_x11_wait_for_window_manager
argument_list|(
operator|&
name|workspace
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QWidget
modifier|*
name|nativeSubWindow
init|=
name|workspace
operator|.
name|windowList
argument_list|()
operator|.
name|last
argument_list|()
operator|->
name|parentWidget
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|nativeSubWindow
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|nativeSubWindow
operator|->
name|winId
argument_list|()
expr_stmt|;
comment|// All the sub-windows should be native at this point.
foreach|foreach
control|(
name|QWidget
modifier|*
name|subWindow
decl|,
name|workspace
operator|.
name|windowList
argument_list|()
control|)
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|parentWidget
argument_list|()
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|task206368
name|void
name|tst_QWorkspace
operator|::
name|task206368
parameter_list|()
block|{
comment|// Make sure the internal list of iconified windows doesn't contain dangling pointers.
name|QWorkspace
name|workspace
decl_stmt|;
name|QWidget
modifier|*
name|child
init|=
operator|new
name|QWidget
decl_stmt|;
name|QWidget
modifier|*
name|window
init|=
name|workspace
operator|.
name|addWindow
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|workspace
operator|.
name|show
argument_list|()
expr_stmt|;
name|child
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
operator|delete
name|window
expr_stmt|;
comment|// This shouldn't crash.
name|workspace
operator|.
name|arrangeIcons
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QWorkspace
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qworkspace.moc"
end_include
end_unit
