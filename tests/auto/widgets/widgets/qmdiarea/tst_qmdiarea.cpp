begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QMdiSubWindow>
end_include
begin_include
include|#
directive|include
file|<QMdiArea>
end_include
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QMainWindow>
end_include
begin_include
include|#
directive|include
file|<QMenuBar>
end_include
begin_include
include|#
directive|include
file|<QPushButton>
end_include
begin_include
include|#
directive|include
file|<QStyle>
end_include
begin_include
include|#
directive|include
file|<QStyleOption>
end_include
begin_include
include|#
directive|include
file|<QVBoxLayout>
end_include
begin_include
include|#
directive|include
file|<QLineEdit>
end_include
begin_include
include|#
directive|include
file|<QDesktopWidget>
end_include
begin_include
include|#
directive|include
file|<QDockWidget>
end_include
begin_include
include|#
directive|include
file|<QScrollBar>
end_include
begin_include
include|#
directive|include
file|<QTextEdit>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_OPENGL
end_ifndef
begin_include
include|#
directive|include
file|<QtOpenGL>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QStyleHints>
end_include
begin_decl_stmt
DECL|variable|DefaultWindowFlags
specifier|static
specifier|const
name|Qt
operator|::
name|WindowFlags
name|DefaultWindowFlags
init|=
name|Qt
operator|::
name|SubWindow
operator||
name|Qt
operator|::
name|WindowSystemMenuHint
operator||
name|Qt
operator|::
name|WindowTitleHint
operator||
name|Qt
operator|::
name|WindowMinMaxButtonsHint
operator||
name|Qt
operator|::
name|WindowCloseButtonHint
decl_stmt|;
end_decl_stmt
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QMdiArea::WindowOrder
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QTabWidget::TabPosition
argument_list|)
end_macro
begin_function
DECL|function|tabBetweenSubWindowsIn
specifier|static
name|bool
name|tabBetweenSubWindowsIn
parameter_list|(
name|QMdiArea
modifier|*
name|mdiArea
parameter_list|,
name|int
name|tabCount
init|=
operator|-
literal|1
parameter_list|,
name|bool
name|reverse
init|=
literal|false
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mdiArea
condition|)
block|{
name|qWarning
argument_list|(
literal|"Null pointer to mdi area"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|QList
argument_list|<
name|QMdiSubWindow
modifier|*
argument_list|>
name|subWindows
init|=
name|mdiArea
operator|->
name|subWindowList
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|walkThrough
init|=
name|tabCount
operator|==
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|walkThrough
condition|)
block|{
name|QMdiSubWindow
modifier|*
name|active
init|=
name|reverse
condition|?
name|subWindows
operator|.
name|front
argument_list|()
else|:
name|subWindows
operator|.
name|back
argument_list|()
decl_stmt|;
name|mdiArea
operator|->
name|setActiveSubWindow
argument_list|(
name|active
argument_list|)
expr_stmt|;
if|if
condition|(
name|mdiArea
operator|->
name|activeSubWindow
argument_list|()
operator|!=
name|active
condition|)
block|{
name|qWarning
argument_list|(
literal|"Failed to set active sub window"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|tabCount
operator|=
name|subWindows
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|QWidget
modifier|*
name|focusWidget
init|=
name|qApp
operator|->
name|focusWidget
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|focusWidget
condition|)
block|{
name|qWarning
argument_list|(
literal|"No focus widget"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
init|=
name|reverse
condition|?
name|Qt
operator|::
name|ShiftModifier
else|:
name|Qt
operator|::
name|NoModifier
decl_stmt|;
name|Qt
operator|::
name|Key
name|key
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|key
operator|=
name|Qt
operator|::
name|Key_Meta
expr_stmt|;
name|modifiers
operator||=
name|Qt
operator|::
name|MetaModifier
expr_stmt|;
else|#
directive|else
name|key
operator|=
name|Qt
operator|::
name|Key_Control
expr_stmt|;
name|modifiers
operator||=
name|Qt
operator|::
name|ControlModifier
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|keyPress
argument_list|(
name|focusWidget
argument_list|,
name|key
argument_list|,
name|modifiers
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabCount
condition|;
operator|++
name|i
control|)
block|{
name|QTest
operator|::
name|keyPress
argument_list|(
name|focusWidget
argument_list|,
name|reverse
condition|?
name|Qt
operator|::
name|Key_Backtab
else|:
name|Qt
operator|::
name|Key_Tab
argument_list|,
name|modifiers
argument_list|)
expr_stmt|;
if|if
condition|(
name|tabCount
operator|>
literal|1
condition|)
name|QTest
operator|::
name|qWait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
if|if
condition|(
name|walkThrough
condition|)
block|{
name|QRubberBand
modifier|*
name|rubberBand
init|=
name|mdiArea
operator|->
name|viewport
argument_list|()
operator|->
name|findChild
argument_list|<
name|QRubberBand
operator|*
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|rubberBand
condition|)
block|{
name|qWarning
argument_list|(
literal|"No rubber band"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|QMdiSubWindow
modifier|*
name|subWindow
init|=
name|subWindows
operator|.
name|at
argument_list|(
name|reverse
condition|?
name|subWindows
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|-
name|i
else|:
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|rubberBand
operator|->
name|geometry
argument_list|()
operator|!=
name|subWindow
operator|->
name|geometry
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"Rubber band has different geometry"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
block|}
name|QTest
operator|::
name|keyRelease
argument_list|(
name|focusWidget
argument_list|,
name|key
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|tabBarShapeFrom
specifier|static
specifier|inline
name|QTabBar
operator|::
name|Shape
name|tabBarShapeFrom
parameter_list|(
name|QTabWidget
operator|::
name|TabShape
name|shape
parameter_list|,
name|QTabWidget
operator|::
name|TabPosition
name|position
parameter_list|)
block|{
specifier|const
name|bool
name|rounded
init|=
operator|(
name|shape
operator|==
name|QTabWidget
operator|::
name|Rounded
operator|)
decl_stmt|;
if|if
condition|(
name|position
operator|==
name|QTabWidget
operator|::
name|North
condition|)
return|return
name|rounded
condition|?
name|QTabBar
operator|::
name|RoundedNorth
else|:
name|QTabBar
operator|::
name|TriangularNorth
return|;
if|if
condition|(
name|position
operator|==
name|QTabWidget
operator|::
name|South
condition|)
return|return
name|rounded
condition|?
name|QTabBar
operator|::
name|RoundedSouth
else|:
name|QTabBar
operator|::
name|TriangularSouth
return|;
if|if
condition|(
name|position
operator|==
name|QTabWidget
operator|::
name|East
condition|)
return|return
name|rounded
condition|?
name|QTabBar
operator|::
name|RoundedEast
else|:
name|QTabBar
operator|::
name|TriangularEast
return|;
if|if
condition|(
name|position
operator|==
name|QTabWidget
operator|::
name|West
condition|)
return|return
name|rounded
condition|?
name|QTabBar
operator|::
name|RoundedWest
else|:
name|QTabBar
operator|::
name|TriangularWest
return|;
return|return
name|QTabBar
operator|::
name|RoundedNorth
return|;
block|}
end_function
begin_enum
DECL|enum|Arrangement
enum|enum
name|Arrangement
block|{
DECL|enumerator|Tiled
name|Tiled
block|,
DECL|enumerator|Cascaded
name|Cascaded
block|}
enum|;
end_enum
begin_function
DECL|function|verifyArrangement
specifier|static
name|bool
name|verifyArrangement
parameter_list|(
name|QMdiArea
modifier|*
name|mdiArea
parameter_list|,
name|Arrangement
name|arrangement
parameter_list|,
specifier|const
name|QList
argument_list|<
name|int
argument_list|>
modifier|&
name|expectedIndices
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mdiArea
operator|||
name|expectedIndices
operator|.
name|isEmpty
argument_list|()
operator|||
name|mdiArea
operator|->
name|subWindowList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
specifier|const
name|QList
argument_list|<
name|QMdiSubWindow
modifier|*
argument_list|>
name|subWindows
init|=
name|mdiArea
operator|->
name|subWindowList
argument_list|()
decl_stmt|;
specifier|const
name|QMdiSubWindow
modifier|*
specifier|const
name|firstSubWindow
init|=
name|subWindows
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|arrangement
condition|)
block|{
case|case
name|Tiled
case|:
block|{
comment|// Calculate the number of rows and columns.
specifier|const
name|int
name|n
init|=
name|subWindows
operator|.
name|count
argument_list|()
decl_stmt|;
specifier|const
name|int
name|numColumns
init|=
name|qMax
argument_list|(
name|qCeil
argument_list|(
name|qSqrt
argument_list|(
name|qreal
argument_list|(
name|n
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|int
name|numRows
init|=
name|qMax
argument_list|(
operator|(
name|n
operator|%
name|numColumns
operator|)
condition|?
operator|(
name|n
operator|/
name|numColumns
operator|+
literal|1
operator|)
else|:
operator|(
name|n
operator|/
name|numColumns
operator|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// Ensure that the geometry of all the subwindows are as expected by using
comment|// QWidget::childAt starting from the middle of the topleft cell and subsequently
comment|// adding rowWidth and rowHeight (going from left to right).
specifier|const
name|int
name|columnWidth
init|=
name|mdiArea
operator|->
name|viewport
argument_list|()
operator|->
name|width
argument_list|()
operator|/
name|numColumns
decl_stmt|;
specifier|const
name|int
name|rowHeight
init|=
name|mdiArea
operator|->
name|viewport
argument_list|()
operator|->
name|height
argument_list|()
operator|/
name|numRows
decl_stmt|;
name|QPoint
name|subWindowPos
argument_list|(
name|columnWidth
operator|/
literal|2
argument_list|,
name|rowHeight
operator|/
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numColumns
condition|;
operator|++
name|j
control|)
block|{
specifier|const
name|int
name|index
init|=
name|expectedIndices
operator|.
name|at
argument_list|(
name|i
operator|*
name|numColumns
operator|+
name|j
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|actual
init|=
name|mdiArea
operator|->
name|viewport
argument_list|()
operator|->
name|childAt
argument_list|(
name|subWindowPos
argument_list|)
decl_stmt|;
name|QMdiSubWindow
modifier|*
name|expected
init|=
name|subWindows
operator|.
name|at
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|actual
operator|!=
name|expected
operator|&&
operator|!
name|expected
operator|->
name|isAncestorOf
argument_list|(
name|actual
argument_list|)
condition|)
return|return
literal|false
return|;
name|subWindowPos
operator|.
name|rx
argument_list|()
operator|+=
name|columnWidth
expr_stmt|;
block|}
name|subWindowPos
operator|.
name|rx
argument_list|()
operator|=
name|columnWidth
operator|/
literal|2
expr_stmt|;
name|subWindowPos
operator|.
name|ry
argument_list|()
operator|+=
name|rowHeight
expr_stmt|;
block|}
break|break;
block|}
case|case
name|Cascaded
case|:
block|{
comment|// Calculate the delta (dx, dy) between two cascaded subwindows.
name|QStyleOptionTitleBar
name|options
decl_stmt|;
name|options
operator|.
name|initFrom
argument_list|(
name|firstSubWindow
argument_list|)
expr_stmt|;
name|int
name|titleBarHeight
init|=
name|firstSubWindow
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_TitleBarHeight
argument_list|,
operator|&
name|options
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
comment|// ### Remove this after the mac style has been fixed
if|if
condition|(
name|firstSubWindow
operator|->
name|style
argument_list|()
operator|->
name|inherits
argument_list|(
literal|"QMacStyle"
argument_list|)
condition|)
name|titleBarHeight
operator|-=
literal|4
expr_stmt|;
endif|#
directive|endif
specifier|const
name|QFontMetrics
name|fontMetrics
init|=
name|QFontMetrics
argument_list|(
name|QApplication
operator|::
name|font
argument_list|(
literal|"QMdiSubWindowTitleBar"
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|int
name|dy
init|=
name|qMax
argument_list|(
name|titleBarHeight
operator|-
operator|(
name|titleBarHeight
operator|-
name|fontMetrics
operator|.
name|height
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|int
name|dx
init|=
literal|10
decl_stmt|;
comment|// Current activation/stacking order.
specifier|const
name|QList
argument_list|<
name|QMdiSubWindow
modifier|*
argument_list|>
name|activationOrderList
init|=
name|mdiArea
operator|->
name|subWindowList
argument_list|(
name|QMdiArea
operator|::
name|ActivationHistoryOrder
argument_list|)
decl_stmt|;
comment|// Ensure that the geometry of all the subwindows are as expected by using
comment|// QWidget::childAt with the position of the first one and subsequently adding
comment|// dx and dy.
name|QPoint
name|subWindowPos
argument_list|(
literal|20
argument_list|,
literal|5
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|int
name|expectedIndex
decl|,
name|expectedIndices
control|)
block|{
name|QMdiSubWindow
modifier|*
name|expected
init|=
name|subWindows
operator|.
name|at
argument_list|(
name|expectedIndex
argument_list|)
decl_stmt|;
name|expected
operator|->
name|raise
argument_list|()
expr_stmt|;
if|if
condition|(
name|mdiArea
operator|->
name|viewport
argument_list|()
operator|->
name|childAt
argument_list|(
name|subWindowPos
argument_list|)
operator|!=
name|expected
condition|)
return|return
literal|false
return|;
name|expected
operator|->
name|lower
argument_list|()
expr_stmt|;
name|subWindowPos
operator|.
name|rx
argument_list|()
operator|+=
name|dx
expr_stmt|;
name|subWindowPos
operator|.
name|ry
argument_list|()
operator|+=
name|dy
expr_stmt|;
block|}
comment|// Restore stacking order.
foreach|foreach
control|(
name|QMdiSubWindow
modifier|*
name|subWindow
decl|,
name|activationOrderList
control|)
block|{
name|mdiArea
operator|->
name|setActiveSubWindow
argument_list|(
name|subWindow
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
default|default:
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_class
DECL|class|tst_QMdiArea
class|class
name|tst_QMdiArea
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QMdiArea
parameter_list|()
constructor_decl|;
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
protected|protected
name|slots
protected|:
name|void
name|activeChanged
parameter_list|(
name|QMdiSubWindow
modifier|*
name|child
parameter_list|)
function_decl|;
private|private
name|slots
private|:
comment|// Tests from QWorkspace
name|void
name|subWindowActivated_data
parameter_list|()
function_decl|;
name|void
name|subWindowActivated
parameter_list|()
function_decl|;
name|void
name|subWindowActivated2
parameter_list|()
function_decl|;
name|void
name|subWindowActivatedWithMinimize
parameter_list|()
function_decl|;
name|void
name|showWindows
parameter_list|()
function_decl|;
name|void
name|changeWindowTitle
parameter_list|()
function_decl|;
name|void
name|changeModified
parameter_list|()
function_decl|;
name|void
name|childSize
parameter_list|()
function_decl|;
name|void
name|fixedSize
parameter_list|()
function_decl|;
comment|// New tests
name|void
name|minimumSizeHint
parameter_list|()
function_decl|;
name|void
name|sizeHint
parameter_list|()
function_decl|;
name|void
name|setActiveSubWindow
parameter_list|()
function_decl|;
name|void
name|activeSubWindow
parameter_list|()
function_decl|;
name|void
name|currentSubWindow
parameter_list|()
function_decl|;
name|void
name|addAndRemoveWindows
parameter_list|()
function_decl|;
name|void
name|addAndRemoveWindowsWithReparenting
parameter_list|()
function_decl|;
name|void
name|removeSubWindow_2
parameter_list|()
function_decl|;
name|void
name|closeWindows
parameter_list|()
function_decl|;
name|void
name|activateNextAndPreviousWindow
parameter_list|()
function_decl|;
name|void
name|subWindowList_data
parameter_list|()
function_decl|;
name|void
name|subWindowList
parameter_list|()
function_decl|;
name|void
name|setBackground
parameter_list|()
function_decl|;
name|void
name|setViewport
parameter_list|()
function_decl|;
name|void
name|tileSubWindows
parameter_list|()
function_decl|;
name|void
name|cascadeAndTileSubWindows
parameter_list|()
function_decl|;
name|void
name|resizeMaximizedChildWindows_data
parameter_list|()
function_decl|;
name|void
name|resizeMaximizedChildWindows
parameter_list|()
function_decl|;
name|void
name|focusWidgetAfterAddSubWindow
parameter_list|()
function_decl|;
name|void
name|dontMaximizeSubWindowOnActivation
parameter_list|()
function_decl|;
name|void
name|delayedPlacement
parameter_list|()
function_decl|;
name|void
name|iconGeometryInMenuBar
parameter_list|()
function_decl|;
name|void
name|resizeTimer
parameter_list|()
function_decl|;
name|void
name|updateScrollBars
parameter_list|()
function_decl|;
name|void
name|setActivationOrder_data
parameter_list|()
function_decl|;
name|void
name|setActivationOrder
parameter_list|()
function_decl|;
name|void
name|tabBetweenSubWindows
parameter_list|()
function_decl|;
name|void
name|setViewMode
parameter_list|()
function_decl|;
name|void
name|setTabsClosable
parameter_list|()
function_decl|;
name|void
name|setTabsMovable
parameter_list|()
function_decl|;
name|void
name|setTabShape
parameter_list|()
function_decl|;
name|void
name|setTabPosition_data
parameter_list|()
function_decl|;
name|void
name|setTabPosition
parameter_list|()
function_decl|;
name|void
name|nativeSubWindows
parameter_list|()
function_decl|;
name|void
name|task_209615
parameter_list|()
function_decl|;
name|void
name|task_236750
parameter_list|()
function_decl|;
private|private:
DECL|member|activeWindow
name|QMdiSubWindow
modifier|*
name|activeWindow
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QMdiArea
name|tst_QMdiArea
operator|::
name|tst_QMdiArea
parameter_list|()
member_init_list|:
name|activeWindow
argument_list|(
literal|0
argument_list|)
block|{
name|qRegisterMetaType
argument_list|<
name|QMdiSubWindow
operator|*
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|initTestCase
name|void
name|tst_QMdiArea
operator|::
name|initTestCase
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE
comment|//disable magic for WindowsCE
name|qApp
operator|->
name|setAutoMaximizeThreshold
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|// Old QWorkspace tests
end_comment
begin_function
DECL|function|activeChanged
name|void
name|tst_QMdiArea
operator|::
name|activeChanged
parameter_list|(
name|QMdiSubWindow
modifier|*
name|child
parameter_list|)
block|{
name|activeWindow
operator|=
name|child
expr_stmt|;
block|}
end_function
begin_function
DECL|function|subWindowActivated_data
name|void
name|tst_QMdiArea
operator|::
name|subWindowActivated_data
parameter_list|()
block|{
comment|// define the test elements we're going to use
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"count"
argument_list|)
expr_stmt|;
comment|// create a first testdata instance and fill it with data
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
literal|2
expr_stmt|;
block|}
end_function
begin_function
DECL|function|subWindowActivated
name|void
name|tst_QMdiArea
operator|::
name|subWindowActivated
parameter_list|()
block|{
name|QMainWindow
name|mw
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|mw
operator|.
name|menuBar
argument_list|()
expr_stmt|;
name|QMdiArea
modifier|*
name|workspace
init|=
operator|new
name|QMdiArea
argument_list|(
operator|&
name|mw
argument_list|)
decl_stmt|;
name|workspace
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"testWidget"
argument_list|)
argument_list|)
expr_stmt|;
name|mw
operator|.
name|setCentralWidget
argument_list|(
name|workspace
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
name|workspace
argument_list|,
name|SIGNAL
argument_list|(
name|subWindowActivated
argument_list|(
name|QMdiSubWindow
operator|*
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|workspace
argument_list|,
name|SIGNAL
argument_list|(
name|subWindowActivated
argument_list|(
name|QMdiSubWindow
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|activeChanged
argument_list|(
name|QMdiSubWindow
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mw
operator|.
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
operator|&
name|mw
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|widget
init|=
operator|new
name|QWidget
argument_list|(
name|workspace
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DeleteOnClose
argument_list|)
expr_stmt|;
name|workspace
operator|->
name|addSubWindow
argument_list|(
name|widget
argument_list|)
operator|->
name|show
argument_list|()
expr_stmt|;
name|widget
operator|->
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|activeWindow
operator|==
name|workspace
operator|->
name|activeSubWindow
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|QList
argument_list|<
name|QMdiSubWindow
modifier|*
argument_list|>
name|windows
init|=
name|workspace
operator|->
name|subWindowList
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|windows
operator|.
name|count
argument_list|()
argument_list|,
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|QMdiSubWindow
modifier|*
name|window
init|=
name|windows
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|window
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|activeWindow
operator|==
name|workspace
operator|->
name|activeSubWindow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|1
condition|)
name|QVERIFY
argument_list|(
name|activeWindow
operator|==
name|window
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|QMdiSubWindow
modifier|*
name|window
init|=
name|windows
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|window
operator|->
name|showNormal
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|==
name|activeWindow
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|activeWindow
operator|==
name|workspace
operator|->
name|activeSubWindow
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
while|while
condition|(
name|workspace
operator|->
name|activeSubWindow
argument_list|()
condition|)
block|{
name|workspace
operator|->
name|activeSubWindow
argument_list|()
operator|->
name|close
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|activeWindow
operator|==
name|workspace
operator|->
name|activeSubWindow
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|activeWindow
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|workspace
operator|->
name|activeSubWindow
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|->
name|subWindowList
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|{
name|workspace
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QWidget
modifier|*
name|widget
init|=
operator|new
name|QWidget
argument_list|(
name|workspace
argument_list|)
decl_stmt|;
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DeleteOnClose
argument_list|)
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|window
init|=
name|workspace
operator|->
name|addSubWindow
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|widget
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|workspace
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|activeWindow
operator|==
name|window
argument_list|)
expr_stmt|;
name|window
operator|->
name|close
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|activeWindow
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|{
name|workspace
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QWidget
modifier|*
name|widget
init|=
operator|new
name|QWidget
argument_list|(
name|workspace
argument_list|)
decl_stmt|;
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DeleteOnClose
argument_list|)
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|window
init|=
name|workspace
operator|->
name|addSubWindow
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|widget
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|sendPostedEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|workspace
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|activeWindow
operator|==
name|window
argument_list|)
expr_stmt|;
name|window
operator|->
name|close
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|activeWindow
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|{
name|QWidget
modifier|*
name|widget
init|=
operator|new
name|QWidget
argument_list|(
name|workspace
argument_list|)
decl_stmt|;
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DeleteOnClose
argument_list|)
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|window
init|=
name|workspace
operator|->
name|addSubWindow
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|widget
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|activeWindow
operator|==
name|window
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|workspace
operator|->
name|activeSubWindow
argument_list|()
operator|==
name|window
argument_list|)
expr_stmt|;
name|window
operator|->
name|close
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|workspace
operator|->
name|activeSubWindow
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|activeWindow
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_MAC
end_ifdef
begin_include
include|#
directive|include
file|<Security/AuthSession.h>
end_include
begin_function
DECL|function|macHasAccessToWindowsServer
name|bool
name|macHasAccessToWindowsServer
parameter_list|()
block|{
name|SecuritySessionId
name|mySession
decl_stmt|;
name|SessionAttributeBits
name|sessionInfo
decl_stmt|;
name|SessionGetInfo
argument_list|(
name|callerSecuritySession
argument_list|,
operator|&
name|mySession
argument_list|,
operator|&
name|sessionInfo
argument_list|)
expr_stmt|;
return|return
operator|(
name|sessionInfo
operator|&
name|sessionHasGraphicAccess
operator|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|subWindowActivated2
name|void
name|tst_QMdiArea
operator|::
name|subWindowActivated2
parameter_list|()
block|{
name|QMdiArea
name|mdiArea
decl_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|mdiArea
argument_list|,
name|SIGNAL
argument_list|(
name|subWindowActivated
argument_list|(
name|QMdiSubWindow
operator|*
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|show
argument_list|()
expr_stmt|;
name|mdiArea
operator|.
name|activateWindow
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowActive
argument_list|(
operator|&
name|mdiArea
argument_list|)
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|mdiArea
operator|.
name|subWindowList
argument_list|()
operator|.
name|back
argument_list|()
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Just to make sure another widget is on top wrt. stacking order.
comment|// This will typically become the active window if things are broken.
name|QMdiSubWindow
modifier|*
name|staysOnTopWindow
init|=
name|mdiArea
operator|.
name|subWindowList
argument_list|()
operator|.
name|at
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|staysOnTopWindow
operator|->
name|setWindowFlags
argument_list|(
name|Qt
operator|::
name|WindowStaysOnTopHint
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|setActiveSubWindow
argument_list|(
name|staysOnTopWindow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|staysOnTopWindow
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|activeSubWindow
init|=
name|mdiArea
operator|.
name|subWindowList
argument_list|()
operator|.
name|at
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|mdiArea
operator|.
name|setActiveSubWindow
argument_list|(
name|activeSubWindow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|activeSubWindow
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Check that we only emit _one_ signal and the active window
comment|// is unchanged after hide/show.
name|mdiArea
operator|.
name|hide
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
name|qt_x11_wait_for_window_manager
argument_list|(
operator|&
name|mdiArea
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|currentSubWindow
argument_list|()
argument_list|,
name|activeSubWindow
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|mdiArea
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|mdiArea
argument_list|)
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|activeSubWindow
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|qGuiApp
operator|->
name|styleHints
argument_list|()
operator|->
name|showIsFullScreen
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"Platform is auto maximizing, so no showMinimized()"
argument_list|)
expr_stmt|;
comment|// Check that we only emit _one_ signal and the active window
comment|// is unchanged after showMinimized/showNormal.
name|mdiArea
operator|.
name|showMinimized
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
if|if
condition|(
operator|!
name|macHasAccessToWindowsServer
argument_list|()
condition|)
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"showMinimized doesn't really minimize if you don't have access to the server"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|QSKIP
argument_list|(
literal|"Not fixed yet. See Task 197453"
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|QSKIP
argument_list|(
literal|"QTBUG-25298: This test is unstable on Mac."
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTRY_COMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|currentSubWindow
argument_list|()
argument_list|,
name|activeSubWindow
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// For this test, the QMdiArea widget must be active after minimizing and
comment|// showing it again. QMdiArea has no active sub window if it is inactive itself.
name|mdiArea
operator|.
name|showNormal
argument_list|()
expr_stmt|;
name|mdiArea
operator|.
name|activateWindow
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowActive
argument_list|(
operator|&
name|mdiArea
argument_list|)
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|activeSubWindow
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|subWindowActivatedWithMinimize
name|void
name|tst_QMdiArea
operator|::
name|subWindowActivatedWithMinimize
parameter_list|()
block|{
name|QMainWindow
name|mw
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|mw
operator|.
name|menuBar
argument_list|()
expr_stmt|;
name|QMdiArea
modifier|*
name|workspace
init|=
operator|new
name|QMdiArea
argument_list|(
operator|&
name|mw
argument_list|)
decl_stmt|;
name|workspace
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"testWidget"
argument_list|)
argument_list|)
expr_stmt|;
name|mw
operator|.
name|setCentralWidget
argument_list|(
name|workspace
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
name|workspace
argument_list|,
name|SIGNAL
argument_list|(
name|subWindowActivated
argument_list|(
name|QMdiSubWindow
operator|*
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|workspace
argument_list|,
name|SIGNAL
argument_list|(
name|subWindowActivated
argument_list|(
name|QMdiSubWindow
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|activeChanged
argument_list|(
name|QMdiSubWindow
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mw
operator|.
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
operator|&
name|mw
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|widget
init|=
operator|new
name|QWidget
argument_list|(
name|workspace
argument_list|)
decl_stmt|;
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DeleteOnClose
argument_list|)
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|window1
init|=
name|workspace
operator|->
name|addSubWindow
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|widget2
init|=
operator|new
name|QWidget
argument_list|(
name|workspace
argument_list|)
decl_stmt|;
name|widget2
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DeleteOnClose
argument_list|)
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|window2
init|=
name|workspace
operator|->
name|addSubWindow
argument_list|(
name|widget2
argument_list|)
decl_stmt|;
name|widget
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|activeWindow
operator|==
name|window1
argument_list|)
expr_stmt|;
name|widget2
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|activeWindow
operator|==
name|window2
argument_list|)
expr_stmt|;
name|window2
operator|->
name|close
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|activeWindow
operator|==
name|window1
argument_list|)
expr_stmt|;
name|window1
operator|->
name|close
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|workspace
operator|->
name|activeSubWindow
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|activeWindow
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|workspace
operator|->
name|subWindowList
argument_list|()
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|showWindows
name|void
name|tst_QMdiArea
operator|::
name|showWindows
parameter_list|()
block|{
name|QMdiArea
modifier|*
name|ws
init|=
operator|new
name|QMdiArea
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|widget
init|=
literal|0
decl_stmt|;
name|ws
operator|->
name|show
argument_list|()
expr_stmt|;
name|widget
operator|=
operator|new
name|QWidget
argument_list|(
name|ws
argument_list|)
expr_stmt|;
name|widget
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|widget
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|widget
operator|=
operator|new
name|QWidget
argument_list|(
name|ws
argument_list|)
expr_stmt|;
name|widget
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|widget
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|widget
operator|->
name|showNormal
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|widget
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|widget
operator|=
operator|new
name|QWidget
argument_list|(
name|ws
argument_list|)
expr_stmt|;
name|widget
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|widget
operator|->
name|isMinimized
argument_list|()
argument_list|)
expr_stmt|;
name|widget
operator|->
name|showNormal
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|widget
operator|->
name|isMinimized
argument_list|()
argument_list|)
expr_stmt|;
name|ws
operator|->
name|hide
argument_list|()
expr_stmt|;
name|widget
operator|=
operator|new
name|QWidget
argument_list|(
name|ws
argument_list|)
expr_stmt|;
name|ws
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|widget
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|ws
operator|->
name|hide
argument_list|()
expr_stmt|;
name|widget
operator|=
operator|new
name|QWidget
argument_list|(
name|ws
argument_list|)
expr_stmt|;
name|widget
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|widget
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|ws
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|widget
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|widget
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|ws
operator|->
name|hide
argument_list|()
expr_stmt|;
name|widget
operator|=
operator|new
name|QWidget
argument_list|(
name|ws
argument_list|)
expr_stmt|;
name|widget
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
name|ws
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|widget
operator|->
name|isMinimized
argument_list|()
argument_list|)
expr_stmt|;
name|ws
operator|->
name|hide
argument_list|()
expr_stmt|;
operator|delete
name|ws
expr_stmt|;
block|}
end_function
begin_comment
comment|//#define USE_SHOW
end_comment
begin_function
DECL|function|changeWindowTitle
name|void
name|tst_QMdiArea
operator|::
name|changeWindowTitle
parameter_list|()
block|{
specifier|const
name|QString
name|mwc
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"MainWindow's Caption"
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|mwc2
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"MainWindow's New Caption"
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|wc
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Widget's Caption"
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|wc2
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Widget's New Caption"
argument_list|)
decl_stmt|;
name|QMainWindow
modifier|*
name|mw
init|=
operator|new
name|QMainWindow
decl_stmt|;
name|mw
operator|->
name|setWindowTitle
argument_list|(
name|mwc
argument_list|)
expr_stmt|;
name|QMdiArea
modifier|*
name|ws
init|=
operator|new
name|QMdiArea
argument_list|(
name|mw
argument_list|)
decl_stmt|;
name|mw
operator|->
name|setCentralWidget
argument_list|(
name|ws
argument_list|)
expr_stmt|;
name|mw
operator|->
name|menuBar
argument_list|()
expr_stmt|;
name|mw
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
name|mw
argument_list|)
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|widget
init|=
operator|new
name|QWidget
argument_list|(
name|ws
argument_list|)
decl_stmt|;
name|widget
operator|->
name|setWindowTitle
argument_list|(
name|wc
argument_list|)
expr_stmt|;
name|ws
operator|->
name|addSubWindow
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|mwc
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|USE_SHOW
name|widget
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
else|#
directive|else
name|widget
operator|->
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowMaximized
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QTRY_COMPARE
argument_list|(
name|mw
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1 - [%2]"
argument_list|)
operator|.
name|arg
argument_list|(
name|mwc
argument_list|)
operator|.
name|arg
argument_list|(
name|wc
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|mw
operator|->
name|hide
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|mw
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
name|mw
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QTRY_COMPARE
argument_list|(
name|mw
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1 - [%2]"
argument_list|)
operator|.
name|arg
argument_list|(
name|mwc
argument_list|)
operator|.
name|arg
argument_list|(
name|wc
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|USE_SHOW
name|widget
operator|->
name|showNormal
argument_list|()
expr_stmt|;
else|#
directive|else
name|widget
operator|->
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|mwc
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|USE_SHOW
name|widget
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
else|#
directive|else
name|widget
operator|->
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowMaximized
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QTRY_COMPARE
argument_list|(
name|mw
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1 - [%2]"
argument_list|)
operator|.
name|arg
argument_list|(
name|mwc
argument_list|)
operator|.
name|arg
argument_list|(
name|wc
argument_list|)
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setWindowTitle
argument_list|(
name|wc2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1 - [%2]"
argument_list|)
operator|.
name|arg
argument_list|(
name|mwc
argument_list|)
operator|.
name|arg
argument_list|(
name|wc2
argument_list|)
argument_list|)
expr_stmt|;
name|mw
operator|->
name|setWindowTitle
argument_list|(
name|mwc2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1 - [%2]"
argument_list|)
operator|.
name|arg
argument_list|(
name|mwc2
argument_list|)
operator|.
name|arg
argument_list|(
name|wc2
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|mw
operator|->
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
name|mw
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|USE_SHOW
name|mw
operator|->
name|showFullScreen
argument_list|()
expr_stmt|;
else|#
directive|else
name|mw
operator|->
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowFullScreen
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1 - [%2]"
argument_list|)
operator|.
name|arg
argument_list|(
name|mwc2
argument_list|)
operator|.
name|arg
argument_list|(
name|wc2
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|USE_SHOW
name|widget
operator|->
name|showNormal
argument_list|()
expr_stmt|;
else|#
directive|else
name|widget
operator|->
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|mwc
argument_list|)
expr_stmt|;
else|#
directive|else
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|mwc2
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|USE_SHOW
name|widget
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
else|#
directive|else
name|widget
operator|->
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowMaximized
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1 - [%2]"
argument_list|)
operator|.
name|arg
argument_list|(
name|mwc2
argument_list|)
operator|.
name|arg
argument_list|(
name|wc2
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|USE_SHOW
name|mw
operator|->
name|showNormal
argument_list|()
expr_stmt|;
else|#
directive|else
name|mw
operator|->
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|USE_SHOW
name|widget
operator|->
name|showNormal
argument_list|()
expr_stmt|;
else|#
directive|else
name|widget
operator|->
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
expr_stmt|;
endif|#
directive|endif
operator|delete
name|mw
expr_stmt|;
block|}
end_function
begin_function
DECL|function|changeModified
name|void
name|tst_QMdiArea
operator|::
name|changeModified
parameter_list|()
block|{
specifier|const
name|QString
name|mwc
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"MainWindow's Caption"
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|wc
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Widget's Caption[*]"
argument_list|)
decl_stmt|;
name|QMainWindow
modifier|*
name|mw
init|=
operator|new
name|QMainWindow
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|mw
operator|->
name|setWindowTitle
argument_list|(
name|mwc
argument_list|)
expr_stmt|;
name|QMdiArea
modifier|*
name|ws
init|=
operator|new
name|QMdiArea
argument_list|(
name|mw
argument_list|)
decl_stmt|;
name|mw
operator|->
name|setCentralWidget
argument_list|(
name|ws
argument_list|)
expr_stmt|;
name|mw
operator|->
name|menuBar
argument_list|()
expr_stmt|;
name|mw
operator|->
name|show
argument_list|()
expr_stmt|;
name|QWidget
modifier|*
name|widget
init|=
operator|new
name|QWidget
argument_list|(
name|ws
argument_list|)
decl_stmt|;
name|widget
operator|->
name|setWindowTitle
argument_list|(
name|wc
argument_list|)
expr_stmt|;
name|ws
operator|->
name|addSubWindow
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widget
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowMaximized
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widget
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widget
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setWindowModified
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widget
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowMaximized
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|widget
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widget
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowMaximized
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|widget
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setWindowModified
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widget
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setWindowModified
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|widget
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mw
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widget
operator|->
name|isWindowModified
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
operator|delete
name|mw
expr_stmt|;
block|}
end_function
begin_class
DECL|class|MyChild
class|class
name|MyChild
super|:
specifier|public
name|QWidget
block|{
public|public:
DECL|function|MyChild
name|MyChild
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
block|{}
DECL|function|sizeHint
name|QSize
name|sizeHint
parameter_list|()
specifier|const
block|{
return|return
name|QSize
argument_list|(
literal|234
argument_list|,
literal|123
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|childSize
name|void
name|tst_QMdiArea
operator|::
name|childSize
parameter_list|()
block|{
name|QMdiArea
name|ws
decl_stmt|;
name|MyChild
modifier|*
name|child
init|=
operator|new
name|MyChild
argument_list|(
operator|&
name|ws
argument_list|)
decl_stmt|;
name|child
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|child
operator|->
name|size
argument_list|()
argument_list|,
name|child
operator|->
name|sizeHint
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|child
expr_stmt|;
name|child
operator|=
operator|new
name|MyChild
argument_list|(
operator|&
name|ws
argument_list|)
expr_stmt|;
name|child
operator|->
name|setFixedSize
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|child
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|child
operator|->
name|size
argument_list|()
argument_list|,
name|child
operator|->
name|minimumSize
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|child
expr_stmt|;
name|child
operator|=
operator|new
name|MyChild
argument_list|(
operator|&
name|ws
argument_list|)
expr_stmt|;
name|child
operator|->
name|resize
argument_list|(
literal|150
argument_list|,
literal|150
argument_list|)
expr_stmt|;
name|child
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|child
operator|->
name|size
argument_list|()
argument_list|,
name|QSize
argument_list|(
literal|150
argument_list|,
literal|150
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|child
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fixedSize
name|void
name|tst_QMdiArea
operator|::
name|fixedSize
parameter_list|()
block|{
name|QMdiArea
modifier|*
name|ws
init|=
operator|new
name|QMdiArea
decl_stmt|;
name|int
name|i
decl_stmt|;
name|ws
operator|->
name|resize
argument_list|(
literal|500
argument_list|,
literal|500
argument_list|)
expr_stmt|;
comment|//     ws->show();
name|QSize
name|fixed
argument_list|(
literal|300
argument_list|,
literal|300
argument_list|)
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|child
init|=
operator|new
name|QWidget
argument_list|(
name|ws
argument_list|)
decl_stmt|;
name|child
operator|->
name|setFixedSize
argument_list|(
name|fixed
argument_list|)
expr_stmt|;
name|child
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
name|QList
argument_list|<
name|QMdiSubWindow
modifier|*
argument_list|>
name|windows
init|=
name|ws
operator|->
name|subWindowList
argument_list|()
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
operator|(
name|int
operator|)
name|windows
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QMdiSubWindow
modifier|*
name|child
init|=
name|windows
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|child
operator|->
name|size
argument_list|()
argument_list|,
name|fixed
argument_list|)
expr_stmt|;
block|}
name|ws
operator|->
name|cascadeSubWindows
argument_list|()
expr_stmt|;
name|ws
operator|->
name|resize
argument_list|(
literal|800
argument_list|,
literal|800
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
operator|(
name|int
operator|)
name|windows
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QMdiSubWindow
modifier|*
name|child
init|=
name|windows
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|child
operator|->
name|size
argument_list|()
argument_list|,
name|fixed
argument_list|)
expr_stmt|;
block|}
name|ws
operator|->
name|resize
argument_list|(
literal|500
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|ws
operator|->
name|tileSubWindows
argument_list|()
expr_stmt|;
name|ws
operator|->
name|resize
argument_list|(
literal|800
argument_list|,
literal|800
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
operator|(
name|int
operator|)
name|windows
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QMdiSubWindow
modifier|*
name|child
init|=
name|windows
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|child
operator|->
name|size
argument_list|()
argument_list|,
name|fixed
argument_list|)
expr_stmt|;
block|}
name|ws
operator|->
name|resize
argument_list|(
literal|500
argument_list|,
literal|500
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
operator|(
name|int
operator|)
name|windows
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QMdiSubWindow
modifier|*
name|child
init|=
name|windows
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
operator|delete
name|child
expr_stmt|;
block|}
operator|delete
name|ws
expr_stmt|;
block|}
end_function
begin_class
DECL|class|LargeWidget
class|class
name|LargeWidget
super|:
specifier|public
name|QWidget
block|{
public|public:
DECL|function|LargeWidget
name|LargeWidget
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
block|{}
DECL|function|sizeHint
name|QSize
name|sizeHint
parameter_list|()
specifier|const
block|{
return|return
name|QSize
argument_list|(
literal|1280
argument_list|,
literal|1024
argument_list|)
return|;
block|}
DECL|function|minimumSizeHint
name|QSize
name|minimumSizeHint
parameter_list|()
specifier|const
block|{
return|return
name|QSize
argument_list|(
literal|300
argument_list|,
literal|300
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_comment
comment|// New tests
end_comment
begin_function
DECL|function|minimumSizeHint
name|void
name|tst_QMdiArea
operator|::
name|minimumSizeHint
parameter_list|()
block|{
name|QMdiArea
name|workspace
decl_stmt|;
name|workspace
operator|.
name|show
argument_list|()
expr_stmt|;
name|QSize
name|expectedSize
argument_list|(
name|workspace
operator|.
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MDIMinimizedWidth
argument_list|)
argument_list|,
name|workspace
operator|.
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_TitleBarHeight
argument_list|)
argument_list|)
decl_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QAbstractScrollArea
name|dummyScrollArea
decl_stmt|;
name|dummyScrollArea
operator|.
name|setFrameStyle
argument_list|(
name|QFrame
operator|::
name|NoFrame
argument_list|)
expr_stmt|;
name|expectedSize
operator|=
name|expectedSize
operator|.
name|expandedTo
argument_list|(
name|dummyScrollArea
operator|.
name|minimumSizeHint
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|minimumSizeHint
argument_list|()
argument_list|,
name|expectedSize
operator|.
name|expandedTo
argument_list|(
name|qApp
operator|->
name|globalStrut
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|window
init|=
name|workspace
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
decl_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|window
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|minimumSizeHint
argument_list|()
argument_list|,
name|expectedSize
operator|.
name|expandedTo
argument_list|(
name|window
operator|->
name|minimumSizeHint
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|subWindow
init|=
name|workspace
operator|.
name|addSubWindow
argument_list|(
operator|new
name|LargeWidget
argument_list|)
decl_stmt|;
name|subWindow
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|minimumSizeHint
argument_list|()
argument_list|,
name|expectedSize
operator|.
name|expandedTo
argument_list|(
name|subWindow
operator|->
name|minimumSizeHint
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|setHorizontalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAsNeeded
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|setVerticalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAsNeeded
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|minimumSizeHint
argument_list|()
argument_list|,
name|expectedSize
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sizeHint
name|void
name|tst_QMdiArea
operator|::
name|sizeHint
parameter_list|()
block|{
name|QMdiArea
name|workspace
decl_stmt|;
name|workspace
operator|.
name|show
argument_list|()
expr_stmt|;
name|QSize
name|desktopSize
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|size
argument_list|()
decl_stmt|;
name|QSize
name|expectedSize
argument_list|(
name|desktopSize
operator|.
name|width
argument_list|()
operator|*
literal|2
operator|/
literal|3
argument_list|,
name|desktopSize
operator|.
name|height
argument_list|()
operator|*
literal|2
operator|/
literal|3
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|sizeHint
argument_list|()
argument_list|,
name|expectedSize
operator|.
name|expandedTo
argument_list|(
name|qApp
operator|->
name|globalStrut
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|window
init|=
name|workspace
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
decl_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|window
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|sizeHint
argument_list|()
argument_list|,
name|expectedSize
operator|.
name|expandedTo
argument_list|(
name|window
operator|->
name|sizeHint
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|nested
init|=
name|workspace
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QMdiArea
argument_list|)
decl_stmt|;
name|expectedSize
operator|=
name|QSize
argument_list|(
name|desktopSize
operator|.
name|width
argument_list|()
operator|*
literal|2
operator|/
literal|6
argument_list|,
name|desktopSize
operator|.
name|height
argument_list|()
operator|*
literal|2
operator|/
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nested
operator|->
name|widget
argument_list|()
operator|->
name|sizeHint
argument_list|()
argument_list|,
name|expectedSize
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setActiveSubWindow
name|void
name|tst_QMdiArea
operator|::
name|setActiveSubWindow
parameter_list|()
block|{
name|QMdiArea
name|workspace
decl_stmt|;
name|workspace
operator|.
name|show
argument_list|()
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|workspace
argument_list|,
name|SIGNAL
argument_list|(
name|subWindowActivated
argument_list|(
name|QMdiSubWindow
operator|*
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|connect
argument_list|(
operator|&
name|workspace
argument_list|,
name|SIGNAL
argument_list|(
name|subWindowActivated
argument_list|(
name|QMdiSubWindow
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|activeChanged
argument_list|(
name|QMdiSubWindow
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
operator|&
name|workspace
argument_list|)
expr_stmt|;
comment|// Activate hidden windows
specifier|const
name|int
name|windowCount
init|=
literal|10
decl_stmt|;
name|QMdiSubWindow
modifier|*
name|windows
index|[
name|windowCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|windowCount
condition|;
operator|++
name|i
control|)
block|{
name|windows
index|[
name|i
index|]
operator|=
name|qobject_cast
argument_list|<
name|QMdiSubWindow
operator|*
argument_list|>
argument_list|(
name|workspace
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|windows
index|[
name|i
index|]
operator|->
name|isHidden
argument_list|()
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|setActiveSubWindow
argument_list|(
name|windows
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|activeWindow
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Activate visible windows
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|windowCount
condition|;
operator|++
name|i
control|)
block|{
name|windows
index|[
name|i
index|]
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|windows
index|[
name|i
index|]
operator|->
name|isHidden
argument_list|()
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|setActiveSubWindow
argument_list|(
name|windows
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|activeWindow
argument_list|,
name|windows
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// Deactivate active window
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|windows
index|[
name|windowCount
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|setActiveSubWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|activeWindow
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|workspace
operator|.
name|activeSubWindow
argument_list|()
argument_list|)
expr_stmt|;
comment|// Activate widget which is not child of any window inside workspace
name|QMdiSubWindow
name|fakeWindow
decl_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QMdiArea::setActiveSubWindow: window is not inside workspace"
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|setActiveSubWindow
argument_list|(
operator|&
name|fakeWindow
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|activeSubWindow
name|void
name|tst_QMdiArea
operator|::
name|activeSubWindow
parameter_list|()
block|{
name|QMainWindow
name|mainWindow
decl_stmt|;
name|QMdiArea
modifier|*
name|mdiArea
init|=
operator|new
name|QMdiArea
decl_stmt|;
name|QLineEdit
modifier|*
name|subWindowLineEdit
init|=
operator|new
name|QLineEdit
decl_stmt|;
name|QMdiSubWindow
modifier|*
name|subWindow
init|=
name|mdiArea
operator|->
name|addSubWindow
argument_list|(
name|subWindowLineEdit
argument_list|)
decl_stmt|;
name|mainWindow
operator|.
name|setCentralWidget
argument_list|(
name|mdiArea
argument_list|)
expr_stmt|;
name|QDockWidget
modifier|*
name|dockWidget
init|=
operator|new
name|QDockWidget
argument_list|(
name|QLatin1String
argument_list|(
literal|"Dock Widget"
argument_list|)
argument_list|,
operator|&
name|mainWindow
argument_list|)
decl_stmt|;
name|dockWidget
operator|->
name|setAllowedAreas
argument_list|(
name|Qt
operator|::
name|LeftDockWidgetArea
argument_list|)
expr_stmt|;
name|QLineEdit
modifier|*
name|dockWidgetLineEdit
init|=
operator|new
name|QLineEdit
decl_stmt|;
name|dockWidget
operator|->
name|setWidget
argument_list|(
name|dockWidgetLineEdit
argument_list|)
expr_stmt|;
name|mainWindow
operator|.
name|addDockWidget
argument_list|(
name|Qt
operator|::
name|LeftDockWidgetArea
argument_list|,
name|dockWidget
argument_list|)
expr_stmt|;
name|mainWindow
operator|.
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
operator|&
name|mainWindow
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowActive
argument_list|(
operator|&
name|mainWindow
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|->
name|activeSubWindow
argument_list|()
argument_list|,
name|subWindow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qApp
operator|->
name|focusWidget
argument_list|()
argument_list|,
operator|(
name|QWidget
operator|*
operator|)
name|subWindowLineEdit
argument_list|)
expr_stmt|;
name|dockWidgetLineEdit
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qApp
operator|->
name|focusWidget
argument_list|()
argument_list|,
operator|(
name|QWidget
operator|*
operator|)
name|dockWidgetLineEdit
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|->
name|activeSubWindow
argument_list|()
argument_list|,
name|subWindow
argument_list|)
expr_stmt|;
name|QEvent
name|deactivateEvent
argument_list|(
name|QEvent
operator|::
name|WindowDeactivate
argument_list|)
decl_stmt|;
name|qApp
operator|->
name|sendEvent
argument_list|(
name|subWindow
argument_list|,
operator|&
name|deactivateEvent
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|mdiArea
operator|->
name|activeSubWindow
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qApp
operator|->
name|focusWidget
argument_list|()
argument_list|,
operator|(
name|QWidget
operator|*
operator|)
name|dockWidgetLineEdit
argument_list|)
expr_stmt|;
name|QEvent
name|activateEvent
argument_list|(
name|QEvent
operator|::
name|WindowActivate
argument_list|)
decl_stmt|;
name|qApp
operator|->
name|sendEvent
argument_list|(
name|subWindow
argument_list|,
operator|&
name|activateEvent
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|->
name|activeSubWindow
argument_list|()
argument_list|,
name|subWindow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qApp
operator|->
name|focusWidget
argument_list|()
argument_list|,
operator|(
name|QWidget
operator|*
operator|)
name|subWindowLineEdit
argument_list|)
expr_stmt|;
name|QLineEdit
name|dummyTopLevel
decl_stmt|;
name|dummyTopLevel
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|dummyTopLevel
argument_list|)
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
operator|&
name|dummyTopLevel
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|->
name|activeSubWindow
argument_list|()
argument_list|,
name|subWindow
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
operator|&
name|mainWindow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|->
name|activeSubWindow
argument_list|()
argument_list|,
name|subWindow
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|qApp
operator|->
name|setActiveWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|mdiArea
operator|->
name|activeSubWindow
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|//task 202657
name|dockWidgetLineEdit
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
operator|&
name|mainWindow
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|dockWidgetLineEdit
operator|->
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|currentSubWindow
name|void
name|tst_QMdiArea
operator|::
name|currentSubWindow
parameter_list|()
block|{
name|QMdiArea
name|mdiArea
decl_stmt|;
name|mdiArea
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|mdiArea
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QLineEdit
argument_list|)
operator|->
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
operator|&
name|mdiArea
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qApp
operator|->
name|activeWindow
argument_list|()
argument_list|,
operator|(
name|QWidget
operator|*
operator|)
operator|&
name|mdiArea
argument_list|)
expr_stmt|;
comment|// Check that the last added window is the active and the current.
name|QMdiSubWindow
modifier|*
name|active
init|=
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|active
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|subWindowList
argument_list|()
operator|.
name|back
argument_list|()
argument_list|,
name|active
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|currentSubWindow
argument_list|()
argument_list|,
name|active
argument_list|)
expr_stmt|;
name|QLineEdit
name|dummyTopLevel
decl_stmt|;
name|dummyTopLevel
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|dummyTopLevel
argument_list|)
argument_list|)
expr_stmt|;
comment|// Move focus to another top-level and check that we still
comment|// have an active window.
name|qApp
operator|->
name|setActiveWindow
argument_list|(
operator|&
name|dummyTopLevel
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qApp
operator|->
name|activeWindow
argument_list|()
argument_list|,
operator|(
name|QWidget
operator|*
operator|)
operator|&
name|dummyTopLevel
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|active
expr_stmt|;
name|active
operator|=
literal|0
expr_stmt|;
comment|// We just deleted the current sub-window -> current should then
comment|// be the next in list (which in this case is the first sub-window).
name|QVERIFY
argument_list|(
name|mdiArea
operator|.
name|currentSubWindow
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|currentSubWindow
argument_list|()
argument_list|,
name|mdiArea
operator|.
name|subWindowList
argument_list|()
operator|.
name|front
argument_list|()
argument_list|)
expr_stmt|;
comment|// Activate mdi area and check that active == current.
name|qApp
operator|->
name|setActiveWindow
argument_list|(
operator|&
name|mdiArea
argument_list|)
expr_stmt|;
name|active
operator|=
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|active
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|mdiArea
operator|.
name|subWindowList
argument_list|()
operator|.
name|front
argument_list|()
argument_list|)
expr_stmt|;
name|active
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|active
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|currentSubWindow
argument_list|()
argument_list|,
name|active
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
operator|&
name|dummyTopLevel
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|currentSubWindow
argument_list|()
argument_list|,
name|active
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
operator|&
name|mdiArea
argument_list|)
expr_stmt|;
name|active
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|active
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|setActiveSubWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|mdiArea
operator|.
name|currentSubWindow
argument_list|()
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|setActiveSubWindow
argument_list|(
name|active
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|active
argument_list|)
expr_stmt|;
name|QEvent
name|windowDeactivate
argument_list|(
name|QEvent
operator|::
name|WindowDeactivate
argument_list|)
decl_stmt|;
name|qApp
operator|->
name|sendEvent
argument_list|(
name|active
argument_list|,
operator|&
name|windowDeactivate
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|mdiArea
operator|.
name|currentSubWindow
argument_list|()
argument_list|)
expr_stmt|;
name|QEvent
name|windowActivate
argument_list|(
name|QEvent
operator|::
name|WindowActivate
argument_list|)
decl_stmt|;
name|qApp
operator|->
name|sendEvent
argument_list|(
name|active
argument_list|,
operator|&
name|windowActivate
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mdiArea
operator|.
name|currentSubWindow
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|qApp
operator|->
name|setActiveWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mdiArea
operator|.
name|currentSubWindow
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|addAndRemoveWindows
name|void
name|tst_QMdiArea
operator|::
name|addAndRemoveWindows
parameter_list|()
block|{
name|QWidget
name|topLevel
decl_stmt|;
name|QMdiArea
name|workspace
argument_list|(
operator|&
name|topLevel
argument_list|)
decl_stmt|;
name|workspace
operator|.
name|resize
argument_list|(
literal|800
argument_list|,
literal|600
argument_list|)
expr_stmt|;
name|topLevel
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|topLevel
argument_list|)
argument_list|)
expr_stmt|;
block|{
comment|// addSubWindow with large widget
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|subWindowList
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|window
init|=
name|workspace
operator|.
name|addSubWindow
argument_list|(
operator|new
name|LargeWidget
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|subWindowList
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|windowFlags
argument_list|()
operator|==
name|DefaultWindowFlags
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|size
argument_list|()
argument_list|,
name|workspace
operator|.
name|viewport
argument_list|()
operator|->
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|// addSubWindow, minimumSize set.
name|QMdiSubWindow
modifier|*
name|window
init|=
operator|new
name|QMdiSubWindow
decl_stmt|;
name|window
operator|->
name|setMinimumSize
argument_list|(
literal|900
argument_list|,
literal|900
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|addSubWindow
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|subWindowList
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|windowFlags
argument_list|()
operator|==
name|DefaultWindowFlags
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|size
argument_list|()
argument_list|,
name|window
operator|->
name|minimumSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|// addSubWindow, resized
name|QMdiSubWindow
modifier|*
name|window
init|=
operator|new
name|QMdiSubWindow
decl_stmt|;
name|window
operator|->
name|setWidget
argument_list|(
operator|new
name|QWidget
argument_list|)
expr_stmt|;
name|window
operator|->
name|resize
argument_list|(
literal|1500
argument_list|,
literal|1500
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|addSubWindow
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|subWindowList
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|windowFlags
argument_list|()
operator|==
name|DefaultWindowFlags
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|size
argument_list|()
argument_list|,
name|QSize
argument_list|(
literal|1500
argument_list|,
literal|1500
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|// addSubWindow with 0 pointer
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QMdiArea::addSubWindow: null pointer to widget"
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|window
init|=
name|workspace
operator|.
name|addSubWindow
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|subWindowList
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
block|{
comment|// addChildWindow
name|QMdiSubWindow
modifier|*
name|window
init|=
operator|new
name|QMdiSubWindow
decl_stmt|;
name|workspace
operator|.
name|addSubWindow
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|windowFlags
argument_list|()
operator|==
name|DefaultWindowFlags
argument_list|)
expr_stmt|;
name|window
operator|->
name|setWidget
argument_list|(
operator|new
name|QWidget
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|subWindowList
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QMdiArea::addSubWindow: window is already added"
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|addSubWindow
argument_list|(
name|window
argument_list|)
expr_stmt|;
block|}
block|{
comment|// addChildWindow with 0 pointer
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QMdiArea::addSubWindow: null pointer to widget"
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|addSubWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|subWindowList
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
comment|// removeSubWindow
foreach|foreach
control|(
name|QWidget
modifier|*
name|window
decl|,
name|workspace
operator|.
name|subWindowList
argument_list|()
control|)
block|{
name|workspace
operator|.
name|removeSubWindow
argument_list|(
name|window
argument_list|)
expr_stmt|;
operator|delete
name|window
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|subWindowList
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// removeSubWindow with 0 pointer
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QMdiArea::removeSubWindow: null pointer to widget"
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|removeSubWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QPushButton
argument_list|(
name|QLatin1String
argument_list|(
literal|"Dummy to make workspace non-empty"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|subWindowList
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// removeSubWindow with window not inside workspace
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QMdiArea::removeSubWindow: window is not inside workspace"
argument_list|)
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|fakeWindow
init|=
operator|new
name|QMdiSubWindow
decl_stmt|;
name|workspace
operator|.
name|removeSubWindow
argument_list|(
name|fakeWindow
argument_list|)
expr_stmt|;
operator|delete
name|fakeWindow
expr_stmt|;
comment|// Check that newly added windows don't occupy maximized windows'
comment|// restore space.
name|workspace
operator|.
name|closeAllSubWindows
argument_list|()
expr_stmt|;
name|workspace
operator|.
name|setOption
argument_list|(
name|QMdiArea
operator|::
name|DontMaximizeSubWindowOnActivation
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|show
argument_list|()
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|window1
init|=
name|workspace
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
decl_stmt|;
name|window1
operator|->
name|show
argument_list|()
expr_stmt|;
specifier|const
name|QRect
name|window1RestoreGeometry
init|=
name|window1
operator|->
name|geometry
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|window1RestoreGeometry
operator|.
name|topLeft
argument_list|()
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|window1
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
comment|// Occupy space.
name|QMdiSubWindow
modifier|*
name|window2
init|=
name|workspace
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
decl_stmt|;
name|window2
operator|->
name|show
argument_list|()
expr_stmt|;
specifier|const
name|QRect
name|window2RestoreGeometry
init|=
name|window2
operator|->
name|geometry
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|window2RestoreGeometry
operator|.
name|topLeft
argument_list|()
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|window2
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
comment|// Don't occupy space.
name|QMdiSubWindow
modifier|*
name|window3
init|=
name|workspace
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
decl_stmt|;
name|window3
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window3
operator|->
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
argument_list|,
name|QPoint
argument_list|(
name|window2RestoreGeometry
operator|.
name|right
argument_list|()
operator|+
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addAndRemoveWindowsWithReparenting
name|void
name|tst_QMdiArea
operator|::
name|addAndRemoveWindowsWithReparenting
parameter_list|()
block|{
name|QMdiArea
name|workspace
decl_stmt|;
name|QMdiSubWindow
name|window
argument_list|(
operator|&
name|workspace
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|.
name|windowFlags
argument_list|()
operator|==
name|DefaultWindowFlags
argument_list|)
expr_stmt|;
comment|// 0 because the window list contains widgets and not actual
comment|// windows. Silly, but that's the behavior.
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|subWindowList
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|window
operator|.
name|setWidget
argument_list|(
operator|new
name|QWidget
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|subWindowList
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|window
operator|.
name|setParent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Will also reset window flags
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|subWindowList
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|window
operator|.
name|setParent
argument_list|(
operator|&
name|workspace
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|subWindowList
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|.
name|windowFlags
argument_list|()
operator|==
name|DefaultWindowFlags
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QMdiArea::addSubWindow: window is already added"
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|addSubWindow
argument_list|(
operator|&
name|window
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|subWindowList
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|MySubWindow
class|class
name|MySubWindow
super|:
specifier|public
name|QMdiSubWindow
block|{
public|public:
using|using
name|QObject
operator|::
name|receivers
using|;
block|}
class|;
end_class
begin_function
DECL|function|numberOfConnectedSignals
specifier|static
name|int
name|numberOfConnectedSignals
parameter_list|(
name|MySubWindow
modifier|*
name|subWindow
parameter_list|)
block|{
if|if
condition|(
operator|!
name|subWindow
condition|)
return|return
literal|0
return|;
name|int
name|numConnectedSignals
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subWindow
operator|->
name|metaObject
argument_list|()
operator|->
name|methodCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QMetaMethod
name|method
init|=
name|subWindow
operator|->
name|metaObject
argument_list|()
operator|->
name|method
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|.
name|methodType
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Signal
condition|)
block|{
name|QString
name|signature
argument_list|(
name|QLatin1String
argument_list|(
literal|"2"
argument_list|)
argument_list|)
decl_stmt|;
name|signature
operator|+=
name|QLatin1String
argument_list|(
name|method
operator|.
name|methodSignature
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|numConnectedSignals
operator|+=
name|subWindow
operator|->
name|receivers
argument_list|(
name|signature
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|numConnectedSignals
return|;
block|}
end_function
begin_function
DECL|function|removeSubWindow_2
name|void
name|tst_QMdiArea
operator|::
name|removeSubWindow_2
parameter_list|()
block|{
name|QMdiArea
name|mdiArea
decl_stmt|;
name|MySubWindow
modifier|*
name|subWindow
init|=
operator|new
name|MySubWindow
decl_stmt|;
name|QCOMPARE
argument_list|(
name|numberOfConnectedSignals
argument_list|(
name|subWindow
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Connected to aboutToActivate() and windowStateChanged().
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
name|subWindow
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|numberOfConnectedSignals
argument_list|(
name|subWindow
argument_list|)
operator|>=
literal|2
argument_list|)
expr_stmt|;
comment|// Ensure we disconnect from all signals.
name|mdiArea
operator|.
name|removeSubWindow
argument_list|(
name|subWindow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|numberOfConnectedSignals
argument_list|(
name|subWindow
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
name|subWindow
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|numberOfConnectedSignals
argument_list|(
name|subWindow
argument_list|)
operator|>=
literal|2
argument_list|)
expr_stmt|;
name|subWindow
operator|->
name|setParent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|numberOfConnectedSignals
argument_list|(
name|subWindow
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|closeWindows
name|void
name|tst_QMdiArea
operator|::
name|closeWindows
parameter_list|()
block|{
name|QMdiArea
name|workspace
decl_stmt|;
name|workspace
operator|.
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
operator|&
name|workspace
argument_list|)
expr_stmt|;
comment|// Close widget
name|QWidget
modifier|*
name|widget
init|=
operator|new
name|QWidget
decl_stmt|;
name|QMdiSubWindow
modifier|*
name|subWindow
init|=
name|workspace
operator|.
name|addSubWindow
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|subWindowList
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|subWindow
operator|->
name|close
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|subWindowList
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Close window
name|QWidget
modifier|*
name|window
init|=
name|workspace
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
decl_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|subWindowList
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|window
operator|->
name|close
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|subWindowList
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|const
name|int
name|windowCount
init|=
literal|10
decl_stmt|;
comment|// Close active window
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|windowCount
condition|;
operator|++
name|i
control|)
name|workspace
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
operator|->
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|subWindowList
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
name|windowCount
argument_list|)
expr_stmt|;
name|int
name|activeSubWindowCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|workspace
operator|.
name|activeSubWindow
argument_list|()
condition|)
block|{
name|workspace
operator|.
name|activeSubWindow
argument_list|()
operator|->
name|close
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
operator|++
name|activeSubWindowCount
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|activeSubWindowCount
argument_list|,
name|windowCount
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|subWindowList
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Close all windows
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|windowCount
condition|;
operator|++
name|i
control|)
name|workspace
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
operator|->
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|subWindowList
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
name|windowCount
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|workspace
argument_list|,
name|SIGNAL
argument_list|(
name|subWindowActivated
argument_list|(
name|QMdiSubWindow
operator|*
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|connect
argument_list|(
operator|&
name|workspace
argument_list|,
name|SIGNAL
argument_list|(
name|subWindowActivated
argument_list|(
name|QMdiSubWindow
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|activeChanged
argument_list|(
name|QMdiSubWindow
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|closeAllSubWindows
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|subWindowList
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|activeWindow
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|activateNextAndPreviousWindow
name|void
name|tst_QMdiArea
operator|::
name|activateNextAndPreviousWindow
parameter_list|()
block|{
name|QMdiArea
name|workspace
decl_stmt|;
name|workspace
operator|.
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
operator|&
name|workspace
argument_list|)
expr_stmt|;
specifier|const
name|int
name|windowCount
init|=
literal|10
decl_stmt|;
name|QMdiSubWindow
modifier|*
name|windows
index|[
name|windowCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|windowCount
condition|;
operator|++
name|i
control|)
block|{
name|windows
index|[
name|i
index|]
operator|=
name|qobject_cast
argument_list|<
name|QMdiSubWindow
operator|*
argument_list|>
argument_list|(
name|workspace
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
argument_list|)
expr_stmt|;
name|windows
index|[
name|i
index|]
operator|->
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
block|}
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|workspace
argument_list|,
name|SIGNAL
argument_list|(
name|subWindowActivated
argument_list|(
name|QMdiSubWindow
operator|*
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|connect
argument_list|(
operator|&
name|workspace
argument_list|,
name|SIGNAL
argument_list|(
name|subWindowActivated
argument_list|(
name|QMdiSubWindow
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|activeChanged
argument_list|(
name|QMdiSubWindow
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// activateNextSubWindow
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|windowCount
condition|;
operator|++
name|i
control|)
block|{
name|workspace
operator|.
name|activateNextSubWindow
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|windows
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|activeWindow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|windows
index|[
name|windowCount
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|activeWindow
argument_list|)
expr_stmt|;
comment|// activatePreviousSubWindow
for|for
control|(
name|int
name|i
init|=
name|windowCount
operator|-
literal|2
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|workspace
operator|.
name|activatePreviousSubWindow
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|windows
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
name|windows
index|[
name|i
index|]
operator|->
name|hide
argument_list|()
expr_stmt|;
comment|// 10, 8, 6, 4, 2, 0
block|}
name|QVERIFY
argument_list|(
name|activeWindow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|windows
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|activeWindow
argument_list|)
expr_stmt|;
comment|// activateNextSubWindow with every 2nd window hidden
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|windowCount
operator|/
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|workspace
operator|.
name|activateNextSubWindow
argument_list|()
expr_stmt|;
comment|// 1, 3, 5, 7, 9
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|windows
index|[
name|windowCount
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// activatePreviousSubWindow with every 2nd window hidden
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|windowCount
operator|/
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|workspace
operator|.
name|activatePreviousSubWindow
argument_list|()
expr_stmt|;
comment|// 7, 5, 3, 1, 9
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|windows
index|[
name|windowCount
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|setActiveSubWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|activeWindow
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|subWindowList_data
name|void
name|tst_QMdiArea
operator|::
name|subWindowList_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QMdiArea
operator|::
name|WindowOrder
argument_list|>
argument_list|(
literal|"windowOrder"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"windowCount"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"activeSubWindow"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"staysOnTop1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"staysOnTop2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"CreationOrder"
argument_list|)
operator|<<
name|QMdiArea
operator|::
name|CreationOrder
operator|<<
literal|10
operator|<<
literal|4
operator|<<
literal|8
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"StackingOrder"
argument_list|)
operator|<<
name|QMdiArea
operator|::
name|StackingOrder
operator|<<
literal|10
operator|<<
literal|6
operator|<<
literal|3
operator|<<
literal|9
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ActivationHistoryOrder"
argument_list|)
operator|<<
name|QMdiArea
operator|::
name|ActivationHistoryOrder
operator|<<
literal|10
operator|<<
literal|7
operator|<<
literal|2
operator|<<
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|subWindowList
name|void
name|tst_QMdiArea
operator|::
name|subWindowList
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QMdiArea
operator|::
name|WindowOrder
argument_list|,
name|windowOrder
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|windowCount
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|activeSubWindow
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|staysOnTop1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|staysOnTop2
argument_list|)
expr_stmt|;
name|QMdiArea
name|workspace
decl_stmt|;
name|workspace
operator|.
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
operator|&
name|workspace
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QMdiSubWindow
modifier|*
argument_list|>
name|activationOrder
decl_stmt|;
name|QVector
argument_list|<
name|QMdiSubWindow
modifier|*
argument_list|>
name|windows
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|windowCount
condition|;
operator|++
name|i
control|)
block|{
name|windows
operator|.
name|append
argument_list|(
name|qobject_cast
argument_list|<
name|QMdiSubWindow
operator|*
argument_list|>
argument_list|(
name|workspace
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|windows
index|[
name|i
index|]
operator|->
name|show
argument_list|()
expr_stmt|;
name|activationOrder
operator|.
name|append
argument_list|(
name|windows
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|{
name|QList
argument_list|<
name|QMdiSubWindow
modifier|*
argument_list|>
name|widgets
init|=
name|workspace
operator|.
name|subWindowList
argument_list|(
name|windowOrder
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|widgets
operator|.
name|count
argument_list|()
argument_list|,
name|windowCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|widgets
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|widgets
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|windows
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|windows
index|[
name|staysOnTop1
index|]
operator|->
name|setWindowFlags
argument_list|(
name|windows
index|[
name|staysOnTop1
index|]
operator|->
name|windowFlags
argument_list|()
operator||
name|Qt
operator|::
name|WindowStaysOnTopHint
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|setActiveSubWindow
argument_list|(
name|windows
index|[
name|activeSubWindow
index|]
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|windows
index|[
name|activeSubWindow
index|]
argument_list|)
expr_stmt|;
name|activationOrder
operator|.
name|move
argument_list|(
name|activationOrder
operator|.
name|indexOf
argument_list|(
name|windows
index|[
name|activeSubWindow
index|]
argument_list|)
argument_list|,
name|windowCount
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QMdiSubWindow
modifier|*
argument_list|>
name|subWindows
init|=
name|workspace
operator|.
name|subWindowList
argument_list|(
name|windowOrder
argument_list|)
decl_stmt|;
if|if
condition|(
name|windowOrder
operator|==
name|QMdiArea
operator|::
name|CreationOrder
condition|)
block|{
name|QCOMPARE
argument_list|(
name|subWindows
operator|.
name|at
argument_list|(
name|activeSubWindow
argument_list|)
argument_list|,
name|windows
index|[
name|activeSubWindow
index|]
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|subWindows
operator|.
name|at
argument_list|(
name|staysOnTop1
argument_list|)
argument_list|,
name|windows
index|[
name|staysOnTop1
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|windowCount
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|subWindows
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|windows
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|windowOrder
operator|==
name|QMdiArea
operator|::
name|StackingOrder
condition|)
block|{
name|QCOMPARE
argument_list|(
name|subWindows
operator|.
name|at
argument_list|(
name|subWindows
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
name|windows
index|[
name|staysOnTop1
index|]
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|subWindows
operator|.
name|at
argument_list|(
name|subWindows
operator|.
name|count
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|,
name|windows
index|[
name|activeSubWindow
index|]
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|subWindows
operator|.
name|count
argument_list|()
argument_list|,
name|windowCount
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// ActivationHistoryOrder
name|QCOMPARE
argument_list|(
name|subWindows
argument_list|,
name|activationOrder
argument_list|)
expr_stmt|;
block|}
name|windows
index|[
name|staysOnTop2
index|]
operator|->
name|setWindowFlags
argument_list|(
name|windows
index|[
name|staysOnTop2
index|]
operator|->
name|windowFlags
argument_list|()
operator||
name|Qt
operator|::
name|WindowStaysOnTopHint
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|setActiveSubWindow
argument_list|(
name|windows
index|[
name|staysOnTop2
index|]
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|windows
index|[
name|staysOnTop2
index|]
argument_list|)
expr_stmt|;
name|activationOrder
operator|.
name|move
argument_list|(
name|activationOrder
operator|.
name|indexOf
argument_list|(
name|windows
index|[
name|staysOnTop2
index|]
argument_list|)
argument_list|,
name|windowCount
operator|-
literal|1
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|setActiveSubWindow
argument_list|(
name|windows
index|[
name|activeSubWindow
index|]
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|windows
index|[
name|activeSubWindow
index|]
argument_list|)
expr_stmt|;
name|activationOrder
operator|.
name|move
argument_list|(
name|activationOrder
operator|.
name|indexOf
argument_list|(
name|windows
index|[
name|activeSubWindow
index|]
argument_list|)
argument_list|,
name|windowCount
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QMdiSubWindow
modifier|*
argument_list|>
name|widgets
init|=
name|workspace
operator|.
name|subWindowList
argument_list|(
name|windowOrder
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|widgets
operator|.
name|count
argument_list|()
argument_list|,
name|windowCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|windowOrder
operator|==
name|QMdiArea
operator|::
name|StackingOrder
condition|)
block|{
name|QCOMPARE
argument_list|(
name|widgets
operator|.
name|at
argument_list|(
name|widgets
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
name|windows
index|[
name|staysOnTop2
index|]
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widgets
operator|.
name|at
argument_list|(
name|widgets
operator|.
name|count
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|,
name|windows
index|[
name|staysOnTop1
index|]
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widgets
operator|.
name|at
argument_list|(
name|widgets
operator|.
name|count
argument_list|()
operator|-
literal|3
argument_list|)
argument_list|,
name|windows
index|[
name|activeSubWindow
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// ActivationHistory
name|QCOMPARE
argument_list|(
name|widgets
argument_list|,
name|activationOrder
argument_list|)
expr_stmt|;
block|}
name|windows
index|[
name|activeSubWindow
index|]
operator|->
name|raise
argument_list|()
expr_stmt|;
name|windows
index|[
name|staysOnTop2
index|]
operator|->
name|lower
argument_list|()
expr_stmt|;
name|widgets
operator|=
name|workspace
operator|.
name|subWindowList
argument_list|(
name|windowOrder
argument_list|)
expr_stmt|;
if|if
condition|(
name|windowOrder
operator|==
name|QMdiArea
operator|::
name|StackingOrder
condition|)
block|{
name|QCOMPARE
argument_list|(
name|widgets
operator|.
name|at
argument_list|(
name|widgets
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
name|windows
index|[
name|activeSubWindow
index|]
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widgets
operator|.
name|at
argument_list|(
name|widgets
operator|.
name|count
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|,
name|windows
index|[
name|staysOnTop1
index|]
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widgets
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|windows
index|[
name|staysOnTop2
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// ActivationHistoryOrder
name|QCOMPARE
argument_list|(
name|widgets
argument_list|,
name|activationOrder
argument_list|)
expr_stmt|;
block|}
name|windows
index|[
name|activeSubWindow
index|]
operator|->
name|stackUnder
argument_list|(
name|windows
index|[
name|staysOnTop1
index|]
argument_list|)
expr_stmt|;
name|windows
index|[
name|staysOnTop2
index|]
operator|->
name|raise
argument_list|()
expr_stmt|;
name|widgets
operator|=
name|workspace
operator|.
name|subWindowList
argument_list|(
name|windowOrder
argument_list|)
expr_stmt|;
if|if
condition|(
name|windowOrder
operator|==
name|QMdiArea
operator|::
name|StackingOrder
condition|)
block|{
name|QCOMPARE
argument_list|(
name|widgets
operator|.
name|at
argument_list|(
name|widgets
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
name|windows
index|[
name|staysOnTop2
index|]
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widgets
operator|.
name|at
argument_list|(
name|widgets
operator|.
name|count
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|,
name|windows
index|[
name|staysOnTop1
index|]
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widgets
operator|.
name|at
argument_list|(
name|widgets
operator|.
name|count
argument_list|()
operator|-
literal|3
argument_list|)
argument_list|,
name|windows
index|[
name|activeSubWindow
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// ActivationHistoryOrder
name|QCOMPARE
argument_list|(
name|widgets
argument_list|,
name|activationOrder
argument_list|)
expr_stmt|;
block|}
name|workspace
operator|.
name|setActiveSubWindow
argument_list|(
name|windows
index|[
name|staysOnTop1
index|]
argument_list|)
expr_stmt|;
name|activationOrder
operator|.
name|move
argument_list|(
name|activationOrder
operator|.
name|indexOf
argument_list|(
name|windows
index|[
name|staysOnTop1
index|]
argument_list|)
argument_list|,
name|windowCount
operator|-
literal|1
argument_list|)
expr_stmt|;
name|widgets
operator|=
name|workspace
operator|.
name|subWindowList
argument_list|(
name|windowOrder
argument_list|)
expr_stmt|;
if|if
condition|(
name|windowOrder
operator|==
name|QMdiArea
operator|::
name|StackingOrder
condition|)
block|{
name|QCOMPARE
argument_list|(
name|widgets
operator|.
name|at
argument_list|(
name|widgets
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
name|windows
index|[
name|staysOnTop1
index|]
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widgets
operator|.
name|at
argument_list|(
name|widgets
operator|.
name|count
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|,
name|windows
index|[
name|staysOnTop2
index|]
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widgets
operator|.
name|at
argument_list|(
name|widgets
operator|.
name|count
argument_list|()
operator|-
literal|3
argument_list|)
argument_list|,
name|windows
index|[
name|activeSubWindow
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// ActivationHistoryOrder
name|QCOMPARE
argument_list|(
name|widgets
argument_list|,
name|activationOrder
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setBackground
name|void
name|tst_QMdiArea
operator|::
name|setBackground
parameter_list|()
block|{
name|QMdiArea
name|workspace
decl_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|background
argument_list|()
argument_list|,
name|workspace
operator|.
name|palette
argument_list|()
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Dark
argument_list|)
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|setBackground
argument_list|(
name|QBrush
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|background
argument_list|()
argument_list|,
name|QBrush
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setViewport
name|void
name|tst_QMdiArea
operator|::
name|setViewport
parameter_list|()
block|{
name|QMdiArea
name|workspace
decl_stmt|;
name|workspace
operator|.
name|show
argument_list|()
expr_stmt|;
name|QWidget
modifier|*
name|firstViewport
init|=
name|workspace
operator|.
name|viewport
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|firstViewport
argument_list|)
expr_stmt|;
specifier|const
name|int
name|windowCount
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|windowCount
condition|;
operator|++
name|i
control|)
block|{
name|QMdiSubWindow
modifier|*
name|window
init|=
name|workspace
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
decl_stmt|;
name|window
operator|->
name|show
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|window
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|isMinimized
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|window
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QList
argument_list|<
name|QMdiSubWindow
modifier|*
argument_list|>
name|windowsBeforeViewportChange
init|=
name|workspace
operator|.
name|subWindowList
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|windowsBeforeViewportChange
operator|.
name|count
argument_list|()
argument_list|,
name|windowCount
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|setViewport
argument_list|(
operator|new
name|QWidget
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|workspace
operator|.
name|viewport
argument_list|()
operator|!=
name|firstViewport
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QMdiSubWindow
modifier|*
argument_list|>
name|windowsAfterViewportChange
init|=
name|workspace
operator|.
name|subWindowList
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|windowsAfterViewportChange
operator|.
name|count
argument_list|()
argument_list|,
name|windowCount
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|windowsAfterViewportChange
argument_list|,
name|windowsBeforeViewportChange
argument_list|)
expr_stmt|;
comment|//    for (int i = 0; i< windowCount; ++i) {
comment|//        QMdiSubWindow *window = windowsAfterViewportChange.at(i);
comment|//        if (i % 2 == 0)
comment|//            QVERIFY(!window->isMinimized());
comment|//else
comment|//    QVERIFY(!window->isMaximized());
comment|//    }
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QMdiArea: Deleting the view port is undefined, "
literal|"use setViewport instead."
argument_list|)
expr_stmt|;
operator|delete
name|workspace
operator|.
name|viewport
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|subWindowList
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|workspace
operator|.
name|activeSubWindow
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tileSubWindows
name|void
name|tst_QMdiArea
operator|::
name|tileSubWindows
parameter_list|()
block|{
name|QMdiArea
name|workspace
decl_stmt|;
name|workspace
operator|.
name|resize
argument_list|(
literal|600
argument_list|,
literal|480
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|workspace
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|int
name|windowCount
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|windowCount
condition|;
operator|++
name|i
control|)
block|{
name|QMdiSubWindow
modifier|*
name|subWindow
init|=
name|workspace
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
decl_stmt|;
name|subWindow
operator|->
name|setMinimumSize
argument_list|(
literal|50
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|subWindow
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
name|workspace
operator|.
name|tileSubWindows
argument_list|()
expr_stmt|;
name|workspace
operator|.
name|setActiveSubWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|viewport
argument_list|()
operator|->
name|childrenRect
argument_list|()
argument_list|,
name|workspace
operator|.
name|viewport
argument_list|()
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QMdiSubWindow
modifier|*
argument_list|>
name|windows
init|=
name|workspace
operator|.
name|subWindowList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|windowCount
condition|;
operator|++
name|i
control|)
block|{
name|QMdiSubWindow
modifier|*
name|window
init|=
name|windows
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|windowCount
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|i
operator|==
name|j
condition|)
continue|continue;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|->
name|geometry
argument_list|()
operator|.
name|intersects
argument_list|(
name|windows
operator|.
name|at
argument_list|(
name|j
argument_list|)
operator|->
name|geometry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Keep the views tiled through any subsequent resize events.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
name|workspace
operator|.
name|resize
argument_list|(
name|workspace
operator|.
name|size
argument_list|()
operator|-
name|QSize
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
block|}
name|workspace
operator|.
name|setActiveSubWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
comment|//See Task 197453 ToDo
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|viewport
argument_list|()
operator|->
name|childrenRect
argument_list|()
argument_list|,
name|workspace
operator|.
name|viewport
argument_list|()
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QMdiSubWindow
modifier|*
name|window
init|=
name|windows
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Change the geometry of one of the children and verify
comment|// that the views are not tiled anymore.
name|window
operator|->
name|move
argument_list|(
name|window
operator|->
name|x
argument_list|()
operator|+
literal|1
argument_list|,
name|window
operator|->
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|resize
argument_list|(
name|workspace
operator|.
name|size
argument_list|()
operator|-
name|QSize
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|setActiveSubWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|workspace
operator|.
name|viewport
argument_list|()
operator|->
name|childrenRect
argument_list|()
operator|!=
name|workspace
operator|.
name|viewport
argument_list|()
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
comment|// Re-tile.
name|workspace
operator|.
name|tileSubWindows
argument_list|()
expr_stmt|;
name|workspace
operator|.
name|setActiveSubWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|viewport
argument_list|()
operator|->
name|childrenRect
argument_list|()
argument_list|,
name|workspace
operator|.
name|viewport
argument_list|()
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
comment|// Close one of the children and verify that the views
comment|// are not tiled anymore.
name|window
operator|->
name|close
argument_list|()
expr_stmt|;
name|workspace
operator|.
name|resize
argument_list|(
name|workspace
operator|.
name|size
argument_list|()
operator|-
name|QSize
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|setActiveSubWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|workspace
operator|.
name|viewport
argument_list|()
operator|->
name|childrenRect
argument_list|()
operator|!=
name|workspace
operator|.
name|viewport
argument_list|()
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
comment|// Re-tile.
name|workspace
operator|.
name|tileSubWindows
argument_list|()
expr_stmt|;
name|workspace
operator|.
name|setActiveSubWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|viewport
argument_list|()
operator|->
name|childrenRect
argument_list|()
argument_list|,
name|workspace
operator|.
name|viewport
argument_list|()
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
name|window
operator|=
name|windows
operator|.
name|at
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Maximize one of the children and verify that the views
comment|// are not tiled anymore.
name|workspace
operator|.
name|tileSubWindows
argument_list|()
expr_stmt|;
name|window
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|workspace
operator|.
name|resize
argument_list|(
name|workspace
operator|.
name|size
argument_list|()
operator|-
name|QSize
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|setActiveSubWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|workspace
operator|.
name|viewport
argument_list|()
operator|->
name|childrenRect
argument_list|()
operator|!=
name|workspace
operator|.
name|viewport
argument_list|()
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
comment|// Re-tile.
name|workspace
operator|.
name|tileSubWindows
argument_list|()
expr_stmt|;
name|workspace
operator|.
name|setActiveSubWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|viewport
argument_list|()
operator|->
name|childrenRect
argument_list|()
argument_list|,
name|workspace
operator|.
name|viewport
argument_list|()
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
comment|// Minimize one of the children and verify that the views
comment|// are not tiled anymore.
name|workspace
operator|.
name|tileSubWindows
argument_list|()
expr_stmt|;
name|window
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
name|workspace
operator|.
name|resize
argument_list|(
name|workspace
operator|.
name|size
argument_list|()
operator|-
name|QSize
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|setActiveSubWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|workspace
operator|.
name|viewport
argument_list|()
operator|->
name|childrenRect
argument_list|()
operator|!=
name|workspace
operator|.
name|viewport
argument_list|()
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
comment|// Re-tile.
name|workspace
operator|.
name|tileSubWindows
argument_list|()
expr_stmt|;
name|workspace
operator|.
name|setActiveSubWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|viewport
argument_list|()
operator|->
name|childrenRect
argument_list|()
argument_list|,
name|workspace
operator|.
name|viewport
argument_list|()
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
comment|// Active/deactivate windows and verify that the views are tiled.
name|workspace
operator|.
name|setActiveSubWindow
argument_list|(
name|windows
operator|.
name|at
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|resize
argument_list|(
name|workspace
operator|.
name|size
argument_list|()
operator|-
name|QSize
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|setActiveSubWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|250
argument_list|)
expr_stmt|;
comment|// delayed re-arrange of minimized windows
name|QTRY_COMPARE
argument_list|(
name|workspace
operator|.
name|viewport
argument_list|()
operator|->
name|childrenRect
argument_list|()
argument_list|,
name|workspace
operator|.
name|viewport
argument_list|()
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add another window and verify that the views are not tiled anymore.
name|workspace
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QPushButton
argument_list|(
name|QLatin1String
argument_list|(
literal|"I'd like to mess up tiled views"
argument_list|)
argument_list|)
argument_list|)
operator|->
name|show
argument_list|()
expr_stmt|;
name|workspace
operator|.
name|resize
argument_list|(
name|workspace
operator|.
name|size
argument_list|()
operator|-
name|QSize
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|setActiveSubWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|workspace
operator|.
name|viewport
argument_list|()
operator|->
name|childrenRect
argument_list|()
operator|!=
name|workspace
operator|.
name|viewport
argument_list|()
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
comment|// Re-tile.
name|workspace
operator|.
name|tileSubWindows
argument_list|()
expr_stmt|;
name|workspace
operator|.
name|setActiveSubWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|viewport
argument_list|()
operator|->
name|childrenRect
argument_list|()
argument_list|,
name|workspace
operator|.
name|viewport
argument_list|()
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
comment|// Cascade and verify that the views are not tiled anymore.
name|workspace
operator|.
name|cascadeSubWindows
argument_list|()
expr_stmt|;
name|workspace
operator|.
name|resize
argument_list|(
name|workspace
operator|.
name|size
argument_list|()
operator|-
name|QSize
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|setActiveSubWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|workspace
operator|.
name|viewport
argument_list|()
operator|->
name|childrenRect
argument_list|()
operator|!=
name|workspace
operator|.
name|viewport
argument_list|()
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure the active window is placed in top left corner regardless
comment|// of whether we have any windows with staysOnTopHint or not.
name|windows
operator|.
name|at
argument_list|(
literal|3
argument_list|)
operator|->
name|setWindowFlags
argument_list|(
name|windows
operator|.
name|at
argument_list|(
literal|3
argument_list|)
operator|->
name|windowFlags
argument_list|()
operator||
name|Qt
operator|::
name|WindowStaysOnTopHint
argument_list|)
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|activeSubWindow
init|=
name|windows
operator|.
name|at
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|workspace
operator|.
name|setActiveSubWindow
argument_list|(
name|activeSubWindow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|activeSubWindow
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|tileSubWindows
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|activeSubWindow
operator|->
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify that we try to resize the area such that all sub-windows are visible.
comment|// It's important that tiled windows are NOT overlapping.
name|workspace
operator|.
name|resize
argument_list|(
literal|350
argument_list|,
literal|150
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|workspace
operator|.
name|size
argument_list|()
argument_list|,
name|QSize
argument_list|(
literal|350
argument_list|,
literal|150
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QSize
name|minSize
argument_list|(
literal|300
argument_list|,
literal|100
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|QMdiSubWindow
modifier|*
name|subWindow
decl|,
name|workspace
operator|.
name|subWindowList
argument_list|()
control|)
name|subWindow
operator|->
name|setMinimumSize
argument_list|(
name|minSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|size
argument_list|()
argument_list|,
name|QSize
argument_list|(
literal|350
argument_list|,
literal|150
argument_list|)
argument_list|)
expr_stmt|;
comment|// Prevent scrollbars from messing up the expected viewport calculation below
name|workspace
operator|.
name|setHorizontalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAlwaysOff
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|setVerticalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAlwaysOff
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|tileSubWindows
argument_list|()
expr_stmt|;
comment|// The sub-windows are now tiled like this:
comment|// | win 1 || win 2 || win 3 |
comment|// +-------++-------++-------+
comment|// +-------++-------++-------+
comment|// | win 4 || win 5 || win 6 |
comment|// +-------++-------++-------+
comment|// +-------++-------++-------+
comment|// | win 7 || win 8 || win 9 |
name|workspace
operator|.
name|setActiveSubWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|int
name|frameWidth
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|workspace
operator|.
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ScrollView_FrameOnlyAroundContents
argument_list|,
literal|0
argument_list|,
operator|&
name|workspace
argument_list|)
condition|)
name|frameWidth
operator|=
name|workspace
operator|.
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_DefaultFrameWidth
argument_list|)
expr_stmt|;
specifier|const
name|int
name|spacing
init|=
literal|2
operator|*
name|frameWidth
operator|+
literal|2
decl_stmt|;
specifier|const
name|QSize
name|expectedViewportSize
argument_list|(
literal|3
operator|*
name|minSize
operator|.
name|width
argument_list|()
operator|+
name|spacing
argument_list|,
literal|3
operator|*
name|minSize
operator|.
name|height
argument_list|()
operator|+
name|spacing
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|QSKIP
argument_list|(
literal|"Not fixed yet! See task 197453"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTRY_COMPARE
argument_list|(
name|workspace
operator|.
name|viewport
argument_list|()
operator|->
name|rect
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|expectedViewportSize
argument_list|)
expr_stmt|;
comment|// Restore original scrollbar behavior for test below
name|workspace
operator|.
name|setHorizontalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAsNeeded
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|setVerticalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAsNeeded
argument_list|)
expr_stmt|;
comment|// Not enough space for all sub-windows to be visible -> provide scroll bars.
name|workspace
operator|.
name|resize
argument_list|(
literal|160
argument_list|,
literal|150
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|workspace
operator|.
name|size
argument_list|()
argument_list|,
name|QSize
argument_list|(
literal|160
argument_list|,
literal|150
argument_list|)
argument_list|)
expr_stmt|;
comment|// Horizontal scroll bar.
name|QScrollBar
modifier|*
name|hBar
init|=
name|workspace
operator|.
name|horizontalScrollBar
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|horizontalScrollBarPolicy
argument_list|()
argument_list|,
name|Qt
operator|::
name|ScrollBarAsNeeded
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|hBar
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hBar
operator|->
name|value
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hBar
operator|->
name|minimum
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Vertical scroll bar.
name|QScrollBar
modifier|*
name|vBar
init|=
name|workspace
operator|.
name|verticalScrollBar
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|workspace
operator|.
name|verticalScrollBarPolicy
argument_list|()
argument_list|,
name|Qt
operator|::
name|ScrollBarAsNeeded
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|vBar
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vBar
operator|->
name|value
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vBar
operator|->
name|minimum
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|tileSubWindows
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|workspace
argument_list|)
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|workspace
operator|.
name|size
argument_list|()
operator|!=
name|QSize
argument_list|(
literal|150
argument_list|,
literal|150
argument_list|)
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
operator|!
name|vBar
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
operator|!
name|hBar
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cascadeAndTileSubWindows
name|void
name|tst_QMdiArea
operator|::
name|cascadeAndTileSubWindows
parameter_list|()
block|{
name|QMdiArea
name|workspace
decl_stmt|;
name|workspace
operator|.
name|resize
argument_list|(
literal|400
argument_list|,
literal|400
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|workspace
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|int
name|windowCount
init|=
literal|10
decl_stmt|;
name|QList
argument_list|<
name|QMdiSubWindow
modifier|*
argument_list|>
name|windows
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|windowCount
condition|;
operator|++
name|i
control|)
block|{
name|QMdiSubWindow
modifier|*
name|window
init|=
name|workspace
operator|.
name|addSubWindow
argument_list|(
operator|new
name|MyChild
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|%
literal|3
operator|==
literal|0
condition|)
block|{
name|window
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|isMinimized
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|window
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|windows
operator|.
name|append
argument_list|(
name|window
argument_list|)
expr_stmt|;
block|}
comment|// cascadeSubWindows
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|workspace
operator|.
name|cascadeSubWindows
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
comment|// Check dy between two cascaded windows
name|QStyleOptionTitleBar
name|options
decl_stmt|;
name|options
operator|.
name|initFrom
argument_list|(
name|windows
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|titleBarHeight
init|=
name|windows
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_TitleBarHeight
argument_list|,
operator|&
name|options
argument_list|)
decl_stmt|;
comment|// ### Remove this after the mac style has been fixed
if|if
condition|(
name|windows
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|->
name|style
argument_list|()
operator|->
name|inherits
argument_list|(
literal|"QMacStyle"
argument_list|)
condition|)
name|titleBarHeight
operator|-=
literal|4
expr_stmt|;
specifier|const
name|QFontMetrics
name|fontMetrics
init|=
name|QFontMetrics
argument_list|(
name|QApplication
operator|::
name|font
argument_list|(
literal|"QMdiSubWindowTitleBar"
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|int
name|dy
init|=
name|qMax
argument_list|(
name|titleBarHeight
operator|-
operator|(
name|titleBarHeight
operator|-
name|fontMetrics
operator|.
name|height
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"QTBUG-25298"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|windows
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|->
name|geometry
argument_list|()
operator|.
name|top
argument_list|()
operator|-
name|windows
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|->
name|geometry
argument_list|()
operator|.
name|top
argument_list|()
argument_list|,
name|dy
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|windows
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QMdiSubWindow
modifier|*
name|window
init|=
name|windows
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|%
literal|3
operator|==
literal|0
condition|)
block|{
name|QVERIFY
argument_list|(
name|window
operator|->
name|isMinimized
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
operator|!
name|window
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|size
argument_list|()
argument_list|,
name|window
operator|->
name|sizeHint
argument_list|()
argument_list|)
expr_stmt|;
name|window
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|resizeMaximizedChildWindows_data
name|void
name|tst_QMdiArea
operator|::
name|resizeMaximizedChildWindows_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"startSize"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"increment"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"windowCount"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"multiple children"
argument_list|)
operator|<<
literal|400
operator|<<
literal|20
operator|<<
literal|10
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resizeMaximizedChildWindows
name|void
name|tst_QMdiArea
operator|::
name|resizeMaximizedChildWindows
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|startSize
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|increment
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|windowCount
argument_list|)
expr_stmt|;
name|QWidget
name|topLevel
decl_stmt|;
name|QMdiArea
name|workspace
argument_list|(
operator|&
name|topLevel
argument_list|)
decl_stmt|;
name|topLevel
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|topLevel
argument_list|)
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|resize
argument_list|(
name|startSize
argument_list|,
name|startSize
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|setOption
argument_list|(
name|QMdiArea
operator|::
name|DontMaximizeSubWindowOnActivation
argument_list|)
expr_stmt|;
name|QSize
name|workspaceSize
init|=
name|workspace
operator|.
name|size
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|workspaceSize
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|workspaceSize
argument_list|,
name|QSize
argument_list|(
name|startSize
argument_list|,
name|startSize
argument_list|)
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QMdiSubWindow
modifier|*
argument_list|>
name|windows
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|windowCount
condition|;
operator|++
name|i
control|)
block|{
name|QMdiSubWindow
modifier|*
name|window
init|=
name|workspace
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
decl_stmt|;
name|windows
operator|.
name|append
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|window
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|QSize
name|windowSize
init|=
name|window
operator|->
name|size
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|windowSize
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|->
name|rect
argument_list|()
argument_list|,
name|workspace
operator|.
name|contentsRect
argument_list|()
argument_list|)
expr_stmt|;
name|workspace
operator|.
name|resize
argument_list|(
name|workspaceSize
operator|+
name|QSize
argument_list|(
name|increment
argument_list|,
name|increment
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|workspace
operator|.
name|size
argument_list|()
argument_list|,
name|workspaceSize
operator|+
name|QSize
argument_list|(
name|increment
argument_list|,
name|increment
argument_list|)
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|->
name|size
argument_list|()
argument_list|,
name|windowSize
operator|+
name|QSize
argument_list|(
name|increment
argument_list|,
name|increment
argument_list|)
argument_list|)
expr_stmt|;
name|workspaceSize
operator|=
name|workspace
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|int
name|newSize
init|=
name|startSize
operator|+
name|increment
operator|*
name|windowCount
decl_stmt|;
name|QCOMPARE
argument_list|(
name|workspaceSize
argument_list|,
name|QSize
argument_list|(
name|newSize
argument_list|,
name|newSize
argument_list|)
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QWidget
modifier|*
name|window
decl|,
name|windows
control|)
name|QCOMPARE
argument_list|(
name|window
operator|->
name|rect
argument_list|()
argument_list|,
name|workspace
operator|.
name|contentsRect
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// QWidget::setParent clears focusWidget so make sure
end_comment
begin_comment
comment|// we restore it after QMdiArea::addSubWindow.
end_comment
begin_function
DECL|function|focusWidgetAfterAddSubWindow
name|void
name|tst_QMdiArea
operator|::
name|focusWidgetAfterAddSubWindow
parameter_list|()
block|{
name|QWidget
modifier|*
name|view
init|=
operator|new
name|QWidget
decl_stmt|;
name|view
operator|->
name|setLayout
argument_list|(
operator|new
name|QVBoxLayout
argument_list|)
expr_stmt|;
name|QLineEdit
modifier|*
name|lineEdit1
init|=
operator|new
name|QLineEdit
decl_stmt|;
name|QLineEdit
modifier|*
name|lineEdit2
init|=
operator|new
name|QLineEdit
decl_stmt|;
name|view
operator|->
name|layout
argument_list|()
operator|->
name|addWidget
argument_list|(
name|lineEdit1
argument_list|)
expr_stmt|;
name|view
operator|->
name|layout
argument_list|()
operator|->
name|addWidget
argument_list|(
name|lineEdit2
argument_list|)
expr_stmt|;
name|lineEdit2
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|focusWidget
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|lineEdit2
argument_list|)
argument_list|)
expr_stmt|;
name|QMdiArea
name|mdiArea
decl_stmt|;
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|focusWidget
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|lineEdit2
argument_list|)
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|show
argument_list|()
expr_stmt|;
name|view
operator|->
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
operator|&
name|mdiArea
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qApp
operator|->
name|focusWidget
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|lineEdit2
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dontMaximizeSubWindowOnActivation
name|void
name|tst_QMdiArea
operator|::
name|dontMaximizeSubWindowOnActivation
parameter_list|()
block|{
name|QMdiArea
name|mdiArea
decl_stmt|;
name|mdiArea
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|mdiArea
argument_list|)
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
operator|&
name|mdiArea
argument_list|)
expr_stmt|;
comment|// Add one maximized window.
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add few more windows and verify that they are maximized.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
name|QMdiSubWindow
modifier|*
name|window
init|=
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
decl_stmt|;
name|window
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
block|}
comment|// Verify that activated windows still are maximized on activation.
name|QList
argument_list|<
name|QMdiSubWindow
modifier|*
argument_list|>
name|subWindows
init|=
name|mdiArea
operator|.
name|subWindowList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subWindows
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|mdiArea
operator|.
name|activateNextSubWindow
argument_list|()
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|window
init|=
name|subWindows
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|window
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
block|}
comment|// Restore active window and verify that other windows aren't
comment|// maximized on activation.
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
operator|->
name|showNormal
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subWindows
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|mdiArea
operator|.
name|activateNextSubWindow
argument_list|()
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|window
init|=
name|subWindows
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|window
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
block|}
comment|// Enable 'DontMaximizedSubWindowOnActivation' and maximize the active window.
name|mdiArea
operator|.
name|setOption
argument_list|(
name|QMdiArea
operator|::
name|DontMaximizeSubWindowOnActivation
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|int
name|indexOfMaximized
init|=
name|subWindows
operator|.
name|indexOf
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|)
decl_stmt|;
comment|// Verify that windows are not maximized on activation.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subWindows
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|mdiArea
operator|.
name|activateNextSubWindow
argument_list|()
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|window
init|=
name|subWindows
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|window
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexOfMaximized
operator|!=
name|i
condition|)
name|QVERIFY
argument_list|(
operator|!
name|window
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
comment|// Minimize all windows.
foreach|foreach
control|(
name|QMdiSubWindow
modifier|*
name|window
decl|,
name|subWindows
control|)
block|{
name|window
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|isMinimized
argument_list|()
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
block|}
comment|// Disable 'DontMaximizedSubWindowOnActivation' and maximize the active window.
name|mdiArea
operator|.
name|setOption
argument_list|(
name|QMdiArea
operator|::
name|DontMaximizeSubWindowOnActivation
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
comment|// Verify that minimized windows are maximized on activation.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subWindows
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|mdiArea
operator|.
name|activateNextSubWindow
argument_list|()
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|window
init|=
name|subWindows
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|window
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
block|}
comment|// Verify that activated windows are maximized after closing
comment|// the active window
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subWindows
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
operator|->
name|close
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|subWindowList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Verify that new windows are not maximized.
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|delayedPlacement
name|void
name|tst_QMdiArea
operator|::
name|delayedPlacement
parameter_list|()
block|{
name|QMdiArea
name|mdiArea
decl_stmt|;
name|QMdiSubWindow
modifier|*
name|window1
init|=
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|window1
operator|->
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|window2
init|=
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|window2
operator|->
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|window3
init|=
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|window3
operator|->
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|resize
argument_list|(
name|window3
operator|->
name|minimumSizeHint
argument_list|()
operator|.
name|width
argument_list|()
operator|*
literal|3
argument_list|,
literal|400
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|mdiArea
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window1
operator|->
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window2
operator|->
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
argument_list|,
name|window1
operator|->
name|geometry
argument_list|()
operator|.
name|topRight
argument_list|()
operator|+
name|QPoint
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window3
operator|->
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
argument_list|,
name|window2
operator|->
name|geometry
argument_list|()
operator|.
name|topRight
argument_list|()
operator|+
name|QPoint
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|iconGeometryInMenuBar
name|void
name|tst_QMdiArea
operator|::
name|iconGeometryInMenuBar
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QMainWindow
name|mainWindow
decl_stmt|;
name|QMenuBar
modifier|*
name|menuBar
init|=
name|mainWindow
operator|.
name|menuBar
argument_list|()
decl_stmt|;
name|QMdiArea
modifier|*
name|mdiArea
init|=
operator|new
name|QMdiArea
decl_stmt|;
name|QMdiSubWindow
modifier|*
name|subWindow
init|=
name|mdiArea
operator|->
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
decl_stmt|;
name|mainWindow
operator|.
name|setCentralWidget
argument_list|(
name|mdiArea
argument_list|)
expr_stmt|;
name|mainWindow
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|mainWindow
argument_list|)
argument_list|)
expr_stmt|;
name|subWindow
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|leftCornerWidget
init|=
name|menuBar
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopLeftCorner
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|leftCornerWidget
argument_list|)
expr_stmt|;
name|int
name|topMargin
init|=
operator|(
name|menuBar
operator|->
name|height
argument_list|()
operator|-
name|leftCornerWidget
operator|->
name|height
argument_list|()
operator|)
operator|/
literal|2
decl_stmt|;
name|int
name|leftMargin
init|=
name|qApp
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuBarHMargin
argument_list|)
operator|+
name|qApp
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuBarPanelWidth
argument_list|)
decl_stmt|;
name|QPoint
name|pos
argument_list|(
name|leftMargin
argument_list|,
name|topMargin
argument_list|)
decl_stmt|;
name|QRect
name|geometry
init|=
name|QStyle
operator|::
name|visualRect
argument_list|(
name|qApp
operator|->
name|layoutDirection
argument_list|()
argument_list|,
name|menuBar
operator|->
name|rect
argument_list|()
argument_list|,
name|QRect
argument_list|(
name|pos
argument_list|,
name|leftCornerWidget
operator|->
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|leftCornerWidget
operator|->
name|geometry
argument_list|()
argument_list|,
name|geometry
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_class
DECL|class|EventSpy
class|class
name|EventSpy
super|:
specifier|public
name|QObject
block|{
public|public:
DECL|function|EventSpy
name|EventSpy
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|,
name|QEvent
operator|::
name|Type
name|event
parameter_list|)
member_init_list|:
name|eventToSpy
argument_list|(
name|event
argument_list|)
member_init_list|,
name|_count
argument_list|(
literal|0
argument_list|)
block|{
if|if
condition|(
name|object
condition|)
name|object
operator|->
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|count
name|int
name|count
parameter_list|()
specifier|const
block|{
return|return
name|_count
return|;
block|}
DECL|function|clear
name|void
name|clear
parameter_list|()
block|{
name|_count
operator|=
literal|0
expr_stmt|;
block|}
protected|protected:
DECL|function|eventFilter
name|bool
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|eventToSpy
condition|)
operator|++
name|_count
expr_stmt|;
return|return
name|QObject
operator|::
name|eventFilter
argument_list|(
name|object
argument_list|,
name|event
argument_list|)
return|;
block|}
private|private:
DECL|member|eventToSpy
name|QEvent
operator|::
name|Type
name|eventToSpy
decl_stmt|;
DECL|member|_count
name|int
name|_count
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|resizeTimer
name|void
name|tst_QMdiArea
operator|::
name|resizeTimer
parameter_list|()
block|{
name|QMdiArea
name|mdiArea
decl_stmt|;
name|QMdiSubWindow
modifier|*
name|subWindow
init|=
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
decl_stmt|;
name|mdiArea
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowActive
argument_list|(
operator|&
name|mdiArea
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|int
name|time
init|=
literal|250
decl_stmt|;
else|#
directive|else
name|int
name|time
init|=
literal|1000
decl_stmt|;
endif|#
directive|endif
name|EventSpy
name|timerEventSpy
argument_list|(
name|subWindow
argument_list|,
name|QEvent
operator|::
name|Timer
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|timerEventSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|tileSubWindows
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
name|time
argument_list|)
expr_stmt|;
comment|// Wait for timer events to occur.
name|QCOMPARE
argument_list|(
name|timerEventSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|timerEventSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|mdiArea
operator|.
name|resize
argument_list|(
name|mdiArea
operator|.
name|size
argument_list|()
operator|+
name|QSize
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
name|time
argument_list|)
expr_stmt|;
comment|// Wait for timer events to occur.
name|QCOMPARE
argument_list|(
name|timerEventSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|timerEventSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Check that timers are killed.
name|QTest
operator|::
name|qWait
argument_list|(
name|time
argument_list|)
expr_stmt|;
comment|// Wait for timer events to occur.
name|QCOMPARE
argument_list|(
name|timerEventSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateScrollBars
name|void
name|tst_QMdiArea
operator|::
name|updateScrollBars
parameter_list|()
block|{
name|QMdiArea
name|mdiArea
decl_stmt|;
name|mdiArea
operator|.
name|setHorizontalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAsNeeded
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|setVerticalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAsNeeded
argument_list|)
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|subWindow1
init|=
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
decl_stmt|;
name|QMdiSubWindow
modifier|*
name|subWindow2
init|=
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
decl_stmt|;
name|mdiArea
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|mdiArea
argument_list|)
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QScrollBar
modifier|*
name|hbar
init|=
name|mdiArea
operator|.
name|horizontalScrollBar
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|hbar
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hbar
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ScrollBar_Transient
argument_list|)
operator|||
operator|!
name|hbar
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QScrollBar
modifier|*
name|vbar
init|=
name|mdiArea
operator|.
name|verticalScrollBar
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|vbar
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|vbar
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ScrollBar_Transient
argument_list|)
operator|||
operator|!
name|vbar
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
comment|// Move sub-window 2 away.
name|subWindow2
operator|->
name|move
argument_list|(
literal|10000
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|hbar
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ScrollBar_Transient
argument_list|)
operator|||
name|hbar
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|vbar
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ScrollBar_Transient
argument_list|)
operator|||
name|vbar
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
comment|// Maximize sub-window 1 and make sure we don't have any scroll bars.
name|subWindow1
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|subWindow1
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hbar
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ScrollBar_Transient
argument_list|)
operator|||
operator|!
name|hbar
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|vbar
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ScrollBar_Transient
argument_list|)
operator|||
operator|!
name|vbar
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
comment|// We still shouldn't get any scroll bars.
name|mdiArea
operator|.
name|resize
argument_list|(
name|mdiArea
operator|.
name|size
argument_list|()
operator|-
name|QSize
argument_list|(
literal|20
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|mdiArea
argument_list|)
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|subWindow1
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hbar
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ScrollBar_Transient
argument_list|)
operator|||
operator|!
name|hbar
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|vbar
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ScrollBar_Transient
argument_list|)
operator|||
operator|!
name|vbar
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
comment|// Restore sub-window 1 and make sure we have scroll bars again.
name|subWindow1
operator|->
name|showNormal
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|subWindow1
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hbar
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ScrollBar_Transient
argument_list|)
operator|||
name|hbar
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|vbar
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ScrollBar_Transient
argument_list|)
operator|||
name|vbar
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
comment|// Now, do the same when the viewport is scrolled.
name|hbar
operator|->
name|setValue
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|vbar
operator|->
name|setValue
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|setActivationOrder_data
name|void
name|tst_QMdiArea
operator|::
name|setActivationOrder_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QMdiArea
operator|::
name|WindowOrder
argument_list|>
argument_list|(
literal|"activationOrder"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"subWindowCount"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"staysOnTopIndex"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"firstActiveIndex"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|(
literal|"expectedActivationIndices"
argument_list|)
expr_stmt|;
comment|// The order of expectedCascadeIndices:
comment|// window 1 -> (index 0)
comment|//   window 2 -> (index 1)
comment|//     window 3 -> (index 2)
comment|// ....
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|(
literal|"expectedCascadeIndices"
argument_list|)
expr_stmt|;
comment|// The order of expectedTileIndices (the same as reading a book LTR).
comment|// +--------------------+--------------------+--------------------+
comment|// | window 1 (index 0) | window 2 (index 1) | window 3 (index 2) |
comment|// |                    +--------------------+--------------------+
comment|// |          (index 3) | window 4 (index 4) | window 5 (index 5) |
comment|// +--------------------------------------------------------------+
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|(
literal|"expectedTileIndices"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|list
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|list2
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|list3
decl_stmt|;
name|list
operator|<<
literal|2
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
operator|<<
literal|4
expr_stmt|;
name|list2
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
operator|<<
literal|4
expr_stmt|;
name|list3
operator|<<
literal|1
operator|<<
literal|4
operator|<<
literal|3
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"CreationOrder"
argument_list|)
operator|<<
name|QMdiArea
operator|::
name|CreationOrder
operator|<<
literal|5
operator|<<
literal|3
operator|<<
literal|1
operator|<<
name|list
operator|<<
name|list2
operator|<<
name|list3
expr_stmt|;
name|list
operator|=
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
name|list
operator|<<
literal|3
operator|<<
literal|1
operator|<<
literal|4
operator|<<
literal|3
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|0
expr_stmt|;
name|list2
operator|=
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
name|list2
operator|<<
literal|0
operator|<<
literal|2
operator|<<
literal|4
operator|<<
literal|1
operator|<<
literal|3
expr_stmt|;
name|list3
operator|=
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
name|list3
operator|<<
literal|1
operator|<<
literal|3
operator|<<
literal|4
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"StackingOrder"
argument_list|)
operator|<<
name|QMdiArea
operator|::
name|StackingOrder
operator|<<
literal|5
operator|<<
literal|3
operator|<<
literal|1
operator|<<
name|list
operator|<<
name|list2
operator|<<
name|list3
expr_stmt|;
name|list
operator|=
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
name|list
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|4
operator|<<
literal|3
operator|<<
literal|2
expr_stmt|;
name|list2
operator|=
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
name|list2
operator|<<
literal|0
operator|<<
literal|2
operator|<<
literal|3
operator|<<
literal|4
operator|<<
literal|1
expr_stmt|;
name|list3
operator|=
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
name|list3
operator|<<
literal|1
operator|<<
literal|4
operator|<<
literal|3
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ActivationHistoryOrder"
argument_list|)
operator|<<
name|QMdiArea
operator|::
name|ActivationHistoryOrder
operator|<<
literal|5
operator|<<
literal|3
operator|<<
literal|1
operator|<<
name|list
operator|<<
name|list2
operator|<<
name|list3
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setActivationOrder
name|void
name|tst_QMdiArea
operator|::
name|setActivationOrder
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QMdiArea
operator|::
name|WindowOrder
argument_list|,
name|activationOrder
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|subWindowCount
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|staysOnTopIndex
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|firstActiveIndex
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|,
name|expectedActivationIndices
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|,
name|expectedCascadeIndices
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|,
name|expectedTileIndices
argument_list|)
expr_stmt|;
comment|// Default order.
name|QMdiArea
name|mdiArea
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|activationOrder
argument_list|()
argument_list|,
name|QMdiArea
operator|::
name|CreationOrder
argument_list|)
expr_stmt|;
comment|// New order.
name|mdiArea
operator|.
name|setActivationOrder
argument_list|(
name|activationOrder
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|activationOrder
argument_list|()
argument_list|,
name|activationOrder
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QMdiSubWindow
modifier|*
argument_list|>
name|subWindows
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subWindowCount
condition|;
operator|++
name|i
control|)
name|subWindows
operator|<<
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QPushButton
argument_list|(
name|tr
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|subWindowList
argument_list|(
name|activationOrder
argument_list|)
argument_list|,
name|subWindows
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|mdiArea
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subWindows
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|mdiArea
operator|.
name|activateNextSubWindow
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|subWindows
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
block|}
name|QMdiSubWindow
modifier|*
name|staysOnTop
init|=
name|subWindows
operator|.
name|at
argument_list|(
name|staysOnTopIndex
argument_list|)
decl_stmt|;
name|staysOnTop
operator|->
name|setWindowFlags
argument_list|(
name|staysOnTop
operator|->
name|windowFlags
argument_list|()
operator||
name|Qt
operator|::
name|WindowStaysOnTopHint
argument_list|)
expr_stmt|;
name|staysOnTop
operator|->
name|raise
argument_list|()
expr_stmt|;
name|mdiArea
operator|.
name|setActiveSubWindow
argument_list|(
name|subWindows
operator|.
name|at
argument_list|(
name|firstActiveIndex
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|subWindows
operator|.
name|at
argument_list|(
name|firstActiveIndex
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify the actual arrangement/geometry.
name|mdiArea
operator|.
name|tileSubWindows
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|verifyArrangement
argument_list|(
operator|&
name|mdiArea
argument_list|,
name|Tiled
argument_list|,
name|expectedTileIndices
argument_list|)
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|cascadeSubWindows
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"QTBUG-25298"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|verifyArrangement
argument_list|(
operator|&
name|mdiArea
argument_list|,
name|Cascaded
argument_list|,
name|expectedCascadeIndices
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|activateNextSubWindow
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|subWindows
operator|.
name|at
argument_list|(
name|expectedActivationIndices
operator|.
name|takeFirst
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|activatePreviousSubWindow
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|subWindows
operator|.
name|at
argument_list|(
name|expectedActivationIndices
operator|.
name|takeFirst
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|activatePreviousSubWindow
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|subWindows
operator|.
name|at
argument_list|(
name|expectedActivationIndices
operator|.
name|takeFirst
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subWindowCount
condition|;
operator|++
name|i
control|)
block|{
name|mdiArea
operator|.
name|closeActiveSubWindow
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|subWindowCount
operator|-
literal|1
condition|)
block|{
comment|// Last window closed.
name|QVERIFY
argument_list|(
operator|!
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|QVERIFY
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|subWindows
operator|.
name|at
argument_list|(
name|expectedActivationIndices
operator|.
name|takeFirst
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|mdiArea
operator|.
name|subWindowList
argument_list|(
name|activationOrder
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|expectedActivationIndices
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tabBetweenSubWindows
name|void
name|tst_QMdiArea
operator|::
name|tabBetweenSubWindows
parameter_list|()
block|{
name|QMdiArea
name|mdiArea
decl_stmt|;
name|QList
argument_list|<
name|QMdiSubWindow
modifier|*
argument_list|>
name|subWindows
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
name|subWindows
operator|<<
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QLineEdit
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|mdiArea
argument_list|)
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
operator|&
name|mdiArea
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|focusWidget
init|=
name|subWindows
operator|.
name|back
argument_list|()
operator|->
name|widget
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|qApp
operator|->
name|focusWidget
argument_list|()
argument_list|,
name|focusWidget
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|mdiArea
argument_list|,
name|SIGNAL
argument_list|(
name|subWindowActivated
argument_list|(
name|QMdiSubWindow
operator|*
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Walk through the entire list of sub windows.
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"QTBUG-25298"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|tabBetweenSubWindowsIn
argument_list|(
operator|&
name|mdiArea
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|subWindows
operator|.
name|back
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|setActiveSubWindow
argument_list|(
name|subWindows
operator|.
name|front
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|subWindows
operator|.
name|front
argument_list|()
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Walk through the entire list of sub windows in the opposite direction (Ctrl-Shift-Tab).
name|QVERIFY
argument_list|(
name|tabBetweenSubWindowsIn
argument_list|(
operator|&
name|mdiArea
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|subWindows
operator|.
name|front
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Ctrl-Tab-Tab-Tab
name|QVERIFY
argument_list|(
name|tabBetweenSubWindowsIn
argument_list|(
operator|&
name|mdiArea
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|subWindows
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|setActiveSubWindow
argument_list|(
name|subWindows
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|subWindows
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Quick switch (Ctrl-Tab once) -> switch back to the previously active sub-window.
name|QVERIFY
argument_list|(
name|tabBetweenSubWindowsIn
argument_list|(
operator|&
name|mdiArea
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
argument_list|,
name|subWindows
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setViewMode
name|void
name|tst_QMdiArea
operator|::
name|setViewMode
parameter_list|()
block|{
name|QMdiArea
name|mdiArea
decl_stmt|;
name|QPixmap
name|iconPixmap
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|iconPixmap
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
name|QMdiSubWindow
modifier|*
name|subWindow
init|=
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
decl_stmt|;
name|subWindow
operator|->
name|setWindowTitle
argument_list|(
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|"Title %1"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|subWindow
operator|->
name|setWindowIcon
argument_list|(
name|iconPixmap
argument_list|)
expr_stmt|;
block|}
name|mdiArea
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|mdiArea
argument_list|)
argument_list|)
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|activeSubWindow
init|=
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
decl_stmt|;
specifier|const
name|QList
argument_list|<
name|QMdiSubWindow
modifier|*
argument_list|>
name|subWindows
init|=
name|mdiArea
operator|.
name|subWindowList
argument_list|()
decl_stmt|;
comment|// Default.
name|QVERIFY
argument_list|(
operator|!
name|activeSubWindow
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|QTabBar
modifier|*
name|tabBar
init|=
name|mdiArea
operator|.
name|findChild
argument_list|<
name|QTabBar
operator|*
argument_list|>
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tabBar
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|viewMode
argument_list|()
argument_list|,
name|QMdiArea
operator|::
name|SubWindowView
argument_list|)
expr_stmt|;
comment|// Tabbed view.
name|mdiArea
operator|.
name|setViewMode
argument_list|(
name|QMdiArea
operator|::
name|TabbedView
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|viewMode
argument_list|()
argument_list|,
name|QMdiArea
operator|::
name|TabbedView
argument_list|)
expr_stmt|;
name|tabBar
operator|=
name|mdiArea
operator|.
name|findChild
argument_list|<
name|QTabBar
operator|*
argument_list|>
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|tabBar
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tabBar
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tabBar
operator|->
name|count
argument_list|()
argument_list|,
name|subWindows
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|activeSubWindow
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tabBar
operator|->
name|currentIndex
argument_list|()
argument_list|,
name|subWindows
operator|.
name|indexOf
argument_list|(
name|activeSubWindow
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that tabIcon and tabText are set properly.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subWindows
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QMdiSubWindow
modifier|*
name|subWindow
init|=
name|subWindows
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|tabBar
operator|->
name|tabText
argument_list|(
name|i
argument_list|)
argument_list|,
name|subWindow
operator|->
name|windowTitle
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tabBar
operator|->
name|tabIcon
argument_list|(
name|i
argument_list|)
argument_list|,
name|subWindow
operator|->
name|windowIcon
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Check that tabText and tabIcon are updated.
name|activeSubWindow
operator|->
name|setWindowTitle
argument_list|(
name|QLatin1String
argument_list|(
literal|"Dude, I want another window title"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tabBar
operator|->
name|tabText
argument_list|(
name|tabBar
operator|->
name|currentIndex
argument_list|()
argument_list|)
argument_list|,
name|activeSubWindow
operator|->
name|windowTitle
argument_list|()
argument_list|)
expr_stmt|;
name|iconPixmap
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
name|activeSubWindow
operator|->
name|setWindowIcon
argument_list|(
name|iconPixmap
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tabBar
operator|->
name|tabIcon
argument_list|(
name|tabBar
operator|->
name|currentIndex
argument_list|()
argument_list|)
argument_list|,
name|activeSubWindow
operator|->
name|windowIcon
argument_list|()
argument_list|)
expr_stmt|;
comment|// If there's an empty window title, tabText should return "(Untitled)" (as in firefox).
name|activeSubWindow
operator|->
name|setWindowTitle
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tabBar
operator|->
name|tabText
argument_list|(
name|tabBar
operator|->
name|currentIndex
argument_list|()
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"(Untitled)"
argument_list|)
argument_list|)
expr_stmt|;
comment|// If there's no window icon, tabIcon should return ... an empty icon :)
name|activeSubWindow
operator|->
name|setWindowIcon
argument_list|(
name|QIcon
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tabBar
operator|->
name|tabIcon
argument_list|(
name|tabBar
operator|->
name|currentIndex
argument_list|()
argument_list|)
argument_list|,
name|QIcon
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that the current tab changes when activating another sub-window.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subWindows
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|mdiArea
operator|.
name|activateNextSubWindow
argument_list|()
expr_stmt|;
name|activeSubWindow
operator|=
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tabBar
operator|->
name|currentIndex
argument_list|()
argument_list|,
name|subWindows
operator|.
name|indexOf
argument_list|(
name|activeSubWindow
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|activeSubWindow
operator|=
name|mdiArea
operator|.
name|activeSubWindow
argument_list|()
expr_stmt|;
specifier|const
name|int
name|tabIndex
init|=
name|tabBar
operator|->
name|currentIndex
argument_list|()
decl_stmt|;
comment|// The current tab should not change when the sub-window is hidden.
name|activeSubWindow
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tabBar
operator|->
name|currentIndex
argument_list|()
argument_list|,
name|tabIndex
argument_list|)
expr_stmt|;
name|activeSubWindow
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tabBar
operator|->
name|currentIndex
argument_list|()
argument_list|,
name|tabIndex
argument_list|)
expr_stmt|;
comment|// Disable the tab when the sub-window is hidden and another sub-window is activated.
name|activeSubWindow
operator|->
name|hide
argument_list|()
expr_stmt|;
name|mdiArea
operator|.
name|activateNextSubWindow
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|tabBar
operator|->
name|currentIndex
argument_list|()
operator|!=
name|tabIndex
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tabBar
operator|->
name|isTabEnabled
argument_list|(
name|tabIndex
argument_list|)
argument_list|)
expr_stmt|;
comment|// Enable it again.
name|activeSubWindow
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tabBar
operator|->
name|currentIndex
argument_list|()
argument_list|,
name|tabIndex
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tabBar
operator|->
name|isTabEnabled
argument_list|(
name|tabIndex
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove sub-windows and make sure the tab is removed.
foreach|foreach
control|(
name|QMdiSubWindow
modifier|*
name|subWindow
decl|,
name|subWindows
control|)
block|{
if|if
condition|(
name|subWindow
operator|!=
name|activeSubWindow
condition|)
name|mdiArea
operator|.
name|removeSubWindow
argument_list|(
name|subWindow
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|tabBar
operator|->
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Go back to default (QMdiArea::SubWindowView).
name|mdiArea
operator|.
name|setViewMode
argument_list|(
name|QMdiArea
operator|::
name|SubWindowView
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|activeSubWindow
operator|->
name|isMaximized
argument_list|()
argument_list|)
expr_stmt|;
name|tabBar
operator|=
name|mdiArea
operator|.
name|findChild
argument_list|<
name|QTabBar
operator|*
argument_list|>
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tabBar
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|viewMode
argument_list|()
argument_list|,
name|QMdiArea
operator|::
name|SubWindowView
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setTabsClosable
name|void
name|tst_QMdiArea
operator|::
name|setTabsClosable
parameter_list|()
block|{
name|QMdiArea
name|mdiArea
decl_stmt|;
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
expr_stmt|;
comment|// test default
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|tabsClosable
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// change value before tab bar exists
name|QTabBar
modifier|*
name|tabBar
init|=
name|mdiArea
operator|.
name|findChild
argument_list|<
name|QTabBar
operator|*
argument_list|>
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tabBar
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|setTabsClosable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|tabsClosable
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// force tab bar creation
name|mdiArea
operator|.
name|setViewMode
argument_list|(
name|QMdiArea
operator|::
name|TabbedView
argument_list|)
expr_stmt|;
name|tabBar
operator|=
name|mdiArea
operator|.
name|findChild
argument_list|<
name|QTabBar
operator|*
argument_list|>
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|tabBar
argument_list|)
expr_stmt|;
comment|// value must've been propagated
name|QCOMPARE
argument_list|(
name|tabBar
operator|->
name|tabsClosable
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// change value when tab bar exists
name|mdiArea
operator|.
name|setTabsClosable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|tabsClosable
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tabBar
operator|->
name|tabsClosable
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setTabsMovable
name|void
name|tst_QMdiArea
operator|::
name|setTabsMovable
parameter_list|()
block|{
name|QMdiArea
name|mdiArea
decl_stmt|;
name|QMdiSubWindow
modifier|*
name|subWindow1
init|=
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
decl_stmt|;
name|QMdiSubWindow
modifier|*
name|subWindow2
init|=
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
decl_stmt|;
name|QMdiSubWindow
modifier|*
name|subWindow3
init|=
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
decl_stmt|;
comment|// test default
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|tabsMovable
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// change value before tab bar exists
name|QTabBar
modifier|*
name|tabBar
init|=
name|mdiArea
operator|.
name|findChild
argument_list|<
name|QTabBar
operator|*
argument_list|>
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tabBar
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|setTabsMovable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|tabsMovable
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// force tab bar creation
name|mdiArea
operator|.
name|setViewMode
argument_list|(
name|QMdiArea
operator|::
name|TabbedView
argument_list|)
expr_stmt|;
name|tabBar
operator|=
name|mdiArea
operator|.
name|findChild
argument_list|<
name|QTabBar
operator|*
argument_list|>
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|tabBar
argument_list|)
expr_stmt|;
comment|// value must've been propagated
name|QCOMPARE
argument_list|(
name|tabBar
operator|->
name|isMovable
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// test tab moving
name|QList
argument_list|<
name|QMdiSubWindow
modifier|*
argument_list|>
name|subWindows
decl_stmt|;
name|subWindows
operator|<<
name|subWindow1
operator|<<
name|subWindow2
operator|<<
name|subWindow3
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|subWindowList
argument_list|(
name|QMdiArea
operator|::
name|CreationOrder
argument_list|)
argument_list|,
name|subWindows
argument_list|)
expr_stmt|;
name|tabBar
operator|->
name|moveTab
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// 1,3,2
name|subWindows
operator|.
name|clear
argument_list|()
expr_stmt|;
name|subWindows
operator|<<
name|subWindow1
operator|<<
name|subWindow3
operator|<<
name|subWindow2
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|subWindowList
argument_list|(
name|QMdiArea
operator|::
name|CreationOrder
argument_list|)
argument_list|,
name|subWindows
argument_list|)
expr_stmt|;
name|tabBar
operator|->
name|moveTab
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// 3,2,1
name|subWindows
operator|.
name|clear
argument_list|()
expr_stmt|;
name|subWindows
operator|<<
name|subWindow3
operator|<<
name|subWindow2
operator|<<
name|subWindow1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|subWindowList
argument_list|(
name|QMdiArea
operator|::
name|CreationOrder
argument_list|)
argument_list|,
name|subWindows
argument_list|)
expr_stmt|;
comment|// change value when tab bar exists
name|mdiArea
operator|.
name|setTabsMovable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|tabsMovable
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tabBar
operator|->
name|isMovable
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setTabShape
name|void
name|tst_QMdiArea
operator|::
name|setTabShape
parameter_list|()
block|{
name|QMdiArea
name|mdiArea
decl_stmt|;
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|mdiArea
argument_list|)
argument_list|)
expr_stmt|;
comment|// Default.
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|tabShape
argument_list|()
argument_list|,
name|QTabWidget
operator|::
name|Rounded
argument_list|)
expr_stmt|;
comment|// Triangular.
name|mdiArea
operator|.
name|setTabShape
argument_list|(
name|QTabWidget
operator|::
name|Triangular
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|tabShape
argument_list|()
argument_list|,
name|QTabWidget
operator|::
name|Triangular
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|setViewMode
argument_list|(
name|QMdiArea
operator|::
name|TabbedView
argument_list|)
expr_stmt|;
name|QTabBar
modifier|*
name|tabBar
init|=
name|mdiArea
operator|.
name|findChild
argument_list|<
name|QTabBar
operator|*
argument_list|>
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|tabBar
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tabBar
operator|->
name|shape
argument_list|()
argument_list|,
name|QTabBar
operator|::
name|TriangularNorth
argument_list|)
expr_stmt|;
comment|// Back to default (Rounded).
name|mdiArea
operator|.
name|setTabShape
argument_list|(
name|QTabWidget
operator|::
name|Rounded
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|tabShape
argument_list|()
argument_list|,
name|QTabWidget
operator|::
name|Rounded
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tabBar
operator|->
name|shape
argument_list|()
argument_list|,
name|QTabBar
operator|::
name|RoundedNorth
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setTabPosition_data
name|void
name|tst_QMdiArea
operator|::
name|setTabPosition_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QTabWidget
operator|::
name|TabPosition
argument_list|>
argument_list|(
literal|"tabPosition"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"hasLeftMargin"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"hasTopMargin"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"hasRightMargin"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"hasBottomMargin"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"North"
argument_list|)
operator|<<
name|QTabWidget
operator|::
name|North
operator|<<
literal|false
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"South"
argument_list|)
operator|<<
name|QTabWidget
operator|::
name|South
operator|<<
literal|false
operator|<<
literal|false
operator|<<
literal|false
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"East"
argument_list|)
operator|<<
name|QTabWidget
operator|::
name|East
operator|<<
literal|false
operator|<<
literal|false
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"West"
argument_list|)
operator|<<
name|QTabWidget
operator|::
name|West
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setTabPosition
name|void
name|tst_QMdiArea
operator|::
name|setTabPosition
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QTabWidget
operator|::
name|TabPosition
argument_list|,
name|tabPosition
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|hasLeftMargin
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|hasTopMargin
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|hasRightMargin
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|hasBottomMargin
argument_list|)
expr_stmt|;
name|QMdiArea
name|mdiArea
decl_stmt|;
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|mdiArea
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure there are no margins.
name|mdiArea
operator|.
name|setContentsMargins
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Default.
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|tabPosition
argument_list|()
argument_list|,
name|QTabWidget
operator|::
name|North
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|setViewMode
argument_list|(
name|QMdiArea
operator|::
name|TabbedView
argument_list|)
expr_stmt|;
name|QTabBar
modifier|*
name|tabBar
init|=
name|mdiArea
operator|.
name|findChild
argument_list|<
name|QTabBar
operator|*
argument_list|>
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|tabBar
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tabBar
operator|->
name|shape
argument_list|()
argument_list|,
name|QTabBar
operator|::
name|RoundedNorth
argument_list|)
expr_stmt|;
comment|// New position.
name|mdiArea
operator|.
name|setTabPosition
argument_list|(
name|tabPosition
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mdiArea
operator|.
name|tabPosition
argument_list|()
argument_list|,
name|tabPosition
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tabBar
operator|->
name|shape
argument_list|()
argument_list|,
name|tabBarShapeFrom
argument_list|(
name|QTabWidget
operator|::
name|Rounded
argument_list|,
name|tabPosition
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|Qt
operator|::
name|LayoutDirection
name|originalLayoutDirection
init|=
name|qApp
operator|->
name|layoutDirection
argument_list|()
decl_stmt|;
comment|// Check that we have correct geometry in both RightToLeft and LeftToRight.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
comment|// Check viewportMargins.
specifier|const
name|QRect
name|viewportGeometry
init|=
name|mdiArea
operator|.
name|viewport
argument_list|()
operator|->
name|geometry
argument_list|()
decl_stmt|;
specifier|const
name|int
name|left
init|=
name|viewportGeometry
operator|.
name|left
argument_list|()
decl_stmt|;
specifier|const
name|int
name|top
init|=
name|viewportGeometry
operator|.
name|y
argument_list|()
decl_stmt|;
specifier|const
name|int
name|right
init|=
name|mdiArea
operator|.
name|width
argument_list|()
operator|-
name|viewportGeometry
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|int
name|bottom
init|=
name|mdiArea
operator|.
name|height
argument_list|()
operator|-
name|viewportGeometry
operator|.
name|height
argument_list|()
decl_stmt|;
specifier|const
name|QSize
name|sizeHint
init|=
name|tabBar
operator|->
name|sizeHint
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasLeftMargin
condition|)
name|QCOMPARE
argument_list|(
name|qApp
operator|->
name|isLeftToRight
argument_list|()
condition|?
name|left
else|:
name|right
argument_list|,
name|sizeHint
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasRightMargin
condition|)
name|QCOMPARE
argument_list|(
name|qApp
operator|->
name|isLeftToRight
argument_list|()
condition|?
name|right
else|:
name|left
argument_list|,
name|sizeHint
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasTopMargin
operator|||
name|hasBottomMargin
condition|)
name|QCOMPARE
argument_list|(
name|hasTopMargin
condition|?
name|top
else|:
name|bottom
argument_list|,
name|sizeHint
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check actual tab bar geometry.
specifier|const
name|QRegion
name|expectedTabBarGeometry
init|=
name|QRegion
argument_list|(
name|mdiArea
operator|.
name|rect
argument_list|()
argument_list|)
operator|.
name|subtracted
argument_list|(
name|viewportGeometry
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|expectedTabBarGeometry
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QRegion
argument_list|(
name|tabBar
operator|->
name|geometry
argument_list|()
argument_list|)
argument_list|,
name|expectedTabBarGeometry
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
name|qApp
operator|->
name|setLayoutDirection
argument_list|(
name|originalLayoutDirection
operator|==
name|Qt
operator|::
name|LeftToRight
condition|?
name|Qt
operator|::
name|RightToLeft
else|:
name|Qt
operator|::
name|LeftToRight
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
block|}
name|qApp
operator|->
name|setLayoutDirection
argument_list|(
name|originalLayoutDirection
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nativeSubWindows
name|void
name|tst_QMdiArea
operator|::
name|nativeSubWindows
parameter_list|()
block|{
specifier|const
name|QString
name|platformName
init|=
name|QGuiApplication
operator|::
name|platformName
argument_list|()
decl_stmt|;
if|if
condition|(
name|platformName
operator|!=
name|QLatin1String
argument_list|(
literal|"xcb"
argument_list|)
operator|&&
name|platformName
operator|!=
name|QLatin1String
argument_list|(
literal|"windows"
argument_list|)
condition|)
name|QSKIP
argument_list|(
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"nativeSubWindows() does not work on this platform (%1)."
argument_list|)
operator|.
name|arg
argument_list|(
name|platformName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
if|if
condition|(
name|QOpenGLFunctions
operator|::
name|isES
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"nativeSubWindows() does not work with ANGLE on Windows, QTBUG-28545."
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|{
comment|// Add native widgets after show.
name|QMdiArea
name|mdiArea
decl_stmt|;
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|mdiArea
argument_list|)
argument_list|)
expr_stmt|;
comment|// No native widgets.
name|QVERIFY
argument_list|(
operator|!
name|mdiArea
operator|.
name|viewport
argument_list|()
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QMdiSubWindow
modifier|*
name|subWindow
decl|,
name|mdiArea
operator|.
name|subWindowList
argument_list|()
control|)
name|QVERIFY
argument_list|(
operator|!
name|subWindow
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|nativeWidget
init|=
operator|new
name|QWidget
decl_stmt|;
name|QVERIFY
argument_list|(
name|nativeWidget
operator|->
name|winId
argument_list|()
argument_list|)
expr_stmt|;
comment|// enforce native window.
name|QMdiSubWindow
modifier|*
name|subWin
init|=
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
name|nativeWidget
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|subWin
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
comment|// The viewport and all the sub-windows must be native.
name|QVERIFY
argument_list|(
name|mdiArea
operator|.
name|viewport
argument_list|()
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QMdiSubWindow
modifier|*
name|subWindow
decl|,
name|mdiArea
operator|.
name|subWindowList
argument_list|()
control|)
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a non-native widget. This should become native.
name|QMdiSubWindow
modifier|*
name|subWindow
init|=
operator|new
name|QMdiSubWindow
decl_stmt|;
name|subWindow
operator|->
name|setWidget
argument_list|(
operator|new
name|QWidget
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|subWindow
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
name|subWindow
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|// Add native widgets before show.
name|QMdiArea
name|mdiArea
decl_stmt|;
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|nativeWidget
init|=
operator|new
name|QWidget
decl_stmt|;
operator|(
name|void
operator|)
name|nativeWidget
operator|->
name|winId
argument_list|()
expr_stmt|;
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
name|nativeWidget
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|mdiArea
argument_list|)
argument_list|)
expr_stmt|;
comment|// The viewport and all the sub-windows must be native.
name|QVERIFY
argument_list|(
name|mdiArea
operator|.
name|viewport
argument_list|()
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QMdiSubWindow
modifier|*
name|subWindow
decl|,
name|mdiArea
operator|.
name|subWindowList
argument_list|()
control|)
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|// Make a sub-window native *after* it's added to the area.
name|QMdiArea
name|mdiArea
decl_stmt|;
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|mdiArea
argument_list|)
argument_list|)
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|nativeSubWindow
init|=
name|mdiArea
operator|.
name|subWindowList
argument_list|()
operator|.
name|last
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|nativeSubWindow
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|nativeSubWindow
operator|->
name|winId
argument_list|()
expr_stmt|;
comment|// All the sub-windows should be native at this point
name|QVERIFY
argument_list|(
name|mdiArea
operator|.
name|viewport
argument_list|()
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QMdiSubWindow
modifier|*
name|subWindow
decl|,
name|mdiArea
operator|.
name|subWindowList
argument_list|()
control|)
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_OPENGL
block|{
if|if
condition|(
operator|!
name|QGLFormat
operator|::
name|hasOpenGL
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"QGL not supported on this platform"
argument_list|)
expr_stmt|;
name|QMdiArea
name|mdiArea
decl_stmt|;
name|QGLWidget
modifier|*
name|glViewport
init|=
operator|new
name|QGLWidget
decl_stmt|;
name|mdiArea
operator|.
name|setViewport
argument_list|(
name|glViewport
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|mdiArea
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QGLContext
modifier|*
name|context
init|=
name|glViewport
operator|->
name|context
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|context
operator|||
operator|!
name|context
operator|->
name|isValid
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"QGL is broken, cannot continue test"
argument_list|)
expr_stmt|;
comment|// The viewport and all the sub-windows must be native.
name|QVERIFY
argument_list|(
name|mdiArea
operator|.
name|viewport
argument_list|()
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QMdiSubWindow
modifier|*
name|subWindow
decl|,
name|mdiArea
operator|.
name|subWindowList
argument_list|()
control|)
name|QVERIFY
argument_list|(
name|subWindow
operator|->
name|internalWinId
argument_list|()
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|task_209615
name|void
name|tst_QMdiArea
operator|::
name|task_209615
parameter_list|()
block|{
name|QTabWidget
name|tabWidget
decl_stmt|;
name|QMdiArea
modifier|*
name|mdiArea1
init|=
operator|new
name|QMdiArea
decl_stmt|;
name|QMdiArea
modifier|*
name|mdiArea2
init|=
operator|new
name|QMdiArea
decl_stmt|;
name|QMdiSubWindow
modifier|*
name|subWindow
init|=
name|mdiArea1
operator|->
name|addSubWindow
argument_list|(
operator|new
name|QLineEdit
argument_list|)
decl_stmt|;
name|tabWidget
operator|.
name|addTab
argument_list|(
name|mdiArea1
argument_list|,
name|QLatin1String
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|tabWidget
operator|.
name|addTab
argument_list|(
name|mdiArea2
argument_list|,
name|QLatin1String
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|tabWidget
operator|.
name|show
argument_list|()
expr_stmt|;
name|mdiArea1
operator|->
name|removeSubWindow
argument_list|(
name|subWindow
argument_list|)
expr_stmt|;
name|mdiArea2
operator|->
name|addSubWindow
argument_list|(
name|subWindow
argument_list|)
expr_stmt|;
comment|// Please do not assert/crash.
name|tabWidget
operator|.
name|setCurrentIndex
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task_236750
name|void
name|tst_QMdiArea
operator|::
name|task_236750
parameter_list|()
block|{
name|QMdiArea
name|mdiArea
decl_stmt|;
name|QMdiSubWindow
modifier|*
name|subWindow
init|=
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QTextEdit
argument_list|)
decl_stmt|;
name|mdiArea
operator|.
name|show
argument_list|()
expr_stmt|;
name|subWindow
operator|->
name|setWindowFlags
argument_list|(
name|subWindow
operator|->
name|windowFlags
argument_list|()
operator||
name|Qt
operator|::
name|FramelessWindowHint
argument_list|)
expr_stmt|;
comment|// Please do not crash (floating point exception).
name|subWindow
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QMdiArea
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qmdiarea.moc"
end_include
end_unit
