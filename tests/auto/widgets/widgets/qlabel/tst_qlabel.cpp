begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|"qlabel.h"
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qboxlayout.h>
end_include
begin_include
include|#
directive|include
file|<qlabel.h>
end_include
begin_include
include|#
directive|include
file|<qlineedit.h>
end_include
begin_include
include|#
directive|include
file|<qmovie.h>
end_include
begin_include
include|#
directive|include
file|<qpicture.h>
end_include
begin_include
include|#
directive|include
file|<qmessagebox.h>
end_include
begin_include
include|#
directive|include
file|<private/qlabel_p.h>
end_include
begin_class
DECL|class|Widget
class|class
name|Widget
super|:
specifier|public
name|QWidget
block|{
public|public:
DECL|function|Widget
name|Widget
parameter_list|()
block|{ }
DECL|member|events
name|QList
argument_list|<
name|QEvent
operator|::
name|Type
argument_list|>
name|events
decl_stmt|;
protected|protected:
DECL|function|event
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
name|ev
parameter_list|)
block|{
name|events
operator|.
name|append
argument_list|(
name|ev
operator|->
name|type
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|ev
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|tst_QLabel
class|class
name|tst_QLabel
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QLabel
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QLabel
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|setText_data
parameter_list|()
function_decl|;
name|void
name|setText
parameter_list|()
function_decl|;
name|void
name|setTextFormat
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|Q_OS_MAC
name|void
name|setBuddy
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|setNum
parameter_list|()
function_decl|;
name|void
name|clear
parameter_list|()
function_decl|;
name|void
name|wordWrap
parameter_list|()
function_decl|;
name|void
name|eventPropagation_data
parameter_list|()
function_decl|;
name|void
name|eventPropagation
parameter_list|()
function_decl|;
name|void
name|focusPolicy
parameter_list|()
function_decl|;
name|void
name|task190318_sizes
parameter_list|()
function_decl|;
name|void
name|sizeHint
parameter_list|()
function_decl|;
name|void
name|task226479_movieResize
parameter_list|()
function_decl|;
name|void
name|emptyPixmap
parameter_list|()
function_decl|;
name|void
name|unicodeText_data
parameter_list|()
function_decl|;
name|void
name|unicodeText
parameter_list|()
function_decl|;
name|void
name|mnemonic_data
parameter_list|()
function_decl|;
name|void
name|mnemonic
parameter_list|()
function_decl|;
name|void
name|selection
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
name|void
name|taskQTBUG_7902_contextMenuCrash
parameter_list|()
function_decl|;
endif|#
directive|endif
private|private:
DECL|member|testWidget
name|QLabel
modifier|*
name|testWidget
decl_stmt|;
DECL|member|test_box
name|QPointer
argument_list|<
name|Widget
argument_list|>
name|test_box
decl_stmt|;
DECL|member|test_label
name|QPointer
argument_list|<
name|QLabel
argument_list|>
name|test_label
decl_stmt|;
DECL|member|test_edit
name|QLineEdit
modifier|*
name|test_edit
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QLabel
operator|::
name|getSetCheck
parameter_list|()
block|{
name|QLabel
name|obj1
decl_stmt|;
comment|// bool QLabel::wordWrap()
comment|// void QLabel::setWordWrap(bool)
name|obj1
operator|.
name|setWordWrap
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|wordWrap
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setWordWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|wordWrap
argument_list|()
argument_list|)
expr_stmt|;
comment|// QWidget * QLabel::buddy()
comment|// void QLabel::setBuddy(QWidget *)
name|QWidget
modifier|*
name|var2
init|=
operator|new
name|QWidget
argument_list|()
decl_stmt|;
name|obj1
operator|.
name|setBuddy
argument_list|(
name|var2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|var2
argument_list|,
name|obj1
operator|.
name|buddy
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setBuddy
argument_list|(
operator|(
name|QWidget
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|QWidget
operator|*
operator|)
literal|0
argument_list|,
name|obj1
operator|.
name|buddy
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|var2
expr_stmt|;
comment|// QMovie * QLabel::movie()
comment|// void QLabel::setMovie(QMovie *)
name|QMovie
modifier|*
name|var3
init|=
operator|new
name|QMovie
decl_stmt|;
name|obj1
operator|.
name|setMovie
argument_list|(
name|var3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|var3
argument_list|,
name|obj1
operator|.
name|movie
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setMovie
argument_list|(
operator|(
name|QMovie
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|QMovie
operator|*
operator|)
literal|0
argument_list|,
name|obj1
operator|.
name|movie
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|var3
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|tst_QLabel
name|tst_QLabel
operator|::
name|tst_QLabel
parameter_list|()
member_init_list|:
name|test_box
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~tst_QLabel
name|tst_QLabel
operator|::
name|~
name|tst_QLabel
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|initTestCase
name|void
name|tst_QLabel
operator|::
name|initTestCase
parameter_list|()
block|{
comment|// Create the test class
name|testWidget
operator|=
operator|new
name|QLabel
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|resize
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QLabel
operator|::
name|cleanupTestCase
parameter_list|()
block|{
operator|delete
name|testWidget
expr_stmt|;
name|testWidget
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|test_box
condition|)
operator|delete
name|test_box
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_QLabel
operator|::
name|init
parameter_list|()
block|{
name|testWidget
operator|->
name|setTextFormat
argument_list|(
name|Qt
operator|::
name|AutoText
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setBuddy
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setIndent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignVCenter
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setScaledContents
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QLabel
operator|::
name|cleanup
parameter_list|()
block|{
if|if
condition|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"setBuddy"
argument_list|)
condition|)
block|{
name|testWidget
operator|->
name|show
argument_list|()
expr_stmt|;
operator|delete
name|test_box
expr_stmt|;
comment|// this should delete tst_labl and test_edit as well.
block|}
block|}
end_function
begin_comment
comment|// Set buddy doesn't make much sense on Mac OS X
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_MAC
end_ifndef
begin_function
DECL|function|setBuddy
name|void
name|tst_QLabel
operator|::
name|setBuddy
parameter_list|()
block|{
name|testWidget
operator|->
name|hide
argument_list|()
expr_stmt|;
name|test_box
operator|=
operator|new
name|Widget
expr_stmt|;
name|test_label
operator|=
operator|new
name|QLabel
argument_list|(
name|test_box
argument_list|)
expr_stmt|;
name|test_label
operator|->
name|setText
argument_list|(
literal|"&Test with a buddy"
argument_list|)
expr_stmt|;
name|test_edit
operator|=
operator|new
name|QLineEdit
argument_list|(
name|test_box
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|layout
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|test_box
argument_list|)
decl_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|test_label
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|test_edit
argument_list|)
expr_stmt|;
name|test_box
operator|->
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
name|test_box
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_box
operator|->
name|isActiveWindow
argument_list|()
argument_list|)
expr_stmt|;
name|test_label
operator|->
name|setBuddy
argument_list|(
name|test_edit
argument_list|)
expr_stmt|;
name|test_label
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|test_edit
operator|->
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|test_box
argument_list|,
literal|'t'
argument_list|,
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_edit
operator|->
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|test_box
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|setText_data
name|void
name|tst_QLabel
operator|::
name|setText_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"txt"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"font"
argument_list|)
expr_stmt|;
name|QString
name|prefix
init|=
literal|""
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN32
name|prefix
operator|=
literal|"win32_"
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|prefix
operator|+
literal|"data0"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"This is a single line"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Helvetica"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|prefix
operator|+
literal|"data1"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"This is the first line\nThis is the second line"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Courier"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|prefix
operator|+
literal|"data2"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"This is the first line\nThis is the second line\nThis is the third line"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Helvetica"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|prefix
operator|+
literal|"data3"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"This is<b>bold</b> richtext"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Courier"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|prefix
operator|+
literal|"data4"
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"I Have a&shortcut"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Helvetica"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setText
name|void
name|tst_QLabel
operator|::
name|setText
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|txt
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|font
argument_list|)
expr_stmt|;
name|QFont
name|f
argument_list|(
name|font
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|testWidget
operator|->
name|setFont
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
name|txt
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|txt
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setTextFormat
name|void
name|tst_QLabel
operator|::
name|setTextFormat
parameter_list|()
block|{
comment|// lets' start with the simple stuff...
name|testWidget
operator|->
name|setTextFormat
argument_list|(
name|Qt
operator|::
name|PlainText
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|textFormat
argument_list|()
operator|==
name|Qt
operator|::
name|PlainText
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setTextFormat
argument_list|(
name|Qt
operator|::
name|RichText
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|textFormat
argument_list|()
operator|==
name|Qt
operator|::
name|RichText
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setTextFormat
argument_list|(
name|Qt
operator|::
name|AutoText
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|textFormat
argument_list|()
operator|==
name|Qt
operator|::
name|AutoText
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setNum
name|void
name|tst_QLabel
operator|::
name|setNum
parameter_list|()
block|{
name|testWidget
operator|->
name|setText
argument_list|(
literal|"This is a text"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setNum
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"12"
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setNum
argument_list|(
literal|12.345
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"12.345"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|tst_QLabel
operator|::
name|clear
parameter_list|()
block|{
specifier|const
name|QString
name|TEXT
init|=
literal|"blah blah"
decl_stmt|;
name|testWidget
operator|->
name|setText
argument_list|(
name|TEXT
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
argument_list|,
name|TEXT
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|wordWrap
name|void
name|tst_QLabel
operator|::
name|wordWrap
parameter_list|()
block|{
name|QLabel
name|label
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|label
operator|.
name|wordWrap
argument_list|()
argument_list|)
expr_stmt|;
name|label
operator|.
name|setText
argument_list|(
literal|"Plain Text"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|label
operator|.
name|wordWrap
argument_list|()
argument_list|)
expr_stmt|;
name|label
operator|.
name|setText
argument_list|(
literal|"<b>rich text</b>"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|label
operator|.
name|wordWrap
argument_list|()
argument_list|)
expr_stmt|;
name|label
operator|.
name|setWordWrap
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|label
operator|.
name|setText
argument_list|(
literal|"<b>rich text</b>"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|label
operator|.
name|wordWrap
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|eventPropagation_data
name|void
name|tst_QLabel
operator|::
name|eventPropagation_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"text"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"textInteractionFlags"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"focusPolicy"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"propagation"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"plain text1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"plain text"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|LinksAccessibleByMouse
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|NoFocus
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"plain text2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"plain text"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|TextSelectableByKeyboard
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|ClickFocus
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"plain text3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"plain text"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|TextSelectableByMouse
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|ClickFocus
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"plain text4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"plain text"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|NoTextInteraction
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|NoFocus
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rich text1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<b>rich text</b>"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|LinksAccessibleByMouse
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|NoFocus
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rich text2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<b>rich text</b>"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|TextSelectableByKeyboard
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|ClickFocus
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rich text3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<b>rich text</b>"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|TextSelectableByMouse
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|ClickFocus
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rich text4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<b>rich text</b>"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|NoTextInteraction
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|NoFocus
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rich text5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<b>rich text</b>"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|LinksAccessibleByKeyboard
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|StrongFocus
operator|<<
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|test_box
condition|)
name|test_box
operator|=
operator|new
name|Widget
expr_stmt|;
if|if
condition|(
operator|!
name|test_label
condition|)
name|test_label
operator|=
operator|new
name|QLabel
argument_list|(
name|test_box
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|eventPropagation
name|void
name|tst_QLabel
operator|::
name|eventPropagation
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|textInteractionFlags
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|focusPolicy
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|propagation
argument_list|)
expr_stmt|;
comment|// plain text (accepts mouse event _only_ when label selectable by mouse)
name|test_label
operator|->
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|test_box
operator|->
name|events
operator|.
name|clear
argument_list|()
expr_stmt|;
name|test_label
operator|->
name|setTextInteractionFlags
argument_list|(
name|Qt
operator|::
name|TextInteractionFlags
argument_list|(
name|textInteractionFlags
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|int
argument_list|(
name|test_label
operator|->
name|focusPolicy
argument_list|()
argument_list|)
operator|==
name|focusPolicy
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mousePress
argument_list|(
name|test_label
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_box
operator|->
name|events
operator|.
name|contains
argument_list|(
name|QEvent
operator|::
name|MouseButtonPress
argument_list|)
operator|==
name|propagation
argument_list|)
expr_stmt|;
comment|// should have propagated!
block|}
end_function
begin_function
DECL|function|focusPolicy
name|void
name|tst_QLabel
operator|::
name|focusPolicy
parameter_list|()
block|{
operator|delete
name|test_label
expr_stmt|;
name|test_label
operator|=
operator|new
name|QLabel
expr_stmt|;
name|QCOMPARE
argument_list|(
name|test_label
operator|->
name|focusPolicy
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoFocus
argument_list|)
expr_stmt|;
comment|// default
name|test_label
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|StrongFocus
argument_list|)
expr_stmt|;
name|test_label
operator|->
name|setText
argument_list|(
literal|"Whatever"
argument_list|)
expr_stmt|;
comment|// setting text should not change the focus policy
name|QCOMPARE
argument_list|(
name|test_label
operator|->
name|focusPolicy
argument_list|()
argument_list|,
name|Qt
operator|::
name|StrongFocus
argument_list|)
expr_stmt|;
name|test_label
operator|->
name|setTextInteractionFlags
argument_list|(
name|Qt
operator|::
name|TextSelectableByKeyboard
argument_list|)
expr_stmt|;
comment|// this should
name|QCOMPARE
argument_list|(
name|test_label
operator|->
name|focusPolicy
argument_list|()
argument_list|,
name|Qt
operator|::
name|ClickFocus
argument_list|)
expr_stmt|;
name|test_label
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|StrongFocus
argument_list|)
expr_stmt|;
name|test_label
operator|->
name|setText
argument_list|(
literal|"Whatever"
argument_list|)
expr_stmt|;
comment|// setting text should not change the focus policy
name|QCOMPARE
argument_list|(
name|test_label
operator|->
name|focusPolicy
argument_list|()
argument_list|,
name|Qt
operator|::
name|StrongFocus
argument_list|)
expr_stmt|;
name|test_label
operator|->
name|setTextInteractionFlags
argument_list|(
name|Qt
operator|::
name|NoTextInteraction
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|test_label
operator|->
name|focusPolicy
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoFocus
argument_list|)
expr_stmt|;
name|test_label
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|StrongFocus
argument_list|)
expr_stmt|;
name|test_label
operator|->
name|setTextInteractionFlags
argument_list|(
name|Qt
operator|::
name|NoTextInteraction
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|test_label
operator|->
name|focusPolicy
argument_list|()
argument_list|,
name|Qt
operator|::
name|StrongFocus
argument_list|)
expr_stmt|;
comment|// is not touched since value didn't change
operator|delete
name|test_label
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task190318_sizes
name|void
name|tst_QLabel
operator|::
name|task190318_sizes
parameter_list|()
block|{
name|QLabel
name|label
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|QSize
name|ms
argument_list|(
literal|500
argument_list|,
literal|600
argument_list|)
decl_stmt|;
name|label
operator|.
name|setMinimumSize
argument_list|(
name|ms
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|label
operator|.
name|minimumSize
argument_list|()
argument_list|,
name|ms
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|label
operator|.
name|sizeHint
argument_list|()
argument_list|,
name|ms
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|label
operator|.
name|minimumSizeHint
argument_list|()
argument_list|,
name|ms
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sizeHint
name|void
name|tst_QLabel
operator|::
name|sizeHint
parameter_list|()
block|{
name|QLabel
name|label
argument_list|(
name|QLatin1String
argument_list|(
literal|"Test"
argument_list|)
argument_list|)
decl_stmt|;
name|label
operator|.
name|setIndent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|label
operator|.
name|setMargin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|label
operator|.
name|setContentsMargins
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|label
operator|.
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignVCenter
argument_list|)
expr_stmt|;
name|int
name|h
init|=
name|label
operator|.
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
decl_stmt|;
name|QLabel
name|l1
argument_list|(
name|QLatin1String
argument_list|(
literal|"Test"
argument_list|)
argument_list|)
decl_stmt|;
name|l1
operator|.
name|setIndent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|l1
operator|.
name|setMargin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|l1
operator|.
name|setContentsMargins
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|l1
operator|.
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignVCenter
argument_list|)
expr_stmt|;
name|l1
operator|.
name|setTextInteractionFlags
argument_list|(
name|Qt
operator|::
name|TextSelectableByMouse
argument_list|)
expr_stmt|;
comment|// will now use qtextcontrol
name|int
name|h1
init|=
name|l1
operator|.
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|h1
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task226479_movieResize
name|void
name|tst_QLabel
operator|::
name|task226479_movieResize
parameter_list|()
block|{
class|class
name|Label
super|:
specifier|public
name|QLabel
block|{
protected|protected:
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
name|e
parameter_list|)
block|{
name|paintedRegion
operator|+=
name|e
operator|->
name|region
argument_list|()
expr_stmt|;
name|QLabel
operator|::
name|paintEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
public|public:
name|QRegion
name|paintedRegion
decl_stmt|;
block|}
class|;
name|Label
name|label
decl_stmt|;
name|label
operator|.
name|resize
argument_list|(
literal|350
argument_list|,
literal|350
argument_list|)
expr_stmt|;
name|label
operator|.
name|show
argument_list|()
expr_stmt|;
name|QMovie
modifier|*
name|movie
init|=
operator|new
name|QMovie
argument_list|(
operator|&
name|label
argument_list|)
decl_stmt|;
name|label
operator|.
name|setMovie
argument_list|(
name|movie
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|label
argument_list|)
argument_list|)
expr_stmt|;
name|movie
operator|->
name|setFileName
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"red.png"
argument_list|)
argument_list|)
expr_stmt|;
name|movie
operator|->
name|start
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|movie
operator|->
name|stop
argument_list|()
expr_stmt|;
name|label
operator|.
name|paintedRegion
operator|=
name|QRegion
argument_list|()
expr_stmt|;
name|movie
operator|->
name|setFileName
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"green.png"
argument_list|)
argument_list|)
expr_stmt|;
name|movie
operator|->
name|start
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|label
operator|.
name|paintedRegion
argument_list|,
name|QRegion
argument_list|(
name|label
operator|.
name|rect
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|emptyPixmap
name|void
name|tst_QLabel
operator|::
name|emptyPixmap
parameter_list|()
block|{
comment|//task 197919
name|QLabel
name|label1
decl_stmt|,
name|label2
decl_stmt|,
name|label3
decl_stmt|,
name|label4
decl_stmt|;
name|label2
operator|.
name|setPixmap
argument_list|(
name|QPixmap
argument_list|(
literal|"/tmp/idonotexist"
argument_list|)
argument_list|)
expr_stmt|;
name|QMovie
name|movie
decl_stmt|;
name|label3
operator|.
name|setMovie
argument_list|(
operator|&
name|movie
argument_list|)
expr_stmt|;
name|label4
operator|.
name|setPicture
argument_list|(
name|QPicture
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|label1
operator|.
name|sizeHint
argument_list|()
argument_list|,
name|label2
operator|.
name|sizeHint
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|label1
operator|.
name|sizeHint
argument_list|()
argument_list|,
name|label3
operator|.
name|sizeHint
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|label1
operator|.
name|sizeHint
argument_list|()
argument_list|,
name|label4
operator|.
name|sizeHint
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/**     Test for QTBUG-4848 - unicode data corrupting QLabel display */
end_comment
begin_function
DECL|function|unicodeText_data
name|void
name|tst_QLabel
operator|::
name|unicodeText_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"text"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"languageName"
argument_list|)
expr_stmt|;
comment|/*     The "glass" phrase in Thai was the initial report for bug QTBUG-4848, was     originally found on http://www.columbia.edu/kermit/utf8.html.      The phrase is from an internet tradition regarding a striking phrase     that is translated into many different languages.  The utf8 strings     below were generated by using http://translate.google.com.      The glass phrase in Thai contains the à¹à¸§ character which manifests bug     QTBUG-4848      The last long phrase is an excerpt from Churchills "on the beaches"     speech, also translated using http://translate.google.com.     */
name|QTest
operator|::
name|newRow
argument_list|(
literal|"english"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"I can eat glass and it doesn't hurt me."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"english"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"thai"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"à¸à¸±à¸à¸à¸°à¸à¸´à¸à¹à¸à¹à¸§à¹à¸¥à¸°à¹à¸¡à¹à¹à¸à¹à¸à¸à¸±à¸"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"thai"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"chinese"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"æå¯ä»¥åç»çï¼å¹¶æ²¡æä¼¤å®³æã"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"chinese"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"arabic"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"Ø£Ø³ØªØ·ÙØ¹ Ø£ÙÙ Ø§ÙØ²Ø¬Ø§Ø¬ Ø ÙØ£ÙÙ ÙØ§ ÙØ¤Ø°ÙÙÙ."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"arabic"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"russian"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"Ð¯ Ð¼Ð¾Ð³Ñ ÐµÑÑÑ ÑÑÐµÐºÐ»Ð¾, Ð¸ Ð½Ðµ Ð±Ð¾Ð»ÑÐ½Ð¾."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"russian"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"korean"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"ì ë¦¬ë¥¼ ë¨¹ì ììë, ê·¸ë¦¬ê³  ê·¸ê² ë  ë¤ì¹ê²íì§ ììµëë¤."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"korean"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"greek"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"ÎÏÎ¿ÏÏ Î½Î± ÏÎ¬ÏÎµ Î³ÏÎ±Î»Î¯ ÎºÎ±Î¹ Î´ÎµÎ½ Î¼Î¿Ï ÎºÎ¬Î½ÎµÎ¹ ÎºÎ±ÎºÏ."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"greek"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"german"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"Ich kann Glas essen und es macht mich nicht heiÃ."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"german"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"thai_long"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"à¹à¸£à¸²à¸à¸°à¸à¹à¸­à¸ªà¸¹à¹à¹à¸à¸à¸°à¹à¸¥à¹à¸¥à¸°à¸¡à¸«à¸²à¸ªà¸¡à¸¸à¸à¸£. à¹à¸£à¸²à¸à¸°à¸à¹à¸­à¸ªà¸¹à¹à¸à¹à¸§à¸¢à¸à¸§à¸²à¸¡à¸¡à¸±à¹à¸à¹à¸à¹à¸à¸´à¸à¹à¸à¹à¸¥à¸°à¸à¸§à¸²à¸¡à¹à¸à¸£à¸´à¸à¹à¸à¸´à¸à¹à¸à¹à¸à¸­à¸²à¸à¸²à¸¨à¹à¸£à¸²à¸à¸°à¸à¸à¸à¹à¸­à¸à¹à¸à¸²à¸°à¸à¸­à¸à¹à¸£à¸²à¸à¹à¸²à¹à¸à¹à¸à¹à¸²à¸¢à¹à¸à¹à¸­à¸²à¸."
literal|"à¹à¸£à¸²à¸à¸°à¸à¹à¸­à¸ªà¸¹à¹à¸à¸à¸à¸²à¸¢à¸«à¸²à¸à¹à¸£à¸²à¸à¸°à¸à¹à¸­à¸ªà¸¹à¹à¹à¸à¸à¸£à¸´à¹à¸§à¸à¹à¸à¸·à¹à¸­à¸¡à¹à¸¢à¸à¹à¸à¸à¸¶à¸à¹à¸£à¸²à¸à¸°à¸à¹à¸­à¸ªà¸¹à¹à¹à¸à¸à¹à¸­à¸à¹à¸¥à¸°à¹à¸à¸à¸à¸à¸à¸µà¹à¹à¸£à¸²à¸à¸°à¸à¹à¸­à¸ªà¸¹à¹à¹à¸à¸ à¸¹à¹à¸à¸²à¸à¸±à¹à¸à¹à¸£à¸²à¸à¸°à¹à¸¡à¹à¸¢à¸­à¸¡."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"thai_long"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unicodeText
name|void
name|tst_QLabel
operator|::
name|unicodeText
parameter_list|()
block|{
specifier|const
name|QString
name|testDataPath
argument_list|(
literal|"testdata/unicodeText"
argument_list|)
decl_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|languageName
argument_list|)
expr_stmt|;
name|QFrame
name|frame
decl_stmt|;
name|QVBoxLayout
modifier|*
name|layout
init|=
operator|new
name|QVBoxLayout
argument_list|()
decl_stmt|;
name|QLabel
modifier|*
name|label
init|=
operator|new
name|QLabel
argument_list|(
name|text
argument_list|,
operator|&
name|frame
argument_list|)
decl_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|label
argument_list|)
expr_stmt|;
name|layout
operator|->
name|setMargin
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|frame
operator|.
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
name|frame
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|frame
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|frame
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
comment|// was successfully sized and shown
name|testWidget
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mnemonic_data
name|void
name|tst_QLabel
operator|::
name|mnemonic_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"text"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedDocText"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedShortcutCursor"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Normal"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Normal"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"&Simple"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Simple"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"S"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Also&simple"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Also simple"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"s"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"&&With&Double&&amp;"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"&With Double&amp;"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"D"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Hep&&Hop"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Hep&Hop"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Hep&&&Hop"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Hep&Hop"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"H"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mnemonic
name|void
name|tst_QLabel
operator|::
name|mnemonic
parameter_list|()
block|{
comment|// this test that the mnemonics appears correctly when the label has a text control.
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedDocText
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedShortcutCursor
argument_list|)
expr_stmt|;
name|QWidget
name|w
decl_stmt|;
name|QHBoxLayout
modifier|*
name|hbox
init|=
operator|new
name|QHBoxLayout
decl_stmt|;
name|QLabel
modifier|*
name|lab
init|=
operator|new
name|QLabel
argument_list|(
name|text
argument_list|)
decl_stmt|;
comment|//lab->setText("plop&plop");
name|QLineEdit
modifier|*
name|lineedit
init|=
operator|new
name|QLineEdit
decl_stmt|;
name|lab
operator|->
name|setBuddy
argument_list|(
name|lineedit
argument_list|)
expr_stmt|;
name|lab
operator|->
name|setTextInteractionFlags
argument_list|(
name|Qt
operator|::
name|TextSelectableByMouse
argument_list|)
expr_stmt|;
name|hbox
operator|->
name|addWidget
argument_list|(
name|lab
argument_list|)
expr_stmt|;
name|hbox
operator|->
name|addWidget
argument_list|(
name|lineedit
argument_list|)
expr_stmt|;
name|hbox
operator|->
name|addWidget
argument_list|(
operator|new
name|QLineEdit
argument_list|)
expr_stmt|;
name|w
operator|.
name|setLayout
argument_list|(
name|hbox
argument_list|)
expr_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|QLabelPrivate
modifier|*
name|d
init|=
cast|static_cast
argument_list|<
name|QLabelPrivate
operator|*
argument_list|>
argument_list|(
name|QObjectPrivate
operator|::
name|get
argument_list|(
name|lab
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|d
operator|->
name|control
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d
operator|->
name|control
operator|->
name|document
argument_list|()
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|expectedDocText
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d
operator|->
name|shortcutCursor
operator|.
name|selectedText
argument_list|()
argument_list|,
name|expectedShortcutCursor
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|selection
name|void
name|tst_QLabel
operator|::
name|selection
parameter_list|()
block|{
name|QLabel
name|label
decl_stmt|;
name|label
operator|.
name|setText
argument_list|(
literal|"Hello world"
argument_list|)
expr_stmt|;
name|label
operator|.
name|setTextInteractionFlags
argument_list|(
name|Qt
operator|::
name|TextSelectableByMouse
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|label
operator|.
name|hasSelectedText
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|label
operator|.
name|selectedText
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|label
operator|.
name|selectionStart
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|label
operator|.
name|setSelection
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|label
operator|.
name|hasSelectedText
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|label
operator|.
name|selectedText
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Hell"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|label
operator|.
name|selectionStart
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|label
operator|.
name|setSelection
argument_list|(
literal|6
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|label
operator|.
name|hasSelectedText
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|label
operator|.
name|selectedText
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"world"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|label
operator|.
name|selectionStart
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
end_ifndef
begin_function
DECL|function|taskQTBUG_7902_contextMenuCrash
name|void
name|tst_QLabel
operator|::
name|taskQTBUG_7902_contextMenuCrash
parameter_list|()
block|{
name|QLabel
modifier|*
name|w
init|=
operator|new
name|QLabel
argument_list|(
literal|"Test or crash?"
argument_list|)
decl_stmt|;
name|w
operator|->
name|setTextInteractionFlags
argument_list|(
name|Qt
operator|::
name|TextSelectableByMouse
argument_list|)
expr_stmt|;
name|w
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|QTimer
name|ti
decl_stmt|;
name|w
operator|->
name|connect
argument_list|(
operator|&
name|ti
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
name|w
argument_list|,
name|SLOT
argument_list|(
name|deleteLater
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ti
operator|.
name|start
argument_list|(
literal|300
argument_list|)
expr_stmt|;
name|QContextMenuEvent
modifier|*
name|cme
init|=
operator|new
name|QContextMenuEvent
argument_list|(
name|QContextMenuEvent
operator|::
name|Mouse
argument_list|,
name|w
operator|->
name|rect
argument_list|()
operator|.
name|center
argument_list|()
argument_list|)
decl_stmt|;
name|qApp
operator|->
name|postEvent
argument_list|(
name|w
argument_list|,
name|cme
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|350
argument_list|)
expr_stmt|;
comment|// No crash, it's allright.
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QLabel
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qlabel.moc"
end_include
end_unit
