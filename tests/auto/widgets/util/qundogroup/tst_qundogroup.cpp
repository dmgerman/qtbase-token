begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QUndoGroup>
end_include
begin_include
include|#
directive|include
file|<QUndoStack>
end_include
begin_include
include|#
directive|include
file|<QAction>
end_include
begin_comment
comment|// Temporarily disabling IRIX due to build issuues with GCC
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__sgi
argument_list|)
operator|||
name|defined
argument_list|(
name|__sgi
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__GNUC__
argument_list|)
end_if
begin_comment
comment|/****************************************************************************** ** Commands */
end_comment
begin_class
DECL|class|InsertCommand
class|class
name|InsertCommand
super|:
specifier|public
name|QUndoCommand
block|{
public|public:
name|InsertCommand
parameter_list|(
name|QString
modifier|*
name|str
parameter_list|,
name|int
name|idx
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|QUndoCommand
modifier|*
name|parent
init|=
literal|0
parameter_list|)
constructor_decl|;
specifier|virtual
name|void
name|undo
parameter_list|()
function_decl|;
specifier|virtual
name|void
name|redo
parameter_list|()
function_decl|;
private|private:
DECL|member|m_str
name|QString
modifier|*
name|m_str
decl_stmt|;
DECL|member|m_idx
name|int
name|m_idx
decl_stmt|;
DECL|member|m_text
name|QString
name|m_text
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|RemoveCommand
class|class
name|RemoveCommand
super|:
specifier|public
name|QUndoCommand
block|{
public|public:
name|RemoveCommand
parameter_list|(
name|QString
modifier|*
name|str
parameter_list|,
name|int
name|idx
parameter_list|,
name|int
name|len
parameter_list|,
name|QUndoCommand
modifier|*
name|parent
init|=
literal|0
parameter_list|)
constructor_decl|;
specifier|virtual
name|void
name|undo
parameter_list|()
function_decl|;
specifier|virtual
name|void
name|redo
parameter_list|()
function_decl|;
private|private:
DECL|member|m_str
name|QString
modifier|*
name|m_str
decl_stmt|;
DECL|member|m_idx
name|int
name|m_idx
decl_stmt|;
DECL|member|m_text
name|QString
name|m_text
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|AppendCommand
class|class
name|AppendCommand
super|:
specifier|public
name|QUndoCommand
block|{
public|public:
name|AppendCommand
parameter_list|(
name|QString
modifier|*
name|str
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|QUndoCommand
modifier|*
name|parent
init|=
literal|0
parameter_list|)
constructor_decl|;
specifier|virtual
name|void
name|undo
parameter_list|()
function_decl|;
specifier|virtual
name|void
name|redo
parameter_list|()
function_decl|;
specifier|virtual
name|int
name|id
parameter_list|()
specifier|const
function_decl|;
specifier|virtual
name|bool
name|mergeWith
parameter_list|(
specifier|const
name|QUndoCommand
modifier|*
name|other
parameter_list|)
function_decl|;
DECL|member|merged
name|bool
name|merged
decl_stmt|;
private|private:
DECL|member|m_str
name|QString
modifier|*
name|m_str
decl_stmt|;
DECL|member|m_text
name|QString
name|m_text
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|InsertCommand
name|InsertCommand
operator|::
name|InsertCommand
parameter_list|(
name|QString
modifier|*
name|str
parameter_list|,
name|int
name|idx
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|QUndoCommand
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QUndoCommand
argument_list|(
name|parent
argument_list|)
block|{
name|QVERIFY
argument_list|(
name|str
operator|->
name|length
argument_list|()
operator|>=
name|idx
argument_list|)
expr_stmt|;
name|setText
argument_list|(
literal|"insert"
argument_list|)
expr_stmt|;
name|m_str
operator|=
name|str
expr_stmt|;
name|m_idx
operator|=
name|idx
expr_stmt|;
name|m_text
operator|=
name|text
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|redo
name|void
name|InsertCommand
operator|::
name|redo
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|m_str
operator|->
name|length
argument_list|()
operator|>=
name|m_idx
argument_list|)
expr_stmt|;
name|m_str
operator|->
name|insert
argument_list|(
name|m_idx
argument_list|,
name|m_text
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|undo
name|void
name|InsertCommand
operator|::
name|undo
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|m_str
operator|->
name|mid
argument_list|(
name|m_idx
argument_list|,
name|m_text
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|m_text
argument_list|)
expr_stmt|;
name|m_str
operator|->
name|remove
argument_list|(
name|m_idx
argument_list|,
name|m_text
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|RemoveCommand
name|RemoveCommand
operator|::
name|RemoveCommand
parameter_list|(
name|QString
modifier|*
name|str
parameter_list|,
name|int
name|idx
parameter_list|,
name|int
name|len
parameter_list|,
name|QUndoCommand
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QUndoCommand
argument_list|(
name|parent
argument_list|)
block|{
name|QVERIFY
argument_list|(
name|str
operator|->
name|length
argument_list|()
operator|>=
name|idx
operator|+
name|len
argument_list|)
expr_stmt|;
name|setText
argument_list|(
literal|"remove"
argument_list|)
expr_stmt|;
name|m_str
operator|=
name|str
expr_stmt|;
name|m_idx
operator|=
name|idx
expr_stmt|;
name|m_text
operator|=
name|m_str
operator|->
name|mid
argument_list|(
name|m_idx
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|redo
name|void
name|RemoveCommand
operator|::
name|redo
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|m_str
operator|->
name|mid
argument_list|(
name|m_idx
argument_list|,
name|m_text
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|m_text
argument_list|)
expr_stmt|;
name|m_str
operator|->
name|remove
argument_list|(
name|m_idx
argument_list|,
name|m_text
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|undo
name|void
name|RemoveCommand
operator|::
name|undo
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|m_str
operator|->
name|length
argument_list|()
operator|>=
name|m_idx
argument_list|)
expr_stmt|;
name|m_str
operator|->
name|insert
argument_list|(
name|m_idx
argument_list|,
name|m_text
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|AppendCommand
name|AppendCommand
operator|::
name|AppendCommand
parameter_list|(
name|QString
modifier|*
name|str
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|QUndoCommand
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QUndoCommand
argument_list|(
name|parent
argument_list|)
block|{
name|setText
argument_list|(
literal|"append"
argument_list|)
expr_stmt|;
name|m_str
operator|=
name|str
expr_stmt|;
name|m_text
operator|=
name|text
expr_stmt|;
name|merged
operator|=
literal|false
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|redo
name|void
name|AppendCommand
operator|::
name|redo
parameter_list|()
block|{
name|m_str
operator|->
name|append
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|undo
name|void
name|AppendCommand
operator|::
name|undo
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|m_str
operator|->
name|mid
argument_list|(
name|m_str
operator|->
name|length
argument_list|()
operator|-
name|m_text
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|m_text
argument_list|)
expr_stmt|;
name|m_str
operator|->
name|truncate
argument_list|(
name|m_str
operator|->
name|length
argument_list|()
operator|-
name|m_text
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|id
name|int
name|AppendCommand
operator|::
name|id
parameter_list|()
specifier|const
block|{
return|return
literal|1
return|;
block|}
end_function
begin_function
DECL|function|mergeWith
name|bool
name|AppendCommand
operator|::
name|mergeWith
parameter_list|(
specifier|const
name|QUndoCommand
modifier|*
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|->
name|id
argument_list|()
operator|!=
name|id
argument_list|()
condition|)
return|return
literal|false
return|;
name|m_text
operator|+=
cast|static_cast
argument_list|<
specifier|const
name|AppendCommand
operator|*
argument_list|>
argument_list|(
name|other
argument_list|)
operator|->
name|m_text
expr_stmt|;
name|merged
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/****************************************************************************** ** tst_QUndoStack */
end_comment
begin_class
DECL|class|tst_QUndoGroup
class|class
name|tst_QUndoGroup
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QUndoGroup
parameter_list|()
constructor_decl|;
private|private
name|slots
private|:
name|void
name|setActive
parameter_list|()
function_decl|;
name|void
name|addRemoveStack
parameter_list|()
function_decl|;
name|void
name|deleteStack
parameter_list|()
function_decl|;
name|void
name|checkSignals
parameter_list|()
function_decl|;
name|void
name|addStackAndDie
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_PROCESS
name|void
name|commandTextFormat
parameter_list|()
function_decl|;
endif|#
directive|endif
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QUndoGroup
name|tst_QUndoGroup
operator|::
name|tst_QUndoGroup
parameter_list|()
block|{ }
end_constructor
begin_function
DECL|function|setActive
name|void
name|tst_QUndoGroup
operator|::
name|setActive
parameter_list|()
block|{
name|QUndoGroup
name|group
decl_stmt|;
name|QUndoStack
name|stack1
argument_list|(
operator|&
name|group
argument_list|)
decl_stmt|,
name|stack2
argument_list|(
operator|&
name|group
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|group
operator|.
name|activeStack
argument_list|()
argument_list|,
operator|(
name|QUndoStack
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stack1
operator|.
name|isActive
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stack2
operator|.
name|isActive
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QUndoStack
name|stack3
decl_stmt|;
name|QCOMPARE
argument_list|(
name|stack3
operator|.
name|isActive
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|group
operator|.
name|addStack
argument_list|(
operator|&
name|stack3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stack3
operator|.
name|isActive
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|stack1
operator|.
name|setActive
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|group
operator|.
name|activeStack
argument_list|()
argument_list|,
operator|&
name|stack1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stack1
operator|.
name|isActive
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stack2
operator|.
name|isActive
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stack3
operator|.
name|isActive
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|group
operator|.
name|setActiveStack
argument_list|(
operator|&
name|stack2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|group
operator|.
name|activeStack
argument_list|()
argument_list|,
operator|&
name|stack2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stack1
operator|.
name|isActive
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stack2
operator|.
name|isActive
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stack3
operator|.
name|isActive
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|group
operator|.
name|removeStack
argument_list|(
operator|&
name|stack2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|group
operator|.
name|activeStack
argument_list|()
argument_list|,
operator|(
name|QUndoStack
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stack1
operator|.
name|isActive
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stack2
operator|.
name|isActive
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stack3
operator|.
name|isActive
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|group
operator|.
name|removeStack
argument_list|(
operator|&
name|stack2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|group
operator|.
name|activeStack
argument_list|()
argument_list|,
operator|(
name|QUndoStack
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stack1
operator|.
name|isActive
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stack2
operator|.
name|isActive
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stack3
operator|.
name|isActive
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addRemoveStack
name|void
name|tst_QUndoGroup
operator|::
name|addRemoveStack
parameter_list|()
block|{
name|QUndoGroup
name|group
decl_stmt|;
name|QUndoStack
name|stack1
argument_list|(
operator|&
name|group
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|group
operator|.
name|stacks
argument_list|()
argument_list|,
name|QList
argument_list|<
name|QUndoStack
operator|*
argument_list|>
argument_list|()
operator|<<
operator|&
name|stack1
argument_list|)
expr_stmt|;
name|QUndoStack
name|stack2
decl_stmt|;
name|group
operator|.
name|addStack
argument_list|(
operator|&
name|stack2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|group
operator|.
name|stacks
argument_list|()
argument_list|,
name|QList
argument_list|<
name|QUndoStack
operator|*
argument_list|>
argument_list|()
operator|<<
operator|&
name|stack1
operator|<<
operator|&
name|stack2
argument_list|)
expr_stmt|;
name|group
operator|.
name|addStack
argument_list|(
operator|&
name|stack1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|group
operator|.
name|stacks
argument_list|()
argument_list|,
name|QList
argument_list|<
name|QUndoStack
operator|*
argument_list|>
argument_list|()
operator|<<
operator|&
name|stack1
operator|<<
operator|&
name|stack2
argument_list|)
expr_stmt|;
name|group
operator|.
name|removeStack
argument_list|(
operator|&
name|stack1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|group
operator|.
name|stacks
argument_list|()
argument_list|,
name|QList
argument_list|<
name|QUndoStack
operator|*
argument_list|>
argument_list|()
operator|<<
operator|&
name|stack2
argument_list|)
expr_stmt|;
name|group
operator|.
name|removeStack
argument_list|(
operator|&
name|stack1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|group
operator|.
name|stacks
argument_list|()
argument_list|,
name|QList
argument_list|<
name|QUndoStack
operator|*
argument_list|>
argument_list|()
operator|<<
operator|&
name|stack2
argument_list|)
expr_stmt|;
name|group
operator|.
name|removeStack
argument_list|(
operator|&
name|stack2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|group
operator|.
name|stacks
argument_list|()
argument_list|,
name|QList
argument_list|<
name|QUndoStack
operator|*
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|deleteStack
name|void
name|tst_QUndoGroup
operator|::
name|deleteStack
parameter_list|()
block|{
name|QUndoGroup
name|group
decl_stmt|;
name|QUndoStack
modifier|*
name|stack1
init|=
operator|new
name|QUndoStack
argument_list|(
operator|&
name|group
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|group
operator|.
name|stacks
argument_list|()
argument_list|,
name|QList
argument_list|<
name|QUndoStack
operator|*
argument_list|>
argument_list|()
operator|<<
name|stack1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|group
operator|.
name|activeStack
argument_list|()
argument_list|,
operator|(
name|QUndoStack
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|stack1
operator|->
name|setActive
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|group
operator|.
name|activeStack
argument_list|()
argument_list|,
name|stack1
argument_list|)
expr_stmt|;
name|QUndoStack
modifier|*
name|stack2
init|=
operator|new
name|QUndoStack
argument_list|(
operator|&
name|group
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|group
operator|.
name|stacks
argument_list|()
argument_list|,
name|QList
argument_list|<
name|QUndoStack
operator|*
argument_list|>
argument_list|()
operator|<<
name|stack1
operator|<<
name|stack2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|group
operator|.
name|activeStack
argument_list|()
argument_list|,
name|stack1
argument_list|)
expr_stmt|;
name|QUndoStack
modifier|*
name|stack3
init|=
operator|new
name|QUndoStack
argument_list|(
operator|&
name|group
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|group
operator|.
name|stacks
argument_list|()
argument_list|,
name|QList
argument_list|<
name|QUndoStack
operator|*
argument_list|>
argument_list|()
operator|<<
name|stack1
operator|<<
name|stack2
operator|<<
name|stack3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|group
operator|.
name|activeStack
argument_list|()
argument_list|,
name|stack1
argument_list|)
expr_stmt|;
operator|delete
name|stack2
expr_stmt|;
name|QCOMPARE
argument_list|(
name|group
operator|.
name|stacks
argument_list|()
argument_list|,
name|QList
argument_list|<
name|QUndoStack
operator|*
argument_list|>
argument_list|()
operator|<<
name|stack1
operator|<<
name|stack3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|group
operator|.
name|activeStack
argument_list|()
argument_list|,
name|stack1
argument_list|)
expr_stmt|;
operator|delete
name|stack1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|group
operator|.
name|stacks
argument_list|()
argument_list|,
name|QList
argument_list|<
name|QUndoStack
operator|*
argument_list|>
argument_list|()
operator|<<
name|stack3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|group
operator|.
name|activeStack
argument_list|()
argument_list|,
operator|(
name|QUndoStack
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|stack3
operator|->
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|group
operator|.
name|activeStack
argument_list|()
argument_list|,
operator|(
name|QUndoStack
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|stack3
operator|->
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|group
operator|.
name|activeStack
argument_list|()
argument_list|,
name|stack3
argument_list|)
expr_stmt|;
name|group
operator|.
name|removeStack
argument_list|(
name|stack3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|group
operator|.
name|stacks
argument_list|()
argument_list|,
name|QList
argument_list|<
name|QUndoStack
operator|*
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|group
operator|.
name|activeStack
argument_list|()
argument_list|,
operator|(
name|QUndoStack
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|stack3
expr_stmt|;
block|}
end_function
begin_function
DECL|function|glue
specifier|static
name|QString
name|glue
parameter_list|(
specifier|const
name|QString
modifier|&
name|s1
parameter_list|,
specifier|const
name|QString
modifier|&
name|s2
parameter_list|)
block|{
name|QString
name|result
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
name|s1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|s1
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|s2
operator|.
name|isEmpty
argument_list|()
condition|)
name|result
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|s2
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_define
DECL|macro|CHECK_STATE
define|#
directive|define
name|CHECK_STATE
parameter_list|(
name|_activeStack
parameter_list|,
name|_clean
parameter_list|,
name|_canUndo
parameter_list|,
name|_undoText
parameter_list|,
name|_canRedo
parameter_list|,
name|_redoText
parameter_list|, \
name|_cleanChanged
parameter_list|,
name|_indexChanged
parameter_list|,
name|_undoChanged
parameter_list|,
name|_redoChanged
parameter_list|)
define|\
value|QCOMPARE(group.activeStack(), (QUndoStack*)_activeStack); \     QCOMPARE(group.isClean(), _clean); \     QCOMPARE(group.canUndo(), _canUndo); \     QCOMPARE(group.undoText(), QString(_undoText)); \     QCOMPARE(group.canRedo(), _canRedo); \     QCOMPARE(group.redoText(), QString(_redoText)); \     if (_indexChanged) { \         QCOMPARE(indexChangedSpy.count(), 1); \         indexChangedSpy.clear(); \     } else { \         QCOMPARE(indexChangedSpy.count(), 0); \     } \     if (_cleanChanged) { \         QCOMPARE(cleanChangedSpy.count(), 1); \         QCOMPARE(cleanChangedSpy.at(0).at(0).toBool(), _clean); \         cleanChangedSpy.clear(); \     } else { \         QCOMPARE(cleanChangedSpy.count(), 0); \     } \     if (_undoChanged) { \         QCOMPARE(canUndoChangedSpy.count(), 1); \         QCOMPARE(canUndoChangedSpy.at(0).at(0).toBool(), _canUndo); \         QCOMPARE(undo_action->isEnabled(), _canUndo); \         QCOMPARE(undoTextChangedSpy.count(), 1); \         QCOMPARE(undoTextChangedSpy.at(0).at(0).toString(), QString(_undoText)); \         QCOMPARE(undo_action->text(), glue("foo", _undoText)); \         canUndoChangedSpy.clear(); \         undoTextChangedSpy.clear(); \     } else { \         QCOMPARE(canUndoChangedSpy.count(), 0); \         QCOMPARE(undoTextChangedSpy.count(), 0); \     } \     if (_redoChanged) { \         QCOMPARE(canRedoChangedSpy.count(), 1); \         QCOMPARE(canRedoChangedSpy.at(0).at(0).toBool(), _canRedo); \         QCOMPARE(redo_action->isEnabled(), _canRedo); \         QCOMPARE(redoTextChangedSpy.count(), 1); \         QCOMPARE(redoTextChangedSpy.at(0).at(0).toString(), QString(_redoText)); \         QCOMPARE(redo_action->text(), glue("bar", _redoText)); \         canRedoChangedSpy.clear(); \         redoTextChangedSpy.clear(); \     } else { \         QCOMPARE(canRedoChangedSpy.count(), 0); \         QCOMPARE(redoTextChangedSpy.count(), 0); \     }
end_define
begin_function
DECL|function|checkSignals
name|void
name|tst_QUndoGroup
operator|::
name|checkSignals
parameter_list|()
block|{
name|QUndoGroup
name|group
decl_stmt|;
name|QAction
modifier|*
name|undo_action
init|=
name|group
operator|.
name|createUndoAction
argument_list|(
literal|0
argument_list|,
name|QString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|QAction
modifier|*
name|redo_action
init|=
name|group
operator|.
name|createRedoAction
argument_list|(
literal|0
argument_list|,
name|QString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|indexChangedSpy
argument_list|(
operator|&
name|group
argument_list|,
name|SIGNAL
argument_list|(
name|indexChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|cleanChangedSpy
argument_list|(
operator|&
name|group
argument_list|,
name|SIGNAL
argument_list|(
name|cleanChanged
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|canUndoChangedSpy
argument_list|(
operator|&
name|group
argument_list|,
name|SIGNAL
argument_list|(
name|canUndoChanged
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|undoTextChangedSpy
argument_list|(
operator|&
name|group
argument_list|,
name|SIGNAL
argument_list|(
name|undoTextChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|canRedoChangedSpy
argument_list|(
operator|&
name|group
argument_list|,
name|SIGNAL
argument_list|(
name|canRedoChanged
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|redoTextChangedSpy
argument_list|(
operator|&
name|group
argument_list|,
name|SIGNAL
argument_list|(
name|redoTextChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|str
decl_stmt|;
name|CHECK_STATE
argument_list|(
literal|0
argument_list|,
comment|// activeStack
literal|true
argument_list|,
comment|// clean
literal|false
argument_list|,
comment|// canUndo
literal|""
argument_list|,
comment|// undoText
literal|false
argument_list|,
comment|// canRedo
literal|""
argument_list|,
comment|// redoText
literal|false
argument_list|,
comment|// cleanChanged
literal|false
argument_list|,
comment|// indexChanged
literal|false
argument_list|,
comment|// undoChanged
literal|false
argument_list|)
comment|// redoChanged
name|group
operator|.
name|undo
argument_list|()
expr_stmt|;
name|CHECK_STATE
argument_list|(
literal|0
argument_list|,
comment|// activeStack
literal|true
argument_list|,
comment|// clean
literal|false
argument_list|,
comment|// canUndo
literal|""
argument_list|,
comment|// undoText
literal|false
argument_list|,
comment|// canRedo
literal|""
argument_list|,
comment|// redoText
literal|false
argument_list|,
comment|// cleanChanged
literal|false
argument_list|,
comment|// indexChanged
literal|false
argument_list|,
comment|// undoChanged
literal|false
argument_list|)
comment|// redoChanged
name|group
operator|.
name|redo
argument_list|()
expr_stmt|;
name|CHECK_STATE
argument_list|(
literal|0
argument_list|,
comment|// activeStack
literal|true
argument_list|,
comment|// clean
literal|false
argument_list|,
comment|// canUndo
literal|""
argument_list|,
comment|// undoText
literal|false
argument_list|,
comment|// canRedo
literal|""
argument_list|,
comment|// redoText
literal|false
argument_list|,
comment|// cleanChanged
literal|false
argument_list|,
comment|// indexChanged
literal|false
argument_list|,
comment|// undoChanged
literal|false
argument_list|)
comment|// redoChanged
name|QUndoStack
modifier|*
name|stack1
init|=
operator|new
name|QUndoStack
argument_list|(
operator|&
name|group
argument_list|)
decl_stmt|;
name|CHECK_STATE
argument_list|(
literal|0
argument_list|,
comment|// activeStack
literal|true
argument_list|,
comment|// clean
literal|false
argument_list|,
comment|// canUndo
literal|""
argument_list|,
comment|// undoText
literal|false
argument_list|,
comment|// canRedo
literal|""
argument_list|,
comment|// redoText
literal|false
argument_list|,
comment|// cleanChanged
literal|false
argument_list|,
comment|// indexChanged
literal|false
argument_list|,
comment|// undoChanged
literal|false
argument_list|)
comment|// redoChanged
name|stack1
operator|->
name|push
argument_list|(
operator|new
name|AppendCommand
argument_list|(
operator|&
name|str
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|CHECK_STATE
argument_list|(
literal|0
argument_list|,
comment|// activeStack
literal|true
argument_list|,
comment|// clean
literal|false
argument_list|,
comment|// canUndo
literal|""
argument_list|,
comment|// undoText
literal|false
argument_list|,
comment|// canRedo
literal|""
argument_list|,
comment|// redoText
literal|false
argument_list|,
comment|// cleanChanged
literal|false
argument_list|,
comment|// indexChanged
literal|false
argument_list|,
comment|// undoChanged
literal|false
argument_list|)
comment|// redoChanged
name|stack1
operator|->
name|setActive
argument_list|()
expr_stmt|;
name|CHECK_STATE
argument_list|(
argument|stack1
argument_list|,
comment|// activeStack
literal|false
argument_list|,
comment|// clean
literal|true
argument_list|,
comment|// canUndo
literal|"append"
argument_list|,
comment|// undoText
literal|false
argument_list|,
comment|// canRedo
literal|""
argument_list|,
comment|// redoText
literal|true
argument_list|,
comment|// cleanChanged
literal|true
argument_list|,
comment|// indexChanged
literal|true
argument_list|,
comment|// undoChanged
literal|true
argument_list|)
comment|// redoChanged
name|stack1
operator|->
name|push
argument_list|(
operator|new
name|InsertCommand
argument_list|(
operator|&
name|str
argument_list|,
literal|0
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|CHECK_STATE
argument_list|(
argument|stack1
argument_list|,
comment|// activeStack
literal|false
argument_list|,
comment|// clean
literal|true
argument_list|,
comment|// canUndo
literal|"insert"
argument_list|,
comment|// undoText
literal|false
argument_list|,
comment|// canRedo
literal|""
argument_list|,
comment|// redoText
literal|false
argument_list|,
comment|// cleanChanged
literal|true
argument_list|,
comment|// indexChanged
literal|true
argument_list|,
comment|// undoChanged
literal|true
argument_list|)
comment|// redoChanged
name|stack1
operator|->
name|undo
argument_list|()
expr_stmt|;
name|CHECK_STATE
argument_list|(
argument|stack1
argument_list|,
comment|// activeStack
literal|false
argument_list|,
comment|// clean
literal|true
argument_list|,
comment|// canUndo
literal|"append"
argument_list|,
comment|// undoText
literal|true
argument_list|,
comment|// canRedo
literal|"insert"
argument_list|,
comment|// redoText
literal|false
argument_list|,
comment|// cleanChanged
literal|true
argument_list|,
comment|// indexChanged
literal|true
argument_list|,
comment|// undoChanged
literal|true
argument_list|)
comment|// redoChanged
name|stack1
operator|->
name|undo
argument_list|()
expr_stmt|;
name|CHECK_STATE
argument_list|(
argument|stack1
argument_list|,
comment|// activeStack
literal|true
argument_list|,
comment|// clean
literal|false
argument_list|,
comment|// canUndo
literal|""
argument_list|,
comment|// undoText
literal|true
argument_list|,
comment|// canRedo
literal|"append"
argument_list|,
comment|// redoText
literal|true
argument_list|,
comment|// cleanChanged
literal|true
argument_list|,
comment|// indexChanged
literal|true
argument_list|,
comment|// undoChanged
literal|true
argument_list|)
comment|// redoChanged
name|stack1
operator|->
name|undo
argument_list|()
expr_stmt|;
name|CHECK_STATE
argument_list|(
argument|stack1
argument_list|,
comment|// activeStack
literal|true
argument_list|,
comment|// clean
literal|false
argument_list|,
comment|// canUndo
literal|""
argument_list|,
comment|// undoText
literal|true
argument_list|,
comment|// canRedo
literal|"append"
argument_list|,
comment|// redoText
literal|false
argument_list|,
comment|// cleanChanged
literal|false
argument_list|,
comment|// indexChanged
literal|false
argument_list|,
comment|// undoChanged
literal|false
argument_list|)
comment|// redoChanged
name|group
operator|.
name|undo
argument_list|()
expr_stmt|;
name|CHECK_STATE
argument_list|(
argument|stack1
argument_list|,
comment|// activeStack
literal|true
argument_list|,
comment|// clean
literal|false
argument_list|,
comment|// canUndo
literal|""
argument_list|,
comment|// undoText
literal|true
argument_list|,
comment|// canRedo
literal|"append"
argument_list|,
comment|// redoText
literal|false
argument_list|,
comment|// cleanChanged
literal|false
argument_list|,
comment|// indexChanged
literal|false
argument_list|,
comment|// undoChanged
literal|false
argument_list|)
comment|// redoChanged
name|group
operator|.
name|redo
argument_list|()
expr_stmt|;
name|CHECK_STATE
argument_list|(
argument|stack1
argument_list|,
comment|// activeStack
literal|false
argument_list|,
comment|// clean
literal|true
argument_list|,
comment|// canUndo
literal|"append"
argument_list|,
comment|// undoText
literal|true
argument_list|,
comment|// canRedo
literal|"insert"
argument_list|,
comment|// redoText
literal|true
argument_list|,
comment|// cleanChanged
literal|true
argument_list|,
comment|// indexChanged
literal|true
argument_list|,
comment|// undoChanged
literal|true
argument_list|)
comment|// redoChanged
name|stack1
operator|->
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|CHECK_STATE
argument_list|(
literal|0
argument_list|,
comment|// activeStack
literal|true
argument_list|,
comment|// clean
literal|false
argument_list|,
comment|// canUndo
literal|""
argument_list|,
comment|// undoText
literal|false
argument_list|,
comment|// canRedo
literal|""
argument_list|,
comment|// redoText
literal|true
argument_list|,
comment|// cleanChanged
literal|true
argument_list|,
comment|// indexChanged
literal|true
argument_list|,
comment|// undoChanged
literal|true
argument_list|)
comment|// redoChanged
name|QUndoStack
modifier|*
name|stack2
init|=
operator|new
name|QUndoStack
argument_list|(
operator|&
name|group
argument_list|)
decl_stmt|;
name|CHECK_STATE
argument_list|(
literal|0
argument_list|,
comment|// activeStack
literal|true
argument_list|,
comment|// clean
literal|false
argument_list|,
comment|// canUndo
literal|""
argument_list|,
comment|// undoText
literal|false
argument_list|,
comment|// canRedo
literal|""
argument_list|,
comment|// redoText
literal|false
argument_list|,
comment|// cleanChanged
literal|false
argument_list|,
comment|// indexChanged
literal|false
argument_list|,
comment|// undoChanged
literal|false
argument_list|)
comment|// redoChanged
name|stack2
operator|->
name|setActive
argument_list|()
expr_stmt|;
name|CHECK_STATE
argument_list|(
argument|stack2
argument_list|,
comment|// activeStack
literal|true
argument_list|,
comment|// clean
literal|false
argument_list|,
comment|// canUndo
literal|""
argument_list|,
comment|// undoText
literal|false
argument_list|,
comment|// canRedo
literal|""
argument_list|,
comment|// redoText
literal|true
argument_list|,
comment|// cleanChanged
literal|true
argument_list|,
comment|// indexChanged
literal|true
argument_list|,
comment|// undoChanged
literal|true
argument_list|)
comment|// redoChanged
name|stack1
operator|->
name|setActive
argument_list|()
expr_stmt|;
name|CHECK_STATE
argument_list|(
name|stack1
argument_list|,
comment|// activeStack
literal|false
argument_list|,
comment|// clean
literal|true
argument_list|,
comment|// canUndo
literal|"append"
argument_list|,
comment|// undoText
literal|true
argument_list|,
comment|// canRedo
literal|"insert"
argument_list|,
comment|// redoText
literal|true
argument_list|,
comment|// cleanChanged
literal|true
argument_list|,
comment|// indexChanged
literal|true
argument_list|,
comment|// undoChanged
literal|true
argument_list|)
comment|// redoChanged
operator|delete
name|stack1
expr_stmt|;
name|CHECK_STATE
argument_list|(
literal|0
argument_list|,
comment|// activeStack
literal|true
argument_list|,
comment|// clean
literal|false
argument_list|,
comment|// canUndo
literal|""
argument_list|,
comment|// undoText
literal|false
argument_list|,
comment|// canRedo
literal|""
argument_list|,
comment|// redoText
literal|true
argument_list|,
comment|// cleanChanged
literal|true
argument_list|,
comment|// indexChanged
literal|true
argument_list|,
comment|// undoChanged
literal|true
argument_list|)
comment|// redoChanged
operator|delete
name|undo_action
expr_stmt|;
operator|delete
name|redo_action
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addStackAndDie
name|void
name|tst_QUndoGroup
operator|::
name|addStackAndDie
parameter_list|()
block|{
comment|// Test that QUndoStack doesn't keep a reference to QUndoGroup after the
comment|// group is deleted.
name|QUndoStack
modifier|*
name|stack
init|=
operator|new
name|QUndoStack
decl_stmt|;
name|QUndoGroup
modifier|*
name|group
init|=
operator|new
name|QUndoGroup
decl_stmt|;
name|group
operator|->
name|addStack
argument_list|(
name|stack
argument_list|)
expr_stmt|;
operator|delete
name|group
expr_stmt|;
name|stack
operator|->
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
operator|delete
name|stack
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PROCESS
end_ifndef
begin_function
DECL|function|commandTextFormat
name|void
name|tst_QUndoGroup
operator|::
name|commandTextFormat
parameter_list|()
block|{
name|QString
name|binDir
init|=
name|QLibraryInfo
operator|::
name|location
argument_list|(
name|QLibraryInfo
operator|::
name|BinariesPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|QProcess
operator|::
name|execute
argument_list|(
name|binDir
operator|+
literal|"/lrelease -version"
argument_list|)
operator|!=
literal|0
condition|)
name|QSKIP
argument_list|(
literal|"lrelease is missing or broken"
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|tsFile
init|=
name|QFINDTESTDATA
argument_list|(
literal|"testdata/qundogroup.ts"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tsFile
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QProcess
operator|::
name|execute
argument_list|(
name|binDir
operator|+
literal|"/lrelease "
operator|+
name|tsFile
argument_list|)
argument_list|)
expr_stmt|;
name|QTranslator
name|translator
decl_stmt|;
specifier|const
name|QString
name|qmFile
init|=
name|QFINDTESTDATA
argument_list|(
literal|"testdata/qundogroup.qm"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|qmFile
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|translator
operator|.
name|load
argument_list|(
name|qmFile
argument_list|)
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|installTranslator
argument_list|(
operator|&
name|translator
argument_list|)
expr_stmt|;
name|QUndoGroup
name|group
decl_stmt|;
name|QAction
modifier|*
name|undo_action
init|=
name|group
operator|.
name|createUndoAction
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QAction
modifier|*
name|redo_action
init|=
name|group
operator|.
name|createRedoAction
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|undo_action
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Undo-default-text"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|redo_action
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Redo-default-text"
argument_list|)
argument_list|)
expr_stmt|;
name|QUndoStack
name|stack
argument_list|(
operator|&
name|group
argument_list|)
decl_stmt|;
name|stack
operator|.
name|setActive
argument_list|()
expr_stmt|;
name|QString
name|str
decl_stmt|;
name|stack
operator|.
name|push
argument_list|(
operator|new
name|AppendCommand
argument_list|(
operator|&
name|str
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|undo_action
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"undo-prefix append undo-suffix"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|redo_action
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Redo-default-text"
argument_list|)
argument_list|)
expr_stmt|;
name|stack
operator|.
name|push
argument_list|(
operator|new
name|InsertCommand
argument_list|(
operator|&
name|str
argument_list|,
literal|0
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|stack
operator|.
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|undo_action
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"undo-prefix append undo-suffix"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|redo_action
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"redo-prefix insert redo-suffix"
argument_list|)
argument_list|)
expr_stmt|;
name|stack
operator|.
name|undo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|undo_action
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Undo-default-text"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|redo_action
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"redo-prefix append redo-suffix"
argument_list|)
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|removeTranslator
argument_list|(
operator|&
name|translator
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_else
else|#
directive|else
end_else
begin_class
DECL|class|tst_QUndoGroup
class|class
name|tst_QUndoGroup
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|tst_QUndoGroup
name|tst_QUndoGroup
parameter_list|()
block|{}
private|private
name|slots
private|:
DECL|function|setActive
name|void
name|setActive
parameter_list|()
block|{
name|QSKIP
argument_list|(
literal|"Not tested on irix-g++"
argument_list|)
expr_stmt|;
block|}
DECL|function|addRemoveStack
name|void
name|addRemoveStack
parameter_list|()
block|{
name|QSKIP
argument_list|(
literal|"Not tested on irix-g++"
argument_list|)
expr_stmt|;
block|}
DECL|function|deleteStack
name|void
name|deleteStack
parameter_list|()
block|{
name|QSKIP
argument_list|(
literal|"Not tested on irix-g++"
argument_list|)
expr_stmt|;
block|}
DECL|function|checkSignals
name|void
name|checkSignals
parameter_list|()
block|{
name|QSKIP
argument_list|(
literal|"Not tested on irix-g++"
argument_list|)
expr_stmt|;
block|}
DECL|function|addStackAndDie
name|void
name|addStackAndDie
parameter_list|()
block|{
name|QSKIP
argument_list|(
literal|"Not tested on irix-g++"
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QUndoGroup
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qundogroup.moc"
end_include
end_unit
