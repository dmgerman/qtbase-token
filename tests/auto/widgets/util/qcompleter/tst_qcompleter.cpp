begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtGui>
end_include
begin_include
include|#
directive|include
file|<QtWidgets>
end_include
begin_include
include|#
directive|include
file|<QtDebug>
end_include
begin_include
include|#
directive|include
file|<QPair>
end_include
begin_include
include|#
directive|include
file|<QList>
end_include
begin_include
include|#
directive|include
file|<QPointer>
end_include
begin_include
include|#
directive|include
file|"../../../../shared/filesystem.h"
end_include
begin_class
DECL|class|CsvCompleter
class|class
name|CsvCompleter
super|:
specifier|public
name|QCompleter
block|{
name|Q_OBJECT
public|public:
DECL|function|CsvCompleter
name|CsvCompleter
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QCompleter
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|csv
argument_list|(
literal|true
argument_list|)
block|{ }
name|QString
name|pathFromIndex
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|sourceIndex
parameter_list|)
specifier|const
function_decl|;
DECL|function|setCsvCompletion
name|void
name|setCsvCompletion
parameter_list|(
name|bool
name|set
parameter_list|)
block|{
name|csv
operator|=
name|set
expr_stmt|;
block|}
protected|protected:
DECL|function|splitPath
name|QStringList
name|splitPath
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
specifier|const
block|{
return|return
name|csv
condition|?
name|path
operator|.
name|split
argument_list|(
literal|","
argument_list|)
else|:
name|QCompleter
operator|::
name|splitPath
argument_list|(
name|path
argument_list|)
return|;
block|}
private|private:
DECL|member|csv
name|bool
name|csv
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|pathFromIndex
name|QString
name|CsvCompleter
operator|::
name|pathFromIndex
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|si
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|csv
condition|)
return|return
name|QCompleter
operator|::
name|pathFromIndex
argument_list|(
name|si
argument_list|)
return|;
if|if
condition|(
operator|!
name|si
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
name|QModelIndex
name|idx
init|=
name|si
decl_stmt|;
name|QStringList
name|list
decl_stmt|;
do|do
block|{
name|QString
name|t
init|=
name|model
argument_list|()
operator|->
name|data
argument_list|(
name|idx
argument_list|,
name|completionRole
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|list
operator|.
name|prepend
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|QModelIndex
name|parent
init|=
name|idx
operator|.
name|parent
argument_list|()
decl_stmt|;
name|idx
operator|=
name|parent
operator|.
name|sibling
argument_list|(
name|parent
operator|.
name|row
argument_list|()
argument_list|,
name|si
operator|.
name|column
argument_list|()
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|idx
operator|.
name|isValid
argument_list|()
condition|)
do|;
if|if
condition|(
name|list
operator|.
name|count
argument_list|()
operator|==
literal|1
condition|)
return|return
name|list
index|[
literal|0
index|]
return|;
return|return
name|list
operator|.
name|join
argument_list|(
literal|","
argument_list|)
return|;
block|}
end_function
begin_class
DECL|class|tst_QCompleter
class|class
name|tst_QCompleter
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QCompleter
parameter_list|()
constructor_decl|;
name|~
name|tst_QCompleter
parameter_list|()
destructor_decl|;
private|private
name|slots
private|:
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|multipleWidgets
parameter_list|()
function_decl|;
name|void
name|focusIn
parameter_list|()
function_decl|;
name|void
name|csMatchingOnCsSortedModel_data
parameter_list|()
function_decl|;
name|void
name|csMatchingOnCsSortedModel
parameter_list|()
function_decl|;
name|void
name|ciMatchingOnCiSortedModel_data
parameter_list|()
function_decl|;
name|void
name|ciMatchingOnCiSortedModel
parameter_list|()
function_decl|;
name|void
name|ciMatchingOnCsSortedModel_data
parameter_list|()
function_decl|;
name|void
name|ciMatchingOnCsSortedModel
parameter_list|()
function_decl|;
name|void
name|csMatchingOnCiSortedModel_data
parameter_list|()
function_decl|;
name|void
name|csMatchingOnCiSortedModel
parameter_list|()
function_decl|;
name|void
name|directoryModel_data
parameter_list|()
function_decl|;
name|void
name|directoryModel
parameter_list|()
function_decl|;
name|void
name|fileSystemModel_data
parameter_list|()
function_decl|;
name|void
name|fileSystemModel
parameter_list|()
function_decl|;
name|void
name|changingModel_data
parameter_list|()
function_decl|;
name|void
name|changingModel
parameter_list|()
function_decl|;
name|void
name|sortedEngineRowCount_data
parameter_list|()
function_decl|;
name|void
name|sortedEngineRowCount
parameter_list|()
function_decl|;
name|void
name|unsortedEngineRowCount_data
parameter_list|()
function_decl|;
name|void
name|unsortedEngineRowCount
parameter_list|()
function_decl|;
name|void
name|currentRow
parameter_list|()
function_decl|;
name|void
name|sortedEngineMapFromSource
parameter_list|()
function_decl|;
name|void
name|unsortedEngineMapFromSource
parameter_list|()
function_decl|;
name|void
name|historySearch
parameter_list|()
function_decl|;
name|void
name|modelDeletion
parameter_list|()
function_decl|;
name|void
name|setters
parameter_list|()
function_decl|;
name|void
name|dynamicSortOrder
parameter_list|()
function_decl|;
name|void
name|disabledItems
parameter_list|()
function_decl|;
comment|// task-specific tests below me
name|void
name|task178797_activatedOnReturn
parameter_list|()
function_decl|;
name|void
name|task189564_omitNonSelectableItems
parameter_list|()
function_decl|;
name|void
name|task246056_setCompletionPrefix
parameter_list|()
function_decl|;
name|void
name|task250064_lostFocus
parameter_list|()
function_decl|;
name|void
name|task253125_lineEditCompletion_data
parameter_list|()
function_decl|;
name|void
name|task253125_lineEditCompletion
parameter_list|()
function_decl|;
name|void
name|task247560_keyboardNavigation
parameter_list|()
function_decl|;
name|void
name|QTBUG_14292_filesystem
parameter_list|()
function_decl|;
private|private:
name|void
name|filter
parameter_list|(
name|bool
name|assync
init|=
literal|false
parameter_list|)
function_decl|;
name|void
name|testRowCount
parameter_list|()
function_decl|;
DECL|enum|ModelType
enum|enum
name|ModelType
block|{
DECL|enumerator|CASE_SENSITIVELY_SORTED_MODEL
name|CASE_SENSITIVELY_SORTED_MODEL
block|,
DECL|enumerator|CASE_INSENSITIVELY_SORTED_MODEL
name|CASE_INSENSITIVELY_SORTED_MODEL
block|,
DECL|enumerator|DIRECTORY_MODEL
name|DIRECTORY_MODEL
block|,
DECL|enumerator|HISTORY_MODEL
name|HISTORY_MODEL
block|,
DECL|enumerator|FILESYSTEM_MODEL
name|FILESYSTEM_MODEL
block|}
enum|;
name|void
name|setSourceModel
parameter_list|(
name|ModelType
parameter_list|)
function_decl|;
DECL|member|completer
name|CsvCompleter
modifier|*
name|completer
decl_stmt|;
DECL|member|treeWidget
name|QTreeWidget
modifier|*
name|treeWidget
decl_stmt|;
DECL|member|completionColumn
specifier|const
name|int
name|completionColumn
decl_stmt|;
DECL|member|columnCount
specifier|const
name|int
name|columnCount
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QCompleter
name|tst_QCompleter
operator|::
name|tst_QCompleter
parameter_list|()
member_init_list|:
name|completer
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|completionColumn
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|columnCount
argument_list|(
literal|3
argument_list|)
block|{
name|treeWidget
operator|=
operator|new
name|QTreeWidget
expr_stmt|;
name|treeWidget
operator|->
name|setColumnCount
argument_list|(
name|columnCount
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~tst_QCompleter
name|tst_QCompleter
operator|::
name|~
name|tst_QCompleter
parameter_list|()
block|{
operator|delete
name|treeWidget
expr_stmt|;
operator|delete
name|completer
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|setSourceModel
name|void
name|tst_QCompleter
operator|::
name|setSourceModel
parameter_list|(
name|ModelType
name|type
parameter_list|)
block|{
name|QString
name|text
decl_stmt|;
name|QTreeWidgetItem
modifier|*
name|parent
decl_stmt|,
modifier|*
name|child
decl_stmt|;
name|treeWidget
operator|->
name|clear
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|CASE_SENSITIVELY_SORTED_MODEL
case|:
comment|// Creates a tree model with top level items P0, P1, .., p0, p1,..
comment|// Each of these items parents have children (for P0 - c0P0, c1P0,...)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|5
condition|;
name|j
operator|++
control|)
block|{
name|parent
operator|=
operator|new
name|QTreeWidgetItem
argument_list|(
name|treeWidget
argument_list|)
expr_stmt|;
name|text
operator|.
name|sprintf
argument_list|(
literal|"%c%i"
argument_list|,
name|i
operator|==
literal|0
condition|?
literal|'P'
else|:
literal|'p'
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|parent
operator|->
name|setText
argument_list|(
name|completionColumn
argument_list|,
name|text
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|5
condition|;
name|k
operator|++
control|)
block|{
name|child
operator|=
operator|new
name|QTreeWidgetItem
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|QString
name|t
init|=
name|QString
argument_list|()
operator|.
name|sprintf
argument_list|(
literal|"c%i"
argument_list|,
name|k
argument_list|)
operator|+
name|text
decl_stmt|;
name|child
operator|->
name|setText
argument_list|(
name|completionColumn
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|completer
operator|->
name|setModel
argument_list|(
name|treeWidget
operator|->
name|model
argument_list|()
argument_list|)
expr_stmt|;
name|completer
operator|->
name|setCompletionColumn
argument_list|(
name|completionColumn
argument_list|)
expr_stmt|;
break|break;
case|case
name|CASE_INSENSITIVELY_SORTED_MODEL
case|:
case|case
name|HISTORY_MODEL
case|:
comment|// Creates a tree model with top level items P0, p0, P1, p1,...
comment|// Each of these items have children c0p0, c1p0,..
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|2
condition|;
name|j
operator|++
control|)
block|{
name|parent
operator|=
operator|new
name|QTreeWidgetItem
argument_list|(
name|treeWidget
argument_list|)
expr_stmt|;
name|text
operator|.
name|sprintf
argument_list|(
literal|"%c%i"
argument_list|,
name|j
operator|==
literal|0
condition|?
literal|'P'
else|:
literal|'p'
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|parent
operator|->
name|setText
argument_list|(
name|completionColumn
argument_list|,
name|text
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|5
condition|;
name|k
operator|++
control|)
block|{
name|child
operator|=
operator|new
name|QTreeWidgetItem
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|QString
name|t
init|=
name|QString
argument_list|()
operator|.
name|sprintf
argument_list|(
literal|"c%i"
argument_list|,
name|k
argument_list|)
operator|+
name|text
decl_stmt|;
name|child
operator|->
name|setText
argument_list|(
name|completionColumn
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|completer
operator|->
name|setModel
argument_list|(
name|treeWidget
operator|->
name|model
argument_list|()
argument_list|)
expr_stmt|;
name|completer
operator|->
name|setCompletionColumn
argument_list|(
name|completionColumn
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|CASE_INSENSITIVELY_SORTED_MODEL
condition|)
break|break;
name|parent
operator|=
operator|new
name|QTreeWidgetItem
argument_list|(
name|treeWidget
argument_list|)
expr_stmt|;
name|parent
operator|->
name|setText
argument_list|(
name|completionColumn
argument_list|,
name|QLatin1String
argument_list|(
literal|"p3,c3p3"
argument_list|)
argument_list|)
expr_stmt|;
name|parent
operator|=
operator|new
name|QTreeWidgetItem
argument_list|(
name|treeWidget
argument_list|)
expr_stmt|;
name|parent
operator|->
name|setText
argument_list|(
name|completionColumn
argument_list|,
name|QLatin1String
argument_list|(
literal|"p2,c4p2"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DIRECTORY_MODEL
case|:
name|completer
operator|->
name|setCsvCompletion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|completer
operator|->
name|setModel
argument_list|(
operator|new
name|QDirModel
argument_list|(
name|completer
argument_list|)
argument_list|)
expr_stmt|;
name|completer
operator|->
name|setCompletionColumn
argument_list|(
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|FILESYSTEM_MODEL
case|:
name|completer
operator|->
name|setCsvCompletion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|{
name|QFileSystemModel
modifier|*
name|m
init|=
operator|new
name|QFileSystemModel
argument_list|(
name|completer
argument_list|)
decl_stmt|;
name|m
operator|->
name|setRootPath
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|completer
operator|->
name|setModel
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
name|completer
operator|->
name|setCompletionColumn
argument_list|(
literal|0
argument_list|)
expr_stmt|;
break|break;
default|default:
name|qDebug
argument_list|()
operator|<<
literal|"Invalid type"
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|filter
name|void
name|tst_QCompleter
operator|::
name|filter
parameter_list|(
name|bool
name|assync
parameter_list|)
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|filterText
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|completion
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|completionText
argument_list|)
expr_stmt|;
if|if
condition|(
name|filterText
operator|.
name|compare
argument_list|(
literal|"FILTERING_OFF"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|)
block|{
name|completer
operator|->
name|setCompletionMode
argument_list|(
name|QCompleter
operator|::
name|UnfilteredPopupCompletion
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|times
init|=
literal|0
decl_stmt|;
name|retry
label|:
name|completer
operator|->
name|setCompletionPrefix
argument_list|(
name|filterText
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|step
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|row
init|=
name|completer
operator|->
name|currentRow
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|step
index|[
name|i
index|]
operator|.
name|toUpper
argument_list|()
operator|.
name|toLatin1
argument_list|()
condition|)
block|{
case|case
literal|'P'
case|:
operator|--
name|row
expr_stmt|;
break|break;
case|case
literal|'N'
case|:
operator|++
name|row
expr_stmt|;
break|break;
case|case
literal|'L'
case|:
name|row
operator|=
name|completer
operator|->
name|completionCount
argument_list|()
operator|-
literal|1
expr_stmt|;
break|break;
case|case
literal|'F'
case|:
name|row
operator|=
literal|0
expr_stmt|;
break|break;
default|default:
name|QFAIL
argument_list|(
name|qPrintable
argument_list|(
name|QString
argument_list|(
literal|"Problem with 'step' value in test data: %1 (only P, N, L and F are allowed)."
argument_list|)
operator|.
name|arg
argument_list|(
name|step
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|completer
operator|->
name|setCurrentRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|int
name|r
init|=
name|QString
operator|::
name|compare
argument_list|(
name|completer
operator|->
name|currentCompletion
argument_list|()
argument_list|,
name|completionText
argument_list|,
name|completer
operator|->
name|caseSensitivity
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|assync
operator|&&
name|r
operator|&&
name|times
operator|<
literal|10
condition|)
block|{
name|times
operator|++
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|50
operator|*
name|times
argument_list|)
expr_stmt|;
goto|goto
name|retry
goto|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|r
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QCompleter
operator|::
name|getSetCheck
parameter_list|()
block|{
name|QStandardItemModel
name|model
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|QCompleter
name|completer
argument_list|(
operator|&
name|model
argument_list|)
decl_stmt|;
comment|// QString QCompleter::completionPrefix()
comment|// void QCompleter::setCompletionPrefix(QString)
name|completer
operator|.
name|setCompletionPrefix
argument_list|(
name|QString
argument_list|(
literal|"te"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completer
operator|.
name|completionPrefix
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"te"
argument_list|)
argument_list|)
expr_stmt|;
name|completer
operator|.
name|setCompletionPrefix
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completer
operator|.
name|completionPrefix
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
comment|// ModelSorting QCompleter::modelSorting()
comment|// void QCompleter::setModelSorting(ModelSorting)
name|completer
operator|.
name|setModelSorting
argument_list|(
name|QCompleter
operator|::
name|CaseSensitivelySortedModel
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completer
operator|.
name|modelSorting
argument_list|()
argument_list|,
name|QCompleter
operator|::
name|CaseSensitivelySortedModel
argument_list|)
expr_stmt|;
name|completer
operator|.
name|setModelSorting
argument_list|(
name|QCompleter
operator|::
name|CaseInsensitivelySortedModel
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completer
operator|.
name|modelSorting
argument_list|()
argument_list|,
name|QCompleter
operator|::
name|CaseInsensitivelySortedModel
argument_list|)
expr_stmt|;
name|completer
operator|.
name|setModelSorting
argument_list|(
name|QCompleter
operator|::
name|UnsortedModel
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completer
operator|.
name|modelSorting
argument_list|()
argument_list|,
name|QCompleter
operator|::
name|UnsortedModel
argument_list|)
expr_stmt|;
comment|// CompletionMode QCompleter::completionMode()
comment|// void QCompleter::setCompletionMode(CompletionMode)
name|QCOMPARE
argument_list|(
name|completer
operator|.
name|completionMode
argument_list|()
argument_list|,
name|QCompleter
operator|::
name|PopupCompletion
argument_list|)
expr_stmt|;
comment|// default value
name|completer
operator|.
name|setCompletionMode
argument_list|(
name|QCompleter
operator|::
name|UnfilteredPopupCompletion
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completer
operator|.
name|completionMode
argument_list|()
argument_list|,
name|QCompleter
operator|::
name|UnfilteredPopupCompletion
argument_list|)
expr_stmt|;
name|completer
operator|.
name|setCompletionMode
argument_list|(
name|QCompleter
operator|::
name|InlineCompletion
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completer
operator|.
name|completionMode
argument_list|()
argument_list|,
name|QCompleter
operator|::
name|InlineCompletion
argument_list|)
expr_stmt|;
comment|// int QCompleter::completionColumn()
comment|// void QCompleter::setCompletionColumn(int)
name|completer
operator|.
name|setCompletionColumn
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completer
operator|.
name|completionColumn
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|completer
operator|.
name|setCompletionColumn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completer
operator|.
name|completionColumn
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// int QCompleter::completionRole()
comment|// void QCompleter::setCompletionRole(int)
name|QCOMPARE
argument_list|(
name|completer
operator|.
name|completionRole
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|EditRole
argument_list|)
argument_list|)
expr_stmt|;
comment|// default value
name|completer
operator|.
name|setCompletionRole
argument_list|(
name|Qt
operator|::
name|DisplayRole
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completer
operator|.
name|completionRole
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|DisplayRole
argument_list|)
argument_list|)
expr_stmt|;
comment|// int QCompleter::maxVisibleItems()
comment|// void QCompleter::setMaxVisibleItems(int)
name|QCOMPARE
argument_list|(
name|completer
operator|.
name|maxVisibleItems
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
comment|// default value
name|completer
operator|.
name|setMaxVisibleItems
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completer
operator|.
name|maxVisibleItems
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QCompleter::setMaxVisibleItems: "
literal|"Invalid max visible items (-2147483648) must be>= 0"
argument_list|)
expr_stmt|;
name|completer
operator|.
name|setMaxVisibleItems
argument_list|(
name|INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completer
operator|.
name|maxVisibleItems
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Cannot be set to something negative => old value
comment|// Qt::CaseSensitivity QCompleter::caseSensitivity()
comment|// void QCompleter::setCaseSensitivity(Qt::CaseSensitivity)
name|QCOMPARE
argument_list|(
name|completer
operator|.
name|caseSensitivity
argument_list|()
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
expr_stmt|;
comment|// default value
name|completer
operator|.
name|setCaseSensitivity
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completer
operator|.
name|caseSensitivity
argument_list|()
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
comment|// bool QCompleter::wrapAround()
comment|// void QCompleter::setWrapAround(bool)
name|QCOMPARE
argument_list|(
name|completer
operator|.
name|wrapAround
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// default value
name|completer
operator|.
name|setWrapAround
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completer
operator|.
name|wrapAround
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|csMatchingOnCsSortedModel_data
name|void
name|tst_QCompleter
operator|::
name|csMatchingOnCsSortedModel_data
parameter_list|()
block|{
operator|delete
name|completer
expr_stmt|;
name|completer
operator|=
operator|new
name|CsvCompleter
expr_stmt|;
name|completer
operator|->
name|setModelSorting
argument_list|(
name|QCompleter
operator|::
name|CaseSensitivelySortedModel
argument_list|)
expr_stmt|;
name|completer
operator|->
name|setCaseSensitivity
argument_list|(
name|Qt
operator|::
name|CaseSensitive
argument_list|)
expr_stmt|;
name|setSourceModel
argument_list|(
name|CASE_SENSITIVELY_SORTED_MODEL
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"filterText"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"step"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"completion"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"completionText"
argument_list|)
expr_stmt|;
DECL|macro|ROWNAME
define|#
directive|define
name|ROWNAME
parameter_list|(
name|name
parameter_list|)
value|(qPrintable(QString("%1 %2").arg(name).arg(i)))
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|1
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"FILTERING_OFF"
argument_list|)
operator|<<
literal|"FILTERING_OFF"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
comment|// Plain text filter
name|QTest
operator|::
name|newRow
argument_list|(
name|ROWNAME
argument_list|(
literal|"()"
argument_list|)
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|"P0"
operator|<<
literal|"P0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|ROWNAME
argument_list|(
literal|"()F"
argument_list|)
argument_list|)
operator|<<
literal|""
operator|<<
literal|"F"
operator|<<
literal|"P0"
operator|<<
literal|"P0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|ROWNAME
argument_list|(
literal|"()L"
argument_list|)
argument_list|)
operator|<<
literal|""
operator|<<
literal|"L"
operator|<<
literal|"p4"
operator|<<
literal|"p4"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|ROWNAME
argument_list|(
literal|"()N"
argument_list|)
argument_list|)
operator|<<
literal|""
operator|<<
literal|"N"
operator|<<
literal|"P1"
operator|<<
literal|"P1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|ROWNAME
argument_list|(
literal|"(P)"
argument_list|)
argument_list|)
operator|<<
literal|"P"
operator|<<
literal|""
operator|<<
literal|"P0"
operator|<<
literal|"P0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|ROWNAME
argument_list|(
literal|"(P)F"
argument_list|)
argument_list|)
operator|<<
literal|"P"
operator|<<
literal|""
operator|<<
literal|"P0"
operator|<<
literal|"P0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|ROWNAME
argument_list|(
literal|"(P)L"
argument_list|)
argument_list|)
operator|<<
literal|"P"
operator|<<
literal|"L"
operator|<<
literal|"P4"
operator|<<
literal|"P4"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|ROWNAME
argument_list|(
literal|"(p)"
argument_list|)
argument_list|)
operator|<<
literal|"p"
operator|<<
literal|""
operator|<<
literal|"p0"
operator|<<
literal|"p0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|ROWNAME
argument_list|(
literal|"(p)N"
argument_list|)
argument_list|)
operator|<<
literal|"p"
operator|<<
literal|"N"
operator|<<
literal|"p1"
operator|<<
literal|"p1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|ROWNAME
argument_list|(
literal|"(p)NN"
argument_list|)
argument_list|)
operator|<<
literal|"p"
operator|<<
literal|"NN"
operator|<<
literal|"p2"
operator|<<
literal|"p2"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|ROWNAME
argument_list|(
literal|"(p)NNN"
argument_list|)
argument_list|)
operator|<<
literal|"p"
operator|<<
literal|"NNN"
operator|<<
literal|"p3"
operator|<<
literal|"p3"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|ROWNAME
argument_list|(
literal|"(p)NNNN"
argument_list|)
argument_list|)
operator|<<
literal|"p"
operator|<<
literal|"NNNN"
operator|<<
literal|"p4"
operator|<<
literal|"p4"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|ROWNAME
argument_list|(
literal|"(p1)"
argument_list|)
argument_list|)
operator|<<
literal|"p1"
operator|<<
literal|""
operator|<<
literal|"p1"
operator|<<
literal|"p1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|ROWNAME
argument_list|(
literal|"(p11)"
argument_list|)
argument_list|)
operator|<<
literal|"p11"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
comment|// Tree filter
name|QTest
operator|::
name|newRow
argument_list|(
name|ROWNAME
argument_list|(
literal|"(P0,)"
argument_list|)
argument_list|)
operator|<<
literal|"P0,"
operator|<<
literal|""
operator|<<
literal|"c0P0"
operator|<<
literal|"P0,c0P0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|ROWNAME
argument_list|(
literal|"(P0,c)"
argument_list|)
argument_list|)
operator|<<
literal|"P0,c"
operator|<<
literal|""
operator|<<
literal|"c0P0"
operator|<<
literal|"P0,c0P0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|ROWNAME
argument_list|(
literal|"(P0,c1)"
argument_list|)
argument_list|)
operator|<<
literal|"P0,c1"
operator|<<
literal|""
operator|<<
literal|"c1P0"
operator|<<
literal|"P0,c1P0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|ROWNAME
argument_list|(
literal|"(P0,c3P0)"
argument_list|)
argument_list|)
operator|<<
literal|"P0,c3P0"
operator|<<
literal|""
operator|<<
literal|"c3P0"
operator|<<
literal|"P0,c3P0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|ROWNAME
argument_list|(
literal|"(P3,c)F"
argument_list|)
argument_list|)
operator|<<
literal|"P3,c"
operator|<<
literal|"F"
operator|<<
literal|"c0P3"
operator|<<
literal|"P3,c0P3"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|ROWNAME
argument_list|(
literal|"(P3,c)L"
argument_list|)
argument_list|)
operator|<<
literal|"P3,c"
operator|<<
literal|"L"
operator|<<
literal|"c4P3"
operator|<<
literal|"P3,c4P3"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|ROWNAME
argument_list|(
literal|"(P3,c)N"
argument_list|)
argument_list|)
operator|<<
literal|"P3,c"
operator|<<
literal|"N"
operator|<<
literal|"c1P3"
operator|<<
literal|"P3,c1P3"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|ROWNAME
argument_list|(
literal|"(P3,c)NN"
argument_list|)
argument_list|)
operator|<<
literal|"P3,c"
operator|<<
literal|"NN"
operator|<<
literal|"c2P3"
operator|<<
literal|"P3,c2P3"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|ROWNAME
argument_list|(
literal|"(P3,,c)"
argument_list|)
argument_list|)
operator|<<
literal|"P3,,c"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|ROWNAME
argument_list|(
literal|"(P3,c0P3,)"
argument_list|)
argument_list|)
operator|<<
literal|"P3,c0P3,"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|ROWNAME
argument_list|(
literal|"(P,)"
argument_list|)
argument_list|)
operator|<<
literal|"P,"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
block|}
DECL|macro|ROWNAME
undef|#
directive|undef
name|ROWNAME
block|}
end_function
begin_function
DECL|function|csMatchingOnCsSortedModel
name|void
name|tst_QCompleter
operator|::
name|csMatchingOnCsSortedModel
parameter_list|()
block|{
name|filter
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ciMatchingOnCiSortedModel_data
name|void
name|tst_QCompleter
operator|::
name|ciMatchingOnCiSortedModel_data
parameter_list|()
block|{
operator|delete
name|completer
expr_stmt|;
name|completer
operator|=
operator|new
name|CsvCompleter
expr_stmt|;
name|completer
operator|->
name|setModelSorting
argument_list|(
name|QCompleter
operator|::
name|CaseInsensitivelySortedModel
argument_list|)
expr_stmt|;
name|completer
operator|->
name|setCaseSensitivity
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|setSourceModel
argument_list|(
name|CASE_INSENSITIVELY_SORTED_MODEL
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"filterText"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"step"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"completion"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"completionText"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|1
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"FILTERING_OFF"
argument_list|)
operator|<<
literal|"FILTERING_OFF"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
comment|// Plain text filter
name|QTest
operator|::
name|newRow
argument_list|(
literal|"()"
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|"P0"
operator|<<
literal|"P0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"()F"
argument_list|)
operator|<<
literal|""
operator|<<
literal|"F"
operator|<<
literal|"P0"
operator|<<
literal|"P0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"()L"
argument_list|)
operator|<<
literal|""
operator|<<
literal|"L"
operator|<<
literal|"p4"
operator|<<
literal|"p4"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"()N"
argument_list|)
operator|<<
literal|""
operator|<<
literal|"N"
operator|<<
literal|"p0"
operator|<<
literal|"p0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(P)"
argument_list|)
operator|<<
literal|"P"
operator|<<
literal|""
operator|<<
literal|"P0"
operator|<<
literal|"P0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(P)F"
argument_list|)
operator|<<
literal|"P"
operator|<<
literal|""
operator|<<
literal|"P0"
operator|<<
literal|"P0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(P)L"
argument_list|)
operator|<<
literal|"P"
operator|<<
literal|"L"
operator|<<
literal|"p4"
operator|<<
literal|"p4"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p)"
argument_list|)
operator|<<
literal|"p"
operator|<<
literal|""
operator|<<
literal|"P0"
operator|<<
literal|"P0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p)N"
argument_list|)
operator|<<
literal|"p"
operator|<<
literal|"N"
operator|<<
literal|"p0"
operator|<<
literal|"p0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p)NN"
argument_list|)
operator|<<
literal|"p"
operator|<<
literal|"NN"
operator|<<
literal|"P1"
operator|<<
literal|"P1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p)NNN"
argument_list|)
operator|<<
literal|"p"
operator|<<
literal|"NNN"
operator|<<
literal|"p1"
operator|<<
literal|"p1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p1)"
argument_list|)
operator|<<
literal|"p1"
operator|<<
literal|""
operator|<<
literal|"P1"
operator|<<
literal|"P1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p1)N"
argument_list|)
operator|<<
literal|"p1"
operator|<<
literal|"N"
operator|<<
literal|"p1"
operator|<<
literal|"p1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p11)"
argument_list|)
operator|<<
literal|"p11"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
comment|//// Tree filter
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p0,)"
argument_list|)
operator|<<
literal|"p0,"
operator|<<
literal|""
operator|<<
literal|"c0P0"
operator|<<
literal|"P0,c0P0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p0,c)"
argument_list|)
operator|<<
literal|"p0,c"
operator|<<
literal|""
operator|<<
literal|"c0P0"
operator|<<
literal|"P0,c0P0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p0,c1)"
argument_list|)
operator|<<
literal|"p0,c1"
operator|<<
literal|""
operator|<<
literal|"c1P0"
operator|<<
literal|"P0,c1P0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p0,c3P0)"
argument_list|)
operator|<<
literal|"p0,c3P0"
operator|<<
literal|""
operator|<<
literal|"c3P0"
operator|<<
literal|"P0,c3P0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p3,c)F"
argument_list|)
operator|<<
literal|"p3,c"
operator|<<
literal|"F"
operator|<<
literal|"c0P3"
operator|<<
literal|"P3,c0P3"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p3,c)L"
argument_list|)
operator|<<
literal|"p3,c"
operator|<<
literal|"L"
operator|<<
literal|"c4P3"
operator|<<
literal|"P3,c4P3"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p3,c)N"
argument_list|)
operator|<<
literal|"p3,c"
operator|<<
literal|"N"
operator|<<
literal|"c1P3"
operator|<<
literal|"P3,c1P3"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p3,c)NN"
argument_list|)
operator|<<
literal|"p3,c"
operator|<<
literal|"NN"
operator|<<
literal|"c2P3"
operator|<<
literal|"P3,c2P3"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p3,,c)"
argument_list|)
operator|<<
literal|"p3,,c"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p3,c0P3,)"
argument_list|)
operator|<<
literal|"p3,c0P3,"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p,)"
argument_list|)
operator|<<
literal|"p,"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|ciMatchingOnCiSortedModel
name|void
name|tst_QCompleter
operator|::
name|ciMatchingOnCiSortedModel
parameter_list|()
block|{
name|filter
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ciMatchingOnCsSortedModel_data
name|void
name|tst_QCompleter
operator|::
name|ciMatchingOnCsSortedModel_data
parameter_list|()
block|{
operator|delete
name|completer
expr_stmt|;
name|completer
operator|=
operator|new
name|CsvCompleter
expr_stmt|;
name|completer
operator|->
name|setModelSorting
argument_list|(
name|QCompleter
operator|::
name|CaseSensitivelySortedModel
argument_list|)
expr_stmt|;
name|setSourceModel
argument_list|(
name|CASE_SENSITIVELY_SORTED_MODEL
argument_list|)
expr_stmt|;
name|completer
operator|->
name|setCaseSensitivity
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"filterText"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"step"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"completion"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"completionText"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|1
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"FILTERING_OFF"
argument_list|)
operator|<<
literal|"FILTERING_OFF"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
comment|// Plain text filter
name|QTest
operator|::
name|newRow
argument_list|(
literal|"()"
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|"P0"
operator|<<
literal|"P0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"()F"
argument_list|)
operator|<<
literal|""
operator|<<
literal|"F"
operator|<<
literal|"P0"
operator|<<
literal|"P0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"()L"
argument_list|)
operator|<<
literal|""
operator|<<
literal|"L"
operator|<<
literal|"p4"
operator|<<
literal|"p4"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(P)"
argument_list|)
operator|<<
literal|"P"
operator|<<
literal|""
operator|<<
literal|"P0"
operator|<<
literal|"P0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(P)F"
argument_list|)
operator|<<
literal|"P"
operator|<<
literal|""
operator|<<
literal|"P0"
operator|<<
literal|"P0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(P)L"
argument_list|)
operator|<<
literal|"P"
operator|<<
literal|"L"
operator|<<
literal|"p4"
operator|<<
literal|"p4"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p)"
argument_list|)
operator|<<
literal|"p"
operator|<<
literal|""
operator|<<
literal|"P0"
operator|<<
literal|"P0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p)N"
argument_list|)
operator|<<
literal|"p"
operator|<<
literal|"N"
operator|<<
literal|"P1"
operator|<<
literal|"P1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p)NN"
argument_list|)
operator|<<
literal|"p"
operator|<<
literal|"NN"
operator|<<
literal|"P2"
operator|<<
literal|"P2"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p)NNN"
argument_list|)
operator|<<
literal|"p"
operator|<<
literal|"NNN"
operator|<<
literal|"P3"
operator|<<
literal|"P3"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p1)"
argument_list|)
operator|<<
literal|"p1"
operator|<<
literal|""
operator|<<
literal|"P1"
operator|<<
literal|"P1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p1)N"
argument_list|)
operator|<<
literal|"p1"
operator|<<
literal|"N"
operator|<<
literal|"p1"
operator|<<
literal|"p1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p11)"
argument_list|)
operator|<<
literal|"p11"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
comment|// Tree filter
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p0,)"
argument_list|)
operator|<<
literal|"p0,"
operator|<<
literal|""
operator|<<
literal|"c0P0"
operator|<<
literal|"P0,c0P0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p0,c)"
argument_list|)
operator|<<
literal|"p0,c"
operator|<<
literal|""
operator|<<
literal|"c0P0"
operator|<<
literal|"P0,c0P0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p0,c1)"
argument_list|)
operator|<<
literal|"p0,c1"
operator|<<
literal|""
operator|<<
literal|"c1P0"
operator|<<
literal|"P0,c1P0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p0,c3P0)"
argument_list|)
operator|<<
literal|"p0,c3P0"
operator|<<
literal|""
operator|<<
literal|"c3P0"
operator|<<
literal|"P0,c3P0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p3,c)F"
argument_list|)
operator|<<
literal|"p3,c"
operator|<<
literal|"F"
operator|<<
literal|"c0P3"
operator|<<
literal|"P3,c0P3"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p3,c)L"
argument_list|)
operator|<<
literal|"p3,c"
operator|<<
literal|"L"
operator|<<
literal|"c4P3"
operator|<<
literal|"P3,c4P3"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p3,c)N"
argument_list|)
operator|<<
literal|"p3,c"
operator|<<
literal|"N"
operator|<<
literal|"c1P3"
operator|<<
literal|"P3,c1P3"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p3,c)NN"
argument_list|)
operator|<<
literal|"p3,c"
operator|<<
literal|"NN"
operator|<<
literal|"c2P3"
operator|<<
literal|"P3,c2P3"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p3,,c)"
argument_list|)
operator|<<
literal|"p3,,c"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p3,c0P3,)"
argument_list|)
operator|<<
literal|"p3,c0P3,"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p,)"
argument_list|)
operator|<<
literal|"p,"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|ciMatchingOnCsSortedModel
name|void
name|tst_QCompleter
operator|::
name|ciMatchingOnCsSortedModel
parameter_list|()
block|{
name|filter
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|csMatchingOnCiSortedModel_data
name|void
name|tst_QCompleter
operator|::
name|csMatchingOnCiSortedModel_data
parameter_list|()
block|{
operator|delete
name|completer
expr_stmt|;
name|completer
operator|=
operator|new
name|CsvCompleter
expr_stmt|;
name|completer
operator|->
name|setModelSorting
argument_list|(
name|QCompleter
operator|::
name|CaseInsensitivelySortedModel
argument_list|)
expr_stmt|;
name|setSourceModel
argument_list|(
name|CASE_INSENSITIVELY_SORTED_MODEL
argument_list|)
expr_stmt|;
name|completer
operator|->
name|setCaseSensitivity
argument_list|(
name|Qt
operator|::
name|CaseSensitive
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"filterText"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"step"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"completion"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"completionText"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|1
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"FILTERING_OFF"
argument_list|)
operator|<<
literal|"FILTERING_OFF"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
comment|// Plain text filter
name|QTest
operator|::
name|newRow
argument_list|(
literal|"()"
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|"P0"
operator|<<
literal|"P0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"()F"
argument_list|)
operator|<<
literal|""
operator|<<
literal|"F"
operator|<<
literal|"P0"
operator|<<
literal|"P0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"()L"
argument_list|)
operator|<<
literal|""
operator|<<
literal|"L"
operator|<<
literal|"p4"
operator|<<
literal|"p4"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"()N"
argument_list|)
operator|<<
literal|""
operator|<<
literal|"N"
operator|<<
literal|"p0"
operator|<<
literal|"p0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(P)"
argument_list|)
operator|<<
literal|"P"
operator|<<
literal|""
operator|<<
literal|"P0"
operator|<<
literal|"P0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(P)F"
argument_list|)
operator|<<
literal|"P"
operator|<<
literal|""
operator|<<
literal|"P0"
operator|<<
literal|"P0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(P)L"
argument_list|)
operator|<<
literal|"P"
operator|<<
literal|"L"
operator|<<
literal|"P4"
operator|<<
literal|"P4"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p)"
argument_list|)
operator|<<
literal|"p"
operator|<<
literal|""
operator|<<
literal|"p0"
operator|<<
literal|"p0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p)N"
argument_list|)
operator|<<
literal|"p"
operator|<<
literal|"N"
operator|<<
literal|"p1"
operator|<<
literal|"p1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p)NN"
argument_list|)
operator|<<
literal|"p"
operator|<<
literal|"NN"
operator|<<
literal|"p2"
operator|<<
literal|"p2"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p)NNN"
argument_list|)
operator|<<
literal|"p"
operator|<<
literal|"NNN"
operator|<<
literal|"p3"
operator|<<
literal|"p3"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p1)"
argument_list|)
operator|<<
literal|"p1"
operator|<<
literal|""
operator|<<
literal|"p1"
operator|<<
literal|"p1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p11)"
argument_list|)
operator|<<
literal|"p11"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
comment|//// Tree filter
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p0,)"
argument_list|)
operator|<<
literal|"p0,"
operator|<<
literal|""
operator|<<
literal|"c0p0"
operator|<<
literal|"p0,c0p0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p0,c)"
argument_list|)
operator|<<
literal|"p0,c"
operator|<<
literal|""
operator|<<
literal|"c0p0"
operator|<<
literal|"p0,c0p0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p0,c1)"
argument_list|)
operator|<<
literal|"p0,c1"
operator|<<
literal|""
operator|<<
literal|"c1p0"
operator|<<
literal|"p0,c1p0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p0,c3P0)"
argument_list|)
operator|<<
literal|"p0,c3p0"
operator|<<
literal|""
operator|<<
literal|"c3p0"
operator|<<
literal|"p0,c3p0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p3,c)F"
argument_list|)
operator|<<
literal|"p3,c"
operator|<<
literal|"F"
operator|<<
literal|"c0p3"
operator|<<
literal|"p3,c0p3"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p3,c)L"
argument_list|)
operator|<<
literal|"p3,c"
operator|<<
literal|"L"
operator|<<
literal|"c4p3"
operator|<<
literal|"p3,c4p3"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p3,c)N"
argument_list|)
operator|<<
literal|"p3,c"
operator|<<
literal|"N"
operator|<<
literal|"c1p3"
operator|<<
literal|"p3,c1p3"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p3,c)NN"
argument_list|)
operator|<<
literal|"p3,c"
operator|<<
literal|"NN"
operator|<<
literal|"c2p3"
operator|<<
literal|"p3,c2p3"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p3,,c)"
argument_list|)
operator|<<
literal|"p3,,c"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p3,c0P3,)"
argument_list|)
operator|<<
literal|"p3,c0P3,"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(p,)"
argument_list|)
operator|<<
literal|"p,"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"FILTERING_OFF"
argument_list|)
operator|<<
literal|"FILTERING_OFF"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|csMatchingOnCiSortedModel
name|void
name|tst_QCompleter
operator|::
name|csMatchingOnCiSortedModel
parameter_list|()
block|{
name|filter
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|directoryModel_data
name|void
name|tst_QCompleter
operator|::
name|directoryModel_data
parameter_list|()
block|{
operator|delete
name|completer
expr_stmt|;
name|completer
operator|=
operator|new
name|CsvCompleter
expr_stmt|;
name|completer
operator|->
name|setModelSorting
argument_list|(
name|QCompleter
operator|::
name|CaseSensitivelySortedModel
argument_list|)
expr_stmt|;
name|setSourceModel
argument_list|(
name|DIRECTORY_MODEL
argument_list|)
expr_stmt|;
name|completer
operator|->
name|setCaseSensitivity
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"filterText"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"step"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"completion"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"completionText"
argument_list|)
expr_stmt|;
comment|// NOTE: Add tests carefully, ensurely the paths exist on all systems
comment|// Output is the sourceText; currentCompletionText()
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|1
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"FILTERING_OFF"
argument_list|)
operator|<<
literal|"FILTERING_OFF"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"()"
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|"/"
operator|<<
literal|"/"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"()"
argument_list|)
operator|<<
literal|"\\Program"
operator|<<
literal|""
operator|<<
literal|"Program Files"
operator|<<
literal|"\\Program Files"
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"()"
argument_list|)
operator|<<
literal|"C"
operator|<<
literal|""
operator|<<
literal|"C:"
operator|<<
literal|"C:"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"()"
argument_list|)
operator|<<
literal|"C:\\Program"
operator|<<
literal|""
operator|<<
literal|"Program Files"
operator|<<
literal|"C:\\Program Files"
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"()"
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|"/"
operator|<<
literal|"/"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(/a)"
argument_list|)
operator|<<
literal|"/a"
operator|<<
literal|""
operator|<<
literal|"Applications"
operator|<<
literal|"/Applications"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(/d)"
argument_list|)
operator|<<
literal|"/d"
operator|<<
literal|""
operator|<<
literal|"Developer"
operator|<<
literal|"/Developer"
expr_stmt|;
else|#
directive|else
name|QTest
operator|::
name|newRow
argument_list|(
literal|"()"
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|"/"
operator|<<
literal|"/"
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_IRIX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_AIX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_HPUX
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(/h)"
argument_list|)
operator|<<
literal|"/h"
operator|<<
literal|""
operator|<<
literal|"home"
operator|<<
literal|"/home"
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(/et)"
argument_list|)
operator|<<
literal|"/et"
operator|<<
literal|""
operator|<<
literal|"etc"
operator|<<
literal|"/etc"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(/etc/passw)"
argument_list|)
operator|<<
literal|"/etc/passw"
operator|<<
literal|""
operator|<<
literal|"passwd"
operator|<<
literal|"/etc/passwd"
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function
begin_function
DECL|function|directoryModel
name|void
name|tst_QCompleter
operator|::
name|directoryModel
parameter_list|()
block|{
name|filter
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fileSystemModel_data
name|void
name|tst_QCompleter
operator|::
name|fileSystemModel_data
parameter_list|()
block|{
operator|delete
name|completer
expr_stmt|;
name|completer
operator|=
operator|new
name|CsvCompleter
expr_stmt|;
name|completer
operator|->
name|setModelSorting
argument_list|(
name|QCompleter
operator|::
name|CaseSensitivelySortedModel
argument_list|)
expr_stmt|;
name|setSourceModel
argument_list|(
name|FILESYSTEM_MODEL
argument_list|)
expr_stmt|;
name|completer
operator|->
name|setCaseSensitivity
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"filterText"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"step"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"completion"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"completionText"
argument_list|)
expr_stmt|;
comment|// NOTE: Add tests carefully, ensurely the paths exist on all systems
comment|// Output is the sourceText; currentCompletionText()
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|1
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"FILTERING_OFF"
argument_list|)
operator|<<
literal|"FILTERING_OFF"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"()"
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|"/"
operator|<<
literal|"/"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"()"
argument_list|)
operator|<<
literal|"\\Program"
operator|<<
literal|""
operator|<<
literal|"Program Files"
operator|<<
literal|"\\Program Files"
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"()"
argument_list|)
operator|<<
literal|"C"
operator|<<
literal|""
operator|<<
literal|"C:"
operator|<<
literal|"C:"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"()"
argument_list|)
operator|<<
literal|"C:\\Program"
operator|<<
literal|""
operator|<<
literal|"Program Files"
operator|<<
literal|"C:\\Program Files"
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"()"
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|"/"
operator|<<
literal|"/"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(/a)"
argument_list|)
operator|<<
literal|"/a"
operator|<<
literal|""
operator|<<
literal|"Applications"
operator|<<
literal|"/Applications"
expr_stmt|;
comment|//        QTest::newRow("(/d)")<< "/d"<< ""<< "Developer"<< "/Developer";
else|#
directive|else
name|QTest
operator|::
name|newRow
argument_list|(
literal|"()"
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|"/"
operator|<<
literal|"/"
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_IRIX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_AIX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_HPUX
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(/h)"
argument_list|)
operator|<<
literal|"/h"
operator|<<
literal|""
operator|<<
literal|"home"
operator|<<
literal|"/home"
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(/et)"
argument_list|)
operator|<<
literal|"/et"
operator|<<
literal|""
operator|<<
literal|"etc"
operator|<<
literal|"/etc"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(/etc/passw)"
argument_list|)
operator|<<
literal|"/etc/passw"
operator|<<
literal|""
operator|<<
literal|"passwd"
operator|<<
literal|"/etc/passwd"
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function
begin_function
DECL|function|fileSystemModel
name|void
name|tst_QCompleter
operator|::
name|fileSystemModel
parameter_list|()
block|{
comment|//QFileSystemModel is assync.
name|filter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|changingModel_data
name|void
name|tst_QCompleter
operator|::
name|changingModel_data
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|changingModel
name|void
name|tst_QCompleter
operator|::
name|changingModel
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
operator|delete
name|completer
expr_stmt|;
name|completer
operator|=
operator|new
name|CsvCompleter
expr_stmt|;
name|completer
operator|->
name|setModelSorting
argument_list|(
name|QCompleter
operator|::
name|CaseSensitivelySortedModel
argument_list|)
expr_stmt|;
name|completer
operator|->
name|setCaseSensitivity
argument_list|(
name|Qt
operator|::
name|CaseSensitive
argument_list|)
expr_stmt|;
name|setSourceModel
argument_list|(
name|CASE_SENSITIVELY_SORTED_MODEL
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|1
condition|)
block|{
name|completer
operator|->
name|setCompletionMode
argument_list|(
name|QCompleter
operator|::
name|UnfilteredPopupCompletion
argument_list|)
expr_stmt|;
block|}
name|completer
operator|->
name|setCompletionPrefix
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
name|completer
operator|->
name|setCurrentRow
argument_list|(
name|completer
operator|->
name|completionCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completer
operator|->
name|currentCompletion
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"p4"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test addition of data
name|QTreeWidgetItem
name|p5item
decl_stmt|;
name|p5item
operator|.
name|setText
argument_list|(
name|completionColumn
argument_list|,
literal|"p5"
argument_list|)
expr_stmt|;
name|treeWidget
operator|->
name|addTopLevelItem
argument_list|(
operator|&
name|p5item
argument_list|)
expr_stmt|;
name|completer
operator|->
name|setCompletionPrefix
argument_list|(
literal|"p5"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completer
operator|->
name|currentCompletion
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"p5"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test removal of data
name|int
name|p5index
init|=
name|treeWidget
operator|->
name|indexOfTopLevelItem
argument_list|(
operator|&
name|p5item
argument_list|)
decl_stmt|;
name|treeWidget
operator|->
name|takeTopLevelItem
argument_list|(
name|p5index
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completer
operator|->
name|currentCompletion
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test clear
name|treeWidget
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completer
operator|->
name|currentIndex
argument_list|()
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|testRowCount
name|void
name|tst_QCompleter
operator|::
name|testRowCount
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|filterText
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|hasChildren
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|completionCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|filterText
operator|.
name|compare
argument_list|(
literal|"FILTERING_OFF"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|)
block|{
name|completer
operator|->
name|setCompletionMode
argument_list|(
name|QCompleter
operator|::
name|UnfilteredPopupCompletion
argument_list|)
expr_stmt|;
return|return;
block|}
name|completer
operator|->
name|setCompletionPrefix
argument_list|(
name|filterText
argument_list|)
expr_stmt|;
specifier|const
name|QAbstractItemModel
modifier|*
name|completionModel
init|=
name|completer
operator|->
name|completionModel
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|completionModel
operator|->
name|rowCount
argument_list|()
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completionCount
argument_list|,
name|completionCount
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completionModel
operator|->
name|hasChildren
argument_list|()
argument_list|,
name|hasChildren
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completionModel
operator|->
name|columnCount
argument_list|()
argument_list|,
name|columnCount
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sortedEngineRowCount_data
name|void
name|tst_QCompleter
operator|::
name|sortedEngineRowCount_data
parameter_list|()
block|{
operator|delete
name|completer
expr_stmt|;
name|completer
operator|=
operator|new
name|CsvCompleter
expr_stmt|;
name|completer
operator|->
name|setModelSorting
argument_list|(
name|QCompleter
operator|::
name|CaseInsensitivelySortedModel
argument_list|)
expr_stmt|;
name|completer
operator|->
name|setCaseSensitivity
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|setSourceModel
argument_list|(
name|CASE_INSENSITIVELY_SORTED_MODEL
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"filterText"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"hasChildren"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"rowCount"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"completionCount"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"whatever"
argument_list|)
operator|<<
literal|"whatever"
operator|<<
literal|false
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"p"
argument_list|)
operator|<<
literal|"p"
operator|<<
literal|true
operator|<<
literal|10
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"p1"
argument_list|)
operator|<<
literal|"p1"
operator|<<
literal|true
operator|<<
literal|2
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"P1,"
argument_list|)
operator|<<
literal|"P1,"
operator|<<
literal|true
operator|<<
literal|5
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"P1,c"
argument_list|)
operator|<<
literal|"P1,c"
operator|<<
literal|true
operator|<<
literal|5
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"P1,cc"
argument_list|)
operator|<<
literal|"P1,cc"
operator|<<
literal|false
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"FILTERING_OFF"
argument_list|)
operator|<<
literal|"FILTERING_OFF"
operator|<<
literal|false
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"whatever(filter off)"
argument_list|)
operator|<<
literal|"whatever"
operator|<<
literal|true
operator|<<
literal|10
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"p1(filter off)"
argument_list|)
operator|<<
literal|"p1"
operator|<<
literal|true
operator|<<
literal|10
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"p1,(filter off)"
argument_list|)
operator|<<
literal|"p1,"
operator|<<
literal|true
operator|<<
literal|5
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"p1,c(filter off)"
argument_list|)
operator|<<
literal|"p1,c"
operator|<<
literal|true
operator|<<
literal|5
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"P1,cc(filter off)"
argument_list|)
operator|<<
literal|"P1,cc"
operator|<<
literal|true
operator|<<
literal|5
operator|<<
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sortedEngineRowCount
name|void
name|tst_QCompleter
operator|::
name|sortedEngineRowCount
parameter_list|()
block|{
name|testRowCount
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unsortedEngineRowCount_data
name|void
name|tst_QCompleter
operator|::
name|unsortedEngineRowCount_data
parameter_list|()
block|{
operator|delete
name|completer
expr_stmt|;
name|completer
operator|=
operator|new
name|CsvCompleter
expr_stmt|;
name|completer
operator|->
name|setModelSorting
argument_list|(
name|QCompleter
operator|::
name|CaseInsensitivelySortedModel
argument_list|)
expr_stmt|;
name|completer
operator|->
name|setCaseSensitivity
argument_list|(
name|Qt
operator|::
name|CaseSensitive
argument_list|)
expr_stmt|;
name|setSourceModel
argument_list|(
name|CASE_INSENSITIVELY_SORTED_MODEL
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"filterText"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"hasChildren"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"rowCount"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"completionCount"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"whatever"
argument_list|)
operator|<<
literal|"whatever"
operator|<<
literal|false
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"p"
argument_list|)
operator|<<
literal|"p"
operator|<<
literal|true
operator|<<
literal|5
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"p1"
argument_list|)
operator|<<
literal|"p1"
operator|<<
literal|true
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"P1,"
argument_list|)
operator|<<
literal|"P1,"
operator|<<
literal|true
operator|<<
literal|5
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"P1,c"
argument_list|)
operator|<<
literal|"P1,c"
operator|<<
literal|true
operator|<<
literal|5
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"P1,cc"
argument_list|)
operator|<<
literal|"P1,cc"
operator|<<
literal|false
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"FILTERING_OFF"
argument_list|)
operator|<<
literal|"FILTERING_OFF"
operator|<<
literal|false
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"whatever(filter off)"
argument_list|)
operator|<<
literal|"whatever"
operator|<<
literal|true
operator|<<
literal|10
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"p1(filter off)"
argument_list|)
operator|<<
literal|"p1"
operator|<<
literal|true
operator|<<
literal|10
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"p1,(filter off)"
argument_list|)
operator|<<
literal|"p1,"
operator|<<
literal|true
operator|<<
literal|5
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"p1,c(filter off)"
argument_list|)
operator|<<
literal|"p1,c"
operator|<<
literal|true
operator|<<
literal|5
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"P1,cc(filter off)"
argument_list|)
operator|<<
literal|"P1,cc"
operator|<<
literal|true
operator|<<
literal|5
operator|<<
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unsortedEngineRowCount
name|void
name|tst_QCompleter
operator|::
name|unsortedEngineRowCount
parameter_list|()
block|{
name|testRowCount
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|currentRow
name|void
name|tst_QCompleter
operator|::
name|currentRow
parameter_list|()
block|{
operator|delete
name|completer
expr_stmt|;
name|completer
operator|=
operator|new
name|CsvCompleter
expr_stmt|;
name|completer
operator|->
name|setModelSorting
argument_list|(
name|QCompleter
operator|::
name|CaseInsensitivelySortedModel
argument_list|)
expr_stmt|;
name|completer
operator|->
name|setCaseSensitivity
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|setSourceModel
argument_list|(
name|CASE_INSENSITIVELY_SORTED_MODEL
argument_list|)
expr_stmt|;
comment|// blank text
name|completer
operator|->
name|setCompletionPrefix
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completer
operator|->
name|currentRow
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|completer
operator|->
name|setCurrentRow
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completer
operator|->
name|currentRow
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|completer
operator|->
name|setCurrentRow
argument_list|(
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|completer
operator|->
name|setCurrentRow
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|// some text
name|completer
operator|->
name|setCompletionPrefix
argument_list|(
literal|"p1"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completer
operator|->
name|currentRow
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|completer
operator|->
name|setCurrentRow
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completer
operator|->
name|currentRow
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|completer
operator|->
name|setCurrentRow
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completer
operator|->
name|currentRow
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// invalid text
name|completer
operator|->
name|setCompletionPrefix
argument_list|(
literal|"well"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completer
operator|->
name|currentRow
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sortedEngineMapFromSource
name|void
name|tst_QCompleter
operator|::
name|sortedEngineMapFromSource
parameter_list|()
block|{
operator|delete
name|completer
expr_stmt|;
name|completer
operator|=
operator|new
name|CsvCompleter
expr_stmt|;
name|completer
operator|->
name|setModelSorting
argument_list|(
name|QCompleter
operator|::
name|CaseInsensitivelySortedModel
argument_list|)
expr_stmt|;
name|completer
operator|->
name|setCaseSensitivity
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|setSourceModel
argument_list|(
name|CASE_INSENSITIVELY_SORTED_MODEL
argument_list|)
expr_stmt|;
name|QModelIndex
name|si1
decl_stmt|,
name|si2
decl_stmt|,
name|pi
decl_stmt|;
name|QAbstractItemModel
modifier|*
name|sourceModel
init|=
name|completer
operator|->
name|model
argument_list|()
decl_stmt|;
specifier|const
name|QAbstractProxyModel
modifier|*
name|completionModel
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QAbstractProxyModel
operator|*
argument_list|>
argument_list|(
name|completer
operator|->
name|completionModel
argument_list|()
argument_list|)
decl_stmt|;
comment|// Fitering ON
comment|// empty
name|si1
operator|=
name|sourceModel
operator|->
name|index
argument_list|(
literal|4
argument_list|,
name|completionColumn
argument_list|)
expr_stmt|;
comment|// "P2"
name|si2
operator|=
name|sourceModel
operator|->
name|index
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
name|si1
argument_list|)
expr_stmt|;
comment|// "P2,c0P2"
name|pi
operator|=
name|completionModel
operator|->
name|mapFromSource
argument_list|(
name|si1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completionModel
operator|->
name|data
argument_list|(
name|pi
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"P2"
argument_list|)
argument_list|)
expr_stmt|;
name|pi
operator|=
name|completionModel
operator|->
name|mapFromSource
argument_list|(
name|si2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pi
operator|.
name|isValid
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// some text
name|completer
operator|->
name|setCompletionPrefix
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
name|pi
operator|=
name|completionModel
operator|->
name|mapFromSource
argument_list|(
name|si1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completionModel
operator|->
name|data
argument_list|(
name|pi
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"P2"
argument_list|)
argument_list|)
expr_stmt|;
name|pi
operator|=
name|completionModel
operator|->
name|mapFromSource
argument_list|(
name|si2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pi
operator|.
name|isValid
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// more text
name|completer
operator|->
name|setCompletionPrefix
argument_list|(
literal|"p2"
argument_list|)
expr_stmt|;
name|pi
operator|=
name|completionModel
operator|->
name|mapFromSource
argument_list|(
name|si1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completionModel
operator|->
name|data
argument_list|(
name|pi
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"P2"
argument_list|)
argument_list|)
expr_stmt|;
name|pi
operator|=
name|completionModel
operator|->
name|mapFromSource
argument_list|(
name|si2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pi
operator|.
name|isValid
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// invalid text
name|completer
operator|->
name|setCompletionPrefix
argument_list|(
literal|"whatever"
argument_list|)
expr_stmt|;
name|pi
operator|=
name|completionModel
operator|->
name|mapFromSource
argument_list|(
name|si1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|pi
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// Fitering OFF
name|completer
operator|->
name|setCompletionMode
argument_list|(
name|QCompleter
operator|::
name|UnfilteredPopupCompletion
argument_list|)
expr_stmt|;
comment|// empty
name|si1
operator|=
name|sourceModel
operator|->
name|index
argument_list|(
literal|4
argument_list|,
name|completionColumn
argument_list|)
expr_stmt|;
comment|// "P2"
name|si2
operator|=
name|sourceModel
operator|->
name|index
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
name|si1
argument_list|)
expr_stmt|;
comment|// "P2,c0P2"
name|pi
operator|=
name|completionModel
operator|->
name|mapFromSource
argument_list|(
name|si1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completionModel
operator|->
name|data
argument_list|(
name|pi
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"P2"
argument_list|)
argument_list|)
expr_stmt|;
name|pi
operator|=
name|completionModel
operator|->
name|mapFromSource
argument_list|(
name|si2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pi
operator|.
name|isValid
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// some text
name|completer
operator|->
name|setCompletionPrefix
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
name|pi
operator|=
name|completionModel
operator|->
name|mapFromSource
argument_list|(
name|si1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completionModel
operator|->
name|data
argument_list|(
name|pi
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"P2"
argument_list|)
argument_list|)
expr_stmt|;
name|pi
operator|=
name|completionModel
operator|->
name|mapFromSource
argument_list|(
name|si2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pi
operator|.
name|isValid
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// more text
name|completer
operator|->
name|setCompletionPrefix
argument_list|(
literal|"p2"
argument_list|)
expr_stmt|;
name|pi
operator|=
name|completionModel
operator|->
name|mapFromSource
argument_list|(
name|si1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completionModel
operator|->
name|data
argument_list|(
name|pi
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"P2"
argument_list|)
argument_list|)
expr_stmt|;
name|pi
operator|=
name|completionModel
operator|->
name|mapFromSource
argument_list|(
name|si2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pi
operator|.
name|isValid
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// invalid text
name|completer
operator|->
name|setCompletionPrefix
argument_list|(
literal|"whatever"
argument_list|)
expr_stmt|;
name|pi
operator|=
name|completionModel
operator|->
name|mapFromSource
argument_list|(
name|si1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completionModel
operator|->
name|data
argument_list|(
name|pi
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"P2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unsortedEngineMapFromSource
name|void
name|tst_QCompleter
operator|::
name|unsortedEngineMapFromSource
parameter_list|()
block|{
operator|delete
name|completer
expr_stmt|;
name|completer
operator|=
operator|new
name|CsvCompleter
expr_stmt|;
name|completer
operator|->
name|setCaseSensitivity
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|setSourceModel
argument_list|(
name|HISTORY_MODEL
argument_list|)
expr_stmt|;
comment|// case insensitively sorted model
name|completer
operator|->
name|setModelSorting
argument_list|(
name|QCompleter
operator|::
name|UnsortedModel
argument_list|)
expr_stmt|;
name|QModelIndex
name|si
decl_stmt|,
name|si2
decl_stmt|,
name|si3
decl_stmt|,
name|pi
decl_stmt|;
name|QAbstractItemModel
modifier|*
name|sourceModel
init|=
name|completer
operator|->
name|model
argument_list|()
decl_stmt|;
specifier|const
name|QAbstractProxyModel
modifier|*
name|completionModel
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QAbstractProxyModel
operator|*
argument_list|>
argument_list|(
name|completer
operator|->
name|completionModel
argument_list|()
argument_list|)
decl_stmt|;
name|si
operator|=
name|sourceModel
operator|->
name|index
argument_list|(
literal|6
argument_list|,
name|completionColumn
argument_list|)
expr_stmt|;
comment|// "P3"
name|QCOMPARE
argument_list|(
name|si
operator|.
name|data
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"P3"
argument_list|)
argument_list|)
expr_stmt|;
name|si2
operator|=
name|sourceModel
operator|->
name|index
argument_list|(
literal|3
argument_list|,
name|completionColumn
argument_list|,
name|sourceModel
operator|->
name|index
argument_list|(
literal|0
argument_list|,
name|completionColumn
argument_list|)
argument_list|)
expr_stmt|;
comment|// "P0,c3P0"
name|QCOMPARE
argument_list|(
name|si2
operator|.
name|data
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"c3P0"
argument_list|)
argument_list|)
expr_stmt|;
name|si3
operator|=
name|sourceModel
operator|->
name|index
argument_list|(
literal|10
argument_list|,
name|completionColumn
argument_list|)
expr_stmt|;
comment|// "p3,c3p3" (history)
name|QCOMPARE
argument_list|(
name|si3
operator|.
name|data
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"p3,c3p3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// FILTERING ON
comment|// empty
name|pi
operator|=
name|completionModel
operator|->
name|mapFromSource
argument_list|(
name|si
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completionModel
operator|->
name|data
argument_list|(
name|pi
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"P3"
argument_list|)
argument_list|)
expr_stmt|;
name|pi
operator|=
name|completionModel
operator|->
name|mapFromSource
argument_list|(
name|si2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pi
operator|.
name|isValid
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|pi
operator|=
name|completionModel
operator|->
name|mapFromSource
argument_list|(
name|si3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completionModel
operator|->
name|data
argument_list|(
name|pi
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"p3,c3p3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// some text
name|completer
operator|->
name|setCompletionPrefix
argument_list|(
literal|"P"
argument_list|)
expr_stmt|;
name|pi
operator|=
name|completionModel
operator|->
name|mapFromSource
argument_list|(
name|si
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completionModel
operator|->
name|data
argument_list|(
name|pi
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"P3"
argument_list|)
argument_list|)
expr_stmt|;
name|pi
operator|=
name|completionModel
operator|->
name|mapFromSource
argument_list|(
name|si2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pi
operator|.
name|isValid
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|pi
operator|=
name|completionModel
operator|->
name|mapFromSource
argument_list|(
name|si3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completionModel
operator|->
name|data
argument_list|(
name|pi
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"p3,c3p3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// invalid text
name|completer
operator|->
name|setCompletionPrefix
argument_list|(
literal|"whatever"
argument_list|)
expr_stmt|;
name|pi
operator|=
name|completionModel
operator|->
name|mapFromSource
argument_list|(
name|si
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|pi
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|pi
operator|=
name|completionModel
operator|->
name|mapFromSource
argument_list|(
name|si2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|pi
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// tree matching
name|completer
operator|->
name|setCompletionPrefix
argument_list|(
literal|"P0,c"
argument_list|)
expr_stmt|;
name|pi
operator|=
name|completionModel
operator|->
name|mapFromSource
argument_list|(
name|si
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|pi
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|pi
operator|=
name|completionModel
operator|->
name|mapFromSource
argument_list|(
name|si2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completionModel
operator|->
name|data
argument_list|(
name|pi
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"c3P0"
argument_list|)
argument_list|)
expr_stmt|;
name|pi
operator|=
name|completionModel
operator|->
name|mapFromSource
argument_list|(
name|si3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pi
operator|.
name|isValid
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// more tree matching
name|completer
operator|->
name|setCompletionPrefix
argument_list|(
literal|"p3,"
argument_list|)
expr_stmt|;
name|pi
operator|=
name|completionModel
operator|->
name|mapFromSource
argument_list|(
name|si2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|pi
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|pi
operator|=
name|completionModel
operator|->
name|mapFromSource
argument_list|(
name|si3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completionModel
operator|->
name|data
argument_list|(
name|pi
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"p3,c3p3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// FILTERING OFF
comment|// empty
name|completer
operator|->
name|setCompletionPrefix
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|completer
operator|->
name|setCompletionMode
argument_list|(
name|QCompleter
operator|::
name|UnfilteredPopupCompletion
argument_list|)
expr_stmt|;
name|pi
operator|=
name|completionModel
operator|->
name|mapFromSource
argument_list|(
name|si
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completionModel
operator|->
name|data
argument_list|(
name|pi
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"P3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// some text
name|completer
operator|->
name|setCompletionPrefix
argument_list|(
literal|"P"
argument_list|)
expr_stmt|;
name|pi
operator|=
name|completionModel
operator|->
name|mapFromSource
argument_list|(
name|si
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completionModel
operator|->
name|data
argument_list|(
name|pi
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"P3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// more text
name|completer
operator|->
name|setCompletionPrefix
argument_list|(
literal|"P3"
argument_list|)
expr_stmt|;
name|pi
operator|=
name|completionModel
operator|->
name|mapFromSource
argument_list|(
name|si
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completionModel
operator|->
name|data
argument_list|(
name|pi
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"P3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// invalid text
name|completer
operator|->
name|setCompletionPrefix
argument_list|(
literal|"whatever"
argument_list|)
expr_stmt|;
name|pi
operator|=
name|completionModel
operator|->
name|mapFromSource
argument_list|(
name|si
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completionModel
operator|->
name|data
argument_list|(
name|pi
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"P3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|historySearch
name|void
name|tst_QCompleter
operator|::
name|historySearch
parameter_list|()
block|{
operator|delete
name|completer
expr_stmt|;
name|completer
operator|=
operator|new
name|CsvCompleter
expr_stmt|;
name|completer
operator|->
name|setModelSorting
argument_list|(
name|QCompleter
operator|::
name|CaseInsensitivelySortedModel
argument_list|)
expr_stmt|;
name|completer
operator|->
name|setCaseSensitivity
argument_list|(
name|Qt
operator|::
name|CaseSensitive
argument_list|)
expr_stmt|;
name|setSourceModel
argument_list|(
name|HISTORY_MODEL
argument_list|)
expr_stmt|;
specifier|const
name|QAbstractProxyModel
modifier|*
name|completionModel
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QAbstractProxyModel
operator|*
argument_list|>
argument_list|(
name|completer
operator|->
name|completionModel
argument_list|()
argument_list|)
decl_stmt|;
comment|// "p3,c3p3" and "p2,c4p2" are added in the tree root
comment|// FILTERING ON
comment|// empty
name|completer
operator|->
name|setCurrentRow
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completer
operator|->
name|currentCompletion
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"p3,c3p3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// more text
name|completer
operator|->
name|setCompletionPrefix
argument_list|(
literal|"p2"
argument_list|)
expr_stmt|;
name|completer
operator|->
name|setCurrentRow
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completer
operator|->
name|currentCompletion
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"p2,c4p2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// comma separated text
name|completer
operator|->
name|setCompletionPrefix
argument_list|(
literal|"p2,c4"
argument_list|)
expr_stmt|;
name|completer
operator|->
name|setCurrentRow
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completionModel
operator|->
name|rowCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completer
operator|->
name|currentCompletion
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"p2,c4p2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// invalid text
name|completer
operator|->
name|setCompletionPrefix
argument_list|(
literal|"whatever"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completer
operator|->
name|currentCompletion
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
comment|// FILTERING OFF
name|completer
operator|->
name|setCompletionPrefix
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|completer
operator|->
name|setCompletionMode
argument_list|(
name|QCompleter
operator|::
name|UnfilteredPopupCompletion
argument_list|)
expr_stmt|;
name|completer
operator|->
name|setCurrentRow
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completer
operator|->
name|currentCompletion
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"p3,c3p3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// more text
name|completer
operator|->
name|setCompletionPrefix
argument_list|(
literal|"p2"
argument_list|)
expr_stmt|;
name|completer
operator|->
name|setCurrentRow
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completer
operator|->
name|currentCompletion
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"p2,c4p2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// comma separated text
name|completer
operator|->
name|setCompletionPrefix
argument_list|(
literal|"p2,c4"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completionModel
operator|->
name|rowCount
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// invalid text
name|completer
operator|->
name|setCompletionPrefix
argument_list|(
literal|"whatever"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completer
operator|->
name|currentCompletion
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setters
name|void
name|tst_QCompleter
operator|::
name|setters
parameter_list|()
block|{
operator|delete
name|completer
expr_stmt|;
name|completer
operator|=
operator|new
name|CsvCompleter
expr_stmt|;
name|QVERIFY
argument_list|(
name|completer
operator|->
name|popup
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QPointer
argument_list|<
name|QDirModel
argument_list|>
name|dirModel
init|=
operator|new
name|QDirModel
argument_list|(
name|completer
argument_list|)
decl_stmt|;
name|QAbstractItemModel
modifier|*
name|oldModel
init|=
name|completer
operator|->
name|model
argument_list|()
decl_stmt|;
name|completer
operator|->
name|setModel
argument_list|(
name|dirModel
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|completer
operator|->
name|popup
argument_list|()
operator|->
name|model
argument_list|()
operator|!=
name|oldModel
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|completer
operator|->
name|popup
argument_list|()
operator|->
name|model
argument_list|()
operator|==
name|completer
operator|->
name|completionModel
argument_list|()
argument_list|)
expr_stmt|;
name|completer
operator|->
name|setPopup
argument_list|(
operator|new
name|QListView
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|completer
operator|->
name|popup
argument_list|()
operator|->
name|model
argument_list|()
operator|==
name|completer
operator|->
name|completionModel
argument_list|()
argument_list|)
expr_stmt|;
name|completer
operator|->
name|setModel
argument_list|(
operator|new
name|QStringListModel
argument_list|(
name|completer
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|dirModel
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// must have been deleted
name|completer
operator|->
name|setModel
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|completer
operator|->
name|setWidget
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|modelDeletion
name|void
name|tst_QCompleter
operator|::
name|modelDeletion
parameter_list|()
block|{
operator|delete
name|completer
expr_stmt|;
name|completer
operator|=
operator|new
name|CsvCompleter
expr_stmt|;
name|QStringList
name|list
decl_stmt|;
name|list
operator|<<
literal|"item1"
operator|<<
literal|"item2"
operator|<<
literal|"item3"
expr_stmt|;
name|QStringListModel
modifier|*
name|listModel
init|=
operator|new
name|QStringListModel
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|completer
operator|->
name|setCompletionPrefix
argument_list|(
literal|"i"
argument_list|)
expr_stmt|;
name|completer
operator|->
name|setModel
argument_list|(
name|listModel
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|completer
operator|->
name|completionCount
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QListView
modifier|*
name|view
init|=
operator|new
name|QListView
decl_stmt|;
name|view
operator|->
name|setModel
argument_list|(
name|completer
operator|->
name|completionModel
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|listModel
expr_stmt|;
name|view
operator|->
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
operator|delete
name|view
expr_stmt|;
name|QVERIFY
argument_list|(
name|completer
operator|->
name|completionCount
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|completer
operator|->
name|currentRow
argument_list|()
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multipleWidgets
name|void
name|tst_QCompleter
operator|::
name|multipleWidgets
parameter_list|()
block|{
name|QStringList
name|list
decl_stmt|;
name|list
operator|<<
literal|"item1"
operator|<<
literal|"item2"
operator|<<
literal|"item2"
expr_stmt|;
name|QCompleter
name|completer
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|completer
operator|.
name|setCompletionMode
argument_list|(
name|QCompleter
operator|::
name|InlineCompletion
argument_list|)
expr_stmt|;
name|QWidget
name|window
decl_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|window
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
operator|&
name|window
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|qApp
operator|->
name|activeWindow
argument_list|()
operator|==
operator|&
name|window
argument_list|)
expr_stmt|;
name|QFocusEvent
name|focusIn
argument_list|(
name|QEvent
operator|::
name|FocusIn
argument_list|)
decl_stmt|;
name|QFocusEvent
name|focusOut
argument_list|(
name|QEvent
operator|::
name|FocusOut
argument_list|)
decl_stmt|;
name|QComboBox
modifier|*
name|comboBox
init|=
operator|new
name|QComboBox
argument_list|(
operator|&
name|window
argument_list|)
decl_stmt|;
name|comboBox
operator|->
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|comboBox
operator|->
name|setCompleter
argument_list|(
operator|&
name|completer
argument_list|)
expr_stmt|;
name|comboBox
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|comboBox
operator|->
name|show
argument_list|()
expr_stmt|;
name|window
operator|.
name|activateWindow
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|window
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|qApp
operator|->
name|focusWidget
argument_list|()
operator|==
name|comboBox
argument_list|)
expr_stmt|;
name|comboBox
operator|->
name|lineEdit
argument_list|()
operator|->
name|setText
argument_list|(
literal|"it"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|comboBox
operator|->
name|currentText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"it"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should not complete with setText
name|QTest
operator|::
name|keyPress
argument_list|(
name|comboBox
argument_list|,
literal|'e'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|comboBox
operator|->
name|currentText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"item1"
argument_list|)
argument_list|)
expr_stmt|;
name|comboBox
operator|->
name|clearEditText
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|comboBox
operator|->
name|currentText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|// combo box text must not change!
name|QLineEdit
modifier|*
name|lineEdit
init|=
operator|new
name|QLineEdit
argument_list|(
operator|&
name|window
argument_list|)
decl_stmt|;
name|lineEdit
operator|->
name|setCompleter
argument_list|(
operator|&
name|completer
argument_list|)
expr_stmt|;
name|lineEdit
operator|->
name|show
argument_list|()
expr_stmt|;
name|lineEdit
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|qApp
operator|->
name|focusWidget
argument_list|()
operator|==
name|lineEdit
argument_list|)
expr_stmt|;
name|lineEdit
operator|->
name|setText
argument_list|(
literal|"it"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lineEdit
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"it"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should not completer with setText
name|QCOMPARE
argument_list|(
name|comboBox
operator|->
name|currentText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|// combo box text must not change!
name|QTest
operator|::
name|keyPress
argument_list|(
name|lineEdit
argument_list|,
literal|'e'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lineEdit
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"item1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|comboBox
operator|->
name|currentText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|// combo box text must not change!
block|}
end_function
begin_function
DECL|function|focusIn
name|void
name|tst_QCompleter
operator|::
name|focusIn
parameter_list|()
block|{
name|QStringList
name|list
decl_stmt|;
name|list
operator|<<
literal|"item1"
operator|<<
literal|"item2"
operator|<<
literal|"item2"
expr_stmt|;
name|QCompleter
name|completer
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|QWidget
name|window
decl_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|window
operator|.
name|activateWindow
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|window
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|qApp
operator|->
name|activeWindow
argument_list|()
argument_list|,
operator|&
name|window
argument_list|)
expr_stmt|;
name|QComboBox
modifier|*
name|comboBox
init|=
operator|new
name|QComboBox
argument_list|(
operator|&
name|window
argument_list|)
decl_stmt|;
name|comboBox
operator|->
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|comboBox
operator|->
name|setCompleter
argument_list|(
operator|&
name|completer
argument_list|)
expr_stmt|;
name|comboBox
operator|->
name|show
argument_list|()
expr_stmt|;
name|comboBox
operator|->
name|lineEdit
argument_list|()
operator|->
name|setText
argument_list|(
literal|"it"
argument_list|)
expr_stmt|;
name|QLineEdit
modifier|*
name|lineEdit
init|=
operator|new
name|QLineEdit
argument_list|(
operator|&
name|window
argument_list|)
decl_stmt|;
name|lineEdit
operator|->
name|setCompleter
argument_list|(
operator|&
name|completer
argument_list|)
expr_stmt|;
name|lineEdit
operator|->
name|setText
argument_list|(
literal|"it"
argument_list|)
expr_stmt|;
name|lineEdit
operator|->
name|show
argument_list|()
expr_stmt|;
name|QLineEdit
modifier|*
name|lineEdit2
init|=
operator|new
name|QLineEdit
argument_list|(
operator|&
name|window
argument_list|)
decl_stmt|;
comment|// has no completer!
name|lineEdit2
operator|->
name|show
argument_list|()
expr_stmt|;
name|comboBox
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|completer
operator|.
name|widget
argument_list|()
operator|==
name|comboBox
argument_list|)
expr_stmt|;
name|lineEdit
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|completer
operator|.
name|widget
argument_list|()
operator|==
name|lineEdit
argument_list|)
expr_stmt|;
name|comboBox
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|completer
operator|.
name|widget
argument_list|()
operator|==
name|comboBox
argument_list|)
expr_stmt|;
name|lineEdit2
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|completer
operator|.
name|widget
argument_list|()
operator|==
name|comboBox
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dynamicSortOrder
name|void
name|tst_QCompleter
operator|::
name|dynamicSortOrder
parameter_list|()
block|{
name|QStandardItemModel
name|model
decl_stmt|;
name|QCompleter
name|completer
argument_list|(
operator|&
name|model
argument_list|)
decl_stmt|;
name|completer
operator|.
name|setModelSorting
argument_list|(
name|QCompleter
operator|::
name|CaseSensitivelySortedModel
argument_list|)
expr_stmt|;
name|QStandardItem
modifier|*
name|root
init|=
name|model
operator|.
name|invisibleRootItem
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|root
operator|->
name|appendRow
argument_list|(
operator|new
name|QStandardItem
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|root
operator|->
name|appendRow
argument_list|(
operator|new
name|QStandardItem
argument_list|(
literal|"13"
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|->
name|sortChildren
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|AscendingOrder
argument_list|)
expr_stmt|;
name|completer
operator|.
name|setCompletionPrefix
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completer
operator|.
name|completionCount
argument_list|()
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|completer
operator|.
name|setCompletionPrefix
argument_list|(
literal|"13"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completer
operator|.
name|completionCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|root
operator|->
name|sortChildren
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|DescendingOrder
argument_list|)
expr_stmt|;
name|completer
operator|.
name|setCompletionPrefix
argument_list|(
literal|"13"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completer
operator|.
name|completionCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|completer
operator|.
name|setCompletionPrefix
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|completer
operator|.
name|completionCount
argument_list|()
argument_list|,
literal|12
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|disabledItems
name|void
name|tst_QCompleter
operator|::
name|disabledItems
parameter_list|()
block|{
name|QLineEdit
name|lineEdit
decl_stmt|;
name|QStandardItemModel
modifier|*
name|model
init|=
operator|new
name|QStandardItemModel
argument_list|(
operator|&
name|lineEdit
argument_list|)
decl_stmt|;
name|QStandardItem
modifier|*
name|suggestions
init|=
operator|new
name|QStandardItem
argument_list|(
literal|"suggestions"
argument_list|)
decl_stmt|;
name|suggestions
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|model
operator|->
name|appendRow
argument_list|(
name|suggestions
argument_list|)
expr_stmt|;
name|model
operator|->
name|appendRow
argument_list|(
operator|new
name|QStandardItem
argument_list|(
literal|"suggestions Enabled"
argument_list|)
argument_list|)
expr_stmt|;
name|QCompleter
modifier|*
name|completer
init|=
operator|new
name|QCompleter
argument_list|(
name|model
argument_list|,
operator|&
name|lineEdit
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spy
argument_list|(
name|completer
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|lineEdit
operator|.
name|setCompleter
argument_list|(
name|completer
argument_list|)
expr_stmt|;
name|lineEdit
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
operator|&
name|lineEdit
argument_list|,
name|Qt
operator|::
name|Key_S
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
operator|&
name|lineEdit
argument_list|,
name|Qt
operator|::
name|Key_U
argument_list|)
expr_stmt|;
name|QAbstractItemView
modifier|*
name|view
init|=
name|lineEdit
operator|.
name|completer
argument_list|()
operator|->
name|popup
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|view
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseClick
argument_list|(
name|view
operator|->
name|viewport
argument_list|()
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|view
operator|->
name|visualRect
argument_list|(
name|view
operator|->
name|model
argument_list|()
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|view
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseClick
argument_list|(
name|view
operator|->
name|viewport
argument_list|()
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|view
operator|->
name|visualRect
argument_list|(
name|view
operator|->
name|model
argument_list|()
operator|->
name|index
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|view
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task178797_activatedOnReturn
name|void
name|tst_QCompleter
operator|::
name|task178797_activatedOnReturn
parameter_list|()
block|{
name|QStringList
name|words
decl_stmt|;
name|words
operator|<<
literal|"foobar1"
operator|<<
literal|"foobar2"
expr_stmt|;
name|QLineEdit
modifier|*
name|ledit
init|=
operator|new
name|QLineEdit
decl_stmt|;
name|QCompleter
modifier|*
name|completer
init|=
operator|new
name|QCompleter
argument_list|(
name|words
argument_list|)
decl_stmt|;
name|ledit
operator|->
name|setCompleter
argument_list|(
name|completer
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
name|completer
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
specifier|const
name|QString
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ledit
operator|->
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|ledit
argument_list|,
name|Qt
operator|::
name|Key_F
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|qApp
operator|->
name|activePopupWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|qApp
operator|->
name|activePopupWidget
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|qApp
operator|->
name|activePopupWidget
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_Return
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|task189564_StringListModel
class|class
name|task189564_StringListModel
super|:
specifier|public
name|QStringListModel
block|{
DECL|member|omitString
specifier|const
name|QString
name|omitString
decl_stmt|;
DECL|function|flags
name|Qt
operator|::
name|ItemFlags
name|flags
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Qt
operator|::
name|ItemFlags
name|flags
init|=
name|Qt
operator|::
name|ItemIsEnabled
decl_stmt|;
if|if
condition|(
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
operator|!=
name|omitString
condition|)
name|flags
operator||=
name|Qt
operator|::
name|ItemIsSelectable
expr_stmt|;
return|return
name|flags
return|;
block|}
public|public:
DECL|function|task189564_StringListModel
name|task189564_StringListModel
parameter_list|(
specifier|const
name|QString
modifier|&
name|omitString
parameter_list|,
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QStringListModel
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|omitString
argument_list|(
name|omitString
argument_list|)
block|{     }
block|}
class|;
end_class
begin_function
DECL|function|task189564_omitNonSelectableItems
name|void
name|tst_QCompleter
operator|::
name|task189564_omitNonSelectableItems
parameter_list|()
block|{
specifier|const
name|QString
name|prefix
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
specifier|const
name|int
name|n
init|=
literal|5
decl_stmt|;
name|QStringList
name|strings
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
name|strings
operator|<<
name|QString
argument_list|(
literal|"%1%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|prefix
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|omitString
argument_list|(
name|strings
operator|.
name|at
argument_list|(
name|n
operator|/
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|task189564_StringListModel
name|model
argument_list|(
name|omitString
argument_list|)
decl_stmt|;
name|model
operator|.
name|setStringList
argument_list|(
name|strings
argument_list|)
expr_stmt|;
name|QCompleter
name|completer_
argument_list|(
operator|&
name|model
argument_list|)
decl_stmt|;
name|completer_
operator|.
name|setCompletionPrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|QAbstractItemModel
modifier|*
name|completionModel
init|=
name|completer_
operator|.
name|completionModel
argument_list|()
decl_stmt|;
name|QModelIndexList
name|matches1
init|=
name|completionModel
operator|->
name|match
argument_list|(
name|completionModel
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|,
name|prefix
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|matches1
operator|.
name|size
argument_list|()
argument_list|,
name|n
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QModelIndexList
name|matches2
init|=
name|completionModel
operator|->
name|match
argument_list|(
name|completionModel
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|,
name|omitString
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|matches2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|task246056_ComboBox
class|class
name|task246056_ComboBox
super|:
specifier|public
name|QComboBox
block|{
name|Q_OBJECT
public|public:
DECL|function|task246056_ComboBox
name|task246056_ComboBox
parameter_list|()
block|{
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setInsertPolicy
argument_list|(
name|NoInsert
argument_list|)
expr_stmt|;
if|if
condition|(
name|completer
argument_list|()
condition|)
block|{
name|completer
argument_list|()
operator|->
name|setCompletionMode
argument_list|(
name|QCompleter
operator|::
name|PopupCompletion
argument_list|)
expr_stmt|;
name|completer
argument_list|()
operator|->
name|setCompletionRole
argument_list|(
name|Qt
operator|::
name|DisplayRole
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|lineEdit
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|editingFinished
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|setCompletionPrefix
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
private|private
name|slots
private|:
DECL|function|setCompletionPrefix
name|void
name|setCompletionPrefix
parameter_list|()
block|{
name|completer
argument_list|()
operator|->
name|setCompletionPrefix
argument_list|(
name|lineEdit
argument_list|()
operator|->
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|task246056_setCompletionPrefix
name|void
name|tst_QCompleter
operator|::
name|task246056_setCompletionPrefix
parameter_list|()
block|{
name|task246056_ComboBox
modifier|*
name|comboBox
init|=
operator|new
name|task246056_ComboBox
decl_stmt|;
name|QVERIFY
argument_list|(
name|comboBox
operator|->
name|completer
argument_list|()
argument_list|)
expr_stmt|;
name|comboBox
operator|->
name|addItem
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|comboBox
operator|->
name|addItem
argument_list|(
literal|"a1"
argument_list|)
expr_stmt|;
name|comboBox
operator|->
name|addItem
argument_list|(
literal|"a2"
argument_list|)
expr_stmt|;
name|comboBox
operator|->
name|show
argument_list|()
expr_stmt|;
name|comboBox
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|comboBox
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|comboBox
operator|->
name|completer
argument_list|()
operator|->
name|popup
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|comboBox
operator|->
name|completer
argument_list|()
operator|->
name|popup
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|comboBox
operator|->
name|completer
argument_list|()
operator|->
name|popup
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
comment|// don't crash!
block|}
end_function
begin_class
DECL|class|task250064_TextEdit
class|class
name|task250064_TextEdit
super|:
specifier|public
name|QTextEdit
block|{
public|public:
DECL|member|completer
name|QCompleter
modifier|*
name|completer
decl_stmt|;
DECL|function|task250064_TextEdit
name|task250064_TextEdit
parameter_list|()
block|{
name|completer
operator|=
operator|new
name|QCompleter
expr_stmt|;
name|completer
operator|->
name|setWidget
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|keyPressEvent
name|void
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|e
parameter_list|)
block|{
name|completer
operator|->
name|popup
argument_list|()
expr_stmt|;
name|QTextEdit
operator|::
name|keyPressEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|task250064_Widget
class|class
name|task250064_Widget
super|:
specifier|public
name|QWidget
block|{
name|Q_OBJECT
public|public:
DECL|member|textEdit
name|task250064_TextEdit
modifier|*
name|textEdit
decl_stmt|;
DECL|function|task250064_Widget
name|task250064_Widget
parameter_list|(
name|task250064_TextEdit
modifier|*
name|textEdit
parameter_list|)
member_init_list|:
name|textEdit
argument_list|(
name|textEdit
argument_list|)
block|{
name|QTabWidget
modifier|*
name|tabWidget
init|=
operator|new
name|QTabWidget
decl_stmt|;
name|tabWidget
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|ClickFocus
argument_list|)
expr_stmt|;
name|tabWidget
operator|->
name|addTab
argument_list|(
name|textEdit
argument_list|,
literal|"untitled"
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|layout
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|tabWidget
argument_list|)
expr_stmt|;
name|textEdit
operator|->
name|setPlainText
argument_list|(
literal|"bla bla bla"
argument_list|)
expr_stmt|;
name|textEdit
operator|->
name|setFocus
argument_list|()
expr_stmt|;
block|}
DECL|function|setCompletionModel
name|void
name|setCompletionModel
parameter_list|()
block|{
name|textEdit
operator|->
name|completer
operator|->
name|setModel
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|task250064_lostFocus
name|void
name|tst_QCompleter
operator|::
name|task250064_lostFocus
parameter_list|()
block|{
name|task250064_TextEdit
modifier|*
name|textEdit
init|=
operator|new
name|task250064_TextEdit
decl_stmt|;
name|task250064_Widget
modifier|*
name|widget
init|=
operator|new
name|task250064_Widget
argument_list|(
name|textEdit
argument_list|)
decl_stmt|;
name|widget
operator|->
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|textEdit
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|FocusPolicy
name|origPolicy
init|=
name|textEdit
operator|->
name|focusPolicy
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|origPolicy
operator|!=
name|Qt
operator|::
name|NoFocus
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setCompletionModel
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|textEdit
operator|->
name|focusPolicy
argument_list|()
argument_list|,
name|origPolicy
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task253125_lineEditCompletion_data
name|void
name|tst_QCompleter
operator|::
name|task253125_lineEditCompletion_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"list"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"completionMode"
argument_list|)
expr_stmt|;
name|QStringList
name|list
init|=
name|QStringList
argument_list|()
operator|<<
literal|"alpha"
operator|<<
literal|"beta"
operator|<<
literal|"gamma"
operator|<<
literal|"delta"
operator|<<
literal|"epsilon"
operator|<<
literal|"zeta"
operator|<<
literal|"eta"
operator|<<
literal|"theta"
operator|<<
literal|"iota"
operator|<<
literal|"kappa"
operator|<<
literal|"lambda"
operator|<<
literal|"mu"
operator|<<
literal|"nu"
operator|<<
literal|"xi"
operator|<<
literal|"omicron"
operator|<<
literal|"pi"
operator|<<
literal|"rho"
operator|<<
literal|"sigma"
operator|<<
literal|"tau"
operator|<<
literal|"upsilon"
operator|<<
literal|"phi"
operator|<<
literal|"chi"
operator|<<
literal|"psi"
operator|<<
literal|"omega"
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Inline"
argument_list|)
operator|<<
name|list
operator|<<
operator|(
name|int
operator|)
name|QCompleter
operator|::
name|InlineCompletion
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Filtered"
argument_list|)
operator|<<
name|list
operator|<<
operator|(
name|int
operator|)
name|QCompleter
operator|::
name|PopupCompletion
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Unfiltered"
argument_list|)
operator|<<
name|list
operator|<<
operator|(
name|int
operator|)
name|QCompleter
operator|::
name|UnfilteredPopupCompletion
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task253125_lineEditCompletion
name|void
name|tst_QCompleter
operator|::
name|task253125_lineEditCompletion
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|completionMode
argument_list|)
expr_stmt|;
name|QStringListModel
modifier|*
name|model
init|=
operator|new
name|QStringListModel
decl_stmt|;
name|model
operator|->
name|setStringList
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|QCompleter
modifier|*
name|completer
init|=
operator|new
name|QCompleter
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|completer
operator|->
name|setModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|completer
operator|->
name|setCompletionMode
argument_list|(
operator|(
name|QCompleter
operator|::
name|CompletionMode
operator|)
name|completionMode
argument_list|)
expr_stmt|;
name|QLineEdit
name|edit
decl_stmt|;
name|edit
operator|.
name|setCompleter
argument_list|(
name|completer
argument_list|)
expr_stmt|;
name|edit
operator|.
name|show
argument_list|()
expr_stmt|;
name|edit
operator|.
name|setFocus
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|edit
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowActive
argument_list|(
operator|&
name|edit
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|edit
argument_list|,
literal|'i'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|edit
operator|.
name|completer
argument_list|()
operator|->
name|currentCompletion
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"iota"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|edit
operator|.
name|completer
argument_list|()
operator|->
name|popup
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|edit
operator|.
name|completer
argument_list|()
operator|->
name|popup
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|edit
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"iota"
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|completer
expr_stmt|;
operator|delete
name|model
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task247560_keyboardNavigation
name|void
name|tst_QCompleter
operator|::
name|task247560_keyboardNavigation
parameter_list|()
block|{
name|QStandardItemModel
name|model
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|5
condition|;
name|j
operator|++
control|)
block|{
name|model
operator|.
name|setItem
argument_list|(
name|i
argument_list|,
name|j
argument_list|,
operator|new
name|QStandardItem
argument_list|(
name|QString
argument_list|(
literal|"row %1 column %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|arg
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|QCompleter
name|completer
argument_list|(
operator|&
name|model
argument_list|)
decl_stmt|;
name|completer
operator|.
name|setCompletionColumn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QLineEdit
name|edit
decl_stmt|;
name|edit
operator|.
name|setCompleter
argument_list|(
operator|&
name|completer
argument_list|)
expr_stmt|;
name|edit
operator|.
name|show
argument_list|()
expr_stmt|;
name|edit
operator|.
name|setFocus
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|edit
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowActive
argument_list|(
operator|&
name|edit
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|edit
argument_list|,
literal|'r'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|edit
operator|.
name|completer
argument_list|()
operator|->
name|popup
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|edit
operator|.
name|completer
argument_list|()
operator|->
name|popup
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|edit
operator|.
name|completer
argument_list|()
operator|->
name|popup
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|edit
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"row 1 column 1"
argument_list|)
argument_list|)
expr_stmt|;
name|edit
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|edit
argument_list|,
literal|'r'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|edit
operator|.
name|completer
argument_list|()
operator|->
name|popup
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_Up
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|edit
operator|.
name|completer
argument_list|()
operator|->
name|popup
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_Up
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|edit
operator|.
name|completer
argument_list|()
operator|->
name|popup
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|edit
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"row 3 column 1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|QTBUG_14292_filesystem
name|void
name|tst_QCompleter
operator|::
name|QTBUG_14292_filesystem
parameter_list|()
block|{
name|FileSystem
name|fs
decl_stmt|;
name|QDir
name|tmpDir
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
decl_stmt|;
name|qsrand
argument_list|(
name|QTime
operator|::
name|currentTime
argument_list|()
operator|.
name|msec
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|d
init|=
literal|"tst_QCompleter_"
operator|+
name|QString
operator|::
name|number
argument_list|(
name|qrand
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fs
operator|.
name|createDirectory
argument_list|(
name|tmpDir
operator|.
name|filePath
argument_list|(
name|d
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpDir
operator|.
name|cd
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fs
operator|.
name|createDirectory
argument_list|(
name|tmpDir
operator|.
name|filePath
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fs
operator|.
name|createDirectory
argument_list|(
name|tmpDir
operator|.
name|filePath
argument_list|(
literal|"holla"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QLineEdit
name|edit
decl_stmt|;
name|QCompleter
name|comp
decl_stmt|;
name|QFileSystemModel
name|model
decl_stmt|;
name|model
operator|.
name|setRootPath
argument_list|(
name|tmpDir
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|edit
operator|.
name|setCompleter
argument_list|(
operator|&
name|comp
argument_list|)
expr_stmt|;
name|edit
operator|.
name|show
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|edit
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowActive
argument_list|(
operator|&
name|edit
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QApplication
operator|::
name|activeWindow
argument_list|()
argument_list|,
operator|&
name|edit
argument_list|)
expr_stmt|;
name|edit
operator|.
name|setFocus
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|edit
operator|.
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|comp
operator|.
name|popup
argument_list|()
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|edit
operator|.
name|setText
argument_list|(
name|tmpDir
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|edit
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|comp
operator|.
name|popup
argument_list|()
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|comp
operator|.
name|popup
argument_list|()
operator|->
name|model
argument_list|()
operator|->
name|rowCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|edit
argument_list|,
literal|'h'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|comp
operator|.
name|popup
argument_list|()
operator|->
name|model
argument_list|()
operator|->
name|rowCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|edit
argument_list|,
literal|'e'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|comp
operator|.
name|popup
argument_list|()
operator|->
name|model
argument_list|()
operator|->
name|rowCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|edit
argument_list|,
literal|'r'
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
operator|!
name|comp
operator|.
name|popup
argument_list|()
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fs
operator|.
name|createDirectory
argument_list|(
name|tmpDir
operator|.
name|filePath
argument_list|(
literal|"hero"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|comp
operator|.
name|popup
argument_list|()
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|comp
operator|.
name|popup
argument_list|()
operator|->
name|model
argument_list|()
operator|->
name|rowCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|comp
operator|.
name|popup
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_Escape
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
operator|!
name|comp
operator|.
name|popup
argument_list|()
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fs
operator|.
name|createDirectory
argument_list|(
name|tmpDir
operator|.
name|filePath
argument_list|(
literal|"nothingThere"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//there is no reason creating a file should open a popup, it did in Qt 4.7.0
name|QTest
operator|::
name|qWait
argument_list|(
literal|60
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|comp
operator|.
name|popup
argument_list|()
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|edit
argument_list|,
name|Qt
operator|::
name|Key_Backspace
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|comp
operator|.
name|popup
argument_list|()
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|comp
operator|.
name|popup
argument_list|()
operator|->
name|model
argument_list|()
operator|->
name|rowCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|edit
argument_list|,
literal|'m'
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
operator|!
name|comp
operator|.
name|popup
argument_list|()
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QWidget
name|w
decl_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|w
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
operator|&
name|w
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
operator|!
name|edit
operator|.
name|hasFocus
argument_list|()
operator|&&
operator|!
name|comp
operator|.
name|popup
argument_list|()
operator|->
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fs
operator|.
name|createDirectory
argument_list|(
name|tmpDir
operator|.
name|filePath
argument_list|(
literal|"hemo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//there is no reason creating a file should open a popup, it did in Qt 4.7.0
name|QTest
operator|::
name|qWait
argument_list|(
literal|60
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|comp
operator|.
name|popup
argument_list|()
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QCompleter
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qcompleter.moc"
end_include
end_unit
