begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the $MODULE$ of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtGui>
end_include
begin_include
include|#
directive|include
file|<QtWidgets>
end_include
begin_include
include|#
directive|include
file|<QtTest>
end_include
begin_comment
comment|// #include<QDebug>
end_comment
begin_class
DECL|class|tst_QScrollerWidget
class|class
name|tst_QScrollerWidget
super|:
specifier|public
name|QWidget
block|{
public|public:
DECL|function|tst_QScrollerWidget
name|tst_QScrollerWidget
parameter_list|()
member_init_list|:
name|QWidget
argument_list|()
block|{
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|function|reset
name|void
name|reset
parameter_list|()
block|{
name|receivedPrepare
operator|=
literal|false
expr_stmt|;
name|receivedScroll
operator|=
literal|false
expr_stmt|;
name|receivedFirst
operator|=
literal|false
expr_stmt|;
name|receivedLast
operator|=
literal|false
expr_stmt|;
name|receivedOvershoot
operator|=
literal|false
expr_stmt|;
block|}
DECL|function|event
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
switch|switch
condition|(
name|e
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|Gesture
case|:
name|e
operator|->
name|setAccepted
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// better reject the event or QGestureManager will make trouble
return|return
literal|false
return|;
case|case
name|QEvent
operator|::
name|ScrollPrepare
case|:
block|{
name|receivedPrepare
operator|=
literal|true
expr_stmt|;
name|QScrollPrepareEvent
modifier|*
name|se
init|=
cast|static_cast
argument_list|<
name|QScrollPrepareEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|se
operator|->
name|setViewportSize
argument_list|(
name|QSizeF
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|se
operator|->
name|setContentPosRange
argument_list|(
name|scrollArea
argument_list|)
expr_stmt|;
name|se
operator|->
name|setContentPos
argument_list|(
name|scrollPosition
argument_list|)
expr_stmt|;
name|se
operator|->
name|accept
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
case|case
name|QEvent
operator|::
name|Scroll
case|:
block|{
name|receivedScroll
operator|=
literal|true
expr_stmt|;
name|QScrollEvent
modifier|*
name|se
init|=
cast|static_cast
argument_list|<
name|QScrollEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
comment|// qDebug()<< "Scroll for"<<this<<"pos"<<se->scrollPos()<<"ov"<<se->overshoot()<<"first"<<se->isFirst()<<"last"<<se->isLast();
if|if
condition|(
name|se
operator|->
name|scrollState
argument_list|()
operator|==
name|QScrollEvent
operator|::
name|ScrollStarted
condition|)
name|receivedFirst
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|se
operator|->
name|scrollState
argument_list|()
operator|==
name|QScrollEvent
operator|::
name|ScrollFinished
condition|)
name|receivedLast
operator|=
literal|true
expr_stmt|;
name|currentPos
operator|=
name|se
operator|->
name|contentPos
argument_list|()
expr_stmt|;
name|overshoot
operator|=
name|se
operator|->
name|overshootDistance
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|qFuzzyCompare
argument_list|(
name|overshoot
operator|.
name|x
argument_list|()
operator|+
literal|1.0
argument_list|,
literal|1.0
argument_list|)
operator|||
operator|!
name|qFuzzyCompare
argument_list|(
name|overshoot
operator|.
name|y
argument_list|()
operator|+
literal|1.0
argument_list|,
literal|1.0
argument_list|)
condition|)
name|receivedOvershoot
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
default|default:
return|return
name|QObject
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
DECL|member|scrollArea
name|QRectF
name|scrollArea
decl_stmt|;
DECL|member|scrollPosition
name|QPointF
name|scrollPosition
decl_stmt|;
DECL|member|receivedPrepare
name|bool
name|receivedPrepare
decl_stmt|;
DECL|member|receivedScroll
name|bool
name|receivedScroll
decl_stmt|;
DECL|member|receivedFirst
name|bool
name|receivedFirst
decl_stmt|;
DECL|member|receivedLast
name|bool
name|receivedLast
decl_stmt|;
DECL|member|receivedOvershoot
name|bool
name|receivedOvershoot
decl_stmt|;
DECL|member|currentPos
name|QPointF
name|currentPos
decl_stmt|;
DECL|member|overshoot
name|QPointF
name|overshoot
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|tst_QScroller
class|class
name|tst_QScroller
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|tst_QScroller
name|tst_QScroller
parameter_list|()
block|{ }
DECL|function|~tst_QScroller
name|~
name|tst_QScroller
parameter_list|()
block|{ }
private|private:
name|void
name|kineticScroll
parameter_list|(
name|tst_QScrollerWidget
modifier|*
name|sw
parameter_list|,
name|QPointF
name|from
parameter_list|,
name|QPoint
name|touchStart
parameter_list|,
name|QPoint
name|touchUpdate
parameter_list|,
name|QPoint
name|touchEnd
parameter_list|)
function_decl|;
name|void
name|kineticScrollNoTest
parameter_list|(
name|tst_QScrollerWidget
modifier|*
name|sw
parameter_list|,
name|QPointF
name|from
parameter_list|,
name|QPoint
name|touchStart
parameter_list|,
name|QPoint
name|touchUpdate
parameter_list|,
name|QPoint
name|touchEnd
parameter_list|)
function_decl|;
private|private
name|slots
private|:
name|void
name|staticScrollers
parameter_list|()
function_decl|;
name|void
name|scrollerProperties
parameter_list|()
function_decl|;
name|void
name|scrollTo
parameter_list|()
function_decl|;
name|void
name|scroll
parameter_list|()
function_decl|;
name|void
name|overshoot
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_comment
comment|/*! \internal     Generates touchBegin, touchUpdate and touchEnd events to trigger scrolling.     Tests some in between states but does not wait until scrolling is finished. */
end_comment
begin_function
DECL|function|kineticScroll
name|void
name|tst_QScroller
operator|::
name|kineticScroll
parameter_list|(
name|tst_QScrollerWidget
modifier|*
name|sw
parameter_list|,
name|QPointF
name|from
parameter_list|,
name|QPoint
name|touchStart
parameter_list|,
name|QPoint
name|touchUpdate
parameter_list|,
name|QPoint
name|touchEnd
parameter_list|)
block|{
name|sw
operator|->
name|scrollPosition
operator|=
name|from
expr_stmt|;
name|sw
operator|->
name|currentPos
operator|=
name|from
expr_stmt|;
name|QScroller
modifier|*
name|s1
init|=
name|QScroller
operator|::
name|scroller
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s1
operator|->
name|state
argument_list|()
argument_list|,
name|QScroller
operator|::
name|Inactive
argument_list|)
expr_stmt|;
name|QScrollerProperties
name|sp1
init|=
name|QScroller
operator|::
name|scroller
argument_list|(
name|sw
argument_list|)
operator|->
name|scrollerProperties
argument_list|()
decl_stmt|;
name|int
name|fps
init|=
literal|60
decl_stmt|;
name|QTouchEvent
operator|::
name|TouchPoint
name|rawTouchPoint
decl_stmt|;
name|rawTouchPoint
operator|.
name|setId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// send the touch begin event
name|QTouchEvent
operator|::
name|TouchPoint
name|touchPoint
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|touchPoint
operator|.
name|setState
argument_list|(
name|Qt
operator|::
name|TouchPointPressed
argument_list|)
expr_stmt|;
name|touchPoint
operator|.
name|setPos
argument_list|(
name|touchStart
argument_list|)
expr_stmt|;
name|touchPoint
operator|.
name|setScenePos
argument_list|(
name|touchStart
argument_list|)
expr_stmt|;
name|touchPoint
operator|.
name|setScreenPos
argument_list|(
name|touchStart
argument_list|)
expr_stmt|;
name|QTouchEvent
name|touchEvent1
argument_list|(
name|QEvent
operator|::
name|TouchBegin
argument_list|,
name|QTouchEvent
operator|::
name|TouchScreen
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|,
name|Qt
operator|::
name|TouchPointPressed
argument_list|,
operator|(
name|QList
argument_list|<
name|QTouchEvent
operator|::
name|TouchPoint
argument_list|>
argument_list|()
operator|<<
name|touchPoint
operator|)
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|sw
argument_list|,
operator|&
name|touchEvent1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s1
operator|->
name|state
argument_list|()
argument_list|,
name|QScroller
operator|::
name|Pressed
argument_list|)
expr_stmt|;
comment|// send the touch update far enough to trigger a scroll
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
comment|// we need to wait a little or else the speed would be infinite. now we have around 500 pixel per second.
name|touchPoint
operator|.
name|setPos
argument_list|(
name|touchUpdate
argument_list|)
expr_stmt|;
name|touchPoint
operator|.
name|setScenePos
argument_list|(
name|touchUpdate
argument_list|)
expr_stmt|;
name|touchPoint
operator|.
name|setScreenPos
argument_list|(
name|touchUpdate
argument_list|)
expr_stmt|;
name|QTouchEvent
name|touchEvent2
argument_list|(
name|QEvent
operator|::
name|TouchUpdate
argument_list|,
name|QTouchEvent
operator|::
name|TouchScreen
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|,
name|Qt
operator|::
name|TouchPointMoved
argument_list|,
operator|(
name|QList
argument_list|<
name|QTouchEvent
operator|::
name|TouchPoint
argument_list|>
argument_list|()
operator|<<
name|touchPoint
operator|)
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|sw
argument_list|,
operator|&
name|touchEvent2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s1
operator|->
name|state
argument_list|()
argument_list|,
name|QScroller
operator|::
name|Dragging
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sw
operator|->
name|receivedPrepare
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|1000
operator|/
name|fps
operator|*
literal|2
argument_list|)
expr_stmt|;
comment|// wait until the first scroll move
name|QCOMPARE
argument_list|(
name|sw
operator|->
name|receivedFirst
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sw
operator|->
name|receivedScroll
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sw
operator|->
name|receivedOvershoot
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// note that the scrolling goes in a different direction than the mouse move
name|QPoint
name|calculatedPos
init|=
name|from
operator|.
name|toPoint
argument_list|()
operator|-
name|touchUpdate
operator|-
name|touchStart
decl_stmt|;
name|QVERIFY
argument_list|(
name|qAbs
argument_list|(
name|sw
operator|->
name|currentPos
operator|.
name|x
argument_list|()
operator|-
name|calculatedPos
operator|.
name|x
argument_list|()
argument_list|)
operator|<
literal|1.0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qAbs
argument_list|(
name|sw
operator|->
name|currentPos
operator|.
name|y
argument_list|()
operator|-
name|calculatedPos
operator|.
name|y
argument_list|()
argument_list|)
operator|<
literal|1.0
argument_list|)
expr_stmt|;
comment|// send the touch end
name|touchPoint
operator|.
name|setPos
argument_list|(
name|touchEnd
argument_list|)
expr_stmt|;
name|touchPoint
operator|.
name|setScenePos
argument_list|(
name|touchEnd
argument_list|)
expr_stmt|;
name|touchPoint
operator|.
name|setScreenPos
argument_list|(
name|touchEnd
argument_list|)
expr_stmt|;
name|QTouchEvent
name|touchEvent5
argument_list|(
name|QEvent
operator|::
name|TouchEnd
argument_list|,
name|QTouchEvent
operator|::
name|TouchScreen
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|,
name|Qt
operator|::
name|TouchPointReleased
argument_list|,
operator|(
name|QList
argument_list|<
name|QTouchEvent
operator|::
name|TouchPoint
argument_list|>
argument_list|()
operator|<<
name|touchPoint
operator|)
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|sw
argument_list|,
operator|&
name|touchEvent5
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \internal     Generates touchBegin, touchUpdate and touchEnd events to trigger scrolling.     This function does not have any in between tests, it does not expect the scroller to actually scroll. */
end_comment
begin_function
DECL|function|kineticScrollNoTest
name|void
name|tst_QScroller
operator|::
name|kineticScrollNoTest
parameter_list|(
name|tst_QScrollerWidget
modifier|*
name|sw
parameter_list|,
name|QPointF
name|from
parameter_list|,
name|QPoint
name|touchStart
parameter_list|,
name|QPoint
name|touchUpdate
parameter_list|,
name|QPoint
name|touchEnd
parameter_list|)
block|{
name|sw
operator|->
name|scrollPosition
operator|=
name|from
expr_stmt|;
name|sw
operator|->
name|currentPos
operator|=
name|from
expr_stmt|;
name|QScroller
modifier|*
name|s1
init|=
name|QScroller
operator|::
name|scroller
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s1
operator|->
name|state
argument_list|()
argument_list|,
name|QScroller
operator|::
name|Inactive
argument_list|)
expr_stmt|;
name|QScrollerProperties
name|sp1
init|=
name|s1
operator|->
name|scrollerProperties
argument_list|()
decl_stmt|;
name|int
name|fps
init|=
literal|60
decl_stmt|;
name|QTouchEvent
operator|::
name|TouchPoint
name|rawTouchPoint
decl_stmt|;
name|rawTouchPoint
operator|.
name|setId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// send the touch begin event
name|QTouchEvent
operator|::
name|TouchPoint
name|touchPoint
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|touchPoint
operator|.
name|setState
argument_list|(
name|Qt
operator|::
name|TouchPointPressed
argument_list|)
expr_stmt|;
name|touchPoint
operator|.
name|setPos
argument_list|(
name|touchStart
argument_list|)
expr_stmt|;
name|touchPoint
operator|.
name|setScenePos
argument_list|(
name|touchStart
argument_list|)
expr_stmt|;
name|touchPoint
operator|.
name|setScreenPos
argument_list|(
name|touchStart
argument_list|)
expr_stmt|;
name|QTouchEvent
name|touchEvent1
argument_list|(
name|QEvent
operator|::
name|TouchBegin
argument_list|,
name|QTouchEvent
operator|::
name|TouchScreen
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|,
name|Qt
operator|::
name|TouchPointPressed
argument_list|,
operator|(
name|QList
argument_list|<
name|QTouchEvent
operator|::
name|TouchPoint
argument_list|>
argument_list|()
operator|<<
name|touchPoint
operator|)
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|sw
argument_list|,
operator|&
name|touchEvent1
argument_list|)
expr_stmt|;
comment|// send the touch update far enough to trigger a scroll
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
comment|// we need to wait a little or else the speed would be infinite. now we have around 500 pixel per second.
name|touchPoint
operator|.
name|setPos
argument_list|(
name|touchUpdate
argument_list|)
expr_stmt|;
name|touchPoint
operator|.
name|setScenePos
argument_list|(
name|touchUpdate
argument_list|)
expr_stmt|;
name|touchPoint
operator|.
name|setScreenPos
argument_list|(
name|touchUpdate
argument_list|)
expr_stmt|;
name|QTouchEvent
name|touchEvent2
argument_list|(
name|QEvent
operator|::
name|TouchUpdate
argument_list|,
name|QTouchEvent
operator|::
name|TouchScreen
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|,
name|Qt
operator|::
name|TouchPointMoved
argument_list|,
operator|(
name|QList
argument_list|<
name|QTouchEvent
operator|::
name|TouchPoint
argument_list|>
argument_list|()
operator|<<
name|touchPoint
operator|)
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|sw
argument_list|,
operator|&
name|touchEvent2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|1000
operator|/
name|fps
operator|*
literal|2
argument_list|)
expr_stmt|;
comment|// wait until the first scroll move
comment|// send the touch end
name|touchPoint
operator|.
name|setPos
argument_list|(
name|touchEnd
argument_list|)
expr_stmt|;
name|touchPoint
operator|.
name|setScenePos
argument_list|(
name|touchEnd
argument_list|)
expr_stmt|;
name|touchPoint
operator|.
name|setScreenPos
argument_list|(
name|touchEnd
argument_list|)
expr_stmt|;
name|QTouchEvent
name|touchEvent5
argument_list|(
name|QEvent
operator|::
name|TouchEnd
argument_list|,
name|QTouchEvent
operator|::
name|TouchScreen
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|,
name|Qt
operator|::
name|TouchPointReleased
argument_list|,
operator|(
name|QList
argument_list|<
name|QTouchEvent
operator|::
name|TouchPoint
argument_list|>
argument_list|()
operator|<<
name|touchPoint
operator|)
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|sw
argument_list|,
operator|&
name|touchEvent5
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|staticScrollers
name|void
name|tst_QScroller
operator|::
name|staticScrollers
parameter_list|()
block|{
comment|// scrollers
block|{
name|QObject
modifier|*
name|o1
init|=
operator|new
name|QObject
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QObject
modifier|*
name|o2
init|=
operator|new
name|QObject
argument_list|(
name|this
argument_list|)
decl_stmt|;
comment|// get scroller for object
name|QScroller
modifier|*
name|s1
init|=
name|QScroller
operator|::
name|scroller
argument_list|(
name|o1
argument_list|)
decl_stmt|;
name|QScroller
modifier|*
name|s2
init|=
name|QScroller
operator|::
name|scroller
argument_list|(
name|o2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s1
operator|!=
name|s2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QScroller
operator|::
name|scroller
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|QObject
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QScroller
operator|::
name|scroller
argument_list|(
name|o1
argument_list|)
argument_list|,
name|s1
argument_list|)
expr_stmt|;
operator|delete
name|o1
expr_stmt|;
operator|delete
name|o2
expr_stmt|;
block|}
comment|// the same for properties
block|{
name|QObject
modifier|*
name|o1
init|=
operator|new
name|QObject
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QObject
modifier|*
name|o2
init|=
operator|new
name|QObject
argument_list|(
name|this
argument_list|)
decl_stmt|;
comment|// get scroller for object
name|QScrollerProperties
name|sp1
init|=
name|QScroller
operator|::
name|scroller
argument_list|(
name|o1
argument_list|)
operator|->
name|scrollerProperties
argument_list|()
decl_stmt|;
name|QScrollerProperties
name|sp2
init|=
name|QScroller
operator|::
name|scroller
argument_list|(
name|o2
argument_list|)
operator|->
name|scrollerProperties
argument_list|()
decl_stmt|;
comment|// default properties should be the same
name|QVERIFY
argument_list|(
name|sp1
operator|==
name|sp2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QScroller
operator|::
name|scroller
argument_list|(
name|o1
argument_list|)
operator|->
name|scrollerProperties
argument_list|()
argument_list|,
name|sp1
argument_list|)
expr_stmt|;
operator|delete
name|o1
expr_stmt|;
operator|delete
name|o2
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|scrollerProperties
name|void
name|tst_QScroller
operator|::
name|scrollerProperties
parameter_list|()
block|{
name|QObject
modifier|*
name|o1
init|=
operator|new
name|QObject
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QScrollerProperties
name|sp1
init|=
name|QScroller
operator|::
name|scroller
argument_list|(
name|o1
argument_list|)
operator|->
name|scrollerProperties
argument_list|()
decl_stmt|;
name|QScrollerProperties
operator|::
name|ScrollMetric
name|metrics
index|[]
init|=
block|{
name|QScrollerProperties
operator|::
name|MousePressEventDelay
block|,
comment|// qreal [s]
name|QScrollerProperties
operator|::
name|DragStartDistance
block|,
comment|// qreal [m]
name|QScrollerProperties
operator|::
name|DragVelocitySmoothingFactor
block|,
comment|// qreal [0..1/s]  (complex calculation involving time) v = v_new* DASF + v_old * (1-DASF)
name|QScrollerProperties
operator|::
name|AxisLockThreshold
block|,
comment|// qreal [0..1] atan(|min(dx,dy)|/|max(dx,dy)|)
name|QScrollerProperties
operator|::
name|DecelerationFactor
block|,
comment|// slope of the curve
name|QScrollerProperties
operator|::
name|MinimumVelocity
block|,
comment|// qreal [m/s]
name|QScrollerProperties
operator|::
name|MaximumVelocity
block|,
comment|// qreal [m/s]
name|QScrollerProperties
operator|::
name|MaximumClickThroughVelocity
block|,
comment|// qreal [m/s]
name|QScrollerProperties
operator|::
name|AcceleratingFlickMaximumTime
block|,
comment|// qreal [s]
name|QScrollerProperties
operator|::
name|AcceleratingFlickSpeedupFactor
block|,
comment|// qreal [1..]
name|QScrollerProperties
operator|::
name|SnapPositionRatio
block|,
comment|// qreal [0..1]
name|QScrollerProperties
operator|::
name|SnapTime
block|,
comment|// qreal [s]
name|QScrollerProperties
operator|::
name|OvershootDragResistanceFactor
block|,
comment|// qreal [0..1]
name|QScrollerProperties
operator|::
name|OvershootDragDistanceFactor
block|,
comment|// qreal [0..1]
name|QScrollerProperties
operator|::
name|OvershootScrollDistanceFactor
block|,
comment|// qreal [0..1]
name|QScrollerProperties
operator|::
name|OvershootScrollTime
block|,
comment|// qreal [s]
block|}
decl_stmt|;
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|metrics
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|metrics
index|[
literal|0
index|]
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|sp1
operator|.
name|setScrollMetric
argument_list|(
name|metrics
index|[
name|i
index|]
argument_list|,
literal|0.9
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sp1
operator|.
name|scrollMetric
argument_list|(
name|metrics
index|[
name|i
index|]
argument_list|)
operator|.
name|toDouble
argument_list|()
argument_list|,
literal|0.9
argument_list|)
expr_stmt|;
block|}
name|sp1
operator|.
name|setScrollMetric
argument_list|(
name|QScrollerProperties
operator|::
name|ScrollingCurve
argument_list|,
name|QEasingCurve
argument_list|(
name|QEasingCurve
operator|::
name|OutQuart
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sp1
operator|.
name|scrollMetric
argument_list|(
name|QScrollerProperties
operator|::
name|ScrollingCurve
argument_list|)
operator|.
name|toEasingCurve
argument_list|()
operator|.
name|type
argument_list|()
argument_list|,
name|QEasingCurve
operator|::
name|OutQuart
argument_list|)
expr_stmt|;
name|sp1
operator|.
name|setScrollMetric
argument_list|(
name|QScrollerProperties
operator|::
name|HorizontalOvershootPolicy
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QScrollerProperties
operator|::
name|OvershootAlwaysOff
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sp1
operator|.
name|scrollMetric
argument_list|(
name|QScrollerProperties
operator|::
name|HorizontalOvershootPolicy
argument_list|)
operator|.
name|value
argument_list|<
name|QScrollerProperties
operator|::
name|OvershootPolicy
argument_list|>
argument_list|()
argument_list|,
name|QScrollerProperties
operator|::
name|OvershootAlwaysOff
argument_list|)
expr_stmt|;
name|sp1
operator|.
name|setScrollMetric
argument_list|(
name|QScrollerProperties
operator|::
name|VerticalOvershootPolicy
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QScrollerProperties
operator|::
name|OvershootAlwaysOn
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sp1
operator|.
name|scrollMetric
argument_list|(
name|QScrollerProperties
operator|::
name|VerticalOvershootPolicy
argument_list|)
operator|.
name|value
argument_list|<
name|QScrollerProperties
operator|::
name|OvershootPolicy
argument_list|>
argument_list|()
argument_list|,
name|QScrollerProperties
operator|::
name|OvershootAlwaysOn
argument_list|)
expr_stmt|;
name|sp1
operator|.
name|setScrollMetric
argument_list|(
name|QScrollerProperties
operator|::
name|FrameRate
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QScrollerProperties
operator|::
name|Fps20
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sp1
operator|.
name|scrollMetric
argument_list|(
name|QScrollerProperties
operator|::
name|FrameRate
argument_list|)
operator|.
name|value
argument_list|<
name|QScrollerProperties
operator|::
name|FrameRates
argument_list|>
argument_list|()
argument_list|,
name|QScrollerProperties
operator|::
name|Fps20
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|scrollTo
name|void
name|tst_QScroller
operator|::
name|scrollTo
parameter_list|()
block|{
block|{
name|tst_QScrollerWidget
modifier|*
name|sw
init|=
operator|new
name|tst_QScrollerWidget
argument_list|()
decl_stmt|;
name|sw
operator|->
name|scrollArea
operator|=
name|QRectF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|sw
operator|->
name|scrollPosition
operator|=
name|QPointF
argument_list|(
literal|500
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|QScroller
modifier|*
name|s1
init|=
name|QScroller
operator|::
name|scroller
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s1
operator|->
name|state
argument_list|()
argument_list|,
name|QScroller
operator|::
name|Inactive
argument_list|)
expr_stmt|;
comment|// a normal scroll
name|s1
operator|->
name|scrollTo
argument_list|(
name|QPointF
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sw
operator|->
name|receivedPrepare
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sw
operator|->
name|receivedScroll
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sw
operator|->
name|receivedFirst
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sw
operator|->
name|receivedLast
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sw
operator|->
name|receivedOvershoot
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|sw
operator|->
name|currentPos
operator|.
name|x
argument_list|()
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|sw
operator|->
name|currentPos
operator|.
name|y
argument_list|()
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|sw
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|scroll
name|void
name|tst_QScroller
operator|::
name|scroll
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MACX
argument_list|)
operator|&&
operator|(
name|MAC_OS_X_VERSION_MAX_ALLOWED
operator|<
name|MAC_OS_X_VERSION_10_6
operator|)
name|QSKIP
argument_list|(
literal|"Mac OS X< 10.6 does not support QTouchEvents"
argument_list|)
expr_stmt|;
return|return;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_GESTURES
comment|// -- good case. normal scroll
name|tst_QScrollerWidget
modifier|*
name|sw
init|=
operator|new
name|tst_QScrollerWidget
argument_list|()
decl_stmt|;
name|sw
operator|->
name|scrollArea
operator|=
name|QRectF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|QScroller
operator|::
name|grabGesture
argument_list|(
name|sw
argument_list|,
name|QScroller
operator|::
name|TouchGesture
argument_list|)
expr_stmt|;
name|sw
operator|->
name|setGeometry
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
literal|400
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|QScroller
modifier|*
name|s1
init|=
name|QScroller
operator|::
name|scroller
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|kineticScroll
argument_list|(
name|sw
argument_list|,
name|QPointF
argument_list|(
literal|500
argument_list|,
literal|500
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
argument_list|)
expr_stmt|;
comment|// now we should be scrolling
name|QCOMPARE
argument_list|(
name|s1
operator|->
name|state
argument_list|()
argument_list|,
name|QScroller
operator|::
name|Scrolling
argument_list|)
expr_stmt|;
comment|// wait until finished, check that no further first scroll is send
name|sw
operator|->
name|receivedFirst
operator|=
literal|false
expr_stmt|;
name|sw
operator|->
name|receivedScroll
operator|=
literal|false
expr_stmt|;
while|while
condition|(
name|s1
operator|->
name|state
argument_list|()
operator|==
name|QScroller
operator|::
name|Scrolling
condition|)
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sw
operator|->
name|receivedFirst
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sw
operator|->
name|receivedScroll
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sw
operator|->
name|receivedLast
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sw
operator|->
name|currentPos
operator|.
name|x
argument_list|()
operator|<
literal|400
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sw
operator|->
name|currentPos
operator|.
name|y
argument_list|()
operator|<
literal|400
argument_list|)
expr_stmt|;
comment|// -- try to scroll when nothing to scroll
name|sw
operator|->
name|reset
argument_list|()
expr_stmt|;
name|sw
operator|->
name|scrollArea
operator|=
name|QRectF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|kineticScrollNoTest
argument_list|(
name|sw
argument_list|,
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|500
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|100
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|200
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|s1
operator|->
name|state
argument_list|()
operator|!=
name|QScroller
operator|::
name|Inactive
condition|)
name|QTest
operator|::
name|qWait
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sw
operator|->
name|currentPos
operator|.
name|x
argument_list|()
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sw
operator|->
name|currentPos
operator|.
name|y
argument_list|()
argument_list|,
literal|500.0
argument_list|)
expr_stmt|;
operator|delete
name|sw
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|overshoot
name|void
name|tst_QScroller
operator|::
name|overshoot
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MACX
argument_list|)
operator|&&
operator|(
name|MAC_OS_X_VERSION_MAX_ALLOWED
operator|<
name|MAC_OS_X_VERSION_10_6
operator|)
name|QSKIP
argument_list|(
literal|"Mac OS X< 10.6 does not support QTouchEvents"
argument_list|)
expr_stmt|;
return|return;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_GESTURES
name|tst_QScrollerWidget
modifier|*
name|sw
init|=
operator|new
name|tst_QScrollerWidget
argument_list|()
decl_stmt|;
name|sw
operator|->
name|scrollArea
operator|=
name|QRectF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|QScroller
operator|::
name|grabGesture
argument_list|(
name|sw
argument_list|,
name|QScroller
operator|::
name|TouchGesture
argument_list|)
expr_stmt|;
name|sw
operator|->
name|setGeometry
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
literal|400
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|QScroller
modifier|*
name|s1
init|=
name|QScroller
operator|::
name|scroller
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|QScrollerProperties
name|sp1
init|=
name|s1
operator|->
name|scrollerProperties
argument_list|()
decl_stmt|;
name|sp1
operator|.
name|setScrollMetric
argument_list|(
name|QScrollerProperties
operator|::
name|OvershootDragResistanceFactor
argument_list|,
literal|0.5
argument_list|)
expr_stmt|;
name|sp1
operator|.
name|setScrollMetric
argument_list|(
name|QScrollerProperties
operator|::
name|OvershootDragDistanceFactor
argument_list|,
literal|0.2
argument_list|)
expr_stmt|;
name|sp1
operator|.
name|setScrollMetric
argument_list|(
name|QScrollerProperties
operator|::
name|OvershootScrollDistanceFactor
argument_list|,
literal|0.2
argument_list|)
expr_stmt|;
comment|// -- try to scroll with overshoot (when scrollable good case)
name|sp1
operator|.
name|setScrollMetric
argument_list|(
name|QScrollerProperties
operator|::
name|HorizontalOvershootPolicy
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QScrollerProperties
operator|::
name|OvershootWhenScrollable
argument_list|)
argument_list|)
expr_stmt|;
name|s1
operator|->
name|setScrollerProperties
argument_list|(
name|sp1
argument_list|)
expr_stmt|;
name|kineticScrollNoTest
argument_list|(
name|sw
argument_list|,
name|QPointF
argument_list|(
literal|500
argument_list|,
literal|500
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|400
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|490
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|s1
operator|->
name|state
argument_list|()
operator|!=
name|QScroller
operator|::
name|Inactive
condition|)
name|QTest
operator|::
name|qWait
argument_list|(
literal|20
argument_list|)
expr_stmt|;
comment|//qDebug()<< "Overshoot fuzzy: "<<sw->currentPos;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|sw
operator|->
name|currentPos
operator|.
name|x
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|sw
operator|->
name|currentPos
operator|.
name|y
argument_list|()
argument_list|,
literal|500
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sw
operator|->
name|receivedOvershoot
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// -- try to scroll with overshoot (when scrollable bad case)
name|sw
operator|->
name|reset
argument_list|()
expr_stmt|;
name|sw
operator|->
name|scrollArea
operator|=
name|QRectF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|sp1
operator|.
name|setScrollMetric
argument_list|(
name|QScrollerProperties
operator|::
name|HorizontalOvershootPolicy
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QScrollerProperties
operator|::
name|OvershootWhenScrollable
argument_list|)
argument_list|)
expr_stmt|;
name|s1
operator|->
name|setScrollerProperties
argument_list|(
name|sp1
argument_list|)
expr_stmt|;
name|kineticScrollNoTest
argument_list|(
name|sw
argument_list|,
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|500
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|400
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|490
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|s1
operator|->
name|state
argument_list|()
operator|!=
name|QScroller
operator|::
name|Inactive
condition|)
name|QTest
operator|::
name|qWait
argument_list|(
literal|20
argument_list|)
expr_stmt|;
comment|//qDebug()<< "Overshoot fuzzy: "<<sw->currentPos;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|sw
operator|->
name|currentPos
operator|.
name|x
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|sw
operator|->
name|currentPos
operator|.
name|y
argument_list|()
argument_list|,
literal|500
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sw
operator|->
name|receivedOvershoot
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// -- try to scroll with overshoot (always on)
name|sw
operator|->
name|reset
argument_list|()
expr_stmt|;
name|sw
operator|->
name|scrollArea
operator|=
name|QRectF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|sp1
operator|.
name|setScrollMetric
argument_list|(
name|QScrollerProperties
operator|::
name|HorizontalOvershootPolicy
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QScrollerProperties
operator|::
name|OvershootAlwaysOn
argument_list|)
argument_list|)
expr_stmt|;
name|s1
operator|->
name|setScrollerProperties
argument_list|(
name|sp1
argument_list|)
expr_stmt|;
name|kineticScrollNoTest
argument_list|(
name|sw
argument_list|,
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|500
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|400
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|490
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|s1
operator|->
name|state
argument_list|()
operator|!=
name|QScroller
operator|::
name|Inactive
condition|)
name|QTest
operator|::
name|qWait
argument_list|(
literal|20
argument_list|)
expr_stmt|;
comment|//qDebug()<< "Overshoot fuzzy: "<<sw->currentPos;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|sw
operator|->
name|currentPos
operator|.
name|x
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|sw
operator|->
name|currentPos
operator|.
name|y
argument_list|()
argument_list|,
literal|500
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sw
operator|->
name|receivedOvershoot
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// -- try to scroll with overshoot (always off)
name|sw
operator|->
name|reset
argument_list|()
expr_stmt|;
name|sw
operator|->
name|scrollArea
operator|=
name|QRectF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|sp1
operator|.
name|setScrollMetric
argument_list|(
name|QScrollerProperties
operator|::
name|HorizontalOvershootPolicy
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QScrollerProperties
operator|::
name|OvershootAlwaysOff
argument_list|)
argument_list|)
expr_stmt|;
name|s1
operator|->
name|setScrollerProperties
argument_list|(
name|sp1
argument_list|)
expr_stmt|;
name|kineticScrollNoTest
argument_list|(
name|sw
argument_list|,
name|QPointF
argument_list|(
literal|500
argument_list|,
literal|500
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|400
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|490
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|s1
operator|->
name|state
argument_list|()
operator|!=
name|QScroller
operator|::
name|Inactive
condition|)
name|QTest
operator|::
name|qWait
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|sw
operator|->
name|currentPos
operator|.
name|x
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|sw
operator|->
name|currentPos
operator|.
name|y
argument_list|()
argument_list|,
literal|500
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sw
operator|->
name|receivedOvershoot
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// -- try to scroll with overshoot (always on but max overshoot = 0)
name|sp1
operator|.
name|setScrollMetric
argument_list|(
name|QScrollerProperties
operator|::
name|OvershootDragDistanceFactor
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|sp1
operator|.
name|setScrollMetric
argument_list|(
name|QScrollerProperties
operator|::
name|OvershootScrollDistanceFactor
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|sw
operator|->
name|reset
argument_list|()
expr_stmt|;
name|sw
operator|->
name|scrollArea
operator|=
name|QRectF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|sp1
operator|.
name|setScrollMetric
argument_list|(
name|QScrollerProperties
operator|::
name|HorizontalOvershootPolicy
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QScrollerProperties
operator|::
name|OvershootAlwaysOn
argument_list|)
argument_list|)
expr_stmt|;
name|s1
operator|->
name|setScrollerProperties
argument_list|(
name|sp1
argument_list|)
expr_stmt|;
name|kineticScrollNoTest
argument_list|(
name|sw
argument_list|,
name|QPointF
argument_list|(
literal|500
argument_list|,
literal|500
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|400
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|490
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|s1
operator|->
name|state
argument_list|()
operator|!=
name|QScroller
operator|::
name|Inactive
condition|)
name|QTest
operator|::
name|qWait
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|sw
operator|->
name|currentPos
operator|.
name|x
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qFuzzyCompare
argument_list|(
name|sw
operator|->
name|currentPos
operator|.
name|y
argument_list|()
argument_list|,
literal|500
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sw
operator|->
name|receivedOvershoot
argument_list|,
literal|false
argument_list|)
expr_stmt|;
operator|delete
name|sw
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QScroller
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qscroller.moc"
end_include
end_unit
