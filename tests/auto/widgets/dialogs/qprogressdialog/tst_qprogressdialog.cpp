begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qprogressbar.h>
end_include
begin_include
include|#
directive|include
file|<qprogressdialog.h>
end_include
begin_include
include|#
directive|include
file|<qpushbutton.h>
end_include
begin_include
include|#
directive|include
file|<qlabel.h>
end_include
begin_include
include|#
directive|include
file|<qpointer.h>
end_include
begin_include
include|#
directive|include
file|<qthread.h>
end_include
begin_include
include|#
directive|include
file|<qtranslator.h>
end_include
begin_class
DECL|class|tst_QProgressDialog
class|class
name|tst_QProgressDialog
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|Q_SLOTS
private|:
name|void
name|cleanup
parameter_list|()
function_decl|;
name|void
name|autoShow_data
parameter_list|()
function_decl|;
name|void
name|autoShow
parameter_list|()
function_decl|;
name|void
name|autoShowCtor
parameter_list|()
function_decl|;
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|task198202
parameter_list|()
function_decl|;
name|void
name|QTBUG_31046
parameter_list|()
function_decl|;
name|void
name|settingCustomWidgets
parameter_list|()
function_decl|;
name|void
name|i18n
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|cleanup
name|void
name|tst_QProgressDialog
operator|::
name|cleanup
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QApplication
operator|::
name|topLevelWindows
argument_list|()
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|autoShow_data
name|void
name|tst_QProgressDialog
operator|::
name|autoShow_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"min"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"max"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
comment|// initial setValue call
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"delay"
argument_list|)
expr_stmt|;
comment|// then we wait for this long, and setValue(min+1)
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"minDuration"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"expectedAutoShow"
argument_list|)
expr_stmt|;
comment|// Check that autoshow works even when not starting at 0
name|QTest
operator|::
name|newRow
argument_list|(
literal|"50_to_100_slow_shown"
argument_list|)
operator|<<
literal|50
operator|<<
literal|100
operator|<<
literal|50
operator|<<
literal|100
operator|<<
literal|100
operator|<<
literal|true
expr_stmt|;
comment|// 50*100ms = 5s
name|QTest
operator|::
name|newRow
argument_list|(
literal|"50_to_100_fast_not_shown"
argument_list|)
operator|<<
literal|50
operator|<<
literal|100
operator|<<
literal|50
operator|<<
literal|1
operator|<<
literal|100
operator|<<
literal|false
expr_stmt|;
comment|// 1ms is too short to even start estimating
name|QTest
operator|::
name|newRow
argument_list|(
literal|"50_to_60_high_minDuration_not_shown"
argument_list|)
operator|<<
literal|50
operator|<<
literal|60
operator|<<
literal|50
operator|<<
literal|100
operator|<<
literal|2000
operator|<<
literal|false
expr_stmt|;
comment|// 10*100ms = 1s< 2s
comment|// Check that setValue(0) still starts the timer as previously documented
name|QTest
operator|::
name|newRow
argument_list|(
literal|"50_to_100_slow_0_compat"
argument_list|)
operator|<<
literal|50
operator|<<
literal|100
operator|<<
literal|0
operator|<<
literal|100
operator|<<
literal|100
operator|<<
literal|true
expr_stmt|;
comment|// 50*100ms = 5s
name|QTest
operator|::
name|newRow
argument_list|(
literal|"50_to_100_fast_0_compat"
argument_list|)
operator|<<
literal|50
operator|<<
literal|100
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|100
operator|<<
literal|false
expr_stmt|;
comment|// 1ms is too short to even start estimating
name|QTest
operator|::
name|newRow
argument_list|(
literal|"50_to_60_high_minDuration_0_compat"
argument_list|)
operator|<<
literal|50
operator|<<
literal|60
operator|<<
literal|0
operator|<<
literal|100
operator|<<
literal|2000
operator|<<
literal|false
expr_stmt|;
comment|// 10*100ms = 1s< 2s
comment|// Check the typical case of starting at 0
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0_to_100_slow_shown"
argument_list|)
operator|<<
literal|0
operator|<<
literal|100
operator|<<
literal|0
operator|<<
literal|100
operator|<<
literal|100
operator|<<
literal|true
expr_stmt|;
comment|// 100*100ms = 10s> 100ms
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0_to_10_slow_shown"
argument_list|)
operator|<<
literal|0
operator|<<
literal|10
operator|<<
literal|0
operator|<<
literal|100
operator|<<
literal|500
operator|<<
literal|true
expr_stmt|;
comment|// 10*100ms = 1s> 0.5s
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0_to_10_high_minDuration_not_shown"
argument_list|)
operator|<<
literal|0
operator|<<
literal|10
operator|<<
literal|0
operator|<<
literal|100
operator|<<
literal|2000
operator|<<
literal|false
expr_stmt|;
comment|// 10*100ms = 1s< 2s
comment|// Check the special case of going via 0 at some point
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1_to_1_slow_shown"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|200
operator|<<
literal|100
operator|<<
literal|true
expr_stmt|;
comment|// 1*200ms = 200ms> 100ms
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1_to_1_fast_not_shown"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|10
operator|<<
literal|100
operator|<<
literal|false
expr_stmt|;
comment|// 10ms is too short to even start estimating
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1_to_1_high_minDuration_not_shown"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|100
operator|<<
literal|2000
operator|<<
literal|false
expr_stmt|;
comment|// 1*100ms = 100ms< 2s
block|}
end_function
begin_function
DECL|function|autoShow
name|void
name|tst_QProgressDialog
operator|::
name|autoShow
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|min
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|delay
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|minDuration
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|expectedAutoShow
argument_list|)
expr_stmt|;
name|QProgressDialog
name|dlg
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
decl_stmt|;
if|if
condition|(
name|minDuration
operator|!=
name|dlg
operator|.
name|minimumDuration
argument_list|()
condition|)
name|dlg
operator|.
name|setMinimumDuration
argument_list|(
name|minDuration
argument_list|)
expr_stmt|;
name|dlg
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// cancel the timer started in the constructor,
comment|// in order to test for the setValue() behavior instead
comment|// See autoShowCtor() for the ctor timer check
name|dlg
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|QThread
operator|::
name|msleep
argument_list|(
name|delay
argument_list|)
expr_stmt|;
name|dlg
operator|.
name|setValue
argument_list|(
name|min
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dlg
operator|.
name|isVisible
argument_list|()
argument_list|,
name|expectedAutoShow
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|autoShowCtor
name|void
name|tst_QProgressDialog
operator|::
name|autoShowCtor
parameter_list|()
block|{
name|QProgressDialog
name|dlg
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|dlg
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QThread
operator|::
name|msleep
argument_list|(
name|dlg
operator|.
name|minimumDuration
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|dlg
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QProgressDialog
operator|::
name|getSetCheck
parameter_list|()
block|{
name|QProgressDialog
name|obj1
decl_stmt|;
comment|// bool QProgressDialog::autoReset()
comment|// void QProgressDialog::setAutoReset(bool)
name|obj1
operator|.
name|setAutoReset
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|autoReset
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setAutoReset
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|autoReset
argument_list|()
argument_list|)
expr_stmt|;
comment|// bool QProgressDialog::autoClose()
comment|// void QProgressDialog::setAutoClose(bool)
name|obj1
operator|.
name|setAutoClose
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|autoClose
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setAutoClose
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|autoClose
argument_list|()
argument_list|)
expr_stmt|;
comment|// int QProgressDialog::maximum()
comment|// void QProgressDialog::setMaximum(int)
name|obj1
operator|.
name|setMaximum
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|maximum
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setMaximum
argument_list|(
name|INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MIN
argument_list|,
name|obj1
operator|.
name|maximum
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setMaximum
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MAX
argument_list|,
name|obj1
operator|.
name|maximum
argument_list|()
argument_list|)
expr_stmt|;
comment|// int QProgressDialog::minimum()
comment|// void QProgressDialog::setMinimum(int)
name|obj1
operator|.
name|setMinimum
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|minimum
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setMinimum
argument_list|(
name|INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MIN
argument_list|,
name|obj1
operator|.
name|minimum
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setMinimum
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MAX
argument_list|,
name|obj1
operator|.
name|minimum
argument_list|()
argument_list|)
expr_stmt|;
comment|// int QProgressDialog::value()
comment|// void QProgressDialog::setValue(int)
name|obj1
operator|.
name|setMaximum
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setMinimum
argument_list|(
name|INT_MIN
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setValue
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setValue
argument_list|(
name|INT_MIN
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MIN
operator|+
literal|1
argument_list|,
name|obj1
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setValue
argument_list|(
name|INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MIN
argument_list|,
name|obj1
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setValue
argument_list|(
name|INT_MAX
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MAX
operator|-
literal|1
argument_list|,
name|obj1
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setValue
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MIN
argument_list|,
name|obj1
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
comment|// We set autoReset, the thing is reset
name|obj1
operator|.
name|setAutoReset
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setValue
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MAX
argument_list|,
name|obj1
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setAutoReset
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// int QProgressDialog::minimumDuration()
comment|// void QProgressDialog::setMinimumDuration(int)
name|obj1
operator|.
name|setMinimumDuration
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|minimumDuration
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setMinimumDuration
argument_list|(
name|INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MIN
argument_list|,
name|obj1
operator|.
name|minimumDuration
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setMinimumDuration
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MAX
argument_list|,
name|obj1
operator|.
name|minimumDuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task198202
name|void
name|tst_QProgressDialog
operator|::
name|task198202
parameter_list|()
block|{
comment|//should not crash
name|QProgressDialog
name|dlg
argument_list|(
name|QLatin1String
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"test"
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|dlg
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|dlg
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|futureHeight
init|=
name|dlg
operator|.
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
operator|-
name|dlg
operator|.
name|findChild
argument_list|<
name|QLabel
operator|*
argument_list|>
argument_list|()
operator|->
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
decl_stmt|;
name|dlg
operator|.
name|setLabel
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QProgressDialog::setBar: Cannot set a null progress bar"
argument_list|)
expr_stmt|;
name|dlg
operator|.
name|setBar
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dlg
operator|.
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
argument_list|,
name|futureHeight
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|QTBUG_31046
name|void
name|tst_QProgressDialog
operator|::
name|QTBUG_31046
parameter_list|()
block|{
name|QProgressDialog
name|dlg
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|50
argument_list|,
literal|60
argument_list|)
decl_stmt|;
name|dlg
operator|.
name|setValue
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QThread
operator|::
name|msleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|dlg
operator|.
name|setValue
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|50
argument_list|,
name|dlg
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|settingCustomWidgets
name|void
name|tst_QProgressDialog
operator|::
name|settingCustomWidgets
parameter_list|()
block|{
name|QPointer
argument_list|<
name|QLabel
argument_list|>
name|l
init|=
operator|new
name|QLabel
decl_stmt|;
name|QPointer
argument_list|<
name|QPushButton
argument_list|>
name|btn
init|=
operator|new
name|QPushButton
decl_stmt|;
name|QPointer
argument_list|<
name|QProgressBar
argument_list|>
name|bar
init|=
operator|new
name|QProgressBar
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|l
operator|->
name|parent
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|btn
operator|->
name|parent
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|bar
operator|->
name|parent
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|QProgressDialog
name|dlg
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|dlg
operator|.
name|isAncestorOf
argument_list|(
name|l
argument_list|)
argument_list|)
expr_stmt|;
name|dlg
operator|.
name|setLabel
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|dlg
operator|.
name|isAncestorOf
argument_list|(
name|l
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QProgressDialog::setLabel: Attempt to set the same label again"
argument_list|)
expr_stmt|;
name|dlg
operator|.
name|setLabel
argument_list|(
name|l
argument_list|)
expr_stmt|;
comment|// setting the same widget again should not crash
name|QVERIFY
argument_list|(
name|l
argument_list|)
expr_stmt|;
comment|// and not delete the (old == new) widget
name|QVERIFY
argument_list|(
operator|!
name|dlg
operator|.
name|isAncestorOf
argument_list|(
name|btn
argument_list|)
argument_list|)
expr_stmt|;
name|dlg
operator|.
name|setCancelButton
argument_list|(
name|btn
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|dlg
operator|.
name|isAncestorOf
argument_list|(
name|btn
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QProgressDialog::setCancelButton: Attempt to set the same button again"
argument_list|)
expr_stmt|;
name|dlg
operator|.
name|setCancelButton
argument_list|(
name|btn
argument_list|)
expr_stmt|;
comment|// setting the same widget again should not crash
name|QVERIFY
argument_list|(
name|btn
argument_list|)
expr_stmt|;
comment|// and not delete the (old == new) widget
name|QVERIFY
argument_list|(
operator|!
name|dlg
operator|.
name|isAncestorOf
argument_list|(
name|bar
argument_list|)
argument_list|)
expr_stmt|;
name|dlg
operator|.
name|setBar
argument_list|(
name|bar
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|dlg
operator|.
name|isAncestorOf
argument_list|(
name|bar
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QProgressDialog::setBar: Attempt to set the same progress bar again"
argument_list|)
expr_stmt|;
name|dlg
operator|.
name|setBar
argument_list|(
name|bar
argument_list|)
expr_stmt|;
comment|// setting the same widget again should not crash
name|QVERIFY
argument_list|(
name|bar
argument_list|)
expr_stmt|;
comment|// and not delete the (old == new) widget
block|}
name|QVERIFY
argument_list|(
operator|!
name|l
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|btn
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|bar
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QTestTranslator
class|class
name|QTestTranslator
super|:
specifier|public
name|QTranslator
block|{
DECL|member|m_str
specifier|const
name|QString
name|m_str
decl_stmt|;
public|public:
DECL|function|QTestTranslator
specifier|explicit
name|QTestTranslator
parameter_list|(
name|QString
name|str
parameter_list|)
member_init_list|:
name|m_str
argument_list|(
name|qMove
argument_list|(
name|str
argument_list|)
argument_list|)
block|{}
name|QString
name|translate
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|sourceText
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|m_str
operator|+
name|sourceText
operator|+
name|m_str
return|;
block|}
name|bool
name|isEmpty
parameter_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
literal|false
return|;
block|}
block|}
class|;
end_class
begin_class
template|template
parameter_list|<
name|typename
name|Translator
parameter_list|>
class|class
DECL|class|QTranslatorGuard
name|QTranslatorGuard
block|{
DECL|member|t
name|Translator
name|t
decl_stmt|;
public|public:
template|template
parameter_list|<
name|typename
name|Arg
parameter_list|>
DECL|function|QTranslatorGuard
specifier|explicit
name|QTranslatorGuard
parameter_list|(
name|Arg
name|a
parameter_list|)
member_init_list|:
name|t
argument_list|(
name|qMove
argument_list|(
name|a
argument_list|)
argument_list|)
block|{
name|qApp
operator|->
name|installTranslator
argument_list|(
operator|&
name|t
argument_list|)
expr_stmt|;
block|}
DECL|function|~QTranslatorGuard
name|~
name|QTranslatorGuard
parameter_list|()
block|{
name|qApp
operator|->
name|removeTranslator
argument_list|(
operator|&
name|t
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|i18n
name|void
name|tst_QProgressDialog
operator|::
name|i18n
parameter_list|()
block|{
name|QProgressDialog
name|dlg
decl_stmt|;
name|QPushButton
modifier|*
name|btn
init|=
name|dlg
operator|.
name|findChild
argument_list|<
name|QPushButton
operator|*
argument_list|>
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|btn
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|xxx
init|=
name|QStringLiteral
argument_list|(
literal|"xxx"
argument_list|)
decl_stmt|;
block|{
name|QTranslatorGuard
argument_list|<
name|QTestTranslator
argument_list|>
name|guard
argument_list|(
name|xxx
argument_list|)
decl_stmt|;
block|{
name|QPushButton
modifier|*
name|btn
init|=
name|dlg
operator|.
name|findChild
argument_list|<
name|QPushButton
operator|*
argument_list|>
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|btn
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|btn
operator|->
name|text
argument_list|()
argument_list|,
name|QProgressDialog
operator|::
name|tr
argument_list|(
literal|"Cancel"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|btn
operator|->
name|text
argument_list|()
operator|.
name|startsWith
argument_list|(
name|xxx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|QVERIFY
argument_list|(
name|btn
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|btn
operator|->
name|text
argument_list|()
argument_list|,
name|QProgressDialog
operator|::
name|tr
argument_list|(
literal|"Cancel"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|btn
operator|->
name|text
argument_list|()
operator|.
name|startsWith
argument_list|(
name|xxx
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QProgressDialog
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qprogressdialog.moc"
end_include
end_unit
