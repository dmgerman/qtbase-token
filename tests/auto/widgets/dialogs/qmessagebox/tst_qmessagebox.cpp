begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QMessageBox>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QPair>
end_include
begin_include
include|#
directive|include
file|<QList>
end_include
begin_include
include|#
directive|include
file|<QPointer>
end_include
begin_include
include|#
directive|include
file|<QTimer>
end_include
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QPushButton>
end_include
begin_include
include|#
directive|include
file|<QDialogButtonBox>
end_include
begin_include
include|#
directive|include
file|<QPlatformTheme>
end_include
begin_include
include|#
directive|include
file|<private/qguiapplication_p.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_MAC
argument_list|)
end_if
begin_include
include|#
directive|include
file|<QMacStyle>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_CLEANLOOKS
argument_list|)
end_if
begin_include
include|#
directive|include
file|<QCleanlooksStyle>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|CONVENIENCE_FUNC_SYMS
define|#
directive|define
name|CONVENIENCE_FUNC_SYMS
parameter_list|(
name|func
parameter_list|)
define|\
value|{ \         int x1 = QMessageBox::func(0, "Foo", "Bar"); \         int x3 = QMessageBox::func(0, "Foo", "Bar", "Save"); \         int x6 = QMessageBox::func(0, "Foo", "Bar", "Save", "Save As"); \         int x7 = QMessageBox::func(0, "Foo", "Bar", "Save", "Save As", "Dont Save"); \         int x8 = QMessageBox::func(0, "Foo", "Bar", "Save", "Save As", "Dont Save", 1); \         int x9 = QMessageBox::func(0, "Foo", "Bar", "Save", "Save As", "Dont Save", 1, 2); \         int x10 = QMessageBox::func(0, "Foo", "Bar", QMessageBox::YesAll, QMessageBox::Yes); \         int x11 = QMessageBox::func(0, "Foo", "Bar", QMessageBox::YesAll, QMessageBox::Yes, \                                     QMessageBox::No); \         qDebug("%d %d %d %d %d %d %d %d", x1, x3, x6, x7, x8, x9, x10, x11); \         { \         int x4 = QMessageBox::func(0, "Foo", "Bar", (int)QMessageBox::Yes, (int)QMessageBox::No); \         int x5 = QMessageBox::func(0, "Foo", "Bar", QMessageBox::Yes, (int)QMessageBox::No); \         int x6 = QMessageBox::func(0, "Foo", "Bar", QMessageBox::Yes | QMessageBox::Default, (int)QMessageBox::No); \         int x7 = QMessageBox::func(0, "Foo", "Bar", (int)QMessageBox::Yes, QMessageBox::No); \         int x8 = QMessageBox::func(0, "Foo", "Bar", QMessageBox::Yes, QMessageBox::No); \         int x9 = QMessageBox::func(0, "Foo", "Bar", QMessageBox::Yes | QMessageBox::Default, QMessageBox::No); \         int x10 = QMessageBox::func(0, "Foo", "Bar", (int)QMessageBox::Yes, (int)QMessageBox::No, (int)QMessageBox::Ok); \         int x11 = QMessageBox::func(0, "Foo", "Bar", QMessageBox::Yes, (int)QMessageBox::No, (int)QMessageBox::Ok); \         int x12 = QMessageBox::func(0, "Foo", "Bar", QMessageBox::Yes | QMessageBox::Default, (int)QMessageBox::No, (int)QMessageBox::Ok); \         int x13 = QMessageBox::func(0, "Foo", "Bar", (int)QMessageBox::Yes, QMessageBox::No, (int)QMessageBox::Ok); \         int x14 = QMessageBox::func(0, "Foo", "Bar", QMessageBox::Yes, QMessageBox::No, (int)QMessageBox::Ok); \         int x15 = QMessageBox::func(0, "Foo", "Bar", QMessageBox::Yes | QMessageBox::Default, QMessageBox::No, (int)QMessageBox::Ok); \         int x16 = QMessageBox::func(0, "Foo", "Bar", (int)QMessageBox::Yes, (int)QMessageBox::No, QMessageBox::Ok); \         int x17 = QMessageBox::func(0, "Foo", "Bar", QMessageBox::Yes, (int)QMessageBox::No, QMessageBox::Ok); \         int x18 = QMessageBox::func(0, "Foo", "Bar", QMessageBox::Yes | QMessageBox::Default, (int)QMessageBox::No, QMessageBox::Ok); \         int x19 = QMessageBox::func(0, "Foo", "Bar", (int)QMessageBox::Yes, QMessageBox::No, QMessageBox::Ok); \         int x20 = QMessageBox::func(0, "Foo", "Bar", QMessageBox::Yes, QMessageBox::No, QMessageBox::Ok); \         int x21 = QMessageBox::func(0, "Foo", "Bar", QMessageBox::Yes | QMessageBox::Default, QMessageBox::No, QMessageBox::Ok); \         qDebug("%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d", x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21); \         } \     }
end_define
begin_define
DECL|macro|CONVENIENCE_FUNC_SYMS_EXTRA
define|#
directive|define
name|CONVENIENCE_FUNC_SYMS_EXTRA
parameter_list|(
name|func
parameter_list|)
define|\
value|{ \         int x1 = QMessageBox::func(0, "Foo", "Bar", (int)QMessageBox::Yes); \         int x2 = QMessageBox::func(0, "Foo", "Bar", QMessageBox::Yes); \         int x3 = QMessageBox::func(0, "Foo", "Bar", QMessageBox::Yes | QMessageBox::Default); \         qDebug("%d %d %d", x1, x2, x3); \     }
end_define
begin_class
DECL|class|tst_QMessageBox
class|class
name|tst_QMessageBox
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QMessageBox
parameter_list|()
constructor_decl|;
name|int
name|exec
parameter_list|(
name|QMessageBox
modifier|*
name|msgBox
parameter_list|,
name|int
name|key
init|=
operator|-
literal|1
parameter_list|)
function_decl|;
name|void
name|sendKeySoon
parameter_list|()
function_decl|;
public|public
name|slots
public|:
name|void
name|sendKey
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|sanityTest
parameter_list|()
function_decl|;
name|void
name|defaultButton
parameter_list|()
function_decl|;
name|void
name|escapeButton
parameter_list|()
function_decl|;
name|void
name|button
parameter_list|()
function_decl|;
name|void
name|statics
parameter_list|()
function_decl|;
name|void
name|about
parameter_list|()
function_decl|;
name|void
name|detailsText
parameter_list|()
function_decl|;
name|void
name|detailsButtonText
parameter_list|()
function_decl|;
name|void
name|shortcut
parameter_list|()
function_decl|;
name|void
name|staticSourceCompat
parameter_list|()
function_decl|;
name|void
name|instanceSourceCompat
parameter_list|()
function_decl|;
name|void
name|testSymbols
parameter_list|()
function_decl|;
name|void
name|incorrectDefaultButton
parameter_list|()
function_decl|;
name|void
name|updateSize
parameter_list|()
function_decl|;
name|void
name|setInformativeText
parameter_list|()
function_decl|;
name|void
name|iconPixmap
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|initTestCase
parameter_list|()
function_decl|;
private|private:
DECL|member|keyToSend
name|int
name|keyToSend
decl_stmt|;
DECL|member|keySendTimer
name|QTimer
name|keySendTimer
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QMessageBox
name|tst_QMessageBox
operator|::
name|tst_QMessageBox
parameter_list|()
member_init_list|:
name|keyToSend
argument_list|(
operator|-
literal|1
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|exec
name|int
name|tst_QMessageBox
operator|::
name|exec
parameter_list|(
name|QMessageBox
modifier|*
name|msgBox
parameter_list|,
name|int
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|==
operator|-
literal|1
condition|)
block|{
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|1000
argument_list|,
name|msgBox
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keyToSend
operator|=
name|key
expr_stmt|;
name|sendKeySoon
argument_list|()
expr_stmt|;
block|}
return|return
name|msgBox
operator|->
name|exec
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|sendKey
name|void
name|tst_QMessageBox
operator|::
name|sendKey
parameter_list|()
block|{
if|if
condition|(
name|keyToSend
operator|==
operator|-
literal|2
condition|)
block|{
name|QApplication
operator|::
name|activeModalWidget
argument_list|()
operator|->
name|close
argument_list|()
expr_stmt|;
name|keyToSend
operator|=
operator|-
literal|1
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|keyToSend
operator|==
operator|-
literal|1
condition|)
return|return;
name|QKeyEvent
modifier|*
name|ke
init|=
operator|new
name|QKeyEvent
argument_list|(
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|keyToSend
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
decl_stmt|;
name|qApp
operator|->
name|postEvent
argument_list|(
name|QApplication
operator|::
name|activeModalWidget
argument_list|()
argument_list|,
name|ke
argument_list|)
expr_stmt|;
name|keyToSend
operator|=
operator|-
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendKeySoon
name|void
name|tst_QMessageBox
operator|::
name|sendKeySoon
parameter_list|()
block|{
name|keySendTimer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_QMessageBox
operator|::
name|init
parameter_list|()
block|{
comment|// if there is any pending key send from the last test, cancel it.
name|keySendTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initTestCase
name|void
name|tst_QMessageBox
operator|::
name|initTestCase
parameter_list|()
block|{
name|keySendTimer
operator|.
name|setInterval
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|keySendTimer
operator|.
name|setSingleShot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|keySendTimer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|sendKey
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sanityTest
name|void
name|tst_QMessageBox
operator|::
name|sanityTest
parameter_list|()
block|{
name|QMessageBox
name|msgBox
decl_stmt|;
name|msgBox
operator|.
name|setText
argument_list|(
literal|"This is insane"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
name|msgBox
operator|.
name|setIcon
argument_list|(
name|QMessageBox
operator|::
name|Icon
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|setIconPixmap
argument_list|(
name|QPixmap
argument_list|()
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|setIconPixmap
argument_list|(
name|QPixmap
argument_list|(
literal|"whatever.png"
argument_list|)
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|setTextFormat
argument_list|(
name|Qt
operator|::
name|RichText
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|setTextFormat
argument_list|(
name|Qt
operator|::
name|PlainText
argument_list|)
expr_stmt|;
name|exec
argument_list|(
operator|&
name|msgBox
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|button
name|void
name|tst_QMessageBox
operator|::
name|button
parameter_list|()
block|{
name|QMessageBox
name|msgBox
decl_stmt|;
name|msgBox
operator|.
name|addButton
argument_list|(
literal|"retry"
argument_list|,
name|QMessageBox
operator|::
name|DestructiveRole
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|msgBox
operator|.
name|button
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// not added yet
name|QPushButton
modifier|*
name|b1
init|=
name|msgBox
operator|.
name|addButton
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|msgBox
operator|.
name|button
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|)
argument_list|,
operator|(
name|QAbstractButton
operator|*
operator|)
name|b1
argument_list|)
expr_stmt|;
comment|// just added
name|QCOMPARE
argument_list|(
name|msgBox
operator|.
name|standardButton
argument_list|(
name|b1
argument_list|)
argument_list|,
name|QMessageBox
operator|::
name|Ok
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|addButton
argument_list|(
name|QMessageBox
operator|::
name|Cancel
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|msgBox
operator|.
name|standardButtons
argument_list|()
argument_list|,
name|QMessageBox
operator|::
name|Ok
operator||
name|QMessageBox
operator|::
name|Cancel
argument_list|)
expr_stmt|;
comment|// remove the cancel, should not exist anymore
name|msgBox
operator|.
name|setStandardButtons
argument_list|(
name|QMessageBox
operator|::
name|Yes
operator||
name|QMessageBox
operator|::
name|No
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|msgBox
operator|.
name|button
argument_list|(
name|QMessageBox
operator|::
name|Cancel
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|msgBox
operator|.
name|button
argument_list|(
name|QMessageBox
operator|::
name|Yes
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|// should not crash
name|QPushButton
modifier|*
name|b4
init|=
operator|new
name|QPushButton
decl_stmt|;
name|msgBox
operator|.
name|addButton
argument_list|(
name|b4
argument_list|,
name|QMessageBox
operator|::
name|DestructiveRole
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|addButton
argument_list|(
literal|0
argument_list|,
name|QMessageBox
operator|::
name|ActionRole
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|defaultButton
name|void
name|tst_QMessageBox
operator|::
name|defaultButton
parameter_list|()
block|{
name|QMessageBox
name|msgBox
decl_stmt|;
name|QVERIFY
argument_list|(
name|msgBox
operator|.
name|defaultButton
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|addButton
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|addButton
argument_list|(
name|QMessageBox
operator|::
name|Cancel
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|msgBox
operator|.
name|defaultButton
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QPushButton
name|pushButton
decl_stmt|;
name|msgBox
operator|.
name|setDefaultButton
argument_list|(
operator|&
name|pushButton
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|msgBox
operator|.
name|defaultButton
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// we have not added it yet
name|QPushButton
modifier|*
name|retryButton
init|=
name|msgBox
operator|.
name|addButton
argument_list|(
name|QMessageBox
operator|::
name|Retry
argument_list|)
decl_stmt|;
name|msgBox
operator|.
name|setDefaultButton
argument_list|(
name|retryButton
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|msgBox
operator|.
name|defaultButton
argument_list|()
argument_list|,
name|retryButton
argument_list|)
expr_stmt|;
name|exec
argument_list|(
operator|&
name|msgBox
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|msgBox
operator|.
name|clickedButton
argument_list|()
argument_list|,
name|msgBox
operator|.
name|button
argument_list|(
name|QMessageBox
operator|::
name|Cancel
argument_list|)
argument_list|)
expr_stmt|;
name|exec
argument_list|(
operator|&
name|msgBox
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|msgBox
operator|.
name|clickedButton
argument_list|()
argument_list|,
operator|(
name|QAbstractButton
operator|*
operator|)
name|retryButton
argument_list|)
expr_stmt|;
name|QAbstractButton
modifier|*
name|okButton
init|=
name|msgBox
operator|.
name|button
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|)
decl_stmt|;
name|msgBox
operator|.
name|setDefaultButton
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|msgBox
operator|.
name|defaultButton
argument_list|()
argument_list|,
operator|(
name|QPushButton
operator|*
operator|)
name|okButton
argument_list|)
expr_stmt|;
name|exec
argument_list|(
operator|&
name|msgBox
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|msgBox
operator|.
name|clickedButton
argument_list|()
argument_list|,
name|okButton
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|setDefaultButton
argument_list|(
name|QMessageBox
operator|::
name|Yes
argument_list|)
expr_stmt|;
comment|// its not in there!
name|QVERIFY
argument_list|(
name|msgBox
operator|.
name|defaultButton
argument_list|()
operator|==
name|okButton
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|removeButton
argument_list|(
name|okButton
argument_list|)
expr_stmt|;
operator|delete
name|okButton
expr_stmt|;
name|okButton
operator|=
literal|0
expr_stmt|;
name|QVERIFY
argument_list|(
name|msgBox
operator|.
name|defaultButton
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|setDefaultButton
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|msgBox
operator|.
name|defaultButton
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|escapeButton
name|void
name|tst_QMessageBox
operator|::
name|escapeButton
parameter_list|()
block|{
name|QMessageBox
name|msgBox
decl_stmt|;
name|QVERIFY
argument_list|(
name|msgBox
operator|.
name|escapeButton
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|addButton
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|)
expr_stmt|;
name|exec
argument_list|(
operator|&
name|msgBox
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|msgBox
operator|.
name|clickedButton
argument_list|()
operator|==
name|msgBox
operator|.
name|button
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|)
argument_list|)
expr_stmt|;
comment|// auto detected (one button only)
name|msgBox
operator|.
name|addButton
argument_list|(
name|QMessageBox
operator|::
name|Cancel
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|msgBox
operator|.
name|escapeButton
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QPushButton
name|invalidButton
decl_stmt|;
name|msgBox
operator|.
name|setEscapeButton
argument_list|(
operator|&
name|invalidButton
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|msgBox
operator|.
name|escapeButton
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QAbstractButton
modifier|*
name|retryButton
init|=
name|msgBox
operator|.
name|addButton
argument_list|(
name|QMessageBox
operator|::
name|Retry
argument_list|)
decl_stmt|;
name|exec
argument_list|(
operator|&
name|msgBox
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|msgBox
operator|.
name|clickedButton
argument_list|()
operator|==
name|msgBox
operator|.
name|button
argument_list|(
name|QMessageBox
operator|::
name|Cancel
argument_list|)
argument_list|)
expr_stmt|;
comment|// auto detected (cancel)
name|msgBox
operator|.
name|setEscapeButton
argument_list|(
name|retryButton
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|msgBox
operator|.
name|escapeButton
argument_list|()
argument_list|,
operator|(
name|QAbstractButton
operator|*
operator|)
name|retryButton
argument_list|)
expr_stmt|;
comment|// with escape
name|exec
argument_list|(
operator|&
name|msgBox
argument_list|,
name|Qt
operator|::
name|Key_Escape
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|msgBox
operator|.
name|clickedButton
argument_list|()
argument_list|,
name|retryButton
argument_list|)
expr_stmt|;
comment|// with close
name|exec
argument_list|(
operator|&
name|msgBox
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|msgBox
operator|.
name|clickedButton
argument_list|()
argument_list|,
operator|(
name|QAbstractButton
operator|*
operator|)
name|retryButton
argument_list|)
expr_stmt|;
name|QAbstractButton
modifier|*
name|okButton
init|=
name|msgBox
operator|.
name|button
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|)
decl_stmt|;
name|msgBox
operator|.
name|setEscapeButton
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|msgBox
operator|.
name|escapeButton
argument_list|()
argument_list|,
name|okButton
argument_list|)
expr_stmt|;
name|exec
argument_list|(
operator|&
name|msgBox
argument_list|,
name|Qt
operator|::
name|Key_Escape
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|msgBox
operator|.
name|clickedButton
argument_list|()
argument_list|,
name|okButton
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|setEscapeButton
argument_list|(
name|QMessageBox
operator|::
name|Yes
argument_list|)
expr_stmt|;
comment|// its not in there!
name|QVERIFY
argument_list|(
name|msgBox
operator|.
name|escapeButton
argument_list|()
operator|==
name|okButton
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|removeButton
argument_list|(
name|okButton
argument_list|)
expr_stmt|;
operator|delete
name|okButton
expr_stmt|;
name|okButton
operator|=
literal|0
expr_stmt|;
name|QVERIFY
argument_list|(
name|msgBox
operator|.
name|escapeButton
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|setEscapeButton
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|msgBox
operator|.
name|escapeButton
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QMessageBox
name|msgBox2
decl_stmt|;
name|msgBox2
operator|.
name|addButton
argument_list|(
name|QMessageBox
operator|::
name|Yes
argument_list|)
expr_stmt|;
name|msgBox2
operator|.
name|addButton
argument_list|(
name|QMessageBox
operator|::
name|No
argument_list|)
expr_stmt|;
name|exec
argument_list|(
operator|&
name|msgBox2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|msgBox2
operator|.
name|clickedButton
argument_list|()
operator|==
name|msgBox2
operator|.
name|button
argument_list|(
name|QMessageBox
operator|::
name|No
argument_list|)
argument_list|)
expr_stmt|;
comment|// auto detected (one No button only)
name|QPushButton
modifier|*
name|rejectButton
init|=
operator|new
name|QPushButton
decl_stmt|;
name|msgBox2
operator|.
name|addButton
argument_list|(
name|rejectButton
argument_list|,
name|QMessageBox
operator|::
name|RejectRole
argument_list|)
expr_stmt|;
name|exec
argument_list|(
operator|&
name|msgBox2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|msgBox2
operator|.
name|clickedButton
argument_list|()
operator|==
name|rejectButton
argument_list|)
expr_stmt|;
comment|// auto detected (one reject button only)
name|msgBox2
operator|.
name|addButton
argument_list|(
operator|new
name|QPushButton
argument_list|,
name|QMessageBox
operator|::
name|RejectRole
argument_list|)
expr_stmt|;
name|exec
argument_list|(
operator|&
name|msgBox2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|msgBox2
operator|.
name|clickedButton
argument_list|()
operator|==
name|msgBox2
operator|.
name|button
argument_list|(
name|QMessageBox
operator|::
name|No
argument_list|)
argument_list|)
expr_stmt|;
comment|// auto detected (one No button only)
block|}
end_function
begin_function
DECL|function|statics
name|void
name|tst_QMessageBox
operator|::
name|statics
parameter_list|()
block|{
name|QMessageBox
operator|::
name|StandardButton
function_decl|(
modifier|*
name|statics
index|[
literal|4
index|]
function_decl|)
parameter_list|(
name|QWidget
modifier|*
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
name|QMessageBox
operator|::
name|StandardButtons
name|buttons
parameter_list|,
name|QMessageBox
operator|::
name|StandardButton
parameter_list|)
function_decl|;
name|statics
index|[
literal|0
index|]
operator|=
name|QMessageBox
operator|::
name|information
expr_stmt|;
name|statics
index|[
literal|1
index|]
operator|=
name|QMessageBox
operator|::
name|critical
expr_stmt|;
name|statics
index|[
literal|2
index|]
operator|=
name|QMessageBox
operator|::
name|question
expr_stmt|;
name|statics
index|[
literal|3
index|]
operator|=
name|QMessageBox
operator|::
name|warning
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|keyToSend
operator|=
name|Qt
operator|::
name|Key_Escape
expr_stmt|;
name|sendKeySoon
argument_list|()
expr_stmt|;
name|QMessageBox
operator|::
name|StandardButton
name|sb
init|=
call|(
modifier|*
name|statics
index|[
name|i
index|]
call|)
argument_list|(
literal|0
argument_list|,
literal|"caption"
argument_list|,
literal|"text"
argument_list|,
name|QMessageBox
operator|::
name|Yes
operator||
name|QMessageBox
operator|::
name|No
operator||
name|QMessageBox
operator|::
name|Help
operator||
name|QMessageBox
operator|::
name|Cancel
argument_list|,
name|QMessageBox
operator|::
name|NoButton
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|sb
argument_list|,
name|QMessageBox
operator|::
name|Cancel
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|keyToSend
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|keyToSend
operator|=
operator|-
literal|2
expr_stmt|;
comment|// close()
name|sendKeySoon
argument_list|()
expr_stmt|;
name|sb
operator|=
call|(
modifier|*
name|statics
index|[
name|i
index|]
call|)
argument_list|(
literal|0
argument_list|,
literal|"caption"
argument_list|,
literal|"text"
argument_list|,
name|QMessageBox
operator|::
name|Yes
operator||
name|QMessageBox
operator|::
name|No
operator||
name|QMessageBox
operator|::
name|Help
operator||
name|QMessageBox
operator|::
name|Cancel
argument_list|,
name|QMessageBox
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sb
argument_list|,
name|QMessageBox
operator|::
name|Cancel
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|keyToSend
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|keyToSend
operator|=
name|Qt
operator|::
name|Key_Enter
expr_stmt|;
name|sendKeySoon
argument_list|()
expr_stmt|;
name|sb
operator|=
call|(
modifier|*
name|statics
index|[
name|i
index|]
call|)
argument_list|(
literal|0
argument_list|,
literal|"caption"
argument_list|,
literal|"text"
argument_list|,
name|QMessageBox
operator|::
name|Yes
operator||
name|QMessageBox
operator|::
name|No
operator||
name|QMessageBox
operator|::
name|Help
argument_list|,
name|QMessageBox
operator|::
name|Yes
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sb
argument_list|,
name|QMessageBox
operator|::
name|Yes
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|keyToSend
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|keyToSend
operator|=
name|Qt
operator|::
name|Key_Enter
expr_stmt|;
name|sendKeySoon
argument_list|()
expr_stmt|;
name|sb
operator|=
call|(
modifier|*
name|statics
index|[
name|i
index|]
call|)
argument_list|(
literal|0
argument_list|,
literal|"caption"
argument_list|,
literal|"text"
argument_list|,
name|QMessageBox
operator|::
name|Yes
operator||
name|QMessageBox
operator|::
name|No
operator||
name|QMessageBox
operator|::
name|Help
argument_list|,
name|QMessageBox
operator|::
name|No
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sb
argument_list|,
name|QMessageBox
operator|::
name|No
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|keyToSend
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|shortcut
name|void
name|tst_QMessageBox
operator|::
name|shortcut
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|QSKIP
argument_list|(
literal|"shortcuts are not used on MAC OS X"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QMessageBox
name|msgBox
decl_stmt|;
name|msgBox
operator|.
name|addButton
argument_list|(
literal|"O&k"
argument_list|,
name|QMessageBox
operator|::
name|YesRole
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|addButton
argument_list|(
literal|"&No"
argument_list|,
name|QMessageBox
operator|::
name|YesRole
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|addButton
argument_list|(
literal|"&Maybe"
argument_list|,
name|QMessageBox
operator|::
name|YesRole
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|exec
argument_list|(
operator|&
name|msgBox
argument_list|,
name|Qt
operator|::
name|Key_M
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|about
name|void
name|tst_QMessageBox
operator|::
name|about
parameter_list|()
block|{
name|keyToSend
operator|=
name|Qt
operator|::
name|Key_Escape
expr_stmt|;
name|sendKeySoon
argument_list|()
expr_stmt|;
name|QMessageBox
operator|::
name|about
argument_list|(
literal|0
argument_list|,
literal|"Caption"
argument_list|,
literal|"This is an auto test"
argument_list|)
expr_stmt|;
comment|// On Mac, about and aboutQt are not modal, so we need to
comment|// explicitly run the event loop
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|QTRY_COMPARE
argument_list|(
name|keyToSend
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
else|#
directive|else
name|QCOMPARE
argument_list|(
name|keyToSend
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|keyToSend
operator|=
name|Qt
operator|::
name|Key_Enter
expr_stmt|;
else|#
directive|else
name|keyToSend
operator|=
name|Qt
operator|::
name|Key_Escape
expr_stmt|;
endif|#
directive|endif
name|sendKeySoon
argument_list|()
expr_stmt|;
name|QMessageBox
operator|::
name|aboutQt
argument_list|(
literal|0
argument_list|,
literal|"Caption"
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|QTRY_COMPARE
argument_list|(
name|keyToSend
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
else|#
directive|else
name|QCOMPARE
argument_list|(
name|keyToSend
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|staticSourceCompat
name|void
name|tst_QMessageBox
operator|::
name|staticSourceCompat
parameter_list|()
block|{
name|int
name|ret
decl_stmt|;
comment|// source compat tests for< 4.2
name|keyToSend
operator|=
name|Qt
operator|::
name|Key_Enter
expr_stmt|;
name|sendKeySoon
argument_list|()
expr_stmt|;
name|ret
operator|=
name|QMessageBox
operator|::
name|information
argument_list|(
literal|0
argument_list|,
literal|"title"
argument_list|,
literal|"text"
argument_list|,
name|QMessageBox
operator|::
name|Yes
argument_list|,
name|QMessageBox
operator|::
name|No
argument_list|)
expr_stmt|;
name|int
name|expectedButton
init|=
name|int
argument_list|(
name|QMessageBox
operator|::
name|Yes
argument_list|)
decl_stmt|;
if|if
condition|(
specifier|const
name|QPlatformTheme
modifier|*
name|theme
init|=
name|QGuiApplicationPrivate
operator|::
name|platformTheme
argument_list|()
condition|)
block|{
specifier|const
name|int
name|dialogButtonBoxLayout
init|=
name|theme
operator|->
name|themeHint
argument_list|(
name|QPlatformTheme
operator|::
name|DialogButtonBoxLayout
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|dialogButtonBoxLayout
operator|==
name|QDialogButtonBox
operator|::
name|MacLayout
operator|||
name|dialogButtonBoxLayout
operator|==
name|QDialogButtonBox
operator|::
name|GnomeLayout
condition|)
name|expectedButton
operator|=
name|int
argument_list|(
name|QMessageBox
operator|::
name|No
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|ret
argument_list|,
name|expectedButton
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|keyToSend
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|keyToSend
operator|=
name|Qt
operator|::
name|Key_Enter
expr_stmt|;
name|sendKeySoon
argument_list|()
expr_stmt|;
name|ret
operator|=
name|QMessageBox
operator|::
name|information
argument_list|(
literal|0
argument_list|,
literal|"title"
argument_list|,
literal|"text"
argument_list|,
name|QMessageBox
operator|::
name|Yes
operator||
name|QMessageBox
operator|::
name|Default
argument_list|,
name|QMessageBox
operator|::
name|No
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ret
argument_list|,
name|int
argument_list|(
name|QMessageBox
operator|::
name|Yes
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|keyToSend
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|keyToSend
operator|=
name|Qt
operator|::
name|Key_Enter
expr_stmt|;
name|sendKeySoon
argument_list|()
expr_stmt|;
name|ret
operator|=
name|QMessageBox
operator|::
name|information
argument_list|(
literal|0
argument_list|,
literal|"title"
argument_list|,
literal|"text"
argument_list|,
name|QMessageBox
operator|::
name|Yes
argument_list|,
name|QMessageBox
operator|::
name|No
operator||
name|QMessageBox
operator|::
name|Default
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ret
argument_list|,
name|int
argument_list|(
name|QMessageBox
operator|::
name|No
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|keyToSend
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|keyToSend
operator|=
name|Qt
operator|::
name|Key_Enter
expr_stmt|;
name|sendKeySoon
argument_list|()
expr_stmt|;
name|ret
operator|=
name|QMessageBox
operator|::
name|information
argument_list|(
literal|0
argument_list|,
literal|"title"
argument_list|,
literal|"text"
argument_list|,
name|QMessageBox
operator|::
name|Yes
operator||
name|QMessageBox
operator|::
name|Default
argument_list|,
name|QMessageBox
operator|::
name|No
operator||
name|QMessageBox
operator|::
name|Escape
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ret
argument_list|,
name|int
argument_list|(
name|QMessageBox
operator|::
name|Yes
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|keyToSend
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|keyToSend
operator|=
name|Qt
operator|::
name|Key_Enter
expr_stmt|;
name|sendKeySoon
argument_list|()
expr_stmt|;
name|ret
operator|=
name|QMessageBox
operator|::
name|information
argument_list|(
literal|0
argument_list|,
literal|"title"
argument_list|,
literal|"text"
argument_list|,
name|QMessageBox
operator|::
name|Yes
operator||
name|QMessageBox
operator|::
name|Escape
argument_list|,
name|QMessageBox
operator|::
name|No
operator||
name|QMessageBox
operator|::
name|Default
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ret
argument_list|,
name|int
argument_list|(
name|QMessageBox
operator|::
name|No
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|keyToSend
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// the button text versions
name|keyToSend
operator|=
name|Qt
operator|::
name|Key_Enter
expr_stmt|;
name|sendKeySoon
argument_list|()
expr_stmt|;
name|ret
operator|=
name|QMessageBox
operator|::
name|information
argument_list|(
literal|0
argument_list|,
literal|"title"
argument_list|,
literal|"text"
argument_list|,
literal|"Yes"
argument_list|,
literal|"No"
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ret
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|keyToSend
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
literal|0
condition|)
block|{
comment|// don't run these tests since the dialog won't close!
name|keyToSend
operator|=
name|Qt
operator|::
name|Key_Escape
expr_stmt|;
name|sendKeySoon
argument_list|()
expr_stmt|;
name|ret
operator|=
name|QMessageBox
operator|::
name|information
argument_list|(
literal|0
argument_list|,
literal|"title"
argument_list|,
literal|"text"
argument_list|,
literal|"Yes"
argument_list|,
literal|"No"
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ret
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|keyToSend
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|keyToSend
operator|=
name|Qt
operator|::
name|Key_Escape
expr_stmt|;
name|sendKeySoon
argument_list|()
expr_stmt|;
name|ret
operator|=
name|QMessageBox
operator|::
name|information
argument_list|(
literal|0
argument_list|,
literal|"title"
argument_list|,
literal|"text"
argument_list|,
literal|"Yes"
argument_list|,
literal|"No"
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ret
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|keyToSend
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|instanceSourceCompat
name|void
name|tst_QMessageBox
operator|::
name|instanceSourceCompat
parameter_list|()
block|{
name|QMessageBox
name|mb
argument_list|(
literal|"Application name here"
argument_list|,
literal|"Saving the file will overwrite the original file on the disk.\n"
literal|"Do you really want to save?"
argument_list|,
name|QMessageBox
operator|::
name|Information
argument_list|,
name|QMessageBox
operator|::
name|Yes
operator||
name|QMessageBox
operator|::
name|Default
argument_list|,
name|QMessageBox
operator|::
name|No
argument_list|,
name|QMessageBox
operator|::
name|Cancel
operator||
name|QMessageBox
operator|::
name|Escape
argument_list|)
decl_stmt|;
name|mb
operator|.
name|setButtonText
argument_list|(
name|QMessageBox
operator|::
name|Yes
argument_list|,
literal|"Save"
argument_list|)
expr_stmt|;
name|mb
operator|.
name|setButtonText
argument_list|(
name|QMessageBox
operator|::
name|No
argument_list|,
literal|"Discard"
argument_list|)
expr_stmt|;
name|mb
operator|.
name|addButton
argument_list|(
literal|"&Revert"
argument_list|,
name|QMessageBox
operator|::
name|RejectRole
argument_list|)
expr_stmt|;
name|mb
operator|.
name|addButton
argument_list|(
literal|"&Zoo"
argument_list|,
name|QMessageBox
operator|::
name|ActionRole
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|exec
argument_list|(
operator|&
name|mb
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
argument_list|,
name|int
argument_list|(
name|QMessageBox
operator|::
name|Yes
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|exec
argument_list|(
operator|&
name|mb
argument_list|,
name|Qt
operator|::
name|Key_Escape
argument_list|)
argument_list|,
name|int
argument_list|(
name|QMessageBox
operator|::
name|Cancel
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_MAC
comment|// mnemonics are not used on Mac OS X
name|QCOMPARE
argument_list|(
name|exec
argument_list|(
operator|&
name|mb
argument_list|,
name|Qt
operator|::
name|ALT
operator|+
name|Qt
operator|::
name|Key_R
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|exec
argument_list|(
operator|&
name|mb
argument_list|,
name|Qt
operator|::
name|ALT
operator|+
name|Qt
operator|::
name|Key_Z
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|testSymbols
name|void
name|tst_QMessageBox
operator|::
name|testSymbols
parameter_list|()
block|{
return|return;
name|QMessageBox
operator|::
name|Icon
name|icon
decl_stmt|;
name|icon
operator|=
name|QMessageBox
operator|::
name|NoIcon
expr_stmt|;
name|icon
operator|=
name|QMessageBox
operator|::
name|Information
expr_stmt|;
name|icon
operator|=
name|QMessageBox
operator|::
name|Warning
expr_stmt|;
name|icon
operator|=
name|QMessageBox
operator|::
name|Critical
expr_stmt|;
name|icon
operator|=
name|QMessageBox
operator|::
name|Question
expr_stmt|;
name|QMessageBox
name|mb1
decl_stmt|;
name|QMessageBox
name|mb2
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QMessageBox
name|mb3
argument_list|(
operator|&
name|mb1
argument_list|)
decl_stmt|;
name|QMessageBox
name|mb3b
argument_list|(
literal|"title"
argument_list|,
literal|"text"
argument_list|,
name|QMessageBox
operator|::
name|Critical
argument_list|,
name|int
argument_list|(
name|QMessageBox
operator|::
name|Yes
argument_list|)
argument_list|,
name|int
argument_list|(
name|QMessageBox
operator|::
name|No
argument_list|)
argument_list|,
name|int
argument_list|(
name|QMessageBox
operator|::
name|Cancel
argument_list|)
argument_list|,
operator|&
name|mb1
argument_list|,
name|Qt
operator|::
name|Dialog
argument_list|)
decl_stmt|;
name|QMessageBox
operator|::
name|Button
name|button
init|=
name|QMessageBox
operator|::
name|NoButton
decl_stmt|;
name|button
operator|=
name|QMessageBox
operator|::
name|Ok
expr_stmt|;
name|button
operator|=
name|QMessageBox
operator|::
name|Cancel
expr_stmt|;
name|button
operator|=
name|QMessageBox
operator|::
name|Yes
expr_stmt|;
name|button
operator|=
name|QMessageBox
operator|::
name|No
expr_stmt|;
name|button
operator|=
name|QMessageBox
operator|::
name|Abort
expr_stmt|;
name|button
operator|=
name|QMessageBox
operator|::
name|Retry
expr_stmt|;
name|button
operator|=
name|QMessageBox
operator|::
name|Ignore
expr_stmt|;
name|button
operator|=
name|QMessageBox
operator|::
name|YesAll
expr_stmt|;
name|button
operator|=
name|QMessageBox
operator|::
name|NoAll
expr_stmt|;
name|button
operator|=
name|QMessageBox
operator|::
name|ButtonMask
expr_stmt|;
name|button
operator|=
name|QMessageBox
operator|::
name|Default
expr_stmt|;
name|button
operator|=
name|QMessageBox
operator|::
name|Escape
expr_stmt|;
name|button
operator|=
name|QMessageBox
operator|::
name|FlagMask
expr_stmt|;
name|QVERIFY
argument_list|(
name|button
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|text
init|=
name|QStringLiteral
argument_list|(
literal|"Foo"
argument_list|)
decl_stmt|;
name|mb1
operator|.
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mb1
operator|.
name|text
argument_list|()
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|icon
operator|=
name|mb1
operator|.
name|icon
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|icon
operator|==
name|QMessageBox
operator|::
name|NoIcon
argument_list|)
expr_stmt|;
name|mb1
operator|.
name|setIcon
argument_list|(
name|QMessageBox
operator|::
name|Question
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mb1
operator|.
name|icon
argument_list|()
operator|==
name|QMessageBox
operator|::
name|Question
argument_list|)
expr_stmt|;
name|QPixmap
name|iconPixmap
init|=
name|mb1
operator|.
name|iconPixmap
argument_list|()
decl_stmt|;
name|mb1
operator|.
name|setIconPixmap
argument_list|(
name|iconPixmap
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mb1
operator|.
name|icon
argument_list|()
operator|==
name|QMessageBox
operator|::
name|NoIcon
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mb1
operator|.
name|buttonText
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"OK"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mb1
operator|.
name|buttonText
argument_list|(
name|QMessageBox
operator|::
name|Cancel
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mb1
operator|.
name|buttonText
argument_list|(
name|QMessageBox
operator|::
name|Ok
operator||
name|QMessageBox
operator|::
name|Default
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|button1
init|=
name|QStringLiteral
argument_list|(
literal|"Bar"
argument_list|)
decl_stmt|;
name|mb2
operator|.
name|setButtonText
argument_list|(
name|QMessageBox
operator|::
name|Cancel
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|mb2
operator|.
name|setButtonText
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|,
name|button1
argument_list|)
expr_stmt|;
name|mb2
operator|.
name|setButtonText
argument_list|(
name|QMessageBox
operator|::
name|Ok
operator||
name|QMessageBox
operator|::
name|Default
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Baz"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mb2
operator|.
name|buttonText
argument_list|(
name|QMessageBox
operator|::
name|Cancel
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mb2
operator|.
name|buttonText
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|)
argument_list|,
name|button1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mb3b
operator|.
name|buttonText
argument_list|(
name|QMessageBox
operator|::
name|Yes
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"Yes"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mb3b
operator|.
name|buttonText
argument_list|(
name|QMessageBox
operator|::
name|YesAll
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mb3b
operator|.
name|buttonText
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|button2
init|=
name|QStringLiteral
argument_list|(
literal|"Blah"
argument_list|)
decl_stmt|;
name|mb3b
operator|.
name|setButtonText
argument_list|(
name|QMessageBox
operator|::
name|Yes
argument_list|,
name|button2
argument_list|)
expr_stmt|;
name|mb3b
operator|.
name|setButtonText
argument_list|(
name|QMessageBox
operator|::
name|YesAll
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Zoo"
argument_list|)
argument_list|)
expr_stmt|;
name|mb3b
operator|.
name|setButtonText
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Zoo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mb3b
operator|.
name|buttonText
argument_list|(
name|QMessageBox
operator|::
name|Yes
argument_list|)
argument_list|,
name|button2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mb3b
operator|.
name|buttonText
argument_list|(
name|QMessageBox
operator|::
name|YesAll
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mb3b
operator|.
name|buttonText
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mb1
operator|.
name|textFormat
argument_list|()
argument_list|,
name|Qt
operator|::
name|AutoText
argument_list|)
expr_stmt|;
name|mb1
operator|.
name|setTextFormat
argument_list|(
name|Qt
operator|::
name|PlainText
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mb1
operator|.
name|textFormat
argument_list|()
argument_list|,
name|Qt
operator|::
name|PlainText
argument_list|)
expr_stmt|;
name|CONVENIENCE_FUNC_SYMS
argument_list|(
name|information
argument_list|)
expr_stmt|;
name|CONVENIENCE_FUNC_SYMS_EXTRA
argument_list|(
name|information
argument_list|)
expr_stmt|;
name|CONVENIENCE_FUNC_SYMS
argument_list|(
name|question
argument_list|)
expr_stmt|;
name|CONVENIENCE_FUNC_SYMS_EXTRA
argument_list|(
name|question
argument_list|)
expr_stmt|;
name|CONVENIENCE_FUNC_SYMS
argument_list|(
name|warning
argument_list|)
expr_stmt|;
name|CONVENIENCE_FUNC_SYMS
argument_list|(
name|critical
argument_list|)
expr_stmt|;
name|QSize
name|sizeHint
init|=
name|mb1
operator|.
name|sizeHint
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|sizeHint
operator|.
name|width
argument_list|()
operator|>
literal|20
operator|&&
name|sizeHint
operator|.
name|height
argument_list|()
operator|>
literal|20
argument_list|)
expr_stmt|;
name|QMessageBox
operator|::
name|about
argument_list|(
operator|&
name|mb1
argument_list|,
literal|"title"
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|QMessageBox
operator|::
name|aboutQt
argument_list|(
operator|&
name|mb1
argument_list|)
expr_stmt|;
name|QMessageBox
operator|::
name|aboutQt
argument_list|(
operator|&
name|mb1
argument_list|,
literal|"title"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|detailsText
name|void
name|tst_QMessageBox
operator|::
name|detailsText
parameter_list|()
block|{
name|QMessageBox
name|box
decl_stmt|;
name|QString
name|text
argument_list|(
literal|"This is the details text."
argument_list|)
decl_stmt|;
name|box
operator|.
name|setDetailedText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|detailedText
argument_list|()
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|detailsButtonText
name|void
name|tst_QMessageBox
operator|::
name|detailsButtonText
parameter_list|()
block|{
name|QMessageBox
name|box
decl_stmt|;
name|box
operator|.
name|setDetailedText
argument_list|(
literal|"bla"
argument_list|)
expr_stmt|;
name|box
operator|.
name|open
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|box
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|LanguageChange
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QDialogButtonBox
modifier|*
name|bb
init|=
name|box
operator|.
name|findChild
argument_list|<
name|QDialogButtonBox
operator|*
argument_list|>
argument_list|(
literal|"qt_msgbox_buttonbox"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|bb
argument_list|)
expr_stmt|;
comment|//get the detail button
name|QList
argument_list|<
name|QAbstractButton
modifier|*
argument_list|>
name|list
init|=
name|bb
operator|->
name|buttons
argument_list|()
decl_stmt|;
name|QAbstractButton
modifier|*
name|btn
init|=
name|NULL
decl_stmt|;
foreach|foreach
control|(
name|btn
init|,
name|list
control|)
block|{
if|if
condition|(
name|btn
operator|&&
operator|(
name|btn
operator|->
name|inherits
argument_list|(
literal|"QPushButton"
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|btn
operator|->
name|text
argument_list|()
operator|.
name|remove
argument_list|(
literal|"&"
argument_list|)
operator|!=
name|QMessageBox
operator|::
name|tr
argument_list|(
literal|"OK"
argument_list|)
operator|&&
name|btn
operator|->
name|text
argument_list|()
operator|!=
name|QMessageBox
operator|::
name|tr
argument_list|(
literal|"Show Details..."
argument_list|)
condition|)
block|{
name|QFAIL
argument_list|(
name|qPrintable
argument_list|(
name|QString
argument_list|(
literal|"Unexpected messagebox button text: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|btn
operator|->
name|text
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|incorrectDefaultButton
name|void
name|tst_QMessageBox
operator|::
name|incorrectDefaultButton
parameter_list|()
block|{
name|keyToSend
operator|=
name|Qt
operator|::
name|Key_Escape
expr_stmt|;
name|sendKeySoon
argument_list|()
expr_stmt|;
comment|//Do not crash here
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QDialogButtonBox::createButton: Invalid ButtonRole, button not added"
argument_list|)
expr_stmt|;
name|QMessageBox
operator|::
name|question
argument_list|(
literal|0
argument_list|,
literal|""
argument_list|,
literal|"I've been hit!"
argument_list|,
name|QMessageBox
operator|::
name|Ok
operator||
name|QMessageBox
operator|::
name|Cancel
argument_list|,
name|QMessageBox
operator|::
name|Save
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|keyToSend
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|keyToSend
operator|=
name|Qt
operator|::
name|Key_Escape
expr_stmt|;
name|sendKeySoon
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QDialogButtonBox::createButton: Invalid ButtonRole, button not added"
argument_list|)
expr_stmt|;
name|QMessageBox
operator|::
name|question
argument_list|(
literal|0
argument_list|,
literal|""
argument_list|,
literal|"I've been hit!"
argument_list|,
name|QFlag
argument_list|(
name|QMessageBox
operator|::
name|Ok
operator||
name|QMessageBox
operator|::
name|Cancel
argument_list|)
argument_list|,
name|QMessageBox
operator|::
name|Save
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|keyToSend
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|keyToSend
operator|=
name|Qt
operator|::
name|Key_Escape
expr_stmt|;
name|sendKeySoon
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QDialogButtonBox::createButton: Invalid ButtonRole, button not added"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QDialogButtonBox::createButton: Invalid ButtonRole, button not added"
argument_list|)
expr_stmt|;
comment|//do not crash here -> call old function of QMessageBox in this case
name|QMessageBox
operator|::
name|question
argument_list|(
literal|0
argument_list|,
literal|""
argument_list|,
literal|"I've been hit!"
argument_list|,
name|QMessageBox
operator|::
name|Ok
operator||
name|QMessageBox
operator|::
name|Cancel
argument_list|,
name|QMessageBox
operator|::
name|Save
operator||
name|QMessageBox
operator|::
name|Cancel
argument_list|,
name|QMessageBox
operator|::
name|Ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|keyToSend
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateSize
name|void
name|tst_QMessageBox
operator|::
name|updateSize
parameter_list|()
block|{
name|QMessageBox
name|box
decl_stmt|;
name|box
operator|.
name|setText
argument_list|(
literal|"This is awesome"
argument_list|)
expr_stmt|;
name|box
operator|.
name|show
argument_list|()
expr_stmt|;
name|QSize
name|oldSize
init|=
name|box
operator|.
name|size
argument_list|()
decl_stmt|;
name|QString
name|longText
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
name|longText
operator|+=
name|box
operator|.
name|text
argument_list|()
expr_stmt|;
name|box
operator|.
name|setText
argument_list|(
name|longText
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|box
operator|.
name|size
argument_list|()
operator|!=
name|oldSize
argument_list|)
expr_stmt|;
comment|// should have grown
name|QVERIFY
argument_list|(
name|box
operator|.
name|width
argument_list|()
operator|>
name|oldSize
operator|.
name|width
argument_list|()
operator|||
name|box
operator|.
name|height
argument_list|()
operator|>
name|oldSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|oldSize
operator|=
name|box
operator|.
name|size
argument_list|()
expr_stmt|;
name|box
operator|.
name|setStandardButtons
argument_list|(
name|QMessageBox
operator|::
name|StandardButtons
argument_list|(
literal|0xFFFF
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|box
operator|.
name|size
argument_list|()
operator|!=
name|oldSize
argument_list|)
expr_stmt|;
comment|// should have grown
name|QVERIFY
argument_list|(
name|box
operator|.
name|width
argument_list|()
operator|>
name|oldSize
operator|.
name|width
argument_list|()
operator|||
name|box
operator|.
name|height
argument_list|()
operator|>
name|oldSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setInformativeText
name|void
name|tst_QMessageBox
operator|::
name|setInformativeText
parameter_list|()
block|{
name|QMessageBox
name|msgbox
argument_list|(
name|QMessageBox
operator|::
name|Warning
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
name|QMessageBox
operator|::
name|Ok
argument_list|)
decl_stmt|;
name|QString
name|itext
init|=
literal|"This is a very long message and it should make the dialog have enough width to fit this message in"
decl_stmt|;
name|msgbox
operator|.
name|setInformativeText
argument_list|(
name|itext
argument_list|)
expr_stmt|;
name|msgbox
operator|.
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|msgbox
operator|.
name|informativeText
argument_list|()
argument_list|,
name|itext
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|msgbox
operator|.
name|width
argument_list|()
operator|>
literal|190
argument_list|,
comment|//verify it's big enough (task181688)
name|qPrintable
argument_list|(
name|QString
argument_list|(
literal|"%1> 190"
argument_list|)
operator|.
name|arg
argument_list|(
name|msgbox
operator|.
name|width
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|iconPixmap
name|void
name|tst_QMessageBox
operator|::
name|iconPixmap
parameter_list|()
block|{
name|QMessageBox
name|messageBox
decl_stmt|;
name|QCOMPARE
argument_list|(
name|messageBox
operator|.
name|iconPixmap
argument_list|()
argument_list|,
name|QPixmap
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QMessageBox
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qmessagebox.moc"
end_include
end_unit
