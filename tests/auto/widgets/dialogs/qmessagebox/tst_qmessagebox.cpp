begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QMessageBox>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QPair>
end_include
begin_include
include|#
directive|include
file|<QList>
end_include
begin_include
include|#
directive|include
file|<QPointer>
end_include
begin_include
include|#
directive|include
file|<QTimer>
end_include
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QPushButton>
end_include
begin_include
include|#
directive|include
file|<QDialogButtonBox>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformtheme.h>
end_include
begin_include
include|#
directive|include
file|<private/qguiapplication_p.h>
end_include
begin_define
DECL|macro|CONVENIENCE_FUNC_SYMS
define|#
directive|define
name|CONVENIENCE_FUNC_SYMS
parameter_list|(
name|func
parameter_list|)
define|\
value|{ \         int x1 = QMessageBox::func(0, "Foo", "Bar"); \         int x3 = QMessageBox::func(0, "Foo", "Bar", "Save"); \         int x6 = QMessageBox::func(0, "Foo", "Bar", "Save", "Save As"); \         int x7 = QMessageBox::func(0, "Foo", "Bar", "Save", "Save As", "Dont Save"); \         int x8 = QMessageBox::func(0, "Foo", "Bar", "Save", "Save As", "Dont Save", 1); \         int x9 = QMessageBox::func(0, "Foo", "Bar", "Save", "Save As", "Dont Save", 1, 2); \         int x10 = QMessageBox::func(0, "Foo", "Bar", QMessageBox::YesAll, QMessageBox::Yes); \         int x11 = QMessageBox::func(0, "Foo", "Bar", QMessageBox::YesAll, QMessageBox::Yes, \                                     QMessageBox::No); \         qDebug("%d %d %d %d %d %d %d %d", x1, x3, x6, x7, x8, x9, x10, x11); \         { \         int x4 = QMessageBox::func(0, "Foo", "Bar", (int)QMessageBox::Yes, (int)QMessageBox::No); \         int x5 = QMessageBox::func(0, "Foo", "Bar", QMessageBox::Yes, (int)QMessageBox::No); \         int x6 = QMessageBox::func(0, "Foo", "Bar", QMessageBox::Yes | QMessageBox::Default, (int)QMessageBox::No); \         int x7 = QMessageBox::func(0, "Foo", "Bar", (int)QMessageBox::Yes, QMessageBox::No); \         int x8 = QMessageBox::func(0, "Foo", "Bar", QMessageBox::Yes, QMessageBox::No); \         int x9 = QMessageBox::func(0, "Foo", "Bar", QMessageBox::Yes | QMessageBox::Default, QMessageBox::No); \         int x10 = QMessageBox::func(0, "Foo", "Bar", (int)QMessageBox::Yes, (int)QMessageBox::No, (int)QMessageBox::Ok); \         int x11 = QMessageBox::func(0, "Foo", "Bar", QMessageBox::Yes, (int)QMessageBox::No, (int)QMessageBox::Ok); \         int x12 = QMessageBox::func(0, "Foo", "Bar", QMessageBox::Yes | QMessageBox::Default, (int)QMessageBox::No, (int)QMessageBox::Ok); \         int x13 = QMessageBox::func(0, "Foo", "Bar", (int)QMessageBox::Yes, QMessageBox::No, (int)QMessageBox::Ok); \         int x14 = QMessageBox::func(0, "Foo", "Bar", QMessageBox::Yes, QMessageBox::No, (int)QMessageBox::Ok); \         int x15 = QMessageBox::func(0, "Foo", "Bar", QMessageBox::Yes | QMessageBox::Default, QMessageBox::No, (int)QMessageBox::Ok); \         int x16 = QMessageBox::func(0, "Foo", "Bar", (int)QMessageBox::Yes, (int)QMessageBox::No, QMessageBox::Ok); \         int x17 = QMessageBox::func(0, "Foo", "Bar", QMessageBox::Yes, (int)QMessageBox::No, QMessageBox::Ok); \         int x18 = QMessageBox::func(0, "Foo", "Bar", QMessageBox::Yes | QMessageBox::Default, (int)QMessageBox::No, QMessageBox::Ok); \         int x19 = QMessageBox::func(0, "Foo", "Bar", (int)QMessageBox::Yes, QMessageBox::No, QMessageBox::Ok); \         int x20 = QMessageBox::func(0, "Foo", "Bar", QMessageBox::Yes, QMessageBox::No, QMessageBox::Ok); \         int x21 = QMessageBox::func(0, "Foo", "Bar", QMessageBox::Yes | QMessageBox::Default, QMessageBox::No, QMessageBox::Ok); \         qDebug("%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d", x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21); \         } \     }
end_define
begin_define
DECL|macro|CONVENIENCE_FUNC_SYMS_EXTRA
define|#
directive|define
name|CONVENIENCE_FUNC_SYMS_EXTRA
parameter_list|(
name|func
parameter_list|)
define|\
value|{ \         int x1 = QMessageBox::func(0, "Foo", "Bar", (int)QMessageBox::Yes); \         int x2 = QMessageBox::func(0, "Foo", "Bar", QMessageBox::Yes); \         int x3 = QMessageBox::func(0, "Foo", "Bar", QMessageBox::Yes | QMessageBox::Default); \         qDebug("%d %d %d", x1, x2, x3); \     }
end_define
begin_class
DECL|class|tst_QMessageBox
class|class
name|tst_QMessageBox
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|sanityTest
parameter_list|()
function_decl|;
name|void
name|defaultButton
parameter_list|()
function_decl|;
name|void
name|escapeButton
parameter_list|()
function_decl|;
name|void
name|button
parameter_list|()
function_decl|;
name|void
name|statics
parameter_list|()
function_decl|;
name|void
name|about
parameter_list|()
function_decl|;
name|void
name|detailsText
parameter_list|()
function_decl|;
name|void
name|detailsButtonText
parameter_list|()
function_decl|;
name|void
name|expandDetails_QTBUG_32473
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|Q_OS_MAC
name|void
name|shortcut
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|staticSourceCompat
parameter_list|()
function_decl|;
name|void
name|instanceSourceCompat
parameter_list|()
function_decl|;
name|void
name|testSymbols
parameter_list|()
function_decl|;
name|void
name|incorrectDefaultButton
parameter_list|()
function_decl|;
name|void
name|updateSize
parameter_list|()
function_decl|;
name|void
name|setInformativeText
parameter_list|()
function_decl|;
name|void
name|iconPixmap
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_class
DECL|class|tst_ResizingMessageBox
class|class
name|tst_ResizingMessageBox
super|:
specifier|public
name|QMessageBox
block|{
public|public:
DECL|function|tst_ResizingMessageBox
name|tst_ResizingMessageBox
parameter_list|()
member_init_list|:
name|QMessageBox
argument_list|()
member_init_list|,
name|resized
argument_list|(
literal|false
argument_list|)
block|{ }
DECL|member|resized
name|bool
name|resized
decl_stmt|;
protected|protected:
DECL|function|resizeEvent
name|void
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
name|event
parameter_list|)
block|{
name|resized
operator|=
literal|true
expr_stmt|;
name|QMessageBox
operator|::
name|resizeEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_comment
comment|// ExecCloseHelper: Closes a modal QDialog during its exec() function by either
end_comment
begin_comment
comment|// sending a key event or closing it (CloseWindow) once it becomes the active
end_comment
begin_comment
comment|// modal window. Pass nullptr to "autodetect" the instance for static methods.
end_comment
begin_class
DECL|class|ExecCloseHelper
class|class
name|ExecCloseHelper
super|:
specifier|public
name|QObject
block|{
public|public:
DECL|enumerator|CloseWindow
enum|enum
block|{
name|CloseWindow
init|=
operator|-
literal|1
block|}
enum|;
DECL|function|ExecCloseHelper
specifier|explicit
name|ExecCloseHelper
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
name|Q_NULLPTR
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_key
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_timerId
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_testCandidate
argument_list|(
name|Q_NULLPTR
argument_list|)
block|{ }
DECL|function|start
name|void
name|start
parameter_list|(
name|int
name|key
parameter_list|,
name|QWidget
modifier|*
name|testCandidate
init|=
name|Q_NULLPTR
parameter_list|)
block|{
name|m_key
operator|=
name|key
expr_stmt|;
name|m_testCandidate
operator|=
name|testCandidate
expr_stmt|;
name|m_timerId
operator|=
name|startTimer
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
DECL|function|done
name|bool
name|done
parameter_list|()
specifier|const
block|{
return|return
operator|!
name|m_timerId
return|;
block|}
protected|protected:
DECL|member|Q_DECL_OVERRIDE
name|void
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|te
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
private|private:
DECL|member|m_key
name|int
name|m_key
decl_stmt|;
DECL|member|m_timerId
name|int
name|m_timerId
decl_stmt|;
DECL|member|m_testCandidate
name|QWidget
modifier|*
name|m_testCandidate
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|timerEvent
name|void
name|ExecCloseHelper
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|te
parameter_list|)
block|{
if|if
condition|(
name|te
operator|->
name|timerId
argument_list|()
operator|!=
name|m_timerId
condition|)
return|return;
name|QWidget
modifier|*
name|modalWidget
init|=
name|QApplication
operator|::
name|activeModalWidget
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|m_testCandidate
operator|&&
name|modalWidget
condition|)
name|m_testCandidate
operator|=
name|modalWidget
expr_stmt|;
if|if
condition|(
name|m_testCandidate
operator|&&
name|m_testCandidate
operator|==
name|modalWidget
condition|)
block|{
if|if
condition|(
name|m_key
operator|==
name|CloseWindow
condition|)
block|{
name|m_testCandidate
operator|->
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QKeyEvent
modifier|*
name|ke
init|=
operator|new
name|QKeyEvent
argument_list|(
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|m_key
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|m_testCandidate
argument_list|,
name|ke
argument_list|)
expr_stmt|;
block|}
name|m_testCandidate
operator|=
name|Q_NULLPTR
expr_stmt|;
name|killTimer
argument_list|(
name|m_timerId
argument_list|)
expr_stmt|;
name|m_timerId
operator|=
name|m_key
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QMessageBox
operator|::
name|cleanup
parameter_list|()
block|{
name|QTRY_VERIFY
argument_list|(
name|QApplication
operator|::
name|topLevelWidgets
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// OS X requires TRY
block|}
end_function
begin_function
DECL|function|sanityTest
name|void
name|tst_QMessageBox
operator|::
name|sanityTest
parameter_list|()
block|{
name|QMessageBox
name|msgBox
decl_stmt|;
name|msgBox
operator|.
name|setText
argument_list|(
literal|"This is insane"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
name|msgBox
operator|.
name|setIcon
argument_list|(
name|QMessageBox
operator|::
name|Icon
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|setIconPixmap
argument_list|(
name|QPixmap
argument_list|()
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|setIconPixmap
argument_list|(
name|QPixmap
argument_list|(
literal|"whatever.png"
argument_list|)
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|setTextFormat
argument_list|(
name|Qt
operator|::
name|RichText
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|setTextFormat
argument_list|(
name|Qt
operator|::
name|PlainText
argument_list|)
expr_stmt|;
name|ExecCloseHelper
name|closeHelper
decl_stmt|;
name|closeHelper
operator|.
name|start
argument_list|(
name|ExecCloseHelper
operator|::
name|CloseWindow
argument_list|,
operator|&
name|msgBox
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|exec
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|button
name|void
name|tst_QMessageBox
operator|::
name|button
parameter_list|()
block|{
name|QMessageBox
name|msgBox
decl_stmt|;
name|msgBox
operator|.
name|addButton
argument_list|(
literal|"retry"
argument_list|,
name|QMessageBox
operator|::
name|DestructiveRole
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|msgBox
operator|.
name|button
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// not added yet
name|QPushButton
modifier|*
name|b1
init|=
name|msgBox
operator|.
name|addButton
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|msgBox
operator|.
name|button
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|)
argument_list|,
operator|(
name|QAbstractButton
operator|*
operator|)
name|b1
argument_list|)
expr_stmt|;
comment|// just added
name|QCOMPARE
argument_list|(
name|msgBox
operator|.
name|standardButton
argument_list|(
name|b1
argument_list|)
argument_list|,
name|QMessageBox
operator|::
name|Ok
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|addButton
argument_list|(
name|QMessageBox
operator|::
name|Cancel
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|msgBox
operator|.
name|standardButtons
argument_list|()
argument_list|,
name|QMessageBox
operator|::
name|Ok
operator||
name|QMessageBox
operator|::
name|Cancel
argument_list|)
expr_stmt|;
comment|// remove the cancel, should not exist anymore
name|msgBox
operator|.
name|setStandardButtons
argument_list|(
name|QMessageBox
operator|::
name|Yes
operator||
name|QMessageBox
operator|::
name|No
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|msgBox
operator|.
name|button
argument_list|(
name|QMessageBox
operator|::
name|Cancel
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|msgBox
operator|.
name|button
argument_list|(
name|QMessageBox
operator|::
name|Yes
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|// should not crash
name|QPushButton
modifier|*
name|b4
init|=
operator|new
name|QPushButton
decl_stmt|;
name|msgBox
operator|.
name|addButton
argument_list|(
name|b4
argument_list|,
name|QMessageBox
operator|::
name|DestructiveRole
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|addButton
argument_list|(
literal|0
argument_list|,
name|QMessageBox
operator|::
name|ActionRole
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|defaultButton
name|void
name|tst_QMessageBox
operator|::
name|defaultButton
parameter_list|()
block|{
name|QMessageBox
name|msgBox
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|msgBox
operator|.
name|defaultButton
argument_list|()
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|addButton
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|addButton
argument_list|(
name|QMessageBox
operator|::
name|Cancel
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|msgBox
operator|.
name|defaultButton
argument_list|()
argument_list|)
expr_stmt|;
name|QPushButton
name|pushButton
decl_stmt|;
name|msgBox
operator|.
name|setDefaultButton
argument_list|(
operator|&
name|pushButton
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|msgBox
operator|.
name|defaultButton
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// we have not added it yet
name|QPushButton
modifier|*
name|retryButton
init|=
name|msgBox
operator|.
name|addButton
argument_list|(
name|QMessageBox
operator|::
name|Retry
argument_list|)
decl_stmt|;
name|msgBox
operator|.
name|setDefaultButton
argument_list|(
name|retryButton
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|msgBox
operator|.
name|defaultButton
argument_list|()
argument_list|,
name|retryButton
argument_list|)
expr_stmt|;
name|ExecCloseHelper
name|closeHelper
decl_stmt|;
name|closeHelper
operator|.
name|start
argument_list|(
name|ExecCloseHelper
operator|::
name|CloseWindow
argument_list|,
operator|&
name|msgBox
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|msgBox
operator|.
name|clickedButton
argument_list|()
argument_list|,
name|msgBox
operator|.
name|button
argument_list|(
name|QMessageBox
operator|::
name|Cancel
argument_list|)
argument_list|)
expr_stmt|;
name|closeHelper
operator|.
name|start
argument_list|(
name|Qt
operator|::
name|Key_Enter
argument_list|,
operator|&
name|msgBox
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|msgBox
operator|.
name|clickedButton
argument_list|()
argument_list|,
operator|(
name|QAbstractButton
operator|*
operator|)
name|retryButton
argument_list|)
expr_stmt|;
name|QAbstractButton
modifier|*
name|okButton
init|=
name|msgBox
operator|.
name|button
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|)
decl_stmt|;
name|msgBox
operator|.
name|setDefaultButton
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|msgBox
operator|.
name|defaultButton
argument_list|()
argument_list|,
operator|(
name|QPushButton
operator|*
operator|)
name|okButton
argument_list|)
expr_stmt|;
name|closeHelper
operator|.
name|start
argument_list|(
name|Qt
operator|::
name|Key_Enter
argument_list|,
operator|&
name|msgBox
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|msgBox
operator|.
name|clickedButton
argument_list|()
argument_list|,
name|okButton
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|setDefaultButton
argument_list|(
name|QMessageBox
operator|::
name|Yes
argument_list|)
expr_stmt|;
comment|// its not in there!
name|QCOMPARE
argument_list|(
name|msgBox
operator|.
name|defaultButton
argument_list|()
argument_list|,
name|okButton
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|removeButton
argument_list|(
name|okButton
argument_list|)
expr_stmt|;
operator|delete
name|okButton
expr_stmt|;
name|okButton
operator|=
literal|0
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|msgBox
operator|.
name|defaultButton
argument_list|()
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|setDefaultButton
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|msgBox
operator|.
name|defaultButton
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|escapeButton
name|void
name|tst_QMessageBox
operator|::
name|escapeButton
parameter_list|()
block|{
name|QMessageBox
name|msgBox
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|msgBox
operator|.
name|escapeButton
argument_list|()
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|addButton
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|)
expr_stmt|;
name|ExecCloseHelper
name|closeHelper
decl_stmt|;
name|closeHelper
operator|.
name|start
argument_list|(
name|ExecCloseHelper
operator|::
name|CloseWindow
argument_list|,
operator|&
name|msgBox
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|msgBox
operator|.
name|clickedButton
argument_list|()
operator|==
name|msgBox
operator|.
name|button
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|)
argument_list|)
expr_stmt|;
comment|// auto detected (one button only)
name|msgBox
operator|.
name|addButton
argument_list|(
name|QMessageBox
operator|::
name|Cancel
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|msgBox
operator|.
name|escapeButton
argument_list|()
argument_list|)
expr_stmt|;
name|QPushButton
name|invalidButton
decl_stmt|;
name|msgBox
operator|.
name|setEscapeButton
argument_list|(
operator|&
name|invalidButton
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|msgBox
operator|.
name|escapeButton
argument_list|()
argument_list|)
expr_stmt|;
name|QAbstractButton
modifier|*
name|retryButton
init|=
name|msgBox
operator|.
name|addButton
argument_list|(
name|QMessageBox
operator|::
name|Retry
argument_list|)
decl_stmt|;
name|closeHelper
operator|.
name|start
argument_list|(
name|ExecCloseHelper
operator|::
name|CloseWindow
argument_list|,
operator|&
name|msgBox
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|msgBox
operator|.
name|clickedButton
argument_list|()
operator|==
name|msgBox
operator|.
name|button
argument_list|(
name|QMessageBox
operator|::
name|Cancel
argument_list|)
argument_list|)
expr_stmt|;
comment|// auto detected (cancel)
name|msgBox
operator|.
name|setEscapeButton
argument_list|(
name|retryButton
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|msgBox
operator|.
name|escapeButton
argument_list|()
argument_list|,
operator|(
name|QAbstractButton
operator|*
operator|)
name|retryButton
argument_list|)
expr_stmt|;
comment|// with escape
name|closeHelper
operator|.
name|start
argument_list|(
name|Qt
operator|::
name|Key_Escape
argument_list|,
operator|&
name|msgBox
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|msgBox
operator|.
name|clickedButton
argument_list|()
argument_list|,
name|retryButton
argument_list|)
expr_stmt|;
comment|// with close
name|closeHelper
operator|.
name|start
argument_list|(
name|ExecCloseHelper
operator|::
name|CloseWindow
argument_list|,
operator|&
name|msgBox
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|msgBox
operator|.
name|clickedButton
argument_list|()
argument_list|,
operator|(
name|QAbstractButton
operator|*
operator|)
name|retryButton
argument_list|)
expr_stmt|;
name|QAbstractButton
modifier|*
name|okButton
init|=
name|msgBox
operator|.
name|button
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|)
decl_stmt|;
name|msgBox
operator|.
name|setEscapeButton
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|msgBox
operator|.
name|escapeButton
argument_list|()
argument_list|,
name|okButton
argument_list|)
expr_stmt|;
name|closeHelper
operator|.
name|start
argument_list|(
name|Qt
operator|::
name|Key_Escape
argument_list|,
operator|&
name|msgBox
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|msgBox
operator|.
name|clickedButton
argument_list|()
argument_list|,
name|okButton
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|setEscapeButton
argument_list|(
name|QMessageBox
operator|::
name|Yes
argument_list|)
expr_stmt|;
comment|// its not in there!
name|QCOMPARE
argument_list|(
name|msgBox
operator|.
name|escapeButton
argument_list|()
argument_list|,
name|okButton
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|removeButton
argument_list|(
name|okButton
argument_list|)
expr_stmt|;
operator|delete
name|okButton
expr_stmt|;
name|okButton
operator|=
literal|0
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|msgBox
operator|.
name|escapeButton
argument_list|()
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|setEscapeButton
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|msgBox
operator|.
name|escapeButton
argument_list|()
argument_list|)
expr_stmt|;
name|QMessageBox
name|msgBox2
decl_stmt|;
name|msgBox2
operator|.
name|addButton
argument_list|(
name|QMessageBox
operator|::
name|Yes
argument_list|)
expr_stmt|;
name|msgBox2
operator|.
name|addButton
argument_list|(
name|QMessageBox
operator|::
name|No
argument_list|)
expr_stmt|;
name|closeHelper
operator|.
name|start
argument_list|(
name|ExecCloseHelper
operator|::
name|CloseWindow
argument_list|,
operator|&
name|msgBox2
argument_list|)
expr_stmt|;
name|msgBox2
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|msgBox2
operator|.
name|clickedButton
argument_list|()
operator|==
name|msgBox2
operator|.
name|button
argument_list|(
name|QMessageBox
operator|::
name|No
argument_list|)
argument_list|)
expr_stmt|;
comment|// auto detected (one No button only)
name|QPushButton
modifier|*
name|rejectButton
init|=
operator|new
name|QPushButton
decl_stmt|;
name|msgBox2
operator|.
name|addButton
argument_list|(
name|rejectButton
argument_list|,
name|QMessageBox
operator|::
name|RejectRole
argument_list|)
expr_stmt|;
name|closeHelper
operator|.
name|start
argument_list|(
name|ExecCloseHelper
operator|::
name|CloseWindow
argument_list|,
operator|&
name|msgBox2
argument_list|)
expr_stmt|;
name|msgBox2
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|msgBox2
operator|.
name|clickedButton
argument_list|()
operator|==
name|rejectButton
argument_list|)
expr_stmt|;
comment|// auto detected (one reject button only)
name|msgBox2
operator|.
name|addButton
argument_list|(
operator|new
name|QPushButton
argument_list|,
name|QMessageBox
operator|::
name|RejectRole
argument_list|)
expr_stmt|;
name|closeHelper
operator|.
name|start
argument_list|(
name|ExecCloseHelper
operator|::
name|CloseWindow
argument_list|,
operator|&
name|msgBox2
argument_list|)
expr_stmt|;
name|msgBox2
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|msgBox2
operator|.
name|clickedButton
argument_list|()
operator|==
name|msgBox2
operator|.
name|button
argument_list|(
name|QMessageBox
operator|::
name|No
argument_list|)
argument_list|)
expr_stmt|;
comment|// auto detected (one No button only)
block|}
end_function
begin_function
DECL|function|statics
name|void
name|tst_QMessageBox
operator|::
name|statics
parameter_list|()
block|{
name|QMessageBox
operator|::
name|StandardButton
function_decl|(
modifier|*
name|statics
index|[
literal|4
index|]
function_decl|)
parameter_list|(
name|QWidget
modifier|*
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
name|QMessageBox
operator|::
name|StandardButtons
name|buttons
parameter_list|,
name|QMessageBox
operator|::
name|StandardButton
parameter_list|)
function_decl|;
name|statics
index|[
literal|0
index|]
operator|=
name|QMessageBox
operator|::
name|information
expr_stmt|;
name|statics
index|[
literal|1
index|]
operator|=
name|QMessageBox
operator|::
name|critical
expr_stmt|;
name|statics
index|[
literal|2
index|]
operator|=
name|QMessageBox
operator|::
name|question
expr_stmt|;
name|statics
index|[
literal|3
index|]
operator|=
name|QMessageBox
operator|::
name|warning
expr_stmt|;
name|ExecCloseHelper
name|closeHelper
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|closeHelper
operator|.
name|start
argument_list|(
name|Qt
operator|::
name|Key_Escape
argument_list|)
expr_stmt|;
name|QMessageBox
operator|::
name|StandardButton
name|sb
init|=
call|(
modifier|*
name|statics
index|[
name|i
index|]
call|)
argument_list|(
literal|0
argument_list|,
literal|"caption"
argument_list|,
literal|"text"
argument_list|,
name|QMessageBox
operator|::
name|Yes
operator||
name|QMessageBox
operator|::
name|No
operator||
name|QMessageBox
operator|::
name|Help
operator||
name|QMessageBox
operator|::
name|Cancel
argument_list|,
name|QMessageBox
operator|::
name|NoButton
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|sb
argument_list|,
name|QMessageBox
operator|::
name|Cancel
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|closeHelper
operator|.
name|done
argument_list|()
argument_list|)
expr_stmt|;
name|closeHelper
operator|.
name|start
argument_list|(
name|ExecCloseHelper
operator|::
name|CloseWindow
argument_list|)
expr_stmt|;
name|sb
operator|=
call|(
modifier|*
name|statics
index|[
name|i
index|]
call|)
argument_list|(
literal|0
argument_list|,
literal|"caption"
argument_list|,
literal|"text"
argument_list|,
name|QMessageBox
operator|::
name|Yes
operator||
name|QMessageBox
operator|::
name|No
operator||
name|QMessageBox
operator|::
name|Help
operator||
name|QMessageBox
operator|::
name|Cancel
argument_list|,
name|QMessageBox
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sb
argument_list|,
name|QMessageBox
operator|::
name|Cancel
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|closeHelper
operator|.
name|done
argument_list|()
argument_list|)
expr_stmt|;
name|closeHelper
operator|.
name|start
argument_list|(
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|sb
operator|=
call|(
modifier|*
name|statics
index|[
name|i
index|]
call|)
argument_list|(
literal|0
argument_list|,
literal|"caption"
argument_list|,
literal|"text"
argument_list|,
name|QMessageBox
operator|::
name|Yes
operator||
name|QMessageBox
operator|::
name|No
operator||
name|QMessageBox
operator|::
name|Help
argument_list|,
name|QMessageBox
operator|::
name|Yes
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sb
argument_list|,
name|QMessageBox
operator|::
name|Yes
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|closeHelper
operator|.
name|done
argument_list|()
argument_list|)
expr_stmt|;
name|closeHelper
operator|.
name|start
argument_list|(
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|sb
operator|=
call|(
modifier|*
name|statics
index|[
name|i
index|]
call|)
argument_list|(
literal|0
argument_list|,
literal|"caption"
argument_list|,
literal|"text"
argument_list|,
name|QMessageBox
operator|::
name|Yes
operator||
name|QMessageBox
operator|::
name|No
operator||
name|QMessageBox
operator|::
name|Help
argument_list|,
name|QMessageBox
operator|::
name|No
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sb
argument_list|,
name|QMessageBox
operator|::
name|No
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|closeHelper
operator|.
name|done
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// shortcuts are not used on OS X
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_MAC
end_ifndef
begin_function
DECL|function|shortcut
name|void
name|tst_QMessageBox
operator|::
name|shortcut
parameter_list|()
block|{
name|QMessageBox
name|msgBox
decl_stmt|;
name|msgBox
operator|.
name|addButton
argument_list|(
literal|"O&k"
argument_list|,
name|QMessageBox
operator|::
name|YesRole
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|addButton
argument_list|(
literal|"&No"
argument_list|,
name|QMessageBox
operator|::
name|YesRole
argument_list|)
expr_stmt|;
name|msgBox
operator|.
name|addButton
argument_list|(
literal|"&Maybe"
argument_list|,
name|QMessageBox
operator|::
name|YesRole
argument_list|)
expr_stmt|;
name|ExecCloseHelper
name|closeHelper
decl_stmt|;
name|closeHelper
operator|.
name|start
argument_list|(
name|Qt
operator|::
name|Key_M
argument_list|,
operator|&
name|msgBox
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|msgBox
operator|.
name|exec
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|about
name|void
name|tst_QMessageBox
operator|::
name|about
parameter_list|()
block|{
name|ExecCloseHelper
name|closeHelper
decl_stmt|;
name|closeHelper
operator|.
name|start
argument_list|(
name|Qt
operator|::
name|Key_Escape
argument_list|)
expr_stmt|;
name|QMessageBox
operator|::
name|about
argument_list|(
literal|0
argument_list|,
literal|"Caption"
argument_list|,
literal|"This is an auto test"
argument_list|)
expr_stmt|;
comment|// On Mac, about and aboutQt are not modal, so we need to
comment|// explicitly run the event loop
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|QTRY_VERIFY
argument_list|(
name|closeHelper
operator|.
name|done
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|QVERIFY
argument_list|(
name|closeHelper
operator|.
name|done
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
specifier|const
name|int
name|keyToSend
init|=
name|Qt
operator|::
name|Key_Enter
decl_stmt|;
else|#
directive|else
specifier|const
name|keyToSend
operator|=
name|Qt
operator|::
name|Key_Escape
expr_stmt|;
endif|#
directive|endif
name|closeHelper
operator|.
name|start
argument_list|(
name|keyToSend
argument_list|)
expr_stmt|;
name|QMessageBox
operator|::
name|aboutQt
argument_list|(
literal|0
argument_list|,
literal|"Caption"
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|QTRY_VERIFY
argument_list|(
name|closeHelper
operator|.
name|done
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|QVERIFY
argument_list|(
name|closeHelper
operator|.
name|done
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|staticSourceCompat
name|void
name|tst_QMessageBox
operator|::
name|staticSourceCompat
parameter_list|()
block|{
name|int
name|ret
decl_stmt|;
comment|// source compat tests for< 4.2
name|ExecCloseHelper
name|closeHelper
decl_stmt|;
name|closeHelper
operator|.
name|start
argument_list|(
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|ret
operator|=
name|QMessageBox
operator|::
name|information
argument_list|(
literal|0
argument_list|,
literal|"title"
argument_list|,
literal|"text"
argument_list|,
name|QMessageBox
operator|::
name|Yes
argument_list|,
name|QMessageBox
operator|::
name|No
argument_list|)
expr_stmt|;
name|int
name|expectedButton
init|=
name|int
argument_list|(
name|QMessageBox
operator|::
name|Yes
argument_list|)
decl_stmt|;
if|if
condition|(
specifier|const
name|QPlatformTheme
modifier|*
name|theme
init|=
name|QGuiApplicationPrivate
operator|::
name|platformTheme
argument_list|()
condition|)
block|{
specifier|const
name|int
name|dialogButtonBoxLayout
init|=
name|theme
operator|->
name|themeHint
argument_list|(
name|QPlatformTheme
operator|::
name|DialogButtonBoxLayout
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|dialogButtonBoxLayout
operator|==
name|QDialogButtonBox
operator|::
name|MacLayout
operator|||
name|dialogButtonBoxLayout
operator|==
name|QDialogButtonBox
operator|::
name|GnomeLayout
condition|)
name|expectedButton
operator|=
name|int
argument_list|(
name|QMessageBox
operator|::
name|No
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|ret
argument_list|,
name|expectedButton
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|closeHelper
operator|.
name|done
argument_list|()
argument_list|)
expr_stmt|;
name|closeHelper
operator|.
name|start
argument_list|(
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|ret
operator|=
name|QMessageBox
operator|::
name|information
argument_list|(
literal|0
argument_list|,
literal|"title"
argument_list|,
literal|"text"
argument_list|,
name|QMessageBox
operator|::
name|Yes
operator||
name|QMessageBox
operator|::
name|Default
argument_list|,
name|QMessageBox
operator|::
name|No
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ret
argument_list|,
name|int
argument_list|(
name|QMessageBox
operator|::
name|Yes
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|closeHelper
operator|.
name|done
argument_list|()
argument_list|)
expr_stmt|;
name|closeHelper
operator|.
name|start
argument_list|(
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|ret
operator|=
name|QMessageBox
operator|::
name|information
argument_list|(
literal|0
argument_list|,
literal|"title"
argument_list|,
literal|"text"
argument_list|,
name|QMessageBox
operator|::
name|Yes
argument_list|,
name|QMessageBox
operator|::
name|No
operator||
name|QMessageBox
operator|::
name|Default
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ret
argument_list|,
name|int
argument_list|(
name|QMessageBox
operator|::
name|No
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|closeHelper
operator|.
name|done
argument_list|()
argument_list|)
expr_stmt|;
name|closeHelper
operator|.
name|start
argument_list|(
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|ret
operator|=
name|QMessageBox
operator|::
name|information
argument_list|(
literal|0
argument_list|,
literal|"title"
argument_list|,
literal|"text"
argument_list|,
name|QMessageBox
operator|::
name|Yes
operator||
name|QMessageBox
operator|::
name|Default
argument_list|,
name|QMessageBox
operator|::
name|No
operator||
name|QMessageBox
operator|::
name|Escape
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ret
argument_list|,
name|int
argument_list|(
name|QMessageBox
operator|::
name|Yes
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|closeHelper
operator|.
name|done
argument_list|()
argument_list|)
expr_stmt|;
name|closeHelper
operator|.
name|start
argument_list|(
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|ret
operator|=
name|QMessageBox
operator|::
name|information
argument_list|(
literal|0
argument_list|,
literal|"title"
argument_list|,
literal|"text"
argument_list|,
name|QMessageBox
operator|::
name|Yes
operator||
name|QMessageBox
operator|::
name|Escape
argument_list|,
name|QMessageBox
operator|::
name|No
operator||
name|QMessageBox
operator|::
name|Default
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ret
argument_list|,
name|int
argument_list|(
name|QMessageBox
operator|::
name|No
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|closeHelper
operator|.
name|done
argument_list|()
argument_list|)
expr_stmt|;
comment|// the button text versions
name|closeHelper
operator|.
name|start
argument_list|(
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|ret
operator|=
name|QMessageBox
operator|::
name|information
argument_list|(
literal|0
argument_list|,
literal|"title"
argument_list|,
literal|"text"
argument_list|,
literal|"Yes"
argument_list|,
literal|"No"
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ret
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|closeHelper
operator|.
name|done
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|0
condition|)
block|{
comment|// don't run these tests since the dialog won't close!
name|closeHelper
operator|.
name|start
argument_list|(
name|Qt
operator|::
name|Key_Escape
argument_list|)
expr_stmt|;
name|ret
operator|=
name|QMessageBox
operator|::
name|information
argument_list|(
literal|0
argument_list|,
literal|"title"
argument_list|,
literal|"text"
argument_list|,
literal|"Yes"
argument_list|,
literal|"No"
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ret
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|closeHelper
operator|.
name|done
argument_list|()
argument_list|)
expr_stmt|;
name|closeHelper
operator|.
name|start
argument_list|(
name|Qt
operator|::
name|Key_Escape
argument_list|)
expr_stmt|;
name|ret
operator|=
name|QMessageBox
operator|::
name|information
argument_list|(
literal|0
argument_list|,
literal|"title"
argument_list|,
literal|"text"
argument_list|,
literal|"Yes"
argument_list|,
literal|"No"
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ret
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|closeHelper
operator|.
name|done
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|instanceSourceCompat
name|void
name|tst_QMessageBox
operator|::
name|instanceSourceCompat
parameter_list|()
block|{
name|QMessageBox
name|mb
argument_list|(
literal|"Application name here"
argument_list|,
literal|"Saving the file will overwrite the original file on the disk.\n"
literal|"Do you really want to save?"
argument_list|,
name|QMessageBox
operator|::
name|Information
argument_list|,
name|QMessageBox
operator|::
name|Yes
operator||
name|QMessageBox
operator|::
name|Default
argument_list|,
name|QMessageBox
operator|::
name|No
argument_list|,
name|QMessageBox
operator|::
name|Cancel
operator||
name|QMessageBox
operator|::
name|Escape
argument_list|)
decl_stmt|;
name|mb
operator|.
name|setButtonText
argument_list|(
name|QMessageBox
operator|::
name|Yes
argument_list|,
literal|"Save"
argument_list|)
expr_stmt|;
name|mb
operator|.
name|setButtonText
argument_list|(
name|QMessageBox
operator|::
name|No
argument_list|,
literal|"Discard"
argument_list|)
expr_stmt|;
name|mb
operator|.
name|addButton
argument_list|(
literal|"&Revert"
argument_list|,
name|QMessageBox
operator|::
name|RejectRole
argument_list|)
expr_stmt|;
name|mb
operator|.
name|addButton
argument_list|(
literal|"&Zoo"
argument_list|,
name|QMessageBox
operator|::
name|ActionRole
argument_list|)
expr_stmt|;
name|ExecCloseHelper
name|closeHelper
decl_stmt|;
name|closeHelper
operator|.
name|start
argument_list|(
name|Qt
operator|::
name|Key_Enter
argument_list|,
operator|&
name|mb
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mb
operator|.
name|exec
argument_list|()
argument_list|,
name|int
argument_list|(
name|QMessageBox
operator|::
name|Yes
argument_list|)
argument_list|)
expr_stmt|;
name|closeHelper
operator|.
name|start
argument_list|(
name|Qt
operator|::
name|Key_Escape
argument_list|,
operator|&
name|mb
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mb
operator|.
name|exec
argument_list|()
argument_list|,
name|int
argument_list|(
name|QMessageBox
operator|::
name|Cancel
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_MAC
comment|// mnemonics are not used on OS X
name|closeHelper
operator|.
name|start
argument_list|(
name|Qt
operator|::
name|ALT
operator|+
name|Qt
operator|::
name|Key_R
argument_list|,
operator|&
name|mb
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mb
operator|.
name|exec
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|closeHelper
operator|.
name|start
argument_list|(
name|Qt
operator|::
name|ALT
operator|+
name|Qt
operator|::
name|Key_Z
argument_list|,
operator|&
name|mb
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mb
operator|.
name|exec
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|testSymbols
name|void
name|tst_QMessageBox
operator|::
name|testSymbols
parameter_list|()
block|{
return|return;
name|QMessageBox
operator|::
name|Icon
name|icon
decl_stmt|;
name|icon
operator|=
name|QMessageBox
operator|::
name|NoIcon
expr_stmt|;
name|icon
operator|=
name|QMessageBox
operator|::
name|Information
expr_stmt|;
name|icon
operator|=
name|QMessageBox
operator|::
name|Warning
expr_stmt|;
name|icon
operator|=
name|QMessageBox
operator|::
name|Critical
expr_stmt|;
name|icon
operator|=
name|QMessageBox
operator|::
name|Question
expr_stmt|;
name|QMessageBox
name|mb1
decl_stmt|;
name|QMessageBox
name|mb2
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QMessageBox
name|mb3
argument_list|(
operator|&
name|mb1
argument_list|)
decl_stmt|;
name|QMessageBox
name|mb3b
argument_list|(
literal|"title"
argument_list|,
literal|"text"
argument_list|,
name|QMessageBox
operator|::
name|Critical
argument_list|,
name|int
argument_list|(
name|QMessageBox
operator|::
name|Yes
argument_list|)
argument_list|,
name|int
argument_list|(
name|QMessageBox
operator|::
name|No
argument_list|)
argument_list|,
name|int
argument_list|(
name|QMessageBox
operator|::
name|Cancel
argument_list|)
argument_list|,
operator|&
name|mb1
argument_list|,
name|Qt
operator|::
name|Dialog
argument_list|)
decl_stmt|;
name|QMessageBox
operator|::
name|Button
name|button
init|=
name|QMessageBox
operator|::
name|NoButton
decl_stmt|;
name|button
operator|=
name|QMessageBox
operator|::
name|Ok
expr_stmt|;
name|button
operator|=
name|QMessageBox
operator|::
name|Cancel
expr_stmt|;
name|button
operator|=
name|QMessageBox
operator|::
name|Yes
expr_stmt|;
name|button
operator|=
name|QMessageBox
operator|::
name|No
expr_stmt|;
name|button
operator|=
name|QMessageBox
operator|::
name|Abort
expr_stmt|;
name|button
operator|=
name|QMessageBox
operator|::
name|Retry
expr_stmt|;
name|button
operator|=
name|QMessageBox
operator|::
name|Ignore
expr_stmt|;
name|button
operator|=
name|QMessageBox
operator|::
name|YesAll
expr_stmt|;
name|button
operator|=
name|QMessageBox
operator|::
name|NoAll
expr_stmt|;
name|button
operator|=
name|QMessageBox
operator|::
name|ButtonMask
expr_stmt|;
name|button
operator|=
name|QMessageBox
operator|::
name|Default
expr_stmt|;
name|button
operator|=
name|QMessageBox
operator|::
name|Escape
expr_stmt|;
name|button
operator|=
name|QMessageBox
operator|::
name|FlagMask
expr_stmt|;
name|QVERIFY
argument_list|(
name|button
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|text
init|=
name|QStringLiteral
argument_list|(
literal|"Foo"
argument_list|)
decl_stmt|;
name|mb1
operator|.
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mb1
operator|.
name|text
argument_list|()
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|icon
operator|=
name|mb1
operator|.
name|icon
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|icon
argument_list|,
name|QMessageBox
operator|::
name|NoIcon
argument_list|)
expr_stmt|;
name|mb1
operator|.
name|setIcon
argument_list|(
name|QMessageBox
operator|::
name|Question
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mb1
operator|.
name|icon
argument_list|()
argument_list|,
name|QMessageBox
operator|::
name|Question
argument_list|)
expr_stmt|;
name|QPixmap
name|iconPixmap
init|=
name|mb1
operator|.
name|iconPixmap
argument_list|()
decl_stmt|;
name|mb1
operator|.
name|setIconPixmap
argument_list|(
name|iconPixmap
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mb1
operator|.
name|icon
argument_list|()
argument_list|,
name|QMessageBox
operator|::
name|NoIcon
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mb1
operator|.
name|buttonText
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"OK"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mb1
operator|.
name|buttonText
argument_list|(
name|QMessageBox
operator|::
name|Cancel
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mb1
operator|.
name|buttonText
argument_list|(
name|QMessageBox
operator|::
name|Ok
operator||
name|QMessageBox
operator|::
name|Default
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|button1
init|=
name|QStringLiteral
argument_list|(
literal|"Bar"
argument_list|)
decl_stmt|;
name|mb2
operator|.
name|setButtonText
argument_list|(
name|QMessageBox
operator|::
name|Cancel
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|mb2
operator|.
name|setButtonText
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|,
name|button1
argument_list|)
expr_stmt|;
name|mb2
operator|.
name|setButtonText
argument_list|(
name|QMessageBox
operator|::
name|Ok
operator||
name|QMessageBox
operator|::
name|Default
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Baz"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mb2
operator|.
name|buttonText
argument_list|(
name|QMessageBox
operator|::
name|Cancel
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mb2
operator|.
name|buttonText
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|)
argument_list|,
name|button1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mb3b
operator|.
name|buttonText
argument_list|(
name|QMessageBox
operator|::
name|Yes
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"Yes"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mb3b
operator|.
name|buttonText
argument_list|(
name|QMessageBox
operator|::
name|YesAll
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mb3b
operator|.
name|buttonText
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|button2
init|=
name|QStringLiteral
argument_list|(
literal|"Blah"
argument_list|)
decl_stmt|;
name|mb3b
operator|.
name|setButtonText
argument_list|(
name|QMessageBox
operator|::
name|Yes
argument_list|,
name|button2
argument_list|)
expr_stmt|;
name|mb3b
operator|.
name|setButtonText
argument_list|(
name|QMessageBox
operator|::
name|YesAll
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Zoo"
argument_list|)
argument_list|)
expr_stmt|;
name|mb3b
operator|.
name|setButtonText
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Zoo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mb3b
operator|.
name|buttonText
argument_list|(
name|QMessageBox
operator|::
name|Yes
argument_list|)
argument_list|,
name|button2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mb3b
operator|.
name|buttonText
argument_list|(
name|QMessageBox
operator|::
name|YesAll
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mb3b
operator|.
name|buttonText
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mb1
operator|.
name|textFormat
argument_list|()
argument_list|,
name|Qt
operator|::
name|AutoText
argument_list|)
expr_stmt|;
name|mb1
operator|.
name|setTextFormat
argument_list|(
name|Qt
operator|::
name|PlainText
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mb1
operator|.
name|textFormat
argument_list|()
argument_list|,
name|Qt
operator|::
name|PlainText
argument_list|)
expr_stmt|;
name|CONVENIENCE_FUNC_SYMS
argument_list|(
name|information
argument_list|)
expr_stmt|;
name|CONVENIENCE_FUNC_SYMS_EXTRA
argument_list|(
name|information
argument_list|)
expr_stmt|;
name|CONVENIENCE_FUNC_SYMS
argument_list|(
name|question
argument_list|)
expr_stmt|;
name|CONVENIENCE_FUNC_SYMS_EXTRA
argument_list|(
name|question
argument_list|)
expr_stmt|;
name|CONVENIENCE_FUNC_SYMS
argument_list|(
name|warning
argument_list|)
expr_stmt|;
name|CONVENIENCE_FUNC_SYMS
argument_list|(
name|critical
argument_list|)
expr_stmt|;
name|QSize
name|sizeHint
init|=
name|mb1
operator|.
name|sizeHint
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|sizeHint
operator|.
name|width
argument_list|()
operator|>
literal|20
operator|&&
name|sizeHint
operator|.
name|height
argument_list|()
operator|>
literal|20
argument_list|)
expr_stmt|;
name|QMessageBox
operator|::
name|about
argument_list|(
operator|&
name|mb1
argument_list|,
literal|"title"
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|QMessageBox
operator|::
name|aboutQt
argument_list|(
operator|&
name|mb1
argument_list|)
expr_stmt|;
name|QMessageBox
operator|::
name|aboutQt
argument_list|(
operator|&
name|mb1
argument_list|,
literal|"title"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|detailsText
name|void
name|tst_QMessageBox
operator|::
name|detailsText
parameter_list|()
block|{
name|QMessageBox
name|box
decl_stmt|;
name|QString
name|text
argument_list|(
literal|"This is the details text."
argument_list|)
decl_stmt|;
name|box
operator|.
name|setDetailedText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|detailedText
argument_list|()
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|box
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|box
argument_list|)
expr_stmt|;
comment|// QTBUG-39334, the box should now have the default "Ok" button as well as
comment|// the "Show Details.." button.
name|QCOMPARE
argument_list|(
name|box
operator|.
name|findChildren
argument_list|<
name|QAbstractButton
operator|*
argument_list|>
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|detailsButtonText
name|void
name|tst_QMessageBox
operator|::
name|detailsButtonText
parameter_list|()
block|{
name|QMessageBox
name|box
decl_stmt|;
name|box
operator|.
name|setDetailedText
argument_list|(
literal|"bla"
argument_list|)
expr_stmt|;
name|box
operator|.
name|open
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|box
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|LanguageChange
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QDialogButtonBox
modifier|*
name|bb
init|=
name|box
operator|.
name|findChild
argument_list|<
name|QDialogButtonBox
operator|*
argument_list|>
argument_list|(
literal|"qt_msgbox_buttonbox"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|bb
argument_list|)
expr_stmt|;
comment|//get the detail button
name|QList
argument_list|<
name|QAbstractButton
modifier|*
argument_list|>
name|list
init|=
name|bb
operator|->
name|buttons
argument_list|()
decl_stmt|;
name|QAbstractButton
modifier|*
name|btn
init|=
name|NULL
decl_stmt|;
foreach|foreach
control|(
name|btn
init|,
name|list
control|)
block|{
if|if
condition|(
name|btn
operator|&&
operator|(
name|btn
operator|->
name|inherits
argument_list|(
literal|"QPushButton"
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|btn
operator|->
name|text
argument_list|()
operator|.
name|remove
argument_list|(
name|QLatin1Char
argument_list|(
literal|'&'
argument_list|)
argument_list|)
operator|!=
name|QMessageBox
operator|::
name|tr
argument_list|(
literal|"OK"
argument_list|)
operator|&&
name|btn
operator|->
name|text
argument_list|()
operator|!=
name|QMessageBox
operator|::
name|tr
argument_list|(
literal|"Show Details..."
argument_list|)
condition|)
block|{
name|QFAIL
argument_list|(
name|qPrintable
argument_list|(
name|QString
argument_list|(
literal|"Unexpected messagebox button text: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|btn
operator|->
name|text
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|expandDetails_QTBUG_32473
name|void
name|tst_QMessageBox
operator|::
name|expandDetails_QTBUG_32473
parameter_list|()
block|{
name|tst_ResizingMessageBox
name|box
decl_stmt|;
name|box
operator|.
name|setDetailedText
argument_list|(
literal|"bla"
argument_list|)
expr_stmt|;
name|box
operator|.
name|show
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|box
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|LanguageChange
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QDialogButtonBox
modifier|*
name|bb
init|=
name|box
operator|.
name|findChild
argument_list|<
name|QDialogButtonBox
operator|*
argument_list|>
argument_list|(
literal|"qt_msgbox_buttonbox"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|bb
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QAbstractButton
modifier|*
argument_list|>
name|list
init|=
name|bb
operator|->
name|buttons
argument_list|()
decl_stmt|;
name|QAbstractButton
modifier|*
name|moreButton
init|=
name|NULL
decl_stmt|;
foreach|foreach
control|(
name|QAbstractButton
modifier|*
name|btn
decl|,
name|list
control|)
if|if
condition|(
name|btn
operator|&&
name|bb
operator|->
name|buttonRole
argument_list|(
name|btn
argument_list|)
operator|==
name|QDialogButtonBox
operator|::
name|ActionRole
condition|)
name|moreButton
operator|=
name|btn
expr_stmt|;
name|QVERIFY
argument_list|(
name|moreButton
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|box
argument_list|)
argument_list|)
expr_stmt|;
name|QRect
name|geom
init|=
name|box
operator|.
name|geometry
argument_list|()
decl_stmt|;
name|box
operator|.
name|resized
operator|=
literal|false
expr_stmt|;
name|moreButton
operator|->
name|click
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|box
operator|.
name|resized
argument_list|)
expr_stmt|;
comment|// After we receive the expose event for a second widget, it's likely
comment|// that the window manager is also done manipulating the first QMessageBox.
name|QWidget
name|fleece
decl_stmt|;
name|fleece
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|fleece
argument_list|)
expr_stmt|;
if|if
condition|(
name|geom
operator|.
name|topLeft
argument_list|()
operator|==
name|box
operator|.
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
condition|)
name|QTest
operator|::
name|qWait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|geom
operator|.
name|topLeft
argument_list|()
argument_list|,
name|box
operator|.
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|incorrectDefaultButton
name|void
name|tst_QMessageBox
operator|::
name|incorrectDefaultButton
parameter_list|()
block|{
name|ExecCloseHelper
name|closeHelper
decl_stmt|;
name|closeHelper
operator|.
name|start
argument_list|(
name|Qt
operator|::
name|Key_Escape
argument_list|)
expr_stmt|;
comment|//Do not crash here
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QDialogButtonBox::createButton: Invalid ButtonRole, button not added"
argument_list|)
expr_stmt|;
name|QMessageBox
operator|::
name|question
argument_list|(
literal|0
argument_list|,
literal|""
argument_list|,
literal|"I've been hit!"
argument_list|,
name|QMessageBox
operator|::
name|Ok
operator||
name|QMessageBox
operator|::
name|Cancel
argument_list|,
name|QMessageBox
operator|::
name|Save
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|closeHelper
operator|.
name|done
argument_list|()
argument_list|)
expr_stmt|;
name|closeHelper
operator|.
name|start
argument_list|(
name|Qt
operator|::
name|Key_Escape
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QDialogButtonBox::createButton: Invalid ButtonRole, button not added"
argument_list|)
expr_stmt|;
name|QMessageBox
operator|::
name|question
argument_list|(
literal|0
argument_list|,
literal|""
argument_list|,
literal|"I've been hit!"
argument_list|,
name|QFlag
argument_list|(
name|QMessageBox
operator|::
name|Ok
operator||
name|QMessageBox
operator|::
name|Cancel
argument_list|)
argument_list|,
name|QMessageBox
operator|::
name|Save
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|closeHelper
operator|.
name|done
argument_list|()
argument_list|)
expr_stmt|;
name|closeHelper
operator|.
name|start
argument_list|(
name|Qt
operator|::
name|Key_Escape
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QDialogButtonBox::createButton: Invalid ButtonRole, button not added"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QDialogButtonBox::createButton: Invalid ButtonRole, button not added"
argument_list|)
expr_stmt|;
comment|//do not crash here -> call old function of QMessageBox in this case
name|QMessageBox
operator|::
name|question
argument_list|(
literal|0
argument_list|,
literal|""
argument_list|,
literal|"I've been hit!"
argument_list|,
name|QMessageBox
operator|::
name|Ok
operator||
name|QMessageBox
operator|::
name|Cancel
argument_list|,
name|QMessageBox
operator|::
name|Save
operator||
name|QMessageBox
operator|::
name|Cancel
argument_list|,
name|QMessageBox
operator|::
name|Ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|closeHelper
operator|.
name|done
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateSize
name|void
name|tst_QMessageBox
operator|::
name|updateSize
parameter_list|()
block|{
name|QMessageBox
name|box
decl_stmt|;
name|box
operator|.
name|setText
argument_list|(
literal|"This is awesome"
argument_list|)
expr_stmt|;
name|box
operator|.
name|show
argument_list|()
expr_stmt|;
name|QSize
name|oldSize
init|=
name|box
operator|.
name|size
argument_list|()
decl_stmt|;
name|QString
name|longText
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
name|longText
operator|+=
name|box
operator|.
name|text
argument_list|()
expr_stmt|;
name|box
operator|.
name|setText
argument_list|(
name|longText
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|box
operator|.
name|size
argument_list|()
operator|!=
name|oldSize
argument_list|)
expr_stmt|;
comment|// should have grown
name|QVERIFY
argument_list|(
name|box
operator|.
name|width
argument_list|()
operator|>
name|oldSize
operator|.
name|width
argument_list|()
operator|||
name|box
operator|.
name|height
argument_list|()
operator|>
name|oldSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|oldSize
operator|=
name|box
operator|.
name|size
argument_list|()
expr_stmt|;
name|box
operator|.
name|setStandardButtons
argument_list|(
name|QMessageBox
operator|::
name|StandardButtons
argument_list|(
literal|0xFFFF
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|box
operator|.
name|size
argument_list|()
operator|!=
name|oldSize
argument_list|)
expr_stmt|;
comment|// should have grown
name|QVERIFY
argument_list|(
name|box
operator|.
name|width
argument_list|()
operator|>
name|oldSize
operator|.
name|width
argument_list|()
operator|||
name|box
operator|.
name|height
argument_list|()
operator|>
name|oldSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setInformativeText
name|void
name|tst_QMessageBox
operator|::
name|setInformativeText
parameter_list|()
block|{
name|QMessageBox
name|msgbox
argument_list|(
name|QMessageBox
operator|::
name|Warning
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
name|QMessageBox
operator|::
name|Ok
argument_list|)
decl_stmt|;
name|QString
name|itext
init|=
literal|"This is a very long message and it should make the dialog have enough width to fit this message in"
decl_stmt|;
name|msgbox
operator|.
name|setInformativeText
argument_list|(
name|itext
argument_list|)
expr_stmt|;
name|msgbox
operator|.
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|msgbox
operator|.
name|informativeText
argument_list|()
argument_list|,
name|itext
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|msgbox
operator|.
name|width
argument_list|()
operator|>
literal|190
argument_list|,
comment|//verify it's big enough (task181688)
name|qPrintable
argument_list|(
name|QString
argument_list|(
literal|"%1> 190"
argument_list|)
operator|.
name|arg
argument_list|(
name|msgbox
operator|.
name|width
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|iconPixmap
name|void
name|tst_QMessageBox
operator|::
name|iconPixmap
parameter_list|()
block|{
name|QMessageBox
name|messageBox
decl_stmt|;
name|QCOMPARE
argument_list|(
name|messageBox
operator|.
name|iconPixmap
argument_list|()
argument_list|,
name|QPixmap
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QMessageBox
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qmessagebox.moc"
end_include
end_unit
