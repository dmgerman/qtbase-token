begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qfiledialog.h>
end_include
begin_include
include|#
directive|include
file|<qabstractitemdelegate.h>
end_include
begin_include
include|#
directive|include
file|<qdirmodel.h>
end_include
begin_include
include|#
directive|include
file|<qitemdelegate.h>
end_include
begin_include
include|#
directive|include
file|<qlistview.h>
end_include
begin_include
include|#
directive|include
file|<qcombobox.h>
end_include
begin_include
include|#
directive|include
file|<qpushbutton.h>
end_include
begin_include
include|#
directive|include
file|<qtoolbutton.h>
end_include
begin_include
include|#
directive|include
file|<qtreeview.h>
end_include
begin_include
include|#
directive|include
file|<qheaderview.h>
end_include
begin_include
include|#
directive|include
file|<qcompleter.h>
end_include
begin_include
include|#
directive|include
file|<qaction.h>
end_include
begin_include
include|#
directive|include
file|<qdialogbuttonbox.h>
end_include
begin_include
include|#
directive|include
file|<qsortfilterproxymodel.h>
end_include
begin_include
include|#
directive|include
file|<qlineedit.h>
end_include
begin_include
include|#
directive|include
file|<qlayout.h>
end_include
begin_if
if|#
directive|if
name|defined
name|QT_BUILD_INTERNAL
end_if
begin_include
include|#
directive|include
file|<private/qsidebar_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qfilesystemmodel_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qfiledialog_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QFileDialog>
end_include
begin_include
include|#
directive|include
file|<QFileSystemModel>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
end_if
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_function_decl
name|QT_BEGIN_NAMESPACE
specifier|extern
name|Q_GUI_EXPORT
name|QString
name|qt_tildeExpansion
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|,
name|bool
modifier|*
name|expanded
init|=
literal|0
parameter_list|)
function_decl|;
end_function_decl
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|QNonNativeFileDialog
class|class
name|QNonNativeFileDialog
super|:
specifier|public
name|QFileDialog
block|{
name|Q_OBJECT
public|public:
DECL|function|QNonNativeFileDialog
name|QNonNativeFileDialog
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|,
specifier|const
name|QString
modifier|&
name|caption
init|=
name|QString
argument_list|()
parameter_list|,
specifier|const
name|QString
modifier|&
name|directory
init|=
name|QString
argument_list|()
parameter_list|,
specifier|const
name|QString
modifier|&
name|filter
init|=
name|QString
argument_list|()
parameter_list|)
member_init_list|:
name|QFileDialog
argument_list|(
name|parent
argument_list|,
name|caption
argument_list|,
name|directory
argument_list|,
name|filter
argument_list|)
block|{
name|setOption
argument_list|(
name|QFileDialog
operator|::
name|DontUseNativeDialog
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|tst_QFiledialog
class|class
name|tst_QFiledialog
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QFiledialog
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QFiledialog
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|currentChangedSignal
parameter_list|()
function_decl|;
name|void
name|directoryEnteredSignal
parameter_list|()
function_decl|;
name|void
name|filesSelectedSignal_data
parameter_list|()
function_decl|;
name|void
name|filesSelectedSignal
parameter_list|()
function_decl|;
name|void
name|filterSelectedSignal
parameter_list|()
function_decl|;
name|void
name|args
parameter_list|()
function_decl|;
name|void
name|directory
parameter_list|()
function_decl|;
name|void
name|completer_data
parameter_list|()
function_decl|;
name|void
name|completer
parameter_list|()
function_decl|;
name|void
name|completer_up
parameter_list|()
function_decl|;
name|void
name|acceptMode
parameter_list|()
function_decl|;
name|void
name|confirmOverwrite
parameter_list|()
function_decl|;
name|void
name|defaultSuffix
parameter_list|()
function_decl|;
name|void
name|fileMode
parameter_list|()
function_decl|;
name|void
name|filters
parameter_list|()
function_decl|;
name|void
name|history
parameter_list|()
function_decl|;
name|void
name|iconProvider
parameter_list|()
function_decl|;
name|void
name|isReadOnly
parameter_list|()
function_decl|;
name|void
name|itemDelegate
parameter_list|()
function_decl|;
name|void
name|labelText
parameter_list|()
function_decl|;
name|void
name|resolveSymlinks
parameter_list|()
function_decl|;
name|void
name|selectFile_data
parameter_list|()
function_decl|;
name|void
name|selectFile
parameter_list|()
function_decl|;
name|void
name|selectFiles
parameter_list|()
function_decl|;
name|void
name|selectFilter
parameter_list|()
function_decl|;
name|void
name|viewMode
parameter_list|()
function_decl|;
name|void
name|proxymodel
parameter_list|()
function_decl|;
name|void
name|setNameFilter
parameter_list|()
function_decl|;
name|void
name|focus
parameter_list|()
function_decl|;
name|void
name|caption
parameter_list|()
function_decl|;
name|void
name|historyBack
parameter_list|()
function_decl|;
name|void
name|historyForward
parameter_list|()
function_decl|;
name|void
name|disableSaveButton_data
parameter_list|()
function_decl|;
name|void
name|disableSaveButton
parameter_list|()
function_decl|;
name|void
name|saveButtonText_data
parameter_list|()
function_decl|;
name|void
name|saveButtonText
parameter_list|()
function_decl|;
name|void
name|clearLineEdit
parameter_list|()
function_decl|;
name|void
name|enableChooseButton
parameter_list|()
function_decl|;
name|void
name|hooks
parameter_list|()
function_decl|;
ifdef|#
directive|ifdef
name|Q_OS_UNIX
name|void
name|tildeExpansion_data
parameter_list|()
function_decl|;
name|void
name|tildeExpansion
parameter_list|()
function_decl|;
endif|#
directive|endif
private|private:
DECL|member|userSettings
name|QByteArray
name|userSettings
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QFiledialog
name|tst_QFiledialog
operator|::
name|tst_QFiledialog
parameter_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~tst_QFiledialog
name|tst_QFiledialog
operator|::
name|~
name|tst_QFiledialog
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|init
name|void
name|tst_QFiledialog
operator|::
name|init
parameter_list|()
block|{
comment|// Save the developers settings so they don't get mad when their sidebar folders are gone.
name|QSettings
name|settings
argument_list|(
name|QSettings
operator|::
name|UserScope
argument_list|,
name|QLatin1String
argument_list|(
literal|"Trolltech"
argument_list|)
argument_list|)
decl_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
name|QLatin1String
argument_list|(
literal|"Qt"
argument_list|)
argument_list|)
expr_stmt|;
name|userSettings
operator|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"filedialog"
argument_list|)
argument_list|)
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
name|settings
operator|.
name|remove
argument_list|(
name|QLatin1String
argument_list|(
literal|"filedialog"
argument_list|)
argument_list|)
expr_stmt|;
comment|// populate it with some default settings
name|QNonNativeFileDialog
name|fd
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QTest
operator|::
name|qWait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QFiledialog
operator|::
name|cleanup
parameter_list|()
block|{
name|QSettings
name|settings
argument_list|(
name|QSettings
operator|::
name|UserScope
argument_list|,
name|QLatin1String
argument_list|(
literal|"Trolltech"
argument_list|)
argument_list|)
decl_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
name|QLatin1String
argument_list|(
literal|"Qt"
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
name|QLatin1String
argument_list|(
literal|"filedialog"
argument_list|)
argument_list|,
name|userSettings
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|MyAbstractItemDelegate
class|class
name|MyAbstractItemDelegate
super|:
specifier|public
name|QAbstractItemDelegate
block|{
public|public:
DECL|function|MyAbstractItemDelegate
name|MyAbstractItemDelegate
parameter_list|()
member_init_list|:
name|QAbstractItemDelegate
argument_list|()
block|{}
empty_stmt|;
DECL|function|paint
name|void
name|paint
parameter_list|(
name|QPainter
modifier|*
parameter_list|,
specifier|const
name|QStyleOptionViewItem
modifier|&
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
specifier|const
block|{}
DECL|function|sizeHint
name|QSize
name|sizeHint
parameter_list|(
specifier|const
name|QStyleOptionViewItem
modifier|&
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
specifier|const
block|{
return|return
name|QSize
argument_list|()
return|;
block|}
block|}
class|;
end_class
begin_comment
comment|// emitted any time the selection model emits current changed
end_comment
begin_function
DECL|function|currentChangedSignal
name|void
name|tst_QFiledialog
operator|::
name|currentChangedSignal
parameter_list|()
block|{
name|QNonNativeFileDialog
name|fd
decl_stmt|;
name|fd
operator|.
name|setViewMode
argument_list|(
name|QFileDialog
operator|::
name|List
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spyCurrentChanged
argument_list|(
operator|&
name|fd
argument_list|,
name|SIGNAL
argument_list|(
name|currentChanged
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QListView
modifier|*
name|listView
init|=
name|qFindChild
argument_list|<
name|QListView
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"listView"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|listView
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setDirectory
argument_list|(
name|QDir
operator|::
name|root
argument_list|()
argument_list|)
expr_stmt|;
name|QModelIndex
name|root
init|=
name|listView
operator|->
name|rootIndex
argument_list|()
decl_stmt|;
name|QTRY_COMPARE
argument_list|(
name|listView
operator|->
name|model
argument_list|()
operator|->
name|rowCount
argument_list|(
name|root
argument_list|)
operator|>
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QModelIndex
name|folder
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listView
operator|->
name|model
argument_list|()
operator|->
name|rowCount
argument_list|(
name|root
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|folder
operator|=
name|listView
operator|->
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
name|root
argument_list|)
expr_stmt|;
if|if
condition|(
name|listView
operator|->
name|model
argument_list|()
operator|->
name|hasChildren
argument_list|(
name|folder
argument_list|)
condition|)
break|break;
block|}
name|QVERIFY
argument_list|(
name|listView
operator|->
name|model
argument_list|()
operator|->
name|hasChildren
argument_list|(
name|folder
argument_list|)
argument_list|)
expr_stmt|;
name|listView
operator|->
name|setCurrentIndex
argument_list|(
name|folder
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyCurrentChanged
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// only emitted from the views, sidebar, or lookin combo
end_comment
begin_function
DECL|function|directoryEnteredSignal
name|void
name|tst_QFiledialog
operator|::
name|directoryEnteredSignal
parameter_list|()
block|{
if|#
directive|if
name|defined
name|QT_BUILD_INTERNAL
name|QNonNativeFileDialog
name|fd
argument_list|(
literal|0
argument_list|,
literal|""
argument_list|,
name|QDir
operator|::
name|root
argument_list|()
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
name|fd
operator|.
name|setOptions
argument_list|(
name|QFileDialog
operator|::
name|DontUseNativeDialog
argument_list|)
expr_stmt|;
name|fd
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|fd
operator|.
name|isVisible
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spyDirectoryEntered
argument_list|(
operator|&
name|fd
argument_list|,
name|SIGNAL
argument_list|(
name|directoryEntered
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// sidebar
name|QSidebar
modifier|*
name|sidebar
init|=
name|qFindChild
argument_list|<
name|QSidebar
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"sidebar"
argument_list|)
decl_stmt|;
name|sidebar
operator|->
name|setCurrentIndex
argument_list|(
name|sidebar
operator|->
name|model
argument_list|()
operator|->
name|index
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|sidebar
operator|->
name|viewport
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_Return
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyDirectoryEntered
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spyDirectoryEntered
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// lookInCombo
name|QComboBox
modifier|*
name|comboBox
init|=
name|qFindChild
argument_list|<
name|QComboBox
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"lookInCombo"
argument_list|)
decl_stmt|;
name|comboBox
operator|->
name|showPopup
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|comboBox
operator|->
name|view
argument_list|()
operator|->
name|model
argument_list|()
operator|->
name|index
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|comboBox
operator|->
name|view
argument_list|()
operator|->
name|setCurrentIndex
argument_list|(
name|comboBox
operator|->
name|view
argument_list|()
operator|->
name|model
argument_list|()
operator|->
name|index
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|comboBox
operator|->
name|view
argument_list|()
operator|->
name|viewport
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_Return
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyDirectoryEntered
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spyDirectoryEntered
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// view
comment|/*     // platform specific     fd.setViewMode(QFileDialog::ViewMode(QFileDialog::List));     QListView* listView = qFindChild<QListView*>(&fd, "listView");     QVERIFY(listView);     QModelIndex root = listView->rootIndex();     QTRY_COMPARE(listView->model()->rowCount(root)> 0, true);      QModelIndex folder;     for (int i = 0; i< listView->model()->rowCount(root); ++i) {         folder = listView->model()->index(i, 0, root);         if (listView->model()->hasChildren(folder))             break;     }     QVERIFY(listView->model()->hasChildren(folder));     listView->setCurrentIndex(folder);     QTRY_COMPARE((listView->indexAt(listView->visualRect(folder).center())), folder);     QTest::mouseDClick(listView->viewport(), Qt::LeftButton, 0, listView->visualRect(folder).center());     QTRY_COMPARE(spyDirectoryEntered.count(), 1);     */
endif|#
directive|endif
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QFileDialog::FileMode
argument_list|)
end_macro
begin_function
DECL|function|filesSelectedSignal_data
name|void
name|tst_QFiledialog
operator|::
name|filesSelectedSignal_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QFileDialog
operator|::
name|FileMode
argument_list|>
argument_list|(
literal|"fileMode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"any"
argument_list|)
operator|<<
name|QFileDialog
operator|::
name|AnyFile
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"existing"
argument_list|)
operator|<<
name|QFileDialog
operator|::
name|ExistingFile
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"directory"
argument_list|)
operator|<<
name|QFileDialog
operator|::
name|Directory
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"directoryOnly"
argument_list|)
operator|<<
name|QFileDialog
operator|::
name|DirectoryOnly
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"existingFiles"
argument_list|)
operator|<<
name|QFileDialog
operator|::
name|ExistingFiles
expr_stmt|;
block|}
end_function
begin_comment
comment|// emitted when the dialog closes with the selected files
end_comment
begin_function
DECL|function|filesSelectedSignal
name|void
name|tst_QFiledialog
operator|::
name|filesSelectedSignal
parameter_list|()
block|{
name|QNonNativeFileDialog
name|fd
decl_stmt|;
name|fd
operator|.
name|setViewMode
argument_list|(
name|QFileDialog
operator|::
name|List
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setOptions
argument_list|(
name|QFileDialog
operator|::
name|DontUseNativeDialog
argument_list|)
expr_stmt|;
name|QDir
name|testDir
argument_list|(
name|SRCDIR
argument_list|)
decl_stmt|;
name|fd
operator|.
name|setDirectory
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QFileDialog
operator|::
name|FileMode
argument_list|,
name|fileMode
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setFileMode
argument_list|(
name|fileMode
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spyFilesSelected
argument_list|(
operator|&
name|fd
argument_list|,
name|SIGNAL
argument_list|(
name|filesSelected
argument_list|(
specifier|const
name|QStringList
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|fd
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|QListView
modifier|*
name|listView
init|=
name|qFindChild
argument_list|<
name|QListView
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"listView"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|listView
argument_list|)
expr_stmt|;
name|QModelIndex
name|root
init|=
name|listView
operator|->
name|rootIndex
argument_list|()
decl_stmt|;
name|QTRY_COMPARE
argument_list|(
name|listView
operator|->
name|model
argument_list|()
operator|->
name|rowCount
argument_list|(
name|root
argument_list|)
operator|>
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QModelIndex
name|file
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listView
operator|->
name|model
argument_list|()
operator|->
name|rowCount
argument_list|(
name|root
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|file
operator|=
name|listView
operator|->
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
name|root
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileMode
operator|==
name|QFileDialog
operator|::
name|Directory
operator|||
name|fileMode
operator|==
name|QFileDialog
operator|::
name|DirectoryOnly
condition|)
block|{
if|if
condition|(
name|listView
operator|->
name|model
argument_list|()
operator|->
name|hasChildren
argument_list|(
name|file
argument_list|)
condition|)
break|break;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|listView
operator|->
name|model
argument_list|()
operator|->
name|hasChildren
argument_list|(
name|file
argument_list|)
condition|)
break|break;
block|}
name|file
operator|=
name|QModelIndex
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|file
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|listView
operator|->
name|selectionModel
argument_list|()
operator|->
name|select
argument_list|(
name|file
argument_list|,
name|QItemSelectionModel
operator|::
name|Select
operator||
name|QItemSelectionModel
operator|::
name|Rows
argument_list|)
expr_stmt|;
name|listView
operator|->
name|setCurrentIndex
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|QDialogButtonBox
modifier|*
name|buttonBox
init|=
name|qFindChild
argument_list|<
name|QDialogButtonBox
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"buttonBox"
argument_list|)
decl_stmt|;
name|QPushButton
modifier|*
name|button
init|=
name|buttonBox
operator|->
name|button
argument_list|(
name|QDialogButtonBox
operator|::
name|Open
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|button
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|button
operator|->
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|button
operator|->
name|animateClick
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|fd
operator|.
name|isVisible
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyFilesSelected
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// only emitted when the combo box is activated
end_comment
begin_function
DECL|function|filterSelectedSignal
name|void
name|tst_QFiledialog
operator|::
name|filterSelectedSignal
parameter_list|()
block|{
name|QNonNativeFileDialog
name|fd
decl_stmt|;
name|fd
operator|.
name|setAcceptMode
argument_list|(
name|QFileDialog
operator|::
name|AcceptSave
argument_list|)
expr_stmt|;
name|fd
operator|.
name|show
argument_list|()
expr_stmt|;
name|QSignalSpy
name|spyFilterSelected
argument_list|(
operator|&
name|fd
argument_list|,
name|SIGNAL
argument_list|(
name|filterSelected
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QStringList
name|filterChoices
decl_stmt|;
name|filterChoices
operator|<<
literal|"Image files (*.png *.xpm *.jpg)"
operator|<<
literal|"Text files (*.txt)"
operator|<<
literal|"Any files (*.*)"
expr_stmt|;
name|fd
operator|.
name|setNameFilters
argument_list|(
name|filterChoices
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|nameFilters
argument_list|()
argument_list|,
name|filterChoices
argument_list|)
expr_stmt|;
name|QComboBox
modifier|*
name|filters
init|=
name|qFindChild
argument_list|<
name|QComboBox
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"fileTypeCombo"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|filters
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|filters
operator|->
name|view
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|filters
operator|->
name|isVisible
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|filters
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyFilterSelected
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|args
name|void
name|tst_QFiledialog
operator|::
name|args
parameter_list|()
block|{
name|QWidget
modifier|*
name|parent
init|=
literal|0
decl_stmt|;
name|QString
name|caption
init|=
literal|"caption"
decl_stmt|;
name|QString
name|directory
init|=
name|QDir
operator|::
name|tempPath
argument_list|()
decl_stmt|;
name|QString
name|filter
init|=
literal|"*.mp3"
decl_stmt|;
name|QNonNativeFileDialog
name|fd
argument_list|(
name|parent
argument_list|,
name|caption
argument_list|,
name|directory
argument_list|,
name|filter
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|parent
argument_list|()
argument_list|,
operator|(
name|QObject
operator|*
operator|)
name|parent
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|windowTitle
argument_list|()
argument_list|,
name|caption
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WIN
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|directory
argument_list|()
argument_list|,
name|QDir
argument_list|(
name|directory
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|nameFilters
argument_list|()
argument_list|,
name|QStringList
argument_list|(
name|filter
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|directory
name|void
name|tst_QFiledialog
operator|::
name|directory
parameter_list|()
block|{
name|QNonNativeFileDialog
name|fd
decl_stmt|;
name|fd
operator|.
name|setViewMode
argument_list|(
name|QFileDialog
operator|::
name|List
argument_list|)
expr_stmt|;
name|QFileSystemModel
modifier|*
name|model
init|=
name|qFindChild
argument_list|<
name|QFileSystemModel
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"qt_filesystem_model"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setDirectory
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spyCurrentChanged
argument_list|(
operator|&
name|fd
argument_list|,
name|SIGNAL
argument_list|(
name|currentChanged
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spyDirectoryEntered
argument_list|(
operator|&
name|fd
argument_list|,
name|SIGNAL
argument_list|(
name|directoryEntered
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spyFilesSelected
argument_list|(
operator|&
name|fd
argument_list|,
name|SIGNAL
argument_list|(
name|filesSelected
argument_list|(
specifier|const
name|QStringList
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spyFilterSelected
argument_list|(
operator|&
name|fd
argument_list|,
name|SIGNAL
argument_list|(
name|filterSelected
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QDir
operator|::
name|current
argument_list|()
operator|.
name|absolutePath
argument_list|()
argument_list|,
name|fd
operator|.
name|directory
argument_list|()
operator|.
name|absolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|QDir
name|temp
init|=
name|QDir
operator|::
name|temp
argument_list|()
decl_stmt|;
name|QString
name|tempPath
init|=
name|temp
operator|.
name|absolutePath
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
comment|// since the user can have lowercase temp dir, check that we are actually case-insensitive.
name|tempPath
operator|=
name|tempPath
operator|.
name|toLower
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|fd
operator|.
name|setDirectory
argument_list|(
name|tempPath
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WIN
name|QCOMPARE
argument_list|(
name|tempPath
argument_list|,
name|fd
operator|.
name|directory
argument_list|()
operator|.
name|absolutePath
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|spyCurrentChanged
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyDirectoryEntered
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyFilesSelected
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyFilterSelected
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Check my way
name|QList
argument_list|<
name|QListView
modifier|*
argument_list|>
name|list
init|=
name|qFindChildren
argument_list|<
name|QListView
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"listView"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|->
name|rootIndex
argument_list|()
operator|.
name|data
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
argument_list|,
name|temp
operator|.
name|dirName
argument_list|()
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|->
name|rootIndex
argument_list|()
operator|.
name|data
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|temp
operator|.
name|dirName
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QNonNativeFileDialog
modifier|*
name|dlg
init|=
operator|new
name|QNonNativeFileDialog
argument_list|(
literal|0
argument_list|,
literal|""
argument_list|,
name|tempPath
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|tempPath
argument_list|)
argument_list|,
name|model
operator|->
name|index
argument_list|(
name|dlg
operator|->
name|directory
argument_list|()
operator|.
name|absolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|tempPath
argument_list|)
operator|.
name|data
argument_list|(
name|QFileSystemModel
operator|::
name|FileNameRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|model
operator|->
name|index
argument_list|(
name|dlg
operator|->
name|directory
argument_list|()
operator|.
name|absolutePath
argument_list|()
argument_list|)
operator|.
name|data
argument_list|(
name|QFileSystemModel
operator|::
name|FileNameRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|dlg
expr_stmt|;
name|dlg
operator|=
operator|new
name|QNonNativeFileDialog
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|tempPath
argument_list|)
argument_list|,
name|model
operator|->
name|index
argument_list|(
name|dlg
operator|->
name|directory
argument_list|()
operator|.
name|absolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|dlg
expr_stmt|;
block|}
end_function
begin_function
DECL|function|completer_data
name|void
name|tst_QFiledialog
operator|::
name|completer_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"startPath"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"r, 10"
argument_list|)
operator|<<
literal|""
operator|<<
literal|"r"
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"x, 0"
argument_list|)
operator|<<
literal|""
operator|<<
literal|"x"
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"../, -1"
argument_list|)
operator|<<
literal|""
operator|<<
literal|"../"
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"goto root"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QDir
operator|::
name|rootPath
argument_list|()
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"start at root"
argument_list|)
operator|<<
name|QDir
operator|::
name|rootPath
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
operator|-
literal|1
expr_stmt|;
name|QDir
name|root
init|=
name|QDir
operator|::
name|root
argument_list|()
decl_stmt|;
name|QStringList
name|list
init|=
name|root
operator|.
name|entryList
argument_list|()
decl_stmt|;
name|QString
name|folder
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|QChar
argument_list|(
literal|'.'
argument_list|)
condition|)
continue|continue;
name|QFileInfo
name|info
argument_list|(
name|QDir
operator|::
name|rootPath
argument_list|()
operator|+
name|list
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|folder
operator|=
name|QDir
operator|::
name|rootPath
argument_list|()
operator|+
name|list
index|[
name|i
index|]
expr_stmt|;
break|break;
block|}
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"start at one below root r"
argument_list|)
operator|<<
name|folder
operator|<<
literal|"r"
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"start at one below root ../"
argument_list|)
operator|<<
name|folder
operator|<<
literal|"../"
operator|<<
operator|-
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|completer
name|void
name|tst_QFiledialog
operator|::
name|completer
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|startPath
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QString
name|tempPath
init|=
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
literal|'/'
operator|+
literal|"QFileDialogTestDir"
decl_stmt|;
if|if
condition|(
name|startPath
operator|.
name|isEmpty
argument_list|()
condition|)
name|startPath
operator|=
name|tempPath
expr_stmt|;
name|startPath
operator|=
name|QDir
operator|::
name|cleanPath
argument_list|(
name|startPath
argument_list|)
expr_stmt|;
comment|// make temp dir and files
block|{
name|QDir
name|cleanup
argument_list|(
name|tempPath
argument_list|)
decl_stmt|;
name|QStringList
name|x
init|=
name|cleanup
operator|.
name|entryList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|x
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|QFile
operator|::
name|remove
argument_list|(
name|tempPath
operator|+
literal|'/'
operator|+
name|x
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|cleanup
operator|.
name|rmdir
argument_list|(
name|tempPath
argument_list|)
expr_stmt|;
block|}
name|QDir
name|tmp
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tmp
operator|.
name|exists
argument_list|(
name|tempPath
argument_list|)
condition|)
name|QVERIFY
argument_list|(
name|tmp
operator|.
name|mkdir
argument_list|(
literal|"QFileDialogTestDir"
argument_list|)
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QTemporaryFile
modifier|*
argument_list|>
name|files
decl_stmt|;
name|QT_TRY
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|QScopedPointer
argument_list|<
name|QTemporaryFile
argument_list|>
name|file
argument_list|(
operator|new
name|QTemporaryFile
argument_list|(
name|tempPath
operator|+
literal|"/rXXXXXX"
argument_list|)
argument_list|)
decl_stmt|;
name|file
operator|->
name|open
argument_list|()
expr_stmt|;
name|files
operator|.
name|append
argument_list|(
name|file
operator|.
name|take
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// ### flesh this out more
name|QNonNativeFileDialog
name|fd
argument_list|(
literal|0
argument_list|,
name|QString
argument_list|(
literal|"Test it"
argument_list|)
argument_list|,
name|startPath
argument_list|)
decl_stmt|;
name|fd
operator|.
name|setOptions
argument_list|(
name|QFileDialog
operator|::
name|DontUseNativeDialog
argument_list|)
expr_stmt|;
name|fd
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|fd
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QFileSystemModel
modifier|*
name|model
init|=
name|qFindChild
argument_list|<
name|QFileSystemModel
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"qt_filesystem_model"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|QLineEdit
modifier|*
name|lineEdit
init|=
name|qFindChild
argument_list|<
name|QLineEdit
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"fileNameEdit"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|lineEdit
argument_list|)
expr_stmt|;
name|QCompleter
modifier|*
name|completer
init|=
name|lineEdit
operator|->
name|completer
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|completer
argument_list|)
expr_stmt|;
name|QAbstractItemModel
modifier|*
name|cModel
init|=
name|completer
operator|->
name|completionModel
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|cModel
argument_list|)
expr_stmt|;
comment|//wait a bit
name|QTest
operator|::
name|qWait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
comment|// path C:\depot\qt\examples\dialogs\standarddialogs
comment|// files
comment|//       [debug] [release] [tmp] dialog dialog main makefile makefile.debug makefile.release standarddialgos
comment|//
comment|// d      -> D:\ debug dialog.cpp dialog.h
comment|// ..\    -> ..\classwizard ..\configdialog ..\dialogs.pro
comment|// c      -> C:\ control panel
comment|// c:     -> C:\ (nothing more)
comment|// C:\    -> C:\, C:\_viminfo, ...
comment|// \      -> \_viminfo
comment|// c:\depot  -> 'nothing'
comment|// c:\depot\ -> C:\depot\devtools, C:\depot\dteske
name|QCOMPARE
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|fd
operator|.
name|directory
argument_list|()
operator|.
name|path
argument_list|()
argument_list|)
argument_list|,
name|model
operator|->
name|index
argument_list|(
name|startPath
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|input
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QModelIndex
name|r
init|=
name|model
operator|->
name|index
argument_list|(
name|model
operator|->
name|rootPath
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|model
operator|->
name|rowCount
argument_list|(
name|r
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QModelIndex
name|idx
init|=
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|r
argument_list|)
decl_stmt|;
name|input
operator|=
name|idx
operator|.
name|data
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// press 'keys' for the input
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|input
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|QTest
operator|::
name|keyPress
argument_list|(
name|lineEdit
argument_list|,
name|input
index|[
name|i
index|]
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
name|QStringList
name|expectedFiles
decl_stmt|;
if|if
condition|(
name|expected
operator|==
operator|-
literal|1
condition|)
block|{
name|QString
name|fullPath
init|=
name|startPath
operator|.
name|isEmpty
argument_list|()
condition|?
name|tempPath
else|:
name|startPath
decl_stmt|;
if|if
condition|(
operator|!
name|fullPath
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
name|fullPath
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
name|fullPath
operator|.
name|append
argument_list|(
name|input
argument_list|)
expr_stmt|;
if|if
condition|(
name|input
operator|.
name|startsWith
argument_list|(
name|QDir
operator|::
name|rootPath
argument_list|()
argument_list|)
condition|)
block|{
name|fullPath
operator|=
name|input
expr_stmt|;
name|input
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|QFileInfo
name|fi
argument_list|(
name|fullPath
argument_list|)
decl_stmt|;
name|QDir
name|x
argument_list|(
name|fi
operator|.
name|absolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|expectedFiles
operator|=
name|x
operator|.
name|entryList
argument_list|(
name|model
operator|->
name|filter
argument_list|()
argument_list|)
expr_stmt|;
name|expected
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|input
operator|.
name|startsWith
argument_list|(
literal|".."
argument_list|)
condition|)
name|input
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|expectedFiles
operator|.
name|count
argument_list|()
condition|;
operator|++
name|ii
control|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
if|if
condition|(
name|expectedFiles
operator|.
name|at
argument_list|(
name|ii
argument_list|)
operator|.
name|startsWith
argument_list|(
name|input
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
else|#
directive|else
if|if
condition|(
name|expectedFiles
operator|.
name|at
argument_list|(
name|ii
argument_list|)
operator|.
name|startsWith
argument_list|(
name|input
argument_list|)
condition|)
endif|#
directive|endif
operator|++
name|expected
expr_stmt|;
block|}
block|}
name|QTest
operator|::
name|qWait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
if|if
condition|(
name|cModel
operator|->
name|rowCount
argument_list|()
operator|!=
name|expected
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cModel
operator|->
name|rowCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|file
init|=
name|cModel
operator|->
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
operator|.
name|data
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|expectedFiles
operator|.
name|removeAll
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
comment|//qDebug()<< expectedFiles;
block|}
name|QTRY_COMPARE
argument_list|(
name|cModel
operator|->
name|rowCount
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
name|qDeleteAll
argument_list|(
name|files
argument_list|)
expr_stmt|;
name|QT_RETHROW
expr_stmt|;
block|}
name|qDeleteAll
argument_list|(
name|files
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|completer_up
name|void
name|tst_QFiledialog
operator|::
name|completer_up
parameter_list|()
block|{
name|QNonNativeFileDialog
name|fd
decl_stmt|;
name|fd
operator|.
name|setOptions
argument_list|(
name|QFileDialog
operator|::
name|DontUseNativeDialog
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spyCurrentChanged
argument_list|(
operator|&
name|fd
argument_list|,
name|SIGNAL
argument_list|(
name|currentChanged
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spyDirectoryEntered
argument_list|(
operator|&
name|fd
argument_list|,
name|SIGNAL
argument_list|(
name|directoryEntered
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spyFilesSelected
argument_list|(
operator|&
name|fd
argument_list|,
name|SIGNAL
argument_list|(
name|filesSelected
argument_list|(
specifier|const
name|QStringList
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spyFilterSelected
argument_list|(
operator|&
name|fd
argument_list|,
name|SIGNAL
argument_list|(
name|filterSelected
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|fd
operator|.
name|show
argument_list|()
expr_stmt|;
name|QLineEdit
modifier|*
name|lineEdit
init|=
name|qFindChild
argument_list|<
name|QLineEdit
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"fileNameEdit"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|lineEdit
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyFilesSelected
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|depth
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
operator|.
name|split
argument_list|(
literal|'/'
argument_list|)
operator|.
name|count
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|depth
operator|*
literal|3
operator|+
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|lineEdit
operator|->
name|insert
argument_list|(
literal|"../"
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|spyCurrentChanged
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyDirectoryEntered
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyFilesSelected
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyFilterSelected
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|acceptMode
name|void
name|tst_QFiledialog
operator|::
name|acceptMode
parameter_list|()
block|{
name|QNonNativeFileDialog
name|fd
decl_stmt|;
name|fd
operator|.
name|show
argument_list|()
expr_stmt|;
name|QToolButton
modifier|*
name|newButton
init|=
name|qFindChild
argument_list|<
name|QToolButton
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"newFolderButton"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|newButton
argument_list|)
expr_stmt|;
comment|// default
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|acceptMode
argument_list|()
argument_list|,
name|QFileDialog
operator|::
name|AcceptOpen
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|newButton
operator|&&
name|newButton
operator|->
name|isVisible
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//fd.setDetailsExpanded(true);
name|fd
operator|.
name|setAcceptMode
argument_list|(
name|QFileDialog
operator|::
name|AcceptSave
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|acceptMode
argument_list|()
argument_list|,
name|QFileDialog
operator|::
name|AcceptSave
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|newButton
operator|->
name|isVisible
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setAcceptMode
argument_list|(
name|QFileDialog
operator|::
name|AcceptOpen
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|acceptMode
argument_list|()
argument_list|,
name|QFileDialog
operator|::
name|AcceptOpen
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|newButton
operator|->
name|isVisible
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|confirmOverwrite
name|void
name|tst_QFiledialog
operator|::
name|confirmOverwrite
parameter_list|()
block|{
name|QNonNativeFileDialog
name|fd
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|confirmOverwrite
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setConfirmOverwrite
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|confirmOverwrite
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setConfirmOverwrite
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|confirmOverwrite
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setConfirmOverwrite
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|confirmOverwrite
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|defaultSuffix
name|void
name|tst_QFiledialog
operator|::
name|defaultSuffix
parameter_list|()
block|{
name|QNonNativeFileDialog
name|fd
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|defaultSuffix
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setDefaultSuffix
argument_list|(
literal|"txt"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|defaultSuffix
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"txt"
argument_list|)
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setDefaultSuffix
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|defaultSuffix
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fileMode
name|void
name|tst_QFiledialog
operator|::
name|fileMode
parameter_list|()
block|{
name|QNonNativeFileDialog
name|fd
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|fileMode
argument_list|()
argument_list|,
name|QFileDialog
operator|::
name|AnyFile
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setFileMode
argument_list|(
name|QFileDialog
operator|::
name|ExistingFile
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|fileMode
argument_list|()
argument_list|,
name|QFileDialog
operator|::
name|ExistingFile
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setFileMode
argument_list|(
name|QFileDialog
operator|::
name|Directory
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|fileMode
argument_list|()
argument_list|,
name|QFileDialog
operator|::
name|Directory
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setFileMode
argument_list|(
name|QFileDialog
operator|::
name|DirectoryOnly
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|fileMode
argument_list|()
argument_list|,
name|QFileDialog
operator|::
name|DirectoryOnly
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setFileMode
argument_list|(
name|QFileDialog
operator|::
name|ExistingFiles
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|fileMode
argument_list|()
argument_list|,
name|QFileDialog
operator|::
name|ExistingFiles
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|caption
name|void
name|tst_QFiledialog
operator|::
name|caption
parameter_list|()
block|{
name|QNonNativeFileDialog
name|fd
decl_stmt|;
name|fd
operator|.
name|setWindowTitle
argument_list|(
literal|"testing"
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setFileMode
argument_list|(
name|QFileDialog
operator|::
name|Directory
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|windowTitle
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"testing"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|filters
name|void
name|tst_QFiledialog
operator|::
name|filters
parameter_list|()
block|{
name|QNonNativeFileDialog
name|fd
decl_stmt|;
name|fd
operator|.
name|setOptions
argument_list|(
name|QFileDialog
operator|::
name|DontUseNativeDialog
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spyCurrentChanged
argument_list|(
operator|&
name|fd
argument_list|,
name|SIGNAL
argument_list|(
name|currentChanged
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spyDirectoryEntered
argument_list|(
operator|&
name|fd
argument_list|,
name|SIGNAL
argument_list|(
name|directoryEntered
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spyFilesSelected
argument_list|(
operator|&
name|fd
argument_list|,
name|SIGNAL
argument_list|(
name|filesSelected
argument_list|(
specifier|const
name|QStringList
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spyFilterSelected
argument_list|(
operator|&
name|fd
argument_list|,
name|SIGNAL
argument_list|(
name|filterSelected
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|nameFilters
argument_list|()
argument_list|,
name|QStringList
argument_list|(
literal|"All Files (*)"
argument_list|)
argument_list|)
expr_stmt|;
comment|// effects
name|QList
argument_list|<
name|QComboBox
modifier|*
argument_list|>
name|views
init|=
name|qFindChildren
argument_list|<
name|QComboBox
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"fileTypeCombo"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|views
operator|.
name|count
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|views
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|->
name|isVisible
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QStringList
name|filters
decl_stmt|;
name|filters
operator|<<
literal|"Image files (*.png *.xpm *.jpg)"
operator|<<
literal|"Text files (*.txt)"
operator|<<
literal|"Any files (*.*)"
expr_stmt|;
name|fd
operator|.
name|setNameFilters
argument_list|(
name|filters
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|views
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|->
name|isVisible
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fd
operator|.
name|show
argument_list|()
expr_stmt|;
name|fd
operator|.
name|setAcceptMode
argument_list|(
name|QFileDialog
operator|::
name|AcceptSave
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|views
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|->
name|isVisible
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|nameFilters
argument_list|()
argument_list|,
name|filters
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setNameFilter
argument_list|(
literal|"Image files (*.png *.xpm *.jpg);;Text files (*.txt);;Any files (*.*)"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|nameFilters
argument_list|()
argument_list|,
name|filters
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyCurrentChanged
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyDirectoryEntered
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyFilesSelected
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyFilterSelected
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// setting shouldn't emit any signals
for|for
control|(
name|int
name|i
init|=
name|views
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|->
name|currentIndex
argument_list|()
init|;
name|i
operator|<
name|views
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|->
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|views
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|->
name|setCurrentIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyFilterSelected
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//Let check if filters with whitespaces
name|QNonNativeFileDialog
name|fd2
decl_stmt|;
name|QStringList
name|expected
decl_stmt|;
name|expected
operator|<<
literal|"C++ Source Files(*.cpp)"
expr_stmt|;
name|expected
operator|<<
literal|"Any(*.*)"
expr_stmt|;
name|fd2
operator|.
name|setNameFilter
argument_list|(
literal|"C++ Source Files(*.cpp);;Any(*.*)"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|expected
argument_list|,
name|fd2
operator|.
name|nameFilters
argument_list|()
argument_list|)
expr_stmt|;
name|fd2
operator|.
name|setNameFilter
argument_list|(
literal|"C++ Source Files(*.cpp) ;;Any(*.*)"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|expected
argument_list|,
name|fd2
operator|.
name|nameFilters
argument_list|()
argument_list|)
expr_stmt|;
name|fd2
operator|.
name|setNameFilter
argument_list|(
literal|"C++ Source Files(*.cpp);; Any(*.*)"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|expected
argument_list|,
name|fd2
operator|.
name|nameFilters
argument_list|()
argument_list|)
expr_stmt|;
name|fd2
operator|.
name|setNameFilter
argument_list|(
literal|" C++ Source Files(*.cpp);; Any(*.*)"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|expected
argument_list|,
name|fd2
operator|.
name|nameFilters
argument_list|()
argument_list|)
expr_stmt|;
name|fd2
operator|.
name|setNameFilter
argument_list|(
literal|"C++ Source Files(*.cpp) ;; Any(*.*)"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|expected
argument_list|,
name|fd2
operator|.
name|nameFilters
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|selectFilter
name|void
name|tst_QFiledialog
operator|::
name|selectFilter
parameter_list|()
block|{
name|QNonNativeFileDialog
name|fd
decl_stmt|;
name|QSignalSpy
name|spyFilterSelected
argument_list|(
operator|&
name|fd
argument_list|,
name|SIGNAL
argument_list|(
name|filterSelected
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|selectedNameFilter
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"All Files (*)"
argument_list|)
argument_list|)
expr_stmt|;
name|QStringList
name|filters
decl_stmt|;
name|filters
operator|<<
literal|"Image files (*.png *.xpm *.jpg)"
operator|<<
literal|"Text files (*.txt)"
operator|<<
literal|"Any files (*.*)"
expr_stmt|;
name|fd
operator|.
name|setNameFilters
argument_list|(
name|filters
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|selectedNameFilter
argument_list|()
argument_list|,
name|filters
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|fd
operator|.
name|selectNameFilter
argument_list|(
name|filters
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|selectedNameFilter
argument_list|()
argument_list|,
name|filters
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|fd
operator|.
name|selectNameFilter
argument_list|(
name|filters
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|selectedNameFilter
argument_list|()
argument_list|,
name|filters
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|fd
operator|.
name|selectNameFilter
argument_list|(
literal|"bob"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|selectedNameFilter
argument_list|()
argument_list|,
name|filters
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|fd
operator|.
name|selectNameFilter
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|selectedNameFilter
argument_list|()
argument_list|,
name|filters
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyFilterSelected
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|history
name|void
name|tst_QFiledialog
operator|::
name|history
parameter_list|()
block|{
name|QNonNativeFileDialog
name|fd
decl_stmt|;
name|fd
operator|.
name|setViewMode
argument_list|(
name|QFileDialog
operator|::
name|List
argument_list|)
expr_stmt|;
name|QFileSystemModel
modifier|*
name|model
init|=
name|qFindChild
argument_list|<
name|QFileSystemModel
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"qt_filesystem_model"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spyCurrentChanged
argument_list|(
operator|&
name|fd
argument_list|,
name|SIGNAL
argument_list|(
name|currentChanged
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spyDirectoryEntered
argument_list|(
operator|&
name|fd
argument_list|,
name|SIGNAL
argument_list|(
name|directoryEntered
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spyFilesSelected
argument_list|(
operator|&
name|fd
argument_list|,
name|SIGNAL
argument_list|(
name|filesSelected
argument_list|(
specifier|const
name|QStringList
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spyFilterSelected
argument_list|(
operator|&
name|fd
argument_list|,
name|SIGNAL
argument_list|(
name|filterSelected
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|fd
operator|.
name|history
argument_list|()
operator|.
name|first
argument_list|()
argument_list|)
argument_list|,
name|model
operator|->
name|index
argument_list|(
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|fd
operator|.
name|directory
argument_list|()
operator|.
name|absolutePath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setDirectory
argument_list|(
name|QDir
operator|::
name|current
argument_list|()
operator|.
name|absolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|QStringList
name|history
decl_stmt|;
name|history
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|QDir
operator|::
name|current
argument_list|()
operator|.
name|absolutePath
argument_list|()
argument_list|)
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|QDir
operator|::
name|home
argument_list|()
operator|.
name|absolutePath
argument_list|()
argument_list|)
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|QDir
operator|::
name|temp
argument_list|()
operator|.
name|absolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setHistory
argument_list|(
name|history
argument_list|)
expr_stmt|;
if|if
condition|(
name|fd
operator|.
name|history
argument_list|()
operator|!=
name|history
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
name|fd
operator|.
name|history
argument_list|()
operator|<<
name|history
expr_stmt|;
comment|// quick and dirty output for windows failure.
name|QListView
modifier|*
name|list
init|=
name|qFindChild
argument_list|<
name|QListView
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"listView"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|QModelIndex
name|root
init|=
name|list
operator|->
name|rootIndex
argument_list|()
decl_stmt|;
while|while
condition|(
name|root
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
name|root
operator|.
name|data
argument_list|()
expr_stmt|;
name|root
operator|=
name|root
operator|.
name|parent
argument_list|()
expr_stmt|;
block|}
block|}
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|history
argument_list|()
argument_list|,
name|history
argument_list|)
expr_stmt|;
name|QStringList
name|badHistory
decl_stmt|;
name|badHistory
operator|<<
literal|"junk"
expr_stmt|;
name|fd
operator|.
name|setHistory
argument_list|(
name|badHistory
argument_list|)
expr_stmt|;
name|badHistory
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|QDir
operator|::
name|current
argument_list|()
operator|.
name|absolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|history
argument_list|()
argument_list|,
name|badHistory
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyCurrentChanged
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyDirectoryEntered
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyFilesSelected
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyFilterSelected
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|iconProvider
name|void
name|tst_QFiledialog
operator|::
name|iconProvider
parameter_list|()
block|{
name|QNonNativeFileDialog
modifier|*
name|fd
init|=
operator|new
name|QNonNativeFileDialog
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|fd
operator|->
name|iconProvider
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QFileIconProvider
modifier|*
name|ip
init|=
operator|new
name|QFileIconProvider
argument_list|()
decl_stmt|;
name|fd
operator|->
name|setIconProvider
argument_list|(
name|ip
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|->
name|iconProvider
argument_list|()
argument_list|,
name|ip
argument_list|)
expr_stmt|;
operator|delete
name|fd
expr_stmt|;
operator|delete
name|ip
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isReadOnly
name|void
name|tst_QFiledialog
operator|::
name|isReadOnly
parameter_list|()
block|{
name|QNonNativeFileDialog
name|fd
decl_stmt|;
name|QPushButton
modifier|*
name|newButton
init|=
name|qFindChild
argument_list|<
name|QPushButton
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"newFolderButton"
argument_list|)
decl_stmt|;
name|QAction
modifier|*
name|renameAction
init|=
name|qFindChild
argument_list|<
name|QAction
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"qt_rename_action"
argument_list|)
decl_stmt|;
name|QAction
modifier|*
name|deleteAction
init|=
name|qFindChild
argument_list|<
name|QAction
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"qt_delete_action"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|isReadOnly
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// This is dependent upon the file/dir, find cross platform way to test
comment|//fd.setDirectory(QDir::home());
comment|//QCOMPARE(newButton&& newButton->isEnabled(), true);
comment|//QCOMPARE(renameAction&& renameAction->isEnabled(), true);
comment|//QCOMPARE(deleteAction&& deleteAction->isEnabled(), true);
name|fd
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|isReadOnly
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|newButton
operator|&&
name|newButton
operator|->
name|isEnabled
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|renameAction
operator|&&
name|renameAction
operator|->
name|isEnabled
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|deleteAction
operator|&&
name|deleteAction
operator|->
name|isEnabled
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|itemDelegate
name|void
name|tst_QFiledialog
operator|::
name|itemDelegate
parameter_list|()
block|{
name|QNonNativeFileDialog
name|fd
decl_stmt|;
name|QVERIFY
argument_list|(
name|fd
operator|.
name|itemDelegate
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QItemDelegate
modifier|*
name|id
init|=
operator|new
name|QItemDelegate
argument_list|(
operator|&
name|fd
argument_list|)
decl_stmt|;
name|fd
operator|.
name|setItemDelegate
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|itemDelegate
argument_list|()
argument_list|,
operator|(
name|QAbstractItemDelegate
operator|*
operator|)
name|id
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|labelText
name|void
name|tst_QFiledialog
operator|::
name|labelText
parameter_list|()
block|{
name|QNonNativeFileDialog
name|fd
decl_stmt|;
name|QDialogButtonBox
name|buttonBox
decl_stmt|;
name|QPushButton
modifier|*
name|cancelButton
init|=
name|buttonBox
operator|.
name|addButton
argument_list|(
name|QDialogButtonBox
operator|::
name|Cancel
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|labelText
argument_list|(
name|QFileDialog
operator|::
name|LookIn
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Look in:"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|labelText
argument_list|(
name|QFileDialog
operator|::
name|FileName
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"File&name:"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|labelText
argument_list|(
name|QFileDialog
operator|::
name|FileType
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Files of type:"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|labelText
argument_list|(
name|QFileDialog
operator|::
name|Accept
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"&Open"
argument_list|)
argument_list|)
expr_stmt|;
comment|///### see task 241462
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|labelText
argument_list|(
name|QFileDialog
operator|::
name|Reject
argument_list|)
argument_list|,
name|cancelButton
operator|->
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setLabelText
argument_list|(
name|QFileDialog
operator|::
name|LookIn
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|labelText
argument_list|(
name|QFileDialog
operator|::
name|LookIn
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setLabelText
argument_list|(
name|QFileDialog
operator|::
name|FileName
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|labelText
argument_list|(
name|QFileDialog
operator|::
name|FileName
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setLabelText
argument_list|(
name|QFileDialog
operator|::
name|FileType
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|labelText
argument_list|(
name|QFileDialog
operator|::
name|FileType
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setLabelText
argument_list|(
name|QFileDialog
operator|::
name|Accept
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|labelText
argument_list|(
name|QFileDialog
operator|::
name|Accept
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setLabelText
argument_list|(
name|QFileDialog
operator|::
name|Reject
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|labelText
argument_list|(
name|QFileDialog
operator|::
name|Reject
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resolveSymlinks
name|void
name|tst_QFiledialog
operator|::
name|resolveSymlinks
parameter_list|()
block|{
name|QNonNativeFileDialog
name|fd
decl_stmt|;
comment|// default
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|resolveSymlinks
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setResolveSymlinks
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|resolveSymlinks
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setResolveSymlinks
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|resolveSymlinks
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// the file dialog doesn't do anything based upon this, just passes it to the model
comment|// the model should fully test it, don't test it here
block|}
end_function
begin_function
DECL|function|selectFile_data
name|void
name|tst_QFiledialog
operator|::
name|selectFile_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"file"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"count"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"file"
argument_list|)
operator|<<
literal|"foo"
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"tmp"
argument_list|)
operator|<<
literal|"temp"
operator|<<
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|selectFile
name|void
name|tst_QFiledialog
operator|::
name|selectFile
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|QNonNativeFileDialog
name|fd
decl_stmt|;
name|QFileSystemModel
modifier|*
name|model
init|=
name|qFindChild
argument_list|<
name|QFileSystemModel
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"qt_filesystem_model"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setDirectory
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// default value
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|selectedFiles
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTemporaryFile
name|tempFile
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
literal|"/aXXXXXX"
argument_list|)
decl_stmt|;
name|bool
name|inTemp
init|=
operator|(
name|file
operator|==
literal|"temp"
operator|)
decl_stmt|;
if|if
condition|(
name|inTemp
condition|)
block|{
name|tempFile
operator|.
name|open
argument_list|()
expr_stmt|;
name|file
operator|=
name|tempFile
operator|.
name|fileName
argument_list|()
expr_stmt|;
block|}
name|fd
operator|.
name|selectFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|selectedFiles
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|inTemp
condition|)
block|{
name|QCOMPARE
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|fd
operator|.
name|directory
argument_list|()
operator|.
name|path
argument_list|()
argument_list|)
argument_list|,
name|model
operator|->
name|index
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|fd
operator|.
name|directory
argument_list|()
operator|.
name|path
argument_list|()
argument_list|)
argument_list|,
name|model
operator|->
name|index
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|selectFiles
name|void
name|tst_QFiledialog
operator|::
name|selectFiles
parameter_list|()
block|{
name|QNonNativeFileDialog
name|fd
decl_stmt|;
name|fd
operator|.
name|setViewMode
argument_list|(
name|QFileDialog
operator|::
name|List
argument_list|)
expr_stmt|;
name|QString
name|tempPath
init|=
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
literal|'/'
operator|+
literal|"QFileDialogTestDir4SelectFiles"
decl_stmt|;
name|QDir
name|dir
decl_stmt|;
name|QVERIFY
argument_list|(
name|dir
operator|.
name|mkpath
argument_list|(
name|tempPath
argument_list|)
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setDirectory
argument_list|(
name|tempPath
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spyCurrentChanged
argument_list|(
operator|&
name|fd
argument_list|,
name|SIGNAL
argument_list|(
name|currentChanged
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spyDirectoryEntered
argument_list|(
operator|&
name|fd
argument_list|,
name|SIGNAL
argument_list|(
name|directoryEntered
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spyFilesSelected
argument_list|(
operator|&
name|fd
argument_list|,
name|SIGNAL
argument_list|(
name|filesSelected
argument_list|(
specifier|const
name|QStringList
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spyFilterSelected
argument_list|(
operator|&
name|fd
argument_list|,
name|SIGNAL
argument_list|(
name|filterSelected
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|fd
operator|.
name|show
argument_list|()
expr_stmt|;
name|fd
operator|.
name|setFileMode
argument_list|(
name|QFileDialog
operator|::
name|ExistingFiles
argument_list|)
expr_stmt|;
name|QString
name|filesPath
init|=
name|fd
operator|.
name|directory
argument_list|()
operator|.
name|absolutePath
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
name|QFile
name|file
argument_list|(
name|filesPath
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/qfiledialog_auto_test_not_pres_%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|file
operator|.
name|resize
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|file
operator|.
name|flush
argument_list|()
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Get a list of files in the view and then get the corresponding index's
name|QStringList
name|list
init|=
name|fd
operator|.
name|directory
argument_list|()
operator|.
name|entryList
argument_list|(
name|QDir
operator|::
name|Files
argument_list|)
decl_stmt|;
name|QModelIndexList
name|toSelect
decl_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|count
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|QListView
modifier|*
name|listView
init|=
name|qFindChild
argument_list|<
name|QListView
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"listView"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|listView
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|fd
operator|.
name|selectFile
argument_list|(
name|fd
operator|.
name|directory
argument_list|()
operator|.
name|path
argument_list|()
operator|+
literal|"/"
operator|+
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"This test does not work on Windows"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTRY_VERIFY
argument_list|(
operator|!
name|listView
operator|->
name|selectionModel
argument_list|()
operator|->
name|selectedRows
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|toSelect
operator|.
name|append
argument_list|(
name|listView
operator|->
name|selectionModel
argument_list|()
operator|->
name|selectedRows
argument_list|()
operator|.
name|last
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|spyFilesSelected
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|listView
operator|->
name|selectionModel
argument_list|()
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyFilesSelected
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// select the indexes
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toSelect
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|listView
operator|->
name|selectionModel
argument_list|()
operator|->
name|select
argument_list|(
name|toSelect
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|QItemSelectionModel
operator|::
name|Select
operator||
name|QItemSelectionModel
operator|::
name|Rows
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|selectedFiles
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
name|toSelect
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyCurrentChanged
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyDirectoryEntered
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyFilesSelected
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyFilterSelected
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
name|QFile
operator|::
name|remove
argument_list|(
name|filesPath
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/qfiledialog_auto_test_not_pres_%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
comment|//If the selection is invalid then we fill the line edit but without the /
name|QNonNativeFileDialog
modifier|*
name|dialog
init|=
operator|new
name|QNonNativeFileDialog
argument_list|(
literal|0
argument_list|,
literal|"Save"
argument_list|)
decl_stmt|;
name|dialog
operator|->
name|setFileMode
argument_list|(
name|QFileDialog
operator|::
name|AnyFile
argument_list|)
expr_stmt|;
name|dialog
operator|->
name|setAcceptMode
argument_list|(
name|QFileDialog
operator|::
name|AcceptSave
argument_list|)
expr_stmt|;
name|QString
name|temporary
init|=
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/blah"
argument_list|)
decl_stmt|;
name|dialog
operator|->
name|selectFile
argument_list|(
name|temporary
argument_list|)
expr_stmt|;
name|dialog
operator|->
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|QLineEdit
modifier|*
name|lineEdit
init|=
name|qFindChild
argument_list|<
name|QLineEdit
operator|*
argument_list|>
argument_list|(
name|dialog
argument_list|,
literal|"fileNameEdit"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|lineEdit
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lineEdit
operator|->
name|text
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"blah"
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|dialog
expr_stmt|;
block|}
end_function
begin_function
DECL|function|viewMode
name|void
name|tst_QFiledialog
operator|::
name|viewMode
parameter_list|()
block|{
name|QNonNativeFileDialog
name|fd
decl_stmt|;
name|fd
operator|.
name|setViewMode
argument_list|(
name|QFileDialog
operator|::
name|List
argument_list|)
expr_stmt|;
name|fd
operator|.
name|show
argument_list|()
expr_stmt|;
comment|// find widgets
name|QList
argument_list|<
name|QTreeView
modifier|*
argument_list|>
name|treeView
init|=
name|qFindChildren
argument_list|<
name|QTreeView
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"treeView"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|treeView
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QListView
modifier|*
argument_list|>
name|listView
init|=
name|qFindChildren
argument_list|<
name|QListView
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"listView"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|listView
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QToolButton
modifier|*
argument_list|>
name|listButton
init|=
name|qFindChildren
argument_list|<
name|QToolButton
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"listModeButton"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|listButton
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QToolButton
modifier|*
argument_list|>
name|treeButton
init|=
name|qFindChildren
argument_list|<
name|QToolButton
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"detailModeButton"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|treeButton
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// default value
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|viewMode
argument_list|()
argument_list|,
name|QFileDialog
operator|::
name|List
argument_list|)
expr_stmt|;
comment|// detail
name|fd
operator|.
name|setViewMode
argument_list|(
name|QFileDialog
operator|::
name|ViewMode
argument_list|(
name|QFileDialog
operator|::
name|Detail
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFileDialog
operator|::
name|ViewMode
argument_list|(
name|QFileDialog
operator|::
name|Detail
argument_list|)
argument_list|,
name|fd
operator|.
name|viewMode
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|listView
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|->
name|isVisible
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|listButton
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|->
name|isDown
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|treeView
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|->
name|isVisible
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|treeButton
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|->
name|isDown
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// list
name|fd
operator|.
name|setViewMode
argument_list|(
name|QFileDialog
operator|::
name|ViewMode
argument_list|(
name|QFileDialog
operator|::
name|List
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFileDialog
operator|::
name|ViewMode
argument_list|(
name|QFileDialog
operator|::
name|List
argument_list|)
argument_list|,
name|fd
operator|.
name|viewMode
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|treeView
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|->
name|isVisible
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|treeButton
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|->
name|isDown
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|listView
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|->
name|isVisible
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|listButton
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|->
name|isDown
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|proxymodel
name|void
name|tst_QFiledialog
operator|::
name|proxymodel
parameter_list|()
block|{
name|QNonNativeFileDialog
name|fd
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|proxyModel
argument_list|()
argument_list|,
operator|(
name|QAbstractProxyModel
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setProxyModel
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|proxyModel
argument_list|()
argument_list|,
operator|(
name|QAbstractProxyModel
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QSortFilterProxyModel
modifier|*
name|proxyModel
init|=
operator|new
name|QSortFilterProxyModel
argument_list|(
operator|&
name|fd
argument_list|)
decl_stmt|;
name|fd
operator|.
name|setProxyModel
argument_list|(
name|proxyModel
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|proxyModel
argument_list|()
argument_list|,
operator|(
name|QAbstractProxyModel
operator|*
operator|)
name|proxyModel
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setProxyModel
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fd
operator|.
name|proxyModel
argument_list|()
argument_list|,
operator|(
name|QAbstractProxyModel
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setNameFilter
name|void
name|tst_QFiledialog
operator|::
name|setNameFilter
parameter_list|()
block|{
name|QNonNativeFileDialog
name|fd
decl_stmt|;
name|fd
operator|.
name|setNameFilter
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setNameFilters
argument_list|(
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|focus
name|void
name|tst_QFiledialog
operator|::
name|focus
parameter_list|()
block|{
name|QNonNativeFileDialog
name|fd
decl_stmt|;
name|fd
operator|.
name|setDirectory
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
argument_list|)
expr_stmt|;
name|fd
operator|.
name|show
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|fd
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
operator|&
name|fd
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|fd
operator|.
name|isVisible
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|QApplication
operator|::
name|activeWindow
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|)
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
comment|// make sure the tests work with focus follows mouse
name|QCursor
operator|::
name|setPos
argument_list|(
name|fd
operator|.
name|geometry
argument_list|()
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|syncX
argument_list|()
expr_stmt|;
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|treeView
init|=
name|qFindChildren
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"fileNameEdit"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|treeView
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|treeView
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|treeView
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|->
name|hasFocus
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|treeView
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|->
name|hasFocus
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|historyBack
name|void
name|tst_QFiledialog
operator|::
name|historyBack
parameter_list|()
block|{
name|QNonNativeFileDialog
name|fd
decl_stmt|;
name|QFileSystemModel
modifier|*
name|model
init|=
name|qFindChild
argument_list|<
name|QFileSystemModel
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"qt_filesystem_model"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|QToolButton
modifier|*
name|backButton
init|=
name|qFindChild
argument_list|<
name|QToolButton
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"backButton"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|backButton
argument_list|)
expr_stmt|;
name|QToolButton
modifier|*
name|forwardButton
init|=
name|qFindChild
argument_list|<
name|QToolButton
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"forwardButton"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|forwardButton
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rootPathChanged
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|home
init|=
name|fd
operator|.
name|directory
argument_list|()
operator|.
name|absolutePath
argument_list|()
decl_stmt|;
name|QString
name|desktop
init|=
name|QDir
operator|::
name|homePath
argument_list|()
decl_stmt|;
name|QString
name|temp
init|=
name|QDir
operator|::
name|tempPath
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|backButton
operator|->
name|isEnabled
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|forwardButton
operator|->
name|isEnabled
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setDirectory
argument_list|(
name|temp
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|backButton
operator|->
name|isEnabled
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|forwardButton
operator|->
name|isEnabled
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setDirectory
argument_list|(
name|desktop
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|backButton
operator|->
name|click
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|backButton
operator|->
name|isEnabled
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|forwardButton
operator|->
name|isEnabled
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QString
name|currentPath
init|=
name|qvariant_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|spy
operator|.
name|last
argument_list|()
operator|.
name|first
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|currentPath
argument_list|)
argument_list|,
name|model
operator|->
name|index
argument_list|(
name|temp
argument_list|)
argument_list|)
expr_stmt|;
name|backButton
operator|->
name|click
argument_list|()
expr_stmt|;
name|currentPath
operator|=
name|qvariant_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|spy
operator|.
name|last
argument_list|()
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|currentPath
argument_list|,
name|home
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|backButton
operator|->
name|isEnabled
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|forwardButton
operator|->
name|isEnabled
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// nothing should change at this point
name|backButton
operator|->
name|click
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|backButton
operator|->
name|isEnabled
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|forwardButton
operator|->
name|isEnabled
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|historyForward
name|void
name|tst_QFiledialog
operator|::
name|historyForward
parameter_list|()
block|{
name|QNonNativeFileDialog
name|fd
decl_stmt|;
name|fd
operator|.
name|setDirectory
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
argument_list|)
expr_stmt|;
name|QToolButton
modifier|*
name|backButton
init|=
name|qFindChild
argument_list|<
name|QToolButton
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"backButton"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|backButton
argument_list|)
expr_stmt|;
name|QToolButton
modifier|*
name|forwardButton
init|=
name|qFindChild
argument_list|<
name|QToolButton
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"forwardButton"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|forwardButton
argument_list|)
expr_stmt|;
name|QFileSystemModel
modifier|*
name|model
init|=
name|qFindChild
argument_list|<
name|QFileSystemModel
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"qt_filesystem_model"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rootPathChanged
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|home
init|=
name|fd
operator|.
name|directory
argument_list|()
operator|.
name|absolutePath
argument_list|()
decl_stmt|;
name|QString
name|desktop
init|=
name|QDir
operator|::
name|homePath
argument_list|()
decl_stmt|;
name|QString
name|temp
init|=
name|QDir
operator|::
name|tempPath
argument_list|()
decl_stmt|;
name|fd
operator|.
name|setDirectory
argument_list|(
name|home
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setDirectory
argument_list|(
name|temp
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setDirectory
argument_list|(
name|desktop
argument_list|)
expr_stmt|;
name|backButton
operator|->
name|click
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|forwardButton
operator|->
name|isEnabled
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|qvariant_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|spy
operator|.
name|last
argument_list|()
operator|.
name|first
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|model
operator|->
name|index
argument_list|(
name|temp
argument_list|)
argument_list|)
expr_stmt|;
name|forwardButton
operator|->
name|click
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|qvariant_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|spy
operator|.
name|last
argument_list|()
operator|.
name|first
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|model
operator|->
name|index
argument_list|(
name|desktop
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|backButton
operator|->
name|isEnabled
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|forwardButton
operator|->
name|isEnabled
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|backButton
operator|->
name|click
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|qvariant_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|spy
operator|.
name|last
argument_list|()
operator|.
name|first
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|model
operator|->
name|index
argument_list|(
name|temp
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|backButton
operator|->
name|isEnabled
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|backButton
operator|->
name|click
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|qvariant_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|spy
operator|.
name|last
argument_list|()
operator|.
name|first
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|model
operator|->
name|index
argument_list|(
name|home
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|backButton
operator|->
name|isEnabled
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|forwardButton
operator|->
name|isEnabled
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|forwardButton
operator|->
name|click
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|qvariant_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|spy
operator|.
name|last
argument_list|()
operator|.
name|first
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|model
operator|->
name|index
argument_list|(
name|temp
argument_list|)
argument_list|)
expr_stmt|;
name|backButton
operator|->
name|click
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|qvariant_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|spy
operator|.
name|last
argument_list|()
operator|.
name|first
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|model
operator|->
name|index
argument_list|(
name|home
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|forwardButton
operator|->
name|click
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|qvariant_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|spy
operator|.
name|last
argument_list|()
operator|.
name|first
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|model
operator|->
name|index
argument_list|(
name|temp
argument_list|)
argument_list|)
expr_stmt|;
name|forwardButton
operator|->
name|click
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|qvariant_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|spy
operator|.
name|last
argument_list|()
operator|.
name|first
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|model
operator|->
name|index
argument_list|(
name|desktop
argument_list|)
argument_list|)
expr_stmt|;
name|backButton
operator|->
name|click
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|qvariant_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|spy
operator|.
name|last
argument_list|()
operator|.
name|first
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|model
operator|->
name|index
argument_list|(
name|temp
argument_list|)
argument_list|)
expr_stmt|;
name|backButton
operator|->
name|click
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|qvariant_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|spy
operator|.
name|last
argument_list|()
operator|.
name|first
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|model
operator|->
name|index
argument_list|(
name|home
argument_list|)
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setDirectory
argument_list|(
name|desktop
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|forwardButton
operator|->
name|isEnabled
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|disableSaveButton_data
name|void
name|tst_QFiledialog
operator|::
name|disableSaveButton_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"isEnabled"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"valid path"
argument_list|)
operator|<<
name|QDir
operator|::
name|temp
argument_list|()
operator|.
name|absolutePath
argument_list|()
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
literal|"qfiledialog.new_file"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no path"
argument_list|)
operator|<<
literal|""
operator|<<
literal|false
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_OPENBSD
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"too long path"
argument_list|)
operator|<<
literal|"iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii"
operator|<<
literal|false
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"file"
argument_list|)
operator|<<
literal|"foo.html"
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|disableSaveButton
name|void
name|tst_QFiledialog
operator|::
name|disableSaveButton
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|isEnabled
argument_list|)
expr_stmt|;
name|QNonNativeFileDialog
name|fd
argument_list|(
literal|0
argument_list|,
literal|"caption"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|fd
operator|.
name|setAcceptMode
argument_list|(
name|QFileDialog
operator|::
name|AcceptSave
argument_list|)
expr_stmt|;
name|QDialogButtonBox
modifier|*
name|buttonBox
init|=
name|qFindChild
argument_list|<
name|QDialogButtonBox
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"buttonBox"
argument_list|)
decl_stmt|;
name|QPushButton
modifier|*
name|button
init|=
name|buttonBox
operator|->
name|button
argument_list|(
name|QDialogButtonBox
operator|::
name|Save
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|button
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|button
operator|->
name|isEnabled
argument_list|()
argument_list|,
name|isEnabled
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|saveButtonText_data
name|void
name|tst_QFiledialog
operator|::
name|saveButtonText_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"label"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"caption"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty path"
argument_list|)
operator|<<
literal|""
operator|<<
name|QString
argument_list|()
operator|<<
name|QFileDialog
operator|::
name|tr
argument_list|(
literal|"&Save"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"file path"
argument_list|)
operator|<<
literal|"qfiledialog.new_file"
operator|<<
name|QString
argument_list|()
operator|<<
name|QFileDialog
operator|::
name|tr
argument_list|(
literal|"&Save"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dir"
argument_list|)
operator|<<
name|QDir
operator|::
name|temp
argument_list|()
operator|.
name|absolutePath
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QFileDialog
operator|::
name|tr
argument_list|(
literal|"&Open"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"setTextLabel"
argument_list|)
operator|<<
literal|"qfiledialog.new_file"
operator|<<
literal|"Mooo"
operator|<<
literal|"Mooo"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dir& label"
argument_list|)
operator|<<
name|QDir
operator|::
name|temp
argument_list|()
operator|.
name|absolutePath
argument_list|()
operator|<<
literal|"Poo"
operator|<<
name|QFileDialog
operator|::
name|tr
argument_list|(
literal|"&Open"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|saveButtonText
name|void
name|tst_QFiledialog
operator|::
name|saveButtonText
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|label
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|caption
argument_list|)
expr_stmt|;
name|QNonNativeFileDialog
name|fd
argument_list|(
literal|0
argument_list|,
literal|"auto test"
argument_list|,
name|QDir
operator|::
name|temp
argument_list|()
operator|.
name|absolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|fd
operator|.
name|setAcceptMode
argument_list|(
name|QFileDialog
operator|::
name|AcceptSave
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|label
operator|.
name|isNull
argument_list|()
condition|)
name|fd
operator|.
name|setLabelText
argument_list|(
name|QFileDialog
operator|::
name|Accept
argument_list|,
name|label
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setDirectory
argument_list|(
name|QDir
operator|::
name|temp
argument_list|()
argument_list|)
expr_stmt|;
name|fd
operator|.
name|selectFile
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|QDialogButtonBox
modifier|*
name|buttonBox
init|=
name|qFindChild
argument_list|<
name|QDialogButtonBox
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"buttonBox"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|buttonBox
argument_list|)
expr_stmt|;
name|QPushButton
modifier|*
name|button
init|=
name|buttonBox
operator|->
name|button
argument_list|(
name|QDialogButtonBox
operator|::
name|Save
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|button
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|button
operator|->
name|text
argument_list|()
argument_list|,
name|caption
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearLineEdit
name|void
name|tst_QFiledialog
operator|::
name|clearLineEdit
parameter_list|()
block|{
name|QNonNativeFileDialog
name|fd
argument_list|(
literal|0
argument_list|,
literal|"caption"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|fd
operator|.
name|setViewMode
argument_list|(
name|QFileDialog
operator|::
name|List
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setFileMode
argument_list|(
name|QFileDialog
operator|::
name|AnyFile
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setOptions
argument_list|(
name|QFileDialog
operator|::
name|DontUseNativeDialog
argument_list|)
expr_stmt|;
name|fd
operator|.
name|show
argument_list|()
expr_stmt|;
comment|//play it really safe by creating a directory
name|QDir
operator|::
name|home
argument_list|()
operator|.
name|mkdir
argument_list|(
literal|"_____aaaaaaaaaaaaaaaaaaaaaa"
argument_list|)
expr_stmt|;
name|QLineEdit
modifier|*
name|lineEdit
init|=
name|qFindChild
argument_list|<
name|QLineEdit
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"fileNameEdit"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|lineEdit
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|lineEdit
operator|->
name|text
argument_list|()
operator|==
literal|"foo"
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setDirectory
argument_list|(
name|QDir
operator|::
name|home
argument_list|()
argument_list|)
expr_stmt|;
name|QListView
modifier|*
name|list
init|=
name|qFindChild
argument_list|<
name|QListView
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"listView"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|list
argument_list|)
expr_stmt|;
comment|// saving a file the text shouldn't be cleared
name|fd
operator|.
name|setDirectory
argument_list|(
name|QDir
operator|::
name|home
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
name|list
operator|->
name|setEditFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|keyClick
argument_list|(
name|list
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_MAC
name|QTest
operator|::
name|keyClick
argument_list|(
name|list
argument_list|,
name|Qt
operator|::
name|Key_Return
argument_list|)
expr_stmt|;
else|#
directive|else
name|QTest
operator|::
name|keyClick
argument_list|(
name|list
argument_list|,
name|Qt
operator|::
name|Key_O
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|qWait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"QTBUG-23703"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|fd
operator|.
name|directory
argument_list|()
operator|.
name|absolutePath
argument_list|()
operator|!=
name|QDir
operator|::
name|home
argument_list|()
operator|.
name|absolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|lineEdit
operator|->
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// selecting a dir the text should be cleared so one can just hit ok
comment|// and it selects that directory
name|fd
operator|.
name|setFileMode
argument_list|(
name|QNonNativeFileDialog
operator|::
name|Directory
argument_list|)
expr_stmt|;
name|fd
operator|.
name|setDirectory
argument_list|(
name|QDir
operator|::
name|home
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|list
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_MAC
name|QTest
operator|::
name|keyClick
argument_list|(
name|list
argument_list|,
name|Qt
operator|::
name|Key_Return
argument_list|)
expr_stmt|;
else|#
directive|else
name|QTest
operator|::
name|keyClick
argument_list|(
name|list
argument_list|,
name|Qt
operator|::
name|Key_O
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|qWait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fd
operator|.
name|directory
argument_list|()
operator|.
name|absolutePath
argument_list|()
operator|!=
name|QDir
operator|::
name|home
argument_list|()
operator|.
name|absolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|lineEdit
operator|->
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|//remove the dir
name|QDir
operator|::
name|home
argument_list|()
operator|.
name|rmdir
argument_list|(
literal|"_____aaaaaaaaaaaaaaaaaaaaaa"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|enableChooseButton
name|void
name|tst_QFiledialog
operator|::
name|enableChooseButton
parameter_list|()
block|{
name|QNonNativeFileDialog
name|fd
decl_stmt|;
name|fd
operator|.
name|setFileMode
argument_list|(
name|QFileDialog
operator|::
name|Directory
argument_list|)
expr_stmt|;
name|fd
operator|.
name|show
argument_list|()
expr_stmt|;
name|QDialogButtonBox
modifier|*
name|buttonBox
init|=
name|qFindChild
argument_list|<
name|QDialogButtonBox
operator|*
argument_list|>
argument_list|(
operator|&
name|fd
argument_list|,
literal|"buttonBox"
argument_list|)
decl_stmt|;
name|QPushButton
modifier|*
name|button
init|=
name|buttonBox
operator|->
name|button
argument_list|(
name|QDialogButtonBox
operator|::
name|Open
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|button
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|button
operator|->
name|isEnabled
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_typedef
DECL|typedef|_qt_filedialog_existing_directory_hook
typedef|typedef
name|QString
function_decl|(
modifier|*
name|_qt_filedialog_existing_directory_hook
function_decl|)
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|caption
parameter_list|,
specifier|const
name|QString
modifier|&
name|dir
parameter_list|,
name|QFileDialog
operator|::
name|Options
name|options
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
specifier|extern
name|Q_GUI_EXPORT
name|_qt_filedialog_existing_directory_hook
name|qt_filedialog_existing_directory_hook
decl_stmt|;
end_decl_stmt
begin_function
name|QT_END_NAMESPACE
DECL|function|existing
name|QString
name|existing
parameter_list|(
name|QWidget
modifier|*
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
name|QFileDialog
operator|::
name|Options
parameter_list|)
block|{
return|return
literal|"dir"
return|;
block|}
end_function
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_typedef
DECL|typedef|_qt_filedialog_open_filename_hook
typedef|typedef
name|QString
function_decl|(
modifier|*
name|_qt_filedialog_open_filename_hook
function_decl|)
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|caption
parameter_list|,
specifier|const
name|QString
modifier|&
name|dir
parameter_list|,
specifier|const
name|QString
modifier|&
name|filter
parameter_list|,
name|QString
modifier|*
name|selectedFilter
parameter_list|,
name|QFileDialog
operator|::
name|Options
name|options
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
specifier|extern
name|Q_GUI_EXPORT
name|_qt_filedialog_open_filename_hook
name|qt_filedialog_open_filename_hook
decl_stmt|;
end_decl_stmt
begin_function
name|QT_END_NAMESPACE
DECL|function|openName
name|QString
name|openName
parameter_list|(
name|QWidget
modifier|*
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
name|QString
modifier|*
parameter_list|,
name|QFileDialog
operator|::
name|Options
parameter_list|)
block|{
return|return
literal|"openName"
return|;
block|}
end_function
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_typedef
DECL|typedef|_qt_filedialog_open_filenames_hook
typedef|typedef
name|QStringList
function_decl|(
modifier|*
name|_qt_filedialog_open_filenames_hook
function_decl|)
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|caption
parameter_list|,
specifier|const
name|QString
modifier|&
name|dir
parameter_list|,
specifier|const
name|QString
modifier|&
name|filter
parameter_list|,
name|QString
modifier|*
name|selectedFilter
parameter_list|,
name|QFileDialog
operator|::
name|Options
name|options
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
specifier|extern
name|Q_GUI_EXPORT
name|_qt_filedialog_open_filenames_hook
name|qt_filedialog_open_filenames_hook
decl_stmt|;
end_decl_stmt
begin_function
name|QT_END_NAMESPACE
DECL|function|openNames
name|QStringList
name|openNames
parameter_list|(
name|QWidget
modifier|*
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
name|QString
modifier|*
parameter_list|,
name|QFileDialog
operator|::
name|Options
parameter_list|)
block|{
return|return
name|QStringList
argument_list|(
literal|"openNames"
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_typedef
DECL|typedef|_qt_filedialog_save_filename_hook
typedef|typedef
name|QString
function_decl|(
modifier|*
name|_qt_filedialog_save_filename_hook
function_decl|)
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|caption
parameter_list|,
specifier|const
name|QString
modifier|&
name|dir
parameter_list|,
specifier|const
name|QString
modifier|&
name|filter
parameter_list|,
name|QString
modifier|*
name|selectedFilter
parameter_list|,
name|QFileDialog
operator|::
name|Options
name|options
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
specifier|extern
name|Q_GUI_EXPORT
name|_qt_filedialog_save_filename_hook
name|qt_filedialog_save_filename_hook
decl_stmt|;
end_decl_stmt
begin_function
name|QT_END_NAMESPACE
DECL|function|saveName
name|QString
name|saveName
parameter_list|(
name|QWidget
modifier|*
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
name|QString
modifier|*
parameter_list|,
name|QFileDialog
operator|::
name|Options
parameter_list|)
block|{
return|return
literal|"saveName"
return|;
block|}
end_function
begin_function
DECL|function|hooks
name|void
name|tst_QFiledialog
operator|::
name|hooks
parameter_list|()
block|{
name|qt_filedialog_existing_directory_hook
operator|=
operator|&
name|existing
expr_stmt|;
name|qt_filedialog_save_filename_hook
operator|=
operator|&
name|saveName
expr_stmt|;
name|qt_filedialog_open_filename_hook
operator|=
operator|&
name|openName
expr_stmt|;
name|qt_filedialog_open_filenames_hook
operator|=
operator|&
name|openNames
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFileDialog
operator|::
name|getExistingDirectory
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"dir"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFileDialog
operator|::
name|getOpenFileName
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"openName"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFileDialog
operator|::
name|getOpenFileNames
argument_list|()
argument_list|,
name|QStringList
argument_list|(
literal|"openNames"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFileDialog
operator|::
name|getSaveFileName
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"saveName"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_UNIX
end_ifdef
begin_function
DECL|function|tildeExpansion_data
name|void
name|tst_QFiledialog
operator|::
name|tildeExpansion_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"tildePath"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expandedPath"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty path"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"~"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"~"
argument_list|)
operator|<<
name|QDir
operator|::
name|homePath
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"~/some/sub/dir/"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"~/some/sub/dir"
argument_list|)
operator|<<
name|QDir
operator|::
name|homePath
argument_list|()
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/some/sub/dir"
argument_list|)
expr_stmt|;
name|QString
name|userHome
init|=
name|QString
argument_list|(
name|qgetenv
argument_list|(
literal|"USER"
argument_list|)
argument_list|)
decl_stmt|;
name|userHome
operator|.
name|prepend
argument_list|(
literal|'~'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"current user (~<user> syntax)"
argument_list|)
operator|<<
name|userHome
operator|<<
name|QDir
operator|::
name|homePath
argument_list|()
expr_stmt|;
name|QString
name|invalid
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"~thisIsNotAValidUserName"
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid user name"
argument_list|)
operator|<<
name|invalid
operator|<<
name|invalid
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tildeExpansion
name|void
name|tst_QFiledialog
operator|::
name|tildeExpansion
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_BUILD_INTERNAL
name|QSKIP
argument_list|(
literal|"Test case relies on developer build (AUTOTEST_EXPORT)"
argument_list|)
expr_stmt|;
else|#
directive|else
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|tildePath
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expandedPath
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qt_tildeExpansion
argument_list|(
name|tildePath
argument_list|)
argument_list|,
name|expandedPath
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QFiledialog
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qfiledialog.moc"
end_include
end_unit
