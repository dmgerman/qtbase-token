begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|//#define QT_TST_QAPP_DEBUG
end_comment
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtCore/QAbstractEventDispatcher>
end_include
begin_include
include|#
directive|include
file|<QtCore/QFileInfo>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDir>
end_include
begin_include
include|#
directive|include
file|<QtCore/QProcess>
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qeventloop_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/QFontDatabase>
end_include
begin_include
include|#
directive|include
file|<QtGui/QClipboard>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QApplication>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QMessageBox>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QStyleFactory>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QHBoxLayout>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QPushButton>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QLineEdit>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QLabel>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QMainWindow>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/private/qapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/private/qstylesheetstyle_p.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WINCE
end_ifdef
begin_include
include|#
directive|include
file|<windows.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
specifier|extern
name|bool
name|Q_GUI_EXPORT
name|qt_tab_all_widgets
decl_stmt|;
end_decl_stmt
begin_comment
comment|// from qapplication.cpp
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_class
DECL|class|tst_QApplication
class|class
name|tst_QApplication
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QApplication
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QApplication
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|sendEventsOnProcessEvents
parameter_list|()
function_decl|;
comment|// this must be the first test
name|void
name|staticSetup
parameter_list|()
function_decl|;
name|void
name|alert
parameter_list|()
function_decl|;
name|void
name|multiple_data
parameter_list|()
function_decl|;
name|void
name|multiple
parameter_list|()
function_decl|;
name|void
name|nonGui
parameter_list|()
function_decl|;
name|void
name|setFont_data
parameter_list|()
function_decl|;
name|void
name|setFont
parameter_list|()
function_decl|;
name|void
name|args_data
parameter_list|()
function_decl|;
name|void
name|args
parameter_list|()
function_decl|;
name|void
name|lastWindowClosed
parameter_list|()
function_decl|;
name|void
name|quitOnLastWindowClosed
parameter_list|()
function_decl|;
name|void
name|closeAllWindows
parameter_list|()
function_decl|;
name|void
name|testDeleteLater
parameter_list|()
function_decl|;
name|void
name|testDeleteLaterProcessEvents
parameter_list|()
function_decl|;
name|void
name|libraryPaths
parameter_list|()
function_decl|;
name|void
name|libraryPaths_qt_plugin_path
parameter_list|()
function_decl|;
name|void
name|libraryPaths_qt_plugin_path_2
parameter_list|()
function_decl|;
name|void
name|sendPostedEvents
parameter_list|()
function_decl|;
name|void
name|thread
parameter_list|()
function_decl|;
name|void
name|desktopSettingsAware
parameter_list|()
function_decl|;
name|void
name|setActiveWindow
parameter_list|()
function_decl|;
name|void
name|focusChanged
parameter_list|()
function_decl|;
name|void
name|focusOut
parameter_list|()
function_decl|;
name|void
name|execAfterExit
parameter_list|()
function_decl|;
name|void
name|wheelScrollLines
parameter_list|()
function_decl|;
name|void
name|task109149
parameter_list|()
function_decl|;
name|void
name|style
parameter_list|()
function_decl|;
name|void
name|allWidgets
parameter_list|()
function_decl|;
name|void
name|topLevelWidgets
parameter_list|()
function_decl|;
name|void
name|setAttribute
parameter_list|()
function_decl|;
name|void
name|windowsCommandLine_data
parameter_list|()
function_decl|;
name|void
name|windowsCommandLine
parameter_list|()
function_decl|;
name|void
name|touchEventPropagation
parameter_list|()
function_decl|;
name|void
name|qtbug_12673
parameter_list|()
function_decl|;
name|void
name|noQuitOnHide
parameter_list|()
function_decl|;
name|void
name|globalStaticObjectDestruction
parameter_list|()
function_decl|;
comment|// run this last
name|void
name|abortQuitOnShow
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_class
DECL|class|EventSpy
class|class
name|EventSpy
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|member|recordedEvents
name|QList
argument_list|<
name|int
argument_list|>
name|recordedEvents
decl_stmt|;
DECL|function|eventFilter
name|bool
name|eventFilter
parameter_list|(
name|QObject
modifier|*
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|recordedEvents
operator|.
name|append
argument_list|(
name|event
operator|->
name|type
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|initTestCase
name|void
name|tst_QApplication
operator|::
name|initTestCase
parameter_list|()
block|{
comment|// chdir to our testdata path and execute helper apps relative to that.
specifier|const
name|QString
name|testdataDir
init|=
name|QFileInfo
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"desktopsettingsaware"
argument_list|)
argument_list|)
operator|.
name|absolutePath
argument_list|()
decl_stmt|;
name|QVERIFY2
argument_list|(
name|QDir
operator|::
name|setCurrent
argument_list|(
name|testdataDir
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
literal|"Could not chdir to "
operator|+
name|testdataDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendEventsOnProcessEvents
name|void
name|tst_QApplication
operator|::
name|sendEventsOnProcessEvents
parameter_list|()
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
name|EventSpy
name|spy
decl_stmt|;
name|app
operator|.
name|installEventFilter
argument_list|(
operator|&
name|spy
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|app
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|recordedEvents
operator|.
name|contains
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|CloseEventTestWindow
class|class
name|CloseEventTestWindow
super|:
specifier|public
name|QWidget
block|{
public|public:
DECL|function|CloseEventTestWindow
name|CloseEventTestWindow
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
block|{     }
DECL|function|closeEvent
name|void
name|closeEvent
parameter_list|(
name|QCloseEvent
modifier|*
name|event
parameter_list|)
block|{
name|QWidget
name|dialog
decl_stmt|;
name|dialog
operator|.
name|show
argument_list|()
expr_stmt|;
name|dialog
operator|.
name|close
argument_list|()
expr_stmt|;
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|argv0
specifier|static
name|char
modifier|*
name|argv0
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|tst_QApplication
name|tst_QApplication
operator|::
name|tst_QApplication
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE
comment|// Clean up environment previously to launching test
name|qputenv
argument_list|(
literal|"QT_PLUGIN_PATH"
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~tst_QApplication
name|tst_QApplication
operator|::
name|~
name|tst_QApplication
parameter_list|()
block|{  }
end_destructor
begin_function
DECL|function|init
name|void
name|tst_QApplication
operator|::
name|init
parameter_list|()
block|{
comment|// TODO: Add initialization code here.
comment|// This will be executed immediately before each test is run.
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QApplication
operator|::
name|cleanup
parameter_list|()
block|{
comment|// TODO: Add cleanup code here.
comment|// This will be executed immediately after each test is run.
block|}
end_function
begin_function
DECL|function|staticSetup
name|void
name|tst_QApplication
operator|::
name|staticSetup
parameter_list|()
block|{
name|QVERIFY
argument_list|(
operator|!
name|qApp
argument_list|)
expr_stmt|;
name|QStyle
modifier|*
name|style
init|=
name|QStyleFactory
operator|::
name|create
argument_list|(
name|QLatin1String
argument_list|(
literal|"Windows"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|QPalette
name|pal
decl_stmt|;
name|QApplication
operator|::
name|setPalette
argument_list|(
name|pal
argument_list|)
expr_stmt|;
comment|/*QFont font;     QApplication::setFont(font);*/
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
block|}
end_function
begin_comment
comment|// QApp subclass that exits the event loop after 150ms
end_comment
begin_class
DECL|class|TestApplication
class|class
name|TestApplication
super|:
specifier|public
name|QApplication
block|{
public|public:
DECL|function|TestApplication
name|TestApplication
parameter_list|(
name|int
modifier|&
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
member_init_list|:
name|QApplication
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
block|{
name|startTimer
argument_list|(
literal|150
argument_list|)
expr_stmt|;
block|}
DECL|function|timerEvent
name|void
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
parameter_list|)
block|{
name|quit
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|alert
name|void
name|tst_QApplication
operator|::
name|alert
parameter_list|()
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
name|app
operator|.
name|alert
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QWidget
name|widget
decl_stmt|;
name|QWidget
name|widget2
decl_stmt|;
name|app
operator|.
name|alert
argument_list|(
operator|&
name|widget
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|widget
operator|.
name|show
argument_list|()
expr_stmt|;
name|widget2
operator|.
name|show
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
name|qt_x11_wait_for_window_manager
argument_list|(
operator|&
name|widget
argument_list|)
expr_stmt|;
name|qt_x11_wait_for_window_manager
argument_list|(
operator|&
name|widget2
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|app
operator|.
name|alert
argument_list|(
operator|&
name|widget
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|app
operator|.
name|alert
argument_list|(
operator|&
name|widget
argument_list|,
literal|250
argument_list|)
expr_stmt|;
name|widget2
operator|.
name|activateWindow
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|widget2
argument_list|)
expr_stmt|;
name|app
operator|.
name|alert
argument_list|(
operator|&
name|widget
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|widget
operator|.
name|activateWindow
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|widget
argument_list|)
expr_stmt|;
name|app
operator|.
name|alert
argument_list|(
operator|&
name|widget
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|app
operator|.
name|syncX
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multiple_data
name|void
name|tst_QApplication
operator|::
name|multiple_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"features"
argument_list|)
expr_stmt|;
comment|// return a list of things to try
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
name|QStringList
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|QStringList
argument_list|(
literal|"QFont"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
name|QStringList
argument_list|(
literal|"QPixmap"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data3"
argument_list|)
operator|<<
name|QStringList
argument_list|(
literal|"QWidget"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multiple
name|void
name|tst_QApplication
operator|::
name|multiple
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|features
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|int
name|argc
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|++
operator|<
literal|5
condition|)
block|{
name|TestApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|features
operator|.
name|contains
argument_list|(
literal|"QFont"
argument_list|)
condition|)
block|{
comment|// create font and force loading
name|QFont
name|font
argument_list|(
literal|"Arial"
argument_list|,
literal|12
argument_list|)
decl_stmt|;
name|QFontInfo
name|finfo
argument_list|(
name|font
argument_list|)
decl_stmt|;
name|finfo
operator|.
name|exactMatch
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|features
operator|.
name|contains
argument_list|(
literal|"QPixmap"
argument_list|)
condition|)
block|{
name|QPixmap
name|pix
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|pix
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|features
operator|.
name|contains
argument_list|(
literal|"QWidget"
argument_list|)
condition|)
block|{
name|QWidget
name|widget
decl_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|app
operator|.
name|exec
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|nonGui
name|void
name|tst_QApplication
operator|::
name|nonGui
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_HPUX
comment|// ### This is only to allow us to generate a test report for now.
name|QSKIP
argument_list|(
literal|"This test shuts down the window manager on HP-UX."
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|qApp
argument_list|,
operator|&
name|app
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setFont_data
name|void
name|tst_QApplication
operator|::
name|setFont_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"family"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"pointsize"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"beforeAppConstructor"
argument_list|)
expr_stmt|;
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
comment|// Needed for QFontDatabase
name|int
name|cnt
init|=
literal|0
decl_stmt|;
name|QFontDatabase
name|fdb
decl_stmt|;
name|QStringList
name|families
init|=
name|fdb
operator|.
name|families
argument_list|()
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|const_iterator
name|itr
init|=
name|families
operator|.
name|begin
argument_list|()
init|;
name|itr
operator|!=
name|families
operator|.
name|end
argument_list|()
condition|;
operator|++
name|itr
control|)
block|{
if|if
condition|(
name|cnt
operator|<
literal|3
condition|)
block|{
name|QString
name|family
init|=
operator|*
name|itr
decl_stmt|;
name|QStringList
name|styles
init|=
name|fdb
operator|.
name|styles
argument_list|(
name|family
argument_list|)
decl_stmt|;
if|if
condition|(
name|styles
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|QString
name|style
init|=
name|styles
operator|.
name|first
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|sizes
init|=
name|fdb
operator|.
name|pointSizes
argument_list|(
name|family
argument_list|,
name|style
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sizes
operator|.
name|size
argument_list|()
condition|)
name|sizes
operator|=
name|fdb
operator|.
name|standardSizes
argument_list|()
expr_stmt|;
if|if
condition|(
name|sizes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"data%1a"
argument_list|)
operator|.
name|arg
argument_list|(
name|cnt
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
name|family
operator|<<
name|sizes
operator|.
name|first
argument_list|()
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"data%1b"
argument_list|)
operator|.
name|arg
argument_list|(
name|cnt
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
name|family
operator|<<
name|sizes
operator|.
name|first
argument_list|()
operator|<<
literal|true
expr_stmt|;
block|}
block|}
block|}
operator|++
name|cnt
expr_stmt|;
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonexistingfont after"
argument_list|)
operator|<<
literal|"nosuchfont_probably_quiteunlikely"
operator|<<
literal|0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonexistingfont before"
argument_list|)
operator|<<
literal|"nosuchfont_probably_quiteunlikely"
operator|<<
literal|0
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"largescaleable after"
argument_list|)
operator|<<
literal|"smoothtimes"
operator|<<
literal|100
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"largescaleable before"
argument_list|)
operator|<<
literal|"smoothtimes"
operator|<<
literal|100
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"largeunscaleale after"
argument_list|)
operator|<<
literal|"helvetica"
operator|<<
literal|100
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"largeunscaleale before"
argument_list|)
operator|<<
literal|"helvetica"
operator|<<
literal|100
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setFont
name|void
name|tst_QApplication
operator|::
name|setFont
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|family
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|pointsize
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|beforeAppConstructor
argument_list|)
expr_stmt|;
name|QFont
name|font
argument_list|(
name|family
argument_list|,
name|pointsize
argument_list|)
decl_stmt|;
if|if
condition|(
name|beforeAppConstructor
condition|)
block|{
name|QApplication
operator|::
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QApplication
operator|::
name|font
argument_list|()
argument_list|,
name|font
argument_list|)
expr_stmt|;
block|}
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|beforeAppConstructor
condition|)
name|QApplication
operator|::
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|font
argument_list|()
argument_list|,
name|font
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|args_data
name|void
name|tst_QApplication
operator|::
name|args_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"argc_in"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"args_in"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"argc_out"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"args_out"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"App name"
argument_list|)
operator|<<
literal|1
operator|<<
literal|"/usr/bin/appname"
operator|<<
literal|1
operator|<<
literal|"/usr/bin/appname"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"No arguments"
argument_list|)
operator|<<
literal|0
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"App name, style"
argument_list|)
operator|<<
literal|3
operator|<<
literal|"/usr/bin/appname -style motif"
operator|<<
literal|1
operator|<<
literal|"/usr/bin/appname"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"App name, style, arbitrary, reverse"
argument_list|)
operator|<<
literal|5
operator|<<
literal|"/usr/bin/appname -style motif -arbitrary -reverse"
operator|<<
literal|2
operator|<<
literal|"/usr/bin/appname -arbitrary"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task109149
name|void
name|tst_QApplication
operator|::
name|task109149
parameter_list|()
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|setFont
argument_list|(
name|QFont
argument_list|(
literal|"helvetica"
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|QWidget
name|w
decl_stmt|;
name|w
operator|.
name|setWindowTitle
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|app
operator|.
name|processEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|QString2cstrings
specifier|static
name|char
modifier|*
modifier|*
name|QString2cstrings
parameter_list|(
specifier|const
name|QString
modifier|&
name|args
parameter_list|)
block|{
specifier|static
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|cache
decl_stmt|;
name|int
name|i
decl_stmt|;
name|char
modifier|*
modifier|*
name|argarray
init|=
literal|0
decl_stmt|;
name|QStringList
name|list
init|=
name|args
operator|.
name|split
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
empty_stmt|;
name|argarray
operator|=
operator|new
name|char
operator|*
index|[
name|list
operator|.
name|count
argument_list|()
operator|+
literal|1
index|]
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
operator|(
name|int
operator|)
name|list
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QByteArray
name|l1
init|=
name|list
index|[
name|i
index|]
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|argarray
index|[
name|i
index|]
operator|=
name|l1
operator|.
name|data
argument_list|()
expr_stmt|;
name|cache
operator|.
name|append
argument_list|(
name|l1
argument_list|)
expr_stmt|;
block|}
name|argarray
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
return|return
name|argarray
return|;
block|}
end_function
begin_function
DECL|function|cstrings2QString
specifier|static
name|QString
name|cstrings2QString
parameter_list|(
name|char
modifier|*
modifier|*
name|args
parameter_list|)
block|{
name|QString
name|string
decl_stmt|;
if|if
condition|(
operator|!
name|args
condition|)
return|return
name|string
return|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|args
index|[
name|i
index|]
condition|)
block|{
name|string
operator|+=
name|args
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|args
index|[
name|i
operator|+
literal|1
index|]
condition|)
name|string
operator|+=
literal|" "
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
return|return
name|string
return|;
block|}
end_function
begin_function
DECL|function|args
name|void
name|tst_QApplication
operator|::
name|args
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|argc_in
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|args_in
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|argc_out
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|args_out
argument_list|)
expr_stmt|;
name|char
modifier|*
modifier|*
name|argv
init|=
name|QString2cstrings
argument_list|(
name|args_in
argument_list|)
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc_in
argument_list|,
name|argv
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
name|QString
name|argv_out
init|=
name|cstrings2QString
argument_list|(
name|argv
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|argc_in
argument_list|,
name|argc_out
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|argv_out
argument_list|,
name|args_out
argument_list|)
expr_stmt|;
operator|delete
index|[]
name|argv
expr_stmt|;
block|}
end_function
begin_class
DECL|class|CloseWidget
class|class
name|CloseWidget
super|:
specifier|public
name|QWidget
block|{
name|Q_OBJECT
public|public:
DECL|function|CloseWidget
name|CloseWidget
parameter_list|()
block|{
name|startTimer
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
protected|protected:
DECL|function|timerEvent
name|void
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
parameter_list|)
block|{
name|close
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|lastWindowClosed
name|void
name|tst_QApplication
operator|::
name|lastWindowClosed
parameter_list|()
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|app
argument_list|,
name|SIGNAL
argument_list|(
name|lastWindowClosed
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QPointer
argument_list|<
name|QDialog
argument_list|>
name|dialog
init|=
operator|new
name|QDialog
decl_stmt|;
name|QVERIFY
argument_list|(
name|dialog
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_QuitOnClose
argument_list|)
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|1000
argument_list|,
name|dialog
argument_list|,
name|SLOT
argument_list|(
name|accept
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dialog
operator|->
name|exec
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|dialog
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QPointer
argument_list|<
name|CloseWidget
argument_list|>
name|widget
init|=
operator|new
name|CloseWidget
decl_stmt|;
name|QVERIFY
argument_list|(
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_QuitOnClose
argument_list|)
argument_list|)
expr_stmt|;
name|widget
operator|->
name|show
argument_list|()
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|app
argument_list|,
name|SIGNAL
argument_list|(
name|lastWindowClosed
argument_list|()
argument_list|)
argument_list|,
name|widget
argument_list|,
name|SLOT
argument_list|(
name|deleteLater
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|app
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|widget
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
operator|delete
name|dialog
expr_stmt|;
comment|// show 3 windows, close them, should only get lastWindowClosed once
name|QWidget
name|w1
decl_stmt|;
name|QWidget
name|w2
decl_stmt|;
name|QWidget
name|w3
decl_stmt|;
name|w1
operator|.
name|show
argument_list|()
expr_stmt|;
name|w2
operator|.
name|show
argument_list|()
expr_stmt|;
name|w3
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|1000
argument_list|,
operator|&
name|app
argument_list|,
name|SLOT
argument_list|(
name|closeAllWindows
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|app
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QuitOnLastWindowClosedDialog
class|class
name|QuitOnLastWindowClosedDialog
super|:
specifier|public
name|QDialog
block|{
name|Q_OBJECT
public|public:
DECL|member|okButton
name|QPushButton
modifier|*
name|okButton
decl_stmt|;
DECL|function|QuitOnLastWindowClosedDialog
name|QuitOnLastWindowClosedDialog
parameter_list|()
block|{
name|QHBoxLayout
modifier|*
name|hbox
init|=
operator|new
name|QHBoxLayout
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|okButton
operator|=
operator|new
name|QPushButton
argument_list|(
literal|"&ok"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|hbox
operator|->
name|addWidget
argument_list|(
name|okButton
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|okButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|accept
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|okButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|ok_clicked
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
public|public
name|slots
public|:
DECL|function|ok_clicked
name|void
name|ok_clicked
parameter_list|()
block|{
name|QDialog
name|other
decl_stmt|;
name|QTimer
name|timer
decl_stmt|;
name|connect
argument_list|(
operator|&
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
operator|&
name|other
argument_list|,
name|SLOT
argument_list|(
name|accept
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|appSpy
argument_list|(
name|qApp
argument_list|,
name|SIGNAL
argument_list|(
name|lastWindowClosed
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|timer
operator|.
name|start
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|other
operator|.
name|exec
argument_list|()
expr_stmt|;
comment|// verify that the eventloop ran and let the timer fire
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|appSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|QuitOnLastWindowClosedWindow
class|class
name|QuitOnLastWindowClosedWindow
super|:
specifier|public
name|QWidget
block|{
name|Q_OBJECT
public|public:
DECL|function|QuitOnLastWindowClosedWindow
name|QuitOnLastWindowClosedWindow
parameter_list|()
block|{ }
public|public
name|slots
public|:
DECL|function|execDialogThenShow
name|void
name|execDialogThenShow
parameter_list|()
block|{
name|QDialog
name|dialog
decl_stmt|;
name|QTimer
name|timer1
decl_stmt|;
name|connect
argument_list|(
operator|&
name|timer1
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
operator|&
name|dialog
argument_list|,
name|SLOT
argument_list|(
name|accept
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy1
argument_list|(
operator|&
name|timer1
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|timer1
operator|.
name|setSingleShot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|timer1
operator|.
name|start
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy1
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|show
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|quitOnLastWindowClosed
name|void
name|tst_QApplication
operator|::
name|quitOnLastWindowClosed
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_WIN32
name|QSKIP
argument_list|(
literal|"This test crashes on Windows. Remove skip once the issue causing the crash is fixed (QTBUG-24300)."
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|Q_OS_MAC
comment|// Test hangs on Mac OS X, see QTBUG-24319
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
name|QuitOnLastWindowClosedDialog
name|d
decl_stmt|;
name|d
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|1000
argument_list|,
name|d
operator|.
name|okButton
argument_list|,
name|SLOT
argument_list|(
name|animateClick
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QSignalSpy
name|appSpy
argument_list|(
operator|&
name|app
argument_list|,
name|SIGNAL
argument_list|(
name|lastWindowClosed
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|app
operator|.
name|exec
argument_list|()
expr_stmt|;
comment|// lastWindowClosed() signal should only be sent after the last dialog is closed
name|QCOMPARE
argument_list|(
name|appSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
name|QSignalSpy
name|appSpy
argument_list|(
operator|&
name|app
argument_list|,
name|SIGNAL
argument_list|(
name|lastWindowClosed
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QDialog
name|dialog
decl_stmt|;
name|QTimer
name|timer1
decl_stmt|;
name|connect
argument_list|(
operator|&
name|timer1
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
operator|&
name|dialog
argument_list|,
name|SLOT
argument_list|(
name|accept
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy1
argument_list|(
operator|&
name|timer1
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|timer1
operator|.
name|setSingleShot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|timer1
operator|.
name|start
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy1
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|appSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTimer
name|timer2
decl_stmt|;
name|connect
argument_list|(
operator|&
name|timer2
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
operator|&
name|app
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy2
argument_list|(
operator|&
name|timer2
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|timer2
operator|.
name|setSingleShot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|timer2
operator|.
name|start
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|int
name|returnValue
init|=
name|app
operator|.
name|exec
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|returnValue
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy2
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|appSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
name|QTimer
name|timer
decl_stmt|;
name|timer
operator|.
name|setInterval
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|app
argument_list|,
name|SIGNAL
argument_list|(
name|aboutToQuit
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spy2
argument_list|(
operator|&
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QPointer
argument_list|<
name|QMainWindow
argument_list|>
name|mainWindow
init|=
operator|new
name|QMainWindow
decl_stmt|;
name|QPointer
argument_list|<
name|QDialog
argument_list|>
name|dialog
init|=
operator|new
name|QDialog
argument_list|(
name|mainWindow
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|app
operator|.
name|quitOnLastWindowClosed
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mainWindow
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_QuitOnClose
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|dialog
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_QuitOnClose
argument_list|)
argument_list|)
expr_stmt|;
name|mainWindow
operator|->
name|show
argument_list|()
expr_stmt|;
name|dialog
operator|->
name|show
argument_list|()
expr_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|1000
argument_list|,
name|mainWindow
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// This should quit the application
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|2000
argument_list|,
operator|&
name|app
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// This makes sure we quit even if it didn't
name|app
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy2
operator|.
name|count
argument_list|()
operator|<
literal|15
argument_list|)
expr_stmt|;
comment|// Should be around 10 if closing caused the quit
block|}
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
name|QTimer
name|timer
decl_stmt|;
name|timer
operator|.
name|setInterval
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|app
argument_list|,
name|SIGNAL
argument_list|(
name|aboutToQuit
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spy2
argument_list|(
operator|&
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QPointer
argument_list|<
name|CloseEventTestWindow
argument_list|>
name|mainWindow
init|=
operator|new
name|CloseEventTestWindow
decl_stmt|;
name|QVERIFY
argument_list|(
name|app
operator|.
name|quitOnLastWindowClosed
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mainWindow
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_QuitOnClose
argument_list|)
argument_list|)
expr_stmt|;
name|mainWindow
operator|->
name|show
argument_list|()
expr_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|1000
argument_list|,
name|mainWindow
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// This should quit the application
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|2000
argument_list|,
operator|&
name|app
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// This makes sure we quit even if it didn't
name|app
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy2
operator|.
name|count
argument_list|()
operator|>
literal|15
argument_list|)
expr_stmt|;
comment|// Should be around 20 if closing did not caused the quit
block|}
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
name|QSignalSpy
name|appSpy
argument_list|(
operator|&
name|app
argument_list|,
name|SIGNAL
argument_list|(
name|lastWindowClosed
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// exec a dialog for 1 second, then show the window
name|QuitOnLastWindowClosedWindow
name|window
decl_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|0
argument_list|,
operator|&
name|window
argument_list|,
name|SLOT
argument_list|(
name|execDialogThenShow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTimer
name|timer
decl_stmt|;
name|QSignalSpy
name|timerSpy
argument_list|(
operator|&
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|connect
argument_list|(
operator|&
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
operator|&
name|window
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|timer
operator|.
name|setSingleShot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|timer
operator|.
name|start
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|int
name|returnValue
init|=
name|app
operator|.
name|exec
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|returnValue
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// failure here means the timer above didn't fire, and the
comment|// quit was caused the the dialog being closed (not the window)
name|QCOMPARE
argument_list|(
name|timerSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|appSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|PromptOnCloseWidget
class|class
name|PromptOnCloseWidget
super|:
specifier|public
name|QWidget
block|{
public|public:
DECL|function|closeEvent
name|void
name|closeEvent
parameter_list|(
name|QCloseEvent
modifier|*
name|event
parameter_list|)
block|{
name|QMessageBox
modifier|*
name|messageBox
init|=
operator|new
name|QMessageBox
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|messageBox
operator|->
name|setWindowTitle
argument_list|(
literal|"Unsaved data"
argument_list|)
expr_stmt|;
name|messageBox
operator|->
name|setText
argument_list|(
literal|"Would you like to save or discard your current data?"
argument_list|)
expr_stmt|;
name|messageBox
operator|->
name|setStandardButtons
argument_list|(
name|QMessageBox
operator|::
name|Save
operator||
name|QMessageBox
operator|::
name|Discard
operator||
name|QMessageBox
operator|::
name|Cancel
argument_list|)
expr_stmt|;
name|messageBox
operator|->
name|setDefaultButton
argument_list|(
name|QMessageBox
operator|::
name|Save
argument_list|)
expr_stmt|;
name|messageBox
operator|->
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
name|messageBox
argument_list|)
expr_stmt|;
comment|// verify that all windows are visible
foreach|foreach
control|(
name|QWidget
modifier|*
name|w
decl|,
name|qApp
operator|->
name|topLevelWidgets
argument_list|()
control|)
name|QVERIFY
argument_list|(
name|w
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
comment|// flush event queue
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
comment|// close all windows
name|qApp
operator|->
name|closeAllWindows
argument_list|()
expr_stmt|;
if|if
condition|(
name|messageBox
operator|->
name|standardButton
argument_list|(
name|messageBox
operator|->
name|clickedButton
argument_list|()
argument_list|)
operator|==
name|QMessageBox
operator|::
name|Cancel
condition|)
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
else|else
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
operator|delete
name|messageBox
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|closeAllWindows
name|void
name|tst_QApplication
operator|::
name|closeAllWindows
parameter_list|()
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
comment|// create some windows
operator|new
name|QWidget
expr_stmt|;
operator|new
name|QWidget
expr_stmt|;
operator|new
name|QWidget
expr_stmt|;
comment|// show all windows
foreach|foreach
control|(
name|QWidget
modifier|*
name|w
decl|,
name|app
operator|.
name|topLevelWidgets
argument_list|()
control|)
block|{
name|w
operator|->
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
comment|// verify that they are visible
foreach|foreach
control|(
name|QWidget
modifier|*
name|w
decl|,
name|app
operator|.
name|topLevelWidgets
argument_list|()
control|)
name|QVERIFY
argument_list|(
name|w
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
comment|// empty event queue
name|app
operator|.
name|processEvents
argument_list|()
expr_stmt|;
comment|// close all windows
name|app
operator|.
name|closeAllWindows
argument_list|()
expr_stmt|;
comment|// all windows should no longer be visible
foreach|foreach
control|(
name|QWidget
modifier|*
name|w
decl|,
name|app
operator|.
name|topLevelWidgets
argument_list|()
control|)
name|QVERIFY
argument_list|(
operator|!
name|w
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
comment|// add a window that prompts the user when closed
name|PromptOnCloseWidget
modifier|*
name|promptOnCloseWidget
init|=
operator|new
name|PromptOnCloseWidget
decl_stmt|;
comment|// show all windows
foreach|foreach
control|(
name|QWidget
modifier|*
name|w
decl|,
name|app
operator|.
name|topLevelWidgets
argument_list|()
control|)
block|{
name|w
operator|->
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
comment|// close the last window to open the prompt (eventloop recurses)
name|promptOnCloseWidget
operator|->
name|close
argument_list|()
expr_stmt|;
comment|// all windows should not be visible, except the one that opened the prompt
foreach|foreach
control|(
name|QWidget
modifier|*
name|w
decl|,
name|app
operator|.
name|topLevelWidgets
argument_list|()
control|)
block|{
if|if
condition|(
name|w
operator|==
name|promptOnCloseWidget
condition|)
name|QVERIFY
argument_list|(
name|w
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|QVERIFY
argument_list|(
operator|!
name|w
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|qDeleteAll
argument_list|(
name|app
operator|.
name|topLevelWidgets
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isPathListIncluded
name|bool
name|isPathListIncluded
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|l
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|r
parameter_list|)
block|{
name|int
name|size
init|=
name|r
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
name|l
operator|.
name|count
argument_list|()
condition|)
return|return
literal|false
return|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|Qt
operator|::
name|CaseSensitivity
name|cs
init|=
name|Qt
operator|::
name|CaseInsensitive
decl_stmt|;
else|#
directive|else
name|Qt
operator|::
name|CaseSensitivity
name|cs
init|=
name|Qt
operator|::
name|CaseSensitive
decl_stmt|;
endif|#
directive|endif
name|int
name|i
init|=
literal|0
decl_stmt|,
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|l
operator|.
name|count
argument_list|()
operator|&&
name|j
operator|<
name|r
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|l
index|[
name|i
index|]
argument_list|)
operator|.
name|compare
argument_list|(
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|r
index|[
name|j
index|]
argument_list|)
argument_list|,
name|cs
argument_list|)
operator|==
literal|0
condition|)
block|{
operator|++
name|j
expr_stmt|;
name|i
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
return|return
name|j
operator|==
name|r
operator|.
name|count
argument_list|()
return|;
block|}
end_function
begin_define
DECL|macro|QT_TST_QAPP_DEBUG
define|#
directive|define
name|QT_TST_QAPP_DEBUG
end_define
begin_function
DECL|function|libraryPaths
name|void
name|tst_QApplication
operator|::
name|libraryPaths
parameter_list|()
block|{
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|QString
name|testDir
init|=
name|QFileInfo
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"test/test.pro"
argument_list|)
argument_list|)
operator|.
name|absolutePath
argument_list|()
decl_stmt|;
else|#
directive|else
comment|// On Windows CE we need QApplication object to have valid
comment|// current Path. Therefore we need to identify it ourselves
comment|// here for the test.
name|QFileInfo
name|filePath
decl_stmt|;
name|wchar_t
name|module_name
index|[
name|MAX_PATH
index|]
decl_stmt|;
name|GetModuleFileName
argument_list|(
literal|0
argument_list|,
name|module_name
argument_list|,
name|MAX_PATH
argument_list|)
expr_stmt|;
name|filePath
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|module_name
argument_list|)
expr_stmt|;
name|QString
name|testDir
init|=
name|filePath
operator|.
name|path
argument_list|()
operator|+
literal|"/test"
decl_stmt|;
endif|#
directive|endif
name|QApplication
operator|::
name|setLibraryPaths
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|testDir
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QApplication
operator|::
name|libraryPaths
argument_list|()
argument_list|,
operator|(
name|QStringList
argument_list|()
operator|<<
name|testDir
operator|)
argument_list|)
expr_stmt|;
comment|// creating QApplication adds the applicationDirPath to the libraryPath
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
operator|&
name|argv0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
name|QString
name|appDirPath
init|=
name|QDir
argument_list|(
name|app
operator|.
name|applicationDirPath
argument_list|()
argument_list|)
operator|.
name|canonicalPath
argument_list|()
decl_stmt|;
name|QStringList
name|actual
init|=
name|QApplication
operator|::
name|libraryPaths
argument_list|()
decl_stmt|;
name|actual
operator|.
name|sort
argument_list|()
expr_stmt|;
name|QStringList
name|expected
init|=
name|QSet
argument_list|<
name|QString
argument_list|>
operator|::
name|fromList
argument_list|(
operator|(
name|QStringList
argument_list|()
operator|<<
name|testDir
operator|<<
name|appDirPath
operator|)
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|expected
operator|.
name|sort
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|isPathListIncluded
argument_list|(
name|actual
argument_list|,
name|expected
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
literal|"actual:\n - "
operator|+
name|actual
operator|.
name|join
argument_list|(
literal|"\n - "
argument_list|)
operator|+
literal|"\nexpected:\n - "
operator|+
name|expected
operator|.
name|join
argument_list|(
literal|"\n - "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|// creating QApplication adds the applicationDirPath and plugin install path to the libraryPath
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
operator|&
name|argv0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
name|QString
name|appDirPath
init|=
name|app
operator|.
name|applicationDirPath
argument_list|()
decl_stmt|;
name|QString
name|installPathPlugins
init|=
name|QLibraryInfo
operator|::
name|location
argument_list|(
name|QLibraryInfo
operator|::
name|PluginsPath
argument_list|)
decl_stmt|;
name|QStringList
name|actual
init|=
name|QApplication
operator|::
name|libraryPaths
argument_list|()
decl_stmt|;
name|actual
operator|.
name|sort
argument_list|()
expr_stmt|;
name|QStringList
name|expected
init|=
name|QSet
argument_list|<
name|QString
argument_list|>
operator|::
name|fromList
argument_list|(
operator|(
name|QStringList
argument_list|()
operator|<<
name|installPathPlugins
operator|<<
name|appDirPath
operator|)
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|expected
operator|.
name|sort
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|isPathListIncluded
argument_list|(
name|actual
argument_list|,
name|expected
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
literal|"actual:\n - "
operator|+
name|actual
operator|.
name|join
argument_list|(
literal|"\n - "
argument_list|)
operator|+
literal|"\nexpected:\n - "
operator|+
name|expected
operator|.
name|join
argument_list|(
literal|"\n - "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// setting the library paths overrides everything
name|QString
name|testDir
init|=
name|QFileInfo
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"test/test.pro"
argument_list|)
argument_list|)
operator|.
name|absolutePath
argument_list|()
decl_stmt|;
name|QApplication
operator|::
name|setLibraryPaths
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|testDir
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|isPathListIncluded
argument_list|(
name|QApplication
operator|::
name|libraryPaths
argument_list|()
argument_list|,
operator|(
name|QStringList
argument_list|()
operator|<<
name|testDir
operator|)
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
literal|"actual:\n - "
operator|+
name|QApplication
operator|::
name|libraryPaths
argument_list|()
operator|.
name|join
argument_list|(
literal|"\n - "
argument_list|)
operator|+
literal|"\nexpected:\n - "
operator|+
name|testDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
ifdef|#
directive|ifdef
name|QT_TST_QAPP_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"Initial library path:"
operator|<<
name|QApplication
operator|::
name|libraryPaths
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|int
name|count
init|=
name|QApplication
operator|::
name|libraryPaths
argument_list|()
operator|.
name|count
argument_list|()
decl_stmt|;
if|#
directive|if
literal|0
comment|// this test doesn't work if KDE 4 is installed
block|QCOMPARE(count, 1);
comment|// before creating QApplication, only the PluginsPath is in the libraryPaths()
endif|#
directive|endif
name|QString
name|installPathPlugins
init|=
name|QLibraryInfo
operator|::
name|location
argument_list|(
name|QLibraryInfo
operator|::
name|PluginsPath
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|addLibraryPath
argument_list|(
name|installPathPlugins
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_TST_QAPP_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"installPathPlugins"
operator|<<
name|installPathPlugins
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"After adding plugins path:"
operator|<<
name|QApplication
operator|::
name|libraryPaths
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|QApplication
operator|::
name|libraryPaths
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|QString
name|testDir
init|=
name|QFileInfo
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"test/test.pro"
argument_list|)
argument_list|)
operator|.
name|absolutePath
argument_list|()
decl_stmt|;
name|QApplication
operator|::
name|addLibraryPath
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QApplication
operator|::
name|libraryPaths
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
name|count
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// creating QApplication adds the applicationDirPath to the libraryPath
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
operator|&
name|argv0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
name|QString
name|appDirPath
init|=
name|app
operator|.
name|applicationDirPath
argument_list|()
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
name|QApplication
operator|::
name|libraryPaths
argument_list|()
expr_stmt|;
comment|// On Windows CE these are identical and might also be the case for other
comment|// systems too
if|if
condition|(
name|appDirPath
operator|!=
name|installPathPlugins
condition|)
name|QCOMPARE
argument_list|(
name|QApplication
operator|::
name|libraryPaths
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
name|count
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
operator|&
name|argv0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_TST_QAPP_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"Initial library path:"
operator|<<
name|app
operator|.
name|libraryPaths
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|int
name|count
init|=
name|app
operator|.
name|libraryPaths
argument_list|()
operator|.
name|count
argument_list|()
decl_stmt|;
name|QString
name|installPathPlugins
init|=
name|QLibraryInfo
operator|::
name|location
argument_list|(
name|QLibraryInfo
operator|::
name|PluginsPath
argument_list|)
decl_stmt|;
name|app
operator|.
name|addLibraryPath
argument_list|(
name|installPathPlugins
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_TST_QAPP_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"installPathPlugins"
operator|<<
name|installPathPlugins
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"After adding plugins path:"
operator|<<
name|app
operator|.
name|libraryPaths
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|app
operator|.
name|libraryPaths
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|QString
name|appDirPath
init|=
name|app
operator|.
name|applicationDirPath
argument_list|()
decl_stmt|;
name|app
operator|.
name|addLibraryPath
argument_list|(
name|appDirPath
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|app
operator|.
name|addLibraryPath
argument_list|(
name|appDirPath
operator|+
literal|"/../.."
argument_list|)
expr_stmt|;
else|#
directive|else
name|app
operator|.
name|addLibraryPath
argument_list|(
name|appDirPath
operator|+
literal|"/.."
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_TST_QAPP_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"appDirPath"
operator|<<
name|appDirPath
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"After adding appDirPath&& appDirPath + /..:"
operator|<<
name|app
operator|.
name|libraryPaths
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|app
operator|.
name|libraryPaths
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
name|count
operator|+
literal|1
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|app
operator|.
name|addLibraryPath
argument_list|(
name|appDirPath
operator|+
literal|"/../MacOS"
argument_list|)
expr_stmt|;
else|#
directive|else
name|app
operator|.
name|addLibraryPath
argument_list|(
name|appDirPath
operator|+
literal|"/tmp/.."
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_TST_QAPP_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"After adding appDirPath + /tmp/..:"
operator|<<
name|app
operator|.
name|libraryPaths
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|app
operator|.
name|libraryPaths
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
name|count
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|libraryPaths_qt_plugin_path
name|void
name|tst_QApplication
operator|::
name|libraryPaths_qt_plugin_path
parameter_list|()
block|{
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
operator|&
name|argv0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
name|QString
name|appDirPath
init|=
name|app
operator|.
name|applicationDirPath
argument_list|()
decl_stmt|;
comment|// Our hook into libraryPaths() initialization: Set the QT_PLUGIN_PATH environment variable
name|QString
name|installPathPluginsDeCanon
init|=
name|appDirPath
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/tmp/.."
argument_list|)
decl_stmt|;
name|QByteArray
name|ascii
init|=
name|installPathPluginsDeCanon
operator|.
name|toAscii
argument_list|()
decl_stmt|;
name|qputenv
argument_list|(
literal|"QT_PLUGIN_PATH"
argument_list|,
name|ascii
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|app
operator|.
name|libraryPaths
argument_list|()
operator|.
name|contains
argument_list|(
name|appDirPath
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/tmp/.."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|libraryPaths_qt_plugin_path_2
name|void
name|tst_QApplication
operator|::
name|libraryPaths_qt_plugin_path_2
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_UNIX
name|QByteArray
name|validPath
init|=
name|QDir
argument_list|(
literal|"/tmp"
argument_list|)
operator|.
name|canonicalPath
argument_list|()
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|QByteArray
name|nonExistentPath
init|=
literal|"/nonexistent"
decl_stmt|;
name|QByteArray
name|pluginPath
init|=
name|validPath
operator|+
literal|":"
operator|+
name|nonExistentPath
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|QByteArray
name|validPath
init|=
literal|"/Temp"
decl_stmt|;
name|QByteArray
name|nonExistentPath
init|=
literal|"/nonexistent"
decl_stmt|;
name|QByteArray
name|pluginPath
init|=
name|validPath
operator|+
literal|";"
operator|+
name|nonExistentPath
decl_stmt|;
else|#
directive|else
name|QByteArray
name|validPath
init|=
literal|"C:\\windows"
decl_stmt|;
name|QByteArray
name|nonExistentPath
init|=
literal|"Z:\\nonexistent"
decl_stmt|;
name|QByteArray
name|pluginPath
init|=
name|validPath
operator|+
literal|";"
operator|+
name|nonExistentPath
decl_stmt|;
endif|#
directive|endif
endif|#
directive|endif
block|{
comment|// Our hook into libraryPaths() initialization: Set the QT_PLUGIN_PATH environment variable
name|qputenv
argument_list|(
literal|"QT_PLUGIN_PATH"
argument_list|,
name|pluginPath
argument_list|)
expr_stmt|;
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
operator|&
name|argv0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
comment|// library path list should contain the default plus the one valid path
name|QStringList
name|expected
init|=
name|QStringList
argument_list|()
operator|<<
name|QLibraryInfo
operator|::
name|location
argument_list|(
name|QLibraryInfo
operator|::
name|PluginsPath
argument_list|)
operator|<<
name|QDir
argument_list|(
name|app
operator|.
name|applicationDirPath
argument_list|()
argument_list|)
operator|.
name|canonicalPath
argument_list|()
operator|<<
name|QDir
argument_list|(
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|validPath
argument_list|)
argument_list|)
argument_list|)
operator|.
name|canonicalPath
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|expected
operator|=
name|QSet
argument_list|<
name|QString
argument_list|>
operator|::
name|fromList
argument_list|(
name|expected
argument_list|)
operator|.
name|toList
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QVERIFY2
argument_list|(
name|isPathListIncluded
argument_list|(
name|app
operator|.
name|libraryPaths
argument_list|()
argument_list|,
name|expected
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
literal|"actual:\n - "
operator|+
name|app
operator|.
name|libraryPaths
argument_list|()
operator|.
name|join
argument_list|(
literal|"\n - "
argument_list|)
operator|+
literal|"\nexpected:\n - "
operator|+
name|expected
operator|.
name|join
argument_list|(
literal|"\n - "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
operator|&
name|argv0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
comment|// library paths are initialized by the QApplication, setting
comment|// the environment variable here doesn't work
name|qputenv
argument_list|(
literal|"QT_PLUGIN_PATH"
argument_list|,
name|pluginPath
argument_list|)
expr_stmt|;
comment|// library path list should contain the default
name|QStringList
name|expected
init|=
name|QStringList
argument_list|()
operator|<<
name|QLibraryInfo
operator|::
name|location
argument_list|(
name|QLibraryInfo
operator|::
name|PluginsPath
argument_list|)
operator|<<
name|app
operator|.
name|applicationDirPath
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|expected
operator|=
name|QSet
argument_list|<
name|QString
argument_list|>
operator|::
name|fromList
argument_list|(
name|expected
argument_list|)
operator|.
name|toList
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|isPathListIncluded
argument_list|(
name|app
operator|.
name|libraryPaths
argument_list|()
argument_list|,
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|qputenv
argument_list|(
literal|"QT_PLUGIN_PATH"
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|SendPostedEventsTester
class|class
name|SendPostedEventsTester
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|member|eventSpy
name|QList
argument_list|<
name|int
argument_list|>
name|eventSpy
decl_stmt|;
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
function_decl|;
private|private
name|slots
private|:
name|void
name|doTest
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|event
name|bool
name|SendPostedEventsTester
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
name|eventSpy
operator|.
name|append
argument_list|(
name|e
operator|->
name|type
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|QObject
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|doTest
name|void
name|SendPostedEventsTester
operator|::
name|doTest
parameter_list|()
block|{
name|QPointer
argument_list|<
name|SendPostedEventsTester
argument_list|>
name|p
init|=
name|this
decl_stmt|;
name|QApplication
operator|::
name|postEvent
argument_list|(
name|this
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|User
argument_list|)
argument_list|)
expr_stmt|;
comment|// DeferredDelete should not be delivered until returning from this function
name|QApplication
operator|::
name|postEvent
argument_list|(
name|this
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|DeferredDelete
argument_list|)
argument_list|)
expr_stmt|;
name|QEventLoop
name|eventLoop
decl_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|eventLoop
argument_list|,
literal|"quit"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|p
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|eventSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|eventSpy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|int
argument_list|(
name|QEvent
operator|::
name|MetaCall
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|eventSpy
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
name|int
argument_list|(
name|QEvent
operator|::
name|User
argument_list|)
argument_list|)
expr_stmt|;
name|eventSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendPostedEvents
name|void
name|tst_QApplication
operator|::
name|sendPostedEvents
parameter_list|()
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
name|SendPostedEventsTester
modifier|*
name|tester
init|=
operator|new
name|SendPostedEventsTester
decl_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|tester
argument_list|,
literal|"doTest"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|app
argument_list|,
literal|"quit"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|QPointer
argument_list|<
name|SendPostedEventsTester
argument_list|>
name|p
init|=
name|tester
decl_stmt|;
operator|(
name|void
operator|)
name|app
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|p
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|thread
name|void
name|tst_QApplication
operator|::
name|thread
parameter_list|()
block|{
name|QThread
modifier|*
name|currentThread
init|=
name|QThread
operator|::
name|currentThread
argument_list|()
decl_stmt|;
comment|// no app, but still have a valid thread
name|QVERIFY
argument_list|(
name|currentThread
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|// the thread should be running and not finished
name|QVERIFY
argument_list|(
name|currentThread
operator|->
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|currentThread
operator|->
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
comment|// this should probably be in the tst_QObject::thread() test, but
comment|// we put it here since we want to make sure that objects created
comment|// *before* the QApplication has a thread
name|QObject
name|object
decl_stmt|;
name|QObject
name|child
argument_list|(
operator|&
name|object
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|object
operator|.
name|thread
argument_list|()
operator|==
name|currentThread
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|child
operator|.
name|thread
argument_list|()
operator|==
name|currentThread
argument_list|)
expr_stmt|;
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
comment|// current thread still valid
name|QVERIFY
argument_list|(
name|QThread
operator|::
name|currentThread
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|// thread should be the same as before
name|QCOMPARE
argument_list|(
name|QThread
operator|::
name|currentThread
argument_list|()
argument_list|,
name|currentThread
argument_list|)
expr_stmt|;
comment|// app's thread should be the current thread
name|QCOMPARE
argument_list|(
name|app
operator|.
name|thread
argument_list|()
argument_list|,
name|currentThread
argument_list|)
expr_stmt|;
comment|// the thread should still be running and not finished
name|QVERIFY
argument_list|(
name|currentThread
operator|->
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|currentThread
operator|->
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// app dead, current thread still valid
name|QVERIFY
argument_list|(
name|QThread
operator|::
name|currentThread
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QThread
operator|::
name|currentThread
argument_list|()
argument_list|,
name|currentThread
argument_list|)
expr_stmt|;
comment|// the thread should still be running and not finished
name|QVERIFY
argument_list|(
name|currentThread
operator|->
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|currentThread
operator|->
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
comment|// should still have a thread
name|QVERIFY
argument_list|(
name|object
operator|.
name|thread
argument_list|()
operator|==
name|currentThread
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|child
operator|.
name|thread
argument_list|()
operator|==
name|currentThread
argument_list|)
expr_stmt|;
comment|// do the test again, making sure that the thread is the same as
comment|// before
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
comment|// current thread still valid
name|QVERIFY
argument_list|(
name|QThread
operator|::
name|currentThread
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|// thread should be the same as before
name|QCOMPARE
argument_list|(
name|QThread
operator|::
name|currentThread
argument_list|()
argument_list|,
name|currentThread
argument_list|)
expr_stmt|;
comment|// app's thread should be the current thread
name|QCOMPARE
argument_list|(
name|app
operator|.
name|thread
argument_list|()
argument_list|,
name|currentThread
argument_list|)
expr_stmt|;
comment|// the thread should be running and not finished
name|QVERIFY
argument_list|(
name|currentThread
operator|->
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|currentThread
operator|->
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
comment|// should still have a thread
name|QVERIFY
argument_list|(
name|object
operator|.
name|thread
argument_list|()
operator|==
name|currentThread
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|child
operator|.
name|thread
argument_list|()
operator|==
name|currentThread
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// app dead, current thread still valid
name|QVERIFY
argument_list|(
name|QThread
operator|::
name|currentThread
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QThread
operator|::
name|currentThread
argument_list|()
argument_list|,
name|currentThread
argument_list|)
expr_stmt|;
comment|// the thread should still be running and not finished
name|QVERIFY
argument_list|(
name|currentThread
operator|->
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|currentThread
operator|->
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
comment|// should still have a thread
name|QVERIFY
argument_list|(
name|object
operator|.
name|thread
argument_list|()
operator|==
name|currentThread
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|child
operator|.
name|thread
argument_list|()
operator|==
name|currentThread
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|DeleteLaterWidget
class|class
name|DeleteLaterWidget
super|:
specifier|public
name|QWidget
block|{
name|Q_OBJECT
public|public:
DECL|function|DeleteLaterWidget
name|DeleteLaterWidget
parameter_list|(
name|QApplication
modifier|*
name|_app
parameter_list|,
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
block|{
name|app
operator|=
name|_app
expr_stmt|;
name|child_deleted
operator|=
literal|false
expr_stmt|;
block|}
DECL|member|child_deleted
name|bool
name|child_deleted
decl_stmt|;
DECL|member|app
name|QApplication
modifier|*
name|app
decl_stmt|;
public|public
name|slots
public|:
name|void
name|runTest
parameter_list|()
function_decl|;
name|void
name|checkDeleteLater
parameter_list|()
function_decl|;
DECL|function|childDeleted
name|void
name|childDeleted
parameter_list|()
block|{
name|child_deleted
operator|=
literal|true
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|runTest
name|void
name|DeleteLaterWidget
operator|::
name|runTest
parameter_list|()
block|{
name|QObject
modifier|*
name|stillAlive
init|=
name|qFindChild
argument_list|<
name|QObject
operator|*
argument_list|>
argument_list|(
name|this
argument_list|,
literal|"deleteLater"
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|w
init|=
operator|new
name|QWidget
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|w
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|childDeleted
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|child_deleted
argument_list|)
expr_stmt|;
name|QDialog
name|dlg
decl_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|500
argument_list|,
operator|&
name|dlg
argument_list|,
name|SLOT
argument_list|(
name|reject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dlg
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|child_deleted
argument_list|)
expr_stmt|;
name|app
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|child_deleted
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|500
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|checkDeleteLater
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|app
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|stillAlive
argument_list|)
expr_stmt|;
comment|// verify at the end to make test terminate
block|}
end_function
begin_function
DECL|function|checkDeleteLater
name|void
name|DeleteLaterWidget
operator|::
name|checkDeleteLater
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|child_deleted
argument_list|)
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testDeleteLater
name|void
name|tst_QApplication
operator|::
name|testDeleteLater
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|QSKIP
argument_list|(
literal|"This test fails and then hangs on Mac OS X, see QTBUG-24318"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
name|connect
argument_list|(
operator|&
name|app
argument_list|,
name|SIGNAL
argument_list|(
name|lastWindowClosed
argument_list|()
argument_list|)
argument_list|,
operator|&
name|app
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|DeleteLaterWidget
modifier|*
name|wgt
init|=
operator|new
name|DeleteLaterWidget
argument_list|(
operator|&
name|app
argument_list|)
decl_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|500
argument_list|,
name|wgt
argument_list|,
name|SLOT
argument_list|(
name|runTest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
modifier|*
name|object
init|=
operator|new
name|QObject
argument_list|(
name|wgt
argument_list|)
decl_stmt|;
name|object
operator|->
name|setObjectName
argument_list|(
literal|"deleteLater"
argument_list|)
expr_stmt|;
name|object
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|QObject
modifier|*
name|stillAlive
init|=
name|qFindChild
argument_list|<
name|QObject
operator|*
argument_list|>
argument_list|(
name|wgt
argument_list|,
literal|"deleteLater"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|stillAlive
argument_list|)
expr_stmt|;
name|app
operator|.
name|exec
argument_list|()
expr_stmt|;
operator|delete
name|wgt
expr_stmt|;
block|}
end_function
begin_class
DECL|class|EventLoopNester
class|class
name|EventLoopNester
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
DECL|function|deleteLaterAndEnterLoop
name|void
name|deleteLaterAndEnterLoop
parameter_list|()
block|{
name|QEventLoop
name|eventLoop
decl_stmt|;
name|QPointer
argument_list|<
name|QObject
argument_list|>
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|deleteLater
argument_list|()
expr_stmt|;
comment|/*           DeferredDelete events are compressed, meaning this second           deleteLater() will *not* delete the object in the nested           event loop         */
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|this
argument_list|,
literal|"deleteLater"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|1000
argument_list|,
operator|&
name|eventLoop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
DECL|function|deleteLaterAndExitLoop
name|void
name|deleteLaterAndExitLoop
parameter_list|()
block|{
comment|// Check that 'p' is not deleted before exec returns, since the call
comment|// to QEventLoop::quit() should stop 'eventLoop' from processing
comment|// any more events (that is, delete later) until we return to the
comment|// _current_ event loop:
name|QEventLoop
name|eventLoop
decl_stmt|;
name|QPointer
argument_list|<
name|QObject
argument_list|>
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|this
argument_list|,
literal|"deleteLater"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|eventLoop
argument_list|,
literal|"quit"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// not dead yet
block|}
DECL|function|processEventsOnly
name|void
name|processEventsOnly
parameter_list|()
block|{
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
block|}
DECL|function|sendPostedEventsWithDeferredDelete
name|void
name|sendPostedEventsWithDeferredDelete
parameter_list|()
block|{
name|QApplication
operator|::
name|sendPostedEvents
argument_list|(
literal|0
argument_list|,
name|QEvent
operator|::
name|DeferredDelete
argument_list|)
expr_stmt|;
block|}
DECL|function|deleteLaterAndProcessEvents
name|void
name|deleteLaterAndProcessEvents
parameter_list|()
block|{
name|QEventLoop
name|eventLoop
decl_stmt|;
name|QPointer
argument_list|<
name|QObject
argument_list|>
name|p
init|=
name|this
decl_stmt|;
name|deleteLater
argument_list|()
expr_stmt|;
comment|// trying to delete this object in a deeper eventloop just won't work
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|this
argument_list|,
literal|"processEventsOnly"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|eventLoop
argument_list|,
literal|"quit"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|this
argument_list|,
literal|"sendPostedEventsWithDeferredDelete"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|eventLoop
argument_list|,
literal|"quit"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// trying to delete it from this eventloop still doesn't work
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// however, it *will* work with this magic incantation
name|QApplication
operator|::
name|sendPostedEvents
argument_list|(
literal|0
argument_list|,
name|QEvent
operator|::
name|DeferredDelete
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|p
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|testDeleteLaterProcessEvents
name|void
name|tst_QApplication
operator|::
name|testDeleteLaterProcessEvents
parameter_list|()
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
comment|// Calling processEvents() with no event dispatcher does nothing.
name|QObject
modifier|*
name|object
init|=
operator|new
name|QObject
decl_stmt|;
name|QPointer
argument_list|<
name|QObject
argument_list|>
name|p
argument_list|(
name|object
argument_list|)
decl_stmt|;
name|object
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|p
argument_list|)
expr_stmt|;
operator|delete
name|object
expr_stmt|;
block|{
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
comment|// If you call processEvents() with an event dispatcher present, but
comment|// outside any event loops, deferred deletes are not processed unless
comment|// sendPostedEvents(0, DeferredDelete) is called.
name|object
operator|=
operator|new
name|QObject
expr_stmt|;
name|p
operator|=
name|object
expr_stmt|;
name|object
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|app
operator|.
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|sendPostedEvents
argument_list|(
literal|0
argument_list|,
name|QEvent
operator|::
name|DeferredDelete
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|p
argument_list|)
expr_stmt|;
comment|// If you call deleteLater() on an object when there is no parent
comment|// event loop, and then enter an event loop, the object will get
comment|// deleted.
name|object
operator|=
operator|new
name|QObject
expr_stmt|;
name|p
operator|=
name|object
expr_stmt|;
name|object
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|QEventLoop
name|loop
decl_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|1000
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|loop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|p
argument_list|)
expr_stmt|;
block|}
block|{
comment|// When an object is in an event loop, then calls deleteLater() and enters
comment|// an event loop recursively, it should not die until the parent event
comment|// loop continues.
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
name|QEventLoop
name|loop
decl_stmt|;
name|EventLoopNester
modifier|*
name|nester
init|=
operator|new
name|EventLoopNester
decl_stmt|;
name|p
operator|=
name|nester
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|3000
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|0
argument_list|,
name|nester
argument_list|,
name|SLOT
argument_list|(
name|deleteLaterAndEnterLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|loop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|p
argument_list|)
expr_stmt|;
block|}
block|{
comment|// When the event loop that calls deleteLater() is exited
comment|// immediately, the object should die when returning to the
comment|// parent event loop
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
name|QEventLoop
name|loop
decl_stmt|;
name|EventLoopNester
modifier|*
name|nester
init|=
operator|new
name|EventLoopNester
decl_stmt|;
name|p
operator|=
name|nester
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|3000
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|0
argument_list|,
name|nester
argument_list|,
name|SLOT
argument_list|(
name|deleteLaterAndExitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|loop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|p
argument_list|)
expr_stmt|;
block|}
block|{
comment|// when the event loop that calls deleteLater() also calls
comment|// processEvents() immediately afterwards, the object should
comment|// not die until the parent loop continues
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
name|QEventLoop
name|loop
decl_stmt|;
name|EventLoopNester
modifier|*
name|nester
init|=
operator|new
name|EventLoopNester
argument_list|()
decl_stmt|;
name|p
operator|=
name|nester
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|3000
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|0
argument_list|,
name|nester
argument_list|,
name|SLOT
argument_list|(
name|deleteLaterAndProcessEvents
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|loop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|p
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*     Test for crash with QApplication::setDesktopSettingsAware(false). */
end_comment
begin_function
DECL|function|desktopSettingsAware
name|void
name|tst_QApplication
operator|::
name|desktopSettingsAware
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_PROCESS
name|QProcess
name|testProcess
decl_stmt|;
specifier|const
name|QString
name|path
init|=
name|QStringLiteral
argument_list|(
literal|"desktopsettingsaware/desktopsettingsaware"
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QApplication
name|tmpApp
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|testProcess
operator|.
name|start
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|testProcess
operator|.
name|waitForStarted
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Cannot start '%1': %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|path
argument_list|,
name|testProcess
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testProcess
operator|.
name|waitForFinished
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|testProcess
operator|.
name|state
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|QProcess
operator|::
name|NotRunning
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|int
argument_list|(
name|testProcess
operator|.
name|error
argument_list|()
argument_list|)
operator|!=
name|int
argument_list|(
name|QProcess
operator|::
name|Crashed
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|setActiveWindow
name|void
name|tst_QApplication
operator|::
name|setActiveWindow
parameter_list|()
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QApplication
name|MyApp
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|w
init|=
operator|new
name|QWidget
decl_stmt|;
name|QVBoxLayout
modifier|*
name|layout
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|QLineEdit
modifier|*
name|pb1
init|=
operator|new
name|QLineEdit
argument_list|(
literal|"Testbutton1"
argument_list|,
name|w
argument_list|)
decl_stmt|;
name|QLineEdit
modifier|*
name|pb2
init|=
operator|new
name|QLineEdit
argument_list|(
literal|"Test Line Edit"
argument_list|,
name|w
argument_list|)
decl_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|pb1
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|pb2
argument_list|)
expr_stmt|;
name|pb2
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|pb2
operator|->
name|setParent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|pb2
expr_stmt|;
name|w
operator|->
name|show
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
name|w
argument_list|)
expr_stmt|;
comment|// needs this on twm (focus follows mouse)
name|QVERIFY
argument_list|(
name|pb1
operator|->
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|w
expr_stmt|;
block|}
end_function
begin_comment
comment|/* This might fail on some X11 window managers? */
end_comment
begin_function
DECL|function|focusChanged
name|void
name|tst_QApplication
operator|::
name|focusChanged
parameter_list|()
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|app
argument_list|,
name|SIGNAL
argument_list|(
name|focusChanged
argument_list|(
name|QWidget
operator|*
argument_list|,
name|QWidget
operator|*
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|now
init|=
literal|0
decl_stmt|;
name|QWidget
modifier|*
name|old
init|=
literal|0
decl_stmt|;
name|QWidget
name|parent1
decl_stmt|;
name|QHBoxLayout
name|hbox1
argument_list|(
operator|&
name|parent1
argument_list|)
decl_stmt|;
name|QLabel
name|lb1
argument_list|(
operator|&
name|parent1
argument_list|)
decl_stmt|;
name|QLineEdit
name|le1
argument_list|(
operator|&
name|parent1
argument_list|)
decl_stmt|;
name|QPushButton
name|pb1
argument_list|(
operator|&
name|parent1
argument_list|)
decl_stmt|;
name|hbox1
operator|.
name|addWidget
argument_list|(
operator|&
name|lb1
argument_list|)
expr_stmt|;
name|hbox1
operator|.
name|addWidget
argument_list|(
operator|&
name|le1
argument_list|)
expr_stmt|;
name|hbox1
operator|.
name|addWidget
argument_list|(
operator|&
name|pb1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|parent1
operator|.
name|show
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|parent1
argument_list|)
expr_stmt|;
comment|// needs this on twm (focus follows mouse)
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|old
operator|=
name|qVariantValue
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|now
operator|=
name|qVariantValue
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|now
operator|==
operator|&
name|le1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|now
operator|==
name|QApplication
operator|::
name|focusWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|old
operator|==
literal|0
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|pb1
operator|.
name|setFocus
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|old
operator|=
name|qVariantValue
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|now
operator|=
name|qVariantValue
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|now
operator|==
operator|&
name|pb1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|now
operator|==
name|QApplication
operator|::
name|focusWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|old
operator|==
operator|&
name|le1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|lb1
operator|.
name|setFocus
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|old
operator|=
name|qVariantValue
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|now
operator|=
name|qVariantValue
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|now
operator|==
operator|&
name|lb1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|now
operator|==
name|QApplication
operator|::
name|focusWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|old
operator|==
operator|&
name|pb1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|lb1
operator|.
name|clearFocus
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|old
operator|=
name|qVariantValue
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|now
operator|=
name|qVariantValue
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|now
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|now
operator|==
name|QApplication
operator|::
name|focusWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|old
operator|==
operator|&
name|lb1
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QWidget
name|parent2
decl_stmt|;
name|QHBoxLayout
name|hbox2
argument_list|(
operator|&
name|parent2
argument_list|)
decl_stmt|;
name|QLabel
name|lb2
argument_list|(
operator|&
name|parent2
argument_list|)
decl_stmt|;
name|QLineEdit
name|le2
argument_list|(
operator|&
name|parent2
argument_list|)
decl_stmt|;
name|QPushButton
name|pb2
argument_list|(
operator|&
name|parent2
argument_list|)
decl_stmt|;
name|hbox2
operator|.
name|addWidget
argument_list|(
operator|&
name|lb2
argument_list|)
expr_stmt|;
name|hbox2
operator|.
name|addWidget
argument_list|(
operator|&
name|le2
argument_list|)
expr_stmt|;
name|hbox2
operator|.
name|addWidget
argument_list|(
operator|&
name|pb2
argument_list|)
expr_stmt|;
name|parent2
operator|.
name|show
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|parent2
argument_list|)
expr_stmt|;
comment|// needs this on twm (focus follows mouse)
name|QVERIFY
argument_list|(
name|spy
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// one for deactivation, one for activation on Windows
name|old
operator|=
name|qVariantValue
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|spy
operator|.
name|at
argument_list|(
name|spy
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|now
operator|=
name|qVariantValue
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|spy
operator|.
name|at
argument_list|(
name|spy
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|now
operator|==
operator|&
name|le2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|now
operator|==
name|QApplication
operator|::
name|focusWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|old
operator|==
literal|0
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QTestKeyEvent
name|tab
argument_list|(
name|QTest
operator|::
name|Press
argument_list|,
name|Qt
operator|::
name|Key_Tab
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QTestKeyEvent
name|backtab
argument_list|(
name|QTest
operator|::
name|Press
argument_list|,
name|Qt
operator|::
name|Key_Backtab
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QTestMouseEvent
name|click
argument_list|(
name|QTest
operator|::
name|MouseClick
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|QPoint
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|bool
name|tabAllControls
init|=
literal|true
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
comment|// Mac has two modes, one where you tab to everything, one where you can
comment|// only tab to input controls, here's what we get. Determine which ones we
comment|// should get.
name|QSettings
name|appleSettings
argument_list|(
name|QLatin1String
argument_list|(
literal|"apple.com"
argument_list|)
argument_list|)
decl_stmt|;
name|QVariant
name|appleValue
init|=
name|appleSettings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"AppleKeyboardUIMode"
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|tabAllControls
operator|=
operator|(
name|appleValue
operator|.
name|toInt
argument_list|()
operator|&
literal|0x2
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|tabAllControls
condition|)
block|{
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"QTBUG-24372 Mac tab key \"Text boxes and lists only\" vs "
literal|"\"All controls\" setting is not respected in Qt5"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// make sure Qt's idea of tabbing between widgets matches what we think it should
name|QCOMPARE
argument_list|(
name|qt_tab_all_widgets
argument_list|,
name|tabAllControls
argument_list|)
expr_stmt|;
name|tab
operator|.
name|simulate
argument_list|(
name|now
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tabAllControls
condition|)
block|{
name|QVERIFY
argument_list|(
name|spy
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|now
operator|==
name|QApplication
operator|::
name|focusWidget
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|spy
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|old
operator|=
name|qVariantValue
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|now
operator|=
name|qVariantValue
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|now
operator|==
operator|&
name|pb2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|now
operator|==
name|QApplication
operator|::
name|focusWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|old
operator|==
operator|&
name|le2
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|tabAllControls
condition|)
block|{
name|QVERIFY
argument_list|(
name|spy
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|now
operator|==
name|QApplication
operator|::
name|focusWidget
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tab
operator|.
name|simulate
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|old
operator|=
name|qVariantValue
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|now
operator|=
name|qVariantValue
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|now
operator|==
operator|&
name|le2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|now
operator|==
name|QApplication
operator|::
name|focusWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|old
operator|==
operator|&
name|pb2
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|tabAllControls
condition|)
block|{
name|QVERIFY
argument_list|(
name|spy
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|now
operator|==
name|QApplication
operator|::
name|focusWidget
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|backtab
operator|.
name|simulate
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|old
operator|=
name|qVariantValue
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|now
operator|=
name|qVariantValue
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|now
operator|==
operator|&
name|pb2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|now
operator|==
name|QApplication
operator|::
name|focusWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|old
operator|==
operator|&
name|le2
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|tabAllControls
condition|)
block|{
name|QVERIFY
argument_list|(
name|spy
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|now
operator|==
name|QApplication
operator|::
name|focusWidget
argument_list|()
argument_list|)
expr_stmt|;
name|old
operator|=
operator|&
name|pb2
expr_stmt|;
block|}
else|else
block|{
name|backtab
operator|.
name|simulate
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|old
operator|=
name|qVariantValue
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|now
operator|=
name|qVariantValue
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|now
operator|==
operator|&
name|le2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|now
operator|==
name|QApplication
operator|::
name|focusWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|old
operator|==
operator|&
name|pb2
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|click
operator|.
name|simulate
argument_list|(
name|old
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|pb2
operator|.
name|focusPolicy
argument_list|()
operator|&
name|Qt
operator|::
name|ClickFocus
operator|)
condition|)
block|{
name|QVERIFY
argument_list|(
name|spy
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|now
operator|==
name|QApplication
operator|::
name|focusWidget
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|spy
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|old
operator|=
name|qVariantValue
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|now
operator|=
name|qVariantValue
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|now
operator|==
operator|&
name|pb2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|now
operator|==
name|QApplication
operator|::
name|focusWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|old
operator|==
operator|&
name|le2
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|click
operator|.
name|simulate
argument_list|(
name|old
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|old
operator|=
name|qVariantValue
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|now
operator|=
name|qVariantValue
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|now
operator|==
operator|&
name|le2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|now
operator|==
name|QApplication
operator|::
name|focusWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|old
operator|==
operator|&
name|pb2
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|parent1
operator|.
name|activateWindow
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|parent1
argument_list|)
expr_stmt|;
comment|// needs this on twm (focus follows mouse)
name|QVERIFY
argument_list|(
name|spy
operator|.
name|count
argument_list|()
operator|==
literal|1
operator|||
name|spy
operator|.
name|count
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|// one for deactivation, one for activation on Windows
comment|//on windows, the change of focus is made in 2 steps
comment|//(the focusChanged SIGNAL is emitted twice)
if|if
condition|(
name|spy
operator|.
name|count
argument_list|()
operator|==
literal|1
condition|)
name|old
operator|=
name|qVariantValue
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|spy
operator|.
name|at
argument_list|(
name|spy
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|old
operator|=
name|qVariantValue
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|spy
operator|.
name|at
argument_list|(
name|spy
operator|.
name|count
argument_list|()
operator|-
literal|2
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|now
operator|=
name|qVariantValue
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|spy
operator|.
name|at
argument_list|(
name|spy
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|now
operator|==
operator|&
name|le1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|now
operator|==
name|QApplication
operator|::
name|focusWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|old
operator|==
operator|&
name|le2
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_class
DECL|class|LineEdit
class|class
name|LineEdit
super|:
specifier|public
name|QLineEdit
block|{
public|public:
DECL|function|LineEdit
name|LineEdit
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QLineEdit
argument_list|(
name|parent
argument_list|)
block|{ }
protected|protected:
DECL|function|focusOutEvent
name|void
name|focusOutEvent
parameter_list|(
name|QFocusEvent
modifier|*
name|e
parameter_list|)
block|{
name|QLineEdit
operator|::
name|focusOutEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|objectName
argument_list|()
operator|==
literal|"le1"
condition|)
name|setStyleSheet
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|function|focusInEvent
name|void
name|focusInEvent
parameter_list|(
name|QFocusEvent
modifier|*
name|e
parameter_list|)
block|{
name|QLineEdit
operator|::
name|focusInEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|objectName
argument_list|()
operator|==
literal|"le2"
condition|)
name|setStyleSheet
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|focusOut
name|void
name|tst_QApplication
operator|::
name|focusOut
parameter_list|()
block|{
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
operator|&
name|argv0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
comment|// Tests the case where the style pointer changes when on focus in/out
comment|// (the above is the case when the stylesheet changes)
name|QWidget
name|w
decl_stmt|;
name|QLineEdit
modifier|*
name|le1
init|=
operator|new
name|LineEdit
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
name|le1
operator|->
name|setObjectName
argument_list|(
literal|"le1"
argument_list|)
expr_stmt|;
name|le1
operator|->
name|setStyleSheet
argument_list|(
literal|"background: #fee"
argument_list|)
expr_stmt|;
name|le1
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|QLineEdit
modifier|*
name|le2
init|=
operator|new
name|LineEdit
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
name|le2
operator|->
name|setObjectName
argument_list|(
literal|"le2"
argument_list|)
expr_stmt|;
name|le2
operator|->
name|setStyleSheet
argument_list|(
literal|"background: #fee"
argument_list|)
expr_stmt|;
name|le2
operator|->
name|move
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|le2
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|execAfterExit
name|void
name|tst_QApplication
operator|::
name|execAfterExit
parameter_list|()
block|{
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
operator|&
name|argv0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|app
argument_list|,
literal|"quit"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
comment|// this should be ignored, as exec() will reset the exitCode
name|QApplication
operator|::
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
name|app
operator|.
name|exec
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|exitCode
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// the quitNow flag should have been reset, so we can spin an
comment|// eventloop after QApplication::exec() returns
name|QEventLoop
name|eventLoop
decl_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|eventLoop
argument_list|,
literal|"quit"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|exitCode
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|wheelScrollLines
name|void
name|tst_QApplication
operator|::
name|wheelScrollLines
parameter_list|()
block|{
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
operator|&
name|argv0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
comment|// If wheelScrollLines returns 0, the mose wheel will be disabled.
name|QVERIFY
argument_list|(
name|app
operator|.
name|wheelScrollLines
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|style
name|void
name|tst_QApplication
operator|::
name|style
parameter_list|()
block|{
name|int
name|argc
init|=
literal|1
decl_stmt|;
block|{
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
operator|&
name|argv0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
name|QPointer
argument_list|<
name|QStyle
argument_list|>
name|style
init|=
name|app
operator|.
name|style
argument_list|()
decl_stmt|;
name|app
operator|.
name|setStyle
argument_list|(
operator|new
name|QWindowsStyle
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|style
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
operator|&
name|argv0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
comment|// qApp style can never be 0
name|QVERIFY
argument_list|(
name|QApplication
operator|::
name|style
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|allWidgets
name|void
name|tst_QApplication
operator|::
name|allWidgets
parameter_list|()
block|{
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
operator|&
name|argv0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|w
init|=
operator|new
name|QWidget
decl_stmt|;
name|QVERIFY
argument_list|(
name|app
operator|.
name|allWidgets
argument_list|()
operator|.
name|contains
argument_list|(
name|w
argument_list|)
argument_list|)
expr_stmt|;
comment|// uncreate widget test
name|QVERIFY
argument_list|(
name|app
operator|.
name|allWidgets
argument_list|()
operator|.
name|contains
argument_list|(
name|w
argument_list|)
argument_list|)
expr_stmt|;
comment|// created widget test
operator|delete
name|w
expr_stmt|;
name|w
operator|=
literal|0
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|app
operator|.
name|allWidgets
argument_list|()
operator|.
name|contains
argument_list|(
name|w
argument_list|)
argument_list|)
expr_stmt|;
comment|// removal test
block|}
end_function
begin_function
DECL|function|topLevelWidgets
name|void
name|tst_QApplication
operator|::
name|topLevelWidgets
parameter_list|()
block|{
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
operator|&
name|argv0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|w
init|=
operator|new
name|QWidget
decl_stmt|;
name|w
operator|->
name|show
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
name|QClipboard
modifier|*
name|clipboard
init|=
name|QApplication
operator|::
name|clipboard
argument_list|()
decl_stmt|;
name|QString
name|originalText
init|=
name|clipboard
operator|->
name|text
argument_list|()
decl_stmt|;
name|clipboard
operator|->
name|setText
argument_list|(
name|QString
argument_list|(
literal|"newText"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|app
operator|.
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QApplication
operator|::
name|topLevelWidgets
argument_list|()
operator|.
name|contains
argument_list|(
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QApplication
operator|::
name|topLevelWidgets
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
operator|delete
name|w
expr_stmt|;
name|w
operator|=
literal|0
expr_stmt|;
name|app
operator|.
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QApplication
operator|::
name|topLevelWidgets
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setAttribute
name|void
name|tst_QApplication
operator|::
name|setAttribute
parameter_list|()
block|{
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
operator|&
name|argv0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QApplication
operator|::
name|testAttribute
argument_list|(
name|Qt
operator|::
name|AA_ImmediateWidgetCreation
argument_list|)
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|w
init|=
operator|new
name|QWidget
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|w
expr_stmt|;
name|QApplication
operator|::
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_ImmediateWidgetCreation
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QApplication
operator|::
name|testAttribute
argument_list|(
name|Qt
operator|::
name|AA_ImmediateWidgetCreation
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|=
operator|new
name|QWidget
expr_stmt|;
name|QVERIFY
argument_list|(
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|w2
init|=
operator|new
name|QWidget
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|w2
operator|->
name|setParent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|w2
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|w
expr_stmt|;
operator|delete
name|w2
expr_stmt|;
name|QApplication
operator|::
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_ImmediateWidgetCreation
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QApplication
operator|::
name|testAttribute
argument_list|(
name|Qt
operator|::
name|AA_ImmediateWidgetCreation
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|=
operator|new
name|QWidget
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Created
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|w
expr_stmt|;
block|}
end_function
begin_function
DECL|function|windowsCommandLine_data
name|void
name|tst_QApplication
operator|::
name|windowsCommandLine_data
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"args"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hello world"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Hello \"World\""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Hello \"World\""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"sql"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'PNR' AND TABLE_TYPE = 'VIEW' ORDER BY TABLE_NAME"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'PNR' AND TABLE_TYPE = 'VIEW' ORDER BY TABLE_NAME"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|windowsCommandLine
name|void
name|tst_QApplication
operator|::
name|windowsCommandLine
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QProcess
name|testProcess
decl_stmt|;
specifier|const
name|QString
name|path
init|=
name|QStringLiteral
argument_list|(
literal|"wincmdline/wincmdline"
argument_list|)
decl_stmt|;
name|testProcess
operator|.
name|start
argument_list|(
name|path
argument_list|,
name|QStringList
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|testProcess
operator|.
name|waitForStarted
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Cannot start '%1': %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|path
argument_list|,
name|testProcess
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testProcess
operator|.
name|waitForFinished
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|error
init|=
name|testProcess
operator|.
name|readAllStandardError
argument_list|()
decl_stmt|;
name|QString
name|procError
argument_list|(
name|error
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|procError
argument_list|,
name|expected
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_class
DECL|class|TouchEventPropagationTestWidget
class|class
name|TouchEventPropagationTestWidget
super|:
specifier|public
name|QWidget
block|{
name|Q_OBJECT
public|public:
DECL|member|seenTouchEvent
DECL|member|acceptTouchEvent
DECL|member|seenMouseEvent
DECL|member|acceptMouseEvent
name|bool
name|seenTouchEvent
decl_stmt|,
name|acceptTouchEvent
decl_stmt|,
name|seenMouseEvent
decl_stmt|,
name|acceptMouseEvent
decl_stmt|;
DECL|function|TouchEventPropagationTestWidget
name|TouchEventPropagationTestWidget
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|seenTouchEvent
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|acceptTouchEvent
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|seenMouseEvent
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|acceptMouseEvent
argument_list|(
literal|false
argument_list|)
block|{ }
DECL|function|reset
name|void
name|reset
parameter_list|()
block|{
name|seenTouchEvent
operator|=
name|acceptTouchEvent
operator|=
name|seenMouseEvent
operator|=
name|acceptMouseEvent
operator|=
literal|false
expr_stmt|;
block|}
DECL|function|event
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|MouseButtonPress
case|:
case|case
name|QEvent
operator|::
name|MouseMove
case|:
case|case
name|QEvent
operator|::
name|MouseButtonRelease
case|:
comment|// qDebug()<< objectName()<< "seenMouseEvent = true";
name|seenMouseEvent
operator|=
literal|true
expr_stmt|;
name|event
operator|->
name|setAccepted
argument_list|(
name|acceptMouseEvent
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|TouchBegin
case|:
case|case
name|QEvent
operator|::
name|TouchUpdate
case|:
case|case
name|QEvent
operator|::
name|TouchEnd
case|:
comment|// qDebug()<< objectName()<< "seenTouchEvent = true";
name|seenTouchEvent
operator|=
literal|true
expr_stmt|;
name|event
operator|->
name|setAccepted
argument_list|(
name|acceptTouchEvent
argument_list|)
expr_stmt|;
break|break;
default|default:
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|touchEventPropagation
name|void
name|tst_QApplication
operator|::
name|touchEventPropagation
parameter_list|()
block|{
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
operator|&
name|argv0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QTouchEvent
operator|::
name|TouchPoint
argument_list|>
name|pressedTouchPoints
decl_stmt|;
name|QTouchEvent
operator|::
name|TouchPoint
name|press
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|press
operator|.
name|setState
argument_list|(
name|Qt
operator|::
name|TouchPointPressed
argument_list|)
expr_stmt|;
name|pressedTouchPoints
operator|<<
name|press
expr_stmt|;
name|QList
argument_list|<
name|QTouchEvent
operator|::
name|TouchPoint
argument_list|>
name|releasedTouchPoints
decl_stmt|;
name|QTouchEvent
operator|::
name|TouchPoint
name|release
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|release
operator|.
name|setState
argument_list|(
name|Qt
operator|::
name|TouchPointReleased
argument_list|)
expr_stmt|;
name|releasedTouchPoints
operator|<<
name|release
expr_stmt|;
name|QTouchDevice
modifier|*
name|device
init|=
operator|new
name|QTouchDevice
decl_stmt|;
name|device
operator|->
name|setType
argument_list|(
name|QTouchDevice
operator|::
name|TouchScreen
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|registerTouchDevice
argument_list|(
name|device
argument_list|)
expr_stmt|;
block|{
comment|// touch event behavior on a window
name|TouchEventPropagationTestWidget
name|window
decl_stmt|;
name|window
operator|.
name|setObjectName
argument_list|(
literal|"1. window"
argument_list|)
expr_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
comment|// Must have an explicitly specified QWindow for handleTouchEvent,
comment|// passing 0 would result in using topLevelAt() which is not ok in this case
comment|// as the screen position in the point is bogus.
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
operator|&
name|window
argument_list|)
expr_stmt|;
comment|// QPA always takes screen positions and since we map the TouchPoint back to QPA's structure first,
comment|// we must ensure there is a screen position in the TouchPoint that maps to a local 0, 0.
name|pressedTouchPoints
index|[
literal|0
index|]
operator|.
name|setScreenPos
argument_list|(
name|window
operator|.
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|releasedTouchPoints
index|[
literal|0
index|]
operator|.
name|setScreenPos
argument_list|(
name|window
operator|.
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
name|window
operator|.
name|windowHandle
argument_list|()
argument_list|,
literal|0
argument_list|,
name|device
argument_list|,
name|QTest
operator|::
name|QTouchEventSequence
operator|::
name|touchPointList
argument_list|(
name|pressedTouchPoints
argument_list|)
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
name|window
operator|.
name|windowHandle
argument_list|()
argument_list|,
literal|0
argument_list|,
name|device
argument_list|,
name|QTest
operator|::
name|QTouchEventSequence
operator|::
name|touchPointList
argument_list|(
name|releasedTouchPoints
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|.
name|seenTouchEvent
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|.
name|seenMouseEvent
argument_list|)
expr_stmt|;
name|window
operator|.
name|reset
argument_list|()
expr_stmt|;
name|window
operator|.
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_AcceptTouchEvents
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
name|window
operator|.
name|windowHandle
argument_list|()
argument_list|,
literal|0
argument_list|,
name|device
argument_list|,
name|QTest
operator|::
name|QTouchEventSequence
operator|::
name|touchPointList
argument_list|(
name|pressedTouchPoints
argument_list|)
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
name|window
operator|.
name|windowHandle
argument_list|()
argument_list|,
literal|0
argument_list|,
name|device
argument_list|,
name|QTest
operator|::
name|QTouchEventSequence
operator|::
name|touchPointList
argument_list|(
name|releasedTouchPoints
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|.
name|seenTouchEvent
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|.
name|seenMouseEvent
argument_list|)
expr_stmt|;
name|window
operator|.
name|reset
argument_list|()
expr_stmt|;
name|window
operator|.
name|acceptTouchEvent
operator|=
literal|true
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
name|window
operator|.
name|windowHandle
argument_list|()
argument_list|,
literal|0
argument_list|,
name|device
argument_list|,
name|QTest
operator|::
name|QTouchEventSequence
operator|::
name|touchPointList
argument_list|(
name|pressedTouchPoints
argument_list|)
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
name|window
operator|.
name|windowHandle
argument_list|()
argument_list|,
literal|0
argument_list|,
name|device
argument_list|,
name|QTest
operator|::
name|QTouchEventSequence
operator|::
name|touchPointList
argument_list|(
name|releasedTouchPoints
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|.
name|seenTouchEvent
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|.
name|seenMouseEvent
argument_list|)
expr_stmt|;
block|}
block|{
comment|// touch event behavior on a window with a child widget
name|TouchEventPropagationTestWidget
name|window
decl_stmt|;
name|window
operator|.
name|setObjectName
argument_list|(
literal|"2. window"
argument_list|)
expr_stmt|;
name|TouchEventPropagationTestWidget
name|widget
argument_list|(
operator|&
name|window
argument_list|)
decl_stmt|;
name|widget
operator|.
name|setObjectName
argument_list|(
literal|"2. widget"
argument_list|)
expr_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
operator|&
name|window
argument_list|)
expr_stmt|;
name|pressedTouchPoints
index|[
literal|0
index|]
operator|.
name|setScreenPos
argument_list|(
name|window
operator|.
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|releasedTouchPoints
index|[
literal|0
index|]
operator|.
name|setScreenPos
argument_list|(
name|window
operator|.
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
name|window
operator|.
name|windowHandle
argument_list|()
argument_list|,
literal|0
argument_list|,
name|device
argument_list|,
name|QTest
operator|::
name|QTouchEventSequence
operator|::
name|touchPointList
argument_list|(
name|pressedTouchPoints
argument_list|)
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
name|window
operator|.
name|windowHandle
argument_list|()
argument_list|,
literal|0
argument_list|,
name|device
argument_list|,
name|QTest
operator|::
name|QTouchEventSequence
operator|::
name|touchPointList
argument_list|(
name|releasedTouchPoints
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|widget
operator|.
name|seenTouchEvent
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|widget
operator|.
name|seenMouseEvent
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|.
name|seenTouchEvent
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|.
name|seenMouseEvent
argument_list|)
expr_stmt|;
name|window
operator|.
name|reset
argument_list|()
expr_stmt|;
name|widget
operator|.
name|reset
argument_list|()
expr_stmt|;
name|widget
operator|.
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_AcceptTouchEvents
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
name|window
operator|.
name|windowHandle
argument_list|()
argument_list|,
literal|0
argument_list|,
name|device
argument_list|,
name|QTest
operator|::
name|QTouchEventSequence
operator|::
name|touchPointList
argument_list|(
name|pressedTouchPoints
argument_list|)
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
name|window
operator|.
name|windowHandle
argument_list|()
argument_list|,
literal|0
argument_list|,
name|device
argument_list|,
name|QTest
operator|::
name|QTouchEventSequence
operator|::
name|touchPointList
argument_list|(
name|releasedTouchPoints
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|widget
operator|.
name|seenTouchEvent
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|widget
operator|.
name|seenMouseEvent
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|.
name|seenTouchEvent
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|.
name|seenMouseEvent
argument_list|)
expr_stmt|;
name|window
operator|.
name|reset
argument_list|()
expr_stmt|;
name|widget
operator|.
name|reset
argument_list|()
expr_stmt|;
name|widget
operator|.
name|acceptMouseEvent
operator|=
literal|true
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
name|window
operator|.
name|windowHandle
argument_list|()
argument_list|,
literal|0
argument_list|,
name|device
argument_list|,
name|QTest
operator|::
name|QTouchEventSequence
operator|::
name|touchPointList
argument_list|(
name|pressedTouchPoints
argument_list|)
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
name|window
operator|.
name|windowHandle
argument_list|()
argument_list|,
literal|0
argument_list|,
name|device
argument_list|,
name|QTest
operator|::
name|QTouchEventSequence
operator|::
name|touchPointList
argument_list|(
name|releasedTouchPoints
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|widget
operator|.
name|seenTouchEvent
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|widget
operator|.
name|seenMouseEvent
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|.
name|seenTouchEvent
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|.
name|seenMouseEvent
argument_list|)
expr_stmt|;
name|window
operator|.
name|reset
argument_list|()
expr_stmt|;
name|widget
operator|.
name|reset
argument_list|()
expr_stmt|;
name|widget
operator|.
name|acceptTouchEvent
operator|=
literal|true
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
name|window
operator|.
name|windowHandle
argument_list|()
argument_list|,
literal|0
argument_list|,
name|device
argument_list|,
name|QTest
operator|::
name|QTouchEventSequence
operator|::
name|touchPointList
argument_list|(
name|pressedTouchPoints
argument_list|)
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
name|window
operator|.
name|windowHandle
argument_list|()
argument_list|,
literal|0
argument_list|,
name|device
argument_list|,
name|QTest
operator|::
name|QTouchEventSequence
operator|::
name|touchPointList
argument_list|(
name|releasedTouchPoints
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|widget
operator|.
name|seenTouchEvent
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|widget
operator|.
name|seenMouseEvent
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|.
name|seenTouchEvent
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|.
name|seenMouseEvent
argument_list|)
expr_stmt|;
name|window
operator|.
name|reset
argument_list|()
expr_stmt|;
name|widget
operator|.
name|reset
argument_list|()
expr_stmt|;
name|widget
operator|.
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_AcceptTouchEvents
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|window
operator|.
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_AcceptTouchEvents
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
name|window
operator|.
name|windowHandle
argument_list|()
argument_list|,
literal|0
argument_list|,
name|device
argument_list|,
name|QTest
operator|::
name|QTouchEventSequence
operator|::
name|touchPointList
argument_list|(
name|pressedTouchPoints
argument_list|)
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
name|window
operator|.
name|windowHandle
argument_list|()
argument_list|,
literal|0
argument_list|,
name|device
argument_list|,
name|QTest
operator|::
name|QTouchEventSequence
operator|::
name|touchPointList
argument_list|(
name|releasedTouchPoints
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|widget
operator|.
name|seenTouchEvent
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|widget
operator|.
name|seenMouseEvent
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|.
name|seenTouchEvent
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|.
name|seenMouseEvent
argument_list|)
expr_stmt|;
name|window
operator|.
name|reset
argument_list|()
expr_stmt|;
name|widget
operator|.
name|reset
argument_list|()
expr_stmt|;
name|window
operator|.
name|acceptTouchEvent
operator|=
literal|true
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
name|window
operator|.
name|windowHandle
argument_list|()
argument_list|,
literal|0
argument_list|,
name|device
argument_list|,
name|QTest
operator|::
name|QTouchEventSequence
operator|::
name|touchPointList
argument_list|(
name|pressedTouchPoints
argument_list|)
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
name|window
operator|.
name|windowHandle
argument_list|()
argument_list|,
literal|0
argument_list|,
name|device
argument_list|,
name|QTest
operator|::
name|QTouchEventSequence
operator|::
name|touchPointList
argument_list|(
name|releasedTouchPoints
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|widget
operator|.
name|seenTouchEvent
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|widget
operator|.
name|seenMouseEvent
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|.
name|seenTouchEvent
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|.
name|seenMouseEvent
argument_list|)
expr_stmt|;
name|window
operator|.
name|reset
argument_list|()
expr_stmt|;
name|widget
operator|.
name|reset
argument_list|()
expr_stmt|;
name|widget
operator|.
name|acceptMouseEvent
operator|=
literal|true
expr_stmt|;
comment|// doesn't matter, touch events are propagated first
name|window
operator|.
name|acceptTouchEvent
operator|=
literal|true
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
name|window
operator|.
name|windowHandle
argument_list|()
argument_list|,
literal|0
argument_list|,
name|device
argument_list|,
name|QTest
operator|::
name|QTouchEventSequence
operator|::
name|touchPointList
argument_list|(
name|pressedTouchPoints
argument_list|)
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
name|window
operator|.
name|windowHandle
argument_list|()
argument_list|,
literal|0
argument_list|,
name|device
argument_list|,
name|QTest
operator|::
name|QTouchEventSequence
operator|::
name|touchPointList
argument_list|(
name|releasedTouchPoints
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|widget
operator|.
name|seenTouchEvent
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|widget
operator|.
name|seenMouseEvent
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|.
name|seenTouchEvent
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|window
operator|.
name|seenMouseEvent
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qtbug_12673
name|void
name|tst_QApplication
operator|::
name|qtbug_12673
parameter_list|()
block|{
name|QProcess
name|testProcess
decl_stmt|;
name|QStringList
name|arguments
decl_stmt|;
specifier|const
name|QString
name|path
init|=
name|QStringLiteral
argument_list|(
literal|"modal/modal"
argument_list|)
decl_stmt|;
name|testProcess
operator|.
name|start
argument_list|(
name|path
argument_list|,
name|arguments
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|testProcess
operator|.
name|waitForStarted
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Cannot start '%1': %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|path
argument_list|,
name|testProcess
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testProcess
operator|.
name|waitForFinished
argument_list|(
literal|20000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testProcess
operator|.
name|exitStatus
argument_list|()
argument_list|,
name|QProcess
operator|::
name|NormalExit
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|NoQuitOnHideWidget
class|class
name|NoQuitOnHideWidget
super|:
specifier|public
name|QWidget
block|{
name|Q_OBJECT
public|public:
DECL|function|NoQuitOnHideWidget
specifier|explicit
name|NoQuitOnHideWidget
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
block|{
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|0
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|hide
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|500
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|exitApp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
private|private
name|slots
private|:
DECL|function|exitApp
name|void
name|exitApp
parameter_list|()
block|{
name|qApp
operator|->
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|noQuitOnHide
name|void
name|tst_QApplication
operator|::
name|noQuitOnHide
parameter_list|()
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|window1
init|=
operator|new
name|NoQuitOnHideWidget
decl_stmt|;
name|window1
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|exec
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|ShowCloseShowWidget
class|class
name|ShowCloseShowWidget
super|:
specifier|public
name|QWidget
block|{
name|Q_OBJECT
public|public:
DECL|function|ShowCloseShowWidget
name|ShowCloseShowWidget
parameter_list|(
name|bool
name|showAgain
parameter_list|,
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|showAgain
argument_list|(
name|showAgain
argument_list|)
block|{
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|0
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|doClose
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|500
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|exitApp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
private|private
name|slots
private|:
DECL|function|doClose
name|void
name|doClose
parameter_list|()
block|{
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|showAgain
condition|)
name|show
argument_list|()
expr_stmt|;
block|}
DECL|function|exitApp
name|void
name|exitApp
parameter_list|()
block|{
name|qApp
operator|->
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|member|showAgain
name|bool
name|showAgain
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|abortQuitOnShow
name|void
name|tst_QApplication
operator|::
name|abortQuitOnShow
parameter_list|()
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|window1
init|=
operator|new
name|ShowCloseShowWidget
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|window1
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|exec
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|window2
init|=
operator|new
name|ShowCloseShowWidget
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|window2
operator|->
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|exec
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     This test is meant to ensure that certain objects (public& commonly used)     can safely be used in a Q_GLOBAL_STATIC such that their destructors are     executed *after* the destruction of QApplication.  */
end_comment
begin_expr_stmt
name|Q_GLOBAL_STATIC
argument_list|(
name|QLocale
argument_list|,
name|tst_qapp_locale
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_GLOBAL_STATIC
argument_list|(
name|QProcess
argument_list|,
name|tst_qapp_process
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_GLOBAL_STATIC
argument_list|(
name|QFileSystemWatcher
argument_list|,
name|tst_qapp_fileSystemWatcher
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_GLOBAL_STATIC
argument_list|(
name|QSharedMemory
argument_list|,
name|tst_qapp_sharedMemory
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_GLOBAL_STATIC
argument_list|(
name|QElapsedTimer
argument_list|,
name|tst_qapp_elapsedTimer
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_GLOBAL_STATIC
argument_list|(
name|QMutex
argument_list|,
name|tst_qapp_mutex
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_GLOBAL_STATIC
argument_list|(
name|QWidget
argument_list|,
name|tst_qapp_widget
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_GLOBAL_STATIC
argument_list|(
name|QPixmap
argument_list|,
name|tst_qapp_pixmap
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_GLOBAL_STATIC
argument_list|(
name|QFont
argument_list|,
name|tst_qapp_font
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_GLOBAL_STATIC
argument_list|(
name|QRegion
argument_list|,
name|tst_qapp_region
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_GLOBAL_STATIC
argument_list|(
name|QFontDatabase
argument_list|,
name|tst_qapp_fontDatabase
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_GLOBAL_STATIC
argument_list|(
name|QCursor
argument_list|,
name|tst_qapp_cursor
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|globalStaticObjectDestruction
name|void
name|tst_QApplication
operator|::
name|globalStaticObjectDestruction
parameter_list|()
block|{
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
operator|&
name|argv0
argument_list|,
name|QApplication
operator|::
name|GuiServer
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|tst_qapp_locale
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tst_qapp_process
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tst_qapp_fileSystemWatcher
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tst_qapp_sharedMemory
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tst_qapp_elapsedTimer
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tst_qapp_mutex
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tst_qapp_widget
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tst_qapp_pixmap
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tst_qapp_font
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tst_qapp_region
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tst_qapp_fontDatabase
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tst_qapp_cursor
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//QTEST_APPLESS_MAIN(tst_QApplication)
end_comment
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
name|tst_QApplication
name|tc
decl_stmt|;
name|argv0
operator|=
name|argv
index|[
literal|0
index|]
expr_stmt|;
return|return
name|QTest
operator|::
name|qExec
argument_list|(
operator|&
name|tc
argument_list|,
name|argc
argument_list|,
name|argv
argument_list|)
return|;
block|}
end_function
begin_include
include|#
directive|include
file|"tst_qapplication.moc"
end_include
end_unit
