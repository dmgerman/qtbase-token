begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtGui/QtGui>
end_include
begin_include
include|#
directive|include
file|<QtCore/QTextStream>
end_include
begin_include
include|#
directive|include
file|<QtCore/QStringList>
end_include
begin_include
include|#
directive|include
file|<QtCore/QMimeData>
end_include
begin_include
include|#
directive|include
file|<QtCore/QPoint>
end_include
begin_include
include|#
directive|include
file|<qeventloop.h>
end_include
begin_include
include|#
directive|include
file|<qlist.h>
end_include
begin_include
include|#
directive|include
file|<qlistwidget.h>
end_include
begin_include
include|#
directive|include
file|<qpushbutton.h>
end_include
begin_include
include|#
directive|include
file|<qboxlayout.h>
end_include
begin_include
include|#
directive|include
file|<qtabwidget.h>
end_include
begin_include
include|#
directive|include
file|<qlabel.h>
end_include
begin_include
include|#
directive|include
file|<private/qwindow_p.h>
end_include
begin_function
DECL|function|setFrameless
specifier|static
specifier|inline
name|void
name|setFrameless
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
name|Qt
operator|::
name|WindowFlags
name|flags
init|=
name|w
operator|->
name|windowFlags
argument_list|()
decl_stmt|;
name|flags
operator||=
name|Qt
operator|::
name|FramelessWindowHint
expr_stmt|;
name|flags
operator|&=
operator|~
operator|(
name|Qt
operator|::
name|WindowTitleHint
operator||
name|Qt
operator|::
name|WindowSystemMenuHint
operator||
name|Qt
operator|::
name|WindowMinMaxButtonsHint
operator||
name|Qt
operator|::
name|WindowCloseButtonHint
operator|)
expr_stmt|;
name|w
operator|->
name|setWindowFlags
argument_list|(
name|flags
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|tst_QWidget_window
class|class
name|tst_QWidget_window
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|tst_QWidget_window
name|tst_QWidget_window
parameter_list|()
block|{}
empty_stmt|;
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|tst_min_max_size
parameter_list|()
function_decl|;
name|void
name|tst_min_max_size_data
parameter_list|()
function_decl|;
name|void
name|tst_move_show
parameter_list|()
function_decl|;
name|void
name|tst_show_move
parameter_list|()
function_decl|;
name|void
name|tst_show_move_hide_show
parameter_list|()
function_decl|;
name|void
name|tst_resize_show
parameter_list|()
function_decl|;
name|void
name|tst_show_resize
parameter_list|()
function_decl|;
name|void
name|tst_show_resize_hide_show
parameter_list|()
function_decl|;
name|void
name|tst_windowFilePathAndwindowTitle_data
parameter_list|()
function_decl|;
name|void
name|tst_windowFilePathAndwindowTitle
parameter_list|()
function_decl|;
name|void
name|tst_windowFilePath_data
parameter_list|()
function_decl|;
name|void
name|tst_windowFilePath
parameter_list|()
function_decl|;
name|void
name|tst_showWithoutActivating
parameter_list|()
function_decl|;
name|void
name|tst_paintEventOnSecondShow
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
name|void
name|tst_dnd
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|tst_qtbug35600
parameter_list|()
function_decl|;
name|void
name|tst_updateWinId_QTBUG40681
parameter_list|()
function_decl|;
name|void
name|tst_recreateWindow_QTBUG40817
parameter_list|()
function_decl|;
name|void
name|tst_resize_count
parameter_list|()
function_decl|;
name|void
name|tst_move_count
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|initTestCase
name|void
name|tst_QWidget_window
operator|::
name|initTestCase
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QWidget_window
operator|::
name|cleanupTestCase
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QWidget_window
operator|::
name|cleanup
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QApplication
operator|::
name|topLevelWidgets
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/* Test if the maximum/minimum size constraints  * are propagated from the widget to the QWidgetWindow  * independently of whether they were set before or after  * window creation (QTBUG-26745). */
end_comment
begin_function
DECL|function|tst_min_max_size_data
name|void
name|tst_QWidget_window
operator|::
name|tst_min_max_size_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"setMinMaxSizeBeforeShow"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Set min/max size after show"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Set min/max size before show"
argument_list|)
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tst_min_max_size
name|void
name|tst_QWidget_window
operator|::
name|tst_min_max_size
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|setMinMaxSizeBeforeShow
argument_list|)
expr_stmt|;
specifier|const
name|QSize
name|minSize
argument_list|(
literal|300
argument_list|,
literal|400
argument_list|)
decl_stmt|;
specifier|const
name|QSize
name|maxSize
argument_list|(
literal|1000
argument_list|,
literal|500
argument_list|)
decl_stmt|;
name|QWidget
name|w1
decl_stmt|;
name|setFrameless
argument_list|(
operator|&
name|w1
argument_list|)
expr_stmt|;
operator|(
operator|new
name|QVBoxLayout
argument_list|(
operator|&
name|w1
argument_list|)
operator|)
operator|->
name|addWidget
argument_list|(
operator|new
name|QPushButton
argument_list|(
literal|"Test"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|setMinMaxSizeBeforeShow
condition|)
block|{
name|w1
operator|.
name|setMinimumSize
argument_list|(
name|minSize
argument_list|)
expr_stmt|;
name|w1
operator|.
name|setMaximumSize
argument_list|(
name|maxSize
argument_list|)
expr_stmt|;
block|}
name|w1
operator|.
name|show
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|setMinMaxSizeBeforeShow
condition|)
block|{
name|w1
operator|.
name|setMinimumSize
argument_list|(
name|minSize
argument_list|)
expr_stmt|;
name|w1
operator|.
name|setMaximumSize
argument_list|(
name|maxSize
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|w1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|w1
operator|.
name|windowHandle
argument_list|()
operator|->
name|minimumSize
argument_list|()
argument_list|,
name|minSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|w1
operator|.
name|windowHandle
argument_list|()
operator|->
name|maximumSize
argument_list|()
argument_list|,
name|maxSize
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tst_move_show
name|void
name|tst_QWidget_window
operator|::
name|tst_move_show
parameter_list|()
block|{
name|QWidget
name|w
decl_stmt|;
name|w
operator|.
name|move
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|w
operator|.
name|pos
argument_list|()
argument_list|,
name|QPoint
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|//    QCoreApplication::processEvents(QEventLoop::AllEvents, 3000);
block|}
end_function
begin_function
DECL|function|tst_show_move
name|void
name|tst_QWidget_window
operator|::
name|tst_show_move
parameter_list|()
block|{
name|QWidget
name|w
decl_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|w
operator|.
name|move
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|w
operator|.
name|pos
argument_list|()
argument_list|,
name|QPoint
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|//    QCoreApplication::processEvents(QEventLoop::AllEvents, 1000);
block|}
end_function
begin_function
DECL|function|tst_show_move_hide_show
name|void
name|tst_QWidget_window
operator|::
name|tst_show_move_hide_show
parameter_list|()
block|{
name|QWidget
name|w
decl_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|w
operator|.
name|move
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|w
operator|.
name|hide
argument_list|()
expr_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|w
operator|.
name|pos
argument_list|()
argument_list|,
name|QPoint
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|//    QCoreApplication::processEvents(QEventLoop::AllEvents, 1000);
block|}
end_function
begin_function
DECL|function|tst_resize_show
name|void
name|tst_QWidget_window
operator|::
name|tst_resize_show
parameter_list|()
block|{
name|QWidget
name|w
decl_stmt|;
name|w
operator|.
name|resize
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|w
operator|.
name|size
argument_list|()
argument_list|,
name|QSize
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
argument_list|)
expr_stmt|;
comment|//    QCoreApplication::processEvents(QEventLoop::AllEvents, 1000);
block|}
end_function
begin_function
DECL|function|tst_show_resize
name|void
name|tst_QWidget_window
operator|::
name|tst_show_resize
parameter_list|()
block|{
name|QWidget
name|w
decl_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|w
operator|.
name|resize
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|w
operator|.
name|size
argument_list|()
argument_list|,
name|QSize
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
argument_list|)
expr_stmt|;
comment|//    QCoreApplication::processEvents(QEventLoop::AllEvents, 1000);
block|}
end_function
begin_function
DECL|function|tst_show_resize_hide_show
name|void
name|tst_QWidget_window
operator|::
name|tst_show_resize_hide_show
parameter_list|()
block|{
name|QWidget
name|w
decl_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|w
operator|.
name|resize
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|w
operator|.
name|hide
argument_list|()
expr_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|w
operator|.
name|size
argument_list|()
argument_list|,
name|QSize
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
argument_list|)
expr_stmt|;
comment|//    QCoreApplication::processEvents(QEventLoop::AllEvents, 1000);
block|}
end_function
begin_class
DECL|class|TestWidget
class|class
name|TestWidget
super|:
specifier|public
name|QWidget
block|{
public|public:
DECL|member|m_first
DECL|member|m_next
name|int
name|m_first
decl_stmt|,
name|m_next
decl_stmt|;
DECL|member|paintEventReceived
name|bool
name|paintEventReceived
decl_stmt|;
DECL|function|reset
name|void
name|reset
parameter_list|()
block|{
name|m_first
operator|=
name|m_next
operator|=
literal|0
expr_stmt|;
name|paintEventReceived
operator|=
literal|false
expr_stmt|;
block|}
DECL|function|event
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|WindowActivate
case|:
case|case
name|QEvent
operator|::
name|WindowDeactivate
case|:
case|case
name|QEvent
operator|::
name|Hide
case|:
case|case
name|QEvent
operator|::
name|Show
case|:
if|if
condition|(
name|m_first
condition|)
name|m_next
operator|=
name|event
operator|->
name|type
argument_list|()
expr_stmt|;
else|else
name|m_first
operator|=
name|event
operator|->
name|type
argument_list|()
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|Paint
case|:
name|paintEventReceived
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|tst_windowFilePathAndwindowTitle_data
name|void
name|tst_QWidget_window
operator|::
name|tst_windowFilePathAndwindowTitle_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"setWindowTitleBefore"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"setWindowTitleAfter"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"filePath"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"applicationName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"indyWindowTitle"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"finalTitleBefore"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"finalTitleAfter"
argument_list|)
expr_stmt|;
name|QString
name|validPath
init|=
name|QApplication
operator|::
name|applicationFilePath
argument_list|()
decl_stmt|;
name|QString
name|fileNameOnly
init|=
name|QFileInfo
argument_list|(
name|validPath
argument_list|)
operator|.
name|fileName
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"[*]"
argument_list|)
decl_stmt|;
name|QString
name|windowTitle
init|=
name|QLatin1String
argument_list|(
literal|"Here is a Window Title"
argument_list|)
decl_stmt|;
name|QString
name|defaultPlatString
init|=
name|fileNameOnly
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"never Set Title nor AppName"
argument_list|)
operator|<<
literal|false
operator|<<
literal|false
operator|<<
name|validPath
operator|<<
name|QString
argument_list|()
operator|<<
name|windowTitle
operator|<<
name|defaultPlatString
operator|<<
name|defaultPlatString
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"set title after only, but no AppName"
argument_list|)
operator|<<
literal|false
operator|<<
literal|true
operator|<<
name|validPath
operator|<<
name|QString
argument_list|()
operator|<<
name|windowTitle
operator|<<
name|defaultPlatString
operator|<<
name|windowTitle
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"set title before only, not AppName"
argument_list|)
operator|<<
literal|true
operator|<<
literal|false
operator|<<
name|validPath
operator|<<
name|QString
argument_list|()
operator|<<
name|windowTitle
operator|<<
name|windowTitle
operator|<<
name|windowTitle
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"always set title, not appName"
argument_list|)
operator|<<
literal|true
operator|<<
literal|true
operator|<<
name|validPath
operator|<<
name|QString
argument_list|()
operator|<<
name|windowTitle
operator|<<
name|windowTitle
operator|<<
name|windowTitle
expr_stmt|;
name|QString
name|appName
init|=
name|QLatin1String
argument_list|(
literal|"Killer App"
argument_list|)
decl_stmt|;
comment|// Qt4 used to make it part of windowTitle(), Qt5 doesn't anymore, the QPA plugin takes care of it.
name|QString
name|platString
init|=
name|fileNameOnly
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"never Set Title, yes AppName"
argument_list|)
operator|<<
literal|false
operator|<<
literal|false
operator|<<
name|validPath
operator|<<
name|appName
operator|<<
name|windowTitle
operator|<<
name|platString
operator|<<
name|platString
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"set title after only, yes AppName"
argument_list|)
operator|<<
literal|false
operator|<<
literal|true
operator|<<
name|validPath
operator|<<
name|appName
operator|<<
name|windowTitle
operator|<<
name|platString
operator|<<
name|windowTitle
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"set title before only, yes AppName"
argument_list|)
operator|<<
literal|true
operator|<<
literal|false
operator|<<
name|validPath
operator|<<
name|appName
operator|<<
name|windowTitle
operator|<<
name|windowTitle
operator|<<
name|windowTitle
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"always set title, yes appName"
argument_list|)
operator|<<
literal|true
operator|<<
literal|true
operator|<<
name|validPath
operator|<<
name|appName
operator|<<
name|windowTitle
operator|<<
name|windowTitle
operator|<<
name|windowTitle
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tst_windowFilePathAndwindowTitle
name|void
name|tst_QWidget_window
operator|::
name|tst_windowFilePathAndwindowTitle
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|setWindowTitleBefore
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|setWindowTitleAfter
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|applicationName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|indyWindowTitle
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|finalTitleBefore
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|finalTitleAfter
argument_list|)
expr_stmt|;
name|QWidget
name|widget
decl_stmt|;
name|QCOMPARE
argument_list|(
name|widget
operator|.
name|windowFilePath
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|applicationName
operator|.
name|isEmpty
argument_list|()
condition|)
name|qApp
operator|->
name|setApplicationName
argument_list|(
name|applicationName
argument_list|)
expr_stmt|;
else|else
name|qApp
operator|->
name|setApplicationName
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|setWindowTitleBefore
condition|)
block|{
name|widget
operator|.
name|setWindowTitle
argument_list|(
name|indyWindowTitle
argument_list|)
expr_stmt|;
block|}
name|widget
operator|.
name|setWindowFilePath
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widget
operator|.
name|windowTitle
argument_list|()
argument_list|,
name|finalTitleBefore
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widget
operator|.
name|windowFilePath
argument_list|()
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
if|if
condition|(
name|setWindowTitleAfter
condition|)
block|{
name|widget
operator|.
name|setWindowTitle
argument_list|(
name|indyWindowTitle
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|widget
operator|.
name|windowTitle
argument_list|()
argument_list|,
name|finalTitleAfter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widget
operator|.
name|windowFilePath
argument_list|()
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tst_windowFilePath_data
name|void
name|tst_QWidget_window
operator|::
name|tst_windowFilePath_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"filePath"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"again"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"filePath2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"result2"
argument_list|)
expr_stmt|;
name|QString
name|validPath
init|=
name|QApplication
operator|::
name|applicationFilePath
argument_list|()
decl_stmt|;
name|QString
name|invalidPath
init|=
name|QLatin1String
argument_list|(
literal|"::**Never a Real Path**::"
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"never Set Path"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"never EVER Set Path"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
literal|true
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Valid Path"
argument_list|)
operator|<<
name|validPath
operator|<<
name|validPath
operator|<<
literal|false
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid Path"
argument_list|)
operator|<<
name|invalidPath
operator|<<
name|invalidPath
operator|<<
literal|false
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Valid Path then empty"
argument_list|)
operator|<<
name|validPath
operator|<<
name|validPath
operator|<<
literal|true
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid Path then empty"
argument_list|)
operator|<<
name|invalidPath
operator|<<
name|invalidPath
operator|<<
literal|true
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid Path then valid"
argument_list|)
operator|<<
name|invalidPath
operator|<<
name|invalidPath
operator|<<
literal|true
operator|<<
name|validPath
operator|<<
name|validPath
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"valid Path then invalid"
argument_list|)
operator|<<
name|validPath
operator|<<
name|validPath
operator|<<
literal|true
operator|<<
name|invalidPath
operator|<<
name|invalidPath
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tst_windowFilePath
name|void
name|tst_QWidget_window
operator|::
name|tst_windowFilePath
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|again
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|filePath2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|result2
argument_list|)
expr_stmt|;
name|QWidget
name|widget
decl_stmt|;
name|QCOMPARE
argument_list|(
name|widget
operator|.
name|windowFilePath
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|widget
operator|.
name|setWindowFilePath
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widget
operator|.
name|windowFilePath
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|again
condition|)
block|{
name|widget
operator|.
name|setWindowFilePath
argument_list|(
name|filePath2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widget
operator|.
name|windowFilePath
argument_list|()
argument_list|,
name|result2
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|tst_showWithoutActivating
name|void
name|tst_QWidget_window
operator|::
name|tst_showWithoutActivating
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|Q_DEAD_CODE_FROM_QT4_X11
name|QSKIP
argument_list|(
literal|"This test is X11-only."
argument_list|)
expr_stmt|;
else|#
directive|else
name|QWidget
name|w
decl_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|clipboard
argument_list|()
expr_stmt|;
name|QLineEdit
modifier|*
name|lineEdit
init|=
operator|new
name|QLineEdit
decl_stmt|;
name|lineEdit
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_ShowWithoutActivating
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|lineEdit
operator|->
name|show
argument_list|()
expr_stmt|;
name|lineEdit
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_ShowWithoutActivating
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|lineEdit
operator|->
name|raise
argument_list|()
expr_stmt|;
name|lineEdit
operator|->
name|activateWindow
argument_list|()
expr_stmt|;
name|Window
name|window
decl_stmt|;
name|int
name|revertto
decl_stmt|;
name|QTRY_COMPARE
argument_list|(
name|lineEdit
operator|->
name|winId
argument_list|()
argument_list|,
operator|(
name|XGetInputFocus
argument_list|(
name|QX11Info
operator|::
name|display
argument_list|()
argument_list|,
operator|&
name|window
argument_list|,
operator|&
name|revertto
argument_list|)
operator|,
name|window
operator|)
argument_list|)
expr_stmt|;
comment|// Note the use of the , before window because we want the XGetInputFocus to be re-executed
comment|//     in each iteration of the inside loop of the QTRY_COMPARE macro
endif|#
directive|endif
comment|// Q_DEAD_CODE_FROM_QT4_X11
block|}
end_function
begin_function
DECL|function|tst_paintEventOnSecondShow
name|void
name|tst_QWidget_window
operator|::
name|tst_paintEventOnSecondShow
parameter_list|()
block|{
name|TestWidget
name|w
decl_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|w
operator|.
name|hide
argument_list|()
expr_stmt|;
name|w
operator|.
name|reset
argument_list|()
expr_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|w
operator|.
name|paintEventReceived
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
end_ifndef
begin_comment
comment|/* DnD test for QWidgetWindow (handleDrag*Event() functions).  * Simulates a drop onto a QWidgetWindow of a top level widget  * that has 3 child widgets in a vertical layout with a frame. Only the lower 2  * child widgets accepts drops (QTBUG-22987), the bottom child has another child  * that does not accept drops.  * Sends a series of DnD events to the QWidgetWindow,  * entering the top level at the top frame and move  * down in steps of 5 pixels, drop onto the bottom widget.  * The test compares the sequences of events received by the widgets in readable format.  * It also checks whether the address of the mimedata received is the same as the  * sending one, that is, no conversion/serialization of text mime data occurs in the  * process. */
end_comment
begin_decl_stmt
DECL|variable|expectedLogC
specifier|static
specifier|const
name|char
modifier|*
name|expectedLogC
index|[]
init|=
block|{
literal|"Event at 11,1 ignored"
block|,
literal|"Event at 11,21 ignored"
block|,
literal|"Event at 11,41 ignored"
block|,
literal|"Event at 11,61 ignored"
block|,
literal|"Event at 11,81 ignored"
block|,
literal|"Event at 11,101 ignored"
block|,
literal|"acceptingDropsWidget1::dragEnterEvent at 1,11 action=1 MIME_DATA_ADDRESS 'testmimetext'"
block|,
literal|"Event at 11,121 accepted"
block|,
literal|"acceptingDropsWidget1::dragMoveEvent at 1,31 action=1 MIME_DATA_ADDRESS 'testmimetext'"
block|,
literal|"Event at 11,141 accepted"
block|,
literal|"acceptingDropsWidget1::dragMoveEvent at 1,51 action=1 MIME_DATA_ADDRESS 'testmimetext'"
block|,
literal|"Event at 11,161 accepted"
block|,
literal|"acceptingDropsWidget1::dragMoveEvent at 1,71 action=1 MIME_DATA_ADDRESS 'testmimetext'"
block|,
literal|"Event at 11,181 accepted"
block|,
literal|"acceptingDropsWidget1::dragLeaveEvent QDragLeaveEvent"
block|,
literal|"Event at 11,201 ignored"
block|,
literal|"acceptingDropsWidget2::dragEnterEvent at 1,11 action=1 MIME_DATA_ADDRESS 'testmimetext'"
block|,
literal|"Event at 11,221 accepted"
block|,
literal|"acceptingDropsWidget2::dragMoveEvent at 1,31 action=1 MIME_DATA_ADDRESS 'testmimetext'"
block|,
literal|"Event at 11,241 accepted"
block|,
literal|"acceptingDropsWidget2::dropEvent at 1,51 action=1 MIME_DATA_ADDRESS 'testmimetext'"
block|,
literal|"Event at 11,261 accepted"
block|,
literal|"acceptingDropsWidget1::dragEnterEvent at 10,10 action=1 MIME_DATA_ADDRESS 'testmimetext'"
block|,
literal|"Event at 0,0 accepted"
block|,
literal|"acceptingDropsWidget1::dragMoveEvent at 11,11 action=1 MIME_DATA_ADDRESS 'testmimetext'"
block|,
literal|"Event at 1,1 accepted"
block|,
literal|"acceptingDropsWidget1::dropEvent at 12,12 action=1 MIME_DATA_ADDRESS 'testmimetext'"
block|,
literal|"Event at 2,2 accepted"
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|// A widget that logs the DnD events it receives into a QStringList.
end_comment
begin_class
DECL|class|DnDEventLoggerWidget
class|class
name|DnDEventLoggerWidget
super|:
specifier|public
name|QWidget
block|{
public|public:
DECL|function|DnDEventLoggerWidget
name|DnDEventLoggerWidget
parameter_list|(
name|QStringList
modifier|*
name|log
parameter_list|,
name|QWidget
modifier|*
name|w
init|=
literal|0
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|w
argument_list|)
member_init_list|,
name|m_log
argument_list|(
name|log
argument_list|)
block|{}
protected|protected:
name|void
name|dragEnterEvent
parameter_list|(
name|QDragEnterEvent
modifier|*
parameter_list|)
function_decl|;
name|void
name|dragMoveEvent
parameter_list|(
name|QDragMoveEvent
modifier|*
parameter_list|)
function_decl|;
name|void
name|dragLeaveEvent
parameter_list|(
name|QDragLeaveEvent
modifier|*
parameter_list|)
function_decl|;
name|void
name|dropEvent
parameter_list|(
name|QDropEvent
modifier|*
parameter_list|)
function_decl|;
private|private:
name|void
name|formatDropEvent
parameter_list|(
specifier|const
name|char
modifier|*
name|function
parameter_list|,
specifier|const
name|QDropEvent
modifier|*
name|e
parameter_list|,
name|QTextStream
modifier|&
name|str
parameter_list|)
specifier|const
function_decl|;
DECL|member|m_log
name|QStringList
modifier|*
name|m_log
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|formatDropEvent
name|void
name|DnDEventLoggerWidget
operator|::
name|formatDropEvent
parameter_list|(
specifier|const
name|char
modifier|*
name|function
parameter_list|,
specifier|const
name|QDropEvent
modifier|*
name|e
parameter_list|,
name|QTextStream
modifier|&
name|str
parameter_list|)
specifier|const
block|{
name|str
operator|<<
name|objectName
argument_list|()
operator|<<
literal|"::"
operator|<<
name|function
operator|<<
literal|" at "
operator|<<
name|e
operator|->
name|pos
argument_list|()
operator|.
name|x
argument_list|()
operator|<<
literal|','
operator|<<
name|e
operator|->
name|pos
argument_list|()
operator|.
name|y
argument_list|()
operator|<<
literal|" action="
operator|<<
name|e
operator|->
name|dropAction
argument_list|()
operator|<<
literal|' '
operator|<<
name|quintptr
argument_list|(
name|e
operator|->
name|mimeData
argument_list|()
argument_list|)
operator|<<
literal|" '"
operator|<<
name|e
operator|->
name|mimeData
argument_list|()
operator|->
name|text
argument_list|()
operator|<<
literal|'\''
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dragEnterEvent
name|void
name|DnDEventLoggerWidget
operator|::
name|dragEnterEvent
parameter_list|(
name|QDragEnterEvent
modifier|*
name|e
parameter_list|)
block|{
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
name|QString
name|message
decl_stmt|;
name|QTextStream
name|str
argument_list|(
operator|&
name|message
argument_list|)
decl_stmt|;
name|formatDropEvent
argument_list|(
literal|"dragEnterEvent"
argument_list|,
name|e
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|m_log
operator|->
name|push_back
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dragMoveEvent
name|void
name|DnDEventLoggerWidget
operator|::
name|dragMoveEvent
parameter_list|(
name|QDragMoveEvent
modifier|*
name|e
parameter_list|)
block|{
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
name|QString
name|message
decl_stmt|;
name|QTextStream
name|str
argument_list|(
operator|&
name|message
argument_list|)
decl_stmt|;
name|formatDropEvent
argument_list|(
literal|"dragMoveEvent"
argument_list|,
name|e
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|m_log
operator|->
name|push_back
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dragLeaveEvent
name|void
name|DnDEventLoggerWidget
operator|::
name|dragLeaveEvent
parameter_list|(
name|QDragLeaveEvent
modifier|*
name|e
parameter_list|)
block|{
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
name|m_log
operator|->
name|push_back
argument_list|(
name|objectName
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"::"
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"dragLeaveEvent"
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|" QDragLeaveEvent"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dropEvent
name|void
name|DnDEventLoggerWidget
operator|::
name|dropEvent
parameter_list|(
name|QDropEvent
modifier|*
name|e
parameter_list|)
block|{
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
name|QString
name|message
decl_stmt|;
name|QTextStream
name|str
argument_list|(
operator|&
name|message
argument_list|)
decl_stmt|;
name|formatDropEvent
argument_list|(
literal|"dropEvent"
argument_list|,
name|e
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|m_log
operator|->
name|push_back
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|msgEventAccepted
specifier|static
name|QString
name|msgEventAccepted
parameter_list|(
specifier|const
name|QDropEvent
modifier|&
name|e
parameter_list|)
block|{
name|QString
name|message
decl_stmt|;
name|QTextStream
name|str
argument_list|(
operator|&
name|message
argument_list|)
decl_stmt|;
name|str
operator|<<
literal|"Event at "
operator|<<
name|e
operator|.
name|pos
argument_list|()
operator|.
name|x
argument_list|()
operator|<<
literal|','
operator|<<
name|e
operator|.
name|pos
argument_list|()
operator|.
name|y
argument_list|()
operator|<<
literal|' '
operator|<<
operator|(
name|e
operator|.
name|isAccepted
argument_list|()
condition|?
literal|"accepted"
else|:
literal|"ignored"
operator|)
expr_stmt|;
return|return
name|message
return|;
block|}
end_function
begin_function
DECL|function|tst_dnd
name|void
name|tst_QWidget_window
operator|::
name|tst_dnd
parameter_list|()
block|{
name|QStringList
name|log
decl_stmt|;
name|DnDEventLoggerWidget
name|dndTestWidget
argument_list|(
operator|&
name|log
argument_list|)
decl_stmt|;
name|dndTestWidget
operator|.
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"dndTestWidget"
argument_list|)
argument_list|)
expr_stmt|;
name|dndTestWidget
operator|.
name|setWindowTitle
argument_list|(
name|dndTestWidget
operator|.
name|objectName
argument_list|()
argument_list|)
expr_stmt|;
name|dndTestWidget
operator|.
name|resize
argument_list|(
literal|200
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|dropsRefusingWidget1
init|=
operator|new
name|DnDEventLoggerWidget
argument_list|(
operator|&
name|log
argument_list|,
operator|&
name|dndTestWidget
argument_list|)
decl_stmt|;
name|dropsRefusingWidget1
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"dropsRefusingWidget1"
argument_list|)
argument_list|)
expr_stmt|;
name|dropsRefusingWidget1
operator|->
name|resize
argument_list|(
literal|180
argument_list|,
literal|80
argument_list|)
expr_stmt|;
name|dropsRefusingWidget1
operator|->
name|move
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|dropsAcceptingWidget1
init|=
operator|new
name|DnDEventLoggerWidget
argument_list|(
operator|&
name|log
argument_list|,
operator|&
name|dndTestWidget
argument_list|)
decl_stmt|;
name|dropsAcceptingWidget1
operator|->
name|setAcceptDrops
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dropsAcceptingWidget1
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"acceptingDropsWidget1"
argument_list|)
argument_list|)
expr_stmt|;
name|dropsAcceptingWidget1
operator|->
name|resize
argument_list|(
literal|180
argument_list|,
literal|80
argument_list|)
expr_stmt|;
name|dropsAcceptingWidget1
operator|->
name|move
argument_list|(
literal|10
argument_list|,
literal|110
argument_list|)
expr_stmt|;
comment|// Create a native widget on top of dropsAcceptingWidget1 to check QTBUG-27336
name|QWidget
modifier|*
name|nativeWidget
init|=
operator|new
name|QWidget
argument_list|(
name|dropsAcceptingWidget1
argument_list|)
decl_stmt|;
name|nativeWidget
operator|->
name|resize
argument_list|(
literal|160
argument_list|,
literal|60
argument_list|)
expr_stmt|;
name|nativeWidget
operator|->
name|move
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|nativeWidget
operator|->
name|winId
argument_list|()
expr_stmt|;
name|QWidget
modifier|*
name|dropsAcceptingWidget2
init|=
operator|new
name|DnDEventLoggerWidget
argument_list|(
operator|&
name|log
argument_list|,
operator|&
name|dndTestWidget
argument_list|)
decl_stmt|;
name|dropsAcceptingWidget2
operator|->
name|setAcceptDrops
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dropsAcceptingWidget2
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"acceptingDropsWidget2"
argument_list|)
argument_list|)
expr_stmt|;
name|dropsAcceptingWidget2
operator|->
name|resize
argument_list|(
literal|180
argument_list|,
literal|80
argument_list|)
expr_stmt|;
name|dropsAcceptingWidget2
operator|->
name|move
argument_list|(
literal|10
argument_list|,
literal|210
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|dropsRefusingWidget2
init|=
operator|new
name|DnDEventLoggerWidget
argument_list|(
operator|&
name|log
argument_list|,
name|dropsAcceptingWidget2
argument_list|)
decl_stmt|;
name|dropsRefusingWidget2
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"dropsRefusingDropsWidget2"
argument_list|)
argument_list|)
expr_stmt|;
name|dropsRefusingWidget2
operator|->
name|resize
argument_list|(
literal|160
argument_list|,
literal|60
argument_list|)
expr_stmt|;
name|dropsRefusingWidget2
operator|->
name|move
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|dndTestWidget
operator|.
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
operator|&
name|dndTestWidget
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowActive
argument_list|(
operator|&
name|dndTestWidget
argument_list|)
argument_list|)
expr_stmt|;
name|QMimeData
name|mimeData
decl_stmt|;
name|mimeData
operator|.
name|setText
argument_list|(
name|QLatin1String
argument_list|(
literal|"testmimetext"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Simulate DnD events on the QWidgetWindow.
name|QPoint
name|position
init|=
name|QPoint
argument_list|(
literal|11
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QDragEnterEvent
name|e
argument_list|(
name|position
argument_list|,
name|Qt
operator|::
name|CopyAction
argument_list|,
operator|&
name|mimeData
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
decl_stmt|;
name|QWindow
modifier|*
name|window
init|=
name|dndTestWidget
operator|.
name|windowHandle
argument_list|()
decl_stmt|;
name|qApp
operator|->
name|sendEvent
argument_list|(
name|window
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
name|log
operator|.
name|push_back
argument_list|(
name|msgEventAccepted
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|position
operator|.
name|ry
argument_list|()
operator|+=
literal|20
expr_stmt|;
if|if
condition|(
name|position
operator|.
name|y
argument_list|()
operator|>=
literal|250
condition|)
block|{
name|QDropEvent
name|e
argument_list|(
name|position
argument_list|,
name|Qt
operator|::
name|CopyAction
argument_list|,
operator|&
name|mimeData
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
decl_stmt|;
name|qApp
operator|->
name|sendEvent
argument_list|(
name|window
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
name|log
operator|.
name|push_back
argument_list|(
name|msgEventAccepted
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
name|QDragMoveEvent
name|e
argument_list|(
name|position
argument_list|,
name|Qt
operator|::
name|CopyAction
argument_list|,
operator|&
name|mimeData
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
decl_stmt|;
name|qApp
operator|->
name|sendEvent
argument_list|(
name|window
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
name|log
operator|.
name|push_back
argument_list|(
name|msgEventAccepted
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|window
operator|=
name|nativeWidget
operator|->
name|windowHandle
argument_list|()
expr_stmt|;
name|QDragEnterEvent
name|enterEvent
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|CopyAction
argument_list|,
operator|&
name|mimeData
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
decl_stmt|;
name|qApp
operator|->
name|sendEvent
argument_list|(
name|window
argument_list|,
operator|&
name|enterEvent
argument_list|)
expr_stmt|;
name|log
operator|.
name|push_back
argument_list|(
name|msgEventAccepted
argument_list|(
name|enterEvent
argument_list|)
argument_list|)
expr_stmt|;
name|QDragMoveEvent
name|moveEvent
argument_list|(
name|QPoint
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Qt
operator|::
name|CopyAction
argument_list|,
operator|&
name|mimeData
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
decl_stmt|;
name|qApp
operator|->
name|sendEvent
argument_list|(
name|window
argument_list|,
operator|&
name|moveEvent
argument_list|)
expr_stmt|;
name|log
operator|.
name|push_back
argument_list|(
name|msgEventAccepted
argument_list|(
name|moveEvent
argument_list|)
argument_list|)
expr_stmt|;
name|QDropEvent
name|dropEvent
argument_list|(
name|QPoint
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Qt
operator|::
name|CopyAction
argument_list|,
operator|&
name|mimeData
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
decl_stmt|;
name|qApp
operator|->
name|sendEvent
argument_list|(
name|window
argument_list|,
operator|&
name|dropEvent
argument_list|)
expr_stmt|;
name|log
operator|.
name|push_back
argument_list|(
name|msgEventAccepted
argument_list|(
name|dropEvent
argument_list|)
argument_list|)
expr_stmt|;
comment|// Compare logs.
name|QStringList
name|expectedLog
decl_stmt|;
specifier|const
name|int
name|expectedLogSize
init|=
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|expectedLogC
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|expectedLogC
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|mimeDataAddress
init|=
name|QString
operator|::
name|number
argument_list|(
name|quintptr
argument_list|(
operator|&
name|mimeData
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|mimeDataAddressPlaceHolder
init|=
name|QLatin1String
argument_list|(
literal|"MIME_DATA_ADDRESS"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedLogSize
condition|;
operator|++
name|i
control|)
name|expectedLog
operator|.
name|push_back
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|expectedLogC
index|[
name|i
index|]
argument_list|)
operator|.
name|replace
argument_list|(
name|mimeDataAddressPlaceHolder
argument_list|,
name|mimeDataAddress
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|log
argument_list|,
name|expectedLog
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|tst_qtbug35600
name|void
name|tst_QWidget_window
operator|::
name|tst_qtbug35600
parameter_list|()
block|{
name|QWidget
name|w
decl_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|QWidget
modifier|*
name|wA
init|=
operator|new
name|QWidget
decl_stmt|;
name|QHBoxLayout
modifier|*
name|layoutA
init|=
operator|new
name|QHBoxLayout
decl_stmt|;
name|QWidget
modifier|*
name|wB
init|=
operator|new
name|QWidget
decl_stmt|;
name|layoutA
operator|->
name|addWidget
argument_list|(
name|wB
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|wC
init|=
operator|new
name|QWidget
decl_stmt|;
name|layoutA
operator|->
name|addWidget
argument_list|(
name|wC
argument_list|)
expr_stmt|;
name|wA
operator|->
name|setLayout
argument_list|(
name|layoutA
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|wD
init|=
operator|new
name|QWidget
decl_stmt|;
name|wD
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_NativeWindow
argument_list|)
expr_stmt|;
name|wD
operator|->
name|setParent
argument_list|(
name|wB
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|wE
init|=
operator|new
name|QWidget
argument_list|(
name|wC
argument_list|,
name|Qt
operator|::
name|Tool
operator||
name|Qt
operator|::
name|FramelessWindowHint
operator||
name|Qt
operator|::
name|WindowTransparentForInput
argument_list|)
decl_stmt|;
name|wE
operator|->
name|show
argument_list|()
expr_stmt|;
name|wA
operator|->
name|setParent
argument_list|(
operator|&
name|w
argument_list|)
expr_stmt|;
comment|// QTBUG-35600: program may crash here or on exit
block|}
end_function
begin_function
DECL|function|tst_updateWinId_QTBUG40681
name|void
name|tst_QWidget_window
operator|::
name|tst_updateWinId_QTBUG40681
parameter_list|()
block|{
name|QWidget
name|w
decl_stmt|;
name|QVBoxLayout
modifier|*
name|vl
init|=
operator|new
name|QVBoxLayout
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
name|QLabel
modifier|*
name|lbl
init|=
operator|new
name|QLabel
argument_list|(
literal|"HELLO1"
argument_list|)
decl_stmt|;
name|lbl
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_NativeWindow
argument_list|)
expr_stmt|;
name|lbl
operator|->
name|setObjectName
argument_list|(
literal|"label1"
argument_list|)
expr_stmt|;
name|vl
operator|->
name|addWidget
argument_list|(
name|lbl
argument_list|)
expr_stmt|;
name|w
operator|.
name|setMinimumWidth
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|w
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lbl
operator|->
name|winId
argument_list|()
argument_list|,
name|lbl
operator|->
name|windowHandle
argument_list|()
operator|->
name|winId
argument_list|()
argument_list|)
expr_stmt|;
comment|// simulate screen change and notification
name|QWindow
modifier|*
name|win
init|=
name|w
operator|.
name|windowHandle
argument_list|()
decl_stmt|;
name|w
operator|.
name|windowHandle
argument_list|()
operator|->
name|destroy
argument_list|()
expr_stmt|;
name|lbl
operator|->
name|windowHandle
argument_list|()
operator|->
name|destroy
argument_list|()
expr_stmt|;
name|w
operator|.
name|windowHandle
argument_list|()
operator|->
name|create
argument_list|()
expr_stmt|;
name|lbl
operator|->
name|windowHandle
argument_list|()
operator|->
name|create
argument_list|()
expr_stmt|;
name|QWindowPrivate
modifier|*
name|p
init|=
name|qt_window_private
argument_list|(
name|win
argument_list|)
decl_stmt|;
name|p
operator|->
name|emitScreenChangedRecursion
argument_list|(
name|win
operator|->
name|screen
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lbl
operator|->
name|winId
argument_list|()
argument_list|,
name|lbl
operator|->
name|windowHandle
argument_list|()
operator|->
name|winId
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tst_recreateWindow_QTBUG40817
name|void
name|tst_QWidget_window
operator|::
name|tst_recreateWindow_QTBUG40817
parameter_list|()
block|{
name|QTabWidget
name|tab
decl_stmt|;
name|QWidget
modifier|*
name|w
init|=
operator|new
name|QWidget
decl_stmt|;
name|tab
operator|.
name|addTab
argument_list|(
name|w
argument_list|,
literal|"Tab1"
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|vl
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|QLabel
modifier|*
name|lbl
init|=
operator|new
name|QLabel
argument_list|(
literal|"HELLO1"
argument_list|)
decl_stmt|;
name|lbl
operator|->
name|setObjectName
argument_list|(
literal|"label1"
argument_list|)
expr_stmt|;
name|vl
operator|->
name|addWidget
argument_list|(
name|lbl
argument_list|)
expr_stmt|;
name|w
operator|=
operator|new
name|QWidget
expr_stmt|;
name|tab
operator|.
name|addTab
argument_list|(
name|w
argument_list|,
literal|"Tab2"
argument_list|)
expr_stmt|;
name|vl
operator|=
operator|new
name|QVBoxLayout
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|lbl
operator|=
operator|new
name|QLabel
argument_list|(
literal|"HELLO2"
argument_list|)
expr_stmt|;
name|lbl
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_NativeWindow
argument_list|)
expr_stmt|;
name|lbl
operator|->
name|setObjectName
argument_list|(
literal|"label2"
argument_list|)
expr_stmt|;
name|vl
operator|->
name|addWidget
argument_list|(
name|lbl
argument_list|)
expr_stmt|;
name|tab
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|tab
argument_list|)
argument_list|)
expr_stmt|;
name|QWindow
modifier|*
name|win
init|=
name|tab
operator|.
name|windowHandle
argument_list|()
decl_stmt|;
name|win
operator|->
name|destroy
argument_list|()
expr_stmt|;
name|QWindowPrivate
modifier|*
name|p
init|=
name|qt_window_private
argument_list|(
name|win
argument_list|)
decl_stmt|;
name|p
operator|->
name|create
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|win
operator|->
name|show
argument_list|()
expr_stmt|;
name|tab
operator|.
name|setCurrentIndex
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|ResizeWidget
class|class
name|ResizeWidget
super|:
specifier|public
name|QWidget
block|{
name|Q_OBJECT
public|public:
DECL|function|ResizeWidget
name|ResizeWidget
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|resizeCount
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|member|resizeCount
name|int
name|resizeCount
decl_stmt|;
protected|protected:
name|void
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
name|resizeCount
operator|++
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|tst_resize_count
name|void
name|tst_QWidget_window
operator|::
name|tst_resize_count
parameter_list|()
block|{
block|{
name|ResizeWidget
name|resize
decl_stmt|;
name|resize
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|resize
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|resize
operator|.
name|resizeCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|resize
operator|.
name|resizeCount
operator|=
literal|0
expr_stmt|;
name|QSize
name|size
init|=
name|resize
operator|.
name|size
argument_list|()
decl_stmt|;
name|size
operator|.
name|rwidth
argument_list|()
operator|+=
literal|10
expr_stmt|;
name|resize
operator|.
name|resize
parameter_list|(
name|size
parameter_list|)
constructor_decl|;
name|QGuiApplication
operator|::
name|sync
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|resize
operator|.
name|resizeCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|resize
operator|.
name|resizeCount
operator|=
literal|0
expr_stmt|;
name|ResizeWidget
name|child
argument_list|(
operator|&
name|resize
argument_list|)
decl_stmt|;
name|child
operator|.
name|resize
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|child
operator|.
name|winId
argument_list|()
expr_stmt|;
name|child
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|QGuiApplication
operator|::
name|sync
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|child
operator|.
name|resizeCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|child
operator|.
name|resizeCount
operator|=
literal|0
expr_stmt|;
name|size
operator|=
name|child
operator|.
name|size
argument_list|()
expr_stmt|;
name|size
operator|.
name|rwidth
argument_list|()
operator|+=
literal|10
expr_stmt|;
name|child
operator|.
name|resize
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|QGuiApplication
operator|::
name|sync
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|resize
operator|.
name|resizeCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|child
operator|.
name|resizeCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|{
name|ResizeWidget
name|parent
decl_stmt|;
name|ResizeWidget
name|child
argument_list|(
operator|&
name|parent
argument_list|)
decl_stmt|;
name|child
operator|.
name|resize
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|child
operator|.
name|winId
argument_list|()
expr_stmt|;
name|parent
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|parent
operator|.
name|resizeCount
operator|=
literal|0
expr_stmt|;
name|QGuiApplication
operator|::
name|sync
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|child
operator|.
name|resizeCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|child
operator|.
name|resizeCount
operator|=
literal|0
expr_stmt|;
name|QSize
name|size
init|=
name|child
operator|.
name|size
argument_list|()
decl_stmt|;
name|size
operator|.
name|rwidth
argument_list|()
operator|+=
literal|10
expr_stmt|;
name|child
operator|.
name|resize
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|QGuiApplication
operator|::
name|sync
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parent
operator|.
name|resizeCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|child
operator|.
name|resizeCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|MoveWidget
class|class
name|MoveWidget
super|:
specifier|public
name|QWidget
block|{
name|Q_OBJECT
public|public:
DECL|function|MoveWidget
name|MoveWidget
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|moveCount
argument_list|(
literal|0
argument_list|)
block|{ }
name|void
name|moveEvent
parameter_list|(
name|QMoveEvent
modifier|*
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
name|moveCount
operator|++
expr_stmt|;
block|}
DECL|member|moveCount
name|int
name|moveCount
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|tst_move_count
name|void
name|tst_QWidget_window
operator|::
name|tst_move_count
parameter_list|()
block|{
name|MoveWidget
name|move
decl_stmt|;
name|move
operator|.
name|move
argument_list|(
literal|500
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|move
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|move
argument_list|)
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|move
operator|.
name|moveCount
operator|>=
literal|1
argument_list|)
expr_stmt|;
name|move
operator|.
name|moveCount
operator|=
literal|0
expr_stmt|;
name|move
operator|.
name|move
argument_list|(
literal|220
argument_list|,
literal|250
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|move
operator|.
name|moveCount
operator|>=
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QWidget_window
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qwidget_window.moc"
end_include
end_unit
