begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qsizepolicy.h>
end_include
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|Qt::Orientations
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QSizePolicy
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QSizePolicy::Policy
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QSizePolicy::ControlType
argument_list|)
end_macro
begin_class
DECL|class|tst_QSizePolicy
class|class
name|tst_QSizePolicy
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|Q_SLOTS
private|:
DECL|function|cleanup
name|void
name|cleanup
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QApplication
operator|::
name|topLevelWidgets
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|qtest
parameter_list|()
function_decl|;
name|void
name|defaultValues
parameter_list|()
function_decl|;
DECL|function|getSetCheck_data
name|void
name|getSetCheck_data
parameter_list|()
block|{
name|data
argument_list|()
expr_stmt|;
block|}
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|dataStream
parameter_list|()
function_decl|;
name|void
name|horizontalStretch
parameter_list|()
function_decl|;
name|void
name|verticalStretch
parameter_list|()
function_decl|;
DECL|function|qhash_data
name|void
name|qhash_data
parameter_list|()
block|{
name|data
argument_list|()
expr_stmt|;
block|}
name|void
name|qhash
parameter_list|()
function_decl|;
private|private:
name|void
name|data
parameter_list|()
specifier|const
function_decl|;
block|}
class|;
end_class
begin_struct
DECL|struct|PrettyPrint
struct|struct
name|PrettyPrint
block|{
DECL|member|m_s
specifier|const
name|char
modifier|*
name|m_s
decl_stmt|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|PrettyPrint
specifier|explicit
name|PrettyPrint
parameter_list|(
specifier|const
name|T
modifier|&
name|t
parameter_list|)
member_init_list|:
name|m_s
argument_list|(
name|Q_NULLPTR
argument_list|)
block|{
using|using
name|QT_PREPEND_NAMESPACE
argument_list|(
name|QTest
argument_list|)
operator|::
name|toString
using|;
name|m_s
operator|=
name|toString
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
DECL|function|~PrettyPrint
name|~
name|PrettyPrint
parameter_list|()
block|{
operator|delete
index|[]
name|m_s
expr_stmt|;
block|}
DECL|function|s
specifier|const
name|char
modifier|*
name|s
parameter_list|()
specifier|const
block|{
return|return
name|m_s
condition|?
name|m_s
else|:
literal|"<null>"
return|;
block|}
block|}
struct|;
end_struct
begin_function
DECL|function|qtest
name|void
name|tst_QSizePolicy
operator|::
name|qtest
parameter_list|()
block|{
DECL|macro|CHECK
define|#
directive|define
name|CHECK
parameter_list|(
name|x
parameter_list|)
value|QCOMPARE(PrettyPrint(QSizePolicy::x).s(), #x)
comment|// Policy:
name|CHECK
argument_list|(
name|Fixed
argument_list|)
expr_stmt|;
name|CHECK
argument_list|(
name|Minimum
argument_list|)
expr_stmt|;
name|CHECK
argument_list|(
name|Ignored
argument_list|)
expr_stmt|;
name|CHECK
argument_list|(
name|MinimumExpanding
argument_list|)
expr_stmt|;
name|CHECK
argument_list|(
name|Expanding
argument_list|)
expr_stmt|;
name|CHECK
argument_list|(
name|Maximum
argument_list|)
expr_stmt|;
name|CHECK
argument_list|(
name|Preferred
argument_list|)
expr_stmt|;
comment|// ControlType:
name|CHECK
argument_list|(
name|ButtonBox
argument_list|)
expr_stmt|;
name|CHECK
argument_list|(
name|CheckBox
argument_list|)
expr_stmt|;
name|CHECK
argument_list|(
name|ComboBox
argument_list|)
expr_stmt|;
name|CHECK
argument_list|(
name|Frame
argument_list|)
expr_stmt|;
name|CHECK
argument_list|(
name|GroupBox
argument_list|)
expr_stmt|;
name|CHECK
argument_list|(
name|Label
argument_list|)
expr_stmt|;
name|CHECK
argument_list|(
name|Line
argument_list|)
expr_stmt|;
name|CHECK
argument_list|(
name|LineEdit
argument_list|)
expr_stmt|;
name|CHECK
argument_list|(
name|PushButton
argument_list|)
expr_stmt|;
name|CHECK
argument_list|(
name|RadioButton
argument_list|)
expr_stmt|;
name|CHECK
argument_list|(
name|Slider
argument_list|)
expr_stmt|;
name|CHECK
argument_list|(
name|SpinBox
argument_list|)
expr_stmt|;
name|CHECK
argument_list|(
name|TabWidget
argument_list|)
expr_stmt|;
name|CHECK
argument_list|(
name|ToolButton
argument_list|)
expr_stmt|;
DECL|macro|CHECK
undef|#
directive|undef
name|CHECK
DECL|macro|CHECK2
define|#
directive|define
name|CHECK2
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|QCOMPARE(PrettyPrint(QSizePolicy::x|QSizePolicy::y).s(), \                               QSizePolicy::x< QSizePolicy::y ? #x "|" #y : #y "|" #x)
comment|// ControlTypes (sample)
name|CHECK2
argument_list|(
name|ButtonBox
argument_list|,
name|CheckBox
argument_list|)
expr_stmt|;
name|CHECK2
argument_list|(
name|CheckBox
argument_list|,
name|ButtonBox
argument_list|)
expr_stmt|;
name|CHECK2
argument_list|(
name|ToolButton
argument_list|,
name|Slider
argument_list|)
expr_stmt|;
DECL|macro|CHECK2
undef|#
directive|undef
name|CHECK2
block|}
end_function
begin_function
DECL|function|defaultValues
name|void
name|tst_QSizePolicy
operator|::
name|defaultValues
parameter_list|()
block|{
block|{
comment|// check values of a default-constructed QSizePolicy
name|QSizePolicy
name|sp
decl_stmt|;
name|QCOMPARE
argument_list|(
name|sp
operator|.
name|horizontalPolicy
argument_list|()
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sp
operator|.
name|verticalPolicy
argument_list|()
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sp
operator|.
name|horizontalStretch
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sp
operator|.
name|verticalStretch
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sp
operator|.
name|verticalStretch
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sp
operator|.
name|controlType
argument_list|()
argument_list|,
name|QSizePolicy
operator|::
name|DefaultType
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sp
operator|.
name|hasHeightForWidth
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sp
operator|.
name|hasWidthForHeight
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_define
DECL|macro|FETCH_TEST_DATA
define|#
directive|define
name|FETCH_TEST_DATA
define|\
value|QFETCH(QSizePolicy, sp); \     QFETCH(QSizePolicy::Policy, hp); \     QFETCH(QSizePolicy::Policy, vp); \     QFETCH(int, hst); \     QFETCH(int, vst); \     QFETCH(QSizePolicy::ControlType, ct); \     QFETCH(bool, hfw); \     QFETCH(bool, wfh); \     QFETCH(Qt::Orientations, ed)
end_define
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QSizePolicy
operator|::
name|getSetCheck
parameter_list|()
block|{
name|FETCH_TEST_DATA
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QPixmap
argument_list|()
argument_list|,
name|QPixmap
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sp
operator|.
name|horizontalPolicy
argument_list|()
argument_list|,
name|hp
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sp
operator|.
name|verticalPolicy
argument_list|()
argument_list|,
name|vp
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sp
operator|.
name|horizontalStretch
argument_list|()
argument_list|,
name|hst
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sp
operator|.
name|verticalStretch
argument_list|()
argument_list|,
name|vst
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sp
operator|.
name|controlType
argument_list|()
argument_list|,
name|ct
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sp
operator|.
name|hasHeightForWidth
argument_list|()
argument_list|,
name|hfw
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sp
operator|.
name|hasWidthForHeight
argument_list|()
argument_list|,
name|wfh
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sp
operator|.
name|expandingDirections
argument_list|()
argument_list|,
name|ed
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|makeRow
specifier|static
name|void
name|makeRow
parameter_list|(
name|QSizePolicy
name|sp
parameter_list|,
name|QSizePolicy
operator|::
name|Policy
name|hp
parameter_list|,
name|QSizePolicy
operator|::
name|Policy
name|vp
parameter_list|,
name|int
name|hst
parameter_list|,
name|int
name|vst
parameter_list|,
name|QSizePolicy
operator|::
name|ControlType
name|ct
parameter_list|,
name|bool
name|hfw
parameter_list|,
name|bool
name|wfh
parameter_list|,
name|Qt
operator|::
name|Orientations
name|orients
parameter_list|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|QString
operator|::
name|asprintf
argument_list|(
literal|"%s-%s-%d-%d-%s-%s-%s"
argument_list|,
name|PrettyPrint
argument_list|(
name|hp
argument_list|)
operator|.
name|s
argument_list|()
argument_list|,
name|PrettyPrint
argument_list|(
name|vp
argument_list|)
operator|.
name|s
argument_list|()
argument_list|,
name|hst
argument_list|,
name|vst
argument_list|,
name|PrettyPrint
argument_list|(
name|ct
argument_list|)
operator|.
name|s
argument_list|()
argument_list|,
name|hfw
condition|?
literal|"true"
else|:
literal|"false"
argument_list|,
name|wfh
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|sp
operator|<<
name|hp
operator|<<
name|vp
operator|<<
name|hst
operator|<<
name|vst
operator|<<
name|ct
operator|<<
name|hfw
operator|<<
name|wfh
operator|<<
name|orients
expr_stmt|;
block|}
end_function
begin_function
DECL|function|data
name|void
name|tst_QSizePolicy
operator|::
name|data
parameter_list|()
specifier|const
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QSizePolicy
argument_list|>
argument_list|(
literal|"sp"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QSizePolicy
operator|::
name|Policy
argument_list|>
argument_list|(
literal|"hp"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QSizePolicy
operator|::
name|Policy
argument_list|>
argument_list|(
literal|"vp"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"hst"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"vst"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QSizePolicy
operator|::
name|ControlType
argument_list|>
argument_list|(
literal|"ct"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"hfw"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"wfh"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|Qt
operator|::
name|Orientations
argument_list|>
argument_list|(
literal|"ed"
argument_list|)
expr_stmt|;
block|{
specifier|static
specifier|const
name|QSizePolicy
operator|::
name|Policy
name|policies
index|[
literal|3
index|]
init|=
block|{
name|QSizePolicy
operator|::
name|Fixed
block|,
name|QSizePolicy
operator|::
name|Minimum
block|,
name|QSizePolicy
operator|::
name|Ignored
block|}
decl_stmt|;
specifier|static
specifier|const
name|QSizePolicy
operator|::
name|ControlType
name|controlTypes
index|[
literal|4
index|]
init|=
block|{
name|QSizePolicy
operator|::
name|DefaultType
block|,
name|QSizePolicy
operator|::
name|ButtonBox
block|,
name|QSizePolicy
operator|::
name|CheckBox
block|,
name|QSizePolicy
operator|::
name|ToolButton
block|}
decl_stmt|;
DECL|macro|ITEMCOUNT
define|#
directive|define
name|ITEMCOUNT
parameter_list|(
name|arr
parameter_list|)
value|int(sizeof(arr)/sizeof(arr[0]))
name|QSizePolicy
name|sp
decl_stmt|,
name|oldsp
decl_stmt|;
ifdef|#
directive|ifdef
name|GENERATE_BASELINE
name|QFile
name|out
argument_list|(
name|QString
operator|::
name|fromAscii
argument_list|(
literal|"qsizepolicy-Qt%1%2.txt"
argument_list|)
operator|.
name|arg
argument_list|(
operator|(
name|QT_VERSION
operator|>>
literal|16
operator|)
operator|&
literal|0xff
argument_list|)
operator|.
name|arg
argument_list|(
operator|(
name|QT_VERSION
operator|)
operator|>>
literal|8
operator|&
literal|0xff
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|out
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Truncate
argument_list|)
condition|)
block|{
name|QDataStream
name|stream
argument_list|(
operator|&
name|out
argument_list|)
decl_stmt|;
endif|#
directive|endif
comment|/* Loop for permutating over the values most likely to trigger a bug:               - mininumum, maximum values               - Some values with LSB set, others with MSB unset. (check if shifts are ok)              */
comment|// Look specifically for
for|for
control|(
name|int
name|ihp
init|=
literal|0
init|;
name|ihp
operator|<
name|ITEMCOUNT
argument_list|(
name|policies
argument_list|)
condition|;
operator|++
name|ihp
control|)
block|{
name|QSizePolicy
operator|::
name|Policy
name|hp
init|=
name|policies
index|[
name|ihp
index|]
decl_stmt|;
for|for
control|(
name|int
name|ivp
init|=
literal|0
init|;
name|ivp
operator|<
name|ITEMCOUNT
argument_list|(
name|policies
argument_list|)
condition|;
operator|++
name|ivp
control|)
block|{
name|QSizePolicy
operator|::
name|Policy
name|vp
init|=
name|policies
index|[
name|ivp
index|]
decl_stmt|;
for|for
control|(
name|int
name|ict
init|=
literal|0
init|;
name|ict
operator|<
name|ITEMCOUNT
argument_list|(
name|controlTypes
argument_list|)
condition|;
operator|++
name|ict
control|)
block|{
name|QSizePolicy
operator|::
name|ControlType
name|ct
init|=
name|controlTypes
index|[
name|ict
index|]
decl_stmt|;
for|for
control|(
name|int
name|hst
init|=
literal|0
init|;
name|hst
operator|<=
literal|255
condition|;
name|hst
operator|+=
literal|85
control|)
block|{
comment|//[0,85,170,255]
for|for
control|(
name|int
name|vst
init|=
literal|0
init|;
name|vst
operator|<=
literal|255
condition|;
name|vst
operator|+=
literal|85
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|3
condition|;
operator|++
name|j
control|)
block|{
name|bool
name|hfw
init|=
name|j
operator|&
literal|1
decl_stmt|;
name|bool
name|wfh
init|=
name|j
operator|&
literal|2
decl_stmt|;
comment|// cannot set hfw and wfh at the same time
name|oldsp
operator|=
name|sp
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|0
case|:
name|sp
operator|.
name|setHorizontalPolicy
argument_list|(
name|hp
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|sp
operator|.
name|setVerticalPolicy
argument_list|(
name|vp
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|sp
operator|.
name|setHorizontalStretch
argument_list|(
name|hst
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|sp
operator|.
name|setVerticalStretch
argument_list|(
name|vst
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|sp
operator|.
name|setControlType
argument_list|(
name|ct
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|sp
operator|.
name|setHeightForWidth
argument_list|(
name|hfw
argument_list|)
expr_stmt|;
name|sp
operator|.
name|setWidthForHeight
argument_list|(
name|wfh
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|Qt
operator|::
name|Orientations
name|orients
decl_stmt|;
if|if
condition|(
name|sp
operator|.
name|horizontalPolicy
argument_list|()
operator|&
name|QSizePolicy
operator|::
name|ExpandFlag
condition|)
name|orients
operator||=
name|Qt
operator|::
name|Horizontal
expr_stmt|;
if|if
condition|(
name|sp
operator|.
name|verticalPolicy
argument_list|()
operator|&
name|QSizePolicy
operator|::
name|ExpandFlag
condition|)
name|orients
operator||=
name|Qt
operator|::
name|Vertical
expr_stmt|;
name|makeRow
argument_list|(
name|sp
argument_list|,
name|i
operator|>=
literal|0
condition|?
name|hp
else|:
name|oldsp
operator|.
name|horizontalPolicy
argument_list|()
argument_list|,
name|i
operator|>=
literal|1
condition|?
name|vp
else|:
name|oldsp
operator|.
name|verticalPolicy
argument_list|()
argument_list|,
name|i
operator|>=
literal|2
condition|?
name|hst
else|:
name|oldsp
operator|.
name|horizontalStretch
argument_list|()
argument_list|,
name|i
operator|>=
literal|3
condition|?
name|vst
else|:
name|oldsp
operator|.
name|verticalStretch
argument_list|()
argument_list|,
name|i
operator|>=
literal|4
condition|?
name|ct
else|:
name|oldsp
operator|.
name|controlType
argument_list|()
argument_list|,
name|i
operator|>=
literal|5
condition|?
name|hfw
else|:
name|oldsp
operator|.
name|hasHeightForWidth
argument_list|()
argument_list|,
name|i
operator|>=
literal|5
condition|?
name|wfh
else|:
name|oldsp
operator|.
name|hasWidthForHeight
argument_list|()
argument_list|,
name|orients
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|GENERATE_BASELINE
name|stream
operator|<<
name|sp
expr_stmt|;
endif|#
directive|endif
block|}
block|}
block|}
block|}
block|}
block|}
block|}
ifdef|#
directive|ifdef
name|GENERATE_BASELINE
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
DECL|macro|ITEMCOUNT
undef|#
directive|undef
name|ITEMCOUNT
block|}
block|}
end_function
begin_function
DECL|function|dataStream
name|void
name|tst_QSizePolicy
operator|::
name|dataStream
parameter_list|()
block|{
name|QByteArray
name|data
decl_stmt|;
name|QSizePolicy
name|sp
argument_list|(
name|QSizePolicy
operator|::
name|Minimum
argument_list|,
name|QSizePolicy
operator|::
name|Expanding
argument_list|)
decl_stmt|;
block|{
name|QDataStream
name|stream
argument_list|(
operator|&
name|data
argument_list|,
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
decl_stmt|;
name|sp
operator|.
name|setHorizontalStretch
argument_list|(
literal|42
argument_list|)
expr_stmt|;
name|sp
operator|.
name|setVerticalStretch
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|sp
operator|.
name|setControlType
argument_list|(
name|QSizePolicy
operator|::
name|CheckBox
argument_list|)
expr_stmt|;
name|sp
operator|.
name|setHeightForWidth
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stream
operator|<<
name|sp
expr_stmt|;
comment|// big endian
comment|/* |                     BYTE 0                    |                    BYTE 1                     | |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |  8  |  9  | 10  | 11  | 12  | 13  | 14  | 15  | +-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+ |               Horizontal stretch              |               Vertical stretch                | +-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+  |                     BYTE 2                    |                    BYTE 3                     | | 16  | 17  | 18  | 19  | 20  | 21  | 22  | 23  | 24  | 25  | 26  | 27  | 28  | 29  | 30  | 31  | +-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+ | pad | wfh |        Control Type         | hfw |    Vertical policy    |   Horizontal policy   | +-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+ */
name|QCOMPARE
argument_list|(
operator|(
name|char
operator|)
name|data
index|[
literal|0
index|]
argument_list|,
name|char
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
comment|// h stretch
name|QCOMPARE
argument_list|(
operator|(
name|char
operator|)
name|data
index|[
literal|1
index|]
argument_list|,
name|char
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
comment|// v stretch
name|QCOMPARE
argument_list|(
operator|(
name|char
operator|)
name|data
index|[
literal|2
index|]
argument_list|,
name|char
argument_list|(
literal|1
operator||
operator|(
literal|2
operator|<<
literal|1
operator|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// (hfw + CheckBox)
name|QCOMPARE
argument_list|(
operator|(
name|char
operator|)
name|data
index|[
literal|3
index|]
argument_list|,
name|char
argument_list|(
name|QSizePolicy
operator|::
name|Minimum
operator||
operator|(
name|QSizePolicy
operator|::
name|Expanding
operator|<<
literal|4
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QSizePolicy
name|readSP
decl_stmt|;
name|QDataStream
name|stream
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|stream
operator|>>
name|readSP
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sp
argument_list|,
name|readSP
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|horizontalStretch
name|void
name|tst_QSizePolicy
operator|::
name|horizontalStretch
parameter_list|()
block|{
name|QSizePolicy
name|sp
decl_stmt|;
name|sp
operator|.
name|setHorizontalStretch
argument_list|(
literal|257
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sp
operator|.
name|horizontalStretch
argument_list|()
argument_list|,
literal|255
argument_list|)
expr_stmt|;
name|sp
operator|.
name|setHorizontalStretch
argument_list|(
operator|-
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sp
operator|.
name|horizontalStretch
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|verticalStretch
name|void
name|tst_QSizePolicy
operator|::
name|verticalStretch
parameter_list|()
block|{
name|QSizePolicy
name|sp
decl_stmt|;
name|sp
operator|.
name|setVerticalStretch
argument_list|(
operator|-
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sp
operator|.
name|verticalStretch
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sp
operator|.
name|setVerticalStretch
argument_list|(
literal|257
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sp
operator|.
name|verticalStretch
argument_list|()
argument_list|,
literal|255
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qhash
name|void
name|tst_QSizePolicy
operator|::
name|qhash
parameter_list|()
block|{
name|FETCH_TEST_DATA
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|ed
argument_list|)
expr_stmt|;
name|QSizePolicy
name|sp2
argument_list|(
name|hp
argument_list|,
name|vp
argument_list|,
name|ct
argument_list|)
decl_stmt|;
name|sp2
operator|.
name|setVerticalStretch
argument_list|(
name|vst
argument_list|)
expr_stmt|;
name|sp2
operator|.
name|setHorizontalStretch
argument_list|(
name|hst
argument_list|)
expr_stmt|;
if|if
condition|(
name|hfw
condition|)
name|sp2
operator|.
name|setHeightForWidth
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|wfh
condition|)
name|sp2
operator|.
name|setWidthForHeight
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sp
argument_list|,
name|sp2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qHash
argument_list|(
name|sp
argument_list|)
argument_list|,
name|qHash
argument_list|(
name|sp2
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_undef
DECL|macro|FETCH_TEST_DATA
undef|#
directive|undef
name|FETCH_TEST_DATA
end_undef
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QSizePolicy
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qsizepolicy.moc"
end_include
end_unit
