begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qdirmodel.h>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qtreeview.h>
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_class
DECL|class|tst_QDirModel
class|class
name|tst_QDirModel
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|unreadable
parameter_list|()
function_decl|;
comment|/*     void construct();     void rowCount();     void columnCount();     void t_data();     void setData();     void hasChildren();     void isEditable();     void isDragEnabled();     void isDropEnabled();     void sort();     */
name|bool
name|rowsAboutToBeRemoved_init
parameter_list|(
specifier|const
name|QString
modifier|&
name|test_path
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|initial_files
parameter_list|)
function_decl|;
name|bool
name|rowsAboutToBeRemoved_cleanup
parameter_list|(
specifier|const
name|QString
modifier|&
name|test_path
parameter_list|)
function_decl|;
name|void
name|rowsAboutToBeRemoved_data
parameter_list|()
function_decl|;
name|void
name|rowsAboutToBeRemoved
parameter_list|()
function_decl|;
name|void
name|mkdir_data
parameter_list|()
function_decl|;
name|void
name|mkdir
parameter_list|()
function_decl|;
name|void
name|rmdir_data
parameter_list|()
function_decl|;
name|void
name|rmdir
parameter_list|()
function_decl|;
name|void
name|filePath
parameter_list|()
function_decl|;
name|void
name|hidden
parameter_list|()
function_decl|;
name|void
name|fileName
parameter_list|()
function_decl|;
name|void
name|fileName_data
parameter_list|()
function_decl|;
name|void
name|task196768_sorting
parameter_list|()
function_decl|;
name|void
name|filter
parameter_list|()
function_decl|;
name|void
name|task244669_remove
parameter_list|()
function_decl|;
name|void
name|roleNames_data
parameter_list|()
function_decl|;
name|void
name|roleNames
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QDirModel
operator|::
name|getSetCheck
parameter_list|()
block|{
name|QDirModel
name|obj1
decl_stmt|;
comment|// QFileIconProvider * QDirModel::iconProvider()
comment|// void QDirModel::setIconProvider(QFileIconProvider *)
name|QFileIconProvider
modifier|*
name|var1
init|=
operator|new
name|QFileIconProvider
decl_stmt|;
name|obj1
operator|.
name|setIconProvider
argument_list|(
name|var1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|var1
argument_list|,
name|obj1
operator|.
name|iconProvider
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setIconProvider
argument_list|(
operator|(
name|QFileIconProvider
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|QFileIconProvider
operator|*
operator|)
literal|0
argument_list|,
name|obj1
operator|.
name|iconProvider
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|var1
expr_stmt|;
comment|// bool QDirModel::resolveSymlinks()
comment|// void QDirModel::setResolveSymlinks(bool)
name|obj1
operator|.
name|setResolveSymlinks
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|resolveSymlinks
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setResolveSymlinks
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|resolveSymlinks
argument_list|()
argument_list|)
expr_stmt|;
comment|// bool QDirModel::lazyChildCount()
comment|// void QDirModel::setLazyChildCount(bool)
name|obj1
operator|.
name|setLazyChildCount
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|lazyChildCount
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setLazyChildCount
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|lazyChildCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QModelIndex
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QModelIndexList
argument_list|)
end_macro
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QDirModel
operator|::
name|cleanupTestCase
parameter_list|()
block|{
name|QDir
name|current
decl_stmt|;
name|current
operator|.
name|rmdir
argument_list|(
literal|".qtest_hidden"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_QDirModel
operator|::
name|init
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_UNIX
if|if
condition|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"unreadable"
argument_list|)
condition|)
block|{
comment|// Make sure that the unreadable file created by the unreadable()
comment|// test function doesn't already exist.
name|QFile
name|unreadableFile
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"qtest_unreadable"
argument_list|)
decl_stmt|;
if|if
condition|(
name|unreadableFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|unreadableFile
operator|.
name|remove
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|unreadableFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*   tests */
end_comment
begin_comment
comment|/* void tst_QDirModel::construct() {     QDirModel model;     QModelIndex index = model.index(QDir::currentPath() + "/test");     index = model.index(2, 0, index);     QVERIFY(index.isValid());     QFileInfo info(QDir::currentPath() + "/test/file03.tst");     QCOMPARE(model.filePath(index), info.absoluteFilePath()); }  void tst_QDirModel::rowCount() {     QDirModel model;     QModelIndex index = model.index(QDir::currentPath() + "/test");     QVERIFY(index.isValid());     QCOMPARE(model.rowCount(index), 4); }  void tst_QDirModel::columnCount() {     QDirModel model;     QModelIndex index = model.index(QDir::currentPath() + "/test");     QVERIFY(index.isValid());     QCOMPARE(model.columnCount(index), 4); }  void tst_QDirModel::t_data() {     QDirModel model;     QModelIndex index = model.index(QDir::currentPath() + "/test");     QVERIFY(index.isValid());     QCOMPARE(model.rowCount(index), 4);      index = model.index(2, 0, index);     QVERIFY(index.isValid());     QCOMPARE(model.data(index).toString(), QString::fromLatin1("file03.tst"));     QCOMPARE(model.rowCount(index), 0); }  void tst_QDirModel::setData() {     QDirModel model;     QModelIndex index = model.index(QDir::currentPath() + "/test");     QVERIFY(index.isValid());      index = model.index(2, 0, index);     QVERIFY(index.isValid());     QVERIFY(!model.setData(index, "file0X.tst", Qt::EditRole)); }  void tst_QDirModel::hasChildren() {     QDirModel model;     QModelIndex index = model.index(QDir::currentPath() + "/test");     QVERIFY(index.isValid());      index = model.index(2, 0, index);     QVERIFY(index.isValid());     QVERIFY(!model.hasChildren(index)); }  void tst_QDirModel::isEditable() {     QDirModel model;     QModelIndex index = model.index(QDir::currentPath() + "/test");     QVERIFY(index.isValid());      index = model.index(2, 0, index);     QVERIFY(index.isValid());     QVERIFY(!(model.flags(index)& Qt::ItemIsEditable)); }  void tst_QDirModel::isDragEnabled() {     QDirModel model;     QModelIndex index = model.index(QDir::currentPath() + "/test");     QVERIFY(index.isValid());      index = model.index(2, 0, index);     QVERIFY(index.isValid());     QVERIFY(model.flags(index)& Qt::ItemIsDragEnabled); }  void tst_QDirModel::isDropEnabled() {     QDirModel model;     QModelIndex index = model.index(QDir::currentPath() + "/test");     QVERIFY(index.isValid());      index = model.index(2, 0, index);     QVERIFY(!(model.flags(index)& Qt::ItemIsDropEnabled)); }  void tst_QDirModel::sort() {     QDirModel model;     QModelIndex parent = model.index(QDir::currentPath() + "/test");     QVERIFY(parent.isValid());      QModelIndex index = model.index(0, 0, parent);     QCOMPARE(model.data(index).toString(), QString::fromLatin1("file01.tst"));      index = model.index(3, 0, parent);     QCOMPARE(model.data(index).toString(), QString::fromLatin1("file04.tst"));      model.sort(0, Qt::DescendingOrder);     parent = model.index(QDir::currentPath() + "/test");      index = model.index(0, 0, parent);     QCOMPARE(model.data(index).toString(), QString::fromLatin1("file04.tst"));      index = model.index(3, 0, parent);     QCOMPARE(model.data(index).toString(), QString::fromLatin1("file01.tst")); } */
end_comment
begin_function
DECL|function|mkdir_data
name|void
name|tst_QDirModel
operator|::
name|mkdir_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"dirName"
argument_list|)
expr_stmt|;
comment|// the directory to be made under<currentpath>/dirtest
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"mkdirSuccess"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"rowCount"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"okDirName"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"test2"
argument_list|)
operator|<<
literal|true
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"existingDirName"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"test1"
argument_list|)
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nameWithSpace"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab cd"
argument_list|)
operator|<<
literal|true
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptyDirName"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nullDirName"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
comment|/*     QTest::newRow("recursiveDirName")<< QString("test2/test3")<< false<< false;     QTest::newRow("singleDotDirName")<< QString("./test3")<< true<< true;     QTest::newRow("outOfTreeDirName")<< QString("../test4")<< false<< false;     QTest::newRow("insideTreeDirName")<< QString("../dirtest/test4")<< true<< true;     QTest::newRow("insideTreeDirName2")<< QString("./././././../dirtest/./../dirtest/test4")<< true<< true;     QTest::newRow("absoluteDirName")<< QString(QDir::currentPath() + "/dirtest/test5")<< true<< true;     QTest::newRow("outOfTreeDirName")<< QString(QDir::currentPath() + "/test5")<< false<< false;      // Directory names only illegal on Windows #ifdef Q_WS_WIN     QTest::newRow("illegalDirName")<< QString("*")<< false<< false;     QTest::newRow("illegalDirName2")<< QString("|")<< false<< false;     QTest::newRow("onlySpace")<< QString(" ")<< false<< false; #endif     */
block|}
end_function
begin_function
DECL|function|mkdir
name|void
name|tst_QDirModel
operator|::
name|mkdir
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dirName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|mkdirSuccess
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
name|QDirModel
name|model
decl_stmt|;
name|model
operator|.
name|setReadOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QModelIndex
name|parent
init|=
name|model
operator|.
name|index
argument_list|(
name|SRCDIR
literal|"dirtest"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|parent
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|rowCount
argument_list|(
name|parent
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// start out with only 'test1' - in's in the depot
name|QModelIndex
name|index
init|=
name|model
operator|.
name|mkdir
argument_list|(
name|parent
argument_list|,
name|dirName
argument_list|)
decl_stmt|;
name|bool
name|success
init|=
name|index
operator|.
name|isValid
argument_list|()
decl_stmt|;
name|int
name|rows
init|=
name|model
operator|.
name|rowCount
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
operator|&&
operator|!
name|model
operator|.
name|rmdir
argument_list|(
name|index
argument_list|)
condition|)
name|QVERIFY
argument_list|(
name|QDir
argument_list|(
name|SRCDIR
literal|"dirtests"
argument_list|)
operator|.
name|rmdir
argument_list|(
name|dirName
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rows
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|success
argument_list|,
name|mkdirSuccess
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rmdir_data
name|void
name|tst_QDirModel
operator|::
name|rmdir_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"dirName"
argument_list|)
expr_stmt|;
comment|//<currentpath>/dirtest/dirname
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"rmdirSuccess"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"rowCount"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"okDirName"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"test2"
argument_list|)
operator|<<
literal|true
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"existingDirName"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"test1"
argument_list|)
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nameWithSpace"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab cd"
argument_list|)
operator|<<
literal|true
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptyDirName"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nullDirName"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rmdir
name|void
name|tst_QDirModel
operator|::
name|rmdir
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dirName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|rmdirSuccess
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
name|QDirModel
name|model
decl_stmt|;
name|model
operator|.
name|setReadOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QModelIndex
name|parent
init|=
name|model
operator|.
name|index
argument_list|(
name|SRCDIR
literal|"/dirtest"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|parent
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|rowCount
argument_list|(
name|parent
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// start out with only 'test1' - in's in the depot
name|QModelIndex
name|index
decl_stmt|;
if|if
condition|(
name|rmdirSuccess
condition|)
block|{
name|index
operator|=
name|model
operator|.
name|mkdir
argument_list|(
name|parent
argument_list|,
name|dirName
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|index
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|rows
init|=
name|model
operator|.
name|rowCount
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|bool
name|success
init|=
name|model
operator|.
name|rmdir
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
comment|// cleanup
name|QDir
name|dirtests
argument_list|(
name|SRCDIR
literal|"/dirtests/"
argument_list|)
decl_stmt|;
name|dirtests
operator|.
name|rmdir
argument_list|(
name|dirName
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|rows
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|success
argument_list|,
name|rmdirSuccess
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rowsAboutToBeRemoved_data
name|void
name|tst_QDirModel
operator|::
name|rowsAboutToBeRemoved_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"test_path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"initial_files"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"remove_row"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"remove_files"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"expected_files"
argument_list|)
expr_stmt|;
name|QString
name|test_path
init|=
literal|"test2"
decl_stmt|;
name|QStringList
name|initial_files
init|=
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"file1.tst"
operator|<<
literal|"file2.tst"
operator|<<
literal|"file3.tst"
operator|<<
literal|"file4.tst"
operator|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"removeFirstRow"
argument_list|)
operator|<<
name|test_path
operator|<<
name|initial_files
operator|<<
literal|0
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"file1.tst"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"file2.tst"
operator|<<
literal|"file3.tst"
operator|<<
literal|"file4.tst"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"removeMiddle"
argument_list|)
operator|<<
name|test_path
operator|<<
name|initial_files
operator|<<
literal|1
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"file2.tst"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"file1.tst"
operator|<<
literal|"file3.tst"
operator|<<
literal|"file4.tst"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"removeLastRow"
argument_list|)
operator|<<
name|test_path
operator|<<
name|initial_files
operator|<<
literal|3
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"file4.tst"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"file1.tst"
operator|<<
literal|"file2.tst"
operator|<<
literal|"file3.tst"
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rowsAboutToBeRemoved_init
name|bool
name|tst_QDirModel
operator|::
name|rowsAboutToBeRemoved_init
parameter_list|(
specifier|const
name|QString
modifier|&
name|test_path
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|initial_files
parameter_list|)
block|{
name|QString
name|path
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"/"
operator|+
name|test_path
decl_stmt|;
if|if
condition|(
operator|!
name|QDir
operator|::
name|current
argument_list|()
operator|.
name|mkdir
argument_list|(
name|test_path
argument_list|)
operator|&&
literal|false
condition|)
block|{
comment|// FIXME
name|qDebug
argument_list|()
operator|<<
literal|"failed to create dir"
operator|<<
name|path
expr_stmt|;
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|initial_files
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QFile
name|file
argument_list|(
name|path
operator|+
literal|"/"
operator|+
name|initial_files
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"failed to open file"
operator|<<
name|initial_files
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|resize
argument_list|(
literal|1024
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"failed to resize file"
operator|<<
name|initial_files
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|flush
argument_list|()
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"failed to flush file"
operator|<<
name|initial_files
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|rowsAboutToBeRemoved_cleanup
name|bool
name|tst_QDirModel
operator|::
name|rowsAboutToBeRemoved_cleanup
parameter_list|(
specifier|const
name|QString
modifier|&
name|test_path
parameter_list|)
block|{
name|QString
name|path
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"/"
operator|+
name|test_path
decl_stmt|;
name|QDir
name|dir
argument_list|(
name|path
argument_list|,
literal|"*"
argument_list|,
name|QDir
operator|::
name|SortFlags
argument_list|(
name|QDir
operator|::
name|Name
operator||
name|QDir
operator|::
name|IgnoreCase
argument_list|)
argument_list|,
name|QDir
operator|::
name|Files
argument_list|)
decl_stmt|;
name|QStringList
name|files
init|=
name|dir
operator|.
name|entryList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|dir
operator|.
name|remove
argument_list|(
name|files
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"failed to remove file"
operator|<<
name|files
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
operator|!
name|QDir
operator|::
name|current
argument_list|()
operator|.
name|rmdir
argument_list|(
name|test_path
argument_list|)
operator|&&
literal|false
condition|)
block|{
comment|// FIXME
name|qDebug
argument_list|()
operator|<<
literal|"failed to remove dir"
operator|<<
name|test_path
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|rowsAboutToBeRemoved
name|void
name|tst_QDirModel
operator|::
name|rowsAboutToBeRemoved
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|test_path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|initial_files
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|remove_row
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|remove_files
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|expected_files
argument_list|)
expr_stmt|;
name|rowsAboutToBeRemoved_cleanup
argument_list|(
name|test_path
argument_list|)
expr_stmt|;
comment|// clean up first
name|QVERIFY
argument_list|(
name|rowsAboutToBeRemoved_init
argument_list|(
name|test_path
argument_list|,
name|initial_files
argument_list|)
argument_list|)
expr_stmt|;
name|QDirModel
name|model
decl_stmt|;
name|model
operator|.
name|setReadOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|QModelIndex
argument_list|>
argument_list|(
literal|"QModelIndex"
argument_list|)
expr_stmt|;
comment|// NOTE: QDirModel will call refresh() when a file is removed. refresh() will reread the entire directory,
comment|// and emit layoutAboutToBeChanged and layoutChange. So, instead of checking for
comment|// rowsAboutToBeRemoved/rowsRemoved we check for layoutAboutToBeChanged/layoutChanged
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|layoutAboutToBeChanged
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QModelIndex
name|parent
init|=
name|model
operator|.
name|index
argument_list|(
name|test_path
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|parent
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove the file
block|{
name|QModelIndex
name|index
init|=
name|model
operator|.
name|index
argument_list|(
name|remove_row
argument_list|,
literal|0
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|index
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|model
operator|.
name|remove
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Compare the result
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|expected_files
operator|.
name|count
argument_list|()
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|index
init|=
name|model
operator|.
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|QString
name|str
init|=
name|index
operator|.
name|data
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|str
argument_list|,
name|expected_files
operator|.
name|at
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|rowsAboutToBeRemoved_cleanup
argument_list|(
name|test_path
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hidden
name|void
name|tst_QDirModel
operator|::
name|hidden
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|Q_OS_UNIX
name|QSKIP
argument_list|(
literal|"Test not implemented on non-Unixes"
argument_list|)
expr_stmt|;
else|#
directive|else
name|QDir
name|current
decl_stmt|;
name|current
operator|.
name|mkdir
argument_list|(
literal|".qtest_hidden"
argument_list|)
expr_stmt|;
name|QDirModel
name|model
decl_stmt|;
name|QModelIndex
name|index
init|=
name|model
operator|.
name|index
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"/.qtest_hidden"
argument_list|)
decl_stmt|;
comment|//QVERIFY(!index.isValid()); // hidden items are not listed, but if you specify a valid path, it will give a valid index
name|current
operator|.
name|mkdir
argument_list|(
literal|".qtest_hidden/qtest_visible"
argument_list|)
expr_stmt|;
name|QModelIndex
name|index2
init|=
name|model
operator|.
name|index
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"/.qtest_hidden/qtest_visible"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|index2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QDirModel
name|model2
decl_stmt|;
name|model2
operator|.
name|setFilter
argument_list|(
name|model2
operator|.
name|filter
argument_list|()
operator||
name|QDir
operator|::
name|Hidden
argument_list|)
expr_stmt|;
name|index
operator|=
name|model2
operator|.
name|index
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"/.qtest_hidden"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|index
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|fileName_data
name|void
name|tst_QDirModel
operator|::
name|fileName_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid"
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
comment|//QTest::newRow("root")<< "/"<< "/";
comment|//QTest::newRow("home")<< "/home"<< "home";
comment|// TODO add symlink test too
block|}
end_function
begin_function
DECL|function|fileName
name|void
name|tst_QDirModel
operator|::
name|fileName
parameter_list|()
block|{
name|QDirModel
name|model
decl_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|fileName
argument_list|(
name|model
operator|.
name|index
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unreadable
name|void
name|tst_QDirModel
operator|::
name|unreadable
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|Q_OS_UNIX
name|QSKIP
argument_list|(
literal|"Test not implemented on non-Unixes"
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// Create an empty file which has no read permissions (file will be removed by cleanup()).
name|QFile
name|unreadableFile
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"qtest_unreadable"
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|unreadableFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|unreadableFile
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|unreadableFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|unreadableFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|unreadableFile
operator|.
name|setPermissions
argument_list|(
name|QFile
operator|::
name|WriteOwner
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|unreadableFile
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that we can't make a valid model index from an unreadable file.
name|QDirModel
name|model
decl_stmt|;
name|QModelIndex
name|index
init|=
name|model
operator|.
name|index
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"/qtest_unreadable"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that unreadable files are not treated like hidden files.
name|QDirModel
name|model2
decl_stmt|;
name|model2
operator|.
name|setFilter
argument_list|(
name|model2
operator|.
name|filter
argument_list|()
operator||
name|QDir
operator|::
name|Hidden
argument_list|)
expr_stmt|;
name|index
operator|=
name|model2
operator|.
name|index
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"/qtest_unreadable"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|filePath
name|void
name|tst_QDirModel
operator|::
name|filePath
parameter_list|()
block|{
name|QFile
operator|::
name|remove
argument_list|(
name|SRCDIR
literal|"test.lnk"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
argument_list|(
name|SRCDIR
literal|"tst_qdirmodel.cpp"
argument_list|)
operator|.
name|link
argument_list|(
name|SRCDIR
literal|"test.lnk"
argument_list|)
argument_list|)
expr_stmt|;
name|QDirModel
name|model
decl_stmt|;
name|model
operator|.
name|setResolveSymlinks
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QModelIndex
name|index
init|=
name|model
operator|.
name|index
argument_list|(
name|SRCDIR
literal|"test.lnk"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|index
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|QString
name|path
init|=
name|SRCDIR
decl_stmt|;
else|#
directive|else
name|QString
name|path
init|=
name|QFileInfo
argument_list|(
name|SRCDIR
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
operator|+
literal|"/"
decl_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|model
operator|.
name|filePath
argument_list|(
name|index
argument_list|)
argument_list|,
name|path
operator|+
name|QString
argument_list|(
literal|"test.lnk"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setResolveSymlinks
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|filePath
argument_list|(
name|index
argument_list|)
argument_list|,
name|path
operator|+
name|QString
argument_list|(
literal|"tst_qdirmodel.cpp"
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|SRCDIR
literal|"test.lnk"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task196768_sorting
name|void
name|tst_QDirModel
operator|::
name|task196768_sorting
parameter_list|()
block|{
comment|//this task showed that the persistent model indexes got corrupted when sorting
name|QString
name|path
init|=
name|SRCDIR
decl_stmt|;
name|QDirModel
name|model
decl_stmt|;
comment|/* QDirModel has a bug if we show the content of the subdirectory inside a hidden directory        and we don't add QDir::Hidden. But as QDirModel is deprecated, we decided not to fix it. */
name|model
operator|.
name|setFilter
argument_list|(
name|QDir
operator|::
name|AllEntries
operator||
name|QDir
operator|::
name|Hidden
operator||
name|QDir
operator|::
name|AllDirs
argument_list|)
expr_stmt|;
name|QTreeView
name|view
decl_stmt|;
name|QPersistentModelIndex
name|index
init|=
name|model
operator|.
name|index
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|view
operator|.
name|setModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|QModelIndex
name|index2
init|=
name|model
operator|.
name|index
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|index
operator|.
name|data
argument_list|()
argument_list|,
name|index2
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|view
operator|.
name|setRootIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|index2
operator|=
name|model
operator|.
name|index
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|index
operator|.
name|data
argument_list|()
argument_list|,
name|index2
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|view
operator|.
name|setCurrentIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|index2
operator|=
name|model
operator|.
name|index
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|index
operator|.
name|data
argument_list|()
argument_list|,
name|index2
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|view
operator|.
name|setSortingEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|index2
operator|=
name|model
operator|.
name|index
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|index
operator|.
name|data
argument_list|()
argument_list|,
name|index2
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|filter
name|void
name|tst_QDirModel
operator|::
name|filter
parameter_list|()
block|{
name|QDirModel
name|model
decl_stmt|;
name|model
operator|.
name|setNameFilters
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"*.nada"
argument_list|)
expr_stmt|;
name|QModelIndex
name|index
init|=
name|model
operator|.
name|index
argument_list|(
name|SRCDIR
literal|"test"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|rowCount
argument_list|(
name|index
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QModelIndex
name|index2
init|=
name|model
operator|.
name|index
argument_list|(
name|SRCDIR
literal|"test/file01.tst"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|index2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|rowCount
argument_list|(
name|index
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task244669_remove
name|void
name|tst_QDirModel
operator|::
name|task244669_remove
parameter_list|()
block|{
name|QFile
name|f1
argument_list|(
name|SRCDIR
literal|"dirtest/f1.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|f1
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|f1
operator|.
name|close
argument_list|()
expr_stmt|;
name|QFile
name|f2
argument_list|(
name|SRCDIR
literal|"dirtest/f2.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|f2
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|f2
operator|.
name|close
argument_list|()
expr_stmt|;
name|QDirModel
name|model
decl_stmt|;
name|model
operator|.
name|setReadOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QPersistentModelIndex
name|parent
init|=
name|model
operator|.
name|index
argument_list|(
name|SRCDIR
literal|"dirtest"
argument_list|)
decl_stmt|;
name|QPersistentModelIndex
name|index2
init|=
name|model
operator|.
name|index
argument_list|(
name|SRCDIR
literal|"dirtest/f2.txt"
argument_list|)
decl_stmt|;
name|QPersistentModelIndex
name|index1
init|=
name|model
operator|.
name|index
argument_list|(
name|SRCDIR
literal|"dirtest/f1.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|parent
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|index1
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|index2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parent
operator|.
name|data
argument_list|()
argument_list|,
name|model
operator|.
name|index
argument_list|(
name|SRCDIR
literal|"dirtest"
argument_list|)
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|index1
operator|.
name|data
argument_list|()
argument_list|,
name|model
operator|.
name|index
argument_list|(
name|SRCDIR
literal|"dirtest/f1.txt"
argument_list|)
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|index2
operator|.
name|data
argument_list|()
argument_list|,
name|model
operator|.
name|index
argument_list|(
name|SRCDIR
literal|"dirtest/f2.txt"
argument_list|)
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|model
operator|.
name|remove
argument_list|(
name|index1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parent
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|index1
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|index2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parent
operator|.
name|data
argument_list|()
argument_list|,
name|model
operator|.
name|index
argument_list|(
name|SRCDIR
literal|"dirtest"
argument_list|)
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|index2
operator|.
name|data
argument_list|()
argument_list|,
name|model
operator|.
name|index
argument_list|(
name|SRCDIR
literal|"dirtest/f2.txt"
argument_list|)
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|model
operator|.
name|remove
argument_list|(
name|index2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parent
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|index2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|index1
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parent
operator|.
name|data
argument_list|()
argument_list|,
name|model
operator|.
name|index
argument_list|(
name|SRCDIR
literal|"dirtest"
argument_list|)
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|roleNames_data
name|void
name|tst_QDirModel
operator|::
name|roleNames_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"role"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"roleName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"decoration"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|DecorationRole
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"decoration"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"display"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"display"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"fileIcon"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDirModel
operator|::
name|FileIconRole
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"fileIcon"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"filePath"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDirModel
operator|::
name|FilePathRole
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"filePath"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"fileName"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDirModel
operator|::
name|FileNameRole
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|roleNames
name|void
name|tst_QDirModel
operator|::
name|roleNames
parameter_list|()
block|{
name|QDirModel
name|model
decl_stmt|;
name|QHash
argument_list|<
name|int
argument_list|,
name|QByteArray
argument_list|>
name|roles
init|=
name|model
operator|.
name|roleNames
argument_list|()
decl_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|role
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|roles
operator|.
name|contains
argument_list|(
name|role
argument_list|)
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|roleName
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|values
init|=
name|roles
operator|.
name|values
argument_list|(
name|role
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|values
operator|.
name|contains
argument_list|(
name|roleName
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QDirModel
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qdirmodel.moc"
end_include
end_unit
