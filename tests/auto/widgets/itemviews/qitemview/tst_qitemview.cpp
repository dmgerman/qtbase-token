begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtCore/QtCore>
end_include
begin_include
include|#
directive|include
file|"viewstotest.cpp"
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
end_if
begin_include
include|#
directive|include
file|<time.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
end_if
begin_include
include|#
directive|include
file|<time.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_include
include|#
directive|include
file|<aygshell.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|random
define|#
directive|define
name|random
value|rand
end_define
begin_define
DECL|macro|srandom
define|#
directive|define
name|srandom
value|srand
end_define
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_function
DECL|function|qt_wince_is_platform
name|bool
name|qt_wince_is_platform
parameter_list|(
specifier|const
name|QString
modifier|&
name|platformString
parameter_list|)
block|{
name|wchar_t
name|tszPlatform
index|[
literal|64
index|]
decl_stmt|;
if|if
condition|(
name|SystemParametersInfo
argument_list|(
name|SPI_GETPLATFORMTYPE
argument_list|,
sizeof|sizeof
argument_list|(
name|tszPlatform
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
operator|*
name|tszPlatform
argument_list|)
argument_list|,
name|tszPlatform
argument_list|,
literal|0
argument_list|)
condition|)
if|if
condition|(
literal|0
operator|==
name|_tcsicmp
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|platformString
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
name|tszPlatform
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|qt_wince_is_pocket_pc
name|bool
name|qt_wince_is_pocket_pc
parameter_list|()
block|{
return|return
name|qt_wince_is_platform
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"PocketPC"
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_wince_is_smartphone
name|bool
name|qt_wince_is_smartphone
parameter_list|()
block|{
return|return
name|qt_wince_is_platform
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Smartphone"
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_wince_is_mobile
name|bool
name|qt_wince_is_mobile
parameter_list|()
block|{
return|return
operator|(
name|qt_wince_is_smartphone
argument_list|()
operator|||
name|qt_wince_is_pocket_pc
argument_list|()
operator|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     See viewstotest.cpp for instructions on how to have your view tested with these tests.      Each test such as visualRect have a _data() function which populate the QTest data with     tests specified by viewstotest.cpp and any extra data needed for that particular test.      setupWithNoTestData() fills QTest data with only the tests it is used by most tests.      There are some basic qDebug statements sprikled about that might be helpfull for     fixing your issues.  */
end_comment
begin_class
DECL|class|tst_QItemView
class|class
name|tst_QItemView
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|tst_QItemView
name|tst_QItemView
parameter_list|()
block|{}
empty_stmt|;
DECL|function|~tst_QItemView
specifier|virtual
name|~
name|tst_QItemView
parameter_list|()
block|{}
empty_stmt|;
public|public
name|slots
public|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|nonDestructiveBasicTest_data
parameter_list|()
function_decl|;
name|void
name|nonDestructiveBasicTest
parameter_list|()
function_decl|;
name|void
name|spider_data
parameter_list|()
function_decl|;
name|void
name|spider
parameter_list|()
function_decl|;
name|void
name|resize_data
parameter_list|()
function_decl|;
name|void
name|resize
parameter_list|()
function_decl|;
name|void
name|visualRect_data
parameter_list|()
function_decl|;
name|void
name|visualRect
parameter_list|()
function_decl|;
name|void
name|indexAt_data
parameter_list|()
function_decl|;
name|void
name|indexAt
parameter_list|()
function_decl|;
name|void
name|scrollTo_data
parameter_list|()
function_decl|;
name|void
name|scrollTo
parameter_list|()
function_decl|;
name|void
name|moveCursor_data
parameter_list|()
function_decl|;
name|void
name|moveCursor
parameter_list|()
function_decl|;
private|private:
name|void
name|setupWithNoTestData
parameter_list|()
function_decl|;
name|void
name|populate
parameter_list|()
function_decl|;
name|void
name|walkScreen
parameter_list|(
name|QAbstractItemView
modifier|*
name|view
parameter_list|)
function_decl|;
DECL|member|view
name|QAbstractItemView
modifier|*
name|view
decl_stmt|;
DECL|member|treeModel
name|QAbstractItemModel
modifier|*
name|treeModel
decl_stmt|;
DECL|member|testViews
name|ViewsToTest
modifier|*
name|testViews
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/*!  * Views should not make invalid requests, sense a model might not check all the bad cases.  */
end_comment
begin_class
DECL|class|CheckerModel
class|class
name|CheckerModel
super|:
specifier|public
name|QStandardItemModel
block|{
name|Q_OBJECT
public|public:
DECL|function|CheckerModel
name|CheckerModel
parameter_list|()
member_init_list|:
name|QStandardItemModel
argument_list|()
block|{}
empty_stmt|;
DECL|function|data
name|QVariant
name|data
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
name|int
name|role
init|=
name|Qt
operator|::
name|DisplayRole
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: index is not valid"
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
return|return
name|QVariant
argument_list|()
return|;
block|}
return|return
name|QStandardItemModel
operator|::
name|data
argument_list|(
name|index
argument_list|,
name|role
argument_list|)
return|;
block|}
empty_stmt|;
DECL|function|flags
name|Qt
operator|::
name|ItemFlags
name|flags
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: index is not valid"
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
return|return
name|Qt
operator|::
name|ItemFlags
argument_list|()
return|;
block|}
if|if
condition|(
name|index
operator|.
name|row
argument_list|()
operator|==
literal|2
operator|||
name|index
operator|.
name|row
argument_list|()
operator|==
name|rowCount
argument_list|()
operator|-
literal|3
operator|||
name|index
operator|.
name|column
argument_list|()
operator|==
literal|2
operator|||
name|index
operator|.
name|column
argument_list|()
operator|==
name|columnCount
argument_list|()
operator|-
literal|3
condition|)
block|{
name|Qt
operator|::
name|ItemFlags
name|f
init|=
name|QStandardItemModel
operator|::
name|flags
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|f
operator|&=
operator|~
name|Qt
operator|::
name|ItemIsEnabled
expr_stmt|;
return|return
name|f
return|;
block|}
return|return
name|QStandardItemModel
operator|::
name|flags
argument_list|(
name|index
argument_list|)
return|;
block|}
empty_stmt|;
DECL|function|parent
name|QModelIndex
name|parent
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|child
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: child index is not valid"
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
return|return
name|QModelIndex
argument_list|()
return|;
block|}
return|return
name|QStandardItemModel
operator|::
name|parent
argument_list|(
name|child
argument_list|)
return|;
block|}
empty_stmt|;
DECL|function|headerData
name|QVariant
name|headerData
parameter_list|(
name|int
name|section
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
name|int
name|role
init|=
name|Qt
operator|::
name|DisplayRole
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
operator|&&
operator|(
name|section
argument_list|<
literal|0
operator|||
name|section
argument_list|>
name|columnCount
argument_list|()
operator|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: invalid section %d, must be in range 0..%d"
argument_list|,
name|Q_FUNC_INFO
argument_list|,
name|section
argument_list|,
name|columnCount
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|QVariant
argument_list|()
return|;
block|}
if|if
condition|(
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
operator|&&
operator|(
name|section
argument_list|<
literal|0
operator|||
name|section
argument_list|>
name|rowCount
argument_list|()
operator|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: invalid section %d, must be in range 0..%d"
argument_list|,
name|Q_FUNC_INFO
argument_list|,
name|section
argument_list|,
name|rowCount
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|QVariant
argument_list|()
return|;
block|}
return|return
name|QStandardItemModel
operator|::
name|headerData
argument_list|(
name|section
argument_list|,
name|orientation
argument_list|,
name|role
argument_list|)
return|;
block|}
DECL|function|index
name|QModelIndex
name|index
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
init|=
name|QModelIndex
argument_list|()
parameter_list|)
specifier|const
block|{
return|return
name|QStandardItemModel
operator|::
name|index
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|parent
argument_list|)
return|;
block|}
empty_stmt|;
DECL|function|setData
name|bool
name|setData
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|,
name|int
name|role
init|=
name|Qt
operator|::
name|EditRole
parameter_list|)
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: index is not valid"
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|QStandardItemModel
operator|::
name|setData
argument_list|(
name|index
argument_list|,
name|value
argument_list|,
name|role
argument_list|)
return|;
block|}
DECL|function|sort
name|void
name|sort
parameter_list|(
name|int
name|column
parameter_list|,
name|Qt
operator|::
name|SortOrder
name|order
init|=
name|Qt
operator|::
name|AscendingOrder
parameter_list|)
block|{
if|if
condition|(
name|column
argument_list|<
literal|0
operator|||
name|column
argument_list|>
name|columnCount
argument_list|()
condition|)
name|qWarning
argument_list|(
literal|"%s: invalid column %d, must be in range 0..%d"
argument_list|,
name|Q_FUNC_INFO
argument_list|,
name|column
argument_list|,
name|columnCount
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|QStandardItemModel
operator|::
name|sort
argument_list|(
name|column
argument_list|,
name|order
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
DECL|function|match
name|QModelIndexList
name|match
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|start
parameter_list|,
name|int
name|role
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|,
name|int
name|hits
init|=
literal|1
parameter_list|,
name|Qt
operator|::
name|MatchFlags
name|flags
init|=
name|Qt
operator|::
name|MatchFlags
argument_list|(
name|Qt
operator|::
name|MatchStartsWith
operator||
name|Qt
operator|::
name|MatchWrap
argument_list|)
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|hits
operator|<=
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: hits must be greater than zero"
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
return|return
name|QModelIndexList
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
name|value
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: value is not valid"
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
return|return
name|QModelIndexList
argument_list|()
return|;
block|}
return|return
name|QAbstractItemModel
operator|::
name|match
argument_list|(
name|start
argument_list|,
name|role
argument_list|,
name|value
argument_list|,
name|hits
argument_list|,
name|flags
argument_list|)
return|;
block|}
empty_stmt|;
DECL|function|setHeaderData
name|bool
name|setHeaderData
parameter_list|(
name|int
name|section
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|,
name|int
name|role
init|=
name|Qt
operator|::
name|EditRole
parameter_list|)
block|{
if|if
condition|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
operator|&&
operator|(
name|section
argument_list|<
literal|0
operator|||
name|section
argument_list|>
name|columnCount
argument_list|()
operator|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: invalid section %d, must be in range 0..%d"
argument_list|,
name|Q_FUNC_INFO
argument_list|,
name|section
argument_list|,
name|columnCount
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
operator|&&
operator|(
name|section
argument_list|<
literal|0
operator|||
name|section
argument_list|>
name|rowCount
argument_list|()
operator|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: invalid section %d, must be in range 0..%d"
argument_list|,
name|Q_FUNC_INFO
argument_list|,
name|section
argument_list|,
name|rowCount
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|QAbstractItemModel
operator|::
name|setHeaderData
argument_list|(
name|section
argument_list|,
name|orientation
argument_list|,
name|value
argument_list|,
name|role
argument_list|)
return|;
block|}
empty_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|init
name|void
name|tst_QItemView
operator|::
name|init
parameter_list|()
block|{
name|testViews
operator|=
operator|new
name|ViewsToTest
argument_list|()
expr_stmt|;
name|populate
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QItemView
operator|::
name|cleanup
parameter_list|()
block|{
operator|delete
name|testViews
expr_stmt|;
operator|delete
name|view
expr_stmt|;
operator|delete
name|treeModel
expr_stmt|;
name|view
operator|=
literal|0
expr_stmt|;
name|testViews
operator|=
literal|0
expr_stmt|;
name|treeModel
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setupWithNoTestData
name|void
name|tst_QItemView
operator|::
name|setupWithNoTestData
parameter_list|()
block|{
name|ViewsToTest
name|testViews
decl_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"viewType"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"displays"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"vscroll"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"hscroll"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testViews
operator|.
name|tests
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|view
init|=
name|testViews
operator|.
name|tests
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|viewType
decl_stmt|;
name|QString
name|test
init|=
name|view
operator|+
literal|" ScrollPerPixel"
decl_stmt|;
name|bool
name|displayIndexes
init|=
operator|(
name|testViews
operator|.
name|tests
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|display
operator|==
name|ViewsToTest
operator|::
name|DisplayRoot
operator|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|test
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
operator|<<
name|view
operator|<<
name|displayIndexes
operator|<<
operator|(
name|int
operator|)
name|QAbstractItemView
operator|::
name|ScrollPerPixel
operator|<<
operator|(
name|int
operator|)
name|QAbstractItemView
operator|::
name|ScrollPerPixel
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testViews
operator|.
name|tests
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|view
init|=
name|testViews
operator|.
name|tests
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|viewType
decl_stmt|;
name|QString
name|test
init|=
name|view
operator|+
literal|" ScrollPerItem"
decl_stmt|;
name|bool
name|displayIndexes
init|=
operator|(
name|testViews
operator|.
name|tests
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|display
operator|==
name|ViewsToTest
operator|::
name|DisplayRoot
operator|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|test
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
operator|<<
name|view
operator|<<
name|displayIndexes
operator|<<
operator|(
name|int
operator|)
name|QAbstractItemView
operator|::
name|ScrollPerItem
operator|<<
operator|(
name|int
operator|)
name|QAbstractItemView
operator|::
name|ScrollPerItem
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|populate
name|void
name|tst_QItemView
operator|::
name|populate
parameter_list|()
block|{
name|treeModel
operator|=
operator|new
name|CheckerModel
expr_stmt|;
name|QModelIndex
name|parent
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QT_ARCH_ARM
argument_list|)
specifier|const
name|int
name|baseInsert
init|=
literal|4
decl_stmt|;
else|#
directive|else
specifier|const
name|int
name|baseInsert
init|=
literal|26
decl_stmt|;
endif|#
directive|endif
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|40
condition|;
operator|++
name|i
control|)
block|{
name|parent
operator|=
name|treeModel
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|treeModel
operator|->
name|insertRows
argument_list|(
literal|0
argument_list|,
name|baseInsert
operator|+
name|i
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|treeModel
operator|->
name|insertColumns
argument_list|(
literal|0
argument_list|,
name|baseInsert
operator|+
name|i
argument_list|,
name|parent
argument_list|)
expr_stmt|;
comment|// Fill in some values to make it easier to debug
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|treeModel
operator|->
name|rowCount
argument_list|()
condition|;
operator|++
name|x
control|)
block|{
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|treeModel
operator|->
name|columnCount
argument_list|()
condition|;
operator|++
name|y
control|)
block|{
name|QModelIndex
name|index
init|=
name|treeModel
operator|->
name|index
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|treeModel
operator|->
name|setData
argument_list|(
name|index
argument_list|,
name|QString
argument_list|(
literal|"%1_%2_%3"
argument_list|)
operator|.
name|arg
argument_list|(
name|x
argument_list|)
operator|.
name|arg
argument_list|(
name|y
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|treeModel
operator|->
name|setData
argument_list|(
name|index
argument_list|,
name|QVariant
argument_list|(
name|QColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|TextColorRole
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|nonDestructiveBasicTest_data
name|void
name|tst_QItemView
operator|::
name|nonDestructiveBasicTest_data
parameter_list|()
block|{
name|setupWithNoTestData
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     nonDestructiveBasicTest tries to call a number of the basic functions (not all)     to make sure the view doesn't segfault, testing the functions that makes sense.  */
end_comment
begin_function
DECL|function|nonDestructiveBasicTest
name|void
name|tst_QItemView
operator|::
name|nonDestructiveBasicTest
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|QTest
operator|::
name|qWait
argument_list|(
literal|400
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|viewType
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|vscroll
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|hscroll
argument_list|)
expr_stmt|;
name|view
operator|=
name|testViews
operator|->
name|createView
argument_list|(
name|viewType
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|view
operator|->
name|setVerticalScrollMode
argument_list|(
operator|(
name|QAbstractItemView
operator|::
name|ScrollMode
operator|)
name|vscroll
argument_list|)
expr_stmt|;
name|view
operator|->
name|setHorizontalScrollMode
argument_list|(
operator|(
name|QAbstractItemView
operator|::
name|ScrollMode
operator|)
name|hscroll
argument_list|)
expr_stmt|;
comment|// setSelectionModel() will assert
comment|//view->setSelectionModel(0);
comment|// setItemDelegate() will assert
comment|//view->setItemDelegate(0);
comment|// setSelectionMode
name|view
operator|->
name|setSelectionMode
argument_list|(
name|QAbstractItemView
operator|::
name|SingleSelection
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|selectionMode
argument_list|()
argument_list|,
name|QAbstractItemView
operator|::
name|SingleSelection
argument_list|)
expr_stmt|;
name|view
operator|->
name|setSelectionMode
argument_list|(
name|QAbstractItemView
operator|::
name|ContiguousSelection
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|selectionMode
argument_list|()
argument_list|,
name|QAbstractItemView
operator|::
name|ContiguousSelection
argument_list|)
expr_stmt|;
name|view
operator|->
name|setSelectionMode
argument_list|(
name|QAbstractItemView
operator|::
name|ExtendedSelection
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|selectionMode
argument_list|()
argument_list|,
name|QAbstractItemView
operator|::
name|ExtendedSelection
argument_list|)
expr_stmt|;
name|view
operator|->
name|setSelectionMode
argument_list|(
name|QAbstractItemView
operator|::
name|MultiSelection
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|selectionMode
argument_list|()
argument_list|,
name|QAbstractItemView
operator|::
name|MultiSelection
argument_list|)
expr_stmt|;
name|view
operator|->
name|setSelectionMode
argument_list|(
name|QAbstractItemView
operator|::
name|NoSelection
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|selectionMode
argument_list|()
argument_list|,
name|QAbstractItemView
operator|::
name|NoSelection
argument_list|)
expr_stmt|;
comment|// setSelectionBehavior
name|view
operator|->
name|setSelectionBehavior
argument_list|(
name|QAbstractItemView
operator|::
name|SelectItems
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|selectionBehavior
argument_list|()
argument_list|,
name|QAbstractItemView
operator|::
name|SelectItems
argument_list|)
expr_stmt|;
name|view
operator|->
name|setSelectionBehavior
argument_list|(
name|QAbstractItemView
operator|::
name|SelectRows
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|selectionBehavior
argument_list|()
argument_list|,
name|QAbstractItemView
operator|::
name|SelectRows
argument_list|)
expr_stmt|;
name|view
operator|->
name|setSelectionBehavior
argument_list|(
name|QAbstractItemView
operator|::
name|SelectColumns
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|selectionBehavior
argument_list|()
argument_list|,
name|QAbstractItemView
operator|::
name|SelectColumns
argument_list|)
expr_stmt|;
comment|// setEditTriggers
name|view
operator|->
name|setEditTriggers
argument_list|(
name|QAbstractItemView
operator|::
name|EditKeyPressed
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|editTriggers
argument_list|()
argument_list|,
name|QAbstractItemView
operator|::
name|EditKeyPressed
argument_list|)
expr_stmt|;
name|view
operator|->
name|setEditTriggers
argument_list|(
name|QAbstractItemView
operator|::
name|NoEditTriggers
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|editTriggers
argument_list|()
argument_list|,
name|QAbstractItemView
operator|::
name|NoEditTriggers
argument_list|)
expr_stmt|;
name|view
operator|->
name|setEditTriggers
argument_list|(
name|QAbstractItemView
operator|::
name|CurrentChanged
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|editTriggers
argument_list|()
argument_list|,
name|QAbstractItemView
operator|::
name|CurrentChanged
argument_list|)
expr_stmt|;
name|view
operator|->
name|setEditTriggers
argument_list|(
name|QAbstractItemView
operator|::
name|DoubleClicked
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|editTriggers
argument_list|()
argument_list|,
name|QAbstractItemView
operator|::
name|DoubleClicked
argument_list|)
expr_stmt|;
name|view
operator|->
name|setEditTriggers
argument_list|(
name|QAbstractItemView
operator|::
name|SelectedClicked
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|editTriggers
argument_list|()
argument_list|,
name|QAbstractItemView
operator|::
name|SelectedClicked
argument_list|)
expr_stmt|;
name|view
operator|->
name|setEditTriggers
argument_list|(
name|QAbstractItemView
operator|::
name|AnyKeyPressed
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|editTriggers
argument_list|()
argument_list|,
name|QAbstractItemView
operator|::
name|AnyKeyPressed
argument_list|)
expr_stmt|;
name|view
operator|->
name|setEditTriggers
argument_list|(
name|QAbstractItemView
operator|::
name|AllEditTriggers
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|editTriggers
argument_list|()
argument_list|,
name|QAbstractItemView
operator|::
name|AllEditTriggers
argument_list|)
expr_stmt|;
comment|// setAutoScroll
name|view
operator|->
name|setAutoScroll
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|hasAutoScroll
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|view
operator|->
name|setAutoScroll
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|hasAutoScroll
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// setTabKeyNavigation
name|view
operator|->
name|setTabKeyNavigation
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|tabKeyNavigation
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|view
operator|->
name|setTabKeyNavigation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|tabKeyNavigation
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
comment|// setDropIndicatorShown
name|view
operator|->
name|setDropIndicatorShown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|showDropIndicator
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|view
operator|->
name|setDropIndicatorShown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|showDropIndicator
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// setDragEnabled
name|view
operator|->
name|setDragEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|dragEnabled
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|view
operator|->
name|setDragEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|dragEnabled
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// setAlternatingRowColors
name|view
operator|->
name|setAlternatingRowColors
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|alternatingRowColors
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|view
operator|->
name|setAlternatingRowColors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|alternatingRowColors
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// setIconSize
name|view
operator|->
name|setIconSize
argument_list|(
name|QSize
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|iconSize
argument_list|()
argument_list|,
name|QSize
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|view
operator|->
name|setIconSize
argument_list|(
name|QSize
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|iconSize
argument_list|()
argument_list|,
name|QSize
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should this happen?
name|view
operator|->
name|setIconSize
argument_list|(
name|QSize
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|iconSize
argument_list|()
argument_list|,
name|QSize
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|currentIndex
argument_list|()
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|rootIndex
argument_list|()
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|view
operator|->
name|keyboardSearch
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|view
operator|->
name|keyboardSearch
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|view
operator|->
name|keyboardSearch
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|visualRect
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|QRect
argument_list|()
argument_list|)
expr_stmt|;
name|view
operator|->
name|scrollTo
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|sizeHintForIndex
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|QSize
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|indexAt
argument_list|(
name|QPoint
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|view
operator|->
name|model
argument_list|()
condition|)
block|{
name|QCOMPARE
argument_list|(
name|view
operator|->
name|indexAt
argument_list|(
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|sizeHintForRow
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|sizeHintForColumn
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|view
operator|->
name|itemDelegate
argument_list|()
condition|)
block|{
name|view
operator|->
name|sizeHintForRow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|view
operator|->
name|sizeHintForColumn
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|view
operator|->
name|openPersistentEditor
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|view
operator|->
name|closePersistentEditor
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|view
operator|->
name|reset
argument_list|()
expr_stmt|;
name|view
operator|->
name|setRootIndex
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|view
operator|->
name|doItemsLayout
argument_list|()
expr_stmt|;
name|view
operator|->
name|selectAll
argument_list|()
expr_stmt|;
comment|// edit() causes warning by default
comment|//view->edit(QModelIndex());
name|view
operator|->
name|clearSelection
argument_list|()
expr_stmt|;
name|view
operator|->
name|setCurrentIndex
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|spider_data
name|void
name|tst_QItemView
operator|::
name|spider_data
parameter_list|()
block|{
name|setupWithNoTestData
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|touch
name|void
name|touch
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|Qt
operator|::
name|KeyboardModifier
name|modifier
parameter_list|,
name|Qt
operator|::
name|Key
name|keyPress
parameter_list|)
block|{
name|int
name|width
init|=
name|widget
operator|->
name|width
argument_list|()
decl_stmt|;
name|int
name|height
init|=
name|widget
operator|->
name|height
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
name|QTest
operator|::
name|mouseClick
argument_list|(
name|widget
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|modifier
argument_list|,
name|QPoint
argument_list|(
name|random
argument_list|()
operator|%
name|width
argument_list|,
name|random
argument_list|()
operator|%
name|height
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseDClick
argument_list|(
name|widget
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|modifier
argument_list|,
name|QPoint
argument_list|(
name|random
argument_list|()
operator|%
name|width
argument_list|,
name|random
argument_list|()
operator|%
name|height
argument_list|)
argument_list|)
expr_stmt|;
name|QPoint
name|press
argument_list|(
name|random
argument_list|()
operator|%
name|width
argument_list|,
name|random
argument_list|()
operator|%
name|height
argument_list|)
decl_stmt|;
name|QPoint
name|releasePoint
argument_list|(
name|random
argument_list|()
operator|%
name|width
argument_list|,
name|random
argument_list|()
operator|%
name|height
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|mousePress
argument_list|(
name|widget
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|modifier
argument_list|,
name|press
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseMove
argument_list|(
name|widget
argument_list|,
name|releasePoint
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|%
literal|1
operator|==
literal|0
condition|)
name|QTest
operator|::
name|mouseRelease
argument_list|(
name|widget
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|releasePoint
argument_list|)
expr_stmt|;
else|else
name|QTest
operator|::
name|mouseRelease
argument_list|(
name|widget
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|modifier
argument_list|,
name|releasePoint
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|widget
argument_list|,
name|keyPress
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     This is a basic stress testing application that tries a few basics such as clicking around     the screen, and key presses.      The main goal is to catch any easy segfaults, not to test every case.   */
end_comment
begin_function
DECL|function|spider
name|void
name|tst_QItemView
operator|::
name|spider
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|viewType
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|vscroll
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|hscroll
argument_list|)
expr_stmt|;
name|view
operator|=
name|testViews
operator|->
name|createView
argument_list|(
name|viewType
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|view
operator|->
name|setVerticalScrollMode
argument_list|(
operator|(
name|QAbstractItemView
operator|::
name|ScrollMode
operator|)
name|vscroll
argument_list|)
expr_stmt|;
name|view
operator|->
name|setHorizontalScrollMode
argument_list|(
operator|(
name|QAbstractItemView
operator|::
name|ScrollMode
operator|)
name|hscroll
argument_list|)
expr_stmt|;
name|view
operator|->
name|setModel
argument_list|(
name|treeModel
argument_list|)
expr_stmt|;
name|view
operator|->
name|show
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|srandom
argument_list|(
literal|0
argument_list|)
expr_stmt|;
else|#
directive|else
name|srandom
argument_list|(
name|time
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|touch
argument_list|(
name|view
operator|->
name|viewport
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|,
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|touch
argument_list|(
name|view
operator|->
name|viewport
argument_list|()
argument_list|,
name|Qt
operator|::
name|ShiftModifier
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|touch
argument_list|(
name|view
operator|->
name|viewport
argument_list|()
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|,
name|Qt
operator|::
name|Key_Backspace
argument_list|)
expr_stmt|;
name|touch
argument_list|(
name|view
operator|->
name|viewport
argument_list|()
argument_list|,
name|Qt
operator|::
name|AltModifier
argument_list|,
name|Qt
operator|::
name|Key_Up
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resize_data
name|void
name|tst_QItemView
operator|::
name|resize_data
parameter_list|()
block|{
name|setupWithNoTestData
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     The main goal is to catch any infinite loops from layouting   */
end_comment
begin_function
DECL|function|resize
name|void
name|tst_QItemView
operator|::
name|resize
parameter_list|()
block|{
name|QSKIP
argument_list|(
literal|"This test needs to be re-thought out, it takes too long and doesn't really catch the problem."
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|viewType
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|vscroll
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|hscroll
argument_list|)
expr_stmt|;
name|view
operator|=
name|testViews
operator|->
name|createView
argument_list|(
name|viewType
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|view
operator|->
name|setVerticalScrollMode
argument_list|(
operator|(
name|QAbstractItemView
operator|::
name|ScrollMode
operator|)
name|vscroll
argument_list|)
expr_stmt|;
name|view
operator|->
name|setHorizontalScrollMode
argument_list|(
operator|(
name|QAbstractItemView
operator|::
name|ScrollMode
operator|)
name|hscroll
argument_list|)
expr_stmt|;
name|view
operator|->
name|setModel
argument_list|(
name|treeModel
argument_list|)
expr_stmt|;
name|view
operator|->
name|show
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|w
init|=
literal|100
init|;
name|w
operator|<
literal|400
condition|;
name|w
operator|+=
literal|10
control|)
block|{
for|for
control|(
name|int
name|h
init|=
literal|100
init|;
name|h
operator|<
literal|400
condition|;
name|h
operator|+=
literal|10
control|)
block|{
name|view
operator|->
name|resize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|visualRect_data
name|void
name|tst_QItemView
operator|::
name|visualRect_data
parameter_list|()
block|{
name|setupWithNoTestData
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|visualRect
name|void
name|tst_QItemView
operator|::
name|visualRect
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|viewType
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|vscroll
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|hscroll
argument_list|)
expr_stmt|;
name|view
operator|=
name|testViews
operator|->
name|createView
argument_list|(
name|viewType
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|view
operator|->
name|setVerticalScrollMode
argument_list|(
operator|(
name|QAbstractItemView
operator|::
name|ScrollMode
operator|)
name|vscroll
argument_list|)
expr_stmt|;
name|view
operator|->
name|setHorizontalScrollMode
argument_list|(
operator|(
name|QAbstractItemView
operator|::
name|ScrollMode
operator|)
name|hscroll
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|visualRect
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|QRect
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add model
name|view
operator|->
name|setModel
argument_list|(
name|treeModel
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|->
name|visualRect
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|QRect
argument_list|()
argument_list|)
expr_stmt|;
name|QModelIndex
name|topIndex
init|=
name|treeModel
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|displays
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|displays
condition|)
block|{
name|QVERIFY
argument_list|(
name|view
operator|->
name|visualRect
argument_list|(
name|topIndex
argument_list|)
operator|==
name|QRect
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|QVERIFY
argument_list|(
name|view
operator|->
name|visualRect
argument_list|(
name|topIndex
argument_list|)
operator|!=
name|QRect
argument_list|()
argument_list|)
expr_stmt|;
name|view
operator|->
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|view
operator|->
name|visualRect
argument_list|(
name|topIndex
argument_list|)
operator|!=
name|QRect
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|topIndex
operator|==
name|view
operator|->
name|indexAt
argument_list|(
name|view
operator|->
name|visualRect
argument_list|(
name|topIndex
argument_list|)
operator|.
name|center
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|topIndex
operator|==
name|view
operator|->
name|indexAt
argument_list|(
name|view
operator|->
name|visualRect
argument_list|(
name|topIndex
argument_list|)
operator|.
name|bottomLeft
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|topIndex
operator|==
name|view
operator|->
name|indexAt
argument_list|(
name|view
operator|->
name|visualRect
argument_list|(
name|topIndex
argument_list|)
operator|.
name|bottomRight
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|topIndex
operator|==
name|view
operator|->
name|indexAt
argument_list|(
name|view
operator|->
name|visualRect
argument_list|(
name|topIndex
argument_list|)
operator|.
name|topLeft
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|topIndex
operator|==
name|view
operator|->
name|indexAt
argument_list|(
name|view
operator|->
name|visualRect
argument_list|(
name|topIndex
argument_list|)
operator|.
name|topRight
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|testViews
operator|->
name|hideIndexes
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|QModelIndex
name|hiddenIndex
init|=
name|treeModel
operator|->
name|index
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|view
operator|->
name|visualRect
argument_list|(
name|hiddenIndex
argument_list|)
operator|==
name|QRect
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|walkScreen
name|void
name|tst_QItemView
operator|::
name|walkScreen
parameter_list|(
name|QAbstractItemView
modifier|*
name|view
parameter_list|)
block|{
name|QModelIndex
name|hiddenIndex
init|=
name|view
operator|->
name|model
argument_list|()
condition|?
name|view
operator|->
name|model
argument_list|()
operator|->
name|index
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
else|:
name|QModelIndex
argument_list|()
decl_stmt|;
name|int
name|width
init|=
name|view
operator|->
name|width
argument_list|()
decl_stmt|;
name|int
name|height
init|=
name|view
operator|->
name|height
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|w
init|=
literal|0
init|;
name|w
operator|<
name|width
condition|;
operator|++
name|w
control|)
block|{
for|for
control|(
name|int
name|h
init|=
literal|0
init|;
name|h
operator|<
name|height
condition|;
operator|++
name|h
control|)
block|{
name|QPoint
name|point
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
decl_stmt|;
name|QModelIndex
name|index
init|=
name|view
operator|->
name|indexAt
argument_list|(
name|point
argument_list|)
decl_stmt|;
comment|// If we have no model then we should *never* get a valid index
if|if
condition|(
operator|!
name|view
operator|->
name|model
argument_list|()
operator|||
operator|!
name|view
operator|->
name|isVisible
argument_list|()
condition|)
name|QVERIFY
argument_list|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// index should not be the hidden one
if|if
condition|(
name|hiddenIndex
operator|.
name|isValid
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|hiddenIndex
operator|!=
name|index
argument_list|)
expr_stmt|;
comment|// If we are valid then check the visualRect for that index
if|if
condition|(
name|index
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QRect
name|visualRect
init|=
name|view
operator|->
name|visualRect
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|visualRect
operator|.
name|contains
argument_list|(
name|point
argument_list|)
condition|)
name|qDebug
argument_list|()
operator|<<
name|point
operator|<<
name|visualRect
expr_stmt|;
name|QVERIFY
argument_list|(
name|visualRect
operator|.
name|contains
argument_list|(
name|point
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|walkIndex
name|void
name|walkIndex
parameter_list|(
name|QModelIndex
name|index
parameter_list|,
name|QAbstractItemView
modifier|*
name|view
parameter_list|)
block|{
name|QRect
name|visualRect
init|=
name|view
operator|->
name|visualRect
argument_list|(
name|index
argument_list|)
decl_stmt|;
comment|//if (index.column() == 0)
comment|//qDebug()<< index<< visualRect;
name|int
name|width
init|=
name|visualRect
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|height
init|=
name|visualRect
operator|.
name|height
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|w
init|=
literal|0
init|;
name|w
operator|<
name|width
condition|;
operator|++
name|w
control|)
block|{
for|for
control|(
name|int
name|h
init|=
literal|0
init|;
name|h
operator|<
name|height
condition|;
operator|++
name|h
control|)
block|{
name|QPoint
name|point
argument_list|(
name|visualRect
operator|.
name|x
argument_list|()
operator|+
name|w
argument_list|,
name|visualRect
operator|.
name|y
argument_list|()
operator|+
name|h
argument_list|)
decl_stmt|;
if|if
condition|(
name|view
operator|->
name|indexAt
argument_list|(
name|point
argument_list|)
operator|!=
name|index
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"index"
operator|<<
name|index
operator|<<
literal|"visualRect"
operator|<<
name|visualRect
operator|<<
name|point
operator|<<
name|view
operator|->
name|indexAt
argument_list|(
name|point
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|view
operator|->
name|indexAt
argument_list|(
name|point
argument_list|)
operator|==
name|index
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     A model that returns an index of parent X should also return X when asking     for the parent of the index.      This recursive function does pretty extensive testing on the whole model in an     effort to catch edge cases.      This function assumes that rowCount(), columnCount() and index() work.  If they have     a bug it will point it out, but the above tests should have already found the basic bugs     because it is easier to figure out the problem in those tests then this one.  */
end_comment
begin_function
DECL|function|checkChildren
name|void
name|checkChildren
parameter_list|(
name|QAbstractItemView
modifier|*
name|currentView
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
init|=
name|QModelIndex
argument_list|()
parameter_list|,
name|int
name|currentDepth
init|=
literal|0
parameter_list|)
block|{
name|QAbstractItemModel
modifier|*
name|currentModel
init|=
name|currentView
operator|->
name|model
argument_list|()
decl_stmt|;
name|int
name|rows
init|=
name|currentModel
operator|->
name|rowCount
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|int
name|columns
init|=
name|currentModel
operator|->
name|columnCount
argument_list|(
name|parent
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|rows
condition|;
operator|++
name|r
control|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|columns
condition|;
operator|++
name|c
control|)
block|{
name|QModelIndex
name|index
init|=
name|currentModel
operator|->
name|index
argument_list|(
name|r
argument_list|,
name|c
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|walkIndex
argument_list|(
name|index
argument_list|,
name|currentView
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTest
operator|::
name|currentTestFailed
argument_list|()
condition|)
return|return;
comment|// recursivly go down
if|if
condition|(
name|currentModel
operator|->
name|hasChildren
argument_list|(
name|index
argument_list|)
operator|&&
name|currentDepth
operator|<
literal|2
condition|)
block|{
name|checkChildren
argument_list|(
name|currentView
argument_list|,
name|index
argument_list|,
operator|++
name|currentDepth
argument_list|)
expr_stmt|;
comment|// Because this is recursive we will return at the first failure rather then
comment|// reporting it over and over
if|if
condition|(
name|QTest
operator|::
name|currentTestFailed
argument_list|()
condition|)
return|return;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|indexAt_data
name|void
name|tst_QItemView
operator|::
name|indexAt_data
parameter_list|()
block|{
name|setupWithNoTestData
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|indexAt
name|void
name|tst_QItemView
operator|::
name|indexAt
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|viewType
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|vscroll
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|hscroll
argument_list|)
expr_stmt|;
name|view
operator|=
name|testViews
operator|->
name|createView
argument_list|(
name|viewType
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|view
operator|->
name|setVerticalScrollMode
argument_list|(
operator|(
name|QAbstractItemView
operator|::
name|ScrollMode
operator|)
name|vscroll
argument_list|)
expr_stmt|;
name|view
operator|->
name|setHorizontalScrollMode
argument_list|(
operator|(
name|QAbstractItemView
operator|::
name|ScrollMode
operator|)
name|hscroll
argument_list|)
expr_stmt|;
name|view
operator|->
name|show
argument_list|()
expr_stmt|;
name|view
operator|->
name|setModel
argument_list|(
name|treeModel
argument_list|)
expr_stmt|;
if|#
directive|if
literal|0
block|checkChildren(view);      QModelIndex index = view->model()->index(0, 0);     while (view->model()->hasChildren(index))         index = view->model()->index(0, 0, index);     QCOMPARE(view->model()->hasChildren(index), false);     QVERIFY(index.isValid());     view->setRootIndex(index);
comment|//qDebug()<< view->indexAt(QPoint(view->width()/2, view->height()/2))<< view->rootIndex();
block|QPoint p(1, view->height()/2);     QModelIndex idx = view->indexAt(p);     QCOMPARE(idx, QModelIndex());
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|scrollTo_data
name|void
name|tst_QItemView
operator|::
name|scrollTo_data
parameter_list|()
block|{
name|setupWithNoTestData
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|scrollTo
name|void
name|tst_QItemView
operator|::
name|scrollTo
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|viewType
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|vscroll
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|hscroll
argument_list|)
expr_stmt|;
name|view
operator|=
name|testViews
operator|->
name|createView
argument_list|(
name|viewType
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|view
operator|->
name|setVerticalScrollMode
argument_list|(
operator|(
name|QAbstractItemView
operator|::
name|ScrollMode
operator|)
name|vscroll
argument_list|)
expr_stmt|;
name|view
operator|->
name|setHorizontalScrollMode
argument_list|(
operator|(
name|QAbstractItemView
operator|::
name|ScrollMode
operator|)
name|hscroll
argument_list|)
expr_stmt|;
name|view
operator|->
name|setModel
argument_list|(
name|treeModel
argument_list|)
expr_stmt|;
name|view
operator|->
name|show
argument_list|()
expr_stmt|;
name|QModelIndex
name|parent
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|treeModel
operator|->
name|rowCount
argument_list|(
name|parent
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|treeModel
operator|->
name|columnCount
argument_list|(
name|parent
argument_list|)
condition|;
operator|++
name|column
control|)
block|{
name|QModelIndex
name|idx
init|=
name|treeModel
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|view
operator|->
name|scrollTo
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|QRect
name|rect
init|=
name|view
operator|->
name|visualRect
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|view
operator|->
name|scrollTo
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rect
argument_list|,
name|view
operator|->
name|visualRect
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|QModelIndex
name|idx
init|=
name|treeModel
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|view
operator|->
name|scrollTo
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|QRect
name|rect
init|=
name|view
operator|->
name|visualRect
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|view
operator|->
name|scrollToBottom
argument_list|()
expr_stmt|;
name|view
operator|->
name|scrollTo
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rect
argument_list|,
name|view
operator|->
name|visualRect
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|moveCursor_data
name|void
name|tst_QItemView
operator|::
name|moveCursor_data
parameter_list|()
block|{
name|setupWithNoTestData
argument_list|()
expr_stmt|;
block|}
end_function
begin_class
DECL|class|Event
class|class
name|Event
block|{
public|public:
DECL|function|Event
name|Event
parameter_list|()
block|{}
DECL|function|Event
name|Event
parameter_list|(
name|Qt
operator|::
name|Key
name|k
parameter_list|,
name|QModelIndex
name|s
parameter_list|,
name|QModelIndex
name|e
parameter_list|,
name|QString
name|n
parameter_list|)
member_init_list|:
name|key
argument_list|(
name|k
argument_list|)
member_init_list|,
name|start
argument_list|(
name|s
argument_list|)
member_init_list|,
name|end
argument_list|(
name|e
argument_list|)
member_init_list|,
name|name
argument_list|(
name|n
argument_list|)
block|{}
DECL|member|key
name|Qt
operator|::
name|Key
name|key
decl_stmt|;
DECL|member|start
name|QModelIndex
name|start
decl_stmt|;
DECL|member|end
name|QModelIndex
name|end
decl_stmt|;
DECL|member|name
name|QString
name|name
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|moveCursor
name|void
name|tst_QItemView
operator|::
name|moveCursor
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|viewType
argument_list|)
expr_stmt|;
name|view
operator|=
name|testViews
operator|->
name|createView
argument_list|(
name|viewType
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|view
argument_list|)
expr_stmt|;
if|if
condition|(
name|view
operator|->
name|objectName
argument_list|()
operator|==
literal|"QHeaderView"
condition|)
return|return;
name|view
operator|->
name|setModel
argument_list|(
name|treeModel
argument_list|)
expr_stmt|;
name|testViews
operator|->
name|hideIndexes
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|view
operator|->
name|resize
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|QModelIndex
name|invalidIndex
init|=
name|QModelIndex
argument_list|()
decl_stmt|;
name|QModelIndex
name|firstRow
init|=
name|treeModel
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QModelIndex
name|hiddenRowT
init|=
name|treeModel
operator|->
name|index
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QModelIndex
name|disabledRowT
init|=
name|treeModel
operator|->
name|index
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QModelIndex
name|secondRow
init|=
name|treeModel
operator|->
name|index
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QModelIndex
name|secondToLastRow
init|=
name|treeModel
operator|->
name|index
argument_list|(
name|treeModel
operator|->
name|rowCount
argument_list|()
operator|-
literal|4
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QModelIndex
name|disabledRowB
init|=
name|treeModel
operator|->
name|index
argument_list|(
name|treeModel
operator|->
name|rowCount
argument_list|()
operator|-
literal|3
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QModelIndex
name|hiddenRowB
init|=
name|treeModel
operator|->
name|index
argument_list|(
name|treeModel
operator|->
name|rowCount
argument_list|()
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QModelIndex
name|lastRow
init|=
name|treeModel
operator|->
name|index
argument_list|(
name|treeModel
operator|->
name|rowCount
argument_list|()
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QStack
argument_list|<
name|Event
argument_list|>
name|events
decl_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Up
argument_list|,
name|invalidIndex
argument_list|,
name|firstRow
argument_list|,
literal|"inv, first"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Up
argument_list|,
name|hiddenRowT
argument_list|,
name|firstRow
argument_list|,
literal|"hid, first"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Up
argument_list|,
name|disabledRowT
argument_list|,
name|firstRow
argument_list|,
literal|"dis, first"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Up
argument_list|,
name|firstRow
argument_list|,
name|firstRow
argument_list|,
literal|"first, first"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Up
argument_list|,
name|secondRow
argument_list|,
name|firstRow
argument_list|,
literal|"sec, first"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Up
argument_list|,
name|hiddenRowB
argument_list|,
name|firstRow
argument_list|,
literal|"hidB, first"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Up
argument_list|,
name|disabledRowB
argument_list|,
name|secondToLastRow
argument_list|,
literal|"disB, secLast"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Up
argument_list|,
name|lastRow
argument_list|,
name|secondToLastRow
argument_list|,
literal|"last, secLast"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Down
argument_list|,
name|invalidIndex
argument_list|,
name|firstRow
argument_list|,
literal|"inv, first"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Down
argument_list|,
name|hiddenRowT
argument_list|,
name|firstRow
argument_list|,
literal|"hid, first"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Down
argument_list|,
name|disabledRowT
argument_list|,
name|secondRow
argument_list|,
literal|"dis, sec"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Down
argument_list|,
name|firstRow
argument_list|,
name|secondRow
argument_list|,
literal|"first, sec"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Down
argument_list|,
name|secondToLastRow
argument_list|,
name|lastRow
argument_list|,
literal|"secLast, last"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Down
argument_list|,
name|disabledRowB
argument_list|,
name|lastRow
argument_list|,
literal|"disB, last"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Down
argument_list|,
name|hiddenRowB
argument_list|,
name|firstRow
argument_list|,
literal|"hidB, first"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Down
argument_list|,
name|lastRow
argument_list|,
name|lastRow
argument_list|,
literal|"last, last"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Home
argument_list|,
name|invalidIndex
argument_list|,
name|firstRow
argument_list|,
literal|"inv, first"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_End
argument_list|,
name|invalidIndex
argument_list|,
name|firstRow
argument_list|,
literal|"inv, first"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|view
operator|->
name|objectName
argument_list|()
operator|==
literal|"QTableView"
condition|)
block|{
comment|// In a table we move to the first/last column
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Home
argument_list|,
name|hiddenRowT
argument_list|,
name|firstRow
argument_list|,
literal|"hid, first"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Home
argument_list|,
name|disabledRowT
argument_list|,
name|disabledRowT
argument_list|,
literal|"dis, dis"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Home
argument_list|,
name|firstRow
argument_list|,
name|firstRow
argument_list|,
literal|"first, first"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Home
argument_list|,
name|secondRow
argument_list|,
name|secondRow
argument_list|,
literal|"sec, sec"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Home
argument_list|,
name|disabledRowB
argument_list|,
name|disabledRowB
argument_list|,
literal|"disB, disB"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Home
argument_list|,
name|hiddenRowB
argument_list|,
name|firstRow
argument_list|,
literal|"hidB, first"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Home
argument_list|,
name|secondToLastRow
argument_list|,
name|secondToLastRow
argument_list|,
literal|"secLast, secLast"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Home
argument_list|,
name|lastRow
argument_list|,
name|lastRow
argument_list|,
literal|"last, last"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|col
init|=
name|treeModel
operator|->
name|columnCount
argument_list|()
operator|-
literal|1
decl_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_End
argument_list|,
name|hiddenRowT
argument_list|,
name|firstRow
argument_list|,
literal|"hidT, hidT"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_End
argument_list|,
name|disabledRowT
argument_list|,
name|disabledRowT
argument_list|,
literal|"disT, disT"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_End
argument_list|,
name|firstRow
argument_list|,
name|firstRow
operator|.
name|sibling
argument_list|(
name|firstRow
operator|.
name|row
argument_list|()
argument_list|,
name|col
argument_list|)
argument_list|,
literal|"first, first_C"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_End
argument_list|,
name|secondRow
argument_list|,
name|secondRow
operator|.
name|sibling
argument_list|(
name|secondRow
operator|.
name|row
argument_list|()
argument_list|,
name|col
argument_list|)
argument_list|,
literal|"sec, sec_C"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_End
argument_list|,
name|disabledRowB
argument_list|,
name|disabledRowB
argument_list|,
literal|"disB, disB"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_End
argument_list|,
name|hiddenRowB
argument_list|,
name|firstRow
argument_list|,
literal|"hidB, hidB"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_End
argument_list|,
name|secondToLastRow
argument_list|,
name|secondToLastRow
operator|.
name|sibling
argument_list|(
name|secondToLastRow
operator|.
name|row
argument_list|()
argument_list|,
name|col
argument_list|)
argument_list|,
literal|"secLast, secLast_C"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_End
argument_list|,
name|lastRow
argument_list|,
name|lastRow
operator|.
name|sibling
argument_list|(
name|lastRow
operator|.
name|row
argument_list|()
argument_list|,
name|col
argument_list|)
argument_list|,
literal|"last, last_C"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Home
argument_list|,
name|hiddenRowT
argument_list|,
name|firstRow
argument_list|,
literal|"hid, first"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Home
argument_list|,
name|disabledRowT
argument_list|,
name|firstRow
argument_list|,
literal|"dis, first"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Home
argument_list|,
name|firstRow
argument_list|,
name|firstRow
argument_list|,
literal|"first, first"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Home
argument_list|,
name|secondRow
argument_list|,
name|firstRow
argument_list|,
literal|"sec, first"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Home
argument_list|,
name|disabledRowB
argument_list|,
name|firstRow
argument_list|,
literal|"disB, first"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Home
argument_list|,
name|hiddenRowB
argument_list|,
name|firstRow
argument_list|,
literal|"hidB, first"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Home
argument_list|,
name|secondToLastRow
argument_list|,
name|firstRow
argument_list|,
literal|"sec, first"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Home
argument_list|,
name|lastRow
argument_list|,
name|firstRow
argument_list|,
literal|"last, first"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_End
argument_list|,
name|hiddenRowT
argument_list|,
name|firstRow
argument_list|,
literal|"hid, last"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_End
argument_list|,
name|disabledRowT
argument_list|,
name|lastRow
argument_list|,
literal|"dis, last"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_End
argument_list|,
name|firstRow
argument_list|,
name|lastRow
argument_list|,
literal|"first, last"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_End
argument_list|,
name|secondRow
argument_list|,
name|lastRow
argument_list|,
literal|"sec, last"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_End
argument_list|,
name|disabledRowB
argument_list|,
name|lastRow
argument_list|,
literal|"disB, last"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_End
argument_list|,
name|hiddenRowB
argument_list|,
name|firstRow
argument_list|,
literal|"hidB, last"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_End
argument_list|,
name|secondToLastRow
argument_list|,
name|lastRow
argument_list|,
literal|"sec, last"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_End
argument_list|,
name|lastRow
argument_list|,
name|lastRow
argument_list|,
literal|"last, last"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_PageDown
argument_list|,
name|invalidIndex
argument_list|,
name|firstRow
argument_list|,
literal|"inv, first"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_PageDown
argument_list|,
name|firstRow
argument_list|,
name|QModelIndex
argument_list|()
argument_list|,
literal|"first, x"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_PageDown
argument_list|,
name|secondRow
argument_list|,
name|QModelIndex
argument_list|()
argument_list|,
literal|"sec, x"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_PageDown
argument_list|,
name|hiddenRowT
argument_list|,
name|QModelIndex
argument_list|()
argument_list|,
literal|"hid, x"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_PageDown
argument_list|,
name|disabledRowT
argument_list|,
name|QModelIndex
argument_list|()
argument_list|,
literal|"dis, x"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_PageDown
argument_list|,
name|disabledRowB
argument_list|,
name|lastRow
argument_list|,
literal|"disB, last"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_PageDown
argument_list|,
name|hiddenRowB
argument_list|,
name|lastRow
argument_list|,
literal|"hidB, last"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_PageDown
argument_list|,
name|secondToLastRow
argument_list|,
name|lastRow
argument_list|,
literal|"secLast, last"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_PageDown
argument_list|,
name|lastRow
argument_list|,
name|lastRow
argument_list|,
literal|"last, last"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_PageUp
argument_list|,
name|invalidIndex
argument_list|,
name|firstRow
argument_list|,
literal|"inv, first"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_PageUp
argument_list|,
name|firstRow
argument_list|,
name|firstRow
argument_list|,
literal|"first, first"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_PageUp
argument_list|,
name|secondRow
argument_list|,
name|firstRow
argument_list|,
literal|"sec, first"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_PageUp
argument_list|,
name|secondToLastRow
argument_list|,
name|QModelIndex
argument_list|()
argument_list|,
literal|"secLast, x"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_PageUp
argument_list|,
name|lastRow
argument_list|,
name|QModelIndex
argument_list|()
argument_list|,
literal|"last, x"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|view
operator|->
name|objectName
argument_list|()
operator|==
literal|"QTableView"
condition|)
block|{
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|firstRow
argument_list|,
name|firstRow
argument_list|,
literal|"first_0, first"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|firstRow
operator|.
name|sibling
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|firstRow
argument_list|,
literal|"first_1, first"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|firstRow
operator|.
name|sibling
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
name|firstRow
argument_list|,
literal|"first_2, first"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|firstRow
operator|.
name|sibling
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|,
name|firstRow
argument_list|,
literal|"first_3, first"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Left
argument_list|,
name|secondRow
argument_list|,
name|secondRow
argument_list|,
literal|"sec, sec"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Right
argument_list|,
name|firstRow
argument_list|,
name|firstRow
operator|.
name|sibling
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|"first, first_3"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Right
argument_list|,
name|firstRow
operator|.
name|sibling
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|firstRow
argument_list|,
literal|"first_1, first"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Right
argument_list|,
name|firstRow
operator|.
name|sibling
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
name|firstRow
operator|.
name|sibling
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|"first_2, first_3"
argument_list|)
argument_list|)
expr_stmt|;
name|events
operator|.
name|push
argument_list|(
name|Event
argument_list|(
name|Qt
operator|::
name|Key_Right
argument_list|,
name|firstRow
operator|.
name|sibling
argument_list|(
literal|0
argument_list|,
name|treeModel
operator|->
name|columnCount
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
name|firstRow
operator|.
name|sibling
argument_list|(
literal|0
argument_list|,
name|treeModel
operator|->
name|columnCount
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
literal|"first_3, sec"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QItemView
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qitemview.moc"
end_include
end_unit
