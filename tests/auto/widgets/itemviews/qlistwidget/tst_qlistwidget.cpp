begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtGui/QtGui>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QtWidgets>
end_include
begin_include
include|#
directive|include
file|<qlist.h>
end_include
begin_include
include|#
directive|include
file|<qlistwidget.h>
end_include
begin_include
include|#
directive|include
file|<private/qlistwidget_p.h>
end_include
begin_class
DECL|class|tst_QListWidget
class|class
name|tst_QListWidget
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QListWidget
parameter_list|()
constructor_decl|;
name|~
name|tst_QListWidget
parameter_list|()
destructor_decl|;
DECL|enum|ModelChanged
enum|enum
name|ModelChanged
block|{
DECL|enumerator|RowsAboutToBeInserted
name|RowsAboutToBeInserted
block|,
DECL|enumerator|RowsInserted
name|RowsInserted
block|,
DECL|enumerator|RowsAboutToBeRemoved
name|RowsAboutToBeRemoved
block|,
DECL|enumerator|RowsRemoved
name|RowsRemoved
block|,
DECL|enumerator|ColumnsAboutToBeInserted
name|ColumnsAboutToBeInserted
block|,
DECL|enumerator|ColumnsInserted
name|ColumnsInserted
block|,
DECL|enumerator|ColumnsAboutToBeRemoved
name|ColumnsAboutToBeRemoved
block|,
DECL|enumerator|ColumnsRemoved
name|ColumnsRemoved
block|}
enum|;
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|addItem
parameter_list|()
function_decl|;
name|void
name|addItem2
parameter_list|()
function_decl|;
name|void
name|addItems
parameter_list|()
function_decl|;
name|void
name|openPersistentEditor
parameter_list|()
function_decl|;
name|void
name|closePersistentEditor
parameter_list|()
function_decl|;
name|void
name|count
parameter_list|()
function_decl|;
name|void
name|currentItem
parameter_list|()
function_decl|;
name|void
name|setCurrentItem_data
parameter_list|()
function_decl|;
name|void
name|setCurrentItem
parameter_list|()
function_decl|;
name|void
name|currentRow
parameter_list|()
function_decl|;
name|void
name|setCurrentRow_data
parameter_list|()
function_decl|;
name|void
name|setCurrentRow
parameter_list|()
function_decl|;
name|void
name|editItem_data
parameter_list|()
function_decl|;
name|void
name|editItem
parameter_list|()
function_decl|;
name|void
name|findItems
parameter_list|()
function_decl|;
name|void
name|insertItem_data
parameter_list|()
function_decl|;
name|void
name|insertItem
parameter_list|()
function_decl|;
name|void
name|insertItems_data
parameter_list|()
function_decl|;
name|void
name|insertItems
parameter_list|()
function_decl|;
name|void
name|moveItemsPriv_data
parameter_list|()
function_decl|;
name|void
name|moveItemsPriv
parameter_list|()
function_decl|;
name|void
name|itemAssignment
parameter_list|()
function_decl|;
name|void
name|item_data
parameter_list|()
function_decl|;
name|void
name|item
parameter_list|()
function_decl|;
name|void
name|takeItem_data
parameter_list|()
function_decl|;
name|void
name|takeItem
parameter_list|()
function_decl|;
name|void
name|setItemHidden
parameter_list|()
function_decl|;
name|void
name|selectedItems_data
parameter_list|()
function_decl|;
name|void
name|selectedItems
parameter_list|()
function_decl|;
name|void
name|removeItems_data
parameter_list|()
function_decl|;
name|void
name|removeItems
parameter_list|()
function_decl|;
name|void
name|itemStreaming_data
parameter_list|()
function_decl|;
name|void
name|itemStreaming
parameter_list|()
function_decl|;
name|void
name|sortItems_data
parameter_list|()
function_decl|;
name|void
name|sortItems
parameter_list|()
function_decl|;
name|void
name|sortHiddenItems
parameter_list|()
function_decl|;
name|void
name|sortHiddenItems_data
parameter_list|()
function_decl|;
name|void
name|closeEditor
parameter_list|()
function_decl|;
name|void
name|setData_data
parameter_list|()
function_decl|;
name|void
name|setData
parameter_list|()
function_decl|;
name|void
name|insertItemsWithSorting_data
parameter_list|()
function_decl|;
name|void
name|insertItemsWithSorting
parameter_list|()
function_decl|;
name|void
name|changeDataWithSorting_data
parameter_list|()
function_decl|;
name|void
name|changeDataWithSorting
parameter_list|()
function_decl|;
name|void
name|itemData
parameter_list|()
function_decl|;
name|void
name|itemWidget
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|Q_OS_MAC
name|void
name|fastScroll
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|insertUnchanged
parameter_list|()
function_decl|;
name|void
name|setSortingEnabled
parameter_list|()
function_decl|;
name|void
name|task199503_crashWhenCleared
parameter_list|()
function_decl|;
name|void
name|task217070_scrollbarsAdjusted
parameter_list|()
function_decl|;
name|void
name|task258949_keypressHangup
parameter_list|()
function_decl|;
name|void
name|QTBUG8086_currentItemChangedOnClick
parameter_list|()
function_decl|;
name|void
name|QTBUG14363_completerWithAnyKeyPressedEditTriggers
parameter_list|()
function_decl|;
protected|protected
name|slots
protected|:
DECL|function|rowsAboutToBeInserted
name|void
name|rowsAboutToBeInserted
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|first
parameter_list|,
name|int
name|last
parameter_list|)
block|{
name|modelChanged
argument_list|(
name|RowsAboutToBeInserted
argument_list|,
name|parent
argument_list|,
name|first
argument_list|,
name|last
argument_list|)
expr_stmt|;
block|}
DECL|function|rowsInserted
name|void
name|rowsInserted
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|first
parameter_list|,
name|int
name|last
parameter_list|)
block|{
name|modelChanged
argument_list|(
name|RowsInserted
argument_list|,
name|parent
argument_list|,
name|first
argument_list|,
name|last
argument_list|)
expr_stmt|;
block|}
DECL|function|rowsAboutToBeRemoved
name|void
name|rowsAboutToBeRemoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|first
parameter_list|,
name|int
name|last
parameter_list|)
block|{
name|modelChanged
argument_list|(
name|RowsAboutToBeRemoved
argument_list|,
name|parent
argument_list|,
name|first
argument_list|,
name|last
argument_list|)
expr_stmt|;
block|}
DECL|function|rowsRemoved
name|void
name|rowsRemoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|first
parameter_list|,
name|int
name|last
parameter_list|)
block|{
name|modelChanged
argument_list|(
name|RowsRemoved
argument_list|,
name|parent
argument_list|,
name|first
argument_list|,
name|last
argument_list|)
expr_stmt|;
block|}
DECL|function|columnsAboutToBeInserted
name|void
name|columnsAboutToBeInserted
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|first
parameter_list|,
name|int
name|last
parameter_list|)
block|{
name|modelChanged
argument_list|(
name|ColumnsAboutToBeInserted
argument_list|,
name|parent
argument_list|,
name|first
argument_list|,
name|last
argument_list|)
expr_stmt|;
block|}
DECL|function|columnsInserted
name|void
name|columnsInserted
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|first
parameter_list|,
name|int
name|last
parameter_list|)
block|{
name|modelChanged
argument_list|(
name|ColumnsInserted
argument_list|,
name|parent
argument_list|,
name|first
argument_list|,
name|last
argument_list|)
expr_stmt|;
block|}
DECL|function|columnsAboutToBeRemoved
name|void
name|columnsAboutToBeRemoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|first
parameter_list|,
name|int
name|last
parameter_list|)
block|{
name|modelChanged
argument_list|(
name|ColumnsAboutToBeRemoved
argument_list|,
name|parent
argument_list|,
name|first
argument_list|,
name|last
argument_list|)
expr_stmt|;
block|}
DECL|function|columnsRemoved
name|void
name|columnsRemoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|first
parameter_list|,
name|int
name|last
parameter_list|)
block|{
name|modelChanged
argument_list|(
name|ColumnsRemoved
argument_list|,
name|parent
argument_list|,
name|first
argument_list|,
name|last
argument_list|)
expr_stmt|;
block|}
name|void
name|modelChanged
parameter_list|(
name|ModelChanged
name|change
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|first
parameter_list|,
name|int
name|last
parameter_list|)
function_decl|;
private|private:
DECL|member|testWidget
name|QListWidget
modifier|*
name|testWidget
decl_stmt|;
DECL|member|rcParent
name|QVector
argument_list|<
name|QModelIndex
argument_list|>
name|rcParent
decl_stmt|;
DECL|member|rcFirst
name|QVector
argument_list|<
name|int
argument_list|>
name|rcFirst
decl_stmt|;
DECL|member|rcLast
name|QVector
argument_list|<
name|int
argument_list|>
name|rcLast
decl_stmt|;
name|void
name|populate
parameter_list|()
function_decl|;
name|void
name|checkDefaultValues
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_typedef
DECL|typedef|IntList
typedef|typedef
name|QList
argument_list|<
name|int
argument_list|>
name|IntList
typedef|;
end_typedef
begin_constructor
DECL|function|tst_QListWidget
name|tst_QListWidget
operator|::
name|tst_QListWidget
parameter_list|()
member_init_list|:
name|testWidget
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|rcParent
argument_list|(
literal|8
argument_list|)
member_init_list|,
name|rcFirst
argument_list|(
literal|8
argument_list|,
literal|0
argument_list|)
member_init_list|,
name|rcLast
argument_list|(
literal|8
argument_list|,
literal|0
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~tst_QListWidget
name|tst_QListWidget
operator|::
name|~
name|tst_QListWidget
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|initTestCase
name|void
name|tst_QListWidget
operator|::
name|initTestCase
parameter_list|()
block|{
name|testWidget
operator|=
operator|new
name|QListWidget
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|show
argument_list|()
expr_stmt|;
name|connect
argument_list|(
name|testWidget
operator|->
name|model
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|rowsAboutToBeInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|testWidget
operator|->
name|model
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|rowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|rowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|testWidget
operator|->
name|model
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|rowsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|testWidget
operator|->
name|model
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|rowsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|rowsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|testWidget
operator|->
name|model
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|columnsAboutToBeInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|columnsAboutToBeInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|testWidget
operator|->
name|model
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|columnsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|columnsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|testWidget
operator|->
name|model
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|columnsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|columnsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|testWidget
operator|->
name|model
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|columnsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|columnsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|checkDefaultValues
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QListWidget
operator|::
name|cleanupTestCase
parameter_list|()
block|{
operator|delete
name|testWidget
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_QListWidget
operator|::
name|init
parameter_list|()
block|{
name|testWidget
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QCoreApplication
operator|::
name|sendPostedEvents
argument_list|(
literal|0
argument_list|,
name|QEvent
operator|::
name|DeferredDelete
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|checkDefaultValues
name|void
name|tst_QListWidget
operator|::
name|checkDefaultValues
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentItem
argument_list|()
argument_list|,
operator|(
name|QListWidgetItem
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentRow
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QListWidget
operator|::
name|cleanup
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|populate
name|void
name|tst_QListWidget
operator|::
name|populate
parameter_list|()
block|{
name|addItem
argument_list|()
expr_stmt|;
name|addItem2
argument_list|()
expr_stmt|;
name|addItems
argument_list|()
expr_stmt|;
name|setItemHidden
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|setCurrentIndex
argument_list|(
name|testWidget
operator|->
name|model
argument_list|()
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// setCurrentItem();
comment|// setCurrentRow();
block|}
end_function
begin_function
DECL|function|addItem
name|void
name|tst_QListWidget
operator|::
name|addItem
parameter_list|()
block|{
name|int
name|count
init|=
name|testWidget
operator|->
name|count
argument_list|()
decl_stmt|;
name|QString
name|label
init|=
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|count
argument_list|)
decl_stmt|;
name|testWidget
operator|->
name|addItem
argument_list|(
name|label
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|,
operator|++
name|count
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|item
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
operator|-
literal|1
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|label
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addItem2
name|void
name|tst_QListWidget
operator|::
name|addItem2
parameter_list|()
block|{
name|int
name|count
init|=
name|testWidget
operator|->
name|count
argument_list|()
decl_stmt|;
comment|// Boundary Checking
name|testWidget
operator|->
name|addItem
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|QListWidgetItem
modifier|*
name|item
init|=
operator|new
name|QListWidgetItem
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|count
argument_list|)
argument_list|)
decl_stmt|;
name|item
operator|->
name|setFlags
argument_list|(
name|item
operator|->
name|flags
argument_list|()
operator||
name|Qt
operator|::
name|ItemIsEditable
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|addItem
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|,
operator|++
name|count
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|item
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|isItemHidden
argument_list|(
name|item
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addItems
name|void
name|tst_QListWidget
operator|::
name|addItems
parameter_list|()
block|{
name|int
name|count
init|=
name|testWidget
operator|->
name|count
argument_list|()
decl_stmt|;
comment|// Boundary Checking
name|testWidget
operator|->
name|addItems
argument_list|(
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|QStringList
name|stringList
decl_stmt|;
name|QString
name|label
init|=
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|count
argument_list|)
decl_stmt|;
name|stringList
operator|<<
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
operator|+
literal|1
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
operator|+
literal|2
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
operator|+
literal|3
argument_list|)
operator|<<
name|label
expr_stmt|;
name|testWidget
operator|->
name|addItems
argument_list|(
name|stringList
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|,
name|count
operator|+
name|stringList
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|item
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
operator|-
literal|1
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|label
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|openPersistentEditor
name|void
name|tst_QListWidget
operator|::
name|openPersistentEditor
parameter_list|()
block|{
comment|// Boundary checking
name|testWidget
operator|->
name|openPersistentEditor
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QListWidgetItem
modifier|*
name|item
init|=
operator|new
name|QListWidgetItem
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|testWidget
operator|->
name|openPersistentEditor
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|int
name|childCount
init|=
name|testWidget
operator|->
name|viewport
argument_list|()
operator|->
name|children
argument_list|()
operator|.
name|count
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|addItem
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|openPersistentEditor
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|childCount
operator|+
literal|1
argument_list|,
name|testWidget
operator|->
name|viewport
argument_list|()
operator|->
name|children
argument_list|()
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|closePersistentEditor
name|void
name|tst_QListWidget
operator|::
name|closePersistentEditor
parameter_list|()
block|{
comment|// Boundary checking
name|int
name|childCount
init|=
name|testWidget
operator|->
name|viewport
argument_list|()
operator|->
name|children
argument_list|()
operator|.
name|count
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|closePersistentEditor
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QListWidgetItem
modifier|*
name|item
init|=
operator|new
name|QListWidgetItem
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|testWidget
operator|->
name|closePersistentEditor
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|childCount
argument_list|,
name|testWidget
operator|->
name|viewport
argument_list|()
operator|->
name|children
argument_list|()
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create something
name|testWidget
operator|->
name|addItem
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|openPersistentEditor
argument_list|(
name|item
argument_list|)
expr_stmt|;
comment|// actual test
name|childCount
operator|=
name|testWidget
operator|->
name|viewport
argument_list|()
operator|->
name|children
argument_list|()
operator|.
name|count
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|closePersistentEditor
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|sendPostedEvents
argument_list|(
literal|0
argument_list|,
name|QEvent
operator|::
name|DeferredDelete
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|viewport
argument_list|()
operator|->
name|children
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
name|childCount
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setItemHidden
name|void
name|tst_QListWidget
operator|::
name|setItemHidden
parameter_list|()
block|{
comment|// Boundary checking
name|testWidget
operator|->
name|setItemHidden
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setItemHidden
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|int
name|totalHidden
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testWidget
operator|->
name|model
argument_list|()
operator|->
name|rowCount
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|testWidget
operator|->
name|isItemHidden
argument_list|(
name|testWidget
operator|->
name|item
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
name|totalHidden
operator|++
expr_stmt|;
name|QListWidgetItem
modifier|*
name|item
init|=
operator|new
name|QListWidgetItem
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|testWidget
operator|->
name|addItem
argument_list|(
name|item
argument_list|)
expr_stmt|;
comment|// Check that nothing else changed
name|int
name|newTotal
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testWidget
operator|->
name|model
argument_list|()
operator|->
name|rowCount
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|testWidget
operator|->
name|isItemHidden
argument_list|(
name|testWidget
operator|->
name|item
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
name|newTotal
operator|++
expr_stmt|;
name|QCOMPARE
argument_list|(
name|newTotal
argument_list|,
name|totalHidden
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setItemHidden
argument_list|(
name|item
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|isItemHidden
argument_list|(
name|item
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Check that nothing else changed
name|newTotal
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testWidget
operator|->
name|model
argument_list|()
operator|->
name|rowCount
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|testWidget
operator|->
name|isItemHidden
argument_list|(
name|testWidget
operator|->
name|item
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
name|newTotal
operator|++
expr_stmt|;
name|QCOMPARE
argument_list|(
name|newTotal
argument_list|,
name|totalHidden
operator|+
literal|1
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setItemHidden
argument_list|(
name|item
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|isItemHidden
argument_list|(
name|item
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Check that nothing else changed
name|newTotal
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testWidget
operator|->
name|model
argument_list|()
operator|->
name|rowCount
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|testWidget
operator|->
name|isItemHidden
argument_list|(
name|testWidget
operator|->
name|item
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
name|newTotal
operator|++
expr_stmt|;
name|QCOMPARE
argument_list|(
name|newTotal
argument_list|,
name|totalHidden
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setItemHidden
argument_list|(
name|item
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setCurrentItem_data
name|void
name|tst_QListWidget
operator|::
name|setCurrentItem_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"fill"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"HasItems: 0"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"HasItems: 1"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"HasItems: 2"
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"HasItems: 3"
argument_list|)
operator|<<
literal|3
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setCurrentItem
name|void
name|tst_QListWidget
operator|::
name|setCurrentItem
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|fill
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fill
condition|;
operator|++
name|i
control|)
name|testWidget
operator|->
name|addItem
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
comment|// Boundary checking
name|testWidget
operator|->
name|setCurrentItem
argument_list|(
operator|(
name|QListWidgetItem
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|QListWidgetItem
operator|*
operator|)
literal|0
argument_list|,
name|testWidget
operator|->
name|currentItem
argument_list|()
argument_list|)
expr_stmt|;
name|QListWidgetItem
name|item
decl_stmt|;
name|testWidget
operator|->
name|setCurrentItem
argument_list|(
operator|&
name|item
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|QListWidgetItem
operator|*
operator|)
literal|0
argument_list|,
name|testWidget
operator|->
name|currentItem
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure that currentItem changes to what is passed into setCurrentItem
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testWidget
operator|->
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|testWidget
operator|->
name|setCurrentItem
argument_list|(
name|testWidget
operator|->
name|item
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|testWidget
operator|->
name|count
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|testWidget
operator|->
name|setCurrentItem
argument_list|(
name|testWidget
operator|->
name|item
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|item
argument_list|(
name|j
argument_list|)
argument_list|,
name|testWidget
operator|->
name|currentItem
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|setCurrentRow_data
name|void
name|tst_QListWidget
operator|::
name|setCurrentRow_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"fill"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"HasItems: 0"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"HasItems: 1"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"HasItems: 2"
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"HasItems: 3"
argument_list|)
operator|<<
literal|3
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setCurrentRow
name|void
name|tst_QListWidget
operator|::
name|setCurrentRow
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|fill
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fill
condition|;
operator|++
name|i
control|)
name|testWidget
operator|->
name|addItem
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
comment|// Boundary checking
name|testWidget
operator|->
name|setCurrentRow
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|-
literal|1
argument_list|,
name|testWidget
operator|->
name|currentRow
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setCurrentRow
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|-
literal|1
argument_list|,
name|testWidget
operator|->
name|currentRow
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure that currentRow changes to what is passed into setCurrentRow
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testWidget
operator|->
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|testWidget
operator|->
name|setCurrentRow
argument_list|(
name|i
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|testWidget
operator|->
name|count
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|testWidget
operator|->
name|setCurrentRow
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|j
argument_list|,
name|testWidget
operator|->
name|currentRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|count
name|void
name|tst_QListWidget
operator|::
name|count
parameter_list|()
block|{
name|populate
argument_list|()
expr_stmt|;
comment|// actual test
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|model
argument_list|()
operator|->
name|rowCount
argument_list|()
argument_list|,
name|testWidget
operator|->
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|currentItem
name|void
name|tst_QListWidget
operator|::
name|currentItem
parameter_list|()
block|{
name|populate
argument_list|()
expr_stmt|;
comment|// actual test
name|QModelIndex
name|currentIndex
init|=
name|testWidget
operator|->
name|selectionModel
argument_list|()
operator|->
name|currentIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentIndex
operator|.
name|isValid
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|currentItem
argument_list|()
operator|==
name|testWidget
operator|->
name|item
argument_list|(
name|currentIndex
operator|.
name|row
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|currentItem
argument_list|()
operator|==
operator|(
name|QListWidgetItem
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|currentRow
name|void
name|tst_QListWidget
operator|::
name|currentRow
parameter_list|()
block|{
name|populate
argument_list|()
expr_stmt|;
comment|// actual test
name|QModelIndex
name|currentIndex
init|=
name|testWidget
operator|->
name|selectionModel
argument_list|()
operator|->
name|currentIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentIndex
operator|.
name|isValid
argument_list|()
condition|)
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentRow
argument_list|()
argument_list|,
name|currentIndex
operator|.
name|row
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentRow
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|editItem_data
name|void
name|tst_QListWidget
operator|::
name|editItem_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"editable"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"editable"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"not editable"
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|editItem
name|void
name|tst_QListWidget
operator|::
name|editItem
parameter_list|()
block|{
comment|// Boundary checking
name|testWidget
operator|->
name|editItem
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QListWidgetItem
modifier|*
name|item
init|=
operator|new
name|QListWidgetItem
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|testWidget
operator|->
name|editItem
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|editable
argument_list|)
expr_stmt|;
if|if
condition|(
name|editable
condition|)
name|item
operator|->
name|setFlags
argument_list|(
name|item
operator|->
name|flags
argument_list|()
operator||
name|Qt
operator|::
name|ItemIsEditable
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|addItem
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|int
name|childCount
init|=
name|testWidget
operator|->
name|viewport
argument_list|()
operator|->
name|children
argument_list|()
operator|.
name|count
argument_list|()
decl_stmt|;
name|QWidget
modifier|*
name|existsAlready
init|=
name|testWidget
operator|->
name|indexWidget
argument_list|(
name|testWidget
operator|->
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|testWidget
operator|->
name|row
argument_list|(
name|item
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|testWidget
operator|->
name|editItem
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|ItemFlags
name|flags
init|=
name|item
operator|->
name|flags
argument_list|()
decl_stmt|;
comment|// There doesn't seem to be a way to detect if the item has already been edited...
if|if
condition|(
operator|!
name|existsAlready
operator|&&
name|flags
operator|&
name|Qt
operator|::
name|ItemIsEditable
operator|&&
name|flags
operator|&
name|Qt
operator|::
name|ItemIsEnabled
condition|)
block|{
name|QList
argument_list|<
name|QObject
modifier|*
argument_list|>
name|children
init|=
name|testWidget
operator|->
name|viewport
argument_list|()
operator|->
name|children
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|children
operator|.
name|count
argument_list|()
operator|>
name|childCount
argument_list|)
expr_stmt|;
name|bool
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|inherits
argument_list|(
literal|"QExpandingLineEdit"
argument_list|)
condition|)
name|found
operator|=
literal|true
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|found
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|viewport
argument_list|()
operator|->
name|children
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
name|childCount
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|findItems
name|void
name|tst_QListWidget
operator|::
name|findItems
parameter_list|()
block|{
comment|// This really just tests that the items that are returned are converted from index's to items correctly.
comment|// Boundary checking
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|findItems
argument_list|(
literal|"GirlsCanWearJeansAndCutTheirHairShort"
argument_list|,
name|Qt
operator|::
name|MatchExactly
argument_list|)
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|populate
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testWidget
operator|->
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|findItems
argument_list|(
operator|(
name|testWidget
operator|->
name|item
argument_list|(
name|i
argument_list|)
operator|->
name|text
argument_list|()
operator|)
argument_list|,
name|Qt
operator|::
name|MatchExactly
argument_list|)
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertItem_data
name|void
name|tst_QListWidget
operator|::
name|insertItem_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"initialItems"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"insertIndex"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"itemLabel"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedIndex"
argument_list|)
expr_stmt|;
name|QStringList
name|initialItems
decl_stmt|;
name|initialItems
operator|<<
literal|"foo"
operator|<<
literal|"bar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Insert less then 0"
argument_list|)
operator|<<
name|initialItems
operator|<<
operator|-
literal|1
operator|<<
literal|"inserted"
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Insert at 0"
argument_list|)
operator|<<
name|initialItems
operator|<<
literal|0
operator|<<
literal|"inserted"
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Insert beyond count"
argument_list|)
operator|<<
name|initialItems
operator|<<
name|initialItems
operator|.
name|count
argument_list|()
operator|+
literal|1
operator|<<
literal|"inserted"
operator|<<
name|initialItems
operator|.
name|count
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Insert at count"
argument_list|)
operator|<<
name|initialItems
operator|<<
name|initialItems
operator|.
name|count
argument_list|()
operator|<<
literal|"inserted"
operator|<<
name|initialItems
operator|.
name|count
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Insert in the middle"
argument_list|)
operator|<<
name|initialItems
operator|<<
literal|1
operator|<<
literal|"inserted"
operator|<<
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertItem
name|void
name|tst_QListWidget
operator|::
name|insertItem
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|initialItems
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|insertIndex
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|itemLabel
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedIndex
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|insertItems
argument_list|(
literal|0
argument_list|,
name|initialItems
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|,
name|initialItems
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|insertItem
argument_list|(
name|insertIndex
argument_list|,
name|itemLabel
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rcFirst
index|[
name|RowsAboutToBeInserted
index|]
argument_list|,
name|expectedIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rcLast
index|[
name|RowsAboutToBeInserted
index|]
argument_list|,
name|expectedIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rcFirst
index|[
name|RowsInserted
index|]
argument_list|,
name|expectedIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rcLast
index|[
name|RowsInserted
index|]
argument_list|,
name|expectedIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|,
name|initialItems
operator|.
name|count
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|item
argument_list|(
name|expectedIndex
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|itemLabel
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertItems_data
name|void
name|tst_QListWidget
operator|::
name|insertItems_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"rowCount"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"insertType"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Insert 1 item using constructor"
argument_list|)
operator|<<
literal|1
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Insert 10 items using constructor"
argument_list|)
operator|<<
literal|10
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Insert 100 items using constructor"
argument_list|)
operator|<<
literal|100
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Insert 1 item with insertItem"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Insert 10 items with insertItem"
argument_list|)
operator|<<
literal|10
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Insert 100 items with insertItem"
argument_list|)
operator|<<
literal|100
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Insert/Create 1 item using insertItem"
argument_list|)
operator|<<
literal|1
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Insert/Create 10 items using insertItem"
argument_list|)
operator|<<
literal|10
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Insert/Create 100 items using insertItem"
argument_list|)
operator|<<
literal|100
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Insert 0 items with insertItems"
argument_list|)
operator|<<
literal|0
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Insert 1 item with insertItems"
argument_list|)
operator|<<
literal|1
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Insert 10 items with insertItems"
argument_list|)
operator|<<
literal|10
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Insert 100 items with insertItems"
argument_list|)
operator|<<
literal|100
operator|<<
literal|3
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertItems
name|void
name|tst_QListWidget
operator|::
name|insertItems
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|insertType
argument_list|)
expr_stmt|;
if|if
condition|(
name|insertType
operator|==
literal|3
condition|)
block|{
name|QStringList
name|strings
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowCount
condition|;
operator|++
name|i
control|)
name|strings
operator|<<
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|insertItems
argument_list|(
literal|0
argument_list|,
name|strings
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|rowCount
condition|;
operator|++
name|r
control|)
block|{
if|if
condition|(
name|insertType
operator|==
literal|0
condition|)
block|{
comment|// insert with QListWidgetItem constructor
operator|new
name|QListWidgetItem
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|r
argument_list|)
argument_list|,
name|testWidget
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|insertType
operator|==
literal|1
condition|)
block|{
comment|// insert actual item
name|testWidget
operator|->
name|insertItem
argument_list|(
name|r
argument_list|,
operator|new
name|QListWidgetItem
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|r
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|insertType
operator|==
literal|2
condition|)
block|{
comment|// insert/creating with string
name|testWidget
operator|->
name|insertItem
argument_list|(
name|r
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|insertType
operator|==
literal|3
condition|)
block|{
name|QStringList
name|strings
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowCount
condition|;
operator|++
name|i
control|)
name|strings
operator|<<
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|insertItems
argument_list|(
literal|0
argument_list|,
name|strings
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// compare the results
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
comment|// check if the text
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|rowCount
condition|;
operator|++
name|r
control|)
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|item
argument_list|(
name|r
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure all items have view set correctly
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testWidget
operator|->
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|item
argument_list|(
name|i
argument_list|)
operator|->
name|listWidget
argument_list|()
argument_list|,
name|testWidget
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|itemAssignment
name|void
name|tst_QListWidget
operator|::
name|itemAssignment
parameter_list|()
block|{
name|QListWidgetItem
name|itemInWidget
argument_list|(
literal|"inWidget"
argument_list|,
name|testWidget
argument_list|)
decl_stmt|;
name|itemInWidget
operator|.
name|setFlags
argument_list|(
name|itemInWidget
operator|.
name|flags
argument_list|()
operator||
name|Qt
operator|::
name|ItemIsTristate
argument_list|)
expr_stmt|;
name|QListWidgetItem
name|itemOutsideWidget
argument_list|(
literal|"outsideWidget"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|itemInWidget
operator|.
name|listWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|itemInWidget
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"inWidget"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|itemInWidget
operator|.
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|ItemIsTristate
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|itemOutsideWidget
operator|.
name|listWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|itemOutsideWidget
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"outsideWidget"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|itemOutsideWidget
operator|.
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|ItemIsTristate
operator|)
argument_list|)
expr_stmt|;
name|itemOutsideWidget
operator|=
name|itemInWidget
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|itemOutsideWidget
operator|.
name|listWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|itemOutsideWidget
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"inWidget"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|itemOutsideWidget
operator|.
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|ItemIsTristate
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|item_data
name|void
name|tst_QListWidget
operator|::
name|item_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"row"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"outOfBounds"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"First item, row: 0"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Middle item, row: 1"
argument_list|)
operator|<<
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Last item, row: 2"
argument_list|)
operator|<<
literal|2
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Out of bounds, row: -1"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Out of bounds, row: 3"
argument_list|)
operator|<<
literal|3
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|item
name|void
name|tst_QListWidget
operator|::
name|item
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|outOfBounds
argument_list|)
expr_stmt|;
operator|(
operator|new
name|QListWidgetItem
argument_list|(
name|testWidget
argument_list|)
operator|)
operator|->
name|setText
argument_list|(
literal|"item0"
argument_list|)
expr_stmt|;
operator|(
operator|new
name|QListWidgetItem
argument_list|(
name|testWidget
argument_list|)
operator|)
operator|->
name|setText
argument_list|(
literal|"item1"
argument_list|)
expr_stmt|;
operator|(
operator|new
name|QListWidgetItem
argument_list|(
name|testWidget
argument_list|)
operator|)
operator|->
name|setText
argument_list|(
literal|"item2"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QListWidgetItem
modifier|*
name|item
init|=
name|testWidget
operator|->
name|item
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|outOfBounds
condition|)
block|{
name|QCOMPARE
argument_list|(
name|item
argument_list|,
cast|static_cast
argument_list|<
name|QListWidgetItem
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|item
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"item%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|takeItem_data
name|void
name|tst_QListWidget
operator|::
name|takeItem_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"row"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"outOfBounds"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"First item, row: 0"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Middle item, row: 1"
argument_list|)
operator|<<
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Last item, row: 2"
argument_list|)
operator|<<
literal|2
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Out of bounds, row: -1"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Out of bounds, row: 3"
argument_list|)
operator|<<
literal|3
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeItem
name|void
name|tst_QListWidget
operator|::
name|takeItem
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|outOfBounds
argument_list|)
expr_stmt|;
operator|(
operator|new
name|QListWidgetItem
argument_list|(
name|testWidget
argument_list|)
operator|)
operator|->
name|setText
argument_list|(
literal|"item0"
argument_list|)
expr_stmt|;
operator|(
operator|new
name|QListWidgetItem
argument_list|(
name|testWidget
argument_list|)
operator|)
operator|->
name|setText
argument_list|(
literal|"item1"
argument_list|)
expr_stmt|;
operator|(
operator|new
name|QListWidgetItem
argument_list|(
name|testWidget
argument_list|)
operator|)
operator|->
name|setText
argument_list|(
literal|"item2"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QListWidgetItem
modifier|*
name|item
init|=
name|testWidget
operator|->
name|takeItem
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|outOfBounds
condition|)
block|{
name|QCOMPARE
argument_list|(
name|item
argument_list|,
cast|static_cast
argument_list|<
name|QListWidgetItem
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|item
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"item%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
operator|delete
name|item
expr_stmt|;
block|}
end_function
begin_function
DECL|function|selectedItems_data
name|void
name|tst_QListWidget
operator|::
name|selectedItems_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"itemCount"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|IntList
argument_list|>
argument_list|(
literal|"hiddenRows"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|IntList
argument_list|>
argument_list|(
literal|"selectedRows"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|IntList
argument_list|>
argument_list|(
literal|"expectedRows"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"none hidden, none selected"
argument_list|)
operator|<<
literal|3
operator|<<
name|IntList
argument_list|()
operator|<<
name|IntList
argument_list|()
operator|<<
name|IntList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"none hidden, all selected"
argument_list|)
operator|<<
literal|3
operator|<<
name|IntList
argument_list|()
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|)
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"first hidden, all selected"
argument_list|)
operator|<<
literal|3
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|0
operator|)
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|)
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"last hidden, all selected"
argument_list|)
operator|<<
literal|3
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|2
operator|)
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|)
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"middle hidden, all selected"
argument_list|)
operator|<<
literal|3
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|1
operator|)
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|)
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"all hidden, all selected"
argument_list|)
operator|<<
literal|3
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|)
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|)
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|selectedItems
name|void
name|tst_QListWidget
operator|::
name|selectedItems
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|itemCount
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|IntList
argument_list|,
name|hiddenRows
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|IntList
argument_list|,
name|selectedRows
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|IntList
argument_list|,
name|expectedRows
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|//insert items
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|itemCount
condition|;
operator|++
name|i
control|)
operator|new
name|QListWidgetItem
argument_list|(
name|QString
argument_list|(
literal|"Item%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|,
name|testWidget
argument_list|)
expr_stmt|;
comment|//test the selection
name|testWidget
operator|->
name|setSelectionMode
argument_list|(
name|QListWidget
operator|::
name|SingleSelection
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|itemCount
condition|;
operator|++
name|i
control|)
block|{
name|QListWidgetItem
modifier|*
name|item
init|=
name|testWidget
operator|->
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|testWidget
operator|->
name|setItemSelected
argument_list|(
name|item
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|item
operator|->
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|selectedItems
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|//let's clear the selection
name|testWidget
operator|->
name|clearSelection
argument_list|()
expr_stmt|;
comment|//... and set the selection mode to allow more than 1 item to be selected
name|testWidget
operator|->
name|setSelectionMode
argument_list|(
name|QAbstractItemView
operator|::
name|MultiSelection
argument_list|)
expr_stmt|;
comment|//verify items are inserted
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|,
name|itemCount
argument_list|)
expr_stmt|;
comment|// hide items
foreach|foreach
control|(
name|int
name|row
decl|,
name|hiddenRows
control|)
name|testWidget
operator|->
name|setItemHidden
argument_list|(
name|testWidget
operator|->
name|item
argument_list|(
name|row
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// select items
foreach|foreach
control|(
name|int
name|row
decl|,
name|selectedRows
control|)
name|testWidget
operator|->
name|setItemSelected
argument_list|(
name|testWidget
operator|->
name|item
argument_list|(
name|row
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// check that the correct number of items and the expected items are there
name|QList
argument_list|<
name|QListWidgetItem
modifier|*
argument_list|>
name|selectedItems
init|=
name|testWidget
operator|->
name|selectedItems
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|selectedItems
operator|.
name|count
argument_list|()
argument_list|,
name|expectedRows
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|int
name|row
decl|,
name|expectedRows
control|)
name|QVERIFY
argument_list|(
name|selectedItems
operator|.
name|contains
argument_list|(
name|testWidget
operator|->
name|item
argument_list|(
name|row
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//check that isSelected agrees with selectedItems
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|itemCount
condition|;
operator|++
name|i
control|)
block|{
name|QListWidgetItem
modifier|*
name|item
init|=
name|testWidget
operator|->
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|testWidget
operator|->
name|isItemSelected
argument_list|(
name|item
argument_list|)
condition|)
name|QVERIFY
argument_list|(
name|selectedItems
operator|.
name|contains
argument_list|(
name|item
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|removeItems_data
name|void
name|tst_QListWidget
operator|::
name|removeItems_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"rowCount"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"removeRows"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"row"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedRowCount"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Empty"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1:1"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3:1"
argument_list|)
operator|<<
literal|3
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3:2"
argument_list|)
operator|<<
literal|3
operator|<<
literal|2
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"100:10"
argument_list|)
operator|<<
literal|100
operator|<<
literal|10
operator|<<
literal|0
operator|<<
literal|90
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeItems
name|void
name|tst_QListWidget
operator|::
name|removeItems
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|removeRows
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedRowCount
argument_list|)
expr_stmt|;
comment|//insert items
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|rowCount
condition|;
operator|++
name|r
control|)
operator|new
name|QListWidgetItem
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|r
argument_list|)
argument_list|,
name|testWidget
argument_list|)
expr_stmt|;
comment|// remove and compare the results
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|removeRows
condition|;
operator|++
name|r
control|)
operator|delete
name|testWidget
operator|->
name|item
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|,
name|expectedRowCount
argument_list|)
expr_stmt|;
comment|// check if the correct items were removed
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|expectedRowCount
condition|;
operator|++
name|r
control|)
if|if
condition|(
name|r
operator|<
name|row
condition|)
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|item
argument_list|(
name|r
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|item
argument_list|(
name|r
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|r
operator|+
name|removeRows
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|moveItemsPriv_data
name|void
name|tst_QListWidget
operator|::
name|moveItemsPriv_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"rowCount"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"srcRow"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"dstRow"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"shouldHaveSignaled"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Empty"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Overflow src"
argument_list|)
operator|<<
literal|5
operator|<<
literal|5
operator|<<
literal|2
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Underflow src"
argument_list|)
operator|<<
literal|5
operator|<<
operator|-
literal|1
operator|<<
literal|2
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Overflow dst"
argument_list|)
operator|<<
literal|5
operator|<<
literal|2
operator|<<
literal|6
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Underflow dst"
argument_list|)
operator|<<
literal|5
operator|<<
literal|2
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Same place"
argument_list|)
operator|<<
literal|5
operator|<<
literal|2
operator|<<
literal|2
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Up"
argument_list|)
operator|<<
literal|5
operator|<<
literal|4
operator|<<
literal|2
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Down"
argument_list|)
operator|<<
literal|5
operator|<<
literal|2
operator|<<
literal|4
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QTBUG-6532 assert"
argument_list|)
operator|<<
literal|5
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QTBUG-6565 to the end"
argument_list|)
operator|<<
literal|5
operator|<<
literal|3
operator|<<
literal|5
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Same place 2"
argument_list|)
operator|<<
literal|2
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"swap"
argument_list|)
operator|<<
literal|2
operator|<<
literal|0
operator|<<
literal|2
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"swap2"
argument_list|)
operator|<<
literal|4
operator|<<
literal|1
operator|<<
literal|3
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"swap3"
argument_list|)
operator|<<
literal|4
operator|<<
literal|3
operator|<<
literal|2
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"swap4"
argument_list|)
operator|<<
literal|2
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|moveItemsPriv
name|void
name|tst_QListWidget
operator|::
name|moveItemsPriv
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|srcRow
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|dstRow
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|shouldHaveSignaled
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|rowCount
condition|;
operator|++
name|r
control|)
operator|new
name|QListWidgetItem
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|r
argument_list|)
argument_list|,
name|testWidget
argument_list|)
expr_stmt|;
name|QListModel
modifier|*
name|model
init|=
name|qobject_cast
argument_list|<
name|QListModel
operator|*
argument_list|>
argument_list|(
name|testWidget
operator|->
name|model
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|QSignalSpy
name|beginMoveSpy
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeMoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|QModelIndex
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|movedSpy
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsMoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|QModelIndex
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|model
operator|->
name|move
argument_list|(
name|srcRow
argument_list|,
name|dstRow
argument_list|)
expr_stmt|;
if|if
condition|(
name|shouldHaveSignaled
condition|)
block|{
if|if
condition|(
name|srcRow
operator|<
name|dstRow
condition|)
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|item
argument_list|(
name|dstRow
operator|-
literal|1
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|srcRow
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|item
argument_list|(
name|dstRow
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|srcRow
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|beginMoveSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|const
name|QList
argument_list|<
name|QVariant
argument_list|>
modifier|&
name|beginMoveArgs
init|=
name|beginMoveSpy
operator|.
name|takeFirst
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|beginMoveArgs
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|srcRow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|beginMoveArgs
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|srcRow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|beginMoveArgs
operator|.
name|at
argument_list|(
literal|4
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|dstRow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|movedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|const
name|QList
argument_list|<
name|QVariant
argument_list|>
modifier|&
name|movedArgs
init|=
name|movedSpy
operator|.
name|takeFirst
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|movedArgs
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|srcRow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|movedArgs
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|srcRow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|movedArgs
operator|.
name|at
argument_list|(
literal|4
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|dstRow
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|beginMoveSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|movedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|itemStreaming_data
name|void
name|tst_QListWidget
operator|::
name|itemStreaming_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"text"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"toolTip"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Data"
argument_list|)
operator|<<
literal|"item text"
operator|<<
literal|"tool tip text"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|itemStreaming
name|void
name|tst_QListWidget
operator|::
name|itemStreaming
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|toolTip
argument_list|)
expr_stmt|;
name|QListWidgetItem
name|item
decl_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|toolTip
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|.
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|item
operator|.
name|setToolTip
argument_list|(
name|toolTip
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|text
argument_list|()
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|toolTip
argument_list|()
argument_list|,
name|toolTip
argument_list|)
expr_stmt|;
name|QByteArray
name|buffer
decl_stmt|;
name|QDataStream
name|out
argument_list|(
operator|&
name|buffer
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|out
operator|<<
name|item
expr_stmt|;
name|QListWidgetItem
name|item2
decl_stmt|;
name|QCOMPARE
argument_list|(
name|item2
operator|.
name|text
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item2
operator|.
name|toolTip
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|buffer
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QDataStream
name|in
argument_list|(
operator|&
name|buffer
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|in
operator|>>
name|item2
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item2
operator|.
name|text
argument_list|()
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item2
operator|.
name|toolTip
argument_list|()
argument_list|,
name|toolTip
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sortItems_data
name|void
name|tst_QListWidget
operator|::
name|sortItems_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"order"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariantList
argument_list|>
argument_list|(
literal|"initialList"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariantList
argument_list|>
argument_list|(
literal|"expectedList"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|IntList
argument_list|>
argument_list|(
literal|"expectedRows"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ascending strings"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
operator|<<
operator|(
name|QVariantList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"c"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"d"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|)
operator|<<
operator|(
name|QVariantList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"c"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"d"
argument_list|)
operator|)
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|2
operator|<<
literal|3
operator|<<
literal|0
operator|<<
literal|1
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"descending strings"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|DescendingOrder
argument_list|)
operator|<<
operator|(
name|QVariantList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"c"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"d"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|)
operator|<<
operator|(
name|QVariantList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"d"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"c"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|)
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|3
operator|<<
literal|2
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ascending numbers"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
operator|<<
operator|(
name|QVariantList
argument_list|()
operator|<<
literal|1
operator|<<
literal|11
operator|<<
literal|2
operator|<<
literal|22
operator|)
operator|<<
operator|(
name|QVariantList
argument_list|()
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|11
operator|<<
literal|22
operator|)
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|0
operator|<<
literal|2
operator|<<
literal|1
operator|<<
literal|3
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"descending numbers"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|DescendingOrder
argument_list|)
operator|<<
operator|(
name|QVariantList
argument_list|()
operator|<<
literal|1
operator|<<
literal|11
operator|<<
literal|2
operator|<<
literal|22
operator|)
operator|<<
operator|(
name|QVariantList
argument_list|()
operator|<<
literal|22
operator|<<
literal|11
operator|<<
literal|2
operator|<<
literal|1
operator|)
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|3
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|0
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sortItems
name|void
name|tst_QListWidget
operator|::
name|sortItems
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|order
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QVariantList
argument_list|,
name|initialList
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QVariantList
argument_list|,
name|expectedList
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|IntList
argument_list|,
name|expectedRows
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QVariant
modifier|&
name|data
decl|,
name|initialList
control|)
block|{
name|QListWidgetItem
modifier|*
name|item
init|=
operator|new
name|QListWidgetItem
argument_list|(
name|testWidget
argument_list|)
decl_stmt|;
name|item
operator|->
name|setData
argument_list|(
name|Qt
operator|::
name|DisplayRole
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
name|QAbstractItemModel
modifier|*
name|model
init|=
name|testWidget
operator|->
name|model
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|persistent
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|model
operator|->
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|j
control|)
name|persistent
operator|<<
name|model
operator|->
name|index
argument_list|(
name|j
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|sortItems
argument_list|(
cast|static_cast
argument_list|<
name|Qt
operator|::
name|SortOrder
argument_list|>
argument_list|(
name|order
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|,
name|expectedList
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testWidget
operator|->
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|item
argument_list|(
name|i
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|expectedList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|testWidget
operator|->
name|count
argument_list|()
condition|;
operator|++
name|k
control|)
name|QCOMPARE
argument_list|(
name|persistent
operator|.
name|at
argument_list|(
name|k
argument_list|)
operator|.
name|row
argument_list|()
argument_list|,
name|expectedRows
operator|.
name|at
argument_list|(
name|k
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sortHiddenItems_data
name|void
name|tst_QListWidget
operator|::
name|sortHiddenItems_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"order"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"initialList"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"expectedList"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|IntList
argument_list|>
argument_list|(
literal|"expectedRows"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|IntList
argument_list|>
argument_list|(
literal|"expectedVisibility"
argument_list|)
expr_stmt|;
name|QStringList
name|initial
decl_stmt|,
name|expected
decl_stmt|;
name|IntList
name|rowOrder
decl_stmt|;
name|IntList
name|visible
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
operator|++
name|i
control|)
block|{
name|initial
operator|<<
name|QString
argument_list|(
name|QChar
argument_list|(
literal|0x41
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|<<
name|QString
argument_list|(
name|QChar
argument_list|(
literal|0x54
operator|-
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|rowOrder
operator|<<
literal|19
operator|-
name|i
expr_stmt|;
name|visible
operator|<<
operator|(
name|i
operator|%
literal|2
operator|)
expr_stmt|;
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"descending order, 20 items"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|DescendingOrder
argument_list|)
operator|<<
name|initial
operator|<<
name|expected
operator|<<
name|rowOrder
operator|<<
name|visible
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ascending order"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"c"
operator|<<
literal|"d"
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|<<
literal|"d"
operator|)
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|2
operator|<<
literal|3
operator|<<
literal|0
operator|<<
literal|1
operator|)
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|0
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"descending order"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|DescendingOrder
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"c"
operator|<<
literal|"d"
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"d"
operator|<<
literal|"c"
operator|<<
literal|"b"
operator|<<
literal|"a"
operator|)
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|3
operator|<<
literal|2
operator|)
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|1
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sortHiddenItems
name|void
name|tst_QListWidget
operator|::
name|sortHiddenItems
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|order
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|initialList
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|expectedList
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|IntList
argument_list|,
name|expectedRows
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|IntList
argument_list|,
name|expectedVisibility
argument_list|)
expr_stmt|;
comment|// init() won't clear hidden items...
name|QListWidget
modifier|*
name|tw
init|=
operator|new
name|QListWidget
argument_list|()
decl_stmt|;
name|tw
operator|->
name|addItems
argument_list|(
name|initialList
argument_list|)
expr_stmt|;
name|QAbstractItemModel
modifier|*
name|model
init|=
name|tw
operator|->
name|model
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|persistent
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|model
operator|->
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|j
control|)
block|{
name|persistent
operator|<<
name|model
operator|->
name|index
argument_list|(
name|j
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|tw
operator|->
name|setRowHidden
argument_list|(
name|j
argument_list|,
name|j
operator|&
literal|1
argument_list|)
expr_stmt|;
comment|// every odd is hidden
block|}
name|tw
operator|->
name|setSortingEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tw
operator|->
name|sortItems
argument_list|(
cast|static_cast
argument_list|<
name|Qt
operator|::
name|SortOrder
argument_list|>
argument_list|(
name|order
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tw
operator|->
name|count
argument_list|()
argument_list|,
name|expectedList
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tw
operator|->
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|tw
operator|->
name|item
argument_list|(
name|i
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|expectedList
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tw
operator|->
name|item
argument_list|(
name|i
argument_list|)
operator|->
name|isHidden
argument_list|()
argument_list|,
operator|!
name|expectedVisibility
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|tw
operator|->
name|count
argument_list|()
condition|;
operator|++
name|k
control|)
name|QCOMPARE
argument_list|(
name|persistent
operator|.
name|at
argument_list|(
name|k
argument_list|)
operator|.
name|row
argument_list|()
argument_list|,
name|expectedRows
operator|.
name|at
argument_list|(
name|k
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|tw
expr_stmt|;
block|}
end_function
begin_function
DECL|function|modelChanged
name|void
name|tst_QListWidget
operator|::
name|modelChanged
parameter_list|(
name|ModelChanged
name|change
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|first
parameter_list|,
name|int
name|last
parameter_list|)
block|{
name|rcParent
index|[
name|change
index|]
operator|=
name|parent
expr_stmt|;
name|rcFirst
index|[
name|change
index|]
operator|=
name|first
expr_stmt|;
name|rcLast
index|[
name|change
index|]
operator|=
name|last
expr_stmt|;
block|}
end_function
begin_class
DECL|class|TestListWidget
class|class
name|TestListWidget
super|:
specifier|public
name|QListWidget
block|{
public|public:
DECL|function|TestListWidget
name|TestListWidget
parameter_list|()
member_init_list|:
name|QListWidget
argument_list|()
block|{      }
DECL|function|getState
name|State
name|getState
parameter_list|()
block|{
return|return
name|QListWidget
operator|::
name|state
argument_list|()
return|;
block|}
DECL|function|closeEditor
name|void
name|closeEditor
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|QAbstractItemDelegate
operator|::
name|EndEditHint
name|hint
parameter_list|)
block|{
name|QListWidget
operator|::
name|closeEditor
argument_list|(
name|w
argument_list|,
name|hint
argument_list|)
expr_stmt|;
block|}
DECL|function|isEditingState
name|bool
name|isEditingState
parameter_list|(
name|QListWidgetItem
modifier|*
name|item
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|item
argument_list|)
expr_stmt|;
return|return
operator|(
name|QListWidget
operator|::
name|state
argument_list|()
operator|==
name|QListWidget
operator|::
name|EditingState
condition|?
literal|true
else|:
literal|false
operator|)
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|closeEditor
name|void
name|tst_QListWidget
operator|::
name|closeEditor
parameter_list|()
block|{
name|TestListWidget
name|w
decl_stmt|;
name|QStringList
name|labels
init|=
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|<<
literal|"d"
operator|)
decl_stmt|;
name|w
operator|.
name|addItems
argument_list|(
name|labels
argument_list|)
expr_stmt|;
name|QListWidgetItem
modifier|*
name|item
init|=
name|w
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|item
operator|->
name|setFlags
argument_list|(
name|item
operator|->
name|flags
argument_list|()
operator||
name|Qt
operator|::
name|ItemIsEditable
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|w
operator|.
name|editItem
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|w
operator|.
name|isEditingState
argument_list|(
name|item
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|reset
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|w
operator|.
name|isEditingState
argument_list|(
name|item
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setData_data
name|void
name|tst_QListWidget
operator|::
name|setData_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"initialItems"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"itemIndex"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|IntList
argument_list|>
argument_list|(
literal|"roles"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariantList
argument_list|>
argument_list|(
literal|"values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedSignalCount"
argument_list|)
expr_stmt|;
name|QStringList
name|initialItems
decl_stmt|;
name|IntList
name|roles
decl_stmt|;
name|QVariantList
name|values
decl_stmt|;
block|{
name|initialItems
operator|.
name|clear
argument_list|()
expr_stmt|;
name|roles
operator|.
name|clear
argument_list|()
expr_stmt|;
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
name|initialItems
operator|<<
literal|"foo"
expr_stmt|;
name|roles
operator|<<
name|Qt
operator|::
name|DisplayRole
expr_stmt|;
name|values
operator|<<
literal|"xxx"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"changing a role should emit"
argument_list|)
operator|<<
name|initialItems
operator|<<
literal|0
operator|<<
name|roles
operator|<<
name|values
operator|<<
literal|1
expr_stmt|;
block|}
block|{
name|initialItems
operator|.
name|clear
argument_list|()
expr_stmt|;
name|roles
operator|.
name|clear
argument_list|()
expr_stmt|;
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
name|initialItems
operator|<<
literal|"foo"
expr_stmt|;
name|roles
operator|<<
name|Qt
operator|::
name|DisplayRole
expr_stmt|;
name|values
operator|<<
literal|"foo"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"setting the same value should not emit"
argument_list|)
operator|<<
name|initialItems
operator|<<
literal|0
operator|<<
name|roles
operator|<<
name|values
operator|<<
literal|0
expr_stmt|;
block|}
block|{
name|initialItems
operator|.
name|clear
argument_list|()
expr_stmt|;
name|roles
operator|.
name|clear
argument_list|()
expr_stmt|;
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
name|initialItems
operator|<<
literal|"foo"
expr_stmt|;
name|roles
operator|<<
name|Qt
operator|::
name|DisplayRole
operator|<<
name|Qt
operator|::
name|DisplayRole
expr_stmt|;
name|values
operator|<<
literal|"bar"
operator|<<
literal|"bar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"setting the same value twice should only emit once"
argument_list|)
operator|<<
name|initialItems
operator|<<
literal|0
operator|<<
name|roles
operator|<<
name|values
operator|<<
literal|1
expr_stmt|;
block|}
block|{
name|initialItems
operator|.
name|clear
argument_list|()
expr_stmt|;
name|roles
operator|.
name|clear
argument_list|()
expr_stmt|;
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
name|initialItems
operator|<<
literal|"foo"
expr_stmt|;
name|roles
operator|<<
name|Qt
operator|::
name|DisplayRole
operator|<<
name|Qt
operator|::
name|ToolTipRole
operator|<<
name|Qt
operator|::
name|WhatsThisRole
expr_stmt|;
name|values
operator|<<
literal|"bar"
operator|<<
literal|"bartooltip"
operator|<<
literal|"barwhatsthis"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"changing three roles should emit three times"
argument_list|)
operator|<<
name|initialItems
operator|<<
literal|0
operator|<<
name|roles
operator|<<
name|values
operator|<<
literal|3
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setData
name|void
name|tst_QListWidget
operator|::
name|setData
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|initialItems
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|itemIndex
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|IntList
argument_list|,
name|roles
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QVariantList
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedSignalCount
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|QListWidgetItem
operator|*
argument_list|>
argument_list|(
literal|"QListWidgetItem*"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|roles
operator|.
name|count
argument_list|()
operator|==
name|values
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|manipulateModel
init|=
literal|0
init|;
name|manipulateModel
operator|<
literal|2
condition|;
operator|++
name|manipulateModel
control|)
block|{
name|testWidget
operator|->
name|clear
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|insertItems
argument_list|(
literal|0
argument_list|,
name|initialItems
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|,
name|initialItems
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QSignalSpy
name|itemChanged
argument_list|(
name|testWidget
argument_list|,
name|SIGNAL
argument_list|(
name|itemChanged
argument_list|(
name|QListWidgetItem
operator|*
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|dataChanged
argument_list|(
name|testWidget
operator|->
name|model
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|dataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|roles
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|manipulateModel
condition|)
name|testWidget
operator|->
name|model
argument_list|()
operator|->
name|setData
argument_list|(
name|testWidget
operator|->
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|itemIndex
argument_list|,
literal|0
argument_list|,
name|testWidget
operator|->
name|rootIndex
argument_list|()
argument_list|)
argument_list|,
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|roles
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|testWidget
operator|->
name|item
argument_list|(
name|itemIndex
argument_list|)
operator|->
name|setData
argument_list|(
name|roles
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// make sure the data is actually set
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|roles
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|item
argument_list|(
name|itemIndex
argument_list|)
operator|->
name|data
argument_list|(
name|roles
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure we get the right number of emits
name|QCOMPARE
argument_list|(
name|itemChanged
operator|.
name|count
argument_list|()
argument_list|,
name|expectedSignalCount
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dataChanged
operator|.
name|count
argument_list|()
argument_list|,
name|expectedSignalCount
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|insertItemsWithSorting_data
name|void
name|tst_QListWidget
operator|::
name|insertItemsWithSorting_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"sortOrder"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"initialItems"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"insertItems"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"expectedItems"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|IntList
argument_list|>
argument_list|(
literal|"expectedRows"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"() + (a) = (a)"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|)
operator|<<
name|IntList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"() + (c, b, a) = (a, b, c)"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"c"
operator|<<
literal|"b"
operator|<<
literal|"a"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
name|IntList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"() + (a, b, c) = (c, b, a)"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|DescendingOrder
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"c"
operator|<<
literal|"b"
operator|<<
literal|"a"
operator|)
operator|<<
name|IntList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(a) + (b) = (a, b)"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
operator|<<
name|QStringList
argument_list|(
literal|"a"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"b"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|)
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|0
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(a) + (b) = (b, a)"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|DescendingOrder
argument_list|)
operator|<<
name|QStringList
argument_list|(
literal|"a"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"b"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"b"
operator|<<
literal|"a"
operator|)
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|1
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(a, c, b) + (d) = (a, b, c, d)"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"c"
operator|<<
literal|"b"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"d"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|<<
literal|"d"
operator|)
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(b, c, a) + (d) = (d, c, b, a)"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|DescendingOrder
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|<<
literal|"a"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"d"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"d"
operator|<<
literal|"c"
operator|<<
literal|"b"
operator|<<
literal|"a"
operator|)
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
operator|)
expr_stmt|;
block|{
name|IntList
name|ascendingRows
decl_stmt|;
name|IntList
name|reverseRows
decl_stmt|;
name|QStringList
name|ascendingItems
decl_stmt|;
name|QStringList
name|reverseItems
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|'a'
init|;
name|i
operator|<=
literal|'z'
condition|;
operator|++
name|i
control|)
block|{
name|ascendingItems
operator|<<
name|QString
argument_list|(
literal|"%0"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1Char
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|reverseItems
operator|<<
name|QString
argument_list|(
literal|"%0"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1Char
argument_list|(
literal|'z'
operator|-
name|i
operator|+
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
name|ascendingRows
operator|<<
name|i
operator|-
literal|'a'
expr_stmt|;
name|reverseRows
operator|<<
literal|'z'
operator|-
name|i
operator|+
literal|'a'
expr_stmt|;
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"() + (sorted items) = (sorted items)"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
name|ascendingItems
operator|<<
name|ascendingItems
operator|<<
name|IntList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(sorted items) + () = (sorted items)"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
operator|<<
name|ascendingItems
operator|<<
name|QStringList
argument_list|()
operator|<<
name|ascendingItems
operator|<<
name|ascendingRows
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"() + (ascending items) = (reverse items)"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|DescendingOrder
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
name|ascendingItems
operator|<<
name|reverseItems
operator|<<
name|IntList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(reverse items) + () = (ascending items)"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
operator|<<
name|reverseItems
operator|<<
name|QStringList
argument_list|()
operator|<<
name|ascendingItems
operator|<<
name|ascendingRows
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(reverse items) + () = (reverse items)"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|DescendingOrder
argument_list|)
operator|<<
name|reverseItems
operator|<<
name|QStringList
argument_list|()
operator|<<
name|reverseItems
operator|<<
name|ascendingRows
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|insertItemsWithSorting
name|void
name|tst_QListWidget
operator|::
name|insertItemsWithSorting
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|sortOrder
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|initialItems
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|insertItems
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|expectedItems
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|IntList
argument_list|,
name|expectedRows
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|method
init|=
literal|0
init|;
name|method
operator|<
literal|5
condition|;
operator|++
name|method
control|)
block|{
name|QListWidget
name|w
decl_stmt|;
name|w
operator|.
name|setSortingEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|w
operator|.
name|sortItems
argument_list|(
cast|static_cast
argument_list|<
name|Qt
operator|::
name|SortOrder
argument_list|>
argument_list|(
name|sortOrder
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addItems
argument_list|(
name|initialItems
argument_list|)
expr_stmt|;
name|QAbstractItemModel
modifier|*
name|model
init|=
name|w
operator|.
name|model
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|persistent
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|model
operator|->
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|j
control|)
name|persistent
operator|<<
name|model
operator|->
name|index
argument_list|(
name|j
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|method
condition|)
block|{
case|case
literal|0
case|:
comment|// insert using item constructor
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|insertItems
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
operator|new
name|QListWidgetItem
argument_list|(
name|insertItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
operator|&
name|w
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
comment|// insert using insertItems()
name|w
operator|.
name|insertItems
argument_list|(
literal|0
argument_list|,
name|insertItems
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// insert using insertItem()
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|insertItems
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|w
operator|.
name|insertItem
argument_list|(
literal|0
argument_list|,
name|insertItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// insert using addItems()
name|w
operator|.
name|addItems
argument_list|(
name|insertItems
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|// insert using addItem()
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|insertItems
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|w
operator|.
name|addItem
argument_list|(
name|insertItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
name|QCOMPARE
argument_list|(
name|w
operator|.
name|count
argument_list|()
argument_list|,
name|expectedItems
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|w
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|w
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|expectedItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|persistent
operator|.
name|count
argument_list|()
condition|;
operator|++
name|k
control|)
name|QCOMPARE
argument_list|(
name|persistent
operator|.
name|at
argument_list|(
name|k
argument_list|)
operator|.
name|row
argument_list|()
argument_list|,
name|expectedRows
operator|.
name|at
argument_list|(
name|k
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|changeDataWithSorting_data
name|void
name|tst_QListWidget
operator|::
name|changeDataWithSorting_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"sortOrder"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"initialItems"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"itemIndex"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"newValue"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"expectedItems"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|IntList
argument_list|>
argument_list|(
literal|"expectedRows"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"reorderingExpected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"change a to b in (a)"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|)
operator|<<
literal|0
operator|<<
literal|"b"
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"b"
operator|)
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|0
operator|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"change a to b in (a, c)"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"c"
operator|)
operator|<<
literal|0
operator|<<
literal|"b"
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|0
operator|<<
literal|1
operator|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"change a to c in (a, b)"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|)
operator|<<
literal|0
operator|<<
literal|"c"
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|1
operator|<<
literal|0
operator|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"change c to a in (c, b)"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|DescendingOrder
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"c"
operator|<<
literal|"b"
operator|)
operator|<<
literal|0
operator|<<
literal|"a"
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"b"
operator|<<
literal|"a"
operator|)
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|1
operator|<<
literal|0
operator|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"change e to i in (a, c, e, g)"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"c"
operator|<<
literal|"e"
operator|<<
literal|"g"
operator|)
operator|<<
literal|2
operator|<<
literal|"i"
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"c"
operator|<<
literal|"g"
operator|<<
literal|"i"
operator|)
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|3
operator|<<
literal|2
operator|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"change e to a in (c, e, g, i)"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"c"
operator|<<
literal|"e"
operator|<<
literal|"g"
operator|<<
literal|"i"
operator|)
operator|<<
literal|1
operator|<<
literal|"a"
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"c"
operator|<<
literal|"g"
operator|<<
literal|"i"
operator|)
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|2
operator|<<
literal|3
operator|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"change e to f in (c, e, g, i)"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"c"
operator|<<
literal|"e"
operator|<<
literal|"g"
operator|<<
literal|"i"
operator|)
operator|<<
literal|1
operator|<<
literal|"f"
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"c"
operator|<<
literal|"f"
operator|<<
literal|"g"
operator|<<
literal|"i"
operator|)
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
operator|)
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|itemData
name|void
name|tst_QListWidget
operator|::
name|itemData
parameter_list|()
block|{
name|QListWidget
name|widget
decl_stmt|;
name|QListWidgetItem
name|item
argument_list|(
operator|&
name|widget
argument_list|)
decl_stmt|;
name|item
operator|.
name|setFlags
argument_list|(
name|item
operator|.
name|flags
argument_list|()
operator||
name|Qt
operator|::
name|ItemIsEditable
argument_list|)
expr_stmt|;
name|item
operator|.
name|setData
argument_list|(
name|Qt
operator|::
name|DisplayRole
argument_list|,
name|QString
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|.
name|setData
argument_list|(
name|Qt
operator|::
name|CheckStateRole
argument_list|,
name|Qt
operator|::
name|PartiallyChecked
argument_list|)
expr_stmt|;
name|item
operator|.
name|setData
argument_list|(
name|Qt
operator|::
name|UserRole
operator|+
literal|0
argument_list|,
name|QString
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|.
name|setData
argument_list|(
name|Qt
operator|::
name|UserRole
operator|+
literal|1
argument_list|,
name|QString
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|.
name|setData
argument_list|(
name|Qt
operator|::
name|UserRole
operator|+
literal|2
argument_list|,
name|QString
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|.
name|setData
argument_list|(
name|Qt
operator|::
name|UserRole
operator|+
literal|3
argument_list|,
name|QString
argument_list|(
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|QMap
argument_list|<
name|int
argument_list|,
name|QVariant
argument_list|>
name|flags
init|=
name|widget
operator|.
name|model
argument_list|()
operator|->
name|itemData
argument_list|(
name|widget
operator|.
name|model
argument_list|()
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|flags
operator|.
name|count
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|flags
index|[
name|Qt
operator|::
name|UserRole
operator|+
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|changeDataWithSorting
name|void
name|tst_QListWidget
operator|::
name|changeDataWithSorting
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|sortOrder
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|initialItems
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|itemIndex
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|expectedItems
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|IntList
argument_list|,
name|expectedRows
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|reorderingExpected
argument_list|)
expr_stmt|;
name|QListWidget
name|w
decl_stmt|;
name|w
operator|.
name|setSortingEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|w
operator|.
name|sortItems
argument_list|(
cast|static_cast
argument_list|<
name|Qt
operator|::
name|SortOrder
argument_list|>
argument_list|(
name|sortOrder
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addItems
argument_list|(
name|initialItems
argument_list|)
expr_stmt|;
name|QAbstractItemModel
modifier|*
name|model
init|=
name|w
operator|.
name|model
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|persistent
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|model
operator|->
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|j
control|)
name|persistent
operator|<<
name|model
operator|->
name|index
argument_list|(
name|j
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|QSignalSpy
name|dataChangedSpy
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|dataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|layoutChangedSpy
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|layoutChanged
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QListWidgetItem
modifier|*
name|item
init|=
name|w
operator|.
name|item
argument_list|(
name|itemIndex
argument_list|)
decl_stmt|;
name|item
operator|->
name|setText
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|w
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|expectedItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|persistent
operator|.
name|count
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|persistent
operator|.
name|at
argument_list|(
name|j
argument_list|)
operator|.
name|row
argument_list|()
operator|==
name|i
condition|)
comment|// the same toplevel row
name|QCOMPARE
argument_list|(
name|persistent
operator|.
name|at
argument_list|(
name|j
argument_list|)
operator|.
name|internalPointer
argument_list|()
argument_list|,
operator|(
name|void
operator|*
operator|)
name|w
operator|.
name|item
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|persistent
operator|.
name|count
argument_list|()
condition|;
operator|++
name|k
control|)
name|QCOMPARE
argument_list|(
name|persistent
operator|.
name|at
argument_list|(
name|k
argument_list|)
operator|.
name|row
argument_list|()
argument_list|,
name|expectedRows
operator|.
name|at
argument_list|(
name|k
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dataChangedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|layoutChangedSpy
operator|.
name|count
argument_list|()
argument_list|,
name|reorderingExpected
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|itemWidget
name|void
name|tst_QListWidget
operator|::
name|itemWidget
parameter_list|()
block|{
name|QListWidget
name|list
decl_stmt|;
name|QWidget
name|widget
decl_stmt|;
name|QListWidgetItem
modifier|*
name|item
init|=
operator|new
name|QListWidgetItem
argument_list|(
operator|&
name|list
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|itemWidget
argument_list|(
name|item
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|setItemWidget
argument_list|(
name|item
argument_list|,
operator|&
name|widget
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|itemWidget
argument_list|(
name|item
argument_list|)
argument_list|,
operator|&
name|widget
argument_list|)
expr_stmt|;
name|list
operator|.
name|removeItemWidget
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|itemWidget
argument_list|(
name|item
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_MAC
end_ifndef
begin_class
DECL|class|MyListWidget
class|class
name|MyListWidget
super|:
specifier|public
name|QListWidget
block|{
public|public:
DECL|function|MyListWidget
name|MyListWidget
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QListWidget
argument_list|(
name|parent
argument_list|)
block|{         }
DECL|function|paintEvent
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
name|e
parameter_list|)
block|{
name|painted
operator|+=
name|e
operator|->
name|region
argument_list|()
expr_stmt|;
name|QListWidget
operator|::
name|paintEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
DECL|member|painted
name|QRegion
name|painted
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|fastScroll
name|void
name|tst_QListWidget
operator|::
name|fastScroll
parameter_list|()
block|{
name|QWidget
name|topLevel
decl_stmt|;
name|MyListWidget
name|widget
argument_list|(
operator|&
name|topLevel
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
operator|++
name|i
control|)
name|widget
operator|.
name|addItem
argument_list|(
name|QString
argument_list|(
literal|"Item %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|topLevel
operator|.
name|resize
argument_list|(
literal|300
argument_list|,
literal|300
argument_list|)
expr_stmt|;
comment|// toplevel needs to be wide enough for the item
name|topLevel
operator|.
name|show
argument_list|()
expr_stmt|;
comment|// Force the mouse cursor off the widget as it causes item it is over to highlight,
comment|// which causes unexpected paint region.
name|QTest
operator|::
name|mouseMove
argument_list|(
operator|&
name|widget
argument_list|,
name|QPoint
argument_list|(
operator|-
literal|10
argument_list|,
operator|-
literal|10
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure the widget gets the first full repaint. On
comment|// some WMs, we'll get two (first inactive exposure, then
comment|// active exposure.
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowActive
argument_list|(
operator|&
name|topLevel
argument_list|)
argument_list|)
expr_stmt|;
name|QSize
name|itemSize
init|=
name|widget
operator|.
name|visualItemRect
argument_list|(
name|widget
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|itemSize
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QScrollBar
modifier|*
name|sbar
init|=
name|widget
operator|.
name|verticalScrollBar
argument_list|()
decl_stmt|;
name|widget
operator|.
name|setVerticalScrollMode
argument_list|(
name|QAbstractItemView
operator|::
name|ScrollPerItem
argument_list|)
expr_stmt|;
name|widget
operator|.
name|painted
operator|=
name|QRegion
argument_list|()
expr_stmt|;
name|sbar
operator|->
name|setValue
argument_list|(
name|sbar
operator|->
name|value
argument_list|()
operator|+
name|sbar
operator|->
name|singleStep
argument_list|()
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
specifier|const
name|QSize
name|actualItemSize
init|=
name|widget
operator|.
name|painted
operator|.
name|boundingRect
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|actualItemSize
operator|!=
name|itemSize
condition|)
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"QTBUG-21098"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
comment|// only one item should be repainted, the rest should be scrolled in memory
name|QCOMPARE
argument_list|(
name|actualItemSize
argument_list|,
name|itemSize
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_OS_MAC
end_comment
begin_function
DECL|function|insertUnchanged
name|void
name|tst_QListWidget
operator|::
name|insertUnchanged
parameter_list|()
block|{
name|QListWidget
name|w
decl_stmt|;
name|QSignalSpy
name|itemChangedSpy
argument_list|(
operator|&
name|w
argument_list|,
name|SIGNAL
argument_list|(
name|itemChanged
argument_list|(
name|QListWidgetItem
operator|*
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QListWidgetItem
name|item
argument_list|(
literal|"foo"
argument_list|,
operator|&
name|w
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|itemChangedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setSortingEnabled
name|void
name|tst_QListWidget
operator|::
name|setSortingEnabled
parameter_list|()
block|{
name|QListWidget
name|w
decl_stmt|;
name|QListWidgetItem
modifier|*
name|item1
init|=
operator|new
name|QListWidgetItem
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
name|QListWidgetItem
modifier|*
name|item2
init|=
operator|new
name|QListWidgetItem
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
name|w
operator|.
name|setSortingEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|w
operator|.
name|isSortingEnabled
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|w
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|,
name|item1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|w
operator|.
name|item
argument_list|(
literal|1
argument_list|)
argument_list|,
name|item2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task199503_crashWhenCleared
name|void
name|tst_QListWidget
operator|::
name|task199503_crashWhenCleared
parameter_list|()
block|{
comment|//we test here for a crash that would occur if you clear the items in the currentItemChanged signal
name|QListWidget
name|w
decl_stmt|;
name|w
operator|.
name|addItems
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"item1"
operator|<<
literal|"item2"
operator|<<
literal|"item3"
argument_list|)
expr_stmt|;
name|w
operator|.
name|setCurrentRow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|w
operator|.
name|connect
argument_list|(
operator|&
name|w
argument_list|,
name|SIGNAL
argument_list|(
name|currentItemChanged
argument_list|(
name|QListWidgetItem
operator|*
argument_list|,
name|QListWidgetItem
operator|*
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|clear
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|setCurrentRow
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task217070_scrollbarsAdjusted
name|void
name|tst_QListWidget
operator|::
name|task217070_scrollbarsAdjusted
parameter_list|()
block|{
comment|//This task was mailing for style using SH_ScrollView_FrameOnlyAroundContents such as QMotifStyle
name|QListWidget
name|v
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|200
condition|;
name|i
operator|++
control|)
name|v
operator|.
name|addItem
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|v
operator|.
name|show
argument_list|()
expr_stmt|;
name|v
operator|.
name|setViewMode
argument_list|(
name|QListView
operator|::
name|IconMode
argument_list|)
expr_stmt|;
name|v
operator|.
name|setResizeMode
argument_list|(
name|QListView
operator|::
name|Adjust
argument_list|)
expr_stmt|;
name|v
operator|.
name|setUniformItemSizes
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|v
operator|.
name|resize
argument_list|(
literal|160
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|QScrollBar
modifier|*
name|hbar
init|=
name|v
operator|.
name|horizontalScrollBar
argument_list|()
decl_stmt|;
name|QScrollBar
modifier|*
name|vbar
init|=
name|v
operator|.
name|verticalScrollBar
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|hbar
operator|&&
name|vbar
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|f
init|=
literal|150
init|;
name|f
operator|>
literal|90
condition|;
name|f
operator|--
control|)
block|{
name|v
operator|.
name|resize
argument_list|(
name|f
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|vbar
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ScrollBar_Transient
argument_list|,
literal|0
argument_list|,
name|vbar
argument_list|)
operator|||
name|vbar
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
comment|//the horizontal scrollbar must not be visible.
name|QVERIFY
argument_list|(
operator|!
name|hbar
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|task258949_keypressHangup
name|void
name|tst_QListWidget
operator|::
name|task258949_keypressHangup
parameter_list|()
block|{
name|QListWidget
name|lw
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
literal|5
condition|;
name|y
operator|++
control|)
block|{
name|QListWidgetItem
modifier|*
name|lwi
init|=
operator|new
name|QListWidgetItem
argument_list|(
operator|&
name|lw
argument_list|)
decl_stmt|;
name|lwi
operator|->
name|setText
argument_list|(
name|y
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
expr_stmt|;
if|if
condition|(
name|y
condition|)
name|lwi
operator|->
name|setFlags
argument_list|(
name|Qt
operator|::
name|ItemIsSelectable
argument_list|)
expr_stmt|;
block|}
name|lw
operator|.
name|show
argument_list|()
expr_stmt|;
name|lw
operator|.
name|setCurrentIndex
argument_list|(
name|lw
operator|.
name|model
argument_list|()
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lw
operator|.
name|currentIndex
argument_list|()
argument_list|,
name|lw
operator|.
name|model
argument_list|()
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
operator|&
name|lw
argument_list|,
literal|'1'
argument_list|)
expr_stmt|;
comment|//this used to freeze
name|QTest
operator|::
name|qWait
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lw
operator|.
name|currentIndex
argument_list|()
argument_list|,
name|lw
operator|.
name|model
argument_list|()
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|QTBUG8086_currentItemChangedOnClick
name|void
name|tst_QListWidget
operator|::
name|QTBUG8086_currentItemChangedOnClick
parameter_list|()
block|{
name|qRegisterMetaType
argument_list|<
name|QListWidgetItem
operator|*
argument_list|>
argument_list|(
literal|"QListWidgetItem*"
argument_list|)
expr_stmt|;
name|QWidget
name|win
decl_stmt|;
name|QHBoxLayout
name|layout
argument_list|(
operator|&
name|win
argument_list|)
decl_stmt|;
name|QListWidget
name|list
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
operator|new
name|QListWidgetItem
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|,
operator|&
name|list
argument_list|)
expr_stmt|;
name|layout
operator|.
name|addWidget
argument_list|(
operator|&
name|list
argument_list|)
expr_stmt|;
name|QLineEdit
name|edit
decl_stmt|;
name|layout
operator|.
name|addWidget
argument_list|(
operator|&
name|edit
argument_list|)
expr_stmt|;
name|edit
operator|.
name|setFocus
argument_list|()
expr_stmt|;
name|win
operator|.
name|show
argument_list|()
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|list
argument_list|,
name|SIGNAL
argument_list|(
name|currentItemChanged
argument_list|(
name|QListWidgetItem
operator|*
argument_list|,
name|QListWidgetItem
operator|*
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|win
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseClick
argument_list|(
name|list
operator|.
name|viewport
argument_list|()
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|list
operator|.
name|visualItemRect
argument_list|(
name|list
operator|.
name|item
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|ItemDelegate
class|class
name|ItemDelegate
super|:
specifier|public
name|QItemDelegate
block|{
public|public:
DECL|function|ItemDelegate
name|ItemDelegate
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QItemDelegate
argument_list|(
name|parent
argument_list|)
block|{}
DECL|function|createEditor
specifier|virtual
name|QWidget
modifier|*
name|createEditor
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QStyleOptionViewItem
modifier|&
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
specifier|const
block|{
name|QLineEdit
modifier|*
name|lineEdit
init|=
operator|new
name|QLineEdit
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|lineEdit
operator|->
name|setFrame
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCompleter
modifier|*
name|completer
init|=
operator|new
name|QCompleter
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"completer"
argument_list|,
name|lineEdit
argument_list|)
decl_stmt|;
name|completer
operator|->
name|setCompletionMode
argument_list|(
name|QCompleter
operator|::
name|InlineCompletion
argument_list|)
expr_stmt|;
name|lineEdit
operator|->
name|setCompleter
argument_list|(
name|completer
argument_list|)
expr_stmt|;
return|return
name|lineEdit
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|QTBUG14363_completerWithAnyKeyPressedEditTriggers
name|void
name|tst_QListWidget
operator|::
name|QTBUG14363_completerWithAnyKeyPressedEditTriggers
parameter_list|()
block|{
name|QListWidget
name|listWidget
decl_stmt|;
name|listWidget
operator|.
name|setEditTriggers
argument_list|(
name|QAbstractItemView
operator|::
name|AnyKeyPressed
argument_list|)
expr_stmt|;
name|listWidget
operator|.
name|setItemDelegate
argument_list|(
operator|new
name|ItemDelegate
argument_list|)
expr_stmt|;
name|QListWidgetItem
modifier|*
name|item
init|=
operator|new
name|QListWidgetItem
argument_list|(
name|QLatin1String
argument_list|(
literal|"select an item (don't start editing)"
argument_list|)
argument_list|,
operator|&
name|listWidget
argument_list|)
decl_stmt|;
name|item
operator|->
name|setFlags
argument_list|(
name|Qt
operator|::
name|ItemIsEnabled
operator||
name|Qt
operator|::
name|ItemIsSelectable
operator||
name|Qt
operator|::
name|ItemIsEditable
argument_list|)
expr_stmt|;
operator|new
name|QListWidgetItem
argument_list|(
name|QLatin1String
argument_list|(
literal|"try to type the letter 'c'"
argument_list|)
argument_list|,
operator|&
name|listWidget
argument_list|)
expr_stmt|;
operator|new
name|QListWidgetItem
argument_list|(
name|QLatin1String
argument_list|(
literal|"completer"
argument_list|)
argument_list|,
operator|&
name|listWidget
argument_list|)
expr_stmt|;
name|listWidget
operator|.
name|show
argument_list|()
expr_stmt|;
name|listWidget
operator|.
name|setCurrentItem
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
operator|&
name|listWidget
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowActive
argument_list|(
operator|&
name|listWidget
argument_list|)
argument_list|)
expr_stmt|;
name|listWidget
operator|.
name|setFocus
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qApp
operator|->
name|focusWidget
argument_list|()
argument_list|,
operator|&
name|listWidget
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|listWidget
operator|.
name|viewport
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_C
argument_list|)
expr_stmt|;
name|QLineEdit
modifier|*
name|le
init|=
name|qobject_cast
argument_list|<
name|QLineEdit
operator|*
argument_list|>
argument_list|(
name|listWidget
operator|.
name|itemWidget
argument_list|(
name|item
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|le
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|le
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"completer"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|le
operator|->
name|completer
argument_list|()
operator|->
name|currentCompletion
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"completer"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QListWidget
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qlistwidget.moc"
end_include
end_unit
