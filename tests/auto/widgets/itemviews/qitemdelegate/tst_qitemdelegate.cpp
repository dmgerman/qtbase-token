begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qabstractitemview.h>
end_include
begin_include
include|#
directive|include
file|<qstandarditemmodel.h>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qdatetimeedit.h>
end_include
begin_include
include|#
directive|include
file|<qspinbox.h>
end_include
begin_include
include|#
directive|include
file|<qlistview.h>
end_include
begin_include
include|#
directive|include
file|<qtableview.h>
end_include
begin_include
include|#
directive|include
file|<qtreeview.h>
end_include
begin_include
include|#
directive|include
file|<qheaderview.h>
end_include
begin_include
include|#
directive|include
file|<qitemeditorfactory.h>
end_include
begin_include
include|#
directive|include
file|<qlineedit.h>
end_include
begin_include
include|#
directive|include
file|<qvalidator.h>
end_include
begin_include
include|#
directive|include
file|<qtablewidget.h>
end_include
begin_include
include|#
directive|include
file|<qtreewidget.h>
end_include
begin_include
include|#
directive|include
file|<QItemDelegate>
end_include
begin_include
include|#
directive|include
file|<QComboBox>
end_include
begin_include
include|#
directive|include
file|<QAbstractItemDelegate>
end_include
begin_include
include|#
directive|include
file|<QTextEdit>
end_include
begin_include
include|#
directive|include
file|<QPlainTextEdit>
end_include
begin_include
include|#
directive|include
file|<QDialog>
end_include
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QAbstractItemDelegate::EndEditHint
argument_list|)
end_macro
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_include
include|#
directive|include
file|<windows.h>
end_include
begin_define
DECL|macro|Q_CHECK_PAINTEVENTS
define|#
directive|define
name|Q_CHECK_PAINTEVENTS
define|\
value|if (::SwitchDesktop(::GetThreadDesktop(::GetCurrentThreadId())) == 0) \         QSKIP("The widgets don't get the paint events");
end_define
begin_else
else|#
directive|else
end_else
begin_define
define|#
directive|define
name|Q_CHECK_PAINTEVENTS
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//Begin of class definitions
end_comment
begin_class
DECL|class|TestItemDelegate
class|class
name|TestItemDelegate
super|:
specifier|public
name|QItemDelegate
block|{
public|public:
DECL|function|TestItemDelegate
name|TestItemDelegate
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QItemDelegate
argument_list|(
name|parent
argument_list|)
block|{}
DECL|function|~TestItemDelegate
name|~
name|TestItemDelegate
parameter_list|()
block|{}
DECL|function|drawDisplay
name|void
name|drawDisplay
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QStyleOptionViewItem
modifier|&
name|option
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
specifier|const
block|{
name|displayText
operator|=
name|text
expr_stmt|;
name|displayFont
operator|=
name|option
operator|.
name|font
expr_stmt|;
name|QItemDelegate
operator|::
name|drawDisplay
argument_list|(
name|painter
argument_list|,
name|option
argument_list|,
name|rect
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
DECL|function|drawDecoration
name|void
name|drawDecoration
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QStyleOptionViewItem
modifier|&
name|option
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|)
specifier|const
block|{
name|decorationPixmap
operator|=
name|pixmap
expr_stmt|;
name|decorationRect
operator|=
name|rect
expr_stmt|;
name|QItemDelegate
operator|::
name|drawDecoration
argument_list|(
name|painter
argument_list|,
name|option
argument_list|,
name|rect
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
block|}
DECL|function|textRectangle
specifier|inline
name|QRect
name|textRectangle
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
specifier|const
name|QFont
modifier|&
name|font
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
specifier|const
block|{
return|return
name|QItemDelegate
operator|::
name|textRectangle
argument_list|(
name|painter
argument_list|,
name|rect
argument_list|,
name|font
argument_list|,
name|text
argument_list|)
return|;
block|}
DECL|function|doLayout
specifier|inline
name|void
name|doLayout
parameter_list|(
specifier|const
name|QStyleOptionViewItem
modifier|&
name|option
parameter_list|,
name|QRect
modifier|*
name|checkRect
parameter_list|,
name|QRect
modifier|*
name|pixmapRect
parameter_list|,
name|QRect
modifier|*
name|textRect
parameter_list|,
name|bool
name|hint
parameter_list|)
specifier|const
block|{
name|QItemDelegate
operator|::
name|doLayout
argument_list|(
name|option
argument_list|,
name|checkRect
argument_list|,
name|pixmapRect
argument_list|,
name|textRect
argument_list|,
name|hint
argument_list|)
expr_stmt|;
block|}
DECL|function|rect
specifier|inline
name|QRect
name|rect
parameter_list|(
specifier|const
name|QStyleOptionViewItem
modifier|&
name|option
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
return|return
name|QItemDelegate
operator|::
name|rect
argument_list|(
name|option
argument_list|,
name|index
argument_list|,
name|role
argument_list|)
return|;
block|}
DECL|function|eventFilter
specifier|inline
name|bool
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
return|return
name|QItemDelegate
operator|::
name|eventFilter
argument_list|(
name|object
argument_list|,
name|event
argument_list|)
return|;
block|}
DECL|function|editorEvent
specifier|inline
name|bool
name|editorEvent
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|,
name|QAbstractItemModel
modifier|*
name|model
parameter_list|,
specifier|const
name|QStyleOptionViewItem
modifier|&
name|option
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
return|return
name|QItemDelegate
operator|::
name|editorEvent
argument_list|(
name|event
argument_list|,
name|model
argument_list|,
name|option
argument_list|,
name|index
argument_list|)
return|;
block|}
comment|// stored values for testing
DECL|member|displayText
specifier|mutable
name|QString
name|displayText
decl_stmt|;
DECL|member|displayFont
specifier|mutable
name|QFont
name|displayFont
decl_stmt|;
DECL|member|decorationPixmap
specifier|mutable
name|QPixmap
name|decorationPixmap
decl_stmt|;
DECL|member|decorationRect
specifier|mutable
name|QRect
name|decorationRect
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|TestItemModel
class|class
name|TestItemModel
super|:
specifier|public
name|QAbstractTableModel
block|{
public|public:
DECL|enum|Roles
enum|enum
name|Roles
block|{
DECL|enumerator|PixmapTestRole
name|PixmapTestRole
block|,
DECL|enumerator|ImageTestRole
name|ImageTestRole
block|,
DECL|enumerator|IconTestRole
name|IconTestRole
block|,
DECL|enumerator|ColorTestRole
name|ColorTestRole
block|,
DECL|enumerator|DoubleTestRole
name|DoubleTestRole
block|}
enum|;
DECL|function|TestItemModel
name|TestItemModel
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
member_init_list|:
name|size
argument_list|(
name|size
argument_list|)
block|{}
DECL|function|~TestItemModel
name|~
name|TestItemModel
parameter_list|()
block|{}
DECL|function|rowCount
name|int
name|rowCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|parent
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
DECL|function|columnCount
name|int
name|columnCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|parent
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
DECL|function|data
name|QVariant
name|data
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|index
argument_list|)
expr_stmt|;
specifier|static
name|QPixmap
name|pixmap
argument_list|(
name|size
argument_list|)
decl_stmt|;
specifier|static
name|QImage
name|image
argument_list|(
name|size
argument_list|,
name|QImage
operator|::
name|Format_Mono
argument_list|)
decl_stmt|;
specifier|static
name|QIcon
name|icon
argument_list|(
name|pixmap
argument_list|)
decl_stmt|;
specifier|static
name|QColor
name|color
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|role
condition|)
block|{
case|case
name|PixmapTestRole
case|:
return|return
name|pixmap
return|;
case|case
name|ImageTestRole
case|:
return|return
name|image
return|;
case|case
name|IconTestRole
case|:
return|return
name|icon
return|;
case|case
name|ColorTestRole
case|:
return|return
name|color
return|;
case|case
name|DoubleTestRole
case|:
return|return
literal|10.00000001
return|;
default|default:
break|break;
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
private|private:
DECL|member|size
name|QSize
name|size
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|tst_QItemDelegate
class|class
name|tst_QItemDelegate
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QItemDelegate
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QItemDelegate
parameter_list|()
destructor_decl|;
private|private
name|slots
private|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|textRectangle_data
parameter_list|()
function_decl|;
name|void
name|textRectangle
parameter_list|()
function_decl|;
name|void
name|sizeHint_data
parameter_list|()
function_decl|;
name|void
name|sizeHint
parameter_list|()
function_decl|;
name|void
name|editorKeyPress_data
parameter_list|()
function_decl|;
name|void
name|editorKeyPress
parameter_list|()
function_decl|;
name|void
name|doubleEditorNegativeInput
parameter_list|()
function_decl|;
name|void
name|font_data
parameter_list|()
function_decl|;
name|void
name|font
parameter_list|()
function_decl|;
name|void
name|doLayout_data
parameter_list|()
function_decl|;
name|void
name|doLayout
parameter_list|()
function_decl|;
name|void
name|rect_data
parameter_list|()
function_decl|;
name|void
name|rect
parameter_list|()
function_decl|;
name|void
name|eventFilter
parameter_list|()
function_decl|;
name|void
name|dateTimeEditor_data
parameter_list|()
function_decl|;
name|void
name|dateTimeEditor
parameter_list|()
function_decl|;
name|void
name|dateAndTimeEditorTest2
parameter_list|()
function_decl|;
name|void
name|decoration_data
parameter_list|()
function_decl|;
name|void
name|decoration
parameter_list|()
function_decl|;
name|void
name|editorEvent_data
parameter_list|()
function_decl|;
name|void
name|editorEvent
parameter_list|()
function_decl|;
name|void
name|enterKey_data
parameter_list|()
function_decl|;
name|void
name|enterKey
parameter_list|()
function_decl|;
name|void
name|comboBox
parameter_list|()
function_decl|;
name|void
name|task257859_finalizeEdit
parameter_list|()
function_decl|;
name|void
name|QTBUG4435_keepSelectionOnCheck
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_comment
comment|//End of class definitions
end_comment
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QItemDelegate
operator|::
name|getSetCheck
parameter_list|()
block|{
name|QItemDelegate
name|obj1
decl_stmt|;
comment|// QItemEditorFactory * QItemDelegate::itemEditorFactory()
comment|// void QItemDelegate::setItemEditorFactory(QItemEditorFactory *)
name|QItemEditorFactory
modifier|*
name|var1
init|=
operator|new
name|QItemEditorFactory
decl_stmt|;
name|obj1
operator|.
name|setItemEditorFactory
argument_list|(
name|var1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|var1
argument_list|,
name|obj1
operator|.
name|itemEditorFactory
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setItemEditorFactory
argument_list|(
operator|(
name|QItemEditorFactory
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|QItemEditorFactory
operator|*
operator|)
literal|0
argument_list|,
name|obj1
operator|.
name|itemEditorFactory
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|var1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|obj1
operator|.
name|hasClipping
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setClipping
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|obj1
operator|.
name|hasClipping
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setClipping
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|obj1
operator|.
name|hasClipping
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|tst_QItemDelegate
name|tst_QItemDelegate
operator|::
name|tst_QItemDelegate
parameter_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~tst_QItemDelegate
name|tst_QItemDelegate
operator|::
name|~
name|tst_QItemDelegate
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|initTestCase
name|void
name|tst_QItemDelegate
operator|::
name|initTestCase
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QItemDelegate
operator|::
name|cleanupTestCase
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|init
name|void
name|tst_QItemDelegate
operator|::
name|init
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QItemDelegate
operator|::
name|cleanup
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|textRectangle_data
name|void
name|tst_QItemDelegate
operator|::
name|textRectangle_data
parameter_list|()
block|{
name|QFont
name|font
decl_stmt|;
name|QFontMetrics
name|fontMetrics
argument_list|(
name|font
argument_list|)
decl_stmt|;
name|int
name|pm
init|=
name|QApplication
operator|::
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_FocusFrameHMargin
argument_list|)
decl_stmt|;
name|int
name|margins
init|=
literal|2
operator|*
operator|(
name|pm
operator|+
literal|1
operator|)
decl_stmt|;
comment|// margin on each side of the text
name|int
name|height
init|=
name|fontMetrics
operator|.
name|height
argument_list|()
decl_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"text"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QRect
argument_list|>
argument_list|(
literal|"rect"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QRect
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QRect
argument_list|()
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|margins
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|textRectangle
name|void
name|tst_QItemDelegate
operator|::
name|textRectangle
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QRect
argument_list|,
name|rect
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QRect
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QFont
name|font
decl_stmt|;
name|TestItemDelegate
name|delegate
decl_stmt|;
name|QRect
name|result
init|=
name|delegate
operator|.
name|textRectangle
argument_list|(
literal|0
argument_list|,
name|rect
argument_list|,
name|font
argument_list|,
name|text
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sizeHint_data
name|void
name|tst_QItemDelegate
operator|::
name|sizeHint_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QSize
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QFont
name|font
decl_stmt|;
name|QFontMetrics
name|fontMetrics
argument_list|(
name|font
argument_list|)
decl_stmt|;
comment|//int m = QApplication::style()->pixelMetric(QStyle::PM_FocusFrameHMargin) + 1;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QSize
argument_list|(
literal|0
argument_list|,
name|fontMetrics
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sizeHint
name|void
name|tst_QItemDelegate
operator|::
name|sizeHint
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QSize
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QModelIndex
name|index
decl_stmt|;
name|QStyleOptionViewItem
name|option
decl_stmt|;
name|TestItemDelegate
name|delegate
decl_stmt|;
name|QSize
name|result
init|=
name|delegate
operator|.
name|sizeHint
argument_list|(
name|option
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|editorKeyPress_data
name|void
name|tst_QItemDelegate
operator|::
name|editorKeyPress_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"initial"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"foo bar"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|editorKeyPress
name|void
name|tst_QItemDelegate
operator|::
name|editorKeyPress
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|initial
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QStandardItemModel
name|model
decl_stmt|;
name|model
operator|.
name|appendRow
argument_list|(
operator|new
name|QStandardItem
argument_list|(
name|initial
argument_list|)
argument_list|)
expr_stmt|;
name|QListView
name|view
decl_stmt|;
name|view
operator|.
name|setModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|view
operator|.
name|show
argument_list|()
expr_stmt|;
name|QModelIndex
name|index
init|=
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|view
operator|.
name|setCurrentIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
comment|// the editor will only selectAll on the current index
name|view
operator|.
name|edit
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QLineEdit
modifier|*
argument_list|>
name|lineEditors
init|=
name|qFindChildren
argument_list|<
name|QLineEdit
operator|*
argument_list|>
argument_list|(
name|view
operator|.
name|viewport
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|lineEditors
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QLineEdit
modifier|*
name|editor
init|=
name|lineEditors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|editor
operator|->
name|selectedText
argument_list|()
argument_list|,
name|initial
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClicks
argument_list|(
name|editor
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|editor
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|index
operator|.
name|data
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|doubleEditorNegativeInput
name|void
name|tst_QItemDelegate
operator|::
name|doubleEditorNegativeInput
parameter_list|()
block|{
name|QStandardItemModel
name|model
decl_stmt|;
name|QStandardItem
modifier|*
name|item
init|=
operator|new
name|QStandardItem
decl_stmt|;
name|item
operator|->
name|setData
argument_list|(
literal|10.0
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
expr_stmt|;
name|model
operator|.
name|appendRow
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|QListView
name|view
decl_stmt|;
name|view
operator|.
name|setModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|view
operator|.
name|show
argument_list|()
expr_stmt|;
name|QModelIndex
name|index
init|=
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|view
operator|.
name|setCurrentIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
comment|// the editor will only selectAll on the current index
name|view
operator|.
name|edit
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QDoubleSpinBox
modifier|*
argument_list|>
name|editors
init|=
name|qFindChildren
argument_list|<
name|QDoubleSpinBox
operator|*
argument_list|>
argument_list|(
name|view
operator|.
name|viewport
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|editors
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QDoubleSpinBox
modifier|*
name|editor
init|=
name|editors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|editor
operator|->
name|value
argument_list|()
argument_list|,
name|double
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|editor
argument_list|,
name|Qt
operator|::
name|Key_Minus
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|editor
argument_list|,
name|Qt
operator|::
name|Key_1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|editor
argument_list|,
name|Qt
operator|::
name|Key_0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|editor
argument_list|,
name|Qt
operator|::
name|Key_Comma
argument_list|)
expr_stmt|;
comment|//support both , and . locales
name|QTest
operator|::
name|keyClick
argument_list|(
name|editor
argument_list|,
name|Qt
operator|::
name|Key_Period
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|editor
argument_list|,
name|Qt
operator|::
name|Key_0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|editor
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|index
operator|.
name|data
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"-10"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|font_data
name|void
name|tst_QItemDelegate
operator|::
name|font_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"itemText"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"properties"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QFont
argument_list|>
argument_list|(
literal|"itemFont"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QFont
argument_list|>
argument_list|(
literal|"viewFont"
argument_list|)
expr_stmt|;
name|QFont
name|itemFont
decl_stmt|;
name|itemFont
operator|.
name|setItalic
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QFont
name|viewFont
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"foo italic"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"italic"
argument_list|)
operator|<<
name|itemFont
operator|<<
name|viewFont
expr_stmt|;
name|itemFont
operator|.
name|setItalic
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"foo bold"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bold"
argument_list|)
operator|<<
name|itemFont
operator|<<
name|viewFont
expr_stmt|;
name|itemFont
operator|.
name|setFamily
argument_list|(
name|itemFont
operator|.
name|defaultFamily
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"foo family"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"family"
argument_list|)
operator|<<
name|itemFont
operator|<<
name|viewFont
expr_stmt|;
block|}
end_function
begin_function
DECL|function|font
name|void
name|tst_QItemDelegate
operator|::
name|font
parameter_list|()
block|{
name|Q_CHECK_PAINTEVENTS
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|itemText
argument_list|)
decl_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QFont
argument_list|,
name|itemFont
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QFont
argument_list|,
name|viewFont
argument_list|)
expr_stmt|;
name|QTableWidget
name|table
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|table
operator|.
name|setFont
argument_list|(
name|viewFont
argument_list|)
expr_stmt|;
name|TestItemDelegate
modifier|*
name|delegate
init|=
operator|new
name|TestItemDelegate
argument_list|(
operator|&
name|table
argument_list|)
decl_stmt|;
name|table
operator|.
name|setItemDelegate
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|table
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|QTableWidgetItem
modifier|*
name|item
init|=
operator|new
name|QTableWidgetItem
decl_stmt|;
name|item
operator|->
name|setText
argument_list|(
name|itemText
argument_list|)
expr_stmt|;
name|item
operator|->
name|setFont
argument_list|(
name|itemFont
argument_list|)
expr_stmt|;
name|table
operator|.
name|setItem
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|delegate
operator|->
name|displayText
argument_list|,
name|item
operator|->
name|text
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|properties
operator|.
name|contains
argument_list|(
literal|"italic"
argument_list|)
condition|)
block|{
name|QCOMPARE
argument_list|(
name|delegate
operator|->
name|displayFont
operator|.
name|italic
argument_list|()
argument_list|,
name|item
operator|->
name|font
argument_list|()
operator|.
name|italic
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|properties
operator|.
name|contains
argument_list|(
literal|"bold"
argument_list|)
condition|)
block|{
name|QCOMPARE
argument_list|(
name|delegate
operator|->
name|displayFont
operator|.
name|bold
argument_list|()
argument_list|,
name|item
operator|->
name|font
argument_list|()
operator|.
name|bold
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|properties
operator|.
name|contains
argument_list|(
literal|"family"
argument_list|)
condition|)
block|{
name|QCOMPARE
argument_list|(
name|delegate
operator|->
name|displayFont
operator|.
name|family
argument_list|()
argument_list|,
name|item
operator|->
name|font
argument_list|()
operator|.
name|family
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|//Testing the different QRect created by the doLayout function.
end_comment
begin_comment
comment|//Tests are made with different values for the QStyleOptionViewItem properties:
end_comment
begin_comment
comment|//decorationPosition and position.
end_comment
begin_function
DECL|function|doLayout_data
name|void
name|tst_QItemDelegate
operator|::
name|doLayout_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"position"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"direction"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"hint"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QRect
argument_list|>
argument_list|(
literal|"itemRect"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QRect
argument_list|>
argument_list|(
literal|"checkRect"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QRect
argument_list|>
argument_list|(
literal|"pixmapRect"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QRect
argument_list|>
argument_list|(
literal|"textRect"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QRect
argument_list|>
argument_list|(
literal|"expectedCheckRect"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QRect
argument_list|>
argument_list|(
literal|"expectedPixmapRect"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QRect
argument_list|>
argument_list|(
literal|"expectedTextRect"
argument_list|)
expr_stmt|;
name|int
name|m
init|=
name|QApplication
operator|::
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_FocusFrameHMargin
argument_list|)
operator|+
literal|1
decl_stmt|;
comment|//int item = 400;
comment|//int check = 50;
comment|//int pixmap = 1000;
comment|//int text = 400;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"top, left to right, hint"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QStyleOptionViewItem
operator|::
name|Top
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|LeftToRight
operator|<<
literal|true
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|400
argument_list|,
literal|400
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|50
argument_list|,
literal|50
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|1000
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|400
argument_list|,
literal|400
argument_list|)
operator|<<
name|QRect
argument_list|(
name|m
argument_list|,
literal|0
argument_list|,
literal|50
operator|+
literal|2
operator|*
name|m
argument_list|,
literal|1000
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|50
operator|+
literal|2
operator|*
name|m
argument_list|,
literal|0
argument_list|,
literal|1000
operator|+
literal|2
operator|*
name|m
argument_list|,
literal|1000
operator|+
name|m
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|50
operator|+
literal|2
operator|*
name|m
argument_list|,
literal|1000
operator|+
name|m
argument_list|,
literal|1000
operator|+
literal|2
operator|*
name|m
argument_list|,
literal|400
argument_list|)
expr_stmt|;
comment|/*     QTest::newRow("top, left to right, limited")<< (int)QStyleOptionViewItem::Top<< (int)Qt::LeftToRight<< false<< QRect(0, 0, 400, 400)<< QRect(0, 0, 50, 50)<< QRect(0, 0, 1000, 1000)<< QRect(0, 0, 400, 400)<< QRect(m, (400/2) - (50/2), 50, 50)<< QRect(50 + 2*m, 0, 1000, 1000)<< QRect(50 + 2*m, 1000 + m, 400 - (50 + 2*m), 400 - 1000 - m);     */
name|QTest
operator|::
name|newRow
argument_list|(
literal|"top, right to left, hint"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QStyleOptionViewItem
operator|::
name|Top
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|RightToLeft
operator|<<
literal|true
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|400
argument_list|,
literal|400
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|50
argument_list|,
literal|50
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|1000
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|400
argument_list|,
literal|400
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|1000
operator|+
literal|2
operator|*
name|m
argument_list|,
literal|0
argument_list|,
literal|50
operator|+
literal|2
operator|*
name|m
argument_list|,
literal|1000
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1000
operator|+
literal|2
operator|*
name|m
argument_list|,
literal|1000
operator|+
name|m
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|1000
operator|+
name|m
argument_list|,
literal|1000
operator|+
literal|2
operator|*
name|m
argument_list|,
literal|400
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bottom, left to right, hint"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QStyleOptionViewItem
operator|::
name|Bottom
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|LeftToRight
operator|<<
literal|true
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|400
argument_list|,
literal|400
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|50
argument_list|,
literal|50
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|1000
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|400
argument_list|,
literal|400
argument_list|)
operator|<<
name|QRect
argument_list|(
name|m
argument_list|,
literal|0
argument_list|,
literal|50
operator|+
literal|2
operator|*
name|m
argument_list|,
literal|1000
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|50
operator|+
literal|2
operator|*
name|m
argument_list|,
literal|400
operator|+
name|m
argument_list|,
literal|1000
operator|+
literal|2
operator|*
name|m
argument_list|,
literal|1000
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|50
operator|+
literal|2
operator|*
name|m
argument_list|,
literal|0
argument_list|,
literal|1000
operator|+
literal|2
operator|*
name|m
argument_list|,
literal|400
operator|+
name|m
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bottom, right to left, hint"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QStyleOptionViewItem
operator|::
name|Bottom
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|RightToLeft
operator|<<
literal|true
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|400
argument_list|,
literal|400
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|50
argument_list|,
literal|50
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|1000
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|400
argument_list|,
literal|400
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|1000
operator|+
literal|2
operator|*
name|m
argument_list|,
literal|0
argument_list|,
literal|50
operator|+
literal|2
operator|*
name|m
argument_list|,
literal|1000
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|400
operator|+
name|m
argument_list|,
literal|1000
operator|+
literal|2
operator|*
name|m
argument_list|,
literal|1000
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1000
operator|+
literal|2
operator|*
name|m
argument_list|,
literal|400
operator|+
name|m
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"left, left to right, hint"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QStyleOptionViewItem
operator|::
name|Left
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|LeftToRight
operator|<<
literal|true
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|400
argument_list|,
literal|400
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|50
argument_list|,
literal|50
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|1000
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|400
argument_list|,
literal|400
argument_list|)
operator|<<
name|QRect
argument_list|(
name|m
argument_list|,
literal|0
argument_list|,
literal|50
operator|+
literal|2
operator|*
name|m
argument_list|,
literal|1000
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|50
operator|+
literal|2
operator|*
name|m
argument_list|,
literal|0
argument_list|,
literal|1000
operator|+
literal|2
operator|*
name|m
argument_list|,
literal|1000
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|1050
operator|+
literal|4
operator|*
name|m
argument_list|,
literal|0
argument_list|,
literal|400
operator|+
literal|2
operator|*
name|m
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"left, right to left, hint"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QStyleOptionViewItem
operator|::
name|Left
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|RightToLeft
operator|<<
literal|true
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|400
argument_list|,
literal|400
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|50
argument_list|,
literal|50
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|1000
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|400
argument_list|,
literal|400
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|1400
operator|+
literal|4
operator|*
name|m
argument_list|,
literal|0
argument_list|,
literal|50
operator|+
literal|2
operator|*
name|m
argument_list|,
literal|1000
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|400
operator|+
literal|2
operator|*
name|m
argument_list|,
literal|0
argument_list|,
literal|1000
operator|+
literal|2
operator|*
name|m
argument_list|,
literal|1000
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|400
operator|+
literal|2
operator|*
name|m
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"right, left to right, hint"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QStyleOptionViewItem
operator|::
name|Right
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|LeftToRight
operator|<<
literal|true
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|400
argument_list|,
literal|400
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|50
argument_list|,
literal|50
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|1000
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|400
argument_list|,
literal|400
argument_list|)
operator|<<
name|QRect
argument_list|(
name|m
argument_list|,
literal|0
argument_list|,
literal|50
operator|+
literal|2
operator|*
name|m
argument_list|,
literal|1000
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|450
operator|+
literal|4
operator|*
name|m
argument_list|,
literal|0
argument_list|,
literal|1000
operator|+
literal|2
operator|*
name|m
argument_list|,
literal|1000
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|50
operator|+
literal|2
operator|*
name|m
argument_list|,
literal|0
argument_list|,
literal|400
operator|+
literal|2
operator|*
name|m
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"right, right to left, hint"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QStyleOptionViewItem
operator|::
name|Right
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|RightToLeft
operator|<<
literal|true
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|400
argument_list|,
literal|400
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|50
argument_list|,
literal|50
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|1000
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|400
argument_list|,
literal|400
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|1400
operator|+
literal|4
operator|*
name|m
argument_list|,
literal|0
argument_list|,
literal|50
operator|+
literal|2
operator|*
name|m
argument_list|,
literal|1000
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1000
operator|+
literal|2
operator|*
name|m
argument_list|,
literal|1000
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|1000
operator|+
literal|2
operator|*
name|m
argument_list|,
literal|0
argument_list|,
literal|400
operator|+
literal|2
operator|*
name|m
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|doLayout
name|void
name|tst_QItemDelegate
operator|::
name|doLayout
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|direction
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|hint
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QRect
argument_list|,
name|itemRect
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QRect
argument_list|,
name|checkRect
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QRect
argument_list|,
name|pixmapRect
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QRect
argument_list|,
name|textRect
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QRect
argument_list|,
name|expectedCheckRect
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QRect
argument_list|,
name|expectedPixmapRect
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QRect
argument_list|,
name|expectedTextRect
argument_list|)
expr_stmt|;
name|TestItemDelegate
name|delegate
decl_stmt|;
name|QStyleOptionViewItem
name|option
decl_stmt|;
name|option
operator|.
name|rect
operator|=
name|itemRect
expr_stmt|;
name|option
operator|.
name|decorationPosition
operator|=
operator|(
name|QStyleOptionViewItem
operator|::
name|Position
operator|)
name|position
expr_stmt|;
name|option
operator|.
name|direction
operator|=
operator|(
name|Qt
operator|::
name|LayoutDirection
operator|)
name|direction
expr_stmt|;
name|delegate
operator|.
name|doLayout
argument_list|(
name|option
argument_list|,
operator|&
name|checkRect
argument_list|,
operator|&
name|pixmapRect
argument_list|,
operator|&
name|textRect
argument_list|,
name|hint
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|checkRect
argument_list|,
name|expectedCheckRect
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pixmapRect
argument_list|,
name|expectedPixmapRect
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|textRect
argument_list|,
name|expectedTextRect
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rect_data
name|void
name|tst_QItemDelegate
operator|::
name|rect_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"role"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QSize
argument_list|>
argument_list|(
literal|"size"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QRect
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pixmap"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|TestItemModel
operator|::
name|PixmapTestRole
operator|<<
name|QSize
argument_list|(
literal|200
argument_list|,
literal|300
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|200
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"image"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|TestItemModel
operator|::
name|ImageTestRole
operator|<<
name|QSize
argument_list|(
literal|200
argument_list|,
literal|300
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|200
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"icon"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|TestItemModel
operator|::
name|IconTestRole
operator|<<
name|QSize
argument_list|(
literal|200
argument_list|,
literal|300
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|200
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"color"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|TestItemModel
operator|::
name|ColorTestRole
operator|<<
name|QSize
argument_list|(
literal|200
argument_list|,
literal|300
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|200
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"double"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|TestItemModel
operator|::
name|DoubleTestRole
operator|<<
name|QSize
argument_list|()
operator|<<
name|QRect
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rect
name|void
name|tst_QItemDelegate
operator|::
name|rect
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|role
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QSize
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QRect
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|TestItemModel
name|model
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|QStyleOptionViewItem
name|option
decl_stmt|;
name|TestItemDelegate
name|delegate
decl_stmt|;
name|option
operator|.
name|decorationSize
operator|=
name|size
expr_stmt|;
if|if
condition|(
name|role
operator|==
name|TestItemModel
operator|::
name|DoubleTestRole
condition|)
name|expected
operator|=
name|delegate
operator|.
name|textRectangle
argument_list|(
literal|0
argument_list|,
name|QRect
argument_list|()
argument_list|,
name|QFont
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"10.00000001"
argument_list|)
argument_list|)
expr_stmt|;
name|QModelIndex
name|index
init|=
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|index
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QRect
name|result
init|=
name|delegate
operator|.
name|rect
argument_list|(
name|option
argument_list|,
name|index
argument_list|,
name|role
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//TODO : Add a test for the keyPress event
end_comment
begin_comment
comment|//with Qt::Key_Enter and Qt::Key_Return
end_comment
begin_function
DECL|function|eventFilter
name|void
name|tst_QItemDelegate
operator|::
name|eventFilter
parameter_list|()
block|{
name|TestItemDelegate
name|delegate
decl_stmt|;
name|QWidget
name|widget
decl_stmt|;
name|QEvent
modifier|*
name|event
decl_stmt|;
name|qRegisterMetaType
argument_list|<
name|QAbstractItemDelegate
operator|::
name|EndEditHint
argument_list|>
argument_list|(
literal|"QAbstractItemDelegate::EndEditHint"
argument_list|)
expr_stmt|;
name|QSignalSpy
name|commitDataSpy
argument_list|(
operator|&
name|delegate
argument_list|,
name|SIGNAL
argument_list|(
name|commitData
argument_list|(
name|QWidget
operator|*
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|closeEditorSpy
argument_list|(
operator|&
name|delegate
argument_list|,
name|SIGNAL
argument_list|(
name|closeEditor
argument_list|(
name|QWidget
operator|*
argument_list|,
name|QAbstractItemDelegate
operator|::
name|EndEditHint
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|//Subtest KeyPress
comment|//For each test we send a key event and check if signals were emitted.
name|event
operator|=
operator|new
name|QKeyEvent
argument_list|(
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|Qt
operator|::
name|Key_Tab
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|delegate
operator|.
name|eventFilter
argument_list|(
operator|&
name|widget
argument_list|,
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|closeEditorSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|commitDataSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
operator|delete
name|event
expr_stmt|;
name|event
operator|=
operator|new
name|QKeyEvent
argument_list|(
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|Qt
operator|::
name|Key_Backtab
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|delegate
operator|.
name|eventFilter
argument_list|(
operator|&
name|widget
argument_list|,
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|closeEditorSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|commitDataSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
operator|delete
name|event
expr_stmt|;
name|event
operator|=
operator|new
name|QKeyEvent
argument_list|(
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|Qt
operator|::
name|Key_Escape
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|delegate
operator|.
name|eventFilter
argument_list|(
operator|&
name|widget
argument_list|,
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|closeEditorSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|commitDataSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
operator|delete
name|event
expr_stmt|;
name|event
operator|=
operator|new
name|QKeyEvent
argument_list|(
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|delegate
operator|.
name|eventFilter
argument_list|(
operator|&
name|widget
argument_list|,
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|closeEditorSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|commitDataSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
operator|delete
name|event
expr_stmt|;
comment|//Subtest focusEvent
name|event
operator|=
operator|new
name|QFocusEvent
argument_list|(
name|QEvent
operator|::
name|FocusOut
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|delegate
operator|.
name|eventFilter
argument_list|(
operator|&
name|widget
argument_list|,
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|closeEditorSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|commitDataSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
operator|delete
name|event
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dateTimeEditor_data
name|void
name|tst_QItemDelegate
operator|::
name|dateTimeEditor_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QTime
argument_list|>
argument_list|(
literal|"time"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QDate
argument_list|>
argument_list|(
literal|"date"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|7
argument_list|,
literal|16
argument_list|,
literal|34
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|2006
argument_list|,
literal|10
argument_list|,
literal|31
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dateTimeEditor
name|void
name|tst_QItemDelegate
operator|::
name|dateTimeEditor
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QTime
argument_list|,
name|time
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QDate
argument_list|,
name|date
argument_list|)
expr_stmt|;
name|QTableWidgetItem
modifier|*
name|item1
init|=
operator|new
name|QTableWidgetItem
decl_stmt|;
name|item1
operator|->
name|setData
argument_list|(
name|Qt
operator|::
name|DisplayRole
argument_list|,
name|time
argument_list|)
expr_stmt|;
name|QTableWidgetItem
modifier|*
name|item2
init|=
operator|new
name|QTableWidgetItem
decl_stmt|;
name|item2
operator|->
name|setData
argument_list|(
name|Qt
operator|::
name|DisplayRole
argument_list|,
name|date
argument_list|)
expr_stmt|;
name|QTableWidgetItem
modifier|*
name|item3
init|=
operator|new
name|QTableWidgetItem
decl_stmt|;
name|item3
operator|->
name|setData
argument_list|(
name|Qt
operator|::
name|DisplayRole
argument_list|,
name|QDateTime
argument_list|(
name|date
argument_list|,
name|time
argument_list|)
argument_list|)
expr_stmt|;
name|QTableWidget
name|widget
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|widget
operator|.
name|setItem
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|item1
argument_list|)
expr_stmt|;
name|widget
operator|.
name|setItem
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|item2
argument_list|)
expr_stmt|;
name|widget
operator|.
name|setItem
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
name|item3
argument_list|)
expr_stmt|;
name|widget
operator|.
name|show
argument_list|()
expr_stmt|;
name|widget
operator|.
name|editItem
argument_list|(
name|item1
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QTimeEdit
modifier|*
name|timeEditor
init|=
name|qFindChild
argument_list|<
name|QTimeEdit
operator|*
argument_list|>
argument_list|(
name|widget
operator|.
name|viewport
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|timeEditor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|timeEditor
operator|->
name|time
argument_list|()
argument_list|,
name|time
argument_list|)
expr_stmt|;
comment|// The data must actually be different in order for the model
comment|// to be updated.
name|timeEditor
operator|->
name|setTime
argument_list|(
name|time
operator|.
name|addSecs
argument_list|(
literal|60
argument_list|)
argument_list|)
expr_stmt|;
name|widget
operator|.
name|clearFocus
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
operator|&
name|widget
argument_list|)
expr_stmt|;
name|widget
operator|.
name|setFocus
argument_list|()
expr_stmt|;
name|widget
operator|.
name|editItem
argument_list|(
name|item2
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QDateEdit
modifier|*
name|dateEditor
init|=
name|qFindChild
argument_list|<
name|QDateEdit
operator|*
argument_list|>
argument_list|(
name|widget
operator|.
name|viewport
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|dateEditor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dateEditor
operator|->
name|date
argument_list|()
argument_list|,
name|date
argument_list|)
expr_stmt|;
name|dateEditor
operator|->
name|setDate
argument_list|(
name|date
operator|.
name|addDays
argument_list|(
literal|60
argument_list|)
argument_list|)
expr_stmt|;
name|widget
operator|.
name|clearFocus
argument_list|()
expr_stmt|;
name|widget
operator|.
name|setFocus
argument_list|()
expr_stmt|;
name|widget
operator|.
name|editItem
argument_list|(
name|item3
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QDateTimeEdit
modifier|*
argument_list|>
name|dateTimeEditors
init|=
name|widget
operator|.
name|findChildren
argument_list|<
name|QDateTimeEdit
operator|*
argument_list|>
argument_list|()
decl_stmt|;
name|QDateTimeEdit
modifier|*
name|dateTimeEditor
init|=
literal|0
decl_stmt|;
foreach|foreach
control|(
name|dateTimeEditor
init|,
name|dateTimeEditors
control|)
if|if
condition|(
name|dateTimeEditor
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"QDateTimeEdit"
argument_list|)
condition|)
break|break;
name|QVERIFY
argument_list|(
name|dateTimeEditor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dateTimeEditor
operator|->
name|date
argument_list|()
argument_list|,
name|date
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dateTimeEditor
operator|->
name|time
argument_list|()
argument_list|,
name|time
argument_list|)
expr_stmt|;
name|dateTimeEditor
operator|->
name|setTime
argument_list|(
name|time
operator|.
name|addSecs
argument_list|(
literal|600
argument_list|)
argument_list|)
expr_stmt|;
name|widget
operator|.
name|clearFocus
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|item1
operator|->
name|data
argument_list|(
name|Qt
operator|::
name|EditRole
argument_list|)
operator|.
name|userType
argument_list|()
operator|==
name|QMetaType
operator|::
name|QTime
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|item2
operator|->
name|data
argument_list|(
name|Qt
operator|::
name|EditRole
argument_list|)
operator|.
name|userType
argument_list|()
operator|==
name|QMetaType
operator|::
name|QDate
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|item3
operator|->
name|data
argument_list|(
name|Qt
operator|::
name|EditRole
argument_list|)
operator|.
name|userType
argument_list|()
operator|==
name|QMetaType
operator|::
name|QDateTime
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// A delegate where we can either enforce a certain widget or use the standard widget.
end_comment
begin_class
DECL|class|ChooseEditorDelegate
class|class
name|ChooseEditorDelegate
super|:
specifier|public
name|QItemDelegate
block|{
public|public:
DECL|function|createEditor
specifier|virtual
name|QWidget
modifier|*
name|createEditor
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QStyleOptionViewItem
modifier|&
name|o
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|i
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|m_editor
condition|)
block|{
name|m_editor
operator|->
name|setParent
argument_list|(
name|parent
argument_list|)
expr_stmt|;
return|return
name|m_editor
return|;
block|}
name|m_editor
operator|=
name|QItemDelegate
operator|::
name|createEditor
argument_list|(
name|parent
argument_list|,
name|o
argument_list|,
name|i
argument_list|)
expr_stmt|;
return|return
name|m_editor
return|;
block|}
DECL|function|destroyEditor
specifier|virtual
name|void
name|destroyEditor
parameter_list|(
name|QWidget
modifier|*
name|editor
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|i
parameter_list|)
specifier|const
block|{
comment|// This is a reimplementation of QAbstractItemDelegate::destroyEditor just set the variable m_editor to 0
comment|// The only reason we do this is to avoid the not recommended direct delete of editor (destroyEditor uses deleteLater)
name|QItemDelegate
operator|::
name|destroyEditor
argument_list|(
name|editor
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// Allow destroy
name|m_editor
operator|=
literal|0
expr_stmt|;
comment|// but clear the variable
block|}
DECL|function|ChooseEditorDelegate
name|ChooseEditorDelegate
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QItemDelegate
argument_list|(
name|parent
argument_list|)
block|{ }
DECL|function|setNextOpenEditor
name|void
name|setNextOpenEditor
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
name|m_editor
operator|=
name|w
expr_stmt|;
block|}
DECL|function|currentEditor
name|QWidget
modifier|*
name|currentEditor
parameter_list|()
specifier|const
block|{
return|return
name|m_editor
return|;
block|}
private|private:
DECL|member|m_editor
specifier|mutable
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|m_editor
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|// We could (nearly) use a normal QTableView but in order not to add many seconds to the autotest
end_comment
begin_comment
comment|// (and save a few lines) we do this
end_comment
begin_class
DECL|class|FastEditItemView
class|class
name|FastEditItemView
super|:
specifier|public
name|QTableView
block|{
public|public:
DECL|function|fastEdit
name|QWidget
modifier|*
name|fastEdit
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|i
parameter_list|)
comment|// Consider this as QAbstractItemView::edit( )
block|{
name|QWidget
modifier|*
name|v
init|=
name|itemDelegate
argument_list|()
operator|->
name|createEditor
argument_list|(
name|viewport
argument_list|()
argument_list|,
name|viewOptions
argument_list|()
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
condition|)
name|itemDelegate
argument_list|()
operator|->
name|setEditorData
argument_list|(
name|v
argument_list|,
name|i
argument_list|)
expr_stmt|;
return|return
name|v
return|;
block|}
DECL|function|doCloseEditor
name|void
name|doCloseEditor
parameter_list|(
name|QWidget
modifier|*
name|editor
parameter_list|)
comment|// Consider this as QAbstractItemView::closeEditor( )
block|{
name|itemDelegate
argument_list|()
operator|->
name|destroyEditor
argument_list|(
name|editor
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|dateAndTimeEditorTest2
name|void
name|tst_QItemDelegate
operator|::
name|dateAndTimeEditorTest2
parameter_list|()
block|{
comment|// prepare createeditor
name|FastEditItemView
name|w
decl_stmt|;
name|QStandardItemModel
name|s
decl_stmt|;
name|s
operator|.
name|setRowCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|s
operator|.
name|setColumnCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|w
operator|.
name|setModel
argument_list|(
operator|&
name|s
argument_list|)
expr_stmt|;
name|ChooseEditorDelegate
modifier|*
name|d
init|=
operator|new
name|ChooseEditorDelegate
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
name|w
operator|.
name|setItemDelegate
argument_list|(
name|d
argument_list|)
expr_stmt|;
specifier|const
name|QTime
name|time1
argument_list|(
literal|3
argument_list|,
literal|13
argument_list|,
literal|37
argument_list|)
decl_stmt|;
specifier|const
name|QDate
name|date1
argument_list|(
literal|2013
argument_list|,
literal|3
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|QPointer
argument_list|<
name|QTimeEdit
argument_list|>
name|timeEdit
decl_stmt|;
name|QPointer
argument_list|<
name|QDateEdit
argument_list|>
name|dateEdit
decl_stmt|;
name|QPointer
argument_list|<
name|QDateTimeEdit
argument_list|>
name|dateTimeEdit
decl_stmt|;
comment|// Do some checks
comment|// a. Open time editor on empty cell + write QTime data
specifier|const
name|QModelIndex
name|i1
init|=
name|s
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|timeEdit
operator|=
operator|new
name|QTimeEdit
argument_list|()
expr_stmt|;
name|d
operator|->
name|setNextOpenEditor
argument_list|(
name|timeEdit
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|w
operator|.
name|fastEdit
argument_list|(
name|i1
argument_list|)
argument_list|,
name|timeEdit
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|timeEdit
operator|->
name|setTime
argument_list|(
name|time1
argument_list|)
expr_stmt|;
name|d
operator|->
name|setModelData
argument_list|(
name|timeEdit
argument_list|,
operator|&
name|s
argument_list|,
name|i1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s
operator|.
name|data
argument_list|(
name|i1
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Time
argument_list|)
expr_stmt|;
comment|// ensure that we wrote a time variant.
name|QCOMPARE
argument_list|(
name|s
operator|.
name|data
argument_list|(
name|i1
argument_list|)
operator|.
name|toTime
argument_list|()
argument_list|,
name|time1
argument_list|)
expr_stmt|;
comment|// ensure that it is the correct time.
name|w
operator|.
name|doCloseEditor
argument_list|(
name|timeEdit
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|d
operator|->
name|currentEditor
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// should happen at doCloseEditor. We only test this once.
comment|// b. Test that automatic edit of a QTime value is QTimeEdit (and not QDateTimeEdit)
name|QWidget
modifier|*
name|editor
init|=
name|w
operator|.
name|fastEdit
argument_list|(
name|i1
argument_list|)
decl_stmt|;
name|timeEdit
operator|=
name|qobject_cast
argument_list|<
name|QTimeEdit
operator|*
argument_list|>
argument_list|(
name|editor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|timeEdit
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|timeEdit
operator|->
name|time
argument_list|()
argument_list|,
name|time1
argument_list|)
expr_stmt|;
name|w
operator|.
name|doCloseEditor
argument_list|(
name|timeEdit
argument_list|)
expr_stmt|;
specifier|const
name|QTime
name|time2
argument_list|(
literal|4
argument_list|,
literal|14
argument_list|,
literal|37
argument_list|)
decl_stmt|;
specifier|const
name|QDate
name|date2
argument_list|(
literal|2014
argument_list|,
literal|4
argument_list|,
literal|7
argument_list|)
decl_stmt|;
specifier|const
name|QDateTime
name|datetime1
argument_list|(
name|date1
argument_list|,
name|time1
argument_list|)
decl_stmt|;
specifier|const
name|QDateTime
name|datetime2
argument_list|(
name|date2
argument_list|,
name|time2
argument_list|)
decl_stmt|;
comment|// c. Test that the automatic open of an QDateTime is QDateTimeEdit + value check + set check
name|s
operator|.
name|setData
argument_list|(
name|i1
argument_list|,
name|datetime2
argument_list|)
expr_stmt|;
name|editor
operator|=
name|w
operator|.
name|fastEdit
argument_list|(
name|i1
argument_list|)
expr_stmt|;
name|timeEdit
operator|=
name|qobject_cast
argument_list|<
name|QTimeEdit
operator|*
argument_list|>
argument_list|(
name|editor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|timeEdit
operator|==
literal|0
argument_list|)
expr_stmt|;
name|dateEdit
operator|=
name|qobject_cast
argument_list|<
name|QDateEdit
operator|*
argument_list|>
argument_list|(
name|editor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|dateEdit
operator|==
literal|0
argument_list|)
expr_stmt|;
name|dateTimeEdit
operator|=
name|qobject_cast
argument_list|<
name|QDateTimeEdit
operator|*
argument_list|>
argument_list|(
name|editor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|dateTimeEdit
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dateTimeEdit
operator|->
name|dateTime
argument_list|()
argument_list|,
name|datetime2
argument_list|)
expr_stmt|;
name|dateTimeEdit
operator|->
name|setDateTime
argument_list|(
name|datetime1
argument_list|)
expr_stmt|;
name|d
operator|->
name|setModelData
argument_list|(
name|dateTimeEdit
argument_list|,
operator|&
name|s
argument_list|,
name|i1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s
operator|.
name|data
argument_list|(
name|i1
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|DateTime
argument_list|)
expr_stmt|;
comment|// ensure that we wrote a datetime variant.
name|QCOMPARE
argument_list|(
name|s
operator|.
name|data
argument_list|(
name|i1
argument_list|)
operator|.
name|toDateTime
argument_list|()
argument_list|,
name|datetime1
argument_list|)
expr_stmt|;
name|w
operator|.
name|doCloseEditor
argument_list|(
name|dateTimeEdit
argument_list|)
expr_stmt|;
comment|// d. Open date editor on empty cell + write QDate data (similar to a)
specifier|const
name|QModelIndex
name|i2
init|=
name|s
operator|.
name|index
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|dateEdit
operator|=
operator|new
name|QDateEdit
argument_list|()
expr_stmt|;
name|d
operator|->
name|setNextOpenEditor
argument_list|(
name|dateEdit
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|w
operator|.
name|fastEdit
argument_list|(
name|i2
argument_list|)
argument_list|,
name|dateEdit
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|dateEdit
operator|->
name|setDate
argument_list|(
name|date1
argument_list|)
expr_stmt|;
name|d
operator|->
name|setModelData
argument_list|(
name|dateEdit
argument_list|,
operator|&
name|s
argument_list|,
name|i2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s
operator|.
name|data
argument_list|(
name|i2
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Date
argument_list|)
expr_stmt|;
comment|// ensure that we wrote a time variant.
name|QCOMPARE
argument_list|(
name|s
operator|.
name|data
argument_list|(
name|i2
argument_list|)
operator|.
name|toDate
argument_list|()
argument_list|,
name|date1
argument_list|)
expr_stmt|;
comment|// ensure that it is the correct date.
name|w
operator|.
name|doCloseEditor
argument_list|(
name|dateEdit
argument_list|)
expr_stmt|;
comment|// e. Test that the default editor editor (QDateEdit) on a QDate (index i2)  (similar to b)
name|editor
operator|=
name|w
operator|.
name|fastEdit
argument_list|(
name|i2
argument_list|)
expr_stmt|;
name|dateEdit
operator|=
name|qobject_cast
argument_list|<
name|QDateEdit
operator|*
argument_list|>
argument_list|(
name|editor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|dateEdit
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dateEdit
operator|->
name|date
argument_list|()
argument_list|,
name|date1
argument_list|)
expr_stmt|;
name|w
operator|.
name|doCloseEditor
argument_list|(
name|dateEdit
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|decoration_data
name|void
name|tst_QItemDelegate
operator|::
name|decoration_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QSize
argument_list|>
argument_list|(
literal|"size"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QSize
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|int
name|pm
init|=
name|QApplication
operator|::
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_SmallIconSize
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pixmap 30x30"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QVariant
operator|::
name|Pixmap
operator|<<
name|QSize
argument_list|(
literal|30
argument_list|,
literal|30
argument_list|)
operator|<<
name|QSize
argument_list|(
literal|30
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"image 30x30"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QVariant
operator|::
name|Image
operator|<<
name|QSize
argument_list|(
literal|30
argument_list|,
literal|30
argument_list|)
operator|<<
name|QSize
argument_list|(
literal|30
argument_list|,
literal|30
argument_list|)
expr_stmt|;
comment|//The default engine scales pixmaps down if required, but never up. For WinCE we need bigger IconSize than 30
name|QTest
operator|::
name|newRow
argument_list|(
literal|"icon 30x30"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QVariant
operator|::
name|Icon
operator|<<
name|QSize
argument_list|(
literal|60
argument_list|,
literal|60
argument_list|)
operator|<<
name|QSize
argument_list|(
name|pm
argument_list|,
name|pm
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"color 30x30"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QVariant
operator|::
name|Color
operator|<<
name|QSize
argument_list|(
literal|30
argument_list|,
literal|30
argument_list|)
operator|<<
name|QSize
argument_list|(
name|pm
argument_list|,
name|pm
argument_list|)
expr_stmt|;
comment|// This demands too much memory and potentially hangs. Feel free to uncomment
comment|// for your own testing.
comment|//    QTest::newRow("pixmap 30x30 big")
comment|//<< (int)QVariant::Pixmap
comment|//<< QSize(1024, 1024)        // Over 1M
comment|//<< QSize(1024, 1024);
block|}
end_function
begin_function
DECL|function|decoration
name|void
name|tst_QItemDelegate
operator|::
name|decoration
parameter_list|()
block|{
name|Q_CHECK_PAINTEVENTS
name|QFETCH
argument_list|(
name|int
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|QFETCH
argument_list|(
name|QSize
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QSize
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QTableWidget
name|table
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TestItemDelegate
name|delegate
decl_stmt|;
name|table
operator|.
name|setItemDelegate
argument_list|(
operator|&
name|delegate
argument_list|)
expr_stmt|;
name|table
operator|.
name|show
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|table
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowActive
argument_list|(
operator|&
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|QVariant
name|value
decl_stmt|;
switch|switch
condition|(
operator|(
name|QVariant
operator|::
name|Type
operator|)
name|type
condition|)
block|{
case|case
name|QVariant
operator|::
name|Pixmap
case|:
block|{
name|QPixmap
name|pm
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|pm
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|value
operator|=
name|pm
expr_stmt|;
break|break;
block|}
case|case
name|QVariant
operator|::
name|Image
case|:
block|{
name|QImage
name|img
argument_list|(
name|size
argument_list|,
name|QImage
operator|::
name|Format_Mono
argument_list|)
decl_stmt|;
name|memset
argument_list|(
name|img
operator|.
name|bits
argument_list|()
argument_list|,
literal|0
argument_list|,
name|img
operator|.
name|byteCount
argument_list|()
argument_list|)
expr_stmt|;
name|value
operator|=
name|img
expr_stmt|;
break|break;
block|}
case|case
name|QVariant
operator|::
name|Icon
case|:
block|{
name|QPixmap
name|pm
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|pm
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|value
operator|=
name|QIcon
argument_list|(
name|pm
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QVariant
operator|::
name|Color
case|:
name|value
operator|=
name|QColor
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|QTableWidgetItem
modifier|*
name|item
init|=
operator|new
name|QTableWidgetItem
decl_stmt|;
name|item
operator|->
name|setData
argument_list|(
name|Qt
operator|::
name|DecorationRole
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|table
operator|.
name|setItem
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|item
operator|->
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|delegate
operator|.
name|decorationRect
operator|.
name|size
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|editorEvent_data
name|void
name|tst_QItemDelegate
operator|::
name|editorEvent_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QRect
argument_list|>
argument_list|(
literal|"rect"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"text"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"checkState"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"flags"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"inCheck"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"button"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"edited"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedCheckState"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unchecked, checkable, release"
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|Qt
operator|::
name|Unchecked
argument_list|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|Qt
operator|::
name|ItemIsEditable
operator||
name|Qt
operator|::
name|ItemIsSelectable
operator||
name|Qt
operator|::
name|ItemIsUserCheckable
operator||
name|Qt
operator|::
name|ItemIsEnabled
operator||
name|Qt
operator|::
name|ItemIsDragEnabled
operator||
name|Qt
operator|::
name|ItemIsDropEnabled
argument_list|)
operator|<<
literal|true
operator|<<
call|(
name|int
call|)
argument_list|(
name|QEvent
operator|::
name|MouseButtonRelease
argument_list|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|Qt
operator|::
name|LeftButton
argument_list|)
operator|<<
literal|true
operator|<<
call|(
name|int
call|)
argument_list|(
name|Qt
operator|::
name|Checked
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"checked, checkable, release"
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|Qt
operator|::
name|Checked
argument_list|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|Qt
operator|::
name|ItemIsEditable
operator||
name|Qt
operator|::
name|ItemIsSelectable
operator||
name|Qt
operator|::
name|ItemIsUserCheckable
operator||
name|Qt
operator|::
name|ItemIsEnabled
operator||
name|Qt
operator|::
name|ItemIsDragEnabled
operator||
name|Qt
operator|::
name|ItemIsDropEnabled
argument_list|)
operator|<<
literal|true
operator|<<
call|(
name|int
call|)
argument_list|(
name|QEvent
operator|::
name|MouseButtonRelease
argument_list|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|Qt
operator|::
name|LeftButton
argument_list|)
operator|<<
literal|true
operator|<<
call|(
name|int
call|)
argument_list|(
name|Qt
operator|::
name|Unchecked
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unchecked, checkable, release"
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|Qt
operator|::
name|Unchecked
argument_list|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|Qt
operator|::
name|ItemIsEditable
operator||
name|Qt
operator|::
name|ItemIsSelectable
operator||
name|Qt
operator|::
name|ItemIsUserCheckable
operator||
name|Qt
operator|::
name|ItemIsEnabled
operator||
name|Qt
operator|::
name|ItemIsDragEnabled
operator||
name|Qt
operator|::
name|ItemIsDropEnabled
argument_list|)
operator|<<
literal|true
operator|<<
call|(
name|int
call|)
argument_list|(
name|QEvent
operator|::
name|MouseButtonRelease
argument_list|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|Qt
operator|::
name|LeftButton
argument_list|)
operator|<<
literal|true
operator|<<
call|(
name|int
call|)
argument_list|(
name|Qt
operator|::
name|Checked
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unchecked, checkable, release, right button"
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|Qt
operator|::
name|Unchecked
argument_list|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|Qt
operator|::
name|ItemIsEditable
operator||
name|Qt
operator|::
name|ItemIsSelectable
operator||
name|Qt
operator|::
name|ItemIsUserCheckable
operator||
name|Qt
operator|::
name|ItemIsEnabled
operator||
name|Qt
operator|::
name|ItemIsDragEnabled
operator||
name|Qt
operator|::
name|ItemIsDropEnabled
argument_list|)
operator|<<
literal|true
operator|<<
call|(
name|int
call|)
argument_list|(
name|QEvent
operator|::
name|MouseButtonRelease
argument_list|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|Qt
operator|::
name|RightButton
argument_list|)
operator|<<
literal|false
operator|<<
call|(
name|int
call|)
argument_list|(
name|Qt
operator|::
name|Unchecked
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unchecked, checkable, release outside"
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|Qt
operator|::
name|Unchecked
argument_list|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|Qt
operator|::
name|ItemIsEditable
operator||
name|Qt
operator|::
name|ItemIsSelectable
operator||
name|Qt
operator|::
name|ItemIsUserCheckable
operator||
name|Qt
operator|::
name|ItemIsEnabled
operator||
name|Qt
operator|::
name|ItemIsDragEnabled
operator||
name|Qt
operator|::
name|ItemIsDropEnabled
argument_list|)
operator|<<
literal|false
operator|<<
call|(
name|int
call|)
argument_list|(
name|QEvent
operator|::
name|MouseButtonRelease
argument_list|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|Qt
operator|::
name|LeftButton
argument_list|)
operator|<<
literal|false
operator|<<
call|(
name|int
call|)
argument_list|(
name|Qt
operator|::
name|Unchecked
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unchecked, checkable, dblclick"
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|Qt
operator|::
name|Unchecked
argument_list|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|Qt
operator|::
name|ItemIsEditable
operator||
name|Qt
operator|::
name|ItemIsSelectable
operator||
name|Qt
operator|::
name|ItemIsUserCheckable
operator||
name|Qt
operator|::
name|ItemIsEnabled
operator||
name|Qt
operator|::
name|ItemIsDragEnabled
operator||
name|Qt
operator|::
name|ItemIsDropEnabled
argument_list|)
operator|<<
literal|true
operator|<<
call|(
name|int
call|)
argument_list|(
name|QEvent
operator|::
name|MouseButtonDblClick
argument_list|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|Qt
operator|::
name|LeftButton
argument_list|)
operator|<<
literal|true
operator|<<
call|(
name|int
call|)
argument_list|(
name|Qt
operator|::
name|Unchecked
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|editorEvent
name|void
name|tst_QItemDelegate
operator|::
name|editorEvent
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QRect
argument_list|,
name|rect
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|checkState
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|inCheck
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|button
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|edited
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedCheckState
argument_list|)
expr_stmt|;
name|QStandardItemModel
name|model
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QModelIndex
name|index
init|=
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|index
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QStandardItem
modifier|*
name|item
init|=
name|model
operator|.
name|itemFromIndex
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|item
operator|->
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|item
operator|->
name|setCheckState
argument_list|(
operator|(
name|Qt
operator|::
name|CheckState
operator|)
name|checkState
argument_list|)
expr_stmt|;
name|item
operator|->
name|setFlags
argument_list|(
operator|(
name|Qt
operator|::
name|ItemFlags
operator|)
name|flags
argument_list|)
expr_stmt|;
name|QStyleOptionViewItem
name|option
decl_stmt|;
name|option
operator|.
name|rect
operator|=
name|rect
expr_stmt|;
name|option
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_Enabled
expr_stmt|;
comment|// mimic QStyledItemDelegate::initStyleOption logic
name|option
operator|.
name|features
operator||=
name|QStyleOptionViewItem
operator|::
name|HasCheckIndicator
operator||
name|QStyleOptionViewItem
operator|::
name|HasDisplay
expr_stmt|;
name|option
operator|.
name|checkState
operator|=
name|Qt
operator|::
name|CheckState
argument_list|(
name|checkState
argument_list|)
expr_stmt|;
specifier|const
name|int
name|checkMargin
init|=
name|qApp
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_FocusFrameHMargin
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|+
literal|1
decl_stmt|;
name|QPoint
name|pos
init|=
name|inCheck
condition|?
name|qApp
operator|->
name|style
argument_list|()
operator|->
name|subElementRect
argument_list|(
name|QStyle
operator|::
name|SE_ViewItemCheckIndicator
argument_list|,
operator|&
name|option
argument_list|,
literal|0
argument_list|)
operator|.
name|center
argument_list|()
operator|+
name|QPoint
argument_list|(
name|checkMargin
argument_list|,
literal|0
argument_list|)
else|:
name|QPoint
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
decl_stmt|;
name|QEvent
modifier|*
name|event
init|=
operator|new
name|QMouseEvent
argument_list|(
operator|(
name|QEvent
operator|::
name|Type
operator|)
name|type
argument_list|,
name|pos
argument_list|,
operator|(
name|Qt
operator|::
name|MouseButton
operator|)
name|button
argument_list|,
operator|(
name|Qt
operator|::
name|MouseButton
operator|)
name|button
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
decl_stmt|;
name|TestItemDelegate
name|delegate
decl_stmt|;
name|bool
name|wasEdited
init|=
name|delegate
operator|.
name|editorEvent
argument_list|(
name|event
argument_list|,
operator|&
name|model
argument_list|,
name|option
argument_list|,
name|index
argument_list|)
decl_stmt|;
operator|delete
name|event
expr_stmt|;
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|wasEdited
argument_list|,
name|edited
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|index
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|CheckStateRole
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|expectedCheckState
argument_list|)
expr_stmt|;
block|}
end_function
begin_enum
DECL|enum|WidgetType
enum|enum
name|WidgetType
block|{
DECL|enumerator|LineEdit
name|LineEdit
block|,
DECL|enumerator|TextEdit
name|TextEdit
block|,
DECL|enumerator|PlainTextEdit
name|PlainTextEdit
block|}
enum|;
end_enum
begin_expr_stmt
DECL|variable|WidgetType
name|Q_DECLARE_METATYPE
argument_list|(
name|WidgetType
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|enterKey_data
name|void
name|tst_QItemDelegate
operator|::
name|enterKey_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|WidgetType
argument_list|>
argument_list|(
literal|"widget"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"key"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"expectedFocus"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"lineedit enter"
argument_list|)
operator|<<
name|LineEdit
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Enter
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"textedit enter"
argument_list|)
operator|<<
name|TextEdit
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Enter
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"plaintextedit enter"
argument_list|)
operator|<<
name|PlainTextEdit
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Enter
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"plaintextedit return"
argument_list|)
operator|<<
name|PlainTextEdit
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Return
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"plaintextedit tab"
argument_list|)
operator|<<
name|PlainTextEdit
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Tab
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"lineedit tab"
argument_list|)
operator|<<
name|LineEdit
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Tab
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|enterKey
name|void
name|tst_QItemDelegate
operator|::
name|enterKey
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|WidgetType
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|expectedFocus
argument_list|)
expr_stmt|;
name|QStandardItemModel
name|model
decl_stmt|;
name|model
operator|.
name|appendRow
argument_list|(
operator|new
name|QStandardItem
argument_list|()
argument_list|)
expr_stmt|;
name|QListView
name|view
decl_stmt|;
name|view
operator|.
name|setModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|view
operator|.
name|show
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|view
argument_list|)
expr_stmt|;
name|view
operator|.
name|setFocus
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|30
argument_list|)
expr_stmt|;
struct|struct
name|TestDelegate
super|:
specifier|public
name|QItemDelegate
block|{
name|WidgetType
name|widgetType
decl_stmt|;
specifier|virtual
name|QWidget
modifier|*
name|createEditor
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QStyleOptionViewItem
modifier|&
comment|/*option*/
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
comment|/*index*/
parameter_list|)
specifier|const
block|{
name|QWidget
modifier|*
name|editor
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|widgetType
condition|)
block|{
case|case
name|LineEdit
case|:
name|editor
operator|=
operator|new
name|QLineEdit
argument_list|(
name|parent
argument_list|)
expr_stmt|;
break|break;
case|case
name|TextEdit
case|:
name|editor
operator|=
operator|new
name|QTextEdit
argument_list|(
name|parent
argument_list|)
expr_stmt|;
break|break;
case|case
name|PlainTextEdit
case|:
name|editor
operator|=
operator|new
name|QPlainTextEdit
argument_list|(
name|parent
argument_list|)
expr_stmt|;
break|break;
block|}
name|editor
operator|->
name|setObjectName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"TheEditor"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|editor
return|;
block|}
block|}
name|delegate
struct|;
name|delegate
operator|.
name|widgetType
operator|=
name|widget
expr_stmt|;
name|view
operator|.
name|setItemDelegate
argument_list|(
operator|&
name|delegate
argument_list|)
expr_stmt|;
name|QModelIndex
name|index
init|=
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|view
operator|.
name|setCurrentIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
comment|// the editor will only selectAll on the current index
name|view
operator|.
name|edit
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|lineEditors
init|=
name|qFindChildren
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|view
operator|.
name|viewport
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"TheEditor"
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|lineEditors
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|editor
init|=
name|lineEditors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|editor
operator|->
name|hasFocus
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|editor
argument_list|,
name|Qt
operator|::
name|Key
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
comment|// The line edit has already been destroyed, so avoid that case.
if|if
condition|(
name|widget
operator|==
name|TextEdit
operator|||
name|widget
operator|==
name|PlainTextEdit
condition|)
block|{
name|QVERIFY
argument_list|(
operator|!
name|editor
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|editor
operator|&&
name|editor
operator|->
name|hasFocus
argument_list|()
argument_list|,
name|expectedFocus
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|task257859_finalizeEdit
name|void
name|tst_QItemDelegate
operator|::
name|task257859_finalizeEdit
parameter_list|()
block|{
name|QStandardItemModel
name|model
decl_stmt|;
name|model
operator|.
name|appendRow
argument_list|(
operator|new
name|QStandardItem
argument_list|()
argument_list|)
expr_stmt|;
name|QListView
name|view
decl_stmt|;
name|view
operator|.
name|setModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|view
operator|.
name|show
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|view
argument_list|)
expr_stmt|;
name|view
operator|.
name|setFocus
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QModelIndex
name|index
init|=
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|view
operator|.
name|edit
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QLineEdit
modifier|*
argument_list|>
name|lineEditors
init|=
name|qFindChildren
argument_list|<
name|QLineEdit
operator|*
argument_list|>
argument_list|(
name|view
operator|.
name|viewport
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|lineEditors
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|editor
init|=
name|lineEditors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|editor
operator|->
name|hasFocus
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QDialog
name|dialog
decl_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|500
argument_list|,
operator|&
name|dialog
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
operator|!
name|editor
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|QTBUG4435_keepSelectionOnCheck
name|void
name|tst_QItemDelegate
operator|::
name|QTBUG4435_keepSelectionOnCheck
parameter_list|()
block|{
name|QStandardItemModel
name|model
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|QStandardItem
modifier|*
name|item
init|=
operator|new
name|QStandardItem
argument_list|(
name|QLatin1String
argument_list|(
literal|"Item "
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|item
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|item
operator|->
name|setFlags
argument_list|(
name|Qt
operator|::
name|ItemIsSelectable
operator||
name|Qt
operator|::
name|ItemIsUserCheckable
operator||
name|Qt
operator|::
name|ItemIsEnabled
argument_list|)
expr_stmt|;
name|model
operator|.
name|setItem
argument_list|(
name|i
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
name|QTableView
name|view
decl_stmt|;
name|view
operator|.
name|setModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|view
operator|.
name|setItemDelegate
argument_list|(
operator|new
name|TestItemDelegate
argument_list|)
expr_stmt|;
name|view
operator|.
name|show
argument_list|()
expr_stmt|;
name|view
operator|.
name|selectAll
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|view
argument_list|)
argument_list|)
expr_stmt|;
name|QStyleOptionViewItem
name|option
decl_stmt|;
name|option
operator|.
name|rect
operator|=
name|view
operator|.
name|visualRect
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// mimic QStyledItemDelegate::initStyleOption logic
name|option
operator|.
name|features
operator|=
name|QStyleOptionViewItem
operator|::
name|HasDisplay
operator||
name|QStyleOptionViewItem
operator|::
name|HasCheckIndicator
expr_stmt|;
name|option
operator|.
name|checkState
operator|=
name|Qt
operator|::
name|CheckState
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|CheckStateRole
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|int
name|checkMargin
init|=
name|qApp
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_FocusFrameHMargin
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|+
literal|1
decl_stmt|;
name|QPoint
name|pos
init|=
name|qApp
operator|->
name|style
argument_list|()
operator|->
name|subElementRect
argument_list|(
name|QStyle
operator|::
name|SE_ViewItemCheckIndicator
argument_list|,
operator|&
name|option
argument_list|,
literal|0
argument_list|)
operator|.
name|center
argument_list|()
operator|+
name|QPoint
argument_list|(
name|checkMargin
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|mouseClick
argument_list|(
name|view
operator|.
name|viewport
argument_list|()
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|view
operator|.
name|selectionModel
argument_list|()
operator|->
name|isColumnSelected
argument_list|(
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|->
name|checkState
argument_list|()
argument_list|,
name|Qt
operator|::
name|Checked
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|comboBox
name|void
name|tst_QItemDelegate
operator|::
name|comboBox
parameter_list|()
block|{
name|QTableWidgetItem
modifier|*
name|item1
init|=
operator|new
name|QTableWidgetItem
decl_stmt|;
name|item1
operator|->
name|setData
argument_list|(
name|Qt
operator|::
name|DisplayRole
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QTableWidget
name|widget
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|widget
operator|.
name|setItem
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|item1
argument_list|)
expr_stmt|;
name|widget
operator|.
name|show
argument_list|()
expr_stmt|;
name|widget
operator|.
name|editItem
argument_list|(
name|item1
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QComboBox
modifier|*
name|boolEditor
init|=
name|qFindChild
argument_list|<
name|QComboBox
operator|*
argument_list|>
argument_list|(
name|widget
operator|.
name|viewport
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|boolEditor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|boolEditor
operator|->
name|currentIndex
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// True is selected initially.
comment|// The data must actually be different in order for the model
comment|// to be updated.
name|boolEditor
operator|->
name|setCurrentIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|boolEditor
operator|->
name|currentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Changed to false.
name|widget
operator|.
name|clearFocus
argument_list|()
expr_stmt|;
name|widget
operator|.
name|setFocus
argument_list|()
expr_stmt|;
name|QVariant
name|data
init|=
name|item1
operator|->
name|data
argument_list|(
name|Qt
operator|::
name|EditRole
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|data
operator|.
name|userType
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|QMetaType
operator|::
name|Bool
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|data
operator|.
name|toBool
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ### _not_ covered:
end_comment
begin_comment
comment|// editing with a custom editor factory
end_comment
begin_comment
comment|// painting when editing
end_comment
begin_comment
comment|// painting elided text
end_comment
begin_comment
comment|// painting wrapped text
end_comment
begin_comment
comment|// painting focus
end_comment
begin_comment
comment|// painting icon
end_comment
begin_comment
comment|// painting color
end_comment
begin_comment
comment|// painting check
end_comment
begin_comment
comment|// painting selected
end_comment
begin_comment
comment|// rect for invalid
end_comment
begin_comment
comment|// rect for pixmap
end_comment
begin_comment
comment|// rect for image
end_comment
begin_comment
comment|// rect for icon
end_comment
begin_comment
comment|// rect for check
end_comment
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QItemDelegate
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qitemdelegate.moc"
end_include
end_unit
