begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qstandarditemmodel.h>
end_include
begin_class
DECL|class|tst_QStandardItem
class|class
name|tst_QStandardItem
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QStandardItem
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QStandardItem
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|ctor
parameter_list|()
function_decl|;
name|void
name|textCtor
parameter_list|()
function_decl|;
name|void
name|iconTextCtor
parameter_list|()
function_decl|;
name|void
name|rowsColumnsCtor
parameter_list|()
function_decl|;
name|void
name|getSetData
parameter_list|()
function_decl|;
name|void
name|getSetFlags
parameter_list|()
function_decl|;
name|void
name|getSetRowAndColumnCount
parameter_list|()
function_decl|;
name|void
name|getSetChild_data
parameter_list|()
function_decl|;
name|void
name|getSetChild
parameter_list|()
function_decl|;
name|void
name|parent
parameter_list|()
function_decl|;
name|void
name|insertColumn_data
parameter_list|()
function_decl|;
name|void
name|insertColumn
parameter_list|()
function_decl|;
name|void
name|insertColumns_data
parameter_list|()
function_decl|;
name|void
name|insertColumns
parameter_list|()
function_decl|;
name|void
name|insertRow_data
parameter_list|()
function_decl|;
name|void
name|insertRow
parameter_list|()
function_decl|;
name|void
name|insertRows_data
parameter_list|()
function_decl|;
name|void
name|insertRows
parameter_list|()
function_decl|;
name|void
name|appendColumn_data
parameter_list|()
function_decl|;
name|void
name|appendColumn
parameter_list|()
function_decl|;
name|void
name|appendRow_data
parameter_list|()
function_decl|;
name|void
name|appendRow
parameter_list|()
function_decl|;
name|void
name|takeChild
parameter_list|()
function_decl|;
name|void
name|takeColumn_data
parameter_list|()
function_decl|;
name|void
name|takeColumn
parameter_list|()
function_decl|;
name|void
name|takeRow_data
parameter_list|()
function_decl|;
name|void
name|takeRow
parameter_list|()
function_decl|;
name|void
name|streamItem
parameter_list|()
function_decl|;
name|void
name|deleteItem
parameter_list|()
function_decl|;
name|void
name|clone
parameter_list|()
function_decl|;
name|void
name|sortChildren
parameter_list|()
function_decl|;
name|void
name|subclassing
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QStandardItem
name|tst_QStandardItem
operator|::
name|tst_QStandardItem
parameter_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~tst_QStandardItem
name|tst_QStandardItem
operator|::
name|~
name|tst_QStandardItem
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|init
name|void
name|tst_QStandardItem
operator|::
name|init
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QStandardItem
operator|::
name|cleanup
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|ctor
name|void
name|tst_QStandardItem
operator|::
name|ctor
parameter_list|()
block|{
name|QStandardItem
name|item
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|item
operator|.
name|hasChildren
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|textCtor
name|void
name|tst_QStandardItem
operator|::
name|textCtor
parameter_list|()
block|{
name|QLatin1String
name|text
argument_list|(
literal|"text"
argument_list|)
decl_stmt|;
name|QStandardItem
name|item
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|text
argument_list|()
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|item
operator|.
name|hasChildren
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|iconTextCtor
name|void
name|tst_QStandardItem
operator|::
name|iconTextCtor
parameter_list|()
block|{
name|QPixmap
name|pixmap
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|)
decl_stmt|;
name|pixmap
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|QIcon
name|icon
argument_list|(
name|pixmap
argument_list|)
decl_stmt|;
name|QLatin1String
name|text
argument_list|(
literal|"text"
argument_list|)
decl_stmt|;
name|QStandardItem
name|item
argument_list|(
name|icon
argument_list|,
name|text
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|icon
argument_list|()
argument_list|,
name|icon
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|text
argument_list|()
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|item
operator|.
name|hasChildren
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rowsColumnsCtor
name|void
name|tst_QStandardItem
operator|::
name|rowsColumnsCtor
parameter_list|()
block|{
specifier|const
name|int
name|rows
init|=
literal|5
decl_stmt|;
specifier|const
name|int
name|columns
init|=
literal|12
decl_stmt|;
name|QStandardItem
name|item
argument_list|(
name|rows
argument_list|,
name|columns
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|rowCount
argument_list|()
argument_list|,
name|rows
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|columnCount
argument_list|()
argument_list|,
name|columns
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getSetData
name|void
name|tst_QStandardItem
operator|::
name|getSetData
parameter_list|()
block|{
name|QStandardItem
name|item
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|2
condition|;
operator|++
name|x
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|text
init|=
name|QString
argument_list|(
literal|"text %0"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|item
operator|.
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|text
argument_list|()
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|QPixmap
name|pixmap
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|)
decl_stmt|;
name|pixmap
operator|.
name|fill
argument_list|(
operator|(
name|i
operator|==
literal|1
operator|)
condition|?
name|Qt
operator|::
name|red
else|:
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
name|QIcon
name|icon
argument_list|(
name|pixmap
argument_list|)
decl_stmt|;
name|item
operator|.
name|setIcon
argument_list|(
name|icon
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|icon
argument_list|()
argument_list|,
name|icon
argument_list|)
expr_stmt|;
name|QString
name|toolTip
init|=
name|QString
argument_list|(
literal|"toolTip %0"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|item
operator|.
name|setToolTip
argument_list|(
name|toolTip
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|toolTip
argument_list|()
argument_list|,
name|toolTip
argument_list|)
expr_stmt|;
name|QString
name|statusTip
init|=
name|QString
argument_list|(
literal|"statusTip %0"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|item
operator|.
name|setStatusTip
argument_list|(
name|statusTip
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|statusTip
argument_list|()
argument_list|,
name|statusTip
argument_list|)
expr_stmt|;
name|QString
name|whatsThis
init|=
name|QString
argument_list|(
literal|"whatsThis %0"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|item
operator|.
name|setWhatsThis
argument_list|(
name|whatsThis
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|whatsThis
argument_list|()
argument_list|,
name|whatsThis
argument_list|)
expr_stmt|;
name|QSize
name|sizeHint
argument_list|(
literal|64
operator|*
name|i
argument_list|,
literal|48
operator|*
name|i
argument_list|)
decl_stmt|;
name|item
operator|.
name|setSizeHint
argument_list|(
name|sizeHint
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|sizeHint
argument_list|()
argument_list|,
name|sizeHint
argument_list|)
expr_stmt|;
name|QFont
name|font
decl_stmt|;
name|item
operator|.
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|font
argument_list|()
argument_list|,
name|font
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|Alignment
name|textAlignment
argument_list|(
operator|(
name|i
operator|==
literal|1
operator|)
condition|?
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignVCenter
else|:
name|Qt
operator|::
name|AlignRight
argument_list|)
decl_stmt|;
name|item
operator|.
name|setTextAlignment
argument_list|(
name|textAlignment
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|textAlignment
argument_list|()
argument_list|,
name|textAlignment
argument_list|)
expr_stmt|;
name|QColor
name|backgroundColor
argument_list|(
operator|(
name|i
operator|==
literal|1
operator|)
condition|?
name|Qt
operator|::
name|blue
else|:
name|Qt
operator|::
name|yellow
argument_list|)
decl_stmt|;
name|item
operator|.
name|setBackground
argument_list|(
name|backgroundColor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|backgroundColor
argument_list|)
expr_stmt|;
name|QColor
name|textColor
argument_list|(
operator|(
name|i
operator|==
name|i
operator|)
condition|?
name|Qt
operator|::
name|green
else|:
name|Qt
operator|::
name|cyan
argument_list|)
decl_stmt|;
name|item
operator|.
name|setForeground
argument_list|(
name|textColor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|textColor
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|CheckState
name|checkState
argument_list|(
operator|(
name|i
operator|==
literal|1
operator|)
condition|?
name|Qt
operator|::
name|PartiallyChecked
else|:
name|Qt
operator|::
name|Checked
argument_list|)
decl_stmt|;
name|item
operator|.
name|setCheckState
argument_list|(
name|checkState
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|checkState
argument_list|()
argument_list|,
name|checkState
argument_list|)
expr_stmt|;
name|QString
name|accessibleText
init|=
name|QString
argument_list|(
literal|"accessibleText %0"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|item
operator|.
name|setAccessibleText
argument_list|(
name|accessibleText
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|accessibleText
argument_list|()
argument_list|,
name|accessibleText
argument_list|)
expr_stmt|;
name|QString
name|accessibleDescription
init|=
name|QString
argument_list|(
literal|"accessibleDescription %0"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|item
operator|.
name|setAccessibleDescription
argument_list|(
name|accessibleDescription
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|accessibleDescription
argument_list|()
argument_list|,
name|accessibleDescription
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|text
argument_list|()
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|icon
argument_list|()
argument_list|,
name|icon
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|toolTip
argument_list|()
argument_list|,
name|toolTip
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|statusTip
argument_list|()
argument_list|,
name|statusTip
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|whatsThis
argument_list|()
argument_list|,
name|whatsThis
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|sizeHint
argument_list|()
argument_list|,
name|sizeHint
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|font
argument_list|()
argument_list|,
name|font
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|textAlignment
argument_list|()
argument_list|,
name|textAlignment
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|backgroundColor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|textColor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|checkState
argument_list|()
argument_list|,
name|checkState
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|accessibleText
argument_list|()
argument_list|,
name|accessibleText
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|accessibleDescription
argument_list|()
argument_list|,
name|accessibleDescription
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|item
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|DisplayRole
argument_list|)
argument_list|)
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QIcon
argument_list|>
argument_list|(
name|item
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|DecorationRole
argument_list|)
argument_list|)
argument_list|,
name|icon
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|item
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|ToolTipRole
argument_list|)
argument_list|)
argument_list|,
name|toolTip
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|item
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|StatusTipRole
argument_list|)
argument_list|)
argument_list|,
name|statusTip
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|item
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|WhatsThisRole
argument_list|)
argument_list|)
argument_list|,
name|whatsThis
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QSize
argument_list|>
argument_list|(
name|item
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|SizeHintRole
argument_list|)
argument_list|)
argument_list|,
name|sizeHint
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QFont
argument_list|>
argument_list|(
name|item
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|FontRole
argument_list|)
argument_list|)
argument_list|,
name|font
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|item
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|TextAlignmentRole
argument_list|)
argument_list|)
argument_list|,
name|int
argument_list|(
name|textAlignment
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|item
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|BackgroundColorRole
argument_list|)
argument_list|)
argument_list|,
name|QBrush
argument_list|(
name|backgroundColor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|item
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|BackgroundRole
argument_list|)
argument_list|)
argument_list|,
name|QBrush
argument_list|(
name|backgroundColor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|item
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|TextColorRole
argument_list|)
argument_list|)
argument_list|,
name|QBrush
argument_list|(
name|textColor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|item
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|ForegroundRole
argument_list|)
argument_list|)
argument_list|,
name|QBrush
argument_list|(
name|textColor
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|item
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|CheckStateRole
argument_list|)
argument_list|)
argument_list|,
name|int
argument_list|(
name|checkState
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|item
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|AccessibleTextRole
argument_list|)
argument_list|)
argument_list|,
name|accessibleText
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|item
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|AccessibleDescriptionRole
argument_list|)
argument_list|)
argument_list|,
name|accessibleDescription
argument_list|)
expr_stmt|;
name|item
operator|.
name|setBackground
argument_list|(
name|pixmap
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|background
argument_list|()
operator|.
name|texture
argument_list|()
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|item
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|BackgroundRole
argument_list|)
argument_list|)
operator|.
name|texture
argument_list|()
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
block|}
name|item
operator|.
name|setData
argument_list|(
name|QVariant
argument_list|()
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
expr_stmt|;
name|item
operator|.
name|setData
argument_list|(
name|QVariant
argument_list|()
argument_list|,
name|Qt
operator|::
name|DecorationRole
argument_list|)
expr_stmt|;
name|item
operator|.
name|setData
argument_list|(
name|QVariant
argument_list|()
argument_list|,
name|Qt
operator|::
name|ToolTipRole
argument_list|)
expr_stmt|;
name|item
operator|.
name|setData
argument_list|(
name|QVariant
argument_list|()
argument_list|,
name|Qt
operator|::
name|StatusTipRole
argument_list|)
expr_stmt|;
name|item
operator|.
name|setData
argument_list|(
name|QVariant
argument_list|()
argument_list|,
name|Qt
operator|::
name|WhatsThisRole
argument_list|)
expr_stmt|;
name|item
operator|.
name|setData
argument_list|(
name|QVariant
argument_list|()
argument_list|,
name|Qt
operator|::
name|SizeHintRole
argument_list|)
expr_stmt|;
name|item
operator|.
name|setData
argument_list|(
name|QVariant
argument_list|()
argument_list|,
name|Qt
operator|::
name|FontRole
argument_list|)
expr_stmt|;
name|item
operator|.
name|setData
argument_list|(
name|QVariant
argument_list|()
argument_list|,
name|Qt
operator|::
name|TextAlignmentRole
argument_list|)
expr_stmt|;
name|item
operator|.
name|setData
argument_list|(
name|QVariant
argument_list|()
argument_list|,
name|Qt
operator|::
name|BackgroundRole
argument_list|)
expr_stmt|;
name|item
operator|.
name|setData
argument_list|(
name|QVariant
argument_list|()
argument_list|,
name|Qt
operator|::
name|ForegroundRole
argument_list|)
expr_stmt|;
name|item
operator|.
name|setData
argument_list|(
name|QVariant
argument_list|()
argument_list|,
name|Qt
operator|::
name|CheckStateRole
argument_list|)
expr_stmt|;
name|item
operator|.
name|setData
argument_list|(
name|QVariant
argument_list|()
argument_list|,
name|Qt
operator|::
name|AccessibleTextRole
argument_list|)
expr_stmt|;
name|item
operator|.
name|setData
argument_list|(
name|QVariant
argument_list|()
argument_list|,
name|Qt
operator|::
name|AccessibleDescriptionRole
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|DisplayRole
argument_list|)
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|DecorationRole
argument_list|)
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|ToolTipRole
argument_list|)
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|StatusTipRole
argument_list|)
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|WhatsThisRole
argument_list|)
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|SizeHintRole
argument_list|)
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|FontRole
argument_list|)
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|TextAlignmentRole
argument_list|)
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|BackgroundColorRole
argument_list|)
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|BackgroundRole
argument_list|)
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|TextColorRole
argument_list|)
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|ForegroundRole
argument_list|)
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|CheckStateRole
argument_list|)
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|AccessibleTextRole
argument_list|)
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|AccessibleDescriptionRole
argument_list|)
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|getSetFlags
name|void
name|tst_QStandardItem
operator|::
name|getSetFlags
parameter_list|()
block|{
name|QStandardItem
name|item
decl_stmt|;
name|item
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|item
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|item
operator|.
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|ItemIsEnabled
argument_list|)
expr_stmt|;
name|item
operator|.
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|item
operator|.
name|isEditable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|item
operator|.
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|ItemIsEditable
argument_list|)
expr_stmt|;
name|item
operator|.
name|setSelectable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|item
operator|.
name|isSelectable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|item
operator|.
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|ItemIsSelectable
argument_list|)
expr_stmt|;
name|item
operator|.
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|item
operator|.
name|isCheckable
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|checkState
argument_list|()
argument_list|,
name|Qt
operator|::
name|Unchecked
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|item
operator|.
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|ItemIsUserCheckable
argument_list|)
expr_stmt|;
name|item
operator|.
name|setTristate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|item
operator|.
name|isTristate
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|item
operator|.
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|ItemIsTristate
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
name|item
operator|.
name|setDragEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|item
operator|.
name|isDragEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|item
operator|.
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|ItemIsDragEnabled
argument_list|)
expr_stmt|;
name|item
operator|.
name|setDropEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|item
operator|.
name|isDropEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|item
operator|.
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|ItemIsDropEnabled
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|item
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|item
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|item
operator|.
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|ItemIsEnabled
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|item
operator|.
name|isEditable
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|item
operator|.
name|isEditable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|item
operator|.
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|ItemIsEditable
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|item
operator|.
name|isSelectable
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|.
name|setSelectable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|item
operator|.
name|isSelectable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|item
operator|.
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|ItemIsSelectable
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|item
operator|.
name|isCheckable
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|.
name|setCheckable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|item
operator|.
name|isCheckable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|item
operator|.
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|ItemIsUserCheckable
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|item
operator|.
name|isTristate
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|.
name|setTristate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|item
operator|.
name|isTristate
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|item
operator|.
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|ItemIsTristate
operator|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
name|QVERIFY
argument_list|(
name|item
operator|.
name|isDragEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|.
name|setDragEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|item
operator|.
name|isDragEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|item
operator|.
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|ItemIsDragEnabled
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|item
operator|.
name|isDropEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|.
name|setDropEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|item
operator|.
name|isDropEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|item
operator|.
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|ItemIsDropEnabled
operator|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|item
operator|.
name|setCheckable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|item
operator|.
name|setCheckState
argument_list|(
name|Qt
operator|::
name|Checked
argument_list|)
expr_stmt|;
name|item
operator|.
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|checkState
argument_list|()
argument_list|,
name|Qt
operator|::
name|Checked
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getSetRowAndColumnCount
name|void
name|tst_QStandardItem
operator|::
name|getSetRowAndColumnCount
parameter_list|()
block|{
name|QStandardItem
name|item
decl_stmt|;
name|item
operator|.
name|setRowCount
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|rowCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|item
operator|.
name|setColumnCount
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|columnCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|item
operator|.
name|setRowCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|rowCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|columnCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|item
operator|.
name|setColumnCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|columnCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|rowCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|item
operator|.
name|setColumnCount
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|columnCount
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|rowCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|item
operator|.
name|setRowCount
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|rowCount
argument_list|()
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|columnCount
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|item
operator|.
name|setRowCount
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|rowCount
argument_list|()
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|item
operator|.
name|setColumnCount
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|columnCount
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|item
operator|.
name|setColumnCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|columnCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|rowCount
argument_list|()
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|item
operator|.
name|setRowCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|rowCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getSetChild_data
name|void
name|tst_QStandardItem
operator|::
name|getSetChild_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"rows"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"columns"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"row"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"column"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0x0 children, child at (-1,-1)"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0x0 children, child at (0,0)"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getSetChild
name|void
name|tst_QStandardItem
operator|::
name|getSetChild
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|rows
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|column
argument_list|)
expr_stmt|;
name|QStandardItem
name|item
argument_list|(
name|rows
argument_list|,
name|columns
argument_list|)
decl_stmt|;
name|bool
name|shouldHaveChildren
init|=
operator|(
name|rows
operator|>
literal|0
operator|)
operator|&&
operator|(
name|columns
operator|>
literal|0
operator|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|hasChildren
argument_list|()
argument_list|,
name|shouldHaveChildren
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|child
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
name|QStandardItem
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QStandardItem
modifier|*
name|child
init|=
operator|new
name|QStandardItem
decl_stmt|;
name|item
operator|.
name|setChild
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|child
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|row
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|column
operator|>=
literal|0
operator|)
condition|)
block|{
name|QCOMPARE
argument_list|(
name|item
operator|.
name|rowCount
argument_list|()
argument_list|,
name|qMax
argument_list|(
name|rows
argument_list|,
name|row
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|columnCount
argument_list|()
argument_list|,
name|qMax
argument_list|(
name|columns
argument_list|,
name|column
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|child
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|child
operator|->
name|row
argument_list|()
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|child
operator|->
name|column
argument_list|()
argument_list|,
name|column
argument_list|)
expr_stmt|;
name|QStandardItem
modifier|*
name|anotherChild
init|=
operator|new
name|QStandardItem
decl_stmt|;
name|item
operator|.
name|setChild
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|anotherChild
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|child
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
argument_list|,
name|anotherChild
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|anotherChild
operator|->
name|row
argument_list|()
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|anotherChild
operator|->
name|column
argument_list|()
argument_list|,
name|column
argument_list|)
expr_stmt|;
name|item
operator|.
name|setChild
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|delete
name|child
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|item
operator|.
name|child
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
name|QStandardItem
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|parent
name|void
name|tst_QStandardItem
operator|::
name|parent
parameter_list|()
block|{
block|{
name|QStandardItem
name|item
decl_stmt|;
name|QStandardItem
modifier|*
name|child
init|=
operator|new
name|QStandardItem
decl_stmt|;
name|QCOMPARE
argument_list|(
name|child
operator|->
name|parent
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QStandardItem
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|.
name|setChild
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|child
operator|->
name|parent
argument_list|()
argument_list|,
operator|&
name|item
argument_list|)
expr_stmt|;
name|QStandardItem
modifier|*
name|childOfChild
init|=
operator|new
name|QStandardItem
decl_stmt|;
name|child
operator|->
name|setChild
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|childOfChild
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|childOfChild
operator|->
name|parent
argument_list|()
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|{
name|QStandardItemModel
name|model
decl_stmt|;
name|QStandardItem
modifier|*
name|item
init|=
operator|new
name|QStandardItem
decl_stmt|;
name|model
operator|.
name|appendRow
argument_list|(
name|item
argument_list|)
expr_stmt|;
comment|// parent of a top-level item should be 0
name|QCOMPARE
argument_list|(
name|item
operator|->
name|parent
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QStandardItem
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|insertColumn_data
name|void
name|tst_QStandardItem
operator|::
name|insertColumn_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"rows"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"columns"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"column"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"count"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 0 at -1 in 0x0"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
operator|-
literal|1
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 0 at 0 in 0x0"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 0 at 0 in 1x0"
argument_list|)
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 0 at 0 in 0x1"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 0 at 0 in 1x1"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 1 at -1 in 0x0"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
operator|-
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 1 at 0 in 0x0"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 1 at 0 in 1x0"
argument_list|)
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 1 at 0 in 0x1"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 1 at 0 in 1x1"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 1 at 1 in 1x1"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 1 at 0 in 2x1"
argument_list|)
operator|<<
literal|2
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 1 at 1 in 2x1"
argument_list|)
operator|<<
literal|2
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 1 at 0 in 1x2"
argument_list|)
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 1 at 1 in 1x2"
argument_list|)
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 1 at 0 in 8x4"
argument_list|)
operator|<<
literal|8
operator|<<
literal|4
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 1 at 1 in 8x4"
argument_list|)
operator|<<
literal|8
operator|<<
literal|4
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 1 at 2 in 8x4"
argument_list|)
operator|<<
literal|8
operator|<<
literal|4
operator|<<
literal|2
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 1 at 3 in 8x4"
argument_list|)
operator|<<
literal|8
operator|<<
literal|4
operator|<<
literal|3
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 1 at 4 in 8x4"
argument_list|)
operator|<<
literal|8
operator|<<
literal|4
operator|<<
literal|4
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 4 at 0 in 8x4"
argument_list|)
operator|<<
literal|8
operator|<<
literal|4
operator|<<
literal|0
operator|<<
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 4 at 4 in 8x4"
argument_list|)
operator|<<
literal|8
operator|<<
literal|4
operator|<<
literal|4
operator|<<
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 6 at 0 in 8x4"
argument_list|)
operator|<<
literal|8
operator|<<
literal|4
operator|<<
literal|0
operator|<<
literal|6
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 6 at 4 in 8x4"
argument_list|)
operator|<<
literal|8
operator|<<
literal|4
operator|<<
literal|4
operator|<<
literal|6
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertColumn
name|void
name|tst_QStandardItem
operator|::
name|insertColumn
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|rows
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|column
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|QStandardItem
name|item
argument_list|(
name|rows
argument_list|,
name|columns
argument_list|)
decl_stmt|;
comment|// make items for a new column
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
name|columnItems
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
name|columnItems
operator|.
name|append
argument_list|(
operator|new
name|QStandardItem
argument_list|)
expr_stmt|;
name|item
operator|.
name|insertColumn
argument_list|(
name|column
argument_list|,
name|columnItems
argument_list|)
expr_stmt|;
if|if
condition|(
name|column
operator|>=
literal|0
condition|)
block|{
name|QCOMPARE
argument_list|(
name|item
operator|.
name|columnCount
argument_list|()
argument_list|,
name|columns
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|rowCount
argument_list|()
argument_list|,
name|qMax
argument_list|(
name|rows
argument_list|,
name|count
argument_list|)
argument_list|)
expr_stmt|;
comment|// check to make sure items were inserted in correct place
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|item
operator|.
name|child
argument_list|(
name|i
argument_list|,
name|column
argument_list|)
argument_list|,
name|columnItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|count
init|;
name|i
operator|<
name|item
operator|.
name|rowCount
argument_list|()
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|item
operator|.
name|child
argument_list|(
name|i
argument_list|,
name|column
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
name|QStandardItem
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|item
operator|.
name|columnCount
argument_list|()
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|rowCount
argument_list|()
argument_list|,
name|rows
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|columnItems
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|insertColumns_data
name|void
name|tst_QStandardItem
operator|::
name|insertColumns_data
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|insertColumns
name|void
name|tst_QStandardItem
operator|::
name|insertColumns
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|insertRow_data
name|void
name|tst_QStandardItem
operator|::
name|insertRow_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"rows"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"columns"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"row"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"count"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 0 at -1 in 0x0"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
operator|-
literal|1
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 0 at 0 in 0x0"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 0 at 0 in 1x0"
argument_list|)
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 0 at 0 in 0x1"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 0 at 0 in 1x1"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 1 at -1 in 0x0"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
operator|-
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 1 at 0 in 0x0"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 1 at 0 in 1x0"
argument_list|)
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 1 at 0 in 0x1"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 1 at 0 in 1x1"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 1 at 1 in 1x1"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 1 at 0 in 2x1"
argument_list|)
operator|<<
literal|2
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 1 at 1 in 2x1"
argument_list|)
operator|<<
literal|2
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 1 at 0 in 1x2"
argument_list|)
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 1 at 1 in 1x2"
argument_list|)
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 1 at 0 in 4x8"
argument_list|)
operator|<<
literal|4
operator|<<
literal|8
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 1 at 1 in 4x8"
argument_list|)
operator|<<
literal|4
operator|<<
literal|8
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 1 at 2 in 4x8"
argument_list|)
operator|<<
literal|4
operator|<<
literal|8
operator|<<
literal|2
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 1 at 3 in 4x8"
argument_list|)
operator|<<
literal|4
operator|<<
literal|8
operator|<<
literal|3
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 1 at 4 in 4x8"
argument_list|)
operator|<<
literal|4
operator|<<
literal|8
operator|<<
literal|4
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 4 at 0 in 4x8"
argument_list|)
operator|<<
literal|4
operator|<<
literal|8
operator|<<
literal|0
operator|<<
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 4 at 4 in 4x8"
argument_list|)
operator|<<
literal|4
operator|<<
literal|8
operator|<<
literal|4
operator|<<
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 6 at 0 in 4x8"
argument_list|)
operator|<<
literal|4
operator|<<
literal|8
operator|<<
literal|0
operator|<<
literal|6
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert 6 at 4 in 4x8"
argument_list|)
operator|<<
literal|4
operator|<<
literal|8
operator|<<
literal|4
operator|<<
literal|6
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertRow
name|void
name|tst_QStandardItem
operator|::
name|insertRow
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|rows
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|QStandardItem
name|item
argument_list|(
name|rows
argument_list|,
name|columns
argument_list|)
decl_stmt|;
comment|// make items for a new column
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
name|rowItems
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
name|rowItems
operator|.
name|append
argument_list|(
operator|new
name|QStandardItem
argument_list|)
expr_stmt|;
name|item
operator|.
name|insertRow
argument_list|(
name|row
argument_list|,
name|rowItems
argument_list|)
expr_stmt|;
if|if
condition|(
name|row
operator|>=
literal|0
condition|)
block|{
name|QCOMPARE
argument_list|(
name|item
operator|.
name|columnCount
argument_list|()
argument_list|,
name|qMax
argument_list|(
name|columns
argument_list|,
name|count
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|rowCount
argument_list|()
argument_list|,
name|rows
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// check to make sure items were inserted in correct place
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|item
operator|.
name|child
argument_list|(
name|row
argument_list|,
name|i
argument_list|)
argument_list|,
name|rowItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|count
init|;
name|i
operator|<
name|item
operator|.
name|columnCount
argument_list|()
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|item
operator|.
name|child
argument_list|(
name|row
argument_list|,
name|i
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
name|QStandardItem
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|item
operator|.
name|columnCount
argument_list|()
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|rowCount
argument_list|()
argument_list|,
name|rows
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|rowItems
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|insertRows_data
name|void
name|tst_QStandardItem
operator|::
name|insertRows_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"rows"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"columns"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"insertAt"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"insertCount"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert {0,1} at 0 in 0x0"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|2
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertRows
name|void
name|tst_QStandardItem
operator|::
name|insertRows
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|rows
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|insertAt
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|insertCount
argument_list|)
expr_stmt|;
name|QStandardItem
name|item
argument_list|(
name|rows
argument_list|,
name|columns
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
name|items
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|insertCount
condition|;
operator|++
name|i
control|)
block|{
name|items
operator|.
name|append
argument_list|(
operator|new
name|QStandardItem
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|item
operator|.
name|insertRows
argument_list|(
name|insertAt
argument_list|,
name|items
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|rowCount
argument_list|()
argument_list|,
name|rows
operator|+
name|insertCount
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|appendColumn_data
name|void
name|tst_QStandardItem
operator|::
name|appendColumn_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"rows"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"columns"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"count"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 0 to 0x0"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 1 to 0x0"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 1 to 1x0"
argument_list|)
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 1 to 0x1"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 1 to 1x1"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 1 to 2x0"
argument_list|)
operator|<<
literal|2
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 1 to 0x2"
argument_list|)
operator|<<
literal|0
operator|<<
literal|2
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 1 to 2x1"
argument_list|)
operator|<<
literal|2
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 1 to 1x2"
argument_list|)
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 1 to 2x2"
argument_list|)
operator|<<
literal|2
operator|<<
literal|2
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 2 to 0x0"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 2 to 1x0"
argument_list|)
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 2 to 0x1"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 2 to 1x1"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 2 to 2x0"
argument_list|)
operator|<<
literal|2
operator|<<
literal|0
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 2 to 0x2"
argument_list|)
operator|<<
literal|0
operator|<<
literal|2
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 2 to 2x1"
argument_list|)
operator|<<
literal|2
operator|<<
literal|1
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 2 to 1x2"
argument_list|)
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 2 to 2x2"
argument_list|)
operator|<<
literal|2
operator|<<
literal|2
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 3 to 2x1"
argument_list|)
operator|<<
literal|2
operator|<<
literal|1
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 3 to 1x2"
argument_list|)
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 3 to 2x2"
argument_list|)
operator|<<
literal|2
operator|<<
literal|2
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 3 to 4x2"
argument_list|)
operator|<<
literal|4
operator|<<
literal|2
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 3 to 2x4"
argument_list|)
operator|<<
literal|2
operator|<<
literal|4
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 3 to 4x4"
argument_list|)
operator|<<
literal|4
operator|<<
literal|4
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 7 to 4x2"
argument_list|)
operator|<<
literal|4
operator|<<
literal|2
operator|<<
literal|7
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 7 to 2x4"
argument_list|)
operator|<<
literal|2
operator|<<
literal|4
operator|<<
literal|7
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 7 to 4x4"
argument_list|)
operator|<<
literal|4
operator|<<
literal|4
operator|<<
literal|7
expr_stmt|;
block|}
end_function
begin_function
DECL|function|appendColumn
name|void
name|tst_QStandardItem
operator|::
name|appendColumn
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|rows
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|QStandardItem
name|item
argument_list|(
name|rows
argument_list|,
name|columns
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
name|originalChildren
decl_stmt|;
comment|// initialize children
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|columns
condition|;
operator|++
name|j
control|)
block|{
name|QStandardItem
modifier|*
name|child
init|=
operator|new
name|QStandardItem
decl_stmt|;
name|originalChildren
operator|.
name|append
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|item
operator|.
name|setChild
argument_list|(
name|i
argument_list|,
name|j
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
comment|// make items for a new column
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
name|columnItems
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
name|columnItems
operator|.
name|append
argument_list|(
operator|new
name|QStandardItem
argument_list|)
expr_stmt|;
name|item
operator|.
name|appendColumn
argument_list|(
name|columnItems
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|columnCount
argument_list|()
argument_list|,
name|columns
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|rowCount
argument_list|()
argument_list|,
name|qMax
argument_list|(
name|rows
argument_list|,
name|count
argument_list|)
argument_list|)
expr_stmt|;
comment|// check to make sure items were inserted in correct place
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|item
operator|.
name|child
argument_list|(
name|i
argument_list|,
name|columns
argument_list|)
argument_list|,
name|columnItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|count
init|;
name|i
operator|<
name|item
operator|.
name|rowCount
argument_list|()
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|item
operator|.
name|child
argument_list|(
name|i
argument_list|,
name|columns
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
name|QStandardItem
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure original children remained unchanged
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|columns
condition|;
operator|++
name|j
control|)
name|QCOMPARE
argument_list|(
name|item
operator|.
name|child
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|,
name|originalChildren
operator|.
name|at
argument_list|(
name|i
operator|*
name|columns
operator|+
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|appendRow_data
name|void
name|tst_QStandardItem
operator|::
name|appendRow_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"rows"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"columns"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"count"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 0 to 0x0"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 1 to 0x0"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 1 to 1x0"
argument_list|)
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 1 to 0x1"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 1 to 1x1"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 1 to 2x0"
argument_list|)
operator|<<
literal|2
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 1 to 0x2"
argument_list|)
operator|<<
literal|0
operator|<<
literal|2
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 1 to 2x1"
argument_list|)
operator|<<
literal|2
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 1 to 1x2"
argument_list|)
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 1 to 2x2"
argument_list|)
operator|<<
literal|2
operator|<<
literal|2
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 2 to 0x0"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 2 to 1x0"
argument_list|)
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 2 to 0x1"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 2 to 1x1"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 2 to 2x0"
argument_list|)
operator|<<
literal|2
operator|<<
literal|0
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 2 to 0x2"
argument_list|)
operator|<<
literal|0
operator|<<
literal|2
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 2 to 2x1"
argument_list|)
operator|<<
literal|2
operator|<<
literal|1
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 2 to 1x2"
argument_list|)
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 2 to 2x2"
argument_list|)
operator|<<
literal|2
operator|<<
literal|2
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 3 to 2x1"
argument_list|)
operator|<<
literal|2
operator|<<
literal|1
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 3 to 1x2"
argument_list|)
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 3 to 2x2"
argument_list|)
operator|<<
literal|2
operator|<<
literal|2
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 3 to 4x2"
argument_list|)
operator|<<
literal|4
operator|<<
literal|2
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 3 to 2x4"
argument_list|)
operator|<<
literal|2
operator|<<
literal|4
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 3 to 4x4"
argument_list|)
operator|<<
literal|4
operator|<<
literal|4
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 7 to 4x2"
argument_list|)
operator|<<
literal|4
operator|<<
literal|2
operator|<<
literal|7
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 7 to 2x4"
argument_list|)
operator|<<
literal|2
operator|<<
literal|4
operator|<<
literal|7
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append 7 to 4x4"
argument_list|)
operator|<<
literal|4
operator|<<
literal|4
operator|<<
literal|7
expr_stmt|;
block|}
end_function
begin_function
DECL|function|appendRow
name|void
name|tst_QStandardItem
operator|::
name|appendRow
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|rows
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|QStandardItem
name|item
argument_list|(
name|rows
argument_list|,
name|columns
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
name|originalChildren
decl_stmt|;
comment|// initialize children
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|columns
condition|;
operator|++
name|j
control|)
block|{
name|QStandardItem
modifier|*
name|child
init|=
operator|new
name|QStandardItem
decl_stmt|;
name|originalChildren
operator|.
name|append
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|item
operator|.
name|setChild
argument_list|(
name|i
argument_list|,
name|j
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
comment|// make items for a new row
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
name|rowItems
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
name|rowItems
operator|.
name|append
argument_list|(
operator|new
name|QStandardItem
argument_list|)
expr_stmt|;
name|item
operator|.
name|appendRow
argument_list|(
name|rowItems
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|rowCount
argument_list|()
argument_list|,
name|rows
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|columnCount
argument_list|()
argument_list|,
name|qMax
argument_list|(
name|columns
argument_list|,
name|count
argument_list|)
argument_list|)
expr_stmt|;
comment|// check to make sure items were inserted in correct place
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|item
operator|.
name|child
argument_list|(
name|rows
argument_list|,
name|i
argument_list|)
argument_list|,
name|rowItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|count
init|;
name|i
operator|<
name|item
operator|.
name|columnCount
argument_list|()
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|item
operator|.
name|child
argument_list|(
name|rows
argument_list|,
name|i
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
name|QStandardItem
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure original children remained unchanged
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|columns
condition|;
operator|++
name|j
control|)
name|QCOMPARE
argument_list|(
name|item
operator|.
name|child
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|,
name|originalChildren
operator|.
name|at
argument_list|(
name|i
operator|*
name|columns
operator|+
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|takeChild
name|void
name|tst_QStandardItem
operator|::
name|takeChild
parameter_list|()
block|{
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
name|itemList
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
name|itemList
operator|.
name|append
argument_list|(
operator|new
name|QStandardItem
argument_list|)
expr_stmt|;
name|QStandardItem
name|item
decl_stmt|;
name|item
operator|.
name|appendColumn
argument_list|(
name|itemList
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|item
operator|.
name|rowCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|item
operator|.
name|takeChild
argument_list|(
name|i
argument_list|)
argument_list|,
name|itemList
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|takeChild
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
name|QStandardItem
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
name|item
operator|.
name|rowCount
argument_list|()
condition|;
operator|++
name|j
control|)
name|QCOMPARE
argument_list|(
name|item
operator|.
name|child
argument_list|(
name|j
argument_list|)
argument_list|,
name|itemList
operator|.
name|at
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|qDeleteAll
argument_list|(
name|itemList
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeColumn_data
name|void
name|tst_QStandardItem
operator|::
name|takeColumn_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"rows"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"columns"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"column"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"expectSuccess"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"take -1 from 0x0"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"take 0 from 0x0"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"take 0 from 1x0"
argument_list|)
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"take 0 from 0x1"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"take 1 from 0x1"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"take 0 from 1x1"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"take 1 from 1x1"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"take 0 from 4x1"
argument_list|)
operator|<<
literal|4
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"take 1 from 4x1"
argument_list|)
operator|<<
literal|4
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"take 0 from 4x8"
argument_list|)
operator|<<
literal|4
operator|<<
literal|8
operator|<<
literal|0
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"take 7 from 4x8"
argument_list|)
operator|<<
literal|4
operator|<<
literal|8
operator|<<
literal|7
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"take 8 from 4x8"
argument_list|)
operator|<<
literal|4
operator|<<
literal|8
operator|<<
literal|8
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeColumn
name|void
name|tst_QStandardItem
operator|::
name|takeColumn
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|rows
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|column
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|expectSuccess
argument_list|)
expr_stmt|;
name|QStandardItem
name|item
argument_list|(
name|rows
argument_list|,
name|columns
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
name|originalChildren
decl_stmt|;
comment|// initialize children
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|columns
condition|;
operator|++
name|j
control|)
block|{
name|QStandardItem
modifier|*
name|child
init|=
operator|new
name|QStandardItem
decl_stmt|;
name|originalChildren
operator|.
name|append
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|item
operator|.
name|setChild
argument_list|(
name|i
argument_list|,
name|j
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
name|taken
init|=
name|item
operator|.
name|takeColumn
argument_list|(
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectSuccess
condition|)
block|{
name|QCOMPARE
argument_list|(
name|taken
operator|.
name|count
argument_list|()
argument_list|,
name|item
operator|.
name|rowCount
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|columnCount
argument_list|()
argument_list|,
name|columns
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|column
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|taken
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|taken
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|originalChildren
operator|.
name|takeAt
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|+=
name|item
operator|.
name|columnCount
argument_list|()
expr_stmt|;
block|}
name|index
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|item
operator|.
name|rowCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|item
operator|.
name|columnCount
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|QCOMPARE
argument_list|(
name|item
operator|.
name|child
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|,
name|originalChildren
operator|.
name|at
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|index
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|taken
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|qDeleteAll
argument_list|(
name|taken
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeRow_data
name|void
name|tst_QStandardItem
operator|::
name|takeRow_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"rows"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"columns"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"row"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"expectSuccess"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"take -1 from 0x0"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"take 0 from 0x0"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"take 0 from 1x0"
argument_list|)
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"take 0 from 0x1"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"take 1 from 0x1"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"take 0 from 1x1"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"take 1 from 1x1"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"take 0 from 1x4"
argument_list|)
operator|<<
literal|1
operator|<<
literal|4
operator|<<
literal|0
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"take 1 from 1x4"
argument_list|)
operator|<<
literal|1
operator|<<
literal|4
operator|<<
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"take 0 from 8x4"
argument_list|)
operator|<<
literal|8
operator|<<
literal|4
operator|<<
literal|0
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"take 7 from 8x4"
argument_list|)
operator|<<
literal|8
operator|<<
literal|4
operator|<<
literal|7
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"take 8 from 8x4"
argument_list|)
operator|<<
literal|8
operator|<<
literal|4
operator|<<
literal|8
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeRow
name|void
name|tst_QStandardItem
operator|::
name|takeRow
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|rows
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|expectSuccess
argument_list|)
expr_stmt|;
name|QStandardItem
name|item
argument_list|(
name|rows
argument_list|,
name|columns
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
name|originalChildren
decl_stmt|;
comment|// initialize children
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|columns
condition|;
operator|++
name|j
control|)
block|{
name|QStandardItem
modifier|*
name|child
init|=
operator|new
name|QStandardItem
decl_stmt|;
name|originalChildren
operator|.
name|append
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|item
operator|.
name|setChild
argument_list|(
name|i
argument_list|,
name|j
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
name|taken
init|=
name|item
operator|.
name|takeRow
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectSuccess
condition|)
block|{
name|QCOMPARE
argument_list|(
name|taken
operator|.
name|count
argument_list|()
argument_list|,
name|item
operator|.
name|columnCount
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|rowCount
argument_list|()
argument_list|,
name|rows
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|row
operator|*
name|columns
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|taken
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|taken
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|originalChildren
operator|.
name|takeAt
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|index
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|item
operator|.
name|rowCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|item
operator|.
name|columnCount
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|QCOMPARE
argument_list|(
name|item
operator|.
name|child
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|,
name|originalChildren
operator|.
name|at
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|index
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|taken
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|qDeleteAll
argument_list|(
name|taken
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|streamItem
name|void
name|tst_QStandardItem
operator|::
name|streamItem
parameter_list|()
block|{
name|QStandardItem
name|item
decl_stmt|;
name|item
operator|.
name|setText
argument_list|(
name|QLatin1String
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|.
name|setToolTip
argument_list|(
name|QLatin1String
argument_list|(
literal|"toolTip"
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|.
name|setStatusTip
argument_list|(
name|QLatin1String
argument_list|(
literal|"statusTip"
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|.
name|setWhatsThis
argument_list|(
name|QLatin1String
argument_list|(
literal|"whatsThis"
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|.
name|setSizeHint
argument_list|(
name|QSize
argument_list|(
literal|64
argument_list|,
literal|48
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|.
name|setFont
argument_list|(
name|QFont
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|.
name|setTextAlignment
argument_list|(
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignVCenter
argument_list|)
expr_stmt|;
name|item
operator|.
name|setBackground
argument_list|(
name|QColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|.
name|setForeground
argument_list|(
name|QColor
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|.
name|setCheckState
argument_list|(
name|Qt
operator|::
name|PartiallyChecked
argument_list|)
expr_stmt|;
name|item
operator|.
name|setAccessibleText
argument_list|(
name|QLatin1String
argument_list|(
literal|"accessibleText"
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|.
name|setAccessibleDescription
argument_list|(
name|QLatin1String
argument_list|(
literal|"accessibleDescription"
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|ba
decl_stmt|;
block|{
name|QDataStream
name|ds
argument_list|(
operator|&
name|ba
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|ds
operator|<<
name|item
expr_stmt|;
block|}
block|{
name|QStandardItem
name|streamedItem
decl_stmt|;
name|QDataStream
name|ds
argument_list|(
operator|&
name|ba
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|ds
operator|>>
name|streamedItem
expr_stmt|;
name|QCOMPARE
argument_list|(
name|streamedItem
operator|.
name|text
argument_list|()
argument_list|,
name|item
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|streamedItem
operator|.
name|toolTip
argument_list|()
argument_list|,
name|item
operator|.
name|toolTip
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|streamedItem
operator|.
name|statusTip
argument_list|()
argument_list|,
name|item
operator|.
name|statusTip
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|streamedItem
operator|.
name|whatsThis
argument_list|()
argument_list|,
name|item
operator|.
name|whatsThis
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|streamedItem
operator|.
name|sizeHint
argument_list|()
argument_list|,
name|item
operator|.
name|sizeHint
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|streamedItem
operator|.
name|font
argument_list|()
argument_list|,
name|item
operator|.
name|font
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|streamedItem
operator|.
name|textAlignment
argument_list|()
argument_list|,
name|item
operator|.
name|textAlignment
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|streamedItem
operator|.
name|background
argument_list|()
argument_list|,
name|item
operator|.
name|background
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|streamedItem
operator|.
name|foreground
argument_list|()
argument_list|,
name|item
operator|.
name|foreground
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|streamedItem
operator|.
name|checkState
argument_list|()
argument_list|,
name|item
operator|.
name|checkState
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|streamedItem
operator|.
name|accessibleText
argument_list|()
argument_list|,
name|item
operator|.
name|accessibleText
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|streamedItem
operator|.
name|accessibleDescription
argument_list|()
argument_list|,
name|item
operator|.
name|accessibleDescription
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|streamedItem
operator|.
name|flags
argument_list|()
argument_list|,
name|item
operator|.
name|flags
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|deleteItem
name|void
name|tst_QStandardItem
operator|::
name|deleteItem
parameter_list|()
block|{
name|QStandardItemModel
name|model
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|)
decl_stmt|;
comment|// initialize items
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|model
operator|.
name|rowCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|model
operator|.
name|columnCount
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|QStandardItem
modifier|*
name|item
init|=
operator|new
name|QStandardItem
argument_list|()
decl_stmt|;
name|model
operator|.
name|setItem
argument_list|(
name|i
argument_list|,
name|j
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
block|}
comment|// delete items
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|model
operator|.
name|rowCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|model
operator|.
name|columnCount
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|QStandardItem
modifier|*
name|item
init|=
name|model
operator|.
name|item
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
decl_stmt|;
operator|delete
name|item
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|item
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
name|QStandardItem
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|clone
name|void
name|tst_QStandardItem
operator|::
name|clone
parameter_list|()
block|{
name|QStandardItem
name|item
decl_stmt|;
name|item
operator|.
name|setText
argument_list|(
name|QLatin1String
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|.
name|setToolTip
argument_list|(
name|QLatin1String
argument_list|(
literal|"toolTip"
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|.
name|setStatusTip
argument_list|(
name|QLatin1String
argument_list|(
literal|"statusTip"
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|.
name|setWhatsThis
argument_list|(
name|QLatin1String
argument_list|(
literal|"whatsThis"
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|.
name|setSizeHint
argument_list|(
name|QSize
argument_list|(
literal|64
argument_list|,
literal|48
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|.
name|setFont
argument_list|(
name|QFont
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|.
name|setTextAlignment
argument_list|(
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignVCenter
argument_list|)
expr_stmt|;
name|item
operator|.
name|setBackground
argument_list|(
name|QColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|.
name|setForeground
argument_list|(
name|QColor
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|.
name|setCheckState
argument_list|(
name|Qt
operator|::
name|PartiallyChecked
argument_list|)
expr_stmt|;
name|item
operator|.
name|setAccessibleText
argument_list|(
name|QLatin1String
argument_list|(
literal|"accessibleText"
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|.
name|setAccessibleDescription
argument_list|(
name|QLatin1String
argument_list|(
literal|"accessibleDescription"
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|.
name|setFlags
argument_list|(
name|Qt
operator|::
name|ItemIsEnabled
operator||
name|Qt
operator|::
name|ItemIsDropEnabled
argument_list|)
expr_stmt|;
name|QStandardItem
modifier|*
name|clone
init|=
name|item
operator|.
name|clone
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|clone
operator|->
name|text
argument_list|()
argument_list|,
name|item
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|clone
operator|->
name|toolTip
argument_list|()
argument_list|,
name|item
operator|.
name|toolTip
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|clone
operator|->
name|statusTip
argument_list|()
argument_list|,
name|item
operator|.
name|statusTip
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|clone
operator|->
name|whatsThis
argument_list|()
argument_list|,
name|item
operator|.
name|whatsThis
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|clone
operator|->
name|sizeHint
argument_list|()
argument_list|,
name|item
operator|.
name|sizeHint
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|clone
operator|->
name|font
argument_list|()
argument_list|,
name|item
operator|.
name|font
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|clone
operator|->
name|textAlignment
argument_list|()
argument_list|,
name|item
operator|.
name|textAlignment
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|clone
operator|->
name|background
argument_list|()
argument_list|,
name|item
operator|.
name|background
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|clone
operator|->
name|foreground
argument_list|()
argument_list|,
name|item
operator|.
name|foreground
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|clone
operator|->
name|checkState
argument_list|()
argument_list|,
name|item
operator|.
name|checkState
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|clone
operator|->
name|accessibleText
argument_list|()
argument_list|,
name|item
operator|.
name|accessibleText
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|clone
operator|->
name|accessibleDescription
argument_list|()
argument_list|,
name|item
operator|.
name|accessibleDescription
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|clone
operator|->
name|flags
argument_list|()
argument_list|,
name|item
operator|.
name|flags
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
operator|*
name|clone
operator|<
name|item
operator|)
argument_list|)
expr_stmt|;
operator|delete
name|clone
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sortChildren
name|void
name|tst_QStandardItem
operator|::
name|sortChildren
parameter_list|()
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|2
condition|;
operator|++
name|x
control|)
block|{
name|QStandardItemModel
modifier|*
name|model
init|=
operator|new
name|QStandardItemModel
decl_stmt|;
name|QStandardItem
modifier|*
name|item
init|=
operator|(
name|x
operator|==
literal|0
operator|)
condition|?
operator|new
name|QStandardItem
else|:
name|model
operator|->
name|invisibleRootItem
argument_list|()
decl_stmt|;
name|QStandardItem
modifier|*
name|one
init|=
operator|new
name|QStandardItem
decl_stmt|;
name|one
operator|->
name|appendRow
argument_list|(
operator|new
name|QStandardItem
argument_list|(
name|QLatin1String
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|one
operator|->
name|appendRow
argument_list|(
operator|new
name|QStandardItem
argument_list|(
name|QLatin1String
argument_list|(
literal|"b"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|one
operator|->
name|appendRow
argument_list|(
operator|new
name|QStandardItem
argument_list|(
name|QLatin1String
argument_list|(
literal|"c"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QStandardItem
modifier|*
name|two
init|=
operator|new
name|QStandardItem
decl_stmt|;
name|two
operator|->
name|appendRow
argument_list|(
operator|new
name|QStandardItem
argument_list|(
name|QLatin1String
argument_list|(
literal|"f"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|two
operator|->
name|appendRow
argument_list|(
operator|new
name|QStandardItem
argument_list|(
name|QLatin1String
argument_list|(
literal|"d"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|two
operator|->
name|appendRow
argument_list|(
operator|new
name|QStandardItem
argument_list|(
name|QLatin1String
argument_list|(
literal|"e"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|->
name|appendRow
argument_list|(
name|one
argument_list|)
expr_stmt|;
name|item
operator|->
name|appendRow
argument_list|(
name|two
argument_list|)
expr_stmt|;
name|QSignalSpy
name|layoutAboutToBeChangedSpy
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|layoutAboutToBeChanged
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|layoutChangedSpy
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|layoutChanged
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|one
operator|->
name|sortChildren
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|DescendingOrder
argument_list|)
expr_stmt|;
comment|// verify sorted
name|QCOMPARE
argument_list|(
name|one
operator|->
name|child
argument_list|(
literal|0
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|one
operator|->
name|child
argument_list|(
literal|1
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|one
operator|->
name|child
argument_list|(
literal|2
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify siblings unaffected
name|QCOMPARE
argument_list|(
name|two
operator|->
name|child
argument_list|(
literal|0
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"f"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|two
operator|->
name|child
argument_list|(
literal|1
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|two
operator|->
name|child
argument_list|(
literal|2
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
name|two
operator|->
name|sortChildren
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|AscendingOrder
argument_list|)
expr_stmt|;
comment|// verify sorted
name|QCOMPARE
argument_list|(
name|two
operator|->
name|child
argument_list|(
literal|0
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|two
operator|->
name|child
argument_list|(
literal|1
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|two
operator|->
name|child
argument_list|(
literal|2
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"f"
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify siblings unaffected
name|QCOMPARE
argument_list|(
name|one
operator|->
name|child
argument_list|(
literal|0
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|one
operator|->
name|child
argument_list|(
literal|1
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|one
operator|->
name|child
argument_list|(
literal|2
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|->
name|sortChildren
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|AscendingOrder
argument_list|)
expr_stmt|;
comment|// verify everything sorted
name|QCOMPARE
argument_list|(
name|one
operator|->
name|child
argument_list|(
literal|0
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|one
operator|->
name|child
argument_list|(
literal|1
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|one
operator|->
name|child
argument_list|(
literal|2
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|two
operator|->
name|child
argument_list|(
literal|0
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|two
operator|->
name|child
argument_list|(
literal|1
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|two
operator|->
name|child
argument_list|(
literal|2
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"f"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|layoutAboutToBeChangedSpy
operator|.
name|count
argument_list|()
argument_list|,
operator|(
name|x
operator|==
literal|0
operator|)
condition|?
literal|0
else|:
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|layoutChangedSpy
operator|.
name|count
argument_list|()
argument_list|,
operator|(
name|x
operator|==
literal|0
operator|)
condition|?
literal|0
else|:
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|==
literal|0
condition|)
operator|delete
name|item
expr_stmt|;
operator|delete
name|model
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|CustomItem
class|class
name|CustomItem
super|:
specifier|public
name|QStandardItem
block|{
public|public:
DECL|function|CustomItem
name|CustomItem
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
member_init_list|:
name|QStandardItem
argument_list|(
name|text
argument_list|)
block|{ }
DECL|function|CustomItem
name|CustomItem
parameter_list|()
block|{ }
DECL|function|~CustomItem
specifier|virtual
name|~
name|CustomItem
parameter_list|()
block|{ }
DECL|function|type
specifier|virtual
name|int
name|type
parameter_list|()
specifier|const
block|{
return|return
name|QStandardItem
operator|::
name|UserType
operator|+
literal|1
return|;
block|}
DECL|function|clone
specifier|virtual
name|QStandardItem
modifier|*
name|clone
parameter_list|()
specifier|const
block|{
return|return
name|QStandardItem
operator|::
name|clone
argument_list|()
return|;
block|}
DECL|function|emitDataChanged
name|void
name|emitDataChanged
parameter_list|()
block|{
name|QStandardItem
operator|::
name|emitDataChanged
argument_list|()
expr_stmt|;
block|}
DECL|function|operator <
specifier|virtual
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|QStandardItem
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
name|text
argument_list|()
operator|.
name|length
argument_list|()
operator|<
name|other
operator|.
name|text
argument_list|()
operator|.
name|length
argument_list|()
return|;
block|}
block|}
class|;
end_class
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QStandardItem*
argument_list|)
end_macro
begin_function
DECL|function|subclassing
name|void
name|tst_QStandardItem
operator|::
name|subclassing
parameter_list|()
block|{
name|qMetaTypeId
argument_list|<
name|QStandardItem
operator|*
argument_list|>
argument_list|()
expr_stmt|;
name|CustomItem
modifier|*
name|item
init|=
operator|new
name|CustomItem
decl_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|->
name|type
argument_list|()
argument_list|,
name|int
argument_list|(
name|QStandardItem
operator|::
name|UserType
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|->
name|setText
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|->
name|text
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|->
name|emitDataChanged
argument_list|()
expr_stmt|;
comment|// does nothing
name|QStandardItemModel
name|model
decl_stmt|;
name|model
operator|.
name|appendRow
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|QSignalSpy
name|itemChangedSpy
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|itemChanged
argument_list|(
name|QStandardItem
operator|*
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|item
operator|->
name|emitDataChanged
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|itemChangedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|itemChangedSpy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QStandardItem
operator|*
argument_list|>
argument_list|(
name|itemChangedSpy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
operator|(
name|QStandardItem
operator|*
operator|)
name|item
argument_list|)
expr_stmt|;
name|CustomItem
modifier|*
name|child0
init|=
operator|new
name|CustomItem
argument_list|(
literal|"cc"
argument_list|)
decl_stmt|;
name|CustomItem
modifier|*
name|child1
init|=
operator|new
name|CustomItem
argument_list|(
literal|"bbb"
argument_list|)
decl_stmt|;
name|CustomItem
modifier|*
name|child2
init|=
operator|new
name|CustomItem
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|item
operator|->
name|appendRow
argument_list|(
name|child0
argument_list|)
expr_stmt|;
name|item
operator|->
name|appendRow
argument_list|(
name|child1
argument_list|)
expr_stmt|;
name|item
operator|->
name|appendRow
argument_list|(
name|child2
argument_list|)
expr_stmt|;
name|item
operator|->
name|sortChildren
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|->
name|child
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|(
name|QStandardItem
operator|*
operator|)
name|child2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|->
name|child
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|(
name|QStandardItem
operator|*
operator|)
name|child0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|->
name|child
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|(
name|QStandardItem
operator|*
operator|)
name|child1
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QStandardItem
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qstandarditem.moc"
end_include
end_unit
