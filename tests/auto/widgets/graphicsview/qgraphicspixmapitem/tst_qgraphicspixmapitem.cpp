begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qgraphicsscene.h>
end_include
begin_include
include|#
directive|include
file|<qgraphicsitem.h>
end_include
begin_class
DECL|class|tst_QGraphicsPixmapItem
class|class
name|tst_QGraphicsPixmapItem
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|qgraphicspixmapitem_data
parameter_list|()
function_decl|;
name|void
name|qgraphicspixmapitem
parameter_list|()
function_decl|;
name|void
name|boundingRect_data
parameter_list|()
function_decl|;
name|void
name|boundingRect
parameter_list|()
function_decl|;
name|void
name|contains_data
parameter_list|()
function_decl|;
name|void
name|contains
parameter_list|()
function_decl|;
name|void
name|isObscuredBy_data
parameter_list|()
function_decl|;
name|void
name|isObscuredBy
parameter_list|()
function_decl|;
name|void
name|offset_data
parameter_list|()
function_decl|;
name|void
name|offset
parameter_list|()
function_decl|;
name|void
name|opaqueArea_data
parameter_list|()
function_decl|;
name|void
name|opaqueArea
parameter_list|()
function_decl|;
name|void
name|pixmap_data
parameter_list|()
function_decl|;
name|void
name|pixmap
parameter_list|()
function_decl|;
name|void
name|setPixmap_data
parameter_list|()
function_decl|;
name|void
name|setPixmap
parameter_list|()
function_decl|;
name|void
name|setShapeMode_data
parameter_list|()
function_decl|;
name|void
name|setShapeMode
parameter_list|()
function_decl|;
name|void
name|setTransformationMode_data
parameter_list|()
function_decl|;
name|void
name|setTransformationMode
parameter_list|()
function_decl|;
name|void
name|shape_data
parameter_list|()
function_decl|;
name|void
name|shape
parameter_list|()
function_decl|;
name|void
name|extension_data
parameter_list|()
function_decl|;
name|void
name|extension
parameter_list|()
function_decl|;
name|void
name|setExtension_data
parameter_list|()
function_decl|;
name|void
name|setExtension
parameter_list|()
function_decl|;
name|void
name|supportsExtension_data
parameter_list|()
function_decl|;
name|void
name|supportsExtension
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_comment
comment|// Subclass that exposes the protected functions.
end_comment
begin_class
DECL|class|SubQGraphicsPixmapItem
class|class
name|SubQGraphicsPixmapItem
super|:
specifier|public
name|QGraphicsPixmapItem
block|{
public|public:
DECL|enum|Extension
enum|enum
name|Extension
block|{
DECL|enumerator|UserExtension
name|UserExtension
init|=
name|QGraphicsItem
operator|::
name|UserExtension
block|}
enum|;
DECL|function|SubQGraphicsPixmapItem
name|SubQGraphicsPixmapItem
parameter_list|(
name|QGraphicsItem
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QGraphicsPixmapItem
argument_list|(
name|parent
argument_list|)
block|{     }
DECL|function|SubQGraphicsPixmapItem
name|SubQGraphicsPixmapItem
parameter_list|(
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
name|QGraphicsItem
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QGraphicsPixmapItem
argument_list|(
name|pixmap
argument_list|,
name|parent
argument_list|)
block|{     }
DECL|function|call_extension
name|QVariant
name|call_extension
parameter_list|(
name|QVariant
specifier|const
modifier|&
name|variant
parameter_list|)
specifier|const
block|{
return|return
name|SubQGraphicsPixmapItem
operator|::
name|extension
argument_list|(
name|variant
argument_list|)
return|;
block|}
DECL|function|call_setExtension
name|void
name|call_setExtension
parameter_list|(
name|Extension
name|extension
parameter_list|,
name|QVariant
specifier|const
modifier|&
name|variant
parameter_list|)
block|{
return|return
name|SubQGraphicsPixmapItem
operator|::
name|setExtension
argument_list|(
operator|(
name|QGraphicsItem
operator|::
name|Extension
operator|)
name|extension
argument_list|,
name|variant
argument_list|)
return|;
block|}
DECL|function|call_supportsExtension
name|bool
name|call_supportsExtension
parameter_list|(
name|Extension
name|extension
parameter_list|)
specifier|const
block|{
return|return
name|SubQGraphicsPixmapItem
operator|::
name|supportsExtension
argument_list|(
operator|(
name|QGraphicsItem
operator|::
name|Extension
operator|)
name|extension
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_comment
comment|// This will be called before the first test function is executed.
end_comment
begin_comment
comment|// It is only called once.
end_comment
begin_function
DECL|function|initTestCase
name|void
name|tst_QGraphicsPixmapItem
operator|::
name|initTestCase
parameter_list|()
block|{ }
end_function
begin_comment
comment|// This will be called after the last test function is executed.
end_comment
begin_comment
comment|// It is only called once.
end_comment
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QGraphicsPixmapItem
operator|::
name|cleanupTestCase
parameter_list|()
block|{ }
end_function
begin_comment
comment|// This will be called before each test function is executed.
end_comment
begin_function
DECL|function|init
name|void
name|tst_QGraphicsPixmapItem
operator|::
name|init
parameter_list|()
block|{ }
end_function
begin_comment
comment|// This will be called after every test function.
end_comment
begin_function
DECL|function|cleanup
name|void
name|tst_QGraphicsPixmapItem
operator|::
name|cleanup
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|qgraphicspixmapitem_data
name|void
name|tst_QGraphicsPixmapItem
operator|::
name|qgraphicspixmapitem_data
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|qgraphicspixmapitem
name|void
name|tst_QGraphicsPixmapItem
operator|::
name|qgraphicspixmapitem
parameter_list|()
block|{
name|SubQGraphicsPixmapItem
name|item
decl_stmt|;
name|item
operator|.
name|boundingRect
argument_list|()
expr_stmt|;
name|item
operator|.
name|contains
argument_list|(
name|QPoint
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|.
name|isObscuredBy
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|item
operator|.
name|opaqueArea
argument_list|()
expr_stmt|;
comment|//item.paint();
name|QCOMPARE
argument_list|(
name|item
operator|.
name|offset
argument_list|()
argument_list|,
name|QPointF
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|pixmap
argument_list|()
argument_list|,
name|QPixmap
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|shapeMode
argument_list|()
argument_list|,
name|QGraphicsPixmapItem
operator|::
name|MaskShape
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|transformationMode
argument_list|()
argument_list|,
name|Qt
operator|::
name|FastTransformation
argument_list|)
expr_stmt|;
name|item
operator|.
name|setOffset
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|item
operator|.
name|setOffset
argument_list|(
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|.
name|setPixmap
argument_list|(
name|QPixmap
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|.
name|setShapeMode
argument_list|(
name|QGraphicsPixmapItem
operator|::
name|MaskShape
argument_list|)
expr_stmt|;
name|item
operator|.
name|setTransformationMode
argument_list|(
name|Qt
operator|::
name|FastTransformation
argument_list|)
expr_stmt|;
name|item
operator|.
name|shape
argument_list|()
expr_stmt|;
name|item
operator|.
name|type
argument_list|()
expr_stmt|;
name|item
operator|.
name|call_extension
argument_list|(
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|.
name|call_setExtension
argument_list|(
name|SubQGraphicsPixmapItem
operator|::
name|UserExtension
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|.
name|call_supportsExtension
argument_list|(
name|SubQGraphicsPixmapItem
operator|::
name|UserExtension
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|boundingRect_data
name|void
name|tst_QGraphicsPixmapItem
operator|::
name|boundingRect_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
literal|"pixmap"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QRectF
argument_list|>
argument_list|(
literal|"boundingRect"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
name|QPixmap
argument_list|()
operator|<<
name|QRectF
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10x10"
argument_list|)
operator|<<
name|QPixmap
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
operator|<<
name|QRectF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// public QRectF boundingRect() const
end_comment
begin_function
DECL|function|boundingRect
name|void
name|tst_QGraphicsPixmapItem
operator|::
name|boundingRect
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QPixmap
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QRectF
argument_list|,
name|boundingRect
argument_list|)
expr_stmt|;
name|SubQGraphicsPixmapItem
name|item
argument_list|(
name|pixmap
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|boundingRect
argument_list|()
argument_list|,
name|boundingRect
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|contains_data
name|void
name|tst_QGraphicsPixmapItem
operator|::
name|contains_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
literal|"pixmap"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QPointF
argument_list|>
argument_list|(
literal|"point"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"contains"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
name|QPixmap
argument_list|()
operator|<<
name|QPointF
argument_list|()
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10x10, 100x100"
argument_list|)
operator|<<
name|QPixmap
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
operator|<<
name|QPointF
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10x10, 5x5"
argument_list|)
operator|<<
name|QPixmap
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
operator|<<
name|QPointF
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"border-1"
argument_list|)
operator|<<
name|QPixmap
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
operator|<<
name|QPointF
argument_list|(
literal|10.5
argument_list|,
literal|10.5
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"border-2"
argument_list|)
operator|<<
name|QPixmap
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
operator|<<
name|QPointF
argument_list|(
operator|-
literal|0.5
argument_list|,
operator|-
literal|0.5
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_comment
comment|// public bool contains(QPointF const& point) const
end_comment
begin_function
DECL|function|contains
name|void
name|tst_QGraphicsPixmapItem
operator|::
name|contains
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QPixmap
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QPointF
argument_list|,
name|point
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|contains
argument_list|)
expr_stmt|;
name|SubQGraphicsPixmapItem
name|item
argument_list|(
name|pixmap
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|contains
argument_list|(
name|point
argument_list|)
argument_list|,
name|contains
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isObscuredBy_data
name|void
name|tst_QGraphicsPixmapItem
operator|::
name|isObscuredBy_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
literal|"pixmap"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
literal|"otherPixmap"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"isObscuredBy"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
name|QPixmap
argument_list|()
operator|<<
name|QPixmap
argument_list|()
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(10, 10) vs. (5, 5)"
argument_list|)
operator|<<
name|QPixmap
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
operator|<<
name|QPixmap
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(5, 5) vs. (10, 10)"
argument_list|)
operator|<<
name|QPixmap
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
operator|<<
name|QPixmap
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(10, 10) vs. (10, 10)"
argument_list|)
operator|<<
name|QPixmap
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
operator|<<
name|QPixmap
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(9, 9) vs. (10, 10)"
argument_list|)
operator|<<
name|QPixmap
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|)
operator|<<
name|QPixmap
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"(10, 10) vs. (9, 9)"
argument_list|)
operator|<<
name|QPixmap
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
operator|<<
name|QPixmap
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_comment
comment|// public bool isObscuredBy(QGraphicsItem const* item) const
end_comment
begin_function
DECL|function|isObscuredBy
name|void
name|tst_QGraphicsPixmapItem
operator|::
name|isObscuredBy
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QPixmap
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QPixmap
argument_list|,
name|otherPixmap
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|isObscuredBy
argument_list|)
expr_stmt|;
name|pixmap
operator|.
name|fill
argument_list|()
expr_stmt|;
name|otherPixmap
operator|.
name|fill
argument_list|()
expr_stmt|;
name|SubQGraphicsPixmapItem
modifier|*
name|item
init|=
operator|new
name|SubQGraphicsPixmapItem
argument_list|(
name|pixmap
argument_list|)
decl_stmt|;
name|SubQGraphicsPixmapItem
modifier|*
name|otherItem
init|=
operator|new
name|SubQGraphicsPixmapItem
argument_list|(
name|otherPixmap
argument_list|)
decl_stmt|;
name|item
operator|->
name|setOffset
argument_list|(
operator|-
name|pixmap
operator|.
name|width
argument_list|()
operator|/
literal|2.0
argument_list|,
operator|-
name|pixmap
operator|.
name|height
argument_list|()
operator|/
literal|2.0
argument_list|)
expr_stmt|;
name|otherItem
operator|->
name|setOffset
argument_list|(
operator|-
name|otherPixmap
operator|.
name|width
argument_list|()
operator|/
literal|2.0
argument_list|,
operator|-
name|otherPixmap
operator|.
name|height
argument_list|()
operator|/
literal|2.0
argument_list|)
expr_stmt|;
name|QGraphicsScene
name|scene
decl_stmt|;
name|scene
operator|.
name|addItem
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|scene
operator|.
name|addItem
argument_list|(
name|otherItem
argument_list|)
expr_stmt|;
name|otherItem
operator|->
name|setZValue
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|->
name|isObscuredBy
argument_list|(
name|otherItem
argument_list|)
argument_list|,
name|isObscuredBy
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|offset_data
name|void
name|tst_QGraphicsPixmapItem
operator|::
name|offset_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
literal|"pixmap"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QPointF
argument_list|>
argument_list|(
literal|"offset"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
name|QPixmap
argument_list|()
operator|<<
name|QPointF
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10x10, 1x1"
argument_list|)
operator|<<
name|QPixmap
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
operator|<<
name|QPointF
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// public QPointF offset() const
end_comment
begin_function
DECL|function|offset
name|void
name|tst_QGraphicsPixmapItem
operator|::
name|offset
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QPixmap
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QPointF
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|SubQGraphicsPixmapItem
name|item
argument_list|(
name|pixmap
argument_list|)
decl_stmt|;
name|item
operator|.
name|setOffset
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|offset
argument_list|()
argument_list|,
name|offset
argument_list|)
expr_stmt|;
comment|// ### test actual painting and compare pixmap with offseted one?
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QPainterPath
argument_list|)
end_macro
begin_function
DECL|function|opaqueArea_data
name|void
name|tst_QGraphicsPixmapItem
operator|::
name|opaqueArea_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
literal|"pixmap"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QPainterPath
argument_list|>
argument_list|(
literal|"opaqueArea"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
name|QPixmap
argument_list|()
operator|<<
name|QPainterPath
argument_list|()
expr_stmt|;
comment|// Currently QGraphicsPixmapItem just calls QGraphicsItem test there
block|}
end_function
begin_comment
comment|// public QPainterPath opaqueArea() const
end_comment
begin_function
DECL|function|opaqueArea
name|void
name|tst_QGraphicsPixmapItem
operator|::
name|opaqueArea
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QPixmap
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QPainterPath
argument_list|,
name|opaqueArea
argument_list|)
expr_stmt|;
name|SubQGraphicsPixmapItem
name|item
decl_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|opaqueArea
argument_list|()
argument_list|,
name|opaqueArea
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pixmap_data
name|void
name|tst_QGraphicsPixmapItem
operator|::
name|pixmap_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
literal|"pixmap"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
name|QPixmap
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10x10"
argument_list|)
operator|<<
name|QPixmap
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// public QPixmap pixmap() const
end_comment
begin_function
DECL|function|pixmap
name|void
name|tst_QGraphicsPixmapItem
operator|::
name|pixmap
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QPixmap
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
name|SubQGraphicsPixmapItem
name|item
argument_list|(
name|pixmap
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|pixmap
argument_list|()
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setPixmap_data
name|void
name|tst_QGraphicsPixmapItem
operator|::
name|setPixmap_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
literal|"pixmap"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
name|QPixmap
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10x10"
argument_list|)
operator|<<
name|QPixmap
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// public void setPixmap(QPixmap const& pixmap)
end_comment
begin_function
DECL|function|setPixmap
name|void
name|tst_QGraphicsPixmapItem
operator|::
name|setPixmap
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QPixmap
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
name|SubQGraphicsPixmapItem
name|item
decl_stmt|;
name|item
operator|.
name|setPixmap
argument_list|(
name|pixmap
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|pixmap
argument_list|()
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QGraphicsPixmapItem::ShapeMode
argument_list|)
end_macro
begin_function
DECL|function|setShapeMode_data
name|void
name|tst_QGraphicsPixmapItem
operator|::
name|setShapeMode_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
literal|"pixmap"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QGraphicsPixmapItem
operator|::
name|ShapeMode
argument_list|>
argument_list|(
literal|"mode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"MaskShape"
argument_list|)
operator|<<
name|QPixmap
argument_list|()
operator|<<
name|QGraphicsPixmapItem
operator|::
name|MaskShape
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BoundingRectShape"
argument_list|)
operator|<<
name|QPixmap
argument_list|()
operator|<<
name|QGraphicsPixmapItem
operator|::
name|BoundingRectShape
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"HeuristicMaskShape"
argument_list|)
operator|<<
name|QPixmap
argument_list|()
operator|<<
name|QGraphicsPixmapItem
operator|::
name|HeuristicMaskShape
expr_stmt|;
block|}
end_function
begin_comment
comment|// public void setShapeMode(QGraphicsPixmapItem::ShapeMode mode)
end_comment
begin_function
DECL|function|setShapeMode
name|void
name|tst_QGraphicsPixmapItem
operator|::
name|setShapeMode
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QPixmap
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QGraphicsPixmapItem
operator|::
name|ShapeMode
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|SubQGraphicsPixmapItem
name|item
argument_list|(
name|pixmap
argument_list|)
decl_stmt|;
name|item
operator|.
name|setShapeMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|shapeMode
argument_list|()
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|Qt::TransformationMode
argument_list|)
end_macro
begin_function
DECL|function|setTransformationMode_data
name|void
name|tst_QGraphicsPixmapItem
operator|::
name|setTransformationMode_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
literal|"pixmap"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|Qt
operator|::
name|TransformationMode
argument_list|>
argument_list|(
literal|"mode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"FastTransformation"
argument_list|)
operator|<<
name|QPixmap
argument_list|()
operator|<<
name|Qt
operator|::
name|FastTransformation
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"SmoothTransformation"
argument_list|)
operator|<<
name|QPixmap
argument_list|()
operator|<<
name|Qt
operator|::
name|SmoothTransformation
expr_stmt|;
block|}
end_function
begin_comment
comment|// public void setTransformationMode(Qt::TransformationMode mode)
end_comment
begin_function
DECL|function|setTransformationMode
name|void
name|tst_QGraphicsPixmapItem
operator|::
name|setTransformationMode
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QPixmap
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|Qt
operator|::
name|TransformationMode
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|SubQGraphicsPixmapItem
name|item
argument_list|(
name|pixmap
argument_list|)
decl_stmt|;
name|item
operator|.
name|setTransformationMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|transformationMode
argument_list|()
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|shape_data
name|void
name|tst_QGraphicsPixmapItem
operator|::
name|shape_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
literal|"pixmap"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QPainterPath
argument_list|>
argument_list|(
literal|"shape"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
name|QPixmap
argument_list|()
operator|<<
name|QPainterPath
argument_list|()
expr_stmt|;
comment|// ### what does a normal shape look like?
block|}
end_function
begin_comment
comment|// public QPainterPath shape() const
end_comment
begin_function
DECL|function|shape
name|void
name|tst_QGraphicsPixmapItem
operator|::
name|shape
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QPixmap
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QPainterPath
argument_list|,
name|shape
argument_list|)
expr_stmt|;
name|SubQGraphicsPixmapItem
name|item
argument_list|(
name|pixmap
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|shape
argument_list|()
argument_list|,
name|shape
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|SubQGraphicsPixmapItem::Extension
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QVariant
argument_list|)
end_macro
begin_function
DECL|function|extension_data
name|void
name|tst_QGraphicsPixmapItem
operator|::
name|extension_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"variant"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"extension"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
name|QVariant
argument_list|()
operator|<<
name|QVariant
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|// protected QVariant extension(QVariant const& variant) const
end_comment
begin_function
DECL|function|extension
name|void
name|tst_QGraphicsPixmapItem
operator|::
name|extension
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|variant
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|extension
argument_list|)
expr_stmt|;
name|SubQGraphicsPixmapItem
name|item
decl_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|call_extension
argument_list|(
name|variant
argument_list|)
argument_list|,
name|extension
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setExtension_data
name|void
name|tst_QGraphicsPixmapItem
operator|::
name|setExtension_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|SubQGraphicsPixmapItem
operator|::
name|Extension
argument_list|>
argument_list|(
literal|"extension"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"variant"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
name|SubQGraphicsPixmapItem
operator|::
name|UserExtension
operator|<<
name|QVariant
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|// protected void setExtension(QGraphicsItem::Extension extension, QVariant const& variant)
end_comment
begin_function
DECL|function|setExtension
name|void
name|tst_QGraphicsPixmapItem
operator|::
name|setExtension
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|SubQGraphicsPixmapItem
operator|::
name|Extension
argument_list|,
name|extension
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|variant
argument_list|)
expr_stmt|;
name|SubQGraphicsPixmapItem
name|item
decl_stmt|;
name|item
operator|.
name|call_setExtension
argument_list|(
name|extension
argument_list|,
name|variant
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|supportsExtension_data
name|void
name|tst_QGraphicsPixmapItem
operator|::
name|supportsExtension_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|SubQGraphicsPixmapItem
operator|::
name|Extension
argument_list|>
argument_list|(
literal|"extension"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"supportsExtension"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
name|SubQGraphicsPixmapItem
operator|::
name|UserExtension
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_comment
comment|// protected bool supportsExtension(QGraphicsItem::Extension extension) const
end_comment
begin_function
DECL|function|supportsExtension
name|void
name|tst_QGraphicsPixmapItem
operator|::
name|supportsExtension
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|SubQGraphicsPixmapItem
operator|::
name|Extension
argument_list|,
name|extension
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|supportsExtension
argument_list|)
expr_stmt|;
name|SubQGraphicsPixmapItem
name|item
decl_stmt|;
name|QCOMPARE
argument_list|(
name|item
operator|.
name|call_supportsExtension
argument_list|(
name|extension
argument_list|)
argument_list|,
name|supportsExtension
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QGraphicsPixmapItem
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qgraphicspixmapitem.moc"
end_include
end_unit
