begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qlayout.h>
end_include
begin_include
include|#
directive|include
file|"qstyle.h"
end_include
begin_include
include|#
directive|include
file|<qevent.h>
end_include
begin_include
include|#
directive|include
file|<qpainter.h>
end_include
begin_include
include|#
directive|include
file|<qpixmap.h>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qwidget.h>
end_include
begin_include
include|#
directive|include
file|<qlabel.h>
end_include
begin_include
include|#
directive|include
file|<qstyleoption.h>
end_include
begin_include
include|#
directive|include
file|<qscrollbar.h>
end_include
begin_include
include|#
directive|include
file|<qprogressbar.h>
end_include
begin_include
include|#
directive|include
file|<qtoolbutton.h>
end_include
begin_include
include|#
directive|include
file|<qtoolbar.h>
end_include
begin_include
include|#
directive|include
file|<qcommonstyle.h>
end_include
begin_include
include|#
directive|include
file|<qproxystyle.h>
end_include
begin_include
include|#
directive|include
file|<qstylefactory.h>
end_include
begin_include
include|#
directive|include
file|<qimagereader.h>
end_include
begin_include
include|#
directive|include
file|<qimagewriter.h>
end_include
begin_include
include|#
directive|include
file|<qmenu.h>
end_include
begin_include
include|#
directive|include
file|<qpushbutton.h>
end_include
begin_include
include|#
directive|include
file|<qspinbox.h>
end_include
begin_include
include|#
directive|include
file|<qcombobox.h>
end_include
begin_include
include|#
directive|include
file|<qradiobutton.h>
end_include
begin_include
include|#
directive|include
file|<qlineedit.h>
end_include
begin_include
include|#
directive|include
file|<qmdiarea.h>
end_include
begin_include
include|#
directive|include
file|<qscrollarea.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WINCE_WM
end_ifdef
begin_include
include|#
directive|include
file|<windows.h>
end_include
begin_function
DECL|function|qt_wince_is_smartphone
specifier|static
name|bool
name|qt_wince_is_smartphone
parameter_list|()
block|{
name|wchar_t
name|tszPlatform
index|[
literal|64
index|]
decl_stmt|;
if|if
condition|(
name|SystemParametersInfo
argument_list|(
name|SPI_GETPLATFORMTYPE
argument_list|,
sizeof|sizeof
argument_list|(
name|tszPlatform
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
operator|*
name|tszPlatform
argument_list|)
argument_list|,
name|tszPlatform
argument_list|,
literal|0
argument_list|)
condition|)
if|if
condition|(
literal|0
operator|==
name|_tcsicmp
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Smartphone"
argument_list|)
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
name|tszPlatform
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<qwidget.h>
end_include
begin_comment
comment|// Make a widget frameless to prevent size constraints of title bars
end_comment
begin_comment
comment|// from interfering (Windows).
end_comment
begin_function
DECL|function|setFrameless
specifier|static
specifier|inline
name|void
name|setFrameless
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
name|Qt
operator|::
name|WindowFlags
name|flags
init|=
name|w
operator|->
name|windowFlags
argument_list|()
decl_stmt|;
name|flags
operator||=
name|Qt
operator|::
name|FramelessWindowHint
expr_stmt|;
name|flags
operator|&=
operator|~
operator|(
name|Qt
operator|::
name|WindowTitleHint
operator||
name|Qt
operator|::
name|WindowSystemMenuHint
operator||
name|Qt
operator|::
name|WindowMinMaxButtonsHint
operator||
name|Qt
operator|::
name|WindowCloseButtonHint
operator|)
expr_stmt|;
name|w
operator|->
name|setWindowFlags
argument_list|(
name|flags
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|tst_QStyle
class|class
name|tst_QStyle
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QStyle
parameter_list|()
constructor_decl|;
private|private:
name|bool
name|testAllFunctions
parameter_list|(
name|QStyle
modifier|*
parameter_list|)
function_decl|;
name|bool
name|testScrollBarSubControls
parameter_list|(
name|QStyle
modifier|*
parameter_list|)
function_decl|;
name|void
name|testPainting
parameter_list|(
name|QStyle
modifier|*
name|style
parameter_list|,
specifier|const
name|QString
modifier|&
name|platform
parameter_list|)
function_decl|;
private|private
name|slots
private|:
name|void
name|drawItemPixmap
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_STYLE_FUSION
name|void
name|testFusionStyle
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|testWindowsStyle
parameter_list|()
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSXP
argument_list|)
name|void
name|testWindowsXPStyle
parameter_list|()
function_decl|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSVISTA
argument_list|)
name|void
name|testWindowsVistaStyle
parameter_list|()
function_decl|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|void
name|testMacStyle
parameter_list|()
function_decl|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|void
name|testWindowsCEStyle
parameter_list|()
function_decl|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_OS_WINCE_WM
name|void
name|testWindowsMobileStyle
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|testStyleFactory
parameter_list|()
function_decl|;
name|void
name|testProxyStyle
parameter_list|()
function_decl|;
name|void
name|pixelMetric
parameter_list|()
function_decl|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_FUSION
argument_list|)
name|void
name|progressBarChangeStyle
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|defaultFont
parameter_list|()
function_decl|;
name|void
name|testDrawingShortcuts
parameter_list|()
function_decl|;
name|void
name|testFrameOnlyAroundContents
parameter_list|()
function_decl|;
private|private:
name|void
name|lineUpLayoutTest
parameter_list|(
name|QStyle
modifier|*
parameter_list|)
function_decl|;
DECL|member|testWidget
name|QWidget
modifier|*
name|testWidget
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QStyle
name|tst_QStyle
operator|::
name|tst_QStyle
parameter_list|()
block|{
name|testWidget
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_class
DECL|class|MyWidget
class|class
name|MyWidget
super|:
specifier|public
name|QWidget
block|{
public|public:
name|MyWidget
parameter_list|(
name|QWidget
modifier|*
name|QWidget
init|=
literal|0
parameter_list|,
specifier|const
name|char
modifier|*
name|name
init|=
literal|0
parameter_list|)
constructor_decl|;
protected|protected:
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|init
name|void
name|tst_QStyle
operator|::
name|init
parameter_list|()
block|{
name|testWidget
operator|=
operator|new
name|MyWidget
argument_list|(
literal|0
argument_list|,
literal|"testObject"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QStyle
operator|::
name|cleanup
parameter_list|()
block|{
operator|delete
name|testWidget
expr_stmt|;
name|testWidget
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testStyleFactory
name|void
name|tst_QStyle
operator|::
name|testStyleFactory
parameter_list|()
block|{
name|QStringList
name|keys
init|=
name|QStyleFactory
operator|::
name|keys
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_STYLE_FUSION
name|QVERIFY
argument_list|(
name|keys
operator|.
name|contains
argument_list|(
literal|"Fusion"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_STYLE_WINDOWS
name|QVERIFY
argument_list|(
name|keys
operator|.
name|contains
argument_list|(
literal|"Windows"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_OS_WIN
if|if
condition|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|>=
name|QSysInfo
operator|::
name|WV_XP
operator|&&
operator|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|&
name|QSysInfo
operator|::
name|WV_NT_based
operator|)
condition|)
name|QVERIFY
argument_list|(
name|keys
operator|.
name|contains
argument_list|(
literal|"WindowsXP"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|>=
name|QSysInfo
operator|::
name|WV_VISTA
operator|&&
operator|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|&
name|QSysInfo
operator|::
name|WV_NT_based
operator|)
condition|)
name|QVERIFY
argument_list|(
name|keys
operator|.
name|contains
argument_list|(
literal|"WindowsVista"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
foreach|foreach
control|(
name|QString
name|styleName
decl|,
name|keys
control|)
block|{
name|QStyle
modifier|*
name|style
init|=
name|QStyleFactory
operator|::
name|create
argument_list|(
name|styleName
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|style
operator|!=
literal|0
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Fail to load style '%1'"
argument_list|)
operator|.
name|arg
argument_list|(
name|styleName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|style
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|CustomProxy
class|class
name|CustomProxy
super|:
specifier|public
name|QProxyStyle
block|{
DECL|function|pixelMetric
specifier|virtual
name|int
name|pixelMetric
parameter_list|(
name|PixelMetric
name|metric
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
init|=
literal|0
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
init|=
literal|0
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|metric
operator|==
name|QStyle
operator|::
name|PM_ButtonIconSize
condition|)
return|return
literal|13
return|;
return|return
name|QProxyStyle
operator|::
name|pixelMetric
argument_list|(
name|metric
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|testProxyStyle
name|void
name|tst_QStyle
operator|::
name|testProxyStyle
parameter_list|()
block|{
name|QProxyStyle
modifier|*
name|proxyStyle
init|=
operator|new
name|QProxyStyle
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|proxyStyle
operator|->
name|baseStyle
argument_list|()
argument_list|)
expr_stmt|;
name|QStyle
modifier|*
name|style
init|=
name|QStyleFactory
operator|::
name|create
argument_list|(
literal|"Windows"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|style
operator|->
name|proxy
argument_list|()
argument_list|,
name|style
argument_list|)
expr_stmt|;
name|proxyStyle
operator|->
name|setBaseStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|style
operator|->
name|proxy
argument_list|()
argument_list|,
name|proxyStyle
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|style
operator|->
name|parent
argument_list|()
argument_list|,
name|proxyStyle
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxyStyle
operator|->
name|baseStyle
argument_list|()
argument_list|,
name|style
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testAllFunctions
argument_list|(
name|proxyStyle
argument_list|)
argument_list|)
expr_stmt|;
name|proxyStyle
operator|->
name|setBaseStyle
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proxyStyle
operator|->
name|baseStyle
argument_list|()
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|setStyle
argument_list|(
name|proxyStyle
argument_list|)
expr_stmt|;
name|QProxyStyle
modifier|*
name|baseStyle
init|=
operator|new
name|QProxyStyle
argument_list|(
literal|"Windows"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|baseStyle
operator|->
name|baseStyle
argument_list|()
operator|->
name|objectName
argument_list|()
argument_list|,
name|style
operator|->
name|objectName
argument_list|()
argument_list|)
expr_stmt|;
name|QProxyStyle
name|doubleProxy
argument_list|(
name|baseStyle
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|testAllFunctions
argument_list|(
operator|&
name|doubleProxy
argument_list|)
argument_list|)
expr_stmt|;
name|CustomProxy
name|customStyle
decl_stmt|;
name|QLineEdit
name|edit
decl_stmt|;
name|edit
operator|.
name|setStyle
argument_list|(
operator|&
name|customStyle
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|customStyle
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|edit
operator|.
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_ButtonIconSize
argument_list|)
argument_list|,
literal|13
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawItemPixmap
name|void
name|tst_QStyle
operator|::
name|drawItemPixmap
parameter_list|()
block|{
name|testWidget
operator|->
name|resize
argument_list|(
literal|300
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|showNormal
argument_list|()
expr_stmt|;
specifier|const
name|QString
name|imageFileName
init|=
name|QFINDTESTDATA
argument_list|(
literal|"task_25863.png"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|imageFileName
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QPixmap
name|p
argument_list|(
name|imageFileName
argument_list|,
literal|"PNG"
argument_list|)
decl_stmt|;
specifier|const
name|QPixmap
name|actualPix
init|=
name|testWidget
operator|->
name|grab
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|actualPix
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testAllFunctions
name|bool
name|tst_QStyle
operator|::
name|testAllFunctions
parameter_list|(
name|QStyle
modifier|*
name|style
parameter_list|)
block|{
name|QStyleOption
name|opt
decl_stmt|;
name|opt
operator|.
name|init
argument_list|(
name|testWidget
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
comment|//Tests styleHint with default arguments for potential crashes
for|for
control|(
name|int
name|hint
init|=
literal|0
init|;
name|hint
operator|<
name|int
argument_list|(
name|QStyle
operator|::
name|SH_Menu_Mask
argument_list|)
condition|;
operator|++
name|hint
control|)
block|{
name|style
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|StyleHint
argument_list|(
name|hint
argument_list|)
argument_list|)
expr_stmt|;
name|style
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|StyleHint
argument_list|(
name|hint
argument_list|)
argument_list|,
operator|&
name|opt
argument_list|,
name|testWidget
argument_list|)
expr_stmt|;
block|}
comment|//Tests pixelMetric with default arguments for potential crashes
for|for
control|(
name|int
name|pm
init|=
literal|0
init|;
name|pm
operator|<
name|int
argument_list|(
name|QStyle
operator|::
name|PM_LayoutVerticalSpacing
argument_list|)
condition|;
operator|++
name|pm
control|)
block|{
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PixelMetric
argument_list|(
name|pm
argument_list|)
argument_list|)
expr_stmt|;
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PixelMetric
argument_list|(
name|pm
argument_list|)
argument_list|,
operator|&
name|opt
argument_list|,
name|testWidget
argument_list|)
expr_stmt|;
block|}
comment|//Tests drawControl with default arguments for potential crashes
for|for
control|(
name|int
name|control
init|=
literal|0
init|;
name|control
operator|<
name|int
argument_list|(
name|QStyle
operator|::
name|CE_ColumnViewGrip
argument_list|)
condition|;
operator|++
name|control
control|)
block|{
name|QPixmap
name|surface
argument_list|(
name|QSize
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
argument_list|)
decl_stmt|;
name|QPainter
name|painter
argument_list|(
operator|&
name|surface
argument_list|)
decl_stmt|;
name|style
operator|->
name|drawControl
argument_list|(
name|QStyle
operator|::
name|ControlElement
argument_list|(
name|control
argument_list|)
argument_list|,
operator|&
name|opt
argument_list|,
operator|&
name|painter
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|//Tests drawComplexControl with default arguments for potential crashes
block|{
name|QPixmap
name|surface
argument_list|(
name|QSize
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
argument_list|)
decl_stmt|;
name|QPainter
name|painter
argument_list|(
operator|&
name|surface
argument_list|)
decl_stmt|;
name|QStyleOptionComboBox
name|copt1
decl_stmt|;
name|copt1
operator|.
name|init
argument_list|(
name|testWidget
argument_list|)
expr_stmt|;
name|QStyleOptionGroupBox
name|copt2
decl_stmt|;
name|copt2
operator|.
name|init
argument_list|(
name|testWidget
argument_list|)
expr_stmt|;
name|QStyleOptionSizeGrip
name|copt3
decl_stmt|;
name|copt3
operator|.
name|init
argument_list|(
name|testWidget
argument_list|)
expr_stmt|;
name|QStyleOptionSlider
name|copt4
decl_stmt|;
name|copt4
operator|.
name|init
argument_list|(
name|testWidget
argument_list|)
expr_stmt|;
name|copt4
operator|.
name|minimum
operator|=
literal|0
expr_stmt|;
name|copt4
operator|.
name|maximum
operator|=
literal|100
expr_stmt|;
name|copt4
operator|.
name|tickInterval
operator|=
literal|25
expr_stmt|;
name|copt4
operator|.
name|sliderValue
operator|=
literal|50
expr_stmt|;
name|QStyleOptionSpinBox
name|copt5
decl_stmt|;
name|copt5
operator|.
name|init
argument_list|(
name|testWidget
argument_list|)
expr_stmt|;
name|QStyleOptionTitleBar
name|copt6
decl_stmt|;
name|copt6
operator|.
name|init
argument_list|(
name|testWidget
argument_list|)
expr_stmt|;
name|QStyleOptionToolButton
name|copt7
decl_stmt|;
name|copt7
operator|.
name|init
argument_list|(
name|testWidget
argument_list|)
expr_stmt|;
name|QStyleOptionComplex
name|copt9
decl_stmt|;
name|copt9
operator|.
name|initFrom
argument_list|(
name|testWidget
argument_list|)
expr_stmt|;
name|style
operator|->
name|drawComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_SpinBox
argument_list|,
operator|&
name|copt5
argument_list|,
operator|&
name|painter
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|style
operator|->
name|drawComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_ComboBox
argument_list|,
operator|&
name|copt1
argument_list|,
operator|&
name|painter
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|style
operator|->
name|drawComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_ScrollBar
argument_list|,
operator|&
name|copt4
argument_list|,
operator|&
name|painter
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|style
operator|->
name|drawComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_Slider
argument_list|,
operator|&
name|copt4
argument_list|,
operator|&
name|painter
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|style
operator|->
name|drawComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_ToolButton
argument_list|,
operator|&
name|copt7
argument_list|,
operator|&
name|painter
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|style
operator|->
name|drawComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_TitleBar
argument_list|,
operator|&
name|copt6
argument_list|,
operator|&
name|painter
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|style
operator|->
name|drawComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_GroupBox
argument_list|,
operator|&
name|copt2
argument_list|,
operator|&
name|painter
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|style
operator|->
name|drawComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_Dial
argument_list|,
operator|&
name|copt4
argument_list|,
operator|&
name|painter
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|//Check standard pixmaps/icons
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|int
argument_list|(
name|QStyle
operator|::
name|SP_ToolBarVerticalExtensionButton
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|QPixmap
name|pixmap
init|=
name|style
operator|->
name|standardPixmap
argument_list|(
name|QStyle
operator|::
name|StandardPixmap
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|pixmap
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"missing StandardPixmap: %d"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|QIcon
name|icn
init|=
name|style
operator|->
name|standardIcon
argument_list|(
name|QStyle
operator|::
name|StandardPixmap
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|icn
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"missing StandardIcon: %d"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|style
operator|->
name|itemPixmapRect
argument_list|(
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|,
name|Qt
operator|::
name|AlignHCenter
argument_list|,
name|QPixmap
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|style
operator|->
name|itemTextRect
argument_list|(
name|QFontMetrics
argument_list|(
name|qApp
operator|->
name|font
argument_list|()
argument_list|)
argument_list|,
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|,
name|Qt
operator|::
name|AlignHCenter
argument_list|,
literal|true
argument_list|,
name|QString
argument_list|(
literal|"Test"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|testScrollBarSubControls
argument_list|(
name|style
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|testScrollBarSubControls
name|bool
name|tst_QStyle
operator|::
name|testScrollBarSubControls
parameter_list|(
name|QStyle
modifier|*
name|style
parameter_list|)
block|{
comment|// WinCE SmartPhone doesn't have scrollbar subcontrols, so skip the rest of the test.
ifdef|#
directive|ifdef
name|Q_OS_WINCE_WM
if|if
condition|(
name|style
operator|->
name|inherits
argument_list|(
literal|"QWindowsMobileStyle"
argument_list|)
operator|&&
name|qt_wince_is_smartphone
argument_list|()
condition|)
return|return
literal|true
return|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|style
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QScrollBar
name|scrollBar
decl_stmt|;
name|setFrameless
argument_list|(
operator|&
name|scrollBar
argument_list|)
expr_stmt|;
name|scrollBar
operator|.
name|show
argument_list|()
expr_stmt|;
specifier|const
name|QStyleOptionSlider
name|opt
init|=
name|qt_qscrollbarStyleOption
argument_list|(
operator|&
name|scrollBar
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|int
name|subControl
decl|,
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|4
operator|<<
literal|8
control|)
block|{
name|QRect
name|sr
init|=
name|testWidget
operator|->
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_ScrollBar
argument_list|,
operator|&
name|opt
argument_list|,
name|QStyle
operator|::
name|SubControl
argument_list|(
name|subControl
argument_list|)
argument_list|,
operator|&
name|scrollBar
argument_list|)
decl_stmt|;
if|if
condition|(
name|sr
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"Null rect for subcontrol %d"
argument_list|,
name|subControl
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STYLE_FUSION
end_ifndef
begin_function
DECL|function|testFusionStyle
name|void
name|tst_QStyle
operator|::
name|testFusionStyle
parameter_list|()
block|{
name|QStyle
modifier|*
name|fstyle
init|=
name|QStyleFactory
operator|::
name|create
argument_list|(
literal|"Fusion"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|testAllFunctions
argument_list|(
name|fstyle
argument_list|)
argument_list|)
expr_stmt|;
name|lineUpLayoutTest
argument_list|(
name|fstyle
argument_list|)
expr_stmt|;
operator|delete
name|fstyle
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|testWindowsStyle
name|void
name|tst_QStyle
operator|::
name|testWindowsStyle
parameter_list|()
block|{
name|QStyle
modifier|*
name|wstyle
init|=
name|QStyleFactory
operator|::
name|create
argument_list|(
literal|"Windows"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|testAllFunctions
argument_list|(
name|wstyle
argument_list|)
argument_list|)
expr_stmt|;
name|lineUpLayoutTest
argument_list|(
name|wstyle
argument_list|)
expr_stmt|;
comment|// Tests drawing indeterminate progress with 0 size: QTBUG-15973
name|QStyleOptionProgressBar
name|pb
decl_stmt|;
name|pb
operator|.
name|rect
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|9
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QPixmap
name|surface
argument_list|(
name|QSize
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
argument_list|)
decl_stmt|;
name|QPainter
name|painter
argument_list|(
operator|&
name|surface
argument_list|)
decl_stmt|;
name|wstyle
operator|->
name|drawControl
argument_list|(
name|QStyle
operator|::
name|CE_ProgressBar
argument_list|,
operator|&
name|pb
argument_list|,
operator|&
name|painter
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|wstyle
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSXP
argument_list|)
end_if
begin_comment
comment|// WindowsXP style
end_comment
begin_function
DECL|function|testWindowsXPStyle
name|void
name|tst_QStyle
operator|::
name|testWindowsXPStyle
parameter_list|()
block|{
name|QStyle
modifier|*
name|xpstyle
init|=
name|QStyleFactory
operator|::
name|create
argument_list|(
literal|"WindowsXP"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|testAllFunctions
argument_list|(
name|xpstyle
argument_list|)
argument_list|)
expr_stmt|;
name|lineUpLayoutTest
argument_list|(
name|xpstyle
argument_list|)
expr_stmt|;
operator|delete
name|xpstyle
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|writeImage
name|void
name|writeImage
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
name|QImage
name|image
parameter_list|)
block|{
name|QImageWriter
name|imageWriter
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|imageWriter
operator|.
name|setFormat
argument_list|(
literal|"png"
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"result "
operator|<<
name|imageWriter
operator|.
name|write
argument_list|(
name|image
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readImage
name|QImage
name|readImage
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
block|{
name|QImageReader
name|reader
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
return|return
name|reader
operator|.
name|read
argument_list|()
return|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWSVISTA
argument_list|)
end_if
begin_function
DECL|function|testWindowsVistaStyle
name|void
name|tst_QStyle
operator|::
name|testWindowsVistaStyle
parameter_list|()
block|{
name|QStyle
modifier|*
name|vistastyle
init|=
name|QStyleFactory
operator|::
name|create
argument_list|(
literal|"WindowsVista"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|testAllFunctions
argument_list|(
name|vistastyle
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|==
name|QSysInfo
operator|::
name|WV_VISTA
condition|)
name|testPainting
argument_list|(
name|vistastyle
argument_list|,
literal|"vista"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|==
name|QSysInfo
operator|::
name|WV_XP
condition|)
name|testPainting
argument_list|(
name|vistastyle
argument_list|,
literal|"xp"
argument_list|)
expr_stmt|;
operator|delete
name|vistastyle
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|comparePixmap
name|void
name|comparePixmap
parameter_list|(
specifier|const
name|QString
modifier|&
name|filename
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|)
block|{
name|QImage
name|oldFile
init|=
name|readImage
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|QPixmap
name|oldPixmap
init|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|oldFile
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|oldFile
operator|.
name|isNull
argument_list|()
condition|)
name|QCOMPARE
argument_list|(
name|pixmap
argument_list|,
name|oldPixmap
argument_list|)
expr_stmt|;
else|else
name|writeImage
argument_list|(
name|filename
argument_list|,
name|pixmap
operator|.
name|toImage
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testPainting
name|void
name|tst_QStyle
operator|::
name|testPainting
parameter_list|(
name|QStyle
modifier|*
name|style
parameter_list|,
specifier|const
name|QString
modifier|&
name|platform
parameter_list|)
block|{
name|qDebug
argument_list|(
literal|"TEST PAINTING"
argument_list|)
expr_stmt|;
comment|//Test Menu
name|QString
name|fileName
init|=
literal|"images/"
operator|+
name|platform
operator|+
literal|"/menu.png"
decl_stmt|;
name|QMenu
name|menu
decl_stmt|;
name|menu
operator|.
name|setStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|menu
operator|.
name|show
argument_list|()
expr_stmt|;
name|menu
operator|.
name|addAction
argument_list|(
operator|new
name|QAction
argument_list|(
literal|"Test 1"
argument_list|,
operator|&
name|menu
argument_list|)
argument_list|)
expr_stmt|;
name|menu
operator|.
name|addAction
argument_list|(
operator|new
name|QAction
argument_list|(
literal|"Test 2"
argument_list|,
operator|&
name|menu
argument_list|)
argument_list|)
expr_stmt|;
name|QPixmap
name|pixmap
init|=
name|menu
operator|.
name|grab
argument_list|()
decl_stmt|;
name|comparePixmap
argument_list|(
name|fileName
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
comment|//Push button
name|fileName
operator|=
literal|"images/"
operator|+
name|platform
operator|+
literal|"/button.png"
expr_stmt|;
name|QPushButton
name|button
argument_list|(
literal|"OK"
argument_list|)
decl_stmt|;
name|button
operator|.
name|setStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|button
operator|.
name|show
argument_list|()
expr_stmt|;
name|pixmap
operator|=
name|button
operator|.
name|grab
argument_list|()
expr_stmt|;
name|button
operator|.
name|hide
argument_list|()
expr_stmt|;
name|comparePixmap
argument_list|(
name|fileName
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
comment|//Push button
name|fileName
operator|=
literal|"images/"
operator|+
name|platform
operator|+
literal|"/radiobutton.png"
expr_stmt|;
name|QRadioButton
name|radiobutton
argument_list|(
literal|"Check"
argument_list|)
decl_stmt|;
name|radiobutton
operator|.
name|setStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|radiobutton
operator|.
name|show
argument_list|()
expr_stmt|;
name|pixmap
operator|=
name|radiobutton
operator|.
name|grab
argument_list|()
expr_stmt|;
name|radiobutton
operator|.
name|hide
argument_list|()
expr_stmt|;
name|comparePixmap
argument_list|(
name|fileName
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
comment|//Combo box
name|fileName
operator|=
literal|"images/"
operator|+
name|platform
operator|+
literal|"/combobox.png"
expr_stmt|;
name|QComboBox
name|combobox
decl_stmt|;
name|combobox
operator|.
name|setStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|combobox
operator|.
name|addItem
argument_list|(
literal|"Test 1"
argument_list|)
expr_stmt|;
name|combobox
operator|.
name|addItem
argument_list|(
literal|"Test 2"
argument_list|)
expr_stmt|;
name|combobox
operator|.
name|show
argument_list|()
expr_stmt|;
name|pixmap
operator|=
name|combobox
operator|.
name|grab
argument_list|()
expr_stmt|;
name|combobox
operator|.
name|hide
argument_list|()
expr_stmt|;
name|comparePixmap
argument_list|(
name|fileName
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
comment|//Spin box
name|fileName
operator|=
literal|"images/"
operator|+
name|platform
operator|+
literal|"/spinbox.png"
expr_stmt|;
name|QDoubleSpinBox
name|spinbox
decl_stmt|;
name|spinbox
operator|.
name|setLocale
argument_list|(
name|QLocale
argument_list|(
name|QLocale
operator|::
name|English
argument_list|,
name|QLocale
operator|::
name|UnitedStates
argument_list|)
argument_list|)
expr_stmt|;
name|spinbox
operator|.
name|setStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|spinbox
operator|.
name|show
argument_list|()
expr_stmt|;
name|pixmap
operator|=
name|spinbox
operator|.
name|grab
argument_list|()
expr_stmt|;
name|spinbox
operator|.
name|hide
argument_list|()
expr_stmt|;
name|comparePixmap
argument_list|(
name|fileName
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
name|QLocale
operator|::
name|setDefault
argument_list|(
name|QLocale
operator|::
name|system
argument_list|()
argument_list|)
expr_stmt|;
comment|//Slider
name|fileName
operator|=
literal|"images/"
operator|+
name|platform
operator|+
literal|"/slider.png"
expr_stmt|;
name|QSlider
name|slider
decl_stmt|;
name|slider
operator|.
name|setStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|slider
operator|.
name|show
argument_list|()
expr_stmt|;
name|pixmap
operator|=
name|slider
operator|.
name|grab
argument_list|()
expr_stmt|;
name|slider
operator|.
name|hide
argument_list|()
expr_stmt|;
name|comparePixmap
argument_list|(
name|fileName
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
comment|//Line edit
name|fileName
operator|=
literal|"images/"
operator|+
name|platform
operator|+
literal|"/lineedit.png"
expr_stmt|;
name|QLineEdit
name|lineedit
argument_list|(
literal|"Test text"
argument_list|)
decl_stmt|;
name|lineedit
operator|.
name|setStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|lineedit
operator|.
name|show
argument_list|()
expr_stmt|;
name|pixmap
operator|=
name|lineedit
operator|.
name|grab
argument_list|()
expr_stmt|;
name|lineedit
operator|.
name|hide
argument_list|()
expr_stmt|;
name|comparePixmap
argument_list|(
name|fileName
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
comment|//MDI
name|fileName
operator|=
literal|"images/"
operator|+
name|platform
operator|+
literal|"/mdi.png"
expr_stmt|;
name|QMdiArea
name|mdiArea
decl_stmt|;
name|mdiArea
operator|.
name|addSubWindow
argument_list|(
operator|new
name|QWidget
argument_list|(
operator|&
name|mdiArea
argument_list|)
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|resize
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|setStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|mdiArea
operator|.
name|show
argument_list|()
expr_stmt|;
name|pixmap
operator|=
name|mdiArea
operator|.
name|grab
argument_list|()
expr_stmt|;
name|mdiArea
operator|.
name|hide
argument_list|()
expr_stmt|;
name|comparePixmap
argument_list|(
name|fileName
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
comment|// QToolButton
name|fileName
operator|=
literal|"images/"
operator|+
name|platform
operator|+
literal|"/toolbutton.png"
expr_stmt|;
name|QToolButton
name|tb
decl_stmt|;
name|tb
operator|.
name|setToolButtonStyle
argument_list|(
name|Qt
operator|::
name|ToolButtonTextUnderIcon
argument_list|)
expr_stmt|;
name|tb
operator|.
name|setText
argument_list|(
literal|"AaQqPpXx"
argument_list|)
expr_stmt|;
name|tb
operator|.
name|setIcon
argument_list|(
name|style
operator|->
name|standardPixmap
argument_list|(
name|QStyle
operator|::
name|SP_DirHomeIcon
argument_list|)
argument_list|)
expr_stmt|;
name|tb
operator|.
name|setStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|tb
operator|.
name|show
argument_list|()
expr_stmt|;
name|pixmap
operator|=
name|tb
operator|.
name|grab
argument_list|()
expr_stmt|;
name|tb
operator|.
name|hide
argument_list|()
expr_stmt|;
name|comparePixmap
argument_list|(
name|fileName
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_MAC
end_ifdef
begin_function
DECL|function|testMacStyle
name|void
name|tst_QStyle
operator|::
name|testMacStyle
parameter_list|()
block|{
name|QStyle
modifier|*
name|mstyle
init|=
name|QStyleFactory
operator|::
name|create
argument_list|(
literal|"Macintosh"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|testAllFunctions
argument_list|(
name|mstyle
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|mstyle
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WINCE
end_ifdef
begin_comment
comment|// WindowsCEStyle style
end_comment
begin_function
DECL|function|testWindowsCEStyle
name|void
name|tst_QStyle
operator|::
name|testWindowsCEStyle
parameter_list|()
block|{
name|QStyle
modifier|*
name|cstyle
init|=
name|QStyleFactory
operator|::
name|create
argument_list|(
literal|"WindowsCE"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|testAllFunctions
argument_list|(
name|cstyle
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|cstyle
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WINCE_WM
end_ifdef
begin_comment
comment|// WindowsMobileStyle style
end_comment
begin_function
DECL|function|testWindowsMobileStyle
name|void
name|tst_QStyle
operator|::
name|testWindowsMobileStyle
parameter_list|()
block|{
name|QStyle
modifier|*
name|cstyle
init|=
name|QStyleFactory
operator|::
name|create
argument_list|(
literal|"WindowsMobile"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|testAllFunctions
argument_list|(
name|cstyle
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|cstyle
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Helper class...
end_comment
begin_constructor
DECL|function|MyWidget
name|MyWidget
operator|::
name|MyWidget
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
block|{
name|setObjectName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|paintEvent
name|void
name|MyWidget
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QPixmap
name|big
argument_list|(
literal|400
argument_list|,
literal|400
argument_list|)
decl_stmt|;
name|big
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
name|style
argument_list|()
operator|->
name|drawItemPixmap
argument_list|(
operator|&
name|p
argument_list|,
name|rect
argument_list|()
argument_list|,
name|Qt
operator|::
name|AlignCenter
argument_list|,
name|big
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|Qt42Style
class|class
name|Qt42Style
super|:
specifier|public
name|QCommonStyle
block|{
name|Q_OBJECT
public|public:
DECL|function|Qt42Style
name|Qt42Style
parameter_list|()
member_init_list|:
name|QCommonStyle
argument_list|()
block|{
name|margin_toplevel
operator|=
literal|10
expr_stmt|;
name|margin
operator|=
literal|5
expr_stmt|;
name|spacing
operator|=
literal|0
expr_stmt|;
block|}
specifier|virtual
name|int
name|pixelMetric
parameter_list|(
name|PixelMetric
name|metric
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
init|=
literal|0
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
init|=
literal|0
parameter_list|)
specifier|const
function_decl|;
DECL|member|margin_toplevel
name|int
name|margin_toplevel
decl_stmt|;
DECL|member|margin
name|int
name|margin
decl_stmt|;
DECL|member|spacing
name|int
name|spacing
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|pixelMetric
name|int
name|Qt42Style
operator|::
name|pixelMetric
parameter_list|(
name|PixelMetric
name|metric
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
comment|/* option = 0*/
parameter_list|,
specifier|const
name|QWidget
modifier|*
comment|/* widget = 0*/
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|metric
condition|)
block|{
case|case
name|QStyle
operator|::
name|PM_DefaultTopLevelMargin
case|:
return|return
name|margin_toplevel
return|;
break|break;
case|case
name|QStyle
operator|::
name|PM_DefaultChildMargin
case|:
return|return
name|margin
return|;
break|break;
case|case
name|QStyle
operator|::
name|PM_DefaultLayoutSpacing
case|:
return|return
name|spacing
return|;
break|break;
default|default:
break|break;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|pixelMetric
name|void
name|tst_QStyle
operator|::
name|pixelMetric
parameter_list|()
block|{
name|Qt42Style
modifier|*
name|style
init|=
operator|new
name|Qt42Style
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_DefaultTopLevelMargin
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_DefaultChildMargin
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_DefaultLayoutSpacing
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|style
operator|->
name|margin_toplevel
operator|=
literal|0
expr_stmt|;
name|style
operator|->
name|margin
operator|=
literal|0
expr_stmt|;
name|style
operator|->
name|spacing
operator|=
literal|0
expr_stmt|;
name|QCOMPARE
argument_list|(
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_DefaultTopLevelMargin
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_DefaultChildMargin
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_DefaultLayoutSpacing
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|style
operator|->
name|margin_toplevel
operator|=
operator|-
literal|1
expr_stmt|;
name|style
operator|->
name|margin
operator|=
operator|-
literal|1
expr_stmt|;
name|style
operator|->
name|spacing
operator|=
operator|-
literal|1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_DefaultTopLevelMargin
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_DefaultChildMargin
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_DefaultLayoutSpacing
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
operator|delete
name|style
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_WINDOWS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_FUSION
argument_list|)
end_if
begin_function
DECL|function|progressBarChangeStyle
name|void
name|tst_QStyle
operator|::
name|progressBarChangeStyle
parameter_list|()
block|{
comment|//test a crashing situation (task 143530)
comment|//where changing the styles and deleting a progressbar would crash
name|QStyle
modifier|*
name|style1
init|=
name|QStyleFactory
operator|::
name|create
argument_list|(
literal|"Windows"
argument_list|)
decl_stmt|;
name|QStyle
modifier|*
name|style2
init|=
name|QStyleFactory
operator|::
name|create
argument_list|(
literal|"Fusion"
argument_list|)
decl_stmt|;
name|QProgressBar
modifier|*
name|progress
init|=
operator|new
name|QProgressBar
decl_stmt|;
name|progress
operator|->
name|setStyle
argument_list|(
name|style1
argument_list|)
expr_stmt|;
name|progress
operator|->
name|show
argument_list|()
expr_stmt|;
name|progress
operator|->
name|setStyle
argument_list|(
name|style2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
operator|delete
name|progress
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|//before the correction, there would be a crash here
operator|delete
name|style1
expr_stmt|;
operator|delete
name|style2
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|lineUpLayoutTest
name|void
name|tst_QStyle
operator|::
name|lineUpLayoutTest
parameter_list|(
name|QStyle
modifier|*
name|style
parameter_list|)
block|{
name|QWidget
name|widget
decl_stmt|;
name|setFrameless
argument_list|(
operator|&
name|widget
argument_list|)
expr_stmt|;
name|QHBoxLayout
name|layout
decl_stmt|;
name|QFont
name|font
decl_stmt|;
name|font
operator|.
name|setPointSize
argument_list|(
literal|9
argument_list|)
expr_stmt|;
comment|//Plastique is lined up for odd numbers...
name|widget
operator|.
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|QSpinBox
name|spinbox
argument_list|(
operator|&
name|widget
argument_list|)
decl_stmt|;
name|QLineEdit
name|lineedit
argument_list|(
operator|&
name|widget
argument_list|)
decl_stmt|;
name|QComboBox
name|combo
argument_list|(
operator|&
name|widget
argument_list|)
decl_stmt|;
name|combo
operator|.
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|layout
operator|.
name|addWidget
argument_list|(
operator|&
name|spinbox
argument_list|)
expr_stmt|;
name|layout
operator|.
name|addWidget
argument_list|(
operator|&
name|lineedit
argument_list|)
expr_stmt|;
name|layout
operator|.
name|addWidget
argument_list|(
operator|&
name|combo
argument_list|)
expr_stmt|;
name|widget
operator|.
name|setLayout
argument_list|(
operator|&
name|layout
argument_list|)
expr_stmt|;
name|widget
operator|.
name|setStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
comment|// propagate the style.
foreach|foreach
control|(
name|QWidget
modifier|*
name|w
decl|,
name|widget
operator|.
name|findChildren
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|()
control|)
name|w
operator|->
name|setStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|widget
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|widget
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
specifier|const
name|int
name|limit
init|=
literal|2
decl_stmt|;
comment|// Aero style has larger margins
else|#
directive|else
specifier|const
name|int
name|limit
init|=
literal|1
decl_stmt|;
endif|#
directive|endif
specifier|const
name|int
name|slDiff
init|=
name|qAbs
argument_list|(
name|spinbox
operator|.
name|height
argument_list|()
operator|-
name|lineedit
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|scDiff
init|=
name|qAbs
argument_list|(
name|spinbox
operator|.
name|height
argument_list|()
operator|-
name|combo
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|slDiff
operator|<=
name|limit
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1 exceeds %2 for %3"
argument_list|)
operator|.
name|arg
argument_list|(
name|slDiff
argument_list|)
operator|.
name|arg
argument_list|(
name|limit
argument_list|)
operator|.
name|arg
argument_list|(
name|style
operator|->
name|objectName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|scDiff
operator|<=
name|limit
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1 exceeds %2 for %3"
argument_list|)
operator|.
name|arg
argument_list|(
name|scDiff
argument_list|)
operator|.
name|arg
argument_list|(
name|limit
argument_list|)
operator|.
name|arg
argument_list|(
name|style
operator|->
name|objectName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|defaultFont
name|void
name|tst_QStyle
operator|::
name|defaultFont
parameter_list|()
block|{
name|QFont
name|defaultFont
init|=
name|qApp
operator|->
name|font
argument_list|()
decl_stmt|;
name|QFont
name|pointFont
init|=
name|defaultFont
decl_stmt|;
name|pointFont
operator|.
name|setPixelSize
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|setFont
argument_list|(
name|pointFont
argument_list|)
expr_stmt|;
name|QPushButton
name|button
decl_stmt|;
name|setFrameless
argument_list|(
operator|&
name|button
argument_list|)
expr_stmt|;
name|button
operator|.
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|setFont
argument_list|(
name|defaultFont
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|DrawTextStyle
class|class
name|DrawTextStyle
super|:
specifier|public
name|QProxyStyle
block|{
name|Q_OBJECT
public|public:
DECL|function|DrawTextStyle
name|DrawTextStyle
parameter_list|(
name|QStyle
modifier|*
name|base
init|=
literal|0
parameter_list|)
member_init_list|:
name|QProxyStyle
argument_list|()
member_init_list|,
name|alignment
argument_list|(
literal|0
argument_list|)
block|{
name|setBaseStyle
argument_list|(
name|base
argument_list|)
expr_stmt|;
block|}
DECL|function|drawItemText
name|void
name|drawItemText
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|int
name|flags
parameter_list|,
specifier|const
name|QPalette
modifier|&
name|pal
parameter_list|,
name|bool
name|enabled
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|QPalette
operator|::
name|ColorRole
name|textRole
init|=
name|QPalette
operator|::
name|NoRole
parameter_list|)
specifier|const
block|{
name|DrawTextStyle
modifier|*
name|that
init|=
operator|(
name|DrawTextStyle
operator|*
operator|)
name|this
decl_stmt|;
name|that
operator|->
name|alignment
operator|=
name|flags
expr_stmt|;
name|QProxyStyle
operator|::
name|drawItemText
argument_list|(
name|painter
argument_list|,
name|rect
argument_list|,
name|flags
argument_list|,
name|pal
argument_list|,
name|enabled
argument_list|,
name|text
argument_list|,
name|textRole
argument_list|)
expr_stmt|;
block|}
DECL|member|alignment
name|int
name|alignment
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|testDrawingShortcuts
name|void
name|tst_QStyle
operator|::
name|testDrawingShortcuts
parameter_list|()
block|{
block|{
name|QWidget
name|w
decl_stmt|;
name|setFrameless
argument_list|(
operator|&
name|w
argument_list|)
expr_stmt|;
name|QToolButton
modifier|*
name|tb
init|=
operator|new
name|QToolButton
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
name|tb
operator|->
name|setText
argument_list|(
literal|"&abc"
argument_list|)
expr_stmt|;
name|DrawTextStyle
modifier|*
name|dts
init|=
operator|new
name|DrawTextStyle
decl_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|tb
operator|->
name|setStyle
argument_list|(
name|dts
argument_list|)
expr_stmt|;
name|tb
operator|->
name|grab
argument_list|()
expr_stmt|;
name|QStyleOptionToolButton
name|sotb
decl_stmt|;
name|sotb
operator|.
name|initFrom
argument_list|(
name|tb
argument_list|)
expr_stmt|;
name|bool
name|showMnemonic
init|=
name|dts
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_UnderlineShortcut
argument_list|,
operator|&
name|sotb
argument_list|,
name|tb
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|dts
operator|->
name|alignment
operator|&
operator|(
name|showMnemonic
condition|?
name|Qt
operator|::
name|TextShowMnemonic
else|:
name|Qt
operator|::
name|TextHideMnemonic
operator|)
argument_list|)
expr_stmt|;
operator|delete
name|dts
expr_stmt|;
block|}
block|{
name|QToolBar
name|w
decl_stmt|;
name|setFrameless
argument_list|(
operator|&
name|w
argument_list|)
expr_stmt|;
name|QToolButton
modifier|*
name|tb
init|=
operator|new
name|QToolButton
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
name|tb
operator|->
name|setText
argument_list|(
literal|"&abc"
argument_list|)
expr_stmt|;
name|DrawTextStyle
modifier|*
name|dts
init|=
operator|new
name|DrawTextStyle
decl_stmt|;
name|w
operator|.
name|addWidget
argument_list|(
name|tb
argument_list|)
expr_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|tb
operator|->
name|setStyle
argument_list|(
name|dts
argument_list|)
expr_stmt|;
name|tb
operator|->
name|grab
argument_list|()
expr_stmt|;
name|QStyleOptionToolButton
name|sotb
decl_stmt|;
name|sotb
operator|.
name|initFrom
argument_list|(
name|tb
argument_list|)
expr_stmt|;
name|bool
name|showMnemonic
init|=
name|dts
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_UnderlineShortcut
argument_list|,
operator|&
name|sotb
argument_list|,
name|tb
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|dts
operator|->
name|alignment
operator|&
operator|(
name|showMnemonic
condition|?
name|Qt
operator|::
name|TextShowMnemonic
else|:
name|Qt
operator|::
name|TextHideMnemonic
operator|)
argument_list|)
expr_stmt|;
operator|delete
name|dts
expr_stmt|;
block|}
block|}
end_function
begin_define
DECL|macro|SCROLLBAR_SPACING
define|#
directive|define
name|SCROLLBAR_SPACING
value|33
end_define
begin_class
DECL|class|FrameTestStyle
class|class
name|FrameTestStyle
super|:
specifier|public
name|QProxyStyle
block|{
public|public:
DECL|function|FrameTestStyle
name|FrameTestStyle
parameter_list|()
member_init_list|:
name|QProxyStyle
argument_list|(
literal|"Windows"
argument_list|)
block|{ }
DECL|function|styleHint
name|int
name|styleHint
parameter_list|(
name|StyleHint
name|hint
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QStyleHintReturn
modifier|*
name|returnData
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|hint
operator|==
name|QStyle
operator|::
name|SH_ScrollView_FrameOnlyAroundContents
condition|)
return|return
literal|1
return|;
return|return
name|QProxyStyle
operator|::
name|styleHint
argument_list|(
name|hint
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|,
name|returnData
argument_list|)
return|;
block|}
DECL|function|pixelMetric
name|int
name|pixelMetric
parameter_list|(
name|PixelMetric
name|pm
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|pm
operator|==
name|QStyle
operator|::
name|PM_ScrollView_ScrollBarSpacing
condition|)
return|return
name|SCROLLBAR_SPACING
return|;
return|return
name|QProxyStyle
operator|::
name|pixelMetric
argument_list|(
name|pm
argument_list|,
name|option
argument_list|,
name|widget
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|testFrameOnlyAroundContents
name|void
name|tst_QStyle
operator|::
name|testFrameOnlyAroundContents
parameter_list|()
block|{
name|QScrollArea
name|area
decl_stmt|;
name|area
operator|.
name|setGeometry
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|200
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|QStyle
modifier|*
name|winStyle
init|=
name|QStyleFactory
operator|::
name|create
argument_list|(
literal|"Windows"
argument_list|)
decl_stmt|;
name|FrameTestStyle
name|frameStyle
decl_stmt|;
name|QWidget
modifier|*
name|widget
init|=
operator|new
name|QWidget
argument_list|(
operator|&
name|area
argument_list|)
decl_stmt|;
name|widget
operator|->
name|setGeometry
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|400
argument_list|,
literal|400
argument_list|)
expr_stmt|;
name|area
operator|.
name|setStyle
argument_list|(
name|winStyle
argument_list|)
expr_stmt|;
name|area
operator|.
name|verticalScrollBar
argument_list|()
operator|->
name|setStyle
argument_list|(
name|winStyle
argument_list|)
expr_stmt|;
name|area
operator|.
name|setWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|area
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|int
name|viewPortWidth
init|=
name|area
operator|.
name|viewport
argument_list|()
operator|->
name|width
argument_list|()
decl_stmt|;
name|area
operator|.
name|verticalScrollBar
argument_list|()
operator|->
name|setStyle
argument_list|(
operator|&
name|frameStyle
argument_list|)
expr_stmt|;
name|area
operator|.
name|setStyle
argument_list|(
operator|&
name|frameStyle
argument_list|)
expr_stmt|;
comment|// Test that we reserve space for scrollbar spacing
name|QVERIFY
argument_list|(
name|viewPortWidth
operator|==
name|area
operator|.
name|viewport
argument_list|()
operator|->
name|width
argument_list|()
operator|+
name|SCROLLBAR_SPACING
argument_list|)
expr_stmt|;
operator|delete
name|winStyle
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QStyle
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qstyle.moc"
end_include
end_unit
