begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtGui/qpainter.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qpaintengine.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qvolatileimage_p.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
end_ifdef
begin_include
include|#
directive|include
file|<fbs.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|tst_QVolatileImage
class|class
name|tst_QVolatileImage
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|tst_QVolatileImage
name|tst_QVolatileImage
parameter_list|()
block|{ }
private|private
name|slots
private|:
name|void
name|create
parameter_list|()
function_decl|;
name|void
name|ensureFormat
parameter_list|()
function_decl|;
name|void
name|dataAccess
parameter_list|()
function_decl|;
name|void
name|sharing
parameter_list|()
function_decl|;
name|void
name|paint
parameter_list|()
function_decl|;
name|void
name|fill
parameter_list|()
function_decl|;
name|void
name|copy
parameter_list|()
function_decl|;
name|void
name|bitmap
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|create
name|void
name|tst_QVolatileImage
operator|::
name|create
parameter_list|()
block|{
name|QVolatileImage
name|nullImg
decl_stmt|;
name|QVERIFY
argument_list|(
name|nullImg
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVolatileImage
name|img
argument_list|(
literal|100
argument_list|,
literal|200
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|img
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|width
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|height
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|format
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|byteCount
argument_list|()
argument_list|,
name|img
operator|.
name|bytesPerLine
argument_list|()
operator|*
name|img
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|hasAlphaChannel
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|depth
argument_list|()
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|QImage
name|source
argument_list|(
literal|12
argument_list|,
literal|23
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|img
operator|=
name|QVolatileImage
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|img
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|width
argument_list|()
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|height
argument_list|()
argument_list|,
literal|23
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|format
argument_list|()
argument_list|,
name|source
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|byteCount
argument_list|()
argument_list|,
name|img
operator|.
name|bytesPerLine
argument_list|()
operator|*
name|img
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|imageRef
argument_list|()
operator|==
name|source
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|toImage
argument_list|()
operator|==
name|source
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|hasAlphaChannel
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|hasAlphaChannel
argument_list|()
argument_list|,
name|img
operator|.
name|imageRef
argument_list|()
operator|.
name|hasAlphaChannel
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|hasAlphaChannel
argument_list|()
argument_list|,
name|img
operator|.
name|toImage
argument_list|()
operator|.
name|hasAlphaChannel
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|img
operator|.
name|depth
argument_list|()
argument_list|,
literal|32
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
name|CFbsBitmap
modifier|*
name|bmp
init|=
operator|new
name|CFbsBitmap
decl_stmt|;
name|QVERIFY
argument_list|(
name|bmp
operator|->
name|Create
argument_list|(
name|TSize
argument_list|(
literal|100
argument_list|,
literal|50
argument_list|)
argument_list|,
name|EColor16MAP
argument_list|)
operator|==
name|KErrNone
argument_list|)
expr_stmt|;
name|QVolatileImage
name|bmpimg
argument_list|(
name|bmp
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|bmpimg
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bmpimg
operator|.
name|width
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bmpimg
operator|.
name|height
argument_list|()
argument_list|,
literal|50
argument_list|)
expr_stmt|;
comment|// Verify that we only did handle duplication, not pixel data copying.
name|QCOMPARE
argument_list|(
name|bmpimg
operator|.
name|constBits
argument_list|()
argument_list|,
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|bmp
operator|->
name|DataAddress
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|bmp
expr_stmt|;
comment|// Check if content is still valid.
name|QImage
name|copyimg
init|=
name|bmpimg
operator|.
name|toImage
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|copyimg
operator|.
name|format
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|ensureFormat
name|void
name|tst_QVolatileImage
operator|::
name|ensureFormat
parameter_list|()
block|{
name|QImage
name|source
argument_list|(
literal|12
argument_list|,
literal|23
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|QVolatileImage
name|img
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|img
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|imageRef
argument_list|()
operator|==
name|source
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|toImage
argument_list|()
operator|==
name|source
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|ensureFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
argument_list|)
expr_stmt|;
comment|// no-op
name|QVERIFY
argument_list|(
name|img
operator|.
name|imageRef
argument_list|()
operator|==
name|source
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|toImage
argument_list|()
operator|==
name|source
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|format
argument_list|()
operator|==
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|ensureFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
argument_list|)
expr_stmt|;
comment|// new data under-the-hood
name|QVERIFY
argument_list|(
name|img
operator|.
name|imageRef
argument_list|()
operator|!=
name|source
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|toImage
argument_list|()
operator|!=
name|source
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|format
argument_list|()
operator|==
name|QImage
operator|::
name|Format_RGB32
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
name|CFbsBitmap
modifier|*
name|bmp
init|=
operator|new
name|CFbsBitmap
decl_stmt|;
name|QVERIFY
argument_list|(
name|bmp
operator|->
name|Create
argument_list|(
name|TSize
argument_list|(
literal|100
argument_list|,
literal|50
argument_list|)
argument_list|,
name|EColor16MAP
argument_list|)
operator|==
name|KErrNone
argument_list|)
expr_stmt|;
name|QVolatileImage
name|bmpimg
argument_list|(
name|bmp
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|bmpimg
operator|.
name|ensureFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
argument_list|)
expr_stmt|;
comment|// no-op
name|QCOMPARE
argument_list|(
name|bmpimg
operator|.
name|constBits
argument_list|()
argument_list|,
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|bmp
operator|->
name|DataAddress
argument_list|()
argument_list|)
expr_stmt|;
comment|// A different format should cause data copying.
name|QVERIFY
argument_list|(
name|bmpimg
operator|.
name|ensureFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|bmpimg
operator|.
name|constBits
argument_list|()
operator|!=
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|bmp
operator|->
name|DataAddress
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|uchar
modifier|*
name|prevBits
init|=
name|bmpimg
operator|.
name|constBits
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|bmpimg
operator|.
name|ensureFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|bmpimg
operator|.
name|constBits
argument_list|()
operator|!=
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|bmp
operator|->
name|DataAddress
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|bmpimg
operator|.
name|constBits
argument_list|()
operator|!=
name|prevBits
argument_list|)
expr_stmt|;
name|prevBits
operator|=
name|bmpimg
operator|.
name|constBits
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|bmpimg
operator|.
name|ensureFormat
argument_list|(
name|QImage
operator|::
name|Format_MonoLSB
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|bmpimg
operator|.
name|constBits
argument_list|()
operator|!=
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|bmp
operator|->
name|DataAddress
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|bmpimg
operator|.
name|constBits
argument_list|()
operator|!=
name|prevBits
argument_list|)
expr_stmt|;
operator|delete
name|bmp
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|dataAccess
name|void
name|tst_QVolatileImage
operator|::
name|dataAccess
parameter_list|()
block|{
name|QImage
name|source
argument_list|(
literal|12
argument_list|,
literal|23
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|QVolatileImage
name|img
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|img
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|img
operator|.
name|beginDataAccess
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|constBits
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|imageRef
argument_list|()
operator|.
name|constBits
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|bits
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|imageRef
argument_list|()
operator|.
name|bits
argument_list|()
argument_list|)
expr_stmt|;
name|img
operator|.
name|endDataAccess
argument_list|()
expr_stmt|;
name|img
operator|=
name|QVolatileImage
argument_list|(
literal|12
argument_list|,
literal|23
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
expr_stmt|;
name|img
operator|.
name|beginDataAccess
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|constBits
argument_list|()
operator|&&
name|img
operator|.
name|bits
argument_list|()
argument_list|)
expr_stmt|;
name|img
operator|.
name|endDataAccess
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sharing
name|void
name|tst_QVolatileImage
operator|::
name|sharing
parameter_list|()
block|{
name|QVolatileImage
name|img1
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|QVolatileImage
name|img2
init|=
name|img1
decl_stmt|;
name|img1
operator|.
name|beginDataAccess
argument_list|()
expr_stmt|;
name|img2
operator|.
name|beginDataAccess
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|img1
operator|.
name|constBits
argument_list|()
operator|==
name|img2
operator|.
name|constBits
argument_list|()
argument_list|)
expr_stmt|;
name|img2
operator|.
name|endDataAccess
argument_list|()
expr_stmt|;
name|img1
operator|.
name|endDataAccess
argument_list|()
expr_stmt|;
name|img1
operator|.
name|imageRef
argument_list|()
expr_stmt|;
comment|// non-const call, should detach
name|img1
operator|.
name|beginDataAccess
argument_list|()
expr_stmt|;
name|img2
operator|.
name|beginDataAccess
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|img1
operator|.
name|constBits
argument_list|()
operator|!=
name|img2
operator|.
name|constBits
argument_list|()
argument_list|)
expr_stmt|;
name|img2
operator|.
name|endDataAccess
argument_list|()
expr_stmt|;
name|img1
operator|.
name|endDataAccess
argument_list|()
expr_stmt|;
comment|// toImage() should return a copy of the internal QImage.
comment|// imageRef() is a reference to the internal QImage.
name|QVERIFY
argument_list|(
name|img1
operator|.
name|imageRef
argument_list|()
operator|.
name|constBits
argument_list|()
operator|!=
name|img1
operator|.
name|toImage
argument_list|()
operator|.
name|constBits
argument_list|()
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
name|CFbsBitmap
modifier|*
name|bmp
init|=
operator|new
name|CFbsBitmap
decl_stmt|;
name|QVERIFY
argument_list|(
name|bmp
operator|->
name|Create
argument_list|(
name|TSize
argument_list|(
literal|100
argument_list|,
literal|50
argument_list|)
argument_list|,
name|EColor16MAP
argument_list|)
operator|==
name|KErrNone
argument_list|)
expr_stmt|;
name|QVolatileImage
name|bmpimg
argument_list|(
name|bmp
argument_list|)
decl_stmt|;
name|QVolatileImage
name|bmpimg2
decl_stmt|;
name|bmpimg2
operator|=
name|bmpimg
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bmpimg
operator|.
name|constBits
argument_list|()
argument_list|,
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|bmp
operator|->
name|DataAddress
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bmpimg2
operator|.
name|constBits
argument_list|()
argument_list|,
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|bmp
operator|->
name|DataAddress
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now force a detach, which should copy the pixel data under-the-hood.
name|bmpimg
operator|.
name|imageRef
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|bmpimg
operator|.
name|constBits
argument_list|()
operator|!=
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|bmp
operator|->
name|DataAddress
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bmpimg2
operator|.
name|constBits
argument_list|()
argument_list|,
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|bmp
operator|->
name|DataAddress
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|bmp
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|fuzzyCompareImages
name|bool
name|fuzzyCompareImages
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image1
parameter_list|,
specifier|const
name|QImage
modifier|&
name|image2
parameter_list|,
name|int
name|tolerance
parameter_list|)
block|{
if|if
condition|(
name|image1
operator|.
name|bytesPerLine
argument_list|()
operator|!=
name|image2
operator|.
name|bytesPerLine
argument_list|()
operator|||
name|image1
operator|.
name|width
argument_list|()
operator|!=
name|image2
operator|.
name|width
argument_list|()
operator|||
name|image1
operator|.
name|height
argument_list|()
operator|!=
name|image2
operator|.
name|height
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|image1
operator|.
name|height
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|uchar
modifier|*
name|line1
init|=
name|image1
operator|.
name|scanLine
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|line2
init|=
name|image2
operator|.
name|scanLine
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|bytes
init|=
name|image1
operator|.
name|bytesPerLine
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|bytes
condition|;
name|j
operator|++
control|)
block|{
name|int
name|delta
init|=
name|line1
index|[
name|j
index|]
operator|-
name|line2
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|qAbs
argument_list|(
name|delta
argument_list|)
operator|>
name|tolerance
condition|)
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|paint
name|void
name|tst_QVolatileImage
operator|::
name|paint
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
name|QVolatileImage
name|img
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|img
operator|.
name|beginDataAccess
argument_list|()
expr_stmt|;
name|img
operator|.
name|imageRef
argument_list|()
operator|.
name|fill
argument_list|(
name|QColor
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|img
operator|.
name|imageRef
argument_list|()
argument_list|)
decl_stmt|;
name|p
operator|.
name|drawRect
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|50
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|img
operator|.
name|endDataAccess
argument_list|()
expr_stmt|;
name|QImage
name|imgA
init|=
name|img
operator|.
name|toImage
argument_list|()
decl_stmt|;
comment|// The following assumes that on openvg the pixmapdata is backed by QVolatileImage)
comment|// (and that openvg is in use)
comment|// It should pass with any engine nonetheless.
comment|// See if painting into the underlying QImage succeeds.
name|QPixmap
name|pm
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
decl_stmt|;
if|if
condition|(
name|pm
operator|.
name|paintEngine
argument_list|()
operator|->
name|type
argument_list|()
operator|==
name|QPaintEngine
operator|::
name|Raster
condition|)
block|{
name|pm
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
name|QPainter
name|pmp
argument_list|(
operator|&
name|pm
argument_list|)
decl_stmt|;
name|pmp
operator|.
name|drawRect
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|50
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|pmp
operator|.
name|end
argument_list|()
expr_stmt|;
name|QImage
name|imgB
init|=
name|pm
operator|.
name|toImage
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|fuzzyCompareImages
argument_list|(
name|imgA
argument_list|,
name|imgB
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Exercise the accelerated QVolatileImagePaintEngine::drawPixmap() a bit.
name|QPixmap
name|targetPm
argument_list|(
name|pm
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|targetPm
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|pmp
operator|.
name|begin
argument_list|(
operator|&
name|targetPm
argument_list|)
expr_stmt|;
name|pmp
operator|.
name|drawPixmap
argument_list|(
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|pm
argument_list|)
expr_stmt|;
name|pmp
operator|.
name|end
argument_list|()
expr_stmt|;
name|imgB
operator|=
name|targetPm
operator|.
name|toImage
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|fuzzyCompareImages
argument_list|(
name|imgA
argument_list|,
name|imgB
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now the overload taking rects.
name|targetPm
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|pmp
operator|.
name|begin
argument_list|(
operator|&
name|targetPm
argument_list|)
expr_stmt|;
name|QRectF
name|rect
argument_list|(
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|pm
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|pmp
operator|.
name|drawPixmap
argument_list|(
name|rect
argument_list|,
name|pm
argument_list|,
name|rect
argument_list|)
expr_stmt|;
name|pmp
operator|.
name|end
argument_list|()
expr_stmt|;
name|imgB
operator|=
name|targetPm
operator|.
name|toImage
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|fuzzyCompareImages
argument_list|(
name|imgA
argument_list|,
name|imgB
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"Pixmaps not painted via raster, skipping paint test"
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|fill
name|void
name|tst_QVolatileImage
operator|::
name|fill
parameter_list|()
block|{
name|QVolatileImage
name|img
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|QColor
name|col
init|=
name|QColor
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|,
literal|30
argument_list|)
decl_stmt|;
name|img
operator|.
name|fill
argument_list|(
name|col
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|imageRef
argument_list|()
operator|.
name|pixel
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|==
name|col
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|img
operator|.
name|toImage
argument_list|()
operator|.
name|pixel
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|==
name|col
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
name|CFbsBitmap
modifier|*
name|bmp
init|=
cast|static_cast
argument_list|<
name|CFbsBitmap
operator|*
argument_list|>
argument_list|(
name|img
operator|.
name|duplicateNativeImage
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|bmp
argument_list|)
expr_stmt|;
name|TRgb
name|pix
decl_stmt|;
name|bmp
operator|->
name|GetPixel
argument_list|(
name|pix
argument_list|,
name|TPoint
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pix
operator|.
name|Red
argument_list|()
argument_list|,
name|col
operator|.
name|red
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pix
operator|.
name|Green
argument_list|()
argument_list|,
name|col
operator|.
name|green
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pix
operator|.
name|Blue
argument_list|()
argument_list|,
name|col
operator|.
name|blue
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|bmp
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|copy
name|void
name|tst_QVolatileImage
operator|::
name|copy
parameter_list|()
block|{
name|QVolatileImage
name|img
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|img
operator|.
name|beginDataAccess
argument_list|()
expr_stmt|;
name|img
operator|.
name|imageRef
argument_list|()
operator|.
name|fill
argument_list|(
name|QColor
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|img
operator|.
name|imageRef
argument_list|()
argument_list|)
decl_stmt|;
name|p
operator|.
name|drawRect
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|50
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|img
operator|.
name|endDataAccess
argument_list|()
expr_stmt|;
name|QVolatileImage
name|img2
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|img2
operator|.
name|copyFrom
argument_list|(
operator|&
name|img
argument_list|,
name|QRect
argument_list|()
argument_list|)
expr_stmt|;
name|QImage
name|imgA
init|=
name|img
operator|.
name|toImage
argument_list|()
decl_stmt|;
name|QImage
name|imgB
init|=
name|img2
operator|.
name|toImage
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|imgA
operator|.
name|size
argument_list|()
argument_list|,
name|imgB
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fuzzyCompareImages
argument_list|(
name|imgA
argument_list|,
name|imgB
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|img2
operator|=
name|QVolatileImage
argument_list|(
literal|20
argument_list|,
literal|20
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
expr_stmt|;
name|img2
operator|.
name|copyFrom
argument_list|(
operator|&
name|img
argument_list|,
name|QRect
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|imgA
operator|=
name|img
operator|.
name|toImage
argument_list|()
operator|.
name|copy
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|imgB
operator|=
name|img2
operator|.
name|toImage
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|imgA
operator|.
name|size
argument_list|()
argument_list|,
name|imgB
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fuzzyCompareImages
argument_list|(
name|imgA
argument_list|,
name|imgB
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|bitmap
name|void
name|tst_QVolatileImage
operator|::
name|bitmap
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
name|CFbsBitmap
modifier|*
name|bmp
init|=
operator|new
name|CFbsBitmap
decl_stmt|;
name|QVERIFY
argument_list|(
name|bmp
operator|->
name|Create
argument_list|(
name|TSize
argument_list|(
literal|100
argument_list|,
literal|50
argument_list|)
argument_list|,
name|EColor64K
argument_list|)
operator|==
name|KErrNone
argument_list|)
expr_stmt|;
name|QVolatileImage
name|bmpimg
argument_list|(
name|bmp
argument_list|)
decl_stmt|;
name|CFbsBitmap
modifier|*
name|dupbmp
init|=
cast|static_cast
argument_list|<
name|CFbsBitmap
operator|*
argument_list|>
argument_list|(
name|bmpimg
operator|.
name|duplicateNativeImage
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|dupbmp
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|dupbmp
operator|!=
name|bmp
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dupbmp
operator|->
name|DataAddress
argument_list|()
argument_list|,
name|bmp
operator|->
name|DataAddress
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|dupbmp
expr_stmt|;
operator|delete
name|bmp
expr_stmt|;
name|bmpimg
operator|.
name|beginDataAccess
argument_list|()
expr_stmt|;
name|qMemSet
argument_list|(
name|bmpimg
operator|.
name|bits
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bmpimg
operator|.
name|byteCount
argument_list|()
argument_list|)
expr_stmt|;
name|qMemSet
argument_list|(
name|bmpimg
operator|.
name|bits
argument_list|()
argument_list|,
literal|1
argument_list|,
name|bmpimg
operator|.
name|bytesPerLine
argument_list|()
operator|*
name|bmpimg
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|bmpimg
operator|.
name|endDataAccess
argument_list|()
expr_stmt|;
comment|// Test bgr->rgb conversion in case of EColor16M.
name|bmp
operator|=
operator|new
name|CFbsBitmap
expr_stmt|;
name|QVERIFY
argument_list|(
name|bmp
operator|->
name|Create
argument_list|(
name|TSize
argument_list|(
literal|101
argument_list|,
literal|89
argument_list|)
argument_list|,
name|EColor16M
argument_list|)
operator|==
name|KErrNone
argument_list|)
expr_stmt|;
name|bmp
operator|->
name|BeginDataAccess
argument_list|()
expr_stmt|;
name|TUint32
modifier|*
name|addr
init|=
name|bmp
operator|->
name|DataAddress
argument_list|()
decl_stmt|;
name|uint
name|rgb
init|=
name|QColor
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|,
literal|30
argument_list|)
operator|.
name|rgb
argument_list|()
decl_stmt|;
name|qMemCopy
argument_list|(
name|bmp
operator|->
name|DataAddress
argument_list|()
argument_list|,
operator|&
name|rgb
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|bmp
operator|->
name|EndDataAccess
argument_list|()
expr_stmt|;
name|TRgb
name|symrgb
decl_stmt|;
name|bmp
operator|->
name|GetPixel
argument_list|(
name|symrgb
argument_list|,
name|TPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|symrgb
operator|.
name|Red
argument_list|()
operator|==
literal|10
operator|&&
name|symrgb
operator|.
name|Green
argument_list|()
operator|==
literal|20
operator|&&
name|symrgb
operator|.
name|Blue
argument_list|()
operator|==
literal|30
argument_list|)
expr_stmt|;
name|bmpimg
operator|=
name|QVolatileImage
argument_list|(
name|bmp
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|bmpimg
operator|.
name|toImage
argument_list|()
operator|.
name|pixel
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|==
name|rgb
argument_list|)
expr_stmt|;
comment|// check if there really was a conversion
name|bmp
operator|->
name|BeginDataAccess
argument_list|()
expr_stmt|;
name|bmpimg
operator|.
name|beginDataAccess
argument_list|()
expr_stmt|;
name|qMemCopy
argument_list|(
operator|&
name|rgb
argument_list|,
name|bmpimg
operator|.
name|constBits
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|uint
name|rgb2
init|=
name|rgb
decl_stmt|;
name|qMemCopy
argument_list|(
operator|&
name|rgb2
argument_list|,
name|bmp
operator|->
name|DataAddress
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rgb
operator|!=
name|rgb2
argument_list|)
expr_stmt|;
name|bmpimg
operator|.
name|endDataAccess
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bmp
operator|->
name|EndDataAccess
argument_list|(
literal|true
argument_list|)
expr_stmt|;
operator|delete
name|bmp
expr_stmt|;
name|bmp
operator|=
operator|new
name|CFbsBitmap
expr_stmt|;
name|QVERIFY
argument_list|(
name|bmp
operator|->
name|Create
argument_list|(
name|TSize
argument_list|(
literal|101
argument_list|,
literal|89
argument_list|)
argument_list|,
name|EGray2
argument_list|)
operator|==
name|KErrNone
argument_list|)
expr_stmt|;
name|bmpimg
operator|=
name|QVolatileImage
argument_list|(
name|bmp
argument_list|)
expr_stmt|;
comment|// inverts pixels, but should do it in place
name|QCOMPARE
argument_list|(
name|bmpimg
operator|.
name|constBits
argument_list|()
argument_list|,
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|bmp
operator|->
name|DataAddress
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bmpimg
operator|.
name|format
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_MonoLSB
argument_list|)
expr_stmt|;
name|bmpimg
operator|.
name|ensureFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|bmpimg
operator|.
name|constBits
argument_list|()
operator|!=
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|bmp
operator|->
name|DataAddress
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bmpimg
operator|.
name|format
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
operator|delete
name|bmp
expr_stmt|;
comment|// The following two formats must be optimal always.
name|bmp
operator|=
operator|new
name|CFbsBitmap
expr_stmt|;
name|QVERIFY
argument_list|(
name|bmp
operator|->
name|Create
argument_list|(
name|TSize
argument_list|(
literal|101
argument_list|,
literal|89
argument_list|)
argument_list|,
name|EColor16MAP
argument_list|)
operator|==
name|KErrNone
argument_list|)
expr_stmt|;
name|bmpimg
operator|=
name|QVolatileImage
argument_list|(
name|bmp
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bmpimg
operator|.
name|format
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bmpimg
operator|.
name|constBits
argument_list|()
argument_list|,
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|bmp
operator|->
name|DataAddress
argument_list|()
argument_list|)
expr_stmt|;
name|bmpimg
operator|.
name|ensureFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bmpimg
operator|.
name|constBits
argument_list|()
argument_list|,
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|bmp
operator|->
name|DataAddress
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|bmp
expr_stmt|;
name|bmp
operator|=
operator|new
name|CFbsBitmap
expr_stmt|;
name|QVERIFY
argument_list|(
name|bmp
operator|->
name|Create
argument_list|(
name|TSize
argument_list|(
literal|101
argument_list|,
literal|89
argument_list|)
argument_list|,
name|EColor16MU
argument_list|)
operator|==
name|KErrNone
argument_list|)
expr_stmt|;
name|bmpimg
operator|=
name|QVolatileImage
argument_list|(
name|bmp
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bmpimg
operator|.
name|format
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bmpimg
operator|.
name|constBits
argument_list|()
argument_list|,
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|bmp
operator|->
name|DataAddress
argument_list|()
argument_list|)
expr_stmt|;
name|bmpimg
operator|.
name|ensureFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bmpimg
operator|.
name|constBits
argument_list|()
argument_list|,
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|bmp
operator|->
name|DataAddress
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|bmp
expr_stmt|;
else|#
directive|else
name|QSKIP
argument_list|(
literal|"CFbsBitmap is only available on Symbian, skipping bitmap test"
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
name|QApplication
operator|::
name|setGraphicsSystem
argument_list|(
literal|"openvg"
argument_list|)
expr_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|tst_QVolatileImage
name|tc
decl_stmt|;
return|return
name|QTest
operator|::
name|qExec
argument_list|(
operator|&
name|tc
argument_list|,
name|argc
argument_list|,
name|argv
argument_list|)
return|;
block|}
end_function
begin_include
include|#
directive|include
file|"tst_qvolatileimage.moc"
end_include
end_unit
