begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/* -*- C++ -*-  */
end_comment
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qmetatype.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvariant.h>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QtDBus>
end_include
begin_include
include|#
directive|include
file|"../qdbusmarshall/common.h"
end_include
begin_include
include|#
directive|include
file|"myobject.h"
end_include
begin_define
DECL|macro|TEST_INTERFACE_NAME
define|#
directive|define
name|TEST_INTERFACE_NAME
value|"com.trolltech.QtDBus.MyObject"
end_define
begin_define
DECL|macro|TEST_SIGNAL_NAME
define|#
directive|define
name|TEST_SIGNAL_NAME
value|"somethingHappened"
end_define
begin_decl_stmt
DECL|variable|serviceName
specifier|static
specifier|const
name|char
name|serviceName
index|[]
init|=
literal|"com.trolltech.autotests.qmyserver"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|objectPath
specifier|static
specifier|const
name|char
name|objectPath
index|[]
init|=
literal|"/com/trolltech/qmyserver"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|interfaceName
specifier|static
specifier|const
name|char
modifier|*
name|interfaceName
init|=
name|serviceName
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|callCount
name|int
name|MyObject
operator|::
name|callCount
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|callArgs
name|QVariantList
name|MyObject
operator|::
name|callArgs
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|MyObjectUnknownType
class|class
name|MyObjectUnknownType
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
name|Q_CLASSINFO
argument_list|(
literal|"D-Bus Interface"
argument_list|,
literal|"com.trolltech.QtDBus.MyObject"
argument_list|)
name|Q_CLASSINFO
argument_list|(
literal|"D-Bus Introspection"
argument_list|,
literal|""
literal|"<interface name=\"com.trolltech.QtDBus.MyObjectUnknownTypes\">\n"
literal|"<property access=\"readwrite\" type=\"~\" name=\"prop1\" />\n"
literal|"<signal name=\"somethingHappened\">\n"
literal|"<arg direction=\"out\" type=\"~\" />\n"
literal|"</signal>\n"
literal|"<method name=\"ping\">\n"
literal|"<arg direction=\"in\" type=\"~\" name=\"ping\" />\n"
literal|"<arg direction=\"out\" type=\"~\" name=\"ping\" />\n"
literal|"</method>\n"
literal|"<method name=\"regularMethod\" />\n"
literal|"</interface>\n"
literal|""
argument_list|)
block|}
class|;
end_class
begin_class
DECL|class|Spy
class|class
name|Spy
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|member|received
name|QString
name|received
decl_stmt|;
DECL|member|count
name|int
name|count
decl_stmt|;
DECL|function|Spy
name|Spy
parameter_list|()
member_init_list|:
name|count
argument_list|(
literal|0
argument_list|)
block|{ }
public|public
name|slots
public|:
DECL|function|spySlot
name|void
name|spySlot
parameter_list|(
specifier|const
name|QString
modifier|&
name|arg
parameter_list|)
block|{
name|received
operator|=
name|arg
expr_stmt|;
operator|++
name|count
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|DerivedFromQDBusInterface
class|class
name|DerivedFromQDBusInterface
super|:
specifier|public
name|QDBusInterface
block|{
name|Q_OBJECT
public|public:
DECL|function|DerivedFromQDBusInterface
name|DerivedFromQDBusInterface
parameter_list|()
member_init_list|:
name|QDBusInterface
argument_list|(
literal|"com.example.Test"
argument_list|,
literal|"/"
argument_list|)
block|{}
public|public
name|slots
public|:
DECL|function|method
name|void
name|method
parameter_list|()
block|{}
block|}
class|;
end_class
begin_comment
comment|// helper function
end_comment
begin_function
DECL|function|emitSignal
name|void
name|emitSignal
parameter_list|(
specifier|const
name|QString
modifier|&
name|interface
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
specifier|const
name|QString
modifier|&
name|arg
parameter_list|)
block|{
name|QDBusMessage
name|msg
init|=
name|QDBusMessage
operator|::
name|createSignal
argument_list|(
literal|"/"
argument_list|,
name|interface
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|msg
operator|<<
name|arg
expr_stmt|;
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|send
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|emitSignalPeer
name|void
name|emitSignalPeer
parameter_list|(
specifier|const
name|QString
modifier|&
name|interface
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
specifier|const
name|QString
modifier|&
name|arg
parameter_list|)
block|{
name|QDBusMessage
name|req
init|=
name|QDBusMessage
operator|::
name|createMethodCall
argument_list|(
name|serviceName
argument_list|,
name|objectPath
argument_list|,
name|interfaceName
argument_list|,
literal|"emitSignal"
argument_list|)
decl_stmt|;
name|req
operator|<<
name|interface
expr_stmt|;
name|req
operator|<<
name|name
expr_stmt|;
name|req
operator|<<
name|arg
expr_stmt|;
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|send
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|callCountPeer
name|int
name|callCountPeer
parameter_list|()
block|{
name|QDBusMessage
name|req
init|=
name|QDBusMessage
operator|::
name|createMethodCall
argument_list|(
name|serviceName
argument_list|,
name|objectPath
argument_list|,
name|interfaceName
argument_list|,
literal|"callCount"
argument_list|)
decl_stmt|;
name|QDBusMessage
name|reply
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|call
argument_list|(
name|req
argument_list|)
decl_stmt|;
return|return
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|callArgsPeer
name|QVariantList
name|callArgsPeer
parameter_list|()
block|{
name|QDBusMessage
name|req
init|=
name|QDBusMessage
operator|::
name|createMethodCall
argument_list|(
name|serviceName
argument_list|,
name|objectPath
argument_list|,
name|interfaceName
argument_list|,
literal|"callArgs"
argument_list|)
decl_stmt|;
name|QDBusMessage
name|reply
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|call
argument_list|(
name|req
argument_list|)
decl_stmt|;
return|return
name|qdbus_cast
argument_list|<
name|QVariantList
argument_list|>
argument_list|(
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setProp1Peer
name|void
name|setProp1Peer
parameter_list|(
name|int
name|val
parameter_list|)
block|{
name|QDBusMessage
name|req
init|=
name|QDBusMessage
operator|::
name|createMethodCall
argument_list|(
name|serviceName
argument_list|,
name|objectPath
argument_list|,
name|interfaceName
argument_list|,
literal|"setProp1"
argument_list|)
decl_stmt|;
name|req
operator|<<
name|val
expr_stmt|;
name|QDBusMessage
name|reply
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|call
argument_list|(
name|req
argument_list|)
decl_stmt|;
block|}
end_function
begin_function
DECL|function|prop1Peer
name|int
name|prop1Peer
parameter_list|()
block|{
name|QDBusMessage
name|req
init|=
name|QDBusMessage
operator|::
name|createMethodCall
argument_list|(
name|serviceName
argument_list|,
name|objectPath
argument_list|,
name|interfaceName
argument_list|,
literal|"prop1"
argument_list|)
decl_stmt|;
name|QDBusMessage
name|reply
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|call
argument_list|(
name|req
argument_list|)
decl_stmt|;
return|return
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setComplexPropPeer
name|void
name|setComplexPropPeer
parameter_list|(
name|QList
argument_list|<
name|int
argument_list|>
name|val
parameter_list|)
block|{
name|QDBusMessage
name|req
init|=
name|QDBusMessage
operator|::
name|createMethodCall
argument_list|(
name|serviceName
argument_list|,
name|objectPath
argument_list|,
name|interfaceName
argument_list|,
literal|"setComplexProp"
argument_list|)
decl_stmt|;
name|req
operator|<<
name|qVariantFromValue
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|QDBusMessage
name|reply
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|call
argument_list|(
name|req
argument_list|)
decl_stmt|;
block|}
end_function
begin_function
DECL|function|complexPropPeer
name|QList
argument_list|<
name|int
argument_list|>
name|complexPropPeer
parameter_list|()
block|{
name|QDBusMessage
name|req
init|=
name|QDBusMessage
operator|::
name|createMethodCall
argument_list|(
name|serviceName
argument_list|,
name|objectPath
argument_list|,
name|interfaceName
argument_list|,
literal|"complexProp"
argument_list|)
decl_stmt|;
name|QDBusMessage
name|reply
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|call
argument_list|(
name|req
argument_list|)
decl_stmt|;
return|return
name|qdbus_cast
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|(
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|resetPeer
name|void
name|resetPeer
parameter_list|()
block|{
name|QDBusMessage
name|req
init|=
name|QDBusMessage
operator|::
name|createMethodCall
argument_list|(
name|serviceName
argument_list|,
name|objectPath
argument_list|,
name|interfaceName
argument_list|,
literal|"reset"
argument_list|)
decl_stmt|;
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|call
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|tst_QDBusInterface
class|class
name|tst_QDBusInterface
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
DECL|member|obj
name|MyObject
name|obj
decl_stmt|;
public|public
name|slots
public|:
DECL|function|testServiceOwnerChanged
name|void
name|testServiceOwnerChanged
parameter_list|(
specifier|const
name|QString
modifier|&
name|service
parameter_list|)
block|{
if|if
condition|(
name|service
operator|==
literal|"com.example.Test"
condition|)
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
private|private
name|slots
private|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|notConnected
parameter_list|()
function_decl|;
name|void
name|notValid
parameter_list|()
function_decl|;
name|void
name|notValidDerived
parameter_list|()
function_decl|;
name|void
name|invalidAfterServiceOwnerChanged
parameter_list|()
function_decl|;
name|void
name|introspect
parameter_list|()
function_decl|;
name|void
name|introspectUnknownTypes
parameter_list|()
function_decl|;
name|void
name|callMethod
parameter_list|()
function_decl|;
name|void
name|invokeMethod
parameter_list|()
function_decl|;
name|void
name|invokeMethodWithReturn
parameter_list|()
function_decl|;
name|void
name|invokeMethodWithMultiReturn
parameter_list|()
function_decl|;
name|void
name|invokeMethodWithComplexReturn
parameter_list|()
function_decl|;
name|void
name|introspectPeer
parameter_list|()
function_decl|;
name|void
name|callMethodPeer
parameter_list|()
function_decl|;
name|void
name|invokeMethodPeer
parameter_list|()
function_decl|;
name|void
name|invokeMethodWithReturnPeer
parameter_list|()
function_decl|;
name|void
name|invokeMethodWithMultiReturnPeer
parameter_list|()
function_decl|;
name|void
name|invokeMethodWithComplexReturnPeer
parameter_list|()
function_decl|;
name|void
name|signal
parameter_list|()
function_decl|;
name|void
name|signalPeer
parameter_list|()
function_decl|;
name|void
name|propertyRead
parameter_list|()
function_decl|;
name|void
name|propertyWrite
parameter_list|()
function_decl|;
name|void
name|complexPropertyRead
parameter_list|()
function_decl|;
name|void
name|complexPropertyWrite
parameter_list|()
function_decl|;
name|void
name|propertyReadPeer
parameter_list|()
function_decl|;
name|void
name|propertyWritePeer
parameter_list|()
function_decl|;
name|void
name|complexPropertyReadPeer
parameter_list|()
function_decl|;
name|void
name|complexPropertyWritePeer
parameter_list|()
function_decl|;
private|private:
DECL|member|proc
name|QProcess
name|proc
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|WaitForQMyServer
class|class
name|WaitForQMyServer
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|WaitForQMyServer
parameter_list|()
constructor_decl|;
name|bool
name|ok
parameter_list|()
function_decl|;
public|public
name|Q_SLOTS
public|:
DECL|function|ownerChange
name|void
name|ownerChange
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
name|serviceName
condition|)
name|loop
operator|.
name|quit
argument_list|()
expr_stmt|;
block|}
private|private:
DECL|member|loop
name|QEventLoop
name|loop
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|WaitForQMyServer
name|WaitForQMyServer
operator|::
name|WaitForQMyServer
parameter_list|()
block|{
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ok
argument_list|()
condition|)
block|{
name|connect
argument_list|(
name|con
operator|.
name|interface
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|serviceOwnerChanged
argument_list|(
name|QString
argument_list|,
name|QString
argument_list|,
name|QString
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|ownerChange
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|2000
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|loop
operator|.
name|exec
argument_list|()
expr_stmt|;
block|}
block|}
end_constructor
begin_function
DECL|function|ok
name|bool
name|WaitForQMyServer
operator|::
name|ok
parameter_list|()
block|{
return|return
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|isConnected
argument_list|()
operator|&&
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|interface
argument_list|()
operator|->
name|isServiceRegistered
argument_list|(
name|serviceName
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|initTestCase
name|void
name|tst_QDBusInterface
operator|::
name|initTestCase
parameter_list|()
block|{
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|con
operator|.
name|registerObject
argument_list|(
literal|"/"
argument_list|,
operator|&
name|obj
argument_list|,
name|QDBusConnection
operator|::
name|ExportAllProperties
operator||
name|QDBusConnection
operator|::
name|ExportAllSlots
operator||
name|QDBusConnection
operator|::
name|ExportAllInvokables
argument_list|)
expr_stmt|;
comment|// start peer server
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|proc
operator|.
name|start
argument_list|(
literal|"qmyserver"
argument_list|)
expr_stmt|;
else|#
directive|else
name|proc
operator|.
name|start
argument_list|(
literal|"./qmyserver/qmyserver"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForStarted
argument_list|()
argument_list|)
expr_stmt|;
name|WaitForQMyServer
name|w
decl_stmt|;
name|QVERIFY
argument_list|(
name|w
operator|.
name|ok
argument_list|()
argument_list|)
expr_stmt|;
comment|//QTest::qWait(2000);
comment|// get peer server address
name|QDBusMessage
name|req
init|=
name|QDBusMessage
operator|::
name|createMethodCall
argument_list|(
name|serviceName
argument_list|,
name|objectPath
argument_list|,
name|interfaceName
argument_list|,
literal|"address"
argument_list|)
decl_stmt|;
name|QDBusMessage
name|rpl
init|=
name|con
operator|.
name|call
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|rpl
operator|.
name|type
argument_list|()
operator|==
name|QDBusMessage
operator|::
name|ReplyMessage
argument_list|)
expr_stmt|;
name|QString
name|address
init|=
name|rpl
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// connect to peer server
name|QDBusConnection
name|peercon
init|=
name|QDBusConnection
operator|::
name|connectToPeer
argument_list|(
name|address
argument_list|,
literal|"peer"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|peercon
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|QDBusMessage
name|req2
init|=
name|QDBusMessage
operator|::
name|createMethodCall
argument_list|(
name|serviceName
argument_list|,
name|objectPath
argument_list|,
name|interfaceName
argument_list|,
literal|"isConnected"
argument_list|)
decl_stmt|;
name|QDBusMessage
name|rpl2
init|=
name|con
operator|.
name|call
argument_list|(
name|req2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|rpl2
operator|.
name|type
argument_list|()
operator|==
name|QDBusMessage
operator|::
name|ReplyMessage
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rpl2
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QDBusInterface
operator|::
name|cleanupTestCase
parameter_list|()
block|{
name|proc
operator|.
name|close
argument_list|()
expr_stmt|;
name|proc
operator|.
name|kill
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|notConnected
name|void
name|tst_QDBusInterface
operator|::
name|notConnected
parameter_list|()
block|{
name|QDBusConnection
name|connection
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|connection
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|QDBusInterface
name|interface
argument_list|(
literal|"org.freedesktop.DBus"
argument_list|,
literal|"/"
argument_list|,
literal|"org.freedesktop.DBus"
argument_list|,
name|connection
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|interface
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|interface
argument_list|,
literal|"ListNames"
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|notValid
name|void
name|tst_QDBusInterface
operator|::
name|notValid
parameter_list|()
block|{
name|QDBusConnection
name|connection
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|connection
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|QDBusInterface
name|interface
argument_list|(
literal|"com.example.Test"
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|"org.example.Test"
argument_list|,
name|connection
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|interface
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|interface
argument_list|,
literal|"ListNames"
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|notValidDerived
name|void
name|tst_QDBusInterface
operator|::
name|notValidDerived
parameter_list|()
block|{
name|DerivedFromQDBusInterface
name|c
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|c
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|c
argument_list|,
literal|"method"
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invalidAfterServiceOwnerChanged
name|void
name|tst_QDBusInterface
operator|::
name|invalidAfterServiceOwnerChanged
parameter_list|()
block|{
comment|// this test is technically the same as tst_QDBusAbstractInterface::followSignal
name|QDBusConnection
name|conn
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QDBusConnectionInterface
modifier|*
name|connIface
init|=
name|conn
operator|.
name|interface
argument_list|()
decl_stmt|;
name|QDBusInterface
name|validInterface
argument_list|(
name|conn
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|validInterface
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QDBusInterface
name|invalidInterface
argument_list|(
literal|"com.example.Test"
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|invalidInterface
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|connect
argument_list|(
name|connIface
argument_list|,
name|SIGNAL
argument_list|(
name|serviceOwnerChanged
argument_list|(
name|QString
argument_list|,
name|QString
argument_list|,
name|QString
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|connIface
operator|->
name|registerService
argument_list|(
literal|"com.example.Test"
argument_list|)
operator|==
name|QDBusConnectionInterface
operator|::
name|ServiceRegistered
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|invalidInterface
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|introspect
name|void
name|tst_QDBusInterface
operator|::
name|introspect
parameter_list|()
block|{
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QDBusInterface
name|iface
argument_list|(
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|baseService
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|TEST_INTERFACE_NAME
argument_list|)
decl_stmt|;
specifier|const
name|QMetaObject
modifier|*
name|mo
init|=
name|iface
operator|.
name|metaObject
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mo
operator|->
name|methodCount
argument_list|()
operator|-
name|mo
operator|->
name|methodOffset
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mo
operator|->
name|indexOfSignal
argument_list|(
name|TEST_SIGNAL_NAME
literal|"(QString)"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mo
operator|->
name|propertyCount
argument_list|()
operator|-
name|mo
operator|->
name|propertyOffset
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mo
operator|->
name|indexOfProperty
argument_list|(
literal|"prop1"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mo
operator|->
name|indexOfProperty
argument_list|(
literal|"complexProp"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|introspectUnknownTypes
name|void
name|tst_QDBusInterface
operator|::
name|introspectUnknownTypes
parameter_list|()
block|{
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|MyObjectUnknownType
name|obj
decl_stmt|;
name|con
operator|.
name|registerObject
argument_list|(
literal|"/unknownTypes"
argument_list|,
operator|&
name|obj
argument_list|,
name|QDBusConnection
operator|::
name|ExportAllContents
argument_list|)
expr_stmt|;
name|QDBusInterface
name|iface
argument_list|(
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|baseService
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"/unknownTypes"
argument_list|)
argument_list|,
literal|"com.trolltech.QtDBus.MyObjectUnknownTypes"
argument_list|)
decl_stmt|;
specifier|const
name|QMetaObject
modifier|*
name|mo
init|=
name|iface
operator|.
name|metaObject
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|mo
operator|->
name|indexOfMethod
argument_list|(
literal|"regularMethod()"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// this is the control
name|QVERIFY
argument_list|(
name|mo
operator|->
name|indexOfMethod
argument_list|(
literal|"somethingHappened(QDBusRawType<0x7e>*)"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mo
operator|->
name|indexOfMethod
argument_list|(
literal|"ping(QDBusRawType<0x7e>*)"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|midx
init|=
name|mo
operator|->
name|indexOfMethod
argument_list|(
literal|"ping(QDBusRawType<0x7e>*)"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mo
operator|->
name|method
argument_list|(
name|midx
argument_list|)
operator|.
name|typeName
argument_list|()
argument_list|,
literal|"QDBusRawType<0x7e>*"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mo
operator|->
name|indexOfProperty
argument_list|(
literal|"prop1"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|pidx
init|=
name|mo
operator|->
name|indexOfProperty
argument_list|(
literal|"prop1"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mo
operator|->
name|property
argument_list|(
name|pidx
argument_list|)
operator|.
name|typeName
argument_list|()
argument_list|,
literal|"QDBusRawType<0x7e>*"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|callMethod
name|void
name|tst_QDBusInterface
operator|::
name|callMethod
parameter_list|()
block|{
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QDBusInterface
name|iface
argument_list|(
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|baseService
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|TEST_INTERFACE_NAME
argument_list|)
decl_stmt|;
name|MyObject
operator|::
name|callCount
operator|=
literal|0
expr_stmt|;
comment|// call a SLOT method
name|QDBusMessage
name|reply
init|=
name|iface
operator|.
name|call
argument_list|(
literal|"ping"
argument_list|,
name|qVariantFromValue
argument_list|(
name|QDBusVariant
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|MyObject
operator|::
name|callCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ReplyMessage
argument_list|)
expr_stmt|;
comment|// verify what the callee received
name|QCOMPARE
argument_list|(
name|MyObject
operator|::
name|callArgs
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVariant
name|v
init|=
name|MyObject
operator|::
name|callArgs
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QDBusVariant
name|dv
init|=
name|qdbus_cast
argument_list|<
name|QDBusVariant
argument_list|>
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify reply
name|QCOMPARE
argument_list|(
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|v
operator|=
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dv
operator|=
name|qdbus_cast
argument_list|<
name|QDBusVariant
argument_list|>
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// call an INVOKABLE method
name|reply
operator|=
name|iface
operator|.
name|call
argument_list|(
literal|"ping_invokable"
argument_list|,
name|qVariantFromValue
argument_list|(
name|QDBusVariant
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyObject
operator|::
name|callCount
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ReplyMessage
argument_list|)
expr_stmt|;
comment|// verify what the callee received
name|QCOMPARE
argument_list|(
name|MyObject
operator|::
name|callArgs
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|v
operator|=
name|MyObject
operator|::
name|callArgs
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dv
operator|=
name|qdbus_cast
argument_list|<
name|QDBusVariant
argument_list|>
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify reply
name|QCOMPARE
argument_list|(
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|v
operator|=
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dv
operator|=
name|qdbus_cast
argument_list|<
name|QDBusVariant
argument_list|>
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invokeMethod
name|void
name|tst_QDBusInterface
operator|::
name|invokeMethod
parameter_list|()
block|{
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QDBusInterface
name|iface
argument_list|(
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|baseService
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|TEST_INTERFACE_NAME
argument_list|)
decl_stmt|;
name|MyObject
operator|::
name|callCount
operator|=
literal|0
expr_stmt|;
comment|// make the SLOT call without a return type
name|QDBusVariant
name|arg
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|iface
argument_list|,
literal|"ping"
argument_list|,
name|Q_ARG
argument_list|(
name|QDBusVariant
argument_list|,
name|arg
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyObject
operator|::
name|callCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// verify what the callee received
name|QCOMPARE
argument_list|(
name|MyObject
operator|::
name|callArgs
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVariant
name|v
init|=
name|MyObject
operator|::
name|callArgs
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QDBusVariant
name|dv
init|=
name|qdbus_cast
argument_list|<
name|QDBusVariant
argument_list|>
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// make the INVOKABLE call without a return type
name|QDBusVariant
name|arg2
argument_list|(
literal|"bar"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|iface
argument_list|,
literal|"ping_invokable"
argument_list|,
name|Q_ARG
argument_list|(
name|QDBusVariant
argument_list|,
name|arg2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyObject
operator|::
name|callCount
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// verify what the callee received
name|QCOMPARE
argument_list|(
name|MyObject
operator|::
name|callArgs
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|v
operator|=
name|MyObject
operator|::
name|callArgs
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dv
operator|=
name|qdbus_cast
argument_list|<
name|QDBusVariant
argument_list|>
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invokeMethodWithReturn
name|void
name|tst_QDBusInterface
operator|::
name|invokeMethodWithReturn
parameter_list|()
block|{
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QDBusInterface
name|iface
argument_list|(
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|baseService
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|TEST_INTERFACE_NAME
argument_list|)
decl_stmt|;
name|MyObject
operator|::
name|callCount
operator|=
literal|0
expr_stmt|;
name|QDBusVariant
name|retArg
decl_stmt|;
comment|// make the SLOT call without a return type
name|QDBusVariant
name|arg
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|iface
argument_list|,
literal|"ping"
argument_list|,
name|Q_RETURN_ARG
argument_list|(
name|QDBusVariant
argument_list|,
name|retArg
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|QDBusVariant
argument_list|,
name|arg
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyObject
operator|::
name|callCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// verify what the callee received
name|QCOMPARE
argument_list|(
name|MyObject
operator|::
name|callArgs
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVariant
name|v
init|=
name|MyObject
operator|::
name|callArgs
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QDBusVariant
name|dv
init|=
name|qdbus_cast
argument_list|<
name|QDBusVariant
argument_list|>
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|arg
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that we got the reply as expected
name|QCOMPARE
argument_list|(
name|retArg
operator|.
name|variant
argument_list|()
argument_list|,
name|arg
operator|.
name|variant
argument_list|()
argument_list|)
expr_stmt|;
comment|// make the INVOKABLE call without a return type
name|QDBusVariant
name|arg2
argument_list|(
literal|"bar"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|iface
argument_list|,
literal|"ping_invokable"
argument_list|,
name|Q_RETURN_ARG
argument_list|(
name|QDBusVariant
argument_list|,
name|retArg
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|QDBusVariant
argument_list|,
name|arg2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyObject
operator|::
name|callCount
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// verify what the callee received
name|QCOMPARE
argument_list|(
name|MyObject
operator|::
name|callArgs
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|v
operator|=
name|MyObject
operator|::
name|callArgs
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dv
operator|=
name|qdbus_cast
argument_list|<
name|QDBusVariant
argument_list|>
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|arg2
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that we got the reply as expected
name|QCOMPARE
argument_list|(
name|retArg
operator|.
name|variant
argument_list|()
argument_list|,
name|arg2
operator|.
name|variant
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invokeMethodWithMultiReturn
name|void
name|tst_QDBusInterface
operator|::
name|invokeMethodWithMultiReturn
parameter_list|()
block|{
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QDBusInterface
name|iface
argument_list|(
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|baseService
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|TEST_INTERFACE_NAME
argument_list|)
decl_stmt|;
name|MyObject
operator|::
name|callCount
operator|=
literal|0
expr_stmt|;
name|QDBusVariant
name|retArg
decl_stmt|,
name|retArg2
decl_stmt|;
comment|// make the SLOT call without a return type
name|QDBusVariant
name|arg
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|,
name|arg2
argument_list|(
literal|"bar"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|iface
argument_list|,
literal|"ping"
argument_list|,
name|Q_RETURN_ARG
argument_list|(
name|QDBusVariant
argument_list|,
name|retArg
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|QDBusVariant
argument_list|,
name|arg
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|QDBusVariant
argument_list|,
name|arg2
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|QDBusVariant
operator|&
argument_list|,
name|retArg2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyObject
operator|::
name|callCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// verify what the callee received
name|QCOMPARE
argument_list|(
name|MyObject
operator|::
name|callArgs
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVariant
name|v
init|=
name|MyObject
operator|::
name|callArgs
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QDBusVariant
name|dv
init|=
name|qdbus_cast
argument_list|<
name|QDBusVariant
argument_list|>
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|arg
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|=
name|MyObject
operator|::
name|callArgs
operator|.
name|at
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dv
operator|=
name|qdbus_cast
argument_list|<
name|QDBusVariant
argument_list|>
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|arg2
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that we got the replies as expected
name|QCOMPARE
argument_list|(
name|retArg
operator|.
name|variant
argument_list|()
argument_list|,
name|arg
operator|.
name|variant
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|retArg2
operator|.
name|variant
argument_list|()
argument_list|,
name|arg2
operator|.
name|variant
argument_list|()
argument_list|)
expr_stmt|;
comment|// make the INVOKABLE call without a return type
name|QDBusVariant
name|arg3
argument_list|(
literal|"hello"
argument_list|)
decl_stmt|,
name|arg4
argument_list|(
literal|"world"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|iface
argument_list|,
literal|"ping_invokable"
argument_list|,
name|Q_RETURN_ARG
argument_list|(
name|QDBusVariant
argument_list|,
name|retArg
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|QDBusVariant
argument_list|,
name|arg3
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|QDBusVariant
argument_list|,
name|arg4
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|QDBusVariant
operator|&
argument_list|,
name|retArg2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyObject
operator|::
name|callCount
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// verify what the callee received
name|QCOMPARE
argument_list|(
name|MyObject
operator|::
name|callArgs
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|v
operator|=
name|MyObject
operator|::
name|callArgs
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dv
operator|=
name|qdbus_cast
argument_list|<
name|QDBusVariant
argument_list|>
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|arg3
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|=
name|MyObject
operator|::
name|callArgs
operator|.
name|at
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dv
operator|=
name|qdbus_cast
argument_list|<
name|QDBusVariant
argument_list|>
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|arg4
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that we got the replies as expected
name|QCOMPARE
argument_list|(
name|retArg
operator|.
name|variant
argument_list|()
argument_list|,
name|arg3
operator|.
name|variant
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|retArg2
operator|.
name|variant
argument_list|()
argument_list|,
name|arg4
operator|.
name|variant
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invokeMethodWithComplexReturn
name|void
name|tst_QDBusInterface
operator|::
name|invokeMethodWithComplexReturn
parameter_list|()
block|{
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QDBusInterface
name|iface
argument_list|(
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|baseService
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|TEST_INTERFACE_NAME
argument_list|)
decl_stmt|;
name|MyObject
operator|::
name|callCount
operator|=
literal|0
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|retArg
decl_stmt|;
comment|// make the SLOT call without a return type
name|QList
argument_list|<
name|int
argument_list|>
name|arg
init|=
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|42
operator|<<
operator|-
literal|47
decl_stmt|;
name|QVERIFY
argument_list|(
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|iface
argument_list|,
literal|"ping"
argument_list|,
name|Q_RETURN_ARG
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|,
name|retArg
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|,
name|arg
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyObject
operator|::
name|callCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// verify what the callee received
name|QCOMPARE
argument_list|(
name|MyObject
operator|::
name|callArgs
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVariant
name|v
init|=
name|MyObject
operator|::
name|callArgs
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|userType
argument_list|()
argument_list|,
name|qMetaTypeId
argument_list|<
name|QDBusArgument
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qdbus_cast
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|(
name|v
argument_list|)
argument_list|,
name|arg
argument_list|)
expr_stmt|;
comment|// verify that we got the reply as expected
name|QCOMPARE
argument_list|(
name|retArg
argument_list|,
name|arg
argument_list|)
expr_stmt|;
comment|// make the INVOKABLE call without a return type
name|QList
argument_list|<
name|int
argument_list|>
name|arg2
init|=
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|24
operator|<<
operator|-
literal|74
decl_stmt|;
name|QVERIFY
argument_list|(
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|iface
argument_list|,
literal|"ping"
argument_list|,
name|Q_RETURN_ARG
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|,
name|retArg
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|,
name|arg2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyObject
operator|::
name|callCount
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// verify what the callee received
name|QCOMPARE
argument_list|(
name|MyObject
operator|::
name|callArgs
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|v
operator|=
name|MyObject
operator|::
name|callArgs
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|userType
argument_list|()
argument_list|,
name|qMetaTypeId
argument_list|<
name|QDBusArgument
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qdbus_cast
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|(
name|v
argument_list|)
argument_list|,
name|arg2
argument_list|)
expr_stmt|;
comment|// verify that we got the reply as expected
name|QCOMPARE
argument_list|(
name|retArg
argument_list|,
name|arg2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|introspectPeer
name|void
name|tst_QDBusInterface
operator|::
name|introspectPeer
parameter_list|()
block|{
name|QDBusConnection
name|con
argument_list|(
literal|"peer"
argument_list|)
decl_stmt|;
name|QDBusInterface
name|iface
argument_list|(
name|QString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|TEST_INTERFACE_NAME
argument_list|,
name|con
argument_list|)
decl_stmt|;
specifier|const
name|QMetaObject
modifier|*
name|mo
init|=
name|iface
operator|.
name|metaObject
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mo
operator|->
name|methodCount
argument_list|()
operator|-
name|mo
operator|->
name|methodOffset
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mo
operator|->
name|indexOfSignal
argument_list|(
name|TEST_SIGNAL_NAME
literal|"(QString)"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mo
operator|->
name|propertyCount
argument_list|()
operator|-
name|mo
operator|->
name|propertyOffset
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mo
operator|->
name|indexOfProperty
argument_list|(
literal|"prop1"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mo
operator|->
name|indexOfProperty
argument_list|(
literal|"complexProp"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|callMethodPeer
name|void
name|tst_QDBusInterface
operator|::
name|callMethodPeer
parameter_list|()
block|{
name|QDBusConnection
name|con
argument_list|(
literal|"peer"
argument_list|)
decl_stmt|;
name|QDBusInterface
name|iface
argument_list|(
name|QString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|TEST_INTERFACE_NAME
argument_list|,
name|con
argument_list|)
decl_stmt|;
name|resetPeer
argument_list|()
expr_stmt|;
comment|// call a SLOT method
name|QDBusMessage
name|reply
init|=
name|iface
operator|.
name|call
argument_list|(
literal|"ping"
argument_list|,
name|qVariantFromValue
argument_list|(
name|QDBusVariant
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|callCountPeer
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ReplyMessage
argument_list|)
expr_stmt|;
comment|// verify what the callee received
name|QVariantList
name|callArgs
init|=
name|callArgsPeer
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|callArgs
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVariant
name|v
init|=
name|callArgs
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QDBusVariant
name|dv
init|=
name|qdbus_cast
argument_list|<
name|QDBusVariant
argument_list|>
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify reply
name|QCOMPARE
argument_list|(
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|v
operator|=
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dv
operator|=
name|qdbus_cast
argument_list|<
name|QDBusVariant
argument_list|>
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// call an INVOKABLE method
name|reply
operator|=
name|iface
operator|.
name|call
argument_list|(
literal|"ping_invokable"
argument_list|,
name|qVariantFromValue
argument_list|(
name|QDBusVariant
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|callCountPeer
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ReplyMessage
argument_list|)
expr_stmt|;
comment|// verify what the callee received
name|callArgs
operator|=
name|callArgsPeer
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|callArgs
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|v
operator|=
name|callArgs
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dv
operator|=
name|qdbus_cast
argument_list|<
name|QDBusVariant
argument_list|>
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify reply
name|QCOMPARE
argument_list|(
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|v
operator|=
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dv
operator|=
name|qdbus_cast
argument_list|<
name|QDBusVariant
argument_list|>
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invokeMethodPeer
name|void
name|tst_QDBusInterface
operator|::
name|invokeMethodPeer
parameter_list|()
block|{
name|QDBusConnection
name|con
argument_list|(
literal|"peer"
argument_list|)
decl_stmt|;
name|QDBusInterface
name|iface
argument_list|(
name|QString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|TEST_INTERFACE_NAME
argument_list|,
name|con
argument_list|)
decl_stmt|;
name|resetPeer
argument_list|()
expr_stmt|;
comment|// make the SLOT call without a return type
name|QDBusVariant
name|arg
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|iface
argument_list|,
literal|"ping"
argument_list|,
name|Q_ARG
argument_list|(
name|QDBusVariant
argument_list|,
name|arg
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|callCountPeer
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// verify what the callee received
name|QVariantList
name|callArgs
init|=
name|callArgsPeer
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|callArgs
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVariant
name|v
init|=
name|callArgs
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QDBusVariant
name|dv
init|=
name|qdbus_cast
argument_list|<
name|QDBusVariant
argument_list|>
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// make the INVOKABLE call without a return type
name|QDBusVariant
name|arg2
argument_list|(
literal|"bar"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|iface
argument_list|,
literal|"ping_invokable"
argument_list|,
name|Q_ARG
argument_list|(
name|QDBusVariant
argument_list|,
name|arg2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|callCountPeer
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// verify what the callee received
name|callArgs
operator|=
name|callArgsPeer
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|callArgs
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|v
operator|=
name|callArgs
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dv
operator|=
name|qdbus_cast
argument_list|<
name|QDBusVariant
argument_list|>
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invokeMethodWithReturnPeer
name|void
name|tst_QDBusInterface
operator|::
name|invokeMethodWithReturnPeer
parameter_list|()
block|{
name|QDBusConnection
name|con
argument_list|(
literal|"peer"
argument_list|)
decl_stmt|;
name|QDBusInterface
name|iface
argument_list|(
name|QString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|TEST_INTERFACE_NAME
argument_list|,
name|con
argument_list|)
decl_stmt|;
name|resetPeer
argument_list|()
expr_stmt|;
name|QDBusVariant
name|retArg
decl_stmt|;
comment|// make the SLOT call without a return type
name|QDBusVariant
name|arg
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|iface
argument_list|,
literal|"ping"
argument_list|,
name|Q_RETURN_ARG
argument_list|(
name|QDBusVariant
argument_list|,
name|retArg
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|QDBusVariant
argument_list|,
name|arg
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|callCountPeer
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// verify what the callee received
name|QVariantList
name|callArgs
init|=
name|callArgsPeer
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|callArgs
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVariant
name|v
init|=
name|callArgs
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QDBusVariant
name|dv
init|=
name|qdbus_cast
argument_list|<
name|QDBusVariant
argument_list|>
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|arg
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that we got the reply as expected
name|QCOMPARE
argument_list|(
name|retArg
operator|.
name|variant
argument_list|()
argument_list|,
name|arg
operator|.
name|variant
argument_list|()
argument_list|)
expr_stmt|;
comment|// make the INVOKABLE call without a return type
name|QDBusVariant
name|arg2
argument_list|(
literal|"bar"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|iface
argument_list|,
literal|"ping_invokable"
argument_list|,
name|Q_RETURN_ARG
argument_list|(
name|QDBusVariant
argument_list|,
name|retArg
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|QDBusVariant
argument_list|,
name|arg2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|callCountPeer
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// verify what the callee received
name|callArgs
operator|=
name|callArgsPeer
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|callArgs
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|v
operator|=
name|callArgs
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dv
operator|=
name|qdbus_cast
argument_list|<
name|QDBusVariant
argument_list|>
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|arg2
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that we got the reply as expected
name|QCOMPARE
argument_list|(
name|retArg
operator|.
name|variant
argument_list|()
argument_list|,
name|arg2
operator|.
name|variant
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invokeMethodWithMultiReturnPeer
name|void
name|tst_QDBusInterface
operator|::
name|invokeMethodWithMultiReturnPeer
parameter_list|()
block|{
name|QDBusConnection
name|con
argument_list|(
literal|"peer"
argument_list|)
decl_stmt|;
name|QDBusInterface
name|iface
argument_list|(
name|QString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|TEST_INTERFACE_NAME
argument_list|,
name|con
argument_list|)
decl_stmt|;
name|resetPeer
argument_list|()
expr_stmt|;
name|QDBusVariant
name|retArg
decl_stmt|,
name|retArg2
decl_stmt|;
comment|// make the SLOT call without a return type
name|QDBusVariant
name|arg
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|,
name|arg2
argument_list|(
literal|"bar"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|iface
argument_list|,
literal|"ping"
argument_list|,
name|Q_RETURN_ARG
argument_list|(
name|QDBusVariant
argument_list|,
name|retArg
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|QDBusVariant
argument_list|,
name|arg
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|QDBusVariant
argument_list|,
name|arg2
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|QDBusVariant
operator|&
argument_list|,
name|retArg2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|callCountPeer
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// verify what the callee received
name|QVariantList
name|callArgs
init|=
name|callArgsPeer
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|callArgs
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVariant
name|v
init|=
name|callArgs
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QDBusVariant
name|dv
init|=
name|qdbus_cast
argument_list|<
name|QDBusVariant
argument_list|>
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|arg
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|=
name|callArgs
operator|.
name|at
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dv
operator|=
name|qdbus_cast
argument_list|<
name|QDBusVariant
argument_list|>
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|arg2
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that we got the replies as expected
name|QCOMPARE
argument_list|(
name|retArg
operator|.
name|variant
argument_list|()
argument_list|,
name|arg
operator|.
name|variant
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|retArg2
operator|.
name|variant
argument_list|()
argument_list|,
name|arg2
operator|.
name|variant
argument_list|()
argument_list|)
expr_stmt|;
comment|// make the INVOKABLE call without a return type
name|QDBusVariant
name|arg3
argument_list|(
literal|"hello"
argument_list|)
decl_stmt|,
name|arg4
argument_list|(
literal|"world"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|iface
argument_list|,
literal|"ping_invokable"
argument_list|,
name|Q_RETURN_ARG
argument_list|(
name|QDBusVariant
argument_list|,
name|retArg
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|QDBusVariant
argument_list|,
name|arg3
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|QDBusVariant
argument_list|,
name|arg4
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|QDBusVariant
operator|&
argument_list|,
name|retArg2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|callCountPeer
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// verify what the callee received
name|callArgs
operator|=
name|callArgsPeer
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|callArgs
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|v
operator|=
name|callArgs
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dv
operator|=
name|qdbus_cast
argument_list|<
name|QDBusVariant
argument_list|>
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|arg3
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|=
name|callArgs
operator|.
name|at
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dv
operator|=
name|qdbus_cast
argument_list|<
name|QDBusVariant
argument_list|>
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dv
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|arg4
operator|.
name|variant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that we got the replies as expected
name|QCOMPARE
argument_list|(
name|retArg
operator|.
name|variant
argument_list|()
argument_list|,
name|arg3
operator|.
name|variant
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|retArg2
operator|.
name|variant
argument_list|()
argument_list|,
name|arg4
operator|.
name|variant
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invokeMethodWithComplexReturnPeer
name|void
name|tst_QDBusInterface
operator|::
name|invokeMethodWithComplexReturnPeer
parameter_list|()
block|{
name|QDBusConnection
name|con
argument_list|(
literal|"peer"
argument_list|)
decl_stmt|;
name|QDBusInterface
name|iface
argument_list|(
name|QString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|TEST_INTERFACE_NAME
argument_list|,
name|con
argument_list|)
decl_stmt|;
name|resetPeer
argument_list|()
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|retArg
decl_stmt|;
comment|// make the SLOT call without a return type
name|QList
argument_list|<
name|int
argument_list|>
name|arg
init|=
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|42
operator|<<
operator|-
literal|47
decl_stmt|;
name|QVERIFY
argument_list|(
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|iface
argument_list|,
literal|"ping"
argument_list|,
name|Q_RETURN_ARG
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|,
name|retArg
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|,
name|arg
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|callCountPeer
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// verify what the callee received
name|QVariantList
name|callArgs
init|=
name|callArgsPeer
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|callArgs
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVariant
name|v
init|=
name|callArgs
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|userType
argument_list|()
argument_list|,
name|qMetaTypeId
argument_list|<
name|QDBusArgument
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qdbus_cast
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|(
name|v
argument_list|)
argument_list|,
name|arg
argument_list|)
expr_stmt|;
comment|// verify that we got the reply as expected
name|QCOMPARE
argument_list|(
name|retArg
argument_list|,
name|arg
argument_list|)
expr_stmt|;
comment|// make the INVOKABLE call without a return type
name|QList
argument_list|<
name|int
argument_list|>
name|arg2
init|=
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|24
operator|<<
operator|-
literal|74
decl_stmt|;
name|QVERIFY
argument_list|(
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|iface
argument_list|,
literal|"ping"
argument_list|,
name|Q_RETURN_ARG
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|,
name|retArg
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|,
name|arg2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|callCountPeer
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// verify what the callee received
name|callArgs
operator|=
name|callArgsPeer
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|callArgs
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|v
operator|=
name|callArgs
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|userType
argument_list|()
argument_list|,
name|qMetaTypeId
argument_list|<
name|QDBusArgument
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qdbus_cast
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|(
name|v
argument_list|)
argument_list|,
name|arg2
argument_list|)
expr_stmt|;
comment|// verify that we got the reply as expected
name|QCOMPARE
argument_list|(
name|retArg
argument_list|,
name|arg2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|signal
name|void
name|tst_QDBusInterface
operator|::
name|signal
parameter_list|()
block|{
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QDBusInterface
name|iface
argument_list|(
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|baseService
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|TEST_INTERFACE_NAME
argument_list|)
decl_stmt|;
name|QString
name|arg
init|=
literal|"So long and thanks for all the fish"
decl_stmt|;
block|{
name|Spy
name|spy
decl_stmt|;
name|spy
operator|.
name|connect
argument_list|(
operator|&
name|iface
argument_list|,
name|SIGNAL
argument_list|(
name|somethingHappened
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|spySlot
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|emitSignal
argument_list|(
name|TEST_INTERFACE_NAME
argument_list|,
name|TEST_SIGNAL_NAME
argument_list|,
name|arg
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|received
argument_list|,
name|arg
argument_list|)
expr_stmt|;
block|}
name|QDBusInterface
name|iface2
argument_list|(
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|baseService
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|TEST_INTERFACE_NAME
argument_list|)
decl_stmt|;
block|{
name|Spy
name|spy
decl_stmt|;
name|spy
operator|.
name|connect
argument_list|(
operator|&
name|iface
argument_list|,
name|SIGNAL
argument_list|(
name|somethingHappened
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|spySlot
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|spy
operator|.
name|connect
argument_list|(
operator|&
name|iface2
argument_list|,
name|SIGNAL
argument_list|(
name|somethingHappened
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|spySlot
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|emitSignal
argument_list|(
name|TEST_INTERFACE_NAME
argument_list|,
name|TEST_SIGNAL_NAME
argument_list|,
name|arg
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|received
argument_list|,
name|arg
argument_list|)
expr_stmt|;
block|}
block|{
name|Spy
name|spy
decl_stmt|,
name|spy2
decl_stmt|;
name|spy
operator|.
name|connect
argument_list|(
operator|&
name|iface
argument_list|,
name|SIGNAL
argument_list|(
name|somethingHappened
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|spySlot
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|spy2
operator|.
name|connect
argument_list|(
operator|&
name|iface2
argument_list|,
name|SIGNAL
argument_list|(
name|somethingHappened
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|spySlot
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|emitSignal
argument_list|(
name|TEST_INTERFACE_NAME
argument_list|,
name|TEST_SIGNAL_NAME
argument_list|,
name|arg
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|received
argument_list|,
name|arg
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy2
operator|.
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy2
operator|.
name|received
argument_list|,
name|arg
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|signalPeer
name|void
name|tst_QDBusInterface
operator|::
name|signalPeer
parameter_list|()
block|{
name|QDBusConnection
name|con
argument_list|(
literal|"peer"
argument_list|)
decl_stmt|;
name|QDBusInterface
name|iface
argument_list|(
name|QString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|TEST_INTERFACE_NAME
argument_list|,
name|con
argument_list|)
decl_stmt|;
name|QString
name|arg
init|=
literal|"So long and thanks for all the fish"
decl_stmt|;
block|{
name|Spy
name|spy
decl_stmt|;
name|spy
operator|.
name|connect
argument_list|(
operator|&
name|iface
argument_list|,
name|SIGNAL
argument_list|(
name|somethingHappened
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|spySlot
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|emitSignalPeer
argument_list|(
name|TEST_INTERFACE_NAME
argument_list|,
name|TEST_SIGNAL_NAME
argument_list|,
name|arg
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|received
argument_list|,
name|arg
argument_list|)
expr_stmt|;
block|}
name|QDBusInterface
name|iface2
argument_list|(
name|QString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|TEST_INTERFACE_NAME
argument_list|,
name|con
argument_list|)
decl_stmt|;
block|{
name|Spy
name|spy
decl_stmt|;
name|spy
operator|.
name|connect
argument_list|(
operator|&
name|iface
argument_list|,
name|SIGNAL
argument_list|(
name|somethingHappened
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|spySlot
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|spy
operator|.
name|connect
argument_list|(
operator|&
name|iface2
argument_list|,
name|SIGNAL
argument_list|(
name|somethingHappened
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|spySlot
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|emitSignalPeer
argument_list|(
name|TEST_INTERFACE_NAME
argument_list|,
name|TEST_SIGNAL_NAME
argument_list|,
name|arg
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|received
argument_list|,
name|arg
argument_list|)
expr_stmt|;
block|}
block|{
name|Spy
name|spy
decl_stmt|,
name|spy2
decl_stmt|;
name|spy
operator|.
name|connect
argument_list|(
operator|&
name|iface
argument_list|,
name|SIGNAL
argument_list|(
name|somethingHappened
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|spySlot
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|spy2
operator|.
name|connect
argument_list|(
operator|&
name|iface2
argument_list|,
name|SIGNAL
argument_list|(
name|somethingHappened
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|spySlot
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|emitSignalPeer
argument_list|(
name|TEST_INTERFACE_NAME
argument_list|,
name|TEST_SIGNAL_NAME
argument_list|,
name|arg
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|received
argument_list|,
name|arg
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy2
operator|.
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy2
operator|.
name|received
argument_list|,
name|arg
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|propertyRead
name|void
name|tst_QDBusInterface
operator|::
name|propertyRead
parameter_list|()
block|{
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QDBusInterface
name|iface
argument_list|(
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|baseService
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|TEST_INTERFACE_NAME
argument_list|)
decl_stmt|;
name|int
name|arg
init|=
name|obj
operator|.
name|m_prop1
operator|=
literal|42
decl_stmt|;
name|MyObject
operator|::
name|callCount
operator|=
literal|0
expr_stmt|;
name|QVariant
name|v
init|=
name|iface
operator|.
name|property
argument_list|(
literal|"prop1"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|userType
argument_list|()
argument_list|,
name|int
argument_list|(
name|QVariant
operator|::
name|Int
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|toInt
argument_list|()
argument_list|,
name|arg
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyObject
operator|::
name|callCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|propertyWrite
name|void
name|tst_QDBusInterface
operator|::
name|propertyWrite
parameter_list|()
block|{
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QDBusInterface
name|iface
argument_list|(
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|baseService
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|TEST_INTERFACE_NAME
argument_list|)
decl_stmt|;
name|int
name|arg
init|=
literal|42
decl_stmt|;
name|obj
operator|.
name|m_prop1
operator|=
literal|0
expr_stmt|;
name|MyObject
operator|::
name|callCount
operator|=
literal|0
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|.
name|setProperty
argument_list|(
literal|"prop1"
argument_list|,
name|arg
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyObject
operator|::
name|callCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|obj
operator|.
name|m_prop1
argument_list|,
name|arg
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|complexPropertyRead
name|void
name|tst_QDBusInterface
operator|::
name|complexPropertyRead
parameter_list|()
block|{
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QDBusInterface
name|iface
argument_list|(
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|baseService
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|TEST_INTERFACE_NAME
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|arg
init|=
name|obj
operator|.
name|m_complexProp
operator|=
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|42
operator|<<
operator|-
literal|47
decl_stmt|;
name|MyObject
operator|::
name|callCount
operator|=
literal|0
expr_stmt|;
name|QVariant
name|v
init|=
name|iface
operator|.
name|property
argument_list|(
literal|"complexProp"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|userType
argument_list|()
argument_list|,
name|qMetaTypeId
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|value
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|()
argument_list|,
name|arg
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyObject
operator|::
name|callCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|complexPropertyWrite
name|void
name|tst_QDBusInterface
operator|::
name|complexPropertyWrite
parameter_list|()
block|{
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QDBusInterface
name|iface
argument_list|(
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|baseService
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|TEST_INTERFACE_NAME
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|arg
init|=
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
operator|-
literal|47
operator|<<
literal|42
decl_stmt|;
name|obj
operator|.
name|m_complexProp
operator|.
name|clear
argument_list|()
expr_stmt|;
name|MyObject
operator|::
name|callCount
operator|=
literal|0
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|.
name|setProperty
argument_list|(
literal|"complexProp"
argument_list|,
name|qVariantFromValue
argument_list|(
name|arg
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyObject
operator|::
name|callCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|obj
operator|.
name|m_complexProp
argument_list|,
name|arg
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|propertyReadPeer
name|void
name|tst_QDBusInterface
operator|::
name|propertyReadPeer
parameter_list|()
block|{
name|QDBusConnection
name|con
argument_list|(
literal|"peer"
argument_list|)
decl_stmt|;
name|QDBusInterface
name|iface
argument_list|(
name|QString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|TEST_INTERFACE_NAME
argument_list|,
name|con
argument_list|)
decl_stmt|;
name|resetPeer
argument_list|()
expr_stmt|;
name|int
name|arg
init|=
literal|42
decl_stmt|;
name|setProp1Peer
argument_list|(
literal|42
argument_list|)
expr_stmt|;
name|QVariant
name|v
init|=
name|iface
operator|.
name|property
argument_list|(
literal|"prop1"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|userType
argument_list|()
argument_list|,
name|int
argument_list|(
name|QVariant
operator|::
name|Int
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|toInt
argument_list|()
argument_list|,
name|arg
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|callCountPeer
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|propertyWritePeer
name|void
name|tst_QDBusInterface
operator|::
name|propertyWritePeer
parameter_list|()
block|{
name|QDBusConnection
name|con
argument_list|(
literal|"peer"
argument_list|)
decl_stmt|;
name|QDBusInterface
name|iface
argument_list|(
name|QString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|TEST_INTERFACE_NAME
argument_list|,
name|con
argument_list|)
decl_stmt|;
name|resetPeer
argument_list|()
expr_stmt|;
name|int
name|arg
init|=
literal|42
decl_stmt|;
name|setProp1Peer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|.
name|setProperty
argument_list|(
literal|"prop1"
argument_list|,
name|arg
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|callCountPeer
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|prop1Peer
argument_list|()
argument_list|,
name|arg
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|complexPropertyReadPeer
name|void
name|tst_QDBusInterface
operator|::
name|complexPropertyReadPeer
parameter_list|()
block|{
name|QDBusConnection
name|con
argument_list|(
literal|"peer"
argument_list|)
decl_stmt|;
name|QDBusInterface
name|iface
argument_list|(
name|QString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|TEST_INTERFACE_NAME
argument_list|,
name|con
argument_list|)
decl_stmt|;
name|resetPeer
argument_list|()
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|arg
init|=
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|42
operator|<<
operator|-
literal|47
decl_stmt|;
name|setComplexPropPeer
argument_list|(
name|arg
argument_list|)
expr_stmt|;
name|QVariant
name|v
init|=
name|iface
operator|.
name|property
argument_list|(
literal|"complexProp"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|userType
argument_list|()
argument_list|,
name|qMetaTypeId
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|value
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|()
argument_list|,
name|arg
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|callCountPeer
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|complexPropertyWritePeer
name|void
name|tst_QDBusInterface
operator|::
name|complexPropertyWritePeer
parameter_list|()
block|{
name|QDBusConnection
name|con
argument_list|(
literal|"peer"
argument_list|)
decl_stmt|;
name|QDBusInterface
name|iface
argument_list|(
name|QString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|TEST_INTERFACE_NAME
argument_list|,
name|con
argument_list|)
decl_stmt|;
name|resetPeer
argument_list|()
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|arg
init|=
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
operator|-
literal|47
operator|<<
literal|42
decl_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|.
name|setProperty
argument_list|(
literal|"complexProp"
argument_list|,
name|qVariantFromValue
argument_list|(
name|arg
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|callCountPeer
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|complexPropPeer
argument_list|()
argument_list|,
name|arg
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QDBusInterface
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qdbusinterface.moc"
end_include
end_unit
