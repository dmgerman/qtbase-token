begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_define
DECL|macro|QT_USE_FAST_CONCATENATION
define|#
directive|define
name|QT_USE_FAST_CONCATENATION
end_define
begin_define
DECL|macro|QT_USE_FAST_OPERATOR_PLUS
define|#
directive|define
name|QT_USE_FAST_OPERATOR_PLUS
end_define
begin_include
include|#
directive|include
file|"baselineserver.h"
end_include
begin_include
include|#
directive|include
file|<QBuffer>
end_include
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_include
include|#
directive|include
file|<QDir>
end_include
begin_include
include|#
directive|include
file|<QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QFileInfo>
end_include
begin_include
include|#
directive|include
file|<QHostInfo>
end_include
begin_include
include|#
directive|include
file|<QTextStream>
end_include
begin_include
include|#
directive|include
file|<QProcess>
end_include
begin_include
include|#
directive|include
file|<QDirIterator>
end_include
begin_comment
comment|// extra fields, for use in image metadata storage
end_comment
begin_decl_stmt
specifier|const
name|QString
name|PI_ImageChecksum
argument_list|(
name|QLS
argument_list|(
literal|"ImageChecksum"
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|const
name|QString
name|PI_RunId
argument_list|(
name|QLS
argument_list|(
literal|"RunId"
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|const
name|QString
name|PI_CreationDate
argument_list|(
name|QLS
argument_list|(
literal|"CreationDate"
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|storage
name|QString
name|BaselineServer
operator|::
name|storage
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|url
name|QString
name|BaselineServer
operator|::
name|url
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|settingsFile
name|QString
name|BaselineServer
operator|::
name|settingsFile
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|BaselineServer
name|BaselineServer
operator|::
name|BaselineServer
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QTcpServer
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|lastRunIdIdx
argument_list|(
literal|0
argument_list|)
block|{
name|QFileInfo
name|me
argument_list|(
name|QCoreApplication
operator|::
name|applicationFilePath
argument_list|()
argument_list|)
decl_stmt|;
name|meLastMod
operator|=
name|me
operator|.
name|lastModified
argument_list|()
expr_stmt|;
name|heartbeatTimer
operator|=
operator|new
name|QTimer
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|heartbeatTimer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|heartbeat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|heartbeatTimer
operator|->
name|start
argument_list|(
name|HEARTBEAT
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|storagePath
name|QString
name|BaselineServer
operator|::
name|storagePath
parameter_list|()
block|{
if|if
condition|(
name|storage
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|storage
operator|=
name|QLS
argument_list|(
name|qgetenv
argument_list|(
literal|"QT_LANCELOT_DIR"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|storage
operator|.
name|isEmpty
argument_list|()
condition|)
name|storage
operator|=
name|QLS
argument_list|(
literal|"/var/www"
argument_list|)
expr_stmt|;
block|}
return|return
name|storage
return|;
block|}
end_function
begin_function
DECL|function|baseUrl
name|QString
name|BaselineServer
operator|::
name|baseUrl
parameter_list|()
block|{
if|if
condition|(
name|url
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|url
operator|=
name|QLS
argument_list|(
literal|"http://"
argument_list|)
operator|+
name|QHostInfo
operator|::
name|localHostName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|+
literal|'.'
operator|+
name|QHostInfo
operator|::
name|localDomainName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|+
literal|'/'
expr_stmt|;
block|}
return|return
name|url
return|;
block|}
end_function
begin_function
DECL|function|settingsFilePath
name|QString
name|BaselineServer
operator|::
name|settingsFilePath
parameter_list|()
block|{
if|if
condition|(
name|settingsFile
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|exeName
init|=
name|QCoreApplication
operator|::
name|applicationFilePath
argument_list|()
operator|.
name|section
argument_list|(
name|QLC
argument_list|(
literal|'/'
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|settingsFile
operator|=
name|storagePath
argument_list|()
operator|+
name|QLC
argument_list|(
literal|'/'
argument_list|)
operator|+
name|exeName
operator|+
name|QLS
argument_list|(
literal|".ini"
argument_list|)
expr_stmt|;
block|}
return|return
name|settingsFile
return|;
block|}
end_function
begin_function
DECL|function|incomingConnection
name|void
name|BaselineServer
operator|::
name|incomingConnection
parameter_list|(
name|int
name|socketDescriptor
parameter_list|)
block|{
name|QString
name|runId
init|=
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
operator|.
name|toString
argument_list|(
name|QLS
argument_list|(
literal|"MMMdd-hhmmss"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|runId
operator|==
name|lastRunId
condition|)
block|{
name|runId
operator|+=
name|QLC
argument_list|(
literal|'-'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
operator|++
name|lastRunIdIdx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lastRunId
operator|=
name|runId
expr_stmt|;
name|lastRunIdIdx
operator|=
literal|0
expr_stmt|;
block|}
name|qDebug
argument_list|()
operator|<<
literal|"Server: New connection! RunId:"
operator|<<
name|runId
expr_stmt|;
name|BaselineThread
modifier|*
name|thread
init|=
operator|new
name|BaselineThread
argument_list|(
name|runId
argument_list|,
name|socketDescriptor
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|thread
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
name|thread
argument_list|,
name|SLOT
argument_list|(
name|deleteLater
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|thread
operator|->
name|start
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|heartbeat
name|void
name|BaselineServer
operator|::
name|heartbeat
parameter_list|()
block|{
comment|// The idea is to exit to be restarted when modified, as soon as not actually serving
name|QFileInfo
name|me
argument_list|(
name|QCoreApplication
operator|::
name|applicationFilePath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|me
operator|.
name|lastModified
argument_list|()
operator|==
name|meLastMod
condition|)
return|return;
if|if
condition|(
operator|!
name|me
operator|.
name|exists
argument_list|()
operator|||
operator|!
name|me
operator|.
name|isExecutable
argument_list|()
condition|)
return|return;
comment|//# (could close() here to avoid accepting new connections, to avoid livelock)
comment|//# also, could check for a timeout to force exit, to avoid hung threads blocking
name|bool
name|isServing
init|=
literal|false
decl_stmt|;
foreach|foreach
control|(
name|BaselineThread
modifier|*
name|thread
decl|,
name|findChildren
argument_list|<
name|BaselineThread
operator|*
argument_list|>
argument_list|()
control|)
block|{
if|if
condition|(
name|thread
operator|->
name|isRunning
argument_list|()
condition|)
block|{
name|isServing
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|isServing
condition|)
name|QCoreApplication
operator|::
name|exit
argument_list|()
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|BaselineThread
name|BaselineThread
operator|::
name|BaselineThread
parameter_list|(
specifier|const
name|QString
modifier|&
name|runId
parameter_list|,
name|int
name|socketDescriptor
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QThread
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|runId
argument_list|(
name|runId
argument_list|)
member_init_list|,
name|socketDescriptor
argument_list|(
name|socketDescriptor
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|run
name|void
name|BaselineThread
operator|::
name|run
parameter_list|()
block|{
name|BaselineHandler
name|handler
argument_list|(
name|runId
argument_list|,
name|socketDescriptor
argument_list|)
decl_stmt|;
name|exec
argument_list|()
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|BaselineHandler
name|BaselineHandler
operator|::
name|BaselineHandler
parameter_list|(
specifier|const
name|QString
modifier|&
name|runId
parameter_list|,
name|int
name|socketDescriptor
parameter_list|)
member_init_list|:
name|QObject
argument_list|()
member_init_list|,
name|runId
argument_list|(
name|runId
argument_list|)
member_init_list|,
name|connectionEstablished
argument_list|(
literal|false
argument_list|)
block|{
name|settings
operator|=
operator|new
name|QSettings
argument_list|(
name|BaselineServer
operator|::
name|settingsFilePath
argument_list|()
argument_list|,
name|QSettings
operator|::
name|IniFormat
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|socketDescriptor
operator|==
operator|-
literal|1
condition|)
return|return;
name|connect
argument_list|(
operator|&
name|proto
operator|.
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|receiveRequest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|proto
operator|.
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|receiveDisconnect
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|proto
operator|.
name|socket
operator|.
name|setSocketDescriptor
argument_list|(
name|socketDescriptor
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|logtime
specifier|const
name|char
modifier|*
name|BaselineHandler
operator|::
name|logtime
parameter_list|()
block|{
return|return
literal|0
return|;
comment|//return QTime::currentTime().toString(QLS("mm:ss.zzz"));
block|}
end_function
begin_function
DECL|function|establishConnection
name|bool
name|BaselineHandler
operator|::
name|establishConnection
parameter_list|()
block|{
if|if
condition|(
operator|!
name|proto
operator|.
name|acceptConnection
argument_list|(
operator|&
name|plat
argument_list|)
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|runId
operator|<<
name|logtime
argument_list|()
operator|<<
literal|"Accepting new connection from"
operator|<<
name|proto
operator|.
name|socket
operator|.
name|peerAddress
argument_list|()
operator|.
name|toString
argument_list|()
operator|<<
literal|"failed."
operator|<<
name|proto
operator|.
name|errorMessage
argument_list|()
expr_stmt|;
name|proto
operator|.
name|sendBlock
argument_list|(
name|BaselineProtocol
operator|::
name|Abort
argument_list|,
name|proto
operator|.
name|errorMessage
argument_list|()
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
comment|// In case the client can hear us, tell it what's wrong.
name|proto
operator|.
name|socket
operator|.
name|disconnectFromHost
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
name|QString
name|logMsg
decl_stmt|;
foreach|foreach
control|(
name|QString
name|key
decl|,
name|plat
operator|.
name|keys
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|!=
name|PI_HostName
operator|&&
name|key
operator|!=
name|PI_HostAddress
condition|)
name|logMsg
operator|+=
name|key
operator|+
name|QLS
argument_list|(
literal|": '"
argument_list|)
operator|+
name|plat
operator|.
name|value
argument_list|(
name|key
argument_list|)
operator|+
name|QLS
argument_list|(
literal|"', "
argument_list|)
expr_stmt|;
block|}
name|qDebug
argument_list|()
operator|<<
name|runId
operator|<<
name|logtime
argument_list|()
operator|<<
literal|"Connection established with"
operator|<<
name|plat
operator|.
name|value
argument_list|(
name|PI_HostName
argument_list|)
operator|<<
literal|"["
operator|<<
name|qPrintable
argument_list|(
name|plat
operator|.
name|value
argument_list|(
name|PI_HostAddress
argument_list|)
argument_list|)
operator|<<
literal|"]"
operator|<<
name|logMsg
expr_stmt|;
name|settings
operator|->
name|beginGroup
argument_list|(
literal|"ClientFilters"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|settings
operator|->
name|childKeys
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|plat
operator|.
name|value
argument_list|(
name|PI_PulseGitBranch
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// i.e. not adhoc client
comment|// Abort if client does not match the filters
foreach|foreach
control|(
name|QString
name|filterKey
decl|,
name|settings
operator|->
name|childKeys
argument_list|()
control|)
block|{
name|QString
name|filter
init|=
name|settings
operator|->
name|value
argument_list|(
name|filterKey
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QString
name|platVal
init|=
name|plat
operator|.
name|value
argument_list|(
name|filterKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|.
name|isEmpty
argument_list|()
operator|||
name|platVal
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
comment|// tbd: add a syntax for specifying a "value-must-be-present" filter
if|if
condition|(
operator|!
name|platVal
operator|.
name|contains
argument_list|(
name|filter
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
name|runId
operator|<<
name|logtime
argument_list|()
operator|<<
literal|"Did not pass client filter on"
operator|<<
name|filterKey
operator|<<
literal|"; disconnecting."
expr_stmt|;
name|proto
operator|.
name|sendBlock
argument_list|(
name|BaselineProtocol
operator|::
name|Abort
argument_list|,
name|QByteArray
argument_list|(
literal|"Configured to not do testing for this client or repo, ref. "
argument_list|)
operator|+
name|BaselineServer
operator|::
name|settingsFilePath
argument_list|()
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
name|proto
operator|.
name|socket
operator|.
name|disconnectFromHost
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
name|settings
operator|->
name|endGroup
argument_list|()
expr_stmt|;
name|proto
operator|.
name|sendBlock
argument_list|(
name|BaselineProtocol
operator|::
name|Ack
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|init
argument_list|(
name|this
argument_list|,
name|runId
argument_list|,
name|plat
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|receiveRequest
name|void
name|BaselineHandler
operator|::
name|receiveRequest
parameter_list|()
block|{
if|if
condition|(
operator|!
name|connectionEstablished
condition|)
block|{
name|connectionEstablished
operator|=
name|establishConnection
argument_list|()
expr_stmt|;
return|return;
block|}
name|QByteArray
name|block
decl_stmt|;
name|BaselineProtocol
operator|::
name|Command
name|cmd
decl_stmt|;
if|if
condition|(
operator|!
name|proto
operator|.
name|receiveBlock
argument_list|(
operator|&
name|cmd
argument_list|,
operator|&
name|block
argument_list|)
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|runId
operator|<<
name|logtime
argument_list|()
operator|<<
literal|"Command reception failed. "
operator|<<
name|proto
operator|.
name|errorMessage
argument_list|()
expr_stmt|;
name|QThread
operator|::
name|currentThread
argument_list|()
operator|->
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|cmd
condition|)
block|{
case|case
name|BaselineProtocol
operator|::
name|RequestBaselineChecksums
case|:
name|provideBaselineChecksums
argument_list|(
name|block
argument_list|)
expr_stmt|;
break|break;
case|case
name|BaselineProtocol
operator|::
name|AcceptNewBaseline
case|:
name|storeImage
argument_list|(
name|block
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|BaselineProtocol
operator|::
name|AcceptMismatch
case|:
name|storeImage
argument_list|(
name|block
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
default|default:
name|qWarning
argument_list|()
operator|<<
name|runId
operator|<<
name|logtime
argument_list|()
operator|<<
literal|"Unknown command received. "
operator|<<
name|proto
operator|.
name|errorMessage
argument_list|()
expr_stmt|;
name|proto
operator|.
name|sendBlock
argument_list|(
name|BaselineProtocol
operator|::
name|UnknownError
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|provideBaselineChecksums
name|void
name|BaselineHandler
operator|::
name|provideBaselineChecksums
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|itemListBlock
parameter_list|)
block|{
name|ImageItemList
name|itemList
decl_stmt|;
name|QDataStream
name|ds
argument_list|(
name|itemListBlock
argument_list|)
decl_stmt|;
name|ds
operator|>>
name|itemList
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
name|runId
operator|<<
name|logtime
argument_list|()
operator|<<
literal|"Received request for checksums for"
operator|<<
name|itemList
operator|.
name|count
argument_list|()
operator|<<
literal|"items in test function"
operator|<<
name|itemList
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|testFunction
expr_stmt|;
for|for
control|(
name|ImageItemList
operator|::
name|iterator
name|i
init|=
name|itemList
operator|.
name|begin
argument_list|()
init|;
name|i
operator|!=
name|itemList
operator|.
name|end
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|i
operator|->
name|imageChecksums
operator|.
name|clear
argument_list|()
expr_stmt|;
name|i
operator|->
name|status
operator|=
name|ImageItem
operator|::
name|BaselineNotFound
expr_stmt|;
name|QString
name|prefix
init|=
name|pathForItem
argument_list|(
operator|*
name|i
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|PlatformInfo
name|itemData
init|=
name|fetchItemMetadata
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|itemData
operator|.
name|contains
argument_list|(
name|PI_ImageChecksum
argument_list|)
condition|)
block|{
name|bool
name|ok
init|=
literal|false
decl_stmt|;
name|quint64
name|checksum
init|=
name|itemData
operator|.
name|value
argument_list|(
name|PI_ImageChecksum
argument_list|)
operator|.
name|toULongLong
argument_list|(
operator|&
name|ok
argument_list|,
literal|16
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
block|{
name|i
operator|->
name|imageChecksums
operator|.
name|prepend
argument_list|(
name|checksum
argument_list|)
expr_stmt|;
name|i
operator|->
name|status
operator|=
name|ImageItem
operator|::
name|Ok
expr_stmt|;
block|}
block|}
block|}
comment|// Find and mark blacklisted items
name|QString
name|context
init|=
name|pathForItem
argument_list|(
name|itemList
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
operator|.
name|section
argument_list|(
name|QLC
argument_list|(
literal|'/'
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|-
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|itemList
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
block|{
name|QFile
name|file
argument_list|(
name|BaselineServer
operator|::
name|storagePath
argument_list|()
operator|+
name|QLC
argument_list|(
literal|'/'
argument_list|)
operator|+
name|context
operator|+
name|QLS
argument_list|(
literal|"/BLACKLIST"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|QTextStream
name|in
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
do|do
block|{
name|QString
name|itemName
init|=
name|in
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|itemName
operator|.
name|isNull
argument_list|()
condition|)
block|{
for|for
control|(
name|ImageItemList
operator|::
name|iterator
name|i
init|=
name|itemList
operator|.
name|begin
argument_list|()
init|;
name|i
operator|!=
name|itemList
operator|.
name|end
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|->
name|itemName
operator|==
name|itemName
condition|)
name|i
operator|->
name|status
operator|=
name|ImageItem
operator|::
name|IgnoreItem
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
operator|!
name|in
operator|.
name|atEnd
argument_list|()
condition|)
do|;
block|}
block|}
name|QByteArray
name|block
decl_stmt|;
name|QDataStream
name|ods
argument_list|(
operator|&
name|block
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|ods
operator|<<
name|itemList
expr_stmt|;
name|proto
operator|.
name|sendBlock
argument_list|(
name|BaselineProtocol
operator|::
name|Ack
argument_list|,
name|block
argument_list|)
expr_stmt|;
name|report
operator|.
name|addItems
argument_list|(
name|itemList
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|storeImage
name|void
name|BaselineHandler
operator|::
name|storeImage
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|itemBlock
parameter_list|,
name|bool
name|isBaseline
parameter_list|)
block|{
name|QDataStream
name|ds
argument_list|(
name|itemBlock
argument_list|)
decl_stmt|;
name|ImageItem
name|item
decl_stmt|;
name|ds
operator|>>
name|item
expr_stmt|;
name|QString
name|prefix
init|=
name|pathForItem
argument_list|(
name|item
argument_list|,
name|isBaseline
argument_list|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
name|runId
operator|<<
name|logtime
argument_list|()
operator|<<
literal|"Received"
operator|<<
operator|(
name|isBaseline
condition|?
literal|"baseline"
else|:
literal|"mismatched"
operator|)
operator|<<
literal|"image for:"
operator|<<
name|item
operator|.
name|itemName
operator|<<
literal|"Storing in"
operator|<<
name|prefix
expr_stmt|;
name|QString
name|msg
decl_stmt|;
if|if
condition|(
name|isBaseline
condition|)
name|msg
operator|=
name|QLS
argument_list|(
literal|"New baseline image stored: "
argument_list|)
operator|+
name|pathForItem
argument_list|(
name|item
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
operator|+
name|QLS
argument_list|(
name|FileFormat
argument_list|)
expr_stmt|;
else|else
name|msg
operator|=
name|BaselineServer
operator|::
name|baseUrl
argument_list|()
operator|+
name|report
operator|.
name|filePath
argument_list|()
expr_stmt|;
name|proto
operator|.
name|sendBlock
argument_list|(
name|BaselineProtocol
operator|::
name|Ack
argument_list|,
name|msg
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|dir
init|=
name|prefix
operator|.
name|section
argument_list|(
name|QLC
argument_list|(
literal|'/'
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|-
literal|2
argument_list|)
decl_stmt|;
name|QDir
name|cwd
decl_stmt|;
if|if
condition|(
operator|!
name|cwd
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
condition|)
name|cwd
operator|.
name|mkpath
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|item
operator|.
name|image
operator|.
name|save
argument_list|(
name|prefix
operator|+
name|QLS
argument_list|(
name|FileFormat
argument_list|)
argument_list|,
name|FileFormat
argument_list|)
expr_stmt|;
name|PlatformInfo
name|itemData
init|=
name|plat
decl_stmt|;
name|itemData
operator|.
name|insert
argument_list|(
name|PI_ImageChecksum
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|item
operator|.
name|imageChecksums
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
comment|//# Only the first is stored. TBD: get rid of list
name|itemData
operator|.
name|insert
argument_list|(
name|PI_RunId
argument_list|,
name|runId
argument_list|)
expr_stmt|;
name|itemData
operator|.
name|insert
argument_list|(
name|PI_CreationDate
argument_list|,
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|storeItemMetadata
argument_list|(
name|itemData
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isBaseline
condition|)
name|report
operator|.
name|addMismatch
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|storeItemMetadata
name|void
name|BaselineHandler
operator|::
name|storeItemMetadata
parameter_list|(
specifier|const
name|PlatformInfo
modifier|&
name|metadata
parameter_list|,
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
block|{
name|QFile
name|file
argument_list|(
name|path
operator|+
name|QLS
argument_list|(
name|MetadataFileExt
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Truncate
argument_list|)
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|runId
operator|<<
name|logtime
argument_list|()
operator|<<
literal|"ERROR: could not write to file"
operator|<<
name|file
operator|.
name|fileName
argument_list|()
expr_stmt|;
return|return;
block|}
name|QTextStream
name|out
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|PlatformInfo
operator|::
name|const_iterator
name|it
init|=
name|metadata
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|metadata
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|out
operator|<<
name|it
operator|.
name|key
argument_list|()
operator|<<
literal|": "
operator|<<
name|it
operator|.
name|value
argument_list|()
operator|<<
name|endl
expr_stmt|;
operator|++
name|it
expr_stmt|;
block|}
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fetchItemMetadata
name|PlatformInfo
name|BaselineHandler
operator|::
name|fetchItemMetadata
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
block|{
name|PlatformInfo
name|res
decl_stmt|;
name|QFile
name|file
argument_list|(
name|path
operator|+
name|QLS
argument_list|(
name|MetadataFileExt
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
return|return
name|res
return|;
name|QTextStream
name|in
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
do|do
block|{
name|QString
name|line
init|=
name|in
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
name|line
operator|.
name|indexOf
argument_list|(
name|QLS
argument_list|(
literal|": "
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
name|res
operator|.
name|insert
argument_list|(
name|line
operator|.
name|left
argument_list|(
name|idx
argument_list|)
argument_list|,
name|line
operator|.
name|mid
argument_list|(
name|idx
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|in
operator|.
name|atEnd
argument_list|()
condition|)
do|;
return|return
name|res
return|;
block|}
end_function
begin_function
DECL|function|receiveDisconnect
name|void
name|BaselineHandler
operator|::
name|receiveDisconnect
parameter_list|()
block|{
name|qDebug
argument_list|()
operator|<<
name|runId
operator|<<
name|logtime
argument_list|()
operator|<<
literal|"Client disconnected."
expr_stmt|;
name|report
operator|.
name|end
argument_list|()
expr_stmt|;
name|QThread
operator|::
name|currentThread
argument_list|()
operator|->
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mapPlatformInfo
name|void
name|BaselineHandler
operator|::
name|mapPlatformInfo
parameter_list|()
specifier|const
block|{
name|mapped
operator|=
name|plat
expr_stmt|;
comment|// Map hostname
name|QString
name|host
init|=
name|plat
operator|.
name|value
argument_list|(
name|PI_HostName
argument_list|)
operator|.
name|section
argument_list|(
name|QLC
argument_list|(
literal|'.'
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// Filter away domain, if any
if|if
condition|(
name|host
operator|.
name|isEmpty
argument_list|()
operator|||
name|host
operator|==
name|QLS
argument_list|(
literal|"localhost"
argument_list|)
condition|)
block|{
name|host
operator|=
name|plat
operator|.
name|value
argument_list|(
name|PI_HostAddress
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|plat
operator|.
name|value
argument_list|(
name|PI_PulseGitBranch
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// i.e. pulse run, so remove index postfix typical of vm hostnames
name|host
operator|.
name|remove
argument_list|(
name|QRegExp
argument_list|(
name|QLS
argument_list|(
literal|"\\d+$"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|host
operator|.
name|endsWith
argument_list|(
name|QLC
argument_list|(
literal|'-'
argument_list|)
argument_list|)
condition|)
name|host
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|host
operator|.
name|isEmpty
argument_list|()
condition|)
name|host
operator|=
name|QLS
argument_list|(
literal|"unknownhost"
argument_list|)
expr_stmt|;
name|mapped
operator|.
name|insert
argument_list|(
name|PI_HostName
argument_list|,
name|host
argument_list|)
expr_stmt|;
comment|// Map qmakespec
name|QString
name|mkspec
init|=
name|plat
operator|.
name|value
argument_list|(
name|PI_QMakeSpec
argument_list|)
decl_stmt|;
name|mapped
operator|.
name|insert
argument_list|(
name|PI_QMakeSpec
argument_list|,
name|mkspec
operator|.
name|replace
argument_list|(
name|QLC
argument_list|(
literal|'/'
argument_list|)
argument_list|,
name|QLC
argument_list|(
literal|'_'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Map Qt version
name|QString
name|ver
init|=
name|plat
operator|.
name|value
argument_list|(
name|PI_QtVersion
argument_list|)
decl_stmt|;
name|mapped
operator|.
name|insert
argument_list|(
name|PI_QtVersion
argument_list|,
name|ver
operator|.
name|prepend
argument_list|(
name|QLS
argument_list|(
literal|"Qt-"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pathForItem
name|QString
name|BaselineHandler
operator|::
name|pathForItem
parameter_list|(
specifier|const
name|ImageItem
modifier|&
name|item
parameter_list|,
name|bool
name|isBaseline
parameter_list|,
name|bool
name|absolute
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|mapped
operator|.
name|isEmpty
argument_list|()
condition|)
name|mapPlatformInfo
argument_list|()
expr_stmt|;
name|QString
name|itemName
init|=
name|item
operator|.
name|itemName
operator|.
name|simplified
argument_list|()
decl_stmt|;
name|itemName
operator|.
name|replace
argument_list|(
name|QLC
argument_list|(
literal|' '
argument_list|)
argument_list|,
name|QLC
argument_list|(
literal|'_'
argument_list|)
argument_list|)
expr_stmt|;
name|itemName
operator|.
name|replace
argument_list|(
name|QLC
argument_list|(
literal|'.'
argument_list|)
argument_list|,
name|QLC
argument_list|(
literal|'_'
argument_list|)
argument_list|)
expr_stmt|;
name|itemName
operator|.
name|append
argument_list|(
name|QLC
argument_list|(
literal|'_'
argument_list|)
argument_list|)
expr_stmt|;
name|itemName
operator|.
name|append
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|item
operator|.
name|itemChecksum
argument_list|,
literal|16
argument_list|)
operator|.
name|rightJustified
argument_list|(
literal|4
argument_list|,
name|QLC
argument_list|(
literal|'0'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QStringList
name|path
decl_stmt|;
if|if
condition|(
name|absolute
condition|)
name|path
operator|+=
name|BaselineServer
operator|::
name|storagePath
argument_list|()
expr_stmt|;
name|path
operator|+=
name|mapped
operator|.
name|value
argument_list|(
name|PI_TestCase
argument_list|)
expr_stmt|;
name|path
operator|+=
name|QLS
argument_list|(
name|isBaseline
condition|?
literal|"baselines"
else|:
literal|"mismatches"
argument_list|)
expr_stmt|;
name|path
operator|+=
name|item
operator|.
name|testFunction
expr_stmt|;
name|path
operator|+=
name|mapped
operator|.
name|value
argument_list|(
name|PI_QtVersion
argument_list|)
expr_stmt|;
name|path
operator|+=
name|mapped
operator|.
name|value
argument_list|(
name|PI_QMakeSpec
argument_list|)
expr_stmt|;
name|path
operator|+=
name|mapped
operator|.
name|value
argument_list|(
name|PI_HostName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isBaseline
condition|)
name|path
operator|+=
name|runId
expr_stmt|;
name|path
operator|+=
name|itemName
operator|+
name|QLC
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
return|return
name|path
operator|.
name|join
argument_list|(
name|QLS
argument_list|(
literal|"/"
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|view
name|QString
name|BaselineHandler
operator|::
name|view
parameter_list|(
specifier|const
name|QString
modifier|&
name|baseline
parameter_list|,
specifier|const
name|QString
modifier|&
name|rendered
parameter_list|,
specifier|const
name|QString
modifier|&
name|compared
parameter_list|)
block|{
name|QFile
name|f
argument_list|(
literal|":/templates/view.html"
argument_list|)
decl_stmt|;
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
name|f
operator|.
name|readAll
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
literal|'/'
operator|+
name|baseline
argument_list|,
literal|'/'
operator|+
name|rendered
argument_list|,
literal|'/'
operator|+
name|compared
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|clearAllBaselines
name|QString
name|BaselineHandler
operator|::
name|clearAllBaselines
parameter_list|(
specifier|const
name|QString
modifier|&
name|context
parameter_list|)
block|{
name|int
name|tot
init|=
literal|0
decl_stmt|;
name|int
name|failed
init|=
literal|0
decl_stmt|;
name|QDirIterator
name|it
argument_list|(
name|BaselineServer
operator|::
name|storagePath
argument_list|()
operator|+
name|QLC
argument_list|(
literal|'/'
argument_list|)
operator|+
name|context
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|QLS
argument_list|(
literal|"*."
argument_list|)
operator|+
name|QLS
argument_list|(
name|FileFormat
argument_list|)
operator|<<
name|QLS
argument_list|(
literal|"*."
argument_list|)
operator|+
name|QLS
argument_list|(
name|MetadataFileExt
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|tot
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|QFile
operator|::
name|remove
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
condition|)
name|failed
operator|++
expr_stmt|;
block|}
return|return
name|QString
argument_list|(
name|QLS
argument_list|(
literal|"%1 of %2 baselines cleared from context "
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
operator|(
name|tot
operator|-
name|failed
operator|)
operator|/
literal|2
argument_list|)
operator|.
name|arg
argument_list|(
name|tot
operator|/
literal|2
argument_list|)
operator|+
name|context
return|;
block|}
end_function
begin_function
DECL|function|updateBaselines
name|QString
name|BaselineHandler
operator|::
name|updateBaselines
parameter_list|(
specifier|const
name|QString
modifier|&
name|context
parameter_list|,
specifier|const
name|QString
modifier|&
name|mismatchContext
parameter_list|,
specifier|const
name|QString
modifier|&
name|itemFile
parameter_list|)
block|{
name|int
name|tot
init|=
literal|0
decl_stmt|;
name|int
name|failed
init|=
literal|0
decl_stmt|;
name|QString
name|storagePrefix
init|=
name|BaselineServer
operator|::
name|storagePath
argument_list|()
operator|+
name|QLC
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
comment|// If itemId is set, update just that one, otherwise, update all:
name|QString
name|filter
init|=
name|itemFile
operator|.
name|isEmpty
argument_list|()
condition|?
name|QLS
argument_list|(
literal|"*_????."
argument_list|)
else|:
name|itemFile
decl_stmt|;
name|QDirIterator
name|it
argument_list|(
name|storagePrefix
operator|+
name|mismatchContext
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|filter
operator|+
name|QLS
argument_list|(
name|FileFormat
argument_list|)
operator|<<
name|filter
operator|+
name|QLS
argument_list|(
name|MetadataFileExt
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|tot
operator|++
expr_stmt|;
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|QString
name|oldFile
init|=
name|storagePrefix
operator|+
name|context
operator|+
name|QLC
argument_list|(
literal|'/'
argument_list|)
operator|+
name|it
operator|.
name|fileName
argument_list|()
decl_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|oldFile
argument_list|)
expr_stmt|;
comment|// Remove existing baseline file
if|if
condition|(
operator|!
name|QFile
operator|::
name|copy
argument_list|(
name|it
operator|.
name|filePath
argument_list|()
argument_list|,
name|oldFile
argument_list|)
condition|)
comment|// and replace it with the mismatch
name|failed
operator|++
expr_stmt|;
block|}
return|return
name|QString
argument_list|(
name|QLS
argument_list|(
literal|"%1 of %2 baselines updated in context %3 from context %4"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
operator|(
name|tot
operator|-
name|failed
operator|)
operator|/
literal|2
argument_list|)
operator|.
name|arg
argument_list|(
name|tot
operator|/
literal|2
argument_list|)
operator|.
name|arg
argument_list|(
name|context
argument_list|,
name|mismatchContext
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|blacklistTest
name|QString
name|BaselineHandler
operator|::
name|blacklistTest
parameter_list|(
specifier|const
name|QString
modifier|&
name|context
parameter_list|,
specifier|const
name|QString
modifier|&
name|itemId
parameter_list|,
name|bool
name|removeFromBlacklist
parameter_list|)
block|{
name|QFile
name|file
argument_list|(
name|BaselineServer
operator|::
name|storagePath
argument_list|()
operator|+
name|QLC
argument_list|(
literal|'/'
argument_list|)
operator|+
name|context
operator|+
name|QLS
argument_list|(
literal|"/BLACKLIST"
argument_list|)
argument_list|)
decl_stmt|;
name|QStringList
name|blackList
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
condition|)
block|{
while|while
condition|(
operator|!
name|file
operator|.
name|atEnd
argument_list|()
condition|)
name|blackList
operator|.
name|append
argument_list|(
name|file
operator|.
name|readLine
argument_list|()
operator|.
name|trimmed
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|removeFromBlacklist
condition|)
name|blackList
operator|.
name|removeAll
argument_list|(
name|itemId
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|blackList
operator|.
name|contains
argument_list|(
name|itemId
argument_list|)
condition|)
name|blackList
operator|.
name|append
argument_list|(
name|itemId
argument_list|)
expr_stmt|;
name|file
operator|.
name|resize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QString
name|id
decl|,
name|blackList
control|)
name|file
operator|.
name|write
argument_list|(
name|id
operator|.
name|toLatin1
argument_list|()
operator|+
literal|'\n'
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|QLS
argument_list|(
name|removeFromBlacklist
condition|?
literal|"Whitelisted "
else|:
literal|"Blacklisted "
argument_list|)
operator|+
name|itemId
operator|+
name|QLS
argument_list|(
literal|" in context "
argument_list|)
operator|+
name|context
return|;
block|}
else|else
block|{
return|return
name|QLS
argument_list|(
literal|"Unable to update blacklisted tests, failed to open "
argument_list|)
operator|+
name|file
operator|.
name|fileName
argument_list|()
return|;
block|}
block|}
end_function
begin_function
DECL|function|testPathMapping
name|void
name|BaselineHandler
operator|::
name|testPathMapping
parameter_list|()
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Storage prefix:"
operator|<<
name|BaselineServer
operator|::
name|storagePath
argument_list|()
expr_stmt|;
name|QStringList
name|hosts
decl_stmt|;
name|hosts
operator|<<
name|QLS
argument_list|(
literal|"bq-ubuntu910-x86-01"
argument_list|)
operator|<<
name|QLS
argument_list|(
literal|"bq-ubuntu910-x86-15"
argument_list|)
operator|<<
name|QLS
argument_list|(
literal|"osl-mac-master-5.test.qt.nokia.com"
argument_list|)
operator|<<
name|QLS
argument_list|(
literal|"osl-mac-master-6.test.qt.nokia.com"
argument_list|)
operator|<<
name|QLS
argument_list|(
literal|"sv-xp-vs-010"
argument_list|)
operator|<<
name|QLS
argument_list|(
literal|"sv-xp-vs-011"
argument_list|)
operator|<<
name|QLS
argument_list|(
literal|"sv-solaris-sparc-008"
argument_list|)
operator|<<
name|QLS
argument_list|(
literal|"macbuilder-02.test.troll.no"
argument_list|)
operator|<<
name|QLS
argument_list|(
literal|"bqvm1164"
argument_list|)
operator|<<
name|QLS
argument_list|(
literal|"chimera"
argument_list|)
operator|<<
name|QLS
argument_list|(
literal|"localhost"
argument_list|)
operator|<<
name|QLS
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|ImageItem
name|item
decl_stmt|;
name|item
operator|.
name|testFunction
operator|=
name|QLS
argument_list|(
literal|"testPathMapping"
argument_list|)
expr_stmt|;
name|item
operator|.
name|itemName
operator|=
name|QLS
argument_list|(
literal|"arcs.qps"
argument_list|)
expr_stmt|;
name|item
operator|.
name|imageChecksums
operator|<<
literal|0x0123456789abcdefULL
expr_stmt|;
name|item
operator|.
name|itemChecksum
operator|=
literal|0x0123
expr_stmt|;
name|plat
operator|.
name|insert
argument_list|(
name|PI_QtVersion
argument_list|,
name|QLS
argument_list|(
literal|"5.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|plat
operator|.
name|insert
argument_list|(
name|PI_BuildKey
argument_list|,
name|QLS
argument_list|(
literal|"(nobuildkey)"
argument_list|)
argument_list|)
expr_stmt|;
name|plat
operator|.
name|insert
argument_list|(
name|PI_QMakeSpec
argument_list|,
name|QLS
argument_list|(
literal|"linux-g++"
argument_list|)
argument_list|)
expr_stmt|;
name|plat
operator|.
name|insert
argument_list|(
name|PI_PulseGitBranch
argument_list|,
name|QLS
argument_list|(
literal|"somebranch"
argument_list|)
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|host
decl|,
name|hosts
control|)
block|{
name|mapped
operator|.
name|clear
argument_list|()
expr_stmt|;
name|plat
operator|.
name|insert
argument_list|(
name|PI_HostName
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Baseline from"
operator|<<
name|host
operator|<<
literal|"->"
operator|<<
name|pathForItem
argument_list|(
name|item
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Mismatch from"
operator|<<
name|host
operator|<<
literal|"->"
operator|<<
name|pathForItem
argument_list|(
name|item
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|computeMismatchScore
name|QString
name|BaselineHandler
operator|::
name|computeMismatchScore
parameter_list|(
specifier|const
name|QImage
modifier|&
name|baseline
parameter_list|,
specifier|const
name|QImage
modifier|&
name|rendered
parameter_list|)
block|{
if|if
condition|(
name|baseline
operator|.
name|size
argument_list|()
operator|!=
name|rendered
operator|.
name|size
argument_list|()
operator|||
name|baseline
operator|.
name|format
argument_list|()
operator|!=
name|rendered
operator|.
name|format
argument_list|()
condition|)
return|return
name|QLS
argument_list|(
literal|"[No score, incomparable images.]"
argument_list|)
return|;
if|if
condition|(
name|baseline
operator|.
name|depth
argument_list|()
operator|!=
literal|32
condition|)
return|return
name|QLS
argument_list|(
literal|"[Score computation not implemented for format.]"
argument_list|)
return|;
name|int
name|w
init|=
name|baseline
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|h
init|=
name|baseline
operator|.
name|height
argument_list|()
decl_stmt|;
name|uint
name|ncd
init|=
literal|0
decl_stmt|;
comment|// number of differing color pixels
name|uint
name|nad
init|=
literal|0
decl_stmt|;
comment|// number of differing alpha pixels
name|uint
name|scd
init|=
literal|0
decl_stmt|;
comment|// sum of color pixel difference
name|uint
name|sad
init|=
literal|0
decl_stmt|;
comment|// sum of alpha pixel difference
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
operator|++
name|y
control|)
block|{
specifier|const
name|QRgb
modifier|*
name|bl
init|=
operator|(
specifier|const
name|QRgb
operator|*
operator|)
name|baseline
operator|.
name|constScanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
specifier|const
name|QRgb
modifier|*
name|rl
init|=
operator|(
specifier|const
name|QRgb
operator|*
operator|)
name|rendered
operator|.
name|constScanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|w
condition|;
operator|++
name|x
control|)
block|{
name|QRgb
name|b
init|=
name|bl
index|[
name|x
index|]
decl_stmt|;
name|QRgb
name|r
init|=
name|rl
index|[
name|x
index|]
decl_stmt|;
if|if
condition|(
name|r
operator|!=
name|b
condition|)
block|{
name|int
name|dr
init|=
name|qAbs
argument_list|(
name|qRed
argument_list|(
name|b
argument_list|)
operator|-
name|qRed
argument_list|(
name|r
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|dg
init|=
name|qAbs
argument_list|(
name|qGreen
argument_list|(
name|b
argument_list|)
operator|-
name|qGreen
argument_list|(
name|r
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|db
init|=
name|qAbs
argument_list|(
name|qBlue
argument_list|(
name|b
argument_list|)
operator|-
name|qBlue
argument_list|(
name|r
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|ds
init|=
name|dr
operator|+
name|dg
operator|+
name|db
decl_stmt|;
name|int
name|da
init|=
name|qAbs
argument_list|(
name|qAlpha
argument_list|(
name|b
argument_list|)
operator|-
name|qAlpha
argument_list|(
name|r
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ds
condition|)
block|{
name|ncd
operator|++
expr_stmt|;
name|scd
operator|+=
name|ds
expr_stmt|;
block|}
if|if
condition|(
name|da
condition|)
block|{
name|nad
operator|++
expr_stmt|;
name|sad
operator|+=
name|da
expr_stmt|;
block|}
block|}
block|}
block|}
name|double
name|pcd
init|=
literal|100.0
operator|*
name|ncd
operator|/
operator|(
name|w
operator|*
name|h
operator|)
decl_stmt|;
comment|// percent of pixels that differ
name|double
name|acd
init|=
name|ncd
condition|?
name|double
argument_list|(
name|scd
argument_list|)
operator|/
operator|(
literal|3
operator|*
name|ncd
operator|)
else|:
literal|0
decl_stmt|;
comment|// avg. difference
name|QString
name|res
init|=
name|QString
argument_list|(
name|QLS
argument_list|(
literal|"Diffscore: %1% (Num:%2 Avg:%3)"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|pcd
argument_list|,
literal|0
argument_list|,
literal|'g'
argument_list|,
literal|2
argument_list|)
operator|.
name|arg
argument_list|(
name|ncd
argument_list|)
operator|.
name|arg
argument_list|(
name|acd
argument_list|,
literal|0
argument_list|,
literal|'g'
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseline
operator|.
name|hasAlphaChannel
argument_list|()
condition|)
block|{
name|double
name|pad
init|=
literal|100.0
operator|*
name|nad
operator|/
operator|(
name|w
operator|*
name|h
operator|)
decl_stmt|;
comment|// percent of pixels that differ
name|double
name|aad
init|=
name|nad
condition|?
name|double
argument_list|(
name|sad
argument_list|)
operator|/
operator|(
literal|3
operator|*
name|nad
operator|)
else|:
literal|0
decl_stmt|;
comment|// avg. difference
name|res
operator|+=
name|QString
argument_list|(
name|QLS
argument_list|(
literal|" Alpha-diffscore: %1% (Num:%2 Avg:%3)"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|pad
argument_list|,
literal|0
argument_list|,
literal|'g'
argument_list|,
literal|2
argument_list|)
operator|.
name|arg
argument_list|(
name|nad
argument_list|)
operator|.
name|arg
argument_list|(
name|aad
argument_list|,
literal|0
argument_list|,
literal|'g'
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
end_function
end_unit
