begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"htmlgenerator.h"
end_include
begin_include
include|#
directive|include
file|"xmldata.h"
end_include
begin_include
include|#
directive|include
file|<QtXml>
end_include
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_include
include|#
directive|include
file|<QStringList>
end_include
begin_include
include|#
directive|include
file|<QDateTime>
end_include
begin_include
include|#
directive|include
file|<QtDebug>
end_include
begin_include
include|#
directive|include
file|<iostream>
end_include
begin_function
DECL|function|generateIndex
specifier|static
name|void
name|generateIndex
parameter_list|(
name|QTextStream
modifier|&
name|out
parameter_list|)
block|{
name|out
operator|<<
literal|"\<html>\n\<head><title>SVG rendering comparison</title></head>\n\<body bgcolor=\"white\">\n\<h1>QSvg testing framework</h1>\n\<table border=\"1\">\n\<tr><td>Testing suite</td><td>History</td></tr>\n\<tr>\n\<td><a href=\"test1.1-full.html\">1.1</a></td>\n\<td><a href=\"test1.1-history.html\">1.1 history</a></td>\n\</tr>\n\<tr>\n\<td><a href=\"test1.2-full.html\">1.2 testing suite</a></td>\n\<td><a href=\"test1.2-history.html\">1.2 QSvg history</a></td>\n\</tr>\n\<tr>\n\<td><a href=\"testrandom-full.html\">Random testing suite</a></td>\n\<td><a href=\"testrandom-history.html\">Random tests QSvg history</a></td>\n\</tr>\n\</body>\n\</html>\n"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|usage
specifier|static
name|void
name|usage
parameter_list|(
specifier|const
name|char
modifier|*
name|progname
parameter_list|)
block|{
name|std
operator|::
name|cerr
operator|<<
literal|"Couldn't find 'framework.ini' "
operator|<<
literal|"file and no output has been specified."
operator|<<
name|std
operator|::
name|endl
expr_stmt|;
name|std
operator|::
name|cerr
operator|<<
literal|"Usage: "
operator|<<
name|progname
operator|<<
literal|" -framework<framework.ini>"
operator|<<
literal|" dirname\n"
operator|<<
name|std
operator|::
name|endl
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|HTMLGenerator
name|HTMLGenerator
operator|::
name|HTMLGenerator
parameter_list|()
member_init_list|:
name|settings
argument_list|(
literal|0
argument_list|)
block|{
if|if
condition|(
name|QFile
operator|::
name|exists
argument_list|(
literal|"framework.ini"
argument_list|)
condition|)
block|{
name|settings
operator|=
operator|new
name|QSettings
argument_list|(
literal|"framework.ini"
argument_list|,
name|QSettings
operator|::
name|IniFormat
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_function
DECL|function|generateIndex
name|void
name|HTMLGenerator
operator|::
name|generateIndex
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
block|{  }
end_function
begin_function
DECL|function|generatePages
name|void
name|HTMLGenerator
operator|::
name|generatePages
parameter_list|()
block|{
foreach|foreach
control|(
name|HTMLSuite
modifier|*
name|suite
decl|,
name|suites
control|)
block|{
name|generateSuite
argument_list|(
operator|*
name|suite
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_struct
DECL|struct|HTMLPage
struct|struct
name|HTMLPage
block|{
DECL|member|pageName
name|QString
name|pageName
decl_stmt|;
DECL|member|headings
name|QStringList
name|headings
decl_stmt|;
DECL|member|rows
name|QList
argument_list|<
name|HTMLRow
argument_list|>
name|rows
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|generateSuite
name|void
name|HTMLGenerator
operator|::
name|generateSuite
parameter_list|(
specifier|const
name|HTMLSuite
modifier|&
name|suite
parameter_list|)
block|{
name|generateReferencePage
argument_list|(
name|suite
argument_list|)
expr_stmt|;
name|generateHistoryPages
argument_list|(
name|suite
argument_list|)
expr_stmt|;
name|generateQtComparisonPage
argument_list|(
name|suite
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|generateReferencePage
name|void
name|HTMLGenerator
operator|::
name|generateReferencePage
parameter_list|(
specifier|const
name|HTMLSuite
modifier|&
name|suite
parameter_list|)
block|{
name|bool
name|generateReference
init|=
literal|false
decl_stmt|;
name|QStringList
name|generators
decl_stmt|;
foreach|foreach
control|(
name|HTMLRow
modifier|*
name|row
decl|,
name|suite
operator|.
name|rows
control|)
block|{
foreach|foreach
control|(
name|HTMLImage
name|refs
decl|,
name|row
operator|->
name|referenceImages
control|)
block|{
name|generators
operator|+=
name|refs
operator|.
name|generatorName
expr_stmt|;
foreach|foreach
control|(
name|HTMLImage
name|img
decl|,
name|row
operator|->
name|images
control|)
block|{
if|if
condition|(
operator|(
name|img
operator|.
name|flags
operator|&
name|Default
operator|)
condition|)
block|{
name|generators
operator|+=
name|img
operator|.
name|generatorName
expr_stmt|;
break|break;
block|}
block|}
foreach|foreach
control|(
name|HTMLImage
name|img
decl|,
name|row
operator|->
name|foreignImages
control|)
block|{
name|generators
operator|+=
name|img
operator|.
name|generatorName
expr_stmt|;
block|}
name|generateReference
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|generateReference
condition|)
break|break;
block|}
if|if
condition|(
operator|!
name|generateReference
condition|)
return|return;
name|QFile
name|file
argument_list|(
name|QString
argument_list|(
literal|"test-%1-reference.html"
argument_list|)
operator|.
name|arg
argument_list|(
name|suite
operator|.
name|name
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
operator||
name|QFile
operator|::
name|Truncate
argument_list|)
condition|)
block|{
return|return;
block|}
name|QTextStream
name|out
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|generateHeader
argument_list|(
name|out
argument_list|,
literal|"Reference Page"
argument_list|,
name|generators
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|HTMLRow
modifier|*
name|row
decl|,
name|suite
operator|.
name|rows
control|)
block|{
name|bool
name|referenceRow
init|=
literal|false
decl_stmt|;
name|QList
argument_list|<
name|HTMLImage
argument_list|>
name|images
decl_stmt|;
foreach|foreach
control|(
name|HTMLImage
name|refs
decl|,
name|row
operator|->
name|referenceImages
control|)
block|{
name|startGenerateRow
argument_list|(
name|out
argument_list|,
name|row
operator|->
name|testcase
argument_list|)
expr_stmt|;
name|referenceRow
operator|=
literal|true
expr_stmt|;
name|images
operator|.
name|append
argument_list|(
name|refs
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|referenceRow
condition|)
block|{
foreach|foreach
control|(
name|HTMLImage
name|img
decl|,
name|row
operator|->
name|images
control|)
block|{
if|if
condition|(
operator|(
name|img
operator|.
name|flags
operator|&
name|Default
operator|)
condition|)
block|{
name|images
operator|.
name|append
argument_list|(
name|img
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|images
operator|<<
name|row
operator|->
name|foreignImages
expr_stmt|;
name|generateImages
argument_list|(
name|out
argument_list|,
name|images
argument_list|)
expr_stmt|;
name|finishGenerateRow
argument_list|(
name|out
argument_list|,
name|row
operator|->
name|testcase
argument_list|)
expr_stmt|;
block|}
block|}
name|generateFooter
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|generateHistoryPages
name|void
name|HTMLGenerator
operator|::
name|generateHistoryPages
parameter_list|(
specifier|const
name|HTMLSuite
modifier|&
name|suite
parameter_list|)
block|{
name|QStringList
name|lst
decl_stmt|;
foreach|foreach
control|(
name|XMLEngine
modifier|*
name|engine
decl|,
name|engines
control|)
block|{
name|generateHistoryForEngine
argument_list|(
name|suite
argument_list|,
name|engine
operator|->
name|name
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|generateHistoryForEngine
name|void
name|HTMLGenerator
operator|::
name|generateHistoryForEngine
parameter_list|(
specifier|const
name|HTMLSuite
modifier|&
name|suite
parameter_list|,
specifier|const
name|QString
modifier|&
name|engine
parameter_list|)
block|{
name|QFile
name|file
argument_list|(
name|QString
argument_list|(
literal|"test-%1-%2-history.html"
argument_list|)
operator|.
name|arg
argument_list|(
name|suite
operator|.
name|name
argument_list|)
operator|.
name|arg
argument_list|(
name|engine
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
operator||
name|QFile
operator|::
name|Truncate
argument_list|)
condition|)
block|{
return|return;
block|}
name|QTextStream
name|out
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|QStringList
name|generators
decl_stmt|;
foreach|foreach
control|(
name|HTMLRow
modifier|*
name|row
decl|,
name|suite
operator|.
name|rows
control|)
block|{
foreach|foreach
control|(
name|HTMLImage
name|refs
decl|,
name|row
operator|->
name|referenceImages
control|)
block|{
name|generators
operator|+=
name|refs
operator|.
name|generatorName
expr_stmt|;
name|generators
operator|+=
literal|"Today"
expr_stmt|;
name|generators
operator|+=
literal|"Yesterday"
expr_stmt|;
name|generators
operator|+=
literal|"Last Week"
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|generators
operator|.
name|isEmpty
argument_list|()
condition|)
break|break;
block|}
if|if
condition|(
name|generators
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|generators
operator|+=
literal|"Today"
expr_stmt|;
name|generators
operator|+=
literal|"Yesterday"
expr_stmt|;
name|generators
operator|+=
literal|"Last Week"
expr_stmt|;
block|}
name|generateHeader
argument_list|(
name|out
argument_list|,
name|QString
argument_list|(
literal|"History for %1 engine"
argument_list|)
operator|.
name|arg
argument_list|(
name|engine
argument_list|)
argument_list|,
name|generators
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|HTMLRow
modifier|*
name|row
decl|,
name|suite
operator|.
name|rows
control|)
block|{
name|QList
argument_list|<
name|HTMLImage
argument_list|>
name|images
decl_stmt|;
name|QStringList
name|generators
decl_stmt|;
foreach|foreach
control|(
name|HTMLImage
name|refs
decl|,
name|row
operator|->
name|referenceImages
control|)
block|{
name|generators
operator|+=
name|refs
operator|.
name|generatorName
expr_stmt|;
name|images
operator|.
name|append
argument_list|(
name|refs
argument_list|)
expr_stmt|;
break|break;
block|}
name|startGenerateRow
argument_list|(
name|out
argument_list|,
name|row
operator|->
name|testcase
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|HTMLImage
name|img
decl|,
name|row
operator|->
name|images
control|)
block|{
if|if
condition|(
name|img
operator|.
name|generatorName
operator|==
name|engine
condition|)
block|{
name|images
operator|<<
name|img
expr_stmt|;
block|}
block|}
name|generateHistoryImages
argument_list|(
name|out
argument_list|,
name|images
argument_list|)
expr_stmt|;
name|finishGenerateRow
argument_list|(
name|out
argument_list|,
name|row
operator|->
name|testcase
argument_list|)
expr_stmt|;
block|}
name|generateFooter
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|generateQtComparisonPage
name|void
name|HTMLGenerator
operator|::
name|generateQtComparisonPage
parameter_list|(
specifier|const
name|HTMLSuite
modifier|&
name|suite
parameter_list|)
block|{
name|QFile
name|file
argument_list|(
name|QString
argument_list|(
literal|"test-%1-comparison.html"
argument_list|)
operator|.
name|arg
argument_list|(
name|suite
operator|.
name|name
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
operator||
name|QFile
operator|::
name|Truncate
argument_list|)
condition|)
block|{
return|return;
block|}
name|QTextStream
name|out
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|QStringList
name|lst
decl_stmt|;
foreach|foreach
control|(
name|XMLEngine
modifier|*
name|engine
decl|,
name|engines
control|)
block|{
if|if
condition|(
operator|!
name|engine
operator|->
name|foreignEngine
operator|&&
operator|!
name|engine
operator|->
name|referenceEngine
condition|)
name|lst
operator|+=
name|engine
operator|->
name|name
expr_stmt|;
block|}
name|generateHeader
argument_list|(
name|out
argument_list|,
name|QString
argument_list|(
literal|"Qt Engine Comparison"
argument_list|)
argument_list|,
name|lst
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|HTMLRow
modifier|*
name|row
decl|,
name|suite
operator|.
name|rows
control|)
block|{
name|QList
argument_list|<
name|HTMLImage
argument_list|>
name|images
decl_stmt|;
name|startGenerateRow
argument_list|(
name|out
argument_list|,
name|row
operator|->
name|testcase
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|HTMLImage
name|img
decl|,
name|row
operator|->
name|images
control|)
block|{
name|images
operator|.
name|append
argument_list|(
name|img
argument_list|)
expr_stmt|;
block|}
name|generateImages
argument_list|(
name|out
argument_list|,
name|images
argument_list|)
expr_stmt|;
name|finishGenerateRow
argument_list|(
name|out
argument_list|,
name|row
operator|->
name|testcase
argument_list|)
expr_stmt|;
block|}
name|generateFooter
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|generateHeader
name|void
name|HTMLGenerator
operator|::
name|generateHeader
parameter_list|(
name|QTextStream
modifier|&
name|out
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|generators
parameter_list|)
block|{
name|out
operator|<<
literal|"<html>\n"
operator|<<
literal|"<head><title>"
operator|<<
name|name
operator|<<
literal|"</title></head>\n"
operator|<<
literal|"<body bgcolor=\"white\">\n"
operator|<<
literal|"<a href=\"index.html\">Click here to go back to main page</a>\n"
operator|<<
literal|"<p><center><h2> Generated: "
operator|<<
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
operator|.
name|toString
argument_list|()
operator|<<
literal|"</h2></center></p>\n"
operator|<<
literal|"<table border=\"1\">\n"
expr_stmt|;
name|out
operator|<<
literal|"<tr>"
expr_stmt|;
foreach|foreach
control|(
name|QString
name|generator
decl|,
name|generators
control|)
block|{
name|out
operator|<<
literal|"<td><b>"
operator|<<
name|generator
operator|<<
literal|"</b></td>\n"
expr_stmt|;
block|}
name|out
operator|<<
literal|"</tr>\n"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|startGenerateRow
name|void
name|HTMLGenerator
operator|::
name|startGenerateRow
parameter_list|(
name|QTextStream
modifier|&
name|out
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|out
operator|<<
literal|"<tr>\n"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|generateImages
name|void
name|HTMLGenerator
operator|::
name|generateImages
parameter_list|(
name|QTextStream
modifier|&
name|out
parameter_list|,
specifier|const
name|QList
argument_list|<
name|HTMLImage
argument_list|>
modifier|&
name|images
parameter_list|)
block|{
name|out
operator|<<
literal|"<tr>\n"
expr_stmt|;
foreach|foreach
control|(
name|HTMLImage
name|image
decl|,
name|images
control|)
block|{
name|out
operator|<<
literal|"<td valign=top><img src=\""
operator|<<
name|image
operator|.
name|file
operator|<<
literal|"\"></td>\n"
expr_stmt|;
block|}
name|out
operator|<<
literal|"</tr>\n"
expr_stmt|;
name|out
operator|<<
literal|"<tr>\n"
expr_stmt|;
foreach|foreach
control|(
name|HTMLImage
name|image
decl|,
name|images
control|)
block|{
name|out
operator|<<
literal|"<td><center>"
operator|<<
name|image
operator|.
name|generatorName
operator|<<
literal|": "
operator|<<
name|image
operator|.
name|details
operator|<<
literal|" ms</center></td>\n"
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|generateHistoryImages
name|void
name|HTMLGenerator
operator|::
name|generateHistoryImages
parameter_list|(
name|QTextStream
modifier|&
name|out
parameter_list|,
specifier|const
name|QList
argument_list|<
name|HTMLImage
argument_list|>
modifier|&
name|images
parameter_list|)
block|{
foreach|foreach
control|(
name|HTMLImage
name|image
decl|,
name|images
control|)
block|{
if|if
condition|(
operator|(
name|image
operator|.
name|flags
operator|&
name|Reference
operator|)
condition|)
block|{
name|out
operator|<<
literal|"<td><img src=\""
operator|<<
name|image
operator|.
name|file
operator|<<
literal|"\"  width=480 height=360></td>\n"
expr_stmt|;
block|}
else|else
block|{
name|QString
name|genName
init|=
name|image
operator|.
name|generatorName
decl_stmt|;
name|QString
name|file
init|=
name|image
operator|.
name|file
operator|.
name|replace
argument_list|(
name|image
operator|.
name|generatorName
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|out
operator|<<
literal|"<td><img src=\""
operator|<<
name|image
operator|.
name|generatorName
operator|<<
name|file
operator|<<
literal|"\"></td>\n"
operator|<<
literal|"<td><img src=\""
operator|<<
name|image
operator|.
name|generatorName
operator|<<
literal|".yesterday"
operator|<<
name|file
operator|<<
literal|"\"></td>\n"
operator|<<
literal|"<td><img src=\""
operator|<<
name|image
operator|.
name|generatorName
operator|<<
literal|".lastweek"
operator|<<
name|file
operator|<<
literal|"\"></td>\n"
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|finishGenerateRow
name|void
name|HTMLGenerator
operator|::
name|finishGenerateRow
parameter_list|(
name|QTextStream
modifier|&
name|out
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|out
operator|<<
literal|"</tr>\n"
operator|<<
literal|"<tr><td colspan=5 bgcolor=yellow><center>"
operator|<<
name|name
operator|<<
literal|"</center></td>\n"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|generateFooter
name|void
name|HTMLGenerator
operator|::
name|generateFooter
parameter_list|(
name|QTextStream
modifier|&
name|out
parameter_list|)
block|{
name|out
operator|<<
literal|"</table>\n"
operator|<<
literal|"</body>\n"
operator|<<
literal|"</html>\n"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|run
name|void
name|HTMLGenerator
operator|::
name|run
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
name|processArguments
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|QDir
name|dir
decl_stmt|;
name|dir
operator|.
name|setFilter
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|NoSymLinks
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
expr_stmt|;
name|QFileInfoList
name|list
init|=
name|dir
operator|.
name|entryInfoList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QFileInfo
name|fileInfo
init|=
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QString
name|dataFile
init|=
name|QString
argument_list|(
literal|"%1/data.xml"
argument_list|)
operator|.
name|arg
argument_list|(
name|fileInfo
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|QFile
operator|::
name|exists
argument_list|(
name|dataFile
argument_list|)
condition|)
block|{
name|XMLReader
name|handler
decl_stmt|;
name|QXmlSimpleReader
name|reader
decl_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
operator|&
name|handler
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setErrorHandler
argument_list|(
operator|&
name|handler
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|dataFile
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
operator||
name|QFile
operator|::
name|Text
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Cannot open file '%s', because: %s"
argument_list|,
name|qPrintable
argument_list|(
name|dataFile
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|file
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|QXmlInputSource
name|xmlInputSource
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|.
name|parse
argument_list|(
name|xmlInputSource
argument_list|)
condition|)
block|{
name|XMLEngine
modifier|*
name|engine
init|=
name|handler
operator|.
name|xmlEngine
argument_list|()
decl_stmt|;
name|engines
operator|.
name|insert
argument_list|(
name|engine
operator|->
name|name
argument_list|,
name|engine
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|engines
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|usage
argument_list|(
name|argv
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return;
block|}
name|convertToHtml
argument_list|()
expr_stmt|;
name|generatePages
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|processArguments
name|void
name|HTMLGenerator
operator|::
name|processArguments
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
name|QString
name|frameworkFile
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|argc
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|opt
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|opt
operator|==
literal|"-framework"
condition|)
block|{
name|frameworkFile
operator|=
name|QString
argument_list|(
name|argv
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outputDirName
operator|=
name|opt
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|frameworkFile
operator|.
name|isEmpty
argument_list|()
operator|&&
name|QFile
operator|::
name|exists
argument_list|(
name|frameworkFile
argument_list|)
condition|)
block|{
operator|delete
name|settings
expr_stmt|;
name|baseDataDir
operator|=
name|QFileInfo
argument_list|(
name|frameworkFile
argument_list|)
operator|.
name|absoluteDir
argument_list|()
operator|.
name|absolutePath
argument_list|()
expr_stmt|;
name|settings
operator|=
operator|new
name|QSettings
argument_list|(
name|frameworkFile
argument_list|,
name|QSettings
operator|::
name|IniFormat
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|outputDirName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QDir
operator|::
name|setCurrent
argument_list|(
name|outputDirName
argument_list|)
expr_stmt|;
block|}
name|htmlOutputDir
operator|=
name|QString
argument_list|(
literal|"html"
argument_list|)
expr_stmt|;
name|QDir
name|dir
decl_stmt|;
name|dir
operator|.
name|mkpath
argument_list|(
name|htmlOutputDir
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|convertToHtml
name|void
name|HTMLGenerator
operator|::
name|convertToHtml
parameter_list|()
block|{
foreach|foreach
control|(
name|XMLEngine
modifier|*
name|engine
decl|,
name|engines
control|)
block|{
foreach|foreach
control|(
name|XMLSuite
modifier|*
name|suite
decl|,
name|engine
operator|->
name|suites
control|)
block|{
name|QString
name|refUrl
decl_stmt|;
name|QString
name|refPrefix
decl_stmt|;
if|if
condition|(
name|settings
condition|)
block|{
name|settings
operator|->
name|beginGroup
argument_list|(
name|suite
operator|->
name|name
argument_list|)
expr_stmt|;
name|refUrl
operator|=
name|settings
operator|->
name|value
argument_list|(
literal|"reference"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|refPrefix
operator|=
name|settings
operator|->
name|value
argument_list|(
literal|"referencePrefix"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|refUrl
operator|.
name|endsWith
argument_list|(
literal|'/'
argument_list|)
condition|)
name|refUrl
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|settings
operator|->
name|endGroup
argument_list|()
expr_stmt|;
block|}
foreach|foreach
control|(
name|XMLFile
modifier|*
name|file
decl|,
name|suite
operator|->
name|files
control|)
block|{
name|HTMLImage
name|image
decl_stmt|;
name|image
operator|.
name|file
operator|=
name|file
operator|->
name|output
expr_stmt|;
name|image
operator|.
name|generatorName
operator|=
name|engine
operator|->
name|name
expr_stmt|;
name|image
operator|.
name|details
operator|=
name|file
operator|->
name|data
operator|.
name|last
argument_list|()
operator|.
name|iterations
operator|==
literal|0
condition|?
name|QString
operator|::
name|number
argument_list|(
operator|-
literal|1
argument_list|)
else|:
name|QString
operator|::
name|number
argument_list|(
name|file
operator|->
name|data
operator|.
name|last
argument_list|()
operator|.
name|timeToRender
operator|/
name|file
operator|->
name|data
operator|.
name|last
argument_list|()
operator|.
name|iterations
argument_list|)
expr_stmt|;
name|image
operator|.
name|flags
operator|=
name|Normal
expr_stmt|;
if|if
condition|(
name|file
operator|->
name|data
operator|.
name|last
argument_list|()
operator|.
name|timeToRender
operator|==
literal|0
condition|)
name|image
operator|.
name|details
operator|=
name|file
operator|->
name|data
operator|.
name|last
argument_list|()
operator|.
name|details
expr_stmt|;
if|if
condition|(
name|engine
operator|->
name|defaultEngine
condition|)
name|image
operator|.
name|flags
operator||=
name|Default
expr_stmt|;
if|if
condition|(
name|engine
operator|->
name|foreignEngine
condition|)
block|{
name|image
operator|.
name|flags
operator|^=
name|Normal
expr_stmt|;
name|image
operator|.
name|flags
operator||=
name|Foreign
expr_stmt|;
block|}
if|if
condition|(
name|engine
operator|->
name|referenceEngine
condition|)
block|{
name|image
operator|.
name|flags
operator|^=
name|Normal
expr_stmt|;
name|image
operator|.
name|flags
operator||=
name|Reference
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|outputDirName
operator|.
name|isEmpty
argument_list|()
operator|&&
name|image
operator|.
name|file
operator|.
name|startsWith
argument_list|(
name|outputDirName
argument_list|)
condition|)
name|image
operator|.
name|file
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
name|outputDirName
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// + '/'
name|HTMLSuite
modifier|*
name|htmlSuite
init|=
name|suites
index|[
name|suite
operator|->
name|name
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|htmlSuite
condition|)
block|{
name|htmlSuite
operator|=
operator|new
name|HTMLSuite
expr_stmt|;
name|htmlSuite
operator|->
name|name
operator|=
name|suite
operator|->
name|name
expr_stmt|;
name|suites
operator|.
name|insert
argument_list|(
name|suite
operator|->
name|name
argument_list|,
name|htmlSuite
argument_list|)
expr_stmt|;
block|}
name|HTMLRow
modifier|*
name|htmlRow
init|=
name|htmlSuite
operator|->
name|rows
index|[
name|file
operator|->
name|name
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|htmlRow
condition|)
block|{
name|htmlRow
operator|=
operator|new
name|HTMLRow
expr_stmt|;
name|htmlRow
operator|->
name|testcase
operator|=
name|file
operator|->
name|name
expr_stmt|;
name|htmlSuite
operator|->
name|rows
operator|.
name|insert
argument_list|(
name|file
operator|->
name|name
argument_list|,
name|htmlRow
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|image
operator|.
name|flags
operator|&
name|Foreign
operator|)
condition|)
name|htmlRow
operator|->
name|foreignImages
operator|.
name|append
argument_list|(
name|image
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|(
name|image
operator|.
name|flags
operator|&
name|Reference
operator|)
condition|)
name|htmlRow
operator|->
name|referenceImages
operator|.
name|append
argument_list|(
name|image
argument_list|)
expr_stmt|;
else|else
block|{
name|htmlRow
operator|->
name|images
operator|.
name|append
argument_list|(
name|image
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|refUrl
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QFileInfo
name|fi
argument_list|(
name|file
operator|->
name|output
argument_list|)
decl_stmt|;
name|HTMLImage
name|image
decl_stmt|;
name|image
operator|.
name|file
operator|=
name|QString
argument_list|(
literal|"%1/%2%3"
argument_list|)
operator|.
name|arg
argument_list|(
name|refUrl
argument_list|)
operator|.
name|arg
argument_list|(
name|refPrefix
argument_list|)
operator|.
name|arg
argument_list|(
name|fi
operator|.
name|fileName
argument_list|()
argument_list|)
expr_stmt|;
name|image
operator|.
name|generatorName
operator|=
name|QString
argument_list|(
literal|"Reference"
argument_list|)
expr_stmt|;
name|image
operator|.
name|details
operator|=
name|QString
argument_list|(
literal|"Reference"
argument_list|)
expr_stmt|;
name|image
operator|.
name|flags
operator|=
name|Reference
expr_stmt|;
if|if
condition|(
name|htmlRow
condition|)
block|{
name|htmlRow
operator|->
name|referenceImages
operator|.
name|append
argument_list|(
name|image
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|createPerformance
name|void
name|HTMLGenerator
operator|::
name|createPerformance
parameter_list|()
block|{
if|#
directive|if
literal|0
block|QFile file(QString("test-performance.html"));     if (!file.open(QFile::WriteOnly | QFile::Truncate)) {         return;     }      QTextStream out(&file);     foreach(XMLEngine *engine, engines) {         QImage img = createHistoryImage(engine);         QImage ;      }
endif|#
directive|endif
block|}
end_function
end_unit
