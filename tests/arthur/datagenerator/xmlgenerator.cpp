begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"xmlgenerator.h"
end_include
begin_include
include|#
directive|include
file|"qengines.h"
end_include
begin_include
include|#
directive|include
file|<QtXml>
end_include
begin_include
include|#
directive|include
file|<QDir>
end_include
begin_constructor
DECL|function|XMLGenerator
name|XMLGenerator
operator|::
name|XMLGenerator
parameter_list|(
specifier|const
name|QString
modifier|&
name|baseDir
parameter_list|)
block|{
name|QList
argument_list|<
name|QEngine
modifier|*
argument_list|>
name|qengines
init|=
name|QtEngines
operator|::
name|self
argument_list|()
operator|->
name|engines
argument_list|()
decl_stmt|;
foreach|foreach
control|(
name|QEngine
modifier|*
name|engine
decl|,
name|qengines
control|)
block|{
name|QString
name|engineDir
init|=
name|engine
operator|->
name|name
argument_list|()
decl_stmt|;
name|QString
name|fileName
init|=
name|engineDir
operator|+
literal|"/"
operator|+
literal|"data.xml"
decl_stmt|;
if|if
condition|(
operator|!
name|baseDir
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|engineDir
operator|=
name|QString
argument_list|(
literal|"%1/%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|baseDir
argument_list|)
operator|.
name|arg
argument_list|(
name|engineDir
argument_list|)
expr_stmt|;
name|fileName
operator|=
name|QString
argument_list|(
literal|"%1/%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|baseDir
argument_list|)
operator|.
name|arg
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|fileName
argument_list|)
condition|)
continue|continue;
name|XMLReader
name|handler
decl_stmt|;
name|QXmlSimpleReader
name|reader
decl_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
operator|&
name|handler
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setErrorHandler
argument_list|(
operator|&
name|handler
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
operator||
name|QFile
operator|::
name|Text
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Cannot open file '%s', because: %s"
argument_list|,
name|qPrintable
argument_list|(
name|fileName
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|file
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|QXmlInputSource
name|xmlInputSource
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|.
name|parse
argument_list|(
name|xmlInputSource
argument_list|)
condition|)
block|{
name|XMLEngine
modifier|*
name|engine
init|=
name|handler
operator|.
name|xmlEngine
argument_list|()
decl_stmt|;
name|checkDirs
argument_list|(
name|engine
operator|->
name|generationDate
argument_list|,
name|engineDir
argument_list|)
expr_stmt|;
name|engines
operator|.
name|insert
argument_list|(
name|engine
operator|->
name|name
argument_list|,
name|engine
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_constructor
begin_function
DECL|function|startSuite
name|void
name|XMLGenerator
operator|::
name|startSuite
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|currentSuite
operator|=
name|name
expr_stmt|;
block|}
end_function
begin_function
DECL|function|startTestcase
name|void
name|XMLGenerator
operator|::
name|startTestcase
parameter_list|(
specifier|const
name|QString
modifier|&
name|testcase
parameter_list|)
block|{
name|currentTestcase
operator|=
name|testcase
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addImage
name|void
name|XMLGenerator
operator|::
name|addImage
parameter_list|(
specifier|const
name|QString
modifier|&
name|engineName
parameter_list|,
specifier|const
name|QString
modifier|&
name|image
parameter_list|,
specifier|const
name|XMLData
modifier|&
name|data
parameter_list|,
name|GeneratorFlags
name|flags
parameter_list|)
block|{
name|XMLEngine
modifier|*
name|engine
decl_stmt|;
if|if
condition|(
name|engines
operator|.
name|contains
argument_list|(
name|engineName
argument_list|)
condition|)
name|engine
operator|=
name|engines
index|[
name|engineName
index|]
expr_stmt|;
else|else
block|{
name|engine
operator|=
operator|new
name|XMLEngine
argument_list|(
name|engineName
argument_list|,
name|flags
operator|&
name|Default
argument_list|)
expr_stmt|;
name|engine
operator|->
name|defaultEngine
operator|=
operator|(
name|flags
operator|&
name|Default
operator|)
expr_stmt|;
name|engine
operator|->
name|foreignEngine
operator|=
operator|(
name|flags
operator|&
name|Foreign
operator|)
expr_stmt|;
name|engine
operator|->
name|referenceEngine
operator|=
operator|(
name|flags
operator|&
name|Reference
operator|)
expr_stmt|;
name|engine
operator|->
name|generationDate
operator|=
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
expr_stmt|;
name|engines
operator|.
name|insert
argument_list|(
name|engineName
argument_list|,
name|engine
argument_list|)
expr_stmt|;
block|}
name|XMLSuite
modifier|*
name|suite
decl_stmt|;
if|if
condition|(
name|engine
operator|->
name|suites
operator|.
name|contains
argument_list|(
name|currentSuite
argument_list|)
condition|)
name|suite
operator|=
name|engine
operator|->
name|suites
index|[
name|currentSuite
index|]
expr_stmt|;
else|else
block|{
name|suite
operator|=
operator|new
name|XMLSuite
argument_list|(
name|currentSuite
argument_list|)
expr_stmt|;
name|engine
operator|->
name|suites
operator|.
name|insert
argument_list|(
name|currentSuite
argument_list|,
name|suite
argument_list|)
expr_stmt|;
block|}
name|XMLFile
modifier|*
name|file
decl_stmt|;
if|if
condition|(
name|suite
operator|->
name|files
operator|.
name|contains
argument_list|(
name|currentTestcase
argument_list|)
condition|)
name|file
operator|=
name|suite
operator|->
name|files
index|[
name|currentTestcase
index|]
expr_stmt|;
else|else
block|{
name|file
operator|=
operator|new
name|XMLFile
argument_list|(
name|currentTestcase
argument_list|)
expr_stmt|;
name|suite
operator|->
name|files
operator|.
name|insert
argument_list|(
name|currentTestcase
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
name|file
operator|->
name|output
operator|=
name|image
expr_stmt|;
name|file
operator|->
name|data
operator|+=
name|data
expr_stmt|;
block|}
end_function
begin_function
DECL|function|endTestcase
name|void
name|XMLGenerator
operator|::
name|endTestcase
parameter_list|()
block|{  }
end_function
begin_function
DECL|function|endSuite
name|void
name|XMLGenerator
operator|::
name|endSuite
parameter_list|()
block|{  }
end_function
begin_function
DECL|function|generateDataFile
specifier|static
name|void
name|generateDataFile
parameter_list|(
name|QTextStream
modifier|&
name|out
parameter_list|,
name|XMLEngine
modifier|*
name|engine
parameter_list|)
block|{
name|QString
name|indent
decl_stmt|;
name|out
operator|<<
literal|"<arthur engine=\""
operator|<<
name|engine
operator|->
name|name
operator|<<
literal|"\" default=\""
expr_stmt|;
if|if
condition|(
name|engine
operator|->
name|defaultEngine
condition|)
block|{
name|out
operator|<<
literal|"true\""
expr_stmt|;
block|}
else|else
name|out
operator|<<
literal|"false\""
expr_stmt|;
name|out
operator|<<
literal|" foreign=\""
operator|<<
operator|(
name|engine
operator|->
name|foreignEngine
condition|?
literal|"true"
else|:
literal|"false"
operator|)
operator|<<
literal|"\" reference=\""
operator|<<
operator|(
name|engine
operator|->
name|referenceEngine
condition|?
literal|"true"
else|:
literal|"false"
operator|)
operator|<<
literal|"\" generationDate=\""
operator|<<
operator|(
name|engine
operator|->
name|generationDate
operator|.
name|toString
argument_list|()
operator|)
operator|<<
literal|"\">\n"
expr_stmt|;
name|indent
operator|+=
literal|"  "
expr_stmt|;
foreach|foreach
control|(
name|XMLSuite
modifier|*
name|suite
decl|,
name|engine
operator|->
name|suites
control|)
block|{
name|out
operator|<<
name|indent
operator|<<
literal|"<suite dir=\""
operator|<<
name|suite
operator|->
name|name
operator|<<
literal|"\">\n"
expr_stmt|;
name|indent
operator|+=
literal|"  "
expr_stmt|;
foreach|foreach
control|(
name|XMLFile
modifier|*
name|file
decl|,
name|suite
operator|->
name|files
control|)
block|{
name|out
operator|<<
name|indent
operator|<<
literal|"<file name=\""
operator|<<
name|file
operator|->
name|name
operator|<<
literal|"\" output=\""
operator|<<
name|file
operator|->
name|output
operator|<<
literal|"\">\n"
expr_stmt|;
name|indent
operator|+=
literal|"  "
expr_stmt|;
foreach|foreach
control|(
name|XMLData
name|data
decl|,
name|file
operator|->
name|data
control|)
block|{
name|out
operator|<<
name|indent
operator|<<
literal|"<data date=\""
operator|<<
name|data
operator|.
name|date
operator|.
name|toString
argument_list|()
operator|<<
literal|"\" time_to_render=\""
operator|<<
name|data
operator|.
name|timeToRender
operator|<<
literal|"\" iterations=\""
operator|<<
name|data
operator|.
name|iterations
operator|<<
literal|"\" details=\""
operator|<<
name|data
operator|.
name|details
operator|<<
literal|"\" maxElapsed=\""
operator|<<
name|data
operator|.
name|maxElapsed
operator|<<
literal|"\" minElapsed=\""
operator|<<
name|data
operator|.
name|minElapsed
operator|<<
literal|"\" />\n"
expr_stmt|;
block|}
name|indent
operator|.
name|chop
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|out
operator|<<
name|indent
operator|<<
literal|"</file>\n"
expr_stmt|;
block|}
name|indent
operator|.
name|chop
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|out
operator|<<
name|indent
operator|<<
literal|"</suite>\n"
expr_stmt|;
block|}
name|out
operator|<<
literal|"</arthur>"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|generateOutput
name|void
name|XMLGenerator
operator|::
name|generateOutput
parameter_list|(
specifier|const
name|QString
modifier|&
name|baseDir
parameter_list|)
block|{
name|QDir
name|dir
decl_stmt|;
if|if
condition|(
operator|!
name|baseDir
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|dir
operator|=
name|QDir
argument_list|(
name|baseDir
argument_list|)
expr_stmt|;
block|}
foreach|foreach
control|(
name|XMLEngine
modifier|*
name|engine
decl|,
name|engines
control|)
block|{
name|QFile
name|file
argument_list|(
name|QString
argument_list|(
literal|"%1/%2/data.xml"
argument_list|)
operator|.
name|arg
argument_list|(
name|dir
operator|.
name|absolutePath
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|engine
operator|->
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|dir
operator|.
name|mkpath
argument_list|(
name|QFileInfo
argument_list|(
name|file
argument_list|)
operator|.
name|absolutePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
operator||
name|QFile
operator|::
name|Truncate
argument_list|)
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Failed to open output file '%s' for writing\n"
argument_list|,
name|qPrintable
argument_list|(
name|QFileInfo
argument_list|(
name|file
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|QTextStream
name|out
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|generateDataFile
argument_list|(
name|out
argument_list|,
name|engine
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|generateData
name|QString
name|XMLGenerator
operator|::
name|generateData
parameter_list|()
specifier|const
block|{
name|QString
name|str
decl_stmt|;
foreach|foreach
control|(
name|XMLEngine
modifier|*
name|engine
decl|,
name|engines
control|)
block|{
name|QTextStream
name|out
argument_list|(
operator|&
name|str
argument_list|)
decl_stmt|;
name|generateDataFile
argument_list|(
name|out
argument_list|,
name|engine
argument_list|)
expr_stmt|;
block|}
return|return
name|str
return|;
block|}
end_function
begin_function
DECL|function|checkDirs
name|void
name|XMLGenerator
operator|::
name|checkDirs
parameter_list|(
specifier|const
name|QDateTime
modifier|&
name|currentDate
parameter_list|,
specifier|const
name|QString
modifier|&
name|engineDir
parameter_list|)
block|{
name|QDateTime
name|yesterday
init|=
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
decl_stmt|;
name|QDateTime
name|lastWeek
init|=
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
decl_stmt|;
name|yesterday
operator|=
name|yesterday
operator|.
name|addDays
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|lastWeek
operator|=
name|lastWeek
operator|.
name|addDays
argument_list|(
operator|-
literal|7
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentDate
operator|<=
name|yesterday
condition|)
block|{
name|QString
name|newDir
init|=
name|engineDir
operator|+
literal|".yesterday"
decl_stmt|;
if|if
condition|(
name|QFile
operator|::
name|exists
argument_list|(
name|engineDir
argument_list|)
condition|)
block|{
comment|//### handle last week
name|QString
name|oldFileName
init|=
name|QString
argument_list|(
literal|"%1/data.xml"
argument_list|)
operator|.
name|arg
argument_list|(
name|newDir
argument_list|)
decl_stmt|;
name|XMLReader
name|handler
decl_stmt|;
name|QXmlSimpleReader
name|reader
decl_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
operator|&
name|handler
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setErrorHandler
argument_list|(
operator|&
name|handler
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|oldFileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
operator||
name|QFile
operator|::
name|Text
argument_list|)
condition|)
block|{
name|QXmlInputSource
name|xmlInputSource
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|.
name|parse
argument_list|(
name|xmlInputSource
argument_list|)
condition|)
block|{
name|XMLEngine
modifier|*
name|engine
init|=
name|handler
operator|.
name|xmlEngine
argument_list|()
decl_stmt|;
if|if
condition|(
name|engine
operator|->
name|generationDate
operator|<=
name|lastWeek
condition|)
block|{
name|QString
name|newDir
init|=
name|engineDir
operator|+
literal|".lastweek"
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Backing last weeks's "
operator|<<
name|qPrintable
argument_list|(
name|engine
operator|->
name|name
argument_list|)
expr_stmt|;
name|QStringList
name|args
decl_stmt|;
name|args
operator|<<
literal|"-rf"
expr_stmt|;
name|args
operator|<<
name|engineDir
expr_stmt|;
name|args
operator|<<
name|newDir
expr_stmt|;
name|QProcess
operator|::
name|execute
argument_list|(
literal|"cp"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|qDebug
argument_list|()
operator|<<
literal|"Backing yesterday's "
operator|<<
name|engineDir
expr_stmt|;
name|QStringList
name|args
decl_stmt|;
name|args
operator|<<
literal|"-rf"
expr_stmt|;
name|args
operator|<<
name|engineDir
expr_stmt|;
name|args
operator|<<
name|newDir
expr_stmt|;
name|QProcess
operator|::
name|execute
argument_list|(
literal|"cp"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
end_function
end_unit
