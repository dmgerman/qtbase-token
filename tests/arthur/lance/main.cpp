begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"interactivewidget.h"
end_include
begin_include
include|#
directive|include
file|"widgets.h"
end_include
begin_include
include|#
directive|include
file|"paintcommands.h"
end_include
begin_include
include|#
directive|include
file|<QtCore>
end_include
begin_include
include|#
directive|include
file|<QtGui>
end_include
begin_include
include|#
directive|include
file|<qimage.h>
end_include
begin_include
include|#
directive|include
file|<QPicture>
end_include
begin_include
include|#
directive|include
file|<private/qmath_p.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|USE_CUSTOM_DEVICE
end_ifdef
begin_include
include|#
directive|include
file|"customdevice.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_OPENGL
end_ifndef
begin_include
include|#
directive|include
file|<qgl.h>
end_include
begin_include
include|#
directive|include
file|<QGLPixelBuffer>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// #define DO_QWS_DEBUGGING
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|DO_QWS_DEBUGGING
end_ifdef
begin_decl_stmt
DECL|variable|qt_show_painter_debug_output
specifier|extern
name|bool
name|qt_show_painter_debug_output
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//#define CONSOLE_APPLICATION
end_comment
begin_struct
specifier|static
specifier|const
struct|struct
block|{
DECL|member|name
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
DECL|member|format
name|QImage
operator|::
name|Format
name|format
decl_stmt|;
block|}
DECL|variable|imageFormats
name|imageFormats
index|[]
init|=
block|{
block|{
literal|"mono"
block|,
name|QImage
operator|::
name|Format_Mono
block|}
block|,
block|{
literal|"monolsb"
block|,
name|QImage
operator|::
name|Format_MonoLSB
block|}
block|,
block|{
literal|"indexed8"
block|,
name|QImage
operator|::
name|Format_Indexed8
block|}
block|,
block|{
literal|"rgb32"
block|,
name|QImage
operator|::
name|Format_RGB32
block|}
block|,
block|{
literal|"argb32"
block|,
name|QImage
operator|::
name|Format_ARGB32
block|}
block|,
block|{
literal|"argb32_premultiplied"
block|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
block|}
block|,
block|{
literal|"rgb16"
block|,
name|QImage
operator|::
name|Format_RGB16
block|}
block|,
block|{
literal|"argb8565_premultiplied"
block|,
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
block|}
block|,
block|{
literal|"rgb666"
block|,
name|QImage
operator|::
name|Format_RGB666
block|}
block|,
block|{
literal|"argb6666_premultiplied"
block|,
name|QImage
operator|::
name|Format_ARGB6666_Premultiplied
block|}
block|,
block|{
literal|"rgb555"
block|,
name|QImage
operator|::
name|Format_RGB555
block|}
block|,
block|{
literal|"argb8555_premultiplied"
block|,
name|QImage
operator|::
name|Format_ARGB8555_Premultiplied
block|}
block|,
block|{
literal|"rgb888"
block|,
name|QImage
operator|::
name|Format_RGB888
block|}
block|,
block|{
literal|"rgb444"
block|,
name|QImage
operator|::
name|Format_RGB444
block|}
block|,
block|{
literal|"argb4444_premultiplied"
block|,
name|QImage
operator|::
name|Format_ARGB4444_Premultiplied
block|}
block|}
struct|;
end_struct
begin_function
DECL|function|printHelp
specifier|static
name|void
name|printHelp
parameter_list|()
block|{
name|printf
argument_list|(
literal|"\nUsage:\n\n"
literal|"  paintcmd [options] files\n"
literal|"\n"
literal|"  Options:\n"
literal|"    -widget         Paints the files to a widget on screen\n"
literal|"    -pixmap         Paints the files to a pixmap\n"
literal|"    -bitmap         Paints the files to a bitmap\n"
literal|"    -image          Paints the files to an image\n"
literal|"    -imageformat    Set the format of the image when painting to an image\n"
literal|"    -imagemono      Paints the files to a monochrome image\n"
literal|"    -imagewidget    same as image, but with interacion...\n"
ifndef|#
directive|ifndef
name|QT_NO_OPENGL
literal|"    -opengl         Paints the files to an OpenGL on screen\n"
endif|#
directive|endif
ifdef|#
directive|ifdef
name|USE_CUSTOM_DEVICE
literal|"    -customdevice   Paints the files to the custom paint device\n"
literal|"    -customwidget   Paints the files to a custom widget on screen\n"
endif|#
directive|endif
literal|"    -pdf            Paints to a pdf\n"
literal|"    -ps             Paints to a ps\n"
literal|"    -picture        Prints into a picture, then shows the result in a label\n"
literal|"    -printer        Prints the commands to a file called output.ps|pdf\n"
literal|"    -highres        Prints in highres mode\n"
literal|"    -printdialog    Opens a print dialog, then prints to the selected printer\n"
literal|"    -grab           Paints the files to an image called filename_qps.png\n"
literal|"    -i              Interactive mode.\n"
literal|"    -v              Verbose.\n"
literal|"    -bg-white       No checkers background\n"
literal|"    -commands       Displays all available commands\n"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|displayCommands
specifier|static
name|void
name|displayCommands
parameter_list|()
block|{
name|printf
argument_list|(
literal|"Drawing operations:\n"
literal|"  drawArc x y width height angle sweep\n"
literal|"  drawChord x y width height angle sweep\n"
literal|"  drawEllipse x y width height\n"
literal|"  drawLine x1 y1 x2 y2\n"
literal|"  drawPath pathname\n"
literal|"  drawPie x y width height angle sweep\n"
literal|"  drawPixmap pixmapfile x y width height sx sy sw sh\n"
literal|"  drawPolygon [ x1 y1 x2 y2 ... ] winding|oddeven\n"
literal|"  drawPolyline [ x1 y1 x2 y2 ... ]\n"
literal|"  drawRect x y width height\n"
literal|"  drawRoundRect x y width height xfactor yfactor\n"
literal|"  drawText x y \"text\"\n"
literal|"  drawTiledPixmap pixmapfile x y width height sx sy\n"
literal|"\n"
literal|"Compat functions for Qt 3:\n"
literal|"  qt3_drawArc x y width height angle sweep\n"
literal|"  qt3_drawChord x y width height angle sweep\n"
literal|"  qt3_drawEllipse x y width height\n"
literal|"  qt3_drawPie x y width height angle sweep\n"
literal|"  qt3_drawRect x y width height\n"
literal|"  qt3_drawRoundRect x y width height xfactor yfactor\n"
literal|"\n"
literal|"Path commands:\n"
literal|"  path_addEllipse pathname x y width height\n"
literal|"  path_addPolygon pathname [ x1 y1 x2 y2 ... ] winding?\n"
literal|"  path_addRect pathname x y width height\n"
literal|"  path_addText pathname x y \"text\"                        Uses current font\n"
literal|"  path_arcTo pathname x y width hegiht\n"
literal|"  path_closeSubpath pathname\n"
literal|"  path_createOutline pathname newoutlinename                Uses current pen\n"
literal|"  path_cubicTo pathname c1x c1y c2x c2y endx endy\n"
literal|"  path_lineTo pathname x y\n"
literal|"  path_moveTo pathname x y\n"
literal|"  path_setFillRule pathname winding?\n"
literal|"\n"
literal|"Painter configuration:\n"
literal|"  resetMatrix\n"
literal|"  restore\n"
literal|"  save\n"
literal|"  rotate degrees\n"
literal|"  translate dx dy\n"
literal|"  scale sx sy\n"
literal|"  mapQuadToQuad x0 y0 x1 y1 x2 y2 x3 y3  x4 y4 x5 y5 x6 y6 x7 y7"
literal|"  setMatrix m11 m12 m13 m21 m22 m23 m31 m32 m33"
literal|"  setBackground color pattern?\n"
literal|"  setBackgroundMode TransparentMode|OpaqueMode\n"
literal|"  setBrush pixmapfile\n"
literal|"  setBrush nobrush\n"
literal|"  setBrush color pattern\n"
literal|"  setBrush x1 y1 color1 x2 y2 color2                        gradient brush\n"
literal|"  setBrushOrigin x y\n"
literal|"  setFont \"fontname\" pointsize bold? italic?\n"
literal|"  setPen style color\n"
literal|"  setPen color width style capstyle joinstyle\n"
literal|"  setRenderHint LineAntialiasing\n"
literal|"  gradient_clearStops\n"
literal|"  gradient_appendStop pos color"
literal|"  gradient_setSpread [PadSpread|ReflectSpread|RepeatSpread]\n"
literal|"  gradient_setLinear x1 y1 x2 y2\n"
literal|"  gradient_setRadial center_x center_y radius focal_x focal_y\n"
literal|"  gradient_setConical center_x center_y angle\n"
literal|"\n"
literal|"Clipping commands:\n"
literal|"  region_addRect regionname x y width height\n"
literal|"  region_getClipRegion regionname\n"
literal|"  setClipRect x y width height\n"
literal|"  setClipRegion regionname\n"
literal|"  setClipping true|false\n"
literal|"  setClipPath pathname\n"
literal|"\n"
literal|"Various commands:\n"
literal|"  surface_begin x y width height\n"
literal|"  surface_end\n"
literal|"  pixmap_load filename name_in_script\n"
literal|"  image_load filename name_in_script\n"
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|interactive_widget
specifier|static
name|InteractiveWidget
modifier|*
name|interactive_widget
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|runInteractive
specifier|static
name|void
name|runInteractive
parameter_list|()
block|{
name|interactive_widget
operator|=
operator|new
name|InteractiveWidget
expr_stmt|;
name|interactive_widget
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createLabel
specifier|static
name|QLabel
modifier|*
name|createLabel
parameter_list|()
block|{
name|QLabel
modifier|*
name|label
init|=
operator|new
name|QLabel
decl_stmt|;
name|QPalette
name|palette
init|=
name|label
operator|->
name|palette
argument_list|()
decl_stmt|;
name|palette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|,
name|QBrush
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
argument_list|)
expr_stmt|;
name|label
operator|->
name|setPalette
argument_list|(
name|palette
argument_list|)
expr_stmt|;
return|return
name|label
return|;
block|}
end_function
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|CONSOLE_APPLICATION
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|,
name|QApplication
operator|::
name|Tty
argument_list|)
decl_stmt|;
else|#
directive|else
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|DO_QWS_DEBUGGING
name|qt_show_painter_debug_output
operator|=
literal|false
expr_stmt|;
endif|#
directive|endif
name|DeviceType
name|type
init|=
name|WidgetType
decl_stmt|;
name|bool
name|checkers_background
init|=
literal|true
decl_stmt|;
name|QImage
operator|::
name|Format
name|imageFormat
init|=
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
decl_stmt|;
name|QLocale
operator|::
name|setDefault
argument_list|(
name|QLocale
operator|::
name|c
argument_list|()
argument_list|)
expr_stmt|;
name|QStringList
name|files
decl_stmt|;
name|bool
name|interactive
init|=
literal|false
decl_stmt|;
name|bool
name|printdlg
init|=
literal|false
decl_stmt|;
name|bool
name|highres
init|=
literal|false
decl_stmt|;
name|bool
name|show_cmp
init|=
literal|false
decl_stmt|;
name|int
name|width
init|=
literal|800
decl_stmt|,
name|height
init|=
literal|800
decl_stmt|;
name|bool
name|verboseMode
init|=
literal|false
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_OPENGL
name|QGLFormat
name|f
init|=
name|QGLFormat
operator|::
name|defaultFormat
argument_list|()
decl_stmt|;
name|f
operator|.
name|setSampleBuffers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|setStencil
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|setAlpha
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|setAlphaBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|QGLFormat
operator|::
name|setDefaultFormat
argument_list|(
name|f
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|char
modifier|*
name|arg
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|argc
condition|;
operator|++
name|i
control|)
block|{
name|arg
operator|=
name|argv
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
operator|*
name|arg
operator|==
literal|'-'
condition|)
block|{
name|QString
name|option
init|=
name|QString
argument_list|(
name|arg
operator|+
literal|1
argument_list|)
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|option
operator|==
literal|"widget"
condition|)
name|type
operator|=
name|WidgetType
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|==
literal|"bitmap"
condition|)
name|type
operator|=
name|BitmapType
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|==
literal|"pixmap"
condition|)
name|type
operator|=
name|PixmapType
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|==
literal|"image"
condition|)
name|type
operator|=
name|ImageType
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|==
literal|"imageformat"
condition|)
block|{
name|Q_ASSERT_X
argument_list|(
name|i
operator|+
literal|1
operator|<
name|argc
argument_list|,
literal|"main"
argument_list|,
literal|"-imageformat must be followed by a value"
argument_list|)
expr_stmt|;
name|QString
name|format
init|=
name|QString
argument_list|(
name|argv
index|[
operator|++
name|i
index|]
argument_list|)
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|imageFormat
operator|=
name|QImage
operator|::
name|Format_Invalid
expr_stmt|;
specifier|static
specifier|const
name|int
name|formatCount
init|=
sizeof|sizeof
argument_list|(
name|imageFormats
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|imageFormats
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|ff
init|=
literal|0
init|;
name|ff
operator|<
name|formatCount
condition|;
operator|++
name|ff
control|)
block|{
if|if
condition|(
name|QLatin1String
argument_list|(
name|imageFormats
index|[
name|ff
index|]
operator|.
name|name
argument_list|)
operator|==
name|format
condition|)
block|{
name|imageFormat
operator|=
name|imageFormats
index|[
name|ff
index|]
operator|.
name|format
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|imageFormat
operator|==
name|QImage
operator|::
name|Format_Invalid
condition|)
block|{
name|printf
argument_list|(
literal|"Invalid image format.  Available formats are:\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|ff
init|=
literal|0
init|;
name|ff
operator|<
name|formatCount
condition|;
operator|++
name|ff
control|)
name|printf
argument_list|(
literal|"\t%s\n"
argument_list|,
name|imageFormats
index|[
name|ff
index|]
operator|.
name|name
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|option
operator|==
literal|"imagemono"
condition|)
name|type
operator|=
name|ImageMonoType
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|==
literal|"imagewidget"
condition|)
name|type
operator|=
name|ImageWidgetType
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_OPENGL
elseif|else
if|if
condition|(
name|option
operator|==
literal|"opengl"
condition|)
name|type
operator|=
name|OpenGLType
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|==
literal|"pbuffer"
condition|)
name|type
operator|=
name|OpenGLPBufferType
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|USE_CUSTOM_DEVICE
elseif|else
if|if
condition|(
name|option
operator|==
literal|"customdevice"
condition|)
name|type
operator|=
name|CustomDeviceType
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|==
literal|"customwidget"
condition|)
name|type
operator|=
name|CustomWidgetType
expr_stmt|;
endif|#
directive|endif
elseif|else
if|if
condition|(
name|option
operator|==
literal|"pdf"
condition|)
name|type
operator|=
name|PdfType
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|==
literal|"ps"
condition|)
name|type
operator|=
name|PsType
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|==
literal|"picture"
condition|)
name|type
operator|=
name|PictureType
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|==
literal|"printer"
condition|)
name|type
operator|=
name|PrinterType
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|==
literal|"highres"
condition|)
block|{
name|type
operator|=
name|PrinterType
expr_stmt|;
name|highres
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|option
operator|==
literal|"printdialog"
condition|)
block|{
name|type
operator|=
name|PrinterType
expr_stmt|;
name|printdlg
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|option
operator|==
literal|"grab"
condition|)
name|type
operator|=
name|GrabType
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|==
literal|"i"
condition|)
name|interactive
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|==
literal|"v"
condition|)
name|verboseMode
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|==
literal|"commands"
condition|)
block|{
name|displayCommands
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|option
operator|==
literal|"w"
condition|)
block|{
name|Q_ASSERT_X
argument_list|(
name|i
operator|+
literal|1
operator|<
name|argc
argument_list|,
literal|"main"
argument_list|,
literal|"-w must be followed by a value"
argument_list|)
expr_stmt|;
name|width
operator|=
name|atoi
argument_list|(
name|argv
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|option
operator|==
literal|"h"
condition|)
block|{
name|Q_ASSERT_X
argument_list|(
name|i
operator|+
literal|1
operator|<
name|argc
argument_list|,
literal|"main"
argument_list|,
literal|"-h must be followed by a value"
argument_list|)
expr_stmt|;
name|height
operator|=
name|atoi
argument_list|(
name|argv
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|option
operator|==
literal|"cmp"
condition|)
block|{
name|show_cmp
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|option
operator|==
literal|"bg-white"
condition|)
block|{
name|checkers_background
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
name|QString
name|input
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|input
operator|.
name|indexOf
argument_list|(
literal|'*'
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|QFileInfo
name|info
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|QDir
name|dir
init|=
name|info
operator|.
name|dir
argument_list|()
decl_stmt|;
name|QFileInfoList
name|infos
init|=
name|dir
operator|.
name|entryInfoList
argument_list|(
name|QStringList
argument_list|(
name|info
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|infos
operator|.
name|size
argument_list|()
condition|;
operator|++
name|ii
control|)
name|files
operator|.
name|append
argument_list|(
name|infos
operator|.
name|at
argument_list|(
name|ii
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|files
operator|.
name|append
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
name|files
operator|.
name|append
argument_list|(
name|QString
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
name|PaintCommands
name|pcmd
argument_list|(
name|QStringList
argument_list|()
argument_list|,
literal|800
argument_list|,
literal|800
argument_list|)
decl_stmt|;
name|pcmd
operator|.
name|setVerboseMode
argument_list|(
name|verboseMode
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|setCheckersBackground
argument_list|(
name|checkers_background
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|activeWidget
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|interactive
condition|)
block|{
name|runInteractive
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
name|interactive_widget
operator|->
name|load
argument_list|(
name|files
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|printHelp
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
else|else
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|files
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
specifier|const
name|QString
modifier|&
name|fileName
init|=
name|files
operator|.
name|at
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|QStringList
name|content
decl_stmt|;
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QFileInfo
name|fileinfo
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|QTextStream
name|textFile
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|QString
name|script
init|=
name|textFile
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|content
operator|=
name|script
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printf
argument_list|(
literal|"failed to read file: '%s'\n"
argument_list|,
name|qPrintable
argument_list|(
name|fileinfo
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|pcmd
operator|.
name|setContents
argument_list|(
name|content
argument_list|)
expr_stmt|;
if|if
condition|(
name|show_cmp
condition|)
block|{
name|QString
name|pmFile
init|=
name|QString
argument_list|(
name|files
operator|.
name|at
argument_list|(
name|j
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|".qps"
argument_list|,
literal|"_qps"
argument_list|)
operator|+
literal|".png"
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
name|pmFile
operator|<<
name|QFileInfo
argument_list|(
name|pmFile
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
name|QPixmap
name|pixmap
argument_list|(
name|pmFile
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pixmap
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QLabel
modifier|*
name|label
init|=
name|createLabel
argument_list|()
decl_stmt|;
name|label
operator|->
name|setWindowTitle
argument_list|(
literal|"VERIFY: "
operator|+
name|pmFile
argument_list|)
expr_stmt|;
name|label
operator|->
name|setPixmap
argument_list|(
name|pixmap
argument_list|)
expr_stmt|;
name|label
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|WidgetType
case|:
block|{
name|OnScreenWidget
argument_list|<
name|QWidget
argument_list|>
modifier|*
name|qWidget
init|=
operator|new
name|OnScreenWidget
argument_list|<
name|QWidget
argument_list|>
argument_list|(
name|files
operator|.
name|at
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|qWidget
operator|->
name|setVerboseMode
argument_list|(
name|verboseMode
argument_list|)
expr_stmt|;
name|qWidget
operator|->
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|qWidget
operator|->
name|setCheckersBackground
argument_list|(
name|checkers_background
argument_list|)
expr_stmt|;
name|qWidget
operator|->
name|m_commands
operator|=
name|content
expr_stmt|;
name|qWidget
operator|->
name|resize
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|qWidget
operator|->
name|show
argument_list|()
expr_stmt|;
name|activeWidget
operator|=
name|qWidget
expr_stmt|;
break|break;
block|}
case|case
name|ImageWidgetType
case|:
block|{
name|OnScreenWidget
argument_list|<
name|QWidget
argument_list|>
modifier|*
name|qWidget
init|=
operator|new
name|OnScreenWidget
argument_list|<
name|QWidget
argument_list|>
argument_list|(
name|files
operator|.
name|at
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|qWidget
operator|->
name|setVerboseMode
argument_list|(
name|verboseMode
argument_list|)
expr_stmt|;
name|qWidget
operator|->
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|qWidget
operator|->
name|setCheckersBackground
argument_list|(
name|checkers_background
argument_list|)
expr_stmt|;
name|qWidget
operator|->
name|m_commands
operator|=
name|content
expr_stmt|;
name|qWidget
operator|->
name|resize
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|qWidget
operator|->
name|show
argument_list|()
expr_stmt|;
name|activeWidget
operator|=
name|qWidget
expr_stmt|;
break|break;
block|}
ifndef|#
directive|ifndef
name|QT_NO_OPENGL
case|case
name|OpenGLPBufferType
case|:
block|{
name|QGLPixelBuffer
name|pbuffer
argument_list|(
name|QSize
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
argument_list|)
decl_stmt|;
name|QPainter
name|pt
argument_list|(
operator|&
name|pbuffer
argument_list|)
decl_stmt|;
name|pcmd
operator|.
name|setPainter
argument_list|(
operator|&
name|pt
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|setFilePath
argument_list|(
name|fileinfo
operator|.
name|absolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|runCommands
argument_list|()
expr_stmt|;
name|pt
operator|.
name|end
argument_list|()
expr_stmt|;
name|QImage
name|image
init|=
name|pbuffer
operator|.
name|toImage
argument_list|()
decl_stmt|;
name|QLabel
modifier|*
name|label
init|=
name|createLabel
argument_list|()
decl_stmt|;
name|label
operator|->
name|setPixmap
argument_list|(
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|image
argument_list|)
argument_list|)
expr_stmt|;
name|label
operator|->
name|resize
argument_list|(
name|label
operator|->
name|sizeHint
argument_list|()
argument_list|)
expr_stmt|;
name|label
operator|->
name|show
argument_list|()
expr_stmt|;
name|activeWidget
operator|=
name|label
expr_stmt|;
break|break;
block|}
case|case
name|OpenGLType
case|:
block|{
name|OnScreenWidget
argument_list|<
name|QGLWidget
argument_list|>
modifier|*
name|qGLWidget
init|=
operator|new
name|OnScreenWidget
argument_list|<
name|QGLWidget
argument_list|>
argument_list|(
name|files
operator|.
name|at
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|qGLWidget
operator|->
name|setVerboseMode
argument_list|(
name|verboseMode
argument_list|)
expr_stmt|;
name|qGLWidget
operator|->
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|qGLWidget
operator|->
name|setCheckersBackground
argument_list|(
name|checkers_background
argument_list|)
expr_stmt|;
name|qGLWidget
operator|->
name|m_commands
operator|=
name|content
expr_stmt|;
name|qGLWidget
operator|->
name|resize
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|qGLWidget
operator|->
name|show
argument_list|()
expr_stmt|;
name|activeWidget
operator|=
name|qGLWidget
expr_stmt|;
break|break;
block|}
else|#
directive|else
case|case
name|OpenGLType
case|:
name|printf
argument_list|(
literal|"OpenGL type not supported in this Qt build\n"
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|USE_CUSTOM_DEVICE
case|case
name|CustomDeviceType
case|:
block|{
name|CustomPaintDevice
name|custom
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
decl_stmt|;
name|QPainter
name|pt
decl_stmt|;
name|pt
operator|.
name|begin
argument_list|(
operator|&
name|custom
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|setPainter
argument_list|(
operator|&
name|pt
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|setFilePath
argument_list|(
name|fileinfo
operator|.
name|absolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|runCommands
argument_list|()
expr_stmt|;
name|pt
operator|.
name|end
argument_list|()
expr_stmt|;
name|QImage
modifier|*
name|img
init|=
name|custom
operator|.
name|image
argument_list|()
decl_stmt|;
if|if
condition|(
name|img
condition|)
block|{
name|QLabel
modifier|*
name|label
init|=
name|createLabel
argument_list|()
decl_stmt|;
name|label
operator|->
name|setPixmap
argument_list|(
name|QPixmap
operator|::
name|fromImage
argument_list|(
operator|*
name|img
argument_list|)
argument_list|)
expr_stmt|;
name|label
operator|->
name|resize
argument_list|(
name|label
operator|->
name|sizeHint
argument_list|()
argument_list|)
expr_stmt|;
name|label
operator|->
name|show
argument_list|()
expr_stmt|;
name|activeWidget
operator|=
name|label
expr_stmt|;
name|img
operator|->
name|save
argument_list|(
literal|"custom_output_pixmap.png"
argument_list|,
literal|"PNG"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|custom
operator|.
name|save
argument_list|(
literal|"custom_output_pixmap.png"
argument_list|,
literal|"PNG"
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|CustomWidgetType
case|:
block|{
name|OnScreenWidget
argument_list|<
name|CustomWidget
argument_list|>
modifier|*
name|cWidget
init|=
operator|new
name|OnScreenWidget
argument_list|<
name|CustomWidget
argument_list|>
decl_stmt|;
name|cWidget
operator|->
name|setVerboseMode
argument_list|(
name|verboseMode
argument_list|)
expr_stmt|;
name|cWidget
operator|->
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|cWidget
operator|->
name|setCheckersBackground
argument_list|(
name|checkers_background
argument_list|)
expr_stmt|;
name|cWidget
operator|->
name|m_filename
operator|=
name|files
operator|.
name|at
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|cWidget
operator|->
name|setWindowTitle
argument_list|(
name|fileinfo
operator|.
name|filePath
argument_list|()
argument_list|)
expr_stmt|;
name|cWidget
operator|->
name|m_commands
operator|=
name|content
expr_stmt|;
name|cWidget
operator|->
name|resize
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|cWidget
operator|->
name|show
argument_list|()
expr_stmt|;
name|activeWidget
operator|=
name|cWidget
expr_stmt|;
break|break;
block|}
endif|#
directive|endif
case|case
name|PixmapType
case|:
block|{
name|QPixmap
name|pixmap
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
decl_stmt|;
name|pixmap
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|QPainter
name|pt
argument_list|(
operator|&
name|pixmap
argument_list|)
decl_stmt|;
name|pcmd
operator|.
name|setPainter
argument_list|(
operator|&
name|pt
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|setFilePath
argument_list|(
name|fileinfo
operator|.
name|absolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|runCommands
argument_list|()
expr_stmt|;
name|pt
operator|.
name|end
argument_list|()
expr_stmt|;
name|pixmap
operator|.
name|save
argument_list|(
literal|"output_pixmap.png"
argument_list|,
literal|"PNG"
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|BitmapType
case|:
block|{
name|QBitmap
name|bitmap
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
decl_stmt|;
name|QPainter
name|pt
argument_list|(
operator|&
name|bitmap
argument_list|)
decl_stmt|;
name|pcmd
operator|.
name|setPainter
argument_list|(
operator|&
name|pt
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|setFilePath
argument_list|(
name|fileinfo
operator|.
name|absolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|runCommands
argument_list|()
expr_stmt|;
name|pt
operator|.
name|end
argument_list|()
expr_stmt|;
name|bitmap
operator|.
name|save
argument_list|(
literal|"output_bitmap.png"
argument_list|,
literal|"PNG"
argument_list|)
expr_stmt|;
name|QLabel
modifier|*
name|label
init|=
name|createLabel
argument_list|()
decl_stmt|;
name|label
operator|->
name|setPixmap
argument_list|(
name|bitmap
argument_list|)
expr_stmt|;
name|label
operator|->
name|resize
argument_list|(
name|label
operator|->
name|sizeHint
argument_list|()
argument_list|)
expr_stmt|;
name|label
operator|->
name|show
argument_list|()
expr_stmt|;
name|activeWidget
operator|=
name|label
expr_stmt|;
break|break;
block|}
case|case
name|ImageMonoType
case|:
case|case
name|ImageType
case|:
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Creating image"
expr_stmt|;
name|QImage
name|image
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|type
operator|==
name|ImageMonoType
condition|?
name|QImage
operator|::
name|Format_MonoLSB
else|:
name|imageFormat
argument_list|)
decl_stmt|;
name|image
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QPainter
name|pt
argument_list|(
operator|&
name|image
argument_list|)
decl_stmt|;
name|pcmd
operator|.
name|setPainter
argument_list|(
operator|&
name|pt
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|setFilePath
argument_list|(
name|fileinfo
operator|.
name|absolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|runCommands
argument_list|()
expr_stmt|;
name|pt
operator|.
name|end
argument_list|()
expr_stmt|;
name|image
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
operator|.
name|save
argument_list|(
literal|"output_image.png"
argument_list|,
literal|"PNG"
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|CONSOLE_APPLICATION
name|QLabel
modifier|*
name|label
init|=
name|createLabel
argument_list|()
decl_stmt|;
name|label
operator|->
name|setPixmap
argument_list|(
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|image
argument_list|)
argument_list|)
expr_stmt|;
name|label
operator|->
name|resize
argument_list|(
name|label
operator|->
name|sizeHint
argument_list|()
argument_list|)
expr_stmt|;
name|label
operator|->
name|show
argument_list|()
expr_stmt|;
name|activeWidget
operator|=
name|label
expr_stmt|;
endif|#
directive|endif
break|break;
block|}
case|case
name|PictureType
case|:
block|{
name|QPicture
name|pic
decl_stmt|;
name|QPainter
name|pt
argument_list|(
operator|&
name|pic
argument_list|)
decl_stmt|;
name|pcmd
operator|.
name|setPainter
argument_list|(
operator|&
name|pt
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|setFilePath
argument_list|(
name|fileinfo
operator|.
name|absolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|runCommands
argument_list|()
expr_stmt|;
name|pt
operator|.
name|end
argument_list|()
expr_stmt|;
name|QImage
name|image
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|image
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|pt
operator|.
name|begin
argument_list|(
operator|&
name|image
argument_list|)
expr_stmt|;
name|pt
operator|.
name|drawPicture
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|pic
argument_list|)
expr_stmt|;
name|pt
operator|.
name|end
argument_list|()
expr_stmt|;
name|QLabel
modifier|*
name|label
init|=
name|createLabel
argument_list|()
decl_stmt|;
name|label
operator|->
name|setWindowTitle
argument_list|(
name|fileinfo
operator|.
name|absolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|label
operator|->
name|setPixmap
argument_list|(
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|image
argument_list|)
argument_list|)
expr_stmt|;
name|label
operator|->
name|resize
argument_list|(
name|label
operator|->
name|sizeHint
argument_list|()
argument_list|)
expr_stmt|;
name|label
operator|->
name|show
argument_list|()
expr_stmt|;
name|activeWidget
operator|=
name|label
expr_stmt|;
break|break;
block|}
case|case
name|PrinterType
case|:
block|{
ifndef|#
directive|ifndef
name|QT_NO_PRINTER
name|PaintCommands
name|pcmd
argument_list|(
name|QStringList
argument_list|()
argument_list|,
literal|800
argument_list|,
literal|800
argument_list|)
decl_stmt|;
name|pcmd
operator|.
name|setVerboseMode
argument_list|(
name|verboseMode
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|setCheckersBackground
argument_list|(
name|checkers_background
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|setContents
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|QString
name|file
init|=
name|QString
argument_list|(
name|files
operator|.
name|at
argument_list|(
name|j
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"."
argument_list|,
literal|"_"
argument_list|)
operator|+
literal|".ps"
decl_stmt|;
name|QPrinter
name|p
argument_list|(
name|highres
condition|?
name|QPrinter
operator|::
name|HighResolution
else|:
name|QPrinter
operator|::
name|ScreenResolution
argument_list|)
decl_stmt|;
if|if
condition|(
name|printdlg
condition|)
block|{
name|QPrintDialog
name|printDialog
argument_list|(
operator|&
name|p
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|printDialog
operator|.
name|exec
argument_list|()
operator|!=
name|QDialog
operator|::
name|Accepted
condition|)
break|break;
block|}
else|else
block|{
name|p
operator|.
name|setOutputFileName
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|QPainter
name|pt
argument_list|(
operator|&
name|p
argument_list|)
decl_stmt|;
name|pcmd
operator|.
name|setPainter
argument_list|(
operator|&
name|pt
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|setFilePath
argument_list|(
name|fileinfo
operator|.
name|absolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|runCommands
argument_list|()
expr_stmt|;
name|pt
operator|.
name|end
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|printdlg
condition|)
block|{
name|printf
argument_list|(
literal|"wrote file: %s\n"
argument_list|,
name|qPrintable
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
operator|!
name|p
operator|.
name|paintingActive
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
break|break;
block|}
case|case
name|PsType
case|:
case|case
name|PdfType
case|:
block|{
ifndef|#
directive|ifndef
name|QT_NO_PRINTER
name|PaintCommands
name|pcmd
argument_list|(
name|QStringList
argument_list|()
argument_list|,
literal|800
argument_list|,
literal|800
argument_list|)
decl_stmt|;
name|pcmd
operator|.
name|setVerboseMode
argument_list|(
name|verboseMode
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|setCheckersBackground
argument_list|(
name|checkers_background
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|setContents
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|bool
name|ps
init|=
name|type
operator|==
name|PsType
decl_stmt|;
name|QPrinter
name|p
argument_list|(
name|highres
condition|?
name|QPrinter
operator|::
name|HighResolution
else|:
name|QPrinter
operator|::
name|ScreenResolution
argument_list|)
decl_stmt|;
name|QFileInfo
name|input
argument_list|(
name|files
operator|.
name|at
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|file
init|=
name|QString
argument_list|(
literal|"%1_%2.%3"
argument_list|)
operator|.
name|arg
argument_list|(
name|input
operator|.
name|baseName
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|input
operator|.
name|suffix
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|ps
condition|?
literal|"ps"
else|:
literal|"pdf"
argument_list|)
decl_stmt|;
name|p
operator|.
name|setOutputFormat
argument_list|(
name|ps
condition|?
name|QPrinter
operator|::
name|PdfFormat
else|:
name|QPrinter
operator|::
name|PostScriptFormat
argument_list|)
expr_stmt|;
name|p
operator|.
name|setOutputFileName
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPageSize
argument_list|(
name|QPrinter
operator|::
name|A4
argument_list|)
expr_stmt|;
name|QPainter
name|pt
argument_list|(
operator|&
name|p
argument_list|)
decl_stmt|;
name|pcmd
operator|.
name|setPainter
argument_list|(
operator|&
name|pt
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|setFilePath
argument_list|(
name|fileinfo
operator|.
name|absolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|runCommands
argument_list|()
expr_stmt|;
name|pt
operator|.
name|end
argument_list|()
expr_stmt|;
name|printf
argument_list|(
literal|"write file: %s\n"
argument_list|,
name|qPrintable
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
break|break;
block|}
case|case
name|GrabType
case|:
block|{
name|QImage
name|image
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|image
operator|.
name|fill
argument_list|(
name|QColor
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QPainter
name|pt
argument_list|(
operator|&
name|image
argument_list|)
decl_stmt|;
name|pcmd
operator|.
name|setPainter
argument_list|(
operator|&
name|pt
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|setFilePath
argument_list|(
name|fileinfo
operator|.
name|absolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|runCommands
argument_list|()
expr_stmt|;
name|pt
operator|.
name|end
argument_list|()
expr_stmt|;
name|QImage
name|image1
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|image1
operator|.
name|fill
argument_list|(
name|QColor
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QPainter
name|pt1
argument_list|(
operator|&
name|image1
argument_list|)
decl_stmt|;
name|pt1
operator|.
name|drawImage
argument_list|(
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|image
argument_list|)
expr_stmt|;
name|pt1
operator|.
name|end
argument_list|()
expr_stmt|;
name|QString
name|filename
init|=
name|QString
argument_list|(
name|files
operator|.
name|at
argument_list|(
name|j
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|".qps"
argument_list|,
literal|"_qps"
argument_list|)
operator|+
literal|".png"
decl_stmt|;
name|image1
operator|.
name|save
argument_list|(
name|filename
argument_list|,
literal|"PNG"
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"%s grabbed to %s\n"
argument_list|,
name|qPrintable
argument_list|(
name|files
operator|.
name|at
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
break|break;
block|}
block|}
block|}
ifndef|#
directive|ifndef
name|CONSOLE_APPLICATION
if|if
condition|(
name|activeWidget
operator|||
name|interactive
condition|)
block|{
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|app
argument_list|,
name|SIGNAL
argument_list|(
name|lastWindowClosed
argument_list|()
argument_list|)
argument_list|,
operator|&
name|app
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|app
operator|.
name|exec
argument_list|()
expr_stmt|;
block|}
operator|delete
name|activeWidget
expr_stmt|;
endif|#
directive|endif
operator|delete
name|interactive_widget
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
end_unit
