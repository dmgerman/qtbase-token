begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QtDebug>
end_include
begin_include
include|#
directive|include
file|"shower.h"
end_include
begin_include
include|#
directive|include
file|"qengines.h"
end_include
begin_function
DECL|function|usage
specifier|static
name|void
name|usage
parameter_list|()
block|{
name|qDebug
argument_list|()
operator|<<
literal|"shower<-engine engineName> file"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QString
name|engine
init|=
literal|"Raster"
decl_stmt|;
name|QString
name|file
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|argc
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|opt
init|=
name|argv
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|opt
operator|==
literal|"-engine"
condition|)
block|{
operator|++
name|i
expr_stmt|;
name|engine
operator|=
name|QString
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|.
name|startsWith
argument_list|(
literal|'-'
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Unsupported option "
operator|<<
name|opt
expr_stmt|;
block|}
else|else
name|file
operator|=
name|QString
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|bool
name|engineExists
init|=
literal|false
decl_stmt|;
name|QStringList
name|engineNames
decl_stmt|;
foreach|foreach
control|(
name|QEngine
modifier|*
name|qengine
decl|,
name|QtEngines
operator|::
name|self
argument_list|()
operator|->
name|engines
argument_list|()
control|)
block|{
if|if
condition|(
name|qengine
operator|->
name|name
argument_list|()
operator|==
name|engine
condition|)
block|{
name|engineExists
operator|=
literal|true
expr_stmt|;
block|}
name|engineNames
operator|.
name|append
argument_list|(
name|qengine
operator|->
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|file
operator|.
name|isEmpty
argument_list|()
operator|||
name|engine
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|engineExists
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Engine "
operator|<<
name|engine
operator|<<
literal|" doesn't exist!\n"
operator|<<
literal|"Available engines: "
operator|<<
name|engineNames
expr_stmt|;
name|usage
argument_list|()
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Specified file "
operator|<<
name|file
operator|<<
literal|" doesn't exist!"
expr_stmt|;
return|return
literal|1
return|;
block|}
name|qDebug
argument_list|()
operator|<<
literal|"Using engine: "
operator|<<
name|engine
expr_stmt|;
name|Shower
name|shower
argument_list|(
name|file
argument_list|,
name|engine
argument_list|)
decl_stmt|;
name|shower
operator|.
name|show
argument_list|()
expr_stmt|;
return|return
name|app
operator|.
name|exec
argument_list|()
return|;
block|}
end_function
end_unit
