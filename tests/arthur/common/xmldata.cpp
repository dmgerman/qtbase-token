begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"xmldata.h"
end_include
begin_function
DECL|function|startElement
name|bool
name|XMLReader
operator|::
name|startElement
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QString
modifier|&
name|localName
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QXmlAttributes
modifier|&
name|attributes
parameter_list|)
block|{
if|if
condition|(
name|localName
operator|==
literal|"arthur"
condition|)
block|{
name|QString
name|engineName
init|=
name|attributes
operator|.
name|value
argument_list|(
literal|"engine"
argument_list|)
decl_stmt|;
name|QString
name|defaultStr
init|=
name|attributes
operator|.
name|value
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
name|QString
name|foreignStr
init|=
name|attributes
operator|.
name|value
argument_list|(
literal|"foreign"
argument_list|)
decl_stmt|;
name|QString
name|referenceStr
init|=
name|attributes
operator|.
name|value
argument_list|(
literal|"reference"
argument_list|)
decl_stmt|;
name|QString
name|genDate
init|=
name|attributes
operator|.
name|value
argument_list|(
literal|"generationDate"
argument_list|)
decl_stmt|;
name|engine
operator|=
operator|new
name|XMLEngine
argument_list|(
name|engineName
argument_list|,
name|defaultStr
operator|==
literal|"true"
argument_list|)
expr_stmt|;
name|engine
operator|->
name|foreignEngine
operator|=
operator|(
name|foreignStr
operator|==
literal|"true"
operator|)
expr_stmt|;
name|engine
operator|->
name|referenceEngine
operator|=
operator|(
name|referenceStr
operator|==
literal|"true"
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|genDate
operator|.
name|isEmpty
argument_list|()
condition|)
name|engine
operator|->
name|generationDate
operator|=
name|QDateTime
operator|::
name|fromString
argument_list|(
name|genDate
argument_list|)
expr_stmt|;
else|else
name|engine
operator|->
name|generationDate
operator|=
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|==
literal|"suite"
condition|)
block|{
name|QString
name|suiteName
init|=
name|attributes
operator|.
name|value
argument_list|(
literal|"dir"
argument_list|)
decl_stmt|;
name|suite
operator|=
operator|new
name|XMLSuite
argument_list|(
name|suiteName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|==
literal|"file"
condition|)
block|{
name|QString
name|testName
init|=
name|attributes
operator|.
name|value
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|QString
name|outputName
init|=
name|attributes
operator|.
name|value
argument_list|(
literal|"output"
argument_list|)
decl_stmt|;
name|file
operator|=
operator|new
name|XMLFile
argument_list|(
name|testName
argument_list|,
name|outputName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|==
literal|"data"
condition|)
block|{
name|QString
name|dateStr
init|=
name|attributes
operator|.
name|value
argument_list|(
literal|"date"
argument_list|)
decl_stmt|;
name|QString
name|timeStr
init|=
name|attributes
operator|.
name|value
argument_list|(
literal|"time_to_render"
argument_list|)
decl_stmt|;
name|QString
name|itrStr
init|=
name|attributes
operator|.
name|value
argument_list|(
literal|"iterations"
argument_list|)
decl_stmt|;
name|QString
name|detailsStr
init|=
name|attributes
operator|.
name|value
argument_list|(
literal|"details"
argument_list|)
decl_stmt|;
name|QString
name|maxElapsedStr
init|=
name|attributes
operator|.
name|value
argument_list|(
literal|"maxElapsed"
argument_list|)
decl_stmt|;
name|QString
name|minElapsedStr
init|=
name|attributes
operator|.
name|value
argument_list|(
literal|"minElapsed"
argument_list|)
decl_stmt|;
name|XMLData
name|data
argument_list|(
name|dateStr
argument_list|,
name|timeStr
operator|.
name|toInt
argument_list|()
argument_list|,
operator|(
operator|!
name|itrStr
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|itrStr
operator|.
name|toInt
argument_list|()
else|:
literal|1
argument_list|)
decl_stmt|;
name|data
operator|.
name|details
operator|=
name|detailsStr
expr_stmt|;
if|if
condition|(
name|maxElapsedStr
operator|.
name|isEmpty
argument_list|()
condition|)
name|data
operator|.
name|maxElapsed
operator|=
name|data
operator|.
name|timeToRender
expr_stmt|;
else|else
name|data
operator|.
name|maxElapsed
operator|=
name|maxElapsedStr
operator|.
name|toInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|minElapsedStr
operator|.
name|isEmpty
argument_list|()
condition|)
name|data
operator|.
name|minElapsed
operator|=
name|data
operator|.
name|timeToRender
expr_stmt|;
else|else
name|data
operator|.
name|minElapsed
operator|=
name|minElapsedStr
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|file
operator|->
name|data
operator|.
name|append
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Error while parsing element :"
operator|<<
name|localName
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|endElement
name|bool
name|XMLReader
operator|::
name|endElement
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QString
modifier|&
name|localName
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|)
block|{
if|if
condition|(
name|localName
operator|==
literal|"arthur"
condition|)
block|{
comment|//qDebug()<<"done";
block|}
elseif|else
if|if
condition|(
name|localName
operator|==
literal|"suite"
condition|)
block|{
name|engine
operator|->
name|suites
operator|.
name|insert
argument_list|(
name|suite
operator|->
name|name
argument_list|,
name|suite
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|==
literal|"file"
condition|)
block|{
name|suite
operator|->
name|files
operator|.
name|insert
argument_list|(
name|file
operator|->
name|name
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|fatalError
name|bool
name|XMLReader
operator|::
name|fatalError
parameter_list|(
specifier|const
name|QXmlParseException
modifier|&
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
end_function
end_unit
