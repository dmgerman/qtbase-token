begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"paintcommands.h"
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<qfileinfo.h>
end_include
begin_include
include|#
directive|include
file|<qpainter.h>
end_include
begin_include
include|#
directive|include
file|<qbitmap.h>
end_include
begin_include
include|#
directive|include
file|<qtextstream.h>
end_include
begin_include
include|#
directive|include
file|<qtextlayout.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT3_SUPPORT
end_ifdef
begin_include
include|#
directive|include
file|<q3painter.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_OPENGL
end_ifndef
begin_include
include|#
directive|include
file|<qglpixelbuffer.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/********************************************************************************* ** everything to populate static tables **********************************************************************************/
end_comment
begin_decl_stmt
DECL|member|brushStyleTable
specifier|const
name|char
modifier|*
name|PaintCommands
operator|::
name|brushStyleTable
index|[]
init|=
block|{
literal|"NoBrush"
block|,
literal|"SolidPattern"
block|,
literal|"Dense1Pattern"
block|,
literal|"Dense2Pattern"
block|,
literal|"Dense3Pattern"
block|,
literal|"Dense4Pattern"
block|,
literal|"Dense5Pattern"
block|,
literal|"Dense6Pattern"
block|,
literal|"Dense7Pattern"
block|,
literal|"HorPattern"
block|,
literal|"VerPattern"
block|,
literal|"CrossPattern"
block|,
literal|"BDiagPattern"
block|,
literal|"FDiagPattern"
block|,
literal|"DiagCrossPattern"
block|,
literal|"LinearGradientPattern"
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|penStyleTable
specifier|const
name|char
modifier|*
name|PaintCommands
operator|::
name|penStyleTable
index|[]
init|=
block|{
literal|"NoPen"
block|,
literal|"SolidLine"
block|,
literal|"DashLine"
block|,
literal|"DotLine"
block|,
literal|"DashDotLine"
block|,
literal|"DashDotDotLine"
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|fontWeightTable
specifier|const
name|char
modifier|*
name|PaintCommands
operator|::
name|fontWeightTable
index|[]
init|=
block|{
literal|"Light"
block|,
literal|"Normal"
block|,
literal|"DemiBold"
block|,
literal|"Bold"
block|,
literal|"Black"
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|fontHintingTable
specifier|const
name|char
modifier|*
name|PaintCommands
operator|::
name|fontHintingTable
index|[]
init|=
block|{
literal|"Default"
block|,
literal|"None"
block|,
literal|"Vertical"
block|,
literal|"Full"
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|clipOperationTable
specifier|const
name|char
modifier|*
name|PaintCommands
operator|::
name|clipOperationTable
index|[]
init|=
block|{
literal|"NoClip"
block|,
literal|"ReplaceClip"
block|,
literal|"IntersectClip"
block|,
literal|"UniteClip"
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|spreadMethodTable
specifier|const
name|char
modifier|*
name|PaintCommands
operator|::
name|spreadMethodTable
index|[]
init|=
block|{
literal|"PadSpread"
block|,
literal|"ReflectSpread"
block|,
literal|"RepeatSpread"
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|coordinateMethodTable
specifier|const
name|char
modifier|*
name|PaintCommands
operator|::
name|coordinateMethodTable
index|[]
init|=
block|{
literal|"LogicalMode"
block|,
literal|"StretchToDeviceMode"
block|,
literal|"ObjectBoundingMode"
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|sizeModeTable
specifier|const
name|char
modifier|*
name|PaintCommands
operator|::
name|sizeModeTable
index|[]
init|=
block|{
literal|"AbsoluteSize"
block|,
literal|"RelativeSize"
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|compositionModeTable
specifier|const
name|char
modifier|*
name|PaintCommands
operator|::
name|compositionModeTable
index|[]
init|=
block|{
literal|"SourceOver"
block|,
literal|"DestinationOver"
block|,
literal|"Clear"
block|,
literal|"Source"
block|,
literal|"Destination"
block|,
literal|"SourceIn"
block|,
literal|"DestinationIn"
block|,
literal|"SourceOut"
block|,
literal|"DestinationOut"
block|,
literal|"SourceAtop"
block|,
literal|"DestinationAtop"
block|,
literal|"Xor"
block|,
literal|"Plus"
block|,
literal|"Multiply"
block|,
literal|"Screen"
block|,
literal|"Overlay"
block|,
literal|"Darken"
block|,
literal|"Lighten"
block|,
literal|"ColorDodge"
block|,
literal|"ColorBurn"
block|,
literal|"HardLight"
block|,
literal|"SoftLight"
block|,
literal|"Difference"
block|,
literal|"Exclusion"
block|,
literal|"SourceOrDestination"
block|,
literal|"SourceAndDestination"
block|,
literal|"SourceXorDestination"
block|,
literal|"NotSourceAndNotDestination"
block|,
literal|"NotSourceOrNotDestination"
block|,
literal|"NotSourceXorDestination"
block|,
literal|"NotSource"
block|,
literal|"NotSourceAndDestination"
block|,
literal|"SourceAndNotDestination"
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|imageFormatTable
specifier|const
name|char
modifier|*
name|PaintCommands
operator|::
name|imageFormatTable
index|[]
init|=
block|{
literal|"Invalid"
block|,
literal|"Mono"
block|,
literal|"MonoLSB"
block|,
literal|"Indexed8"
block|,
literal|"RGB32"
block|,
literal|"ARGB32"
block|,
literal|"ARGB32_Premultiplied"
block|,
literal|"Format_RGB16"
block|,
literal|"Format_ARGB8565_Premultiplied"
block|,
literal|"Format_RGB666"
block|,
literal|"Format_ARGB6666_Premultiplied"
block|,
literal|"Format_RGB555"
block|,
literal|"Format_ARGB8555_Premultiplied"
block|,
literal|"Format_RGB888"
block|,
literal|"Format_RGB444"
block|,
literal|"Format_ARGB4444_Premultiplied"
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|translateEnum
name|int
name|PaintCommands
operator|::
name|translateEnum
parameter_list|(
specifier|const
name|char
modifier|*
name|table
index|[]
parameter_list|,
specifier|const
name|QString
modifier|&
name|pattern
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|QByteArray
name|p
init|=
name|pattern
operator|.
name|toLatin1
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|limit
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|p
operator|==
name|QByteArray
operator|::
name|fromRawData
argument_list|(
name|table
index|[
name|i
index|]
argument_list|,
name|qstrlen
argument_list|(
name|table
index|[
name|i
index|]
argument_list|)
argument_list|)
operator|.
name|toLower
argument_list|()
condition|)
return|return
name|i
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_decl_stmt
DECL|member|s_commandInfoTable
name|QList
argument_list|<
name|PaintCommands
operator|::
name|PaintCommandInfos
argument_list|>
name|PaintCommands
operator|::
name|s_commandInfoTable
init|=
name|QList
argument_list|<
name|PaintCommands
operator|::
name|PaintCommandInfos
argument_list|>
argument_list|()
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|s_enumsTable
name|QList
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
argument_list|>
name|PaintCommands
operator|::
name|s_enumsTable
init|=
name|QList
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|s_commandHash
name|QMultiHash
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
name|PaintCommands
operator|::
name|s_commandHash
decl_stmt|;
end_decl_stmt
begin_define
DECL|macro|DECL_PAINTCOMMAND
define|#
directive|define
name|DECL_PAINTCOMMAND
parameter_list|(
name|identifier
parameter_list|,
name|method
parameter_list|,
name|regexp
parameter_list|,
name|syntax
parameter_list|,
name|sample
parameter_list|)
define|\
value|s_commandInfoTable<< PaintCommandInfos(QLatin1String(identifier),&PaintCommands::method, QRegExp(regexp), \                                             QLatin1String(syntax), QLatin1String(sample) );
end_define
begin_define
DECL|macro|DECL_PAINTCOMMANDSECTION
define|#
directive|define
name|DECL_PAINTCOMMANDSECTION
parameter_list|(
name|title
parameter_list|)
define|\
value|s_commandInfoTable<< PaintCommandInfos(QLatin1String(title));
end_define
begin_define
DECL|macro|ADD_ENUMLIST
define|#
directive|define
name|ADD_ENUMLIST
parameter_list|(
name|listCaption
parameter_list|,
name|cStrArray
parameter_list|)
value|{ \         QStringList list; \         for (int i=0; i<int(sizeof(cStrArray)/sizeof(char*)); i++)      \         list<< cStrArray[i]; \         s_enumsTable<< qMakePair(QString(listCaption), list); \     }
end_define
begin_function
DECL|function|staticInit
name|void
name|PaintCommands
operator|::
name|staticInit
parameter_list|()
block|{
comment|// check if already done
if|if
condition|(
operator|!
name|s_commandInfoTable
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
comment|// populate the command list
name|DECL_PAINTCOMMANDSECTION
argument_list|(
literal|"misc"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"comment"
argument_list|,
name|command_comment
argument_list|,
literal|"^\\s*#"
argument_list|,
literal|"# this is some comments"
argument_list|,
literal|"# place your comments here"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"import"
argument_list|,
name|command_import
argument_list|,
literal|"^import\\s+\"(.*)\"$"
argument_list|,
literal|"import<qrcFilename>"
argument_list|,
literal|"import \"myfile.qrc\""
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"begin_block"
argument_list|,
name|command_begin_block
argument_list|,
literal|"^begin_block\\s+(\\w*)$"
argument_list|,
literal|"begin_block<blockName>"
argument_list|,
literal|"begin_block blockName"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"end_block"
argument_list|,
name|command_end_block
argument_list|,
literal|"^end_block$"
argument_list|,
literal|"end_block"
argument_list|,
literal|"end_block"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"repeat_block"
argument_list|,
name|command_repeat_block
argument_list|,
literal|"^repeat_block\\s+(\\w*)$"
argument_list|,
literal|"repeat_block<blockName>"
argument_list|,
literal|"repeat_block blockName"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"textlayout_draw"
argument_list|,
name|command_textlayout_draw
argument_list|,
literal|"^textlayout_draw\\s+\"(.*)\"\\s+([0-9.]*)$"
argument_list|,
literal|"textlayout_draw<text><width>"
argument_list|,
literal|"textlayout_draw \"your text\" 1.0"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"abort"
argument_list|,
name|command_abort
argument_list|,
literal|"^abort$"
argument_list|,
literal|"abort"
argument_list|,
literal|"abort"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"noop"
argument_list|,
name|command_noop
argument_list|,
literal|"^$"
argument_list|,
literal|"-"
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMANDSECTION
argument_list|(
literal|"setters"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"setBackgroundMode"
argument_list|,
name|command_setBgMode
argument_list|,
literal|"^(setBackgroundMode|setBgMode)\\s+(\\w*)$"
argument_list|,
literal|"setBackgroundMode<OpaqueMode|TransparentMode>"
argument_list|,
literal|"setBackgroundMode TransparentMode"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"setBackground"
argument_list|,
name|command_setBackground
argument_list|,
literal|"^setBackground\\s+#?(\\w*)\\s*(\\w*)?$"
argument_list|,
literal|"setBackground<color> [brush style enum]"
argument_list|,
literal|"setBackground black SolidPattern"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"setOpacity"
argument_list|,
name|command_setOpacity
argument_list|,
literal|"^setOpacity\\s+(-?\\d*\\.?\\d*)$"
argument_list|,
literal|"setOpacity<opacity>\n  - opacity is in [0,1]"
argument_list|,
literal|"setOpacity 1.0"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"path_setFillRule"
argument_list|,
name|command_path_setFillRule
argument_list|,
literal|"^path_setFillRule\\s+(\\w*)\\s+(\\w*)$"
argument_list|,
literal|"path_setFillRule<pathName> [Winding|OddEven]"
argument_list|,
literal|"path_setFillRule pathName Winding"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"setBrush"
argument_list|,
name|command_setBrush
argument_list|,
literal|"^setBrush\\s+(#?[\\w.:\\/]*)\\s*(\\w*)?$"
argument_list|,
literal|"setBrush<pixmapFileName>\nsetBrush noBrush\nsetBrush<color><brush style enum>"
argument_list|,
literal|"setBrush white SolidPattern"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"setBrushOrigin"
argument_list|,
name|command_setBrushOrigin
argument_list|,
literal|"^setBrushOrigin\\s*(-?\\w*)\\s+(-?\\w*)$"
argument_list|,
literal|"setBrushOrigin<dx><dy>"
argument_list|,
literal|"setBrushOrigin 0 0"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"brushTranslate"
argument_list|,
name|command_brushTranslate
argument_list|,
literal|"^brushTranslate\\s+(-?[\\w.]*)\\s+(-?[\\w.]*)$"
argument_list|,
literal|"brushTranslate<tx><ty>"
argument_list|,
literal|"brushTranslate 0.0 0.0"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"brushScale"
argument_list|,
name|command_brushScale
argument_list|,
literal|"^brushScale\\s+(-?[\\w.]*)\\s+(-?[\\w.]*)$"
argument_list|,
literal|"brushScale<kx><ky>"
argument_list|,
literal|"brushScale 0.0 0.0"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"brushRotate"
argument_list|,
name|command_brushRotate
argument_list|,
literal|"^brushRotate\\s+(-?[\\w.]*)$"
argument_list|,
literal|"brushRotate<angle>\n - angle in degrees"
argument_list|,
literal|"brushRotate 0.0"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"brushShear"
argument_list|,
name|command_brushShear
argument_list|,
literal|"^brushShear\\s+(-?[\\w.]*)\\s+(-?[\\w.]*)$"
argument_list|,
literal|"brushShear<sx><sy>"
argument_list|,
literal|"brushShear 0.0 0.0"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"setCompositionMode"
argument_list|,
name|command_setCompositionMode
argument_list|,
literal|"^setCompositionMode\\s+([\\w_0-9]*)$"
argument_list|,
literal|"setCompositionMode<composition mode enum>"
argument_list|,
literal|"setCompositionMode SourceOver"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"setFont"
argument_list|,
name|command_setFont
argument_list|,
literal|"^setFont\\s+\"([\\w\\s]*)\"\\s*(\\w*)\\s*(\\w*)\\s*(\\w*)\\s*(\\w*)$"
argument_list|,
literal|"setFont<fontFace> [size] [font weight|font weight enum] [italic] [hinting enum]\n  - font weight is an integer between 0 and 99"
argument_list|,
literal|"setFont \"times\" 12"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"setPen"
argument_list|,
name|command_setPen
argument_list|,
literal|"^setPen\\s+#?(\\w*)$"
argument_list|,
literal|"setPen<color>\nsetPen<pen style enum>\nsetPen brush"
argument_list|,
literal|"setPen black"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"setPen"
argument_list|,
name|command_setPen2
argument_list|,
literal|"^setPen\\s+(#?\\w*)\\s+([\\w.]+)\\s*(\\w*)\\s*(\\w*)\\s*(\\w*)$"
argument_list|,
literal|"setPen brush|<color> [width] [pen style enum] [FlatCap|SquareCap|RoundCap] [MiterJoin|BevelJoin|RoundJoin]"
argument_list|,
literal|"setPen black 1 FlatCap MiterJoin"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"pen_setDashOffset"
argument_list|,
name|command_pen_setDashOffset
argument_list|,
literal|"^pen_setDashOffset\\s+(-?[\\w.]+)$"
argument_list|,
literal|"pen_setDashOffset<offset>\n"
argument_list|,
literal|"pen_setDashOffset 1.0"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"pen_setDashPattern"
argument_list|,
name|command_pen_setDashPattern
argument_list|,
literal|"^pen_setDashPattern\\s+\\[([\\w\\s.]*)\\]$"
argument_list|,
literal|"pen_setDashPattern<[<dash_1><space_1> ...<dash_n><space_n> ]>"
argument_list|,
literal|"pen_setDashPattern [ 2 1 4 1 3 3 ]"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"pen_setCosmetic"
argument_list|,
name|command_pen_setCosmetic
argument_list|,
literal|"^pen_setCosmetic\\s+(\\w*)$"
argument_list|,
literal|"pen_setCosmetic<true|false>"
argument_list|,
literal|"pen_setCosmetic true"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"setRenderHint"
argument_list|,
name|command_setRenderHint
argument_list|,
literal|"^setRenderHint\\s+([\\w_0-9]*)\\s*(\\w*)$"
argument_list|,
literal|"setRenderHint<Antialiasing|SmoothPixmapTransform><true|false>"
argument_list|,
literal|"setRenderHint Antialiasing true"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"clearRenderHint"
argument_list|,
name|command_clearRenderHint
argument_list|,
literal|"^clearRenderHint$"
argument_list|,
literal|"clearRenderHint"
argument_list|,
literal|"clearRenderHint"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMANDSECTION
argument_list|(
literal|"gradients"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"gradient_appendStop"
argument_list|,
name|command_gradient_appendStop
argument_list|,
literal|"^gradient_appendStop\\s+([\\w.]*)\\s+#?(\\w*)$"
argument_list|,
literal|"gradient_appendStop<pos><color>"
argument_list|,
literal|"gradient_appendStop 1.0 red"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"gradient_clearStops"
argument_list|,
name|command_gradient_clearStops
argument_list|,
literal|"^gradient_clearStops$"
argument_list|,
literal|"gradient_clearStops"
argument_list|,
literal|"gradient_clearStops"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"gradient_setConical"
argument_list|,
name|command_gradient_setConical
argument_list|,
literal|"^gradient_setConical\\s+([\\w.]*)\\s+([\\w.]*)\\s+([\\w.]*)$"
argument_list|,
literal|"gradient_setConical<cx><cy><angle>\n  - angle in degrees"
argument_list|,
literal|"gradient_setConical 5.0 5.0 45.0"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"gradient_setLinear"
argument_list|,
name|command_gradient_setLinear
argument_list|,
literal|"^gradient_setLinear\\s+([\\w.]*)\\s+([\\w.]*)\\s+([\\w.]*)\\s+([\\w.]*)$"
argument_list|,
literal|"gradient_setLinear<x1><y1><x2><y2>"
argument_list|,
literal|"gradient_setLinear 1.0 1.0 2.0 2.0"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"gradient_setRadial"
argument_list|,
name|command_gradient_setRadial
argument_list|,
literal|"^gradient_setRadial\\s+([\\w.]*)\\s+([\\w.]*)\\s+([\\w.]*)\\s?([\\w.]*)\\s?([\\w.]*)$"
argument_list|,
literal|"gradient_setRadial<cx><cy><rad><fx><fy>\n  - C is the center\n  - rad is the angle in degrees\n  - F is the focal point"
argument_list|,
literal|"gradient_setRadial 1.0 1.0 45.0 2.0 2.0"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"gradient_setLinearPen"
argument_list|,
name|command_gradient_setLinearPen
argument_list|,
literal|"^gradient_setLinearPen\\s+([\\w.]*)\\s+([\\w.]*)\\s+([\\w.]*)\\s+([\\w.]*)$"
argument_list|,
literal|"gradient_setLinearPen<x1><y1><x2><y2>"
argument_list|,
literal|"gradient_setLinearPen 1.0 1.0 2.0 2.0"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"gradient_setSpread"
argument_list|,
name|command_gradient_setSpread
argument_list|,
literal|"^gradient_setSpread\\s+(\\w*)$"
argument_list|,
literal|"gradient_setSpread<spread method enum>"
argument_list|,
literal|"gradient_setSpread PadSpread"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"gradient_setCoordinateMode"
argument_list|,
name|command_gradient_setCoordinateMode
argument_list|,
literal|"^gradient_setCoordinateMode\\s+(\\w*)$"
argument_list|,
literal|"gradient_setCoordinateMode<coordinate method enum>"
argument_list|,
literal|"gradient_setCoordinateMode ObjectBoundingMode"
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT3_SUPPORT
name|DECL_PAINTCOMMANDSECTION
argument_list|(
literal|"qt3 drawing ops"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"qt3_drawArc"
argument_list|,
name|command_qt3_drawArc
argument_list|,
literal|"^qt3_drawArc\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)$"
argument_list|,
literal|"qt3_drawArc<x><y><w><h><angleStart><angleArc>\n  - angles are expressed in 1/16th of degree"
argument_list|,
literal|"qt3_drawArc 10 10 20 20 0 5760"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"qt3_drawChord"
argument_list|,
name|command_qt3_drawChord
argument_list|,
literal|"^qt3_drawChord\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)$"
argument_list|,
literal|"qt3_drawChord<x><y><w><h><angleStart><angleArc>\n  - angles are expressed in 1/16th of degree"
argument_list|,
literal|"qt3_drawChord 10 10 20 20 0 5760"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"qt3_drawEllipse"
argument_list|,
name|command_qt3_drawEllipse
argument_list|,
literal|"^qt3_drawEllipse\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)$"
argument_list|,
literal|"qt3_drawEllipse<x><y><w><h>"
argument_list|,
literal|"qt3_drawEllipse 10 10 20 20"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"qt3_drawPie"
argument_list|,
name|command_qt3_drawPie
argument_list|,
literal|"^qt3_drawPie\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)$"
argument_list|,
literal|"qt3_drawPie<x><y><w><h><angleStart><angleArc>\n  - angles are expressed in 1/16th of degree"
argument_list|,
literal|"qt3_drawPie 10 10 20 20 0 5760"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"qt3_drawRect"
argument_list|,
name|command_qt3_drawRect
argument_list|,
literal|"^qt3_drawRect\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)$"
argument_list|,
literal|"qt3_drawRect<x><y><w><h>"
argument_list|,
literal|"qt3_drawRect 10 10 20 20"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"qt3_drawRoundRect"
argument_list|,
name|command_qt3_drawRoundRect
argument_list|,
literal|"^qt3_drawRoundRect\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)\\s*(-?\\w)?\\s*(-?\\w)?$"
argument_list|,
literal|"qt3_drawRoundRect<x><y><w><h> [rx] [ry]"
argument_list|,
literal|"qt3_drawRoundRect 10 10 20 20 3 3"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|DECL_PAINTCOMMANDSECTION
argument_list|(
literal|"drawing ops"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"drawPoint"
argument_list|,
name|command_drawPoint
argument_list|,
literal|"^drawPoint\\s+(-?[\\w.]*)\\s+(-?[\\w.]*)$"
argument_list|,
literal|"drawPoint<x><y>"
argument_list|,
literal|"drawPoint 10.0 10.0"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"drawLine"
argument_list|,
name|command_drawLine
argument_list|,
literal|"^drawLine\\s+(-?[\\w.]*)\\s+(-?[\\w.]*)\\s+(-?[\\w.]*)\\s+(-?[\\w.]*)$"
argument_list|,
literal|"drawLine<x1><y1><x2><y2>"
argument_list|,
literal|"drawLine 10.0 10.0 20.0 20.0"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"drawRect"
argument_list|,
name|command_drawRect
argument_list|,
literal|"^drawRect\\s+(-?[\\w.]*)\\s+(-?[\\w.]*)\\s+(-?[\\w.]*)\\s+(-?[\\w.]*)$"
argument_list|,
literal|"drawRect<x><y><w><h>"
argument_list|,
literal|"drawRect 10.0 10.0 20.0 20.0"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"drawRoundRect"
argument_list|,
name|command_drawRoundRect
argument_list|,
literal|"^drawRoundRect\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)\\s*(-?\\w*)?\\s*(-?\\w*)?$"
argument_list|,
literal|"drawRoundRect<x><y><w><h> [rx] [ry]"
argument_list|,
literal|"drawRoundRect 10 10 20 20 3 3"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"drawRoundedRect"
argument_list|,
name|command_drawRoundedRect
argument_list|,
literal|"^drawRoundedRect\\s+(-?[\\w.]*)\\s+(-?[\\w.]*)\\s+(-?[\\w.]*)\\s+(-?[\\w.]*)\\s+(-?[\\w.]*)\\s+(-?[\\w.]*)\\s*(\\w*)?$"
argument_list|,
literal|"drawRoundedRect<x><y><w><h><rx><ry> [SizeMode enum]"
argument_list|,
literal|"drawRoundedRect 10 10 20 20 4 4 AbsoluteSize"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"drawArc"
argument_list|,
name|command_drawArc
argument_list|,
literal|"^drawArc\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)$"
argument_list|,
literal|"drawArc<x><y><w><h><angleStart><angleArc>\n  - angles are expressed in 1/16th of degree"
argument_list|,
literal|"drawArc 10 10 20 20 0 5760"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"drawChord"
argument_list|,
name|command_drawChord
argument_list|,
literal|"^drawChord\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)$"
argument_list|,
literal|"drawChord<x><y><w><h><angleStart><angleArc>\n  - angles are expressed in 1/16th of degree"
argument_list|,
literal|"drawChord 10 10 20 20 0 5760"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"drawEllipse"
argument_list|,
name|command_drawEllipse
argument_list|,
literal|"^drawEllipse\\s+(-?[\\w.]*)\\s+(-?[\\w.]*)\\s+(-?[\\w.]*)\\s+(-?[\\w.]*)$"
argument_list|,
literal|"drawEllipse<x><y><w><h>"
argument_list|,
literal|"drawEllipse 10.0 10.0 20.0 20.0"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"drawPath"
argument_list|,
name|command_drawPath
argument_list|,
literal|"^drawPath\\s+(\\w*)$"
argument_list|,
literal|"drawPath<pathName>"
argument_list|,
literal|"drawPath mypath"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"drawPie"
argument_list|,
name|command_drawPie
argument_list|,
literal|"^drawPie\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)$"
argument_list|,
literal|"drawPie<x><y><w><h><angleStart><angleArc>\n  - angles are expressed in 1/16th of degree"
argument_list|,
literal|"drawPie 10 10 20 20 0 5760"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"drawPixmap"
argument_list|,
name|command_drawPixmap
argument_list|,
literal|"^drawPixmap\\s+([\\w.:\\-/]*)"
literal|"\\s+(-?[\\w.]*)\\s+(-?[\\w.]*)\\s*(-?[\\w.]*)?\\s*(-?[\\w.]*)?"
comment|// target rect
literal|"\\s*(-?[\\w.]*)?\\s*(-?[\\w.]*)?\\s*(-?[\\w.]*)?\\s*(-?[\\w.]*)?$"
argument_list|,
comment|// source rect
literal|"drawPixmap<filename><tx><ty><tw><th><sx><sy><sw><sh>"
literal|"\n- where t means target and s means source"
literal|"\n- a width or height of -1 means maximum space"
argument_list|,
literal|"drawPixmap :/images/face.png 0 0 -1 -1 0 0 -1 -1"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"drawImage"
argument_list|,
name|command_drawImage
argument_list|,
literal|"^drawImage\\s+([\\w.:\\/]*)"
literal|"\\s+(-?[\\w.]*)\\s+(-?[\\w.]*)\\s*(-?[\\w.]*)?\\s*(-?[\\w.]*)?"
comment|// target rect
literal|"\\s*(-?[\\w.]*)?\\s*(-?[\\w.]*)?\\s*(-?[\\w.]*)?\\s*(-?[\\w.]*)?$"
argument_list|,
comment|// source rect
literal|"drawImage<filename><tx><ty><tw><th><sx><sy><sw><sh>"
literal|"\n- where t means target and s means source"
literal|"\n- a width or height of -1 means maximum space"
argument_list|,
literal|"drawImage :/images/face.png 0 0 -1 -1 0 0 -1 -1"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"drawPolygon"
argument_list|,
name|command_drawPolygon
argument_list|,
literal|"^drawPolygon\\s+\\[([\\w\\s-.]*)\\]\\s*(\\w*)$"
argument_list|,
literal|"drawPolygon<[<x1><y1> ...<xn><yn> ]><Winding|OddEven>"
argument_list|,
literal|"drawPolygon [ 1 4  6 8  5 3 ] Winding"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"drawConvexPolygon"
argument_list|,
name|command_drawConvexPolygon
argument_list|,
literal|"^drawConvexPolygon\\s+\\[([\\w\\s-.]*)\\]$"
argument_list|,
literal|"drawConvexPolygon<[<x1><y1> ...<xn><yn> ]>"
argument_list|,
literal|"drawConvexPolygon [ 1 4  6 8  5 3 ]"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"drawPolyline"
argument_list|,
name|command_drawPolyline
argument_list|,
literal|"^drawPolyline\\s+\\[([\\w\\s]*)\\]$"
argument_list|,
literal|"drawPolyline<[<x1><y1> ...<xn><yn> ]>"
argument_list|,
literal|"drawPolyline [ 1 4  6 8  5 3 ]"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"drawText"
argument_list|,
name|command_drawText
argument_list|,
literal|"^drawText\\s+(-?\\w*)\\s+(-?\\w*)\\s+\"(.*)\"$"
argument_list|,
literal|"drawText<x><y><text>"
argument_list|,
literal|"drawText 10 10 \"my text\""
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"drawTiledPixmap"
argument_list|,
name|command_drawTiledPixmap
argument_list|,
literal|"^drawTiledPixmap\\s+([\\w.:\\/]*)"
literal|"\\s+(-?\\w*)\\s+(-?\\w*)\\s*(-?\\w*)\\s*(-?\\w*)"
literal|"\\s*(-?\\w*)\\s*(-?\\w*)$"
argument_list|,
literal|"drawTiledPixmap<tile image filename><tx><ty><tx><ty><sx><sy>"
literal|"\n  - where t means tile"
literal|"\n  - and s is an offset in the tile"
argument_list|,
literal|"drawTiledPixmap :/images/alpha.png "
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMANDSECTION
argument_list|(
literal|"painterPaths"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"path_moveTo"
argument_list|,
name|command_path_moveTo
argument_list|,
literal|"^path_moveTo\\s+([.\\w]*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)$"
argument_list|,
literal|"path_moveTo<pathName><x><y>"
argument_list|,
literal|"path_moveTo mypath 1.0 1.0"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"path_lineTo"
argument_list|,
name|command_path_lineTo
argument_list|,
literal|"^path_lineTo\\s+([.\\w]*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)$"
argument_list|,
literal|"path_lineTo<pathName><x><y>"
argument_list|,
literal|"path_lineTo mypath 1.0 1.0"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"path_addEllipse"
argument_list|,
name|command_path_addEllipse
argument_list|,
literal|"^path_addEllipse\\s+(\\w*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)$"
argument_list|,
literal|"path_addEllipse<pathName><x1><y1><x2><y2>"
argument_list|,
literal|"path_addEllipse mypath 10.0 10.0 20.0 20.0"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"path_addPolygon"
argument_list|,
name|command_path_addPolygon
argument_list|,
literal|"^path_addPolygon\\s+(\\w*)\\s+\\[([\\w\\s]*)\\]\\s*(\\w*)$"
argument_list|,
literal|"path_addPolygon<pathName><[<x1><y1> ...<xn><yn> ]>"
argument_list|,
literal|"path_addPolygon mypath [ 1 4  6 8  5 3 ]"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"path_addRect"
argument_list|,
name|command_path_addRect
argument_list|,
literal|"^path_addRect\\s+(\\w*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)$"
argument_list|,
literal|"path_addRect<pathName><x1><y1><x2><y2>"
argument_list|,
literal|"path_addRect mypath 10.0 10.0 20.0 20.0"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"path_addText"
argument_list|,
name|command_path_addText
argument_list|,
literal|"^path_addText\\s+(\\w*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)\\s+\"(.*)\"$"
argument_list|,
literal|"path_addText<pathName><x><y><text>"
argument_list|,
literal|"path_addText mypath 10.0 20.0 \"some text\""
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"path_arcTo"
argument_list|,
name|command_path_arcTo
argument_list|,
literal|"^path_arcTo\\s+(\\w*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)$"
argument_list|,
literal|"path_arcTo<pathName><x><y><w><h><angleStart><angleArc>\n  - angles are expressed in degrees"
argument_list|,
literal|"path_arcTo mypath 0.0 0.0 10.0 10.0 0.0 360.0"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"path_cubicTo"
argument_list|,
name|command_path_cubicTo
argument_list|,
literal|"^path_cubicTo\\s+(\\w*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)$"
argument_list|,
literal|"path_cubicTo<pathName><x1><y1><x2><y2><x3><y3>"
argument_list|,
literal|"path_cubicTo mypath 0.0 0.0 10.0 10.0 20.0 20.0"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"path_closeSubpath"
argument_list|,
name|command_path_closeSubpath
argument_list|,
literal|"^path_closeSubpath\\s+(\\w*)$"
argument_list|,
literal|"path_closeSubpath<pathName>"
argument_list|,
literal|"path_closeSubpath mypath"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"path_createOutline"
argument_list|,
name|command_path_createOutline
argument_list|,
literal|"^path_createOutline\\s+(\\w*)\\s+(\\w*)$"
argument_list|,
literal|"path_createOutline<pathName><newName>"
argument_list|,
literal|"path_createOutline mypath myoutline"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"path_debugPrint"
argument_list|,
name|command_path_debugPrint
argument_list|,
literal|"^path_debugPrint\\s+(\\w*)$"
argument_list|,
literal|"path_debugPrint<pathName>"
argument_list|,
literal|"path_debugPrint mypath"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMANDSECTION
argument_list|(
literal|"regions"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"region_addRect"
argument_list|,
name|command_region_addRect
argument_list|,
literal|"^region_addRect\\s+(\\w*)\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)$"
argument_list|,
literal|"region_addRect<regionName><x1><y1><x2><y2>"
argument_list|,
literal|"region_addRect myregion 0.0 0.0 10.0 10.0"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"region_addEllipse"
argument_list|,
name|command_region_addEllipse
argument_list|,
literal|"^region_addEllipse\\s+(\\w*)\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)$"
argument_list|,
literal|"region_addEllipse<regionName><x1><y1><x2><y2>"
argument_list|,
literal|"region_addEllipse myregion 0.0 0.0 10.0 10.0"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMANDSECTION
argument_list|(
literal|"clipping"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"region_getClipRegion"
argument_list|,
name|command_region_getClipRegion
argument_list|,
literal|"^region_getClipRegion\\s+(\\w*)$"
argument_list|,
literal|"region_getClipRegion<regionName>"
argument_list|,
literal|"region_getClipRegion myregion"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"setClipRegion"
argument_list|,
name|command_setClipRegion
argument_list|,
literal|"^setClipRegion\\s+(\\w*)\\s*(\\w*)$"
argument_list|,
literal|"setClipRegion<regionName><clip operation enum>"
argument_list|,
literal|"setClipRegion myregion ReplaceClip"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"path_getClipPath"
argument_list|,
name|command_path_getClipPath
argument_list|,
literal|"^path_getClipPath\\s+([\\w0-9]*)$"
argument_list|,
literal|"path_getClipPath<pathName>"
argument_list|,
literal|"path_getClipPath mypath"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"setClipPath"
argument_list|,
name|command_setClipPath
argument_list|,
literal|"^setClipPath\\s+(\\w*)\\s*(\\w*)$"
argument_list|,
literal|"setClipPath<pathName><clip operation enum>"
argument_list|,
literal|"setClipPath mypath ReplaceClip"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"setClipRect"
argument_list|,
name|command_setClipRect
argument_list|,
literal|"^setClipRect\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)\\s+(-?\\w*)\\s*(\\w*)$"
argument_list|,
literal|"setClipRect<x1><y1><x2><y2><clip operation enum>"
argument_list|,
literal|"setClipRect 0.0 0.0 10.0 10.0 ReplaceClip"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"setClipping"
argument_list|,
name|command_setClipping
argument_list|,
literal|"^setClipping\\s+(\\w*)$"
argument_list|,
literal|"setClipping<true|false>"
argument_list|,
literal|"setClipping true"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMANDSECTION
argument_list|(
literal|"surface"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"surface_begin"
argument_list|,
name|command_surface_begin
argument_list|,
literal|"^surface_begin\\s+(-?[\\w.]*)\\s+(-?[\\w.]*)\\s+(-?[\\w.]*)\\s+(-?[\\w.]*)$"
argument_list|,
literal|"surface_begin<x><y><w><h>"
argument_list|,
literal|"surface_begin 0.0 0.0 10.0 10.0"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"surface_end"
argument_list|,
name|command_surface_end
argument_list|,
literal|"^surface_end$"
argument_list|,
literal|"surface_end"
argument_list|,
literal|"surface_end"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMANDSECTION
argument_list|(
literal|"painter states"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"restore"
argument_list|,
name|command_restore
argument_list|,
literal|"^restore$"
argument_list|,
literal|"restore"
argument_list|,
literal|"restore"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"save"
argument_list|,
name|command_save
argument_list|,
literal|"^save$"
argument_list|,
literal|"save"
argument_list|,
literal|"save"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMANDSECTION
argument_list|(
literal|"pixmaps'n'images"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"pixmap_load"
argument_list|,
name|command_pixmap_load
argument_list|,
literal|"^pixmap_load\\s+([\\w.:\\/]*)\\s*([\\w.:\\/]*)$"
argument_list|,
literal|"pixmap_load<image filename><pixmapName>"
argument_list|,
literal|"pixmap_load :/images/face.png myPixmap"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"pixmap_setMask"
argument_list|,
name|command_pixmap_setMask
argument_list|,
literal|"^pixmap_setMask\\s+([\\w.:\\/]*)\\s+([\\w.:\\/]*)$"
argument_list|,
literal|"pixmap_setMask<pixmapName><bitmap filename>"
argument_list|,
literal|"pixmap_setMask myPixmap :/images/bitmap.png"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"bitmap_load"
argument_list|,
name|command_bitmap_load
argument_list|,
literal|"^bitmap_load\\s+([\\w.:\\/]*)\\s*([\\w.:\\/]*)$"
argument_list|,
literal|"bitmap_load<bitmap filename><bitmapName>\n  - note that the image is stored as a pixmap"
argument_list|,
literal|"bitmap_load :/images/bitmap.png myBitmap"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"image_convertToFormat"
argument_list|,
name|command_image_convertToFormat
argument_list|,
literal|"^image_convertToFormat\\s+([\\w.:\\/]*)\\s+([\\w.:\\/]+)\\s+([\\w0-9_]*)$"
argument_list|,
literal|"image_convertToFormat<sourceImageName><destImageName><image format enum>"
argument_list|,
literal|"image_convertToFormat myImage myNewImage Indexed8"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"image_load"
argument_list|,
name|command_image_load
argument_list|,
literal|"^image_load\\s+([\\w.:\\/]*)\\s*([\\w.:\\/]*)$"
argument_list|,
literal|"image_load<filename><imageName>"
argument_list|,
literal|"image_load :/images/face.png myImage"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"image_setColor"
argument_list|,
name|command_image_setColor
argument_list|,
literal|"^image_setColor\\s+([\\w.:\\/]*)\\s+([0-9]*)\\s+#([0-9]*)$"
argument_list|,
literal|"image_setColor<imageName><index><color>"
argument_list|,
literal|"image_setColor myImage 0 black"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"image_setColorCount"
argument_list|,
name|command_image_setColorCount
argument_list|,
literal|"^image_setColorCount\\s+([\\w.:\\/]*)\\s+([0-9]*)$"
argument_list|,
literal|"image_setColorCount<imageName><nbColors>"
argument_list|,
literal|"image_setColorCount myImage 128"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMANDSECTION
argument_list|(
literal|"transformations"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"resetMatrix"
argument_list|,
name|command_resetMatrix
argument_list|,
literal|"^resetMatrix$"
argument_list|,
literal|"resetMatrix"
argument_list|,
literal|"resetMatrix"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"setMatrix"
argument_list|,
name|command_setMatrix
argument_list|,
literal|"^setMatrix\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)$"
argument_list|,
literal|"setMatrix<m11><m12><m13><m21><m22><m23><m31><m32><m33>"
argument_list|,
literal|"setMatrix 1.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 1.0"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"translate"
argument_list|,
name|command_translate
argument_list|,
literal|"^translate\\s+(-?[\\w.]*)\\s+(-?[\\w.]*)$"
argument_list|,
literal|"translate<tx><ty>"
argument_list|,
literal|"translate 10.0 10.0"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"rotate"
argument_list|,
name|command_rotate
argument_list|,
literal|"^rotate\\s+(-?[\\w.]*)$"
argument_list|,
literal|"rotate<angle>\n  - with angle in degrees"
argument_list|,
literal|"rotate 30.0"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"rotate_x"
argument_list|,
name|command_rotate_x
argument_list|,
literal|"^rotate_x\\s+(-?[\\w.]*)$"
argument_list|,
literal|"rotate_x<angle>\n  - with angle in degrees"
argument_list|,
literal|"rotate_x 30.0"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"rotate_y"
argument_list|,
name|command_rotate_y
argument_list|,
literal|"^rotate_y\\s+(-?[\\w.]*)$"
argument_list|,
literal|"rotate_y<angle>\n  - with angle in degrees"
argument_list|,
literal|"rotate_y 30.0"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"scale"
argument_list|,
name|command_scale
argument_list|,
literal|"^scale\\s+(-?[\\w.]*)\\s+(-?[\\w.]*)$"
argument_list|,
literal|"scale<sx><sy>"
argument_list|,
literal|"scale 2.0 1.0"
argument_list|)
expr_stmt|;
name|DECL_PAINTCOMMAND
argument_list|(
literal|"mapQuadToQuad"
argument_list|,
name|command_mapQuadToQuad
argument_list|,
literal|"^mapQuadToQuad\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)\\s+(-?[.\\w]*)$"
argument_list|,
literal|"mapQuadToQuad<x1><y1><x2><y2><x3><y3><x4><y4><x5><y5><x6><y6><x7><y7><x8><y8>"
literal|"\n  - where vertices 1 to 4 defines the source quad and 5 to 8 the destination quad"
argument_list|,
literal|"mapQuadToQuad 0.0 0.0 1.0 1.0 0.0 0.0 -1.0 -1.0"
argument_list|)
expr_stmt|;
comment|// populate the command lookup hash
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s_commandInfoTable
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|s_commandInfoTable
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|isSectionHeader
argument_list|()
operator|||
name|s_commandInfoTable
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|identifier
operator|==
name|QLatin1String
argument_list|(
literal|"comment"
argument_list|)
operator|||
name|s_commandInfoTable
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|identifier
operator|==
name|QLatin1String
argument_list|(
literal|"noop"
argument_list|)
condition|)
continue|continue;
name|s_commandHash
operator|.
name|insert
argument_list|(
name|s_commandInfoTable
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|identifier
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
comment|// populate the enums list
name|ADD_ENUMLIST
argument_list|(
literal|"brush styles"
argument_list|,
name|brushStyleTable
argument_list|)
expr_stmt|;
name|ADD_ENUMLIST
argument_list|(
literal|"pen styles"
argument_list|,
name|penStyleTable
argument_list|)
expr_stmt|;
name|ADD_ENUMLIST
argument_list|(
literal|"font weights"
argument_list|,
name|fontWeightTable
argument_list|)
expr_stmt|;
name|ADD_ENUMLIST
argument_list|(
literal|"font hintings"
argument_list|,
name|fontHintingTable
argument_list|)
expr_stmt|;
name|ADD_ENUMLIST
argument_list|(
literal|"clip operations"
argument_list|,
name|clipOperationTable
argument_list|)
expr_stmt|;
name|ADD_ENUMLIST
argument_list|(
literal|"spread methods"
argument_list|,
name|spreadMethodTable
argument_list|)
expr_stmt|;
name|ADD_ENUMLIST
argument_list|(
literal|"composition modes"
argument_list|,
name|compositionModeTable
argument_list|)
expr_stmt|;
name|ADD_ENUMLIST
argument_list|(
literal|"image formats"
argument_list|,
name|imageFormatTable
argument_list|)
expr_stmt|;
name|ADD_ENUMLIST
argument_list|(
literal|"coordinate modes"
argument_list|,
name|coordinateMethodTable
argument_list|)
expr_stmt|;
name|ADD_ENUMLIST
argument_list|(
literal|"size modes"
argument_list|,
name|sizeModeTable
argument_list|)
expr_stmt|;
block|}
end_function
begin_undef
DECL|macro|DECL_PAINTCOMMAND
undef|#
directive|undef
name|DECL_PAINTCOMMAND
end_undef
begin_undef
DECL|macro|ADD_ENUMLIST
undef|#
directive|undef
name|ADD_ENUMLIST
end_undef
begin_comment
comment|/********************************************************************************* ** utility **********************************************************************************/
end_comment
begin_function
DECL|function|image_load
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|T
name|PaintCommands
operator|::
name|image_load
parameter_list|(
specifier|const
name|QString
modifier|&
name|filepath
parameter_list|)
block|{
name|T
name|t
argument_list|(
name|filepath
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|isNull
argument_list|()
condition|)
name|t
operator|=
name|T
argument_list|(
literal|":images/"
operator|+
name|filepath
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|isNull
argument_list|()
condition|)
name|t
operator|=
name|T
argument_list|(
literal|"images/"
operator|+
name|filepath
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QFileInfo
name|fi
argument_list|(
name|filepath
argument_list|)
decl_stmt|;
name|QDir
name|dir
init|=
name|fi
operator|.
name|absoluteDir
argument_list|()
decl_stmt|;
name|dir
operator|.
name|cdUp
argument_list|()
expr_stmt|;
name|dir
operator|.
name|cd
argument_list|(
literal|"images"
argument_list|)
expr_stmt|;
name|QString
name|fileName
init|=
name|QString
argument_list|(
literal|"%1/%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|dir
operator|.
name|absolutePath
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|fi
operator|.
name|fileName
argument_list|()
argument_list|)
decl_stmt|;
name|t
operator|=
name|T
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|isNull
argument_list|()
operator|&&
operator|!
name|fileName
operator|.
name|endsWith
argument_list|(
literal|".png"
argument_list|)
condition|)
block|{
name|fileName
operator|.
name|append
argument_list|(
literal|".png"
argument_list|)
expr_stmt|;
name|t
operator|=
name|T
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|t
return|;
block|}
end_function
begin_comment
comment|/********************************************************************************* ** setters **********************************************************************************/
end_comment
begin_function
DECL|function|insertAt
name|void
name|PaintCommands
operator|::
name|insertAt
parameter_list|(
name|int
name|commandIndex
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|newCommands
parameter_list|)
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
name|int
name|left
init|=
name|newCommands
operator|.
name|size
argument_list|()
decl_stmt|;
while|while
condition|(
name|left
operator|--
condition|)
name|m_commands
operator|.
name|insert
argument_list|(
operator|++
name|commandIndex
argument_list|,
name|newCommands
operator|.
name|at
argument_list|(
name|index
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/********************************************************************************* ** run **********************************************************************************/
end_comment
begin_function
DECL|function|runCommand
name|void
name|PaintCommands
operator|::
name|runCommand
parameter_list|(
specifier|const
name|QString
modifier|&
name|scriptLine
parameter_list|)
block|{
if|if
condition|(
name|scriptLine
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|command_noop
argument_list|(
name|QRegExp
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|scriptLine
operator|.
name|startsWith
argument_list|(
literal|'#'
argument_list|)
condition|)
block|{
name|command_comment
argument_list|(
name|QRegExp
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|QString
name|firstWord
init|=
name|scriptLine
operator|.
name|section
argument_list|(
name|QRegExp
argument_list|(
literal|"\\s"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|indices
init|=
name|s_commandHash
operator|.
name|values
argument_list|(
name|firstWord
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|int
name|idx
decl|,
name|indices
control|)
block|{
specifier|const
name|PaintCommandInfos
modifier|&
name|command
init|=
name|s_commandInfoTable
operator|.
name|at
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|command
operator|.
name|regExp
operator|.
name|indexIn
argument_list|(
name|scriptLine
argument_list|)
operator|>=
literal|0
condition|)
block|{
operator|(
name|this
operator|->*
operator|(
name|command
operator|.
name|paintMethod
operator|)
operator|)
operator|(
name|command
operator|.
name|regExp
operator|)
expr_stmt|;
return|return;
block|}
block|}
name|qWarning
argument_list|(
literal|"ERROR: unknown command or argument syntax error in \"%s\""
argument_list|,
name|qPrintable
argument_list|(
name|scriptLine
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|runCommands
name|void
name|PaintCommands
operator|::
name|runCommands
parameter_list|()
block|{
name|staticInit
argument_list|()
expr_stmt|;
name|int
name|width
init|=
name|m_painter
operator|->
name|window
argument_list|()
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|height
init|=
name|m_painter
operator|->
name|window
argument_list|()
operator|.
name|height
argument_list|()
decl_stmt|;
if|if
condition|(
name|width
operator|<=
literal|0
condition|)
name|width
operator|=
literal|800
expr_stmt|;
if|if
condition|(
name|height
operator|<=
literal|0
condition|)
name|height
operator|=
literal|800
expr_stmt|;
comment|// paint background
if|if
condition|(
name|m_checkers_background
condition|)
block|{
name|QPixmap
name|pm
argument_list|(
literal|20
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|pm
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|QPainter
name|pt
argument_list|(
operator|&
name|pm
argument_list|)
decl_stmt|;
name|pt
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
name|QColor
operator|::
name|fromRgba
argument_list|(
literal|0xffdfdfdf
argument_list|)
argument_list|)
expr_stmt|;
name|pt
operator|.
name|fillRect
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
name|QColor
operator|::
name|fromRgba
argument_list|(
literal|0xffdfdfdf
argument_list|)
argument_list|)
expr_stmt|;
name|pt
operator|.
name|end
argument_list|()
expr_stmt|;
name|m_painter
operator|->
name|drawTiledPixmap
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|pm
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m_painter
operator|->
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
block|}
comment|// run each command
name|m_abort
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_commands
operator|.
name|size
argument_list|()
operator|&&
operator|!
name|m_abort
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QString
modifier|&
name|commandNow
init|=
name|m_commands
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|m_currentCommand
operator|=
name|commandNow
expr_stmt|;
name|m_currentCommandIndex
operator|=
name|i
expr_stmt|;
name|runCommand
argument_list|(
name|commandNow
operator|.
name|trimmed
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/********************************************************************************* ** conversions **********************************************************************************/
end_comment
begin_function
DECL|function|convertToInt
name|int
name|PaintCommands
operator|::
name|convertToInt
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
block|{
return|return
name|qRound
argument_list|(
name|convertToDouble
argument_list|(
name|str
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|convertToFloat
name|float
name|PaintCommands
operator|::
name|convertToFloat
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
block|{
return|return
name|float
argument_list|(
name|convertToDouble
argument_list|(
name|str
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|convertToDouble
name|double
name|PaintCommands
operator|::
name|convertToDouble
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
block|{
specifier|static
name|QRegExp
name|re
argument_list|(
literal|"cp([0-9])([xy])"
argument_list|)
decl_stmt|;
if|if
condition|(
name|str
operator|.
name|toLower
argument_list|()
operator|==
literal|"width"
condition|)
block|{
if|if
condition|(
name|m_painter
operator|->
name|device
argument_list|()
operator|->
name|devType
argument_list|()
operator|==
name|Qt
operator|::
name|Widget
condition|)
return|return
name|m_painter
operator|->
name|window
argument_list|()
operator|.
name|width
argument_list|()
return|;
else|else
return|return
literal|800
return|;
block|}
if|if
condition|(
name|str
operator|.
name|toLower
argument_list|()
operator|==
literal|"height"
condition|)
block|{
if|if
condition|(
name|m_painter
operator|->
name|device
argument_list|()
operator|->
name|devType
argument_list|()
operator|==
name|Qt
operator|::
name|Widget
condition|)
return|return
name|m_painter
operator|->
name|window
argument_list|()
operator|.
name|height
argument_list|()
return|;
else|else
return|return
literal|800
return|;
block|}
if|if
condition|(
name|re
operator|.
name|indexIn
argument_list|(
name|str
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|int
name|index
init|=
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|bool
name|is_it_x
init|=
name|re
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
operator|==
literal|"x"
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|m_controlPoints
operator|.
name|size
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"ERROR: control point index=%d is out of bounds"
argument_list|,
name|index
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
name|is_it_x
condition|?
name|m_controlPoints
operator|.
name|at
argument_list|(
name|index
argument_list|)
operator|.
name|x
argument_list|()
else|:
name|m_controlPoints
operator|.
name|at
argument_list|(
name|index
argument_list|)
operator|.
name|y
argument_list|()
return|;
block|}
return|return
name|str
operator|.
name|toDouble
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|convertToColor
name|QColor
name|PaintCommands
operator|::
name|convertToColor
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
block|{
specifier|static
name|QRegExp
name|alphaColor
argument_list|(
literal|"#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})"
argument_list|)
decl_stmt|;
specifier|static
name|QRegExp
name|opaqueColor
argument_list|(
literal|"#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})"
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|alphaColor
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|opaqueColor
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|alphaColor
operator|.
name|indexIn
argument_list|(
name|str
argument_list|)
operator|>=
literal|0
condition|)
block|{
return|return
name|QColor
argument_list|(
name|alphaColor
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|(
literal|0
argument_list|,
literal|16
argument_list|)
argument_list|,
name|alphaColor
operator|.
name|cap
argument_list|(
literal|3
argument_list|)
operator|.
name|toInt
argument_list|(
literal|0
argument_list|,
literal|16
argument_list|)
argument_list|,
name|alphaColor
operator|.
name|cap
argument_list|(
literal|4
argument_list|)
operator|.
name|toInt
argument_list|(
literal|0
argument_list|,
literal|16
argument_list|)
argument_list|,
name|alphaColor
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|(
literal|0
argument_list|,
literal|16
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|opaqueColor
operator|.
name|indexIn
argument_list|(
name|str
argument_list|)
operator|>=
literal|0
condition|)
block|{
return|return
name|QColor
argument_list|(
name|opaqueColor
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|(
literal|0
argument_list|,
literal|16
argument_list|)
argument_list|,
name|opaqueColor
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|(
literal|0
argument_list|,
literal|16
argument_list|)
argument_list|,
name|opaqueColor
operator|.
name|cap
argument_list|(
literal|3
argument_list|)
operator|.
name|toInt
argument_list|(
literal|0
argument_list|,
literal|16
argument_list|)
argument_list|)
return|;
block|}
return|return
name|QColor
argument_list|(
name|str
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/********************************************************************************* ** command implementations **********************************************************************************/
end_comment
begin_function
DECL|function|command_comment
name|void
name|PaintCommands
operator|::
name|command_comment
parameter_list|(
name|QRegExp
parameter_list|)
block|{
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) comment: %s\n"
argument_list|,
name|qPrintable
argument_list|(
name|m_currentCommand
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_import
name|void
name|PaintCommands
operator|::
name|command_import
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QString
name|importFile
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|m_filepath
argument_list|)
decl_stmt|;
name|QDir
name|dir
init|=
name|fi
operator|.
name|absoluteDir
argument_list|()
decl_stmt|;
name|QFile
modifier|*
name|file
init|=
operator|new
name|QFile
argument_list|(
name|dir
operator|.
name|absolutePath
argument_list|()
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
name|importFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|importFile
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|file
operator|->
name|exists
argument_list|()
condition|)
block|{
name|dir
operator|.
name|cdUp
argument_list|()
expr_stmt|;
name|dir
operator|.
name|cd
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|dir
operator|.
name|cd
argument_list|(
literal|"qps"
argument_list|)
expr_stmt|;
operator|delete
name|file
expr_stmt|;
name|file
operator|=
operator|new
name|QFile
argument_list|(
name|dir
operator|.
name|absolutePath
argument_list|()
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
name|importFile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|importFile
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|file
operator|->
name|exists
argument_list|()
condition|)
block|{
name|dir
operator|.
name|cdUp
argument_list|()
expr_stmt|;
name|dir
operator|.
name|cd
argument_list|(
literal|"images"
argument_list|)
expr_stmt|;
operator|delete
name|file
expr_stmt|;
name|file
operator|=
operator|new
name|QFile
argument_list|(
name|dir
operator|.
name|absolutePath
argument_list|()
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
name|importFile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|importFile
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|file
operator|->
name|exists
argument_list|()
condition|)
block|{
name|printf
argument_list|(
literal|" - importing non-existing file at line %d (%s)\n"
argument_list|,
name|m_currentCommandIndex
argument_list|,
name|qPrintable
argument_list|(
name|file
operator|->
name|fileName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|file
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|file
operator|->
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|printf
argument_list|(
literal|" - failed to read file: '%s'\n"
argument_list|,
name|qPrintable
argument_list|(
name|file
operator|->
name|fileName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|file
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) importing file at line %d (%s)\n"
argument_list|,
name|m_currentCommandIndex
argument_list|,
name|qPrintable
argument_list|(
name|fi
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QFileInfo
name|fileinfo
argument_list|(
operator|*
name|file
argument_list|)
decl_stmt|;
name|m_commands
index|[
name|m_currentCommandIndex
index|]
operator|=
name|QString
argument_list|(
literal|"# import file (%1) start"
argument_list|)
operator|.
name|arg
argument_list|(
name|fileinfo
operator|.
name|fileName
argument_list|()
argument_list|)
expr_stmt|;
name|QTextStream
name|textFile
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|QString
name|rawContent
init|=
name|textFile
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|QStringList
name|importedData
init|=
name|rawContent
operator|.
name|split
argument_list|(
literal|'\n'
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
name|importedData
operator|.
name|append
argument_list|(
name|QString
argument_list|(
literal|"# import file (%1) end ---"
argument_list|)
operator|.
name|arg
argument_list|(
name|fileinfo
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|insertAt
argument_list|(
name|m_currentCommandIndex
argument_list|,
name|importedData
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
block|{
name|printf
argument_list|(
literal|" -(lance) Command buffer now looks like:\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_commands
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|printf
argument_list|(
literal|" ---> {%s}\n"
argument_list|,
name|qPrintable
argument_list|(
name|m_commands
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|delete
name|file
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_begin_block
name|void
name|PaintCommands
operator|::
name|command_begin_block
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
specifier|const
name|QString
modifier|&
name|blockName
init|=
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) begin_block (%s)\n"
argument_list|,
name|qPrintable
argument_list|(
name|blockName
argument_list|)
argument_list|)
expr_stmt|;
name|m_commands
index|[
name|m_currentCommandIndex
index|]
operator|=
name|QString
argument_list|(
literal|"# begin block (%1)"
argument_list|)
operator|.
name|arg
argument_list|(
name|blockName
argument_list|)
expr_stmt|;
name|QStringList
name|newBlock
decl_stmt|;
name|int
name|i
init|=
name|m_currentCommandIndex
operator|+
literal|1
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|m_commands
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QString
modifier|&
name|nextCmd
init|=
name|m_commands
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextCmd
operator|.
name|startsWith
argument_list|(
literal|"end_block"
argument_list|)
condition|)
block|{
name|m_commands
index|[
name|i
index|]
operator|=
name|QString
argument_list|(
literal|"# end block (%1)"
argument_list|)
operator|.
name|arg
argument_list|(
name|blockName
argument_list|)
expr_stmt|;
break|break;
block|}
name|newBlock
operator|+=
name|nextCmd
expr_stmt|;
block|}
if|if
condition|(
name|m_verboseMode
condition|)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|newBlock
operator|.
name|count
argument_list|()
condition|;
operator|++
name|j
control|)
name|printf
argument_list|(
literal|"      %d: %s\n"
argument_list|,
name|j
argument_list|,
name|qPrintable
argument_list|(
name|newBlock
operator|.
name|at
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|m_commands
operator|.
name|count
argument_list|()
condition|)
name|printf
argument_list|(
literal|" - Warning! Block doesn't have an 'end_block' marker!\n"
argument_list|)
expr_stmt|;
name|m_blockMap
operator|.
name|insert
argument_list|(
name|blockName
argument_list|,
name|newBlock
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_end_block
name|void
name|PaintCommands
operator|::
name|command_end_block
parameter_list|(
name|QRegExp
parameter_list|)
block|{
name|printf
argument_list|(
literal|" - end_block should be consumed by begin_block command.\n"
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"   You will never see this if your block markers are in sync\n"
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"   (noop)\n"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_repeat_block
name|void
name|PaintCommands
operator|::
name|command_repeat_block
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QString
name|blockName
init|=
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) repeating block (%s)\n"
argument_list|,
name|qPrintable
argument_list|(
name|blockName
argument_list|)
argument_list|)
expr_stmt|;
name|QStringList
name|block
init|=
name|m_blockMap
operator|.
name|value
argument_list|(
name|blockName
argument_list|)
decl_stmt|;
if|if
condition|(
name|block
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|printf
argument_list|(
literal|" - repeated block (%s) is empty!\n"
argument_list|,
name|qPrintable
argument_list|(
name|blockName
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|m_commands
index|[
name|m_currentCommandIndex
index|]
operator|=
name|QString
argument_list|(
literal|"# repeated block (%1)"
argument_list|)
operator|.
name|arg
argument_list|(
name|blockName
argument_list|)
expr_stmt|;
name|insertAt
argument_list|(
name|m_currentCommandIndex
argument_list|,
name|block
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_drawLine
name|void
name|PaintCommands
operator|::
name|command_drawLine
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|double
name|x1
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|y1
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|x2
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|y2
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) drawLine((%.2f, %.2f), (%.2f, %.2f))\n"
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|drawLine
argument_list|(
name|QLineF
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_drawPath
name|void
name|PaintCommands
operator|::
name|command_drawPath
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) drawPath(name=%s)\n"
argument_list|,
name|qPrintable
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QPainterPath
modifier|&
name|path
init|=
name|m_pathMap
index|[
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
index|]
decl_stmt|;
name|m_painter
operator|->
name|drawPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_drawPixmap
name|void
name|PaintCommands
operator|::
name|command_drawPixmap
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QPixmap
name|pm
decl_stmt|;
name|pm
operator|=
name|m_pixmapMap
index|[
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
index|]
expr_stmt|;
comment|// try cache first
if|if
condition|(
name|pm
operator|.
name|isNull
argument_list|()
condition|)
name|pm
operator|=
name|image_load
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|pm
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QFileInfo
name|fi
argument_list|(
name|m_filepath
argument_list|)
decl_stmt|;
name|QDir
name|dir
init|=
name|fi
operator|.
name|absoluteDir
argument_list|()
decl_stmt|;
name|dir
operator|.
name|cdUp
argument_list|()
expr_stmt|;
name|dir
operator|.
name|cd
argument_list|(
literal|"images"
argument_list|)
expr_stmt|;
name|QString
name|fileName
init|=
name|QString
argument_list|(
literal|"%1/%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|dir
operator|.
name|absolutePath
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|pm
operator|=
name|QPixmap
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
if|if
condition|(
name|pm
operator|.
name|isNull
argument_list|()
operator|&&
operator|!
name|fileName
operator|.
name|endsWith
argument_list|(
literal|".png"
argument_list|)
condition|)
block|{
name|fileName
operator|.
name|append
argument_list|(
literal|".png"
argument_list|)
expr_stmt|;
name|pm
operator|=
name|QPixmap
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pm
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"ERROR(drawPixmap): failed to load pixmap: '%s'\n"
argument_list|,
name|qPrintable
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|qreal
name|tx
init|=
name|convertToFloat
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|qreal
name|ty
init|=
name|convertToFloat
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|qreal
name|tw
init|=
name|convertToFloat
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|qreal
name|th
init|=
name|convertToFloat
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|qreal
name|sx
init|=
name|convertToFloat
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|6
argument_list|)
argument_list|)
decl_stmt|;
name|qreal
name|sy
init|=
name|convertToFloat
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|7
argument_list|)
argument_list|)
decl_stmt|;
name|qreal
name|sw
init|=
name|convertToFloat
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|qreal
name|sh
init|=
name|convertToFloat
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|9
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tw
operator|==
literal|0
condition|)
name|tw
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|th
operator|==
literal|0
condition|)
name|th
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|sw
operator|==
literal|0
condition|)
name|sw
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|sh
operator|==
literal|0
condition|)
name|sh
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) drawPixmap('%s' dim=(%d, %d), depth=%d, (%f, %f, %f, %f), (%f, %f, %f, %f)\n"
argument_list|,
name|qPrintable
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|pm
operator|.
name|width
argument_list|()
argument_list|,
name|pm
operator|.
name|height
argument_list|()
argument_list|,
name|pm
operator|.
name|depth
argument_list|()
argument_list|,
name|tx
argument_list|,
name|ty
argument_list|,
name|tw
argument_list|,
name|th
argument_list|,
name|sx
argument_list|,
name|sy
argument_list|,
name|sw
argument_list|,
name|sh
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|drawPixmap
argument_list|(
name|QRectF
argument_list|(
name|tx
argument_list|,
name|ty
argument_list|,
name|tw
argument_list|,
name|th
argument_list|)
argument_list|,
name|pm
argument_list|,
name|QRectF
argument_list|(
name|sx
argument_list|,
name|sy
argument_list|,
name|sw
argument_list|,
name|sh
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_drawImage
name|void
name|PaintCommands
operator|::
name|command_drawImage
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QImage
name|im
decl_stmt|;
name|im
operator|=
name|m_imageMap
index|[
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
index|]
expr_stmt|;
comment|// try cache first
if|if
condition|(
name|im
operator|.
name|isNull
argument_list|()
condition|)
name|im
operator|=
name|image_load
argument_list|<
name|QImage
argument_list|>
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|im
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QFileInfo
name|fi
argument_list|(
name|m_filepath
argument_list|)
decl_stmt|;
name|QDir
name|dir
init|=
name|fi
operator|.
name|absoluteDir
argument_list|()
decl_stmt|;
name|dir
operator|.
name|cdUp
argument_list|()
expr_stmt|;
name|dir
operator|.
name|cd
argument_list|(
literal|"images"
argument_list|)
expr_stmt|;
name|QString
name|fileName
init|=
name|QString
argument_list|(
literal|"%1/%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|dir
operator|.
name|absolutePath
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|im
operator|=
name|QImage
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
if|if
condition|(
name|im
operator|.
name|isNull
argument_list|()
operator|&&
operator|!
name|fileName
operator|.
name|endsWith
argument_list|(
literal|".png"
argument_list|)
condition|)
block|{
name|fileName
operator|.
name|append
argument_list|(
literal|".png"
argument_list|)
expr_stmt|;
name|im
operator|=
name|QImage
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|im
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"ERROR(drawImage): failed to load image: '%s'\n"
argument_list|,
name|qPrintable
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|qreal
name|tx
init|=
name|convertToFloat
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|qreal
name|ty
init|=
name|convertToFloat
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|qreal
name|tw
init|=
name|convertToFloat
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|qreal
name|th
init|=
name|convertToFloat
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|qreal
name|sx
init|=
name|convertToFloat
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|6
argument_list|)
argument_list|)
decl_stmt|;
name|qreal
name|sy
init|=
name|convertToFloat
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|7
argument_list|)
argument_list|)
decl_stmt|;
name|qreal
name|sw
init|=
name|convertToFloat
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|qreal
name|sh
init|=
name|convertToFloat
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|9
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tw
operator|==
literal|0
condition|)
name|tw
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|th
operator|==
literal|0
condition|)
name|th
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|sw
operator|==
literal|0
condition|)
name|sw
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|sh
operator|==
literal|0
condition|)
name|sh
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) drawImage('%s' dim=(%d, %d), (%f, %f, %f, %f), (%f, %f, %f, %f)\n"
argument_list|,
name|qPrintable
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|im
operator|.
name|width
argument_list|()
argument_list|,
name|im
operator|.
name|height
argument_list|()
argument_list|,
name|tx
argument_list|,
name|ty
argument_list|,
name|tw
argument_list|,
name|th
argument_list|,
name|sx
argument_list|,
name|sy
argument_list|,
name|sw
argument_list|,
name|sh
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|drawImage
argument_list|(
name|QRectF
argument_list|(
name|tx
argument_list|,
name|ty
argument_list|,
name|tw
argument_list|,
name|th
argument_list|)
argument_list|,
name|im
argument_list|,
name|QRectF
argument_list|(
name|sx
argument_list|,
name|sy
argument_list|,
name|sw
argument_list|,
name|sh
argument_list|)
argument_list|,
name|Qt
operator|::
name|OrderedDither
operator||
name|Qt
operator|::
name|OrderedAlphaDither
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_drawTiledPixmap
name|void
name|PaintCommands
operator|::
name|command_drawTiledPixmap
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QPixmap
name|pm
decl_stmt|;
name|pm
operator|=
name|m_pixmapMap
index|[
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
index|]
expr_stmt|;
comment|// try cache first
if|if
condition|(
name|pm
operator|.
name|isNull
argument_list|()
condition|)
name|pm
operator|=
name|image_load
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|pm
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QFileInfo
name|fi
argument_list|(
name|m_filepath
argument_list|)
decl_stmt|;
name|QDir
name|dir
init|=
name|fi
operator|.
name|absoluteDir
argument_list|()
decl_stmt|;
name|dir
operator|.
name|cdUp
argument_list|()
expr_stmt|;
name|dir
operator|.
name|cd
argument_list|(
literal|"images"
argument_list|)
expr_stmt|;
name|QString
name|fileName
init|=
name|QString
argument_list|(
literal|"%1/%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|dir
operator|.
name|absolutePath
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|pm
operator|=
name|QPixmap
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
if|if
condition|(
name|pm
operator|.
name|isNull
argument_list|()
operator|&&
operator|!
name|fileName
operator|.
name|endsWith
argument_list|(
literal|".png"
argument_list|)
condition|)
block|{
name|fileName
operator|.
name|append
argument_list|(
literal|".png"
argument_list|)
expr_stmt|;
name|pm
operator|=
name|QPixmap
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pm
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"ERROR(drawTiledPixmap): failed to load pixmap: '%s'\n"
argument_list|,
name|qPrintable
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|tx
init|=
name|convertToInt
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|ty
init|=
name|convertToInt
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|tw
init|=
name|convertToInt
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|th
init|=
name|convertToInt
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|sx
init|=
name|convertToInt
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|6
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|sy
init|=
name|convertToInt
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|7
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tw
operator|==
literal|0
condition|)
name|tw
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|th
operator|==
literal|0
condition|)
name|th
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) drawTiledPixmap('%s' dim=(%d, %d), (%d, %d, %d, %d), (%d, %d)\n"
argument_list|,
name|qPrintable
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|pm
operator|.
name|width
argument_list|()
argument_list|,
name|pm
operator|.
name|height
argument_list|()
argument_list|,
name|tx
argument_list|,
name|ty
argument_list|,
name|tw
argument_list|,
name|th
argument_list|,
name|sx
argument_list|,
name|sy
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|drawTiledPixmap
argument_list|(
name|tx
argument_list|,
name|ty
argument_list|,
name|tw
argument_list|,
name|th
argument_list|,
name|pm
argument_list|,
name|sx
argument_list|,
name|sy
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_drawPoint
name|void
name|PaintCommands
operator|::
name|command_drawPoint
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|float
name|x
init|=
name|convertToFloat
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|float
name|y
init|=
name|convertToFloat
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) drawPoint(%.2f, %.2f)\n"
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|drawPoint
argument_list|(
name|QPointF
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_drawPolygon
name|void
name|PaintCommands
operator|::
name|command_drawPolygon
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
specifier|static
name|QRegExp
name|separators
argument_list|(
literal|"\\s"
argument_list|)
decl_stmt|;
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|QString
name|cap
init|=
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QStringList
name|numbers
init|=
name|cap
operator|.
name|split
argument_list|(
name|separators
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
name|QPolygonF
name|array
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|+
literal|1
operator|<
name|numbers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|+=
literal|2
control|)
name|array
operator|.
name|append
argument_list|(
name|QPointF
argument_list|(
name|convertToDouble
argument_list|(
name|numbers
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|convertToDouble
argument_list|(
name|numbers
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) drawPolygon(size=%d)\n"
argument_list|,
name|array
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|drawPolygon
argument_list|(
name|array
argument_list|,
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toLower
argument_list|()
operator|==
literal|"winding"
condition|?
name|Qt
operator|::
name|WindingFill
else|:
name|Qt
operator|::
name|OddEvenFill
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_drawPolyline
name|void
name|PaintCommands
operator|::
name|command_drawPolyline
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
specifier|static
name|QRegExp
name|separators
argument_list|(
literal|"\\s"
argument_list|)
decl_stmt|;
name|QStringList
name|numbers
init|=
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|split
argument_list|(
name|separators
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
name|QPolygonF
name|array
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|+
literal|1
operator|<
name|numbers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|+=
literal|2
control|)
name|array
operator|.
name|append
argument_list|(
name|QPointF
argument_list|(
name|numbers
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toFloat
argument_list|()
argument_list|,
name|numbers
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|toFloat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) drawPolyline(size=%d)\n"
argument_list|,
name|array
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|drawPolyline
argument_list|(
name|array
operator|.
name|toPolygon
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_drawRect
name|void
name|PaintCommands
operator|::
name|command_drawRect
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|float
name|x
init|=
name|convertToFloat
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|float
name|y
init|=
name|convertToFloat
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|float
name|w
init|=
name|convertToFloat
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|float
name|h
init|=
name|convertToFloat
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) drawRect(%.2f, %.2f, %.2f, %.2f)\n"
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|drawRect
argument_list|(
name|QRectF
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_drawRoundedRect
name|void
name|PaintCommands
operator|::
name|command_drawRoundedRect
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|float
name|x
init|=
name|convertToFloat
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|float
name|y
init|=
name|convertToFloat
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|float
name|w
init|=
name|convertToFloat
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|float
name|h
init|=
name|convertToFloat
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|float
name|xr
init|=
name|convertToFloat
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|float
name|yr
init|=
name|convertToFloat
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|6
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|mode
init|=
name|translateEnum
argument_list|(
name|sizeModeTable
argument_list|,
name|caps
operator|.
name|at
argument_list|(
literal|7
argument_list|)
argument_list|,
sizeof|sizeof
argument_list|(
name|sizeModeTable
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|char
operator|*
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mode
operator|<
literal|0
condition|)
name|mode
operator|=
name|Qt
operator|::
name|AbsoluteSize
expr_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) drawRoundRect(%f, %f, %f, %f, %f, %f, %s)\n"
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|xr
argument_list|,
name|yr
argument_list|,
name|mode
condition|?
literal|"RelativeSize"
else|:
literal|"AbsoluteSize"
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|drawRoundedRect
argument_list|(
name|QRectF
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
argument_list|,
name|xr
argument_list|,
name|yr
argument_list|,
name|Qt
operator|::
name|SizeMode
argument_list|(
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_drawRoundRect
name|void
name|PaintCommands
operator|::
name|command_drawRoundRect
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|int
name|x
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|y
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|w
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|h
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|xs
init|=
name|caps
operator|.
name|at
argument_list|(
literal|5
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
literal|50
else|:
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|ys
init|=
name|caps
operator|.
name|at
argument_list|(
literal|6
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
literal|50
else|:
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|6
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) drawRoundRect(%d, %d, %d, %d, [%d, %d])\n"
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|xs
argument_list|,
name|ys
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|drawRoundRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|xs
argument_list|,
name|ys
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_drawEllipse
name|void
name|PaintCommands
operator|::
name|command_drawEllipse
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|float
name|x
init|=
name|convertToFloat
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|float
name|y
init|=
name|convertToFloat
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|float
name|w
init|=
name|convertToFloat
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|float
name|h
init|=
name|convertToFloat
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) drawEllipse(%.2f, %.2f, %.2f, %.2f)\n"
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|drawEllipse
argument_list|(
name|QRectF
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_drawPie
name|void
name|PaintCommands
operator|::
name|command_drawPie
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|int
name|x
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|y
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|w
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|h
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|angle
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|sweep
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|6
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) drawPie(%d, %d, %d, %d, %d, %d)\n"
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|angle
argument_list|,
name|sweep
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|drawPie
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|angle
argument_list|,
name|sweep
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_drawChord
name|void
name|PaintCommands
operator|::
name|command_drawChord
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|int
name|x
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|y
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|w
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|h
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|angle
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|sweep
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|6
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) drawChord(%d, %d, %d, %d, %d, %d)\n"
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|angle
argument_list|,
name|sweep
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|drawChord
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|angle
argument_list|,
name|sweep
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_drawArc
name|void
name|PaintCommands
operator|::
name|command_drawArc
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|int
name|x
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|y
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|w
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|h
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|angle
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|sweep
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|6
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) drawArc(%d, %d, %d, %d, %d, %d)\n"
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|angle
argument_list|,
name|sweep
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|drawArc
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|angle
argument_list|,
name|sweep
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT3_SUPPORT
end_ifdef
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_qt3_drawRect
name|void
name|PaintCommands
operator|::
name|command_qt3_drawRect
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|re
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT3_SUPPORT
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|int
name|x
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|y
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|w
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|h
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) qt3_drawRect(%d, %d, %d, %d)\n"
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
cast|static_cast
argument_list|<
name|Q3Painter
operator|*
argument_list|>
argument_list|(
name|m_painter
argument_list|)
operator|->
name|drawRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_qt3_drawRoundRect
name|void
name|PaintCommands
operator|::
name|command_qt3_drawRoundRect
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|re
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT3_SUPPORT
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|int
name|x
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|y
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|w
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|h
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|xrnd
init|=
name|caps
operator|.
name|at
argument_list|(
literal|5
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
literal|25
else|:
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|yrnd
init|=
name|caps
operator|.
name|at
argument_list|(
literal|6
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
literal|25
else|:
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|6
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) qt3_drawRoundRect(%d, %d, %d, %d), %d, %d\n"
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|xrnd
argument_list|,
name|yrnd
argument_list|)
expr_stmt|;
cast|static_cast
argument_list|<
name|Q3Painter
operator|*
argument_list|>
argument_list|(
name|m_painter
argument_list|)
operator|->
name|drawRoundRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|xrnd
argument_list|,
name|yrnd
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_qt3_drawEllipse
name|void
name|PaintCommands
operator|::
name|command_qt3_drawEllipse
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|re
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT3_SUPPORT
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|int
name|x
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|y
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|w
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|h
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) qt3_drawEllipse(%d, %d, %d, %d)\n"
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
cast|static_cast
argument_list|<
name|Q3Painter
operator|*
argument_list|>
argument_list|(
name|m_painter
argument_list|)
operator|->
name|drawEllipse
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_qt3_drawPie
name|void
name|PaintCommands
operator|::
name|command_qt3_drawPie
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|re
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT3_SUPPORT
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|int
name|x
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|y
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|w
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|h
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|angle
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|sweep
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|6
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) qt3_drawPie(%d, %d, %d, %d, %d, %d)\n"
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|angle
argument_list|,
name|sweep
argument_list|)
expr_stmt|;
cast|static_cast
argument_list|<
name|Q3Painter
operator|*
argument_list|>
argument_list|(
name|m_painter
argument_list|)
operator|->
name|drawPie
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|angle
argument_list|,
name|sweep
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_qt3_drawChord
name|void
name|PaintCommands
operator|::
name|command_qt3_drawChord
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|re
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT3_SUPPORT
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|int
name|x
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|y
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|w
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|h
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|angle
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|sweep
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|6
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) qt3_drawChord(%d, %d, %d, %d, %d, %d)\n"
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|angle
argument_list|,
name|sweep
argument_list|)
expr_stmt|;
cast|static_cast
argument_list|<
name|Q3Painter
operator|*
argument_list|>
argument_list|(
name|m_painter
argument_list|)
operator|->
name|drawChord
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|angle
argument_list|,
name|sweep
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_qt3_drawArc
name|void
name|PaintCommands
operator|::
name|command_qt3_drawArc
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|re
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT3_SUPPORT
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|int
name|x
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|y
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|w
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|h
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|angle
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|sweep
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|6
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) qt3_drawArc(%d, %d, %d, %d, %d, %d)\n"
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|angle
argument_list|,
name|sweep
argument_list|)
expr_stmt|;
cast|static_cast
argument_list|<
name|Q3Painter
operator|*
argument_list|>
argument_list|(
name|m_painter
argument_list|)
operator|->
name|drawArc
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|angle
argument_list|,
name|sweep
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT3_SUPPORT
end_comment
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_drawText
name|void
name|PaintCommands
operator|::
name|command_drawText
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_shouldDrawText
condition|)
return|return;
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|int
name|x
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|y
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|txt
init|=
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) drawText(%d, %d, %s)\n"
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|qPrintable
argument_list|(
name|txt
argument_list|)
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|drawText
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|txt
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_noop
name|void
name|PaintCommands
operator|::
name|command_noop
parameter_list|(
name|QRegExp
parameter_list|)
block|{
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) noop: %s\n"
argument_list|,
name|qPrintable
argument_list|(
name|m_currentCommand
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_currentCommand
operator|.
name|trimmed
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"unknown command: '%s'\n"
argument_list|,
name|qPrintable
argument_list|(
name|m_currentCommand
operator|.
name|trimmed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_path_addText
name|void
name|PaintCommands
operator|::
name|command_path_addText
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|QString
name|name
init|=
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|double
name|x
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|y
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|text
init|=
name|caps
operator|.
name|at
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) path_addText(%s, %.2f, %.2f, text=%s\n"
argument_list|,
name|qPrintable
argument_list|(
name|name
argument_list|)
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|qPrintable
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
name|m_pathMap
index|[
name|name
index|]
operator|.
name|addText
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|m_painter
operator|->
name|font
argument_list|()
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_path_addEllipse
name|void
name|PaintCommands
operator|::
name|command_path_addEllipse
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|QString
name|name
init|=
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|double
name|x
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|y
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|w
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|h
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) path_addEllipse(%s, %.2f, %.2f, %.2f, %.2f)\n"
argument_list|,
name|qPrintable
argument_list|(
name|name
argument_list|)
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|m_pathMap
index|[
name|name
index|]
operator|.
name|addEllipse
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_path_addRect
name|void
name|PaintCommands
operator|::
name|command_path_addRect
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|QString
name|name
init|=
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|double
name|x
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|y
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|w
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|h
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) path_addRect(%s, %.2f, %.2f, %.2f, %.2f)\n"
argument_list|,
name|qPrintable
argument_list|(
name|name
argument_list|)
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|m_pathMap
index|[
name|name
index|]
operator|.
name|addRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_path_addPolygon
name|void
name|PaintCommands
operator|::
name|command_path_addPolygon
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
specifier|static
name|QRegExp
name|separators
argument_list|(
literal|"\\s"
argument_list|)
decl_stmt|;
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|QString
name|name
init|=
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QString
name|cap
init|=
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|QStringList
name|numbers
init|=
name|cap
operator|.
name|split
argument_list|(
name|separators
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
name|QPolygonF
name|array
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|+
literal|1
operator|<
name|numbers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|+=
literal|2
control|)
name|array
operator|.
name|append
argument_list|(
name|QPointF
argument_list|(
name|numbers
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toFloat
argument_list|()
argument_list|,
name|numbers
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|toFloat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) path_addPolygon(name=%s, size=%d)\n"
argument_list|,
name|qPrintable
argument_list|(
name|name
argument_list|)
argument_list|,
name|array
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|m_pathMap
index|[
name|name
index|]
operator|.
name|addPolygon
argument_list|(
name|array
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_path_arcTo
name|void
name|PaintCommands
operator|::
name|command_path_arcTo
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|QString
name|name
init|=
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|double
name|x
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|y
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|w
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|h
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|angle
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|6
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|length
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|7
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) path_arcTo(%s, %.2f, %.2f, %.2f, %.2f, angle=%.2f, len=%.2f)\n"
argument_list|,
name|qPrintable
argument_list|(
name|name
argument_list|)
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|angle
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|m_pathMap
index|[
name|name
index|]
operator|.
name|arcTo
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|angle
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_path_createOutline
name|void
name|PaintCommands
operator|::
name|command_path_createOutline
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|QString
name|name
init|=
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QString
name|newName
init|=
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|QPen
name|pen
init|=
name|m_painter
operator|->
name|pen
argument_list|()
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) path_createOutline(%s, name=%s, width=%d)\n"
argument_list|,
name|qPrintable
argument_list|(
name|name
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|newName
argument_list|)
argument_list|,
name|pen
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_pathMap
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"createOutline(), unknown path: %s\n"
argument_list|,
name|qPrintable
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|QPainterPathStroker
name|stroker
decl_stmt|;
name|stroker
operator|.
name|setWidth
argument_list|(
name|pen
operator|.
name|widthF
argument_list|()
argument_list|)
expr_stmt|;
name|stroker
operator|.
name|setDashPattern
argument_list|(
name|pen
operator|.
name|style
argument_list|()
argument_list|)
expr_stmt|;
name|stroker
operator|.
name|setCapStyle
argument_list|(
name|pen
operator|.
name|capStyle
argument_list|()
argument_list|)
expr_stmt|;
name|stroker
operator|.
name|setJoinStyle
argument_list|(
name|pen
operator|.
name|joinStyle
argument_list|()
argument_list|)
expr_stmt|;
name|m_pathMap
index|[
name|newName
index|]
operator|=
name|stroker
operator|.
name|createStroke
argument_list|(
name|m_pathMap
index|[
name|name
index|]
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_path_cubicTo
name|void
name|PaintCommands
operator|::
name|command_path_cubicTo
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|QString
name|name
init|=
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|double
name|x1
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|y1
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|x2
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|y2
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|x3
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|6
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|y3
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|7
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) path_cubicTo(%s, (%.2f, %.2f), (%.2f, %.2f), (%.2f, %.2f))\n"
argument_list|,
name|qPrintable
argument_list|(
name|name
argument_list|)
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|x3
argument_list|,
name|y3
argument_list|)
expr_stmt|;
name|m_pathMap
index|[
name|name
index|]
operator|.
name|cubicTo
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|x3
argument_list|,
name|y3
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_path_moveTo
name|void
name|PaintCommands
operator|::
name|command_path_moveTo
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|QString
name|name
init|=
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|double
name|x1
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|y1
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) path_moveTo(%s, (%.2f, %.2f))\n"
argument_list|,
name|qPrintable
argument_list|(
name|name
argument_list|)
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|m_pathMap
index|[
name|name
index|]
operator|.
name|moveTo
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_path_lineTo
name|void
name|PaintCommands
operator|::
name|command_path_lineTo
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|QString
name|name
init|=
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|double
name|x1
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|y1
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) path_lineTo(%s, (%.2f, %.2f))\n"
argument_list|,
name|qPrintable
argument_list|(
name|name
argument_list|)
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|m_pathMap
index|[
name|name
index|]
operator|.
name|lineTo
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_path_setFillRule
name|void
name|PaintCommands
operator|::
name|command_path_setFillRule
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|QString
name|name
init|=
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|bool
name|winding
init|=
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toLower
argument_list|()
operator|==
literal|"winding"
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) path_setFillRule(name=%s, winding=%d)\n"
argument_list|,
name|qPrintable
argument_list|(
name|name
argument_list|)
argument_list|,
name|winding
argument_list|)
expr_stmt|;
name|m_pathMap
index|[
name|name
index|]
operator|.
name|setFillRule
argument_list|(
name|winding
condition|?
name|Qt
operator|::
name|WindingFill
else|:
name|Qt
operator|::
name|OddEvenFill
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_path_closeSubpath
name|void
name|PaintCommands
operator|::
name|command_path_closeSubpath
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|QString
name|name
init|=
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) path_closeSubpath(name=%s)\n"
argument_list|,
name|qPrintable
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|m_pathMap
index|[
name|name
index|]
operator|.
name|closeSubpath
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_path_getClipPath
name|void
name|PaintCommands
operator|::
name|command_path_getClipPath
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|QString
name|name
init|=
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) path_closeSubpath(name=%s)\n"
argument_list|,
name|qPrintable
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|m_pathMap
index|[
name|name
index|]
operator|=
name|m_painter
operator|->
name|clipPath
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|qt_debug_path
specifier|static
name|void
name|qt_debug_path
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
specifier|const
name|char
modifier|*
name|names
index|[]
init|=
block|{
literal|"MoveTo     "
block|,
literal|"LineTo     "
block|,
literal|"CurveTo    "
block|,
literal|"CurveToData"
block|}
decl_stmt|;
name|printf
argument_list|(
literal|"\nQPainterPath (%s): elementCount=%d\n"
argument_list|,
name|qPrintable
argument_list|(
name|name
argument_list|)
argument_list|,
name|path
operator|.
name|elementCount
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|path
operator|.
name|elementCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QPainterPath
operator|::
name|Element
modifier|&
name|e
init|=
name|path
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|e
operator|.
name|type
operator|>=
literal|0
operator|&&
name|e
operator|.
name|type
operator|<=
name|QPainterPath
operator|::
name|CurveToDataElement
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|" - %3d:: %s, (%.2f, %.2f)\n"
argument_list|,
name|i
argument_list|,
name|names
index|[
name|e
operator|.
name|type
index|]
argument_list|,
name|e
operator|.
name|x
argument_list|,
name|e
operator|.
name|y
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_path_debugPrint
name|void
name|PaintCommands
operator|::
name|command_path_debugPrint
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|QString
name|name
init|=
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|qt_debug_path
argument_list|(
name|m_pathMap
index|[
name|name
index|]
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_region_addRect
name|void
name|PaintCommands
operator|::
name|command_region_addRect
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|QString
name|name
init|=
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|int
name|x
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|y
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|w
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|h
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) region_addRect(%s, %d, %d, %d, %d)\n"
argument_list|,
name|qPrintable
argument_list|(
name|name
argument_list|)
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|m_regionMap
index|[
name|name
index|]
operator|+=
name|QRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_region_addEllipse
name|void
name|PaintCommands
operator|::
name|command_region_addEllipse
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|QString
name|name
init|=
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|int
name|x
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|y
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|w
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|h
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) region_addEllipse(%s, %d, %d, %d, %d)\n"
argument_list|,
name|qPrintable
argument_list|(
name|name
argument_list|)
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|m_regionMap
index|[
name|name
index|]
operator|+=
name|QRegion
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|QRegion
operator|::
name|Ellipse
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_region_getClipRegion
name|void
name|PaintCommands
operator|::
name|command_region_getClipRegion
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|QString
name|name
init|=
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QRegion
name|region
init|=
name|m_painter
operator|->
name|clipRegion
argument_list|()
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) region_getClipRegion(name=%s), bounds=[%d, %d, %d, %d]\n"
argument_list|,
name|qPrintable
argument_list|(
name|name
argument_list|)
argument_list|,
name|region
operator|.
name|boundingRect
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|region
operator|.
name|boundingRect
argument_list|()
operator|.
name|y
argument_list|()
argument_list|,
name|region
operator|.
name|boundingRect
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|region
operator|.
name|boundingRect
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|m_regionMap
index|[
name|name
index|]
operator|=
name|region
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_resetMatrix
name|void
name|PaintCommands
operator|::
name|command_resetMatrix
parameter_list|(
name|QRegExp
parameter_list|)
block|{
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) resetMatrix()\n"
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|resetTransform
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_restore
name|void
name|PaintCommands
operator|::
name|command_restore
parameter_list|(
name|QRegExp
parameter_list|)
block|{
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) restore()\n"
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_rotate
name|void
name|PaintCommands
operator|::
name|command_rotate
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|double
name|angle
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) rotate(%.2f)\n"
argument_list|,
name|angle
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|rotate
argument_list|(
name|angle
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_rotate_x
name|void
name|PaintCommands
operator|::
name|command_rotate_x
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|double
name|angle
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) rotate_x(%.2f)\n"
argument_list|,
name|angle
argument_list|)
expr_stmt|;
name|QTransform
name|transform
decl_stmt|;
name|transform
operator|.
name|rotate
argument_list|(
name|angle
argument_list|,
name|Qt
operator|::
name|XAxis
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|setTransform
argument_list|(
name|transform
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_rotate_y
name|void
name|PaintCommands
operator|::
name|command_rotate_y
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|double
name|angle
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) rotate_y(%.2f)\n"
argument_list|,
name|angle
argument_list|)
expr_stmt|;
name|QTransform
name|transform
decl_stmt|;
name|transform
operator|.
name|rotate
argument_list|(
name|angle
argument_list|,
name|Qt
operator|::
name|YAxis
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|setTransform
argument_list|(
name|transform
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_save
name|void
name|PaintCommands
operator|::
name|command_save
parameter_list|(
name|QRegExp
parameter_list|)
block|{
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) save()\n"
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|save
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_mapQuadToQuad
name|void
name|PaintCommands
operator|::
name|command_mapQuadToQuad
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|double
name|x1
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|y1
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|x2
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|y2
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|x3
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|y3
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|6
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|x4
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|7
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|y4
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|QPolygonF
name|poly1
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|poly1
index|[
literal|0
index|]
operator|=
name|QPointF
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|poly1
index|[
literal|1
index|]
operator|=
name|QPointF
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|poly1
index|[
literal|2
index|]
operator|=
name|QPointF
argument_list|(
name|x3
argument_list|,
name|y3
argument_list|)
expr_stmt|;
name|poly1
index|[
literal|3
index|]
operator|=
name|QPointF
argument_list|(
name|x4
argument_list|,
name|y4
argument_list|)
expr_stmt|;
name|double
name|x5
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|9
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|y5
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|x6
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|11
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|y6
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|12
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|x7
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|13
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|y7
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|14
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|x8
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|15
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|y8
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|16
argument_list|)
argument_list|)
decl_stmt|;
name|QPolygonF
name|poly2
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|poly2
index|[
literal|0
index|]
operator|=
name|QPointF
argument_list|(
name|x5
argument_list|,
name|y5
argument_list|)
expr_stmt|;
name|poly2
index|[
literal|1
index|]
operator|=
name|QPointF
argument_list|(
name|x6
argument_list|,
name|y6
argument_list|)
expr_stmt|;
name|poly2
index|[
literal|2
index|]
operator|=
name|QPointF
argument_list|(
name|x7
argument_list|,
name|y7
argument_list|)
expr_stmt|;
name|poly2
index|[
literal|3
index|]
operator|=
name|QPointF
argument_list|(
name|x8
argument_list|,
name|y8
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) mapQuadToQuad(%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f ->\n\t"
literal|",%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f)\n"
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|x3
argument_list|,
name|y3
argument_list|,
name|x4
argument_list|,
name|y4
argument_list|,
name|x5
argument_list|,
name|y5
argument_list|,
name|x6
argument_list|,
name|y6
argument_list|,
name|x7
argument_list|,
name|y7
argument_list|,
name|x8
argument_list|,
name|y8
argument_list|)
expr_stmt|;
name|QTransform
name|trans
decl_stmt|;
if|if
condition|(
operator|!
name|QTransform
operator|::
name|quadToQuad
argument_list|(
name|poly1
argument_list|,
name|poly2
argument_list|,
name|trans
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Couldn't perform quad to quad transformation!"
argument_list|)
expr_stmt|;
block|}
name|m_painter
operator|->
name|setTransform
argument_list|(
name|trans
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_setMatrix
name|void
name|PaintCommands
operator|::
name|command_setMatrix
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|double
name|m11
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|m12
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|m13
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|m21
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|m22
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|m23
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|6
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|m31
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|7
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|m32
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|m33
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|9
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) setMatrix(%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f)\n"
argument_list|,
name|m11
argument_list|,
name|m12
argument_list|,
name|m13
argument_list|,
name|m21
argument_list|,
name|m22
argument_list|,
name|m23
argument_list|,
name|m31
argument_list|,
name|m32
argument_list|,
name|m33
argument_list|)
expr_stmt|;
name|QTransform
name|trans
decl_stmt|;
name|trans
operator|.
name|setMatrix
argument_list|(
name|m11
argument_list|,
name|m12
argument_list|,
name|m13
argument_list|,
name|m21
argument_list|,
name|m22
argument_list|,
name|m23
argument_list|,
name|m31
argument_list|,
name|m32
argument_list|,
name|m33
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|setTransform
argument_list|(
name|trans
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_scale
name|void
name|PaintCommands
operator|::
name|command_scale
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|double
name|sx
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|sy
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) scale(%.2f, %.2f)\n"
argument_list|,
name|sx
argument_list|,
name|sy
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|scale
argument_list|(
name|sx
argument_list|,
name|sy
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_setBackground
name|void
name|PaintCommands
operator|::
name|command_setBackground
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|QColor
name|color
init|=
name|convertToColor
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|pattern
init|=
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|int
name|style
init|=
name|translateEnum
argument_list|(
name|brushStyleTable
argument_list|,
name|pattern
argument_list|,
name|Qt
operator|::
name|LinearGradientPattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|style
operator|<
literal|0
condition|)
name|style
operator|=
name|Qt
operator|::
name|SolidPattern
expr_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) setBackground(%s, %s)\n"
argument_list|,
name|qPrintable
argument_list|(
name|color
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|setBackground
argument_list|(
name|QBrush
argument_list|(
name|color
argument_list|,
name|Qt
operator|::
name|BrushStyle
argument_list|(
name|style
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_setOpacity
name|void
name|PaintCommands
operator|::
name|command_setOpacity
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|double
name|opacity
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) setOpacity(%lf)\n"
argument_list|,
name|opacity
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|setOpacity
argument_list|(
name|opacity
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_setBgMode
name|void
name|PaintCommands
operator|::
name|command_setBgMode
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QString
name|cap
init|=
name|re
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|BGMode
name|mode
init|=
name|Qt
operator|::
name|TransparentMode
decl_stmt|;
if|if
condition|(
name|cap
operator|.
name|toLower
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"opaquemode"
argument_list|)
operator|||
name|cap
operator|.
name|toLower
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"opaque"
argument_list|)
condition|)
name|mode
operator|=
name|Qt
operator|::
name|OpaqueMode
expr_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) setBackgroundMode(%s)\n"
argument_list|,
name|mode
operator|==
name|Qt
operator|::
name|OpaqueMode
condition|?
literal|"OpaqueMode"
else|:
literal|"TransparentMode"
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|setBackgroundMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_setBrush
name|void
name|PaintCommands
operator|::
name|command_setBrush
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|QPixmap
name|pm
init|=
name|image_load
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pm
operator|.
name|isNull
argument_list|()
condition|)
block|{
comment|// Assume pixmap
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) setBrush(pixmap=%s, width=%d, height=%d)\n"
argument_list|,
name|qPrintable
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|pm
operator|.
name|width
argument_list|()
argument_list|,
name|pm
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|setBrush
argument_list|(
name|QBrush
argument_list|(
name|pm
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toLower
argument_list|()
operator|==
literal|"nobrush"
condition|)
block|{
name|m_painter
operator|->
name|setBrush
argument_list|(
name|Qt
operator|::
name|NoBrush
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) setBrush(Qt::NoBrush)\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QColor
name|color
init|=
name|convertToColor
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|pattern
init|=
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|int
name|style
init|=
name|translateEnum
argument_list|(
name|brushStyleTable
argument_list|,
name|pattern
argument_list|,
name|Qt
operator|::
name|LinearGradientPattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|style
operator|<
literal|0
condition|)
name|style
operator|=
name|Qt
operator|::
name|SolidPattern
expr_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) setBrush(%s, %s (%d))\n"
argument_list|,
name|qPrintable
argument_list|(
name|color
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|pattern
argument_list|)
argument_list|,
name|style
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|setBrush
argument_list|(
name|QBrush
argument_list|(
name|color
argument_list|,
name|Qt
operator|::
name|BrushStyle
argument_list|(
name|style
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_setBrushOrigin
name|void
name|PaintCommands
operator|::
name|command_setBrushOrigin
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|int
name|x
init|=
name|convertToInt
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|y
init|=
name|convertToInt
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) setBrushOrigin(%d, %d)\n"
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|setBrushOrigin
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_brushTranslate
name|void
name|PaintCommands
operator|::
name|command_brushTranslate
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|double
name|dx
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|dy
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) brushTranslate(%f, %f)\n"
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
name|QBrush
name|new_brush
init|=
name|m_painter
operator|->
name|brush
argument_list|()
decl_stmt|;
name|QTransform
name|brush_matrix
init|=
name|new_brush
operator|.
name|transform
argument_list|()
decl_stmt|;
name|brush_matrix
operator|.
name|translate
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
name|new_brush
operator|.
name|setTransform
argument_list|(
name|brush_matrix
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|setBrush
argument_list|(
name|new_brush
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_brushScale
name|void
name|PaintCommands
operator|::
name|command_brushScale
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|double
name|sx
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|sy
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) brushScale(%f, %f)\n"
argument_list|,
name|sx
argument_list|,
name|sy
argument_list|)
expr_stmt|;
name|QBrush
name|new_brush
init|=
name|m_painter
operator|->
name|brush
argument_list|()
decl_stmt|;
name|QTransform
name|brush_matrix
init|=
name|new_brush
operator|.
name|transform
argument_list|()
decl_stmt|;
name|brush_matrix
operator|.
name|scale
argument_list|(
name|sx
argument_list|,
name|sy
argument_list|)
expr_stmt|;
name|new_brush
operator|.
name|setTransform
argument_list|(
name|brush_matrix
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|setBrush
argument_list|(
name|new_brush
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_brushRotate
name|void
name|PaintCommands
operator|::
name|command_brushRotate
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|double
name|rot
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) brushScale(%f)\n"
argument_list|,
name|rot
argument_list|)
expr_stmt|;
name|QBrush
name|new_brush
init|=
name|m_painter
operator|->
name|brush
argument_list|()
decl_stmt|;
name|QTransform
name|brush_matrix
init|=
name|new_brush
operator|.
name|transform
argument_list|()
decl_stmt|;
name|brush_matrix
operator|.
name|rotate
argument_list|(
name|rot
argument_list|)
expr_stmt|;
name|new_brush
operator|.
name|setTransform
argument_list|(
name|brush_matrix
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|setBrush
argument_list|(
name|new_brush
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_brushShear
name|void
name|PaintCommands
operator|::
name|command_brushShear
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|double
name|sx
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|sy
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) brushShear(%f, %f)\n"
argument_list|,
name|sx
argument_list|,
name|sy
argument_list|)
expr_stmt|;
name|QBrush
name|new_brush
init|=
name|m_painter
operator|->
name|brush
argument_list|()
decl_stmt|;
name|QTransform
name|brush_matrix
init|=
name|new_brush
operator|.
name|transform
argument_list|()
decl_stmt|;
name|brush_matrix
operator|.
name|shear
argument_list|(
name|sx
argument_list|,
name|sy
argument_list|)
expr_stmt|;
name|new_brush
operator|.
name|setTransform
argument_list|(
name|brush_matrix
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|setBrush
argument_list|(
name|new_brush
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_setClipping
name|void
name|PaintCommands
operator|::
name|command_setClipping
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|bool
name|clipping
init|=
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|toLower
argument_list|()
operator|==
literal|"true"
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) setClipping(%d)\n"
argument_list|,
name|clipping
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|setClipping
argument_list|(
name|clipping
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_setClipRect
name|void
name|PaintCommands
operator|::
name|command_setClipRect
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|int
name|x
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|y
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|w
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|h
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|combine
init|=
name|translateEnum
argument_list|(
name|clipOperationTable
argument_list|,
name|caps
operator|.
name|at
argument_list|(
literal|5
argument_list|)
argument_list|,
name|Qt
operator|::
name|UniteClip
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|combine
operator|==
operator|-
literal|1
condition|)
name|combine
operator|=
name|Qt
operator|::
name|ReplaceClip
expr_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) setClipRect(%d, %d, %d, %d), %s\n"
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|clipOperationTable
index|[
name|combine
index|]
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|setClipRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|Qt
operator|::
name|ClipOperation
argument_list|(
name|combine
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_setClipPath
name|void
name|PaintCommands
operator|::
name|command_setClipPath
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|int
name|combine
init|=
name|translateEnum
argument_list|(
name|clipOperationTable
argument_list|,
name|re
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
argument_list|,
name|Qt
operator|::
name|UniteClip
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|combine
operator|==
operator|-
literal|1
condition|)
name|combine
operator|=
name|Qt
operator|::
name|ReplaceClip
expr_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) setClipPath(name=%s), %s\n"
argument_list|,
name|qPrintable
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|clipOperationTable
index|[
name|combine
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_pathMap
operator|.
name|contains
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|" - setClipPath, no such path"
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|setClipPath
argument_list|(
name|m_pathMap
index|[
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
index|]
argument_list|,
name|Qt
operator|::
name|ClipOperation
argument_list|(
name|combine
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_setClipRegion
name|void
name|PaintCommands
operator|::
name|command_setClipRegion
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|int
name|combine
init|=
name|translateEnum
argument_list|(
name|clipOperationTable
argument_list|,
name|re
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
argument_list|,
name|Qt
operator|::
name|UniteClip
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|combine
operator|==
operator|-
literal|1
condition|)
name|combine
operator|=
name|Qt
operator|::
name|ReplaceClip
expr_stmt|;
name|QRegion
name|r
init|=
name|m_regionMap
index|[
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
index|]
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) setClipRegion(name=%s), bounds=[%d, %d, %d, %d], %s\n"
argument_list|,
name|qPrintable
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|r
operator|.
name|boundingRect
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|boundingRect
argument_list|()
operator|.
name|y
argument_list|()
argument_list|,
name|r
operator|.
name|boundingRect
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|boundingRect
argument_list|()
operator|.
name|height
argument_list|()
argument_list|,
name|clipOperationTable
index|[
name|combine
index|]
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|setClipRegion
argument_list|(
name|m_regionMap
index|[
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
index|]
argument_list|,
name|Qt
operator|::
name|ClipOperation
argument_list|(
name|combine
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_setFont
name|void
name|PaintCommands
operator|::
name|command_setFont
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|QString
name|family
init|=
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|weight
init|=
name|translateEnum
argument_list|(
name|fontWeightTable
argument_list|,
name|re
operator|.
name|cap
argument_list|(
literal|3
argument_list|)
operator|.
name|toLower
argument_list|()
argument_list|,
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
name|weight
operator|!=
operator|-
literal|1
condition|)
block|{
switch|switch
condition|(
name|weight
condition|)
block|{
case|case
literal|0
case|:
name|weight
operator|=
name|QFont
operator|::
name|Light
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|weight
operator|=
name|QFont
operator|::
name|Normal
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|weight
operator|=
name|QFont
operator|::
name|DemiBold
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|weight
operator|=
name|QFont
operator|::
name|Bold
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|weight
operator|=
name|QFont
operator|::
name|Black
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
name|weight
operator|=
name|convertToInt
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|bool
name|italic
init|=
name|caps
operator|.
name|at
argument_list|(
literal|4
argument_list|)
operator|.
name|toLower
argument_list|()
operator|==
literal|"true"
operator|||
name|caps
operator|.
name|at
argument_list|(
literal|4
argument_list|)
operator|.
name|toLower
argument_list|()
operator|==
literal|"italic"
decl_stmt|;
name|QFont
name|font
argument_list|(
name|family
argument_list|,
name|size
argument_list|,
name|weight
argument_list|,
name|italic
argument_list|)
decl_stmt|;
if|#
directive|if
name|QT_VERSION
operator|>=
literal|0x040800
name|int
name|hinting
init|=
name|translateEnum
argument_list|(
name|fontHintingTable
argument_list|,
name|caps
operator|.
name|at
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
name|hinting
operator|==
operator|-
literal|1
condition|)
name|hinting
operator|=
literal|0
expr_stmt|;
else|else
name|font
operator|.
name|setHintingPreference
argument_list|(
name|QFont
operator|::
name|HintingPreference
argument_list|(
name|hinting
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|int
name|hinting
init|=
literal|1
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) setFont(family=%s, size=%d, weight=%d, italic=%d hinting=%s\n"
argument_list|,
name|qPrintable
argument_list|(
name|family
argument_list|)
argument_list|,
name|size
argument_list|,
name|weight
argument_list|,
name|italic
argument_list|,
name|fontHintingTable
index|[
name|hinting
index|]
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_setPen
name|void
name|PaintCommands
operator|::
name|command_setPen
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QString
name|cap
init|=
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|int
name|style
init|=
name|translateEnum
argument_list|(
name|penStyleTable
argument_list|,
name|cap
argument_list|,
name|Qt
operator|::
name|DashDotDotLine
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|style
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) setPen(%s)\n"
argument_list|,
name|qPrintable
argument_list|(
name|cap
argument_list|)
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|PenStyle
argument_list|(
name|style
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cap
operator|.
name|toLower
argument_list|()
operator|==
literal|"brush"
condition|)
block|{
name|QPen
name|pen
argument_list|(
name|m_painter
operator|->
name|brush
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
block|{
name|printf
argument_list|(
literal|" -(lance) setPen(brush), style=%d, color=%08x\n"
argument_list|,
name|pen
operator|.
name|brush
argument_list|()
operator|.
name|style
argument_list|()
argument_list|,
name|pen
operator|.
name|color
argument_list|()
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|m_painter
operator|->
name|setPen
argument_list|(
name|pen
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QColor
name|color
init|=
name|convertToColor
argument_list|(
name|cap
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) setPen(%s)\n"
argument_list|,
name|qPrintable
argument_list|(
name|color
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|setPen
argument_list|(
name|color
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_setPen2
name|void
name|PaintCommands
operator|::
name|command_setPen2
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|QBrush
name|brush
decl_stmt|;
if|if
condition|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toLower
argument_list|()
operator|==
literal|"brush"
condition|)
name|brush
operator|=
name|m_painter
operator|->
name|brush
argument_list|()
expr_stmt|;
else|else
name|brush
operator|=
name|convertToColor
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|width
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|penStyle
init|=
name|translateEnum
argument_list|(
name|penStyleTable
argument_list|,
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|,
name|Qt
operator|::
name|DashDotDotLine
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|penStyle
operator|<
literal|0
condition|)
name|penStyle
operator|=
name|Qt
operator|::
name|SolidLine
expr_stmt|;
name|Qt
operator|::
name|PenCapStyle
name|capStyle
init|=
name|Qt
operator|::
name|SquareCap
decl_stmt|;
if|if
condition|(
name|caps
operator|.
name|at
argument_list|(
literal|4
argument_list|)
operator|.
name|toLower
argument_list|()
operator|==
literal|"flatcap"
condition|)
name|capStyle
operator|=
name|Qt
operator|::
name|FlatCap
expr_stmt|;
elseif|else
if|if
condition|(
name|caps
operator|.
name|at
argument_list|(
literal|4
argument_list|)
operator|.
name|toLower
argument_list|()
operator|==
literal|"squarecap"
condition|)
name|capStyle
operator|=
name|Qt
operator|::
name|SquareCap
expr_stmt|;
elseif|else
if|if
condition|(
name|caps
operator|.
name|at
argument_list|(
literal|4
argument_list|)
operator|.
name|toLower
argument_list|()
operator|==
literal|"roundcap"
condition|)
name|capStyle
operator|=
name|Qt
operator|::
name|RoundCap
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|caps
operator|.
name|at
argument_list|(
literal|4
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"ERROR: setPen, unknown capStyle: %s\n"
argument_list|,
name|qPrintable
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|PenJoinStyle
name|joinStyle
init|=
name|Qt
operator|::
name|BevelJoin
decl_stmt|;
if|if
condition|(
name|caps
operator|.
name|at
argument_list|(
literal|5
argument_list|)
operator|.
name|toLower
argument_list|()
operator|==
literal|"miterjoin"
condition|)
name|joinStyle
operator|=
name|Qt
operator|::
name|MiterJoin
expr_stmt|;
elseif|else
if|if
condition|(
name|caps
operator|.
name|at
argument_list|(
literal|5
argument_list|)
operator|.
name|toLower
argument_list|()
operator|==
literal|"beveljoin"
condition|)
name|joinStyle
operator|=
name|Qt
operator|::
name|BevelJoin
expr_stmt|;
elseif|else
if|if
condition|(
name|caps
operator|.
name|at
argument_list|(
literal|5
argument_list|)
operator|.
name|toLower
argument_list|()
operator|==
literal|"roundjoin"
condition|)
name|joinStyle
operator|=
name|Qt
operator|::
name|RoundJoin
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|caps
operator|.
name|at
argument_list|(
literal|5
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"ERROR: setPen, unknown joinStyle: %s\n"
argument_list|,
name|qPrintable
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) setPen(%s, width=%f, style=%d, cap=%d, join=%d)\n"
argument_list|,
name|qPrintable
argument_list|(
name|brush
operator|.
name|color
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|width
argument_list|,
name|penStyle
argument_list|,
name|capStyle
argument_list|,
name|joinStyle
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|brush
argument_list|,
name|width
argument_list|,
name|Qt
operator|::
name|PenStyle
argument_list|(
name|penStyle
argument_list|)
argument_list|,
name|capStyle
argument_list|,
name|joinStyle
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_setRenderHint
name|void
name|PaintCommands
operator|::
name|command_setRenderHint
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QString
name|hintString
init|=
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|bool
name|on
init|=
name|re
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|||
name|re
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
operator|.
name|toLower
argument_list|()
operator|==
literal|"true"
decl_stmt|;
if|if
condition|(
name|hintString
operator|.
name|contains
argument_list|(
literal|"antialiasing"
argument_list|)
condition|)
block|{
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) setRenderHint Antialiasing\n"
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|,
name|on
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hintString
operator|.
name|contains
argument_list|(
literal|"smoothpixmaptransform"
argument_list|)
condition|)
block|{
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) setRenderHint SmoothPixmapTransform\n"
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|SmoothPixmapTransform
argument_list|,
name|on
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"ERROR(setRenderHint): unknown hint '%s'\n"
argument_list|,
name|qPrintable
argument_list|(
name|hintString
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_clearRenderHint
name|void
name|PaintCommands
operator|::
name|command_clearRenderHint
parameter_list|(
name|QRegExp
comment|/*re*/
parameter_list|)
block|{
name|m_painter
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|SmoothPixmapTransform
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) clearRenderHint\n"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_setCompositionMode
name|void
name|PaintCommands
operator|::
name|command_setCompositionMode
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QString
name|modeString
init|=
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|int
name|mode
init|=
name|translateEnum
argument_list|(
name|compositionModeTable
argument_list|,
name|modeString
argument_list|,
literal|33
argument_list|)
decl_stmt|;
if|if
condition|(
name|mode
argument_list|<
literal|0
operator|||
name|mode
argument_list|>
name|QPainter
operator|::
name|RasterOp_SourceAndNotDestination
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"ERROR: invalid mode: %s\n"
argument_list|,
name|qPrintable
argument_list|(
name|modeString
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) setCompositionMode: %d: %s\n"
argument_list|,
name|mode
argument_list|,
name|qPrintable
argument_list|(
name|modeString
argument_list|)
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|setCompositionMode
argument_list|(
name|QPainter
operator|::
name|CompositionMode
argument_list|(
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_translate
name|void
name|PaintCommands
operator|::
name|command_translate
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|double
name|dx
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|dy
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) translate(%f, %f)\n"
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|translate
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_pixmap_load
name|void
name|PaintCommands
operator|::
name|command_pixmap_load
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|QString
name|fileName
init|=
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QString
name|name
init|=
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
name|name
operator|=
name|fileName
expr_stmt|;
name|QImage
name|im
init|=
name|image_load
argument_list|<
name|QImage
argument_list|>
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QPixmap
name|px
init|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|im
argument_list|,
name|Qt
operator|::
name|OrderedDither
operator||
name|Qt
operator|::
name|OrderedAlphaDither
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) pixmap_load(%s as %s), size=[%d, %d], depth=%d\n"
argument_list|,
name|qPrintable
argument_list|(
name|fileName
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|name
argument_list|)
argument_list|,
name|px
operator|.
name|width
argument_list|()
argument_list|,
name|px
operator|.
name|height
argument_list|()
argument_list|,
name|px
operator|.
name|depth
argument_list|()
argument_list|)
expr_stmt|;
name|m_pixmapMap
index|[
name|name
index|]
operator|=
name|px
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_bitmap_load
name|void
name|PaintCommands
operator|::
name|command_bitmap_load
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|QString
name|fileName
init|=
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QString
name|name
init|=
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
name|name
operator|=
name|fileName
expr_stmt|;
name|QBitmap
name|bm
init|=
name|image_load
argument_list|<
name|QBitmap
argument_list|>
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) bitmap_load(%s as %s), size=[%d, %d], depth=%d\n"
argument_list|,
name|qPrintable
argument_list|(
name|fileName
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|name
argument_list|)
argument_list|,
name|bm
operator|.
name|width
argument_list|()
argument_list|,
name|bm
operator|.
name|height
argument_list|()
argument_list|,
name|bm
operator|.
name|depth
argument_list|()
argument_list|)
expr_stmt|;
name|m_pixmapMap
index|[
name|name
index|]
operator|=
name|bm
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_pixmap_setMask
name|void
name|PaintCommands
operator|::
name|command_pixmap_setMask
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|QBitmap
name|mask
init|=
name|image_load
argument_list|<
name|QBitmap
argument_list|>
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) pixmap_setMask(%s, %s)\n"
argument_list|,
name|qPrintable
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_pixmapMap
index|[
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
index|]
operator|.
name|isNull
argument_list|()
condition|)
name|m_pixmapMap
index|[
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
index|]
operator|.
name|setMask
argument_list|(
name|mask
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_image_load
name|void
name|PaintCommands
operator|::
name|command_image_load
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|QString
name|fileName
init|=
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QString
name|name
init|=
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
name|name
operator|=
name|fileName
expr_stmt|;
name|QImage
name|image
init|=
name|image_load
argument_list|<
name|QImage
argument_list|>
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) image_load(%s as %s), size=[%d, %d], format=%d\n"
argument_list|,
name|qPrintable
argument_list|(
name|fileName
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|name
argument_list|)
argument_list|,
name|image
operator|.
name|width
argument_list|()
argument_list|,
name|image
operator|.
name|height
argument_list|()
argument_list|,
name|image
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
name|m_imageMap
index|[
name|name
index|]
operator|=
name|image
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_image_setColorCount
name|void
name|PaintCommands
operator|::
name|command_image_setColorCount
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|QString
name|name
init|=
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) image_setColorCount(%s), %d -> %d\n"
argument_list|,
name|qPrintable
argument_list|(
name|name
argument_list|)
argument_list|,
name|m_imageMap
index|[
name|name
index|]
operator|.
name|colorCount
argument_list|()
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|m_imageMap
index|[
name|name
index|]
operator|.
name|setColorCount
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_image_setColor
name|void
name|PaintCommands
operator|::
name|command_image_setColor
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|QString
name|name
init|=
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|convertToInt
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|QColor
name|color
init|=
name|convertToColor
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) image_setColor(%s), %d = %08x\n"
argument_list|,
name|qPrintable
argument_list|(
name|name
argument_list|)
argument_list|,
name|index
argument_list|,
name|color
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|m_imageMap
index|[
name|name
index|]
operator|.
name|setColor
argument_list|(
name|index
argument_list|,
name|color
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_abort
name|void
name|PaintCommands
operator|::
name|command_abort
parameter_list|(
name|QRegExp
parameter_list|)
block|{
name|m_abort
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_gradient_clearStops
name|void
name|PaintCommands
operator|::
name|command_gradient_clearStops
parameter_list|(
name|QRegExp
parameter_list|)
block|{
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) gradient_clearStops\n"
argument_list|)
expr_stmt|;
name|m_gradientStops
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_gradient_appendStop
name|void
name|PaintCommands
operator|::
name|command_gradient_appendStop
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|double
name|pos
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|QColor
name|color
init|=
name|convertToColor
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) gradient_appendStop(%.2f, %x)\n"
argument_list|,
name|pos
argument_list|,
name|color
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|m_gradientStops
operator|<<
name|QGradientStop
argument_list|(
name|pos
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_gradient_setLinear
name|void
name|PaintCommands
operator|::
name|command_gradient_setLinear
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|double
name|x1
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|y1
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|x2
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|y2
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) gradient_setLinear (%.2f, %.2f), (%.2f, %.2f), spread=%d\n"
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|m_gradientSpread
argument_list|)
expr_stmt|;
name|QLinearGradient
name|lg
argument_list|(
name|QPointF
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|)
argument_list|,
name|QPointF
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|)
argument_list|)
decl_stmt|;
name|lg
operator|.
name|setStops
argument_list|(
name|m_gradientStops
argument_list|)
expr_stmt|;
name|lg
operator|.
name|setSpread
argument_list|(
name|m_gradientSpread
argument_list|)
expr_stmt|;
name|lg
operator|.
name|setCoordinateMode
argument_list|(
name|m_gradientCoordinate
argument_list|)
expr_stmt|;
name|QBrush
name|brush
argument_list|(
name|lg
argument_list|)
decl_stmt|;
name|QTransform
name|brush_matrix
init|=
name|m_painter
operator|->
name|brush
argument_list|()
operator|.
name|transform
argument_list|()
decl_stmt|;
name|brush
operator|.
name|setTransform
argument_list|(
name|brush_matrix
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|setBrush
argument_list|(
name|brush
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_gradient_setLinearPen
name|void
name|PaintCommands
operator|::
name|command_gradient_setLinearPen
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|double
name|x1
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|y1
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|x2
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|y2
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) gradient_setLinear (%.2f, %.2f), (%.2f, %.2f), spread=%d\n"
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|m_gradientSpread
argument_list|)
expr_stmt|;
name|QLinearGradient
name|lg
argument_list|(
name|QPointF
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|)
argument_list|,
name|QPointF
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|)
argument_list|)
decl_stmt|;
name|lg
operator|.
name|setStops
argument_list|(
name|m_gradientStops
argument_list|)
expr_stmt|;
name|lg
operator|.
name|setSpread
argument_list|(
name|m_gradientSpread
argument_list|)
expr_stmt|;
name|lg
operator|.
name|setCoordinateMode
argument_list|(
name|m_gradientCoordinate
argument_list|)
expr_stmt|;
name|QPen
name|pen
init|=
name|m_painter
operator|->
name|pen
argument_list|()
decl_stmt|;
name|pen
operator|.
name|setBrush
argument_list|(
name|lg
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|setPen
argument_list|(
name|pen
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_gradient_setRadial
name|void
name|PaintCommands
operator|::
name|command_gradient_setRadial
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|double
name|cx
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|cy
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|rad
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|fx
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|fy
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) gradient_setRadial center=(%.2f, %.2f), radius=%.2f focal=(%.2f, %.2f), "
literal|"spread=%d\n"
argument_list|,
name|cx
argument_list|,
name|cy
argument_list|,
name|rad
argument_list|,
name|fx
argument_list|,
name|fy
argument_list|,
name|m_gradientSpread
argument_list|)
expr_stmt|;
name|QRadialGradient
name|rg
argument_list|(
name|QPointF
argument_list|(
name|cx
argument_list|,
name|cy
argument_list|)
argument_list|,
name|rad
argument_list|,
name|QPointF
argument_list|(
name|fx
argument_list|,
name|fy
argument_list|)
argument_list|)
decl_stmt|;
name|rg
operator|.
name|setStops
argument_list|(
name|m_gradientStops
argument_list|)
expr_stmt|;
name|rg
operator|.
name|setSpread
argument_list|(
name|m_gradientSpread
argument_list|)
expr_stmt|;
name|rg
operator|.
name|setCoordinateMode
argument_list|(
name|m_gradientCoordinate
argument_list|)
expr_stmt|;
name|QBrush
name|brush
argument_list|(
name|rg
argument_list|)
decl_stmt|;
name|QTransform
name|brush_matrix
init|=
name|m_painter
operator|->
name|brush
argument_list|()
operator|.
name|transform
argument_list|()
decl_stmt|;
name|brush
operator|.
name|setTransform
argument_list|(
name|brush_matrix
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|setBrush
argument_list|(
name|brush
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_gradient_setConical
name|void
name|PaintCommands
operator|::
name|command_gradient_setConical
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|double
name|cx
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|cy
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|angle
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
block|{
name|printf
argument_list|(
literal|" -(lance) gradient_setConical center=(%.2f, %.2f), angle=%.2f\n, spread=%d"
argument_list|,
name|cx
argument_list|,
name|cy
argument_list|,
name|angle
argument_list|,
name|m_gradientSpread
argument_list|)
expr_stmt|;
block|}
name|QConicalGradient
name|cg
argument_list|(
name|QPointF
argument_list|(
name|cx
argument_list|,
name|cy
argument_list|)
argument_list|,
name|angle
argument_list|)
decl_stmt|;
name|cg
operator|.
name|setStops
argument_list|(
name|m_gradientStops
argument_list|)
expr_stmt|;
name|cg
operator|.
name|setSpread
argument_list|(
name|m_gradientSpread
argument_list|)
expr_stmt|;
name|cg
operator|.
name|setCoordinateMode
argument_list|(
name|m_gradientCoordinate
argument_list|)
expr_stmt|;
name|QBrush
name|brush
argument_list|(
name|cg
argument_list|)
decl_stmt|;
name|QTransform
name|brush_matrix
init|=
name|m_painter
operator|->
name|brush
argument_list|()
operator|.
name|transform
argument_list|()
decl_stmt|;
name|brush
operator|.
name|setTransform
argument_list|(
name|brush_matrix
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|setBrush
argument_list|(
name|brush
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_gradient_setSpread
name|void
name|PaintCommands
operator|::
name|command_gradient_setSpread
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|int
name|spreadMethod
init|=
name|translateEnum
argument_list|(
name|spreadMethodTable
argument_list|,
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) gradient_setSpread %d=[%s]\n"
argument_list|,
name|spreadMethod
argument_list|,
name|spreadMethodTable
index|[
name|spreadMethod
index|]
argument_list|)
expr_stmt|;
name|m_gradientSpread
operator|=
name|QGradient
operator|::
name|Spread
argument_list|(
name|spreadMethod
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|command_gradient_setCoordinateMode
name|void
name|PaintCommands
operator|::
name|command_gradient_setCoordinateMode
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|int
name|coord
init|=
name|translateEnum
argument_list|(
name|coordinateMethodTable
argument_list|,
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) gradient_setCoordinateMode %d=[%s]\n"
argument_list|,
name|coord
argument_list|,
name|coordinateMethodTable
index|[
name|coord
index|]
argument_list|)
expr_stmt|;
name|m_gradientCoordinate
operator|=
name|QGradient
operator|::
name|CoordinateMode
argument_list|(
name|coord
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_surface_begin
name|void
name|PaintCommands
operator|::
name|command_surface_begin
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|double
name|x
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|y
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|w
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|h
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_surface_painter
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"ERROR: surface already active"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) surface_begin, pos=[%.2f, %.2f], size=[%.2f, %.2f]\n"
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|m_surface_painter
operator|=
name|m_painter
expr_stmt|;
if|if
condition|(
name|m_type
operator|==
name|OpenGLType
operator|||
name|m_type
operator|==
name|OpenGLPBufferType
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_OPENGL
name|m_surface_pbuffer
operator|=
operator|new
name|QGLPixelBuffer
argument_list|(
name|qRound
argument_list|(
name|w
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|h
argument_list|)
argument_list|)
expr_stmt|;
name|m_painter
operator|=
operator|new
name|QPainter
argument_list|(
name|m_surface_pbuffer
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|fillRect
argument_list|(
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|qRound
argument_list|(
name|w
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|h
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_WS_X11
block|}
elseif|else
if|if
condition|(
name|m_type
operator|==
name|WidgetType
condition|)
block|{
name|m_surface_pixmap
operator|=
name|QPixmap
argument_list|(
name|qRound
argument_list|(
name|w
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|h
argument_list|)
argument_list|)
expr_stmt|;
name|m_surface_pixmap
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|m_painter
operator|=
operator|new
name|QPainter
argument_list|(
operator|&
name|m_surface_pixmap
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
name|m_surface_image
operator|=
name|QImage
argument_list|(
name|qRound
argument_list|(
name|w
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|h
argument_list|)
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
name|m_surface_image
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|m_painter
operator|=
operator|new
name|QPainter
argument_list|(
operator|&
name|m_surface_image
argument_list|)
expr_stmt|;
block|}
name|m_surface_rect
operator|=
name|QRectF
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_surface_end
name|void
name|PaintCommands
operator|::
name|command_surface_end
parameter_list|(
name|QRegExp
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_surface_painter
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"ERROR: surface not active"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) surface_end, pos=[%.2f, %.2f], size=[%.2f, %.2f]\n"
argument_list|,
name|m_surface_rect
operator|.
name|x
argument_list|()
argument_list|,
name|m_surface_rect
operator|.
name|y
argument_list|()
argument_list|,
name|m_surface_rect
operator|.
name|width
argument_list|()
argument_list|,
name|m_surface_rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|end
argument_list|()
expr_stmt|;
operator|delete
name|m_painter
expr_stmt|;
name|m_painter
operator|=
name|m_surface_painter
expr_stmt|;
name|m_surface_painter
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|m_type
operator|==
name|OpenGLType
operator|||
name|m_type
operator|==
name|OpenGLPBufferType
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_OPENGL
name|QImage
name|image
init|=
name|m_surface_pbuffer
operator|->
name|toImage
argument_list|()
decl_stmt|;
name|QImage
name|new_image
argument_list|(
name|image
operator|.
name|bits
argument_list|()
argument_list|,
name|image
operator|.
name|width
argument_list|()
argument_list|,
name|image
operator|.
name|height
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|QPaintDevice
modifier|*
name|pdev
init|=
name|m_painter
operator|->
name|device
argument_list|()
decl_stmt|;
if|if
condition|(
name|pdev
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|Widget
condition|)
block|{
name|QWidget
modifier|*
name|w
init|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|pdev
argument_list|)
decl_stmt|;
cast|static_cast
argument_list|<
name|QGLWidget
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
operator|->
name|makeCurrent
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pdev
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|Pbuffer
condition|)
block|{
cast|static_cast
argument_list|<
name|QGLPixelBuffer
operator|*
argument_list|>
argument_list|(
name|pdev
argument_list|)
operator|->
name|makeCurrent
argument_list|()
expr_stmt|;
block|}
name|m_painter
operator|->
name|drawImage
argument_list|(
name|m_surface_rect
argument_list|,
name|new_image
argument_list|)
expr_stmt|;
operator|delete
name|m_surface_pbuffer
expr_stmt|;
name|m_surface_pbuffer
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_WS_X11
block|}
elseif|else
if|if
condition|(
name|m_type
operator|==
name|WidgetType
condition|)
block|{
name|m_painter
operator|->
name|drawPixmap
argument_list|(
name|m_surface_rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|m_surface_pixmap
argument_list|)
expr_stmt|;
name|m_surface_pixmap
operator|=
name|QPixmap
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
name|m_painter
operator|->
name|drawImage
argument_list|(
name|m_surface_rect
argument_list|,
name|m_surface_image
argument_list|)
expr_stmt|;
name|m_surface_image
operator|=
name|QImage
argument_list|()
expr_stmt|;
block|}
name|m_surface_rect
operator|=
name|QRectF
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_image_convertToFormat
name|void
name|PaintCommands
operator|::
name|command_image_convertToFormat
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|QString
name|srcName
init|=
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QString
name|destName
init|=
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m_imageMap
operator|.
name|contains
argument_list|(
name|srcName
argument_list|)
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"ERROR(convertToFormat): no such image '%s'\n"
argument_list|,
name|qPrintable
argument_list|(
name|srcName
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|format
init|=
name|translateEnum
argument_list|(
name|imageFormatTable
argument_list|,
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|,
name|QImage
operator|::
name|NImageFormats
argument_list|)
decl_stmt|;
if|if
condition|(
name|format
operator|<
literal|0
operator|||
name|format
operator|>=
name|QImage
operator|::
name|NImageFormats
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"ERROR(convertToFormat): invalid format %d = '%s'\n"
argument_list|,
name|format
argument_list|,
name|qPrintable
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|QImage
name|src
init|=
name|m_imageMap
index|[
name|srcName
index|]
decl_stmt|;
name|QImage
name|dest
init|=
name|src
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format
argument_list|(
name|format
argument_list|)
argument_list|,
name|Qt
operator|::
name|OrderedAlphaDither
operator||
name|Qt
operator|::
name|OrderedDither
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
block|{
name|printf
argument_list|(
literal|" -(lance) convertToFormat %s:%d -> %s:%d\n"
argument_list|,
name|qPrintable
argument_list|(
name|srcName
argument_list|)
argument_list|,
name|src
operator|.
name|format
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|destName
argument_list|)
argument_list|,
name|dest
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|m_imageMap
index|[
name|destName
index|]
operator|=
name|dest
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_textlayout_draw
name|void
name|PaintCommands
operator|::
name|command_textlayout_draw
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|QString
name|text
init|=
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|double
name|width
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) textlayout_draw text='%s', width=%f\n"
argument_list|,
name|qPrintable
argument_list|(
name|text
argument_list|)
argument_list|,
name|width
argument_list|)
expr_stmt|;
name|QFont
name|copy
init|=
name|m_painter
operator|->
name|font
argument_list|()
decl_stmt|;
name|copy
operator|.
name|setPointSize
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QTextLayout
name|layout
argument_list|(
name|text
argument_list|,
name|copy
argument_list|,
name|m_painter
operator|->
name|device
argument_list|()
argument_list|)
decl_stmt|;
name|layout
operator|.
name|beginLayout
argument_list|()
expr_stmt|;
name|double
name|y_offset
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|QTextLine
name|line
init|=
name|layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|line
operator|.
name|isValid
argument_list|()
condition|)
break|break;
name|line
operator|.
name|setLineWidth
argument_list|(
name|width
argument_list|)
expr_stmt|;
name|line
operator|.
name|setPosition
argument_list|(
name|QPointF
argument_list|(
literal|0
argument_list|,
name|y_offset
argument_list|)
argument_list|)
expr_stmt|;
name|y_offset
operator|+=
name|line
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
name|layout
operator|.
name|draw
argument_list|(
name|m_painter
argument_list|,
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_pen_setDashOffset
name|void
name|PaintCommands
operator|::
name|command_pen_setDashOffset
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|double
name|offset
init|=
name|convertToDouble
argument_list|(
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) setDashOffset(%lf)\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|QPen
name|p
init|=
name|m_painter
operator|->
name|pen
argument_list|()
decl_stmt|;
name|p
operator|.
name|setDashOffset
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|setPen
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_pen_setDashPattern
name|void
name|PaintCommands
operator|::
name|command_pen_setDashPattern
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
specifier|static
name|QRegExp
name|separators
argument_list|(
literal|"\\s"
argument_list|)
decl_stmt|;
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|QString
name|cap
init|=
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QStringList
name|numbers
init|=
name|cap
operator|.
name|split
argument_list|(
name|separators
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|qreal
argument_list|>
name|pattern
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numbers
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|pattern
operator|.
name|append
argument_list|(
name|convertToDouble
argument_list|(
name|numbers
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) pen_setDashPattern(size=%d)\n"
argument_list|,
name|pattern
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QPen
name|p
init|=
name|m_painter
operator|->
name|pen
argument_list|()
decl_stmt|;
name|p
operator|.
name|setDashPattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|setPen
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_pen_setCosmetic
name|void
name|PaintCommands
operator|::
name|command_pen_setCosmetic
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
name|QString
name|hm
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|bool
name|on
init|=
name|hm
operator|==
literal|"true"
operator|||
name|hm
operator|==
literal|"yes"
operator|||
name|hm
operator|==
literal|"on"
decl_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
block|{
name|printf
argument_list|(
literal|" -(lance) pen_setCosmetic(%s)\n"
argument_list|,
name|on
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
block|}
name|QPen
name|p
init|=
name|m_painter
operator|->
name|pen
argument_list|()
decl_stmt|;
name|p
operator|.
name|setCosmetic
argument_list|(
name|on
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|setPen
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/***************************************************************************************************/
end_comment
begin_function
DECL|function|command_drawConvexPolygon
name|void
name|PaintCommands
operator|::
name|command_drawConvexPolygon
parameter_list|(
name|QRegExp
name|re
parameter_list|)
block|{
specifier|static
name|QRegExp
name|separators
argument_list|(
literal|"\\s"
argument_list|)
decl_stmt|;
name|QStringList
name|caps
init|=
name|re
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|QString
name|cap
init|=
name|caps
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QStringList
name|numbers
init|=
name|cap
operator|.
name|split
argument_list|(
name|separators
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
name|QPolygonF
name|array
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|+
literal|1
operator|<
name|numbers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|+=
literal|2
control|)
name|array
operator|.
name|append
argument_list|(
name|QPointF
argument_list|(
name|convertToDouble
argument_list|(
name|numbers
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|convertToDouble
argument_list|(
name|numbers
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_verboseMode
condition|)
name|printf
argument_list|(
literal|" -(lance) drawConvexPolygon(size=%d)\n"
argument_list|,
name|array
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|m_painter
operator|->
name|drawConvexPolygon
argument_list|(
name|array
argument_list|)
expr_stmt|;
block|}
end_function
end_unit
