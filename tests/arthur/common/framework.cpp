begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"framework.h"
end_include
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_include
include|#
directive|include
file|<QFileInfo>
end_include
begin_include
include|#
directive|include
file|<QSettings>
end_include
begin_include
include|#
directive|include
file|<QStringList>
end_include
begin_include
include|#
directive|include
file|<QtDebug>
end_include
begin_constructor
DECL|function|Framework
name|Framework
operator|::
name|Framework
parameter_list|()
member_init_list|:
name|qsettings
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|Framework
name|Framework
operator|::
name|Framework
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|)
member_init_list|:
name|qsettings
argument_list|(
literal|0
argument_list|)
block|{
name|load
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~Framework
name|Framework
operator|::
name|~
name|Framework
parameter_list|()
block|{
operator|delete
name|qsettings
expr_stmt|;
name|qsettings
operator|=
literal|0
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|basePath
name|QString
name|Framework
operator|::
name|basePath
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|qsettings
condition|)
return|return
name|QString
argument_list|()
return|;
name|QFileInfo
name|fi
argument_list|(
name|qsettings
operator|->
name|fileName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|fi
operator|.
name|absolutePath
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|suites
name|QStringList
name|Framework
operator|::
name|suites
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|qsettings
condition|)
return|return
name|QStringList
argument_list|()
return|;
name|QStringList
name|tests
init|=
name|qsettings
operator|->
name|childGroups
argument_list|()
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"here suites "
operator|<<
name|tests
expr_stmt|;
name|tests
operator|.
name|removeAll
argument_list|(
literal|"General"
argument_list|)
expr_stmt|;
name|tests
operator|.
name|removeAll
argument_list|(
literal|"Blacklist"
argument_list|)
expr_stmt|;
return|return
name|tests
return|;
block|}
end_function
begin_function
DECL|function|isTestBlacklisted
name|bool
name|Framework
operator|::
name|isTestBlacklisted
parameter_list|(
specifier|const
name|QString
modifier|&
name|engineName
parameter_list|,
specifier|const
name|QString
modifier|&
name|testcase
parameter_list|)
specifier|const
block|{
return|return
name|m_blacklist
index|[
name|engineName
index|]
operator|.
name|contains
argument_list|(
name|testcase
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|isValid
name|bool
name|Framework
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
return|return
name|qsettings
return|;
block|}
end_function
begin_function
DECL|function|load
name|void
name|Framework
operator|::
name|load
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|)
block|{
if|if
condition|(
name|qsettings
condition|)
block|{
operator|delete
name|qsettings
expr_stmt|;
name|qsettings
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|QFile
operator|::
name|exists
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|qsettings
operator|=
operator|new
name|QSettings
argument_list|(
name|file
argument_list|,
name|QSettings
operator|::
name|IniFormat
argument_list|)
expr_stmt|;
name|qsettings
operator|->
name|beginGroup
argument_list|(
name|QString
argument_list|(
literal|"Blacklist"
argument_list|)
argument_list|)
expr_stmt|;
name|QStringList
name|engines
init|=
name|qsettings
operator|->
name|childKeys
argument_list|()
decl_stmt|;
foreach|foreach
control|(
name|QString
name|engineName
decl|,
name|engines
control|)
block|{
name|QStringList
name|testcases
init|=
name|qsettings
operator|->
name|value
argument_list|(
name|engineName
argument_list|)
operator|.
name|toStringList
argument_list|()
decl_stmt|;
name|m_blacklist
operator|.
name|insert
argument_list|(
name|engineName
argument_list|,
name|testcases
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Blacklists for "
operator|<<
name|testcases
expr_stmt|;
block|}
name|qsettings
operator|->
name|endGroup
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|outputDir
name|QString
name|Framework
operator|::
name|outputDir
parameter_list|()
specifier|const
block|{
name|qsettings
operator|->
name|beginGroup
argument_list|(
literal|"General"
argument_list|)
expr_stmt|;
name|QString
name|outputDirName
init|=
name|qsettings
operator|->
name|value
argument_list|(
literal|"outputDir"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|qsettings
operator|->
name|endGroup
argument_list|()
expr_stmt|;
return|return
name|outputDirName
return|;
block|}
end_function
begin_function
DECL|function|settings
name|QSettings
modifier|*
name|Framework
operator|::
name|settings
parameter_list|()
specifier|const
block|{
return|return
name|qsettings
return|;
block|}
end_function
end_unit
