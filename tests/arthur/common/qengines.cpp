begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qengines.h"
end_include
begin_include
include|#
directive|include
file|"paintcommands.h"
end_include
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QProcess>
end_include
begin_include
include|#
directive|include
file|<QPainter>
end_include
begin_include
include|#
directive|include
file|<QSvgRenderer>
end_include
begin_include
include|#
directive|include
file|<QStringList>
end_include
begin_include
include|#
directive|include
file|<QDir>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QPrintEngine>
end_include
begin_include
include|#
directive|include
file|<QWidget>
end_include
begin_comment
comment|// For QApplicationPrivate::graphics_system_name
end_comment
begin_include
include|#
directive|include
file|<private/qapplication_p.h>
end_include
begin_destructor
DECL|function|~QEngine
name|QEngine
operator|::
name|~
name|QEngine
parameter_list|()
block|{ }
end_destructor
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QtEngines
argument_list|,
argument|qtengines_global
argument_list|)
end_macro
begin_function
DECL|function|self
name|QtEngines
modifier|*
name|QtEngines
operator|::
name|self
parameter_list|()
block|{
return|return
name|qtengines_global
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|engines
name|QList
argument_list|<
name|QEngine
modifier|*
argument_list|>
name|QtEngines
operator|::
name|engines
parameter_list|()
specifier|const
block|{
return|return
name|m_engines
return|;
block|}
end_function
begin_function
DECL|function|foreignEngines
name|QList
argument_list|<
name|QEngine
modifier|*
argument_list|>
name|QtEngines
operator|::
name|foreignEngines
parameter_list|()
specifier|const
block|{
return|return
name|m_foreignEngines
return|;
block|}
end_function
begin_function
DECL|function|defaultEngine
name|QEngine
modifier|*
name|QtEngines
operator|::
name|defaultEngine
parameter_list|()
specifier|const
block|{
return|return
name|m_defaultEngine
return|;
block|}
end_function
begin_constructor
DECL|function|QtEngines
name|QtEngines
operator|::
name|QtEngines
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|init
name|void
name|QtEngines
operator|::
name|init
parameter_list|()
block|{
name|m_defaultEngine
operator|=
operator|new
name|RasterEngine
expr_stmt|;
name|m_engines
operator|<<
name|m_defaultEngine
operator|<<
operator|new
name|NativeEngine
operator|<<
operator|new
name|WidgetEngine
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|BUILD_OPENGL
argument_list|)
if|if
condition|(
name|QGLFormat
operator|::
name|hasOpenGL
argument_list|()
condition|)
name|m_engines
operator|<<
operator|new
name|GLEngine
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_PRINTER
name|m_engines
operator|<<
operator|new
name|PDFEngine
ifdef|#
directive|ifdef
name|Q_WS_X11
operator|<<
operator|new
name|PSEngine
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_WS_WIN
operator|<<
operator|new
name|WinPrintEngine
endif|#
directive|endif
expr_stmt|;
endif|#
directive|endif
comment|//QT_NO_PRINTER
name|m_foreignEngines
operator|<<
operator|new
name|RSVGEngine
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|RasterEngine
name|RasterEngine
operator|::
name|RasterEngine
parameter_list|()
block|{  }
end_constructor
begin_function
DECL|function|name
name|QString
name|RasterEngine
operator|::
name|name
parameter_list|()
specifier|const
block|{
return|return
name|QLatin1String
argument_list|(
literal|"Raster"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|prepare
name|void
name|RasterEngine
operator|::
name|prepare
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
specifier|const
name|QColor
modifier|&
name|fillColor
parameter_list|)
block|{
name|image
operator|=
name|QImage
argument_list|(
name|size
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|image
argument_list|)
decl_stmt|;
name|p
operator|.
name|setCompositionMode
argument_list|(
name|QPainter
operator|::
name|CompositionMode_Source
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
name|image
operator|.
name|rect
argument_list|()
argument_list|,
name|fillColor
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|render
name|void
name|RasterEngine
operator|::
name|render
parameter_list|(
name|QSvgRenderer
modifier|*
name|r
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|)
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|image
argument_list|)
decl_stmt|;
name|r
operator|->
name|render
argument_list|(
operator|&
name|p
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|render
name|void
name|RasterEngine
operator|::
name|render
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|qpsScript
parameter_list|,
specifier|const
name|QString
modifier|&
name|absFilePath
parameter_list|)
block|{
name|QPainter
name|pt
argument_list|(
operator|&
name|image
argument_list|)
decl_stmt|;
name|PaintCommands
name|pcmd
argument_list|(
name|qpsScript
argument_list|,
literal|800
argument_list|,
literal|800
argument_list|)
decl_stmt|;
name|pcmd
operator|.
name|setPainter
argument_list|(
operator|&
name|pt
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|setFilePath
argument_list|(
name|absFilePath
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|runCommands
argument_list|()
expr_stmt|;
name|pt
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawOnPainter
name|bool
name|RasterEngine
operator|::
name|drawOnPainter
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|)
block|{
name|p
operator|->
name|drawImage
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|image
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|save
name|void
name|RasterEngine
operator|::
name|save
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|)
block|{
name|image
operator|.
name|save
argument_list|(
name|file
argument_list|,
literal|"PNG"
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|NativeEngine
name|NativeEngine
operator|::
name|NativeEngine
parameter_list|()
block|{  }
end_constructor
begin_function
DECL|function|name
name|QString
name|NativeEngine
operator|::
name|name
parameter_list|()
specifier|const
block|{
ifdef|#
directive|ifdef
name|Q_WS_X11
ifndef|#
directive|ifndef
name|QT_NO_XRENDER
return|return
name|QLatin1String
argument_list|(
literal|"NativeXRender"
argument_list|)
return|;
else|#
directive|else
return|return
name|QLatin1String
argument_list|(
literal|"NativeXLib"
argument_list|)
return|;
endif|#
directive|endif
elif|#
directive|elif
operator|(
name|defined
name|Q_WS_WIN32
operator|)
return|return
name|QLatin1String
argument_list|(
literal|"NativeWin32"
argument_list|)
return|;
elif|#
directive|elif
operator|(
name|defined
name|Q_WS_MAC
operator|)
return|return
name|QLatin1String
argument_list|(
literal|"NativeMac"
argument_list|)
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_WS_QWS
argument_list|)
return|return
name|QLatin1String
argument_list|(
literal|"NativeEmbedded"
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|prepare
name|void
name|NativeEngine
operator|::
name|prepare
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
specifier|const
name|QColor
modifier|&
name|fillColor
parameter_list|)
block|{
name|pixmap
operator|=
name|QPixmap
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|pixmap
operator|.
name|fill
argument_list|(
name|fillColor
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|render
name|void
name|NativeEngine
operator|::
name|render
parameter_list|(
name|QSvgRenderer
modifier|*
name|r
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|)
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|pixmap
argument_list|)
decl_stmt|;
name|r
operator|->
name|render
argument_list|(
operator|&
name|p
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|render
name|void
name|NativeEngine
operator|::
name|render
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|qpsScript
parameter_list|,
specifier|const
name|QString
modifier|&
name|absFilePath
parameter_list|)
block|{
name|QPainter
name|pt
argument_list|(
operator|&
name|pixmap
argument_list|)
decl_stmt|;
name|PaintCommands
name|pcmd
argument_list|(
name|qpsScript
argument_list|,
literal|800
argument_list|,
literal|800
argument_list|)
decl_stmt|;
name|pcmd
operator|.
name|setPainter
argument_list|(
operator|&
name|pt
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|setFilePath
argument_list|(
name|absFilePath
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|runCommands
argument_list|()
expr_stmt|;
name|pt
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawOnPainter
name|bool
name|NativeEngine
operator|::
name|drawOnPainter
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|)
block|{
name|p
operator|->
name|drawPixmap
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|save
name|void
name|NativeEngine
operator|::
name|save
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|)
block|{
name|pixmap
operator|.
name|save
argument_list|(
name|file
argument_list|,
literal|"PNG"
argument_list|)
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|BUILD_OPENGL
argument_list|)
end_if
begin_constructor
DECL|function|GLEngine
name|GLEngine
operator|::
name|GLEngine
parameter_list|()
member_init_list|:
name|pbuffer
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|widget
argument_list|(
literal|0
argument_list|)
block|{
name|usePixelBuffers
operator|=
name|QGLPixelBuffer
operator|::
name|hasOpenGLPbuffers
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|name
name|QString
name|GLEngine
operator|::
name|name
parameter_list|()
specifier|const
block|{
return|return
name|QLatin1String
argument_list|(
literal|"OpenGL"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|prepare
name|void
name|GLEngine
operator|::
name|prepare
parameter_list|(
specifier|const
name|QSize
modifier|&
name|_size
parameter_list|,
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
name|size
operator|=
name|_size
expr_stmt|;
name|fillColor
operator|=
name|color
expr_stmt|;
if|if
condition|(
name|usePixelBuffers
condition|)
block|{
name|pbuffer
operator|=
operator|new
name|QGLPixelBuffer
argument_list|(
name|size
argument_list|,
name|QGLFormat
argument_list|(
name|QGL
operator|::
name|SampleBuffers
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|widget
operator|=
operator|new
name|QGLWidget
argument_list|(
name|QGLFormat
argument_list|(
name|QGL
operator|::
name|SampleBuffers
argument_list|)
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setAutoFillBackground
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|widget
operator|->
name|resize
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|widget
operator|->
name|show
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|flush
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|syncX
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|render
name|void
name|GLEngine
operator|::
name|render
parameter_list|(
name|QSvgRenderer
modifier|*
name|r
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|)
block|{
name|QPainter
modifier|*
name|p
decl_stmt|;
if|if
condition|(
name|usePixelBuffers
condition|)
name|p
operator|=
operator|new
name|QPainter
argument_list|(
name|pbuffer
argument_list|)
expr_stmt|;
else|else
name|p
operator|=
operator|new
name|QPainter
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|p
operator|->
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|,
name|fillColor
argument_list|)
expr_stmt|;
name|r
operator|->
name|render
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|->
name|end
argument_list|()
expr_stmt|;
operator|delete
name|p
expr_stmt|;
block|}
end_function
begin_function
DECL|function|render
name|void
name|GLEngine
operator|::
name|render
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|qpsScript
parameter_list|,
specifier|const
name|QString
modifier|&
name|absFilePath
parameter_list|)
block|{
name|QPainter
modifier|*
name|p
decl_stmt|;
if|if
condition|(
name|usePixelBuffers
condition|)
name|p
operator|=
operator|new
name|QPainter
argument_list|(
name|pbuffer
argument_list|)
expr_stmt|;
else|else
name|p
operator|=
operator|new
name|QPainter
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|PaintCommands
name|pcmd
argument_list|(
name|qpsScript
argument_list|,
literal|800
argument_list|,
literal|800
argument_list|)
decl_stmt|;
name|pcmd
operator|.
name|setPainter
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|setFilePath
argument_list|(
name|absFilePath
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|runCommands
argument_list|()
expr_stmt|;
name|p
operator|->
name|end
argument_list|()
expr_stmt|;
operator|delete
name|p
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawOnPainter
name|bool
name|GLEngine
operator|::
name|drawOnPainter
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|)
block|{
if|if
condition|(
name|usePixelBuffers
condition|)
block|{
name|QImage
name|img
init|=
name|pbuffer
operator|->
name|toImage
argument_list|()
decl_stmt|;
name|p
operator|->
name|drawImage
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|img
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QImage
name|img
init|=
name|widget
operator|->
name|grabFrameBuffer
argument_list|()
decl_stmt|;
name|p
operator|->
name|drawImage
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|img
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|save
name|void
name|GLEngine
operator|::
name|save
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|)
block|{
if|if
condition|(
name|usePixelBuffers
condition|)
block|{
name|QImage
name|img
init|=
name|pbuffer
operator|->
name|toImage
argument_list|()
decl_stmt|;
name|img
operator|.
name|save
argument_list|(
name|file
argument_list|,
literal|"PNG"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QImage
name|img
init|=
name|widget
operator|->
name|grabFrameBuffer
argument_list|()
decl_stmt|;
name|img
operator|.
name|save
argument_list|(
name|file
argument_list|,
literal|"PNG"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|GLEngine
operator|::
name|cleanup
parameter_list|()
block|{
operator|delete
name|pbuffer
expr_stmt|;
operator|delete
name|widget
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|WidgetEngineWidget
class|class
name|WidgetEngineWidget
super|:
specifier|public
name|QWidget
block|{
public|public:
name|WidgetEngineWidget
parameter_list|(
name|QWidget
modifier|*
init|=
literal|0
parameter_list|)
constructor_decl|;
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
function_decl|;
name|void
name|render
parameter_list|(
name|QSvgRenderer
modifier|*
parameter_list|)
function_decl|;
name|void
name|render
parameter_list|(
name|QStringList
specifier|const
modifier|&
parameter_list|,
name|QString
specifier|const
modifier|&
parameter_list|)
function_decl|;
DECL|member|m_size
name|QSize
name|m_size
decl_stmt|;
DECL|member|m_fillColor
name|QColor
name|m_fillColor
decl_stmt|;
private|private:
DECL|member|m_svgr
name|QSvgRenderer
modifier|*
name|m_svgr
decl_stmt|;
DECL|member|m_qpsScript
name|QStringList
name|m_qpsScript
decl_stmt|;
DECL|member|m_absFilePath
name|QString
name|m_absFilePath
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|WidgetEngineWidget
name|WidgetEngineWidget
operator|::
name|WidgetEngineWidget
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_size
argument_list|()
member_init_list|,
name|m_fillColor
argument_list|()
member_init_list|,
name|m_svgr
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_qpsScript
argument_list|()
member_init_list|,
name|m_absFilePath
argument_list|()
block|{}
end_constructor
begin_function
DECL|function|render
name|void
name|WidgetEngineWidget
operator|::
name|render
parameter_list|(
name|QSvgRenderer
modifier|*
name|r
parameter_list|)
block|{
name|m_svgr
operator|=
name|r
expr_stmt|;
name|repaint
argument_list|()
expr_stmt|;
name|m_svgr
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|render
name|void
name|WidgetEngineWidget
operator|::
name|render
parameter_list|(
name|QStringList
specifier|const
modifier|&
name|qpsScript
parameter_list|,
name|QString
specifier|const
modifier|&
name|absFilePath
parameter_list|)
block|{
name|m_qpsScript
operator|=
name|qpsScript
expr_stmt|;
name|m_absFilePath
operator|=
name|absFilePath
expr_stmt|;
name|repaint
argument_list|()
expr_stmt|;
name|m_qpsScript
operator|=
name|QStringList
argument_list|()
expr_stmt|;
name|m_absFilePath
operator|=
name|QString
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paintEvent
name|void
name|WidgetEngineWidget
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
if|if
condition|(
name|m_svgr
condition|)
block|{
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|m_size
operator|.
name|width
argument_list|()
argument_list|,
name|m_size
operator|.
name|height
argument_list|()
argument_list|,
name|m_fillColor
argument_list|)
expr_stmt|;
name|m_svgr
operator|->
name|render
argument_list|(
operator|&
name|p
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|PaintCommands
name|pcmd
argument_list|(
name|m_qpsScript
argument_list|,
literal|800
argument_list|,
literal|800
argument_list|)
decl_stmt|;
name|pcmd
operator|.
name|setPainter
argument_list|(
operator|&
name|p
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|setFilePath
argument_list|(
name|m_absFilePath
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|runCommands
argument_list|()
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_constructor
DECL|function|WidgetEngine
name|WidgetEngine
operator|::
name|WidgetEngine
parameter_list|()
member_init_list|:
name|m_widget
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|name
name|QString
name|WidgetEngine
operator|::
name|name
parameter_list|()
specifier|const
block|{
name|QString
name|gs
init|=
name|QApplicationPrivate
operator|::
name|graphics_system_name
decl_stmt|;
if|if
condition|(
operator|!
name|gs
operator|.
name|isEmpty
argument_list|()
condition|)
name|gs
index|[
literal|0
index|]
operator|=
name|gs
index|[
literal|0
index|]
operator|.
name|toUpper
argument_list|()
expr_stmt|;
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Widget"
argument_list|)
operator|+
name|gs
return|;
block|}
end_function
begin_function
DECL|function|prepare
name|void
name|WidgetEngine
operator|::
name|prepare
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
name|m_widget
operator|=
operator|new
name|WidgetEngineWidget
expr_stmt|;
name|m_widget
operator|->
name|m_size
operator|=
name|size
expr_stmt|;
name|m_widget
operator|->
name|m_fillColor
operator|=
name|color
expr_stmt|;
name|m_widget
operator|->
name|setAutoFillBackground
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_widget
operator|->
name|resize
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|m_widget
operator|->
name|show
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|flush
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|syncX
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|render
name|void
name|WidgetEngine
operator|::
name|render
parameter_list|(
name|QSvgRenderer
modifier|*
name|r
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|)
block|{
name|m_widget
operator|->
name|render
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|render
name|void
name|WidgetEngine
operator|::
name|render
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|qpsScript
parameter_list|,
specifier|const
name|QString
modifier|&
name|absFilePath
parameter_list|)
block|{
name|m_widget
operator|->
name|render
argument_list|(
name|qpsScript
argument_list|,
name|absFilePath
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawOnPainter
name|bool
name|WidgetEngine
operator|::
name|drawOnPainter
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|)
block|{
name|p
operator|->
name|drawPixmap
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QPixmap
operator|::
name|grabWindow
argument_list|(
name|m_widget
operator|->
name|winId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|save
name|void
name|WidgetEngine
operator|::
name|save
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|)
block|{
name|QImage
name|img
init|=
name|QPixmap
operator|::
name|grabWindow
argument_list|(
name|m_widget
operator|->
name|winId
argument_list|()
argument_list|)
operator|.
name|toImage
argument_list|()
decl_stmt|;
name|img
operator|.
name|save
argument_list|(
name|file
argument_list|,
literal|"PNG"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|WidgetEngine
operator|::
name|cleanup
parameter_list|()
block|{
operator|delete
name|m_widget
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PRINTER
end_ifndef
begin_constructor
DECL|function|PDFEngine
name|PDFEngine
operator|::
name|PDFEngine
parameter_list|()
block|{ }
end_constructor
begin_function
DECL|function|name
name|QString
name|PDFEngine
operator|::
name|name
parameter_list|()
specifier|const
block|{
return|return
name|QLatin1String
argument_list|(
literal|"PDF"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|prepare
name|void
name|PDFEngine
operator|::
name|prepare
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
specifier|const
name|QColor
modifier|&
name|fillColor
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|fillColor
argument_list|)
expr_stmt|;
specifier|static
name|int
name|i
init|=
literal|1
decl_stmt|;
name|m_size
operator|=
name|size
expr_stmt|;
name|printer
operator|=
operator|new
name|QPrinter
argument_list|(
name|QPrinter
operator|::
name|ScreenResolution
argument_list|)
expr_stmt|;
name|printer
operator|->
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|printer
operator|->
name|setFullPage
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//printer->setOrientation(QPrinter::Landscape);
name|m_tempFile
operator|=
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
name|QString
argument_list|(
literal|"temp%1.pdf"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
operator|++
argument_list|)
expr_stmt|;
name|printer
operator|->
name|setOutputFileName
argument_list|(
name|m_tempFile
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|render
name|void
name|PDFEngine
operator|::
name|render
parameter_list|(
name|QSvgRenderer
modifier|*
name|r
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|)
block|{
name|QPainter
name|p
argument_list|(
name|printer
argument_list|)
decl_stmt|;
name|r
operator|->
name|render
argument_list|(
operator|&
name|p
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|render
name|void
name|PDFEngine
operator|::
name|render
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|qpsScript
parameter_list|,
specifier|const
name|QString
modifier|&
name|absFilePath
parameter_list|)
block|{
name|QPainter
name|pt
argument_list|(
name|printer
argument_list|)
decl_stmt|;
name|PaintCommands
name|pcmd
argument_list|(
name|qpsScript
argument_list|,
literal|800
argument_list|,
literal|800
argument_list|)
decl_stmt|;
name|pcmd
operator|.
name|setPainter
argument_list|(
operator|&
name|pt
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|setFilePath
argument_list|(
name|absFilePath
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|runCommands
argument_list|()
expr_stmt|;
name|pt
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawOnPainter
name|bool
name|PDFEngine
operator|::
name|drawOnPainter
parameter_list|(
name|QPainter
modifier|*
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|save
name|void
name|PDFEngine
operator|::
name|save
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|USE_ACROBAT
name|QString
name|psFile
init|=
name|m_tempFile
decl_stmt|;
name|psFile
operator|.
name|replace
argument_list|(
literal|".pdf"
argument_list|,
literal|".ps"
argument_list|)
expr_stmt|;
name|QProcess
name|toPs
decl_stmt|;
name|QStringList
name|args1
decl_stmt|;
name|args1
operator|<<
literal|"-toPostScript"
operator|<<
literal|"-level3"
operator|<<
literal|"-transQuality"
operator|<<
literal|"1"
expr_stmt|;
name|args1
operator|<<
name|m_tempFile
expr_stmt|;
name|toPs
operator|.
name|start
argument_list|(
literal|"acroread"
argument_list|,
name|args1
argument_list|)
expr_stmt|;
name|toPs
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
name|QProcess
name|convert
decl_stmt|;
name|QStringList
name|args
decl_stmt|;
name|args
operator|<<
name|psFile
expr_stmt|;
name|args
operator|<<
name|QString
argument_list|(
literal|"-resize"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"%1x%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|m_size
operator|.
name|width
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|m_size
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|<<
name|file
expr_stmt|;
name|convert
operator|.
name|start
argument_list|(
literal|"convert"
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|convert
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|psFile
argument_list|)
expr_stmt|;
else|#
directive|else
name|QProcess
name|toPng
decl_stmt|;
name|QStringList
name|args1
decl_stmt|;
name|args1
operator|<<
literal|"-sDEVICE=png16m"
operator|<<
name|QString
argument_list|(
literal|"-sOutputFile="
argument_list|)
operator|+
name|file
operator|<<
literal|"-r97x69"
operator|<<
literal|"-dBATCH"
operator|<<
literal|"-dNOPAUSE"
expr_stmt|;
name|args1
operator|<<
name|m_tempFile
expr_stmt|;
name|toPng
operator|.
name|start
argument_list|(
literal|"gs"
argument_list|,
name|args1
argument_list|)
expr_stmt|;
name|toPng
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QString
name|pfile
init|=
name|file
decl_stmt|;
name|pfile
operator|.
name|replace
argument_list|(
literal|".png"
argument_list|,
literal|".pdf"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|rename
argument_list|(
name|m_tempFile
argument_list|,
name|pfile
argument_list|)
expr_stmt|;
comment|//    QFile::remove(m_tempFile);
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|PDFEngine
operator|::
name|cleanup
parameter_list|()
block|{
operator|delete
name|printer
expr_stmt|;
name|printer
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_X11
end_ifdef
begin_constructor
DECL|function|PSEngine
name|PSEngine
operator|::
name|PSEngine
parameter_list|()
block|{ }
end_constructor
begin_function
DECL|function|name
name|QString
name|PSEngine
operator|::
name|name
parameter_list|()
specifier|const
block|{
return|return
name|QLatin1String
argument_list|(
literal|"PS"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|prepare
name|void
name|PSEngine
operator|::
name|prepare
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
specifier|const
name|QColor
modifier|&
name|fillColor
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|fillColor
argument_list|)
expr_stmt|;
specifier|static
name|int
name|i
init|=
literal|1
decl_stmt|;
name|m_size
operator|=
name|size
expr_stmt|;
name|printer
operator|=
operator|new
name|QPrinter
argument_list|(
name|QPrinter
operator|::
name|ScreenResolution
argument_list|)
expr_stmt|;
name|printer
operator|->
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PostScriptFormat
argument_list|)
expr_stmt|;
name|printer
operator|->
name|setFullPage
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|m_tempFile
operator|=
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
name|QString
argument_list|(
literal|"temp%1.ps"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
operator|++
argument_list|)
expr_stmt|;
name|printer
operator|->
name|setOutputFileName
argument_list|(
name|m_tempFile
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|render
name|void
name|PSEngine
operator|::
name|render
parameter_list|(
name|QSvgRenderer
modifier|*
name|r
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|)
block|{
name|QPainter
name|p
argument_list|(
name|printer
argument_list|)
decl_stmt|;
name|r
operator|->
name|render
argument_list|(
operator|&
name|p
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|render
name|void
name|PSEngine
operator|::
name|render
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|qpsScript
parameter_list|,
specifier|const
name|QString
modifier|&
name|absFilePath
parameter_list|)
block|{
name|QPainter
name|pt
argument_list|(
name|printer
argument_list|)
decl_stmt|;
name|PaintCommands
name|pcmd
argument_list|(
name|qpsScript
argument_list|,
literal|800
argument_list|,
literal|800
argument_list|)
decl_stmt|;
name|pcmd
operator|.
name|setPainter
argument_list|(
operator|&
name|pt
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|setFilePath
argument_list|(
name|absFilePath
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|runCommands
argument_list|()
expr_stmt|;
name|pt
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawOnPainter
name|bool
name|PSEngine
operator|::
name|drawOnPainter
parameter_list|(
name|QPainter
modifier|*
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|save
name|void
name|PSEngine
operator|::
name|save
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|)
block|{
name|QProcess
name|toPng
decl_stmt|;
name|QStringList
name|args1
decl_stmt|;
name|args1
operator|<<
literal|"-sDEVICE=png16m"
operator|<<
name|QString
argument_list|(
literal|"-sOutputFile="
argument_list|)
operator|+
name|file
operator|<<
literal|"-r97x69"
operator|<<
literal|"-dBATCH"
operator|<<
literal|"-dNOPAUSE"
expr_stmt|;
name|args1
operator|<<
name|m_tempFile
expr_stmt|;
name|toPng
operator|.
name|start
argument_list|(
literal|"gs"
argument_list|,
name|args1
argument_list|)
expr_stmt|;
name|toPng
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
name|QString
name|pfile
init|=
name|file
decl_stmt|;
name|pfile
operator|.
name|replace
argument_list|(
literal|".png"
argument_list|,
literal|".ps"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|rename
argument_list|(
name|m_tempFile
argument_list|,
name|pfile
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|PSEngine
operator|::
name|cleanup
parameter_list|()
block|{
operator|delete
name|printer
expr_stmt|;
name|printer
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_PRINTER
end_comment
begin_constructor
DECL|function|RSVGEngine
name|RSVGEngine
operator|::
name|RSVGEngine
parameter_list|()
block|{  }
end_constructor
begin_function
DECL|function|name
name|QString
name|RSVGEngine
operator|::
name|name
parameter_list|()
specifier|const
block|{
return|return
name|QLatin1String
argument_list|(
literal|"RSVG"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|prepare
name|void
name|RSVGEngine
operator|::
name|prepare
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
specifier|const
name|QColor
modifier|&
name|fillColor
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|fillColor
argument_list|)
expr_stmt|;
name|m_size
operator|=
name|size
expr_stmt|;
block|}
end_function
begin_function
DECL|function|render
name|void
name|RSVGEngine
operator|::
name|render
parameter_list|(
name|QSvgRenderer
modifier|*
parameter_list|,
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
block|{
name|m_fileName
operator|=
name|fileName
expr_stmt|;
block|}
end_function
begin_function
DECL|function|render
name|void
name|RSVGEngine
operator|::
name|render
parameter_list|(
specifier|const
name|QStringList
modifier|&
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|)
block|{ }
end_function
begin_function
DECL|function|drawOnPainter
name|bool
name|RSVGEngine
operator|::
name|drawOnPainter
parameter_list|(
name|QPainter
modifier|*
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|save
name|void
name|RSVGEngine
operator|::
name|save
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|)
block|{
name|QProcess
name|rsvg
decl_stmt|;
name|QStringList
name|args
decl_stmt|;
name|args
operator|<<
name|QString
argument_list|(
literal|"-w %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|m_size
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|<<
name|QString
argument_list|(
literal|"-h %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|m_size
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|<<
name|m_fileName
expr_stmt|;
name|args
operator|<<
name|file
expr_stmt|;
name|rsvg
operator|.
name|start
argument_list|(
literal|"rsvg"
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|rsvg
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|QEngine
operator|::
name|cleanup
parameter_list|()
block|{ }
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_WIN
end_ifdef
begin_constructor
DECL|function|WinPrintEngine
name|WinPrintEngine
operator|::
name|WinPrintEngine
parameter_list|()
block|{ }
end_constructor
begin_function
DECL|function|name
name|QString
name|WinPrintEngine
operator|::
name|name
parameter_list|()
specifier|const
block|{
return|return
name|QLatin1String
argument_list|(
literal|"WinPrint"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|prepare
name|void
name|WinPrintEngine
operator|::
name|prepare
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
specifier|const
name|QColor
modifier|&
name|fillColor
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|fillColor
argument_list|)
expr_stmt|;
specifier|static
name|int
name|i
init|=
literal|1
decl_stmt|;
name|m_size
operator|=
name|size
expr_stmt|;
name|printer
operator|=
operator|new
name|QPrinter
argument_list|(
name|QPrinter
operator|::
name|ScreenResolution
argument_list|)
expr_stmt|;
name|printer
operator|->
name|setFullPage
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|printer
operator|->
name|setPrinterName
argument_list|(
literal|"HP 2500C Series PS3"
argument_list|)
expr_stmt|;
name|m_tempFile
operator|=
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
name|QString
argument_list|(
literal|"temp%1.ps"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
operator|++
argument_list|)
expr_stmt|;
name|printer
operator|->
name|setOutputFileName
argument_list|(
name|m_tempFile
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|render
name|void
name|WinPrintEngine
operator|::
name|render
parameter_list|(
name|QSvgRenderer
modifier|*
name|r
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|)
block|{
name|QPainter
name|p
argument_list|(
name|printer
argument_list|)
decl_stmt|;
name|r
operator|->
name|render
argument_list|(
operator|&
name|p
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|render
name|void
name|WinPrintEngine
operator|::
name|render
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|qpsScript
parameter_list|,
specifier|const
name|QString
modifier|&
name|absFilePath
parameter_list|)
block|{
name|QPainter
name|pt
argument_list|(
name|printer
argument_list|)
decl_stmt|;
name|PaintCommands
name|pcmd
argument_list|(
name|qpsScript
argument_list|,
literal|800
argument_list|,
literal|800
argument_list|)
decl_stmt|;
name|pcmd
operator|.
name|setPainter
argument_list|(
operator|&
name|pt
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|setFilePath
argument_list|(
name|absFilePath
argument_list|)
expr_stmt|;
name|pcmd
operator|.
name|runCommands
argument_list|()
expr_stmt|;
name|pt
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawOnPainter
name|bool
name|WinPrintEngine
operator|::
name|drawOnPainter
parameter_list|(
name|QPainter
modifier|*
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|save
name|void
name|WinPrintEngine
operator|::
name|save
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|)
block|{
name|QProcess
name|toPng
decl_stmt|;
name|QStringList
name|args1
decl_stmt|;
name|args1
operator|<<
literal|"-sDEVICE=png16m"
operator|<<
name|QString
argument_list|(
literal|"-sOutputFile="
argument_list|)
operator|+
name|file
operator|<<
literal|"-r97x69"
operator|<<
literal|"-dBATCH"
operator|<<
literal|"-dNOPAUSE"
expr_stmt|;
name|args1
operator|<<
name|m_tempFile
expr_stmt|;
name|toPng
operator|.
name|start
argument_list|(
literal|"gswin32"
argument_list|,
name|args1
argument_list|)
expr_stmt|;
name|toPng
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
name|QString
name|pfile
init|=
name|file
decl_stmt|;
name|pfile
operator|.
name|replace
argument_list|(
literal|".png"
argument_list|,
literal|".ps"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|rename
argument_list|(
name|m_tempFile
argument_list|,
name|pfile
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|WinPrintEngine
operator|::
name|cleanup
parameter_list|()
block|{
operator|delete
name|printer
expr_stmt|;
name|printer
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
end_unit
