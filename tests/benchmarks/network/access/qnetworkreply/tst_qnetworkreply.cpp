begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|// This file contains benchmarks for QNetworkReply functions.
end_comment
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<qtest.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qnetworkreply.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qnetworkrequest.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qnetworkaccessmanager.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qtcpsocket.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qtcpserver.h>
end_include
begin_include
include|#
directive|include
file|"../../../../auto/network-settings.h"
end_include
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QSharedPointer<char>
argument_list|)
end_macro
begin_class
DECL|class|TimedSender
class|class
name|TimedSender
super|:
specifier|public
name|QThread
block|{
name|Q_OBJECT
DECL|member|totalBytes
name|qint64
name|totalBytes
decl_stmt|;
DECL|member|ready
name|QSemaphore
name|ready
decl_stmt|;
DECL|member|dataToSend
name|QByteArray
name|dataToSend
decl_stmt|;
DECL|member|client
name|QTcpSocket
modifier|*
name|client
decl_stmt|;
DECL|member|timeout
name|int
name|timeout
decl_stmt|;
DECL|member|port
name|int
name|port
decl_stmt|;
public|public:
DECL|member|transferRate
name|int
name|transferRate
decl_stmt|;
DECL|function|TimedSender
name|TimedSender
parameter_list|(
name|int
name|ms
parameter_list|)
member_init_list|:
name|totalBytes
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|timeout
argument_list|(
name|ms
argument_list|)
member_init_list|,
name|port
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|transferRate
argument_list|(
operator|-
literal|1
argument_list|)
block|{
name|dataToSend
operator|=
name|QByteArray
argument_list|(
literal|16
operator|*
literal|1024
argument_list|,
literal|'@'
argument_list|)
expr_stmt|;
name|start
argument_list|()
expr_stmt|;
name|ready
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
DECL|function|serverPort
specifier|inline
name|int
name|serverPort
parameter_list|()
specifier|const
block|{
return|return
name|port
return|;
block|}
private|private
name|slots
private|:
DECL|function|writeMore
name|void
name|writeMore
parameter_list|()
block|{
while|while
condition|(
name|client
operator|->
name|bytesToWrite
argument_list|()
operator|<
literal|128
operator|*
literal|1024
condition|)
block|{
name|writePacket
argument_list|(
name|dataToSend
argument_list|)
expr_stmt|;
block|}
block|}
protected|protected:
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|QTcpServer
name|server
decl_stmt|;
name|server
operator|.
name|listen
argument_list|()
expr_stmt|;
name|port
operator|=
name|server
operator|.
name|serverPort
argument_list|()
expr_stmt|;
name|ready
operator|.
name|release
argument_list|()
expr_stmt|;
name|server
operator|.
name|waitForNewConnection
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|client
operator|=
name|server
operator|.
name|nextPendingConnection
argument_list|()
expr_stmt|;
name|writeMore
argument_list|()
expr_stmt|;
name|connect
argument_list|(
name|client
argument_list|,
name|SIGNAL
argument_list|(
name|bytesWritten
argument_list|(
name|qint64
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|writeMore
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
name|QEventLoop
name|eventLoop
decl_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
name|timeout
argument_list|,
operator|&
name|eventLoop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTime
name|timer
decl_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|disconnect
argument_list|(
name|client
argument_list|,
name|SIGNAL
argument_list|(
name|bytesWritten
argument_list|(
name|qint64
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// wait for the connection to shut down
name|client
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|client
operator|->
name|waitForDisconnected
argument_list|(
literal|10000
argument_list|)
condition|)
return|return;
name|transferRate
operator|=
name|totalBytes
operator|*
literal|1000
operator|/
name|timer
operator|.
name|elapsed
argument_list|()
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"TimedSender::run"
operator|<<
literal|"receive rate:"
operator|<<
operator|(
name|transferRate
operator|/
literal|1024
operator|)
operator|<<
literal|"kB/s in"
operator|<<
name|timer
operator|.
name|elapsed
argument_list|()
operator|<<
literal|"ms"
expr_stmt|;
block|}
DECL|function|writePacket
name|void
name|writePacket
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|array
parameter_list|)
block|{
name|client
operator|->
name|write
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|totalBytes
operator|+=
name|array
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|QNetworkReplyPtr
class|class
name|QNetworkReplyPtr
super|:
specifier|public
name|QSharedPointer
argument_list|<
name|QNetworkReply
argument_list|>
block|{
public|public:
DECL|function|QNetworkReplyPtr
specifier|inline
name|QNetworkReplyPtr
parameter_list|(
name|QNetworkReply
modifier|*
name|ptr
init|=
literal|0
parameter_list|)
member_init_list|:
name|QSharedPointer
argument_list|<
name|QNetworkReply
argument_list|>
argument_list|(
name|ptr
argument_list|)
block|{ }
DECL|function|operator QNetworkReply *
specifier|inline
name|operator
name|QNetworkReply *
parameter_list|()
specifier|const
block|{
return|return
name|data
argument_list|()
return|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|DataReader
class|class
name|DataReader
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|member|totalBytes
name|qint64
name|totalBytes
decl_stmt|;
DECL|member|data
name|QByteArray
name|data
decl_stmt|;
DECL|member|device
name|QIODevice
modifier|*
name|device
decl_stmt|;
DECL|member|accumulate
name|bool
name|accumulate
decl_stmt|;
DECL|function|DataReader
name|DataReader
parameter_list|(
name|QIODevice
modifier|*
name|dev
parameter_list|,
name|bool
name|acc
init|=
literal|true
parameter_list|)
member_init_list|:
name|totalBytes
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|device
argument_list|(
name|dev
argument_list|)
member_init_list|,
name|accumulate
argument_list|(
name|acc
argument_list|)
block|{
name|connect
argument_list|(
name|device
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|doRead
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
public|public
name|slots
public|:
DECL|function|doRead
name|void
name|doRead
parameter_list|()
block|{
name|QByteArray
name|buffer
decl_stmt|;
name|buffer
operator|.
name|resize
argument_list|(
name|device
operator|->
name|bytesAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|qint64
name|bytesRead
init|=
name|device
operator|->
name|read
argument_list|(
name|buffer
operator|.
name|data
argument_list|()
argument_list|,
name|device
operator|->
name|bytesAvailable
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytesRead
operator|==
operator|-
literal|1
condition|)
block|{
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
return|return;
block|}
name|buffer
operator|.
name|truncate
argument_list|(
name|bytesRead
argument_list|)
expr_stmt|;
name|totalBytes
operator|+=
name|bytesRead
expr_stmt|;
if|if
condition|(
name|accumulate
condition|)
name|data
operator|+=
name|buffer
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|ThreadedDataReader
class|class
name|ThreadedDataReader
super|:
specifier|public
name|QThread
block|{
name|Q_OBJECT
comment|// used to make the constructor only return after the tcp server started listening
DECL|member|ready
name|QSemaphore
name|ready
decl_stmt|;
DECL|member|client
name|QTcpSocket
modifier|*
name|client
decl_stmt|;
DECL|member|timeout
name|int
name|timeout
decl_stmt|;
DECL|member|port
name|int
name|port
decl_stmt|;
public|public:
DECL|member|transferRate
name|qint64
name|transferRate
decl_stmt|;
DECL|function|ThreadedDataReader
name|ThreadedDataReader
parameter_list|()
member_init_list|:
name|port
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|transferRate
argument_list|(
operator|-
literal|1
argument_list|)
block|{
name|start
argument_list|()
expr_stmt|;
name|ready
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
DECL|function|serverPort
specifier|inline
name|int
name|serverPort
parameter_list|()
specifier|const
block|{
return|return
name|port
return|;
block|}
protected|protected:
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|QTcpServer
name|server
decl_stmt|;
name|server
operator|.
name|listen
argument_list|()
expr_stmt|;
name|port
operator|=
name|server
operator|.
name|serverPort
argument_list|()
expr_stmt|;
name|ready
operator|.
name|release
argument_list|()
expr_stmt|;
name|server
operator|.
name|waitForNewConnection
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|client
operator|=
name|server
operator|.
name|nextPendingConnection
argument_list|()
expr_stmt|;
name|QEventLoop
name|eventLoop
decl_stmt|;
name|DataReader
name|reader
argument_list|(
name|client
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|client
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|,
operator|&
name|eventLoop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTime
name|timer
decl_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|qint64
name|elapsed
init|=
name|timer
operator|.
name|elapsed
argument_list|()
decl_stmt|;
name|transferRate
operator|=
name|reader
operator|.
name|totalBytes
operator|*
literal|1000
operator|/
name|elapsed
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"ThreadedDataReader::run"
operator|<<
literal|"send rate:"
operator|<<
operator|(
name|transferRate
operator|/
literal|1024
operator|)
operator|<<
literal|"kB/s in"
operator|<<
name|elapsed
operator|<<
literal|"msec"
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|DataGenerator
class|class
name|DataGenerator
super|:
specifier|public
name|QIODevice
block|{
name|Q_OBJECT
DECL|enumerator|Idle
DECL|enumerator|Started
DECL|enumerator|Stopped
DECL|member|state
name|enum
type|{
name|Idle
decl_stmt|,
name|Started
decl_stmt|,
name|Stopped
block|}
name|state
class|;
end_class
begin_public
public|public:
DECL|function|DataGenerator
name|DataGenerator
parameter_list|()
member_init_list|:
name|state
argument_list|(
name|Idle
argument_list|)
block|{
name|open
argument_list|(
name|ReadOnly
argument_list|)
expr_stmt|;
block|}
DECL|function|isSequential
specifier|virtual
name|bool
name|isSequential
parameter_list|()
specifier|const
block|{
return|return
literal|true
return|;
block|}
DECL|function|bytesAvailable
specifier|virtual
name|qint64
name|bytesAvailable
parameter_list|()
specifier|const
block|{
return|return
name|state
operator|==
name|Started
condition|?
literal|1024
operator|*
literal|1024
else|:
literal|0
return|;
block|}
end_public
begin_public
public|public
name|slots
public|:
DECL|function|start
name|void
name|start
parameter_list|()
block|{
name|state
operator|=
name|Started
expr_stmt|;
emit|emit
name|readyRead
argument_list|()
emit|;
block|}
DECL|function|stop
name|void
name|stop
parameter_list|()
block|{
name|state
operator|=
name|Stopped
expr_stmt|;
emit|emit
name|readyRead
argument_list|()
emit|;
block|}
end_public
begin_protected
protected|protected:
DECL|function|readData
specifier|virtual
name|qint64
name|readData
parameter_list|(
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|maxlen
parameter_list|)
block|{
if|if
condition|(
name|state
operator|==
name|Stopped
condition|)
return|return
operator|-
literal|1
return|;
comment|// EOF
comment|// return as many bytes as are wanted
name|memset
argument_list|(
name|data
argument_list|,
literal|'@'
argument_list|,
name|maxlen
argument_list|)
expr_stmt|;
return|return
name|maxlen
return|;
block|}
DECL|function|writeData
specifier|virtual
name|qint64
name|writeData
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|qint64
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
end_protected
begin_class
DECL|class|ThreadedDataReaderHttpServer
unit|};
class|class
name|ThreadedDataReaderHttpServer
super|:
specifier|public
name|QThread
block|{
name|Q_OBJECT
comment|// used to make the constructor only return after the tcp server started listening
DECL|member|ready
name|QSemaphore
name|ready
decl_stmt|;
DECL|member|client
name|QTcpSocket
modifier|*
name|client
decl_stmt|;
DECL|member|timeout
name|int
name|timeout
decl_stmt|;
DECL|member|port
name|int
name|port
decl_stmt|;
public|public:
DECL|member|transferRate
name|qint64
name|transferRate
decl_stmt|;
DECL|function|ThreadedDataReaderHttpServer
name|ThreadedDataReaderHttpServer
parameter_list|()
member_init_list|:
name|port
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|transferRate
argument_list|(
operator|-
literal|1
argument_list|)
block|{
name|start
argument_list|()
expr_stmt|;
name|ready
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
DECL|function|serverPort
specifier|inline
name|int
name|serverPort
parameter_list|()
specifier|const
block|{
return|return
name|port
return|;
block|}
protected|protected:
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|QTcpServer
name|server
decl_stmt|;
name|server
operator|.
name|listen
argument_list|()
expr_stmt|;
name|port
operator|=
name|server
operator|.
name|serverPort
argument_list|()
expr_stmt|;
name|ready
operator|.
name|release
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|10
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|=
name|server
operator|.
name|nextPendingConnection
argument_list|()
expr_stmt|;
comment|// read lines until we read the empty line seperating HTTP request from HTTP request body
do|do
block|{
if|if
condition|(
name|client
operator|->
name|canReadLine
argument_list|()
condition|)
block|{
name|QString
name|line
init|=
name|client
operator|->
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|"\n"
operator|||
name|line
operator|==
literal|"\r\n"
condition|)
break|break;
comment|// empty line
block|}
if|if
condition|(
operator|!
name|client
operator|->
name|waitForReadyRead
argument_list|(
literal|10
operator|*
literal|1000
argument_list|)
condition|)
block|{
name|client
operator|->
name|close
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
do|while
condition|(
name|client
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
condition|)
do|;
name|client
operator|->
name|write
argument_list|(
literal|"HTTP/1.0 200 OK\r\n"
argument_list|)
expr_stmt|;
name|client
operator|->
name|write
argument_list|(
literal|"Content-length: 0\r\n"
argument_list|)
expr_stmt|;
name|client
operator|->
name|write
argument_list|(
literal|"\r\n"
argument_list|)
expr_stmt|;
name|client
operator|->
name|flush
argument_list|()
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QEventLoop
name|eventLoop
decl_stmt|;
name|DataReader
name|reader
argument_list|(
name|client
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|client
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|,
operator|&
name|eventLoop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTime
name|timer
decl_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|qint64
name|elapsed
init|=
name|timer
operator|.
name|elapsed
argument_list|()
decl_stmt|;
name|transferRate
operator|=
name|reader
operator|.
name|totalBytes
operator|*
literal|1000
operator|/
name|elapsed
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"ThreadedDataReaderHttpServer::run"
operator|<<
literal|"send rate:"
operator|<<
operator|(
name|transferRate
operator|/
literal|1024
operator|)
operator|<<
literal|"kB/s in"
operator|<<
name|elapsed
operator|<<
literal|"msec"
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|FixedSizeDataGenerator
class|class
name|FixedSizeDataGenerator
super|:
specifier|public
name|QIODevice
block|{
name|Q_OBJECT
DECL|enumerator|Idle
DECL|enumerator|Started
DECL|enumerator|Stopped
DECL|member|state
name|enum
type|{
name|Idle
decl_stmt|,
name|Started
decl_stmt|,
name|Stopped
block|}
name|state
class|;
end_class
begin_public
public|public:
DECL|function|FixedSizeDataGenerator
name|FixedSizeDataGenerator
parameter_list|(
name|qint64
name|size
parameter_list|)
member_init_list|:
name|state
argument_list|(
name|Idle
argument_list|)
block|{
name|open
argument_list|(
name|ReadOnly
operator||
name|Unbuffered
argument_list|)
expr_stmt|;
name|toBeGeneratedTotalCount
operator|=
name|toBeGeneratedCount
operator|=
name|size
expr_stmt|;
block|}
DECL|function|bytesAvailable
specifier|virtual
name|qint64
name|bytesAvailable
parameter_list|()
specifier|const
block|{
return|return
name|state
operator|==
name|Started
condition|?
name|toBeGeneratedCount
operator|+
name|QIODevice
operator|::
name|bytesAvailable
argument_list|()
else|:
literal|0
return|;
block|}
DECL|function|isSequential
specifier|virtual
name|bool
name|isSequential
parameter_list|()
specifier|const
block|{
return|return
literal|false
return|;
block|}
DECL|function|reset
specifier|virtual
name|bool
name|reset
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|function|size
name|qint64
name|size
parameter_list|()
specifier|const
block|{
return|return
name|toBeGeneratedTotalCount
return|;
block|}
end_public
begin_public
public|public
name|slots
public|:
DECL|function|start
name|void
name|start
parameter_list|()
block|{
name|state
operator|=
name|Started
expr_stmt|;
emit|emit
name|readyRead
argument_list|()
emit|;
block|}
end_public
begin_protected
protected|protected:
DECL|function|readData
specifier|virtual
name|qint64
name|readData
parameter_list|(
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|maxlen
parameter_list|)
block|{
name|memset
argument_list|(
name|data
argument_list|,
literal|'@'
argument_list|,
name|maxlen
argument_list|)
expr_stmt|;
if|if
condition|(
name|toBeGeneratedCount
operator|<=
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|qint64
name|n
init|=
name|qMin
argument_list|(
name|maxlen
argument_list|,
name|toBeGeneratedCount
argument_list|)
decl_stmt|;
name|toBeGeneratedCount
operator|-=
name|n
expr_stmt|;
if|if
condition|(
name|toBeGeneratedCount
operator|<=
literal|0
condition|)
block|{
comment|// make sure this is a queued connection!
emit|emit
name|readChannelFinished
argument_list|()
emit|;
block|}
return|return
name|n
return|;
block|}
DECL|function|writeData
specifier|virtual
name|qint64
name|writeData
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|qint64
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
DECL|member|toBeGeneratedCount
name|qint64
name|toBeGeneratedCount
decl_stmt|;
DECL|member|toBeGeneratedTotalCount
name|qint64
name|toBeGeneratedTotalCount
decl_stmt|;
end_protected
begin_class
DECL|class|HttpDownloadPerformanceServer
unit|};
class|class
name|HttpDownloadPerformanceServer
super|:
name|QObject
block|{
DECL|member|Q_OBJECT
name|Q_OBJECT
empty_stmt|;
DECL|member|dataSize
name|qint64
name|dataSize
decl_stmt|;
DECL|member|dataSent
name|qint64
name|dataSent
decl_stmt|;
DECL|member|server
name|QTcpServer
name|server
decl_stmt|;
DECL|member|client
name|QTcpSocket
modifier|*
name|client
decl_stmt|;
DECL|member|serverSendsContentLength
name|bool
name|serverSendsContentLength
decl_stmt|;
DECL|member|chunkedEncoding
name|bool
name|chunkedEncoding
decl_stmt|;
public|public:
DECL|function|HttpDownloadPerformanceServer
name|HttpDownloadPerformanceServer
parameter_list|(
name|qint64
name|ds
parameter_list|,
name|bool
name|sscl
parameter_list|,
name|bool
name|ce
parameter_list|)
member_init_list|:
name|dataSize
argument_list|(
name|ds
argument_list|)
member_init_list|,
name|dataSent
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|client
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|serverSendsContentLength
argument_list|(
name|sscl
argument_list|)
member_init_list|,
name|chunkedEncoding
argument_list|(
name|ce
argument_list|)
block|{
name|server
operator|.
name|listen
argument_list|()
expr_stmt|;
name|connect
argument_list|(
operator|&
name|server
argument_list|,
name|SIGNAL
argument_list|(
name|newConnection
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|newConnectionSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|serverPort
name|int
name|serverPort
parameter_list|()
block|{
return|return
name|server
operator|.
name|serverPort
argument_list|()
return|;
block|}
public|public
name|slots
public|:
DECL|function|newConnectionSlot
name|void
name|newConnectionSlot
parameter_list|()
block|{
name|client
operator|=
name|server
operator|.
name|nextPendingConnection
argument_list|()
expr_stmt|;
name|client
operator|->
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|client
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|readyReadSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|client
argument_list|,
name|SIGNAL
argument_list|(
name|bytesWritten
argument_list|(
name|qint64
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|bytesWrittenSlot
argument_list|(
name|qint64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|readyReadSlot
name|void
name|readyReadSlot
parameter_list|()
block|{
name|client
operator|->
name|readAll
argument_list|()
expr_stmt|;
name|client
operator|->
name|write
argument_list|(
literal|"HTTP/1.0 200 OK\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|serverSendsContentLength
condition|)
name|client
operator|->
name|write
argument_list|(
name|QString
argument_list|(
literal|"Content-Length: "
operator|+
name|QString
operator|::
name|number
argument_list|(
name|dataSize
argument_list|)
operator|+
literal|"\n"
argument_list|)
operator|.
name|toAscii
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|chunkedEncoding
condition|)
name|client
operator|->
name|write
argument_list|(
name|QString
argument_list|(
literal|"Transfer-Encoding: chunked\n"
argument_list|)
operator|.
name|toAscii
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|->
name|write
argument_list|(
literal|"Connection: close\n\n"
argument_list|)
expr_stmt|;
block|}
DECL|function|bytesWrittenSlot
name|void
name|bytesWrittenSlot
parameter_list|(
name|qint64
name|amount
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|amount
argument_list|)
expr_stmt|;
if|if
condition|(
name|dataSent
operator|==
name|dataSize
operator|&&
name|client
condition|)
block|{
comment|// close eventually
comment|// chunked encoding: we have to send a last "empty" chunk
if|if
condition|(
name|chunkedEncoding
condition|)
name|client
operator|->
name|write
argument_list|(
name|QString
argument_list|(
literal|"0\r\n\r\n"
argument_list|)
operator|.
name|toAscii
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
name|server
operator|.
name|close
argument_list|()
expr_stmt|;
name|client
operator|=
literal|0
expr_stmt|;
return|return;
block|}
comment|// send data
if|if
condition|(
name|client
operator|&&
name|client
operator|->
name|bytesToWrite
argument_list|()
operator|<
literal|100
operator|*
literal|1024
operator|&&
name|dataSent
operator|<
name|dataSize
condition|)
block|{
name|qint64
name|amount
init|=
name|qMin
argument_list|(
name|qint64
argument_list|(
literal|16
operator|*
literal|1024
argument_list|)
argument_list|,
name|dataSize
operator|-
name|dataSent
argument_list|)
decl_stmt|;
name|QByteArray
name|data
argument_list|(
name|amount
argument_list|,
literal|'@'
argument_list|)
decl_stmt|;
if|if
condition|(
name|chunkedEncoding
condition|)
block|{
name|client
operator|->
name|write
argument_list|(
name|QString
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|amount
argument_list|,
literal|0
argument_list|,
literal|16
argument_list|)
operator|.
name|toUpper
argument_list|()
operator|+
literal|"\r\n"
argument_list|)
operator|.
name|toAscii
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|->
name|write
argument_list|(
name|data
operator|.
name|constData
argument_list|()
argument_list|,
name|amount
argument_list|)
expr_stmt|;
name|client
operator|->
name|write
argument_list|(
name|QString
argument_list|(
literal|"\r\n"
argument_list|)
operator|.
name|toAscii
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|client
operator|->
name|write
argument_list|(
name|data
operator|.
name|constData
argument_list|()
argument_list|,
name|amount
argument_list|)
expr_stmt|;
block|}
name|dataSent
operator|+=
name|amount
expr_stmt|;
block|}
block|}
block|}
class|;
end_class
begin_class
DECL|class|HttpDownloadPerformanceClient
class|class
name|HttpDownloadPerformanceClient
super|:
name|QObject
block|{
DECL|member|Q_OBJECT
name|Q_OBJECT
empty_stmt|;
DECL|member|device
name|QIODevice
modifier|*
name|device
decl_stmt|;
public|public:
DECL|function|HttpDownloadPerformanceClient
name|HttpDownloadPerformanceClient
parameter_list|(
name|QIODevice
modifier|*
name|dev
parameter_list|)
member_init_list|:
name|device
argument_list|(
name|dev
argument_list|)
block|{
name|connect
argument_list|(
name|dev
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|readyReadSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
public|public
name|slots
public|:
DECL|function|readyReadSlot
name|void
name|readyReadSlot
parameter_list|()
block|{
name|device
operator|->
name|readAll
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|tst_qnetworkreply
class|class
name|tst_qnetworkreply
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
DECL|member|manager
name|QNetworkAccessManager
name|manager
decl_stmt|;
private|private
name|slots
private|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|httpLatency
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_OPENSSL
name|void
name|echoPerformance_data
parameter_list|()
function_decl|;
name|void
name|echoPerformance
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|downloadPerformance
parameter_list|()
function_decl|;
name|void
name|uploadPerformance
parameter_list|()
function_decl|;
name|void
name|performanceControlRate
parameter_list|()
function_decl|;
name|void
name|httpUploadPerformance
parameter_list|()
function_decl|;
name|void
name|httpDownloadPerformance_data
parameter_list|()
function_decl|;
name|void
name|httpDownloadPerformance
parameter_list|()
function_decl|;
name|void
name|httpDownloadPerformanceDownloadBuffer_data
parameter_list|()
function_decl|;
name|void
name|httpDownloadPerformanceDownloadBuffer
parameter_list|()
function_decl|;
name|void
name|httpsRequestChain
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|initTestCase
name|void
name|tst_qnetworkreply
operator|::
name|initTestCase
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QtNetworkSettings
operator|::
name|verifyTestNetworkSettings
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|httpLatency
name|void
name|tst_qnetworkreply
operator|::
name|httpLatency
parameter_list|()
block|{
name|QNetworkAccessManager
name|manager
decl_stmt|;
name|QBENCHMARK
block|{
name|QNetworkRequest
name|request
argument_list|(
name|QUrl
argument_list|(
literal|"http://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|+
literal|"/qtest/"
argument_list|)
argument_list|)
decl_stmt|;
name|QNetworkReply
modifier|*
name|reply
init|=
name|manager
operator|.
name|get
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|reply
expr_stmt|;
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_OPENSSL
end_ifndef
begin_function
DECL|function|echoPerformance_data
name|void
name|tst_qnetworkreply
operator|::
name|echoPerformance_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"ssl"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no_ssl"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ssl"
argument_list|)
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|echoPerformance
name|void
name|tst_qnetworkreply
operator|::
name|echoPerformance
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|ssl
argument_list|)
expr_stmt|;
name|QNetworkAccessManager
name|manager
decl_stmt|;
name|QNetworkRequest
name|request
argument_list|(
name|QUrl
argument_list|(
operator|(
name|ssl
condition|?
literal|"https://"
else|:
literal|"http://"
operator|)
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|+
literal|"/qtest/cgi-bin/echo.cgi"
argument_list|)
argument_list|)
decl_stmt|;
name|QByteArray
name|data
decl_stmt|;
name|data
operator|.
name|resize
argument_list|(
literal|1024
operator|*
literal|1024
operator|*
literal|10
argument_list|)
expr_stmt|;
comment|// 10 MB
comment|// init with garbage. needed so ssl cannot compress it in an efficient way.
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|size
argument_list|()
operator|/
sizeof|sizeof
argument_list|(
name|int
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|int
name|r
init|=
name|qrand
argument_list|()
decl_stmt|;
name|data
operator|.
name|data
argument_list|()
index|[
name|i
operator|*
sizeof|sizeof
argument_list|(
name|int
argument_list|)
index|]
operator|=
name|r
expr_stmt|;
block|}
name|QBENCHMARK
block|{
name|QNetworkReply
modifier|*
name|reply
init|=
name|manager
operator|.
name|post
argument_list|(
name|request
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|sslErrors
argument_list|(
specifier|const
name|QList
argument_list|<
name|QSslError
argument_list|>
operator|&
argument_list|)
argument_list|)
argument_list|,
name|reply
argument_list|,
name|SLOT
argument_list|(
name|ignoreSslErrors
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|reply
operator|->
name|error
argument_list|()
operator|==
name|QNetworkReply
operator|::
name|NoError
argument_list|)
expr_stmt|;
operator|delete
name|reply
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|downloadPerformance
name|void
name|tst_qnetworkreply
operator|::
name|downloadPerformance
parameter_list|()
block|{
comment|// unlike the above function, this one tries to send as fast as possible
comment|// and measures how fast it was.
name|TimedSender
name|sender
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|QNetworkRequest
name|request
argument_list|(
literal|"debugpipe://127.0.0.1:"
operator|+
name|QString
operator|::
name|number
argument_list|(
name|sender
operator|.
name|serverPort
argument_list|()
argument_list|)
operator|+
literal|"/?bare=1"
argument_list|)
decl_stmt|;
name|QNetworkReplyPtr
name|reply
init|=
name|manager
operator|.
name|get
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|DataReader
name|reader
argument_list|(
name|reply
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|QTime
name|loopTime
decl_stmt|;
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|loopTime
operator|.
name|start
argument_list|()
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|40
argument_list|)
expr_stmt|;
name|int
name|elapsedTime
init|=
name|loopTime
operator|.
name|elapsed
argument_list|()
decl_stmt|;
name|sender
operator|.
name|wait
argument_list|()
expr_stmt|;
name|qint64
name|receivedBytes
init|=
name|reader
operator|.
name|totalBytes
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"tst_QNetworkReply::downloadPerformance"
operator|<<
literal|"receive rate:"
operator|<<
operator|(
name|receivedBytes
operator|*
literal|1000
operator|/
name|elapsedTime
operator|/
literal|1024
operator|)
operator|<<
literal|"kB/s and"
operator|<<
name|elapsedTime
operator|<<
literal|"ms"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|uploadPerformance
name|void
name|tst_qnetworkreply
operator|::
name|uploadPerformance
parameter_list|()
block|{
name|ThreadedDataReader
name|reader
decl_stmt|;
name|DataGenerator
name|generator
decl_stmt|;
name|QNetworkRequest
name|request
argument_list|(
literal|"debugpipe://127.0.0.1:"
operator|+
name|QString
operator|::
name|number
argument_list|(
name|reader
operator|.
name|serverPort
argument_list|()
argument_list|)
operator|+
literal|"/?bare=1"
argument_list|)
decl_stmt|;
name|QNetworkReplyPtr
name|reply
init|=
name|manager
operator|.
name|put
argument_list|(
name|request
argument_list|,
operator|&
name|generator
argument_list|)
decl_stmt|;
name|generator
operator|.
name|start
argument_list|()
expr_stmt|;
name|connect
argument_list|(
operator|&
name|reader
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|5000
argument_list|,
operator|&
name|generator
argument_list|,
name|SLOT
argument_list|(
name|stop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|error
argument_list|()
argument_list|,
name|QNetworkReply
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|httpUploadPerformance
name|void
name|tst_qnetworkreply
operator|::
name|httpUploadPerformance
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WINCE_WM
argument_list|)
comment|// Show some mercy for non-desktop platform/s
enum|enum
block|{
name|UploadSize
init|=
literal|4
operator|*
literal|1024
operator|*
literal|1024
block|}
enum|;
comment|// 4 MB
else|#
directive|else
enum|enum
block|{
name|UploadSize
init|=
literal|128
operator|*
literal|1024
operator|*
literal|1024
block|}
enum|;
comment|// 128 MB
endif|#
directive|endif
name|ThreadedDataReaderHttpServer
name|reader
decl_stmt|;
name|FixedSizeDataGenerator
name|generator
argument_list|(
name|UploadSize
argument_list|)
decl_stmt|;
name|QNetworkRequest
name|request
argument_list|(
name|QUrl
argument_list|(
literal|"http://127.0.0.1:"
operator|+
name|QString
operator|::
name|number
argument_list|(
name|reader
operator|.
name|serverPort
argument_list|()
argument_list|)
operator|+
literal|"/?bare=1"
argument_list|)
argument_list|)
decl_stmt|;
name|request
operator|.
name|setHeader
argument_list|(
name|QNetworkRequest
operator|::
name|ContentLengthHeader
argument_list|,
name|UploadSize
argument_list|)
expr_stmt|;
name|QNetworkReplyPtr
name|reply
init|=
name|manager
operator|.
name|put
argument_list|(
name|request
argument_list|,
operator|&
name|generator
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTime
name|time
decl_stmt|;
name|generator
operator|.
name|start
argument_list|()
expr_stmt|;
name|time
operator|.
name|start
argument_list|()
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|40
argument_list|)
expr_stmt|;
name|qint64
name|elapsed
init|=
name|time
operator|.
name|elapsed
argument_list|()
decl_stmt|;
name|reader
operator|.
name|exit
argument_list|()
expr_stmt|;
name|reader
operator|.
name|wait
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|reply
operator|->
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|error
argument_list|()
argument_list|,
name|QNetworkReply
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"tst_QNetworkReply::httpUploadPerformance"
operator|<<
name|elapsed
operator|<<
literal|"msec, "
operator|<<
operator|(
operator|(
name|UploadSize
operator|/
literal|1024.0
operator|)
operator|/
operator|(
name|elapsed
operator|/
literal|1000.0
operator|)
operator|)
operator|<<
literal|" kB/sec"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|performanceControlRate
name|void
name|tst_qnetworkreply
operator|::
name|performanceControlRate
parameter_list|()
block|{
comment|// this is a control comparison for the other two above
comment|// it does the same thing, but instead bypasses the QNetworkAccess system
name|qDebug
argument_list|()
operator|<<
literal|"The following are the maximum transfer rates that we can get in this system"
literal|" (bypassing QNetworkAccess)"
expr_stmt|;
name|TimedSender
name|sender
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|QTcpSocket
name|sink
decl_stmt|;
name|sink
operator|.
name|connectToHost
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|sender
operator|.
name|serverPort
argument_list|()
argument_list|)
expr_stmt|;
name|DataReader
name|reader
argument_list|(
operator|&
name|sink
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|QTime
name|loopTime
decl_stmt|;
name|connect
argument_list|(
operator|&
name|sink
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|loopTime
operator|.
name|start
argument_list|()
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|40
argument_list|)
expr_stmt|;
name|int
name|elapsedTime
init|=
name|loopTime
operator|.
name|elapsed
argument_list|()
decl_stmt|;
name|sender
operator|.
name|wait
argument_list|()
expr_stmt|;
name|qint64
name|receivedBytes
init|=
name|reader
operator|.
name|totalBytes
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"tst_QNetworkReply::performanceControlRate"
operator|<<
literal|"receive rate:"
operator|<<
operator|(
name|receivedBytes
operator|*
literal|1000
operator|/
name|elapsedTime
operator|/
literal|1024
operator|)
operator|<<
literal|"kB/s and"
operator|<<
name|elapsedTime
operator|<<
literal|"ms"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|httpDownloadPerformance_data
name|void
name|tst_qnetworkreply
operator|::
name|httpDownloadPerformance_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"serverSendsContentLength"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"chunkedEncoding"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Server sends no Content-Length"
argument_list|)
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Server sends Content-Length"
argument_list|)
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Server uses chunked encoding"
argument_list|)
operator|<<
literal|false
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|httpDownloadPerformance
name|void
name|tst_qnetworkreply
operator|::
name|httpDownloadPerformance
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|serverSendsContentLength
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|chunkedEncoding
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WINCE_WM
argument_list|)
comment|// Show some mercy to non-desktop platform/s
enum|enum
block|{
name|UploadSize
init|=
literal|4
operator|*
literal|1024
operator|*
literal|1024
block|}
enum|;
comment|// 4 MB
else|#
directive|else
enum|enum
block|{
name|UploadSize
init|=
literal|128
operator|*
literal|1024
operator|*
literal|1024
block|}
enum|;
comment|// 128 MB
endif|#
directive|endif
name|HttpDownloadPerformanceServer
name|server
argument_list|(
name|UploadSize
argument_list|,
name|serverSendsContentLength
argument_list|,
name|chunkedEncoding
argument_list|)
decl_stmt|;
name|QNetworkRequest
name|request
argument_list|(
name|QUrl
argument_list|(
literal|"http://127.0.0.1:"
operator|+
name|QString
operator|::
name|number
argument_list|(
name|server
operator|.
name|serverPort
argument_list|()
argument_list|)
operator|+
literal|"/?bare=1"
argument_list|)
argument_list|)
decl_stmt|;
name|QNetworkReplyPtr
name|reply
init|=
name|manager
operator|.
name|get
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|HttpDownloadPerformanceClient
name|client
argument_list|(
name|reply
argument_list|)
decl_stmt|;
name|QTime
name|time
decl_stmt|;
name|time
operator|.
name|start
argument_list|()
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|40
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|error
argument_list|()
argument_list|,
name|QNetworkReply
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|qint64
name|elapsed
init|=
name|time
operator|.
name|elapsed
argument_list|()
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"tst_QNetworkReply::httpDownloadPerformance"
operator|<<
name|elapsed
operator|<<
literal|"msec, "
operator|<<
operator|(
operator|(
name|UploadSize
operator|/
literal|1024.0
operator|)
operator|/
operator|(
name|elapsed
operator|/
literal|1000.0
operator|)
operator|)
operator|<<
literal|" kB/sec"
expr_stmt|;
block|}
end_function
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_enum
DECL|enum|HttpDownloadPerformanceDownloadBufferTestType
enum|enum
name|HttpDownloadPerformanceDownloadBufferTestType
block|{
DECL|enumerator|JustDownloadBuffer
name|JustDownloadBuffer
block|,
DECL|enumerator|DownloadBufferButUseRead
name|DownloadBufferButUseRead
block|,
DECL|enumerator|NoDownloadBuffer
name|NoDownloadBuffer
block|}
enum|;
end_enum
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|HttpDownloadPerformanceDownloadBufferTestType
argument_list|)
end_macro
begin_class
DECL|class|HttpDownloadPerformanceClientDownloadBuffer
class|class
name|HttpDownloadPerformanceClientDownloadBuffer
super|:
name|QObject
block|{
name|Q_OBJECT
private|private:
DECL|member|testType
name|HttpDownloadPerformanceDownloadBufferTestType
name|testType
decl_stmt|;
DECL|member|reply
name|QNetworkReply
modifier|*
name|reply
decl_stmt|;
DECL|member|uploadSize
name|qint64
name|uploadSize
decl_stmt|;
DECL|member|bytesAvailableList
name|QList
argument_list|<
name|qint64
argument_list|>
name|bytesAvailableList
decl_stmt|;
public|public:
DECL|function|HttpDownloadPerformanceClientDownloadBuffer
name|HttpDownloadPerformanceClientDownloadBuffer
parameter_list|(
name|QNetworkReply
modifier|*
name|reply
parameter_list|,
name|HttpDownloadPerformanceDownloadBufferTestType
name|testType
parameter_list|,
name|qint64
name|uploadSize
parameter_list|)
member_init_list|:
name|testType
argument_list|(
name|testType
argument_list|)
member_init_list|,
name|reply
argument_list|(
name|reply
argument_list|)
member_init_list|,
name|uploadSize
argument_list|(
name|uploadSize
argument_list|)
block|{
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|finishedSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
public|public
name|slots
public|:
DECL|function|finishedSlot
name|void
name|finishedSlot
parameter_list|()
block|{
if|if
condition|(
name|testType
operator|==
name|JustDownloadBuffer
condition|)
block|{
comment|// We have a download buffer and use it. This should be the fastest benchmark result.
name|QVariant
name|downloadBufferAttribute
init|=
name|reply
operator|->
name|attribute
argument_list|(
name|QNetworkRequest
operator|::
name|DownloadBufferAttribute
argument_list|)
decl_stmt|;
name|QSharedPointer
argument_list|<
name|char
argument_list|>
name|data
init|=
name|downloadBufferAttribute
operator|.
name|value
argument_list|<
name|QSharedPointer
argument_list|<
name|char
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
block|}
elseif|else
if|if
condition|(
name|testType
operator|==
name|DownloadBufferButUseRead
condition|)
block|{
comment|// We had a download buffer but we benchmark here the "legacy" read() way to access it
name|char
modifier|*
name|replyData
init|=
operator|(
name|char
operator|*
operator|)
name|qMalloc
argument_list|(
name|uploadSize
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|reply
operator|->
name|read
argument_list|(
name|replyData
argument_list|,
name|uploadSize
argument_list|)
operator|==
name|uploadSize
argument_list|)
expr_stmt|;
name|qFree
argument_list|(
name|replyData
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testType
operator|==
name|NoDownloadBuffer
condition|)
block|{
comment|// We did not have a download buffer but we still need to benchmark having the data, e.g. reading it all.
comment|// This should be the slowest benchmark result.
name|char
modifier|*
name|replyData
init|=
operator|(
name|char
operator|*
operator|)
name|qMalloc
argument_list|(
name|uploadSize
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|reply
operator|->
name|read
argument_list|(
name|replyData
argument_list|,
name|uploadSize
argument_list|)
operator|==
name|uploadSize
argument_list|)
expr_stmt|;
name|qFree
argument_list|(
name|replyData
argument_list|)
expr_stmt|;
block|}
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
literal|"exitLoop"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|httpDownloadPerformanceDownloadBuffer_data
name|void
name|tst_qnetworkreply
operator|::
name|httpDownloadPerformanceDownloadBuffer_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|HttpDownloadPerformanceDownloadBufferTestType
argument_list|>
argument_list|(
literal|"testType"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"use-download-buffer"
argument_list|)
operator|<<
name|JustDownloadBuffer
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"use-download-buffer-but-use-read"
argument_list|)
operator|<<
name|DownloadBufferButUseRead
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"do-not-use-download-buffer"
argument_list|)
operator|<<
name|NoDownloadBuffer
expr_stmt|;
block|}
end_function
begin_comment
comment|// Please note that the whole "zero copy" download buffer API is private right now. Do not use it.
end_comment
begin_function
DECL|function|httpDownloadPerformanceDownloadBuffer
name|void
name|tst_qnetworkreply
operator|::
name|httpDownloadPerformanceDownloadBuffer
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|HttpDownloadPerformanceDownloadBufferTestType
argument_list|,
name|testType
argument_list|)
expr_stmt|;
comment|// On my Linux Desktop the results are already visible with 128 kB, however we use this to have good results.
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WINCE_WM
argument_list|)
comment|// Show some mercy to non-desktop platform/s
enum|enum
block|{
name|UploadSize
init|=
literal|4
operator|*
literal|1024
operator|*
literal|1024
block|}
enum|;
comment|// 4 MB
else|#
directive|else
enum|enum
block|{
name|UploadSize
init|=
literal|32
operator|*
literal|1024
operator|*
literal|1024
block|}
enum|;
comment|// 32 MB
endif|#
directive|endif
name|HttpDownloadPerformanceServer
name|server
argument_list|(
name|UploadSize
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|QNetworkRequest
name|request
argument_list|(
name|QUrl
argument_list|(
literal|"http://127.0.0.1:"
operator|+
name|QString
operator|::
name|number
argument_list|(
name|server
operator|.
name|serverPort
argument_list|()
argument_list|)
operator|+
literal|"/?bare=1"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|testType
operator|==
name|JustDownloadBuffer
operator|||
name|testType
operator|==
name|DownloadBufferButUseRead
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
name|QNetworkRequest
operator|::
name|MaximumDownloadBufferSizeAttribute
argument_list|,
literal|1024
operator|*
literal|1024
operator|*
literal|128
argument_list|)
expr_stmt|;
comment|// 128 MB is max allowed
name|QNetworkAccessManager
name|manager
decl_stmt|;
name|QNetworkReplyPtr
name|reply
init|=
name|manager
operator|.
name|get
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|HttpDownloadPerformanceClientDownloadBuffer
name|client
argument_list|(
name|reply
argument_list|,
name|testType
argument_list|,
name|UploadSize
argument_list|)
decl_stmt|;
name|QBENCHMARK_ONCE
block|{
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|40
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|error
argument_list|()
argument_list|,
name|QNetworkReply
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|reply
operator|->
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|HttpsRequestChainHelper
class|class
name|HttpsRequestChainHelper
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|member|requestList
name|QList
argument_list|<
name|QNetworkRequest
argument_list|>
name|requestList
decl_stmt|;
DECL|member|timeOneRequest
name|QElapsedTimer
name|timeOneRequest
decl_stmt|;
DECL|member|timeList
name|QList
argument_list|<
name|qint64
argument_list|>
name|timeList
decl_stmt|;
DECL|member|globalTime
name|QElapsedTimer
name|globalTime
decl_stmt|;
DECL|member|manager
name|QNetworkAccessManager
name|manager
decl_stmt|;
DECL|function|HttpsRequestChainHelper
name|HttpsRequestChainHelper
parameter_list|()
block|{     }
public|public
name|slots
public|:
DECL|function|doNextRequest
name|void
name|doNextRequest
parameter_list|()
block|{
comment|// all requests done
if|if
condition|(
name|requestList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|qobject_cast
argument_list|<
name|QNetworkReply
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// first start after DNS lookup, start timer
name|globalTime
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|QNetworkReply
modifier|*
name|reply
init|=
name|qobject_cast
argument_list|<
name|QNetworkReply
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|reply
condition|)
block|{
name|QVERIFY
argument_list|(
name|reply
operator|->
name|error
argument_list|()
operator|==
name|QNetworkReply
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"time ="
operator|<<
name|timeOneRequest
operator|.
name|elapsed
argument_list|()
operator|<<
literal|"ms"
expr_stmt|;
name|timeList
operator|.
name|append
argument_list|(
name|timeOneRequest
operator|.
name|elapsed
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QNetworkRequest
name|request
init|=
name|requestList
operator|.
name|takeFirst
argument_list|()
decl_stmt|;
name|timeOneRequest
operator|.
name|restart
argument_list|()
expr_stmt|;
name|reply
operator|=
name|manager
operator|.
name|get
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|sslErrors
argument_list|(
specifier|const
name|QList
argument_list|<
name|QSslError
argument_list|>
operator|&
argument_list|)
argument_list|)
argument_list|,
name|reply
argument_list|,
name|SLOT
argument_list|(
name|ignoreSslErrors
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|doNextRequest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|httpsRequestChain
name|void
name|tst_qnetworkreply
operator|::
name|httpsRequestChain
parameter_list|()
block|{
name|int
name|count
init|=
literal|10
decl_stmt|;
name|QNetworkRequest
name|request
argument_list|(
name|QUrl
argument_list|(
literal|"https://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|+
literal|"/fluke.gif"
argument_list|)
argument_list|)
decl_stmt|;
comment|//QNetworkRequest request(QUrl("https://www.nokia.com/robots.txt"));
comment|// Disable keep-alive so we have the full re-connecting of TCP.
name|request
operator|.
name|setRawHeader
argument_list|(
literal|"Connection"
argument_list|,
literal|"close"
argument_list|)
expr_stmt|;
name|HttpsRequestChainHelper
name|helper
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
name|helper
operator|.
name|requestList
operator|.
name|append
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// Warm up DNS cache and then immediatly start HTTP
name|QHostInfo
operator|::
name|lookupHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
operator|&
name|helper
argument_list|,
name|SLOT
argument_list|(
name|doNextRequest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//QHostInfo::lookupHost("www.nokia.com",&helper, SLOT(doNextRequest()));
comment|// we can use QBENCHMARK_ONCE when we find out how to make it really run once.
comment|// there is still a warmup-run :(
comment|//QBENCHMARK_ONCE {
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|40
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
comment|//}
name|qint64
name|elapsed
init|=
name|helper
operator|.
name|globalTime
operator|.
name|elapsed
argument_list|()
decl_stmt|;
name|qint64
name|average
init|=
operator|(
name|elapsed
operator|/
name|count
operator|)
decl_stmt|;
name|qSort
argument_list|(
name|helper
operator|.
name|timeList
argument_list|)
expr_stmt|;
name|qint64
name|median
init|=
name|helper
operator|.
name|timeList
operator|.
name|at
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Total:"
operator|<<
name|elapsed
operator|<<
literal|"   Average:"
operator|<<
name|average
operator|<<
literal|"   Median:"
operator|<<
name|median
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_qnetworkreply
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qnetworkreply.moc"
end_include
end_unit
