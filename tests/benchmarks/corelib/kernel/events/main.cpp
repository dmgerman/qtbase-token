begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore>
end_include
begin_include
include|#
directive|include
file|<qtest.h>
end_include
begin_include
include|#
directive|include
file|<qtesteventloop.h>
end_include
begin_class
DECL|class|PingPong
class|class
name|PingPong
super|:
specifier|public
name|QObject
block|{
public|public:
name|void
name|setPeer
parameter_list|(
name|QObject
modifier|*
name|peer
parameter_list|)
function_decl|;
DECL|function|resetCounter
name|void
name|resetCounter
parameter_list|()
block|{
name|m_counter
operator|=
literal|100
expr_stmt|;
block|}
protected|protected:
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
function_decl|;
private|private:
DECL|member|m_peer
name|QObject
modifier|*
name|m_peer
decl_stmt|;
DECL|member|m_counter
name|int
name|m_counter
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|setPeer
name|void
name|PingPong
operator|::
name|setPeer
parameter_list|(
name|QObject
modifier|*
name|peer
parameter_list|)
block|{
name|m_peer
operator|=
name|peer
expr_stmt|;
name|m_counter
operator|=
literal|100
expr_stmt|;
block|}
end_function
begin_function
DECL|function|event
name|bool
name|PingPong
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
parameter_list|)
block|{
operator|--
name|m_counter
expr_stmt|;
if|if
condition|(
name|m_counter
operator|>
literal|0
condition|)
block|{
name|QEvent
modifier|*
name|e
init|=
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|User
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|m_peer
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_class
DECL|class|EventTester
class|class
name|EventTester
super|:
specifier|public
name|QObject
block|{
public|public:
name|int
name|foo
parameter_list|(
name|int
name|bar
parameter_list|)
function_decl|;
protected|protected:
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|event
name|bool
name|EventTester
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|User
operator|+
literal|1
condition|)
return|return
name|foo
argument_list|(
name|e
operator|->
name|type
argument_list|()
argument_list|)
operator|!=
literal|0
return|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|foo
name|int
name|EventTester
operator|::
name|foo
parameter_list|(
name|int
name|bar
parameter_list|)
block|{
return|return
name|bar
operator|+
literal|1
return|;
block|}
end_function
begin_class
DECL|class|EventsBench
class|class
name|EventsBench
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|noEvent
parameter_list|()
function_decl|;
name|void
name|sendEvent_data
parameter_list|()
function_decl|;
name|void
name|sendEvent
parameter_list|()
function_decl|;
name|void
name|postEvent_data
parameter_list|()
function_decl|;
name|void
name|postEvent
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|initTestCase
name|void
name|EventsBench
operator|::
name|initTestCase
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|EventsBench
operator|::
name|cleanupTestCase
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|noEvent
name|void
name|EventsBench
operator|::
name|noEvent
parameter_list|()
block|{
name|EventTester
name|tst
decl_stmt|;
name|int
name|val
init|=
literal|0
decl_stmt|;
name|QBENCHMARK
block|{
name|val
operator|+=
name|tst
operator|.
name|foo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|sendEvent_data
name|void
name|EventsBench
operator|::
name|sendEvent_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"filterEvents"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no eventfilter"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"eventfilter"
argument_list|)
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendEvent
name|void
name|EventsBench
operator|::
name|sendEvent
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|filterEvents
argument_list|)
expr_stmt|;
name|EventTester
name|tst
decl_stmt|;
if|if
condition|(
name|filterEvents
condition|)
name|tst
operator|.
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|QEvent
name|evt
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|QBENCHMARK
block|{
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
operator|&
name|tst
argument_list|,
operator|&
name|evt
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|postEvent_data
name|void
name|EventsBench
operator|::
name|postEvent_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"filterEvents"
argument_list|)
expr_stmt|;
comment|// The first time an eventloop is executed, the case runs radically slower at least
comment|// on some platforms, so test the "no eventfilter" case to get a comparable results
comment|// with the "eventfilter" case.
name|QTest
operator|::
name|newRow
argument_list|(
literal|"first time, no eventfilter"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no eventfilter"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"eventfilter"
argument_list|)
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|postEvent
name|void
name|EventsBench
operator|::
name|postEvent
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|filterEvents
argument_list|)
expr_stmt|;
name|PingPong
name|ping
decl_stmt|;
name|PingPong
name|pong
decl_stmt|;
name|ping
operator|.
name|setPeer
argument_list|(
operator|&
name|pong
argument_list|)
expr_stmt|;
name|pong
operator|.
name|setPeer
argument_list|(
operator|&
name|ping
argument_list|)
expr_stmt|;
if|if
condition|(
name|filterEvents
condition|)
block|{
name|ping
operator|.
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|pong
operator|.
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|QBENCHMARK
block|{
comment|// In case multiple iterations are done, event needs to be created inside the QBENCHMARK,
comment|// or it gets deleted once first iteration exits and can cause a crash. Similarly,
comment|// ping and pong need their counters reset.
name|QEvent
modifier|*
name|e
init|=
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|User
argument_list|)
decl_stmt|;
name|ping
operator|.
name|resetCounter
argument_list|()
expr_stmt|;
name|pong
operator|.
name|resetCounter
argument_list|()
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|ping
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|61
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|EventsBench
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"main.moc"
end_include
end_unit
