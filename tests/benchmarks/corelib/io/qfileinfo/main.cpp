begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<qtest.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtCore/QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QtCore/QFileInfo>
end_include
begin_include
include|#
directive|include
file|<QtCore/QFile>
end_include
begin_include
include|#
directive|include
file|"private/qfsfileengine_p.h"
end_include
begin_include
include|#
directive|include
file|"../../../../shared/filesystem.h"
end_include
begin_class
DECL|class|qfileinfo
class|class
name|qfileinfo
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|canonicalFileNamePerformance
parameter_list|()
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|void
name|symLinkTargetPerformanceLNK
parameter_list|()
function_decl|;
name|void
name|symLinkTargetPerformanceMounpoint
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
public|public:
DECL|function|qfileinfo
name|qfileinfo
parameter_list|()
member_init_list|:
name|QObject
argument_list|()
block|{}
empty_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|initTestCase
name|void
name|qfileinfo
operator|::
name|initTestCase
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|qfileinfo
operator|::
name|cleanupTestCase
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|canonicalFileNamePerformance
name|void
name|qfileinfo
operator|::
name|canonicalFileNamePerformance
parameter_list|()
block|{
name|QString
name|appPath
init|=
name|QCoreApplication
operator|::
name|applicationFilePath
argument_list|()
decl_stmt|;
name|QFSFileEnginePrivate
operator|::
name|canonicalized
argument_list|(
name|appPath
argument_list|)
expr_stmt|;
comment|// warmup
name|QFSFileEnginePrivate
operator|::
name|canonicalized
argument_list|(
name|appPath
argument_list|)
expr_stmt|;
comment|// more warmup
name|QBENCHMARK
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5000
condition|;
name|i
operator|++
control|)
block|{
name|QFSFileEnginePrivate
operator|::
name|canonicalized
argument_list|(
name|appPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_function
DECL|function|symLinkTargetPerformanceLNK
name|void
name|qfileinfo
operator|::
name|symLinkTargetPerformanceLNK
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|link
argument_list|(
literal|"file"
argument_list|,
literal|"link.lnk"
argument_list|)
argument_list|)
expr_stmt|;
name|QFileInfo
name|info
argument_list|(
literal|"link.lnk"
argument_list|)
decl_stmt|;
name|info
operator|.
name|setCaching
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|info
operator|.
name|isSymLink
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|linkTarget
decl_stmt|;
name|QBENCHMARK
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
name|linkTarget
operator|=
name|info
operator|.
name|readLink
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|remove
argument_list|(
literal|"link.lnk"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|symLinkTargetPerformanceMounpoint
name|void
name|qfileinfo
operator|::
name|symLinkTargetPerformanceMounpoint
parameter_list|()
block|{
name|wchar_t
name|buffer
index|[
name|MAX_PATH
index|]
decl_stmt|;
name|QString
name|rootPath
init|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|QDir
operator|::
name|rootPath
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|GetVolumeNameForVolumeMountPointW
argument_list|(
name|rootPath
operator|.
name|utf16
argument_list|()
argument_list|,
name|buffer
argument_list|,
name|MAX_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|rootVolume
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|QString
name|mountpoint
init|=
literal|"mountpoint"
decl_stmt|;
name|rootVolume
operator|.
name|replace
argument_list|(
literal|"\\\\?\\"
argument_list|,
literal|"\\??\\"
argument_list|)
expr_stmt|;
name|FileSystem
operator|::
name|createNtfsJunction
argument_list|(
name|rootVolume
argument_list|,
name|mountpoint
argument_list|)
expr_stmt|;
name|QFileInfo
name|info
argument_list|(
name|mountpoint
argument_list|)
decl_stmt|;
name|info
operator|.
name|setCaching
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|info
operator|.
name|isSymLink
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|linkTarget
decl_stmt|;
name|QBENCHMARK
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
name|linkTarget
operator|=
name|info
operator|.
name|readLink
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|QDir
argument_list|()
operator|.
name|rmdir
argument_list|(
name|mountpoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QTEST_MAIN
argument_list|(
argument|qfileinfo
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"main.moc"
end_include
end_unit
