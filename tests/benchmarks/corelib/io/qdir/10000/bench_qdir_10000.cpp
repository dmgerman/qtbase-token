begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WIN
end_ifdef
begin_include
include|#
directive|include
file|<windows.h>
end_include
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|<sys/stat.h>
end_include
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<dirent.h>
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|bench_QDir_10000
class|class
name|bench_QDir_10000
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
DECL|function|initTestCase
name|void
name|initTestCase
parameter_list|()
block|{
name|QDir
name|testdir
init|=
name|QDir
operator|::
name|tempPath
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|subfolder_name
init|=
name|QLatin1String
argument_list|(
literal|"test_speed"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|testdir
operator|.
name|mkdir
argument_list|(
name|subfolder_name
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testdir
operator|.
name|cd
argument_list|(
name|subfolder_name
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|uint
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
operator|++
name|i
control|)
block|{
name|QFile
name|file
argument_list|(
name|testdir
operator|.
name|absolutePath
argument_list|()
operator|+
literal|"/testfile_"
operator|+
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|cleanupTestCase
name|void
name|cleanupTestCase
parameter_list|()
block|{
block|{
name|QDir
name|testdir
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/test_speed"
argument_list|)
argument_list|)
decl_stmt|;
name|testdir
operator|.
name|setSorting
argument_list|(
name|QDir
operator|::
name|Unsorted
argument_list|)
expr_stmt|;
name|testdir
operator|.
name|setFilter
argument_list|(
name|QDir
operator|::
name|AllEntries
operator||
name|QDir
operator|::
name|System
operator||
name|QDir
operator|::
name|Hidden
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|filename
decl|,
name|testdir
operator|.
name|entryList
argument_list|()
control|)
block|{
name|testdir
operator|.
name|remove
argument_list|(
name|filename
argument_list|)
expr_stmt|;
block|}
block|}
specifier|const
name|QDir
name|temp
init|=
name|QDir
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
argument_list|)
decl_stmt|;
name|temp
operator|.
name|rmdir
argument_list|(
name|QLatin1String
argument_list|(
literal|"test_speed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
private|private
name|slots
private|:
DECL|function|baseline
name|void
name|baseline
parameter_list|()
block|{}
DECL|function|sizeSpeed
name|void
name|sizeSpeed
parameter_list|()
block|{
name|QDir
name|testdir
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/test_speed"
argument_list|)
argument_list|)
decl_stmt|;
name|QBENCHMARK
block|{
name|QFileInfoList
name|fileInfoList
init|=
name|testdir
operator|.
name|entryInfoList
argument_list|(
name|QDir
operator|::
name|Files
argument_list|,
name|QDir
operator|::
name|Unsorted
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QFileInfo
modifier|&
name|fileInfo
decl|,
name|fileInfoList
control|)
block|{
name|fileInfo
operator|.
name|isDir
argument_list|()
expr_stmt|;
name|fileInfo
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|sizeSpeedIterator
name|void
name|sizeSpeedIterator
parameter_list|()
block|{
name|QDir
name|testdir
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/test_speed"
argument_list|)
argument_list|)
decl_stmt|;
name|QBENCHMARK
block|{
name|QDirIterator
name|dit
argument_list|(
name|testdir
operator|.
name|path
argument_list|()
argument_list|,
name|QDir
operator|::
name|Files
argument_list|)
decl_stmt|;
while|while
condition|(
name|dit
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|dit
operator|.
name|next
argument_list|()
expr_stmt|;
name|dit
operator|.
name|fileInfo
argument_list|()
operator|.
name|isDir
argument_list|()
expr_stmt|;
name|dit
operator|.
name|fileInfo
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|sizeSpeedWithoutFilter
name|void
name|sizeSpeedWithoutFilter
parameter_list|()
block|{
name|QDir
name|testdir
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/test_speed"
argument_list|)
argument_list|)
decl_stmt|;
name|QBENCHMARK
block|{
name|QFileInfoList
name|fileInfoList
init|=
name|testdir
operator|.
name|entryInfoList
argument_list|(
name|QDir
operator|::
name|NoFilter
argument_list|,
name|QDir
operator|::
name|Unsorted
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QFileInfo
modifier|&
name|fileInfo
decl|,
name|fileInfoList
control|)
block|{
name|fileInfo
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|sizeSpeedWithoutFilterIterator
name|void
name|sizeSpeedWithoutFilterIterator
parameter_list|()
block|{
name|QDir
name|testdir
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/test_speed"
argument_list|)
argument_list|)
decl_stmt|;
name|QBENCHMARK
block|{
name|QDirIterator
name|dit
argument_list|(
name|testdir
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|dit
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|dit
operator|.
name|next
argument_list|()
expr_stmt|;
name|dit
operator|.
name|fileInfo
argument_list|()
operator|.
name|isDir
argument_list|()
expr_stmt|;
name|dit
operator|.
name|fileInfo
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|sizeSpeedWithoutFileInfoList
name|void
name|sizeSpeedWithoutFileInfoList
parameter_list|()
block|{
name|QDir
name|testdir
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/test_speed"
argument_list|)
argument_list|)
decl_stmt|;
name|testdir
operator|.
name|setSorting
argument_list|(
name|QDir
operator|::
name|Unsorted
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
name|QStringList
name|fileList
init|=
name|testdir
operator|.
name|entryList
argument_list|(
name|QDir
operator|::
name|NoFilter
argument_list|,
name|QDir
operator|::
name|Unsorted
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|filename
decl|,
name|fileList
control|)
block|{
name|QFileInfo
name|fileInfo
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|fileInfo
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|iDontWantAnyStat
name|void
name|iDontWantAnyStat
parameter_list|()
block|{
name|QDir
name|testdir
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/test_speed"
argument_list|)
argument_list|)
decl_stmt|;
name|testdir
operator|.
name|setSorting
argument_list|(
name|QDir
operator|::
name|Unsorted
argument_list|)
expr_stmt|;
name|testdir
operator|.
name|setFilter
argument_list|(
name|QDir
operator|::
name|AllEntries
operator||
name|QDir
operator|::
name|System
operator||
name|QDir
operator|::
name|Hidden
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
name|QStringList
name|fileList
init|=
name|testdir
operator|.
name|entryList
argument_list|(
name|QDir
operator|::
name|NoFilter
argument_list|,
name|QDir
operator|::
name|Unsorted
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|filename
decl|,
name|fileList
control|)
block|{              }
block|}
block|}
DECL|function|iDontWantAnyStatIterator
name|void
name|iDontWantAnyStatIterator
parameter_list|()
block|{
name|QBENCHMARK
block|{
name|QDirIterator
name|dit
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/test_speed"
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|dit
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|dit
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|sorted_byTime
name|void
name|sorted_byTime
parameter_list|()
block|{
name|QDir
name|testdir
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/test_speed"
argument_list|)
argument_list|)
decl_stmt|;
name|testdir
operator|.
name|setSorting
argument_list|(
name|QDir
operator|::
name|Time
argument_list|)
expr_stmt|;
name|testdir
operator|.
name|setFilter
argument_list|(
name|QDir
operator|::
name|AllEntries
operator||
name|QDir
operator|::
name|System
operator||
name|QDir
operator|::
name|Hidden
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
name|QStringList
name|fileList
init|=
name|testdir
operator|.
name|entryList
argument_list|(
name|QDir
operator|::
name|NoFilter
argument_list|,
name|QDir
operator|::
name|Time
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|filename
decl|,
name|fileList
control|)
block|{              }
block|}
block|}
DECL|function|sizeSpeedWithoutFilterLowLevel
name|void
name|sizeSpeedWithoutFilterLowLevel
parameter_list|()
block|{
name|QDir
name|testdir
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/test_speed"
argument_list|)
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
specifier|const
name|wchar_t
modifier|*
name|dirpath
init|=
operator|(
name|wchar_t
operator|*
operator|)
name|testdir
operator|.
name|absolutePath
argument_list|()
operator|.
name|utf16
argument_list|()
decl_stmt|;
name|wchar_t
name|appendedPath
index|[
name|MAX_PATH
index|]
decl_stmt|;
name|wcscpy
argument_list|(
name|appendedPath
argument_list|,
name|dirpath
argument_list|)
expr_stmt|;
name|wcscat
argument_list|(
name|appendedPath
argument_list|,
literal|L"\\*"
argument_list|)
expr_stmt|;
name|WIN32_FIND_DATA
name|fd
decl_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINRT
name|HANDLE
name|hSearch
init|=
name|FindFirstFileW
argument_list|(
name|appendedPath
argument_list|,
operator|&
name|fd
argument_list|)
decl_stmt|;
else|#
directive|else
name|HANDLE
name|hSearch
init|=
name|FindFirstFileEx
argument_list|(
name|appendedPath
argument_list|,
name|FindExInfoStandard
argument_list|,
operator|&
name|fd
argument_list|,
name|FindExSearchNameMatch
argument_list|,
name|NULL
argument_list|,
name|FIND_FIRST_EX_LARGE_FETCH
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|hSearch
operator|!=
name|INVALID_HANDLE_VALUE
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
do|do
block|{              }
do|while
condition|(
name|FindNextFile
argument_list|(
name|hSearch
argument_list|,
operator|&
name|fd
argument_list|)
condition|)
do|;
block|}
name|FindClose
argument_list|(
name|hSearch
argument_list|)
expr_stmt|;
else|#
directive|else
name|DIR
modifier|*
name|dir
init|=
name|opendir
argument_list|(
name|qPrintable
argument_list|(
name|testdir
operator|.
name|absolutePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|chdir
argument_list|(
name|qPrintable
argument_list|(
name|testdir
operator|.
name|absolutePath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
name|struct
name|dirent
modifier|*
name|item
init|=
name|readdir
argument_list|(
name|dir
argument_list|)
decl_stmt|;
while|while
condition|(
name|item
condition|)
block|{
name|char
modifier|*
name|fileName
init|=
name|item
operator|->
name|d_name
decl_stmt|;
name|struct
name|stat
name|fileStat
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|stat
argument_list|(
name|fileName
argument_list|,
operator|&
name|fileStat
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|=
name|readdir
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
name|closedir
argument_list|(
name|dir
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
class|;
end_class
begin_macro
name|QTEST_MAIN
argument_list|(
argument|bench_QDir_10000
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"bench_qdir_10000.moc"
end_include
end_unit
